internal class Locale : object {
    public static string GetText(string msg);
    public static string GetText(string fmt, Object[] args);
}
[AttributeUsageAttribute("4380")]
internal class MapAttribute : Attribute {
    private string nativeType;
    private string suppressFlags;
    public string NativeType { get; }
    public string SuppressFlags { get; public set; }
    public MapAttribute(string nativeType);
    public string get_NativeType();
    public string get_SuppressFlags();
    public void set_SuppressFlags(string value);
}
[FlagsAttribute]
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("Use Mono.Unix.Native.AccessModes")]
public enum Mono.Posix.AccessMode : Enum {
    public int value__;
    public static AccessMode R_OK;
    public static AccessMode W_OK;
    public static AccessMode X_OK;
    public static AccessMode F_OK;
}
[ObsoleteAttribute("Use Mono.Unix.Catalog")]
public class Mono.Posix.Catalog : object {
    private static IntPtr bindtextdomain(IntPtr domainname, IntPtr dirname);
    private static IntPtr bind_textdomain_codeset(IntPtr domainname, IntPtr codeset);
    private static IntPtr textdomain(IntPtr domainname);
    public static void Init(string package, string localedir);
    private static IntPtr gettext(IntPtr instring);
    public static string GetString(string s);
    private static IntPtr ngettext(IntPtr singular, IntPtr plural, int n);
    public static string GetPluralString(string s, string p, int n);
}
[FlagsAttribute]
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions")]
public enum Mono.Posix.FileMode : Enum {
    public int value__;
    public static FileMode S_ISUID;
    public static FileMode S_ISGID;
    public static FileMode S_ISVTX;
    public static FileMode S_IRUSR;
    public static FileMode S_IWUSR;
    public static FileMode S_IXUSR;
    public static FileMode S_IRGRP;
    public static FileMode S_IWGRP;
    public static FileMode S_IXGRP;
    public static FileMode S_IROTH;
    public static FileMode S_IWOTH;
    public static FileMode S_IXOTH;
}
[FlagsAttribute]
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("Use Mono.Unix.Native.OpenFlags")]
public enum Mono.Posix.OpenFlags : Enum {
    public int value__;
    public static OpenFlags O_RDONLY;
    public static OpenFlags O_WRONLY;
    public static OpenFlags O_RDWR;
    public static OpenFlags O_CREAT;
    public static OpenFlags O_EXCL;
    public static OpenFlags O_NOCTTY;
    public static OpenFlags O_TRUNC;
    public static OpenFlags O_APPEND;
    public static OpenFlags O_NONBLOCK;
    public static OpenFlags O_SYNC;
}
[ObsoleteAttribute("Use Mono.Unix.PeerCred")]
public class Mono.Posix.PeerCred : object {
    private static int so_peercred;
    private PeerCredData data;
    public int ProcessID { get; }
    public int UserID { get; }
    public int GroupID { get; }
    public PeerCred(Socket sock);
    public int get_ProcessID();
    public int get_UserID();
    public int get_GroupID();
}
internal class Mono.Posix.PeerCredData : ValueType {
    public int pid;
    public int uid;
    public int gid;
}
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("Use Mono.Unix.Native.Signum")]
public enum Mono.Posix.Signals : Enum {
    public int value__;
    public static Signals SIGHUP;
    public static Signals SIGINT;
    public static Signals SIGQUIT;
    public static Signals SIGILL;
    public static Signals SIGTRAP;
    public static Signals SIGABRT;
    public static Signals SIGBUS;
    public static Signals SIGFPE;
    public static Signals SIGKILL;
    public static Signals SIGUSR1;
    public static Signals SIGSEGV;
    public static Signals SIGUSR2;
    public static Signals SIGPIPE;
    public static Signals SIGALRM;
    public static Signals SIGTERM;
    public static Signals SIGCHLD;
    public static Signals SIGCONT;
    public static Signals SIGSTOP;
    public static Signals SIGTSTP;
    public static Signals SIGTTIN;
    public static Signals SIGTTOU;
    public static Signals SIGURG;
    public static Signals SIGXCPU;
    public static Signals SIGXFSZ;
    public static Signals SIGVTALRM;
    public static Signals SIGPROF;
    public static Signals SIGWINCH;
    public static Signals SIGIO;
    public static Signals SIGSYS;
}
[ObsoleteAttribute("Use Mono.Unix.Native.Stat")]
public class Mono.Posix.Stat : ValueType {
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_dev")]
public int Device;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_ino")]
public int INode;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_mode")]
public StatMode Mode;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_nlink")]
public int NLinks;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_uid")]
public int Uid;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_gid")]
public int Gid;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_rdev")]
public long DeviceType;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_size")]
public long Size;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_blksize")]
public long BlockSize;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_blocks")]
public long Blocks;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_atime")]
public DateTime ATime;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_mtime")]
public DateTime MTime;
    [ObsoleteAttribute("Use Mono.Unix.Native.Stat.st_ctime")]
public DateTime CTime;
    [ObsoleteAttribute("Use Mono.Unix.Native.NativeConvert.LocalUnixEpoch")]
public static DateTime UnixEpoch;
    internal Stat(int device, int inode, int mode, int nlinks, int uid, int gid, int rdev, long size, long blksize, long blocks, long atime, long mtime, long ctime);
    private static Stat();
    [ObsoleteAttribute("Use Mono.Unix.Native.NativeConvert.ToDateTime")]
public static DateTime UnixToDateTime(long unix);
}
[FlagsAttribute]
[ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions")]
public enum Mono.Posix.StatMode : Enum {
    public int value__;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFSOCK")]
public static StatMode Socket;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFLNK")]
public static StatMode SymLink;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFREG")]
public static StatMode Regular;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFBLK")]
public static StatMode BlockDevice;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFDIR")]
public static StatMode Directory;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFCHR")]
public static StatMode CharDevice;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFIFO")]
public static StatMode FIFO;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_ISUID")]
public static StatMode SUid;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_ISGID")]
public static StatMode SGid;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_ISVTX")]
public static StatMode Sticky;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IRUSR")]
public static StatMode OwnerRead;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IWUSR")]
public static StatMode OwnerWrite;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IXUSR")]
public static StatMode OwnerExecute;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IRGRP")]
public static StatMode GroupRead;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IWGRP")]
public static StatMode GroupWrite;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IXGRP")]
public static StatMode GroupExecute;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IROTH")]
public static StatMode OthersRead;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IWOTH")]
public static StatMode OthersWrite;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IXOTH")]
public static StatMode OthersExecute;
}
[ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions")]
public enum Mono.Posix.StatModeMasks : Enum {
    public int value__;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_IFMT")]
public static StatModeMasks TypeMask;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_RWXU")]
public static StatModeMasks OwnerMask;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_RWXG")]
public static StatModeMasks GroupMask;
    [ObsoleteAttribute("Use Mono.Unix.Native.FilePermissions.S_RWXO")]
public static StatModeMasks OthersMask;
}
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("Use Mono.Unix.Native.Syscall.")]
public class Mono.Posix.Syscall : object {
    public static int exit(int status);
    public static int fork();
    public static IntPtr read(int fileDescriptor, Void* buf, IntPtr count);
    public static IntPtr write(int fileDescriptor, Void* buf, IntPtr count);
    internal static int syscall_open(string pathname, int flags, int mode);
    internal static int map_Mono_Posix_OpenFlags(OpenFlags flags);
    internal static int map_Mono_Posix_FileMode(FileMode mode);
    public static int open(string pathname, OpenFlags flags);
    public static int open(string pathname, OpenFlags flags, FileMode mode);
    public static int close(int fileDescriptor);
    internal static int syscall_waitpid(int pid, Int32* status, int options);
    internal static int map_Mono_Posix_WaitOptions(WaitOptions wait_options);
    public static int waitpid(int pid, Int32& status, WaitOptions options);
    public static int waitpid(int pid, WaitOptions options);
    public static int WIFEXITED(int status);
    public static int WEXITSTATUS(int status);
    public static int WIFSIGNALED(int status);
    public static int WTERMSIG(int status);
    public static int WIFSTOPPED(int status);
    public static int WSTOPSIG(int status);
    internal static int syscall_creat(string pathname, int flags);
    public static int creat(string pathname, FileMode flags);
    public static int link(string oldPath, string newPath);
    public static int unlink(string path);
    public static int symlink(string oldpath, string newpath);
    public static int chdir(string path);
    internal static int syscall_chmod(string path, int mode);
    public static int chmod(string path, FileMode mode);
    public static int chown(string path, int owner, int group);
    public static int lchown(string path, int owner, int group);
    public static int lseek(int fileDescriptor, int offset, int whence);
    public static int getpid();
    public static int setuid(int uid);
    public static int getuid();
    public static UInt32 alarm(UInt32 seconds);
    public static int pause();
    internal static int syscall_access(string pathname, int mode);
    internal static int map_Mono_Posix_AccessMode(AccessMode mode);
    public static int access(string pathname, AccessMode mode);
    public static int nice(int increment);
    public static void sync();
    public static void kill(int pid, int sig);
    public static int rename(string oldPath, string newPath);
    internal static int syscall_mkdir(string pathname, int mode);
    public static int mkdir(string pathname, FileMode mode);
    public static int rmdir(string path);
    public static int dup(int fileDescriptor);
    public static int setgid(int gid);
    public static int getgid();
    public static int signal(int signum, sighandler_t handler);
    public static int geteuid();
    public static int getegid();
    public static int setpgid(int pid, int pgid);
    public static int umask(int umask);
    public static int chroot(string path);
    public static int dup2(int oldFileDescriptor, int newFileDescriptor);
    public static int getppid();
    public static int getpgrp();
    public static int setsid();
    public static int setreuid(int ruid, int euid);
    public static int setregid(int rgid, int egid);
    private static string helper_Mono_Posix_GetUserName(int uid);
    private static string helper_Mono_Posix_GetGroupName(int gid);
    public static string getusername(int uid);
    public static string getgroupname(int gid);
    private static int syscall_gethostname(Byte[] p, int len);
    public static string GetHostName();
    [CLSCompliantAttribute("False")]
public static string gethostname();
    private static int syscall_isatty(int desc);
    public static bool isatty(int desc);
    internal static int helper_Mono_Posix_Stat(string filename, bool dereference, Int32& device, Int32& inode, Int32& mode, Int32& nlinks, Int32& uid, Int32& gid, Int32& rdev, Int64& size, Int64& blksize, Int64& blocks, Int64& atime, Int64& mtime, Int64& ctime);
    private static int stat2(string filename, bool dereference, Stat& stat);
    public static int stat(string filename, Stat& stat);
    public static int lstat(string filename, Stat& stat);
    private static int readlink(string path, Byte[] buffer, int buflen);
    public static string readlink(string path);
    private static IntPtr _strerror(int errnum);
    public static string strerror(int errnum);
    public static IntPtr opendir(string path);
    public static int closedir(IntPtr dir);
    public static string readdir(IntPtr dir);
}
[ObsoleteAttribute("Use Mono.Unix.UnixEndPoint")]
public class Mono.Posix.UnixEndPoint : EndPoint {
    private string filename;
    public string Filename { get; public set; }
    public AddressFamily AddressFamily { get; }
    public UnixEndPoint(string filename);
    public string get_Filename();
    public void set_Filename(string value);
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
[FlagsAttribute]
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("Use Mono.Unix.Native.WaitOptions")]
public enum Mono.Posix.WaitOptions : Enum {
    public int value__;
    public static WaitOptions WNOHANG;
    public static WaitOptions WUNTRACED;
}
public class Mono.Unix.AbstractUnixEndPoint : EndPoint {
    private string path;
    public string Path { get; public set; }
    public AddressFamily AddressFamily { get; }
    public AbstractUnixEndPoint(string path);
    public string get_Path();
    public void set_Path(string value);
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
public class Mono.Unix.Catalog : object {
    private static IntPtr bindtextdomain(IntPtr domainname, IntPtr dirname);
    private static IntPtr bind_textdomain_codeset(IntPtr domainname, IntPtr codeset);
    private static IntPtr textdomain(IntPtr domainname);
    public static void Init(string package, string localedir);
    private static void MarshalStrings(string s1, IntPtr& p1, string s2, IntPtr& p2, string s3, IntPtr& p3);
    private static IntPtr gettext(IntPtr instring);
    public static string GetString(string s);
    private static IntPtr ngettext(IntPtr singular, IntPtr plural, int n);
    public static string GetPluralString(string s, string p, int n);
}
internal class Mono.Unix.ErrorMarshal : object {
    internal static ErrorTranslator Translate;
    private static ErrorMarshal();
    private static string strerror(Errno errno);
    private static string strerror_r(Errno errno);
}
public enum Mono.Unix.FileAccessPattern : Enum {
    public int value__;
    public static FileAccessPattern Normal;
    public static FileAccessPattern Sequential;
    public static FileAccessPattern Random;
    public static FileAccessPattern NoReuse;
    public static FileAccessPattern PreLoad;
    public static FileAccessPattern FlushCache;
}
[FlagsAttribute]
public enum Mono.Unix.FileAccessPermissions : Enum {
    public int value__;
    public static FileAccessPermissions UserReadWriteExecute;
    public static FileAccessPermissions UserRead;
    public static FileAccessPermissions UserWrite;
    public static FileAccessPermissions UserExecute;
    public static FileAccessPermissions GroupReadWriteExecute;
    public static FileAccessPermissions GroupRead;
    public static FileAccessPermissions GroupWrite;
    public static FileAccessPermissions GroupExecute;
    public static FileAccessPermissions OtherReadWriteExecute;
    public static FileAccessPermissions OtherRead;
    public static FileAccessPermissions OtherWrite;
    public static FileAccessPermissions OtherExecute;
    public static FileAccessPermissions DefaultPermissions;
    public static FileAccessPermissions AllPermissions;
}
public class Mono.Unix.FileHandleOperations : object {
    public static void AdviseFileAccessPattern(int fd, FileAccessPattern pattern, long offset, long len);
    public static void AdviseFileAccessPattern(int fd, FileAccessPattern pattern);
    public static void AdviseFileAccessPattern(FileStream file, FileAccessPattern pattern, long offset, long len);
    public static void AdviseFileAccessPattern(FileStream file, FileAccessPattern pattern);
    public static void AdviseFileAccessPattern(UnixStream stream, FileAccessPattern pattern, long offset, long len);
    public static void AdviseFileAccessPattern(UnixStream stream, FileAccessPattern pattern);
}
[FlagsAttribute]
public enum Mono.Unix.FileSpecialAttributes : Enum {
    public int value__;
    public static FileSpecialAttributes SetUserId;
    public static FileSpecialAttributes SetGroupId;
    public static FileSpecialAttributes Sticky;
}
public enum Mono.Unix.FileTypes : Enum {
    public int value__;
    public static FileTypes Directory;
    public static FileTypes CharacterDevice;
    public static FileTypes BlockDevice;
    public static FileTypes RegularFile;
    public static FileTypes Fifo;
    public static FileTypes SymbolicLink;
    public static FileTypes Socket;
}
[MapAttribute]
internal class Mono.Unix.Native._SockaddrDynamic : ValueType {
    public SockaddrType type;
    public UnixAddressFamily sa_family;
    public Byte* data;
    public long len;
    public _SockaddrDynamic(Sockaddr address, Byte* data, bool useMaxLength);
    public void Update(Sockaddr address);
}
[MapAttribute]
internal class Mono.Unix.Native._SockaddrHeader : ValueType {
    internal SockaddrType type;
    internal UnixAddressFamily sa_family;
}
[FlagsAttribute]
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.AccessModes : Enum {
    public int value__;
    public static AccessModes R_OK;
    public static AccessModes W_OK;
    public static AccessModes X_OK;
    public static AccessModes F_OK;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.AtFlags : Enum {
    public int value__;
    public static AtFlags AT_SYMLINK_NOFOLLOW;
    public static AtFlags AT_REMOVEDIR;
    public static AtFlags AT_SYMLINK_FOLLOW;
    public static AtFlags AT_NO_AUTOMOUNT;
    public static AtFlags AT_EMPTY_PATH;
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.blkcnt_tAttribute : MapAttribute {
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.blksize_tAttribute : MapAttribute {
}
[MapAttribute("struct cmsghdr")]
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.Cmsghdr : ValueType {
    public long cmsg_len;
    public UnixSocketProtocol cmsg_level;
    public UnixSocketControlMessage cmsg_type;
    private static int size;
    public static int Size { get; }
    private static Cmsghdr();
    private static int getsize();
    public static int get_Size();
    public static Cmsghdr ReadFromBuffer(Msghdr msgh, long cmsg);
    public void WriteToBuffer(Msghdr msgh, long cmsg);
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.ConfstrName : Enum {
    public int value__;
    public static ConfstrName _CS_PATH;
    public static ConfstrName _CS_V6_WIDTH_RESTRICTED_ENVS;
    public static ConfstrName _CS_GNU_LIBC_VERSION;
    public static ConfstrName _CS_GNU_LIBPTHREAD_VERSION;
    public static ConfstrName _CS_LFS_CFLAGS;
    public static ConfstrName _CS_LFS_LDFLAGS;
    public static ConfstrName _CS_LFS_LIBS;
    public static ConfstrName _CS_LFS_LINTFLAGS;
    public static ConfstrName _CS_LFS64_CFLAGS;
    public static ConfstrName _CS_LFS64_LDFLAGS;
    public static ConfstrName _CS_LFS64_LIBS;
    public static ConfstrName _CS_LFS64_LINTFLAGS;
    public static ConfstrName _CS_XBS5_ILP32_OFF32_CFLAGS;
    public static ConfstrName _CS_XBS5_ILP32_OFF32_LDFLAGS;
    public static ConfstrName _CS_XBS5_ILP32_OFF32_LIBS;
    public static ConfstrName _CS_XBS5_ILP32_OFF32_LINTFLAGS;
    public static ConfstrName _CS_XBS5_ILP32_OFFBIG_CFLAGS;
    public static ConfstrName _CS_XBS5_ILP32_OFFBIG_LDFLAGS;
    public static ConfstrName _CS_XBS5_ILP32_OFFBIG_LIBS;
    public static ConfstrName _CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
    public static ConfstrName _CS_XBS5_LP64_OFF64_CFLAGS;
    public static ConfstrName _CS_XBS5_LP64_OFF64_LDFLAGS;
    public static ConfstrName _CS_XBS5_LP64_OFF64_LIBS;
    public static ConfstrName _CS_XBS5_LP64_OFF64_LINTFLAGS;
    public static ConfstrName _CS_XBS5_LPBIG_OFFBIG_CFLAGS;
    public static ConfstrName _CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
    public static ConfstrName _CS_XBS5_LPBIG_OFFBIG_LIBS;
    public static ConfstrName _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFF32_CFLAGS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFF32_LIBS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_LIBS;
    public static ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
    public static ConfstrName _CS_POSIX_V6_LP64_OFF64_CFLAGS;
    public static ConfstrName _CS_POSIX_V6_LP64_OFF64_LDFLAGS;
    public static ConfstrName _CS_POSIX_V6_LP64_OFF64_LIBS;
    public static ConfstrName _CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
    public static ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
    public static ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
    public static ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
    public static ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.dev_tAttribute : MapAttribute {
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.DirectoryNotifyFlags : Enum {
    public int value__;
    public static DirectoryNotifyFlags DN_ACCESS;
    public static DirectoryNotifyFlags DN_MODIFY;
    public static DirectoryNotifyFlags DN_CREATE;
    public static DirectoryNotifyFlags DN_DELETE;
    public static DirectoryNotifyFlags DN_RENAME;
    public static DirectoryNotifyFlags DN_ATTRIB;
    public static DirectoryNotifyFlags DN_MULTISHOT;
}
public class Mono.Unix.Native.Dirent : object {
    [CLSCompliantAttribute("False")]
public ulong d_ino;
    public long d_off;
    [CLSCompliantAttribute("False")]
public ushort d_reclen;
    public byte d_type;
    public string d_name;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Dirent value);
    public virtual string ToString();
    public static bool op_Equality(Dirent lhs, Dirent rhs);
    public static bool op_Inequality(Dirent lhs, Dirent rhs);
}
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.EpollEvent : ValueType {
    public EpollEvents events;
    public int fd;
    public IntPtr ptr;
    public UInt32 u32;
    public ulong u64;
}
[FlagsAttribute]
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.EpollEvents : Enum {
    public UInt32 value__;
    public static EpollEvents EPOLLIN;
    public static EpollEvents EPOLLPRI;
    public static EpollEvents EPOLLOUT;
    public static EpollEvents EPOLLRDNORM;
    public static EpollEvents EPOLLRDBAND;
    public static EpollEvents EPOLLWRNORM;
    public static EpollEvents EPOLLWRBAND;
    public static EpollEvents EPOLLMSG;
    public static EpollEvents EPOLLERR;
    public static EpollEvents EPOLLHUP;
    public static EpollEvents EPOLLRDHUP;
    public static EpollEvents EPOLLONESHOT;
    public static EpollEvents EPOLLET;
}
[FlagsAttribute]
[MapAttribute]
public enum Mono.Unix.Native.EpollFlags : Enum {
    public int value__;
    public static EpollFlags EPOLL_CLOEXEC;
    public static EpollFlags EPOLL_NONBLOCK;
}
public enum Mono.Unix.Native.EpollOp : Enum {
    public int value__;
    public static EpollOp EPOLL_CTL_ADD;
    public static EpollOp EPOLL_CTL_DEL;
    public static EpollOp EPOLL_CTL_MOD;
}
[MapAttribute]
public enum Mono.Unix.Native.Errno : Enum {
    public int value__;
    public static Errno EPERM;
    public static Errno ENOENT;
    public static Errno ESRCH;
    public static Errno EINTR;
    public static Errno EIO;
    public static Errno ENXIO;
    public static Errno E2BIG;
    public static Errno ENOEXEC;
    public static Errno EBADF;
    public static Errno ECHILD;
    public static Errno EAGAIN;
    public static Errno ENOMEM;
    public static Errno EACCES;
    public static Errno EFAULT;
    public static Errno ENOTBLK;
    public static Errno EBUSY;
    public static Errno EEXIST;
    public static Errno EXDEV;
    public static Errno ENODEV;
    public static Errno ENOTDIR;
    public static Errno EISDIR;
    public static Errno EINVAL;
    public static Errno ENFILE;
    public static Errno EMFILE;
    public static Errno ENOTTY;
    public static Errno ETXTBSY;
    public static Errno EFBIG;
    public static Errno ENOSPC;
    public static Errno ESPIPE;
    public static Errno EROFS;
    public static Errno EMLINK;
    public static Errno EPIPE;
    public static Errno EDOM;
    public static Errno ERANGE;
    public static Errno EDEADLK;
    public static Errno ENAMETOOLONG;
    public static Errno ENOLCK;
    public static Errno ENOSYS;
    public static Errno ENOTEMPTY;
    public static Errno ELOOP;
    public static Errno EWOULDBLOCK;
    public static Errno ENOMSG;
    public static Errno EIDRM;
    public static Errno ECHRNG;
    public static Errno EL2NSYNC;
    public static Errno EL3HLT;
    public static Errno EL3RST;
    public static Errno ELNRNG;
    public static Errno EUNATCH;
    public static Errno ENOCSI;
    public static Errno EL2HLT;
    public static Errno EBADE;
    public static Errno EBADR;
    public static Errno EXFULL;
    public static Errno ENOANO;
    public static Errno EBADRQC;
    public static Errno EBADSLT;
    public static Errno EDEADLOCK;
    public static Errno EBFONT;
    public static Errno ENOSTR;
    public static Errno ENODATA;
    public static Errno ETIME;
    public static Errno ENOSR;
    public static Errno ENONET;
    public static Errno ENOPKG;
    public static Errno EREMOTE;
    public static Errno ENOLINK;
    public static Errno EADV;
    public static Errno ESRMNT;
    public static Errno ECOMM;
    public static Errno EPROTO;
    public static Errno EMULTIHOP;
    public static Errno EDOTDOT;
    public static Errno EBADMSG;
    public static Errno EOVERFLOW;
    public static Errno ENOTUNIQ;
    public static Errno EBADFD;
    public static Errno EREMCHG;
    public static Errno ELIBACC;
    public static Errno ELIBBAD;
    public static Errno ELIBSCN;
    public static Errno ELIBMAX;
    public static Errno ELIBEXEC;
    public static Errno EILSEQ;
    public static Errno ERESTART;
    public static Errno ESTRPIPE;
    public static Errno EUSERS;
    public static Errno ENOTSOCK;
    public static Errno EDESTADDRREQ;
    public static Errno EMSGSIZE;
    public static Errno EPROTOTYPE;
    public static Errno ENOPROTOOPT;
    public static Errno EPROTONOSUPPORT;
    public static Errno ESOCKTNOSUPPORT;
    public static Errno EOPNOTSUPP;
    public static Errno EPFNOSUPPORT;
    public static Errno EAFNOSUPPORT;
    public static Errno EADDRINUSE;
    public static Errno EADDRNOTAVAIL;
    public static Errno ENETDOWN;
    public static Errno ENETUNREACH;
    public static Errno ENETRESET;
    public static Errno ECONNABORTED;
    public static Errno ECONNRESET;
    public static Errno ENOBUFS;
    public static Errno EISCONN;
    public static Errno ENOTCONN;
    public static Errno ESHUTDOWN;
    public static Errno ETOOMANYREFS;
    public static Errno ETIMEDOUT;
    public static Errno ECONNREFUSED;
    public static Errno EHOSTDOWN;
    public static Errno EHOSTUNREACH;
    public static Errno EALREADY;
    public static Errno EINPROGRESS;
    public static Errno ESTALE;
    public static Errno EUCLEAN;
    public static Errno ENOTNAM;
    public static Errno ENAVAIL;
    public static Errno EISNAM;
    public static Errno EREMOTEIO;
    public static Errno EDQUOT;
    public static Errno ENOMEDIUM;
    public static Errno EMEDIUMTYPE;
    public static Errno ECANCELED;
    public static Errno ENOKEY;
    public static Errno EKEYEXPIRED;
    public static Errno EKEYREVOKED;
    public static Errno EKEYREJECTED;
    public static Errno EOWNERDEAD;
    public static Errno ENOTRECOVERABLE;
    public static Errno EPROCLIM;
    public static Errno EBADRPC;
    public static Errno ERPCMISMATCH;
    public static Errno EPROGUNAVAIL;
    public static Errno EPROGMISMATCH;
    public static Errno EPROCUNAVAIL;
    public static Errno EFTYPE;
    public static Errno EAUTH;
    public static Errno ENEEDAUTH;
    public static Errno EPWROFF;
    public static Errno EDEVERR;
    public static Errno EBADEXEC;
    public static Errno EBADARCH;
    public static Errno ESHLIBVERS;
    public static Errno EBADMACHO;
    public static Errno ENOATTR;
    public static Errno ENOPOLICY;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.FcntlCommand : Enum {
    public int value__;
    public static FcntlCommand F_DUPFD;
    public static FcntlCommand F_GETFD;
    public static FcntlCommand F_SETFD;
    public static FcntlCommand F_GETFL;
    public static FcntlCommand F_SETFL;
    public static FcntlCommand F_GETLK;
    public static FcntlCommand F_SETLK;
    public static FcntlCommand F_SETLKW;
    public static FcntlCommand F_SETOWN;
    public static FcntlCommand F_GETOWN;
    public static FcntlCommand F_SETSIG;
    public static FcntlCommand F_GETSIG;
    public static FcntlCommand F_NOCACHE;
    public static FcntlCommand F_SETLEASE;
    public static FcntlCommand F_GETLEASE;
    public static FcntlCommand F_NOTIFY;
}
internal class Mono.Unix.Native.FileNameMarshaler : object {
    private static FileNameMarshaler Instance;
    private static FileNameMarshaler();
    public static ICustomMarshaler GetInstance(string s);
    public sealed virtual void CleanUpManagedData(object o);
    public sealed virtual void CleanUpNativeData(IntPtr pNativeData);
    public sealed virtual int GetNativeDataSize();
    public sealed virtual IntPtr MarshalManagedToNative(object obj);
    public sealed virtual object MarshalNativeToManaged(IntPtr pNativeData);
}
[FlagsAttribute]
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.FilePermissions : Enum {
    public UInt32 value__;
    public static FilePermissions S_ISUID;
    public static FilePermissions S_ISGID;
    public static FilePermissions S_ISVTX;
    public static FilePermissions S_IRUSR;
    public static FilePermissions S_IWUSR;
    public static FilePermissions S_IXUSR;
    public static FilePermissions S_IRGRP;
    public static FilePermissions S_IWGRP;
    public static FilePermissions S_IXGRP;
    public static FilePermissions S_IROTH;
    public static FilePermissions S_IWOTH;
    public static FilePermissions S_IXOTH;
    public static FilePermissions S_IRWXG;
    public static FilePermissions S_IRWXU;
    public static FilePermissions S_IRWXO;
    public static FilePermissions ACCESSPERMS;
    public static FilePermissions ALLPERMS;
    public static FilePermissions DEFFILEMODE;
    public static FilePermissions S_IFMT;
    [MapAttribute]
public static FilePermissions S_IFDIR;
    [MapAttribute]
public static FilePermissions S_IFCHR;
    [MapAttribute]
public static FilePermissions S_IFBLK;
    [MapAttribute]
public static FilePermissions S_IFREG;
    [MapAttribute]
public static FilePermissions S_IFIFO;
    [MapAttribute]
public static FilePermissions S_IFLNK;
    [MapAttribute]
public static FilePermissions S_IFSOCK;
}
public class Mono.Unix.Native.FilePosition : MarshalByRefObject {
    private static int FilePositionDumpSize;
    private HandleRef pos;
    internal HandleRef Handle { get; }
    private static FilePosition();
    internal HandleRef get_Handle();
    public sealed virtual void Dispose();
    private void Cleanup();
    public virtual string ToString();
    private string GetDump();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FilePosition value);
    public virtual int GetHashCode();
    protected virtual override void Finalize();
    public static bool op_Equality(FilePosition lhs, FilePosition rhs);
    public static bool op_Inequality(FilePosition lhs, FilePosition rhs);
}
[MapAttribute("struct flock")]
public class Mono.Unix.Native.Flock : ValueType {
    [CLSCompliantAttribute("False")]
public LockType l_type;
    [CLSCompliantAttribute("False")]
public SeekFlags l_whence;
    [off_tAttribute]
public long l_start;
    [off_tAttribute]
public long l_len;
    [pid_tAttribute]
public int l_pid;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Flock value);
    public static bool op_Equality(Flock lhs, Flock rhs);
    public static bool op_Inequality(Flock lhs, Flock rhs);
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.fsblkcnt_tAttribute : MapAttribute {
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.fsfilcnt_tAttribute : MapAttribute {
}
public class Mono.Unix.Native.Fstab : object {
    public string fs_spec;
    public string fs_file;
    public string fs_vfstype;
    public string fs_mntops;
    public string fs_type;
    public int fs_freq;
    public int fs_passno;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Fstab value);
    public virtual string ToString();
    public static bool op_Equality(Fstab lhs, Fstab rhs);
    public static bool op_Inequality(Fstab lhs, Fstab rhs);
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.gid_tAttribute : MapAttribute {
}
public class Mono.Unix.Native.Group : object {
    public string gr_name;
    public string gr_passwd;
    [CLSCompliantAttribute("False")]
public UInt32 gr_gid;
    public String[] gr_mem;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Group value);
    public virtual string ToString();
    private static void GetMembers(StringBuilder sb, String[] members);
    public static bool op_Equality(Group lhs, Group rhs);
    public static bool op_Inequality(Group lhs, Group rhs);
}
[DefaultMemberAttribute("Item")]
[MapAttribute]
public class Mono.Unix.Native.In6Addr : ValueType {
    private ulong addr0;
    private ulong addr1;
    public byte Item { get; public set; }
    public In6Addr(Byte[] buffer);
    public void CopyFrom(Byte[] source, int startIndex);
    public void CopyTo(Byte[] destination, int startIndex);
    public byte get_Item(int index);
    public void set_Item(int index, byte value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(In6Addr value);
}
[DefaultMemberAttribute("Item")]
[MapAttribute]
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.InAddr : ValueType {
    public UInt32 s_addr;
    public byte Item { get; public set; }
    public InAddr(byte b0, byte b1, byte b2, byte b3);
    public InAddr(Byte[] buffer);
    public void CopyFrom(Byte[] source, int startIndex);
    public void CopyTo(Byte[] destination, int startIndex);
    public byte get_Item(int index);
    public void set_Item(int index, byte value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InAddr value);
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.ino_tAttribute : MapAttribute {
}
[MapAttribute("struct iovec")]
public class Mono.Unix.Native.Iovec : ValueType {
    public IntPtr iov_base;
    [CLSCompliantAttribute("False")]
public ulong iov_len;
}
[MapAttribute("struct linger")]
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.Linger : ValueType {
    public int l_onoff;
    public int l_linger;
    public virtual string ToString();
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.LockfCommand : Enum {
    public int value__;
    public static LockfCommand F_ULOCK;
    public static LockfCommand F_LOCK;
    public static LockfCommand F_TLOCK;
    public static LockfCommand F_TEST;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.LockType : Enum {
    public short value__;
    public static LockType F_RDLCK;
    public static LockType F_WRLCK;
    public static LockType F_UNLCK;
}
[FlagsAttribute]
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.MessageFlags : Enum {
    public int value__;
    public static MessageFlags MSG_OOB;
    public static MessageFlags MSG_PEEK;
    public static MessageFlags MSG_DONTROUTE;
    public static MessageFlags MSG_CTRUNC;
    public static MessageFlags MSG_PROXY;
    public static MessageFlags MSG_TRUNC;
    public static MessageFlags MSG_DONTWAIT;
    public static MessageFlags MSG_EOR;
    public static MessageFlags MSG_WAITALL;
    public static MessageFlags MSG_FIN;
    public static MessageFlags MSG_SYN;
    public static MessageFlags MSG_CONFIRM;
    public static MessageFlags MSG_RST;
    public static MessageFlags MSG_ERRQUEUE;
    public static MessageFlags MSG_NOSIGNAL;
    public static MessageFlags MSG_MORE;
    public static MessageFlags MSG_WAITFORONE;
    public static MessageFlags MSG_FASTOPEN;
    public static MessageFlags MSG_CMSG_CLOEXEC;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.MlockallFlags : Enum {
    public int value__;
    public static MlockallFlags MCL_CURRENT;
    public static MlockallFlags MCL_FUTURE;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.MmapFlags : Enum {
    public int value__;
    public static MmapFlags MAP_SHARED;
    public static MmapFlags MAP_PRIVATE;
    public static MmapFlags MAP_TYPE;
    public static MmapFlags MAP_FIXED;
    public static MmapFlags MAP_FILE;
    public static MmapFlags MAP_ANONYMOUS;
    public static MmapFlags MAP_ANON;
    public static MmapFlags MAP_GROWSDOWN;
    public static MmapFlags MAP_DENYWRITE;
    public static MmapFlags MAP_EXECUTABLE;
    public static MmapFlags MAP_LOCKED;
    public static MmapFlags MAP_NORESERVE;
    public static MmapFlags MAP_POPULATE;
    public static MmapFlags MAP_NONBLOCK;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.MmapProts : Enum {
    public int value__;
    public static MmapProts PROT_READ;
    public static MmapProts PROT_WRITE;
    public static MmapProts PROT_EXEC;
    public static MmapProts PROT_NONE;
    public static MmapProts PROT_GROWSDOWN;
    public static MmapProts PROT_GROWSUP;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.MountFlags : Enum {
    public ulong value__;
    public static MountFlags ST_RDONLY;
    public static MountFlags ST_NOSUID;
    public static MountFlags ST_NODEV;
    public static MountFlags ST_NOEXEC;
    public static MountFlags ST_SYNCHRONOUS;
    public static MountFlags ST_REMOUNT;
    public static MountFlags ST_MANDLOCK;
    public static MountFlags ST_WRITE;
    public static MountFlags ST_APPEND;
    public static MountFlags ST_IMMUTABLE;
    public static MountFlags ST_NOATIME;
    public static MountFlags ST_NODIRATIME;
    public static MountFlags ST_BIND;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.MremapFlags : Enum {
    public ulong value__;
    public static MremapFlags MREMAP_MAYMOVE;
}
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.Msghdr : object {
    public Sockaddr msg_name;
    public Iovec[] msg_iov;
    public int msg_iovlen;
    public Byte[] msg_control;
    public long msg_controllen;
    public MessageFlags msg_flags;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.MsyncFlags : Enum {
    public int value__;
    public static MsyncFlags MS_ASYNC;
    public static MsyncFlags MS_SYNC;
    public static MsyncFlags MS_INVALIDATE;
}
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.NativeConvert : object {
    public static DateTime UnixEpoch;
    public static DateTime LocalUnixEpoch;
    public static TimeSpan LocalUtcOffset;
    private static String[][] fopen_modes;
    private static string LIB;
    private static NativeConvert();
    private static int FromRealTimeSignum(int offset, Int32& rval);
    public static int FromRealTimeSignum(RealTimeSignum sig);
    public static RealTimeSignum ToRealTimeSignum(int offset);
    public static FilePermissions FromOctalPermissionString(string value);
    public static string ToOctalPermissionString(FilePermissions value);
    public static FilePermissions FromUnixPermissionString(string value);
    private static FilePermissions GetUnixPermissionDevice(char value);
    private static FilePermissions GetUnixPermissionGroup(char read, FilePermissions readb, char write, FilePermissions writeb, char exec, FilePermissions execb, char xboth, char xbitonly, FilePermissions xbit);
    public static string ToUnixPermissionString(FilePermissions value);
    private static void SetUnixPermissionGroup(FilePermissions value, Char[] access, int index, FilePermissions read, FilePermissions write, FilePermissions exec, char both, char setonly, FilePermissions setxbit);
    private static char GetSymbolicMode(FilePermissions value, FilePermissions xbit, char both, char setonly, FilePermissions setxbit);
    public static DateTime ToDateTime(long time);
    public static DateTime ToDateTime(long time, long nanoTime);
    public static long FromDateTime(DateTime time);
    public static DateTime FromTimeT(long time);
    public static long ToTimeT(DateTime time);
    public static OpenFlags ToOpenFlags(FileMode mode, FileAccess access);
    public static string ToFopenMode(FileAccess access);
    public static string ToFopenMode(FileMode mode);
    public static string ToFopenMode(FileMode mode, FileAccess access);
    private static int FromStat(Stat& source, IntPtr destination);
    public static bool TryCopy(Stat& source, IntPtr destination);
    private static int ToStat(IntPtr source, Stat& destination);
    public static bool TryCopy(IntPtr source, Stat& destination);
    private static int FromStatvfs(Statvfs& source, IntPtr destination);
    public static bool TryCopy(Statvfs& source, IntPtr destination);
    private static int ToStatvfs(IntPtr source, Statvfs& destination);
    public static bool TryCopy(IntPtr source, Statvfs& destination);
    private static int FromInAddr(InAddr& source, IntPtr destination);
    public static bool TryCopy(InAddr& source, IntPtr destination);
    private static int ToInAddr(IntPtr source, InAddr& destination);
    public static bool TryCopy(IntPtr source, InAddr& destination);
    private static int FromIn6Addr(In6Addr& source, IntPtr destination);
    public static bool TryCopy(In6Addr& source, IntPtr destination);
    private static int ToIn6Addr(IntPtr source, In6Addr& destination);
    public static bool TryCopy(IntPtr source, In6Addr& destination);
    public static InAddr ToInAddr(IPAddress address);
    public static IPAddress ToIPAddress(InAddr address);
    public static In6Addr ToIn6Addr(IPAddress address);
    public static IPAddress ToIPAddress(In6Addr address);
    private static int FromSockaddr(_SockaddrHeader* source, IntPtr destination);
    public static bool TryCopy(Sockaddr source, IntPtr destination);
    private static int ToSockaddr(IntPtr source, long size, _SockaddrHeader* destination);
    public static bool TryCopy(IntPtr source, long size, Sockaddr destination);
    private static void ThrowArgumentException(object value);
    private static int FromAccessModes(AccessModes value, Int32& rval);
    public static bool TryFromAccessModes(AccessModes value, Int32& rval);
    public static int FromAccessModes(AccessModes value);
    private static int ToAccessModes(int value, AccessModes& rval);
    public static bool TryToAccessModes(int value, AccessModes& rval);
    public static AccessModes ToAccessModes(int value);
    private static int FromAtFlags(AtFlags value, Int32& rval);
    public static bool TryFromAtFlags(AtFlags value, Int32& rval);
    public static int FromAtFlags(AtFlags value);
    private static int ToAtFlags(int value, AtFlags& rval);
    public static bool TryToAtFlags(int value, AtFlags& rval);
    public static AtFlags ToAtFlags(int value);
    private static int FromCmsghdr(Cmsghdr& source, IntPtr destination);
    public static bool TryCopy(Cmsghdr& source, IntPtr destination);
    private static int ToCmsghdr(IntPtr source, Cmsghdr& destination);
    public static bool TryCopy(IntPtr source, Cmsghdr& destination);
    private static int FromConfstrName(ConfstrName value, Int32& rval);
    public static bool TryFromConfstrName(ConfstrName value, Int32& rval);
    public static int FromConfstrName(ConfstrName value);
    private static int ToConfstrName(int value, ConfstrName& rval);
    public static bool TryToConfstrName(int value, ConfstrName& rval);
    public static ConfstrName ToConfstrName(int value);
    private static int FromDirectoryNotifyFlags(DirectoryNotifyFlags value, Int32& rval);
    public static bool TryFromDirectoryNotifyFlags(DirectoryNotifyFlags value, Int32& rval);
    public static int FromDirectoryNotifyFlags(DirectoryNotifyFlags value);
    private static int ToDirectoryNotifyFlags(int value, DirectoryNotifyFlags& rval);
    public static bool TryToDirectoryNotifyFlags(int value, DirectoryNotifyFlags& rval);
    public static DirectoryNotifyFlags ToDirectoryNotifyFlags(int value);
    private static int FromEpollEvents(EpollEvents value, UInt32& rval);
    public static bool TryFromEpollEvents(EpollEvents value, UInt32& rval);
    public static UInt32 FromEpollEvents(EpollEvents value);
    private static int ToEpollEvents(UInt32 value, EpollEvents& rval);
    public static bool TryToEpollEvents(UInt32 value, EpollEvents& rval);
    public static EpollEvents ToEpollEvents(UInt32 value);
    private static int FromEpollFlags(EpollFlags value, Int32& rval);
    public static bool TryFromEpollFlags(EpollFlags value, Int32& rval);
    public static int FromEpollFlags(EpollFlags value);
    private static int ToEpollFlags(int value, EpollFlags& rval);
    public static bool TryToEpollFlags(int value, EpollFlags& rval);
    public static EpollFlags ToEpollFlags(int value);
    private static int FromErrno(Errno value, Int32& rval);
    public static bool TryFromErrno(Errno value, Int32& rval);
    public static int FromErrno(Errno value);
    private static int ToErrno(int value, Errno& rval);
    public static bool TryToErrno(int value, Errno& rval);
    public static Errno ToErrno(int value);
    private static int FromFcntlCommand(FcntlCommand value, Int32& rval);
    public static bool TryFromFcntlCommand(FcntlCommand value, Int32& rval);
    public static int FromFcntlCommand(FcntlCommand value);
    private static int ToFcntlCommand(int value, FcntlCommand& rval);
    public static bool TryToFcntlCommand(int value, FcntlCommand& rval);
    public static FcntlCommand ToFcntlCommand(int value);
    private static int FromFilePermissions(FilePermissions value, UInt32& rval);
    public static bool TryFromFilePermissions(FilePermissions value, UInt32& rval);
    public static UInt32 FromFilePermissions(FilePermissions value);
    private static int ToFilePermissions(UInt32 value, FilePermissions& rval);
    public static bool TryToFilePermissions(UInt32 value, FilePermissions& rval);
    public static FilePermissions ToFilePermissions(UInt32 value);
    private static int FromFlock(Flock& source, IntPtr destination);
    public static bool TryCopy(Flock& source, IntPtr destination);
    private static int ToFlock(IntPtr source, Flock& destination);
    public static bool TryCopy(IntPtr source, Flock& destination);
    private static int FromIovec(Iovec& source, IntPtr destination);
    public static bool TryCopy(Iovec& source, IntPtr destination);
    private static int ToIovec(IntPtr source, Iovec& destination);
    public static bool TryCopy(IntPtr source, Iovec& destination);
    private static int FromLinger(Linger& source, IntPtr destination);
    public static bool TryCopy(Linger& source, IntPtr destination);
    private static int ToLinger(IntPtr source, Linger& destination);
    public static bool TryCopy(IntPtr source, Linger& destination);
    private static int FromLockType(LockType value, Int16& rval);
    public static bool TryFromLockType(LockType value, Int16& rval);
    public static short FromLockType(LockType value);
    private static int ToLockType(short value, LockType& rval);
    public static bool TryToLockType(short value, LockType& rval);
    public static LockType ToLockType(short value);
    private static int FromLockfCommand(LockfCommand value, Int32& rval);
    public static bool TryFromLockfCommand(LockfCommand value, Int32& rval);
    public static int FromLockfCommand(LockfCommand value);
    private static int ToLockfCommand(int value, LockfCommand& rval);
    public static bool TryToLockfCommand(int value, LockfCommand& rval);
    public static LockfCommand ToLockfCommand(int value);
    private static int FromMessageFlags(MessageFlags value, Int32& rval);
    public static bool TryFromMessageFlags(MessageFlags value, Int32& rval);
    public static int FromMessageFlags(MessageFlags value);
    private static int ToMessageFlags(int value, MessageFlags& rval);
    public static bool TryToMessageFlags(int value, MessageFlags& rval);
    public static MessageFlags ToMessageFlags(int value);
    private static int FromMlockallFlags(MlockallFlags value, Int32& rval);
    public static bool TryFromMlockallFlags(MlockallFlags value, Int32& rval);
    public static int FromMlockallFlags(MlockallFlags value);
    private static int ToMlockallFlags(int value, MlockallFlags& rval);
    public static bool TryToMlockallFlags(int value, MlockallFlags& rval);
    public static MlockallFlags ToMlockallFlags(int value);
    private static int FromMmapFlags(MmapFlags value, Int32& rval);
    public static bool TryFromMmapFlags(MmapFlags value, Int32& rval);
    public static int FromMmapFlags(MmapFlags value);
    private static int ToMmapFlags(int value, MmapFlags& rval);
    public static bool TryToMmapFlags(int value, MmapFlags& rval);
    public static MmapFlags ToMmapFlags(int value);
    private static int FromMmapProts(MmapProts value, Int32& rval);
    public static bool TryFromMmapProts(MmapProts value, Int32& rval);
    public static int FromMmapProts(MmapProts value);
    private static int ToMmapProts(int value, MmapProts& rval);
    public static bool TryToMmapProts(int value, MmapProts& rval);
    public static MmapProts ToMmapProts(int value);
    private static int FromMountFlags(MountFlags value, UInt64& rval);
    public static bool TryFromMountFlags(MountFlags value, UInt64& rval);
    public static ulong FromMountFlags(MountFlags value);
    private static int ToMountFlags(ulong value, MountFlags& rval);
    public static bool TryToMountFlags(ulong value, MountFlags& rval);
    public static MountFlags ToMountFlags(ulong value);
    private static int FromMremapFlags(MremapFlags value, UInt64& rval);
    public static bool TryFromMremapFlags(MremapFlags value, UInt64& rval);
    public static ulong FromMremapFlags(MremapFlags value);
    private static int ToMremapFlags(ulong value, MremapFlags& rval);
    public static bool TryToMremapFlags(ulong value, MremapFlags& rval);
    public static MremapFlags ToMremapFlags(ulong value);
    private static int FromMsyncFlags(MsyncFlags value, Int32& rval);
    public static bool TryFromMsyncFlags(MsyncFlags value, Int32& rval);
    public static int FromMsyncFlags(MsyncFlags value);
    private static int ToMsyncFlags(int value, MsyncFlags& rval);
    public static bool TryToMsyncFlags(int value, MsyncFlags& rval);
    public static MsyncFlags ToMsyncFlags(int value);
    private static int FromOpenFlags(OpenFlags value, Int32& rval);
    public static bool TryFromOpenFlags(OpenFlags value, Int32& rval);
    public static int FromOpenFlags(OpenFlags value);
    private static int ToOpenFlags(int value, OpenFlags& rval);
    public static bool TryToOpenFlags(int value, OpenFlags& rval);
    public static OpenFlags ToOpenFlags(int value);
    private static int FromPathconfName(PathconfName value, Int32& rval);
    public static bool TryFromPathconfName(PathconfName value, Int32& rval);
    public static int FromPathconfName(PathconfName value);
    private static int ToPathconfName(int value, PathconfName& rval);
    public static bool TryToPathconfName(int value, PathconfName& rval);
    public static PathconfName ToPathconfName(int value);
    private static int FromPollEvents(PollEvents value, Int16& rval);
    public static bool TryFromPollEvents(PollEvents value, Int16& rval);
    public static short FromPollEvents(PollEvents value);
    private static int ToPollEvents(short value, PollEvents& rval);
    public static bool TryToPollEvents(short value, PollEvents& rval);
    public static PollEvents ToPollEvents(short value);
    private static int FromPollfd(Pollfd& source, IntPtr destination);
    public static bool TryCopy(Pollfd& source, IntPtr destination);
    private static int ToPollfd(IntPtr source, Pollfd& destination);
    public static bool TryCopy(IntPtr source, Pollfd& destination);
    private static int FromPosixFadviseAdvice(PosixFadviseAdvice value, Int32& rval);
    public static bool TryFromPosixFadviseAdvice(PosixFadviseAdvice value, Int32& rval);
    public static int FromPosixFadviseAdvice(PosixFadviseAdvice value);
    private static int ToPosixFadviseAdvice(int value, PosixFadviseAdvice& rval);
    public static bool TryToPosixFadviseAdvice(int value, PosixFadviseAdvice& rval);
    public static PosixFadviseAdvice ToPosixFadviseAdvice(int value);
    private static int FromPosixMadviseAdvice(PosixMadviseAdvice value, Int32& rval);
    public static bool TryFromPosixMadviseAdvice(PosixMadviseAdvice value, Int32& rval);
    public static int FromPosixMadviseAdvice(PosixMadviseAdvice value);
    private static int ToPosixMadviseAdvice(int value, PosixMadviseAdvice& rval);
    public static bool TryToPosixMadviseAdvice(int value, PosixMadviseAdvice& rval);
    public static PosixMadviseAdvice ToPosixMadviseAdvice(int value);
    private static int FromSeekFlags(SeekFlags value, Int16& rval);
    public static bool TryFromSeekFlags(SeekFlags value, Int16& rval);
    public static short FromSeekFlags(SeekFlags value);
    private static int ToSeekFlags(short value, SeekFlags& rval);
    public static bool TryToSeekFlags(short value, SeekFlags& rval);
    public static SeekFlags ToSeekFlags(short value);
    private static int FromShutdownOption(ShutdownOption value, Int32& rval);
    public static bool TryFromShutdownOption(ShutdownOption value, Int32& rval);
    public static int FromShutdownOption(ShutdownOption value);
    private static int ToShutdownOption(int value, ShutdownOption& rval);
    public static bool TryToShutdownOption(int value, ShutdownOption& rval);
    public static ShutdownOption ToShutdownOption(int value);
    private static int FromSignum(Signum value, Int32& rval);
    public static bool TryFromSignum(Signum value, Int32& rval);
    public static int FromSignum(Signum value);
    private static int ToSignum(int value, Signum& rval);
    public static bool TryToSignum(int value, Signum& rval);
    public static Signum ToSignum(int value);
    private static int FromSockaddrIn(SockaddrIn source, IntPtr destination);
    public static bool TryCopy(SockaddrIn source, IntPtr destination);
    private static int ToSockaddrIn(IntPtr source, SockaddrIn destination);
    public static bool TryCopy(IntPtr source, SockaddrIn destination);
    private static int FromSockaddrIn6(SockaddrIn6 source, IntPtr destination);
    public static bool TryCopy(SockaddrIn6 source, IntPtr destination);
    private static int ToSockaddrIn6(IntPtr source, SockaddrIn6 destination);
    public static bool TryCopy(IntPtr source, SockaddrIn6 destination);
    private static int FromSockaddrType(SockaddrType value, Int32& rval);
    internal static bool TryFromSockaddrType(SockaddrType value, Int32& rval);
    internal static int FromSockaddrType(SockaddrType value);
    private static int ToSockaddrType(int value, SockaddrType& rval);
    internal static bool TryToSockaddrType(int value, SockaddrType& rval);
    internal static SockaddrType ToSockaddrType(int value);
    private static int FromSysconfName(SysconfName value, Int32& rval);
    public static bool TryFromSysconfName(SysconfName value, Int32& rval);
    public static int FromSysconfName(SysconfName value);
    private static int ToSysconfName(int value, SysconfName& rval);
    public static bool TryToSysconfName(int value, SysconfName& rval);
    public static SysconfName ToSysconfName(int value);
    private static int FromSyslogFacility(SyslogFacility value, Int32& rval);
    public static bool TryFromSyslogFacility(SyslogFacility value, Int32& rval);
    public static int FromSyslogFacility(SyslogFacility value);
    private static int ToSyslogFacility(int value, SyslogFacility& rval);
    public static bool TryToSyslogFacility(int value, SyslogFacility& rval);
    public static SyslogFacility ToSyslogFacility(int value);
    private static int FromSyslogLevel(SyslogLevel value, Int32& rval);
    public static bool TryFromSyslogLevel(SyslogLevel value, Int32& rval);
    public static int FromSyslogLevel(SyslogLevel value);
    private static int ToSyslogLevel(int value, SyslogLevel& rval);
    public static bool TryToSyslogLevel(int value, SyslogLevel& rval);
    public static SyslogLevel ToSyslogLevel(int value);
    private static int FromSyslogOptions(SyslogOptions value, Int32& rval);
    public static bool TryFromSyslogOptions(SyslogOptions value, Int32& rval);
    public static int FromSyslogOptions(SyslogOptions value);
    private static int ToSyslogOptions(int value, SyslogOptions& rval);
    public static bool TryToSyslogOptions(int value, SyslogOptions& rval);
    public static SyslogOptions ToSyslogOptions(int value);
    private static int FromTimespec(Timespec& source, IntPtr destination);
    public static bool TryCopy(Timespec& source, IntPtr destination);
    private static int ToTimespec(IntPtr source, Timespec& destination);
    public static bool TryCopy(IntPtr source, Timespec& destination);
    private static int FromTimeval(Timeval& source, IntPtr destination);
    public static bool TryCopy(Timeval& source, IntPtr destination);
    private static int ToTimeval(IntPtr source, Timeval& destination);
    public static bool TryCopy(IntPtr source, Timeval& destination);
    private static int FromTimezone(Timezone& source, IntPtr destination);
    public static bool TryCopy(Timezone& source, IntPtr destination);
    private static int ToTimezone(IntPtr source, Timezone& destination);
    public static bool TryCopy(IntPtr source, Timezone& destination);
    private static int FromUnixAddressFamily(UnixAddressFamily value, Int32& rval);
    public static bool TryFromUnixAddressFamily(UnixAddressFamily value, Int32& rval);
    public static int FromUnixAddressFamily(UnixAddressFamily value);
    private static int ToUnixAddressFamily(int value, UnixAddressFamily& rval);
    public static bool TryToUnixAddressFamily(int value, UnixAddressFamily& rval);
    public static UnixAddressFamily ToUnixAddressFamily(int value);
    private static int FromUnixSocketControlMessage(UnixSocketControlMessage value, Int32& rval);
    public static bool TryFromUnixSocketControlMessage(UnixSocketControlMessage value, Int32& rval);
    public static int FromUnixSocketControlMessage(UnixSocketControlMessage value);
    private static int ToUnixSocketControlMessage(int value, UnixSocketControlMessage& rval);
    public static bool TryToUnixSocketControlMessage(int value, UnixSocketControlMessage& rval);
    public static UnixSocketControlMessage ToUnixSocketControlMessage(int value);
    private static int FromUnixSocketFlags(UnixSocketFlags value, Int32& rval);
    public static bool TryFromUnixSocketFlags(UnixSocketFlags value, Int32& rval);
    public static int FromUnixSocketFlags(UnixSocketFlags value);
    private static int ToUnixSocketFlags(int value, UnixSocketFlags& rval);
    public static bool TryToUnixSocketFlags(int value, UnixSocketFlags& rval);
    public static UnixSocketFlags ToUnixSocketFlags(int value);
    private static int FromUnixSocketOptionName(UnixSocketOptionName value, Int32& rval);
    public static bool TryFromUnixSocketOptionName(UnixSocketOptionName value, Int32& rval);
    public static int FromUnixSocketOptionName(UnixSocketOptionName value);
    private static int ToUnixSocketOptionName(int value, UnixSocketOptionName& rval);
    public static bool TryToUnixSocketOptionName(int value, UnixSocketOptionName& rval);
    public static UnixSocketOptionName ToUnixSocketOptionName(int value);
    private static int FromUnixSocketProtocol(UnixSocketProtocol value, Int32& rval);
    public static bool TryFromUnixSocketProtocol(UnixSocketProtocol value, Int32& rval);
    public static int FromUnixSocketProtocol(UnixSocketProtocol value);
    private static int ToUnixSocketProtocol(int value, UnixSocketProtocol& rval);
    public static bool TryToUnixSocketProtocol(int value, UnixSocketProtocol& rval);
    public static UnixSocketProtocol ToUnixSocketProtocol(int value);
    private static int FromUnixSocketType(UnixSocketType value, Int32& rval);
    public static bool TryFromUnixSocketType(UnixSocketType value, Int32& rval);
    public static int FromUnixSocketType(UnixSocketType value);
    private static int ToUnixSocketType(int value, UnixSocketType& rval);
    public static bool TryToUnixSocketType(int value, UnixSocketType& rval);
    public static UnixSocketType ToUnixSocketType(int value);
    private static int FromUtimbuf(Utimbuf& source, IntPtr destination);
    public static bool TryCopy(Utimbuf& source, IntPtr destination);
    private static int ToUtimbuf(IntPtr source, Utimbuf& destination);
    public static bool TryCopy(IntPtr source, Utimbuf& destination);
    private static int FromWaitOptions(WaitOptions value, Int32& rval);
    public static bool TryFromWaitOptions(WaitOptions value, Int32& rval);
    public static int FromWaitOptions(WaitOptions value);
    private static int ToWaitOptions(int value, WaitOptions& rval);
    public static bool TryToWaitOptions(int value, WaitOptions& rval);
    public static WaitOptions ToWaitOptions(int value);
    private static int FromXattrFlags(XattrFlags value, Int32& rval);
    public static bool TryFromXattrFlags(XattrFlags value, Int32& rval);
    public static int FromXattrFlags(XattrFlags value);
    private static int ToXattrFlags(int value, XattrFlags& rval);
    public static bool TryToXattrFlags(int value, XattrFlags& rval);
    public static XattrFlags ToXattrFlags(int value);
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.nlink_tAttribute : MapAttribute {
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.off_tAttribute : MapAttribute {
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.OpenFlags : Enum {
    public int value__;
    public static OpenFlags O_RDONLY;
    public static OpenFlags O_WRONLY;
    public static OpenFlags O_RDWR;
    public static OpenFlags O_CREAT;
    public static OpenFlags O_EXCL;
    public static OpenFlags O_NOCTTY;
    public static OpenFlags O_TRUNC;
    public static OpenFlags O_APPEND;
    public static OpenFlags O_NONBLOCK;
    public static OpenFlags O_SYNC;
    public static OpenFlags O_NOFOLLOW;
    public static OpenFlags O_DIRECTORY;
    public static OpenFlags O_DIRECT;
    public static OpenFlags O_ASYNC;
    public static OpenFlags O_LARGEFILE;
    public static OpenFlags O_CLOEXEC;
    public static OpenFlags O_PATH;
}
public class Mono.Unix.Native.Passwd : object {
    public string pw_name;
    public string pw_passwd;
    [CLSCompliantAttribute("False")]
public UInt32 pw_uid;
    [CLSCompliantAttribute("False")]
public UInt32 pw_gid;
    public string pw_gecos;
    public string pw_dir;
    public string pw_shell;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Passwd value);
    public virtual string ToString();
    public static bool op_Equality(Passwd lhs, Passwd rhs);
    public static bool op_Inequality(Passwd lhs, Passwd rhs);
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.PathconfName : Enum {
    public int value__;
    public static PathconfName _PC_LINK_MAX;
    public static PathconfName _PC_MAX_CANON;
    public static PathconfName _PC_MAX_INPUT;
    public static PathconfName _PC_NAME_MAX;
    public static PathconfName _PC_PATH_MAX;
    public static PathconfName _PC_PIPE_BUF;
    public static PathconfName _PC_CHOWN_RESTRICTED;
    public static PathconfName _PC_NO_TRUNC;
    public static PathconfName _PC_VDISABLE;
    public static PathconfName _PC_SYNC_IO;
    public static PathconfName _PC_ASYNC_IO;
    public static PathconfName _PC_PRIO_IO;
    public static PathconfName _PC_SOCK_MAXBUF;
    public static PathconfName _PC_FILESIZEBITS;
    public static PathconfName _PC_REC_INCR_XFER_SIZE;
    public static PathconfName _PC_REC_MAX_XFER_SIZE;
    public static PathconfName _PC_REC_MIN_XFER_SIZE;
    public static PathconfName _PC_REC_XFER_ALIGN;
    public static PathconfName _PC_ALLOC_SIZE_MIN;
    public static PathconfName _PC_SYMLINK_MAX;
    public static PathconfName _PC_2_SYMLINKS;
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.pid_tAttribute : MapAttribute {
}
[MapAttribute]
[FlagsAttribute]
public enum Mono.Unix.Native.PollEvents : Enum {
    public short value__;
    public static PollEvents POLLIN;
    public static PollEvents POLLPRI;
    public static PollEvents POLLOUT;
    public static PollEvents POLLERR;
    public static PollEvents POLLHUP;
    public static PollEvents POLLNVAL;
    public static PollEvents POLLRDNORM;
    public static PollEvents POLLRDBAND;
    public static PollEvents POLLWRNORM;
    public static PollEvents POLLWRBAND;
}
[MapAttribute("struct pollfd")]
public class Mono.Unix.Native.Pollfd : ValueType {
    public int fd;
    [CLSCompliantAttribute("False")]
public PollEvents events;
    [CLSCompliantAttribute("False")]
public PollEvents revents;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Pollfd value);
    public static bool op_Equality(Pollfd lhs, Pollfd rhs);
    public static bool op_Inequality(Pollfd lhs, Pollfd rhs);
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.PosixFadviseAdvice : Enum {
    public int value__;
    public static PosixFadviseAdvice POSIX_FADV_NORMAL;
    public static PosixFadviseAdvice POSIX_FADV_RANDOM;
    public static PosixFadviseAdvice POSIX_FADV_SEQUENTIAL;
    public static PosixFadviseAdvice POSIX_FADV_WILLNEED;
    public static PosixFadviseAdvice POSIX_FADV_DONTNEED;
    public static PosixFadviseAdvice POSIX_FADV_NOREUSE;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.PosixMadviseAdvice : Enum {
    public int value__;
    public static PosixMadviseAdvice POSIX_MADV_NORMAL;
    public static PosixMadviseAdvice POSIX_MADV_RANDOM;
    public static PosixMadviseAdvice POSIX_MADV_SEQUENTIAL;
    public static PosixMadviseAdvice POSIX_MADV_WILLNEED;
    public static PosixMadviseAdvice POSIX_MADV_DONTNEED;
}
public class Mono.Unix.Native.RealTimeSignum : ValueType {
    private int rt_offset;
    private static int MaxOffset;
    public static RealTimeSignum MinValue;
    public static RealTimeSignum MaxValue;
    public int Offset { get; }
    public RealTimeSignum(int offset);
    private static RealTimeSignum();
    public int get_Offset();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RealTimeSignum value);
    public static bool op_Equality(RealTimeSignum lhs, RealTimeSignum rhs);
    public static bool op_Inequality(RealTimeSignum lhs, RealTimeSignum rhs);
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.SeekFlags : Enum {
    public short value__;
    public static SeekFlags SEEK_SET;
    public static SeekFlags SEEK_CUR;
    public static SeekFlags SEEK_END;
    public static SeekFlags L_SET;
    public static SeekFlags L_INCR;
    public static SeekFlags L_XTND;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.ShutdownOption : Enum {
    public int value__;
    public static ShutdownOption SHUT_RD;
    public static ShutdownOption SHUT_WR;
    public static ShutdownOption SHUT_RDWR;
}
public enum Mono.Unix.Native.SignalAction : Enum {
    public int value__;
    public static SignalAction Default;
    public static SignalAction Ignore;
    public static SignalAction Error;
}
public class Mono.Unix.Native.SignalHandler : MulticastDelegate {
    public SignalHandler(object object, IntPtr method);
    public virtual void Invoke(int signal);
    public virtual IAsyncResult BeginInvoke(int signal, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[MapAttribute]
public enum Mono.Unix.Native.Signum : Enum {
    public int value__;
    public static Signum SIGHUP;
    public static Signum SIGINT;
    public static Signum SIGQUIT;
    public static Signum SIGILL;
    public static Signum SIGTRAP;
    public static Signum SIGABRT;
    public static Signum SIGIOT;
    public static Signum SIGBUS;
    public static Signum SIGFPE;
    public static Signum SIGKILL;
    public static Signum SIGUSR1;
    public static Signum SIGSEGV;
    public static Signum SIGUSR2;
    public static Signum SIGPIPE;
    public static Signum SIGALRM;
    public static Signum SIGTERM;
    public static Signum SIGSTKFLT;
    public static Signum SIGCLD;
    public static Signum SIGCHLD;
    public static Signum SIGCONT;
    public static Signum SIGSTOP;
    public static Signum SIGTSTP;
    public static Signum SIGTTIN;
    public static Signum SIGTTOU;
    public static Signum SIGURG;
    public static Signum SIGXCPU;
    public static Signum SIGXFSZ;
    public static Signum SIGVTALRM;
    public static Signum SIGPROF;
    public static Signum SIGWINCH;
    public static Signum SIGPOLL;
    public static Signum SIGIO;
    public static Signum SIGPWR;
    public static Signum SIGSYS;
    public static Signum SIGUNUSED;
}
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.Sockaddr : object {
    internal SockaddrType type;
    internal UnixAddressFamily _sa_family;
    private static Sockaddr nullSockaddr;
    public UnixAddressFamily sa_family { get; public set; }
    internal Sockaddr(SockaddrType type, UnixAddressFamily sa_family);
    private static Sockaddr();
    public UnixAddressFamily get_sa_family();
    public void set_sa_family(UnixAddressFamily value);
    private static int GetNativeSize(_SockaddrHeader* address, Int64& size);
    internal long GetNativeSize();
    internal static Sockaddr GetAddress(Sockaddr address);
    internal static _SockaddrHeader* GetNative(_SockaddrDynamic* dyn, SockaddrType* addr);
    internal static Byte[] GetDynamicData(Sockaddr addr);
    internal virtual Byte[] DynamicData();
    internal virtual long GetDynamicLength();
    internal virtual void SetDynamicLength(long value);
    public SockaddrStorage ToSockaddrStorage();
    public static Sockaddr FromSockaddrStorage(SockaddrStorage storage);
}
[MapAttribute("struct sockaddr_in")]
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.SockaddrIn : Sockaddr {
    public ushort sin_port;
    public InAddr sin_addr;
    public UnixAddressFamily sin_family { get; public set; }
    public UnixAddressFamily get_sin_family();
    public void set_sin_family(UnixAddressFamily value);
    public virtual string ToString();
    public static SockaddrIn FromSockaddrStorage(SockaddrStorage storage);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SockaddrIn value);
}
[MapAttribute("struct sockaddr_in6")]
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.SockaddrIn6 : Sockaddr {
    public ushort sin6_port;
    public UInt32 sin6_flowinfo;
    public In6Addr sin6_addr;
    public UInt32 sin6_scope_id;
    public UnixAddressFamily sin6_family { get; public set; }
    public UnixAddressFamily get_sin6_family();
    public void set_sin6_family(UnixAddressFamily value);
    public virtual string ToString();
    public static SockaddrIn6 FromSockaddrStorage(SockaddrStorage storage);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SockaddrIn6 value);
}
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.SockaddrStorage : Sockaddr {
    [CompilerGeneratedAttribute]
private Byte[] <data>k__BackingField;
    [CompilerGeneratedAttribute]
private long <data_len>k__BackingField;
    private static int default_size;
    public Byte[] data { get; public set; }
    public long data_len { get; public set; }
    public SockaddrStorage(int size);
    private static SockaddrStorage();
    [CompilerGeneratedAttribute]
public Byte[] get_data();
    [CompilerGeneratedAttribute]
public void set_data(Byte[] value);
    [CompilerGeneratedAttribute]
public long get_data_len();
    [CompilerGeneratedAttribute]
public void set_data_len(long value);
    internal virtual Byte[] DynamicData();
    internal virtual long GetDynamicLength();
    internal virtual void SetDynamicLength(long value);
    private static int get_size();
    public void SetTo(Sockaddr address);
    public void CopyTo(Sockaddr address);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SockaddrStorage value);
}
[MapAttribute]
internal enum Mono.Unix.Native.SockaddrType : Enum {
    public int value__;
    public static SockaddrType Invalid;
    public static SockaddrType SockaddrStorage;
    public static SockaddrType SockaddrUn;
    public static SockaddrType Sockaddr;
    public static SockaddrType SockaddrIn;
    public static SockaddrType SockaddrIn6;
    public static SockaddrType MustBeWrapped;
}
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.SockaddrUn : Sockaddr {
    [CompilerGeneratedAttribute]
private Byte[] <sun_path>k__BackingField;
    [CompilerGeneratedAttribute]
private long <sun_path_len>k__BackingField;
    private static int sizeof_sun_path;
    public UnixAddressFamily sun_family { get; public set; }
    public Byte[] sun_path { get; public set; }
    public long sun_path_len { get; public set; }
    public bool IsLinuxAbstractNamespace { get; }
    public string Path { get; }
    public SockaddrUn(int size);
    public SockaddrUn(string path, bool linuxAbstractNamespace);
    private static SockaddrUn();
    public UnixAddressFamily get_sun_family();
    public void set_sun_family(UnixAddressFamily value);
    [CompilerGeneratedAttribute]
public Byte[] get_sun_path();
    [CompilerGeneratedAttribute]
public void set_sun_path(Byte[] value);
    [CompilerGeneratedAttribute]
public long get_sun_path_len();
    [CompilerGeneratedAttribute]
public void set_sun_path_len(long value);
    internal virtual Byte[] DynamicData();
    internal virtual long GetDynamicLength();
    internal virtual void SetDynamicLength(long value);
    private static int get_sizeof_sun_path();
    public bool get_IsLinuxAbstractNamespace();
    public string get_Path();
    public virtual string ToString();
    public static SockaddrUn FromSockaddrStorage(SockaddrStorage storage);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SockaddrUn value);
}
public class Mono.Unix.Native.Stat : ValueType {
    [CLSCompliantAttribute("False")]
[dev_tAttribute]
public ulong st_dev;
    [CLSCompliantAttribute("False")]
[ino_tAttribute]
public ulong st_ino;
    [CLSCompliantAttribute("False")]
public FilePermissions st_mode;
    private UInt32 _padding_;
    [CLSCompliantAttribute("False")]
[nlink_tAttribute]
public ulong st_nlink;
    [CLSCompliantAttribute("False")]
[uid_tAttribute]
public UInt32 st_uid;
    [CLSCompliantAttribute("False")]
[gid_tAttribute]
public UInt32 st_gid;
    [CLSCompliantAttribute("False")]
[dev_tAttribute]
public ulong st_rdev;
    [off_tAttribute]
public long st_size;
    [blksize_tAttribute]
public long st_blksize;
    [blkcnt_tAttribute]
public long st_blocks;
    [time_tAttribute]
public long st_atime;
    [time_tAttribute]
public long st_mtime;
    [time_tAttribute]
public long st_ctime;
    public long st_atime_nsec;
    public long st_mtime_nsec;
    public long st_ctime_nsec;
    public Timespec st_atim { get; public set; }
    public Timespec st_mtim { get; public set; }
    public Timespec st_ctim { get; public set; }
    public Timespec get_st_atim();
    public void set_st_atim(Timespec value);
    public Timespec get_st_mtim();
    public void set_st_mtim(Timespec value);
    public Timespec get_st_ctim();
    public void set_st_ctim(Timespec value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Stat value);
    public static bool op_Equality(Stat lhs, Stat rhs);
    public static bool op_Inequality(Stat lhs, Stat rhs);
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.Statvfs : ValueType {
    public ulong f_bsize;
    public ulong f_frsize;
    [fsblkcnt_tAttribute]
public ulong f_blocks;
    [fsblkcnt_tAttribute]
public ulong f_bfree;
    [fsblkcnt_tAttribute]
public ulong f_bavail;
    [fsfilcnt_tAttribute]
public ulong f_files;
    [fsfilcnt_tAttribute]
public ulong f_ffree;
    [fsfilcnt_tAttribute]
public ulong f_favail;
    public ulong f_fsid;
    public MountFlags f_flag;
    public ulong f_namemax;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Statvfs value);
    public static bool op_Equality(Statvfs lhs, Statvfs rhs);
    public static bool op_Inequality(Statvfs lhs, Statvfs rhs);
}
public class Mono.Unix.Native.Stdlib : object {
    internal static string LIBC;
    internal static string MPH;
    private static bool versionCheckPerformed;
    private static IntPtr _SIG_DFL;
    private static IntPtr _SIG_ERR;
    private static IntPtr _SIG_IGN;
    [CLSCompliantAttribute("False")]
public static SignalHandler SIG_DFL;
    [CLSCompliantAttribute("False")]
public static SignalHandler SIG_ERR;
    [CLSCompliantAttribute("False")]
public static SignalHandler SIG_IGN;
    [CLSCompliantAttribute("False")]
public static int _IOFBF;
    [CLSCompliantAttribute("False")]
public static int _IOLBF;
    [CLSCompliantAttribute("False")]
public static int _IONBF;
    [CLSCompliantAttribute("False")]
public static int BUFSIZ;
    [CLSCompliantAttribute("False")]
public static int EOF;
    [CLSCompliantAttribute("False")]
public static int FOPEN_MAX;
    [CLSCompliantAttribute("False")]
public static int FILENAME_MAX;
    [CLSCompliantAttribute("False")]
public static int L_tmpnam;
    public static IntPtr stderr;
    public static IntPtr stdin;
    public static IntPtr stdout;
    [CLSCompliantAttribute("False")]
public static int TMP_MAX;
    private static object tmpnam_lock;
    [CLSCompliantAttribute("False")]
public static int EXIT_FAILURE;
    [CLSCompliantAttribute("False")]
public static int EXIT_SUCCESS;
    [CLSCompliantAttribute("False")]
public static int MB_CUR_MAX;
    [CLSCompliantAttribute("False")]
public static int RAND_MAX;
    private static object strerror_lock;
    private static Stdlib();
    private static IntPtr VersionStringPtr();
    internal static void VersionCheck();
    public static Errno GetLastError();
    private static int _GetLastError();
    private static void SetLastError(int error);
    protected static void SetLastError(Errno error);
    internal static void InvokeSignalHandler(int signum, IntPtr handler);
    private static IntPtr GetDefaultSignal();
    private static IntPtr GetErrorSignal();
    private static IntPtr GetIgnoreSignal();
    private static void _ErrorHandler(int signum);
    private static void _DefaultHandler(int signum);
    private static void _IgnoreHandler(int signum);
    private static IntPtr sys_signal(int signum, SignalHandler handler);
    private static IntPtr sys_signal(int signum, IntPtr handler);
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("This is not safe; use Mono.Unix.UnixSignal for signal delivery or SetSignalAction()")]
public static SignalHandler signal(Signum signum, SignalHandler handler);
    private static SignalHandler TranslateHandler(IntPtr handler);
    public static int SetSignalAction(Signum signal, SignalAction action);
    public static int SetSignalAction(RealTimeSignum rts, SignalAction action);
    private static int SetSignalAction(int signum, SignalAction action);
    private static int sys_raise(int sig);
    [CLSCompliantAttribute("False")]
public static int raise(Signum sig);
    public static int raise(RealTimeSignum rts);
    private static int GetFullyBuffered();
    private static int GetLineBuffered();
    private static int GetNonBuffered();
    private static int GetBufferSize();
    internal static IntPtr CreateFilePosition();
    internal static int DumpFilePosition(StringBuilder buf, HandleRef handle, int len);
    private static int GetEOF();
    private static int GetFilenameMax();
    private static int GetFopenMax();
    private static int GetTmpnamLength();
    private static IntPtr GetStandardInput();
    private static IntPtr GetStandardOutput();
    private static IntPtr GetStandardError();
    private static int GetTmpMax();
    public static int remove(string filename);
    public static int rename(string oldpath, string newpath);
    public static IntPtr tmpfile();
    private static IntPtr sys_tmpnam(StringBuilder s);
    [ObsoleteAttribute("Syscall.mkstemp() should be preferred.")]
public static string tmpnam(StringBuilder s);
    [ObsoleteAttribute("Syscall.mkstemp() should be preferred.")]
public static string tmpnam();
    public static int fclose(IntPtr stream);
    public static int fflush(IntPtr stream);
    public static IntPtr fopen(string path, string mode);
    public static IntPtr freopen(string path, string mode, IntPtr stream);
    public static int setbuf(IntPtr stream, IntPtr buf);
    [CLSCompliantAttribute("False")]
public static int setbuf(IntPtr stream, Byte* buf);
    [CLSCompliantAttribute("False")]
public static int setvbuf(IntPtr stream, IntPtr buf, int mode, ulong size);
    [CLSCompliantAttribute("False")]
public static int setvbuf(IntPtr stream, Byte* buf, int mode, ulong size);
    private static int sys_fprintf(IntPtr stream, string format, string message);
    public static int fprintf(IntPtr stream, string message);
    private static int sys_printf(string format, string message);
    public static int printf(string message);
    private static int sys_snprintf(StringBuilder s, ulong n, string format, string message);
    [CLSCompliantAttribute("False")]
public static int snprintf(StringBuilder s, ulong n, string message);
    public static int snprintf(StringBuilder s, string message);
    public static int fgetc(IntPtr stream);
    private static IntPtr sys_fgets(StringBuilder sb, int size, IntPtr stream);
    public static StringBuilder fgets(StringBuilder sb, int size, IntPtr stream);
    public static StringBuilder fgets(StringBuilder sb, IntPtr stream);
    public static int fputc(int c, IntPtr stream);
    public static int fputs(string s, IntPtr stream);
    public static int getc(IntPtr stream);
    public static int getchar();
    public static int putc(int c, IntPtr stream);
    public static int putchar(int c);
    public static int puts(string s);
    public static int ungetc(int c, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fread(IntPtr ptr, ulong size, ulong nmemb, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fread(Void* ptr, ulong size, ulong nmemb, IntPtr stream);
    private static ulong sys_fread(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fread(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fread(Byte[] ptr, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fwrite(IntPtr ptr, ulong size, ulong nmemb, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fwrite(Void* ptr, ulong size, ulong nmemb, IntPtr stream);
    private static ulong sys_fwrite(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fwrite(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream);
    [CLSCompliantAttribute("False")]
public static ulong fwrite(Byte[] ptr, IntPtr stream);
    private static int sys_fgetpos(IntPtr stream, HandleRef pos);
    public static int fgetpos(IntPtr stream, FilePosition pos);
    private static int sys_fseek(IntPtr stream, long offset, int origin);
    [CLSCompliantAttribute("False")]
public static int fseek(IntPtr stream, long offset, SeekFlags origin);
    private static int sys_fsetpos(IntPtr stream, HandleRef pos);
    public static int fsetpos(IntPtr stream, FilePosition pos);
    public static long ftell(IntPtr stream);
    public static int rewind(IntPtr stream);
    public static int clearerr(IntPtr stream);
    public static int feof(IntPtr stream);
    public static int ferror(IntPtr stream);
    private static int perror(string s, int err);
    public static int perror(string s);
    private static int GetExitFailure();
    private static int GetExitSuccess();
    private static int GetMbCurMax();
    private static int GetRandMax();
    public static int rand();
    [CLSCompliantAttribute("False")]
public static void srand(UInt32 seed);
    [CLSCompliantAttribute("False")]
public static IntPtr calloc(ulong nmemb, ulong size);
    public static void free(IntPtr ptr);
    [CLSCompliantAttribute("False")]
public static IntPtr malloc(ulong size);
    [CLSCompliantAttribute("False")]
public static IntPtr realloc(IntPtr ptr, ulong size);
    public static void abort();
    public static void exit(int status);
    [CLSCompliantAttribute("False")]
public static void _Exit(int status);
    private static IntPtr sys_getenv(string name);
    public static string getenv(string name);
    [CLSCompliantAttribute("False")]
public static int system(string string);
    private static IntPtr sys_strerror(int errnum);
    [CLSCompliantAttribute("False")]
public static string strerror(Errno errnum);
    [CLSCompliantAttribute("False")]
public static ulong strlen(IntPtr s);
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.suseconds_tAttribute : MapAttribute {
}
[CLSCompliantAttribute("False")]
public class Mono.Unix.Native.Syscall : Stdlib {
    internal static string LIBC;
    internal static object readdir_lock;
    public static int AT_FDCWD;
    internal static object fstab_lock;
    internal static object grp_lock;
    internal static object pwd_lock;
    private static object signal_lock;
    public static int L_ctermid;
    public static int L_cuserid;
    internal static object getlogin_lock;
    public static IntPtr MAP_FAILED;
    public static long UTIME_NOW;
    public static long UTIME_OMIT;
    private static object tty_lock;
    internal static object usershell_lock;
    private static Syscall();
    public static int setxattr(string path, string name, Byte[] value, ulong size, XattrFlags flags);
    public static int setxattr(string path, string name, Byte[] value, ulong size);
    public static int setxattr(string path, string name, Byte[] value, XattrFlags flags);
    public static int setxattr(string path, string name, Byte[] value);
    public static int lsetxattr(string path, string name, Byte[] value, ulong size, XattrFlags flags);
    public static int lsetxattr(string path, string name, Byte[] value, ulong size);
    public static int lsetxattr(string path, string name, Byte[] value, XattrFlags flags);
    public static int lsetxattr(string path, string name, Byte[] value);
    public static int fsetxattr(int fd, string name, Byte[] value, ulong size, XattrFlags flags);
    public static int fsetxattr(int fd, string name, Byte[] value, ulong size);
    public static int fsetxattr(int fd, string name, Byte[] value, XattrFlags flags);
    public static int fsetxattr(int fd, string name, Byte[] value);
    public static long getxattr(string path, string name, Byte[] value, ulong size);
    public static long getxattr(string path, string name, Byte[] value);
    public static long getxattr(string path, string name, Byte[]& value);
    public static long lgetxattr(string path, string name, Byte[] value, ulong size);
    public static long lgetxattr(string path, string name, Byte[] value);
    public static long lgetxattr(string path, string name, Byte[]& value);
    public static long fgetxattr(int fd, string name, Byte[] value, ulong size);
    public static long fgetxattr(int fd, string name, Byte[] value);
    public static long fgetxattr(int fd, string name, Byte[]& value);
    public static long listxattr(string path, Byte[] list, ulong size);
    public static long listxattr(string path, Encoding encoding, String[]& values);
    public static long listxattr(string path, String[]& values);
    private static void GetValues(Byte[] list, Encoding encoding, String[]& values);
    public static long llistxattr(string path, Byte[] list, ulong size);
    public static long llistxattr(string path, Encoding encoding, String[]& values);
    public static long llistxattr(string path, String[]& values);
    public static long flistxattr(int fd, Byte[] list, ulong size);
    public static long flistxattr(int fd, Encoding encoding, String[]& values);
    public static long flistxattr(int fd, String[]& values);
    public static int removexattr(string path, string name);
    public static int lremovexattr(string path, string name);
    public static int fremovexattr(int fd, string name);
    public static IntPtr opendir(string name);
    public static int closedir(IntPtr dir);
    public static int seekdir(IntPtr dir, long offset);
    public static long telldir(IntPtr dir);
    public static int rewinddir(IntPtr dir);
    private static void CopyDirent(Dirent to, _Dirent& from);
    private static int sys_readdir(IntPtr dir, _Dirent& dentry);
    public static Dirent readdir(IntPtr dir);
    private static int sys_readdir_r(IntPtr dirp, _Dirent& entry, IntPtr& result);
    public static int readdir_r(IntPtr dirp, Dirent entry, IntPtr& result);
    public static int dirfd(IntPtr dir);
    public static IntPtr fdopendir(int fd);
    public static int fcntl(int fd, FcntlCommand cmd);
    public static int fcntl(int fd, FcntlCommand cmd, long arg);
    public static int fcntl(int fd, FcntlCommand cmd, int arg);
    public static int fcntl(int fd, FcntlCommand cmd, IntPtr ptr);
    public static int fcntl(int fd, FcntlCommand cmd, DirectoryNotifyFlags arg);
    public static int fcntl(int fd, FcntlCommand cmd, Flock& lock);
    public static int open(string pathname, OpenFlags flags);
    public static int open(string pathname, OpenFlags flags, FilePermissions mode);
    public static int creat(string pathname, FilePermissions mode);
    public static int posix_fadvise(int fd, long offset, long len, PosixFadviseAdvice advice);
    public static int posix_fallocate(int fd, long offset, ulong len);
    private static int sys_openat(int dirfd, string pathname, int flags);
    private static int sys_openat(int dirfd, string pathname, int flags, UInt32 mode);
    public static int openat(int dirfd, string pathname, OpenFlags flags);
    public static int openat(int dirfd, string pathname, OpenFlags flags, FilePermissions mode);
    private static int get_at_fdcwd();
    private static void CopyFstab(Fstab to, _Fstab& from);
    private static int sys_endfsent();
    public static int endfsent();
    private static int sys_getfsent(_Fstab& fs);
    public static Fstab getfsent();
    private static int sys_getfsfile(string mount_point, _Fstab& fs);
    public static Fstab getfsfile(string mount_point);
    private static int sys_getfsspec(string special_file, _Fstab& fs);
    public static Fstab getfsspec(string special_file);
    private static int sys_setfsent();
    public static int setfsent();
    private static int sys_getgrouplist(string user, UInt32 grp, UInt32[] groups, Int32& ngroups);
    public static Group[] getgrouplist(string username);
    public static Group[] getgrouplist(Passwd user);
    public static int setgroups(ulong size, UInt32[] list);
    public static int setgroups(UInt32[] list);
    private static void CopyGroup(Group to, _Group& from);
    private static int sys_getgrnam(string name, _Group& group);
    public static Group getgrnam(string name);
    private static int sys_getgrgid(UInt32 uid, _Group& group);
    public static Group getgrgid(UInt32 uid);
    private static int sys_getgrnam_r(string name, _Group& grbuf, IntPtr& grbufp);
    public static int getgrnam_r(string name, Group grbuf, Group& grbufp);
    private static int sys_getgrgid_r(UInt32 uid, _Group& grbuf, IntPtr& grbufp);
    public static int getgrgid_r(UInt32 uid, Group grbuf, Group& grbufp);
    private static int sys_getgrent(_Group& grbuf);
    public static Group getgrent();
    private static int sys_setgrent();
    public static int setgrent();
    private static int sys_endgrent();
    public static int endgrent();
    private static int sys_fgetgrent(IntPtr stream, _Group& grbuf);
    public static Group fgetgrent(IntPtr stream);
    private static void CopyPasswd(Passwd to, _Passwd& from);
    private static int sys_getpwnam(string name, _Passwd& passwd);
    public static Passwd getpwnam(string name);
    private static int sys_getpwuid(UInt32 uid, _Passwd& passwd);
    public static Passwd getpwuid(UInt32 uid);
    private static int sys_getpwnam_r(string name, _Passwd& pwbuf, IntPtr& pwbufp);
    public static int getpwnam_r(string name, Passwd pwbuf, Passwd& pwbufp);
    private static int sys_getpwuid_r(UInt32 uid, _Passwd& pwbuf, IntPtr& pwbufp);
    public static int getpwuid_r(UInt32 uid, Passwd pwbuf, Passwd& pwbufp);
    private static int sys_getpwent(_Passwd& pwbuf);
    public static Passwd getpwent();
    private static int sys_setpwent();
    public static int setpwent();
    private static int sys_endpwent();
    public static int endpwent();
    private static int sys_fgetpwent(IntPtr stream, _Passwd& pwbuf);
    public static Passwd fgetpwent(IntPtr stream);
    private static int psignal(int sig, string s);
    public static int psignal(Signum sig, string s);
    private static int sys_kill(int pid, int sig);
    public static int kill(int pid, Signum sig);
    private static IntPtr sys_strsignal(int sig);
    public static string strsignal(Signum sig);
    private static int _L_ctermid();
    private static int _L_cuserid();
    private static IntPtr sys_cuserid(StringBuilder string);
    [ObsoleteAttribute(""Nobody knows precisely what cuserid() does... DO NOT USE cuserid().
`string' must hold L_cuserid characters.  Use getlogin_r instead.")]
public static string cuserid(StringBuilder string);
    public static int renameat(int olddirfd, string oldpath, int newdirfd, string newpath);
    public static int mkstemp(StringBuilder template);
    private static IntPtr sys_mkdtemp(StringBuilder template);
    public static StringBuilder mkdtemp(StringBuilder template);
    public static int ttyslot();
    [ObsoleteAttribute("This is insecure and should not be used", "True")]
public static int setkey(string key);
    private static int sys_strerror_r(int errnum, StringBuilder buf, ulong n);
    public static int strerror_r(Errno errnum, StringBuilder buf, ulong n);
    public static int strerror_r(Errno errnum, StringBuilder buf);
    public static int epoll_create(int size);
    public static int epoll_create(EpollFlags flags);
    public static int epoll_ctl(int epfd, EpollOp op, int fd, EpollEvents events);
    public static int epoll_wait(int epfd, EpollEvent[] events, int max_events, int timeout);
    private static int sys_epoll_create(int size);
    private static int sys_epoll_create1(EpollFlags flags);
    public static int epoll_ctl(int epfd, EpollOp op, int fd, EpollEvent& ee);
    private static int sys_epoll_wait(int epfd, EpollEvent[] ee, int maxevents, int timeout);
    public static int posix_madvise(IntPtr addr, ulong len, PosixMadviseAdvice advice);
    public static IntPtr mmap(IntPtr start, ulong length, MmapProts prot, MmapFlags flags, int fd, long offset);
    public static int munmap(IntPtr start, ulong length);
    public static int mprotect(IntPtr start, ulong len, MmapProts prot);
    public static int msync(IntPtr start, ulong len, MsyncFlags flags);
    public static int mlock(IntPtr start, ulong len);
    public static int munlock(IntPtr start, ulong len);
    private static int sys_mlockall(int flags);
    public static int mlockall(MlockallFlags flags);
    public static int munlockall();
    public static IntPtr mremap(IntPtr old_address, ulong old_size, ulong new_size, MremapFlags flags);
    public static int mincore(IntPtr start, ulong length, Byte[] vec);
    public static int remap_file_pages(IntPtr start, ulong size, MmapProts prot, long pgoff, MmapFlags flags);
    private static int sys_poll(_pollfd[] ufds, UInt32 nfds, int timeout);
    public static int poll(Pollfd[] fds, UInt32 nfds, int timeout);
    public static int poll(Pollfd[] fds, int timeout);
    public static long sendfile(int out_fd, int in_fd, Int64& offset, ulong count);
    public static int stat(string file_name, Stat& buf);
    public static int fstat(int filedes, Stat& buf);
    public static int lstat(string file_name, Stat& buf);
    private static int sys_chmod(string path, UInt32 mode);
    public static int chmod(string path, FilePermissions mode);
    private static int sys_fchmod(int filedes, UInt32 mode);
    public static int fchmod(int filedes, FilePermissions mode);
    private static UInt32 sys_umask(UInt32 mask);
    public static FilePermissions umask(FilePermissions mask);
    private static int sys_mkdir(string oldpath, UInt32 mode);
    public static int mkdir(string oldpath, FilePermissions mode);
    public static int mknod(string pathname, FilePermissions mode, ulong dev);
    private static int sys_mkfifo(string pathname, UInt32 mode);
    public static int mkfifo(string pathname, FilePermissions mode);
    private static int sys_fchmodat(int dirfd, string pathname, UInt32 mode, int flags);
    public static int fchmodat(int dirfd, string pathname, FilePermissions mode, AtFlags flags);
    public static int fstatat(int dirfd, string file_name, Stat& buf, AtFlags flags);
    private static long get_utime_now();
    private static long get_utime_omit();
    private static int sys_futimens(int fd, Timespec[] times);
    public static int futimens(int fd, Timespec[] times);
    private static int sys_utimensat(int dirfd, string pathname, Timespec[] times, int flags);
    public static int utimensat(int dirfd, string pathname, Timespec[] times, AtFlags flags);
    private static int sys_mkdirat(int dirfd, string oldpath, UInt32 mode);
    public static int mkdirat(int dirfd, string oldpath, FilePermissions mode);
    public static int mknodat(int dirfd, string pathname, FilePermissions mode, ulong dev);
    private static int sys_mkfifoat(int dirfd, string pathname, UInt32 mode);
    public static int mkfifoat(int dirfd, string pathname, FilePermissions mode);
    public static int statvfs(string path, Statvfs& buf);
    public static int fstatvfs(int fd, Statvfs& buf);
    public static int gettimeofday(Timeval& tv, Timezone& tz);
    private static int gettimeofday(Timeval& tv, IntPtr ignore);
    public static int gettimeofday(Timeval& tv);
    private static int gettimeofday(IntPtr ignore, Timezone& tz);
    public static int gettimeofday(Timezone& tz);
    public static int settimeofday(Timeval& tv, Timezone& tz);
    private static int settimeofday(Timeval& tv, IntPtr ignore);
    public static int settimeofday(Timeval& tv);
    private static int sys_utimes(string filename, Timeval[] tvp);
    public static int utimes(string filename, Timeval[] tvp);
    private static int sys_lutimes(string filename, Timeval[] tvp);
    public static int lutimes(string filename, Timeval[] tvp);
    private static int sys_futimes(int fd, Timeval[] tvp);
    public static int futimes(int fd, Timeval[] tvp);
    private static void CopyUtsname(Utsname& to, _Utsname& from);
    private static int sys_uname(_Utsname& buf);
    public static int uname(Utsname& buf);
    public static int wait(Int32& status);
    private static int waitpid(int pid, Int32& status, int options);
    public static int waitpid(int pid, Int32& status, WaitOptions options);
    private static int _WIFEXITED(int status);
    public static bool WIFEXITED(int status);
    public static int WEXITSTATUS(int status);
    private static int _WIFSIGNALED(int status);
    public static bool WIFSIGNALED(int status);
    private static int _WTERMSIG(int status);
    public static Signum WTERMSIG(int status);
    private static int _WIFSTOPPED(int status);
    public static bool WIFSTOPPED(int status);
    private static int _WSTOPSIG(int status);
    public static Signum WSTOPSIG(int status);
    private static int sys_openlog(IntPtr ident, int option, int facility);
    public static int openlog(IntPtr ident, SyslogOptions option, SyslogFacility defaultFacility);
    private static int sys_syslog(int priority, string message);
    public static int syslog(SyslogFacility facility, SyslogLevel level, string message);
    public static int syslog(SyslogLevel level, string message);
    private static string GetSyslogMessage(string message);
    public static int closelog();
    private static int sys_setlogmask(int mask);
    public static int setlogmask(SyslogLevel mask);
    public static int nanosleep(Timespec& req, Timespec& rem);
    public static int stime(Int64& t);
    public static long time(Int64& t);
    private static int sys_access(string pathname, int mode);
    public static int access(string pathname, AccessModes mode);
    private static long sys_lseek(int fd, long offset, int whence);
    public static long lseek(int fd, long offset, SeekFlags whence);
    public static int close(int fd);
    public static long read(int fd, IntPtr buf, ulong count);
    public static long read(int fd, Void* buf, ulong count);
    public static long write(int fd, IntPtr buf, ulong count);
    public static long write(int fd, Void* buf, ulong count);
    public static long pread(int fd, IntPtr buf, ulong count, long offset);
    public static long pread(int fd, Void* buf, ulong count, long offset);
    public static long pwrite(int fd, IntPtr buf, ulong count, long offset);
    public static long pwrite(int fd, Void* buf, ulong count, long offset);
    public static int pipe(Int32& reading, Int32& writing);
    public static int pipe(Int32[] filedes);
    public static UInt32 alarm(UInt32 seconds);
    public static UInt32 sleep(UInt32 seconds);
    public static UInt32 ualarm(UInt32 usecs, UInt32 interval);
    public static int pause();
    public static int chown(string path, UInt32 owner, UInt32 group);
    public static int fchown(int fd, UInt32 owner, UInt32 group);
    public static int lchown(string path, UInt32 owner, UInt32 group);
    public static int chdir(string path);
    public static int fchdir(int fd);
    public static IntPtr getcwd(StringBuilder buf, ulong size);
    public static StringBuilder getcwd(StringBuilder buf);
    public static int dup(int fd);
    public static int dup2(int fd, int fd2);
    public static int execve(string path, String[] argv, String[] envp);
    public static int fexecve(int fd, String[] argv, String[] envp);
    public static int execv(string path, String[] argv);
    public static int execvp(string path, String[] argv);
    public static int nice(int inc);
    [CLSCompliantAttribute("False")]
public static int _exit(int status);
    public static long fpathconf(int filedes, PathconfName name, Errno defaultError);
    public static long fpathconf(int filedes, PathconfName name);
    public static long pathconf(string path, PathconfName name, Errno defaultError);
    public static long pathconf(string path, PathconfName name);
    public static long sysconf(SysconfName name, Errno defaultError);
    public static long sysconf(SysconfName name);
    public static ulong confstr(ConfstrName name, StringBuilder buf, ulong len);
    public static int getpid();
    public static int getppid();
    public static int setpgid(int pid, int pgid);
    public static int getpgid(int pid);
    public static int setpgrp();
    public static int getpgrp();
    public static int setsid();
    public static int getsid(int pid);
    public static UInt32 getuid();
    public static UInt32 geteuid();
    public static UInt32 getgid();
    public static UInt32 getegid();
    public static int getgroups(int size, UInt32[] list);
    public static int getgroups(UInt32[] list);
    public static int setuid(UInt32 uid);
    public static int setreuid(UInt32 ruid, UInt32 euid);
    public static int setregid(UInt32 rgid, UInt32 egid);
    public static int seteuid(UInt32 euid);
    public static int setegid(UInt32 uid);
    public static int setgid(UInt32 gid);
    public static int getresuid(UInt32& ruid, UInt32& euid, UInt32& suid);
    public static int getresgid(UInt32& rgid, UInt32& egid, UInt32& sgid);
    public static int setresuid(UInt32 ruid, UInt32 euid, UInt32 suid);
    public static int setresgid(UInt32 rgid, UInt32 egid, UInt32 sgid);
    private static IntPtr sys_ttyname(int fd);
    public static string ttyname(int fd);
    public static int ttyname_r(int fd, StringBuilder buf, ulong buflen);
    public static int ttyname_r(int fd, StringBuilder buf);
    private static int sys_isatty(int fd);
    public static bool isatty(int fd);
    public static int link(string oldpath, string newpath);
    public static int symlink(string oldpath, string newpath);
    private static int ReadlinkIntoStringBuilder(DoReadlinkFun doReadlink, StringBuilder buf, ulong bufsiz);
    public static int readlink(string path, StringBuilder buf, ulong bufsiz);
    public static int readlink(string path, StringBuilder buf);
    private static long readlink(string path, Byte[] buf, ulong bufsiz);
    public static long readlink(string path, Byte[] buf);
    public static int unlink(string pathname);
    public static int rmdir(string pathname);
    public static int tcgetpgrp(int fd);
    public static int tcsetpgrp(int fd, int pgrp);
    private static IntPtr sys_getlogin();
    public static string getlogin();
    public static int getlogin_r(StringBuilder name, ulong bufsize);
    public static int getlogin_r(StringBuilder name);
    public static int setlogin(string name);
    public static int gethostname(StringBuilder name, ulong len);
    public static int gethostname(StringBuilder name);
    public static int sethostname(string name, ulong len);
    public static int sethostname(string name);
    public static long gethostid();
    public static int sethostid(long hostid);
    public static int getdomainname(StringBuilder name, ulong len);
    public static int getdomainname(StringBuilder name);
    public static int setdomainname(string name, ulong len);
    public static int setdomainname(string name);
    public static int vhangup();
    public static int revoke(string file);
    public static int acct(string filename);
    private static IntPtr sys_getusershell();
    public static string getusershell();
    private static int sys_setusershell();
    public static int setusershell();
    private static int sys_endusershell();
    public static int endusershell();
    public static int chroot(string path);
    public static int fsync(int fd);
    public static int fdatasync(int fd);
    public static int sync();
    [ObsoleteAttribute("Dropped in POSIX 1003.1-2001.  Use Syscall.sysconf (SysconfName._SC_PAGESIZE).")]
public static int getpagesize();
    public static int truncate(string path, long length);
    public static int ftruncate(int fd, long length);
    public static int getdtablesize();
    public static int brk(IntPtr end_data_segment);
    public static IntPtr sbrk(IntPtr increment);
    public static int lockf(int fd, LockfCommand cmd, long len);
    [ObsoleteAttribute("This is insecure and should not be used", "True")]
public static string crypt(string key, string salt);
    [ObsoleteAttribute("This is insecure and should not be used", "True")]
public static int encrypt(Byte[] block, bool decode);
    public static int swab(IntPtr from, IntPtr to, long n);
    public static void swab(Void* from, Void* to, long n);
    private static int sys_faccessat(int dirfd, string pathname, int mode, int flags);
    public static int faccessat(int dirfd, string pathname, AccessModes mode, AtFlags flags);
    private static int sys_fchownat(int dirfd, string pathname, UInt32 owner, UInt32 group, int flags);
    public static int fchownat(int dirfd, string pathname, UInt32 owner, UInt32 group, AtFlags flags);
    private static int sys_linkat(int olddirfd, string oldpath, int newdirfd, string newpath, int flags);
    public static int linkat(int olddirfd, string oldpath, int newdirfd, string newpath, AtFlags flags);
    public static int readlinkat(int dirfd, string pathname, StringBuilder buf, ulong bufsiz);
    public static int readlinkat(int dirfd, string pathname, StringBuilder buf);
    private static long readlinkat(int dirfd, string pathname, Byte[] buf, ulong bufsiz);
    public static long readlinkat(int dirfd, string pathname, Byte[] buf);
    public static int symlinkat(string oldpath, int dirfd, string newpath);
    private static int sys_unlinkat(int dirfd, string pathname, int flags);
    public static int unlinkat(int dirfd, string pathname, AtFlags flags);
    private static int sys_utime(string filename, Utimbuf& buf, int use_buf);
    public static int utime(string filename, Utimbuf& buf);
    public static int utime(string filename);
    private static long sys_readv(int fd, Iovec[] iov, int iovcnt);
    public static long readv(int fd, Iovec[] iov);
    private static long sys_writev(int fd, Iovec[] iov, int iovcnt);
    public static long writev(int fd, Iovec[] iov);
    private static long sys_preadv(int fd, Iovec[] iov, int iovcnt, long offset);
    public static long preadv(int fd, Iovec[] iov, long offset);
    private static long sys_pwritev(int fd, Iovec[] iov, int iovcnt, long offset);
    public static long pwritev(int fd, Iovec[] iov, long offset);
    public static UInt32 htonl(UInt32 hostlong);
    public static ushort htons(ushort hostshort);
    public static UInt32 ntohl(UInt32 netlong);
    public static ushort ntohs(ushort netshort);
    private static int sys_socket(int domain, int type, int protocol);
    public static int socket(UnixAddressFamily domain, UnixSocketType type, UnixSocketFlags flags, UnixSocketProtocol protocol);
    public static int socket(UnixAddressFamily domain, UnixSocketType type, UnixSocketProtocol protocol);
    private static int sys_socketpair(int domain, int type, int protocol, Int32& socket1, Int32& socket2);
    public static int socketpair(UnixAddressFamily domain, UnixSocketType type, UnixSocketFlags flags, UnixSocketProtocol protocol, Int32& socket1, Int32& socket2);
    public static int socketpair(UnixAddressFamily domain, UnixSocketType type, UnixSocketProtocol protocol, Int32& socket1, Int32& socket2);
    public static int sockatmark(int socket);
    public static int listen(int socket, int backlog);
    private static int sys_getsockopt(int socket, int level, int option_name, Void* option_value, Int64& option_len);
    private static int sys_getsockopt_timeval(int socket, int level, int option_name, Timeval& option_value);
    private static int sys_getsockopt_linger(int socket, int level, int option_name, Linger& option_value);
    public static int getsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Void* option_value, Int64& option_len);
    public static int getsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, IntPtr option_value, Int64& option_len);
    public static int getsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Int32& option_value);
    public static int getsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Byte[] option_value, Int64& option_len);
    public static int getsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Timeval& option_value);
    public static int getsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Linger& option_value);
    private static int sys_setsockopt(int socket, int level, int option_name, Void* option_value, long option_len);
    private static int sys_setsockopt_timeval(int socket, int level, int option_name, Timeval& option_value);
    private static int sys_setsockopt_linger(int socket, int level, int option_name, Linger& option_value);
    public static int setsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Void* option_value, long option_len);
    public static int setsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, IntPtr option_value, long option_len);
    public static int setsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, int option_value);
    public static int setsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Byte[] option_value, long option_len);
    public static int setsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Timeval option_value);
    public static int setsockopt(int socket, UnixSocketProtocol level, UnixSocketOptionName option_name, Linger option_value);
    private static int sys_shutdown(int socket, int how);
    public static int shutdown(int socket, ShutdownOption how);
    private static long sys_recv(int socket, Void* buffer, ulong length, int flags);
    public static long recv(int socket, Void* buffer, ulong length, MessageFlags flags);
    public static long recv(int socket, IntPtr buffer, ulong length, MessageFlags flags);
    public static long recv(int socket, Byte[] buffer, ulong length, MessageFlags flags);
    private static long sys_send(int socket, Void* message, ulong length, int flags);
    public static long send(int socket, Void* message, ulong length, MessageFlags flags);
    public static long send(int socket, IntPtr message, ulong length, MessageFlags flags);
    public static long send(int socket, Byte[] message, ulong length, MessageFlags flags);
    private static int sys_bind(int socket, _SockaddrHeader* address);
    public static int bind(int socket, Sockaddr address);
    private static int sys_connect(int socket, _SockaddrHeader* address);
    public static int connect(int socket, Sockaddr address);
    private static int sys_accept(int socket, _SockaddrHeader* address);
    public static int accept(int socket, Sockaddr address);
    private static int sys_accept4(int socket, _SockaddrHeader* address, int flags);
    public static int accept4(int socket, Sockaddr address, UnixSocketFlags flags);
    private static int sys_getpeername(int socket, _SockaddrHeader* address);
    public static int getpeername(int socket, Sockaddr address);
    private static int sys_getsockname(int socket, _SockaddrHeader* address);
    public static int getsockname(int socket, Sockaddr address);
    private static long sys_recvfrom(int socket, Void* buffer, ulong length, int flags, _SockaddrHeader* address);
    public static long recvfrom(int socket, Void* buffer, ulong length, MessageFlags flags, Sockaddr address);
    public static long recvfrom(int socket, IntPtr buffer, ulong length, MessageFlags flags, Sockaddr address);
    public static long recvfrom(int socket, Byte[] buffer, ulong length, MessageFlags flags, Sockaddr address);
    private static long sys_sendto(int socket, Void* message, ulong length, int flags, _SockaddrHeader* address);
    public static long sendto(int socket, Void* message, ulong length, MessageFlags flags, Sockaddr address);
    public static long sendto(int socket, IntPtr message, ulong length, MessageFlags flags, Sockaddr address);
    public static long sendto(int socket, Byte[] message, ulong length, MessageFlags flags, Sockaddr address);
    private static long sys_recvmsg(int socket, _Msghdr& message, _SockaddrHeader* msg_name, int flags);
    public static long recvmsg(int socket, Msghdr message, MessageFlags flags);
    private static long sys_sendmsg(int socket, _Msghdr& message, _SockaddrHeader* msg_name, int flags);
    public static long sendmsg(int socket, Msghdr message, MessageFlags flags);
    private static long CMSG_FIRSTHDR(Byte* msg_control, long msg_controllen);
    public static long CMSG_FIRSTHDR(Msghdr msgh);
    private static long CMSG_NXTHDR(Byte* msg_control, long msg_controllen, long cmsg);
    public static long CMSG_NXTHDR(Msghdr msgh, long cmsg);
    private static long CMSG_DATA(Byte* msg_control, long msg_controllen, long cmsg);
    public static long CMSG_DATA(Msghdr msgh, long cmsg);
    public static ulong CMSG_ALIGN(ulong length);
    public static ulong CMSG_SPACE(ulong length);
    public static ulong CMSG_LEN(ulong length);
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.SysconfName : Enum {
    public int value__;
    public static SysconfName _SC_ARG_MAX;
    public static SysconfName _SC_CHILD_MAX;
    public static SysconfName _SC_CLK_TCK;
    public static SysconfName _SC_NGROUPS_MAX;
    public static SysconfName _SC_OPEN_MAX;
    public static SysconfName _SC_STREAM_MAX;
    public static SysconfName _SC_TZNAME_MAX;
    public static SysconfName _SC_JOB_CONTROL;
    public static SysconfName _SC_SAVED_IDS;
    public static SysconfName _SC_REALTIME_SIGNALS;
    public static SysconfName _SC_PRIORITY_SCHEDULING;
    public static SysconfName _SC_TIMERS;
    public static SysconfName _SC_ASYNCHRONOUS_IO;
    public static SysconfName _SC_PRIORITIZED_IO;
    public static SysconfName _SC_SYNCHRONIZED_IO;
    public static SysconfName _SC_FSYNC;
    public static SysconfName _SC_MAPPED_FILES;
    public static SysconfName _SC_MEMLOCK;
    public static SysconfName _SC_MEMLOCK_RANGE;
    public static SysconfName _SC_MEMORY_PROTECTION;
    public static SysconfName _SC_MESSAGE_PASSING;
    public static SysconfName _SC_SEMAPHORES;
    public static SysconfName _SC_SHARED_MEMORY_OBJECTS;
    public static SysconfName _SC_AIO_LISTIO_MAX;
    public static SysconfName _SC_AIO_MAX;
    public static SysconfName _SC_AIO_PRIO_DELTA_MAX;
    public static SysconfName _SC_DELAYTIMER_MAX;
    public static SysconfName _SC_MQ_OPEN_MAX;
    public static SysconfName _SC_MQ_PRIO_MAX;
    public static SysconfName _SC_VERSION;
    public static SysconfName _SC_PAGESIZE;
    public static SysconfName _SC_RTSIG_MAX;
    public static SysconfName _SC_SEM_NSEMS_MAX;
    public static SysconfName _SC_SEM_VALUE_MAX;
    public static SysconfName _SC_SIGQUEUE_MAX;
    public static SysconfName _SC_TIMER_MAX;
    public static SysconfName _SC_BC_BASE_MAX;
    public static SysconfName _SC_BC_DIM_MAX;
    public static SysconfName _SC_BC_SCALE_MAX;
    public static SysconfName _SC_BC_STRING_MAX;
    public static SysconfName _SC_COLL_WEIGHTS_MAX;
    public static SysconfName _SC_EQUIV_CLASS_MAX;
    public static SysconfName _SC_EXPR_NEST_MAX;
    public static SysconfName _SC_LINE_MAX;
    public static SysconfName _SC_RE_DUP_MAX;
    public static SysconfName _SC_CHARCLASS_NAME_MAX;
    public static SysconfName _SC_2_VERSION;
    public static SysconfName _SC_2_C_BIND;
    public static SysconfName _SC_2_C_DEV;
    public static SysconfName _SC_2_FORT_DEV;
    public static SysconfName _SC_2_FORT_RUN;
    public static SysconfName _SC_2_SW_DEV;
    public static SysconfName _SC_2_LOCALEDEF;
    public static SysconfName _SC_PII;
    public static SysconfName _SC_PII_XTI;
    public static SysconfName _SC_PII_SOCKET;
    public static SysconfName _SC_PII_INTERNET;
    public static SysconfName _SC_PII_OSI;
    public static SysconfName _SC_POLL;
    public static SysconfName _SC_SELECT;
    public static SysconfName _SC_UIO_MAXIOV;
    public static SysconfName _SC_IOV_MAX;
    public static SysconfName _SC_PII_INTERNET_STREAM;
    public static SysconfName _SC_PII_INTERNET_DGRAM;
    public static SysconfName _SC_PII_OSI_COTS;
    public static SysconfName _SC_PII_OSI_CLTS;
    public static SysconfName _SC_PII_OSI_M;
    public static SysconfName _SC_T_IOV_MAX;
    public static SysconfName _SC_THREADS;
    public static SysconfName _SC_THREAD_SAFE_FUNCTIONS;
    public static SysconfName _SC_GETGR_R_SIZE_MAX;
    public static SysconfName _SC_GETPW_R_SIZE_MAX;
    public static SysconfName _SC_LOGIN_NAME_MAX;
    public static SysconfName _SC_TTY_NAME_MAX;
    public static SysconfName _SC_THREAD_DESTRUCTOR_ITERATIONS;
    public static SysconfName _SC_THREAD_KEYS_MAX;
    public static SysconfName _SC_THREAD_STACK_MIN;
    public static SysconfName _SC_THREAD_THREADS_MAX;
    public static SysconfName _SC_THREAD_ATTR_STACKADDR;
    public static SysconfName _SC_THREAD_ATTR_STACKSIZE;
    public static SysconfName _SC_THREAD_PRIORITY_SCHEDULING;
    public static SysconfName _SC_THREAD_PRIO_INHERIT;
    public static SysconfName _SC_THREAD_PRIO_PROTECT;
    public static SysconfName _SC_THREAD_PROCESS_SHARED;
    public static SysconfName _SC_NPROCESSORS_CONF;
    public static SysconfName _SC_NPROCESSORS_ONLN;
    public static SysconfName _SC_PHYS_PAGES;
    public static SysconfName _SC_AVPHYS_PAGES;
    public static SysconfName _SC_ATEXIT_MAX;
    public static SysconfName _SC_PASS_MAX;
    public static SysconfName _SC_XOPEN_VERSION;
    public static SysconfName _SC_XOPEN_XCU_VERSION;
    public static SysconfName _SC_XOPEN_UNIX;
    public static SysconfName _SC_XOPEN_CRYPT;
    public static SysconfName _SC_XOPEN_ENH_I18N;
    public static SysconfName _SC_XOPEN_SHM;
    public static SysconfName _SC_2_CHAR_TERM;
    public static SysconfName _SC_2_C_VERSION;
    public static SysconfName _SC_2_UPE;
    public static SysconfName _SC_XOPEN_XPG2;
    public static SysconfName _SC_XOPEN_XPG3;
    public static SysconfName _SC_XOPEN_XPG4;
    public static SysconfName _SC_CHAR_BIT;
    public static SysconfName _SC_CHAR_MAX;
    public static SysconfName _SC_CHAR_MIN;
    public static SysconfName _SC_INT_MAX;
    public static SysconfName _SC_INT_MIN;
    public static SysconfName _SC_LONG_BIT;
    public static SysconfName _SC_WORD_BIT;
    public static SysconfName _SC_MB_LEN_MAX;
    public static SysconfName _SC_NZERO;
    public static SysconfName _SC_SSIZE_MAX;
    public static SysconfName _SC_SCHAR_MAX;
    public static SysconfName _SC_SCHAR_MIN;
    public static SysconfName _SC_SHRT_MAX;
    public static SysconfName _SC_SHRT_MIN;
    public static SysconfName _SC_UCHAR_MAX;
    public static SysconfName _SC_UINT_MAX;
    public static SysconfName _SC_ULONG_MAX;
    public static SysconfName _SC_USHRT_MAX;
    public static SysconfName _SC_NL_ARGMAX;
    public static SysconfName _SC_NL_LANGMAX;
    public static SysconfName _SC_NL_MSGMAX;
    public static SysconfName _SC_NL_NMAX;
    public static SysconfName _SC_NL_SETMAX;
    public static SysconfName _SC_NL_TEXTMAX;
    public static SysconfName _SC_XBS5_ILP32_OFF32;
    public static SysconfName _SC_XBS5_ILP32_OFFBIG;
    public static SysconfName _SC_XBS5_LP64_OFF64;
    public static SysconfName _SC_XBS5_LPBIG_OFFBIG;
    public static SysconfName _SC_XOPEN_LEGACY;
    public static SysconfName _SC_XOPEN_REALTIME;
    public static SysconfName _SC_XOPEN_REALTIME_THREADS;
    public static SysconfName _SC_ADVISORY_INFO;
    public static SysconfName _SC_BARRIERS;
    public static SysconfName _SC_BASE;
    public static SysconfName _SC_C_LANG_SUPPORT;
    public static SysconfName _SC_C_LANG_SUPPORT_R;
    public static SysconfName _SC_CLOCK_SELECTION;
    public static SysconfName _SC_CPUTIME;
    public static SysconfName _SC_THREAD_CPUTIME;
    public static SysconfName _SC_DEVICE_IO;
    public static SysconfName _SC_DEVICE_SPECIFIC;
    public static SysconfName _SC_DEVICE_SPECIFIC_R;
    public static SysconfName _SC_FD_MGMT;
    public static SysconfName _SC_FIFO;
    public static SysconfName _SC_PIPE;
    public static SysconfName _SC_FILE_ATTRIBUTES;
    public static SysconfName _SC_FILE_LOCKING;
    public static SysconfName _SC_FILE_SYSTEM;
    public static SysconfName _SC_MONOTONIC_CLOCK;
    public static SysconfName _SC_MULTI_PROCESS;
    public static SysconfName _SC_SINGLE_PROCESS;
    public static SysconfName _SC_NETWORKING;
    public static SysconfName _SC_READER_WRITER_LOCKS;
    public static SysconfName _SC_SPIN_LOCKS;
    public static SysconfName _SC_REGEXP;
    public static SysconfName _SC_REGEX_VERSION;
    public static SysconfName _SC_SHELL;
    public static SysconfName _SC_SIGNALS;
    public static SysconfName _SC_SPAWN;
    public static SysconfName _SC_SPORADIC_SERVER;
    public static SysconfName _SC_THREAD_SPORADIC_SERVER;
    public static SysconfName _SC_SYSTEM_DATABASE;
    public static SysconfName _SC_SYSTEM_DATABASE_R;
    public static SysconfName _SC_TIMEOUTS;
    public static SysconfName _SC_TYPED_MEMORY_OBJECTS;
    public static SysconfName _SC_USER_GROUPS;
    public static SysconfName _SC_USER_GROUPS_R;
    public static SysconfName _SC_2_PBS;
    public static SysconfName _SC_2_PBS_ACCOUNTING;
    public static SysconfName _SC_2_PBS_LOCATE;
    public static SysconfName _SC_2_PBS_MESSAGE;
    public static SysconfName _SC_2_PBS_TRACK;
    public static SysconfName _SC_SYMLOOP_MAX;
    public static SysconfName _SC_STREAMS;
    public static SysconfName _SC_2_PBS_CHECKPOINT;
    public static SysconfName _SC_V6_ILP32_OFF32;
    public static SysconfName _SC_V6_ILP32_OFFBIG;
    public static SysconfName _SC_V6_LP64_OFF64;
    public static SysconfName _SC_V6_LPBIG_OFFBIG;
    public static SysconfName _SC_HOST_NAME_MAX;
    public static SysconfName _SC_TRACE;
    public static SysconfName _SC_TRACE_EVENT_FILTER;
    public static SysconfName _SC_TRACE_INHERIT;
    public static SysconfName _SC_TRACE_LOG;
    public static SysconfName _SC_LEVEL1_ICACHE_SIZE;
    public static SysconfName _SC_LEVEL1_ICACHE_ASSOC;
    public static SysconfName _SC_LEVEL1_ICACHE_LINESIZE;
    public static SysconfName _SC_LEVEL1_DCACHE_SIZE;
    public static SysconfName _SC_LEVEL1_DCACHE_ASSOC;
    public static SysconfName _SC_LEVEL1_DCACHE_LINESIZE;
    public static SysconfName _SC_LEVEL2_CACHE_SIZE;
    public static SysconfName _SC_LEVEL2_CACHE_ASSOC;
    public static SysconfName _SC_LEVEL2_CACHE_LINESIZE;
    public static SysconfName _SC_LEVEL3_CACHE_SIZE;
    public static SysconfName _SC_LEVEL3_CACHE_ASSOC;
    public static SysconfName _SC_LEVEL3_CACHE_LINESIZE;
    public static SysconfName _SC_LEVEL4_CACHE_SIZE;
    public static SysconfName _SC_LEVEL4_CACHE_ASSOC;
    public static SysconfName _SC_LEVEL4_CACHE_LINESIZE;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.SyslogFacility : Enum {
    public int value__;
    public static SyslogFacility LOG_KERN;
    public static SyslogFacility LOG_USER;
    public static SyslogFacility LOG_MAIL;
    public static SyslogFacility LOG_DAEMON;
    public static SyslogFacility LOG_AUTH;
    public static SyslogFacility LOG_SYSLOG;
    public static SyslogFacility LOG_LPR;
    public static SyslogFacility LOG_NEWS;
    public static SyslogFacility LOG_UUCP;
    public static SyslogFacility LOG_CRON;
    public static SyslogFacility LOG_AUTHPRIV;
    public static SyslogFacility LOG_FTP;
    public static SyslogFacility LOG_LOCAL0;
    public static SyslogFacility LOG_LOCAL1;
    public static SyslogFacility LOG_LOCAL2;
    public static SyslogFacility LOG_LOCAL3;
    public static SyslogFacility LOG_LOCAL4;
    public static SyslogFacility LOG_LOCAL5;
    public static SyslogFacility LOG_LOCAL6;
    public static SyslogFacility LOG_LOCAL7;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.SyslogLevel : Enum {
    public int value__;
    public static SyslogLevel LOG_EMERG;
    public static SyslogLevel LOG_ALERT;
    public static SyslogLevel LOG_CRIT;
    public static SyslogLevel LOG_ERR;
    public static SyslogLevel LOG_WARNING;
    public static SyslogLevel LOG_NOTICE;
    public static SyslogLevel LOG_INFO;
    public static SyslogLevel LOG_DEBUG;
}
[FlagsAttribute]
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.SyslogOptions : Enum {
    public int value__;
    public static SyslogOptions LOG_PID;
    public static SyslogOptions LOG_CONS;
    public static SyslogOptions LOG_ODELAY;
    public static SyslogOptions LOG_NDELAY;
    public static SyslogOptions LOG_NOWAIT;
    public static SyslogOptions LOG_PERROR;
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.time_tAttribute : MapAttribute {
}
[MapAttribute("struct timespec")]
public class Mono.Unix.Native.Timespec : ValueType {
    [time_tAttribute]
public long tv_sec;
    public long tv_nsec;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Timespec value);
    public static bool op_Equality(Timespec lhs, Timespec rhs);
    public static bool op_Inequality(Timespec lhs, Timespec rhs);
}
[MapAttribute("struct timeval")]
public class Mono.Unix.Native.Timeval : ValueType {
    [time_tAttribute]
public long tv_sec;
    [suseconds_tAttribute]
public long tv_usec;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Timeval value);
    public static bool op_Equality(Timeval lhs, Timeval rhs);
    public static bool op_Inequality(Timeval lhs, Timeval rhs);
}
[MapAttribute("struct timezone")]
public class Mono.Unix.Native.Timezone : ValueType {
    public int tz_minuteswest;
    private int tz_dsttime;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Timezone value);
    public static bool op_Equality(Timezone lhs, Timezone rhs);
    public static bool op_Inequality(Timezone lhs, Timezone rhs);
}
[AttributeUsageAttribute("256")]
internal class Mono.Unix.Native.uid_tAttribute : MapAttribute {
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.UnixAddressFamily : Enum {
    public int value__;
    public static UnixAddressFamily AF_UNSPEC;
    public static UnixAddressFamily AF_UNIX;
    public static UnixAddressFamily AF_INET;
    public static UnixAddressFamily AF_AX25;
    public static UnixAddressFamily AF_IPX;
    public static UnixAddressFamily AF_APPLETALK;
    public static UnixAddressFamily AF_NETROM;
    public static UnixAddressFamily AF_BRIDGE;
    public static UnixAddressFamily AF_ATMPVC;
    public static UnixAddressFamily AF_X25;
    public static UnixAddressFamily AF_INET6;
    public static UnixAddressFamily AF_ROSE;
    public static UnixAddressFamily AF_DECnet;
    public static UnixAddressFamily AF_NETBEUI;
    public static UnixAddressFamily AF_SECURITY;
    public static UnixAddressFamily AF_KEY;
    public static UnixAddressFamily AF_NETLINK;
    public static UnixAddressFamily AF_PACKET;
    public static UnixAddressFamily AF_ASH;
    public static UnixAddressFamily AF_ECONET;
    public static UnixAddressFamily AF_ATMSVC;
    public static UnixAddressFamily AF_RDS;
    public static UnixAddressFamily AF_SNA;
    public static UnixAddressFamily AF_IRDA;
    public static UnixAddressFamily AF_PPPOX;
    public static UnixAddressFamily AF_WANPIPE;
    public static UnixAddressFamily AF_LLC;
    public static UnixAddressFamily AF_CAN;
    public static UnixAddressFamily AF_TIPC;
    public static UnixAddressFamily AF_BLUETOOTH;
    public static UnixAddressFamily AF_IUCV;
    public static UnixAddressFamily AF_RXRPC;
    public static UnixAddressFamily AF_ISDN;
    public static UnixAddressFamily AF_PHONET;
    public static UnixAddressFamily AF_IEEE802154;
    public static UnixAddressFamily AF_CAIF;
    public static UnixAddressFamily AF_ALG;
    public static UnixAddressFamily AF_NFC;
    public static UnixAddressFamily AF_VSOCK;
    public static UnixAddressFamily Unknown;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.UnixSocketControlMessage : Enum {
    public int value__;
    public static UnixSocketControlMessage SCM_RIGHTS;
    public static UnixSocketControlMessage SCM_CREDENTIALS;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.UnixSocketFlags : Enum {
    public int value__;
    public static UnixSocketFlags SOCK_CLOEXEC;
    public static UnixSocketFlags SOCK_NONBLOCK;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.UnixSocketOptionName : Enum {
    public int value__;
    public static UnixSocketOptionName SO_DEBUG;
    public static UnixSocketOptionName SO_REUSEADDR;
    public static UnixSocketOptionName SO_TYPE;
    public static UnixSocketOptionName SO_ERROR;
    public static UnixSocketOptionName SO_DONTROUTE;
    public static UnixSocketOptionName SO_BROADCAST;
    public static UnixSocketOptionName SO_SNDBUF;
    public static UnixSocketOptionName SO_RCVBUF;
    public static UnixSocketOptionName SO_SNDBUFFORCE;
    public static UnixSocketOptionName SO_RCVBUFFORCE;
    public static UnixSocketOptionName SO_KEEPALIVE;
    public static UnixSocketOptionName SO_OOBINLINE;
    public static UnixSocketOptionName SO_NO_CHECK;
    public static UnixSocketOptionName SO_PRIORITY;
    public static UnixSocketOptionName SO_LINGER;
    public static UnixSocketOptionName SO_BSDCOMPAT;
    public static UnixSocketOptionName SO_REUSEPORT;
    public static UnixSocketOptionName SO_PASSCRED;
    public static UnixSocketOptionName SO_PEERCRED;
    public static UnixSocketOptionName SO_RCVLOWAT;
    public static UnixSocketOptionName SO_SNDLOWAT;
    public static UnixSocketOptionName SO_RCVTIMEO;
    public static UnixSocketOptionName SO_SNDTIMEO;
    public static UnixSocketOptionName SO_SECURITY_AUTHENTICATION;
    public static UnixSocketOptionName SO_SECURITY_ENCRYPTION_TRANSPORT;
    public static UnixSocketOptionName SO_SECURITY_ENCRYPTION_NETWORK;
    public static UnixSocketOptionName SO_BINDTODEVICE;
    public static UnixSocketOptionName SO_ATTACH_FILTER;
    public static UnixSocketOptionName SO_DETACH_FILTER;
    public static UnixSocketOptionName SO_PEERNAME;
    public static UnixSocketOptionName SO_TIMESTAMP;
    public static UnixSocketOptionName SO_ACCEPTCONN;
    public static UnixSocketOptionName SO_PEERSEC;
    public static UnixSocketOptionName SO_PASSSEC;
    public static UnixSocketOptionName SO_TIMESTAMPNS;
    public static UnixSocketOptionName SO_MARK;
    public static UnixSocketOptionName SO_TIMESTAMPING;
    public static UnixSocketOptionName SO_PROTOCOL;
    public static UnixSocketOptionName SO_DOMAIN;
    public static UnixSocketOptionName SO_RXQ_OVFL;
    public static UnixSocketOptionName SO_WIFI_STATUS;
    public static UnixSocketOptionName SO_PEEK_OFF;
    public static UnixSocketOptionName SO_NOFCS;
    public static UnixSocketOptionName SO_LOCK_FILTER;
    public static UnixSocketOptionName SO_SELECT_ERR_QUEUE;
    public static UnixSocketOptionName SO_BUSY_POLL;
    public static UnixSocketOptionName SO_MAX_PACING_RATE;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.UnixSocketProtocol : Enum {
    public int value__;
    public static UnixSocketProtocol IPPROTO_ICMP;
    public static UnixSocketProtocol IPPROTO_IGMP;
    public static UnixSocketProtocol IPPROTO_IPIP;
    public static UnixSocketProtocol IPPROTO_TCP;
    public static UnixSocketProtocol IPPROTO_EGP;
    public static UnixSocketProtocol IPPROTO_PUP;
    public static UnixSocketProtocol IPPROTO_UDP;
    public static UnixSocketProtocol IPPROTO_IDP;
    public static UnixSocketProtocol IPPROTO_TP;
    public static UnixSocketProtocol IPPROTO_DCCP;
    public static UnixSocketProtocol IPPROTO_IPV6;
    public static UnixSocketProtocol IPPROTO_RSVP;
    public static UnixSocketProtocol IPPROTO_GRE;
    public static UnixSocketProtocol IPPROTO_ESP;
    public static UnixSocketProtocol IPPROTO_AH;
    public static UnixSocketProtocol IPPROTO_MTP;
    public static UnixSocketProtocol IPPROTO_BEETPH;
    public static UnixSocketProtocol IPPROTO_ENCAP;
    public static UnixSocketProtocol IPPROTO_PIM;
    public static UnixSocketProtocol IPPROTO_COMP;
    public static UnixSocketProtocol IPPROTO_SCTP;
    public static UnixSocketProtocol IPPROTO_UDPLITE;
    public static UnixSocketProtocol IPPROTO_RAW;
    public static UnixSocketProtocol IPPROTO_IP;
    public static UnixSocketProtocol SOL_SOCKET;
}
[MapAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.UnixSocketType : Enum {
    public int value__;
    public static UnixSocketType SOCK_STREAM;
    public static UnixSocketType SOCK_DGRAM;
    public static UnixSocketType SOCK_RAW;
    public static UnixSocketType SOCK_RDM;
    public static UnixSocketType SOCK_SEQPACKET;
    public static UnixSocketType SOCK_DCCP;
    public static UnixSocketType SOCK_PACKET;
}
[MapAttribute("struct utimbuf")]
public class Mono.Unix.Native.Utimbuf : ValueType {
    [time_tAttribute]
public long actime;
    [time_tAttribute]
public long modtime;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Utimbuf value);
    public static bool op_Equality(Utimbuf lhs, Utimbuf rhs);
    public static bool op_Inequality(Utimbuf lhs, Utimbuf rhs);
}
public class Mono.Unix.Native.Utsname : object {
    public string sysname;
    public string nodename;
    public string release;
    public string version;
    public string machine;
    public string domainname;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Utsname value);
    public virtual string ToString();
    public static bool op_Equality(Utsname lhs, Utsname rhs);
    public static bool op_Inequality(Utsname lhs, Utsname rhs);
}
[FlagsAttribute]
[MapAttribute]
public enum Mono.Unix.Native.WaitOptions : Enum {
    public int value__;
    public static WaitOptions WNOHANG;
    public static WaitOptions WUNTRACED;
}
[MapAttribute]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Mono.Unix.Native.XattrFlags : Enum {
    public int value__;
    public static XattrFlags XATTR_AUTO;
    public static XattrFlags XATTR_CREATE;
    public static XattrFlags XATTR_REPLACE;
}
public class Mono.Unix.PeerCred : object {
    private static int so_peercred;
    private PeerCredData data;
    public int ProcessID { get; }
    public int UserID { get; }
    public int GroupID { get; }
    public PeerCred(Socket sock);
    public int get_ProcessID();
    public int get_UserID();
    public int get_GroupID();
}
internal class Mono.Unix.PeerCredData : ValueType {
    public int pid;
    public int uid;
    public int gid;
}
public class Mono.Unix.StdioFileStream : Stream {
    public static IntPtr InvalidFileStream;
    public static IntPtr StandardInput;
    public static IntPtr StandardOutput;
    public static IntPtr StandardError;
    private bool canSeek;
    private bool canRead;
    private bool canWrite;
    private bool owner;
    private IntPtr file;
    public IntPtr Handle { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StdioFileStream(IntPtr fileStream);
    public StdioFileStream(IntPtr fileStream, bool ownsHandle);
    public StdioFileStream(IntPtr fileStream, FileAccess access);
    public StdioFileStream(IntPtr fileStream, FileAccess access, bool ownsHandle);
    public StdioFileStream(string path);
    public StdioFileStream(string path, string mode);
    public StdioFileStream(string path, FileMode mode);
    public StdioFileStream(string path, FileAccess access);
    public StdioFileStream(string path, FileMode mode, FileAccess access);
    private static StdioFileStream();
    private static IntPtr Fopen(string path, string mode);
    private void InitStream(IntPtr fileStream, bool ownsHandle);
    private void InitCanReadWrite(FileAccess access);
    private static string ToFopenMode(string file, FileMode mode);
    private static string ToFopenMode(string file, FileAccess access);
    private static string ToFopenMode(string file, FileMode mode, FileAccess access);
    private static bool AssertFileMode(string file, FileMode mode);
    private static bool FileExists(string file);
    private void AssertNotDisposed();
    public IntPtr get_Handle();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public void SaveFilePosition(FilePosition pos);
    public void RestoreFilePosition(FilePosition pos);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void AssertValidBuffer(Byte[] buffer, int offset, int count);
    public void Rewind();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual override void Finalize();
    public virtual void Close();
}
public class Mono.Unix.UnixClient : MarshalByRefObject {
    private NetworkStream stream;
    private Socket client;
    private bool disposed;
    public Socket Client { get; public set; }
    public PeerCred PeerCredential { get; }
    public LingerOption LingerState { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendBufferSize { get; public set; }
    public int SendTimeout { get; public set; }
    public UnixClient(string path);
    public UnixClient(UnixEndPoint ep);
    internal UnixClient(Socket sock);
    public Socket get_Client();
    public void set_Client(Socket value);
    public PeerCred get_PeerCredential();
    public LingerOption get_LingerState();
    public void set_LingerState(LingerOption value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public void Close();
    public void Connect(UnixEndPoint remoteEndPoint);
    public void Connect(string path);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public NetworkStream GetStream();
    private void CheckDisposed();
    protected virtual override void Finalize();
}
public class Mono.Unix.UnixDirectoryInfo : UnixFileSystemInfo {
    public string Name { get; }
    public UnixDirectoryInfo Parent { get; }
    public UnixDirectoryInfo Root { get; }
    public UnixDirectoryInfo(string path);
    internal UnixDirectoryInfo(string path, Stat stat);
    public virtual string get_Name();
    public UnixDirectoryInfo get_Parent();
    public UnixDirectoryInfo get_Root();
    [CLSCompliantAttribute("False")]
public void Create(FilePermissions mode);
    public void Create(FileAccessPermissions mode);
    public void Create();
    public virtual void Delete();
    public void Delete(bool recursive);
    public Dirent[] GetEntries();
    private static Dirent[] GetEntries(IntPtr dirp);
    public Dirent[] GetEntries(Regex regex);
    private static Dirent[] GetEntries(IntPtr dirp, Regex regex);
    public Dirent[] GetEntries(string regex);
    public UnixFileSystemInfo[] GetFileSystemEntries();
    private UnixFileSystemInfo[] GetFileSystemEntries(Dirent[] dentries);
    public UnixFileSystemInfo[] GetFileSystemEntries(Regex regex);
    public UnixFileSystemInfo[] GetFileSystemEntries(string regex);
    public static string GetCurrentDirectory();
    public static void SetCurrentDirectory(string path);
}
public class Mono.Unix.UnixDriveInfo : object {
    private Statvfs stat;
    private string fstype;
    private string mount_point;
    private string block_device;
    public long AvailableFreeSpace { get; }
    public string DriveFormat { get; }
    public UnixDriveType DriveType { get; }
    public bool IsReady { get; }
    public string Name { get; }
    public UnixDirectoryInfo RootDirectory { get; }
    public long TotalFreeSpace { get; }
    public long TotalSize { get; }
    public string VolumeLabel { get; }
    public long MaximumFilenameLength { get; }
    public UnixDriveInfo(string mountPoint);
    private UnixDriveInfo(Fstab fstab);
    private void FromFstab(Fstab fstab);
    public static UnixDriveInfo GetForSpecialFile(string specialFile);
    public long get_AvailableFreeSpace();
    public string get_DriveFormat();
    public UnixDriveType get_DriveType();
    public bool get_IsReady();
    public string get_Name();
    public UnixDirectoryInfo get_RootDirectory();
    public long get_TotalFreeSpace();
    public long get_TotalSize();
    public string get_VolumeLabel();
    public long get_MaximumFilenameLength();
    public static UnixDriveInfo[] GetDrives();
    public virtual string ToString();
    private void Refresh();
    private bool Refresh(bool throwException);
}
public enum Mono.Unix.UnixDriveType : Enum {
    public int value__;
    public static UnixDriveType Unknown;
    public static UnixDriveType NoRootDirectory;
    public static UnixDriveType Removable;
    public static UnixDriveType Fixed;
    public static UnixDriveType Network;
    public static UnixDriveType CDRom;
    public static UnixDriveType Ram;
}
public class Mono.Unix.UnixEncoding : Encoding {
    public static Encoding Instance;
    public static char EscapeByte;
    private static UnixEncoding();
    private static int InternalGetByteCount(Char[] chars, int index, int count, UInt32 leftOver, bool flush);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    private static int InternalGetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex, UInt32& leftOver, bool flush);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    private static int InternalGetCharCount(Byte[] bytes, int index, int count, UInt32 leftOverBits, UInt32 leftOverCount, bool throwOnInvalid, bool flush);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    private static int InternalGetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, UInt32& leftOverBits, UInt32& leftOverCount, bool throwOnInvalid, bool flush);
    private static void CopyRaw(Byte[] raw, Int32& next_raw, Char[] chars, Int32& posn, int length);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public virtual Byte[] GetPreamble();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public virtual Byte[] GetBytes(string s);
    private static string _(string arg);
}
public class Mono.Unix.UnixEndPoint : EndPoint {
    private string filename;
    public string Filename { get; public set; }
    public AddressFamily AddressFamily { get; }
    public UnixEndPoint(string filename);
    public string get_Filename();
    public void set_Filename(string value);
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
public class Mono.Unix.UnixEnvironment : object {
    public static string CurrentDirectory { get; public set; }
    public static string MachineName { get; public set; }
    public static string UserName { get; }
    public static UnixGroupInfo RealGroup { get; }
    public static long RealGroupId { get; }
    public static UnixUserInfo RealUser { get; }
    public static long RealUserId { get; }
    public static UnixGroupInfo EffectiveGroup { get; public set; }
    public static long EffectiveGroupId { get; public set; }
    public static UnixUserInfo EffectiveUser { get; public set; }
    public static long EffectiveUserId { get; public set; }
    public static string Login { get; }
    public static string get_CurrentDirectory();
    public static void set_CurrentDirectory(string value);
    public static string get_MachineName();
    public static void set_MachineName(string value);
    public static string get_UserName();
    public static UnixGroupInfo get_RealGroup();
    public static long get_RealGroupId();
    public static UnixUserInfo get_RealUser();
    public static long get_RealUserId();
    public static UnixGroupInfo get_EffectiveGroup();
    public static void set_EffectiveGroup(UnixGroupInfo value);
    public static long get_EffectiveGroupId();
    public static void set_EffectiveGroupId(long value);
    public static UnixUserInfo get_EffectiveUser();
    public static void set_EffectiveUser(UnixUserInfo value);
    public static long get_EffectiveUserId();
    public static void set_EffectiveUserId(long value);
    public static string get_Login();
    [CLSCompliantAttribute("False")]
public static long GetConfigurationValue(SysconfName name);
    [CLSCompliantAttribute("False")]
public static string GetConfigurationString(ConfstrName name);
    public static void SetNiceValue(int inc);
    public static int CreateSession();
    public static void SetProcessGroup();
    public static int GetProcessGroup();
    public static UnixGroupInfo[] GetSupplementaryGroups();
    private static UInt32[] _GetSupplementaryGroupIds();
    public static void SetSupplementaryGroups(UnixGroupInfo[] groups);
    public static Int64[] GetSupplementaryGroupIds();
    public static void SetSupplementaryGroupIds(Int64[] list);
    public static int GetParentProcessId();
    public static UnixProcess GetParentProcess();
    public static String[] GetUserShells();
}
public class Mono.Unix.UnixFileInfo : UnixFileSystemInfo {
    public string Name { get; }
    public string DirectoryName { get; }
    public UnixDirectoryInfo Directory { get; }
    public UnixFileInfo(string path);
    internal UnixFileInfo(string path, Stat stat);
    public virtual string get_Name();
    public string get_DirectoryName();
    public UnixDirectoryInfo get_Directory();
    public virtual void Delete();
    public UnixStream Create();
    [CLSCompliantAttribute("False")]
public UnixStream Create(FilePermissions mode);
    public UnixStream Create(FileAccessPermissions mode);
    [CLSCompliantAttribute("False")]
public UnixStream Open(OpenFlags flags);
    [CLSCompliantAttribute("False")]
public UnixStream Open(OpenFlags flags, FilePermissions mode);
    public UnixStream Open(FileMode mode);
    public UnixStream Open(FileMode mode, FileAccess access);
    [CLSCompliantAttribute("False")]
public UnixStream Open(FileMode mode, FileAccess access, FilePermissions perms);
    public UnixStream OpenRead();
    public UnixStream OpenWrite();
}
public abstract class Mono.Unix.UnixFileSystemInfo : object {
    private Stat stat;
    private string fullPath;
    private string originalPath;
    private bool valid;
    internal static FileSpecialAttributes AllSpecialAttributes;
    internal static FileTypes AllFileTypes;
    protected string FullPath { get; protected set; }
    protected string OriginalPath { get; protected set; }
    public string FullName { get; }
    public string Name { get; }
    public bool Exists { get; }
    public long Device { get; }
    public long Inode { get; }
    [CLSCompliantAttribute("False")]
public FilePermissions Protection { get; public set; }
    public FileTypes FileType { get; }
    public FileAccessPermissions FileAccessPermissions { get; public set; }
    public FileSpecialAttributes FileSpecialAttributes { get; public set; }
    public long LinkCount { get; }
    public UnixUserInfo OwnerUser { get; }
    public long OwnerUserId { get; }
    public UnixGroupInfo OwnerGroup { get; }
    public long OwnerGroupId { get; }
    public long DeviceType { get; }
    public long Length { get; }
    public long BlockSize { get; }
    public long BlocksAllocated { get; }
    public DateTime LastAccessTime { get; }
    public DateTime LastAccessTimeUtc { get; }
    public DateTime LastWriteTime { get; }
    public DateTime LastWriteTimeUtc { get; }
    public DateTime LastStatusChangeTime { get; }
    public DateTime LastStatusChangeTimeUtc { get; }
    public bool IsDirectory { get; }
    public bool IsCharacterDevice { get; }
    public bool IsBlockDevice { get; }
    public bool IsRegularFile { get; }
    public bool IsFifo { get; }
    public bool IsSymbolicLink { get; }
    public bool IsSocket { get; }
    public bool IsSetUser { get; }
    public bool IsSetGroup { get; }
    public bool IsSticky { get; }
    protected UnixFileSystemInfo(string path);
    internal UnixFileSystemInfo(string path, Stat stat);
    protected string get_FullPath();
    protected void set_FullPath(string value);
    protected string get_OriginalPath();
    protected void set_OriginalPath(string value);
    private void AssertValid();
    public virtual string get_FullName();
    public abstract virtual string get_Name();
    public bool get_Exists();
    public long get_Device();
    public long get_Inode();
    public FilePermissions get_Protection();
    public void set_Protection(FilePermissions value);
    public FileTypes get_FileType();
    public FileAccessPermissions get_FileAccessPermissions();
    public void set_FileAccessPermissions(FileAccessPermissions value);
    public FileSpecialAttributes get_FileSpecialAttributes();
    public void set_FileSpecialAttributes(FileSpecialAttributes value);
    public long get_LinkCount();
    public UnixUserInfo get_OwnerUser();
    public long get_OwnerUserId();
    public UnixGroupInfo get_OwnerGroup();
    public long get_OwnerGroupId();
    public long get_DeviceType();
    public long get_Length();
    public long get_BlockSize();
    public long get_BlocksAllocated();
    public DateTime get_LastAccessTime();
    public DateTime get_LastAccessTimeUtc();
    public DateTime get_LastWriteTime();
    public DateTime get_LastWriteTimeUtc();
    public DateTime get_LastStatusChangeTime();
    public DateTime get_LastStatusChangeTimeUtc();
    public bool get_IsDirectory();
    public bool get_IsCharacterDevice();
    public bool get_IsBlockDevice();
    public bool get_IsRegularFile();
    public bool get_IsFifo();
    public bool get_IsSymbolicLink();
    public bool get_IsSocket();
    public bool get_IsSetUser();
    public bool get_IsSetGroup();
    public bool get_IsSticky();
    internal static bool IsFileType(FilePermissions mode, FilePermissions type);
    internal static bool IsSet(FilePermissions mode, FilePermissions type);
    [CLSCompliantAttribute("False")]
public bool CanAccess(AccessModes mode);
    public UnixFileSystemInfo CreateLink(string path);
    public UnixSymbolicLinkInfo CreateSymbolicLink(string path);
    public abstract virtual void Delete();
    [CLSCompliantAttribute("False")]
public long GetConfigurationValue(PathconfName name);
    public void Refresh();
    internal void Refresh(bool force);
    protected virtual bool GetFileStatus(string path, Stat& stat);
    public void SetLength(long length);
    public virtual void SetOwner(long owner, long group);
    public void SetOwner(string owner);
    public void SetOwner(string owner, string group);
    public void SetOwner(UnixUserInfo owner);
    public void SetOwner(UnixUserInfo owner, UnixGroupInfo group);
    public virtual string ToString();
    public Stat ToStat();
    public static UnixFileSystemInfo GetFileSystemEntry(string path);
    public static bool TryGetFileSystemEntry(string path, UnixFileSystemInfo& entry);
}
public class Mono.Unix.UnixGroupInfo : object {
    private Group group;
    public string GroupName { get; }
    public string Password { get; }
    public long GroupId { get; }
    public UnixGroupInfo(string group);
    public UnixGroupInfo(long group);
    public UnixGroupInfo(Group group);
    private static Group CopyGroup(Group group);
    public string get_GroupName();
    public string get_Password();
    public long get_GroupId();
    public UnixUserInfo[] GetMembers();
    public String[] GetMemberNames();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public Group ToGroup();
    public static UnixGroupInfo[] GetLocalGroups();
}
public class Mono.Unix.UnixIOException : IOException {
    private int errno;
    public int NativeErrorCode { get; }
    public Errno ErrorCode { get; }
    public UnixIOException(int errno);
    public UnixIOException(int errno, Exception inner);
    public UnixIOException(Errno errno);
    public UnixIOException(Errno errno, Exception inner);
    public UnixIOException(string message);
    public UnixIOException(string message, Exception inner);
    protected UnixIOException(SerializationInfo info, StreamingContext context);
    public int get_NativeErrorCode();
    public Errno get_ErrorCode();
    private static string GetMessage(Errno errno);
}
public class Mono.Unix.UnixListener : MarshalByRefObject {
    private bool disposed;
    private bool listening;
    private Socket server;
    private EndPoint savedEP;
    public EndPoint LocalEndpoint { get; }
    protected Socket Server { get; }
    public UnixListener(string path);
    public UnixListener(UnixEndPoint localEndPoint);
    private void Init(UnixEndPoint ep);
    public EndPoint get_LocalEndpoint();
    protected Socket get_Server();
    public Socket AcceptSocket();
    public UnixClient AcceptUnixClient();
    protected virtual override void Finalize();
    public bool Pending();
    public void Start();
    public void Start(int backlog);
    public void Stop();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    private void CheckDisposed();
}
public class Mono.Unix.UnixMarshal : object {
    [CLSCompliantAttribute("False")]
public static string GetErrorDescription(Errno errno);
    public static IntPtr AllocHeap(long size);
    public static IntPtr ReAllocHeap(IntPtr ptr, long size);
    public static void FreeHeap(IntPtr ptr);
    public static string PtrToStringUnix(IntPtr p);
    public static string PtrToString(IntPtr p);
    public static string PtrToString(IntPtr p, Encoding encoding);
    private static int GetStringByteLength(IntPtr p, Encoding encoding);
    private static int GetInt16BufferLength(IntPtr p);
    private static int GetInt32BufferLength(IntPtr p);
    private static int GetRandomBufferLength(IntPtr p, int nullLength);
    public static String[] PtrToStringArray(IntPtr stringArray);
    public static String[] PtrToStringArray(IntPtr stringArray, Encoding encoding);
    private static int CountStrings(IntPtr stringArray);
    public static String[] PtrToStringArray(int count, IntPtr stringArray);
    public static String[] PtrToStringArray(int count, IntPtr stringArray, Encoding encoding);
    public static IntPtr StringToHeap(string s);
    public static IntPtr StringToHeap(string s, Encoding encoding);
    public static IntPtr StringToHeap(string s, int index, int count);
    public static IntPtr StringToHeap(string s, int index, int count, Encoding encoding);
    public static bool ShouldRetrySyscall(int r);
    [CLSCompliantAttribute("False")]
public static bool ShouldRetrySyscall(int r, Errno& errno);
    internal static string EscapeFormatString(string message, Char[] permitted);
    private static bool IsCharPresent(Char[] array, char c);
    internal static Exception CreateExceptionForError(Errno errno);
    internal static Exception CreateExceptionForLastError();
    [CLSCompliantAttribute("False")]
public static void ThrowExceptionForError(Errno errno);
    public static void ThrowExceptionForLastError();
    [CLSCompliantAttribute("False")]
public static void ThrowExceptionForErrorIf(int retval, Errno errno);
    public static void ThrowExceptionForLastErrorIf(int retval);
}
public class Mono.Unix.UnixPath : object {
    public static char DirectorySeparatorChar;
    public static char AltDirectorySeparatorChar;
    public static char PathSeparator;
    public static char VolumeSeparatorChar;
    private static Char[] _InvalidPathChars;
    private static UnixPath();
    public static Char[] GetInvalidPathChars();
    public static string Combine(string path1, String[] paths);
    private static void Combine(StringBuilder path, string part);
    public static string GetDirectoryName(string path);
    public static string GetFileName(string path);
    public static string GetFullPath(string path);
    private static string _GetFullPath(string path);
    public static string GetCanonicalPath(string path);
    private static void GetPathComponents(string path, String[]& components, Int32& lastIndex);
    public static string GetPathRoot(string path);
    public static string GetCompleteRealPath(string path);
    public static string GetRealPath(string path);
    internal static string ReadSymbolicLink(string path);
    public static string TryReadLink(string path);
    public static string TryReadLinkAt(int dirfd, string path);
    public static string ReadLink(string path);
    public static string ReadLinkAt(int dirfd, string path);
    public static bool IsPathRooted(string path);
    internal static void CheckPath(string path);
}
public class Mono.Unix.UnixPipes : ValueType {
    public UnixStream Reading;
    public UnixStream Writing;
    public UnixPipes(UnixStream reading, UnixStream writing);
    public static UnixPipes CreatePipes();
    public virtual bool Equals(object value);
    public sealed virtual bool Equals(UnixPipes value);
    public virtual int GetHashCode();
    public static bool op_Equality(UnixPipes lhs, UnixPipes rhs);
    public static bool op_Inequality(UnixPipes lhs, UnixPipes rhs);
}
public class Mono.Unix.UnixProcess : object {
    private int pid;
    public int Id { get; }
    public bool HasExited { get; }
    public int ExitCode { get; }
    public bool HasSignaled { get; }
    public Signum TerminationSignal { get; }
    public bool HasStopped { get; }
    public Signum StopSignal { get; }
    public int ProcessGroupId { get; public set; }
    public int SessionId { get; }
    internal UnixProcess(int pid);
    public int get_Id();
    public bool get_HasExited();
    private int GetProcessStatus();
    public int get_ExitCode();
    public bool get_HasSignaled();
    public Signum get_TerminationSignal();
    public bool get_HasStopped();
    public Signum get_StopSignal();
    public int get_ProcessGroupId();
    public void set_ProcessGroupId(int value);
    public int get_SessionId();
    public static UnixProcess GetCurrentProcess();
    public static int GetCurrentProcessId();
    public void Kill();
    [CLSCompliantAttribute("False")]
public void Signal(Signum signal);
    public void WaitForExit();
}
public class Mono.Unix.UnixSignal : WaitHandle {
    private int signum;
    private IntPtr signal_info;
    private static Mono_Posix_RuntimeIsShuttingDown ShuttingDown;
    public Signum Signum { get; }
    public RealTimeSignum RealTimeSignum { get; }
    public bool IsRealTimeSignal { get; }
    private SignalInfo* Info { get; }
    public bool IsSet { get; }
    public int Count { get; public set; }
    private static UnixSignal();
    public UnixSignal(Signum signum);
    public UnixSignal(RealTimeSignum rtsig);
    public Signum get_Signum();
    public RealTimeSignum get_RealTimeSignum();
    public bool get_IsRealTimeSignal();
    private static IntPtr install(int signum);
    private static int uninstall(IntPtr info);
    private static int RuntimeShuttingDownCallback();
    private static int WaitAny(IntPtr[] infos, int count, int timeout, Mono_Posix_RuntimeIsShuttingDown shutting_down);
    internal static int GetSIGRTMIN();
    internal static int GetSIGRTMAX();
    private void AssertValid();
    private SignalInfo* get_Info();
    public bool get_IsSet();
    public bool Reset();
    public int get_Count();
    public void set_Count(int value);
    protected virtual void Dispose(bool disposing);
    public virtual bool WaitOne();
    public virtual bool WaitOne(TimeSpan timeout, bool exitContext);
    public virtual bool WaitOne(int millisecondsTimeout, bool exitContext);
    public static int WaitAny(UnixSignal[] signals);
    public static int WaitAny(UnixSignal[] signals, TimeSpan timeout);
    public static int WaitAny(UnixSignal[] signals, int millisecondsTimeout);
}
public class Mono.Unix.UnixStream : Stream {
    public static int InvalidFileDescriptor;
    public static int StandardInputFileDescriptor;
    public static int StandardOutputFileDescriptor;
    public static int StandardErrorFileDescriptor;
    private bool canSeek;
    private bool canRead;
    private bool canWrite;
    private bool owner;
    private int fileDescriptor;
    private Stat stat;
    public int Handle { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    [CLSCompliantAttribute("False")]
public FilePermissions Protection { get; public set; }
    public FileTypes FileType { get; }
    public FileAccessPermissions FileAccessPermissions { get; public set; }
    public FileSpecialAttributes FileSpecialAttributes { get; public set; }
    public UnixUserInfo OwnerUser { get; }
    public long OwnerUserId { get; }
    public UnixGroupInfo OwnerGroup { get; }
    public long OwnerGroupId { get; }
    public UnixStream(int fileDescriptor);
    public UnixStream(int fileDescriptor, bool ownsHandle);
    private void AssertNotDisposed();
    public int get_Handle();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public FilePermissions get_Protection();
    public void set_Protection(FilePermissions value);
    public FileTypes get_FileType();
    public FileAccessPermissions get_FileAccessPermissions();
    public void set_FileAccessPermissions(FileAccessPermissions value);
    public FileSpecialAttributes get_FileSpecialAttributes();
    public void set_FileSpecialAttributes(FileSpecialAttributes value);
    public UnixUserInfo get_OwnerUser();
    public long get_OwnerUserId();
    public UnixGroupInfo get_OwnerGroup();
    public long get_OwnerGroupId();
    private void RefreshStat();
    public void AdviseFileAccessPattern(FileAccessPattern pattern, long offset, long len);
    public void AdviseFileAccessPattern(FileAccessPattern pattern);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void AssertValidBuffer(Byte[] buffer, int offset, int count);
    public int ReadAtOffset(Byte[] buffer, int offset, int count, long fileOffset);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void WriteAtOffset(Byte[] buffer, int offset, int count, long fileOffset);
    public void SendTo(UnixStream output);
    [CLSCompliantAttribute("False")]
public void SendTo(UnixStream output, ulong count);
    [CLSCompliantAttribute("False")]
public void SendTo(int out_fd, ulong count);
    public void SetOwner(long user, long group);
    public void SetOwner(string user, string group);
    public void SetOwner(string user);
    [CLSCompliantAttribute("False")]
public long GetConfigurationValue(PathconfName name);
    protected virtual override void Finalize();
    public virtual void Close();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class Mono.Unix.UnixSymbolicLinkInfo : UnixFileSystemInfo {
    public string Name { get; }
    [ObsoleteAttribute("Use GetContents()")]
public UnixFileSystemInfo Contents { get; }
    public string ContentsPath { get; }
    public bool HasContents { get; }
    public UnixSymbolicLinkInfo(string path);
    internal UnixSymbolicLinkInfo(string path, Stat stat);
    public virtual string get_Name();
    public UnixFileSystemInfo get_Contents();
    public string get_ContentsPath();
    public bool get_HasContents();
    public UnixFileSystemInfo GetContents();
    public void CreateSymbolicLinkTo(string path);
    public void CreateSymbolicLinkTo(UnixFileSystemInfo path);
    public virtual void Delete();
    public virtual void SetOwner(long owner, long group);
    protected virtual bool GetFileStatus(string path, Stat& stat);
}
public class Mono.Unix.UnixUserInfo : object {
    private Passwd passwd;
    public string UserName { get; }
    public string Password { get; }
    public long UserId { get; }
    public UnixGroupInfo Group { get; }
    public long GroupId { get; }
    public string GroupName { get; }
    public string RealName { get; }
    public string HomeDirectory { get; }
    public string ShellProgram { get; }
    public UnixUserInfo(string user);
    [CLSCompliantAttribute("False")]
public UnixUserInfo(UInt32 user);
    public UnixUserInfo(long user);
    public UnixUserInfo(Passwd passwd);
    private static Passwd CopyPasswd(Passwd pw);
    public string get_UserName();
    public string get_Password();
    public long get_UserId();
    public UnixGroupInfo get_Group();
    public long get_GroupId();
    public string get_GroupName();
    public string get_RealName();
    public string get_HomeDirectory();
    public string get_ShellProgram();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public static UnixUserInfo GetRealUser();
    public static long GetRealUserId();
    public static string GetLoginName();
    public Passwd ToPasswd();
    public static UnixUserInfo[] GetLocalUsers();
}
