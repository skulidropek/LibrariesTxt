internal static class FxResources.System.DirectoryServices.Protocols.SR : object {
}
internal static class Interop : object {
    public static int SEC_WINNT_AUTH_IDENTITY_UNICODE;
    public static int SEC_WINNT_AUTH_IDENTITY_VERSION;
    public static string MICROSOFT_KERBEROS_NAME_W;
    public static UInt32 LDAP_SASL_QUIET;
    public static string KerberosDefaultMechanism;
    public static string LDAP_SASL_SIMPLE;
}
internal class LDAP_SASL_INTERACT_PROC : MulticastDelegate {
    public LDAP_SASL_INTERACT_PROC(object object, IntPtr method);
    public virtual int Invoke(IntPtr ld, UInt32 flags, IntPtr defaults, IntPtr interact);
    public virtual IAsyncResult BeginInvoke(IntPtr ld, UInt32 flags, IntPtr defaults, IntPtr interact, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.AddRequest : DirectoryRequest {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryAttributeCollection <Attributes>k__BackingField;
    public string DistinguishedName { get; public set; }
    public DirectoryAttributeCollection Attributes { get; }
    public AddRequest(string distinguishedName, DirectoryAttribute[] attributes);
    public AddRequest(string distinguishedName, string objectClass);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public DirectoryAttributeCollection get_Attributes();
}
public class System.DirectoryServices.Protocols.AddResponse : DirectoryResponse {
    internal AddResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
}
public class System.DirectoryServices.Protocols.AsqRequestControl : DirectoryControl {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    public string AttributeName { get; public set; }
    public AsqRequestControl(string attributeName);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.AsqResponseControl : DirectoryControl {
    [CompilerGeneratedAttribute]
private ResultCode <Result>k__BackingField;
    public ResultCode Result { get; }
    internal AsqResponseControl(int result, bool criticality, Byte[] controlValue);
    [CompilerGeneratedAttribute]
public ResultCode get_Result();
}
public enum System.DirectoryServices.Protocols.AuthType : Enum {
    public int value__;
    public static AuthType Anonymous;
    public static AuthType Basic;
    public static AuthType Negotiate;
    public static AuthType Ntlm;
    public static AuthType Digest;
    public static AuthType Sicily;
    public static AuthType Dpa;
    public static AuthType Msn;
    public static AuthType External;
    public static AuthType Kerberos;
}
[TypeForwardedFromAttribute("System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.Protocols.BerConversionException : DirectoryException {
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected BerConversionException(SerializationInfo info, StreamingContext context);
    public BerConversionException(string message);
    public BerConversionException(string message, Exception inner);
}
public static class System.DirectoryServices.Protocols.BerConverter : object {
    public static Byte[] Encode(string format, Object[] value);
    public static Object[] Decode(string format, Byte[] value);
    internal static Object[] TryDecode(string format, Byte[] value, Boolean& decodeSucceeded);
    private static int EncodingByteArrayHelper(SafeBerHandle berElement, Byte[] tempValue, char fmt, UIntPtr tag);
    private static Byte[] DecodingByteArrayHelper(SafeBerHandle berElement, char fmt, Int32& error);
    private static int EncodingMultiByteArrayHelper(SafeBerHandle berElement, Byte[][] tempValue, char fmt, UIntPtr tag);
    private static Byte[][] DecodingMultiByteArrayHelper(SafeBerHandle berElement, char fmt, Int32& error);
    private static int DecodeBitStringHelper(ArrayList resultList, SafeBerHandle berElement);
}
internal static class System.DirectoryServices.Protocols.BerPal : object {
    internal static void FreeBervalArray(IntPtr ptrResult);
    internal static void FreeBerval(IntPtr flattenptr);
    internal static void FreeBerElement(IntPtr berelement, int option);
    internal static int FlattenBerElement(SafeBerHandle berElement, IntPtr& flattenptr);
    internal static int PrintBerArray(SafeBerHandle berElement, string format, IntPtr value, UIntPtr tag);
    internal static int PrintByteArray(SafeBerHandle berElement, string format, HGlobalMemHandle value, UIntPtr length, UIntPtr tag);
    internal static int PrintEmptyArgument(SafeBerHandle berElement, string format, UIntPtr tag);
    internal static int PrintInt(SafeBerHandle berElement, string format, int value, UIntPtr tag);
    internal static int PrintTag(SafeBerHandle _1, string _2, UIntPtr _3);
    internal static int ScanNext(SafeBerHandle berElement, string format);
    internal static int ScanNextBitString(SafeBerHandle berElement, string format, IntPtr& ptrResult, UInt32& bitLength);
    internal static int ScanNextInt(SafeBerHandle berElement, string format, Int32& result);
    internal static int ScanNextPtr(SafeBerHandle berElement, string format, IntPtr& value);
    internal static int ScanNextMultiByteArray(SafeBerHandle berElement, string format, IntPtr& value);
    internal static bool IsBerDecodeError(int errorCode);
}
[NativeMarshallingAttribute("System.DirectoryServices.Protocols.BerVal/PinningMarshaller")]
internal class System.DirectoryServices.Protocols.BerVal : object {
    public int bv_len;
    public IntPtr bv_val;
}
internal enum System.DirectoryServices.Protocols.BindMethod : Enum {
    public UInt32 value__;
    public static BindMethod LDAP_AUTH_OTHERKIND;
    public static BindMethod LDAP_AUTH_SICILY;
    public static BindMethod LDAP_AUTH_MSN;
    public static BindMethod LDAP_AUTH_NTLM;
    public static BindMethod LDAP_AUTH_DPA;
    public static BindMethod LDAP_AUTH_NEGOTIATE;
    public static BindMethod LDAP_AUTH_SSPI;
    public static BindMethod LDAP_AUTH_DIGEST;
    public static BindMethod LDAP_AUTH_EXTERNAL;
    public static BindMethod LDAP_AUTH_KRBV4;
    public static BindMethod LDAP_AUTH_SIMPLE;
}
public class System.DirectoryServices.Protocols.CompareRequest : DirectoryRequest {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryAttribute <Assertion>k__BackingField;
    public string DistinguishedName { get; public set; }
    public DirectoryAttribute Assertion { get; }
    public CompareRequest(string distinguishedName, string attributeName, string value);
    public CompareRequest(string distinguishedName, string attributeName, Byte[] value);
    public CompareRequest(string distinguishedName, string attributeName, Uri value);
    public CompareRequest(string distinguishedName, DirectoryAttribute assertion);
    private void CompareRequestHelper(string distinguishedName, string attributeName, object value);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public DirectoryAttribute get_Assertion();
}
public class System.DirectoryServices.Protocols.CompareResponse : DirectoryResponse {
    internal CompareResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
}
internal class System.DirectoryServices.Protocols.ConnectionHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal bool _needDispose;
    internal ConnectionHandle(string uri);
    internal ConnectionHandle(IntPtr value, bool disposeHandle);
    protected virtual bool ReleaseHandle();
}
public class System.DirectoryServices.Protocols.CrossDomainMoveControl : DirectoryControl {
    [CompilerGeneratedAttribute]
private string <TargetDomainController>k__BackingField;
    public string TargetDomainController { get; public set; }
    public CrossDomainMoveControl(string targetDomainController);
    [CompilerGeneratedAttribute]
public string get_TargetDomainController();
    [CompilerGeneratedAttribute]
public void set_TargetDomainController(string value);
    public virtual Byte[] GetValue();
}
internal class System.DirectoryServices.Protocols.CRYPTOAPI_BLOB : ValueType {
    public int cbData;
    public IntPtr pbData;
}
public class System.DirectoryServices.Protocols.DeleteRequest : DirectoryRequest {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    public string DistinguishedName { get; public set; }
    public DeleteRequest(string distinguishedName);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
}
public class System.DirectoryServices.Protocols.DeleteResponse : DirectoryResponse {
    internal DeleteResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
}
public enum System.DirectoryServices.Protocols.DereferenceAlias : Enum {
    public int value__;
    public static DereferenceAlias Never;
    public static DereferenceAlias InSearching;
    public static DereferenceAlias FindingBaseObject;
    public static DereferenceAlias Always;
}
public class System.DirectoryServices.Protocols.DereferenceConnectionCallback : MulticastDelegate {
    public DereferenceConnectionCallback(object object, IntPtr method);
    public virtual void Invoke(LdapConnection primaryConnection, LdapConnection connectionToDereference);
    public virtual IAsyncResult BeginInvoke(LdapConnection primaryConnection, LdapConnection connectionToDereference, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.DirectoryServices.Protocols.DEREFERENCECONNECTIONInternal : MulticastDelegate {
    public DEREFERENCECONNECTIONInternal(object object, IntPtr method);
    public virtual int Invoke(IntPtr Connection, IntPtr ConnectionToDereference);
    public virtual IAsyncResult BeginInvoke(IntPtr Connection, IntPtr ConnectionToDereference, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryAttribute : CollectionBase {
    private string _attributeName;
    internal bool _isSearchResult;
    private static UTF8Encoding s_utf8EncoderWithErrorDetection;
    private static UTF8Encoding s_encoder;
    public string Name { get; public set; }
    public object Item { get; public set; }
    public DirectoryAttribute(string name, string value);
    public DirectoryAttribute(string name, Byte[] value);
    public DirectoryAttribute(string name, Uri value);
    internal DirectoryAttribute(string name, object value);
    public DirectoryAttribute(string name, Object[] values);
    private static DirectoryAttribute();
    public string get_Name();
    public void set_Name(string value);
    public Object[] GetValues(Type valuesType);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int Add(Byte[] value);
    public int Add(string value);
    public int Add(Uri value);
    internal int Add(object value);
    public void AddRange(Object[] values);
    public bool Contains(object value);
    public void CopyTo(Object[] array, int index);
    public int IndexOf(object value);
    public void Insert(int index, Byte[] value);
    public void Insert(int index, string value);
    public void Insert(int index, Uri value);
    private void Insert(int index, object value);
    public void Remove(object value);
    protected virtual void OnValidate(object value);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryAttributeCollection : CollectionBase {
    public DirectoryAttribute Item { get; public set; }
    public DirectoryAttribute get_Item(int index);
    public void set_Item(int index, DirectoryAttribute value);
    public int Add(DirectoryAttribute attribute);
    public void AddRange(DirectoryAttribute[] attributes);
    public void AddRange(DirectoryAttributeCollection attributeCollection);
    public bool Contains(DirectoryAttribute value);
    public void CopyTo(DirectoryAttribute[] array, int index);
    public int IndexOf(DirectoryAttribute value);
    public void Insert(int index, DirectoryAttribute value);
    public void Remove(DirectoryAttribute value);
    protected virtual void OnValidate(object value);
}
public class System.DirectoryServices.Protocols.DirectoryAttributeModification : DirectoryAttribute {
    private DirectoryAttributeOperation _attributeOperation;
    public DirectoryAttributeOperation Operation { get; public set; }
    public DirectoryAttributeOperation get_Operation();
    public void set_Operation(DirectoryAttributeOperation value);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection : CollectionBase {
    public DirectoryAttributeModification Item { get; public set; }
    public DirectoryAttributeModification get_Item(int index);
    public void set_Item(int index, DirectoryAttributeModification value);
    public int Add(DirectoryAttributeModification attribute);
    public void AddRange(DirectoryAttributeModification[] attributes);
    public void AddRange(DirectoryAttributeModificationCollection attributeCollection);
    public bool Contains(DirectoryAttributeModification value);
    public void CopyTo(DirectoryAttributeModification[] array, int index);
    public int IndexOf(DirectoryAttributeModification value);
    public void Insert(int index, DirectoryAttributeModification value);
    public void Remove(DirectoryAttributeModification value);
    protected virtual void OnValidate(object value);
}
public enum System.DirectoryServices.Protocols.DirectoryAttributeOperation : Enum {
    public int value__;
    public static DirectoryAttributeOperation Add;
    public static DirectoryAttributeOperation Delete;
    public static DirectoryAttributeOperation Replace;
}
public abstract class System.DirectoryServices.Protocols.DirectoryConnection : object {
    internal NetworkCredential _directoryCredential;
    private X509CertificateCollection _certificatesCollection;
    internal TimeSpan _connectionTimeOut;
    internal DirectoryIdentifier _directoryIdentifier;
    public DirectoryIdentifier Directory { get; }
    public X509CertificateCollection ClientCertificates { get; }
    public TimeSpan Timeout { get; public set; }
    unknown NetworkCredential Credential {public set; }
    public virtual DirectoryIdentifier get_Directory();
    public X509CertificateCollection get_ClientCertificates();
    public virtual TimeSpan get_Timeout();
    public virtual void set_Timeout(TimeSpan value);
    public virtual void set_Credential(NetworkCredential value);
    public abstract virtual DirectoryResponse SendRequest(DirectoryRequest request);
    internal NetworkCredential GetCredential();
}
public class System.DirectoryServices.Protocols.DirectoryControl : object {
    internal Byte[] _directoryControlValue;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCritical>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServerSide>k__BackingField;
    public string Type { get; }
    public bool IsCritical { get; public set; }
    public bool ServerSide { get; public set; }
    public DirectoryControl(string type, Byte[] value, bool isCritical, bool serverSide);
    public virtual Byte[] GetValue();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsCritical();
    [CompilerGeneratedAttribute]
public void set_IsCritical(bool value);
    [CompilerGeneratedAttribute]
public bool get_ServerSide();
    [CompilerGeneratedAttribute]
public void set_ServerSide(bool value);
    internal static void TransformControls(DirectoryControl[] controls);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryControlCollection : CollectionBase {
    public DirectoryControl Item { get; public set; }
    public DirectoryControl get_Item(int index);
    public void set_Item(int index, DirectoryControl value);
    public int Add(DirectoryControl control);
    public void AddRange(DirectoryControl[] controls);
    public void AddRange(DirectoryControlCollection controlCollection);
    public bool Contains(DirectoryControl value);
    public void CopyTo(DirectoryControl[] array, int index);
    public int IndexOf(DirectoryControl value);
    public void Insert(int index, DirectoryControl value);
    public void Remove(DirectoryControl value);
    protected virtual void OnValidate(object value);
}
[TypeForwardedFromAttribute("System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.Protocols.DirectoryException : Exception {
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected DirectoryException(SerializationInfo info, StreamingContext context);
    public DirectoryException(string message, Exception inner);
    public DirectoryException(string message);
}
public abstract class System.DirectoryServices.Protocols.DirectoryIdentifier : object {
}
public class System.DirectoryServices.Protocols.DirectoryNotificationControl : DirectoryControl {
}
public abstract class System.DirectoryServices.Protocols.DirectoryOperation : object {
    internal string _directoryRequestID;
}
[TypeForwardedFromAttribute("System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.Protocols.DirectoryOperationException : DirectoryException {
    [CompilerGeneratedAttribute]
private DirectoryResponse <Response>k__BackingField;
    public DirectoryResponse Response { get; internal set; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected DirectoryOperationException(SerializationInfo info, StreamingContext context);
    public DirectoryOperationException(string message);
    public DirectoryOperationException(string message, Exception inner);
    public DirectoryOperationException(DirectoryResponse response);
    public DirectoryOperationException(DirectoryResponse response, string message);
    public DirectoryOperationException(DirectoryResponse response, string message, Exception inner);
    [CompilerGeneratedAttribute]
public DirectoryResponse get_Response();
    [CompilerGeneratedAttribute]
internal void set_Response(DirectoryResponse value);
    private static string CreateMessage(DirectoryResponse response, string message);
}
public abstract class System.DirectoryServices.Protocols.DirectoryRequest : DirectoryOperation {
    [CompilerGeneratedAttribute]
private DirectoryControlCollection <Controls>k__BackingField;
    public string RequestId { get; public set; }
    public DirectoryControlCollection Controls { get; }
    public string get_RequestId();
    public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public DirectoryControlCollection get_Controls();
}
public abstract class System.DirectoryServices.Protocols.DirectoryResponse : DirectoryOperation {
    private DirectoryControl[] _directoryControls;
    internal Uri[] _directoryReferral;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchedDN>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultCode <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string RequestId { get; }
    public string MatchedDN { get; }
    public DirectoryControl[] Controls { get; }
    public ResultCode ResultCode { get; }
    public string ErrorMessage { get; }
    public Uri[] Referral { get; }
    internal DirectoryResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public virtual string get_MatchedDN();
    public virtual DirectoryControl[] get_Controls();
    [CompilerGeneratedAttribute]
public virtual ResultCode get_ResultCode();
    [CompilerGeneratedAttribute]
public virtual string get_ErrorMessage();
    public virtual Uri[] get_Referral();
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.DirectorySynchronizationOptions : Enum {
    public long value__;
    public static DirectorySynchronizationOptions None;
    public static DirectorySynchronizationOptions ObjectSecurity;
    public static DirectorySynchronizationOptions ParentsFirst;
    public static DirectorySynchronizationOptions PublicDataOnly;
    public static DirectorySynchronizationOptions IncrementalValues;
}
public class System.DirectoryServices.Protocols.DirSyncRequestControl : DirectoryControl {
    private Byte[] _dirsyncCookie;
    private int _count;
    [CompilerGeneratedAttribute]
private DirectorySynchronizationOptions <Option>k__BackingField;
    public Byte[] Cookie { get; public set; }
    public DirectorySynchronizationOptions Option { get; public set; }
    public int AttributeCount { get; public set; }
    public DirSyncRequestControl(Byte[] cookie);
    public DirSyncRequestControl(Byte[] cookie, DirectorySynchronizationOptions option);
    public DirSyncRequestControl(Byte[] cookie, DirectorySynchronizationOptions option, int attributeCount);
    public Byte[] get_Cookie();
    public void set_Cookie(Byte[] value);
    [CompilerGeneratedAttribute]
public DirectorySynchronizationOptions get_Option();
    [CompilerGeneratedAttribute]
public void set_Option(DirectorySynchronizationOptions value);
    public int get_AttributeCount();
    public void set_AttributeCount(int value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.DirSyncResponseControl : DirectoryControl {
    private Byte[] _dirsyncCookie;
    [CompilerGeneratedAttribute]
private bool <MoreData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultSize>k__BackingField;
    public Byte[] Cookie { get; }
    public bool MoreData { get; }
    public int ResultSize { get; }
    internal DirSyncResponseControl(Byte[] cookie, bool moreData, int resultSize, bool criticality, Byte[] controlValue);
    public Byte[] get_Cookie();
    [CompilerGeneratedAttribute]
public bool get_MoreData();
    [CompilerGeneratedAttribute]
public int get_ResultSize();
}
public class System.DirectoryServices.Protocols.DomainScopeControl : DirectoryControl {
}
public class System.DirectoryServices.Protocols.DsmlAuthRequest : DirectoryRequest {
    [CompilerGeneratedAttribute]
private string <Principal>k__BackingField;
    public string Principal { get; public set; }
    public DsmlAuthRequest(string principal);
    [CompilerGeneratedAttribute]
public string get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(string value);
}
internal static class System.DirectoryServices.Protocols.ErrorChecking : object {
    public static void CheckAndSetLdapError(int error);
}
public class System.DirectoryServices.Protocols.ExtendedDNControl : DirectoryControl {
    private ExtendedDNFlag _flag;
    public ExtendedDNFlag Flag { get; public set; }
    public ExtendedDNControl(ExtendedDNFlag flag);
    public ExtendedDNFlag get_Flag();
    public void set_Flag(ExtendedDNFlag value);
    public virtual Byte[] GetValue();
}
public enum System.DirectoryServices.Protocols.ExtendedDNFlag : Enum {
    public int value__;
    public static ExtendedDNFlag HexString;
    public static ExtendedDNFlag StandardString;
}
public class System.DirectoryServices.Protocols.ExtendedRequest : DirectoryRequest {
    private Byte[] _requestValue;
    [CompilerGeneratedAttribute]
private string <RequestName>k__BackingField;
    public string RequestName { get; public set; }
    public Byte[] RequestValue { get; public set; }
    public ExtendedRequest(string requestName);
    public ExtendedRequest(string requestName, Byte[] requestValue);
    [CompilerGeneratedAttribute]
public string get_RequestName();
    [CompilerGeneratedAttribute]
public void set_RequestName(string value);
    public Byte[] get_RequestValue();
    public void set_RequestValue(Byte[] value);
}
public class System.DirectoryServices.Protocols.ExtendedResponse : DirectoryResponse {
    private Byte[] _value;
    [CompilerGeneratedAttribute]
private string <ResponseName>k__BackingField;
    public string ResponseName { get; internal set; }
    public Byte[] ResponseValue { get; internal set; }
    internal ExtendedResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
    [CompilerGeneratedAttribute]
public string get_ResponseName();
    [CompilerGeneratedAttribute]
internal void set_ResponseName(string value);
    public Byte[] get_ResponseValue();
    internal void set_ResponseValue(Byte[] value);
}
internal class System.DirectoryServices.Protocols.GetLdapResponseCallback : MulticastDelegate {
    public GetLdapResponseCallback(object object, IntPtr method);
    public virtual DirectoryResponse Invoke(int messageId, LdapOperation operation, ResultAll resultType, TimeSpan requestTimeout, bool exceptionOnTimeOut);
    public virtual IAsyncResult BeginInvoke(int messageId, LdapOperation operation, ResultAll resultType, TimeSpan requestTimeout, bool exceptionOnTimeOut, AsyncCallback callback, object object);
    public virtual DirectoryResponse EndInvoke(IAsyncResult result);
}
internal class System.DirectoryServices.Protocols.HGlobalMemHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static IntPtr _dummyPointer;
    internal HGlobalMemHandle(IntPtr value);
    private static HGlobalMemHandle();
    protected virtual bool ReleaseHandle();
}
public class System.DirectoryServices.Protocols.LazyCommitControl : DirectoryControl {
}
internal class System.DirectoryServices.Protocols.LDAP_TIMEVAL : ValueType {
    public int tv_sec;
    public int tv_usec;
}
internal class System.DirectoryServices.Protocols.LdapAsyncResult : object {
    private LdapAsyncWaitHandle _asyncWaitHandle;
    internal AsyncCallback _callback;
    internal bool _completed;
    internal ManualResetEvent _manualResetEvent;
    private object _stateObject;
    internal LdapRequestState _resultObject;
    internal bool _partialResults;
    private object System.IAsyncResult.AsyncState { get; }
    private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    private bool System.IAsyncResult.IsCompleted { get; }
    public LdapAsyncResult(AsyncCallback callbackRoutine, object state, bool partialResults);
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
    private sealed virtual override bool System.IAsyncResult.get_IsCompleted();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class System.DirectoryServices.Protocols.LdapConnection : DirectoryConnection {
    private static int LDAP_MOD_BVALUES;
    internal static object s_objectLock;
    internal static Hashtable s_handleTable;
    private static Hashtable s_asyncResultTable;
    private static ManualResetEvent s_waitHandle;
    private static LdapPartialResultsProcessor s_partialResultsProcessor;
    private AuthType _connectionAuthType;
    internal bool _needDispose;
    internal ConnectionHandle _ldapHandle;
    internal bool _disposed;
    private bool _bounded;
    private bool _needRebind;
    private bool _connected;
    internal QUERYCLIENTCERT _clientCertificateRoutine;
    [CompilerGeneratedAttribute]
private LdapSessionOptions <SessionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoBind>k__BackingField;
    private bool _setFQDNDone;
    public TimeSpan Timeout { get; public set; }
    public AuthType AuthType { get; public set; }
    public LdapSessionOptions SessionOptions { get; }
    unknown NetworkCredential Credential {public set; }
    public bool AutoBind { get; public set; }
    internal bool NeedDispose { get; internal set; }
    public LdapConnection(string server);
    public LdapConnection(LdapDirectoryIdentifier identifier);
    public LdapConnection(LdapDirectoryIdentifier identifier, NetworkCredential credential);
    public LdapConnection(LdapDirectoryIdentifier identifier, NetworkCredential credential, AuthType authType);
    internal LdapConnection(LdapDirectoryIdentifier identifier, NetworkCredential credential, AuthType authType, IntPtr handle);
    private static LdapConnection();
    protected virtual override void Finalize();
    public virtual TimeSpan get_Timeout();
    public virtual void set_Timeout(TimeSpan value);
    public AuthType get_AuthType();
    public void set_AuthType(AuthType value);
    [CompilerGeneratedAttribute]
public LdapSessionOptions get_SessionOptions();
    public virtual void set_Credential(NetworkCredential value);
    [CompilerGeneratedAttribute]
public bool get_AutoBind();
    [CompilerGeneratedAttribute]
public void set_AutoBind(bool value);
    internal bool get_NeedDispose();
    internal void set_NeedDispose(bool value);
    internal void Init();
    public virtual DirectoryResponse SendRequest(DirectoryRequest request);
    public DirectoryResponse SendRequest(DirectoryRequest request, TimeSpan requestTimeout);
    public IAsyncResult BeginSendRequest(DirectoryRequest request, PartialResultProcessing partialMode, AsyncCallback callback, object state);
    public IAsyncResult BeginSendRequest(DirectoryRequest request, TimeSpan requestTimeout, PartialResultProcessing partialMode, AsyncCallback callback, object state);
    public void Abort(IAsyncResult asyncResult);
    public PartialResultsCollection GetPartialResults(IAsyncResult asyncResult);
    public DirectoryResponse EndSendRequest(IAsyncResult asyncResult);
    private int SendRequestHelper(DirectoryRequest request, Int32& messageID);
    private BOOL ProcessClientCertificate(IntPtr ldapHandle, IntPtr CAs, IntPtr* certificate);
    private void Connect();
    public void Bind();
    public void Bind(NetworkCredential newCredential);
    private void BindHelper(NetworkCredential newCredential, bool needSetCredential);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal static LdapControl[] BuildControlArray(DirectoryControlCollection controls, bool serverControl);
    internal static LdapMod[] BuildAttributes(CollectionBase directoryAttributes, ArrayList ptrToFree);
    [AsyncStateMachineAttribute("System.DirectoryServices.Protocols.LdapConnection/<ConstructResponseAsync>d__57")]
internal ValueTask`1<DirectoryResponse> ConstructResponseAsync(int messageId, LdapOperation operation, ResultAll resultType, TimeSpan requestTimeOut, bool exceptionOnTimeOut, bool sync);
    internal int ConstructParsedResult(IntPtr ldapResult, Int32& serverError, String& responseDn, String& responseMessage, Uri[]& responseReferral, DirectoryControl[]& responseControl);
    internal SearchResultEntry ConstructEntry(IntPtr entryMessage);
    internal DirectoryAttribute ConstructAttribute(IntPtr entryMessage, IntPtr attributeName);
    internal SearchResultReference ConstructReference(IntPtr referenceMessage);
    private DirectoryException ConstructException(int error, LdapOperation operation);
    private static DirectoryControl ConstructControl(IntPtr controlPtr);
    private static bool SameCredential(NetworkCredential oldCredential, NetworkCredential newCredential);
    private void InternalInitConnectionHandle();
    private int InternalConnectToServer();
    private int InternalBind(NetworkCredential tempCredential, SEC_WINNT_AUTH_IDENTITY_EX cred, BindMethod method);
    private int BindSasl();
    private SaslDefaultCredentials GetSaslDefaults();
    [AsyncStateMachineAttribute("System.DirectoryServices.Protocols.LdapConnection/<<BeginSendRequest>g__ResponseCallback|43_0>d")]
[CompilerGeneratedAttribute]
internal static Task <BeginSendRequest>g__ResponseCallback|43_0(ValueTask`1<DirectoryResponse> vt, LdapRequestState requestState);
}
internal class System.DirectoryServices.Protocols.LdapControl : object {
    public IntPtr ldctl_oid;
    public BerVal ldctl_value;
    public bool ldctl_iscritical;
}
public class System.DirectoryServices.Protocols.LdapDirectoryIdentifier : DirectoryIdentifier {
    private String[] _servers;
    [CompilerGeneratedAttribute]
private bool <Connectionless>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullyQualifiedDnsHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PortNumber>k__BackingField;
    public String[] Servers { get; }
    public bool Connectionless { get; }
    public bool FullyQualifiedDnsHostName { get; }
    public int PortNumber { get; }
    public LdapDirectoryIdentifier(string server);
    public LdapDirectoryIdentifier(string server, int portNumber);
    public LdapDirectoryIdentifier(string server, bool fullyQualifiedDnsHostName, bool connectionless);
    public LdapDirectoryIdentifier(string server, int portNumber, bool fullyQualifiedDnsHostName, bool connectionless);
    public LdapDirectoryIdentifier(String[] servers, bool fullyQualifiedDnsHostName, bool connectionless);
    public LdapDirectoryIdentifier(String[] servers, int portNumber, bool fullyQualifiedDnsHostName, bool connectionless);
    public String[] get_Servers();
    [CompilerGeneratedAttribute]
public bool get_Connectionless();
    [CompilerGeneratedAttribute]
public bool get_FullyQualifiedDnsHostName();
    [CompilerGeneratedAttribute]
public int get_PortNumber();
}
internal enum System.DirectoryServices.Protocols.LdapError : Enum {
    public int value__;
    public static LdapError IsLeaf;
    public static LdapError InvalidCredentials;
    public static LdapError ServerDown;
    public static LdapError LocalError;
    public static LdapError EncodingError;
    public static LdapError DecodingError;
    public static LdapError TimeOut;
    public static LdapError AuthUnknown;
    public static LdapError FilterError;
    public static LdapError UserCancelled;
    public static LdapError ParameterError;
    public static LdapError NoMemory;
    public static LdapError ConnectError;
    public static LdapError NotSupported;
    public static LdapError NoResultsReturned;
    public static LdapError ControlNotFound;
    public static LdapError MoreResults;
    public static LdapError ClientLoop;
    public static LdapError ReferralLimitExceeded;
    public static LdapError SendTimeOut;
}
internal static class System.DirectoryServices.Protocols.LdapErrorMappings : object {
    private static Dictionary`2<LdapError, string> s_resultCodeMapping;
    private static LdapErrorMappings();
    internal static int NormalizeResultCode(int errorCode);
    public static string MapResultCode(int errorCode);
    internal static bool IsLdapError(int errorCode);
}
[TypeForwardedFromAttribute("System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.Protocols.LdapException : DirectoryException {
    private int _errorCode;
    [CompilerGeneratedAttribute]
private string <ServerErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private PartialResultsCollection <PartialResults>k__BackingField;
    public int ErrorCode { get; private set; }
    public string ServerErrorMessage { get; }
    public PartialResultsCollection PartialResults { get; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected LdapException(SerializationInfo info, StreamingContext context);
    public LdapException(string message);
    public LdapException(string message, Exception inner);
    public LdapException(int errorCode);
    public LdapException(int errorCode, string message);
    public LdapException(int errorCode, string message, string serverErrorMessage);
    public LdapException(int errorCode, string message, Exception inner);
    public int get_ErrorCode();
    private void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public string get_ServerErrorMessage();
    [CompilerGeneratedAttribute]
public PartialResultsCollection get_PartialResults();
}
internal class System.DirectoryServices.Protocols.LdapMod : object {
    public int type;
    public IntPtr attribute;
    public IntPtr values;
    protected virtual override void Finalize();
}
internal enum System.DirectoryServices.Protocols.LdapOperation : Enum {
    public int value__;
    public static LdapOperation LdapAdd;
    public static LdapOperation LdapModify;
    public static LdapOperation LdapSearch;
    public static LdapOperation LdapDelete;
    public static LdapOperation LdapModifyDn;
    public static LdapOperation LdapCompare;
    public static LdapOperation LdapExtendedRequest;
}
internal enum System.DirectoryServices.Protocols.LdapOption : Enum {
    public int value__;
    public static LdapOption LDAP_OPT_DESC;
    public static LdapOption LDAP_OPT_DEREF;
    public static LdapOption LDAP_OPT_SIZELIMIT;
    public static LdapOption LDAP_OPT_TIMELIMIT;
    public static LdapOption LDAP_OPT_REFERRALS;
    public static LdapOption LDAP_OPT_RESTART;
    public static LdapOption LDAP_OPT_SSL;
    public static LdapOption LDAP_OPT_REFERRAL_HOP_LIMIT;
    public static LdapOption LDAP_OPT_VERSION;
    public static LdapOption LDAP_OPT_SERVER_CONTROLS;
    public static LdapOption LDAP_OPT_CLIENT_CONTROLS;
    public static LdapOption LDAP_OPT_API_FEATURE_INFO;
    public static LdapOption LDAP_OPT_HOST_NAME;
    public static LdapOption LDAP_OPT_ERROR_NUMBER;
    public static LdapOption LDAP_OPT_ERROR_STRING;
    public static LdapOption LDAP_OPT_SERVER_ERROR;
    public static LdapOption LDAP_OPT_SERVER_EXT_ERROR;
    public static LdapOption LDAP_OPT_HOST_REACHABLE;
    public static LdapOption LDAP_OPT_PING_KEEP_ALIVE;
    public static LdapOption LDAP_OPT_PING_WAIT_TIME;
    public static LdapOption LDAP_OPT_PING_LIMIT;
    public static LdapOption LDAP_OPT_DNSDOMAIN_NAME;
    public static LdapOption LDAP_OPT_GETDSNAME_FLAGS;
    public static LdapOption LDAP_OPT_PROMPT_CREDENTIALS;
    public static LdapOption LDAP_OPT_TCP_KEEPALIVE;
    public static LdapOption LDAP_OPT_FAST_CONCURRENT_BIND;
    public static LdapOption LDAP_OPT_SEND_TIMEOUT;
    public static LdapOption LDAP_OPT_REFERRAL_CALLBACK;
    public static LdapOption LDAP_OPT_CLIENT_CERTIFICATE;
    public static LdapOption LDAP_OPT_SERVER_CERTIFICATE;
    public static LdapOption LDAP_OPT_AUTO_RECONNECT;
    public static LdapOption LDAP_OPT_SSPI_FLAGS;
    public static LdapOption LDAP_OPT_SSL_INFO;
    public static LdapOption LDAP_OPT_SIGN;
    public static LdapOption LDAP_OPT_ENCRYPT;
    public static LdapOption LDAP_OPT_SASL_METHOD;
    public static LdapOption LDAP_OPT_AREC_EXCLUSIVE;
    public static LdapOption LDAP_OPT_SECURITY_CONTEXT;
    public static LdapOption LDAP_OPT_ROOTDSE_CACHE;
    public static LdapOption LDAP_OPT_DEBUG_LEVEL;
    public static LdapOption LDAP_OPT_URI;
    public static LdapOption LDAP_OPT_X_SASL_REALM;
    public static LdapOption LDAP_OPT_X_SASL_AUTHCID;
    public static LdapOption LDAP_OPT_X_SASL_AUTHZID;
}
internal static class System.DirectoryServices.Protocols.LdapPal : object {
    internal static void CancelDirectoryAsyncOperation(ConnectionHandle ldapHandle, int messagId);
    internal static int AddDirectoryEntry(ConnectionHandle ldapHandle, string dn, IntPtr attrs, IntPtr servercontrol, IntPtr clientcontrol, Int32& messageNumber);
    internal static int CompareDirectoryEntries(ConnectionHandle ldapHandle, string dn, string attributeName, string _, BerVal binaryValue, IntPtr servercontrol, IntPtr clientcontrol, Int32& messageNumber);
    internal static void FreeDirectoryControl(IntPtr control);
    internal static void FreeDirectoryControls(IntPtr value);
    internal static int CreateDirectorySortControl(ConnectionHandle handle, IntPtr keys, byte critical, IntPtr& control);
    internal static int DeleteDirectoryEntry(ConnectionHandle ldapHandle, string dn, IntPtr servercontrol, IntPtr clientcontrol, Int32& messageNumber);
    internal static int ExtendedDirectoryOperation(ConnectionHandle ldapHandle, string oid, BerVal data, IntPtr servercontrol, IntPtr clientcontrol, Int32& messageNumber);
    internal static IntPtr GetFirstAttributeFromEntry(ConnectionHandle ldapHandle, IntPtr result, IntPtr& address);
    internal static IntPtr GetFirstEntryFromResult(ConnectionHandle ldapHandle, IntPtr result);
    internal static IntPtr GetFirstReferenceFromResult(ConnectionHandle ldapHandle, IntPtr result);
    internal static IntPtr GetDistinguishedName(ConnectionHandle ldapHandle, IntPtr result);
    internal static int GetLastErrorFromConnection(ConnectionHandle ldapHandle);
    internal static int GetBoolOption(ConnectionHandle ldapHandle, LdapOption option, Boolean& outValue);
    internal static int GetIntOption(ConnectionHandle ldapHandle, LdapOption option, Int32& outValue);
    internal static int GetPtrOption(ConnectionHandle ldapHandle, LdapOption option, IntPtr& outValue);
    internal static int GetSecurityHandleOption(ConnectionHandle ldapHandle, LdapOption option, SecurityHandle& outValue);
    internal static int GetSecInfoOption(ConnectionHandle ldapHandle, LdapOption option, SecurityPackageContextConnectionInformation outValue);
    internal static IntPtr GetValuesFromAttribute(ConnectionHandle ldapHandle, IntPtr result, string name);
    internal static void FreeMemory(IntPtr outValue);
    internal static void FreeMessage(IntPtr outValue);
    internal static int ModifyDirectoryEntry(ConnectionHandle ldapHandle, string dn, IntPtr attrs, IntPtr servercontrol, IntPtr clientcontrol, Int32& messageNumber);
    internal static IntPtr GetNextAttributeFromResult(ConnectionHandle ldapHandle, IntPtr result, IntPtr address);
    internal static IntPtr GetNextEntryFromResult(ConnectionHandle ldapHandle, IntPtr result);
    internal static IntPtr GetNextReferenceFromResult(ConnectionHandle ldapHandle, IntPtr result);
    internal static int ParseExtendedResult(ConnectionHandle ldapHandle, IntPtr result, IntPtr& oid, IntPtr& data, byte freeIt);
    internal static int ParseReference(ConnectionHandle ldapHandle, IntPtr result, IntPtr& referrals);
    internal static int ParseResult(ConnectionHandle ldapHandle, IntPtr result, Int32& serverError, IntPtr& dn, IntPtr& message, IntPtr& referral, IntPtr& control, byte freeIt);
    internal static int ParseResultReferral(ConnectionHandle ldapHandle, IntPtr result, IntPtr serverError, IntPtr dn, IntPtr message, IntPtr& referral, IntPtr control, byte freeIt);
    internal static int RenameDirectoryEntry(ConnectionHandle ldapHandle, string dn, string newRdn, string newParentDn, int deleteOldRdn, IntPtr servercontrol, IntPtr clientcontrol, Int32& messageNumber);
    internal static int GetResultFromAsyncOperation(ConnectionHandle ldapHandle, int messageId, int all, LDAP_TIMEVAL timeout, IntPtr& Message);
    internal static int ResultToErrorCode(ConnectionHandle ldapHandle, IntPtr result, int freeIt);
    internal static int SearchDirectory(ConnectionHandle ldapHandle, string dn, int scope, string filter, IntPtr attributes, bool attributeOnly, IntPtr servercontrol, IntPtr clientcontrol, int timelimit, int sizelimit, Int32& messageNumber);
    internal static int SetBoolOption(ConnectionHandle ld, LdapOption option, bool value);
    internal static int SetClientCertOption(ConnectionHandle ldapHandle, LdapOption option, QUERYCLIENTCERT outValue);
    internal static int SetIntOption(ConnectionHandle ld, LdapOption option, Int32& inValue);
    internal static int SetPtrOption(ConnectionHandle ldapHandle, LdapOption option, IntPtr& inValue);
    internal static int SetStringOption(ConnectionHandle ldapHandle, LdapOption option, string inValue);
    internal static int SetReferralOption(ConnectionHandle ldapHandle, LdapOption option, LdapReferralCallback& outValue);
    internal static int SetServerCertOption(ConnectionHandle ldapHandle, LdapOption option, VERIFYSERVERCERT outValue);
    internal static int BindToDirectory(ConnectionHandle ld, string who, string passwd);
    internal static int StartTls(ConnectionHandle ldapHandle, Int32& serverReturnValue, IntPtr& message, IntPtr serverControls, IntPtr clientControls);
    internal static byte StopTls(ConnectionHandle _);
    internal static void FreeValue(IntPtr referral);
    internal static void FreeAttributes(IntPtr berelement);
    internal static string PtrToString(IntPtr requestName);
    internal static IntPtr StringToPtr(string s);
    internal static int SaslInteractionProcedure(IntPtr ldapHandle, UInt32 flags, IntPtr defaultsPtr, IntPtr interactPtr);
}
internal class System.DirectoryServices.Protocols.LdapPartialAsyncResult : LdapAsyncResult {
    internal LdapConnection _con;
    internal int _messageID;
    internal bool _partialCallback;
    internal ResultsStatus _resultStatus;
    internal TimeSpan _requestTimeout;
    internal SearchResponse _response;
    internal Exception _exception;
    internal DateTime _startTime;
    public LdapPartialAsyncResult(int messageID, AsyncCallback callbackRoutine, object state, bool partialResults, LdapConnection con, bool partialCallback, TimeSpan requestTimeout);
}
internal class System.DirectoryServices.Protocols.LdapPartialResultsProcessor : object {
    private ArrayList _resultList;
    private ManualResetEvent _workThreadWaitHandle;
    private bool _workToDo;
    private int _currentIndex;
    internal LdapPartialResultsProcessor(ManualResetEvent eventHandle);
    public void Add(LdapPartialAsyncResult asyncResult);
    public void Remove(LdapPartialAsyncResult asyncResult);
    public void RetrievingSearchResults();
    private static void GetResultsHelper(LdapPartialAsyncResult asyncResult);
    public void NeedCompleteResult(LdapPartialAsyncResult asyncResult);
    public PartialResultsCollection GetPartialResults(LdapPartialAsyncResult asyncResult);
    public DirectoryResponse GetCompleteResult(LdapPartialAsyncResult asyncResult);
    private static void AddResult(SearchResponse partialResults, SearchResponse newResult);
}
[NativeMarshallingAttribute("System.DirectoryServices.Protocols.LdapReferralCallback/Marshaller")]
internal class System.DirectoryServices.Protocols.LdapReferralCallback : ValueType {
    public int sizeofcallback;
    public QUERYFORCONNECTIONInternal query;
    public NOTIFYOFNEWCONNECTIONInternal notify;
    public DEREFERENCECONNECTIONInternal dereference;
    public static int Size;
    private static LdapReferralCallback();
}
internal class System.DirectoryServices.Protocols.LdapRequestState : object {
    internal DirectoryResponse _response;
    internal LdapAsyncResult _ldapAsync;
    internal Exception _exception;
    internal bool _abortCalled;
}
public class System.DirectoryServices.Protocols.LdapSessionOptions : object {
    private LdapConnection _connection;
    private ReferralCallback _callbackRoutine;
    internal QueryClientCertificateCallback _clientCertificateDelegate;
    private VerifyServerCertificateCallback _serverCertificateDelegate;
    private QUERYFORCONNECTIONInternal _queryDelegate;
    private NOTIFYOFNEWCONNECTIONInternal _notifiyDelegate;
    private DEREFERENCECONNECTIONInternal _dereferenceDelegate;
    private VERIFYSERVERCERT _serverCertificateRoutine;
    private bool _secureSocketLayer;
    public int ReferralHopLimit { get; public set; }
    public string HostName { get; public set; }
    public string DomainName { get; public set; }
    public LocatorFlags LocatorFlag { get; public set; }
    public bool HostReachable { get; }
    public TimeSpan PingKeepAliveTimeout { get; public set; }
    public int PingLimit { get; public set; }
    public TimeSpan PingWaitTimeout { get; public set; }
    public bool AutoReconnect { get; public set; }
    public int SspiFlag { get; public set; }
    public SecurityPackageContextConnectionInformation SslInformation { get; }
    public object SecurityContext { get; }
    public bool Signing { get; public set; }
    public bool Sealing { get; public set; }
    public string SaslMethod { get; public set; }
    public bool RootDseCache { get; public set; }
    public bool TcpKeepAlive { get; public set; }
    public TimeSpan SendTimeout { get; public set; }
    public ReferralCallback ReferralCallback { get; public set; }
    public QueryClientCertificateCallback QueryClientCertificate { get; public set; }
    public VerifyServerCertificateCallback VerifyServerCertificate { get; public set; }
    internal string ServerErrorMessage { get; }
    internal DereferenceAlias DerefAlias { get; internal set; }
    public bool SecureSocketLayer { get; public set; }
    public int ProtocolVersion { get; public set; }
    public ReferralChasingOptions ReferralChasing { get; public set; }
    internal LdapSessionOptions(LdapConnection connection);
    public int get_ReferralHopLimit();
    public void set_ReferralHopLimit(int value);
    public string get_HostName();
    public void set_HostName(string value);
    public string get_DomainName();
    public void set_DomainName(string value);
    public LocatorFlags get_LocatorFlag();
    public void set_LocatorFlag(LocatorFlags value);
    public bool get_HostReachable();
    public TimeSpan get_PingKeepAliveTimeout();
    public void set_PingKeepAliveTimeout(TimeSpan value);
    public int get_PingLimit();
    public void set_PingLimit(int value);
    public TimeSpan get_PingWaitTimeout();
    public void set_PingWaitTimeout(TimeSpan value);
    public bool get_AutoReconnect();
    public void set_AutoReconnect(bool value);
    public int get_SspiFlag();
    public void set_SspiFlag(int value);
    public SecurityPackageContextConnectionInformation get_SslInformation();
    public object get_SecurityContext();
    public bool get_Signing();
    public void set_Signing(bool value);
    public bool get_Sealing();
    public void set_Sealing(bool value);
    public string get_SaslMethod();
    public void set_SaslMethod(string value);
    public bool get_RootDseCache();
    public void set_RootDseCache(bool value);
    public bool get_TcpKeepAlive();
    public void set_TcpKeepAlive(bool value);
    public TimeSpan get_SendTimeout();
    public void set_SendTimeout(TimeSpan value);
    public ReferralCallback get_ReferralCallback();
    public void set_ReferralCallback(ReferralCallback value);
    public QueryClientCertificateCallback get_QueryClientCertificate();
    public void set_QueryClientCertificate(QueryClientCertificateCallback value);
    public VerifyServerCertificateCallback get_VerifyServerCertificate();
    public void set_VerifyServerCertificate(VerifyServerCertificateCallback value);
    internal string get_ServerErrorMessage();
    internal DereferenceAlias get_DerefAlias();
    internal void set_DerefAlias(DereferenceAlias value);
    internal void SetFqdnRequired();
    public void FastConcurrentBind();
    public void StartTransportLayerSecurity(DirectoryControlCollection controls);
    public void StopTransportLayerSecurity();
    private int GetIntValueHelper(LdapOption option);
    private void SetIntValueHelper(LdapOption option, int value);
    private IntPtr GetPtrValueHelper(LdapOption option);
    private void SetPtrValueHelper(LdapOption option, IntPtr value);
    private string GetStringValueHelper(LdapOption option, bool releasePtr);
    private void SetStringValueHelper(LdapOption option, string value);
    private void ProcessCallBackRoutine(ReferralCallback tempCallback);
    private int ProcessQueryConnection(IntPtr PrimaryConnection, IntPtr ReferralFromConnection, IntPtr NewDNPtr, IntPtr HostNamePtr, int PortNumber, Native* SecAuthIdentity, Luid* CurrentUserToken, IntPtr* ConnectionToUse);
    private BOOL ProcessNotifyConnection(IntPtr primaryConnection, IntPtr referralFromConnection, IntPtr newDNPtr, IntPtr hostNamePtr, IntPtr newConnection, int portNumber, Native* SecAuthIdentity, Luid* currentUser, int errorCodeFromBind);
    private int ProcessDereferenceConnection(IntPtr PrimaryConnection, IntPtr ConnectionToDereference);
    private NetworkCredential ProcessSecAuthIdentity(Native* SecAuthIdentit);
    private BOOL ProcessServerCertificate(IntPtr connection, IntPtr serverCert);
    private static bool AddLdapHandleRef(LdapConnection ldapConnection);
    private static void ReleaseLdapHandleRef(LdapConnection ldapConnection);
    public bool get_SecureSocketLayer();
    public void set_SecureSocketLayer(bool value);
    public int get_ProtocolVersion();
    public void set_ProtocolVersion(int value);
    public ReferralChasingOptions get_ReferralChasing();
    public void set_ReferralChasing(ReferralChasingOptions value);
    private bool GetBoolValueHelper(LdapOption option);
    private void SetBoolValueHelper(LdapOption option, bool value);
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.LocatorFlags : Enum {
    public long value__;
    public static LocatorFlags None;
    public static LocatorFlags ForceRediscovery;
    public static LocatorFlags DirectoryServicesRequired;
    public static LocatorFlags DirectoryServicesPreferred;
    public static LocatorFlags GCRequired;
    public static LocatorFlags PdcRequired;
    public static LocatorFlags IPRequired;
    public static LocatorFlags KdcRequired;
    public static LocatorFlags TimeServerRequired;
    public static LocatorFlags WriteableRequired;
    public static LocatorFlags GoodTimeServerPreferred;
    public static LocatorFlags AvoidSelf;
    public static LocatorFlags OnlyLdapNeeded;
    public static LocatorFlags IsFlatName;
    public static LocatorFlags IsDnsName;
    public static LocatorFlags ReturnDnsName;
    public static LocatorFlags ReturnFlatName;
}
[IsReadOnlyAttribute]
internal class System.DirectoryServices.Protocols.Luid : ValueType {
    private int _lowPart;
    private int _highPart;
    public int LowPart { get; }
    public int HighPart { get; }
    public int get_LowPart();
    public int get_HighPart();
}
public class System.DirectoryServices.Protocols.ModifyDNRequest : DirectoryRequest {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewParentDistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteOldRdn>k__BackingField;
    public string DistinguishedName { get; public set; }
    public string NewParentDistinguishedName { get; public set; }
    public string NewName { get; public set; }
    public bool DeleteOldRdn { get; public set; }
    public ModifyDNRequest(string distinguishedName, string newParentDistinguishedName, string newName);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public string get_NewParentDistinguishedName();
    [CompilerGeneratedAttribute]
public void set_NewParentDistinguishedName(string value);
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public void set_NewName(string value);
    [CompilerGeneratedAttribute]
public bool get_DeleteOldRdn();
    [CompilerGeneratedAttribute]
public void set_DeleteOldRdn(bool value);
}
public class System.DirectoryServices.Protocols.ModifyDNResponse : DirectoryResponse {
    internal ModifyDNResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
}
public class System.DirectoryServices.Protocols.ModifyRequest : DirectoryRequest {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryAttributeModificationCollection <Modifications>k__BackingField;
    public string DistinguishedName { get; public set; }
    public DirectoryAttributeModificationCollection Modifications { get; }
    public ModifyRequest(string distinguishedName, DirectoryAttributeModification[] modifications);
    public ModifyRequest(string distinguishedName, DirectoryAttributeOperation operation, string attributeName, Object[] values);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public DirectoryAttributeModificationCollection get_Modifications();
}
public class System.DirectoryServices.Protocols.ModifyResponse : DirectoryResponse {
    internal ModifyResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
}
public class System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback : MulticastDelegate {
    public NotifyOfNewConnectionCallback(object object, IntPtr method);
    public virtual bool Invoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, LdapConnection newConnection, NetworkCredential credential, long currentUserToken, int errorCodeFromBind);
    public virtual IAsyncResult BeginInvoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, LdapConnection newConnection, NetworkCredential credential, long currentUserToken, int errorCodeFromBind, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.DirectoryServices.Protocols.NOTIFYOFNEWCONNECTIONInternal : MulticastDelegate {
    public NOTIFYOFNEWCONNECTIONInternal(object object, IntPtr method);
    public virtual BOOL Invoke(IntPtr Connection, IntPtr ReferralFromConnection, IntPtr NewDNPtr, IntPtr HostName, IntPtr NewConnection, int PortNumber, Native* SecAuthIdentity, Luid* CurrentUser, int ErrorCodeFromBind);
    public virtual IAsyncResult BeginInvoke(IntPtr Connection, IntPtr ReferralFromConnection, IntPtr NewDNPtr, IntPtr HostName, IntPtr NewConnection, int PortNumber, Native* SecAuthIdentity, Luid* CurrentUser, int ErrorCodeFromBind, AsyncCallback callback, object object);
    public virtual BOOL EndInvoke(IAsyncResult result);
}
internal static class System.DirectoryServices.Protocols.OperationErrorMappings : object {
    private static Dictionary`2<ResultCode, string> s_resultCodeMapping;
    private static OperationErrorMappings();
    public static string MapResultCode(int errorCode);
}
public class System.DirectoryServices.Protocols.PageResultRequestControl : DirectoryControl {
    private int _size;
    private Byte[] _pageCookie;
    public int PageSize { get; public set; }
    public Byte[] Cookie { get; public set; }
    public PageResultRequestControl(int pageSize);
    public PageResultRequestControl(Byte[] cookie);
    public int get_PageSize();
    public void set_PageSize(int value);
    public Byte[] get_Cookie();
    public void set_Cookie(Byte[] value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.PageResultResponseControl : DirectoryControl {
    private Byte[] _pageCookie;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    public Byte[] Cookie { get; }
    public int TotalCount { get; }
    internal PageResultResponseControl(int count, Byte[] cookie, bool criticality, Byte[] controlValue);
    public Byte[] get_Cookie();
    [CompilerGeneratedAttribute]
public int get_TotalCount();
}
public enum System.DirectoryServices.Protocols.PartialResultProcessing : Enum {
    public int value__;
    public static PartialResultProcessing NoPartialResultSupport;
    public static PartialResultProcessing ReturnPartialResults;
    public static PartialResultProcessing ReturnPartialResultsAndNotifyCallback;
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.PartialResultsCollection : ReadOnlyCollectionBase {
    public object Item { get; }
    public object get_Item(int index);
    internal int Add(object value);
    public bool Contains(object value);
    public int IndexOf(object value);
    public void CopyTo(Object[] values, int index);
}
internal class System.DirectoryServices.Protocols.PartialResultsRetriever : object {
    private ManualResetEvent _workThreadWaitHandle;
    private LdapPartialResultsProcessor _processor;
    internal PartialResultsRetriever(ManualResetEvent eventHandle, LdapPartialResultsProcessor processor);
    private void ThreadRoutine();
}
public class System.DirectoryServices.Protocols.PermissiveModifyControl : DirectoryControl {
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.DirectoryServices.Protocols.QUERYCLIENTCERT : MulticastDelegate {
    public QUERYCLIENTCERT(object object, IntPtr method);
    public virtual BOOL Invoke(IntPtr Connection, IntPtr trusted_CAs, IntPtr* certificateHandle);
    public virtual IAsyncResult BeginInvoke(IntPtr Connection, IntPtr trusted_CAs, IntPtr* certificateHandle, AsyncCallback callback, object object);
    public virtual BOOL EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.QueryClientCertificateCallback : MulticastDelegate {
    public QueryClientCertificateCallback(object object, IntPtr method);
    public virtual X509Certificate Invoke(LdapConnection connection, Byte[][] trustedCAs);
    public virtual IAsyncResult BeginInvoke(LdapConnection connection, Byte[][] trustedCAs, AsyncCallback callback, object object);
    public virtual X509Certificate EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.QueryForConnectionCallback : MulticastDelegate {
    public QueryForConnectionCallback(object object, IntPtr method);
    public virtual LdapConnection Invoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, NetworkCredential credential, long currentUserToken);
    public virtual IAsyncResult BeginInvoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, NetworkCredential credential, long currentUserToken, AsyncCallback callback, object object);
    public virtual LdapConnection EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.DirectoryServices.Protocols.QUERYFORCONNECTIONInternal : MulticastDelegate {
    public QUERYFORCONNECTIONInternal(object object, IntPtr method);
    public virtual int Invoke(IntPtr Connection, IntPtr ReferralFromConnection, IntPtr NewDNPtr, IntPtr HostName, int PortNumber, Native* SecAuthIdentity, Luid* CurrentUserToken, IntPtr* ConnectionToUse);
    public virtual IAsyncResult BeginInvoke(IntPtr Connection, IntPtr ReferralFromConnection, IntPtr NewDNPtr, IntPtr HostName, int PortNumber, Native* SecAuthIdentity, Luid* CurrentUserToken, IntPtr* ConnectionToUse, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[SupportedOSPlatformAttribute("windows")]
public class System.DirectoryServices.Protocols.QuotaControl : DirectoryControl {
    private Byte[] _sid;
    public SecurityIdentifier QuerySid { get; public set; }
    public QuotaControl(SecurityIdentifier querySid);
    public virtual Byte[] GetValue();
    public SecurityIdentifier get_QuerySid();
    public void set_QuerySid(SecurityIdentifier value);
}
public class System.DirectoryServices.Protocols.ReferralCallback : object {
    [CompilerGeneratedAttribute]
private QueryForConnectionCallback <QueryForConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyOfNewConnectionCallback <NotifyNewConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private DereferenceConnectionCallback <DereferenceConnection>k__BackingField;
    public QueryForConnectionCallback QueryForConnection { get; public set; }
    public NotifyOfNewConnectionCallback NotifyNewConnection { get; public set; }
    public DereferenceConnectionCallback DereferenceConnection { get; public set; }
    [CompilerGeneratedAttribute]
public QueryForConnectionCallback get_QueryForConnection();
    [CompilerGeneratedAttribute]
public void set_QueryForConnection(QueryForConnectionCallback value);
    [CompilerGeneratedAttribute]
public NotifyOfNewConnectionCallback get_NotifyNewConnection();
    [CompilerGeneratedAttribute]
public void set_NotifyNewConnection(NotifyOfNewConnectionCallback value);
    [CompilerGeneratedAttribute]
public DereferenceConnectionCallback get_DereferenceConnection();
    [CompilerGeneratedAttribute]
public void set_DereferenceConnection(DereferenceConnectionCallback value);
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.ReferralChasingOptions : Enum {
    public int value__;
    public static ReferralChasingOptions None;
    public static ReferralChasingOptions Subordinate;
    public static ReferralChasingOptions External;
    public static ReferralChasingOptions All;
}
internal enum System.DirectoryServices.Protocols.ResultAll : Enum {
    public int value__;
    public static ResultAll LDAP_MSG_ALL;
    public static ResultAll LDAP_MSG_RECEIVED;
    public static ResultAll LDAP_MSG_POLLINGALL;
}
public enum System.DirectoryServices.Protocols.ResultCode : Enum {
    public int value__;
    public static ResultCode Success;
    public static ResultCode OperationsError;
    public static ResultCode ProtocolError;
    public static ResultCode TimeLimitExceeded;
    public static ResultCode SizeLimitExceeded;
    public static ResultCode CompareFalse;
    public static ResultCode CompareTrue;
    public static ResultCode AuthMethodNotSupported;
    public static ResultCode StrongAuthRequired;
    public static ResultCode ReferralV2;
    public static ResultCode Referral;
    public static ResultCode AdminLimitExceeded;
    public static ResultCode UnavailableCriticalExtension;
    public static ResultCode ConfidentialityRequired;
    public static ResultCode SaslBindInProgress;
    public static ResultCode NoSuchAttribute;
    public static ResultCode UndefinedAttributeType;
    public static ResultCode InappropriateMatching;
    public static ResultCode ConstraintViolation;
    public static ResultCode AttributeOrValueExists;
    public static ResultCode InvalidAttributeSyntax;
    public static ResultCode NoSuchObject;
    public static ResultCode AliasProblem;
    public static ResultCode InvalidDNSyntax;
    public static ResultCode AliasDereferencingProblem;
    public static ResultCode InappropriateAuthentication;
    public static ResultCode InsufficientAccessRights;
    public static ResultCode Busy;
    public static ResultCode Unavailable;
    public static ResultCode UnwillingToPerform;
    public static ResultCode LoopDetect;
    public static ResultCode SortControlMissing;
    public static ResultCode OffsetRangeError;
    public static ResultCode NamingViolation;
    public static ResultCode ObjectClassViolation;
    public static ResultCode NotAllowedOnNonLeaf;
    public static ResultCode NotAllowedOnRdn;
    public static ResultCode EntryAlreadyExists;
    public static ResultCode ObjectClassModificationsProhibited;
    public static ResultCode ResultsTooLarge;
    public static ResultCode AffectsMultipleDsas;
    public static ResultCode VirtualListViewError;
    public static ResultCode Other;
}
internal enum System.DirectoryServices.Protocols.ResultsStatus : Enum {
    public int value__;
    public static ResultsStatus PartialResult;
    public static ResultsStatus CompleteResult;
    public static ResultsStatus Done;
}
internal class System.DirectoryServices.Protocols.SafeBerHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeBerHandle(BerVal value);
    protected virtual bool ReleaseHandle();
}
internal enum System.DirectoryServices.Protocols.SaslChallengeType : Enum {
    public int value__;
    public static SaslChallengeType SASL_CB_LIST_END;
    public static SaslChallengeType SASL_CB_GETOPT;
    public static SaslChallengeType SASL_CB_LOG;
    public static SaslChallengeType SASL_CB_GETPATH;
    public static SaslChallengeType SASL_CB_VERIFYFILE;
    public static SaslChallengeType SASL_CB_GETCONFPATH;
    public static SaslChallengeType SASL_CB_USER;
    public static SaslChallengeType SASL_CB_AUTHNAME;
    public static SaslChallengeType SASL_CB_LANGUAGE;
    public static SaslChallengeType SASL_CB_PASS;
    public static SaslChallengeType SASL_CB_ECHOPROMPT;
    public static SaslChallengeType SASL_CB_NOECHOPROMPT;
    public static SaslChallengeType SASL_CB_CNONCE;
    public static SaslChallengeType SASL_CB_GETREALM;
    public static SaslChallengeType SASL_CB_PROXY_POLICY;
}
internal class System.DirectoryServices.Protocols.SaslDefaultCredentials : ValueType {
    public string mech;
    public string realm;
    public string authcid;
    public string passwd;
    public string authzid;
}
internal class System.DirectoryServices.Protocols.SaslInteractiveChallenge : object {
    public ulong saslChallengeType;
    public string challenge;
    public string prompt;
    public string defresult;
    public IntPtr result;
    public UInt32 len;
}
public enum System.DirectoryServices.Protocols.SearchOption : Enum {
    public int value__;
    public static SearchOption DomainScope;
    public static SearchOption PhantomRoot;
}
public class System.DirectoryServices.Protocols.SearchOptionsControl : DirectoryControl {
    private SearchOption _searchOption;
    public SearchOption SearchOption { get; public set; }
    public SearchOptionsControl(SearchOption flags);
    public SearchOption get_SearchOption();
    public void set_SearchOption(SearchOption value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.SearchRequest : DirectoryRequest {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private StringCollection <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TypesOnly>k__BackingField;
    private object _directoryFilter;
    private SearchScope _directoryScope;
    private DereferenceAlias _directoryRefAlias;
    private int _directorySizeLimit;
    private TimeSpan _directoryTimeLimit;
    public string DistinguishedName { get; public set; }
    public StringCollection Attributes { get; }
    public object Filter { get; public set; }
    public SearchScope Scope { get; public set; }
    public DereferenceAlias Aliases { get; public set; }
    public int SizeLimit { get; public set; }
    public TimeSpan TimeLimit { get; public set; }
    public bool TypesOnly { get; public set; }
    public SearchRequest(string distinguishedName, string ldapFilter, SearchScope searchScope, String[] attributeList);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public StringCollection get_Attributes();
    public object get_Filter();
    public void set_Filter(object value);
    public SearchScope get_Scope();
    public void set_Scope(SearchScope value);
    public DereferenceAlias get_Aliases();
    public void set_Aliases(DereferenceAlias value);
    public int get_SizeLimit();
    public void set_SizeLimit(int value);
    public TimeSpan get_TimeLimit();
    public void set_TimeLimit(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_TypesOnly();
    [CompilerGeneratedAttribute]
public void set_TypesOnly(bool value);
}
public class System.DirectoryServices.Protocols.SearchResponse : DirectoryResponse {
    private SearchResultReferenceCollection _referenceCollection;
    private SearchResultEntryCollection _entryCollection;
    internal bool searchDone;
    public SearchResultReferenceCollection References { get; internal set; }
    public SearchResultEntryCollection Entries { get; internal set; }
    internal SearchResponse(string dn, DirectoryControl[] controls, ResultCode result, string message, Uri[] referral);
    public SearchResultReferenceCollection get_References();
    internal void set_References(SearchResultReferenceCollection value);
    public SearchResultEntryCollection get_Entries();
    internal void set_Entries(SearchResultEntryCollection value);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.SearchResultAttributeCollection : DictionaryBase {
    public DirectoryAttribute Item { get; }
    public ICollection AttributeNames { get; }
    public ICollection Values { get; }
    public DirectoryAttribute get_Item(string attributeName);
    public ICollection get_AttributeNames();
    public ICollection get_Values();
    internal void Add(string name, DirectoryAttribute value);
    public bool Contains(string attributeName);
    public void CopyTo(DirectoryAttribute[] array, int index);
}
public class System.DirectoryServices.Protocols.SearchResultEntry : object {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchResultAttributeCollection <Attributes>k__BackingField;
    public string DistinguishedName { get; internal set; }
    public SearchResultAttributeCollection Attributes { get; }
    public DirectoryControl[] Controls { get; }
    internal SearchResultEntry(string dn);
    internal SearchResultEntry(string dn, SearchResultAttributeCollection attrs);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
internal void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public SearchResultAttributeCollection get_Attributes();
    public DirectoryControl[] get_Controls();
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.SearchResultEntryCollection : ReadOnlyCollectionBase {
    public SearchResultEntry Item { get; }
    public SearchResultEntry get_Item(int index);
    internal int Add(SearchResultEntry entry);
    public bool Contains(SearchResultEntry value);
    public int IndexOf(SearchResultEntry value);
    public void CopyTo(SearchResultEntry[] values, int index);
    internal void Clear();
}
public class System.DirectoryServices.Protocols.SearchResultReference : object {
    private Uri[] _resultReferences;
    public Uri[] Reference { get; }
    public DirectoryControl[] Controls { get; }
    internal SearchResultReference(Uri[] uris);
    public Uri[] get_Reference();
    public DirectoryControl[] get_Controls();
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.SearchResultReferenceCollection : ReadOnlyCollectionBase {
    public SearchResultReference Item { get; }
    public SearchResultReference get_Item(int index);
    internal int Add(SearchResultReference reference);
    public bool Contains(SearchResultReference value);
    public int IndexOf(SearchResultReference value);
    public void CopyTo(SearchResultReference[] values, int index);
    internal void Clear();
}
public enum System.DirectoryServices.Protocols.SearchScope : Enum {
    public int value__;
    public static SearchScope Base;
    public static SearchScope OneLevel;
    public static SearchScope Subtree;
}
[NativeMarshallingAttribute("System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX/Marshaller")]
internal class System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX : ValueType {
    public int version;
    public int length;
    public string user;
    public int userLength;
    public string domain;
    public int domainLength;
    public string password;
    public int passwordLength;
    public int flags;
    public string packageList;
    public int packageListLength;
}
internal class System.DirectoryServices.Protocols.SecPkgContext_IssuerListInfoEx : ValueType {
    public IntPtr aIssuers;
    public int cIssuers;
}
public class System.DirectoryServices.Protocols.SecurityDescriptorFlagControl : DirectoryControl {
    [CompilerGeneratedAttribute]
private SecurityMasks <SecurityMasks>k__BackingField;
    public SecurityMasks SecurityMasks { get; public set; }
    public SecurityDescriptorFlagControl(SecurityMasks masks);
    [CompilerGeneratedAttribute]
public SecurityMasks get_SecurityMasks();
    [CompilerGeneratedAttribute]
public void set_SecurityMasks(SecurityMasks value);
    public virtual Byte[] GetValue();
}
internal class System.DirectoryServices.Protocols.SecurityHandle : ValueType {
    public IntPtr Lower;
    public IntPtr Upper;
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.SecurityMasks : Enum {
    public int value__;
    public static SecurityMasks None;
    public static SecurityMasks Owner;
    public static SecurityMasks Group;
    public static SecurityMasks Dacl;
    public static SecurityMasks Sacl;
}
public class System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation : object {
    private SecurityProtocol _securityProtocol;
    private CipherAlgorithmType _identifier;
    private int _strength;
    private HashAlgorithmType _hashAlgorithm;
    private int _hashStrength;
    private int _keyExchangeAlgorithm;
    private int _exchangeStrength;
    public SecurityProtocol Protocol { get; }
    public CipherAlgorithmType AlgorithmIdentifier { get; }
    public int CipherStrength { get; }
    public HashAlgorithmType Hash { get; }
    public int HashStrength { get; }
    public int KeyExchangeAlgorithm { get; }
    public int ExchangeStrength { get; }
    public SecurityProtocol get_Protocol();
    public CipherAlgorithmType get_AlgorithmIdentifier();
    public int get_CipherStrength();
    public HashAlgorithmType get_Hash();
    public int get_HashStrength();
    public int get_KeyExchangeAlgorithm();
    public int get_ExchangeStrength();
    internal Byte& modreq(System.Runtime.InteropServices.InAttribute) GetPinnableReference();
}
public enum System.DirectoryServices.Protocols.SecurityProtocol : Enum {
    public int value__;
    public static SecurityProtocol Pct1Server;
    public static SecurityProtocol Pct1Client;
    public static SecurityProtocol Ssl2Server;
    public static SecurityProtocol Ssl2Client;
    public static SecurityProtocol Ssl3Server;
    public static SecurityProtocol Ssl3Client;
    public static SecurityProtocol Tls1Server;
    public static SecurityProtocol Tls1Client;
}
public class System.DirectoryServices.Protocols.ShowDeletedControl : DirectoryControl {
}
public class System.DirectoryServices.Protocols.SortKey : object {
    private string _name;
    private string _rule;
    private bool _order;
    public string AttributeName { get; public set; }
    public string MatchingRule { get; public set; }
    public bool ReverseOrder { get; public set; }
    public SortKey(string attributeName, string matchingRule, bool reverseOrder);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_MatchingRule();
    public void set_MatchingRule(string value);
    public bool get_ReverseOrder();
    public void set_ReverseOrder(bool value);
}
internal class System.DirectoryServices.Protocols.SortKeyInterop : ValueType {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchingRule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReverseOrder>k__BackingField;
    internal string AttributeName { get; internal set; }
    internal string MatchingRule { get; internal set; }
    internal bool ReverseOrder { get; internal set; }
    public SortKeyInterop(SortKey sortKey);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal string get_AttributeName();
    [CompilerGeneratedAttribute]
internal void set_AttributeName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal string get_MatchingRule();
    [CompilerGeneratedAttribute]
internal void set_MatchingRule(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal bool get_ReverseOrder();
    [CompilerGeneratedAttribute]
internal void set_ReverseOrder(bool value);
}
public class System.DirectoryServices.Protocols.SortRequestControl : DirectoryControl {
    private SortKey[] _keys;
    public SortKey[] SortKeys { get; public set; }
    public SortRequestControl(SortKey[] sortKeys);
    public SortRequestControl(string attributeName, bool reverseOrder);
    public SortRequestControl(string attributeName, string matchingRule, bool reverseOrder);
    public SortKey[] get_SortKeys();
    public void set_SortKeys(SortKey[] value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.SortResponseControl : DirectoryControl {
    [CompilerGeneratedAttribute]
private ResultCode <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    public ResultCode Result { get; }
    public string AttributeName { get; }
    internal SortResponseControl(ResultCode result, string attributeName, bool critical, Byte[] value);
    [CompilerGeneratedAttribute]
public ResultCode get_Result();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
}
[TypeForwardedFromAttribute("System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.Protocols.TlsOperationException : DirectoryOperationException {
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected TlsOperationException(SerializationInfo info, StreamingContext context);
    public TlsOperationException(string message);
    public TlsOperationException(string message, Exception inner);
    public TlsOperationException(DirectoryResponse response);
    public TlsOperationException(DirectoryResponse response, string message);
    public TlsOperationException(DirectoryResponse response, string message, Exception inner);
}
public class System.DirectoryServices.Protocols.TreeDeleteControl : DirectoryControl {
}
internal static class System.DirectoryServices.Protocols.Utility : object {
    internal static bool IsResultCode(ResultCode code);
    internal static IntPtr AllocHGlobalIntPtrArray(int size);
}
internal static class System.DirectoryServices.Protocols.UtilityHandle : object {
    private static ConnectionHandle s_handle;
    private static UtilityHandle();
    public static ConnectionHandle GetHandle();
}
public class System.DirectoryServices.Protocols.VerifyNameControl : DirectoryControl {
    private string _serverName;
    [CompilerGeneratedAttribute]
private int <Flag>k__BackingField;
    public string ServerName { get; public set; }
    public int Flag { get; public set; }
    public VerifyNameControl(string serverName);
    public VerifyNameControl(string serverName, int flag);
    public string get_ServerName();
    public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public int get_Flag();
    [CompilerGeneratedAttribute]
public void set_Flag(int value);
    public virtual Byte[] GetValue();
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.DirectoryServices.Protocols.VERIFYSERVERCERT : MulticastDelegate {
    public VERIFYSERVERCERT(object object, IntPtr method);
    public virtual BOOL Invoke(IntPtr Connection, IntPtr pServerCert);
    public virtual IAsyncResult BeginInvoke(IntPtr Connection, IntPtr pServerCert, AsyncCallback callback, object object);
    public virtual BOOL EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.VerifyServerCertificateCallback : MulticastDelegate {
    public VerifyServerCertificateCallback(object object, IntPtr method);
    public virtual bool Invoke(LdapConnection connection, X509Certificate certificate);
    public virtual IAsyncResult BeginInvoke(LdapConnection connection, X509Certificate certificate, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.VlvRequestControl : DirectoryControl {
    private int _before;
    private int _after;
    private int _offset;
    private int _estimateCount;
    private Byte[] _target;
    private Byte[] _context;
    public int BeforeCount { get; public set; }
    public int AfterCount { get; public set; }
    public int Offset { get; public set; }
    public int EstimateCount { get; public set; }
    public Byte[] Target { get; public set; }
    public Byte[] ContextId { get; public set; }
    public VlvRequestControl(int beforeCount, int afterCount, int offset);
    public VlvRequestControl(int beforeCount, int afterCount, string target);
    public VlvRequestControl(int beforeCount, int afterCount, Byte[] target);
    public int get_BeforeCount();
    public void set_BeforeCount(int value);
    public int get_AfterCount();
    public void set_AfterCount(int value);
    public int get_Offset();
    public void set_Offset(int value);
    public int get_EstimateCount();
    public void set_EstimateCount(int value);
    public Byte[] get_Target();
    public void set_Target(Byte[] value);
    public Byte[] get_ContextId();
    public void set_ContextId(Byte[] value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.VlvResponseControl : DirectoryControl {
    private Byte[] _context;
    [CompilerGeneratedAttribute]
private int <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultCode <Result>k__BackingField;
    public int TargetPosition { get; }
    public int ContentCount { get; }
    public Byte[] ContextId { get; }
    public ResultCode Result { get; }
    internal VlvResponseControl(int targetPosition, int count, Byte[] context, ResultCode result, bool criticality, Byte[] value);
    [CompilerGeneratedAttribute]
public int get_TargetPosition();
    [CompilerGeneratedAttribute]
public int get_ContentCount();
    public Byte[] get_ContextId();
    [CompilerGeneratedAttribute]
public ResultCode get_Result();
}
internal static class System.LocalAppContextSwitches : object {
    private static int s_useBasicAuthFallback;
    public static bool UseBasicAuthFallback { get; }
    public static bool get_UseBasicAuthFallback();
    internal static bool GetSwitchValue(string switchName, Boolean& switchValue);
    internal static bool GetCachedSwitchValue(string switchName, Int32& cachedSwitchValue);
    private static bool GetCachedSwitchValueInternal(string switchName, Int32& cachedSwitchValue);
    private static bool GetSwitchDefaultValue(string switchName);
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string NoNegativeTimeLimit { get; }
    internal static string NoNegativeSizeLimit { get; }
    internal static string InvalidDocument { get; }
    internal static string MissingResponse { get; }
    internal static string ErrorResponse { get; }
    internal static string NullDirectoryAttribute { get; }
    internal static string NullDirectoryAttributeCollection { get; }
    internal static string WhiteSpaceServerName { get; }
    internal static string DirectoryAttributeConversion { get; }
    internal static string WrongNumValuesCompare { get; }
    internal static string WrongAssertionCompare { get; }
    internal static string DefaultOperationsError { get; }
    internal static string ReadOnlyProperty { get; }
    internal static string InvalidClientCertificates { get; }
    internal static string InvalidAuthCredential { get; }
    internal static string InvalidLdapSearchRequestFilter { get; }
    internal static string PartialResultsNotSupported { get; }
    internal static string BerConverterNotMatch { get; }
    internal static string BerConverterUndefineChar { get; }
    internal static string BerConversionError { get; }
    internal static string TLSStopFailure { get; }
    internal static string NoPartialResults { get; }
    internal static string DefaultLdapError { get; }
    internal static string LDAP_PARTIAL_RESULTS { get; }
    internal static string LDAP_IS_LEAF { get; }
    internal static string LDAP_SORT_CONTROL_MISSING { get; }
    internal static string LDAP_OFFSET_RANGE_ERROR { get; }
    internal static string LDAP_RESULTS_TOO_LARGE { get; }
    internal static string LDAP_SERVER_DOWN { get; }
    internal static string LDAP_LOCAL_ERROR { get; }
    internal static string LDAP_ENCODING_ERROR { get; }
    internal static string LDAP_DECODING_ERROR { get; }
    internal static string LDAP_TIMEOUT { get; }
    internal static string LDAP_AUTH_UNKNOWN { get; }
    internal static string LDAP_FILTER_ERROR { get; }
    internal static string LDAP_USER_CANCELLED { get; }
    internal static string LDAP_PARAM_ERROR { get; }
    internal static string LDAP_NO_MEMORY { get; }
    internal static string LDAP_CONNECT_ERROR { get; }
    internal static string LDAP_NOT_SUPPORTED { get; }
    internal static string LDAP_NO_RESULTS_RETURNED { get; }
    internal static string LDAP_CONTROL_NOT_FOUND { get; }
    internal static string LDAP_MORE_RESULTS_TO_RETURN { get; }
    internal static string LDAP_CLIENT_LOOP { get; }
    internal static string LDAP_REFERRAL_LIMIT_EXCEEDED { get; }
    internal static string LDAP_INVALID_CREDENTIALS { get; }
    internal static string LDAP_SUCCESS { get; }
    internal static string LDAP_OPERATIONS_ERROR { get; }
    internal static string LDAP_PROTOCOL_ERROR { get; }
    internal static string LDAP_TIMELIMIT_EXCEEDED { get; }
    internal static string LDAP_SIZELIMIT_EXCEEDED { get; }
    internal static string LDAP_COMPARE_FALSE { get; }
    internal static string LDAP_COMPARE_TRUE { get; }
    internal static string LDAP_AUTH_METHOD_NOT_SUPPORTED { get; }
    internal static string LDAP_STRONG_AUTH_REQUIRED { get; }
    internal static string LDAP_REFERRAL { get; }
    internal static string LDAP_ADMIN_LIMIT_EXCEEDED { get; }
    internal static string LDAP_UNAVAILABLE_CRIT_EXTENSION { get; }
    internal static string LDAP_CONFIDENTIALITY_REQUIRED { get; }
    internal static string LDAP_SASL_BIND_IN_PROGRESS { get; }
    internal static string LDAP_NO_SUCH_ATTRIBUTE { get; }
    internal static string LDAP_UNDEFINED_TYPE { get; }
    internal static string LDAP_INAPPROPRIATE_MATCHING { get; }
    internal static string LDAP_CONSTRAINT_VIOLATION { get; }
    internal static string LDAP_ATTRIBUTE_OR_VALUE_EXISTS { get; }
    internal static string LDAP_INVALID_SYNTAX { get; }
    internal static string LDAP_NO_SUCH_OBJECT { get; }
    internal static string LDAP_ALIAS_PROBLEM { get; }
    internal static string LDAP_INVALID_DN_SYNTAX { get; }
    internal static string LDAP_ALIAS_DEREF_PROBLEM { get; }
    internal static string LDAP_INAPPROPRIATE_AUTH { get; }
    internal static string LDAP_INSUFFICIENT_RIGHTS { get; }
    internal static string LDAP_BUSY { get; }
    internal static string LDAP_UNAVAILABLE { get; }
    internal static string LDAP_UNWILLING_TO_PERFORM { get; }
    internal static string LDAP_LOOP_DETECT { get; }
    internal static string LDAP_NAMING_VIOLATION { get; }
    internal static string LDAP_OBJECT_CLASS_VIOLATION { get; }
    internal static string LDAP_NOT_ALLOWED_ON_NONLEAF { get; }
    internal static string LDAP_NOT_ALLOWED_ON_RDN { get; }
    internal static string LDAP_ALREADY_EXISTS { get; }
    internal static string LDAP_NO_OBJECT_CLASS_MODS { get; }
    internal static string LDAP_AFFECTS_MULTIPLE_DSAS { get; }
    internal static string LDAP_VIRTUAL_LIST_VIEW_ERROR { get; }
    internal static string LDAP_OTHER { get; }
    internal static string LDAP_SEND_TIMEOUT { get; }
    internal static string InvalidAsyncResult { get; }
    internal static string ValidDirectoryAttributeType { get; }
    internal static string ValidFilterType { get; }
    internal static string ValidValuesType { get; }
    internal static string ValidValueType { get; }
    internal static string InvalidValueType { get; }
    internal static string ValidValue { get; }
    internal static string ContainNullControl { get; }
    internal static string NotReturnedAsyncResult { get; }
    internal static string DsmlAuthRequestNotSupported { get; }
    internal static string CallBackIsNull { get; }
    internal static string NullValueArray { get; }
    internal static string TimespanExceedMax { get; }
    internal static string InvliadRequestType { get; }
    internal static string DirectoryServicesProtocols_PlatformNotSupported { get; }
    internal static string QuotaControlNotSupported { get; }
    internal static string ReferralChasingOptionsNotSupported { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_NoNegativeTimeLimit();
    internal static string get_NoNegativeSizeLimit();
    internal static string get_InvalidDocument();
    internal static string get_MissingResponse();
    internal static string get_ErrorResponse();
    internal static string get_NullDirectoryAttribute();
    internal static string get_NullDirectoryAttributeCollection();
    internal static string get_WhiteSpaceServerName();
    internal static string get_DirectoryAttributeConversion();
    internal static string get_WrongNumValuesCompare();
    internal static string get_WrongAssertionCompare();
    internal static string get_DefaultOperationsError();
    internal static string get_ReadOnlyProperty();
    internal static string get_InvalidClientCertificates();
    internal static string get_InvalidAuthCredential();
    internal static string get_InvalidLdapSearchRequestFilter();
    internal static string get_PartialResultsNotSupported();
    internal static string get_BerConverterNotMatch();
    internal static string get_BerConverterUndefineChar();
    internal static string get_BerConversionError();
    internal static string get_TLSStopFailure();
    internal static string get_NoPartialResults();
    internal static string get_DefaultLdapError();
    internal static string get_LDAP_PARTIAL_RESULTS();
    internal static string get_LDAP_IS_LEAF();
    internal static string get_LDAP_SORT_CONTROL_MISSING();
    internal static string get_LDAP_OFFSET_RANGE_ERROR();
    internal static string get_LDAP_RESULTS_TOO_LARGE();
    internal static string get_LDAP_SERVER_DOWN();
    internal static string get_LDAP_LOCAL_ERROR();
    internal static string get_LDAP_ENCODING_ERROR();
    internal static string get_LDAP_DECODING_ERROR();
    internal static string get_LDAP_TIMEOUT();
    internal static string get_LDAP_AUTH_UNKNOWN();
    internal static string get_LDAP_FILTER_ERROR();
    internal static string get_LDAP_USER_CANCELLED();
    internal static string get_LDAP_PARAM_ERROR();
    internal static string get_LDAP_NO_MEMORY();
    internal static string get_LDAP_CONNECT_ERROR();
    internal static string get_LDAP_NOT_SUPPORTED();
    internal static string get_LDAP_NO_RESULTS_RETURNED();
    internal static string get_LDAP_CONTROL_NOT_FOUND();
    internal static string get_LDAP_MORE_RESULTS_TO_RETURN();
    internal static string get_LDAP_CLIENT_LOOP();
    internal static string get_LDAP_REFERRAL_LIMIT_EXCEEDED();
    internal static string get_LDAP_INVALID_CREDENTIALS();
    internal static string get_LDAP_SUCCESS();
    internal static string get_LDAP_OPERATIONS_ERROR();
    internal static string get_LDAP_PROTOCOL_ERROR();
    internal static string get_LDAP_TIMELIMIT_EXCEEDED();
    internal static string get_LDAP_SIZELIMIT_EXCEEDED();
    internal static string get_LDAP_COMPARE_FALSE();
    internal static string get_LDAP_COMPARE_TRUE();
    internal static string get_LDAP_AUTH_METHOD_NOT_SUPPORTED();
    internal static string get_LDAP_STRONG_AUTH_REQUIRED();
    internal static string get_LDAP_REFERRAL();
    internal static string get_LDAP_ADMIN_LIMIT_EXCEEDED();
    internal static string get_LDAP_UNAVAILABLE_CRIT_EXTENSION();
    internal static string get_LDAP_CONFIDENTIALITY_REQUIRED();
    internal static string get_LDAP_SASL_BIND_IN_PROGRESS();
    internal static string get_LDAP_NO_SUCH_ATTRIBUTE();
    internal static string get_LDAP_UNDEFINED_TYPE();
    internal static string get_LDAP_INAPPROPRIATE_MATCHING();
    internal static string get_LDAP_CONSTRAINT_VIOLATION();
    internal static string get_LDAP_ATTRIBUTE_OR_VALUE_EXISTS();
    internal static string get_LDAP_INVALID_SYNTAX();
    internal static string get_LDAP_NO_SUCH_OBJECT();
    internal static string get_LDAP_ALIAS_PROBLEM();
    internal static string get_LDAP_INVALID_DN_SYNTAX();
    internal static string get_LDAP_ALIAS_DEREF_PROBLEM();
    internal static string get_LDAP_INAPPROPRIATE_AUTH();
    internal static string get_LDAP_INSUFFICIENT_RIGHTS();
    internal static string get_LDAP_BUSY();
    internal static string get_LDAP_UNAVAILABLE();
    internal static string get_LDAP_UNWILLING_TO_PERFORM();
    internal static string get_LDAP_LOOP_DETECT();
    internal static string get_LDAP_NAMING_VIOLATION();
    internal static string get_LDAP_OBJECT_CLASS_VIOLATION();
    internal static string get_LDAP_NOT_ALLOWED_ON_NONLEAF();
    internal static string get_LDAP_NOT_ALLOWED_ON_RDN();
    internal static string get_LDAP_ALREADY_EXISTS();
    internal static string get_LDAP_NO_OBJECT_CLASS_MODS();
    internal static string get_LDAP_AFFECTS_MULTIPLE_DSAS();
    internal static string get_LDAP_VIRTUAL_LIST_VIEW_ERROR();
    internal static string get_LDAP_OTHER();
    internal static string get_LDAP_SEND_TIMEOUT();
    internal static string get_InvalidAsyncResult();
    internal static string get_ValidDirectoryAttributeType();
    internal static string get_ValidFilterType();
    internal static string get_ValidValuesType();
    internal static string get_ValidValueType();
    internal static string get_InvalidValueType();
    internal static string get_ValidValue();
    internal static string get_ContainNullControl();
    internal static string get_NotReturnedAsyncResult();
    internal static string get_DsmlAuthRequestNotSupported();
    internal static string get_CallBackIsNull();
    internal static string get_NullValueArray();
    internal static string get_TimespanExceedMax();
    internal static string get_InvliadRequestType();
    internal static string get_DirectoryServicesProtocols_PlatformNotSupported();
    internal static string get_QuotaControlNotSupported();
    internal static string get_ReferralChasingOptionsNotSupported();
}
