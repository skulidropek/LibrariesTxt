[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Raven.Embedded.DatabaseOptions : object {
    [CompilerGeneratedAttribute]
private bool <SkipCreatingDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseRecord <DatabaseRecord>k__BackingField;
    public bool SkipCreatingDatabase { get; public set; }
    public DocumentConventions Conventions { get; public set; }
    public DatabaseRecord DatabaseRecord { get; }
    public DatabaseOptions(string databaseName);
    public DatabaseOptions(DatabaseRecord databaseRecord);
    [CompilerGeneratedAttribute]
public bool get_SkipCreatingDatabase();
    [CompilerGeneratedAttribute]
public void set_SkipCreatingDatabase(bool value);
    [CompilerGeneratedAttribute]
public DocumentConventions get_Conventions();
    [CompilerGeneratedAttribute]
public void set_Conventions(DocumentConventions value);
    [CompilerGeneratedAttribute]
public DatabaseRecord get_DatabaseRecord();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Raven.Embedded.EmbeddedServer : object {
    public static EmbeddedServer Instance;
    private Logger _logger;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<Task`1<ValueTuple`2<Uri, Process>>> _serverTask;
    private ConcurrentDictionary`2<string, Lazy`1<Task`1<IDocumentStore>>> _documentStores;
    [NullableAttribute("2")]
private ServerOptions _serverOptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ServerProcessExitedEventArgs> ServerProcessExited;
    private static EmbeddedServer();
    [AsyncStateMachineAttribute("Raven.Embedded.EmbeddedServer/<GetServerProcessIdAsync>d__6")]
public Task`1<int> GetServerProcessIdAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Raven.Embedded.EmbeddedServer/<RestartServerAsync>d__7")]
public Task RestartServerAsync();
    [NullableContextAttribute("2")]
public void StartServer(ServerOptions options);
    private Task StartServerInternalAsync();
    public IDocumentStore GetDocumentStore(string database);
    public IDocumentStore GetDocumentStore(DatabaseOptions options);
    public Task`1<IDocumentStore> GetDocumentStoreAsync(string database, CancellationToken token);
    [AsyncStateMachineAttribute("Raven.Embedded.EmbeddedServer/<GetDocumentStoreAsync>d__13")]
public Task`1<IDocumentStore> GetDocumentStoreAsync(DatabaseOptions options, CancellationToken token);
    [AsyncStateMachineAttribute("Raven.Embedded.EmbeddedServer/<TryCreateDatabase>d__14")]
private Task TryCreateDatabase(DatabaseOptions options, IDocumentStore store, CancellationToken token);
    [AsyncStateMachineAttribute("Raven.Embedded.EmbeddedServer/<GetServerUriAsync>d__15")]
public Task`1<Uri> GetServerUriAsync(CancellationToken token);
    private void ShutdownServerProcess(Process process);
    [CompilerGeneratedAttribute]
public void add_ServerProcessExited(EventHandler`1<ServerProcessExitedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ServerProcessExited(EventHandler`1<ServerProcessExitedEventArgs> value);
    [AsyncStateMachineAttribute("Raven.Embedded.EmbeddedServer/<RunServer>d__20")]
private Task`1<ValueTuple`2<Uri, Process>> RunServer();
    [NullableContextAttribute("2")]
private static string BuildStartupExceptionMessage(string outputString, string errorString);
    public void OpenStudioInBrowser();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task`1<Uri> <OpenStudioInBrowser>b__22_0();
}
internal static class Raven.Embedded.ProcessHelper : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Raven.Embedded.ProcessHelper/<ReadOutput>d__0")]
internal static Task`1<string> ReadOutput(StreamReader output, Stopwatch elapsed, ServerOptions options, Func`3<string, StringBuilder, Task`1<bool>> onLine);
}
internal static class Raven.Embedded.RavenServerRunner : object {
    private static TestingStuff ForTestingPurposes;
    [AsyncStateMachineAttribute("Raven.Embedded.RavenServerRunner/<RunAsync>d__0")]
public static Task`1<Process> RunAsync(ServerOptions options);
    private static ValueTuple`2<string, string> GetExecAndFirstArgument(ServerOptions options);
    private static void RemoveEnvironmentVariables(ProcessStartInfo processStartInfo);
    internal static TestingStuff ForTestingPurposesOnly();
}
internal static class Raven.Embedded.RuntimeFrameworkVersionMatcher : object {
    internal static string Wildcard;
    internal static char GreaterOrEqual;
    [AsyncStateMachineAttribute("Raven.Embedded.RuntimeFrameworkVersionMatcher/<MatchAsync>d__2")]
internal static Task`1<string> MatchAsync(ServerOptions options);
    internal static string Match(RuntimeFrameworkVersion runtime, List`1<RuntimeFrameworkVersion> runtimes);
    private static bool NeedsMatch(ServerOptions options);
    [AsyncStateMachineAttribute("Raven.Embedded.RuntimeFrameworkVersionMatcher/<GetFrameworkVersionsAsync>d__5")]
private static Task`1<List`1<RuntimeFrameworkVersion>> GetFrameworkVersionsAsync(ServerOptions options);
}
public class Raven.Embedded.ServerOptions : object {
    internal static string DefaultServerDirectory;
    internal static string AltServerDirectory;
    [CompilerGeneratedAttribute]
private string <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <GracefulShutdownTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxServerStartupTimeDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CommandLineArgs>k__BackingField;
    internal static ServerOptions Default;
    [CompilerGeneratedAttribute]
private SecurityOptions <Security>k__BackingField;
    [CompilerGeneratedAttribute]
private LicensingOptions <Licensing>k__BackingField;
    public string FrameworkVersion { get; public set; }
    public string LogsPath { get; public set; }
    public string DataDirectory { get; public set; }
    public string ServerDirectory { get; public set; }
    public string DotNetPath { get; public set; }
    [ObsoleteAttribute("This property is no longer used and will be removed in the next version, please use 'Licensing.EulaAccepted' instead.")]
public bool AcceptEula { get; public set; }
    public string ServerUrl { get; public set; }
    public TimeSpan GracefulShutdownTimeout { get; public set; }
    public TimeSpan MaxServerStartupTimeDuration { get; public set; }
    public List`1<string> CommandLineArgs { get; public set; }
    public SecurityOptions Security { get; private set; }
    public LicensingOptions Licensing { get; public set; }
    private static ServerOptions();
    [CompilerGeneratedAttribute]
public string get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_FrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_LogsPath();
    [CompilerGeneratedAttribute]
public void set_LogsPath(string value);
    [CompilerGeneratedAttribute]
public string get_DataDirectory();
    [CompilerGeneratedAttribute]
public void set_DataDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ServerDirectory();
    [CompilerGeneratedAttribute]
public void set_ServerDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DotNetPath();
    [CompilerGeneratedAttribute]
public void set_DotNetPath(string value);
    public bool get_AcceptEula();
    public void set_AcceptEula(bool value);
    [CompilerGeneratedAttribute]
public string get_ServerUrl();
    [CompilerGeneratedAttribute]
public void set_ServerUrl(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_GracefulShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_GracefulShutdownTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxServerStartupTimeDuration();
    [CompilerGeneratedAttribute]
public void set_MaxServerStartupTimeDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CommandLineArgs();
    [CompilerGeneratedAttribute]
public void set_CommandLineArgs(List`1<string> value);
    [CompilerGeneratedAttribute]
public SecurityOptions get_Security();
    [CompilerGeneratedAttribute]
private void set_Security(SecurityOptions value);
    [CompilerGeneratedAttribute]
public LicensingOptions get_Licensing();
    [CompilerGeneratedAttribute]
public void set_Licensing(LicensingOptions value);
    public ServerOptions Secured(string certificate, string certPassword);
    public ServerOptions Secured(string certLoadExec, string certExecArgs, string serverCertThumbprint, X509Certificate2 clientCert);
}
public class Raven.Embedded.ServerProcessExitedEventArgs : EventArgs {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
