public class RazorEngine.AttributeValue : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PositionTagged`1<string> <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PositionTagged`1<object> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Literal>k__BackingField;
    public PositionTagged`1<string> Prefix { get; private set; }
    public PositionTagged`1<object> Value { get; private set; }
    public bool Literal { get; private set; }
    public AttributeValue(PositionTagged`1<string> prefix, PositionTagged`1<object> value, bool literal);
    [CompilerGeneratedAttribute]
public PositionTagged`1<string> get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(PositionTagged`1<string> value);
    [CompilerGeneratedAttribute]
public PositionTagged`1<object> get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(PositionTagged`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_Literal();
    [CompilerGeneratedAttribute]
private void set_Literal(bool value);
    public static AttributeValue FromTuple(Tuple`3<Tuple`2<string, int>, Tuple`2<object, int>, bool> value);
    public static AttributeValue FromTuple(Tuple`3<Tuple`2<string, int>, Tuple`2<string, int>, bool> value);
    public static AttributeValue op_Implicit(Tuple`3<Tuple`2<string, int>, Tuple`2<object, int>, bool> value);
    public static AttributeValue op_Implicit(Tuple`3<Tuple`2<string, int>, Tuple`2<string, int>, bool> value);
}
internal class RazorEngine.Common.HashCodeCombiner : object {
    private long _combinedHash64;
    public int CombinedHash { get; }
    public int get_CombinedHash();
    public HashCodeCombiner Add(IEnumerable e);
    public HashCodeCombiner Add(int i);
    public HashCodeCombiner Add(object o);
    public static HashCodeCombiner Start();
}
public class RazorEngine.Compilation.CompilationData : object {
    private bool _disposed;
    private string tmpFolder;
    private string srcCode;
    public string SourceCode { get; }
    internal string TmpFolder { get; }
    public CompilationData(string sourceCode, string tmpFolder);
    public string get_SourceCode();
    [SecuritySafeCriticalAttribute]
public void DeleteAll();
    internal string get_TmpFolder();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class RazorEngine.Compilation.CompilerServiceBase : object {
    protected internal static string DynamicTemplateNamespace;
    protected internal static string ClassNamePrefix;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IReferenceResolver <ReferenceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableTempFileLocking>k__BackingField;
    private bool _disposed;
    public IReferenceResolver ReferenceResolver { get; public set; }
    public bool Debug { get; public set; }
    public bool DisableTempFileLocking { get; public set; }
    public string SourceFileExtension { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IReferenceResolver get_ReferenceResolver();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Debug();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableTempFileLocking();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableTempFileLocking(bool value);
    public abstract virtual string get_SourceFileExtension();
    protected static string GetDefaultTemporaryDirectory();
    protected virtual string GetTemporaryDirectory();
    public abstract virtual string BuildTypeName(Type templateType, Type modelType);
    [SecurityCriticalAttribute]
public abstract virtual Tuple`2<Type, CompilationData> CompileType(TypeContext context);
    [SecurityCriticalAttribute]
public string GetCodeCompileUnit(string className, ITemplateSource template, ISet`1<string> namespaceImports, Type templateType, Type modelType);
    protected string GetAssemblyName(TypeContext context);
    [SecurityCriticalAttribute]
public virtual string InspectSource(RazorPageGeneratorResult results, TypeContext context);
    [SecurityCriticalAttribute]
public string GetCodeCompileUnit(TypeContext context);
    [SecurityCriticalAttribute]
private string GetGeneratorResult(IEnumerable`1<string> namespaces, TypeContext context);
    private static RazorPageGeneratorResult GenerateCodeFile(RazorTemplateEngine templateEngine, RazorProjectItem projectItem);
    private static RazorPageGeneratorResult GenerateCodeFile(RazorTemplateEngine templateEngine, RazorCodeDocument document);
    private static IEnumerable`1<string> GetNamespaces(Type templateType, IEnumerable`1<string> otherNamespaces);
    [ObsoleteAttribute("Use IncludeReferences instead")]
public virtual IEnumerable`1<string> IncludeAssemblies();
    public virtual IEnumerable`1<CompilerReference> IncludeReferences();
    protected IEnumerable`1<CompilerReference> GetAllReferences(TypeContext context);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public static class RazorEngine.Compilation.CompilerServiceBuilder : object {
    private static ICompilerServiceFactory _factory;
    private static object sync;
    private static CompilerServiceBuilder();
    public static void SetCompilerServiceFactory(ICompilerServiceFactory factory);
    public static ICompilerService GetCompilerService(Language language);
    public static ICompilerService GetDefaultCompilerService();
}
public static class RazorEngine.Compilation.CompilerServicesUtility : object {
    private static Type DynamicType;
    private static Type ExpandoType;
    private static Type EnumerableType;
    private static Type EnumeratorType;
    private static Type GenericEnumerableType;
    private static CompilerServicesUtility();
    public static bool IsAnonymousType(Type type);
    public static bool IsAnonymousTypeRecursive(Type t);
    public static bool IsDynamicType(Type type);
    public static bool IsIteratorType(Type type);
    public static string GenerateClassName();
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static string ResolveCSharpTypeName(Type type);
    public static string ResolveVBTypeName(Type type);
    public static Type GetIteratorInterface(Type type);
    public static IEnumerable`1<Assembly> GetLoadedAssemblies();
    public static string CSharpGetRawTypeName(Type type);
    public static string VBGetRawTypeName(Type type);
    public static string CSharpCreateGenericType(Type templateType, string modelTypeName, bool throwWhenNotGeneric);
    public static string VBCreateGenericType(Type templateType, string modelTypeName, bool throwWhenNotGeneric);
}
public class RazorEngine.Compilation.DefaultCompilerServiceFactory : object {
    [SecuritySafeCriticalAttribute]
public sealed virtual ICompilerService CreateCompilerService(Language language);
}
internal static class RazorEngine.Compilation.EmptyExecutionContext : object {
    private static ExecutionContext empty;
    public static ExecutionContext Empty { get; }
    [SecurityCriticalAttribute]
private static EmptyExecutionContext();
    public static ExecutionContext get_Empty();
}
[SecurityCriticalAttribute]
internal class RazorEngine.Compilation.ExecutionContextLessThread : object {
    private ConcurrentQueue`1<Tuple`2<TaskCompletionSource`1<bool>, Action>> queue;
    private Exception messagePumpExn;
    private Thread t;
    [SecurityCriticalAttribute]
private void MessagePumpWithoutExecutionContext();
    [SecurityCriticalAttribute]
public void CallAction(Action work);
    public T CallFunc(Func`1<T> func);
    public O CallFunc(Func`2<I, O> func, I inData);
    public static ExecutionContextLessThread Create();
    public static void DefaultCallAction(Action a);
    public static O DefaultCallFunc(Func`1<O> f);
    public static O DefaultCallFunc(Func`2<I, O> f, I d);
    [SecuritySafeCriticalAttribute]
protected virtual override void Finalize();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
}
[AttributeUsageAttribute("4")]
public class RazorEngine.Compilation.HasDynamicModelAttribute : Attribute {
}
public interface RazorEngine.Compilation.ICompilerService {
    public IReferenceResolver ReferenceResolver { get; public set; }
    public bool Debug { get; public set; }
    public bool DisableTempFileLocking { get; public set; }
    public abstract virtual IReferenceResolver get_ReferenceResolver();
    public abstract virtual void set_ReferenceResolver(IReferenceResolver value);
    public abstract virtual bool get_Debug();
    public abstract virtual void set_Debug(bool value);
    public abstract virtual bool get_DisableTempFileLocking();
    public abstract virtual void set_DisableTempFileLocking(bool value);
    [SecurityCriticalAttribute]
public abstract virtual Tuple`2<Type, CompilationData> CompileType(TypeContext context);
    public abstract virtual IEnumerable`1<string> IncludeAssemblies();
}
public interface RazorEngine.Compilation.ICompilerServiceFactory {
    public abstract virtual ICompilerService CreateCompilerService(Language language);
}
public class RazorEngine.Compilation.ImpromptuInterface.ActLikeCaster : ImpromptuForwarder {
    private List`1<Type> _interfaceTypes;
    public ActLikeCaster(object target, IEnumerable`1<Type> types);
    public ActLikeCaster(SerializationInfo info, StreamingContext context);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
}
[AttributeUsageAttribute("704")]
public class RazorEngine.Compilation.ImpromptuInterface.AliasAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public AliasAttribute(string name);
    public string get_Name();
}
public abstract class RazorEngine.Compilation.ImpromptuInterface.Build.ActLikeProxy : ImpromptuForwarder {
    [DynamicAttribute]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ActLikeProxyOriginal>k__BackingField;
    private bool _init;
    [DynamicAttribute]
private object ActLikeProxyOriginal { get; private set; }
    [DynamicAttribute]
private object RazorEngine.Compilation.ImpromptuInterface.IActLikeProxy.Original { get; }
    [CompilerGeneratedAttribute]
private object get_ActLikeProxyOriginal();
    [CompilerGeneratedAttribute]
private void set_ActLikeProxyOriginal(object value);
    private sealed virtual override object RazorEngine.Compilation.ImpromptuInterface.IActLikeProxy.get_Original();
    private sealed virtual override void RazorEngine.Compilation.ImpromptuInterface.Build.IActLikeProxyInitialize.Initialize(object original, IEnumerable`1<Type> interfaces, IDictionary`2<string, Type> informalInterface);
    public virtual bool Equals(object obj);
    public bool Equals(ActLikeProxy other);
    public virtual int GetHashCode();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
public class RazorEngine.Compilation.ImpromptuInterface.Build.ActLikeProxyAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type[] <Interfaces>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Context>k__BackingField;
    public Type[] Interfaces { get; public set; }
    public Type Context { get; public set; }
    public ActLikeProxyAttribute(Type[] interfaces, Type context);
    [CompilerGeneratedAttribute]
public Type[] get_Interfaces();
    [CompilerGeneratedAttribute]
public void set_Interfaces(Type[] value);
    [CompilerGeneratedAttribute]
public Type get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(Type value);
}
public class RazorEngine.Compilation.ImpromptuInterface.Build.ActLikeProxySerializationHelper : object {
    public object Original;
    public Type[] Interfaces;
    public Type Context;
    [SecurityCriticalAttribute]
public sealed virtual object GetRealObject(StreamingContext context);
}
[ExtensionAttribute]
public static class RazorEngine.Compilation.ImpromptuInterface.Build.BuildProxy : object {
    private static ModuleBuilder _builder;
    private static AssemblyBuilder _ab;
    private static IDictionary`2<TypeHash, Type> _typeHash;
    private static object TypeCacheLock;
    private static IDictionary`2<TypeHash, Type> _delegateCache;
    private static object DelegateCacheLock;
    private static MethodInfo ActLike;
    internal static ModuleBuilder Builder { get; }
    private static BuildProxy();
    public static TInterface RecursiveActLike(object target);
    public static Type BuildType(Type contextType, Type mainInterface, Type[] otherInterfaces);
    public static Type BuildType(Type contextType, IDictionary`2<string, Type> informalInterface);
    public static bool PreLoadProxy(Type proxyType, ActLikeProxyAttribute attribute);
    public static bool PreLoadProxiesFromAssembly(Assembly assembly);
    private static Type BuildTypeHelper(ModuleBuilder builder, Type contextType, IDictionary`2<string, Type> informalInterface);
    private static void MakePropertyDescribedProperty(ModuleBuilder builder, TypeBuilder typeBuilder, Type contextType, string tName, Type tReturnType);
    private static Type BuildTypeHelper(ModuleBuilder builder, Type contextType, Type[] interfaces);
    private static object CustomAttributeTypeArgument(CustomAttributeTypedArgument argument);
    private static CustomAttributeBuilder GetAttributeBuilder(CustomAttributeData data);
    private static void MakeMethod(ModuleBuilder builder, MethodInfo info, TypeBuilder typeBuilder, Type contextType, bool nonRecursive, bool defaultImp);
    private static TypeBuilder DefineBuilderForCallSite(ModuleBuilder builder, string tCallSiteInvokeName);
    private static void EmitMethodBody(MethodBuilder methodBuilder, ParameterInfo[] paramInfo, MethodEmitInfo emitInfo);
    private static void MakeProperty(ModuleBuilder builder, PropertyInfo info, TypeBuilder typeBuilder, Type contextType, bool nonRecursive, bool defaultImp);
    private static void MakeEvent(ModuleBuilder builder, EventInfo info, TypeBuilder typeBuilder, Type contextType, bool defaultImp);
    private static void EmitRemoveEvent(EventBuilder tMp, MethodBuilder tRemoveBuilder, EventInfo info, MethodInfo tRemoveMethod, FieldInfo tGetField, FieldInfo tSetField, FieldInfo tIsEventField, EmitEventInfo tEmitInfo);
    private static void EmitAddEvent(EventBuilder tMp, MethodBuilder tAddBuilder, EventInfo info, MethodInfo tAddMethod, FieldInfo tGetField, FieldInfo tSetField, FieldInfo tIsEventField, EmitEventInfo tEmitInfo);
    private static void MakePropertyHelper(ModuleBuilder builder, TypeBuilder typeBuilder, PropertyEmitInfo emitInfo, PropertyInfo info, MethodInfo getMethod, MethodInfo setMethod);
    private static void EmitProperty(TypeBuilder typeBuilder, MethodBuilder getMethodBuilder, PropertyBuilder tMp, PropertyInfo info, MethodInfo setMethod, PropertyEmitInfo emitInfo);
    private static Tuple`2<Type, Type[]> GetParamTypes(object builder, MethodInfo info);
    private static IEnumerable`1<Type> FlattenGenericParameters(Type type);
    private static Type ReplaceTypeWithGenericBuilder(Type type, IDictionary`2<Type, GenericTypeParameterBuilder> dict);
    private static Type UpdateCallsiteFuncType(Type tFuncGeneric, Type returnType, Type[] argTypes);
    private static Type ReduceToElementType(Type type);
    [ExtensionAttribute]
private static Type DefineCallsiteFieldForMethod(TypeBuilder builder, string name, Type returnType, IEnumerable`1<Type> argTypes, MethodInfo info);
    [ExtensionAttribute]
private static Type DefineCallsiteField(TypeBuilder builder, string name, Type returnType, Type[] argTypes);
    public static Type EmitCallSiteFuncType(IEnumerable`1<Type> argTypes, Type returnType);
    internal static Type GenerateCallSiteFuncType(IEnumerable`1<Type> argTypes, Type returnType, MethodInfo methodInfo, TypeBuilder builder);
    private static Type GenerateFullDelegate(TypeBuilder builder, Type returnType, IEnumerable`1<Type> types, MethodInfo info);
    private static ParameterAttributes AttributesForParam(ParameterInfo param);
    internal static ModuleBuilder get_Builder();
    private static void GenerateAssembly(string name, AssemblyBuilderAccess access, AssemblyBuilder& ab, ModuleBuilder& mb);
}
[ExtensionAttribute]
public static class RazorEngine.Compilation.ImpromptuInterface.Build.EmitExtensions : object {
    [ExtensionAttribute]
public static FieldInfo GetFieldEvenIfGeneric(Type type, string fieldName);
    [ExtensionAttribute]
public static MethodInfo GetMethodEvenIfGeneric(Type type, string methodName, Type[] argTypes);
    [ExtensionAttribute]
public static MethodInfo GetMethodEvenIfGeneric(Type type, string methodName);
    [ExtensionAttribute]
public static BranchTrueOverBlock EmitBranchTrue(ILGenerator generator, Action`1<ILGenerator> condition);
    [ExtensionAttribute]
public static BranchFalseOverBlock EmitBranchFalse(ILGenerator generator, Action`1<ILGenerator> condition);
    [ExtensionAttribute]
public static void EmitInvocation(ILGenerator generator, Action`1<ILGenerator> target, Action`1<ILGenerator> call, Action`1[] parameters);
    [ExtensionAttribute]
public static void EmitCallsiteCreate(ILGenerator generator, Type funcType);
    [ExtensionAttribute]
public static void EmitCallInvokeFunc(ILGenerator generator, Type funcType);
    [ExtensionAttribute]
public static void EmitArray(ILGenerator generator, Type arrayType, IList`1<Action`1<ILGenerator>> emitElements);
    [ExtensionAttribute]
public static void EmitStoreLocation(ILGenerator generator, int location);
    [ExtensionAttribute]
public static void EmitLoadArgument(ILGenerator generator, int location);
    [ExtensionAttribute]
public static void EmitLoadLocation(ILGenerator generator, int location);
    [ExtensionAttribute]
public static void EmitDynamicMethodInvokeBinder(ILGenerator generator, CSharpBinderFlags flag, string name, IEnumerable`1<Type> genericParms, Type context, ParameterInfo[] argInfo, IEnumerable`1<string> argNames);
    [ExtensionAttribute]
public static void EmitDynamicSetBinder(ILGenerator generator, CSharpBinderFlags flag, string name, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitDynamicSetBinderDynamicParams(ILGenerator generator, CSharpBinderFlags flag, string name, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitDynamicBinaryOpBinder(ILGenerator generator, CSharpBinderFlags flag, ExpressionType exprType, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitDynamicGetBinder(ILGenerator generator, CSharpBinderFlags flag, string name, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitCreateCSharpArgumentInfo(ILGenerator generator, CSharpArgumentInfoFlags flag, string name);
    [ExtensionAttribute]
public static void EmitDynamicConvertBinder(ILGenerator generator, CSharpBinderFlags flag, Type returnType, Type context);
    [ExtensionAttribute]
public static void EmitDynamicIsEventBinder(ILGenerator generator, CSharpBinderFlags flag, string name, Type context);
    [ExtensionAttribute]
public static void EmitTypeOf(ILGenerator generator, Type type);
}
public interface RazorEngine.Compilation.ImpromptuInterface.Build.IActLikeProxyInitialize {
    public abstract virtual void Initialize(object original, IEnumerable`1<Type> interfaces, IDictionary`2<string, Type> informalInterface);
}
public class RazorEngine.Compilation.ImpromptuInterface.Build.TypeHash : object {
    public MemberInfo[] Types;
    public IDictionary`2<string, Type> InformalInterface;
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(IEnumerable`1<Type> moreTypes);
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(Type type1, Type[] moreTypes);
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(Type type1, IDictionary`2<string, Type> informalInterface);
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(bool strictOrder, MemberInfo[] moreTypes);
    public bool Equals(TypeHash other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TypeHash left, TypeHash right);
    public static bool op_Inequality(TypeHash left, TypeHash right);
    public static TypeHash Create(IEnumerable`1<Type> moreTypes);
    public static TypeHash Create(Type type1, Type[] moreTypes);
    public static TypeHash Create(Type type1, IDictionary`2<string, Type> informalInterface);
    public static TypeHash Create(bool strictOrder, MemberInfo[] moreTypes);
}
public interface RazorEngine.Compilation.ImpromptuInterface.Dynamic.IActLike {
    public abstract virtual TInterface ActLike(Type[] otherInterfaces);
}
internal interface RazorEngine.Compilation.ImpromptuInterface.Dynamic.ICustomTypeProvider {
}
public interface RazorEngine.Compilation.ImpromptuInterface.Dynamic.IDynamicKnowLike {
    unknown IEnumerable`1<Type> KnownInterfaces {public set; }
    unknown IDictionary`2<string, Type> KnownPropertySpec {public set; }
    public abstract virtual void set_KnownInterfaces(IEnumerable`1<Type> value);
    public abstract virtual void set_KnownPropertySpec(IDictionary`2<string, Type> value);
}
public interface RazorEngine.Compilation.ImpromptuInterface.Dynamic.IForwarder {
    public object Target { get; }
    public abstract virtual object get_Target();
}
public abstract class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ImpromptuForwarder : ImpromptuObject {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Target>k__BackingField;
    protected object Target { get; protected set; }
    private object RazorEngine.Compilation.ImpromptuInterface.Dynamic.IForwarder.Target { get; }
    protected object CallTarget { get; }
    protected ImpromptuForwarder(object target);
    protected ImpromptuForwarder(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    [CompilerGeneratedAttribute]
protected object get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(object value);
    private sealed virtual override object RazorEngine.Compilation.ImpromptuInterface.Dynamic.IForwarder.get_Target();
    protected virtual object get_CallTarget();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryUnaryOperation(UnaryOperationBinder binder, Object& result);
    public bool Equals(ImpromptuForwarder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ImpromptuForwarderAddRemove : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Delegate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAdding>k__BackingField;
    public object Delegate { get; protected set; }
    public bool IsAdding { get; protected set; }
    public static ImpromptuForwarderAddRemove op_Addition(ImpromptuForwarderAddRemove left, object right);
    public static ImpromptuForwarderAddRemove op_Subtraction(ImpromptuForwarderAddRemove left, object right);
    [CompilerGeneratedAttribute]
public object get_Delegate();
    [CompilerGeneratedAttribute]
protected void set_Delegate(object value);
    [CompilerGeneratedAttribute]
public bool get_IsAdding();
    [CompilerGeneratedAttribute]
protected void set_IsAdding(bool value);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ImpromptuLateLibraryType : ImpromptuForwarder {
    [DynamicAttribute]
public object new { get; }
    public bool IsAvailable { get; }
    protected object CallTarget { get; }
    public ImpromptuLateLibraryType(Type type);
    public ImpromptuLateLibraryType(string typeName);
    protected ImpromptuLateLibraryType(SerializationInfo info, StreamingContext context);
    public object get_new();
    public bool get_IsAvailable();
    protected virtual object get_CallTarget();
}
public abstract class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ImpromptuObject : DynamicObject {
    protected static IDictionary`2<TypeHash, IDictionary`2<string, Type>> _returnTypHash;
    private static object TypeHashLock;
    protected TypeHash _hash;
    protected IDictionary`2<string, Type> PropertySpec;
    unknown IEnumerable`1<Type> RazorEngine.Compilation.ImpromptuInterface.Dynamic.IDynamicKnowLike.KnownInterfaces {private set; }
    protected IEnumerable`1<Type> KnownInterfaces { get; protected set; }
    unknown IDictionary`2<string, Type> RazorEngine.Compilation.ImpromptuInterface.Dynamic.IDynamicKnowLike.KnownPropertySpec {private set; }
    protected IDictionary`2<string, Type> KnownPropertySpec { get; protected set; }
    protected ImpromptuObject(SerializationInfo info, StreamingContext context);
    private static ImpromptuObject();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override void RazorEngine.Compilation.ImpromptuInterface.Dynamic.IDynamicKnowLike.set_KnownInterfaces(IEnumerable`1<Type> value);
    protected virtual IEnumerable`1<Type> get_KnownInterfaces();
    protected virtual void set_KnownInterfaces(IEnumerable`1<Type> value);
    private sealed virtual override void RazorEngine.Compilation.ImpromptuInterface.Dynamic.IDynamicKnowLike.set_KnownPropertySpec(IDictionary`2<string, Type> value);
    protected virtual IDictionary`2<string, Type> get_KnownPropertySpec();
    protected virtual void set_KnownPropertySpec(IDictionary`2<string, Type> value);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    private IDictionary`2<string, Type> HashForThisType();
    public virtual bool TryTypeForName(string name, Type& returnType);
    public virtual TInterface ActLike(Type[] otherInterfaces);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.Invocation : object {
    public static string ExplicitConvertBinderName;
    public static string ImplicitConvertBinderName;
    public static string IndexBinderName;
    public static string ConstructorBinderName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InvocationKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String_OR_InvokeMemberName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <Args>k__BackingField;
    public InvocationKind Kind { get; protected set; }
    public String_OR_InvokeMemberName Name { get; protected set; }
    public Object[] Args { get; protected set; }
    public Invocation(InvocationKind kind, String_OR_InvokeMemberName name, Object[] storedArgs);
    private static Invocation();
    [CompilerGeneratedAttribute]
public InvocationKind get_Kind();
    [CompilerGeneratedAttribute]
protected void set_Kind(InvocationKind value);
    [CompilerGeneratedAttribute]
public String_OR_InvokeMemberName get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(String_OR_InvokeMemberName value);
    [CompilerGeneratedAttribute]
public Object[] get_Args();
    [CompilerGeneratedAttribute]
protected void set_Args(Object[] value);
    public static Invocation Create(InvocationKind kind, String_OR_InvokeMemberName name, Object[] storedArgs);
    public bool Equals(Invocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object Invoke(object target, Object[] args);
    [ObsoleteAttribute("Use Invoke instead")]
public object InvokeWithArgs(object target, Object[] args);
    public virtual object InvokeWithStoredArgs(object target);
}
public enum RazorEngine.Compilation.ImpromptuInterface.Dynamic.InvocationKind : Enum {
    public int value__;
    public static InvocationKind NotSet;
    public static InvocationKind Convert;
    public static InvocationKind Get;
    public static InvocationKind Set;
    public static InvocationKind GetIndex;
    public static InvocationKind SetIndex;
    public static InvocationKind InvokeMember;
    public static InvocationKind InvokeMemberAction;
    public static InvocationKind InvokeMemberUnknown;
    public static InvocationKind Constructor;
    public static InvocationKind AddAssign;
    public static InvocationKind SubtractAssign;
    public static InvocationKind IsEvent;
    public static InvocationKind Invoke;
    public static InvocationKind InvokeAction;
    public static InvocationKind InvokeUnknown;
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction : MulticastDelegate {
    public ThisAction(object object, IntPtr method);
    public virtual void Invoke(object this);
    public virtual IAsyncResult BeginInvoke(object this, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`1 : MulticastDelegate {
    public ThisAction`1(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`10 : MulticastDelegate {
    public ThisAction`10(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`11 : MulticastDelegate {
    public ThisAction`11(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`12 : MulticastDelegate {
    public ThisAction`12(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`13 : MulticastDelegate {
    public ThisAction`13(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`14 : MulticastDelegate {
    public ThisAction`14(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`15 : MulticastDelegate {
    public ThisAction`15(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`16 : MulticastDelegate {
    public ThisAction`16(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`2 : MulticastDelegate {
    public ThisAction`2(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`3 : MulticastDelegate {
    public ThisAction`3(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`4 : MulticastDelegate {
    public ThisAction`4(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`5 : MulticastDelegate {
    public ThisAction`5(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`6 : MulticastDelegate {
    public ThisAction`6(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`7 : MulticastDelegate {
    public ThisAction`7(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`8 : MulticastDelegate {
    public ThisAction`8(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisAction`9 : MulticastDelegate {
    public ThisAction`9(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisDelegate : object {
    private static HashSet`1<Type> _specialThisDels;
    private static ThisDelegate();
    [ExtensionAttribute]
public static bool IsSpecialThisDelegate(Delegate del);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`1 : MulticastDelegate {
    public ThisFunc`1(object object, IntPtr method);
    public virtual TResult Invoke(object this);
    public virtual IAsyncResult BeginInvoke(object this, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`10 : MulticastDelegate {
    public ThisFunc`10(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`11 : MulticastDelegate {
    public ThisFunc`11(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`12 : MulticastDelegate {
    public ThisFunc`12(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`13 : MulticastDelegate {
    public ThisFunc`13(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`14 : MulticastDelegate {
    public ThisFunc`14(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`15 : MulticastDelegate {
    public ThisFunc`15(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`16 : MulticastDelegate {
    public ThisFunc`16(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`17 : MulticastDelegate {
    public ThisFunc`17(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`2 : MulticastDelegate {
    public ThisFunc`2(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`3 : MulticastDelegate {
    public ThisFunc`3(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`4 : MulticastDelegate {
    public ThisFunc`4(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`5 : MulticastDelegate {
    public ThisFunc`5(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`6 : MulticastDelegate {
    public ThisFunc`6(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`7 : MulticastDelegate {
    public ThisFunc`7(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`8 : MulticastDelegate {
    public ThisFunc`8(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class RazorEngine.Compilation.ImpromptuInterface.Dynamic.ThisFunc`9 : MulticastDelegate {
    public ThisFunc`9(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public interface RazorEngine.Compilation.ImpromptuInterface.IActLikeProxy {
    [DynamicAttribute]
public object Original { get; }
    public abstract virtual object get_Original();
}
[ExtensionAttribute]
public static class RazorEngine.Compilation.ImpromptuInterface.Impromptu : object {
    private static Type ComObjectType;
    [DynamicAttribute]
private static object ComBinder;
    private static Regex _chainRegex;
    internal static IDictionary`2<Type, Delegate> CompiledExpressions;
    private static Impromptu();
    public static CallSite CreateCallSite(Type delegateType, CallSiteBinder binder, String_OR_InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    public static CallSite`1<T> CreateCallSite(CallSiteBinder binder, String_OR_InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    public static object InvokeMember(object target, String_OR_InvokeMemberName name, Object[] args);
    public static object InvokeBinaryOperator(object leftArg, ExpressionType op, object rightArg);
    public static object InvokeUnaryOperator(ExpressionType op, object arg);
    public static object Invoke(object target, Object[] args);
    public static object InvokeGetIndex(object target, Object[] indexes);
    public static object InvokeSetValueOnIndexes(object target, object value, Object[] indexes);
    public static object InvokeSetIndex(object target, Object[] indexesThenValue);
    public static void InvokeMemberAction(object target, String_OR_InvokeMemberName name, Object[] args);
    public static void InvokeAction(object target, Object[] args);
    public static object InvokeSet(object target, string name, object value);
    public static object InvokeGet(object target, string name);
    public static bool InvokeIsEvent(object target, string name);
    [ObsoleteAttribute("Use InvokeAddAssignMember")]
public static void InvokeAddAssign(object target, string name, object value);
    public static void InvokeAddAssignMember(object target, string name, object value);
    [ObsoleteAttribute("use InvokeSubtractAssignMember instead")]
public static void InvokeSubtractAssign(object target, string name, object value);
    public static void InvokeSubtractAssignMember(object target, string name, object value);
    public static object InvokeConvert(object target, Type type, bool explicit);
    public static object CoerceToDelegate(object invokeableObject, Type delegateType);
    [ObsoleteAttribute("use InvokeConstructor, this was a spelling mistake")]
public static object InvokeConstuctor(Type type, Object[] args);
    public static object InvokeConstructor(Type type, Object[] args);
    [ExtensionAttribute]
public static object FastDynamicInvoke(Delegate del, Object[] args);
    public static Type GenericDelegateType(int paramCount, bool returnVoid);
    public static IEnumerable`1<string> GetMemberNames(object target, bool dynamicOnly);
    public static object InvokeCallSite(CallSite callSite, object target, Object[] args);
    [ObsoleteAttribute("Use InvokeCallSite instead;")]
public static object Invoke(CallSite callSite, object target, Object[] args);
    [ExtensionAttribute]
public static TInterface ActLike(object originalDynamic, Type[] otherInterfaces);
    [ExtensionAttribute]
public static object UndoActLike(object proxiedObject);
    [ExtensionAttribute]
public static object ActLike(object originalDynamic, Type[] otherInterfaces);
    [ExtensionAttribute]
public static object ActLikeProperties(object originalDynamic, IDictionary`2<string, Type> propertySpec);
    internal static object InitializeProxy(Type proxytype, object original, IEnumerable`1<Type> interfaces, IDictionary`2<string, Type> propertySpec);
    [ExtensionAttribute]
[ObsoleteAttribute("Using InvokeContext wrapper to change permission context from target")]
public static TInterface CallActLike(object caller, object originalDynamic, Type[] otherInterfaces);
    [ExtensionAttribute]
public static IEnumerable`1<TInterface> AllActLike(IEnumerable`1<object> originalDynamic, Type[] otherInterfaces);
    public static object DynamicActLike(object originalDynamic, Type[] otherInterfaces);
    [ExtensionAttribute]
[ObsoleteAttribute("Using WithContext() wrapper to change permission context from target")]
public static object CallDynamicActLike(object caller, object originalDynamic, Type[] otherInterfaces);
    [ExtensionAttribute]
[ObsoleteAttribute("Using WithContext() wrapper to change permission context from target")]
public static IEnumerable`1<TInterface> AllCallActLike(IEnumerable`1<object> originalDynamic, object caller, Type[] otherInterfaces);
}
public class RazorEngine.Compilation.ImpromptuInterface.InvokeArg : object {
    public static Func`3<string, object, InvokeArg> Create;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    public string Name { get; private set; }
    public object Value { get; private set; }
    public InvokeArg(string name, object value);
    private static InvokeArg();
    public static InvokeArg op_Explicit(KeyValuePair`2<string, object> pair);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
public class RazorEngine.Compilation.ImpromptuInterface.InvokeArg`1 : InvokeArg {
    public InvokeArg`1(string name, object value);
    public static InvokeArg`1<T> op_Explicit(KeyValuePair`2<string, T> pair);
}
public class RazorEngine.Compilation.ImpromptuInterface.InvokeContext : object {
    public static Func`3<object, object, InvokeContext> CreateContext;
    public static Func`2<Type, InvokeContext> CreateStatic;
    public static Func`3<Type, object, InvokeContext> CreateStaticWithContext;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <StaticContext>k__BackingField;
    public object Target { get; protected set; }
    public Type Context { get; protected set; }
    public bool StaticContext { get; protected set; }
    public InvokeContext(Type target, bool staticContext, object context);
    public InvokeContext(object target, object context);
    private static InvokeContext();
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(object value);
    [CompilerGeneratedAttribute]
public Type get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(Type value);
    [CompilerGeneratedAttribute]
public bool get_StaticContext();
    [CompilerGeneratedAttribute]
protected void set_StaticContext(bool value);
}
[ExtensionAttribute]
public static class RazorEngine.Compilation.ImpromptuInterface.InvokeExt.InvokeExt : object {
    [ExtensionAttribute]
public static InvokeContext WithContext(object target, Type context);
    [ExtensionAttribute]
public static InvokeContext WithContext(object target);
    [ExtensionAttribute]
public static InvokeContext WithContext(object target, object context);
    [ExtensionAttribute]
public static InvokeContext WithStaticContext(Type target, object context);
    [ExtensionAttribute]
public static InvokeMemberName WithGenericArgs(string name, Type[] genericArgs);
    [ExtensionAttribute]
public static InvokeArg WithArgumentName(object argument, string name);
}
public class RazorEngine.Compilation.ImpromptuInterface.InvokeMemberName : String_OR_InvokeMemberName {
    public static Func`3<string, Type[], InvokeMemberName> Create;
    public static Func`2<string, InvokeMemberName> CreateSpecialName;
    public InvokeMemberName(string name, Type[] genericArgs);
    public InvokeMemberName(string name, bool isSpecialName);
    private static InvokeMemberName();
    public static InvokeMemberName op_Implicit(string name);
    public bool Equals(InvokeMemberName other);
    private bool EqualsHelper(InvokeMemberName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("1220")]
public class RazorEngine.Compilation.ImpromptuInterface.NonRecursiveInterfaceAttribute : Attribute {
}
internal class RazorEngine.Compilation.ImpromptuInterface.Optimization.BareBonesList`1 : object {
    private T[] _list;
    private int _addIndex;
    private int _length;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public BareBonesList`1(int length);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class RazorEngine.Compilation.ImpromptuInterface.Optimization.BinderHash : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <KnownBinder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <StaticContext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <DelegateType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String_OR_InvokeMemberName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <ArgNames>k__BackingField;
    public bool KnownBinder { get; protected set; }
    public Type BinderType { get; protected set; }
    public bool StaticContext { get; protected set; }
    public bool IsEvent { get; protected set; }
    public Type DelegateType { get; protected set; }
    public String_OR_InvokeMemberName Name { get; protected set; }
    public Type Context { get; protected set; }
    public String[] ArgNames { get; protected set; }
    protected BinderHash(Type delegateType, String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public static BinderHash Create(Type delType, String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    [CompilerGeneratedAttribute]
public bool get_KnownBinder();
    [CompilerGeneratedAttribute]
protected void set_KnownBinder(bool value);
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
protected void set_BinderType(Type value);
    [CompilerGeneratedAttribute]
public bool get_StaticContext();
    [CompilerGeneratedAttribute]
protected void set_StaticContext(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEvent();
    [CompilerGeneratedAttribute]
protected void set_IsEvent(bool value);
    [CompilerGeneratedAttribute]
public Type get_DelegateType();
    [CompilerGeneratedAttribute]
protected void set_DelegateType(Type value);
    [CompilerGeneratedAttribute]
public String_OR_InvokeMemberName get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(String_OR_InvokeMemberName value);
    [CompilerGeneratedAttribute]
public Type get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(Type value);
    [CompilerGeneratedAttribute]
public String[] get_ArgNames();
    [CompilerGeneratedAttribute]
protected void set_ArgNames(String[] value);
    public virtual bool Equals(BinderHash other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class RazorEngine.Compilation.ImpromptuInterface.Optimization.BinderHash`1 : GenericBinderHashBase {
    protected BinderHash`1(String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public static BinderHash`1<T> Create(String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public virtual bool Equals(BinderHash other);
}
internal class RazorEngine.Compilation.ImpromptuInterface.Optimization.DummmyNull : object {
}
internal class RazorEngine.Compilation.ImpromptuInterface.Optimization.GenericBinderHashBase : BinderHash {
    protected GenericBinderHashBase(Type delegateType, String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
}
[ExtensionAttribute]
internal static class RazorEngine.Compilation.ImpromptuInterface.Optimization.InvokeHelper : object {
    private static IDictionary`2<BinderHash, CallSite> _unknownBinderCache;
    private static IDictionary`2<BinderHash, CallSite> _getBinderCache;
    private static IDictionary`2<BinderHash, CallSite> _setBinderCache;
    private static IDictionary`2<BinderHash, CallSite> _memberBinderCache;
    private static IDictionary`2<BinderHash, CallSite> _directBinderCache;
    private static IDictionary`2<BinderHash, CallSite> _constructorBinderCache;
    internal static int Unknown;
    internal static int KnownGet;
    internal static int KnownSet;
    internal static int KnownMember;
    internal static int KnownDirect;
    internal static int KnownConstructor;
    private static object _binderCacheLock;
    internal static IDictionary`2<Type, CallSite`1<DynamicInvokeMemberConstructorValueType>> _dynamicInvokeMemberSite;
    internal static IDictionary`2<Type, CallSite`1<DynamicInvokeWrapFunc>> _dynamicInvokeWrapFunc;
    internal static Type[] FuncKinds;
    internal static Type[] ActionKinds;
    internal static IDictionary`2<Type, int> FuncArgs;
    internal static IDictionary`2<Type, int> ActionArgs;
    private static InvokeHelper();
    private static bool TryDynamicCachedCallSite(BinderHash hash, int knownBinderType, CallSite& callSite);
    private static void SetDynamicCachedCallSite(BinderHash hash, int knownBinderType, CallSite callSite);
    public static bool IsActionOrFunc(object target);
    [ExtensionAttribute]
internal static object InvokeMethodDelegate(object target, Delegate tFunc, Object[] args);
    internal static IEnumerable`1<CSharpArgumentInfo> GetBindingArgumentList(Object[] args, String[] argNames, bool staticContext);
    internal static CallSite CreateCallSite(Type delegateType, Type specificBinderType, int knownType, LazyBinder binder, String_OR_InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    internal static CallSite`1<T> CreateCallSite(Type specificBinderType, int knownType, LazyBinder binder, String_OR_InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    internal static object DynamicInvokeStaticMember(Type tReturn, CallSite& callsite, Type binderType, int knownType, LazyBinder binder, string name, bool staticContext, Type context, String[] argNames, Type target, Object[] args);
    internal static TReturn InvokeMember(CallSite& callsite, Type binderType, int knownType, LazyBinder binder, String_OR_InvokeMemberName name, bool staticContext, Type context, String[] argNames, object target, Object[] args);
    internal static object InvokeGetCallSite(object target, string name, Type context, bool staticContext, CallSite& callsite);
    internal static object InvokeSetCallSite(object target, string name, object value, Type context, bool staticContext, CallSite& callSite);
    internal static object InvokeMemberCallSite(object target, String_OR_InvokeMemberName name, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static object InvokeDirectCallSite(object target, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static object InvokeGetIndexCallSite(object target, Object[] indexes, String[] argNames, Type context, bool tStaticContext, CallSite& callSite);
    internal static object InvokeSetIndexCallSite(object target, Object[] indexesThenValue, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& tCallSite);
    internal static void InvokeMemberActionCallSite(object target, String_OR_InvokeMemberName name, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static void InvokeDirectActionCallSite(object target, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static bool InvokeIsEventCallSite(object target, string name, Type tContext, CallSite& callSite);
    internal static void InvokeAddAssignCallSite(object target, string name, Object[] args, String[] argNames, Type context, bool staticContext, CallSite& callSiteIsEvent, CallSite& callSiteAdd, CallSite& callSiteGet, CallSite& callSiteSet);
    internal static void InvokeSubtractAssignCallSite(object target, string name, Object[] args, String[] argNames, Type context, bool staticContext, CallSite& callSiteIsEvent, CallSite& callSiteRemove, CallSite& callSiteGet, CallSite& callSiteSet);
    internal static object InvokeConvertCallSite(object target, bool explict, Type type, Type context, CallSite& callSite);
    internal static object InvokeConstructorCallSite(Type type, bool isValueType, Object[] args, String[] argNames, CallSite& callSite);
    internal static Delegate WrapFunc(Type returnType, object invokable, int length);
    internal static void InvokeMemberAction(CallSite& callsite, Type binderType, int knownType, LazyBinder binder, String_OR_InvokeMemberName name, bool staticContext, Type context, String[] argNames, object target, Object[] args);
    internal static TReturn InvokeMemberTargetType(CallSite& callsite, Type binderType, int knownType, LazyBinder binder, String_OR_InvokeMemberName name, bool staticContext, Type context, String[] argNames, TTarget target, Object[] args);
    internal static Delegate WrapFuncHelper(object invokable, int length);
    internal static Delegate WrapFuncHelperMono(object invokable, int length);
    internal static Delegate WrapAction(object invokable, int length);
    internal static object FastDynamicInvokeReturn(Delegate del, Object[] args);
    internal static void FastDynamicInvokeAction(Delegate del, Object[] args);
}
[ExtensionAttribute]
public static class RazorEngine.Compilation.ImpromptuInterface.Optimization.Util : object {
    public static bool IsMono;
    private static Util();
    public static bool IsAnonymousType(object target);
    public static Object[] NameArgsIfNecessary(CallInfo callInfo, Object[] args);
    [ExtensionAttribute]
public static object GetTargetContext(object target, Type& context, Boolean& staticContext);
    [ExtensionAttribute]
public static Type FixContext(Type context);
    [ExtensionAttribute]
public static T GetValue(SerializationInfo info, string name);
    internal static Object[] GetArgsAndNames(Object[] args, String[]& argNames);
}
public class RazorEngine.Compilation.ImpromptuInterface.StaticContext : InvokeContext {
    public StaticContext(Type target);
    public static StaticContext op_Explicit(Type type);
}
public abstract class RazorEngine.Compilation.ImpromptuInterface.String_OR_InvokeMemberName : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type[] <GenericArgs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSpecialName>k__BackingField;
    public string Name { get; protected set; }
    public Type[] GenericArgs { get; protected set; }
    public bool IsSpecialName { get; protected set; }
    public static String_OR_InvokeMemberName op_Implicit(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type[] get_GenericArgs();
    [CompilerGeneratedAttribute]
protected void set_GenericArgs(Type[] value);
    [CompilerGeneratedAttribute]
public bool get_IsSpecialName();
    [CompilerGeneratedAttribute]
protected void set_IsSpecialName(bool value);
}
[AttributeUsageAttribute("3140")]
public class RazorEngine.Compilation.ImpromptuInterface.UseNamedArgumentAttribute : Attribute {
}
public class RazorEngine.Compilation.RazorDynamicObject : ImpromptuObject {
    private static BindingFlags Flags;
    private MarshalWrapper _component;
    private bool _disposed;
    internal RazorDynamicObject(object wrapped, bool allowMissingMembers);
    protected RazorDynamicObject(SerializationInfo info, StreamingContext context);
    private static RazorDynamicObject();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static Type MapType(Type type);
    public static Type MapInterface(Type interface);
    public static bool IsWrapped(object wrapped);
    internal static object Create(object wrapped, Action`1<RazorDynamicObject> created, bool allowMissingMembers);
    public static object Create(object wrapped, bool allowMissingMembers);
    public static object Cast(object o);
    public static object DynamicCast(object o, Type targetType);
    public static bool CompatibleWith(ParameterInfo[] parameterInfo, Type[] paramTypes);
    public static bool IsPrimitive(object target);
    private bool RemoteInvoke(Invocation invocation, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    private object DynamicUnwrap();
    public static object Unwrap(object wrapped);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryUnaryOperation(UnaryOperationBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual string ToString();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class RazorEngine.Compilation.RazorPageGeneratorResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <GeneratedCode>k__BackingField;
    public string FilePath { get; public set; }
    public string GeneratedCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_GeneratedCode();
    [CompilerGeneratedAttribute]
public void set_GeneratedCode(string value);
}
public abstract class RazorEngine.Compilation.ReferenceResolver.CompilerReference : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CompilerReferenceType <ReferenceType>k__BackingField;
    public CompilerReferenceType ReferenceType { get; private set; }
    internal CompilerReference(CompilerReferenceType assemblyReference);
    [CompilerGeneratedAttribute]
public CompilerReferenceType get_ReferenceType();
    [CompilerGeneratedAttribute]
private void set_ReferenceType(CompilerReferenceType value);
    public abstract virtual T Visit(ICompilerReferenceVisitor`1<T> visitor);
    public static CompilerReference From(string file);
    public static CompilerReference From(Assembly assembly);
    public static CompilerReference From(Stream stream);
    public static CompilerReference From(Byte[] byteArray);
    internal static Assembly Resolve(string assemblyName, IEnumerable`1<CompilerReference> references);
    public string GetFile(Func`2<string, Exception> exceptionCreator);
    private static bool ByteArrayCompare(Byte[] a1, Byte[] a2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface RazorEngine.Compilation.ReferenceResolver.IReferenceResolver {
    public abstract virtual IEnumerable`1<CompilerReference> GetReferences(TypeContext context, IEnumerable`1<CompilerReference> includeAssemblies);
}
public class RazorEngine.Compilation.ReferenceResolver.UseCurrentAssembliesReferenceResolver : object {
    public sealed virtual IEnumerable`1<CompilerReference> GetReferences(TypeContext context, IEnumerable`1<CompilerReference> includeAssemblies);
}
public class RazorEngine.Compilation.TypeContext : object {
    private Action`1<IEnumerable`1<CompilerReference>> _addReferences;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ModelType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISet`1<string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITemplateSource <TemplateContent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <TemplateType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<IRazorEngineBuilder> <ConfigureCompilerBuilder>k__BackingField;
    public string ClassName { get; private set; }
    public Type ModelType { get; public set; }
    public ISet`1<string> Namespaces { get; private set; }
    public ITemplateSource TemplateContent { get; public set; }
    public Type TemplateType { get; public set; }
    public Action`1<IRazorEngineBuilder> ConfigureCompilerBuilder { get; public set; }
    internal TypeContext(Action`1<IEnumerable`1<CompilerReference>> addReferences);
    internal TypeContext(string className, ISet`1<string> namespaces);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
private void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public Type get_ModelType();
    [CompilerGeneratedAttribute]
public void set_ModelType(Type value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Namespaces();
    [CompilerGeneratedAttribute]
private void set_Namespaces(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public ITemplateSource get_TemplateContent();
    [CompilerGeneratedAttribute]
public void set_TemplateContent(ITemplateSource value);
    [CompilerGeneratedAttribute]
public Type get_TemplateType();
    [CompilerGeneratedAttribute]
public void set_TemplateType(Type value);
    public void AddReferences(IEnumerable`1<CompilerReference> references);
    [CompilerGeneratedAttribute]
public Action`1<IRazorEngineBuilder> get_ConfigureCompilerBuilder();
    [CompilerGeneratedAttribute]
public void set_ConfigureCompilerBuilder(Action`1<IRazorEngineBuilder> value);
}
internal class RazorEngine.Configuration.FluentConfigurationBuilder : object {
    private TemplateServiceConfiguration _config;
    public FluentConfigurationBuilder(TemplateServiceConfiguration config);
    public sealed virtual IConfigurationBuilder ActivateUsing(IActivator activator);
    public sealed virtual IConfigurationBuilder ActivateUsing();
    public sealed virtual IConfigurationBuilder ActivateUsing(Func`2<InstanceContext, ITemplate> activator);
    public IConfigurationBuilder AllowMissingPropertiesOnDynamic();
    public sealed virtual IConfigurationBuilder CompileUsing(ICompilerServiceFactory factory);
    public sealed virtual IConfigurationBuilder CompileUsing();
    public sealed virtual IConfigurationBuilder EncodeUsing(IEncodedStringFactory factory);
    public sealed virtual IConfigurationBuilder EncodeUsing();
    public sealed virtual IConfigurationBuilder IncludeNamespaces(String[] namespaces);
    public sealed virtual IConfigurationBuilder ManageUsing();
    public sealed virtual IConfigurationBuilder ManageUsing(ITemplateManager resolver);
    public sealed virtual IConfigurationBuilder ResolveUsing(Func`2<string, string> resolver);
    public sealed virtual IConfigurationBuilder DisableTempFileLocking();
    public sealed virtual IConfigurationBuilder UseDefaultActivator();
    public sealed virtual IConfigurationBuilder UseDefaultCompilerServiceFactory();
    public sealed virtual IConfigurationBuilder UseDefaultEncodedStringFactory();
    public sealed virtual IConfigurationBuilder WithBaseTemplateType(Type baseTemplateType);
    public sealed virtual IConfigurationBuilder WithCodeLanguage(Language language);
    public sealed virtual IConfigurationBuilder WithEncoding(Encoding encoding);
    public IConfigurationBuilder WithConfigureCompilerBuilderOptions(Action`1<IRazorEngineBuilder> options);
}
public class RazorEngine.Configuration.FluentTemplateServiceConfiguration : object {
    private TemplateServiceConfiguration _innerConfig;
    public IActivator Activator { get; }
    public bool AllowMissingPropertiesOnDynamic { get; }
    public bool DisableTempFileLocking { get; }
    public Type BaseTemplateType { get; }
    public IReferenceResolver ReferenceResolver { get; }
    public ICachingProvider CachingProvider { get; }
    public ICompilerServiceFactory CompilerServiceFactory { get; }
    public bool Debug { get; }
    public IEncodedStringFactory EncodedStringFactory { get; }
    public Language Language { get; }
    public ISet`1<string> Namespaces { get; }
    public ITemplateManager TemplateManager { get; }
    public Action`1<IRazorEngineBuilder> ConfigureCompilerBuilder { get; }
    public FluentTemplateServiceConfiguration(Action`1<IConfigurationBuilder> config);
    public sealed virtual IActivator get_Activator();
    public sealed virtual bool get_AllowMissingPropertiesOnDynamic();
    public sealed virtual bool get_DisableTempFileLocking();
    public sealed virtual Type get_BaseTemplateType();
    public sealed virtual IReferenceResolver get_ReferenceResolver();
    public sealed virtual ICachingProvider get_CachingProvider();
    public sealed virtual ICompilerServiceFactory get_CompilerServiceFactory();
    public sealed virtual bool get_Debug();
    public sealed virtual IEncodedStringFactory get_EncodedStringFactory();
    public sealed virtual Language get_Language();
    public sealed virtual ISet`1<string> get_Namespaces();
    public sealed virtual ITemplateManager get_TemplateManager();
    public sealed virtual Action`1<IRazorEngineBuilder> get_ConfigureCompilerBuilder();
}
public interface RazorEngine.Configuration.IConfigurationBuilder {
    public abstract virtual IConfigurationBuilder ActivateUsing(IActivator activator);
    public abstract virtual IConfigurationBuilder ActivateUsing();
    public abstract virtual IConfigurationBuilder ActivateUsing(Func`2<InstanceContext, ITemplate> activator);
    public abstract virtual IConfigurationBuilder CompileUsing(ICompilerServiceFactory factory);
    public abstract virtual IConfigurationBuilder CompileUsing();
    public abstract virtual IConfigurationBuilder EncodeUsing(IEncodedStringFactory factory);
    public abstract virtual IConfigurationBuilder EncodeUsing();
    public abstract virtual IConfigurationBuilder ManageUsing();
    public abstract virtual IConfigurationBuilder ManageUsing(ITemplateManager manager);
    public abstract virtual IConfigurationBuilder ResolveUsing(Func`2<string, string> resolver);
    public abstract virtual IConfigurationBuilder IncludeNamespaces(String[] namespaces);
    public abstract virtual IConfigurationBuilder DisableTempFileLocking();
    public abstract virtual IConfigurationBuilder UseDefaultActivator();
    public abstract virtual IConfigurationBuilder UseDefaultCompilerServiceFactory();
    public abstract virtual IConfigurationBuilder UseDefaultEncodedStringFactory();
    public abstract virtual IConfigurationBuilder WithBaseTemplateType(Type baseTemplateType);
    public abstract virtual IConfigurationBuilder WithCodeLanguage(Language language);
    public abstract virtual IConfigurationBuilder WithEncoding(Encoding encoding);
}
public interface RazorEngine.Configuration.ITemplateServiceConfiguration {
    public IActivator Activator { get; }
    public bool AllowMissingPropertiesOnDynamic { get; }
    public Type BaseTemplateType { get; }
    public IReferenceResolver ReferenceResolver { get; }
    public ICachingProvider CachingProvider { get; }
    public ICompilerServiceFactory CompilerServiceFactory { get; }
    public bool Debug { get; }
    public bool DisableTempFileLocking { get; }
    public IEncodedStringFactory EncodedStringFactory { get; }
    public Language Language { get; }
    public ISet`1<string> Namespaces { get; }
    public ITemplateManager TemplateManager { get; }
    public Action`1<IRazorEngineBuilder> ConfigureCompilerBuilder { get; }
    public abstract virtual IActivator get_Activator();
    public abstract virtual bool get_AllowMissingPropertiesOnDynamic();
    public abstract virtual Type get_BaseTemplateType();
    public abstract virtual IReferenceResolver get_ReferenceResolver();
    public abstract virtual ICachingProvider get_CachingProvider();
    public abstract virtual ICompilerServiceFactory get_CompilerServiceFactory();
    public abstract virtual bool get_Debug();
    public abstract virtual bool get_DisableTempFileLocking();
    public abstract virtual IEncodedStringFactory get_EncodedStringFactory();
    public abstract virtual Language get_Language();
    public abstract virtual ISet`1<string> get_Namespaces();
    public abstract virtual ITemplateManager get_TemplateManager();
    public abstract virtual Action`1<IRazorEngineBuilder> get_ConfigureCompilerBuilder();
}
public class RazorEngine.Configuration.ReadOnlyTemplateServiceConfiguration : object {
    private IActivator _activator;
    private bool _allowMissingPropertiesOnDynamic;
    private Type _baseTemplateType;
    private ICachingProvider _cachingProvider;
    private ICompilerServiceFactory _compilerServiceFactory;
    private bool _debug;
    private bool _disableTempFileLocking;
    private IEncodedStringFactory _encodedStringFactory;
    private Language _language;
    private ISet`1<string> _namespaces;
    private IReferenceResolver _referenceResolver;
    private ITemplateManager _templateManager;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<IRazorEngineBuilder> <ConfigureCompilerBuilder>k__BackingField;
    public IActivator Activator { get; }
    public bool AllowMissingPropertiesOnDynamic { get; }
    public Type BaseTemplateType { get; }
    public ICachingProvider CachingProvider { get; }
    public ICompilerServiceFactory CompilerServiceFactory { get; }
    public bool Debug { get; }
    public bool DisableTempFileLocking { get; }
    public IEncodedStringFactory EncodedStringFactory { get; }
    public Language Language { get; }
    public ISet`1<string> Namespaces { get; }
    public IReferenceResolver ReferenceResolver { get; }
    public ITemplateManager TemplateManager { get; }
    public Action`1<IRazorEngineBuilder> ConfigureCompilerBuilder { get; }
    public ReadOnlyTemplateServiceConfiguration(ITemplateServiceConfiguration config);
    public sealed virtual IActivator get_Activator();
    public sealed virtual bool get_AllowMissingPropertiesOnDynamic();
    public sealed virtual Type get_BaseTemplateType();
    public sealed virtual ICachingProvider get_CachingProvider();
    public sealed virtual ICompilerServiceFactory get_CompilerServiceFactory();
    public sealed virtual bool get_Debug();
    public sealed virtual bool get_DisableTempFileLocking();
    public sealed virtual IEncodedStringFactory get_EncodedStringFactory();
    public sealed virtual Language get_Language();
    public sealed virtual ISet`1<string> get_Namespaces();
    public sealed virtual IReferenceResolver get_ReferenceResolver();
    public sealed virtual ITemplateManager get_TemplateManager();
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IRazorEngineBuilder> get_ConfigureCompilerBuilder();
}
public class RazorEngine.Configuration.TemplateServiceConfiguration : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IActivator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowMissingPropertiesOnDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableTempFileLocking>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <BaseTemplateType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IReferenceResolver <ReferenceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICachingProvider <CachingProvider>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICompilerServiceFactory <CompilerServiceFactory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEncodedStringFactory <EncodedStringFactory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Language <Language>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISet`1<string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITemplateManager <TemplateManager>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<IRazorEngineBuilder> <ConfigureCompilerBuilder>k__BackingField;
    public IActivator Activator { get; public set; }
    public bool AllowMissingPropertiesOnDynamic { get; public set; }
    public bool DisableTempFileLocking { get; public set; }
    public Type BaseTemplateType { get; public set; }
    public IReferenceResolver ReferenceResolver { get; public set; }
    public ICachingProvider CachingProvider { get; public set; }
    public ICompilerServiceFactory CompilerServiceFactory { get; public set; }
    public bool Debug { get; public set; }
    public IEncodedStringFactory EncodedStringFactory { get; public set; }
    public Language Language { get; public set; }
    public ISet`1<string> Namespaces { get; public set; }
    public ITemplateManager TemplateManager { get; public set; }
    public Action`1<IRazorEngineBuilder> ConfigureCompilerBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IActivator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(IActivator value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowMissingPropertiesOnDynamic();
    [CompilerGeneratedAttribute]
public void set_AllowMissingPropertiesOnDynamic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableTempFileLocking();
    [CompilerGeneratedAttribute]
public void set_DisableTempFileLocking(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_BaseTemplateType();
    [CompilerGeneratedAttribute]
public void set_BaseTemplateType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual IReferenceResolver get_ReferenceResolver();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public sealed virtual ICachingProvider get_CachingProvider();
    [CompilerGeneratedAttribute]
public void set_CachingProvider(ICachingProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual ICompilerServiceFactory get_CompilerServiceFactory();
    [CompilerGeneratedAttribute]
public void set_CompilerServiceFactory(ICompilerServiceFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEncodedStringFactory get_EncodedStringFactory();
    [CompilerGeneratedAttribute]
public void set_EncodedStringFactory(IEncodedStringFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual Language get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Language value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Namespaces();
    [CompilerGeneratedAttribute]
public void set_Namespaces(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITemplateManager get_TemplateManager();
    [CompilerGeneratedAttribute]
public void set_TemplateManager(ITemplateManager value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IRazorEngineBuilder> get_ConfigureCompilerBuilder();
    [CompilerGeneratedAttribute]
public void set_ConfigureCompilerBuilder(Action`1<IRazorEngineBuilder> value);
}
public enum RazorEngine.Encoding : Enum {
    public int value__;
    public static Encoding Html;
    public static Encoding Raw;
}
public static class RazorEngine.Engine : object {
    private static object _syncLock;
    private static IRazorEngineService _service;
    public static IRazorEngineService Razor { get; public set; }
    private static Engine();
    public static IRazorEngineService get_Razor();
    public static void set_Razor(IRazorEngineService value);
}
public enum RazorEngine.Language : Enum {
    public int value__;
    public static Language CSharp;
    public static Language VisualBasic;
}
[DebuggerDisplayAttribute("({Position})"{Value}"")]
public class RazorEngine.PositionTagged`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    public int Position { get; private set; }
    public T Value { get; private set; }
    public PositionTagged`1(T value, int offset);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static T op_Implicit(PositionTagged`1<T> value);
    public static PositionTagged`1<T> op_Implicit(Tuple`2<T, int> value);
    public static bool op_Equality(PositionTagged`1<T> left, PositionTagged`1<T> right);
    public static bool op_Inequality(PositionTagged`1<T> left, PositionTagged`1<T> right);
}
[SecurityCriticalAttribute]
public class RazorEngine.Roslyn.CSharp.CSharpRoslynCompilerService : RoslynCompilerServiceBase {
    public string SourceFileExtension { get; }
    [SecurityCriticalAttribute]
public CSharpRoslynCompilerService(bool strictMode);
    [SecuritySafeCriticalAttribute]
public virtual string get_SourceFileExtension();
    [SecuritySafeCriticalAttribute]
public virtual string BuildTypeName(Type templateType, Type modelType);
    [SecurityCriticalAttribute]
public virtual SyntaxTree GetSyntaxTree(string sourceCode, string sourceCodePath);
    [SecurityCriticalAttribute]
public virtual Compilation GetEmptyCompilation(string assemblyName);
    [SecurityCriticalAttribute]
public virtual CompilationOptions CreateOptions(TypeContext context);
    [SecuritySafeCriticalAttribute]
public virtual IEnumerable`1<CompilerReference> IncludeReferences();
}
[SecurityCriticalAttribute]
public abstract class RazorEngine.Roslyn.CSharp.RoslynCompilerServiceBase : CompilerServiceBase {
    public abstract virtual Compilation GetEmptyCompilation(string assemblyName);
    public abstract virtual SyntaxTree GetSyntaxTree(string sourceCode, string sourceCodeFile);
    public abstract virtual CompilationOptions CreateOptions(TypeContext context);
    private static bool IsMono();
    [SecurityCriticalAttribute]
public virtual Tuple`2<Type, CompilationData> CompileType(TypeContext context);
    [SecurityCriticalAttribute]
private MetadataReference[] GetMetadataReferences(IEnumerable`1<CompilerReference> references);
}
public class RazorEngine.Roslyn.RoslynCompilerServiceFactory : object {
    [SecuritySafeCriticalAttribute]
public sealed virtual ICompilerService CreateCompilerService(Language language);
}
internal class RazorEngine.TaskRunner : object {
    public static Task`1<T> Run(Func`1<T> t);
    public static Task Run(Action t);
}
public abstract class RazorEngine.Templating.BaseTemplateKey : object {
    private string _name;
    private ResolveType _resolveType;
    private ITemplateKey _context;
    public string Name { get; }
    public ResolveType TemplateType { get; }
    public ITemplateKey Context { get; }
    public BaseTemplateKey(string name, ResolveType resolveType, ITemplateKey context);
    public sealed virtual string get_Name();
    public sealed virtual ResolveType get_TemplateType();
    public sealed virtual ITemplateKey get_Context();
    public abstract virtual string GetUniqueKeyString();
}
internal class RazorEngine.Templating.CompiledTemplate : object {
    private CompilationData _tempFiles;
    private ITemplateSource _source;
    private ITemplateKey _key;
    private Type _templateType;
    private Type _modelType;
    public CompilationData CompilationData { get; }
    public ITemplateKey Key { get; }
    public ITemplateSource Template { get; }
    public Type TemplateType { get; }
    public Assembly TemplateAssembly { get; }
    public Type ModelType { get; }
    public CompiledTemplate(CompilationData tempFiles, ITemplateKey key, ITemplateSource source, Type templateType, Type modelType);
    public sealed virtual CompilationData get_CompilationData();
    public sealed virtual ITemplateKey get_Key();
    public sealed virtual ITemplateSource get_Template();
    public sealed virtual Type get_TemplateType();
    public sealed virtual Assembly get_TemplateAssembly();
    public sealed virtual Type get_ModelType();
}
internal class RazorEngine.Templating.DefaultActivator : object {
    public sealed virtual ITemplate CreateInstance(InstanceContext context);
}
public class RazorEngine.Templating.DefaultCachingProvider : object {
    private InvalidatingCachingProvider inner;
    public TypeLoader TypeLoader { get; }
    public DefaultCachingProvider(Action`1<string> registerForCleanup);
    public sealed virtual TypeLoader get_TypeLoader();
    public static Type GetModelTypeKey(Type modelType);
    public sealed virtual void CacheTemplate(ICompiledTemplate template, ITemplateKey templateKey);
    public sealed virtual bool TryRetrieveTemplate(ITemplateKey templateKey, Type modelType, ICompiledTemplate& compiledTemplate);
    public sealed virtual void Dispose();
}
internal class RazorEngine.Templating.DelegateActivator : object {
    private Func`2<InstanceContext, ITemplate> _activator;
    internal Func`2<InstanceContext, ITemplate> Activator { get; }
    public DelegateActivator(Func`2<InstanceContext, ITemplate> activator);
    internal Func`2<InstanceContext, ITemplate> get_Activator();
    public sealed virtual ITemplate CreateInstance(InstanceContext context);
}
internal class RazorEngine.Templating.DelegateAppDomainFactory : object {
    private Func`1<AppDomain> _factory;
    public DelegateAppDomainFactory(Func`1<AppDomain> factory);
    public sealed virtual AppDomain CreateAppDomain();
}
public class RazorEngine.Templating.DelegateTemplateManager : object {
    private Func`2<string, string> _resolver;
    private ConcurrentDictionary`2<ITemplateKey, ITemplateSource> _dynamicTemplates;
    public DelegateTemplateManager(Func`2<string, string> resolver);
    public sealed virtual ITemplateSource Resolve(ITemplateKey key);
    public sealed virtual void AddDynamic(ITemplateKey key, ITemplateSource source);
    public void RemoveDynamic(ITemplateKey key);
    public sealed virtual ITemplateKey GetKey(string name, ResolveType templateType, ITemplateKey context);
}
public class RazorEngine.Templating.DynamicViewBag : DynamicObject {
    private IDictionary`2<string, object> _dict;
    public DynamicViewBag(IDictionary`2<string, object> dictionary);
    public DynamicViewBag(DynamicViewBag viewbag);
    [ObsoleteAttribute("Use the generic AddDictionary overload instead")]
public void AddDictionaryValues(IDictionary valueDictionary);
    public void AddDictionary(IDictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use the generic AddDictionary overload instead")]
public void AddDictionaryValuesEx(IDictionary`2<string, object> valueDictionary);
    [ObsoleteAttribute("Use the generic AddDictionary or AddValue overload instead")]
public void AddListValues(IList valueList, string keyPropertyName);
    public void AddValue(string propertyName, object value);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
}
internal class RazorEngine.Templating.DynamicWrapperService : object {
    private IRazorEngineService _origin;
    private bool _mustSerialize;
    private bool _allowMissingPropertiesOnDynamic;
    internal IRazorEngineService Origin { get; }
    public DynamicWrapperService(IRazorEngineService origin, bool mustSerialize, bool allowMissingPropertiesOnDynamic);
    internal IRazorEngineService get_Origin();
    public sealed virtual ITemplateKey GetKey(string name, ResolveType resolveType, ITemplateKey context);
    public sealed virtual void AddTemplate(ITemplateKey key, ITemplateSource templateSource);
    internal static void CheckModelType(Type modelType);
    internal static object GetDynamicModel(Type modelType, object original, bool allowMissing);
    public sealed virtual bool IsTemplateCached(ITemplateKey key, Type modelType);
    public sealed virtual void Compile(ITemplateKey key, Type modelType);
    public sealed virtual void RunCompile(ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    public sealed virtual void Run(ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    public sealed virtual void Dispose();
}
public class RazorEngine.Templating.EmbeddedResourceTemplateManager : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <RootType>k__BackingField;
    public Type RootType { get; }
    public EmbeddedResourceTemplateManager(Type rootType);
    [CompilerGeneratedAttribute]
public Type get_RootType();
    public sealed virtual ITemplateSource Resolve(ITemplateKey key);
    public sealed virtual ITemplateKey GetKey(string name, ResolveType resolveType, ITemplateKey context);
    public sealed virtual void AddDynamic(ITemplateKey key, ITemplateSource source);
}
public class RazorEngine.Templating.ExecuteContext : object {
    private Stack`1<ISet`1<string>> _currentSectionStack;
    private ISet`1<string> _currentSections;
    private IDictionary`2<string, Stack`1<Action`1<TextWriter>>> _definedSections;
    private Stack`1<TemplateWriter> _bodyWriters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TextWriter <CurrentWriter>k__BackingField;
    internal TextWriter CurrentWriter { get; internal set; }
    [ObsoleteAttribute("RUNTIME FAILURE: This kind of usage is no longer supported.")]
public ExecuteContext(DynamicViewBag viewbag);
    [CompilerGeneratedAttribute]
internal TextWriter get_CurrentWriter();
    [CompilerGeneratedAttribute]
internal void set_CurrentWriter(TextWriter value);
    public void DefineSection(string name, Action`1<TextWriter> action);
    public Action`1<TextWriter> GetSectionDelegate(string name);
    internal void PopSections(Action`1<TextWriter> inner, TextWriter innerArg);
    internal void PushSections();
    internal TemplateWriter PopBody();
    internal void PushBody(TemplateWriter bodyWriter);
}
public class RazorEngine.Templating.FullPathTemplateKey : BaseTemplateKey {
    private string fullPath;
    private static bool isUnix;
    public string FullPath { get; }
    public FullPathTemplateKey(string name, string fullPath, ResolveType resolveType, ITemplateKey context);
    private static FullPathTemplateKey();
    private static string NormalizePath(string p);
    public string get_FullPath();
    public virtual string GetUniqueKeyString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class RazorEngine.Templating.FullPathWithModifiedTimeTemplateKey : FullPathTemplateKey {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <ModifiedTime>k__BackingField;
    public DateTime ModifiedTime { get; public set; }
    public FullPathWithModifiedTimeTemplateKey(string name, string fullPath, DateTime modifiedTime, ResolveType resolveType, ITemplateKey context);
    [CompilerGeneratedAttribute]
public DateTime get_ModifiedTime();
    [CompilerGeneratedAttribute]
public void set_ModifiedTime(DateTime value);
}
public class RazorEngine.Templating.HtmlTemplateBase`1 : TemplateBase`1<T> {
}
public interface RazorEngine.Templating.IActivator {
    public abstract virtual ITemplate CreateInstance(InstanceContext context);
}
public interface RazorEngine.Templating.IAppDomainFactory {
    public abstract virtual AppDomain CreateAppDomain();
}
public interface RazorEngine.Templating.ICachingProvider {
    public TypeLoader TypeLoader { get; }
    public abstract virtual void CacheTemplate(ICompiledTemplate template, ITemplateKey key);
    public abstract virtual bool TryRetrieveTemplate(ITemplateKey key, Type modelType, ICompiledTemplate& template);
    public abstract virtual TypeLoader get_TypeLoader();
}
public interface RazorEngine.Templating.ICompiledTemplate {
    public ITemplateKey Key { get; }
    public ITemplateSource Template { get; }
    public CompilationData CompilationData { get; }
    public Type TemplateType { get; }
    public Assembly TemplateAssembly { get; }
    public Type ModelType { get; }
    public abstract virtual ITemplateKey get_Key();
    public abstract virtual ITemplateSource get_Template();
    public abstract virtual CompilationData get_CompilationData();
    public abstract virtual Type get_TemplateType();
    public abstract virtual Assembly get_TemplateAssembly();
    public abstract virtual Type get_ModelType();
}
public interface RazorEngine.Templating.IInternalTemplateService {
    public ITemplateServiceConfiguration Configuration { get; }
    public IEncodedStringFactory EncodedStringFactory { get; }
    public abstract virtual ITemplateServiceConfiguration get_Configuration();
    public abstract virtual IEncodedStringFactory get_EncodedStringFactory();
    public abstract virtual ITemplate Resolve(string name, object model, Type modelType, DynamicViewBag viewbag, ResolveType resolveType);
    public abstract virtual void AddNamespace(string ns);
    public abstract virtual ExecuteContext CreateExecuteContext();
}
public class RazorEngine.Templating.InstanceContext : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TypeLoader <Loader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <TemplateType>k__BackingField;
    public TypeLoader Loader { get; private set; }
    public Type TemplateType { get; private set; }
    internal InstanceContext(TypeLoader loader, Type templateType);
    [CompilerGeneratedAttribute]
public TypeLoader get_Loader();
    [CompilerGeneratedAttribute]
private void set_Loader(TypeLoader value);
    [CompilerGeneratedAttribute]
public Type get_TemplateType();
    [CompilerGeneratedAttribute]
private void set_TemplateType(Type value);
}
internal class RazorEngine.Templating.InternalTemplateService : object {
    private RazorEngineCore _service;
    private ITemplateKey _template;
    public ITemplateServiceConfiguration Configuration { get; }
    public IEncodedStringFactory EncodedStringFactory { get; }
    public InternalTemplateService(RazorEngineCore service, ITemplateKey template);
    public sealed virtual ITemplateServiceConfiguration get_Configuration();
    public sealed virtual IEncodedStringFactory get_EncodedStringFactory();
    public sealed virtual ITemplate Resolve(string name, object model, Type modelType, DynamicViewBag viewbag, ResolveType resolveType);
    public sealed virtual void AddNamespace(string ns);
    public sealed virtual ExecuteContext CreateExecuteContext();
}
public class RazorEngine.Templating.InvalidatingByModifiedTimeCachingProvider : InvalidatingCachingProvider {
    public InvalidatingByModifiedTimeCachingProvider(Action`1<string> registerForCleanup);
    public sealed virtual bool TryRetrieveTemplate(ITemplateKey templateKey, Type modelType, ICompiledTemplate& compiledTemplate);
    private bool KeysHaveEqualModifiedTime(ITemplateKey key1, ITemplateKey key2);
}
public class RazorEngine.Templating.InvalidatingCachingProvider : object {
    private ConcurrentDictionary`2<string, ConcurrentDictionary`2<Type, ICompiledTemplate>> _cache;
    private TypeLoader _loader;
    private Action`1<string> _registerForCleanup;
    private ConcurrentBag`1<Assembly> _assemblies;
    public TypeLoader TypeLoader { get; }
    public InvalidatingCachingProvider(Action`1<string> registerForCleanup);
    public sealed virtual TypeLoader get_TypeLoader();
    public static Type GetModelTypeKey(Type modelType);
    private void CacheTemplateHelper(ICompiledTemplate template, ITemplateKey templateKey, Type modelTypeKey);
    public sealed virtual void CacheTemplate(ICompiledTemplate template, ITemplateKey templateKey);
    public void InvalidateCacheOfType(ITemplateKey templateKey, Type modelType);
    public void InvalidateCache(ITemplateKey templateKey);
    public void InvalidateAll();
    public sealed virtual bool TryRetrieveTemplate(ITemplateKey templateKey, Type modelType, ICompiledTemplate& compiledTemplate);
    public sealed virtual void Dispose();
}
public interface RazorEngine.Templating.IRazorEngineService {
    public abstract virtual ITemplateKey GetKey(string name, ResolveType resolveType, ITemplateKey context);
    public abstract virtual bool IsTemplateCached(ITemplateKey key, Type modelType);
    public abstract virtual void AddTemplate(ITemplateKey key, ITemplateSource templateSource);
    public abstract virtual void Compile(ITemplateKey key, Type modelType);
    public abstract virtual void RunCompile(ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    public abstract virtual void Run(ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
}
public interface RazorEngine.Templating.ITemplate {
    unknown IInternalTemplateService InternalTemplateService {public set; }
    unknown IRazorEngineService Razor {public set; }
    public abstract virtual void set_InternalTemplateService(IInternalTemplateService value);
    public abstract virtual void set_Razor(IRazorEngineService value);
    public abstract virtual void SetData(object model, DynamicViewBag viewbag);
    public abstract virtual Task ExecuteAsync();
    public abstract virtual Task Run(ExecuteContext context, TextWriter writer);
    public abstract virtual void Write(object value);
    public abstract virtual void WriteLiteral(string literal);
}
public interface RazorEngine.Templating.ITemplate`1 {
    public T Model { get; public set; }
    public abstract virtual T get_Model();
    public abstract virtual void set_Model(T value);
}
public interface RazorEngine.Templating.ITemplateKey {
    public string Name { get; }
    public ResolveType TemplateType { get; }
    public ITemplateKey Context { get; }
    public abstract virtual string get_Name();
    public abstract virtual ResolveType get_TemplateType();
    public abstract virtual ITemplateKey get_Context();
    public abstract virtual string GetUniqueKeyString();
}
public interface RazorEngine.Templating.ITemplateManager {
    public abstract virtual ITemplateSource Resolve(ITemplateKey key);
    public abstract virtual ITemplateKey GetKey(string name, ResolveType resolveType, ITemplateKey context);
    public abstract virtual void AddDynamic(ITemplateKey key, ITemplateSource source);
}
public interface RazorEngine.Templating.ITemplateRunner`1 {
    public abstract virtual void Run(TModel model, TextWriter textWriter, DynamicViewBag viewBag);
}
public interface RazorEngine.Templating.ITemplateSource {
    public string TemplateFile { get; }
    public string Template { get; }
    public abstract virtual string get_TemplateFile();
    public abstract virtual string get_Template();
    public abstract virtual TextReader GetTemplateReader();
}
public class RazorEngine.Templating.LoadedTemplateSource : object {
    private string _template;
    private string _templateFile;
    public string Template { get; }
    public string TemplateFile { get; }
    public LoadedTemplateSource(string template, string templateFile);
    public sealed virtual string get_Template();
    public sealed virtual string get_TemplateFile();
    public sealed virtual TextReader GetTemplateReader();
}
public class RazorEngine.Templating.NameOnlyTemplateKey : BaseTemplateKey {
    public NameOnlyTemplateKey(string name, ResolveType resolveType, ITemplateKey context);
    public virtual string GetUniqueKeyString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class RazorEngine.Templating.RazorEngineCompilerError : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ErrorNumber>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsWarning>k__BackingField;
    public string ErrorText { get; private set; }
    public string FileName { get; private set; }
    public int Line { get; private set; }
    public int Column { get; private set; }
    public string ErrorNumber { get; private set; }
    public bool IsWarning { get; private set; }
    public RazorEngineCompilerError(string errorText, string fileName, int line, int column, string errorNumber, bool isWarning);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
private void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorNumber(string value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
private void set_IsWarning(bool value);
}
internal class RazorEngine.Templating.RazorEngineCore : object {
    private ReadOnlyTemplateServiceConfiguration _config;
    private RazorEngineService _cached;
    private bool _disposed;
    private ReferencesListForDynamicAssemblyResolution _references;
    public ITemplateServiceConfiguration Configuration { get; }
    [SecuritySafeCriticalAttribute]
internal RazorEngineCore(ReadOnlyTemplateServiceConfiguration config, RazorEngineService cached);
    private Assembly AssemblyResolve(object sender, ResolveEventArgs args);
    public virtual ExecuteContext CreateExecuteContext();
    public ITemplateServiceConfiguration get_Configuration();
    public ICompiledTemplate Compile(ITemplateKey key, Type modelType);
    internal virtual ITemplate CreateTemplate(ICompiledTemplate template, object model, DynamicViewBag viewbag);
    [SecuritySafeCriticalAttribute]
public virtual Tuple`2<Type, CompilationData> CreateTemplateType(ITemplateSource razorTemplate, Type modelType);
    [AsyncStateMachineAttribute("RazorEngine.Templating.RazorEngineCore/<RunTemplate>d__12")]
[DebuggerStepThroughAttribute]
public Task RunTemplate(ICompiledTemplate template, TextWriter writer, object model, DynamicViewBag viewBag);
    protected internal virtual InstanceContext CreateInstanceContext(Type templateType);
    public ITemplateKey GetKey(string cacheName, ResolveType resolveType, ITemplateKey context);
    internal virtual ITemplate ResolveInternal(string cacheName, object model, Type modelType, DynamicViewBag viewBag, ResolveType resolveType, ITemplateKey context);
    internal ITemplateSource Resolve(ITemplateKey key);
    public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
}
internal class RazorEngine.Templating.RazorEngineCoreWithCache : RazorEngineCore {
    internal RazorEngineCoreWithCache(ReadOnlyTemplateServiceConfiguration config, RazorEngineService cached);
    internal virtual ITemplate ResolveInternal(string cacheName, object model, Type modelType, DynamicViewBag viewbag, ResolveType resolveType, ITemplateKey context);
}
public class RazorEngine.Templating.RazorEngineService : object {
    private ITemplateServiceConfiguration _config;
    private RazorEngineCore _core_with_cache;
    private bool disposed;
    internal RazorEngineCore Core { get; }
    internal ITemplateServiceConfiguration Configuration { get; }
    internal RazorEngineService(ITemplateServiceConfiguration config);
    internal RazorEngineService(Language language, Encoding encoding);
    public static IRazorEngineService Create();
    public static IRazorEngineService Create(ITemplateServiceConfiguration config);
    internal RazorEngineCore get_Core();
    internal ITemplateServiceConfiguration get_Configuration();
    public sealed virtual bool IsTemplateCached(ITemplateKey key, Type modelType);
    public sealed virtual void AddTemplate(ITemplateKey key, ITemplateSource templateSource);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    internal static IEncodedStringFactory GetEncodedStringFactory(Encoding encoding);
    internal ICompiledTemplate CompileAndCacheInternal(ITemplateKey key, Type modelType);
    public sealed virtual void Compile(ITemplateKey key, Type modelType);
    internal ICompiledTemplate GetCompiledTemplate(ITemplateKey key, Type modelType, bool compileOnCacheMiss);
    public sealed virtual void RunCompile(ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    public sealed virtual void Run(ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    internal ITemplate GetTemplate(ITemplateKey key, Type modelType, object model, DynamicViewBag viewbag);
    public sealed virtual ITemplateKey GetKey(string cacheName, ResolveType resolveType, ITemplateKey context);
}
[ExtensionAttribute]
public static class RazorEngine.Templating.RazorEngineServiceExtensions : object {
    [ExtensionAttribute]
public static bool IsTemplateCached(IRazorEngineService service, string name, Type modelType);
    [ExtensionAttribute]
public static void AddTemplate(IRazorEngineService service, string name, ITemplateSource templateSource);
    [ExtensionAttribute]
public static void AddTemplate(IRazorEngineService service, ITemplateKey key, string templateSource);
    [ExtensionAttribute]
public static void AddTemplate(IRazorEngineService service, string name, string templateSource);
    [ExtensionAttribute]
public static void Compile(IRazorEngineService service, string name, Type modelType);
    [ExtensionAttribute]
public static void Compile(IRazorEngineService service, ITemplateSource templateSource, ITemplateKey key, Type modelType);
    [ExtensionAttribute]
public static void Compile(IRazorEngineService service, string templateSource, ITemplateKey key, Type modelType);
    [ExtensionAttribute]
public static void Compile(IRazorEngineService service, ITemplateSource templateSource, string name, Type modelType);
    [ExtensionAttribute]
public static void Compile(IRazorEngineService service, string templateSource, string name, Type modelType);
    [ExtensionAttribute]
public static void RunCompile(IRazorEngineService service, string name, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static void RunCompile(IRazorEngineService service, ITemplateSource templateSource, ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static void RunCompile(IRazorEngineService service, string templateSource, ITemplateKey key, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static void RunCompile(IRazorEngineService service, ITemplateSource templateSource, string name, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static void RunCompile(IRazorEngineService service, string templateSource, string name, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    private static string WithWriter(Action`1<TextWriter> withWriter);
    [ExtensionAttribute]
public static string RunCompile(IRazorEngineService service, ITemplateKey key, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static string RunCompile(IRazorEngineService service, string name, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static string RunCompile(IRazorEngineService service, ITemplateSource templateSource, ITemplateKey key, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static string RunCompile(IRazorEngineService service, string templateSource, ITemplateKey key, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static string RunCompile(IRazorEngineService service, ITemplateSource templateSource, string name, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static string RunCompile(IRazorEngineService service, string templateSource, string name, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static void Run(IRazorEngineService service, string name, TextWriter writer, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static string Run(IRazorEngineService service, ITemplateKey key, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static string Run(IRazorEngineService service, string name, Type modelType, object model, DynamicViewBag viewBag);
    [ExtensionAttribute]
public static ITemplateRunner`1<TModel> CompileRunner(IRazorEngineService service, string templateSource);
    [ExtensionAttribute]
public static ITemplateRunner`1<TModel> CompileRunner(IRazorEngineService service, string templateSource, string name);
}
internal class RazorEngine.Templating.ReferencesListForDynamicAssemblyResolution : object {
    private HashSet`1<CompilerReference> _references;
    private ReaderWriterLockSlim _lock;
    public void AddReferences(IEnumerable`1<CompilerReference> refs);
    public IEnumerable`1<CompilerReference> GetCurrentReferences();
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("4")]
public class RazorEngine.Templating.RequireNamespacesAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<string> <Namespaces>k__BackingField;
    public IEnumerable`1<string> Namespaces { get; private set; }
    public RequireNamespacesAttribute(String[] namespaces);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Namespaces();
    [CompilerGeneratedAttribute]
private void set_Namespaces(IEnumerable`1<string> value);
}
public class RazorEngine.Templating.ResolvePathCheckModifiedTimeTemplateManager : ResolvePathTemplateManager {
    public ResolvePathCheckModifiedTimeTemplateManager(IEnumerable`1<string> layoutRoots);
    public sealed virtual ITemplateKey GetKey(string name, ResolveType resolveType, ITemplateKey context);
}
public class RazorEngine.Templating.ResolvePathTemplateManager : object {
    private ReadOnlyCollection`1<string> layoutRoots;
    public ResolvePathTemplateManager(IEnumerable`1<string> layoutRoots);
    internal ResolvePathTemplateManager(ReadOnlyCollection`1<string> list);
    public sealed virtual ITemplateSource Resolve(ITemplateKey key);
    public sealed virtual ITemplateKey GetKey(string name, ResolveType resolveType, ITemplateKey context);
    protected string ResolveFilePath(string name);
    public sealed virtual void AddDynamic(ITemplateKey key, ITemplateSource source);
}
public enum RazorEngine.Templating.ResolveType : Enum {
    public int value__;
    public static ResolveType Global;
    public static ResolveType Include;
    public static ResolveType Layout;
}
public abstract class RazorEngine.Templating.TemplateBase : object {
    private bool modelInit;
    [DynamicAttribute]
private object viewBag;
    private AttributeInfo _attributeInfo;
    protected ExecuteContext _context;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IInternalTemplateService <InternalTemplateService>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IRazorEngineService <Razor>k__BackingField;
    public string Layout { get; public set; }
    internal Type ModelType { get; }
    internal IInternalTemplateService InternalTemplateService { get; public set; }
    public IRazorEngineService Razor { get; public set; }
    [DynamicAttribute]
public object ViewBag { get; }
    public TextWriter CurrentWriter { get; }
    [CompilerGeneratedAttribute]
public string get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(string value);
    internal virtual Type get_ModelType();
    [CompilerGeneratedAttribute]
internal IInternalTemplateService get_InternalTemplateService();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InternalTemplateService(IInternalTemplateService value);
    [CompilerGeneratedAttribute]
public IRazorEngineService get_Razor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Razor(IRazorEngineService value);
    public object get_ViewBag();
    public TextWriter get_CurrentWriter();
    public virtual void SetData(object model, DynamicViewBag viewbag);
    public virtual void SetModel(object model);
    public void DefineSection(string name, Action`1<TextWriter> action);
    public virtual TemplateWriter Include(string name, object model, Type modelType);
    public virtual bool IsSectionDefined(string name);
    public virtual Task ExecuteAsync();
    public IEncodedString Raw(string rawString);
    protected virtual ITemplate ResolveLayout(string name);
    private static void StreamToTextWriter(MemoryStream memory, TextWriter writer);
    [AsyncStateMachineAttribute("RazorEngine.Templating.TemplateBase/<Run>d__32")]
[DebuggerStepThroughAttribute]
public sealed virtual Task Run(ExecuteContext context, TextWriter reader);
    public virtual TemplateWriter RenderSection(string name, bool required);
    public TemplateWriter RenderBody();
    public virtual void Write(object value);
    public virtual void Write(TemplateWriter helper);
    public virtual void BeginWriteAttribute(string name, string prefix, int prefixOffset, string suffix, int suffixOffset, int attributeValuesCount);
    public virtual void BeginWriteAttributeTo(TextWriter writer, string name, string prefix, int prefixOffset, string suffix, int suffixOffset, int attributeValuesCount);
    public void WriteAttributeValue(string prefix, int prefixOffset, object value, int valueOffset, int valueLength, bool isLiteral);
    public void WriteAttributeValueTo(TextWriter writer, string prefix, int prefixOffset, object value, int valueOffset, int valueLength, bool isLiteral);
    public virtual void EndWriteAttribute();
    public virtual void EndWriteAttributeTo(TextWriter writer);
    private void WritePositionTaggedLiteral(TextWriter writer, string value, int position);
    private void WriteUnprefixedAttributeValueTo(TextWriter writer, object value, bool isLiteral);
    private bool IsBoolFalseOrNullValue(string prefix, object value);
    private bool IsBoolTrueWithEmptyPrefixValue(string prefix, object value);
    public virtual void WriteLiteral(string literal);
    public virtual void WriteLiteral(object literal);
    public virtual void WriteLiteralTo(TextWriter writer, string literal);
    public virtual void WriteLiteralTo(TextWriter writer, object literal);
    private void WritePositionTaggedLiteral(TextWriter writer, PositionTagged`1<string> value);
    public virtual void WriteTo(TextWriter writer, object value);
    public virtual void WriteTo(TextWriter writer, string value);
    public virtual void WriteTo(TextWriter writer, TemplateWriter helper);
}
public class RazorEngine.Templating.TemplateBase`1 : TemplateBase {
    private object currentModel;
    private bool _needReplaceNullModel;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasDynamicModel>k__BackingField;
    protected bool HasDynamicModel { get; private set; }
    internal Type ModelType { get; }
    public T Model { get; public set; }
    [CompilerGeneratedAttribute]
protected bool get_HasDynamicModel();
    [CompilerGeneratedAttribute]
private void set_HasDynamicModel(bool value);
    internal virtual Type get_ModelType();
    public sealed virtual T get_Model();
    public sealed virtual void set_Model(T value);
    public virtual void SetModel(object model);
    public virtual TemplateWriter Include(string name, object model, Type modelType);
    public virtual TemplateWriter Include(string name, object model);
    public virtual TemplateWriter Include(string name);
    protected virtual ITemplate ResolveLayout(string name);
}
public class RazorEngine.Templating.TemplateCompilationException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ReadOnlyCollection`1<RazorEngineCompilerError> <CompilerErrors>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CompilationData <CompilationData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Template>k__BackingField;
    public ReadOnlyCollection`1<RazorEngineCompilerError> CompilerErrors { get; private set; }
    public CompilationData CompilationData { get; private set; }
    public string SourceCode { get; }
    public string Template { get; private set; }
    public TemplateCompilationException(IEnumerable`1<RazorEngineCompilerError> errors, CompilationData files, ITemplateSource template);
    protected TemplateCompilationException(SerializationInfo info, StreamingContext context);
    internal static string Separate(string rawLines);
    internal static string GetMessage(IEnumerable`1<RazorEngineCompilerError> errors, CompilationData files, ITemplateSource template);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<RazorEngineCompilerError> get_CompilerErrors();
    [CompilerGeneratedAttribute]
private void set_CompilerErrors(ReadOnlyCollection`1<RazorEngineCompilerError> value);
    [CompilerGeneratedAttribute]
public CompilationData get_CompilationData();
    [CompilerGeneratedAttribute]
private void set_CompilationData(CompilationData value);
    public string get_SourceCode();
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
private void set_Template(string value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class RazorEngine.Templating.TemplateLoadingException : Exception {
    internal TemplateLoadingException(string message);
    internal TemplateLoadingException(string message, Exception inner);
}
public class RazorEngine.Templating.TemplateParsingException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Line>k__BackingField;
    public int Column { get; private set; }
    public int Line { get; private set; }
    internal TemplateParsingException(string errorMessage, int characterIndex, int lineIndex);
    protected TemplateParsingException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(int value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class RazorEngine.Templating.TemplateRunner`1 : object {
    private IRazorEngineService _service;
    private ITemplateKey _key;
    public TemplateRunner`1(IRazorEngineService service, ITemplateKey key);
    public sealed virtual void Run(TModel model, TextWriter textWriter, DynamicViewBag viewBag);
}
[ExtensionAttribute]
public static class RazorEngine.Templating.TemplateRunnerExtensions : object {
    [ExtensionAttribute]
public static string Run(ITemplateRunner`1<TModel> templateRunner, TModel model, DynamicViewBag viewBag);
}
public class RazorEngine.Templating.TemplateWriter : object {
    private Action`1<TextWriter> writerDelegate;
    public TemplateWriter(Action`1<TextWriter> writer);
    public virtual string ToString();
    public void WriteTo(TextWriter writer);
}
public class RazorEngine.Templating.TypeLoader : object {
    private AppDomain _appDomain;
    private IEnumerable`1<Assembly> _assemblies;
    private ConcurrentDictionary`2<Type, Func`1<ITemplate>> _constructors;
    private ResolveEventHandler _resolveEventHandler;
    private bool disposed;
    [SecuritySafeCriticalAttribute]
public TypeLoader(AppDomain appDomain, IEnumerable`1<Assembly> assemblies);
    public ITemplate CreateInstance(Type type);
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private Func`1<ITemplate> GetConstructor(Type type);
    [SecuritySafeCriticalAttribute]
private static Func`1<ITemplate> GetConstructorInternal(Type type);
    private Assembly ResolveAssembly(string name);
    [CompilerGeneratedAttribute]
private Assembly <.ctor>b__5_0(object s, ResolveEventArgs e);
}
public class RazorEngine.Templating.WatchingResolvePathTemplateManager : object {
    private ResolvePathTemplateManager inner;
    private InvalidatingCachingProvider cache;
    private ConcurrentQueue`1<FileSystemEventArgs> queue;
    private List`1<FileSystemWatcher> watchers;
    private CancellationTokenSource cancelToken;
    private bool isDisposed;
    public WatchingResolvePathTemplateManager(IEnumerable`1<string> layoutRoot, InvalidatingCachingProvider cache);
    private void watcher_Changed(object sender, FileSystemEventArgs e);
    private void watcher_Renamed(object sender, RenamedEventArgs e);
    public sealed virtual ITemplateSource Resolve(ITemplateKey key);
    public sealed virtual ITemplateKey GetKey(string name, ResolveType resolveType, ITemplateKey context);
    public sealed virtual void AddDynamic(ITemplateKey key, ITemplateSource source);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private FileSystemWatcher <.ctor>b__5_0(string path);
}
public class RazorEngine.Text.HtmlEncodedString : object {
    private string _encodedString;
    public HtmlEncodedString(string value);
    public sealed virtual string ToEncodedString();
    public virtual string ToString();
}
public class RazorEngine.Text.HtmlEncodedStringFactory : object {
    public sealed virtual IEncodedString CreateEncodedString(string rawString);
    public sealed virtual IEncodedString CreateEncodedString(object value);
}
public interface RazorEngine.Text.IEncodedString {
    public abstract virtual string ToEncodedString();
}
public interface RazorEngine.Text.IEncodedStringFactory {
    public abstract virtual IEncodedString CreateEncodedString(string value);
    public abstract virtual IEncodedString CreateEncodedString(object value);
}
public class RazorEngine.Text.RawString : object {
    private string _value;
    public RawString(string value);
    public sealed virtual string ToEncodedString();
    public virtual string ToString();
}
public class RazorEngine.Text.RawStringFactory : object {
    public sealed virtual IEncodedString CreateEncodedString(string value);
    public sealed virtual IEncodedString CreateEncodedString(object value);
}
