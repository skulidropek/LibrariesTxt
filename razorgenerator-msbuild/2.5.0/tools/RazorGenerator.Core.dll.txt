public abstract class RazorGenerator.Core.CodeLanguageUtil : object {
    public string DefaultModelTypeName { get; }
    public string HrefMethod { get; }
    public static CodeLanguageUtil GetLanguageUtilFromFileExtension(string extension);
    public static CodeLanguageUtil GetLanguageUtilFromFileName(string filename);
    public abstract virtual string BuildGenericTypeReference(string GenericType, IEnumerable`1<string> GenericArguments);
    public abstract virtual bool IsGenericTypeReference(string TypeName);
    public abstract virtual string GetCodeFileExtension();
    public abstract virtual string GetPreGeneratedCodeBlock();
    public abstract virtual string GetPostGeneratedCodeBlock();
    public abstract virtual CodeDomProvider GetCodeDomProvider();
    public abstract virtual string get_DefaultModelTypeName();
    public abstract virtual string MakeTypeStatic(string codeContent);
    public abstract virtual string MakeHelperMethodsInternal(string methodText);
    public abstract virtual string get_HrefMethod();
}
public class RazorGenerator.Core.CodeLanguageUtils.CSharpCodeLanguageUtil : CodeLanguageUtil {
    public string DefaultModelTypeName { get; }
    public string HrefMethod { get; }
    public virtual string get_DefaultModelTypeName();
    public virtual string get_HrefMethod();
    public virtual string BuildGenericTypeReference(string GenericType, IEnumerable`1<string> GenericArguments);
    public virtual CodeDomProvider GetCodeDomProvider();
    public virtual string GetCodeFileExtension();
    public virtual string GetPostGeneratedCodeBlock();
    public virtual string GetPreGeneratedCodeBlock();
    public virtual bool IsGenericTypeReference(string TypeName);
    public virtual string MakeHelperMethodsInternal(string methodText);
    public virtual string MakeTypeStatic(string codeContent);
}
public class RazorGenerator.Core.CodeLanguageUtils.VBCodeLanguageUtil : CodeLanguageUtil {
    public string DefaultModelTypeName { get; }
    public string HrefMethod { get; }
    public virtual string get_DefaultModelTypeName();
    public virtual string BuildGenericTypeReference(string GenericType, IEnumerable`1<string> GenericArguments);
    public virtual CodeDomProvider GetCodeDomProvider();
    public virtual string GetCodeFileExtension();
    public virtual string GetPostGeneratedCodeBlock();
    public virtual string GetPreGeneratedCodeBlock();
    public virtual string get_HrefMethod();
    public virtual bool IsGenericTypeReference(string TypeName);
    public virtual string MakeHelperMethodsInternal(string methodText);
    public virtual string MakeTypeStatic(string codeContent);
}
internal static class RazorGenerator.Core.DirectivesParser : object {
    private static string GlobalDirectivesFileName;
    public static Dictionary`2<string, string> ParseDirectives(string baseDirectory, string fullPath);
    private static bool TryFindGlobalDirectivesFile(string baseDirectory, string fullPath, String& path);
    private static void ParseGlobalDirectives(Dictionary`2<string, string> directives, string directivesPath);
    private static void ParseFileDirectives(Dictionary`2<string, string> directives, string filePath);
    private static void ParseKeyValueDirectives(Dictionary`2<string, string> directives, string directivesLine);
}
public class RazorGenerator.Core.GeneratorErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <ErorrCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ColumnNumber>k__BackingField;
    public UInt32 ErorrCode { get; private set; }
    public string ErrorMessage { get; private set; }
    public UInt32 LineNumber { get; private set; }
    public UInt32 ColumnNumber { get; private set; }
    public GeneratorErrorEventArgs(UInt32 errorCode, string errorMessage, UInt32 lineNumber, UInt32 columnNumber);
    [CompilerGeneratedAttribute]
public UInt32 get_ErorrCode();
    [CompilerGeneratedAttribute]
private void set_ErorrCode(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ColumnNumber(UInt32 value);
}
public class RazorGenerator.Core.HostManager : object {
    private string _baseDirectory;
    private bool _loadExtensions;
    private RazorRuntime _defaultRuntime;
    private string _assemblyDirectory;
    private ComposablePartCatalog _catalog;
    public HostManager(string baseDirectory);
    public HostManager(string baseDirectory, bool loadExtensions, RazorRuntime defaultRuntime, string assemblyDirectory);
    public IRazorHost CreateHost(string fullPath, string projectRelativePath, string vsNamespace);
    public IRazorHost CreateHost(string fullPath, string projectRelativePath, CodeDomProvider codeDomProvider, string vsNamespace);
    private IRazorCodeTransformer GetRazorCodeTransformer(CompositionContainer container, string projectRelativePath, string hostName);
    private ComposablePartCatalog InitCompositionCatalog(string baseDirectory, bool loadExtensions, RazorRuntime runtime);
    private static IEnumerable`1<string> GetAvailableHosts(CompositionContainer container);
    private Assembly GetAssembly(RazorRuntime runtime);
    internal static bool TryGuessHost(string projectRoot, string projectRelativePath, GuessedHost& host);
    private static Nullable`1<bool> IsMvcProject(string projectRoot, RazorRuntime& razorRuntime);
    private static void AddCatalogIfHostsDirectoryExists(AggregateCatalog catalog, string directory);
    private Assembly OnAssemblyResolve(object sender, ResolveEventArgs eventArgs);
    private static string GetAssesmblyDirectory();
    public sealed virtual void Dispose();
}
public interface RazorGenerator.Core.ICodeGenerationEventProvider {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler`1<GeneratorErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler`1<GeneratorErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Progress(EventHandler`1<ProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Progress(EventHandler`1<ProgressEventArgs> value);
}
public interface RazorGenerator.Core.IHostProvider {
    public abstract virtual IRazorHost GetRazorHost(string projectRelativePath, string fullPath, IRazorCodeTransformer codeTransformer, CodeDomProvider codeDomProvider, IDictionary`2<string, string> directives);
}
public interface RazorGenerator.Core.IRazorCodeTransformer {
    public abstract virtual void Initialize(IRazorHost razorHost, IDictionary`2<string, string> directives);
    public abstract virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
    public abstract virtual string ProcessOutput(string codeContent);
}
public interface RazorGenerator.Core.IRazorHost {
    public string DefaultNamespace { get; public set; }
    public bool EnableLinePragmas { get; public set; }
    public CodeLanguageUtil CodeLanguageUtil { get; }
    public abstract virtual string get_DefaultNamespace();
    public abstract virtual void set_DefaultNamespace(string value);
    public abstract virtual bool get_EnableLinePragmas();
    public abstract virtual void set_EnableLinePragmas(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler`1<GeneratorErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler`1<GeneratorErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Progress(EventHandler`1<ProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Progress(EventHandler`1<ProgressEventArgs> value);
    public abstract virtual string GenerateCode();
    public abstract virtual CodeLanguageUtil get_CodeLanguageUtil();
}
public class RazorGenerator.Core.ProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <Completed>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Total>k__BackingField;
    public UInt32 Completed { get; private set; }
    public UInt32 Total { get; private set; }
    public ProgressEventArgs(UInt32 completed, UInt32 total);
    [CompilerGeneratedAttribute]
public UInt32 get_Completed();
    [CompilerGeneratedAttribute]
private void set_Completed(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Total();
    [CompilerGeneratedAttribute]
private void set_Total(UInt32 value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class RazorGenerator.Core.RazorGeneratorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string GeneratorError_UnknownGenerator { get; }
    internal static string GeneratorFailureMessage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_GeneratorError_UnknownGenerator();
    internal static string get_GeneratorFailureMessage();
}
public enum RazorGenerator.Core.RazorRuntime : Enum {
    public int value__;
    public static RazorRuntime Version1;
    public static RazorRuntime Version2;
    public static RazorRuntime Version3;
}
