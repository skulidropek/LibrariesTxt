public class RazorGenerator.MsBuild.RazorCodeGen : Task {
    private static Regex _namespaceRegex;
    private List`1<ITaskItem> _generatedFiles;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilesToPrecompile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeGenDirectory>k__BackingField;
    public ITaskItem[] FilesToPrecompile { get; public set; }
    [RequiredAttribute]
public string ProjectRoot { get; public set; }
    public string RootNamespace { get; public set; }
    [RequiredAttribute]
public string CodeGenDirectory { get; public set; }
    [OutputAttribute]
public ITaskItem[] GeneratedFiles { get; }
    private static RazorCodeGen();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilesToPrecompile();
    [CompilerGeneratedAttribute]
public void set_FilesToPrecompile(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectRoot();
    [CompilerGeneratedAttribute]
public void set_ProjectRoot(string value);
    [CompilerGeneratedAttribute]
public string get_RootNamespace();
    [CompilerGeneratedAttribute]
public void set_RootNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_CodeGenDirectory();
    [CompilerGeneratedAttribute]
public void set_CodeGenDirectory(string value);
    public ITaskItem[] get_GeneratedFiles();
    public virtual bool Execute();
    private bool ExecuteCore();
    private static bool RequiresRecompilation(string filePath, string outputPath);
    private string GetNamespace(ITaskItem file, string projectRelativePath);
    private static string GetProjectRelativePath(string filePath, string projectRoot);
    private static void EnsureDirectory(string filePath);
}
