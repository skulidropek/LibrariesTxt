[AttributeUsageAttribute("64")]
public class System.Web.Mvc.AcceptVerbsAttribute : ActionMethodSelectorAttribute {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Verbs>k__BackingField;
    public ICollection`1<string> Verbs { get; private set; }
    public AcceptVerbsAttribute(HttpVerbs verbs);
    public AcceptVerbsAttribute(String[] verbs);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Verbs();
    [CompilerGeneratedAttribute]
private void set_Verbs(ICollection`1<string> value);
    private static void AddEntryToList(HttpVerbs verbs, HttpVerbs match, List`1<string> verbList, string entryText);
    internal static String[] EnumToArray(HttpVerbs verbs);
    public virtual bool IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo);
}
public abstract class System.Web.Mvc.ActionDescriptor : object {
    private static ActionMethodDispatcherCache _staticDispatcherCache;
    private ActionMethodDispatcherCache _instanceDispatcherCache;
    private Lazy`1<string> _uniqueId;
    private static ActionSelector[] _emptySelectors;
    public string ActionName { get; }
    public ControllerDescriptor ControllerDescriptor { get; }
    internal ActionMethodDispatcherCache DispatcherCache { get; internal set; }
    public string UniqueId { get; }
    private static ActionDescriptor();
    public abstract virtual string get_ActionName();
    public abstract virtual ControllerDescriptor get_ControllerDescriptor();
    internal ActionMethodDispatcherCache get_DispatcherCache();
    internal void set_DispatcherCache(ActionMethodDispatcherCache value);
    public virtual string get_UniqueId();
    private string CreateUniqueId();
    public abstract virtual object Execute(ControllerContext controllerContext, IDictionary`2<string, object> parameters);
    internal static object ExtractParameterFromDictionary(ParameterInfo parameterInfo, IDictionary`2<string, object> parameters, MethodInfo methodInfo);
    internal static object ExtractParameterOrDefaultFromDictionary(ParameterInfo parameterInfo, IDictionary`2<string, object> parameters);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    internal virtual IEnumerable`1<FilterAttribute> GetFilterAttributes(bool useCache);
    [ObsoleteAttribute("Please call System.Web.Mvc.FilterProviders.Providers.GetFilters() now.", "True")]
[EditorBrowsableAttribute("1")]
public virtual FilterInfo GetFilters();
    public abstract virtual ParameterDescriptor[] GetParameters();
    public virtual ICollection`1<ActionSelector> GetSelectors();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    internal static string VerifyActionMethodIsCallable(MethodInfo methodInfo);
}
public class System.Web.Mvc.ActionExecutedContext : ControllerContext {
    private ActionResult _result;
    [CompilerGeneratedAttribute]
private ActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceptionHandled>k__BackingField;
    public ActionDescriptor ActionDescriptor { get; public set; }
    public bool Canceled { get; public set; }
    public Exception Exception { get; public set; }
    public bool ExceptionHandled { get; public set; }
    public ActionResult Result { get; public set; }
    public ActionExecutedContext(ControllerContext controllerContext, ActionDescriptor actionDescriptor, bool canceled, Exception exception);
    [CompilerGeneratedAttribute]
public virtual ActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDescriptor(ActionDescriptor value);
    [CompilerGeneratedAttribute]
public virtual bool get_Canceled();
    [CompilerGeneratedAttribute]
public virtual void set_Canceled(bool value);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public virtual void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_ExceptionHandled();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandled(bool value);
    public ActionResult get_Result();
    public void set_Result(ActionResult value);
}
public class System.Web.Mvc.ActionExecutingContext : ControllerContext {
    [CompilerGeneratedAttribute]
private ActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ActionParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionResult <Result>k__BackingField;
    public ActionDescriptor ActionDescriptor { get; public set; }
    public IDictionary`2<string, object> ActionParameters { get; public set; }
    public ActionResult Result { get; public set; }
    public ActionExecutingContext(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2<string, object> actionParameters);
    [CompilerGeneratedAttribute]
public virtual ActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDescriptor(ActionDescriptor value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_ActionParameters();
    [CompilerGeneratedAttribute]
public virtual void set_ActionParameters(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ActionResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ActionResult value);
}
[AttributeUsageAttribute("68")]
public abstract class System.Web.Mvc.ActionFilterAttribute : FilterAttribute {
    public virtual void OnActionExecuting(ActionExecutingContext filterContext);
    public virtual void OnActionExecuted(ActionExecutedContext filterContext);
    public virtual void OnResultExecuting(ResultExecutingContext filterContext);
    public virtual void OnResultExecuted(ResultExecutedContext filterContext);
}
internal class System.Web.Mvc.ActionMethodDispatcher : object {
    private ActionExecutor _executor;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; private set; }
    public ActionMethodDispatcher(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
    public object Execute(ControllerBase controller, Object[] parameters);
    private static ActionExecutor GetExecutor(MethodInfo methodInfo);
    private static ActionExecutor WrapVoidAction(VoidActionExecutor executor);
}
internal class System.Web.Mvc.ActionMethodDispatcherCache : ReaderWriterCache`2<MethodInfo, ActionMethodDispatcher> {
    public ActionMethodDispatcher GetDispatcher(MethodInfo methodInfo);
}
internal class System.Web.Mvc.ActionMethodSelector : object {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo[] <AliasedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookup`2<string, MethodInfo> <NonAliasedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, <>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>>, MethodInfo> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, string> CS$<>9__CachedAnonymousMethodDelegatec;
    public Type ControllerType { get; private set; }
    public MethodInfo[] AliasedMethods { get; private set; }
    public ILookup`2<string, MethodInfo> NonAliasedMethods { get; private set; }
    public ActionMethodSelector(Type controllerType);
    [CompilerGeneratedAttribute]
public Type get_ControllerType();
    [CompilerGeneratedAttribute]
private void set_ControllerType(Type value);
    [CompilerGeneratedAttribute]
public MethodInfo[] get_AliasedMethods();
    [CompilerGeneratedAttribute]
private void set_AliasedMethods(MethodInfo[] value);
    [CompilerGeneratedAttribute]
public ILookup`2<string, MethodInfo> get_NonAliasedMethods();
    [CompilerGeneratedAttribute]
private void set_NonAliasedMethods(ILookup`2<string, MethodInfo> value);
    private AmbiguousMatchException CreateAmbiguousMatchException(List`1<MethodInfo> ambiguousMethods, string actionName);
    public MethodInfo FindActionMethod(ControllerContext controllerContext, string actionName);
    internal List`1<MethodInfo> GetMatchingAliasedMethods(ControllerContext controllerContext, string actionName);
    private static bool IsMethodDecoratedWithAliasingAttribute(MethodInfo methodInfo);
    private static bool IsValidActionMethod(MethodInfo methodInfo);
    private void PopulateLookupTables();
    private static List`1<MethodInfo> RunSelectionFilters(ControllerContext controllerContext, List`1<MethodInfo> methodInfos);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>> <GetMatchingAliasedMethods>b__1(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
private static MethodInfo <GetMatchingAliasedMethods>b__4(<>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static string <PopulateLookupTables>b__b(MethodInfo method);
}
[AttributeUsageAttribute("64")]
public abstract class System.Web.Mvc.ActionMethodSelectorAttribute : Attribute {
    public abstract virtual bool IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo);
}
[AttributeUsageAttribute("64")]
public class System.Web.Mvc.ActionNameAttribute : ActionNameSelectorAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ActionNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual bool IsValidName(ControllerContext controllerContext, string actionName, MethodInfo methodInfo);
}
[AttributeUsageAttribute("64")]
public abstract class System.Web.Mvc.ActionNameSelectorAttribute : Attribute {
    public abstract virtual bool IsValidName(ControllerContext controllerContext, string actionName, MethodInfo methodInfo);
}
public abstract class System.Web.Mvc.ActionResult : object {
    public abstract virtual void ExecuteResult(ControllerContext context);
}
public class System.Web.Mvc.ActionSelector : MulticastDelegate {
    public ActionSelector(object object, IntPtr method);
    public virtual bool Invoke(ControllerContext controllerContext);
    public virtual IAsyncResult BeginInvoke(ControllerContext controllerContext, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("1156")]
public class System.Web.Mvc.AdditionalMetadataAttribute : Attribute {
    private object _typeId;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object TypeId { get; }
    public string Name { get; private set; }
    public object Value { get; private set; }
    public AdditionalMetadataAttribute(string name, object value);
    public virtual object get_TypeId();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public sealed virtual void OnMetadataCreated(ModelMetadata metadata);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Ajax.AjaxExtensions : object {
    private static string LinkOnClickFormat;
    private static string FormOnClickValue;
    private static string FormOnSubmitFormat;
    private static string _globalizationScript;
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, object routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, string controllerName, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, string controllerName, object routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, string controllerName, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, string controllerName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, string controllerName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, string controllerName, string protocol, string hostName, string fragment, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, string actionName, string controllerName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, object routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, string controllerName, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, string controllerName, object routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, string controllerName, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, string controllerName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, string actionName, string controllerName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, object routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
private static MvcForm FormHelper(AjaxHelper ajaxHelper, string formAction, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString GlobalizationScript(AjaxHelper ajaxHelper);
    [ExtensionAttribute]
public static MvcHtmlString GlobalizationScript(AjaxHelper ajaxHelper, CultureInfo cultureInfo);
    private static MvcHtmlString GlobalizationScriptHelper(string scriptPath, CultureInfo cultureInfo);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, object routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, RouteValueDictionary routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, object routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, object routeValues, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    private static string GenerateLink(AjaxHelper ajaxHelper, string linkText, string targetUrl, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    private static string GenerateAjaxScript(AjaxOptions ajaxOptions, string scriptFormat);
    private static AjaxOptions GetAjaxOptions(AjaxOptions ajaxOptions);
}
public class System.Web.Mvc.Ajax.AjaxOptions : object {
    private string _confirm;
    private string _httpMethod;
    private InsertionMode _insertionMode;
    private string _loadingElementId;
    private string _onBegin;
    private string _onComplete;
    private string _onFailure;
    private string _onSuccess;
    private string _updateTargetId;
    private string _url;
    [CompilerGeneratedAttribute]
private int <LoadingElementDuration>k__BackingField;
    public string Confirm { get; public set; }
    public string HttpMethod { get; public set; }
    public InsertionMode InsertionMode { get; public set; }
    internal string InsertionModeString { get; }
    internal string InsertionModeUnobtrusive { get; }
    public int LoadingElementDuration { get; public set; }
    public string LoadingElementId { get; public set; }
    public string OnBegin { get; public set; }
    public string OnComplete { get; public set; }
    public string OnFailure { get; public set; }
    public string OnSuccess { get; public set; }
    public string UpdateTargetId { get; public set; }
    public string Url { get; public set; }
    public string get_Confirm();
    public void set_Confirm(string value);
    public string get_HttpMethod();
    public void set_HttpMethod(string value);
    public InsertionMode get_InsertionMode();
    public void set_InsertionMode(InsertionMode value);
    internal string get_InsertionModeString();
    internal string get_InsertionModeUnobtrusive();
    [CompilerGeneratedAttribute]
public int get_LoadingElementDuration();
    [CompilerGeneratedAttribute]
public void set_LoadingElementDuration(int value);
    public string get_LoadingElementId();
    public void set_LoadingElementId(string value);
    public string get_OnBegin();
    public void set_OnBegin(string value);
    public string get_OnComplete();
    public void set_OnComplete(string value);
    public string get_OnFailure();
    public void set_OnFailure(string value);
    public string get_OnSuccess();
    public void set_OnSuccess(string value);
    public string get_UpdateTargetId();
    public void set_UpdateTargetId(string value);
    public string get_Url();
    public void set_Url(string value);
    internal string ToJavascriptString();
    public IDictionary`2<string, object> ToUnobtrusiveHtmlAttributes();
    private static void AddToDictionaryIfSpecified(IDictionary`2<string, object> dictionary, string name, string value);
    private static string EventStringIfSpecified(string propertyName, string handler);
    private static string PropertyStringIfSpecified(string propertyName, string propertyValue);
}
public enum System.Web.Mvc.Ajax.InsertionMode : Enum {
    public int value__;
    public static InsertionMode Replace;
    public static InsertionMode InsertBefore;
    public static InsertionMode InsertAfter;
}
public class System.Web.Mvc.AjaxHelper : object {
    private static string _globalizationScriptPath;
    [CompilerGeneratedAttribute]
private RouteCollection <RouteCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewContext <ViewContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewDataContainer <ViewDataContainer>k__BackingField;
    public static string GlobalizationScriptPath { get; public set; }
    public RouteCollection RouteCollection { get; private set; }
    public ViewContext ViewContext { get; private set; }
    public ViewDataDictionary ViewData { get; }
    public IViewDataContainer ViewDataContainer { get; private set; }
    public AjaxHelper(ViewContext viewContext, IViewDataContainer viewDataContainer);
    public AjaxHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection);
    public static string get_GlobalizationScriptPath();
    public static void set_GlobalizationScriptPath(string value);
    [CompilerGeneratedAttribute]
public RouteCollection get_RouteCollection();
    [CompilerGeneratedAttribute]
private void set_RouteCollection(RouteCollection value);
    [CompilerGeneratedAttribute]
public ViewContext get_ViewContext();
    [CompilerGeneratedAttribute]
private void set_ViewContext(ViewContext value);
    public ViewDataDictionary get_ViewData();
    [CompilerGeneratedAttribute]
public IViewDataContainer get_ViewDataContainer();
    [CompilerGeneratedAttribute]
private void set_ViewDataContainer(IViewDataContainer value);
    public string JavaScriptStringEncode(string message);
}
public class System.Web.Mvc.AjaxHelper`1 : AjaxHelper {
    private ViewDataDictionary`1<TModel> _viewData;
    public ViewDataDictionary`1<TModel> ViewData { get; }
    public AjaxHelper`1(ViewContext viewContext, IViewDataContainer viewDataContainer);
    public AjaxHelper`1(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection);
    public ViewDataDictionary`1<TModel> get_ViewData();
}
[ExtensionAttribute]
public static class System.Web.Mvc.AjaxRequestExtensions : object {
    [ExtensionAttribute]
public static bool IsAjaxRequest(HttpRequestBase request);
}
[AttributeUsageAttribute("128")]
public class System.Web.Mvc.AllowHtmlAttribute : Attribute {
    public sealed virtual void OnMetadataCreated(ModelMetadata metadata);
}
internal static class System.Web.Mvc.AreaHelpers : object {
    public static string GetAreaName(RouteBase route);
    public static string GetAreaName(RouteData routeData);
}
public abstract class System.Web.Mvc.AreaRegistration : object {
    private static string _typeCacheName;
    public string AreaName { get; }
    public abstract virtual string get_AreaName();
    internal void CreateContextAndRegister(RouteCollection routes, object state);
    private static bool IsAreaRegistrationType(Type type);
    public static void RegisterAllAreas();
    public static void RegisterAllAreas(object state);
    internal static void RegisterAllAreas(RouteCollection routes, IBuildManager buildManager, object state);
    public abstract virtual void RegisterArea(AreaRegistrationContext context);
}
public class System.Web.Mvc.AreaRegistrationContext : object {
    private HashSet`1<string> _namespaces;
    [CompilerGeneratedAttribute]
private string <AreaName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteCollection <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    public string AreaName { get; private set; }
    public ICollection`1<string> Namespaces { get; }
    public RouteCollection Routes { get; private set; }
    public object State { get; private set; }
    public AreaRegistrationContext(string areaName, RouteCollection routes);
    public AreaRegistrationContext(string areaName, RouteCollection routes, object state);
    [CompilerGeneratedAttribute]
public string get_AreaName();
    [CompilerGeneratedAttribute]
private void set_AreaName(string value);
    public ICollection`1<string> get_Namespaces();
    [CompilerGeneratedAttribute]
public RouteCollection get_Routes();
    [CompilerGeneratedAttribute]
private void set_Routes(RouteCollection value);
    [CompilerGeneratedAttribute]
public object get_State();
    [CompilerGeneratedAttribute]
private void set_State(object value);
    public Route MapRoute(string name, string url);
    public Route MapRoute(string name, string url, object defaults);
    public Route MapRoute(string name, string url, object defaults, object constraints);
    public Route MapRoute(string name, string url, String[] namespaces);
    public Route MapRoute(string name, string url, object defaults, String[] namespaces);
    public Route MapRoute(string name, string url, object defaults, object constraints, String[] namespaces);
}
public abstract class System.Web.Mvc.AssociatedMetadataProvider : ModelMetadataProvider {
    [CompilerGeneratedAttribute]
private static Func`2<Attribute, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static void ApplyMetadataAwareAttributes(IEnumerable`1<Attribute> attributes, ModelMetadata result);
    protected abstract virtual ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
    protected virtual IEnumerable`1<Attribute> FilterAttributes(Type containerType, PropertyDescriptor propertyDescriptor, IEnumerable`1<Attribute> attributes);
    public virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    private IEnumerable`1<ModelMetadata> GetMetadataForPropertiesImpl(object container, Type containerType);
    public virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    protected virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, PropertyDescriptor propertyDescriptor);
    public virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
    private static Func`1<object> GetPropertyValueAccessor(object container, PropertyDescriptor property);
    protected virtual ICustomTypeDescriptor GetTypeDescriptor(Type type);
    [CompilerGeneratedAttribute]
private static bool <FilterAttributes>b__0(Attribute a);
}
public abstract class System.Web.Mvc.AssociatedValidatorProvider : ModelValidatorProvider {
    protected virtual ICustomTypeDescriptor GetTypeDescriptor(Type type);
    public sealed virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context);
    protected abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context, IEnumerable`1<Attribute> attributes);
    private IEnumerable`1<ModelValidator> GetValidatorsForProperty(ModelMetadata metadata, ControllerContext context);
    private IEnumerable`1<ModelValidator> GetValidatorsForType(ModelMetadata metadata, ControllerContext context);
}
internal class System.Web.Mvc.Async.ActionDescriptorCreator : MulticastDelegate {
    public ActionDescriptorCreator(object object, IntPtr method);
    public virtual ActionDescriptor Invoke(string actionName, ControllerDescriptor controllerDescriptor);
    public virtual IAsyncResult BeginInvoke(string actionName, ControllerDescriptor controllerDescriptor, AsyncCallback callback, object object);
    public virtual ActionDescriptor EndInvoke(IAsyncResult result);
}
public abstract class System.Web.Mvc.Async.AsyncActionDescriptor : ActionDescriptor {
    public abstract virtual IAsyncResult BeginExecute(ControllerContext controllerContext, IDictionary`2<string, object> parameters, AsyncCallback callback, object state);
    public abstract virtual object EndExecute(IAsyncResult asyncResult);
    public virtual object Execute(ControllerContext controllerContext, IDictionary`2<string, object> parameters);
    internal static AsyncManager GetAsyncManager(ControllerBase controller);
}
internal class System.Web.Mvc.Async.AsyncActionMethodSelector : object {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo[] <AliasedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookup`2<string, MethodInfo> <NonAliasedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, <>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>>, MethodInfo> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    public Type ControllerType { get; private set; }
    public MethodInfo[] AliasedMethods { get; private set; }
    public ILookup`2<string, MethodInfo> NonAliasedMethods { get; private set; }
    public AsyncActionMethodSelector(Type controllerType);
    [CompilerGeneratedAttribute]
public Type get_ControllerType();
    [CompilerGeneratedAttribute]
private void set_ControllerType(Type value);
    [CompilerGeneratedAttribute]
public MethodInfo[] get_AliasedMethods();
    [CompilerGeneratedAttribute]
private void set_AliasedMethods(MethodInfo[] value);
    [CompilerGeneratedAttribute]
public ILookup`2<string, MethodInfo> get_NonAliasedMethods();
    [CompilerGeneratedAttribute]
private void set_NonAliasedMethods(ILookup`2<string, MethodInfo> value);
    private AmbiguousMatchException CreateAmbiguousActionMatchException(IEnumerable`1<MethodInfo> ambiguousMethods, string actionName);
    private AmbiguousMatchException CreateAmbiguousMethodMatchException(IEnumerable`1<MethodInfo> ambiguousMethods, string methodName);
    private static string CreateAmbiguousMatchList(IEnumerable`1<MethodInfo> ambiguousMethods);
    public ActionDescriptorCreator FindAction(ControllerContext controllerContext, string actionName);
    private ActionDescriptorCreator GetActionDescriptorDelegate(MethodInfo entryMethod);
    private static string GetCanonicalMethodName(MethodInfo methodInfo);
    internal List`1<MethodInfo> GetMatchingAliasedMethods(ControllerContext controllerContext, string actionName);
    private static bool IsAsyncSuffixedMethod(MethodInfo methodInfo);
    private static bool IsCompletedSuffixedMethod(MethodInfo methodInfo);
    private static bool IsMethodDecoratedWithAliasingAttribute(MethodInfo methodInfo);
    private MethodInfo GetMethodByName(string methodName);
    private static bool IsValidActionMethod(MethodInfo methodInfo);
    private static bool IsValidActionMethod(MethodInfo methodInfo, bool stripInfrastructureMethods);
    private void PopulateLookupTables();
    private static List`1<MethodInfo> RunSelectionFilters(ControllerContext controllerContext, List`1<MethodInfo> methodInfos);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>> <GetMatchingAliasedMethods>b__8(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
private static MethodInfo <GetMatchingAliasedMethods>b__b(<>f__AnonymousType1`2<MethodInfo, ICollection`1<ActionNameSelectorAttribute>> <>h__TransparentIdentifier7);
    [CompilerGeneratedAttribute]
private static bool <GetMethodByName>b__12(MethodInfo methodInfo);
}
public class System.Web.Mvc.Async.AsyncControllerActionInvoker : ControllerActionInvoker {
    private static object _invokeActionTag;
    private static object _invokeActionMethodTag;
    private static object _invokeActionMethodWithFiltersTag;
    [CompilerGeneratedAttribute]
private static EndInvokeDelegate`1<bool> CS$<>9__CachedAnonymousMethodDelegate31;
    private static AsyncControllerActionInvoker();
    public virtual IAsyncResult BeginInvokeAction(ControllerContext controllerContext, string actionName, AsyncCallback callback, object state);
    private static IAsyncResult BeginInvokeAction_ActionNotFound(AsyncCallback callback, object state);
    private static IAsyncResult BeginInvokeAction_MakeSynchronousAsyncResult(AsyncCallback callback, object state);
    protected internal virtual IAsyncResult BeginInvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2<string, object> parameters, AsyncCallback callback, object state);
    protected internal virtual IAsyncResult BeginInvokeActionMethodWithFilters(ControllerContext controllerContext, IList`1<IActionFilter> filters, ActionDescriptor actionDescriptor, IDictionary`2<string, object> parameters, AsyncCallback callback, object state);
    private IAsyncResult BeginInvokeAsynchronousActionMethod(ControllerContext controllerContext, AsyncActionDescriptor actionDescriptor, IDictionary`2<string, object> parameters, AsyncCallback callback, object state);
    private IAsyncResult BeginInvokeSynchronousActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2<string, object> parameters, AsyncCallback callback, object state);
    public virtual bool EndInvokeAction(IAsyncResult asyncResult);
    protected internal virtual ActionResult EndInvokeActionMethod(IAsyncResult asyncResult);
    protected internal virtual ActionExecutedContext EndInvokeActionMethodWithFilters(IAsyncResult asyncResult);
    protected virtual ControllerDescriptor GetControllerDescriptor(ControllerContext controllerContext);
    internal static Func`1<ActionExecutedContext> InvokeActionMethodFilterAsynchronously(IActionFilter filter, ActionExecutingContext preContext, Func`1<Func`1<ActionExecutedContext>> nextInChain);
    private ActionResult InvokeSynchronousActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2<string, object> parameters);
    [CompilerGeneratedAttribute]
private static bool <BeginInvokeAction_ActionNotFound>b__30(IAsyncResult asyncResult);
}
public class System.Web.Mvc.Async.AsyncManager : object {
    private SynchronizationContext _syncContext;
    private int _timeout;
    private EventHandler Finished;
    [CompilerGeneratedAttribute]
private OperationCounter <OutstandingOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Parameters>k__BackingField;
    public OperationCounter OutstandingOperations { get; private set; }
    public IDictionary`2<string, object> Parameters { get; private set; }
    public int Timeout { get; public set; }
    public AsyncManager(SynchronizationContext syncContext);
    [CompilerGeneratedAttribute]
public OperationCounter get_OutstandingOperations();
    [CompilerGeneratedAttribute]
private void set_OutstandingOperations(OperationCounter value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(IDictionary`2<string, object> value);
    public void add_Finished(EventHandler value);
    public void remove_Finished(EventHandler value);
    public virtual void Finish();
    public virtual void Sync(Action action);
    public int get_Timeout();
    public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object , EventArgs );
}
internal static class System.Web.Mvc.Async.AsyncResultWrapper : object {
    private static Func`1<AsyncVoid> MakeVoidDelegate(Action action);
    private static EndInvokeDelegate`1<AsyncVoid> MakeVoidDelegate(EndInvokeDelegate endDelegate);
    public static IAsyncResult Begin(AsyncCallback callback, object state, BeginInvokeDelegate beginDelegate, EndInvokeDelegate`1<TResult> endDelegate);
    public static IAsyncResult Begin(AsyncCallback callback, object state, BeginInvokeDelegate beginDelegate, EndInvokeDelegate`1<TResult> endDelegate, object tag);
    public static IAsyncResult Begin(AsyncCallback callback, object state, BeginInvokeDelegate beginDelegate, EndInvokeDelegate`1<TResult> endDelegate, object tag, int timeout);
    public static IAsyncResult Begin(AsyncCallback callback, object state, BeginInvokeDelegate beginDelegate, EndInvokeDelegate endDelegate);
    public static IAsyncResult Begin(AsyncCallback callback, object state, BeginInvokeDelegate beginDelegate, EndInvokeDelegate endDelegate, object tag);
    public static IAsyncResult Begin(AsyncCallback callback, object state, BeginInvokeDelegate beginDelegate, EndInvokeDelegate endDelegate, object tag, int timeout);
    public static IAsyncResult BeginSynchronous(AsyncCallback callback, object state, Func`1<TResult> func);
    public static IAsyncResult BeginSynchronous(AsyncCallback callback, object state, Func`1<TResult> func, object tag);
    public static IAsyncResult BeginSynchronous(AsyncCallback callback, object state, Action action);
    public static IAsyncResult BeginSynchronous(AsyncCallback callback, object state, Action action, object tag);
    public static TResult End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult, object tag);
    public static void End(IAsyncResult asyncResult);
    public static void End(IAsyncResult asyncResult, object tag);
    [CompilerGeneratedAttribute]
private static IAsyncResult <BeginSynchronous>b__6(AsyncCallback asyncCallback, object asyncState);
}
internal static class System.Web.Mvc.Async.AsyncUtil : object {
    public static void WaitForAsyncResultCompletion(IAsyncResult asyncResult, HttpApplication app);
    public static AsyncCallback WrapCallbackForSynchronizedExecution(AsyncCallback callback, SynchronizationContext syncContext);
}
internal class System.Web.Mvc.Async.AsyncVoid : ValueType {
}
internal class System.Web.Mvc.Async.BeginInvokeDelegate : MulticastDelegate {
    public BeginInvokeDelegate(object object, IntPtr method);
    public virtual IAsyncResult Invoke(AsyncCallback callback, object state);
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object state, AsyncCallback callback, object object);
    public virtual IAsyncResult EndInvoke(IAsyncResult result);
}
internal class System.Web.Mvc.Async.EndInvokeDelegate : MulticastDelegate {
    public EndInvokeDelegate(object object, IntPtr method);
    public virtual void Invoke(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginInvoke(IAsyncResult asyncResult, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Mvc.Async.EndInvokeDelegate`1 : MulticastDelegate {
    public EndInvokeDelegate`1(object object, IntPtr method);
    public virtual TResult Invoke(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginInvoke(IAsyncResult asyncResult, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public interface System.Web.Mvc.Async.IAsyncActionInvoker {
    public abstract virtual IAsyncResult BeginInvokeAction(ControllerContext controllerContext, string actionName, AsyncCallback callback, object state);
    public abstract virtual bool EndInvokeAction(IAsyncResult asyncResult);
}
public interface System.Web.Mvc.Async.IAsyncController {
    public abstract virtual IAsyncResult BeginExecute(RequestContext requestContext, AsyncCallback callback, object state);
    public abstract virtual void EndExecute(IAsyncResult asyncResult);
}
public interface System.Web.Mvc.Async.IAsyncManagerContainer {
    public AsyncManager AsyncManager { get; }
    public abstract virtual AsyncManager get_AsyncManager();
}
public class System.Web.Mvc.Async.OperationCounter : object {
    private int _count;
    private EventHandler Completed;
    public int Count { get; }
    public int get_Count();
    public void add_Completed(EventHandler value);
    public void remove_Completed(EventHandler value);
    private int AddAndExecuteCallbackIfCompleted(int value);
    public int Decrement();
    public int Decrement(int value);
    public int Increment();
    public int Increment(int value);
    private void OnCompleted();
}
public class System.Web.Mvc.Async.ReflectedAsyncActionDescriptor : AsyncActionDescriptor {
    private object _executeTag;
    private string _actionName;
    private ControllerDescriptor _controllerDescriptor;
    private ParameterDescriptor[] _parametersCache;
    private Lazy`1<string> _uniqueId;
    [CompilerGeneratedAttribute]
private MethodInfo <AsyncMethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <CompletedMethodInfo>k__BackingField;
    public string ActionName { get; }
    public MethodInfo AsyncMethodInfo { get; private set; }
    public MethodInfo CompletedMethodInfo { get; private set; }
    public ControllerDescriptor ControllerDescriptor { get; }
    public string UniqueId { get; }
    public ReflectedAsyncActionDescriptor(MethodInfo asyncMethodInfo, MethodInfo completedMethodInfo, string actionName, ControllerDescriptor controllerDescriptor);
    internal ReflectedAsyncActionDescriptor(MethodInfo asyncMethodInfo, MethodInfo completedMethodInfo, string actionName, ControllerDescriptor controllerDescriptor, bool validateMethods);
    public virtual string get_ActionName();
    [CompilerGeneratedAttribute]
public MethodInfo get_AsyncMethodInfo();
    [CompilerGeneratedAttribute]
private void set_AsyncMethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_CompletedMethodInfo();
    [CompilerGeneratedAttribute]
private void set_CompletedMethodInfo(MethodInfo value);
    public virtual ControllerDescriptor get_ControllerDescriptor();
    public virtual string get_UniqueId();
    public virtual IAsyncResult BeginExecute(ControllerContext controllerContext, IDictionary`2<string, object> parameters, AsyncCallback callback, object state);
    private string CreateUniqueId();
    public virtual object EndExecute(IAsyncResult asyncResult);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    internal virtual IEnumerable`1<FilterAttribute> GetFilterAttributes(bool useCache);
    public virtual ParameterDescriptor[] GetParameters();
    public virtual ICollection`1<ActionSelector> GetSelectors();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    private ParameterDescriptor[] LazilyFetchParametersCollection();
    [CompilerGeneratedAttribute]
private ActionSelector <GetSelectors>b__b(ActionMethodSelectorAttribute attr);
    [CompilerGeneratedAttribute]
private ParameterDescriptor <LazilyFetchParametersCollection>b__f(ParameterInfo parameterInfo);
}
public class System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor : ControllerDescriptor {
    private static ActionDescriptor[] _emptyCanonicalActions;
    private Type _controllerType;
    private AsyncActionMethodSelector _selector;
    public Type ControllerType { get; }
    public ReflectedAsyncControllerDescriptor(Type controllerType);
    private static ReflectedAsyncControllerDescriptor();
    public sealed virtual Type get_ControllerType();
    public virtual ActionDescriptor FindAction(ControllerContext controllerContext, string actionName);
    public virtual ActionDescriptor[] GetCanonicalActions();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    internal virtual IEnumerable`1<FilterAttribute> GetFilterAttributes(bool useCache);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Web.Mvc.Async.SimpleAsyncResult : object {
    private object _asyncState;
    private bool _completedSynchronously;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isCompleted;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public SimpleAsyncResult(object asyncState);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public void MarkCompleted(bool completedSynchronously, AsyncCallback callback);
}
internal class System.Web.Mvc.Async.SingleEntryGate : object {
    private static int NOT_ENTERED;
    private static int ENTERED;
    private int _status;
    public bool TryEnter();
}
[ExtensionAttribute]
internal static class System.Web.Mvc.Async.SynchronizationContextUtil : object {
    public static SynchronizationContext GetSynchronizationContext();
    [ExtensionAttribute]
public static T Sync(SynchronizationContext syncContext, Func`1<T> func);
    [ExtensionAttribute]
public static void Sync(SynchronizationContext syncContext, Action action);
}
public class System.Web.Mvc.Async.SynchronousOperationException : HttpException {
    private SynchronousOperationException(SerializationInfo info, StreamingContext context);
    public SynchronousOperationException(string message);
    public SynchronousOperationException(string message, Exception innerException);
}
internal class System.Web.Mvc.Async.Trigger : object {
    private Action _fireAction;
    internal Trigger(Action fireAction);
    public void Fire();
}
internal class System.Web.Mvc.Async.TriggerListener : object {
    private Trigger _activateTrigger;
    private Action modreq(System.Runtime.CompilerServices.IsVolatile) _continuation;
    private SingleEntryGate _continuationFiredGate;
    private int _outstandingTriggers;
    private Trigger _setContinuationTrigger;
    public void Activate();
    public Trigger CreateTrigger();
    private void HandleTriggerFired();
    public void SetContinuation(Action continuation);
}
public abstract class System.Web.Mvc.AsyncController : Controller {
    private static object _executeTag;
    private static object _executeCoreTag;
    private AsyncManager _asyncManager;
    public AsyncManager AsyncManager { get; }
    private static AsyncController();
    public sealed virtual AsyncManager get_AsyncManager();
    protected virtual IAsyncResult BeginExecute(RequestContext requestContext, AsyncCallback callback, object state);
    protected virtual IAsyncResult BeginExecuteCore(AsyncCallback callback, object state);
    protected virtual IActionInvoker CreateActionInvoker();
    protected virtual void EndExecute(IAsyncResult asyncResult);
    protected virtual void EndExecuteCore(IAsyncResult asyncResult);
    private sealed virtual override IAsyncResult System.Web.Mvc.Async.IAsyncController.BeginExecute(RequestContext requestContext, AsyncCallback callback, object state);
    private sealed virtual override void System.Web.Mvc.Async.IAsyncController.EndExecute(IAsyncResult asyncResult);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.AsyncTimeoutAttribute : ActionFilterAttribute {
    [CompilerGeneratedAttribute]
private int <Duration>k__BackingField;
    public int Duration { get; private set; }
    public AsyncTimeoutAttribute(int duration);
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
private void set_Duration(int value);
    public virtual void OnActionExecuting(ActionExecutingContext filterContext);
}
public class System.Web.Mvc.AuthorizationContext : ControllerContext {
    [CompilerGeneratedAttribute]
private ActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionResult <Result>k__BackingField;
    public ActionDescriptor ActionDescriptor { get; public set; }
    public ActionResult Result { get; public set; }
    [ObsoleteAttribute("The recommended alternative is the constructor AuthorizationContext(ControllerContext controllerContext, ActionDescriptor actionDescriptor).")]
public AuthorizationContext(ControllerContext controllerContext);
    public AuthorizationContext(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
public virtual ActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDescriptor(ActionDescriptor value);
    [CompilerGeneratedAttribute]
public ActionResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ActionResult value);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.AuthorizeAttribute : FilterAttribute {
    private object _typeId;
    private string _roles;
    private String[] _rolesSplit;
    private string _users;
    private String[] _usersSplit;
    [CompilerGeneratedAttribute]
private static Func`2<string, <>f__AnonymousType4`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<string, string>, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    public string Roles { get; public set; }
    public object TypeId { get; }
    public string Users { get; public set; }
    public string get_Roles();
    public void set_Roles(string value);
    public virtual object get_TypeId();
    public string get_Users();
    public void set_Users(string value);
    protected virtual bool AuthorizeCore(HttpContextBase httpContext);
    private void CacheValidateHandler(HttpContext context, object data, HttpValidationStatus& validationStatus);
    public virtual void OnAuthorization(AuthorizationContext filterContext);
    protected virtual void HandleUnauthorizedRequest(AuthorizationContext filterContext);
    protected virtual HttpValidationStatus OnCacheAuthorization(HttpContextBase httpContext);
    internal static String[] SplitString(string original);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<string, string> <SplitString>b__1(string piece);
    [CompilerGeneratedAttribute]
private static bool <SplitString>b__2(<>f__AnonymousType4`2<string, string> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static string <SplitString>b__3(<>f__AnonymousType4`2<string, string> <>h__TransparentIdentifier0);
}
[AttributeUsageAttribute("2052")]
public class System.Web.Mvc.BindAttribute : Attribute {
    private string _exclude;
    private String[] _excludeSplit;
    private string _include;
    private String[] _includeSplit;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Exclude { get; public set; }
    public string Include { get; public set; }
    public string Prefix { get; public set; }
    public string get_Exclude();
    public void set_Exclude(string value);
    public string get_Include();
    public void set_Include(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    internal static bool IsPropertyAllowed(string propertyName, String[] includeProperties, String[] excludeProperties);
    public bool IsPropertyAllowed(string propertyName);
}
public abstract class System.Web.Mvc.BuildManagerCompiledView : object {
    internal IViewPageActivator _viewPageActivator;
    private IBuildManager _buildManager;
    private ControllerContext _controllerContext;
    [CompilerGeneratedAttribute]
private string <ViewPath>k__BackingField;
    internal IBuildManager BuildManager { get; internal set; }
    public string ViewPath { get; protected set; }
    protected BuildManagerCompiledView(ControllerContext controllerContext, string viewPath);
    protected BuildManagerCompiledView(ControllerContext controllerContext, string viewPath, IViewPageActivator viewPageActivator);
    internal BuildManagerCompiledView(ControllerContext controllerContext, string viewPath, IViewPageActivator viewPageActivator, IDependencyResolver dependencyResolver);
    internal IBuildManager get_BuildManager();
    internal void set_BuildManager(IBuildManager value);
    [CompilerGeneratedAttribute]
public string get_ViewPath();
    [CompilerGeneratedAttribute]
protected void set_ViewPath(string value);
    public sealed virtual void Render(ViewContext viewContext, TextWriter writer);
    protected abstract virtual void RenderView(ViewContext viewContext, TextWriter writer, object instance);
}
public abstract class System.Web.Mvc.BuildManagerViewEngine : VirtualPathProviderViewEngine {
    private IBuildManager _buildManager;
    private IViewPageActivator _viewPageActivator;
    private IResolver`1<IViewPageActivator> _activatorResolver;
    [CompilerGeneratedAttribute]
private static Func`1<IViewPageActivator> CS$<>9__CachedAnonymousMethodDelegate1;
    internal IBuildManager BuildManager { get; internal set; }
    protected IViewPageActivator ViewPageActivator { get; }
    protected BuildManagerViewEngine(IViewPageActivator viewPageActivator);
    internal BuildManagerViewEngine(IViewPageActivator viewPageActivator, IResolver`1<IViewPageActivator> activatorResolver, IDependencyResolver dependencyResolver);
    internal IBuildManager get_BuildManager();
    internal void set_BuildManager(IBuildManager value);
    protected virtual bool FileExists(ControllerContext controllerContext, string virtualPath);
    protected IViewPageActivator get_ViewPageActivator();
    [CompilerGeneratedAttribute]
private static IViewPageActivator <.ctor>b__0();
}
internal class System.Web.Mvc.BuildManagerWrapper : object {
    private sealed virtual override bool System.Web.Mvc.IBuildManager.FileExists(string virtualPath);
    private sealed virtual override Type System.Web.Mvc.IBuildManager.GetCompiledType(string virtualPath);
    private sealed virtual override ICollection System.Web.Mvc.IBuildManager.GetReferencedAssemblies();
    private sealed virtual override Stream System.Web.Mvc.IBuildManager.ReadCachedFile(string fileName);
    private sealed virtual override Stream System.Web.Mvc.IBuildManager.CreateCachedFile(string fileName);
}
public class System.Web.Mvc.ByteArrayModelBinder : object {
    public virtual object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.ChildActionOnlyAttribute : FilterAttribute {
    public sealed virtual void OnAuthorization(AuthorizationContext filterContext);
}
public class System.Web.Mvc.ChildActionValueProvider : DictionaryValueProvider`1<object> {
    private static string _childActionValuesKey;
    internal static string ChildActionValuesKey { get; }
    public ChildActionValueProvider(ControllerContext controllerContext);
    private static ChildActionValueProvider();
    internal static string get_ChildActionValuesKey();
    public virtual ValueProviderResult GetValue(string key);
}
public class System.Web.Mvc.ChildActionValueProviderFactory : ValueProviderFactory {
    public virtual IValueProvider GetValueProvider(ControllerContext controllerContext);
}
public class System.Web.Mvc.ClientDataTypeModelValidatorProvider : ModelValidatorProvider {
    private static HashSet`1<Type> _numericTypes;
    private static ClientDataTypeModelValidatorProvider();
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context);
    private static IEnumerable`1<ModelValidator> GetValidatorsImpl(ModelMetadata metadata, ControllerContext context);
    private static bool IsNumericType(Type type);
}
[AttributeUsageAttribute("128")]
public class System.Web.Mvc.CompareAttribute : ValidationAttribute {
    [CompilerGeneratedAttribute]
private string <OtherProperty>k__BackingField;
    public string OtherProperty { get; private set; }
    public CompareAttribute(string otherProperty);
    [CompilerGeneratedAttribute]
public string get_OtherProperty();
    [CompilerGeneratedAttribute]
private void set_OtherProperty(string value);
    public virtual string FormatErrorMessage(string name);
    protected virtual ValidationResult IsValid(object value, ValidationContext validationContext);
    public static string FormatPropertyForClientValidation(string property);
    public sealed virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata, ControllerContext context);
}
public class System.Web.Mvc.ContentResult : ActionResult {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <ContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string Content { get; public set; }
    public Encoding ContentEncoding { get; public set; }
    public string ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public Encoding get_ContentEncoding();
    [CompilerGeneratedAttribute]
public void set_ContentEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    public virtual void ExecuteResult(ControllerContext context);
}
public abstract class System.Web.Mvc.Controller : ControllerBase {
    private IActionInvoker _actionInvoker;
    private ModelBinderDictionary _binders;
    private RouteCollection _routeCollection;
    private ITempDataProvider _tempDataProvider;
    [CompilerGeneratedAttribute]
private UrlHelper <Url>k__BackingField;
    public IActionInvoker ActionInvoker { get; public set; }
    protected internal ModelBinderDictionary Binders { get; protected internal set; }
    public HttpContextBase HttpContext { get; }
    public ModelStateDictionary ModelState { get; }
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    internal RouteCollection RouteCollection { get; internal set; }
    public RouteData RouteData { get; }
    public HttpServerUtilityBase Server { get; }
    public HttpSessionStateBase Session { get; }
    public ITempDataProvider TempDataProvider { get; public set; }
    public UrlHelper Url { get; public set; }
    public IPrincipal User { get; }
    public IActionInvoker get_ActionInvoker();
    public void set_ActionInvoker(IActionInvoker value);
    protected internal ModelBinderDictionary get_Binders();
    protected internal void set_Binders(ModelBinderDictionary value);
    public HttpContextBase get_HttpContext();
    public ModelStateDictionary get_ModelState();
    public HttpRequestBase get_Request();
    public HttpResponseBase get_Response();
    internal RouteCollection get_RouteCollection();
    internal void set_RouteCollection(RouteCollection value);
    public RouteData get_RouteData();
    public HttpServerUtilityBase get_Server();
    public HttpSessionStateBase get_Session();
    public ITempDataProvider get_TempDataProvider();
    public void set_TempDataProvider(ITempDataProvider value);
    [CompilerGeneratedAttribute]
public UrlHelper get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(UrlHelper value);
    public IPrincipal get_User();
    protected internal ContentResult Content(string content);
    protected internal ContentResult Content(string content, string contentType);
    protected internal virtual ContentResult Content(string content, string contentType, Encoding contentEncoding);
    protected virtual IActionInvoker CreateActionInvoker();
    protected virtual ITempDataProvider CreateTempDataProvider();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void ExecuteCore();
    protected internal FileContentResult File(Byte[] fileContents, string contentType);
    protected internal virtual FileContentResult File(Byte[] fileContents, string contentType, string fileDownloadName);
    protected internal FileStreamResult File(Stream fileStream, string contentType);
    protected internal virtual FileStreamResult File(Stream fileStream, string contentType, string fileDownloadName);
    protected internal FilePathResult File(string fileName, string contentType);
    protected internal virtual FilePathResult File(string fileName, string contentType, string fileDownloadName);
    protected virtual void HandleUnknownAction(string actionName);
    protected internal HttpNotFoundResult HttpNotFound();
    protected internal virtual HttpNotFoundResult HttpNotFound(string statusDescription);
    protected internal virtual JavaScriptResult JavaScript(string script);
    protected internal JsonResult Json(object data);
    protected internal JsonResult Json(object data, string contentType);
    protected internal virtual JsonResult Json(object data, string contentType, Encoding contentEncoding);
    protected internal JsonResult Json(object data, JsonRequestBehavior behavior);
    protected internal JsonResult Json(object data, string contentType, JsonRequestBehavior behavior);
    protected internal virtual JsonResult Json(object data, string contentType, Encoding contentEncoding, JsonRequestBehavior behavior);
    protected virtual void Initialize(RequestContext requestContext);
    protected virtual void OnActionExecuting(ActionExecutingContext filterContext);
    protected virtual void OnActionExecuted(ActionExecutedContext filterContext);
    protected virtual void OnAuthorization(AuthorizationContext filterContext);
    protected virtual void OnException(ExceptionContext filterContext);
    protected virtual void OnResultExecuted(ResultExecutedContext filterContext);
    protected virtual void OnResultExecuting(ResultExecutingContext filterContext);
    protected internal PartialViewResult PartialView();
    protected internal PartialViewResult PartialView(object model);
    protected internal PartialViewResult PartialView(string viewName);
    protected internal virtual PartialViewResult PartialView(string viewName, object model);
    internal void PossiblyLoadTempData();
    internal void PossiblySaveTempData();
    protected internal virtual RedirectResult Redirect(string url);
    protected internal virtual RedirectResult RedirectPermanent(string url);
    protected internal RedirectToRouteResult RedirectToAction(string actionName);
    protected internal RedirectToRouteResult RedirectToAction(string actionName, object routeValues);
    protected internal RedirectToRouteResult RedirectToAction(string actionName, RouteValueDictionary routeValues);
    protected internal RedirectToRouteResult RedirectToAction(string actionName, string controllerName);
    protected internal RedirectToRouteResult RedirectToAction(string actionName, string controllerName, object routeValues);
    protected internal virtual RedirectToRouteResult RedirectToAction(string actionName, string controllerName, RouteValueDictionary routeValues);
    protected internal RedirectToRouteResult RedirectToActionPermanent(string actionName);
    protected internal RedirectToRouteResult RedirectToActionPermanent(string actionName, object routeValues);
    protected internal RedirectToRouteResult RedirectToActionPermanent(string actionName, RouteValueDictionary routeValues);
    protected internal RedirectToRouteResult RedirectToActionPermanent(string actionName, string controllerName);
    protected internal RedirectToRouteResult RedirectToActionPermanent(string actionName, string controllerName, object routeValues);
    protected internal virtual RedirectToRouteResult RedirectToActionPermanent(string actionName, string controllerName, RouteValueDictionary routeValues);
    protected internal RedirectToRouteResult RedirectToRoute(object routeValues);
    protected internal RedirectToRouteResult RedirectToRoute(RouteValueDictionary routeValues);
    protected internal RedirectToRouteResult RedirectToRoute(string routeName);
    protected internal RedirectToRouteResult RedirectToRoute(string routeName, object routeValues);
    protected internal virtual RedirectToRouteResult RedirectToRoute(string routeName, RouteValueDictionary routeValues);
    protected internal RedirectToRouteResult RedirectToRoutePermanent(object routeValues);
    protected internal RedirectToRouteResult RedirectToRoutePermanent(RouteValueDictionary routeValues);
    protected internal RedirectToRouteResult RedirectToRoutePermanent(string routeName);
    protected internal RedirectToRouteResult RedirectToRoutePermanent(string routeName, object routeValues);
    protected internal virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, RouteValueDictionary routeValues);
    protected internal bool TryUpdateModel(TModel model);
    protected internal bool TryUpdateModel(TModel model, string prefix);
    protected internal bool TryUpdateModel(TModel model, String[] includeProperties);
    protected internal bool TryUpdateModel(TModel model, string prefix, String[] includeProperties);
    protected internal bool TryUpdateModel(TModel model, string prefix, String[] includeProperties, String[] excludeProperties);
    protected internal bool TryUpdateModel(TModel model, IValueProvider valueProvider);
    protected internal bool TryUpdateModel(TModel model, string prefix, IValueProvider valueProvider);
    protected internal bool TryUpdateModel(TModel model, String[] includeProperties, IValueProvider valueProvider);
    protected internal bool TryUpdateModel(TModel model, string prefix, String[] includeProperties, IValueProvider valueProvider);
    protected internal bool TryUpdateModel(TModel model, string prefix, String[] includeProperties, String[] excludeProperties, IValueProvider valueProvider);
    protected internal bool TryValidateModel(object model);
    protected internal bool TryValidateModel(object model, string prefix);
    protected internal void UpdateModel(TModel model);
    protected internal void UpdateModel(TModel model, string prefix);
    protected internal void UpdateModel(TModel model, String[] includeProperties);
    protected internal void UpdateModel(TModel model, string prefix, String[] includeProperties);
    protected internal void UpdateModel(TModel model, string prefix, String[] includeProperties, String[] excludeProperties);
    protected internal void UpdateModel(TModel model, IValueProvider valueProvider);
    protected internal void UpdateModel(TModel model, string prefix, IValueProvider valueProvider);
    protected internal void UpdateModel(TModel model, String[] includeProperties, IValueProvider valueProvider);
    protected internal void UpdateModel(TModel model, string prefix, String[] includeProperties, IValueProvider valueProvider);
    protected internal void UpdateModel(TModel model, string prefix, String[] includeProperties, String[] excludeProperties, IValueProvider valueProvider);
    protected internal void ValidateModel(object model);
    protected internal void ValidateModel(object model, string prefix);
    protected internal ViewResult View();
    protected internal ViewResult View(object model);
    protected internal ViewResult View(string viewName);
    protected internal ViewResult View(string viewName, string masterName);
    protected internal ViewResult View(string viewName, object model);
    protected internal virtual ViewResult View(string viewName, string masterName, object model);
    protected internal ViewResult View(IView view);
    protected internal virtual ViewResult View(IView view, object model);
    private sealed virtual override void System.Web.Mvc.IActionFilter.OnActionExecuting(ActionExecutingContext filterContext);
    private sealed virtual override void System.Web.Mvc.IActionFilter.OnActionExecuted(ActionExecutedContext filterContext);
    private sealed virtual override void System.Web.Mvc.IAuthorizationFilter.OnAuthorization(AuthorizationContext filterContext);
    private sealed virtual override void System.Web.Mvc.IExceptionFilter.OnException(ExceptionContext filterContext);
    private sealed virtual override void System.Web.Mvc.IResultFilter.OnResultExecuting(ResultExecutingContext filterContext);
    private sealed virtual override void System.Web.Mvc.IResultFilter.OnResultExecuted(ResultExecutedContext filterContext);
}
public class System.Web.Mvc.ControllerActionInvoker : object {
    private static ControllerDescriptorCache _staticDescriptorCache;
    private ModelBinderDictionary _binders;
    private Func`3<ControllerContext, ActionDescriptor, IEnumerable`1<Filter>> _getFiltersThunk;
    private ControllerDescriptorCache _instanceDescriptorCache;
    [CompilerGeneratedAttribute]
private static Func`3<ControllerContext, ActionDescriptor, IEnumerable`1<Filter>> CS$<>9__CachedAnonymousMethodDelegate1;
    protected internal ModelBinderDictionary Binders { get; protected internal set; }
    internal ControllerDescriptorCache DescriptorCache { get; internal set; }
    internal ControllerActionInvoker(Object[] filters);
    private static ControllerActionInvoker();
    protected internal ModelBinderDictionary get_Binders();
    protected internal void set_Binders(ModelBinderDictionary value);
    internal ControllerDescriptorCache get_DescriptorCache();
    internal void set_DescriptorCache(ControllerDescriptorCache value);
    protected virtual ActionResult CreateActionResult(ControllerContext controllerContext, ActionDescriptor actionDescriptor, object actionReturnValue);
    protected virtual ControllerDescriptor GetControllerDescriptor(ControllerContext controllerContext);
    protected virtual ActionDescriptor FindAction(ControllerContext controllerContext, ControllerDescriptor controllerDescriptor, string actionName);
    protected virtual FilterInfo GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    private IModelBinder GetModelBinder(ParameterDescriptor parameterDescriptor);
    protected virtual object GetParameterValue(ControllerContext controllerContext, ParameterDescriptor parameterDescriptor);
    protected virtual IDictionary`2<string, object> GetParameterValues(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    private static Predicate`1<string> GetPropertyFilter(ParameterDescriptor parameterDescriptor);
    public virtual bool InvokeAction(ControllerContext controllerContext, string actionName);
    protected virtual ActionResult InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2<string, object> parameters);
    internal static ActionExecutedContext InvokeActionMethodFilter(IActionFilter filter, ActionExecutingContext preContext, Func`1<ActionExecutedContext> continuation);
    protected virtual ActionExecutedContext InvokeActionMethodWithFilters(ControllerContext controllerContext, IList`1<IActionFilter> filters, ActionDescriptor actionDescriptor, IDictionary`2<string, object> parameters);
    protected virtual void InvokeActionResult(ControllerContext controllerContext, ActionResult actionResult);
    internal static ResultExecutedContext InvokeActionResultFilter(IResultFilter filter, ResultExecutingContext preContext, Func`1<ResultExecutedContext> continuation);
    protected virtual ResultExecutedContext InvokeActionResultWithFilters(ControllerContext controllerContext, IList`1<IResultFilter> filters, ActionResult actionResult);
    protected virtual AuthorizationContext InvokeAuthorizationFilters(ControllerContext controllerContext, IList`1<IAuthorizationFilter> filters, ActionDescriptor actionDescriptor);
    protected virtual ExceptionContext InvokeExceptionFilters(ControllerContext controllerContext, IList`1<IExceptionFilter> filters, Exception exception);
    internal static void ValidateRequest(ControllerContext controllerContext);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Filter> <.ctor>b__0(ControllerContext cc, ActionDescriptor ad);
}
public abstract class System.Web.Mvc.ControllerBase : object {
    private SingleEntryGate _executeWasCalledGate;
    private DynamicViewDataDictionary _dynamicViewDataDictionary;
    private TempDataDictionary _tempDataDictionary;
    private bool _validateRequest;
    private IValueProvider _valueProvider;
    private ViewDataDictionary _viewDataDictionary;
    [CompilerGeneratedAttribute]
private ControllerContext <ControllerContext>k__BackingField;
    public ControllerContext ControllerContext { get; public set; }
    public TempDataDictionary TempData { get; public set; }
    public bool ValidateRequest { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    [DynamicAttribute]
public object ViewBag { get; }
    public ViewDataDictionary ViewData { get; public set; }
    [CompilerGeneratedAttribute]
public ControllerContext get_ControllerContext();
    [CompilerGeneratedAttribute]
public void set_ControllerContext(ControllerContext value);
    public TempDataDictionary get_TempData();
    public void set_TempData(TempDataDictionary value);
    public bool get_ValidateRequest();
    public void set_ValidateRequest(bool value);
    public IValueProvider get_ValueProvider();
    public void set_ValueProvider(IValueProvider value);
    public object get_ViewBag();
    public ViewDataDictionary get_ViewData();
    public void set_ViewData(ViewDataDictionary value);
    protected virtual void Execute(RequestContext requestContext);
    protected abstract virtual void ExecuteCore();
    protected virtual void Initialize(RequestContext requestContext);
    internal void VerifyExecuteCalledOnce();
    private sealed virtual override void System.Web.Mvc.IController.Execute(RequestContext requestContext);
    [CompilerGeneratedAttribute]
private ViewDataDictionary <get_ViewBag>b__0();
}
public class System.Web.Mvc.ControllerBuilder : object {
    private Func`1<IControllerFactory> _factoryThunk;
    private static ControllerBuilder _instance;
    private HashSet`1<string> _namespaces;
    private IResolver`1<IControllerFactory> _serviceResolver;
    [CompilerGeneratedAttribute]
private static Func`1<IControllerFactory> CS$<>9__CachedAnonymousMethodDelegate3;
    public static ControllerBuilder Current { get; }
    public HashSet`1<string> DefaultNamespaces { get; }
    internal ControllerBuilder(IResolver`1<IControllerFactory> serviceResolver);
    private static ControllerBuilder();
    public static ControllerBuilder get_Current();
    public HashSet`1<string> get_DefaultNamespaces();
    public IControllerFactory GetControllerFactory();
    public void SetControllerFactory(IControllerFactory controllerFactory);
    public void SetControllerFactory(Type controllerFactoryType);
    [CompilerGeneratedAttribute]
private static IControllerFactory <.ctor>b__1();
    [CompilerGeneratedAttribute]
private IControllerFactory <.ctor>b__2();
}
public class System.Web.Mvc.ControllerContext : object {
    internal static string PARENT_ACTION_VIEWCONTEXT;
    private HttpContextBase _httpContext;
    private RequestContext _requestContext;
    private RouteData _routeData;
    [CompilerGeneratedAttribute]
private ControllerBase <Controller>k__BackingField;
    public ControllerBase Controller { get; public set; }
    public HttpContextBase HttpContext { get; public set; }
    public bool IsChildAction { get; }
    public ViewContext ParentActionViewContext { get; }
    public RequestContext RequestContext { get; public set; }
    public RouteData RouteData { get; public set; }
    protected ControllerContext(ControllerContext controllerContext);
    public ControllerContext(HttpContextBase httpContext, RouteData routeData, ControllerBase controller);
    public ControllerContext(RequestContext requestContext, ControllerBase controller);
    [CompilerGeneratedAttribute]
public virtual ControllerBase get_Controller();
    [CompilerGeneratedAttribute]
public virtual void set_Controller(ControllerBase value);
    public virtual HttpContextBase get_HttpContext();
    public virtual void set_HttpContext(HttpContextBase value);
    public virtual bool get_IsChildAction();
    public ViewContext get_ParentActionViewContext();
    public RequestContext get_RequestContext();
    public void set_RequestContext(RequestContext value);
    public virtual RouteData get_RouteData();
    public virtual void set_RouteData(RouteData value);
}
public abstract class System.Web.Mvc.ControllerDescriptor : object {
    private Lazy`1<string> _uniqueId;
    public string ControllerName { get; }
    public Type ControllerType { get; }
    public string UniqueId { get; }
    public virtual string get_ControllerName();
    public abstract virtual Type get_ControllerType();
    public virtual string get_UniqueId();
    private string CreateUniqueId();
    public abstract virtual ActionDescriptor FindAction(ControllerContext controllerContext, string actionName);
    public abstract virtual ActionDescriptor[] GetCanonicalActions();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    internal virtual IEnumerable`1<FilterAttribute> GetFilterAttributes(bool useCache);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Web.Mvc.ControllerDescriptorCache : ReaderWriterCache`2<Type, ControllerDescriptor> {
    public ControllerDescriptor GetDescriptor(Type controllerType, Func`1<ControllerDescriptor> creator);
}
public class System.Web.Mvc.ControllerInstanceFilterProvider : object {
    public sealed virtual IEnumerable`1<Filter> GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
}
internal class System.Web.Mvc.ControllerTypeCache : object {
    private static string _typeCacheName;
    private Dictionary`2<string, ILookup`2<string, Type>> _cache;
    private object _lockObj;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, Type>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, Type>, ILookup`2<string, Type>> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate8;
    internal int Count { get; }
    internal int get_Count();
    public void EnsureInitialized(IBuildManager buildManager);
    public ICollection`1<Type> GetControllerTypes(string controllerName, HashSet`1<string> namespaces);
    internal static bool IsControllerType(Type t);
    internal static bool IsNamespaceMatch(string requestedNamespace, string targetNamespace);
    [CompilerGeneratedAttribute]
private static string <EnsureInitialized>b__1(Type t);
    [CompilerGeneratedAttribute]
private static string <EnsureInitialized>b__2(IGrouping`2<string, Type> g);
    [CompilerGeneratedAttribute]
private static ILookup`2<string, Type> <EnsureInitialized>b__3(IGrouping`2<string, Type> g);
    [CompilerGeneratedAttribute]
private static string <EnsureInitialized>b__4(Type t);
}
[AttributeUsageAttribute("3100")]
public abstract class System.Web.Mvc.CustomModelBinderAttribute : Attribute {
    internal static AttributeTargets ValidTargets;
    public abstract virtual IModelBinder GetBinder();
}
public class System.Web.Mvc.DataAnnotationsModelMetadata : ModelMetadata {
    private DisplayColumnAttribute _displayColumnAttribute;
    public DataAnnotationsModelMetadata(DataAnnotationsModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName, DisplayColumnAttribute displayColumnAttribute);
    protected virtual string GetSimpleDisplayText();
    private static void ValidateDisplayColumnAttribute(DisplayColumnAttribute displayColumnAttribute, PropertyInfo displayColumnProperty, Type modelType);
}
public class System.Web.Mvc.DataAnnotationsModelMetadataProvider : AssociatedMetadataProvider {
    [CompilerGeneratedAttribute]
private static Func`2<UIHintAttribute, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<UIHintAttribute, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    protected virtual ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
    [CompilerGeneratedAttribute]
private static bool <CreateMetadata>b__0(UIHintAttribute a);
    [CompilerGeneratedAttribute]
private static bool <CreateMetadata>b__1(UIHintAttribute a);
}
public class System.Web.Mvc.DataAnnotationsModelValidationFactory : MulticastDelegate {
    public DataAnnotationsModelValidationFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    public virtual IAsyncResult BeginInvoke(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
public class System.Web.Mvc.DataAnnotationsModelValidator : ModelValidator {
    [CompilerGeneratedAttribute]
private ValidationAttribute <Attribute>k__BackingField;
    protected internal ValidationAttribute Attribute { get; private set; }
    protected internal string ErrorMessage { get; }
    public bool IsRequired { get; }
    public DataAnnotationsModelValidator(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
protected internal ValidationAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(ValidationAttribute value);
    protected internal string get_ErrorMessage();
    public virtual bool get_IsRequired();
    internal static ModelValidator Create(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
    public virtual IEnumerable`1<ModelValidationResult> Validate(object container);
}
public class System.Web.Mvc.DataAnnotationsModelValidator`1 : DataAnnotationsModelValidator {
    protected TAttribute Attribute { get; }
    public DataAnnotationsModelValidator`1(ModelMetadata metadata, ControllerContext context, TAttribute attribute);
    protected TAttribute get_Attribute();
}
public class System.Web.Mvc.DataAnnotationsModelValidatorProvider : AssociatedValidatorProvider {
    private static bool _addImplicitRequiredAttributeForValueTypes;
    private static ReaderWriterLockSlim _adaptersLock;
    internal static DataAnnotationsModelValidationFactory DefaultAttributeFactory;
    internal static Dictionary`2<Type, DataAnnotationsModelValidationFactory> AttributeFactories;
    internal static DataAnnotationsValidatableObjectAdapterFactory DefaultValidatableFactory;
    internal static Dictionary`2<Type, DataAnnotationsValidatableObjectAdapterFactory> ValidatableFactories;
    [CompilerGeneratedAttribute]
private static Func`2<Attribute, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static DataAnnotationsModelValidationFactory CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static DataAnnotationsModelValidationFactory CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static DataAnnotationsModelValidationFactory CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static DataAnnotationsModelValidationFactory CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static DataAnnotationsModelValidationFactory CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static DataAnnotationsValidatableObjectAdapterFactory CS$<>9__CachedAnonymousMethodDelegate1c;
    public static bool AddImplicitRequiredAttributeForValueTypes { get; public set; }
    private static DataAnnotationsModelValidatorProvider();
    public static bool get_AddImplicitRequiredAttributeForValueTypes();
    public static void set_AddImplicitRequiredAttributeForValueTypes(bool value);
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context, IEnumerable`1<Attribute> attributes);
    public static void RegisterAdapter(Type attributeType, Type adapterType);
    public static void RegisterAdapterFactory(Type attributeType, DataAnnotationsModelValidationFactory factory);
    public static void RegisterDefaultAdapter(Type adapterType);
    public static void RegisterDefaultAdapterFactory(DataAnnotationsModelValidationFactory factory);
    private static ConstructorInfo GetAttributeAdapterConstructor(Type attributeType, Type adapterType);
    private static void ValidateAttributeAdapterType(Type adapterType);
    private static void ValidateAttributeType(Type attributeType);
    private static void ValidateAttributeFactory(DataAnnotationsModelValidationFactory factory);
    public static void RegisterValidatableObjectAdapter(Type modelType, Type adapterType);
    public static void RegisterValidatableObjectAdapterFactory(Type modelType, DataAnnotationsValidatableObjectAdapterFactory factory);
    public static void RegisterDefaultValidatableObjectAdapter(Type adapterType);
    public static void RegisterDefaultValidatableObjectAdapterFactory(DataAnnotationsValidatableObjectAdapterFactory factory);
    private static ConstructorInfo GetValidatableAdapterConstructor(Type adapterType);
    private static void ValidateValidatableAdapterType(Type adapterType);
    private static void ValidateValidatableModelType(Type modelType);
    private static void ValidateValidatableFactory(DataAnnotationsValidatableObjectAdapterFactory factory);
    [CompilerGeneratedAttribute]
private static bool <GetValidators>b__0(Attribute a);
    [CompilerGeneratedAttribute]
private static ModelValidator <.cctor>b__11(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
private static ModelValidator <.cctor>b__12(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
private static ModelValidator <.cctor>b__13(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
private static ModelValidator <.cctor>b__14(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
private static ModelValidator <.cctor>b__15(ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
private static ModelValidator <.cctor>b__16(ModelMetadata metadata, ControllerContext context);
}
public class System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory : MulticastDelegate {
    public DataAnnotationsValidatableObjectAdapterFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(ModelMetadata metadata, ControllerContext context);
    public virtual IAsyncResult BeginInvoke(ModelMetadata metadata, ControllerContext context, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
public class System.Web.Mvc.DataErrorInfoModelValidatorProvider : ModelValidatorProvider {
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context);
    private static IEnumerable`1<ModelValidator> GetValidatorsImpl(ModelMetadata metadata, ControllerContext context);
    private static bool TypeImplementsIDataErrorInfo(Type type);
}
[ExtensionAttribute]
internal static class System.Web.Mvc.DataTypeUtil : object {
    internal static string CurrencyTypeName;
    internal static string DateTypeName;
    internal static string DateTimeTypeName;
    internal static string DurationTypeName;
    internal static string EmailAddressTypeName;
    internal static string HtmlTypeName;
    internal static string ImageUrlTypeName;
    internal static string MultiLineTextTypeName;
    internal static string PasswordTypeName;
    internal static string PhoneNumberTypeName;
    internal static string TextTypeName;
    internal static string TimeTypeName;
    internal static string UrlTypeName;
    [CompilerGeneratedAttribute]
private static Func`2<DataTypeAttribute, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static DataTypeUtil();
    [ExtensionAttribute]
internal static string ToDataTypeName(DataTypeAttribute attribute, Func`2<DataTypeAttribute, bool> isDataType);
    [CompilerGeneratedAttribute]
private static bool <ToDataTypeName>b__0(DataTypeAttribute t);
}
public class System.Web.Mvc.DefaultControllerFactory : object {
    private IBuildManager _buildManager;
    private IResolver`1<IControllerActivator> _activatorResolver;
    private IControllerActivator _controllerActivator;
    private ControllerBuilder _controllerBuilder;
    private ControllerTypeCache _instanceControllerTypeCache;
    private static ConcurrentDictionary`2<Type, SessionStateBehavior> _sessionStateCache;
    private static ControllerTypeCache _staticControllerTypeCache;
    [CompilerGeneratedAttribute]
private static Func`1<IControllerActivator> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Type, SessionStateBehavior> CS$<>9__CachedAnonymousMethodDelegate3;
    private IControllerActivator ControllerActivator { get; }
    internal IBuildManager BuildManager { get; internal set; }
    internal ControllerBuilder ControllerBuilder { get; internal set; }
    internal ControllerTypeCache ControllerTypeCache { get; internal set; }
    public DefaultControllerFactory(IControllerActivator controllerActivator);
    internal DefaultControllerFactory(IControllerActivator controllerActivator, IResolver`1<IControllerActivator> activatorResolver, IDependencyResolver dependencyResolver);
    private static DefaultControllerFactory();
    private IControllerActivator get_ControllerActivator();
    internal IBuildManager get_BuildManager();
    internal void set_BuildManager(IBuildManager value);
    internal ControllerBuilder get_ControllerBuilder();
    internal void set_ControllerBuilder(ControllerBuilder value);
    internal ControllerTypeCache get_ControllerTypeCache();
    internal void set_ControllerTypeCache(ControllerTypeCache value);
    internal static InvalidOperationException CreateAmbiguousControllerException(RouteBase route, string controllerName, ICollection`1<Type> matchingTypes);
    public virtual IController CreateController(RequestContext requestContext, string controllerName);
    protected internal virtual IController GetControllerInstance(RequestContext requestContext, Type controllerType);
    protected internal virtual SessionStateBehavior GetControllerSessionBehavior(RequestContext requestContext, Type controllerType);
    protected internal virtual Type GetControllerType(RequestContext requestContext, string controllerName);
    private Type GetControllerTypeWithinNamespaces(RouteBase route, string controllerName, HashSet`1<string> namespaces);
    public virtual void ReleaseController(IController controller);
    private sealed virtual override SessionStateBehavior System.Web.Mvc.IControllerFactory.GetControllerSessionBehavior(RequestContext requestContext, string controllerName);
    [CompilerGeneratedAttribute]
private static IControllerActivator <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static SessionStateBehavior <GetControllerSessionBehavior>b__2(Type type);
}
public class System.Web.Mvc.DefaultModelBinder : object {
    private ModelBinderDictionary _binders;
    private static string _resourceClassKey;
    [CompilerGeneratedAttribute]
private static Func`2<ModelError, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<ModelValidator, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    protected internal ModelBinderDictionary Binders { get; protected internal set; }
    public static string ResourceClassKey { get; public set; }
    protected internal ModelBinderDictionary get_Binders();
    protected internal void set_Binders(ModelBinderDictionary value);
    public static string get_ResourceClassKey();
    public static void set_ResourceClassKey(string value);
    private static void AddValueRequiredMessageToModelState(ControllerContext controllerContext, ModelStateDictionary modelState, string modelStateKey, Type elementType, object value);
    internal void BindComplexElementalModel(ControllerContext controllerContext, ModelBindingContext bindingContext, object model);
    internal object BindComplexModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
    public virtual object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
    private void BindProperties(ControllerContext controllerContext, ModelBindingContext bindingContext);
    protected virtual void BindProperty(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor);
    internal object BindSimpleModel(ControllerContext controllerContext, ModelBindingContext bindingContext, ValueProviderResult valueProviderResult);
    private static bool CanUpdateReadonlyTypedReference(Type type);
    private static object ConvertProviderResult(ModelStateDictionary modelState, string modelStateKey, ValueProviderResult valueProviderResult, Type destinationType);
    internal ModelBindingContext CreateComplexElementalModelBindingContext(ControllerContext controllerContext, ModelBindingContext bindingContext, object model);
    protected virtual object CreateModel(ControllerContext controllerContext, ModelBindingContext bindingContext, Type modelType);
    protected static string CreateSubIndexName(string prefix, int index);
    protected static string CreateSubIndexName(string prefix, string index);
    protected internal static string CreateSubPropertyName(string prefix, string propertyName);
    protected IEnumerable`1<PropertyDescriptor> GetFilteredModelProperties(ControllerContext controllerContext, ModelBindingContext bindingContext);
    private static void GetIndexes(ModelBindingContext bindingContext, Boolean& stopOnIndexNotFound, IEnumerable`1& indexes);
    protected virtual PropertyDescriptorCollection GetModelProperties(ControllerContext controllerContext, ModelBindingContext bindingContext);
    protected virtual object GetPropertyValue(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, IModelBinder propertyBinder);
    protected virtual ICustomTypeDescriptor GetTypeDescriptor(ControllerContext controllerContext, ModelBindingContext bindingContext);
    private static string GetUserResourceString(ControllerContext controllerContext, string resourceName);
    private static string GetValueInvalidResource(ControllerContext controllerContext);
    private static string GetValueRequiredResource(ControllerContext controllerContext);
    private static IEnumerable`1<string> GetZeroBasedIndexes();
    protected static bool IsModelValid(ModelBindingContext bindingContext);
    protected virtual void OnModelUpdated(ControllerContext controllerContext, ModelBindingContext bindingContext);
    protected virtual bool OnModelUpdating(ControllerContext controllerContext, ModelBindingContext bindingContext);
    protected virtual void OnPropertyValidated(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, object value);
    protected virtual bool OnPropertyValidating(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, object value);
    protected virtual void SetProperty(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, object value);
    private static bool ShouldPerformRequestValidation(ControllerContext controllerContext, ModelBindingContext bindingContext);
    private static bool ShouldUpdateProperty(PropertyDescriptor property, Predicate`1<string> propertyFilter);
    internal object UpdateCollection(ControllerContext controllerContext, ModelBindingContext bindingContext, Type elementType);
    internal object UpdateDictionary(ControllerContext controllerContext, ModelBindingContext bindingContext, Type keyType, Type valueType);
    [CompilerGeneratedAttribute]
private static bool <BindProperty>b__e(ModelError err);
    [CompilerGeneratedAttribute]
private static bool <SetProperty>b__1c(ModelValidator v);
}
public class System.Web.Mvc.DefaultViewLocationCache : object {
    private static TimeSpan _defaultTimeSpan;
    public static IViewLocationCache Null;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeSpan>k__BackingField;
    public TimeSpan TimeSpan { get; private set; }
    public DefaultViewLocationCache(TimeSpan timeSpan);
    private static DefaultViewLocationCache();
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeSpan();
    [CompilerGeneratedAttribute]
private void set_TimeSpan(TimeSpan value);
    public sealed virtual string GetViewLocation(HttpContextBase httpContext, string key);
    public sealed virtual void InsertViewLocation(HttpContextBase httpContext, string key, string virtualPath);
}
public class System.Web.Mvc.DependencyResolver : object {
    private static DependencyResolver _instance;
    private IDependencyResolver _current;
    public static IDependencyResolver Current { get; }
    public IDependencyResolver InnerCurrent { get; }
    private static DependencyResolver();
    public static IDependencyResolver get_Current();
    public static void SetResolver(IDependencyResolver resolver);
    public static void SetResolver(object commonServiceLocator);
    public static void SetResolver(Func`2<Type, object> getService, Func`2<Type, IEnumerable`1<object>> getServices);
    public IDependencyResolver get_InnerCurrent();
    public void InnerSetResolver(IDependencyResolver resolver);
    public void InnerSetResolver(object commonServiceLocator);
    public void InnerSetResolver(Func`2<Type, object> getService, Func`2<Type, IEnumerable`1<object>> getServices);
}
[ExtensionAttribute]
public static class System.Web.Mvc.DependencyResolverExtensions : object {
    [ExtensionAttribute]
public static TService GetService(IDependencyResolver resolver);
    [ExtensionAttribute]
public static IEnumerable`1<TService> GetServices(IDependencyResolver resolver);
}
internal static class System.Web.Mvc.DescriptorUtil : object {
    private static void AppendPartToUniqueIdBuilder(StringBuilder builder, object part);
    public static string CreateUniqueId(Object[] parts);
    public static string CreateUniqueId(IEnumerable`1<object> parts);
    public static TDescriptor[] LazilyFetchOrCreateDescriptors(TDescriptor[]& cacheLocation, Func`1<TReflection[]> initializer, Func`2<TReflection, TDescriptor> converter);
    [CompilerGeneratedAttribute]
private static bool <LazilyFetchOrCreateDescriptors>b__0(TDescriptor descriptor);
}
internal static class System.Web.Mvc.DictionaryHelpers : object {
    public static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
    public static bool DoesAnyKeyHavePrefix(IDictionary`2<string, TValue> dictionary, string prefix);
}
public class System.Web.Mvc.DictionaryValueProvider`1 : object {
    private HashSet`1<string> _prefixes;
    private Dictionary`2<string, ValueProviderResult> _values;
    public DictionaryValueProvider`1(IDictionary`2<string, TValue> dictionary, CultureInfo culture);
    private void AddValues(IDictionary`2<string, TValue> dictionary, CultureInfo culture);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
}
internal class System.Web.Mvc.DynamicViewDataDictionary : DynamicObject {
    private Func`1<ViewDataDictionary> _viewDataThunk;
    private ViewDataDictionary ViewData { get; }
    public DynamicViewDataDictionary(Func`1<ViewDataDictionary> viewDataThunk);
    private ViewDataDictionary get_ViewData();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
}
public class System.Web.Mvc.EmptyModelMetadataProvider : AssociatedMetadataProvider {
    protected virtual ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
}
public class System.Web.Mvc.EmptyModelValidatorProvider : ModelValidatorProvider {
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context);
}
public class System.Web.Mvc.EmptyResult : ActionResult {
    private static EmptyResult _singleton;
    internal static EmptyResult Instance { get; }
    private static EmptyResult();
    internal static EmptyResult get_Instance();
    public virtual void ExecuteResult(ControllerContext context);
}
internal static class System.Web.Mvc.Error : object {
    public static InvalidOperationException AsyncActionMethodSelector_CouldNotFindMethod(string methodName, Type controllerType);
    public static InvalidOperationException AsyncCommon_AsyncResultAlreadyConsumed();
    public static InvalidOperationException AsyncCommon_ControllerMustImplementIAsyncManagerContainer(Type actualControllerType);
    public static ArgumentException AsyncCommon_InvalidAsyncResult(string parameterName);
    public static ArgumentOutOfRangeException AsyncCommon_InvalidTimeout(string parameterName);
    public static InvalidOperationException ReflectedAsyncActionDescriptor_CannotExecuteSynchronously(string actionName);
    public static InvalidOperationException ChildActionOnlyAttribute_MustBeInChildRequest(ActionDescriptor actionDescriptor);
    public static ArgumentException ParameterCannotBeNullOrEmpty(string parameterName);
    public static InvalidOperationException PropertyCannotBeNullOrEmpty(string propertyName);
    public static SynchronousOperationException SynchronizationContextUtil_ExceptionThrown(Exception innerException);
    public static InvalidOperationException ViewDataDictionary_WrongTModelType(Type valueType, Type modelType);
    public static InvalidOperationException ViewDataDictionary_ModelCannotBeNull(Type modelType);
}
public class System.Web.Mvc.ExceptionContext : ControllerContext {
    private ActionResult _result;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceptionHandled>k__BackingField;
    public Exception Exception { get; public set; }
    public bool ExceptionHandled { get; public set; }
    public ActionResult Result { get; public set; }
    public ExceptionContext(ControllerContext controllerContext, Exception exception);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public virtual void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_ExceptionHandled();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandled(bool value);
    public ActionResult get_Result();
    public void set_Result(ActionResult value);
}
public static class System.Web.Mvc.ExpressionHelper : object {
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public static string GetExpressionText(string expression);
    public static string GetExpressionText(LambdaExpression expression);
    private static string GetIndexerInvocation(Expression expression, ParameterExpression[] parameters);
    internal static bool IsSingleArgumentIndexer(Expression expression);
    [CompilerGeneratedAttribute]
private static string <GetExpressionText>b__0(string left, string right);
}
internal class System.Web.Mvc.ExpressionUtil.BinaryExpressionFingerprint : ExpressionFingerprint {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public MethodInfo Method { get; private set; }
    public BinaryExpressionFingerprint(ExpressionType nodeType, Type type, MethodInfo method);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodInfo value);
    public virtual bool Equals(object obj);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
}
internal static class System.Web.Mvc.ExpressionUtil.CachedExpressionCompiler : object {
    public static Func`2<TModel, TValue> Process(Expression`1<Func`2<TModel, TValue>> lambdaExpression);
}
internal class System.Web.Mvc.ExpressionUtil.ConditionalExpressionFingerprint : ExpressionFingerprint {
    public ConditionalExpressionFingerprint(ExpressionType nodeType, Type type);
    public virtual bool Equals(object obj);
}
internal class System.Web.Mvc.ExpressionUtil.ConstantExpressionFingerprint : ExpressionFingerprint {
    public ConstantExpressionFingerprint(ExpressionType nodeType, Type type);
    public virtual bool Equals(object obj);
}
internal class System.Web.Mvc.ExpressionUtil.DefaultExpressionFingerprint : ExpressionFingerprint {
    public DefaultExpressionFingerprint(ExpressionType nodeType, Type type);
    public virtual bool Equals(object obj);
}
internal abstract class System.Web.Mvc.ExpressionUtil.ExpressionFingerprint : object {
    [CompilerGeneratedAttribute]
private ExpressionType <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public ExpressionType NodeType { get; private set; }
    public Type Type { get; private set; }
    protected ExpressionFingerprint(ExpressionType nodeType, Type type);
    [CompilerGeneratedAttribute]
public ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
private void set_NodeType(ExpressionType value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
    protected bool Equals(ExpressionFingerprint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Web.Mvc.ExpressionUtil.ExpressionFingerprintChain : object {
    public List`1<ExpressionFingerprint> Elements;
    public sealed virtual bool Equals(ExpressionFingerprintChain other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Web.Mvc.ExpressionUtil.FingerprintingExpressionVisitor : ExpressionVisitor {
    private List`1<object> _seenConstants;
    private List`1<ParameterExpression> _seenParameters;
    private ExpressionFingerprintChain _currentChain;
    private bool _gaveUp;
    private T GiveUp(T node);
    public static ExpressionFingerprintChain GetFingerprintChain(Expression expr, List`1& capturedConstants);
    public virtual Expression Visit(Expression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitBlock(BlockExpression node);
    protected virtual CatchBlock VisitCatchBlock(CatchBlock node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual Expression VisitDebugInfo(DebugInfoExpression node);
    protected virtual Expression VisitDefault(DefaultExpression node);
    protected virtual Expression VisitDynamic(DynamicExpression node);
    protected virtual ElementInit VisitElementInit(ElementInit node);
    protected virtual Expression VisitExtension(Expression node);
    protected virtual Expression VisitGoto(GotoExpression node);
    protected virtual Expression VisitIndex(IndexExpression node);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitLabel(LabelExpression node);
    protected virtual LabelTarget VisitLabelTarget(LabelTarget node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitLoop(LoopExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node);
    protected virtual MemberBinding VisitMemberBinding(MemberBinding node);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node);
    protected virtual Expression VisitSwitch(SwitchExpression node);
    protected virtual SwitchCase VisitSwitchCase(SwitchCase node);
    protected virtual Expression VisitTry(TryExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
}
internal class System.Web.Mvc.ExpressionUtil.HashCodeCombiner : object {
    private long _combinedHash64;
    public int CombinedHash { get; }
    public void AddFingerprint(ExpressionFingerprint fingerprint);
    public void AddEnumerable(IEnumerable e);
    public void AddInt32(int i);
    public void AddObject(object o);
    public int get_CombinedHash();
}
internal class System.Web.Mvc.ExpressionUtil.Hoisted`2 : MulticastDelegate {
    public Hoisted`2(object object, IntPtr method);
    public virtual TValue Invoke(TModel model, List`1<object> capturedConstants);
    public virtual IAsyncResult BeginInvoke(TModel model, List`1<object> capturedConstants, AsyncCallback callback, object object);
    public virtual TValue EndInvoke(IAsyncResult result);
}
internal class System.Web.Mvc.ExpressionUtil.HoistingExpressionVisitor`2 : ExpressionVisitor {
    private static ParameterExpression _hoistedConstantsParamExpr;
    private int _numConstantsProcessed;
    private static HoistingExpressionVisitor`2();
    public static Expression`1<Hoisted`2<TIn, TOut>> Hoist(Expression`1<Func`2<TIn, TOut>> expr);
    protected virtual Expression VisitConstant(ConstantExpression node);
}
internal class System.Web.Mvc.ExpressionUtil.IndexExpressionFingerprint : ExpressionFingerprint {
    [CompilerGeneratedAttribute]
private PropertyInfo <Indexer>k__BackingField;
    public PropertyInfo Indexer { get; private set; }
    public IndexExpressionFingerprint(ExpressionType nodeType, Type type, PropertyInfo indexer);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Indexer();
    [CompilerGeneratedAttribute]
private void set_Indexer(PropertyInfo value);
    public virtual bool Equals(object obj);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
}
internal class System.Web.Mvc.ExpressionUtil.LambdaExpressionFingerprint : ExpressionFingerprint {
    public LambdaExpressionFingerprint(ExpressionType nodeType, Type type);
    public virtual bool Equals(object obj);
}
internal class System.Web.Mvc.ExpressionUtil.MemberExpressionFingerprint : ExpressionFingerprint {
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    public MemberInfo Member { get; private set; }
    public MemberExpressionFingerprint(ExpressionType nodeType, Type type, MemberInfo member);
    [CompilerGeneratedAttribute]
public MemberInfo get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(MemberInfo value);
    public virtual bool Equals(object obj);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
}
internal class System.Web.Mvc.ExpressionUtil.MethodCallExpressionFingerprint : ExpressionFingerprint {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public MethodInfo Method { get; private set; }
    public MethodCallExpressionFingerprint(ExpressionType nodeType, Type type, MethodInfo method);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodInfo value);
    public virtual bool Equals(object obj);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
}
internal class System.Web.Mvc.ExpressionUtil.ParameterExpressionFingerprint : ExpressionFingerprint {
    [CompilerGeneratedAttribute]
private int <ParameterIndex>k__BackingField;
    public int ParameterIndex { get; private set; }
    public ParameterExpressionFingerprint(ExpressionType nodeType, Type type, int parameterIndex);
    [CompilerGeneratedAttribute]
public int get_ParameterIndex();
    [CompilerGeneratedAttribute]
private void set_ParameterIndex(int value);
    public virtual bool Equals(object obj);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
}
internal class System.Web.Mvc.ExpressionUtil.TypeBinaryExpressionFingerprint : ExpressionFingerprint {
    [CompilerGeneratedAttribute]
private Type <TypeOperand>k__BackingField;
    public Type TypeOperand { get; private set; }
    public TypeBinaryExpressionFingerprint(ExpressionType nodeType, Type type, Type typeOperand);
    [CompilerGeneratedAttribute]
public Type get_TypeOperand();
    [CompilerGeneratedAttribute]
private void set_TypeOperand(Type value);
    public virtual bool Equals(object obj);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
}
internal class System.Web.Mvc.ExpressionUtil.UnaryExpressionFingerprint : ExpressionFingerprint {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public MethodInfo Method { get; private set; }
    public UnaryExpressionFingerprint(ExpressionType nodeType, Type type, MethodInfo method);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodInfo value);
    public virtual bool Equals(object obj);
    internal virtual void AddToHashCodeCombiner(HashCodeCombiner combiner);
}
public class System.Web.Mvc.FieldValidationMetadata : object {
    private string _fieldName;
    private Collection`1<ModelClientValidationRule> _validationRules;
    [CompilerGeneratedAttribute]
private bool <ReplaceValidationMessageContents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationMessageId>k__BackingField;
    public string FieldName { get; public set; }
    public bool ReplaceValidationMessageContents { get; public set; }
    public string ValidationMessageId { get; public set; }
    public ICollection`1<ModelClientValidationRule> ValidationRules { get; }
    public string get_FieldName();
    public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceValidationMessageContents();
    [CompilerGeneratedAttribute]
public void set_ReplaceValidationMessageContents(bool value);
    [CompilerGeneratedAttribute]
public string get_ValidationMessageId();
    [CompilerGeneratedAttribute]
public void set_ValidationMessageId(string value);
    public ICollection`1<ModelClientValidationRule> get_ValidationRules();
}
public class System.Web.Mvc.FileContentResult : FileResult {
    [CompilerGeneratedAttribute]
private Byte[] <FileContents>k__BackingField;
    public Byte[] FileContents { get; private set; }
    public FileContentResult(Byte[] fileContents, string contentType);
    [CompilerGeneratedAttribute]
public Byte[] get_FileContents();
    [CompilerGeneratedAttribute]
private void set_FileContents(Byte[] value);
    protected virtual void WriteFile(HttpResponseBase response);
}
public class System.Web.Mvc.FilePathResult : FileResult {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; private set; }
    public FilePathResult(string fileName, string contentType);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    protected virtual void WriteFile(HttpResponseBase response);
}
public abstract class System.Web.Mvc.FileResult : ActionResult {
    private string _fileDownloadName;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string ContentType { get; private set; }
    public string FileDownloadName { get; public set; }
    protected FileResult(string contentType);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
    public string get_FileDownloadName();
    public void set_FileDownloadName(string value);
    public virtual void ExecuteResult(ControllerContext context);
    protected abstract virtual void WriteFile(HttpResponseBase response);
}
public class System.Web.Mvc.FileStreamResult : FileResult {
    private static int _bufferSize;
    [CompilerGeneratedAttribute]
private Stream <FileStream>k__BackingField;
    public Stream FileStream { get; private set; }
    public FileStreamResult(Stream fileStream, string contentType);
    [CompilerGeneratedAttribute]
public Stream get_FileStream();
    [CompilerGeneratedAttribute]
private void set_FileStream(Stream value);
    protected virtual void WriteFile(HttpResponseBase response);
}
public class System.Web.Mvc.Filter : object {
    public static int DefaultOrder;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterScope <Scope>k__BackingField;
    public object Instance { get; protected set; }
    public int Order { get; protected set; }
    public FilterScope Scope { get; protected set; }
    public Filter(object instance, FilterScope scope, Nullable`1<int> order);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
protected void set_Instance(object value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
protected void set_Order(int value);
    [CompilerGeneratedAttribute]
public FilterScope get_Scope();
    [CompilerGeneratedAttribute]
protected void set_Scope(FilterScope value);
}
[AttributeUsageAttribute("68")]
public abstract class System.Web.Mvc.FilterAttribute : Attribute {
    private static ConcurrentDictionary`2<Type, bool> _multiuseAttributeCache;
    private int _order;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool AllowMultiple { get; }
    public int Order { get; public set; }
    private static FilterAttribute();
    private static bool AllowsMultiple(Type attributeType);
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual int get_Order();
    public void set_Order(int value);
    [CompilerGeneratedAttribute]
private static bool <AllowsMultiple>b__0(Type type);
}
public class System.Web.Mvc.FilterAttributeFilterProvider : object {
    private bool _cacheAttributeInstances;
    [CompilerGeneratedAttribute]
private static Func`2<FilterAttribute, Filter> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<FilterAttribute, Filter> CS$<>9__CachedAnonymousMethodDelegate3;
    public FilterAttributeFilterProvider(bool cacheAttributeInstances);
    protected virtual IEnumerable`1<FilterAttribute> GetActionAttributes(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    protected virtual IEnumerable`1<FilterAttribute> GetControllerAttributes(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    public virtual IEnumerable`1<Filter> GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
private static Filter <GetFilters>b__0(FilterAttribute attr);
    [CompilerGeneratedAttribute]
private static Filter <GetFilters>b__1(FilterAttribute attr);
}
public class System.Web.Mvc.FilterInfo : object {
    private List`1<IActionFilter> _actionFilters;
    private List`1<IAuthorizationFilter> _authorizationFilters;
    private List`1<IExceptionFilter> _exceptionFilters;
    private List`1<IResultFilter> _resultFilters;
    [CompilerGeneratedAttribute]
private static Func`2<Filter, object> CS$<>9__CachedAnonymousMethodDelegate1;
    public IList`1<IActionFilter> ActionFilters { get; }
    public IList`1<IAuthorizationFilter> AuthorizationFilters { get; }
    public IList`1<IExceptionFilter> ExceptionFilters { get; }
    public IList`1<IResultFilter> ResultFilters { get; }
    public FilterInfo(IEnumerable`1<Filter> filters);
    public IList`1<IActionFilter> get_ActionFilters();
    public IList`1<IAuthorizationFilter> get_AuthorizationFilters();
    public IList`1<IExceptionFilter> get_ExceptionFilters();
    public IList`1<IResultFilter> get_ResultFilters();
    [CompilerGeneratedAttribute]
private static object <.ctor>b__0(Filter f);
}
public class System.Web.Mvc.FilterProviderCollection : Collection`1<IFilterProvider> {
    private static FilterComparer _filterComparer;
    private IResolver`1<IEnumerable`1<IFilterProvider>> _serviceResolver;
    [CompilerGeneratedAttribute]
private static Func`2<Filter, Filter> CS$<>9__CachedAnonymousMethodDelegate8;
    private IEnumerable`1<IFilterProvider> CombinedItems { get; }
    public FilterProviderCollection(IList`1<IFilterProvider> providers);
    internal FilterProviderCollection(IResolver`1<IEnumerable`1<IFilterProvider>> serviceResolver, IFilterProvider[] providers);
    private static FilterProviderCollection();
    private IEnumerable`1<IFilterProvider> get_CombinedItems();
    private static bool AllowMultiple(object filterInstance);
    public IEnumerable`1<Filter> GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    private IEnumerable`1<Filter> RemoveDuplicates(IEnumerable`1<Filter> filters);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFilterProvider> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFilterProvider> <.ctor>b__2();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFilterProvider> <.ctor>b__4();
    [CompilerGeneratedAttribute]
private static Filter <GetFilters>b__7(Filter filter);
}
public static class System.Web.Mvc.FilterProviders : object {
    [CompilerGeneratedAttribute]
private static FilterProviderCollection <Providers>k__BackingField;
    public static FilterProviderCollection Providers { get; private set; }
    private static FilterProviders();
    [CompilerGeneratedAttribute]
public static FilterProviderCollection get_Providers();
    [CompilerGeneratedAttribute]
private static void set_Providers(FilterProviderCollection value);
}
public enum System.Web.Mvc.FilterScope : Enum {
    public int value__;
    public static FilterScope First;
    public static FilterScope Global;
    public static FilterScope Controller;
    public static FilterScope Action;
    public static FilterScope Last;
}
[FormCollectionBinderAttribute]
public class System.Web.Mvc.FormCollection : NameValueCollection {
    public FormCollection(NameValueCollection collection);
    internal FormCollection(ControllerBase controller, Func`1<NameValueCollection> validatedValuesThunk, Func`1<NameValueCollection> unvalidatedValuesThunk);
    public ValueProviderResult GetValue(string name);
    public IValueProvider ToValueProvider();
    private sealed virtual override bool System.Web.Mvc.IValueProvider.ContainsPrefix(string prefix);
    private sealed virtual override ValueProviderResult System.Web.Mvc.IValueProvider.GetValue(string key);
}
public class System.Web.Mvc.FormContext : object {
    private Dictionary`2<string, FieldValidationMetadata> _fieldValidators;
    private Dictionary`2<string, bool> _renderedFields;
    [CompilerGeneratedAttribute]
private string <FormId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceValidationSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationSummaryId>k__BackingField;
    public IDictionary`2<string, FieldValidationMetadata> FieldValidators { get; }
    public string FormId { get; public set; }
    public bool ReplaceValidationSummary { get; public set; }
    public string ValidationSummaryId { get; public set; }
    public IDictionary`2<string, FieldValidationMetadata> get_FieldValidators();
    [CompilerGeneratedAttribute]
public string get_FormId();
    [CompilerGeneratedAttribute]
public void set_FormId(string value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceValidationSummary();
    [CompilerGeneratedAttribute]
public void set_ReplaceValidationSummary(bool value);
    [CompilerGeneratedAttribute]
public string get_ValidationSummaryId();
    [CompilerGeneratedAttribute]
public void set_ValidationSummaryId(string value);
    public string GetJsonValidationMetadata();
    public FieldValidationMetadata GetValidationMetadataForField(string fieldName);
    public FieldValidationMetadata GetValidationMetadataForField(string fieldName, bool createIfNotFound);
    public bool RenderedField(string fieldName);
    public void RenderedField(string fieldName, bool value);
}
public enum System.Web.Mvc.FormMethod : Enum {
    public int value__;
    public static FormMethod Get;
    public static FormMethod Post;
}
public class System.Web.Mvc.FormValueProvider : NameValueCollectionValueProvider {
    public FormValueProvider(ControllerContext controllerContext);
    internal FormValueProvider(ControllerContext controllerContext, IUnvalidatedRequestValues unvalidatedValues);
}
public class System.Web.Mvc.FormValueProviderFactory : ValueProviderFactory {
    private UnvalidatedRequestValuesAccessor _unvalidatedValuesAccessor;
    [CompilerGeneratedAttribute]
private static UnvalidatedRequestValuesAccessor CS$<>9__CachedAnonymousMethodDelegate1;
    internal FormValueProviderFactory(UnvalidatedRequestValuesAccessor unvalidatedValuesAccessor);
    public virtual IValueProvider GetValueProvider(ControllerContext controllerContext);
    [CompilerGeneratedAttribute]
private static IUnvalidatedRequestValues <.ctor>b__0(ControllerContext cc);
}
public class System.Web.Mvc.GlobalFilterCollection : object {
    private List`1<Filter> _filters;
    public int Count { get; }
    public int get_Count();
    public void Add(object filter);
    public void Add(object filter, int order);
    private void AddInternal(object filter, Nullable`1<int> order);
    public void Clear();
    public bool Contains(object filter);
    public sealed virtual IEnumerator`1<Filter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerable`1<Filter> System.Web.Mvc.IFilterProvider.GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    public void Remove(object filter);
}
public static class System.Web.Mvc.GlobalFilters : object {
    [CompilerGeneratedAttribute]
private static GlobalFilterCollection <Filters>k__BackingField;
    public static GlobalFilterCollection Filters { get; private set; }
    private static GlobalFilters();
    [CompilerGeneratedAttribute]
public static GlobalFilterCollection get_Filters();
    [CompilerGeneratedAttribute]
private static void set_Filters(GlobalFilterCollection value);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.HandleErrorAttribute : FilterAttribute {
    private static string _defaultView;
    private object _typeId;
    private Type _exceptionType;
    private string _master;
    private string _view;
    public Type ExceptionType { get; public set; }
    public string Master { get; public set; }
    public object TypeId { get; }
    public string View { get; public set; }
    public Type get_ExceptionType();
    public void set_ExceptionType(Type value);
    public string get_Master();
    public void set_Master(string value);
    public virtual object get_TypeId();
    public string get_View();
    public void set_View(string value);
    public virtual void OnException(ExceptionContext filterContext);
}
public class System.Web.Mvc.HandleErrorInfo : object {
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string ActionName { get; private set; }
    public string ControllerName { get; private set; }
    public Exception Exception { get; private set; }
    public HandleErrorInfo(Exception exception, string controllerName, string actionName);
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
private void set_ActionName(string value);
    [CompilerGeneratedAttribute]
public string get_ControllerName();
    [CompilerGeneratedAttribute]
private void set_ControllerName(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
[AttributeUsageAttribute("132")]
public class System.Web.Mvc.HiddenInputAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DisplayValue>k__BackingField;
    public bool DisplayValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisplayValue();
    [CompilerGeneratedAttribute]
public void set_DisplayValue(bool value);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.ChildActionExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<RouteValueDictionary, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, string actionName);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, string actionName, object routeValues);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, string actionName, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, string actionName, string controllerName);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, string actionName, string controllerName, object routeValues);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, string actionName, string controllerName, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, string actionName);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, string actionName, object routeValues);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, string actionName, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, string actionName, string controllerName);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, string actionName, string controllerName, object routeValues);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, string actionName, string controllerName, RouteValueDictionary routeValues);
    internal static void ActionHelper(HtmlHelper htmlHelper, string actionName, string controllerName, RouteValueDictionary routeValues, TextWriter textWriter);
    private static RouteData CreateRouteData(RouteBase route, RouteValueDictionary routeValues, RouteValueDictionary dataTokens, ViewContext parentViewContext);
    private static RouteValueDictionary MergeDictionaries(RouteValueDictionary[] dictionaries);
    [CompilerGeneratedAttribute]
private static bool <MergeDictionaries>b__0(RouteValueDictionary d);
}
internal static class System.Web.Mvc.Html.DefaultDisplayTemplates : object {
    internal static string BooleanTemplate(HtmlHelper html);
    private static string BooleanTemplateCheckbox(bool value);
    private static string BooleanTemplateDropDownList(Nullable`1<bool> value);
    internal static string CollectionTemplate(HtmlHelper html);
    internal static string CollectionTemplate(HtmlHelper html, TemplateHelperDelegate templateHelper);
    internal static string DecimalTemplate(HtmlHelper html);
    internal static string EmailAddressTemplate(HtmlHelper html);
    internal static string HiddenInputTemplate(HtmlHelper html);
    internal static string HtmlTemplate(HtmlHelper html);
    internal static string ObjectTemplate(HtmlHelper html);
    internal static string ObjectTemplate(HtmlHelper html, TemplateHelperDelegate templateHelper);
    private static bool ShouldShow(ModelMetadata metadata, TemplateInfo templateInfo);
    internal static string StringTemplate(HtmlHelper html);
    internal static string UrlTemplate(HtmlHelper html);
}
internal static class System.Web.Mvc.Html.DefaultEditorTemplates : object {
    internal static string BooleanTemplate(HtmlHelper html);
    private static string BooleanTemplateCheckbox(HtmlHelper html, bool value);
    private static string BooleanTemplateDropDownList(HtmlHelper html, Nullable`1<bool> value);
    internal static string CollectionTemplate(HtmlHelper html);
    internal static string CollectionTemplate(HtmlHelper html, TemplateHelperDelegate templateHelper);
    internal static string DecimalTemplate(HtmlHelper html);
    internal static string HiddenInputTemplate(HtmlHelper html);
    internal static string MultilineTextTemplate(HtmlHelper html);
    private static IDictionary`2<string, object> CreateHtmlAttributes(string className);
    internal static string ObjectTemplate(HtmlHelper html);
    internal static string ObjectTemplate(HtmlHelper html, TemplateHelperDelegate templateHelper);
    internal static string PasswordTemplate(HtmlHelper html);
    private static bool ShouldShow(ModelMetadata metadata, TemplateInfo templateInfo);
    internal static string StringTemplate(HtmlHelper html);
    internal static List`1<SelectListItem> TriStateValues(Nullable`1<bool> value);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.DisplayExtensions : object {
    [ExtensionAttribute]
public static MvcHtmlString Display(HtmlHelper html, string expression);
    [ExtensionAttribute]
public static MvcHtmlString Display(HtmlHelper html, string expression, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString Display(HtmlHelper html, string expression, string templateName);
    [ExtensionAttribute]
public static MvcHtmlString Display(HtmlHelper html, string expression, string templateName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString Display(HtmlHelper html, string expression, string templateName, string htmlFieldName);
    [ExtensionAttribute]
public static MvcHtmlString Display(HtmlHelper html, string expression, string templateName, string htmlFieldName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString DisplayFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression);
    [ExtensionAttribute]
public static MvcHtmlString DisplayFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString DisplayFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName);
    [ExtensionAttribute]
public static MvcHtmlString DisplayFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString DisplayFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName, string htmlFieldName);
    [ExtensionAttribute]
public static MvcHtmlString DisplayFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName, string htmlFieldName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString DisplayForModel(HtmlHelper html);
    [ExtensionAttribute]
public static MvcHtmlString DisplayForModel(HtmlHelper html, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString DisplayForModel(HtmlHelper html, string templateName);
    [ExtensionAttribute]
public static MvcHtmlString DisplayForModel(HtmlHelper html, string templateName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString DisplayForModel(HtmlHelper html, string templateName, string htmlFieldName);
    [ExtensionAttribute]
public static MvcHtmlString DisplayForModel(HtmlHelper html, string templateName, string htmlFieldName, object additionalViewData);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.DisplayTextExtensions : object {
    [ExtensionAttribute]
public static MvcHtmlString DisplayText(HtmlHelper html, string name);
    [ExtensionAttribute]
public static MvcHtmlString DisplayTextFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TResult>> expression);
    private static MvcHtmlString DisplayTextHelper(ModelMetadata metadata);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.EditorExtensions : object {
    [ExtensionAttribute]
public static MvcHtmlString Editor(HtmlHelper html, string expression);
    [ExtensionAttribute]
public static MvcHtmlString Editor(HtmlHelper html, string expression, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString Editor(HtmlHelper html, string expression, string templateName);
    [ExtensionAttribute]
public static MvcHtmlString Editor(HtmlHelper html, string expression, string templateName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString Editor(HtmlHelper html, string expression, string templateName, string htmlFieldName);
    [ExtensionAttribute]
public static MvcHtmlString Editor(HtmlHelper html, string expression, string templateName, string htmlFieldName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString EditorFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression);
    [ExtensionAttribute]
public static MvcHtmlString EditorFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString EditorFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName);
    [ExtensionAttribute]
public static MvcHtmlString EditorFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString EditorFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName, string htmlFieldName);
    [ExtensionAttribute]
public static MvcHtmlString EditorFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string templateName, string htmlFieldName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString EditorForModel(HtmlHelper html);
    [ExtensionAttribute]
public static MvcHtmlString EditorForModel(HtmlHelper html, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString EditorForModel(HtmlHelper html, string templateName);
    [ExtensionAttribute]
public static MvcHtmlString EditorForModel(HtmlHelper html, string templateName, object additionalViewData);
    [ExtensionAttribute]
public static MvcHtmlString EditorForModel(HtmlHelper html, string templateName, string htmlFieldName);
    [ExtensionAttribute]
public static MvcHtmlString EditorForModel(HtmlHelper html, string templateName, string htmlFieldName, object additionalViewData);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.FormExtensions : object {
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, object routeValues);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, object routeValues);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, object routeValues, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, RouteValueDictionary routeValues, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, FormMethod method, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, FormMethod method, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, object routeValues, FormMethod method, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, string actionName, string controllerName, RouteValueDictionary routeValues, FormMethod method, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, object routeValues);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, object routeValues);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, object routeValues, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, RouteValueDictionary routeValues, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, FormMethod method, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, FormMethod method, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, object routeValues, FormMethod method, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, RouteValueDictionary routeValues, FormMethod method, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static void EndForm(HtmlHelper htmlHelper);
    [ExtensionAttribute]
private static MvcForm FormHelper(HtmlHelper htmlHelper, string formAction, FormMethod method, IDictionary`2<string, object> htmlAttributes);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.InputExtensions : object {
    [ExtensionAttribute]
public static MvcHtmlString CheckBox(HtmlHelper htmlHelper, string name);
    [ExtensionAttribute]
public static MvcHtmlString CheckBox(HtmlHelper htmlHelper, string name, bool isChecked);
    [ExtensionAttribute]
public static MvcHtmlString CheckBox(HtmlHelper htmlHelper, string name, bool isChecked, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString CheckBox(HtmlHelper htmlHelper, string name, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString CheckBox(HtmlHelper htmlHelper, string name, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString CheckBox(HtmlHelper htmlHelper, string name, bool isChecked, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString CheckBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, bool>> expression);
    [ExtensionAttribute]
public static MvcHtmlString CheckBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, bool>> expression, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString CheckBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, bool>> expression, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString CheckBoxHelper(HtmlHelper htmlHelper, ModelMetadata metadata, string name, Nullable`1<bool> isChecked, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString Hidden(HtmlHelper htmlHelper, string name);
    [ExtensionAttribute]
public static MvcHtmlString Hidden(HtmlHelper htmlHelper, string name, object value);
    [ExtensionAttribute]
public static MvcHtmlString Hidden(HtmlHelper htmlHelper, string name, object value, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString Hidden(HtmlHelper htmlHelper, string name, object value, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString HiddenFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression);
    [ExtensionAttribute]
public static MvcHtmlString HiddenFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString HiddenFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString HiddenHelper(HtmlHelper htmlHelper, ModelMetadata metadata, object value, bool useViewData, string expression, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString Password(HtmlHelper htmlHelper, string name);
    [ExtensionAttribute]
public static MvcHtmlString Password(HtmlHelper htmlHelper, string name, object value);
    [ExtensionAttribute]
public static MvcHtmlString Password(HtmlHelper htmlHelper, string name, object value, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString Password(HtmlHelper htmlHelper, string name, object value, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString PasswordFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression);
    [ExtensionAttribute]
public static MvcHtmlString PasswordFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString PasswordFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString PasswordHelper(HtmlHelper htmlHelper, ModelMetadata metadata, string name, object value, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RadioButton(HtmlHelper htmlHelper, string name, object value);
    [ExtensionAttribute]
public static MvcHtmlString RadioButton(HtmlHelper htmlHelper, string name, object value, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RadioButton(HtmlHelper htmlHelper, string name, object value, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RadioButton(HtmlHelper htmlHelper, string name, object value, bool isChecked);
    [ExtensionAttribute]
public static MvcHtmlString RadioButton(HtmlHelper htmlHelper, string name, object value, bool isChecked, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RadioButton(HtmlHelper htmlHelper, string name, object value, bool isChecked, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RadioButtonFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, object value);
    [ExtensionAttribute]
public static MvcHtmlString RadioButtonFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, object value, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RadioButtonFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, object value, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString RadioButtonHelper(HtmlHelper htmlHelper, ModelMetadata metadata, object model, string name, object value, Nullable`1<bool> isChecked, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextBox(HtmlHelper htmlHelper, string name);
    [ExtensionAttribute]
public static MvcHtmlString TextBox(HtmlHelper htmlHelper, string name, object value);
    [ExtensionAttribute]
public static MvcHtmlString TextBox(HtmlHelper htmlHelper, string name, object value, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextBox(HtmlHelper htmlHelper, string name, object value, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression);
    [ExtensionAttribute]
public static MvcHtmlString TextBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
private static MvcHtmlString TextBoxHelper(HtmlHelper htmlHelper, ModelMetadata metadata, object model, string expression, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString InputHelper(HtmlHelper htmlHelper, InputType inputType, ModelMetadata metadata, string name, object value, bool useViewData, bool isChecked, bool setId, bool isExplicitValue, IDictionary`2<string, object> htmlAttributes);
    private static RouteValueDictionary ToRouteValueDictionary(IDictionary`2<string, object> dictionary);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.LabelExtensions : object {
    [ExtensionAttribute]
public static MvcHtmlString Label(HtmlHelper html, string expression);
    [ExtensionAttribute]
public static MvcHtmlString Label(HtmlHelper html, string expression, string labelText);
    [ExtensionAttribute]
public static MvcHtmlString LabelFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression);
    [ExtensionAttribute]
public static MvcHtmlString LabelFor(HtmlHelper`1<TModel> html, Expression`1<Func`2<TModel, TValue>> expression, string labelText);
    [ExtensionAttribute]
public static MvcHtmlString LabelForModel(HtmlHelper html);
    [ExtensionAttribute]
public static MvcHtmlString LabelForModel(HtmlHelper html, string labelText);
    internal static MvcHtmlString LabelHelper(HtmlHelper html, ModelMetadata metadata, string htmlFieldName, string labelText);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.LinkExtensions : object {
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, object routeValues);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, object routeValues, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, string controllerName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, string controllerName, object routeValues, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, string controllerName, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, string controllerName, string protocol, string hostName, string fragment, object routeValues, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, string actionName, string controllerName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, object routeValues);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, object routeValues);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, object routeValues, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, object routeValues, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, string protocol, string hostName, string fragment, object routeValues, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
}
public class System.Web.Mvc.Html.MvcForm : object {
    private bool _disposed;
    private FormContext _originalFormContext;
    private ViewContext _viewContext;
    private TextWriter _writer;
    [ObsoleteAttribute("The recommended alternative is the constructor MvcForm(ViewContext viewContext).", "True")]
public MvcForm(HttpResponseBase httpResponse);
    public MvcForm(ViewContext viewContext);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void EndForm();
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.PartialExtensions : object {
    [ExtensionAttribute]
public static MvcHtmlString Partial(HtmlHelper htmlHelper, string partialViewName);
    [ExtensionAttribute]
public static MvcHtmlString Partial(HtmlHelper htmlHelper, string partialViewName, ViewDataDictionary viewData);
    [ExtensionAttribute]
public static MvcHtmlString Partial(HtmlHelper htmlHelper, string partialViewName, object model);
    [ExtensionAttribute]
public static MvcHtmlString Partial(HtmlHelper htmlHelper, string partialViewName, object model, ViewDataDictionary viewData);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.RenderPartialExtensions : object {
    [ExtensionAttribute]
public static void RenderPartial(HtmlHelper htmlHelper, string partialViewName);
    [ExtensionAttribute]
public static void RenderPartial(HtmlHelper htmlHelper, string partialViewName, ViewDataDictionary viewData);
    [ExtensionAttribute]
public static void RenderPartial(HtmlHelper htmlHelper, string partialViewName, object model);
    [ExtensionAttribute]
public static void RenderPartial(HtmlHelper htmlHelper, string partialViewName, object model, ViewDataDictionary viewData);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.SelectExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<object, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name);
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name, string optionLabel);
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList);
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, string optionLabel);
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, string optionLabel, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString DropDownList(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, string optionLabel, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString DropDownListFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList);
    [ExtensionAttribute]
public static MvcHtmlString DropDownListFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString DropDownListFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString DropDownListFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList, string optionLabel);
    [ExtensionAttribute]
public static MvcHtmlString DropDownListFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList, string optionLabel, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString DropDownListFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList, string optionLabel, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString DropDownListHelper(HtmlHelper htmlHelper, string expression, IEnumerable`1<SelectListItem> selectList, string optionLabel, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ListBox(HtmlHelper htmlHelper, string name);
    [ExtensionAttribute]
public static MvcHtmlString ListBox(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList);
    [ExtensionAttribute]
public static MvcHtmlString ListBox(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ListBox(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ListBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList);
    [ExtensionAttribute]
public static MvcHtmlString ListBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ListBoxFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString ListBoxHelper(HtmlHelper htmlHelper, string name, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
private static IEnumerable`1<SelectListItem> GetSelectData(HtmlHelper htmlHelper, string name);
    internal static string ListItemToOption(SelectListItem item);
    [ExtensionAttribute]
private static MvcHtmlString SelectInternal(HtmlHelper htmlHelper, string optionLabel, string name, IEnumerable`1<SelectListItem> selectList, bool allowMultiple, IDictionary`2<string, object> htmlAttributes);
    [CompilerGeneratedAttribute]
private static string <SelectInternal>b__3(object value);
}
[ExtensionAttribute]
internal static class System.Web.Mvc.Html.TemplateHelpers : object {
    private static Dictionary`2<DataBoundControlMode, string> modeViewPaths;
    private static Dictionary`2<string, Func`2<HtmlHelper, string>> defaultDisplayActions;
    private static Dictionary`2<string, Func`2<HtmlHelper, string>> defaultEditorActions;
    internal static string cacheItemId;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private static TemplateHelpers();
    internal static string ExecuteTemplate(HtmlHelper html, ViewDataDictionary viewData, string templateName, DataBoundControlMode mode, GetViewNamesDelegate getViewNames, GetDefaultActionsDelegate getDefaultActions);
    internal static Dictionary`2<string, ActionCacheItem> GetActionCache(HtmlHelper html);
    internal static Dictionary`2<string, Func`2<HtmlHelper, string>> GetDefaultActions(DataBoundControlMode mode);
    internal static IEnumerable`1<string> GetViewNames(ModelMetadata metadata, String[] templateHints);
    internal static MvcHtmlString Template(HtmlHelper html, string expression, string templateName, string htmlFieldName, DataBoundControlMode mode, object additionalViewData);
    internal static string Template(HtmlHelper html, string expression, string templateName, string htmlFieldName, DataBoundControlMode mode, object additionalViewData, TemplateHelperDelegate templateHelper);
    [ExtensionAttribute]
internal static MvcHtmlString TemplateFor(HtmlHelper`1<TContainer> html, Expression`1<Func`2<TContainer, TValue>> expression, string templateName, string htmlFieldName, DataBoundControlMode mode, object additionalViewData);
    [ExtensionAttribute]
internal static string TemplateFor(HtmlHelper`1<TContainer> html, Expression`1<Func`2<TContainer, TValue>> expression, string templateName, string htmlFieldName, DataBoundControlMode mode, object additionalViewData, TemplateHelperDelegate templateHelper);
    internal static string TemplateHelper(HtmlHelper html, ModelMetadata metadata, string htmlFieldName, string templateName, DataBoundControlMode mode, object additionalViewData);
    internal static string TemplateHelper(HtmlHelper html, ModelMetadata metadata, string htmlFieldName, string templateName, DataBoundControlMode mode, object additionalViewData, ExecuteTemplateDelegate executeTemplate);
    private static HtmlHelper MakeHtmlHelper(HtmlHelper html, ViewDataDictionary viewData);
    [CompilerGeneratedAttribute]
private static bool <GetViewNames>b__2(string s);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.TextAreaExtensions : object {
    private static int TextAreaRows;
    private static int TextAreaColumns;
    private static Dictionary`2<string, object> implicitRowsAndColumns;
    private static TextAreaExtensions();
    private static Dictionary`2<string, object> GetRowsAndColumnsDictionary(int rows, int columns);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name, string value);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name, string value, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name, string value, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name, string value, int rows, int columns, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextArea(HtmlHelper htmlHelper, string name, string value, int rows, int columns, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextAreaFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression);
    [ExtensionAttribute]
public static MvcHtmlString TextAreaFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextAreaFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextAreaFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, int rows, int columns, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString TextAreaFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, int rows, int columns, IDictionary`2<string, object> htmlAttributes);
    private static MvcHtmlString TextAreaHelper(HtmlHelper htmlHelper, ModelMetadata modelMetadata, string name, IDictionary`2<string, object> rowsAndColumns, IDictionary`2<string, object> htmlAttributes);
}
[ExtensionAttribute]
public static class System.Web.Mvc.Html.ValidationExtensions : object {
    private static string _hiddenListItem;
    private static string _resourceClassKey;
    [CompilerGeneratedAttribute]
private static Func`2<ModelValidator, IEnumerable`1<ModelClientValidationRule>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ModelError, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public static string ResourceClassKey { get; public set; }
    public static string get_ResourceClassKey();
    public static void set_ResourceClassKey(string value);
    private static FieldValidationMetadata ApplyFieldValidationMetadata(HtmlHelper htmlHelper, ModelMetadata modelMetadata, string modelName);
    private static string GetInvalidPropertyValueResource(HttpContextBase httpContext);
    private static string GetUserErrorMessageOrDefault(HttpContextBase httpContext, ModelError error, ModelState modelState);
    [ExtensionAttribute]
public static void Validate(HtmlHelper htmlHelper, string modelName);
    [ExtensionAttribute]
public static void ValidateFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression);
    private static void ValidateHelper(HtmlHelper htmlHelper, ModelMetadata modelMetadata, string expression);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessage(HtmlHelper htmlHelper, string modelName);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessage(HtmlHelper htmlHelper, string modelName, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessage(HtmlHelper htmlHelper, string modelName, string validationMessage);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessage(HtmlHelper htmlHelper, string modelName, string validationMessage, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessage(HtmlHelper htmlHelper, string modelName, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessage(HtmlHelper htmlHelper, string modelName, string validationMessage, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessageFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessageFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, string validationMessage);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessageFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, string validationMessage, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationMessageFor(HtmlHelper`1<TModel> htmlHelper, Expression`1<Func`2<TModel, TProperty>> expression, string validationMessage, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
private static MvcHtmlString ValidationMessageHelper(HtmlHelper htmlHelper, ModelMetadata modelMetadata, string expression, string validationMessage, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper, bool excludePropertyErrors);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper, string message);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper, bool excludePropertyErrors, string message);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper, string message, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper, bool excludePropertyErrors, string message, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper, string message, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ValidationSummary(HtmlHelper htmlHelper, bool excludePropertyErrors, string message, IDictionary`2<string, object> htmlAttributes);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ModelClientValidationRule> <ApplyFieldValidationMetadata>b__0(ModelValidator v);
    [CompilerGeneratedAttribute]
private static bool <ValidationMessageHelper>b__2(ModelError m);
}
public class System.Web.Mvc.HtmlHelper : object {
    public static string ValidationInputCssClassName;
    public static string ValidationInputValidCssClassName;
    public static string ValidationMessageCssClassName;
    public static string ValidationMessageValidCssClassName;
    public static string ValidationSummaryCssClassName;
    public static string ValidationSummaryValidCssClassName;
    [CompilerGeneratedAttribute]
private Func`3<string, ModelMetadata, IEnumerable`1<ModelClientValidationRule>> <ClientValidationRuleFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteCollection <RouteCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewContext <ViewContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewDataContainer <ViewDataContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ModelValidator, IEnumerable`1<ModelClientValidationRule>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public static bool ClientValidationEnabled { get; public set; }
    public static string IdAttributeDotReplacement { get; public set; }
    internal Func`3<string, ModelMetadata, IEnumerable`1<ModelClientValidationRule>> ClientValidationRuleFactory { get; internal set; }
    public RouteCollection RouteCollection { get; private set; }
    public static bool UnobtrusiveJavaScriptEnabled { get; public set; }
    public ViewContext ViewContext { get; private set; }
    public ViewDataDictionary ViewData { get; }
    public IViewDataContainer ViewDataContainer { get; private set; }
    public HtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer);
    public HtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection);
    private static HtmlHelper();
    public static bool get_ClientValidationEnabled();
    public static void set_ClientValidationEnabled(bool value);
    public static string get_IdAttributeDotReplacement();
    public static void set_IdAttributeDotReplacement(string value);
    [CompilerGeneratedAttribute]
internal Func`3<string, ModelMetadata, IEnumerable`1<ModelClientValidationRule>> get_ClientValidationRuleFactory();
    [CompilerGeneratedAttribute]
internal void set_ClientValidationRuleFactory(Func`3<string, ModelMetadata, IEnumerable`1<ModelClientValidationRule>> value);
    [CompilerGeneratedAttribute]
public RouteCollection get_RouteCollection();
    [CompilerGeneratedAttribute]
private void set_RouteCollection(RouteCollection value);
    public static bool get_UnobtrusiveJavaScriptEnabled();
    public static void set_UnobtrusiveJavaScriptEnabled(bool value);
    [CompilerGeneratedAttribute]
public ViewContext get_ViewContext();
    [CompilerGeneratedAttribute]
private void set_ViewContext(ViewContext value);
    public ViewDataDictionary get_ViewData();
    [CompilerGeneratedAttribute]
public IViewDataContainer get_ViewDataContainer();
    [CompilerGeneratedAttribute]
private void set_ViewDataContainer(IViewDataContainer value);
    public static RouteValueDictionary AnonymousObjectToHtmlAttributes(object htmlAttributes);
    public MvcHtmlString AntiForgeryToken();
    public MvcHtmlString AntiForgeryToken(string salt);
    public MvcHtmlString AntiForgeryToken(string salt, string domain, string path);
    public string AttributeEncode(string value);
    public string AttributeEncode(object value);
    public void EnableClientValidation();
    public void EnableClientValidation(bool enabled);
    public void EnableUnobtrusiveJavaScript();
    public void EnableUnobtrusiveJavaScript(bool enabled);
    public string Encode(string value);
    public string Encode(object value);
    internal string EvalString(string key);
    internal bool EvalBoolean(string key);
    internal static IView FindPartialView(ViewContext viewContext, string partialViewName, ViewEngineCollection viewEngineCollection);
    public static string GenerateIdFromName(string name);
    public static string GenerateIdFromName(string name, string idAttributeDotReplacement);
    public static string GenerateLink(RequestContext requestContext, RouteCollection routeCollection, string linkText, string routeName, string actionName, string controllerName, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    public static string GenerateLink(RequestContext requestContext, RouteCollection routeCollection, string linkText, string routeName, string actionName, string controllerName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    private static string GenerateLinkInternal(RequestContext requestContext, RouteCollection routeCollection, string linkText, string routeName, string actionName, string controllerName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes, bool includeImplicitMvcValues);
    public static string GenerateRouteLink(RequestContext requestContext, RouteCollection routeCollection, string linkText, string routeName, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    public static string GenerateRouteLink(RequestContext requestContext, RouteCollection routeCollection, string linkText, string routeName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, IDictionary`2<string, object> htmlAttributes);
    public static string GetFormMethodString(FormMethod method);
    public static string GetInputTypeString(InputType inputType);
    internal object GetModelStateValue(string key, Type destinationType);
    public IDictionary`2<string, object> GetUnobtrusiveValidationAttributes(string name);
    public IDictionary`2<string, object> GetUnobtrusiveValidationAttributes(string name, ModelMetadata metadata);
    public MvcHtmlString HttpMethodOverride(HttpVerbs httpVerb);
    public MvcHtmlString HttpMethodOverride(string httpMethod);
    public IHtmlString Raw(string value);
    internal virtual void RenderPartialInternal(string partialViewName, ViewDataDictionary viewData, object model, TextWriter writer, ViewEngineCollection viewEngineCollection);
    private static void ValidateUnobtrusiveValidationRule(ModelClientValidationRule rule, Dictionary`2<string, object> resultsDictionary, string dictionaryKey);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelClientValidationRule> <.ctor>b__0(string name, ModelMetadata metadata);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ModelClientValidationRule> <.ctor>b__1(ModelValidator v);
    [CompilerGeneratedAttribute]
private static bool <ValidateUnobtrusiveValidationRule>b__6(char c);
    [CompilerGeneratedAttribute]
private static bool <ValidateUnobtrusiveValidationRule>b__7(char c);
}
public class System.Web.Mvc.HtmlHelper`1 : HtmlHelper {
    private ViewDataDictionary`1<TModel> _viewData;
    public ViewDataDictionary`1<TModel> ViewData { get; }
    public HtmlHelper`1(ViewContext viewContext, IViewDataContainer viewDataContainer);
    public HtmlHelper`1(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection);
    public ViewDataDictionary`1<TModel> get_ViewData();
}
[AttributeUsageAttribute("64")]
public class System.Web.Mvc.HttpDeleteAttribute : ActionMethodSelectorAttribute {
    private static AcceptVerbsAttribute _innerAttribute;
    private static HttpDeleteAttribute();
    public virtual bool IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo);
}
public class System.Web.Mvc.HttpFileCollectionValueProvider : DictionaryValueProvider`1<HttpPostedFileBase[]> {
    private static Dictionary`2<string, HttpPostedFileBase[]> _emptyDictionary;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, HttpPostedFileBase>, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, HttpPostedFileBase>, HttpPostedFileBase> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, HttpPostedFileBase>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, HttpPostedFileBase>, HttpPostedFileBase[]> CS$<>9__CachedAnonymousMethodDelegate7;
    public HttpFileCollectionValueProvider(ControllerContext controllerContext);
    private static HttpFileCollectionValueProvider();
    private static Dictionary`2<string, HttpPostedFileBase[]> GetHttpPostedFileDictionary(ControllerContext controllerContext);
    [CompilerGeneratedAttribute]
private static string <GetHttpPostedFileDictionary>b__0(KeyValuePair`2<string, HttpPostedFileBase> el);
    [CompilerGeneratedAttribute]
private static HttpPostedFileBase <GetHttpPostedFileDictionary>b__1(KeyValuePair`2<string, HttpPostedFileBase> el);
    [CompilerGeneratedAttribute]
private static string <GetHttpPostedFileDictionary>b__2(IGrouping`2<string, HttpPostedFileBase> g);
    [CompilerGeneratedAttribute]
private static HttpPostedFileBase[] <GetHttpPostedFileDictionary>b__3(IGrouping`2<string, HttpPostedFileBase> g);
}
public class System.Web.Mvc.HttpFileCollectionValueProviderFactory : ValueProviderFactory {
    public virtual IValueProvider GetValueProvider(ControllerContext controllerContext);
}
[AttributeUsageAttribute("64")]
public class System.Web.Mvc.HttpGetAttribute : ActionMethodSelectorAttribute {
    private static AcceptVerbsAttribute _innerAttribute;
    private static HttpGetAttribute();
    public virtual bool IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo);
}
internal static class System.Web.Mvc.HttpHandlerUtil : object {
    public static IHttpHandler WrapForServerExecute(IHttpHandler httpHandler);
}
public class System.Web.Mvc.HttpNotFoundResult : HttpStatusCodeResult {
    private static int NotFoundCode;
    public HttpNotFoundResult(string statusDescription);
}
[AttributeUsageAttribute("64")]
public class System.Web.Mvc.HttpPostAttribute : ActionMethodSelectorAttribute {
    private static AcceptVerbsAttribute _innerAttribute;
    private static HttpPostAttribute();
    public virtual bool IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo);
}
public class System.Web.Mvc.HttpPostedFileBaseModelBinder : object {
    public sealed virtual object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
    internal static HttpPostedFileBase ChooseFileOrNull(HttpPostedFileBase rawFile);
}
[AttributeUsageAttribute("64")]
public class System.Web.Mvc.HttpPutAttribute : ActionMethodSelectorAttribute {
    private static AcceptVerbsAttribute _innerAttribute;
    private static HttpPutAttribute();
    public virtual bool IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo);
}
[ExtensionAttribute]
public static class System.Web.Mvc.HttpRequestExtensions : object {
    internal static string XHttpMethodOverrideKey;
    [ExtensionAttribute]
public static string GetHttpMethodOverride(HttpRequestBase request);
}
public class System.Web.Mvc.HttpStatusCodeResult : ActionResult {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    public int StatusCode { get; private set; }
    public string StatusDescription { get; private set; }
    public HttpStatusCodeResult(int statusCode);
    public HttpStatusCodeResult(int statusCode, string statusDescription);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_StatusDescription();
    [CompilerGeneratedAttribute]
private void set_StatusDescription(string value);
    public virtual void ExecuteResult(ControllerContext context);
}
public class System.Web.Mvc.HttpUnauthorizedResult : HttpStatusCodeResult {
    private static int UnauthorizedCode;
    public HttpUnauthorizedResult(string statusDescription);
}
[FlagsAttribute]
public enum System.Web.Mvc.HttpVerbs : Enum {
    public int value__;
    public static HttpVerbs Get;
    public static HttpVerbs Post;
    public static HttpVerbs Put;
    public static HttpVerbs Delete;
    public static HttpVerbs Head;
}
public interface System.Web.Mvc.IActionFilter {
    public abstract virtual void OnActionExecuting(ActionExecutingContext filterContext);
    public abstract virtual void OnActionExecuted(ActionExecutedContext filterContext);
}
public interface System.Web.Mvc.IActionInvoker {
    public abstract virtual bool InvokeAction(ControllerContext controllerContext, string actionName);
}
public interface System.Web.Mvc.IAuthorizationFilter {
    public abstract virtual void OnAuthorization(AuthorizationContext filterContext);
}
internal interface System.Web.Mvc.IBuildManager {
    public abstract virtual bool FileExists(string virtualPath);
    public abstract virtual Type GetCompiledType(string virtualPath);
    public abstract virtual ICollection GetReferencedAssemblies();
    public abstract virtual Stream ReadCachedFile(string fileName);
    public abstract virtual Stream CreateCachedFile(string fileName);
}
public interface System.Web.Mvc.IClientValidatable {
    public abstract virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata, ControllerContext context);
}
public interface System.Web.Mvc.IController {
    public abstract virtual void Execute(RequestContext requestContext);
}
public interface System.Web.Mvc.IControllerActivator {
    public abstract virtual IController Create(RequestContext requestContext, Type controllerType);
}
public interface System.Web.Mvc.IControllerFactory {
    public abstract virtual IController CreateController(RequestContext requestContext, string controllerName);
    public abstract virtual SessionStateBehavior GetControllerSessionBehavior(RequestContext requestContext, string controllerName);
    public abstract virtual void ReleaseController(IController controller);
}
public interface System.Web.Mvc.IDependencyResolver {
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerable`1<object> GetServices(Type serviceType);
}
public interface System.Web.Mvc.IExceptionFilter {
    public abstract virtual void OnException(ExceptionContext filterContext);
}
public interface System.Web.Mvc.IFilterProvider {
    public abstract virtual IEnumerable`1<Filter> GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
}
public interface System.Web.Mvc.IMetadataAware {
    public abstract virtual void OnMetadataCreated(ModelMetadata metadata);
}
public interface System.Web.Mvc.IModelBinder {
    public abstract virtual object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
}
public interface System.Web.Mvc.IModelBinderProvider {
    public abstract virtual IModelBinder GetBinder(Type modelType);
}
internal interface System.Web.Mvc.IMvcControlBuilder {
    unknown string Inherits {public set; }
    public abstract virtual void set_Inherits(string value);
}
public interface System.Web.Mvc.IMvcFilter {
    public bool AllowMultiple { get; }
    public int Order { get; }
    public abstract virtual bool get_AllowMultiple();
    public abstract virtual int get_Order();
}
public enum System.Web.Mvc.InputType : Enum {
    public int value__;
    public static InputType CheckBox;
    public static InputType Hidden;
    public static InputType Password;
    public static InputType Radio;
    public static InputType Text;
}
internal interface System.Web.Mvc.IResolver`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
}
public interface System.Web.Mvc.IResultFilter {
    public abstract virtual void OnResultExecuting(ResultExecutingContext filterContext);
    public abstract virtual void OnResultExecuted(ResultExecutedContext filterContext);
}
public interface System.Web.Mvc.IRouteWithArea {
    public string Area { get; }
    public abstract virtual string get_Area();
}
public interface System.Web.Mvc.ITempDataProvider {
    public abstract virtual IDictionary`2<string, object> LoadTempData(ControllerContext controllerContext);
    public abstract virtual void SaveTempData(ControllerContext controllerContext, IDictionary`2<string, object> values);
}
internal interface System.Web.Mvc.IUniquelyIdentifiable {
    public string UniqueId { get; }
    public abstract virtual string get_UniqueId();
}
[DefaultMemberAttribute("Item")]
internal interface System.Web.Mvc.IUnvalidatedRequestValues {
    public NameValueCollection Form { get; }
    public NameValueCollection QueryString { get; }
    public string Item { get; }
    public abstract virtual NameValueCollection get_Form();
    public abstract virtual NameValueCollection get_QueryString();
    public abstract virtual string get_Item(string key);
}
public interface System.Web.Mvc.IUnvalidatedValueProvider {
    public abstract virtual ValueProviderResult GetValue(string key, bool skipValidation);
}
public interface System.Web.Mvc.IValueProvider {
    public abstract virtual bool ContainsPrefix(string prefix);
    public abstract virtual ValueProviderResult GetValue(string key);
}
public interface System.Web.Mvc.IView {
    public abstract virtual void Render(ViewContext viewContext, TextWriter writer);
}
public interface System.Web.Mvc.IViewDataContainer {
    public ViewDataDictionary ViewData { get; public set; }
    public abstract virtual ViewDataDictionary get_ViewData();
    public abstract virtual void set_ViewData(ViewDataDictionary value);
}
public interface System.Web.Mvc.IViewEngine {
    public abstract virtual ViewEngineResult FindPartialView(ControllerContext controllerContext, string partialViewName, bool useCache);
    public abstract virtual ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache);
    public abstract virtual void ReleaseView(ControllerContext controllerContext, IView view);
}
public interface System.Web.Mvc.IViewLocationCache {
    public abstract virtual string GetViewLocation(HttpContextBase httpContext, string key);
    public abstract virtual void InsertViewLocation(HttpContextBase httpContext, string key, string virtualPath);
}
public interface System.Web.Mvc.IViewPageActivator {
    public abstract virtual object Create(ControllerContext controllerContext, Type type);
}
internal interface System.Web.Mvc.IViewStartPageChild {
    public HtmlHelper`1<object> Html { get; }
    public UrlHelper Url { get; }
    public ViewContext ViewContext { get; }
    public abstract virtual HtmlHelper`1<object> get_Html();
    public abstract virtual UrlHelper get_Url();
    public abstract virtual ViewContext get_ViewContext();
}
public class System.Web.Mvc.JavaScriptResult : ActionResult {
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    public string Script { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
    public virtual void ExecuteResult(ControllerContext context);
}
public enum System.Web.Mvc.JsonRequestBehavior : Enum {
    public int value__;
    public static JsonRequestBehavior AllowGet;
    public static JsonRequestBehavior DenyGet;
}
public class System.Web.Mvc.JsonResult : ActionResult {
    [CompilerGeneratedAttribute]
private Encoding <ContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonRequestBehavior <JsonRequestBehavior>k__BackingField;
    public Encoding ContentEncoding { get; public set; }
    public string ContentType { get; public set; }
    public object Data { get; public set; }
    public JsonRequestBehavior JsonRequestBehavior { get; public set; }
    [CompilerGeneratedAttribute]
public Encoding get_ContentEncoding();
    [CompilerGeneratedAttribute]
public void set_ContentEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public JsonRequestBehavior get_JsonRequestBehavior();
    [CompilerGeneratedAttribute]
public void set_JsonRequestBehavior(JsonRequestBehavior value);
    public virtual void ExecuteResult(ControllerContext context);
}
public class System.Web.Mvc.JsonValueProviderFactory : ValueProviderFactory {
    private static void AddToBackingStore(Dictionary`2<string, object> backingStore, string prefix, object value);
    private static object GetDeserializedObject(ControllerContext controllerContext);
    public virtual IValueProvider GetValueProvider(ControllerContext controllerContext);
    private static string MakeArrayKey(string prefix, int index);
    private static string MakePropertyKey(string prefix, string propertyName);
}
public class System.Web.Mvc.LinqBinaryModelBinder : ByteArrayModelBinder {
    public virtual object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
}
[AttributeUsageAttribute("3100")]
public class System.Web.Mvc.ModelBinderAttribute : CustomModelBinderAttribute {
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    public Type BinderType { get; private set; }
    public ModelBinderAttribute(Type binderType);
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
private void set_BinderType(Type value);
    public virtual IModelBinder GetBinder();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Mvc.ModelBinderDictionary : object {
    private IModelBinder _defaultBinder;
    private Dictionary`2<Type, IModelBinder> _innerDictionary;
    private ModelBinderProviderCollection _modelBinderProviders;
    public int Count { get; }
    public IModelBinder DefaultBinder { get; public set; }
    public bool IsReadOnly { get; }
    public ICollection`1<Type> Keys { get; }
    public IModelBinder Item { get; public set; }
    public ICollection`1<IModelBinder> Values { get; }
    internal ModelBinderDictionary(ModelBinderProviderCollection modelBinderProviders);
    public sealed virtual int get_Count();
    public IModelBinder get_DefaultBinder();
    public void set_DefaultBinder(IModelBinder value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<Type> get_Keys();
    public sealed virtual IModelBinder get_Item(Type key);
    public sealed virtual void set_Item(Type key, IModelBinder value);
    public sealed virtual ICollection`1<IModelBinder> get_Values();
    public sealed virtual void Add(KeyValuePair`2<Type, IModelBinder> item);
    public sealed virtual void Add(Type key, IModelBinder value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<Type, IModelBinder> item);
    public sealed virtual bool ContainsKey(Type key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public IModelBinder GetBinder(Type modelType);
    public virtual IModelBinder GetBinder(Type modelType, bool fallbackToDefault);
    private IModelBinder GetBinder(Type modelType, IModelBinder fallbackBinder);
    public sealed virtual IEnumerator`1<KeyValuePair`2<Type, IModelBinder>> GetEnumerator();
    public sealed virtual bool Remove(KeyValuePair`2<Type, IModelBinder> item);
    public sealed virtual bool Remove(Type key);
    public sealed virtual bool TryGetValue(Type key, IModelBinder& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.Mvc.ModelBinderProviderCollection : Collection`1<IModelBinderProvider> {
    private IResolver`1<IEnumerable`1<IModelBinderProvider>> _serviceResolver;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<IModelBinderProvider, IModelBinder>, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<IModelBinderProvider, IModelBinder>, IModelBinder> CS$<>9__CachedAnonymousMethodDelegateb;
    private IEnumerable`1<IModelBinderProvider> CombinedItems { get; }
    public ModelBinderProviderCollection(IList`1<IModelBinderProvider> list);
    internal ModelBinderProviderCollection(IResolver`1<IEnumerable`1<IModelBinderProvider>> resolver, IModelBinderProvider[] providers);
    private IEnumerable`1<IModelBinderProvider> get_CombinedItems();
    protected virtual void InsertItem(int index, IModelBinderProvider item);
    protected virtual void SetItem(int index, IModelBinderProvider item);
    public IModelBinder GetBinder(Type modelType);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IModelBinderProvider> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IModelBinderProvider> <.ctor>b__2();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IModelBinderProvider> <.ctor>b__4();
    [CompilerGeneratedAttribute]
private static bool <GetBinder>b__8(<>f__AnonymousType0`2<IModelBinderProvider, IModelBinder> <>h__TransparentIdentifier6);
    [CompilerGeneratedAttribute]
private static IModelBinder <GetBinder>b__9(<>f__AnonymousType0`2<IModelBinderProvider, IModelBinder> <>h__TransparentIdentifier6);
}
public static class System.Web.Mvc.ModelBinderProviders : object {
    private static ModelBinderProviderCollection _binderProviders;
    public static ModelBinderProviderCollection BinderProviders { get; }
    private static ModelBinderProviders();
    public static ModelBinderProviderCollection get_BinderProviders();
}
public static class System.Web.Mvc.ModelBinders : object {
    private static ModelBinderDictionary _binders;
    public static ModelBinderDictionary Binders { get; }
    private static ModelBinders();
    public static ModelBinderDictionary get_Binders();
    internal static IModelBinder GetBinderFromAttributes(Type type, Func`1<string> errorMessageAccessor);
    internal static IModelBinder GetBinderFromAttributes(ICustomAttributeProvider element, Func`1<string> errorMessageAccessor);
    private static IModelBinder GetBinderFromAttributesImpl(CustomModelBinderAttribute[] attrs, Func`1<string> errorMessageAccessor);
    private static ModelBinderDictionary CreateDefaultBinderDictionary();
}
public class System.Web.Mvc.ModelBindingContext : object {
    private static Predicate`1<string> _defaultPropertyFilter;
    private string _modelName;
    private ModelStateDictionary _modelState;
    private Predicate`1<string> _propertyFilter;
    private Dictionary`2<string, ModelMetadata> _propertyMetadata;
    [CompilerGeneratedAttribute]
private bool <FallbackToEmptyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ModelMetadata, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Predicate`1<string> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool FallbackToEmptyPrefix { get; public set; }
    public object Model { get; public set; }
    public ModelMetadata ModelMetadata { get; public set; }
    public string ModelName { get; public set; }
    public ModelStateDictionary ModelState { get; public set; }
    public Type ModelType { get; public set; }
    public Predicate`1<string> PropertyFilter { get; public set; }
    public IDictionary`2<string, ModelMetadata> PropertyMetadata { get; }
    public IValueProvider ValueProvider { get; public set; }
    internal IUnvalidatedValueProvider UnvalidatedValueProvider { get; }
    public ModelBindingContext(ModelBindingContext bindingContext);
    private static ModelBindingContext();
    [CompilerGeneratedAttribute]
public bool get_FallbackToEmptyPrefix();
    [CompilerGeneratedAttribute]
public void set_FallbackToEmptyPrefix(bool value);
    public object get_Model();
    public void set_Model(object value);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
public void set_ModelMetadata(ModelMetadata value);
    public string get_ModelName();
    public void set_ModelName(string value);
    public ModelStateDictionary get_ModelState();
    public void set_ModelState(ModelStateDictionary value);
    public Type get_ModelType();
    public void set_ModelType(Type value);
    public Predicate`1<string> get_PropertyFilter();
    public void set_PropertyFilter(Predicate`1<string> value);
    public IDictionary`2<string, ModelMetadata> get_PropertyMetadata();
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    internal IUnvalidatedValueProvider get_UnvalidatedValueProvider();
    [CompilerGeneratedAttribute]
private static string <get_PropertyMetadata>b__0(ModelMetadata m);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__2(string _);
}
public class System.Web.Mvc.ModelClientValidationEqualToRule : ModelClientValidationRule {
    public ModelClientValidationEqualToRule(string errorMessage, object other);
}
public class System.Web.Mvc.ModelClientValidationRangeRule : ModelClientValidationRule {
    public ModelClientValidationRangeRule(string errorMessage, object minValue, object maxValue);
}
public class System.Web.Mvc.ModelClientValidationRegexRule : ModelClientValidationRule {
    public ModelClientValidationRegexRule(string errorMessage, string pattern);
}
public class System.Web.Mvc.ModelClientValidationRemoteRule : ModelClientValidationRule {
    public ModelClientValidationRemoteRule(string errorMessage, string url, string httpMethod, string additionalFields);
}
public class System.Web.Mvc.ModelClientValidationRequiredRule : ModelClientValidationRule {
    public ModelClientValidationRequiredRule(string errorMessage);
}
public class System.Web.Mvc.ModelClientValidationRule : object {
    private Dictionary`2<string, object> _validationParameters;
    private string _validationType;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string ErrorMessage { get; public set; }
    public IDictionary`2<string, object> ValidationParameters { get; }
    public string ValidationType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    public IDictionary`2<string, object> get_ValidationParameters();
    public string get_ValidationType();
    public void set_ValidationType(string value);
}
public class System.Web.Mvc.ModelClientValidationStringLengthRule : ModelClientValidationRule {
    public ModelClientValidationStringLengthRule(string errorMessage, int minimumLength, int maximumLength);
}
public class System.Web.Mvc.ModelError : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public Exception Exception { get; private set; }
    public string ErrorMessage { get; private set; }
    public ModelError(Exception exception);
    public ModelError(Exception exception, string errorMessage);
    public ModelError(string errorMessage);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
}
public class System.Web.Mvc.ModelErrorCollection : Collection`1<ModelError> {
    public void Add(Exception exception);
    public void Add(string errorMessage);
}
public class System.Web.Mvc.ModelMetadata : object {
    public static int DefaultOrder;
    private Dictionary`2<string, object> _additionalValues;
    private Type _containerType;
    private bool _convertEmptyStringToNull;
    private bool _isRequired;
    private object _model;
    private Func`1<object> _modelAccessor;
    private Type _modelType;
    private int _order;
    private IEnumerable`1<ModelMetadata> _properties;
    private string _propertyName;
    private Type _realModelType;
    private bool _requestValidationEnabled;
    private bool _showForDisplay;
    private bool _showForEdit;
    private string _simpleDisplayText;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideSurroundingHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NullDisplayText>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Watermark>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ModelMetadata, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public Dictionary`2<string, object> AdditionalValues { get; }
    public Type ContainerType { get; }
    public bool ConvertEmptyStringToNull { get; public set; }
    public string DataTypeName { get; public set; }
    public string Description { get; public set; }
    public string DisplayFormatString { get; public set; }
    public string DisplayName { get; public set; }
    public string EditFormatString { get; public set; }
    public bool HideSurroundingHtml { get; public set; }
    public bool IsComplexType { get; }
    public bool IsNullableValueType { get; }
    public bool IsReadOnly { get; public set; }
    public bool IsRequired { get; public set; }
    public object Model { get; public set; }
    public Type ModelType { get; }
    public string NullDisplayText { get; public set; }
    public int Order { get; public set; }
    public IEnumerable`1<ModelMetadata> Properties { get; }
    public string PropertyName { get; }
    protected ModelMetadataProvider Provider { get; protected set; }
    internal Type RealModelType { get; }
    public bool RequestValidationEnabled { get; public set; }
    public string ShortDisplayName { get; public set; }
    public bool ShowForDisplay { get; public set; }
    public bool ShowForEdit { get; public set; }
    public string SimpleDisplayText { get; public set; }
    public string TemplateHint { get; public set; }
    public string Watermark { get; public set; }
    public ModelMetadata(ModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
    public virtual Dictionary`2<string, object> get_AdditionalValues();
    public Type get_ContainerType();
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DataTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayFormatString();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayFormatString(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EditFormatString();
    [CompilerGeneratedAttribute]
public virtual void set_EditFormatString(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_HideSurroundingHtml();
    [CompilerGeneratedAttribute]
public virtual void set_HideSurroundingHtml(bool value);
    public virtual bool get_IsComplexType();
    public bool get_IsNullableValueType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual void set_IsReadOnly(bool value);
    public virtual bool get_IsRequired();
    public virtual void set_IsRequired(bool value);
    public object get_Model();
    public void set_Model(object value);
    public Type get_ModelType();
    [CompilerGeneratedAttribute]
public virtual string get_NullDisplayText();
    [CompilerGeneratedAttribute]
public virtual void set_NullDisplayText(string value);
    public virtual int get_Order();
    public virtual void set_Order(int value);
    public virtual IEnumerable`1<ModelMetadata> get_Properties();
    public string get_PropertyName();
    [CompilerGeneratedAttribute]
protected ModelMetadataProvider get_Provider();
    [CompilerGeneratedAttribute]
protected void set_Provider(ModelMetadataProvider value);
    internal Type get_RealModelType();
    public virtual bool get_RequestValidationEnabled();
    public virtual void set_RequestValidationEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ShortDisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_ShortDisplayName(string value);
    public virtual bool get_ShowForDisplay();
    public virtual void set_ShowForDisplay(bool value);
    public virtual bool get_ShowForEdit();
    public virtual void set_ShowForEdit(bool value);
    public virtual string get_SimpleDisplayText();
    public virtual void set_SimpleDisplayText(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TemplateHint();
    [CompilerGeneratedAttribute]
public virtual void set_TemplateHint(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Watermark();
    [CompilerGeneratedAttribute]
public virtual void set_Watermark(string value);
    public static ModelMetadata FromLambdaExpression(Expression`1<Func`2<TParameter, TValue>> expression, ViewDataDictionary`1<TParameter> viewData);
    private static ModelMetadata FromModel(ViewDataDictionary viewData);
    public static ModelMetadata FromStringExpression(string expression, ViewDataDictionary viewData);
    public string GetDisplayName();
    private static ModelMetadata GetMetadataFromProvider(Func`1<object> modelAccessor, Type modelType, string propertyName, Type containerType);
    protected virtual string GetSimpleDisplayText();
    public virtual IEnumerable`1<ModelValidator> GetValidators(ControllerContext context);
    [CompilerGeneratedAttribute]
private static int <get_Properties>b__0(ModelMetadata m);
}
public abstract class System.Web.Mvc.ModelMetadataProvider : object {
    public abstract virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    public abstract virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    public abstract virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
}
public class System.Web.Mvc.ModelMetadataProviders : object {
    private ModelMetadataProvider _currentProvider;
    private static ModelMetadataProviders _instance;
    private IResolver`1<ModelMetadataProvider> _resolver;
    public static ModelMetadataProvider Current { get; public set; }
    internal ModelMetadataProvider CurrentInternal { get; internal set; }
    internal ModelMetadataProviders(IResolver`1<ModelMetadataProvider> resolver);
    private static ModelMetadataProviders();
    public static ModelMetadataProvider get_Current();
    public static void set_Current(ModelMetadataProvider value);
    internal ModelMetadataProvider get_CurrentInternal();
    internal void set_CurrentInternal(ModelMetadataProvider value);
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <.ctor>b__0();
}
public class System.Web.Mvc.ModelState : object {
    private ModelErrorCollection _errors;
    [CompilerGeneratedAttribute]
private ValueProviderResult <Value>k__BackingField;
    public ValueProviderResult Value { get; public set; }
    public ModelErrorCollection Errors { get; }
    [CompilerGeneratedAttribute]
public ValueProviderResult get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ValueProviderResult value);
    public ModelErrorCollection get_Errors();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Mvc.ModelStateDictionary : object {
    private Dictionary`2<string, ModelState> _innerDictionary;
    [CompilerGeneratedAttribute]
private static Func`2<ModelState, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsValid { get; }
    public ICollection`1<string> Keys { get; }
    public ModelState Item { get; public set; }
    public ICollection`1<ModelState> Values { get; }
    public ModelStateDictionary(ModelStateDictionary dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsValid();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ModelState get_Item(string key);
    public sealed virtual void set_Item(string key, ModelState value);
    public sealed virtual ICollection`1<ModelState> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, ModelState> item);
    public sealed virtual void Add(string key, ModelState value);
    public void AddModelError(string key, Exception exception);
    public void AddModelError(string key, string errorMessage);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ModelState>> GetEnumerator();
    private ModelState GetModelStateForKey(string key);
    public bool IsValidField(string key);
    public void Merge(ModelStateDictionary dictionary);
    public sealed virtual bool Remove(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool Remove(string key);
    public void SetModelValue(string key, ValueProviderResult value);
    public sealed virtual bool TryGetValue(string key, ModelState& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static bool <get_IsValid>b__0(ModelState modelState);
    [CompilerGeneratedAttribute]
private static bool <IsValidField>b__2(KeyValuePair`2<string, ModelState> entry);
}
public class System.Web.Mvc.ModelValidationResult : object {
    private string _memberName;
    private string _message;
    public string MemberName { get; public set; }
    public string Message { get; public set; }
    public string get_MemberName();
    public void set_MemberName(string value);
    public string get_Message();
    public void set_Message(string value);
}
public abstract class System.Web.Mvc.ModelValidator : object {
    [CompilerGeneratedAttribute]
private ControllerContext <ControllerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadata <Metadata>k__BackingField;
    protected internal ControllerContext ControllerContext { get; private set; }
    public bool IsRequired { get; }
    protected internal ModelMetadata Metadata { get; private set; }
    protected ModelValidator(ModelMetadata metadata, ControllerContext controllerContext);
    [CompilerGeneratedAttribute]
protected internal ControllerContext get_ControllerContext();
    [CompilerGeneratedAttribute]
private void set_ControllerContext(ControllerContext value);
    public virtual bool get_IsRequired();
    [CompilerGeneratedAttribute]
protected internal ModelMetadata get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(ModelMetadata value);
    public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
    public static ModelValidator GetModelValidator(ModelMetadata metadata, ControllerContext context);
    public abstract virtual IEnumerable`1<ModelValidationResult> Validate(object container);
}
public abstract class System.Web.Mvc.ModelValidatorProvider : object {
    public abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context);
}
public class System.Web.Mvc.ModelValidatorProviderCollection : Collection`1<ModelValidatorProvider> {
    private IResolver`1<IEnumerable`1<ModelValidatorProvider>> _serviceResolver;
    private IEnumerable`1<ModelValidatorProvider> CombinedItems { get; }
    public ModelValidatorProviderCollection(IList`1<ModelValidatorProvider> list);
    internal ModelValidatorProviderCollection(IResolver`1<IEnumerable`1<ModelValidatorProvider>> serviceResolver, ModelValidatorProvider[] validatorProvidors);
    private IEnumerable`1<ModelValidatorProvider> get_CombinedItems();
    protected virtual void InsertItem(int index, ModelValidatorProvider item);
    protected virtual void SetItem(int index, ModelValidatorProvider item);
    public IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <.ctor>b__2();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <.ctor>b__4();
}
public static class System.Web.Mvc.ModelValidatorProviders : object {
    private static ModelValidatorProviderCollection _providers;
    public static ModelValidatorProviderCollection Providers { get; }
    private static ModelValidatorProviders();
    public static ModelValidatorProviderCollection get_Providers();
}
public class System.Web.Mvc.MultiSelectList : object {
    [CompilerGeneratedAttribute]
private string <DataTextField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataValueField>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <SelectedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, string> CS$<>9__CachedAnonymousMethodDelegate5;
    public string DataTextField { get; private set; }
    public string DataValueField { get; private set; }
    public IEnumerable Items { get; private set; }
    public IEnumerable SelectedValues { get; private set; }
    public MultiSelectList(IEnumerable items);
    public MultiSelectList(IEnumerable items, IEnumerable selectedValues);
    public MultiSelectList(IEnumerable items, string dataValueField, string dataTextField);
    public MultiSelectList(IEnumerable items, string dataValueField, string dataTextField, IEnumerable selectedValues);
    [CompilerGeneratedAttribute]
public string get_DataTextField();
    [CompilerGeneratedAttribute]
private void set_DataTextField(string value);
    [CompilerGeneratedAttribute]
public string get_DataValueField();
    [CompilerGeneratedAttribute]
private void set_DataValueField(string value);
    [CompilerGeneratedAttribute]
public IEnumerable get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IEnumerable value);
    [CompilerGeneratedAttribute]
public IEnumerable get_SelectedValues();
    [CompilerGeneratedAttribute]
private void set_SelectedValues(IEnumerable value);
    public virtual IEnumerator`1<SelectListItem> GetEnumerator();
    internal IList`1<SelectListItem> GetListItems();
    private IList`1<SelectListItem> GetListItemsWithValueField();
    private IList`1<SelectListItem> GetListItemsWithoutValueField();
    private static string Eval(object container, string expression);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static string <GetListItemsWithValueField>b__2(object value);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType6`2<object, string> <GetListItemsWithValueField>b__3(object item);
}
internal class System.Web.Mvc.MultiServiceResolver`1 : object {
    private IEnumerable`1<TService> _itemsFromService;
    private Func`1<IEnumerable`1<TService>> _itemsThunk;
    private Func`1<IDependencyResolver> _resolverThunk;
    [CompilerGeneratedAttribute]
private static Func`1<IDependencyResolver> CS$<>9__CachedAnonymousMethodDelegate1;
    public IEnumerable`1<TService> Current { get; }
    public MultiServiceResolver`1(Func`1<IEnumerable`1<TService>> itemsThunk);
    internal MultiServiceResolver`1(Func`1<IEnumerable`1<TService>> itemsThunk, IDependencyResolver resolver);
    public sealed virtual IEnumerable`1<TService> get_Current();
    [CompilerGeneratedAttribute]
private static IDependencyResolver <.ctor>b__0();
}
public abstract class System.Web.Mvc.MvcFilter : object {
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool AllowMultiple { get; private set; }
    public int Order { get; private set; }
    protected MvcFilter(bool allowMultiple, int order);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
private void set_AllowMultiple(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
private void set_Order(int value);
}
public class System.Web.Mvc.MvcHandler : object {
    private static object _processRequestTag;
    private ControllerBuilder _controllerBuilder;
    internal static string MvcVersion;
    public static string MvcVersionHeaderName;
    [CompilerGeneratedAttribute]
private static bool <DisableMvcResponseHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, string> CS$<>9__CachedAnonymousMethodDelegate16;
    internal ControllerBuilder ControllerBuilder { get; internal set; }
    public static bool DisableMvcResponseHeader { get; public set; }
    protected bool IsReusable { get; }
    public RequestContext RequestContext { get; private set; }
    private bool System.Web.IHttpHandler.IsReusable { get; }
    public MvcHandler(RequestContext requestContext);
    private static MvcHandler();
    internal ControllerBuilder get_ControllerBuilder();
    internal void set_ControllerBuilder(ControllerBuilder value);
    [CompilerGeneratedAttribute]
public static bool get_DisableMvcResponseHeader();
    [CompilerGeneratedAttribute]
public static void set_DisableMvcResponseHeader(bool value);
    protected virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public RequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
private void set_RequestContext(RequestContext value);
    protected internal virtual void AddVersionHeader(HttpContextBase httpContext);
    protected virtual IAsyncResult BeginProcessRequest(HttpContext httpContext, AsyncCallback callback, object state);
    protected internal virtual IAsyncResult BeginProcessRequest(HttpContextBase httpContext, AsyncCallback callback, object state);
    protected internal virtual void EndProcessRequest(IAsyncResult asyncResult);
    private static string GetMvcVersionString();
    protected virtual void ProcessRequest(HttpContext httpContext);
    protected internal virtual void ProcessRequest(HttpContextBase httpContext);
    private void ProcessRequestInit(HttpContextBase httpContext, IController& controller, IControllerFactory& factory);
    private void RemoveOptionalRoutingParameters();
    private sealed virtual override bool System.Web.IHttpHandler.get_IsReusable();
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext httpContext);
    private sealed virtual override IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    private sealed virtual override void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result);
    [CompilerGeneratedAttribute]
private static bool <RemoveOptionalRoutingParameters>b__13(KeyValuePair`2<string, object> entry);
    [CompilerGeneratedAttribute]
private static string <RemoveOptionalRoutingParameters>b__14(KeyValuePair`2<string, object> entry);
}
public class System.Web.Mvc.MvcHtmlString : HtmlString {
    private string _value;
    public static MvcHtmlString Empty;
    public MvcHtmlString(string value);
    private static MvcHtmlString();
    public static MvcHtmlString Create(string value);
    public static bool IsNullOrEmpty(MvcHtmlString value);
}
public class System.Web.Mvc.MvcHttpHandler : UrlRoutingHandler {
    private static object _processRequestTag;
    private static MvcHttpHandler();
    protected virtual IAsyncResult BeginProcessRequest(HttpContext httpContext, AsyncCallback callback, object state);
    protected internal virtual IAsyncResult BeginProcessRequest(HttpContextBase httpContext, AsyncCallback callback, object state);
    protected internal virtual void EndProcessRequest(IAsyncResult asyncResult);
    private static IHttpHandler GetHttpHandler(HttpContextBase httpContext);
    protected virtual void VerifyAndProcessRequest(IHttpHandler httpHandler, HttpContextBase httpContext);
    private sealed virtual override IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    private sealed virtual override void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result);
}
public class System.Web.Mvc.MvcRouteHandler : object {
    private IControllerFactory _controllerFactory;
    public MvcRouteHandler(IControllerFactory controllerFactory);
    protected virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
    protected virtual SessionStateBehavior GetSessionStateBehavior(RequestContext requestContext);
    private sealed virtual override IHttpHandler System.Web.Routing.IRouteHandler.GetHttpHandler(RequestContext requestContext);
}
public class System.Web.Mvc.MvcWebRazorHostFactory : WebRazorHostFactory {
    public virtual WebPageRazorHost CreateHost(string virtualPath, string physicalPath);
}
[ExtensionAttribute]
public static class System.Web.Mvc.NameValueCollectionExtensions : object {
    [ExtensionAttribute]
public static void CopyTo(NameValueCollection collection, IDictionary`2<string, object> destination);
    [ExtensionAttribute]
public static void CopyTo(NameValueCollection collection, IDictionary`2<string, object> destination, bool replaceEntries);
}
public class System.Web.Mvc.NameValueCollectionValueProvider : object {
    private HashSet`1<string> _prefixes;
    private Dictionary`2<string, ValueProviderResultPlaceholder> _values;
    public NameValueCollectionValueProvider(NameValueCollection collection, CultureInfo culture);
    public NameValueCollectionValueProvider(NameValueCollection collection, NameValueCollection unvalidatedCollection, CultureInfo culture);
    private void AddValues(NameValueCollection validatedCollection, NameValueCollection unvalidatedCollection, CultureInfo culture);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public virtual ValueProviderResult GetValue(string key, bool skipValidation);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.NoAsyncTimeoutAttribute : AsyncTimeoutAttribute {
}
[AttributeUsageAttribute("64")]
public class System.Web.Mvc.NonActionAttribute : ActionMethodSelectorAttribute {
    public virtual bool IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo);
}
internal class System.Web.Mvc.NullViewLocationCache : object {
    public sealed virtual string GetViewLocation(HttpContextBase httpContext, string key);
    public sealed virtual void InsertViewLocation(HttpContextBase httpContext, string key, string virtualPath);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.OutputCacheAttribute : ActionFilterAttribute {
    private static string _cacheKeyPrefix;
    private OutputCacheParameters _cacheSettings;
    private static ObjectCache _childActionCache;
    private Func`1<ObjectCache> _childActionCacheThunk;
    private static object _childActionFilterFinishCallbackKey;
    private bool _locationWasSet;
    private bool _noStoreWasSet;
    [CompilerGeneratedAttribute]
private static Func`1<ObjectCache> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`1<ObjectCache> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<string, <>f__AnonymousType5`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5`2<string, string>, bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate1d;
    public string CacheProfile { get; public set; }
    internal OutputCacheParameters CacheSettings { get; }
    public static ObjectCache ChildActionCache { get; public set; }
    private ObjectCache ChildActionCacheInternal { get; }
    public int Duration { get; public set; }
    public OutputCacheLocation Location { get; public set; }
    public bool NoStore { get; public set; }
    public string SqlDependency { get; public set; }
    public string VaryByContentEncoding { get; public set; }
    public string VaryByCustom { get; public set; }
    public string VaryByHeader { get; public set; }
    public string VaryByParam { get; public set; }
    internal OutputCacheAttribute(ObjectCache childActionCache);
    private static OutputCacheAttribute();
    public string get_CacheProfile();
    public void set_CacheProfile(string value);
    internal OutputCacheParameters get_CacheSettings();
    public static ObjectCache get_ChildActionCache();
    public static void set_ChildActionCache(ObjectCache value);
    private ObjectCache get_ChildActionCacheInternal();
    public int get_Duration();
    public void set_Duration(int value);
    public OutputCacheLocation get_Location();
    public void set_Location(OutputCacheLocation value);
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public string get_SqlDependency();
    public void set_SqlDependency(string value);
    public string get_VaryByContentEncoding();
    public void set_VaryByContentEncoding(string value);
    public string get_VaryByCustom();
    public void set_VaryByCustom(string value);
    public string get_VaryByHeader();
    public void set_VaryByHeader(string value);
    public string get_VaryByParam();
    public void set_VaryByParam(string value);
    private static void ClearChildActionFilterFinishCallback(ControllerContext controllerContext);
    private static void CompleteChildAction(ControllerContext filterContext, bool wasException);
    private static Action`1<bool> GetChildActionFilterFinishCallback(ControllerContext controllerContext);
    internal string GetChildActionUniqueId(ActionExecutingContext filterContext);
    private static string GetUniqueIdFromActionParameters(ActionExecutingContext filterContext, IEnumerable`1<string> keys);
    public static bool IsChildActionCacheActive(ControllerContext controllerContext);
    public virtual void OnActionExecuted(ActionExecutedContext filterContext);
    public virtual void OnActionExecuting(ActionExecutingContext filterContext);
    public sealed virtual void OnException(ExceptionContext filterContext);
    public virtual void OnResultExecuting(ResultExecutingContext filterContext);
    public virtual void OnResultExecuted(ResultExecutedContext filterContext);
    private static void SetChildActionFilterFinishCallback(ControllerContext controllerContext, Action`1<bool> callback);
    private static IEnumerable`1<string> SplitVaryByParam(string varyByParam);
    private void ValidateChildActionConfiguration();
    [CompilerGeneratedAttribute]
private static ObjectCache <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static ObjectCache <.ctor>b__4();
    [CompilerGeneratedAttribute]
private static string <GetUniqueIdFromActionParameters>b__a(string key);
    [CompilerGeneratedAttribute]
private static string <GetUniqueIdFromActionParameters>b__b(string key);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType5`2<string, string> <SplitVaryByParam>b__18(string part);
    [CompilerGeneratedAttribute]
private static bool <SplitVaryByParam>b__19(<>f__AnonymousType5`2<string, string> <>h__TransparentIdentifier17);
    [CompilerGeneratedAttribute]
private static string <SplitVaryByParam>b__1a(<>f__AnonymousType5`2<string, string> <>h__TransparentIdentifier17);
}
public abstract class System.Web.Mvc.ParameterBindingInfo : object {
    public IModelBinder Binder { get; }
    public ICollection`1<string> Exclude { get; }
    public ICollection`1<string> Include { get; }
    public string Prefix { get; }
    public virtual IModelBinder get_Binder();
    public virtual ICollection`1<string> get_Exclude();
    public virtual ICollection`1<string> get_Include();
    public virtual string get_Prefix();
}
public abstract class System.Web.Mvc.ParameterDescriptor : object {
    private static EmptyParameterBindingInfo _emptyBindingInfo;
    public ActionDescriptor ActionDescriptor { get; }
    public ParameterBindingInfo BindingInfo { get; }
    public object DefaultValue { get; }
    public string ParameterName { get; }
    public Type ParameterType { get; }
    private static ParameterDescriptor();
    public abstract virtual ActionDescriptor get_ActionDescriptor();
    public virtual ParameterBindingInfo get_BindingInfo();
    public virtual object get_DefaultValue();
    public abstract virtual string get_ParameterName();
    public abstract virtual Type get_ParameterType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal static class System.Web.Mvc.ParameterInfoUtil : object {
    public static bool TryGetDefaultValue(ParameterInfo parameterInfo, Object& value);
}
public class System.Web.Mvc.PartialViewResult : ViewResultBase {
    protected virtual ViewEngineResult FindView(ControllerContext context);
}
internal static class System.Web.Mvc.PathHelpers : object {
    private static UrlRewriterHelper _urlRewriterHelper;
    private static PathHelpers();
    public static string GenerateClientUrl(HttpContextBase httpContext, string contentPath);
    private static string GenerateClientUrlInternal(HttpContextBase httpContext, string contentPath);
    public static string MakeAbsolute(string basePath, string relativePath);
    public static string MakeRelative(string fromPath, string toPath);
    private static string StripQuery(string path, String& query);
}
[EditorBrowsableAttribute("1")]
public static class System.Web.Mvc.PreApplicationStartCode : object {
    private static bool _startWasCalled;
    [CompilerGeneratedAttribute]
private static Func`1<IDictionary`2<object, object>> CS$<>9__CachedAnonymousMethodDelegate1;
    public static void Start();
    [CompilerGeneratedAttribute]
private static IDictionary`2<object, object> <Start>b__0();
}
public class System.Web.Mvc.QueryStringValueProvider : NameValueCollectionValueProvider {
    public QueryStringValueProvider(ControllerContext controllerContext);
    internal QueryStringValueProvider(ControllerContext controllerContext, IUnvalidatedRequestValues unvalidatedValues);
}
public class System.Web.Mvc.QueryStringValueProviderFactory : ValueProviderFactory {
    private UnvalidatedRequestValuesAccessor _unvalidatedValuesAccessor;
    [CompilerGeneratedAttribute]
private static UnvalidatedRequestValuesAccessor CS$<>9__CachedAnonymousMethodDelegate1;
    internal QueryStringValueProviderFactory(UnvalidatedRequestValuesAccessor unvalidatedValuesAccessor);
    public virtual IValueProvider GetValueProvider(ControllerContext controllerContext);
    [CompilerGeneratedAttribute]
private static IUnvalidatedRequestValues <.ctor>b__0(ControllerContext cc);
}
public class System.Web.Mvc.RangeAttributeAdapter : DataAnnotationsModelValidator`1<RangeAttribute> {
    public RangeAttributeAdapter(ModelMetadata metadata, ControllerContext context, RangeAttribute attribute);
    public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
public class System.Web.Mvc.Razor.ModelSpan : CodeSpan {
    [CompilerGeneratedAttribute]
private string <ModelTypeName>k__BackingField;
    public string ModelTypeName { get; private set; }
    public ModelSpan(SourceLocation start, string content, string modelTypeName);
    internal ModelSpan(ParserContext context, string modelTypeName);
    [CompilerGeneratedAttribute]
public string get_ModelTypeName();
    [CompilerGeneratedAttribute]
private void set_ModelTypeName(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private bool Equals(ModelSpan span);
}
public class System.Web.Mvc.Razor.MvcCSharpRazorCodeGenerator : CSharpRazorCodeGenerator {
    private static string _defaultModelTypeName;
    public MvcCSharpRazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    private void SetBaseType(string modelTypeName);
    protected virtual bool TryVisitSpecialSpan(Span span);
    private void VisitModelSpan(ModelSpan span);
}
public class System.Web.Mvc.Razor.MvcCSharpRazorCodeParser : CSharpCodeParser {
    private static string ModelKeyword;
    private Nullable`1<SourceLocation> _endInheritsLocation;
    private bool _modelStatementFound;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate1;
    protected virtual bool ParseInheritsStatement(CodeBlockInfo block);
    private void CheckForInheritsAndModelStatements();
    private bool ParseModelStatement(CodeBlockInfo block);
    [CompilerGeneratedAttribute]
private static bool <ParseModelStatement>b__0(char c);
}
public class System.Web.Mvc.Razor.MvcVBRazorCodeGenerator : VBRazorCodeGenerator {
    public MvcVBRazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    protected virtual bool TryVisitSpecialSpan(Span span);
    private void VisitModelSpan(ModelSpan span);
}
public class System.Web.Mvc.Razor.MvcVBRazorCodeParser : VBCodeParser {
    private static string ModelTypeKeyword;
    private Nullable`1<SourceLocation> _endInheritsLocation;
    private bool _modelStatementFound;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate1;
    protected virtual bool ParseInheritsStatement(CodeBlockInfo block);
    private void CheckForInheritsAndModelStatements();
    private bool ParseModelStatement(CodeBlockInfo block);
    [CompilerGeneratedAttribute]
private static bool <ParseModelStatement>b__0(char c);
}
public class System.Web.Mvc.Razor.MvcWebPageRazorHost : WebPageRazorHost {
    public MvcWebPageRazorHost(string virtualPath, string physicalPath);
    public virtual RazorCodeGenerator DecorateCodeGenerator(RazorCodeGenerator incomingCodeGenerator);
    public virtual ParserBase DecorateCodeParser(ParserBase incomingCodeParser);
    private void GetRidOfNamespace(string ns);
}
internal class System.Web.Mvc.Razor.StartPageLookupDelegate : MulticastDelegate {
    public StartPageLookupDelegate(object object, IntPtr method);
    public virtual WebPageRenderingBase Invoke(WebPageRenderingBase page, string fileName, IEnumerable`1<string> supportedExtensions);
    public virtual IAsyncResult BeginInvoke(WebPageRenderingBase page, string fileName, IEnumerable`1<string> supportedExtensions, AsyncCallback callback, object object);
    public virtual WebPageRenderingBase EndInvoke(IAsyncResult result);
}
public class System.Web.Mvc.RazorView : BuildManagerCompiledView {
    [CompilerGeneratedAttribute]
private string <LayoutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunViewStartPages>k__BackingField;
    [CompilerGeneratedAttribute]
private StartPageLookupDelegate <StartPageLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ViewStartFileExtensions>k__BackingField;
    public string LayoutPath { get; private set; }
    public bool RunViewStartPages { get; private set; }
    internal StartPageLookupDelegate StartPageLookup { get; internal set; }
    public IEnumerable`1<string> ViewStartFileExtensions { get; private set; }
    public RazorView(ControllerContext controllerContext, string viewPath, string layoutPath, bool runViewStartPages, IEnumerable`1<string> viewStartFileExtensions);
    public RazorView(ControllerContext controllerContext, string viewPath, string layoutPath, bool runViewStartPages, IEnumerable`1<string> viewStartFileExtensions, IViewPageActivator viewPageActivator);
    [CompilerGeneratedAttribute]
public string get_LayoutPath();
    [CompilerGeneratedAttribute]
private void set_LayoutPath(string value);
    [CompilerGeneratedAttribute]
public bool get_RunViewStartPages();
    [CompilerGeneratedAttribute]
private void set_RunViewStartPages(bool value);
    [CompilerGeneratedAttribute]
internal StartPageLookupDelegate get_StartPageLookup();
    [CompilerGeneratedAttribute]
internal void set_StartPageLookup(StartPageLookupDelegate value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ViewStartFileExtensions();
    [CompilerGeneratedAttribute]
private void set_ViewStartFileExtensions(IEnumerable`1<string> value);
    protected virtual void RenderView(ViewContext viewContext, TextWriter writer, object instance);
}
public class System.Web.Mvc.RazorViewEngine : BuildManagerViewEngine {
    internal static string ViewStartFileName;
    public RazorViewEngine(IViewPageActivator viewPageActivator);
    private static RazorViewEngine();
    protected virtual IView CreatePartialView(ControllerContext controllerContext, string partialPath);
    protected virtual IView CreateView(ControllerContext controllerContext, string viewPath, string masterPath);
}
internal abstract class System.Web.Mvc.ReaderWriterCache`2 : object {
    private Dictionary`2<TKey, TValue> _cache;
    private ReaderWriterLockSlim _rwLock;
    protected Dictionary`2<TKey, TValue> Cache { get; }
    protected ReaderWriterCache`2(IEqualityComparer`1<TKey> comparer);
    protected Dictionary`2<TKey, TValue> get_Cache();
    protected TValue FetchOrCreateItem(TKey key, Func`1<TValue> creator);
}
public class System.Web.Mvc.RedirectResult : ActionResult {
    [CompilerGeneratedAttribute]
private bool <Permanent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public bool Permanent { get; private set; }
    public string Url { get; private set; }
    public RedirectResult(string url);
    public RedirectResult(string url, bool permanent);
    [CompilerGeneratedAttribute]
public bool get_Permanent();
    [CompilerGeneratedAttribute]
private void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    public virtual void ExecuteResult(ControllerContext context);
}
public class System.Web.Mvc.RedirectToRouteResult : ActionResult {
    private RouteCollection _routes;
    [CompilerGeneratedAttribute]
private bool <Permanent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    public bool Permanent { get; private set; }
    public string RouteName { get; private set; }
    public RouteValueDictionary RouteValues { get; private set; }
    internal RouteCollection Routes { get; internal set; }
    public RedirectToRouteResult(RouteValueDictionary routeValues);
    public RedirectToRouteResult(string routeName, RouteValueDictionary routeValues);
    public RedirectToRouteResult(string routeName, RouteValueDictionary routeValues, bool permanent);
    [CompilerGeneratedAttribute]
public bool get_Permanent();
    [CompilerGeneratedAttribute]
private void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
private void set_RouteName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
private void set_RouteValues(RouteValueDictionary value);
    internal RouteCollection get_Routes();
    internal void set_Routes(RouteCollection value);
    public virtual void ExecuteResult(ControllerContext context);
}
public class System.Web.Mvc.ReflectedActionDescriptor : ActionDescriptor {
    private string _actionName;
    private ControllerDescriptor _controllerDescriptor;
    private ParameterDescriptor[] _parametersCache;
    private Lazy`1<string> _uniqueId;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public string ActionName { get; }
    public ControllerDescriptor ControllerDescriptor { get; }
    public MethodInfo MethodInfo { get; private set; }
    public string UniqueId { get; }
    public ReflectedActionDescriptor(MethodInfo methodInfo, string actionName, ControllerDescriptor controllerDescriptor);
    internal ReflectedActionDescriptor(MethodInfo methodInfo, string actionName, ControllerDescriptor controllerDescriptor, bool validateMethod);
    public virtual string get_ActionName();
    public virtual ControllerDescriptor get_ControllerDescriptor();
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
    public virtual string get_UniqueId();
    private string CreateUniqueId();
    public virtual object Execute(ControllerContext controllerContext, IDictionary`2<string, object> parameters);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    internal virtual IEnumerable`1<FilterAttribute> GetFilterAttributes(bool useCache);
    public virtual ParameterDescriptor[] GetParameters();
    public virtual ICollection`1<ActionSelector> GetSelectors();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    private ParameterDescriptor[] LazilyFetchParametersCollection();
    internal static ReflectedActionDescriptor TryCreateDescriptor(MethodInfo methodInfo, string name, ControllerDescriptor controllerDescriptor);
    [CompilerGeneratedAttribute]
private ActionSelector <GetSelectors>b__3(ActionMethodSelectorAttribute attr);
    [CompilerGeneratedAttribute]
private ParameterDescriptor <LazilyFetchParametersCollection>b__7(ParameterInfo parameterInfo);
}
internal static class System.Web.Mvc.ReflectedAttributeCache : object {
    private static ConcurrentDictionary`2<MethodInfo, ReadOnlyCollection`1<ActionMethodSelectorAttribute>> _actionMethodSelectorAttributeCache;
    private static ConcurrentDictionary`2<MethodInfo, ReadOnlyCollection`1<ActionNameSelectorAttribute>> _actionNameSelectorAttributeCache;
    private static ConcurrentDictionary`2<MethodInfo, ReadOnlyCollection`1<FilterAttribute>> _methodFilterAttributeCache;
    private static ConcurrentDictionary`2<Type, ReadOnlyCollection`1<FilterAttribute>> _typeFilterAttributeCache;
    private static ReflectedAttributeCache();
    public static ICollection`1<FilterAttribute> GetTypeFilterAttributes(Type type);
    public static ICollection`1<FilterAttribute> GetMethodFilterAttributes(MethodInfo methodInfo);
    public static ICollection`1<ActionMethodSelectorAttribute> GetActionMethodSelectorAttributes(MethodInfo methodInfo);
    public static ICollection`1<ActionNameSelectorAttribute> GetActionNameSelectorAttributes(MethodInfo methodInfo);
    private static ReadOnlyCollection`1<TAttribute> GetAttributes(ConcurrentDictionary`2<TMemberInfo, ReadOnlyCollection`1<TAttribute>> lookup, TMemberInfo memberInfo);
}
public class System.Web.Mvc.ReflectedControllerDescriptor : ControllerDescriptor {
    private ActionDescriptor[] _canonicalActionsCache;
    private Type _controllerType;
    private ActionMethodSelector _selector;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, MethodInfo>, IEnumerable`1<MethodInfo>> CS$<>9__CachedAnonymousMethodDelegate1;
    public Type ControllerType { get; }
    public ReflectedControllerDescriptor(Type controllerType);
    public sealed virtual Type get_ControllerType();
    public virtual ActionDescriptor FindAction(ControllerContext controllerContext, string actionName);
    private MethodInfo[] GetAllActionMethodsFromSelector();
    public virtual ActionDescriptor[] GetCanonicalActions();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    internal virtual IEnumerable`1<FilterAttribute> GetFilterAttributes(bool useCache);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    private ActionDescriptor[] LazilyFetchCanonicalActionsCollection();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<MethodInfo> <GetAllActionMethodsFromSelector>b__0(IGrouping`2<string, MethodInfo> g);
    [CompilerGeneratedAttribute]
private ActionDescriptor <LazilyFetchCanonicalActionsCollection>b__2(MethodInfo methodInfo);
}
internal class System.Web.Mvc.ReflectedParameterBindingInfo : ParameterBindingInfo {
    private ICollection`1<string> _exclude;
    private ICollection`1<string> _include;
    private ParameterInfo _parameterInfo;
    private string _prefix;
    public IModelBinder Binder { get; }
    public ICollection`1<string> Exclude { get; }
    public ICollection`1<string> Include { get; }
    public string Prefix { get; }
    public ReflectedParameterBindingInfo(ParameterInfo parameterInfo);
    public virtual IModelBinder get_Binder();
    public virtual ICollection`1<string> get_Exclude();
    public virtual ICollection`1<string> get_Include();
    public virtual string get_Prefix();
    private void ReadSettingsFromBindAttribute();
    [CompilerGeneratedAttribute]
private string <get_Binder>b__0();
}
public class System.Web.Mvc.ReflectedParameterDescriptor : ParameterDescriptor {
    private ActionDescriptor _actionDescriptor;
    private ReflectedParameterBindingInfo _bindingInfo;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public ActionDescriptor ActionDescriptor { get; }
    public ParameterBindingInfo BindingInfo { get; }
    public object DefaultValue { get; }
    public ParameterInfo ParameterInfo { get; private set; }
    public string ParameterName { get; }
    public Type ParameterType { get; }
    public ReflectedParameterDescriptor(ParameterInfo parameterInfo, ActionDescriptor actionDescriptor);
    public virtual ActionDescriptor get_ActionDescriptor();
    public virtual ParameterBindingInfo get_BindingInfo();
    public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
private void set_ParameterInfo(ParameterInfo value);
    public virtual string get_ParameterName();
    public virtual Type get_ParameterType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
public class System.Web.Mvc.RegularExpressionAttributeAdapter : DataAnnotationsModelValidator`1<RegularExpressionAttribute> {
    public RegularExpressionAttributeAdapter(ModelMetadata metadata, ControllerContext context, RegularExpressionAttribute attribute);
    public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
[AttributeUsageAttribute("128")]
public class System.Web.Mvc.RemoteAttribute : ValidationAttribute {
    private string _additionalFields;
    private String[] _additonalFieldsSplit;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    public string HttpMethod { get; public set; }
    public string AdditionalFields { get; public set; }
    protected RouteValueDictionary RouteData { get; private set; }
    protected string RouteName { get; protected set; }
    protected RouteCollection Routes { get; }
    public RemoteAttribute(string routeName);
    public RemoteAttribute(string action, string controller);
    public RemoteAttribute(string action, string controller, string areaName);
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    public string get_AdditionalFields();
    public void set_AdditionalFields(string value);
    public string FormatAdditionalFieldsForClientValidation(string property);
    public static string FormatPropertyForClientValidation(string property);
    [CompilerGeneratedAttribute]
protected RouteValueDictionary get_RouteData();
    [CompilerGeneratedAttribute]
private void set_RouteData(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
protected string get_RouteName();
    [CompilerGeneratedAttribute]
protected void set_RouteName(string value);
    protected virtual RouteCollection get_Routes();
    protected virtual string GetUrl(ControllerContext controllerContext);
    public virtual string FormatErrorMessage(string name);
    public virtual bool IsValid(object value);
    public sealed virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata, ControllerContext context);
}
public class System.Web.Mvc.RequiredAttributeAdapter : DataAnnotationsModelValidator`1<RequiredAttribute> {
    public RequiredAttributeAdapter(ModelMetadata metadata, ControllerContext context, RequiredAttribute attribute);
    public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.RequireHttpsAttribute : FilterAttribute {
    public virtual void OnAuthorization(AuthorizationContext filterContext);
    protected virtual void HandleNonHttpsRequest(AuthorizationContext filterContext);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class System.Web.Mvc.Resources.MvcResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionMethodSelector_AmbiguousMatch { get; }
    internal static string ActionMethodSelector_AmbiguousMatchType { get; }
    internal static string AsyncActionMethodSelector_AmbiguousMethodMatch { get; }
    internal static string AsyncActionMethodSelector_CouldNotFindMethod { get; }
    internal static string AsyncCommon_AsyncResultAlreadyConsumed { get; }
    internal static string AsyncCommon_ControllerMustImplementIAsyncManagerContainer { get; }
    internal static string AsyncCommon_InvalidAsyncResult { get; }
    internal static string AsyncCommon_InvalidTimeout { get; }
    internal static string AuthorizeAttribute_CannotUseWithinChildActionCache { get; }
    internal static string ChildActionOnlyAttribute_MustBeInChildRequest { get; }
    internal static string ClientDataTypeModelValidatorProvider_FieldMustBeNumeric { get; }
    internal static string Common_NoRouteMatched { get; }
    internal static string Common_NullOrEmpty { get; }
    internal static string Common_PartialViewNotFound { get; }
    internal static string Common_PropertyCannotBeNullOrEmpty { get; }
    internal static string Common_PropertyNotFound { get; }
    internal static string Common_TriState_False { get; }
    internal static string Common_TriState_NotSet { get; }
    internal static string Common_TriState_True { get; }
    internal static string Common_TypeMustDriveFromType { get; }
    internal static string Common_ValueNotValidForProperty { get; }
    internal static string Common_ViewNotFound { get; }
    internal static string CompareAttribute_MustMatch { get; }
    internal static string CompareAttribute_UnknownProperty { get; }
    internal static string Controller_UnknownAction { get; }
    internal static string Controller_UpdateModel_UpdateUnsuccessful { get; }
    internal static string Controller_Validate_ValidationFailed { get; }
    internal static string ControllerBase_CannotExecuteWithNullHttpContext { get; }
    internal static string ControllerBase_CannotHandleMultipleRequests { get; }
    internal static string ControllerBuilder_ErrorCreatingControllerFactory { get; }
    internal static string ControllerBuilder_FactoryReturnedNull { get; }
    internal static string ControllerBuilder_MissingIControllerFactory { get; }
    internal static string CshtmlView_ViewCouldNotBeCreated { get; }
    internal static string CshtmlView_WrongViewBase { get; }
    internal static string DataAnnotationsModelMetadataProvider_UnknownProperty { get; }
    internal static string DataAnnotationsModelMetadataProvider_UnreadableProperty { get; }
    internal static string DataAnnotationsModelValidatorProvider_ConstructorRequirements { get; }
    internal static string DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements { get; }
    internal static string DefaultControllerFactory_ControllerNameAmbiguous_WithoutRouteUrl { get; }
    internal static string DefaultControllerFactory_ControllerNameAmbiguous_WithRouteUrl { get; }
    internal static string DefaultControllerFactory_ErrorCreatingController { get; }
    internal static string DefaultControllerFactory_NoControllerFound { get; }
    internal static string DefaultControllerFactory_TypeDoesNotSubclassControllerBase { get; }
    internal static string DefaultModelBinder_ValueInvalid { get; }
    internal static string DefaultModelBinder_ValueRequired { get; }
    internal static string DefaultViewLocationCache_NegativeTimeSpan { get; }
    internal static string DependencyResolver_DoesNotImplementICommonServiceLocator { get; }
    internal static string ExceptionViewAttribute_NonExceptionType { get; }
    internal static string ExpressionHelper_InvalidIndexerExpression { get; }
    internal static string FilterAttribute_OrderOutOfRange { get; }
    internal static string HtmlHelper_InvalidHttpMethod { get; }
    internal static string HtmlHelper_InvalidHttpVerb { get; }
    internal static string HtmlHelper_MissingSelectData { get; }
    internal static string HtmlHelper_TextAreaParameterOutOfRange { get; }
    internal static string HtmlHelper_ValidationParameterCannotBeEmpty { get; }
    internal static string HtmlHelper_ValidationParameterMustBeLegal { get; }
    internal static string HtmlHelper_ValidationTypeCannotBeEmpty { get; }
    internal static string HtmlHelper_ValidationTypeMustBeLegal { get; }
    internal static string HtmlHelper_ValidationTypeMustBeUnique { get; }
    internal static string HtmlHelper_WrongSelectDataType { get; }
    internal static string JsonRequest_GetNotAllowed { get; }
    internal static string ModelBinderAttribute_ErrorCreatingModelBinder { get; }
    internal static string ModelBinderAttribute_TypeNotIModelBinder { get; }
    internal static string ModelBinderDictionary_MultipleAttributes { get; }
    internal static string ModelMetadata_PropertyNotSettable { get; }
    internal static string MvcRazorCodeParser_CannotHaveModelAndInheritsKeyword { get; }
    internal static string MvcRazorCodeParser_ModelKeywordMustBeFollowedByTypeName { get; }
    internal static string MvcRazorCodeParser_OnlyOneModelStatementIsAllowed { get; }
    internal static string OutputCacheAttribute_CannotNestChildCache { get; }
    internal static string OutputCacheAttribute_ChildAction_UnsupportedSetting { get; }
    internal static string OutputCacheAttribute_InvalidDuration { get; }
    internal static string OutputCacheAttribute_InvalidVaryByParam { get; }
    internal static string PrivateAssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties { get; }
    internal static string RedirectAction_CannotRedirectInChildAction { get; }
    internal static string ReflectedActionDescriptor_CannotCallInstanceMethodOnNonControllerType { get; }
    internal static string ReflectedActionDescriptor_CannotCallMethodsWithOutOrRefParameters { get; }
    internal static string ReflectedActionDescriptor_CannotCallOpenGenericMethods { get; }
    internal static string ReflectedActionDescriptor_CannotCallStaticMethod { get; }
    internal static string ReflectedActionDescriptor_ParameterCannotBeNull { get; }
    internal static string ReflectedActionDescriptor_ParameterNotInDictionary { get; }
    internal static string ReflectedActionDescriptor_ParameterValueHasWrongType { get; }
    internal static string ReflectedAsyncActionDescriptor_CannotExecuteSynchronously { get; }
    internal static string ReflectedParameterBindingInfo_MultipleConverterAttributes { get; }
    internal static string RemoteAttribute_NoUrlFound { get; }
    internal static string RemoteAttribute_RemoteValidationFailed { get; }
    internal static string RequireHttpsAttribute_MustUseSsl { get; }
    internal static string SessionStateTempDataProvider_SessionStateDisabled { get; }
    internal static string SingleServiceResolver_CannotRegisterTwoInstances { get; }
    internal static string SynchronizationContextUtil_ExceptionThrown { get; }
    internal static string TemplateHelpers_NoTemplate { get; }
    internal static string TemplateHelpers_TemplateLimitations { get; }
    internal static string Templates_TypeMustImplementIEnumerable { get; }
    internal static string TypeCache_DoNotModify { get; }
    internal static string ValidatableObjectAdapter_IncompatibleType { get; }
    internal static string ValueProviderResult_ConversionThrew { get; }
    internal static string ValueProviderResult_NoConverterExists { get; }
    internal static string ViewDataDictionary_ModelCannotBeNull { get; }
    internal static string ViewDataDictionary_WrongTModelType { get; }
    internal static string ViewMasterPage_RequiresViewPage { get; }
    internal static string ViewPageHttpHandlerWrapper_ExceptionOccurred { get; }
    internal static string ViewStartPage_RequiresMvcRazorView { get; }
    internal static string ViewUserControl_RequiresViewDataProvider { get; }
    internal static string ViewUserControl_RequiresViewPage { get; }
    internal static string WebFormViewEngine_UserControlCannotHaveMaster { get; }
    internal static string WebFormViewEngine_ViewCouldNotBeCreated { get; }
    internal static string WebFormViewEngine_WrongViewBase { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionMethodSelector_AmbiguousMatch();
    internal static string get_ActionMethodSelector_AmbiguousMatchType();
    internal static string get_AsyncActionMethodSelector_AmbiguousMethodMatch();
    internal static string get_AsyncActionMethodSelector_CouldNotFindMethod();
    internal static string get_AsyncCommon_AsyncResultAlreadyConsumed();
    internal static string get_AsyncCommon_ControllerMustImplementIAsyncManagerContainer();
    internal static string get_AsyncCommon_InvalidAsyncResult();
    internal static string get_AsyncCommon_InvalidTimeout();
    internal static string get_AuthorizeAttribute_CannotUseWithinChildActionCache();
    internal static string get_ChildActionOnlyAttribute_MustBeInChildRequest();
    internal static string get_ClientDataTypeModelValidatorProvider_FieldMustBeNumeric();
    internal static string get_Common_NoRouteMatched();
    internal static string get_Common_NullOrEmpty();
    internal static string get_Common_PartialViewNotFound();
    internal static string get_Common_PropertyCannotBeNullOrEmpty();
    internal static string get_Common_PropertyNotFound();
    internal static string get_Common_TriState_False();
    internal static string get_Common_TriState_NotSet();
    internal static string get_Common_TriState_True();
    internal static string get_Common_TypeMustDriveFromType();
    internal static string get_Common_ValueNotValidForProperty();
    internal static string get_Common_ViewNotFound();
    internal static string get_CompareAttribute_MustMatch();
    internal static string get_CompareAttribute_UnknownProperty();
    internal static string get_Controller_UnknownAction();
    internal static string get_Controller_UpdateModel_UpdateUnsuccessful();
    internal static string get_Controller_Validate_ValidationFailed();
    internal static string get_ControllerBase_CannotExecuteWithNullHttpContext();
    internal static string get_ControllerBase_CannotHandleMultipleRequests();
    internal static string get_ControllerBuilder_ErrorCreatingControllerFactory();
    internal static string get_ControllerBuilder_FactoryReturnedNull();
    internal static string get_ControllerBuilder_MissingIControllerFactory();
    internal static string get_CshtmlView_ViewCouldNotBeCreated();
    internal static string get_CshtmlView_WrongViewBase();
    internal static string get_DataAnnotationsModelMetadataProvider_UnknownProperty();
    internal static string get_DataAnnotationsModelMetadataProvider_UnreadableProperty();
    internal static string get_DataAnnotationsModelValidatorProvider_ConstructorRequirements();
    internal static string get_DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements();
    internal static string get_DefaultControllerFactory_ControllerNameAmbiguous_WithoutRouteUrl();
    internal static string get_DefaultControllerFactory_ControllerNameAmbiguous_WithRouteUrl();
    internal static string get_DefaultControllerFactory_ErrorCreatingController();
    internal static string get_DefaultControllerFactory_NoControllerFound();
    internal static string get_DefaultControllerFactory_TypeDoesNotSubclassControllerBase();
    internal static string get_DefaultModelBinder_ValueInvalid();
    internal static string get_DefaultModelBinder_ValueRequired();
    internal static string get_DefaultViewLocationCache_NegativeTimeSpan();
    internal static string get_DependencyResolver_DoesNotImplementICommonServiceLocator();
    internal static string get_ExceptionViewAttribute_NonExceptionType();
    internal static string get_ExpressionHelper_InvalidIndexerExpression();
    internal static string get_FilterAttribute_OrderOutOfRange();
    internal static string get_HtmlHelper_InvalidHttpMethod();
    internal static string get_HtmlHelper_InvalidHttpVerb();
    internal static string get_HtmlHelper_MissingSelectData();
    internal static string get_HtmlHelper_TextAreaParameterOutOfRange();
    internal static string get_HtmlHelper_ValidationParameterCannotBeEmpty();
    internal static string get_HtmlHelper_ValidationParameterMustBeLegal();
    internal static string get_HtmlHelper_ValidationTypeCannotBeEmpty();
    internal static string get_HtmlHelper_ValidationTypeMustBeLegal();
    internal static string get_HtmlHelper_ValidationTypeMustBeUnique();
    internal static string get_HtmlHelper_WrongSelectDataType();
    internal static string get_JsonRequest_GetNotAllowed();
    internal static string get_ModelBinderAttribute_ErrorCreatingModelBinder();
    internal static string get_ModelBinderAttribute_TypeNotIModelBinder();
    internal static string get_ModelBinderDictionary_MultipleAttributes();
    internal static string get_ModelMetadata_PropertyNotSettable();
    internal static string get_MvcRazorCodeParser_CannotHaveModelAndInheritsKeyword();
    internal static string get_MvcRazorCodeParser_ModelKeywordMustBeFollowedByTypeName();
    internal static string get_MvcRazorCodeParser_OnlyOneModelStatementIsAllowed();
    internal static string get_OutputCacheAttribute_CannotNestChildCache();
    internal static string get_OutputCacheAttribute_ChildAction_UnsupportedSetting();
    internal static string get_OutputCacheAttribute_InvalidDuration();
    internal static string get_OutputCacheAttribute_InvalidVaryByParam();
    internal static string get_PrivateAssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties();
    internal static string get_RedirectAction_CannotRedirectInChildAction();
    internal static string get_ReflectedActionDescriptor_CannotCallInstanceMethodOnNonControllerType();
    internal static string get_ReflectedActionDescriptor_CannotCallMethodsWithOutOrRefParameters();
    internal static string get_ReflectedActionDescriptor_CannotCallOpenGenericMethods();
    internal static string get_ReflectedActionDescriptor_CannotCallStaticMethod();
    internal static string get_ReflectedActionDescriptor_ParameterCannotBeNull();
    internal static string get_ReflectedActionDescriptor_ParameterNotInDictionary();
    internal static string get_ReflectedActionDescriptor_ParameterValueHasWrongType();
    internal static string get_ReflectedAsyncActionDescriptor_CannotExecuteSynchronously();
    internal static string get_ReflectedParameterBindingInfo_MultipleConverterAttributes();
    internal static string get_RemoteAttribute_NoUrlFound();
    internal static string get_RemoteAttribute_RemoteValidationFailed();
    internal static string get_RequireHttpsAttribute_MustUseSsl();
    internal static string get_SessionStateTempDataProvider_SessionStateDisabled();
    internal static string get_SingleServiceResolver_CannotRegisterTwoInstances();
    internal static string get_SynchronizationContextUtil_ExceptionThrown();
    internal static string get_TemplateHelpers_NoTemplate();
    internal static string get_TemplateHelpers_TemplateLimitations();
    internal static string get_Templates_TypeMustImplementIEnumerable();
    internal static string get_TypeCache_DoNotModify();
    internal static string get_ValidatableObjectAdapter_IncompatibleType();
    internal static string get_ValueProviderResult_ConversionThrew();
    internal static string get_ValueProviderResult_NoConverterExists();
    internal static string get_ViewDataDictionary_ModelCannotBeNull();
    internal static string get_ViewDataDictionary_WrongTModelType();
    internal static string get_ViewMasterPage_RequiresViewPage();
    internal static string get_ViewPageHttpHandlerWrapper_ExceptionOccurred();
    internal static string get_ViewStartPage_RequiresMvcRazorView();
    internal static string get_ViewUserControl_RequiresViewDataProvider();
    internal static string get_ViewUserControl_RequiresViewPage();
    internal static string get_WebFormViewEngine_UserControlCannotHaveMaster();
    internal static string get_WebFormViewEngine_ViewCouldNotBeCreated();
    internal static string get_WebFormViewEngine_WrongViewBase();
}
public class System.Web.Mvc.ResultExecutedContext : ControllerContext {
    [CompilerGeneratedAttribute]
private bool <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceptionHandled>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionResult <Result>k__BackingField;
    public bool Canceled { get; public set; }
    public Exception Exception { get; public set; }
    public bool ExceptionHandled { get; public set; }
    public ActionResult Result { get; public set; }
    public ResultExecutedContext(ControllerContext controllerContext, ActionResult result, bool canceled, Exception exception);
    [CompilerGeneratedAttribute]
public virtual bool get_Canceled();
    [CompilerGeneratedAttribute]
public virtual void set_Canceled(bool value);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public virtual void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_ExceptionHandled();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandled(bool value);
    [CompilerGeneratedAttribute]
public virtual ActionResult get_Result();
    [CompilerGeneratedAttribute]
public virtual void set_Result(ActionResult value);
}
public class System.Web.Mvc.ResultExecutingContext : ControllerContext {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionResult <Result>k__BackingField;
    public bool Cancel { get; public set; }
    public ActionResult Result { get; public set; }
    public ResultExecutingContext(ControllerContext controllerContext, ActionResult result);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    [CompilerGeneratedAttribute]
public virtual ActionResult get_Result();
    [CompilerGeneratedAttribute]
public virtual void set_Result(ActionResult value);
}
[ExtensionAttribute]
public static class System.Web.Mvc.RouteCollectionExtensions : object {
    private static RouteCollection FilterRouteCollectionByArea(RouteCollection routes, string areaName, Boolean& usingAreas);
    [ExtensionAttribute]
public static VirtualPathData GetVirtualPathForArea(RouteCollection routes, RequestContext requestContext, RouteValueDictionary values);
    [ExtensionAttribute]
public static VirtualPathData GetVirtualPathForArea(RouteCollection routes, RequestContext requestContext, string name, RouteValueDictionary values);
    [ExtensionAttribute]
internal static VirtualPathData GetVirtualPathForArea(RouteCollection routes, RequestContext requestContext, string name, RouteValueDictionary values, Boolean& usingAreas);
    [ExtensionAttribute]
public static void IgnoreRoute(RouteCollection routes, string url);
    [ExtensionAttribute]
public static void IgnoreRoute(RouteCollection routes, string url, object constraints);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, object defaults);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, object defaults, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, object defaults, object constraints, String[] namespaces);
}
public class System.Web.Mvc.RouteDataValueProvider : DictionaryValueProvider`1<object> {
    public RouteDataValueProvider(ControllerContext controllerContext);
}
public class System.Web.Mvc.RouteDataValueProviderFactory : ValueProviderFactory {
    public virtual IValueProvider GetValueProvider(ControllerContext controllerContext);
}
internal static class System.Web.Mvc.RouteValuesHelpers : object {
    public static RouteValueDictionary GetRouteValues(RouteValueDictionary routeValues);
    public static RouteValueDictionary MergeRouteValues(string actionName, string controllerName, RouteValueDictionary implicitRouteValues, RouteValueDictionary routeValues, bool includeImplicitMvcValues);
}
internal static class System.Web.Mvc.SecurityUtil : object {
    private static Action`1<Action> _callInAppTrustThunk;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate6;
    private static Action`1<Action> GetCallInAppTrustThunk();
    public static TResult ProcessInApplicationTrust(Func`1<TResult> func);
    public static void ProcessInApplicationTrust(Action action);
    [CompilerGeneratedAttribute]
private static void <GetCallInAppTrustThunk>b__0(Action f);
    [CompilerGeneratedAttribute]
private static void <GetCallInAppTrustThunk>b__2(Action f);
    [CompilerGeneratedAttribute]
private static void <GetCallInAppTrustThunk>b__3(Action f);
}
public class System.Web.Mvc.SelectList : MultiSelectList {
    [CompilerGeneratedAttribute]
private object <SelectedValue>k__BackingField;
    public object SelectedValue { get; private set; }
    public SelectList(IEnumerable items);
    public SelectList(IEnumerable items, object selectedValue);
    public SelectList(IEnumerable items, string dataValueField, string dataTextField);
    public SelectList(IEnumerable items, string dataValueField, string dataTextField, object selectedValue);
    [CompilerGeneratedAttribute]
public object get_SelectedValue();
    [CompilerGeneratedAttribute]
private void set_SelectedValue(object value);
    private static IEnumerable ToEnumerable(object selectedValue);
}
public class System.Web.Mvc.SelectListItem : object {
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool Selected { get; public set; }
    public string Text { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[AttributeUsageAttribute("4")]
public class System.Web.Mvc.SessionStateAttribute : Attribute {
    [CompilerGeneratedAttribute]
private SessionStateBehavior <Behavior>k__BackingField;
    public SessionStateBehavior Behavior { get; private set; }
    public SessionStateAttribute(SessionStateBehavior behavior);
    [CompilerGeneratedAttribute]
public SessionStateBehavior get_Behavior();
    [CompilerGeneratedAttribute]
private void set_Behavior(SessionStateBehavior value);
}
public class System.Web.Mvc.SessionStateTempDataProvider : object {
    internal static string TempDataSessionStateKey;
    public virtual IDictionary`2<string, object> LoadTempData(ControllerContext controllerContext);
    public virtual void SaveTempData(ControllerContext controllerContext, IDictionary`2<string, object> values);
}
internal class System.Web.Mvc.SingleServiceResolver`1 : object {
    private TService _currentValueFromResolver;
    private Func`1<TService> _currentValueThunk;
    private TService _defaultValue;
    private Func`1<IDependencyResolver> _resolverThunk;
    private string _callerMethodName;
    [CompilerGeneratedAttribute]
private static Func`1<IDependencyResolver> CS$<>9__CachedAnonymousMethodDelegate1;
    public TService Current { get; }
    public SingleServiceResolver`1(Func`1<TService> currentValueThunk, TService defaultValue, string callerMethodName);
    internal SingleServiceResolver`1(Func`1<TService> staticAccessor, TService defaultValue, IDependencyResolver resolver, string callerMethodName);
    public sealed virtual TService get_Current();
    [CompilerGeneratedAttribute]
private static IDependencyResolver <.ctor>b__0();
}
public class System.Web.Mvc.StringLengthAttributeAdapter : DataAnnotationsModelValidator`1<StringLengthAttribute> {
    public StringLengthAttributeAdapter(ModelMetadata metadata, ControllerContext context, StringLengthAttribute attribute);
    public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
[ExtensionAttribute]
internal static class System.Web.Mvc.TagBuilderExtensions : object {
    [ExtensionAttribute]
internal static MvcHtmlString ToMvcHtmlString(TagBuilder tagBuilder, TagRenderMode renderMode);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Mvc.TempDataDictionary : object {
    internal static string _tempDataSerializationKey;
    private Dictionary`2<string, object> _data;
    private HashSet`1<string> _initialKeys;
    private HashSet`1<string> _retainedKeys;
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<string> get_Keys();
    public void Keep();
    public void Keep(string key);
    public void Load(ControllerContext controllerContext, ITempDataProvider tempDataProvider);
    public object Peek(string key);
    public void Save(ControllerContext controllerContext, ITempDataProvider tempDataProvider);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(string key);
    public bool ContainsValue(object value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> keyValuePair);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.Mvc.TemplateInfo : object {
    private string _htmlFieldPrefix;
    private object _formattedModelValue;
    private HashSet`1<object> _visitedObjects;
    public object FormattedModelValue { get; public set; }
    public string HtmlFieldPrefix { get; public set; }
    public int TemplateDepth { get; }
    internal HashSet`1<object> VisitedObjects { get; internal set; }
    public object get_FormattedModelValue();
    public void set_FormattedModelValue(object value);
    public string get_HtmlFieldPrefix();
    public void set_HtmlFieldPrefix(string value);
    public int get_TemplateDepth();
    internal HashSet`1<object> get_VisitedObjects();
    internal void set_VisitedObjects(HashSet`1<object> value);
    public string GetFullHtmlFieldId(string partialFieldName);
    public string GetFullHtmlFieldName(string partialFieldName);
    public bool Visited(ModelMetadata metadata);
}
internal class System.Web.Mvc.TryGetValueDelegate : MulticastDelegate {
    public TryGetValueDelegate(object object, IntPtr method);
    public virtual bool Invoke(object dictionary, string key, Object& value);
    public virtual IAsyncResult BeginInvoke(object dictionary, string key, Object& value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Object& value, IAsyncResult result);
}
internal class System.Web.Mvc.TypeCacheSerializer : object {
    private static Guid _mvcVersionId;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CurrentDateOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Module> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<Module, Type>, Assembly> CS$<>9__CachedAnonymousMethodDelegate3;
    private DateTime CurrentDate { get; }
    internal Nullable`1<DateTime> CurrentDateOverride { get; internal set; }
    private static TypeCacheSerializer();
    private DateTime get_CurrentDate();
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTime> get_CurrentDateOverride();
    [CompilerGeneratedAttribute]
internal void set_CurrentDateOverride(Nullable`1<DateTime> value);
    public List`1<Type> DeserializeTypes(TextReader input);
    public void SerializeTypes(IEnumerable`1<Type> types, TextWriter output);
    [CompilerGeneratedAttribute]
private static Module <SerializeTypes>b__0(Type type);
    [CompilerGeneratedAttribute]
private static Assembly <SerializeTypes>b__1(IGrouping`2<Module, Type> groupedByModule);
}
internal static class System.Web.Mvc.TypeCacheUtil : object {
    private static IEnumerable`1<Type> FilterTypesInAssemblies(IBuildManager buildManager, Predicate`1<Type> predicate);
    public static List`1<Type> GetFilteredTypesFromAssemblies(string cacheName, Predicate`1<Type> predicate, IBuildManager buildManager);
    internal static List`1<Type> ReadTypesFromCache(string cacheName, Predicate`1<Type> predicate, IBuildManager buildManager, TypeCacheSerializer serializer);
    internal static void SaveTypesToCache(string cacheName, IList`1<Type> matchingTypes, IBuildManager buildManager, TypeCacheSerializer serializer);
    private static bool TypeIsPublicClass(Type type);
}
internal static class System.Web.Mvc.TypeDescriptorHelper : object {
    public static ICustomTypeDescriptor Get(Type type);
}
internal static class System.Web.Mvc.TypeHelpers : object {
    private static Dictionary`2<Type, TryGetValueDelegate> _tryGetValueDelegateCache;
    private static ReaderWriterLockSlim _tryGetValueDelegateCacheLock;
    private static MethodInfo _strongTryGetValueImplInfo;
    public static Assembly MsCorLibAssembly;
    public static Assembly MvcAssembly;
    public static Assembly SystemWebAssembly;
    private static TypeHelpers();
    public static TDelegate CreateDelegate(Assembly assembly, string typeName, string methodName, object thisParameter);
    public static TDelegate CreateDelegate(Type targetType, string methodName, object thisParameter);
    public static TryGetValueDelegate CreateTryGetValueDelegate(Type targetType);
    public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    public static object GetDefaultValue(Type type);
    public static bool IsCompatibleObject(object value);
    public static bool IsNullableValueType(Type type);
    private static bool StrongTryGetValueImpl(object dictionary, string key, Object& value);
    private static bool TryGetValueFromNonGenericDictionary(object dictionary, string key, Object& value);
    public static bool TypeAllowsNullValue(Type type);
    [CompilerGeneratedAttribute]
private static Type <CreateDelegate>b__0(ParameterInfo pInfo);
}
internal class System.Web.Mvc.UnvalidatedRequestValuesAccessor : MulticastDelegate {
    public UnvalidatedRequestValuesAccessor(object object, IntPtr method);
    public virtual IUnvalidatedRequestValues Invoke(ControllerContext controllerContext);
    public virtual IAsyncResult BeginInvoke(ControllerContext controllerContext, AsyncCallback callback, object object);
    public virtual IUnvalidatedRequestValues EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Mvc.UnvalidatedRequestValuesWrapper : object {
    private UnvalidatedRequestValues _unvalidatedValues;
    public NameValueCollection Form { get; }
    public NameValueCollection QueryString { get; }
    public string Item { get; }
    public UnvalidatedRequestValuesWrapper(UnvalidatedRequestValues unvalidatedValues);
    public sealed virtual NameValueCollection get_Form();
    public sealed virtual NameValueCollection get_QueryString();
    public sealed virtual string get_Item(string key);
}
public class System.Web.Mvc.UrlHelper : object {
    [CompilerGeneratedAttribute]
private RequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteCollection <RouteCollection>k__BackingField;
    public RequestContext RequestContext { get; private set; }
    public RouteCollection RouteCollection { get; private set; }
    public UrlHelper(RequestContext requestContext);
    public UrlHelper(RequestContext requestContext, RouteCollection routeCollection);
    [CompilerGeneratedAttribute]
public RequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
private void set_RequestContext(RequestContext value);
    [CompilerGeneratedAttribute]
public RouteCollection get_RouteCollection();
    [CompilerGeneratedAttribute]
private void set_RouteCollection(RouteCollection value);
    public string Action(string actionName);
    public string Action(string actionName, object routeValues);
    public string Action(string actionName, RouteValueDictionary routeValues);
    public string Action(string actionName, string controllerName);
    public string Action(string actionName, string controllerName, object routeValues);
    public string Action(string actionName, string controllerName, RouteValueDictionary routeValues);
    public string Action(string actionName, string controllerName, object routeValues, string protocol);
    public string Action(string actionName, string controllerName, RouteValueDictionary routeValues, string protocol, string hostName);
    public string Content(string contentPath);
    public static string GenerateContentUrl(string contentPath, HttpContextBase httpContext);
    public string Encode(string url);
    private string GenerateUrl(string routeName, string actionName, string controllerName, RouteValueDictionary routeValues);
    public static string GenerateUrl(string routeName, string actionName, string controllerName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, RouteCollection routeCollection, RequestContext requestContext, bool includeImplicitMvcValues);
    public static string GenerateUrl(string routeName, string actionName, string controllerName, RouteValueDictionary routeValues, RouteCollection routeCollection, RequestContext requestContext, bool includeImplicitMvcValues);
    public bool IsLocalUrl(string url);
    public string RouteUrl(object routeValues);
    public string RouteUrl(RouteValueDictionary routeValues);
    public string RouteUrl(string routeName);
    public string RouteUrl(string routeName, object routeValues);
    public string RouteUrl(string routeName, RouteValueDictionary routeValues);
    public string RouteUrl(string routeName, object routeValues, string protocol);
    public string RouteUrl(string routeName, RouteValueDictionary routeValues, string protocol, string hostName);
}
public class System.Web.Mvc.UrlParameter : object {
    public static UrlParameter Optional;
    private static UrlParameter();
    public virtual string ToString();
}
internal class System.Web.Mvc.UrlRewriterHelper : object {
    private static string _urlWasRewrittenServerVar;
    private static string _urlRewriterEnabledServerVar;
    private object _lockObject;
    private bool _urlRewriterIsTurnedOnValue;
    private bool _urlRewriterIsTurnedOnCalculated;
    private static bool WasThisRequestRewritten(HttpContextBase httpContext);
    private bool IsUrlRewriterTurnedOn(HttpContextBase httpContext);
    public virtual bool WasRequestRewritten(HttpContextBase httpContext);
}
public class System.Web.Mvc.ValidatableObjectAdapter : ModelValidator {
    public ValidatableObjectAdapter(ModelMetadata metadata, ControllerContext context);
    public virtual IEnumerable`1<ModelValidationResult> Validate(object container);
    private IEnumerable`1<ModelValidationResult> ConvertResults(IEnumerable`1<ValidationResult> results);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.ValidateAntiForgeryTokenAttribute : FilterAttribute {
    private string _salt;
    [CompilerGeneratedAttribute]
private Action`2<HttpContextBase, string> <ValidateAction>k__BackingField;
    public string Salt { get; public set; }
    internal Action`2<HttpContextBase, string> ValidateAction { get; private set; }
    internal ValidateAntiForgeryTokenAttribute(Action`2<HttpContextBase, string> validateAction);
    public string get_Salt();
    public void set_Salt(string value);
    [CompilerGeneratedAttribute]
internal Action`2<HttpContextBase, string> get_ValidateAction();
    [CompilerGeneratedAttribute]
private void set_ValidateAction(Action`2<HttpContextBase, string> value);
    public sealed virtual void OnAuthorization(AuthorizationContext filterContext);
}
[AttributeUsageAttribute("68")]
public class System.Web.Mvc.ValidateInputAttribute : FilterAttribute {
    [CompilerGeneratedAttribute]
private bool <EnableValidation>k__BackingField;
    public bool EnableValidation { get; private set; }
    public ValidateInputAttribute(bool enableValidation);
    [CompilerGeneratedAttribute]
public bool get_EnableValidation();
    [CompilerGeneratedAttribute]
private void set_EnableValidation(bool value);
    public virtual void OnAuthorization(AuthorizationContext filterContext);
}
public class System.Web.Mvc.ValueProviderCollection : Collection`1<IValueProvider> {
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<IValueProvider, ValueProviderResult>, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<IValueProvider, ValueProviderResult>, ValueProviderResult> CS$<>9__CachedAnonymousMethodDelegate8;
    public ValueProviderCollection(IList`1<IValueProvider> list);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public virtual ValueProviderResult GetValue(string key, bool skipValidation);
    internal static ValueProviderResult GetValueFromProvider(IValueProvider provider, string key, bool skipValidation);
    protected virtual void InsertItem(int index, IValueProvider item);
    protected virtual void SetItem(int index, IValueProvider item);
    [CompilerGeneratedAttribute]
private static bool <GetValue>b__5(<>f__AnonymousType3`2<IValueProvider, ValueProviderResult> <>h__TransparentIdentifier3);
    [CompilerGeneratedAttribute]
private static ValueProviderResult <GetValue>b__6(<>f__AnonymousType3`2<IValueProvider, ValueProviderResult> <>h__TransparentIdentifier3);
}
[ObsoleteAttribute("The recommended alternative is to use one of the specific ValueProvider types, such as FormValueProvider.")]
[DefaultMemberAttribute("Item")]
public class System.Web.Mvc.ValueProviderDictionary : object {
    private Dictionary`2<string, ValueProviderResult> _dictionary;
    [CompilerGeneratedAttribute]
private ControllerContext <ControllerContext>k__BackingField;
    public ControllerContext ControllerContext { get; private set; }
    public int Count { get; }
    internal Dictionary`2<string, ValueProviderResult> Dictionary { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ValueProviderResult Item { get; public set; }
    public ICollection`1<ValueProviderResult> Values { get; }
    public ValueProviderDictionary(ControllerContext controllerContext);
    [CompilerGeneratedAttribute]
public ControllerContext get_ControllerContext();
    [CompilerGeneratedAttribute]
private void set_ControllerContext(ControllerContext value);
    public sealed virtual int get_Count();
    internal Dictionary`2<string, ValueProviderResult> get_Dictionary();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ValueProviderResult get_Item(string key);
    public sealed virtual void set_Item(string key, ValueProviderResult value);
    public sealed virtual ICollection`1<ValueProviderResult> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, ValueProviderResult> item);
    public void Add(string key, object value);
    public sealed virtual void Add(string key, ValueProviderResult value);
    private void AddToDictionaryIfNotPresent(string key, ValueProviderResult result);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ValueProviderResult> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ValueProviderResult>> GetEnumerator();
    private void PopulateDictionary();
    public sealed virtual bool Remove(KeyValuePair`2<string, ValueProviderResult> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, ValueProviderResult& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Web.Mvc.IValueProvider.ContainsPrefix(string prefix);
    private sealed virtual override ValueProviderResult System.Web.Mvc.IValueProvider.GetValue(string key);
}
public static class System.Web.Mvc.ValueProviderFactories : object {
    private static ValueProviderFactoryCollection _factories;
    public static ValueProviderFactoryCollection Factories { get; }
    private static ValueProviderFactories();
    public static ValueProviderFactoryCollection get_Factories();
}
public abstract class System.Web.Mvc.ValueProviderFactory : object {
    public abstract virtual IValueProvider GetValueProvider(ControllerContext controllerContext);
}
public class System.Web.Mvc.ValueProviderFactoryCollection : Collection`1<ValueProviderFactory> {
    private IResolver`1<IEnumerable`1<ValueProviderFactory>> _serviceResolver;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<ValueProviderFactory, IValueProvider>, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<ValueProviderFactory, IValueProvider>, IValueProvider> CS$<>9__CachedAnonymousMethodDelegateb;
    public ValueProviderFactoryCollection(IList`1<ValueProviderFactory> list);
    internal ValueProviderFactoryCollection(IResolver`1<IEnumerable`1<ValueProviderFactory>> serviceResolver, ValueProviderFactory[] valueProviderFactories);
    public IValueProvider GetValueProvider(ControllerContext controllerContext);
    protected virtual void InsertItem(int index, ValueProviderFactory item);
    protected virtual void SetItem(int index, ValueProviderFactory item);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValueProviderFactory> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValueProviderFactory> <.ctor>b__2();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValueProviderFactory> <.ctor>b__4();
    [CompilerGeneratedAttribute]
private static bool <GetValueProvider>b__8(<>f__AnonymousType2`2<ValueProviderFactory, IValueProvider> <>h__TransparentIdentifier6);
    [CompilerGeneratedAttribute]
private static IValueProvider <GetValueProvider>b__9(<>f__AnonymousType2`2<ValueProviderFactory, IValueProvider> <>h__TransparentIdentifier6);
}
public class System.Web.Mvc.ValueProviderResult : object {
    private static CultureInfo _staticCulture;
    private CultureInfo _instanceCulture;
    [CompilerGeneratedAttribute]
private string <AttemptedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RawValue>k__BackingField;
    public string AttemptedValue { get; protected set; }
    public CultureInfo Culture { get; protected set; }
    public object RawValue { get; protected set; }
    public ValueProviderResult(object rawValue, string attemptedValue, CultureInfo culture);
    private static ValueProviderResult();
    [CompilerGeneratedAttribute]
public string get_AttemptedValue();
    [CompilerGeneratedAttribute]
protected void set_AttemptedValue(string value);
    public CultureInfo get_Culture();
    protected void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public object get_RawValue();
    [CompilerGeneratedAttribute]
protected void set_RawValue(object value);
    private static object ConvertSimpleType(CultureInfo culture, object value, Type destinationType);
    public object ConvertTo(Type type);
    public virtual object ConvertTo(Type type, CultureInfo culture);
    private static object UnwrapPossibleArrayType(CultureInfo culture, object value, Type destinationType);
}
internal static class System.Web.Mvc.ValueProviderUtil : object {
    public static IEnumerable`1<string> GetPrefixes(string key);
    public static bool CollectionContainsPrefix(IEnumerable`1<string> collection, string prefix);
}
public class System.Web.Mvc.ViewContext : ControllerContext {
    private static string _clientValidationScript;
    internal static string ClientValidationKeyName;
    internal static string UnobtrusiveJavaScriptKeyName;
    private static object _formContextKey;
    private static object _lastFormNumKey;
    private Func`1<IDictionary`2<object, object>> _scopeThunk;
    private IDictionary`2<object, object> _transientScope;
    private Func`1<string> _formIdGenerator;
    [CompilerGeneratedAttribute]
private static Func`1<IDictionary`2<object, object>> <GlobalScopeThunk>k__BackingField;
    [CompilerGeneratedAttribute]
private TempDataDictionary <TempData>k__BackingField;
    [CompilerGeneratedAttribute]
private IView <View>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewDataDictionary <ViewData>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    public bool ClientValidationEnabled { get; public set; }
    public FormContext FormContext { get; public set; }
    internal Func`1<string> FormIdGenerator { get; internal set; }
    internal static Func`1<IDictionary`2<object, object>> GlobalScopeThunk { get; internal set; }
    private IDictionary`2<object, object> Scope { get; }
    internal Func`1<IDictionary`2<object, object>> ScopeThunk { get; internal set; }
    public TempDataDictionary TempData { get; public set; }
    public bool UnobtrusiveJavaScriptEnabled { get; public set; }
    public IView View { get; public set; }
    public ViewDataDictionary ViewData { get; public set; }
    public TextWriter Writer { get; public set; }
    public ViewContext(ControllerContext controllerContext, IView view, ViewDataDictionary viewData, TempDataDictionary tempData, TextWriter writer);
    private static ViewContext();
    public virtual bool get_ClientValidationEnabled();
    public virtual void set_ClientValidationEnabled(bool value);
    public virtual FormContext get_FormContext();
    public virtual void set_FormContext(FormContext value);
    internal Func`1<string> get_FormIdGenerator();
    internal void set_FormIdGenerator(Func`1<string> value);
    [CompilerGeneratedAttribute]
internal static Func`1<IDictionary`2<object, object>> get_GlobalScopeThunk();
    [CompilerGeneratedAttribute]
internal static void set_GlobalScopeThunk(Func`1<IDictionary`2<object, object>> value);
    private IDictionary`2<object, object> get_Scope();
    internal Func`1<IDictionary`2<object, object>> get_ScopeThunk();
    internal void set_ScopeThunk(Func`1<IDictionary`2<object, object>> value);
    [CompilerGeneratedAttribute]
public virtual TempDataDictionary get_TempData();
    [CompilerGeneratedAttribute]
public virtual void set_TempData(TempDataDictionary value);
    public virtual bool get_UnobtrusiveJavaScriptEnabled();
    public virtual void set_UnobtrusiveJavaScriptEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual IView get_View();
    [CompilerGeneratedAttribute]
public virtual void set_View(IView value);
    [CompilerGeneratedAttribute]
public virtual ViewDataDictionary get_ViewData();
    [CompilerGeneratedAttribute]
public virtual void set_ViewData(ViewDataDictionary value);
    [CompilerGeneratedAttribute]
public virtual TextWriter get_Writer();
    [CompilerGeneratedAttribute]
public virtual void set_Writer(TextWriter value);
    private string DefaultFormIdGenerator();
    internal static bool GetClientValidationEnabled(IDictionary`2<object, object> scope, HttpContextBase httpContext);
    internal FormContext GetFormContextForClientValidation();
    internal static bool GetUnobtrusiveJavaScriptEnabled(IDictionary`2<object, object> scope, HttpContextBase httpContext);
    private static int IncrementFormCount(IDictionary items);
    public void OutputClientValidation();
    internal static void SetClientValidationEnabled(bool enabled, IDictionary`2<object, object> scope, HttpContextBase httpContext);
    internal static void SetUnobtrusiveJavaScriptEnabled(bool enabled, IDictionary`2<object, object> scope, HttpContextBase httpContext);
    private static TValue ScopeGet(IDictionary`2<object, object> scope, string name, TValue defaultValue);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Mvc.ViewDataDictionary : object {
    private Dictionary`2<string, object> _innerDictionary;
    private object _model;
    private ModelMetadata _modelMetadata;
    private ModelStateDictionary _modelState;
    private TemplateInfo _templateMetadata;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public object Model { get; public set; }
    public ModelMetadata ModelMetadata { get; public set; }
    public ModelStateDictionary ModelState { get; }
    public object Item { get; public set; }
    public TemplateInfo TemplateInfo { get; public set; }
    public ICollection`1<object> Values { get; }
    public ViewDataDictionary(object model);
    public ViewDataDictionary(ViewDataDictionary dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public object get_Model();
    public void set_Model(object value);
    public virtual ModelMetadata get_ModelMetadata();
    public virtual void set_ModelMetadata(ModelMetadata value);
    public ModelStateDictionary get_ModelState();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public TemplateInfo get_TemplateInfo();
    public void set_TemplateInfo(TemplateInfo value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public object Eval(string expression);
    public string Eval(string expression, string format);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public ViewDataInfo GetViewDataInfo(string expression);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool Remove(string key);
    protected virtual void SetModel(object value);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private object <get_ModelMetadata>b__0();
}
public class System.Web.Mvc.ViewDataDictionary`1 : ViewDataDictionary {
    public TModel Model { get; public set; }
    public ModelMetadata ModelMetadata { get; public set; }
    public ViewDataDictionary`1(TModel model);
    public ViewDataDictionary`1(ViewDataDictionary viewDataDictionary);
    public TModel get_Model();
    public void set_Model(TModel value);
    public virtual ModelMetadata get_ModelMetadata();
    public virtual void set_ModelMetadata(ModelMetadata value);
    protected virtual void SetModel(object value);
}
public class System.Web.Mvc.ViewDataInfo : object {
    private object _value;
    private Func`1<object> _valueAccessor;
    [CompilerGeneratedAttribute]
private object <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyDescriptor <PropertyDescriptor>k__BackingField;
    public object Container { get; public set; }
    public PropertyDescriptor PropertyDescriptor { get; public set; }
    public object Value { get; public set; }
    public ViewDataInfo(Func`1<object> valueAccessor);
    [CompilerGeneratedAttribute]
public object get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(object value);
    [CompilerGeneratedAttribute]
public PropertyDescriptor get_PropertyDescriptor();
    [CompilerGeneratedAttribute]
public void set_PropertyDescriptor(PropertyDescriptor value);
    public object get_Value();
    public void set_Value(object value);
}
public class System.Web.Mvc.ViewEngineCollection : Collection`1<IViewEngine> {
    private IResolver`1<IEnumerable`1<IViewEngine>> _serviceResolver;
    private IEnumerable`1<IViewEngine> CombinedItems { get; }
    public ViewEngineCollection(IList`1<IViewEngine> list);
    internal ViewEngineCollection(IResolver`1<IEnumerable`1<IViewEngine>> serviceResolver, IViewEngine[] engines);
    private IEnumerable`1<IViewEngine> get_CombinedItems();
    protected virtual void InsertItem(int index, IViewEngine item);
    protected virtual void SetItem(int index, IViewEngine item);
    private ViewEngineResult Find(Func`2<IViewEngine, ViewEngineResult> cacheLocator, Func`2<IViewEngine, ViewEngineResult> locator);
    private ViewEngineResult Find(Func`2<IViewEngine, ViewEngineResult> lookup, bool trackSearchedPaths);
    public virtual ViewEngineResult FindPartialView(ControllerContext controllerContext, string partialViewName);
    public virtual ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IViewEngine> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IViewEngine> <.ctor>b__2();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IViewEngine> <.ctor>b__4();
}
public class System.Web.Mvc.ViewEngineResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SearchedLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IView <View>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewEngine <ViewEngine>k__BackingField;
    public IEnumerable`1<string> SearchedLocations { get; private set; }
    public IView View { get; private set; }
    public IViewEngine ViewEngine { get; private set; }
    public ViewEngineResult(IEnumerable`1<string> searchedLocations);
    public ViewEngineResult(IView view, IViewEngine viewEngine);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_SearchedLocations();
    [CompilerGeneratedAttribute]
private void set_SearchedLocations(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IView get_View();
    [CompilerGeneratedAttribute]
private void set_View(IView value);
    [CompilerGeneratedAttribute]
public IViewEngine get_ViewEngine();
    [CompilerGeneratedAttribute]
private void set_ViewEngine(IViewEngine value);
}
public static class System.Web.Mvc.ViewEngines : object {
    private static ViewEngineCollection _engines;
    public static ViewEngineCollection Engines { get; }
    private static ViewEngines();
    public static ViewEngineCollection get_Engines();
}
[FileLevelControlBuilderAttribute("System.Web.Mvc.ViewMasterPageControlBuilder")]
public class System.Web.Mvc.ViewMasterPage : MasterPage {
    public AjaxHelper`1<object> Ajax { get; }
    public HtmlHelper`1<object> Html { get; }
    public object Model { get; }
    public TempDataDictionary TempData { get; }
    public UrlHelper Url { get; }
    [DynamicAttribute]
public object ViewBag { get; }
    public ViewContext ViewContext { get; }
    public ViewDataDictionary ViewData { get; }
    internal ViewPage ViewPage { get; }
    public HtmlTextWriter Writer { get; }
    public AjaxHelper`1<object> get_Ajax();
    public HtmlHelper`1<object> get_Html();
    public object get_Model();
    public TempDataDictionary get_TempData();
    public UrlHelper get_Url();
    public object get_ViewBag();
    public ViewContext get_ViewContext();
    public ViewDataDictionary get_ViewData();
    internal ViewPage get_ViewPage();
    public HtmlTextWriter get_Writer();
}
public class System.Web.Mvc.ViewMasterPage`1 : ViewMasterPage {
    private AjaxHelper`1<TModel> _ajaxHelper;
    private HtmlHelper`1<TModel> _htmlHelper;
    private ViewDataDictionary`1<TModel> _viewData;
    public AjaxHelper`1<TModel> Ajax { get; }
    public HtmlHelper`1<TModel> Html { get; }
    public TModel Model { get; }
    public ViewDataDictionary`1<TModel> ViewData { get; }
    public AjaxHelper`1<TModel> get_Ajax();
    public HtmlHelper`1<TModel> get_Html();
    public TModel get_Model();
    public ViewDataDictionary`1<TModel> get_ViewData();
}
internal class System.Web.Mvc.ViewMasterPageControlBuilder : FileLevelMasterPageControlBuilder {
    [CompilerGeneratedAttribute]
private string <Inherits>k__BackingField;
    public string Inherits { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Inherits();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inherits(string value);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod);
}
[FileLevelControlBuilderAttribute("System.Web.Mvc.ViewPageControlBuilder")]
public class System.Web.Mvc.ViewPage : Page {
    private DynamicViewDataDictionary _dynamicViewData;
    private string _masterLocation;
    [ThreadStaticAttribute]
private static int _nextId;
    private ViewDataDictionary _viewData;
    [CompilerGeneratedAttribute]
private AjaxHelper`1<object> <Ajax>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlHelper`1<object> <Html>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlHelper <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewContext <ViewContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlTextWriter <Writer>k__BackingField;
    public AjaxHelper`1<object> Ajax { get; public set; }
    public HtmlHelper`1<object> Html { get; public set; }
    public string MasterLocation { get; public set; }
    public object Model { get; }
    public TempDataDictionary TempData { get; }
    public UrlHelper Url { get; public set; }
    [DynamicAttribute]
public object ViewBag { get; }
    public ViewContext ViewContext { get; public set; }
    public ViewDataDictionary ViewData { get; public set; }
    public HtmlTextWriter Writer { get; private set; }
    [CompilerGeneratedAttribute]
public AjaxHelper`1<object> get_Ajax();
    [CompilerGeneratedAttribute]
public void set_Ajax(AjaxHelper`1<object> value);
    [CompilerGeneratedAttribute]
public HtmlHelper`1<object> get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(HtmlHelper`1<object> value);
    public string get_MasterLocation();
    public void set_MasterLocation(string value);
    public object get_Model();
    public TempDataDictionary get_TempData();
    [CompilerGeneratedAttribute]
public UrlHelper get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(UrlHelper value);
    public object get_ViewBag();
    [CompilerGeneratedAttribute]
public ViewContext get_ViewContext();
    [CompilerGeneratedAttribute]
public void set_ViewContext(ViewContext value);
    public sealed virtual ViewDataDictionary get_ViewData();
    public sealed virtual void set_ViewData(ViewDataDictionary value);
    [CompilerGeneratedAttribute]
public HtmlTextWriter get_Writer();
    [CompilerGeneratedAttribute]
private void set_Writer(HtmlTextWriter value);
    public virtual void InitHelpers();
    internal static string NextId();
    protected virtual void OnPreInit(EventArgs e);
    public virtual void ProcessRequest(HttpContext context);
    protected virtual void Render(HtmlTextWriter writer);
    public virtual void RenderView(ViewContext viewContext);
    [ObsoleteAttribute("The TextWriter is now provided by the ViewContext object passed to the RenderView method.", "True")]
public void SetTextWriter(TextWriter textWriter);
    protected virtual void SetViewData(ViewDataDictionary viewData);
    [CompilerGeneratedAttribute]
private ViewDataDictionary <get_ViewBag>b__3();
}
public class System.Web.Mvc.ViewPage`1 : ViewPage {
    private ViewDataDictionary`1<TModel> _viewData;
    [CompilerGeneratedAttribute]
private AjaxHelper`1<TModel> <Ajax>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlHelper`1<TModel> <Html>k__BackingField;
    public AjaxHelper`1<TModel> Ajax { get; public set; }
    public HtmlHelper`1<TModel> Html { get; public set; }
    public TModel Model { get; }
    public ViewDataDictionary`1<TModel> ViewData { get; public set; }
    [CompilerGeneratedAttribute]
public AjaxHelper`1<TModel> get_Ajax();
    [CompilerGeneratedAttribute]
public void set_Ajax(AjaxHelper`1<TModel> value);
    [CompilerGeneratedAttribute]
public HtmlHelper`1<TModel> get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(HtmlHelper`1<TModel> value);
    public TModel get_Model();
    public ViewDataDictionary`1<TModel> get_ViewData();
    public void set_ViewData(ViewDataDictionary`1<TModel> value);
    public virtual void InitHelpers();
    protected virtual void SetViewData(ViewDataDictionary viewData);
}
internal class System.Web.Mvc.ViewPageControlBuilder : FileLevelPageControlBuilder {
    [CompilerGeneratedAttribute]
private string <Inherits>k__BackingField;
    public string Inherits { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Inherits();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inherits(string value);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod);
}
public class System.Web.Mvc.ViewResult : ViewResultBase {
    private string _masterName;
    public string MasterName { get; public set; }
    public string get_MasterName();
    public void set_MasterName(string value);
    protected virtual ViewEngineResult FindView(ControllerContext context);
}
public abstract class System.Web.Mvc.ViewResultBase : ActionResult {
    private DynamicViewDataDictionary _dynamicViewData;
    private TempDataDictionary _tempData;
    private ViewDataDictionary _viewData;
    private ViewEngineCollection _viewEngineCollection;
    private string _viewName;
    [CompilerGeneratedAttribute]
private IView <View>k__BackingField;
    public object Model { get; }
    public TempDataDictionary TempData { get; public set; }
    public IView View { get; public set; }
    [DynamicAttribute]
public object ViewBag { get; }
    public ViewDataDictionary ViewData { get; public set; }
    public ViewEngineCollection ViewEngineCollection { get; public set; }
    public string ViewName { get; public set; }
    public object get_Model();
    public TempDataDictionary get_TempData();
    public void set_TempData(TempDataDictionary value);
    [CompilerGeneratedAttribute]
public IView get_View();
    [CompilerGeneratedAttribute]
public void set_View(IView value);
    public object get_ViewBag();
    public ViewDataDictionary get_ViewData();
    public void set_ViewData(ViewDataDictionary value);
    public ViewEngineCollection get_ViewEngineCollection();
    public void set_ViewEngineCollection(ViewEngineCollection value);
    public string get_ViewName();
    public void set_ViewName(string value);
    public virtual void ExecuteResult(ControllerContext context);
    protected abstract virtual ViewEngineResult FindView(ControllerContext context);
    [CompilerGeneratedAttribute]
private ViewDataDictionary <get_ViewBag>b__0();
}
public abstract class System.Web.Mvc.ViewStartPage : StartPage {
    private IViewStartPageChild _viewStartPageChild;
    public HtmlHelper`1<object> Html { get; }
    public UrlHelper Url { get; }
    public ViewContext ViewContext { get; }
    internal IViewStartPageChild ViewStartPageChild { get; }
    public sealed virtual HtmlHelper`1<object> get_Html();
    public sealed virtual UrlHelper get_Url();
    public sealed virtual ViewContext get_ViewContext();
    internal IViewStartPageChild get_ViewStartPageChild();
}
public class System.Web.Mvc.ViewTemplateUserControl : ViewTemplateUserControl`1<object> {
}
public class System.Web.Mvc.ViewTemplateUserControl`1 : ViewUserControl`1<TModel> {
    protected string FormattedModelValue { get; }
    protected string get_FormattedModelValue();
}
[ControlBuilderAttribute("System.Web.Mvc.ViewTypeControlBuilder")]
[NonVisualControlAttribute]
public class System.Web.Mvc.ViewType : Control {
    private string _typeName;
    [DefaultValueAttribute("")]
public string TypeName { get; public set; }
    public string get_TypeName();
    public void set_TypeName(string value);
}
internal class System.Web.Mvc.ViewTypeControlBuilder : ControlBuilder {
    private string _typeName;
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod);
}
internal class System.Web.Mvc.ViewTypeParserFilter : PageParserFilter {
    private static Dictionary`2<string, Type> _directiveBaseTypeMappings;
    private string _inherits;
    public bool AllowCode { get; }
    public int NumberOfControlsAllowed { get; }
    public int NumberOfDirectDependenciesAllowed { get; }
    public int TotalNumberOfDependenciesAllowed { get; }
    private static ViewTypeParserFilter();
    public virtual void PreprocessDirective(string directiveName, IDictionary attributes);
    public virtual void ParseComplete(ControlBuilder rootBuilder);
    public virtual bool get_AllowCode();
    public virtual bool AllowBaseType(Type baseType);
    public virtual bool AllowControl(Type controlType, ControlBuilder builder);
    public virtual bool AllowVirtualReference(string referenceVirtualPath, VirtualReferenceType referenceType);
    public virtual bool AllowServerSideInclude(string includeVirtualPath);
    public virtual int get_NumberOfControlsAllowed();
    public virtual int get_NumberOfDirectDependenciesAllowed();
    public virtual int get_TotalNumberOfDependenciesAllowed();
}
[FileLevelControlBuilderAttribute("System.Web.Mvc.ViewUserControlControlBuilder")]
public class System.Web.Mvc.ViewUserControl : UserControl {
    private AjaxHelper`1<object> _ajaxHelper;
    private DynamicViewDataDictionary _dynamicViewData;
    private HtmlHelper`1<object> _htmlHelper;
    private ViewContext _viewContext;
    private ViewDataDictionary _viewData;
    private string _viewDataKey;
    public AjaxHelper`1<object> Ajax { get; }
    public HtmlHelper`1<object> Html { get; }
    public object Model { get; }
    public TempDataDictionary TempData { get; }
    public UrlHelper Url { get; }
    [DynamicAttribute]
public object ViewBag { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ViewContext ViewContext { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ViewDataDictionary ViewData { get; public set; }
    [DefaultValueAttribute("")]
public string ViewDataKey { get; public set; }
    internal ViewPage ViewPage { get; }
    public HtmlTextWriter Writer { get; }
    public AjaxHelper`1<object> get_Ajax();
    public HtmlHelper`1<object> get_Html();
    public object get_Model();
    public TempDataDictionary get_TempData();
    public UrlHelper get_Url();
    public object get_ViewBag();
    public ViewContext get_ViewContext();
    public void set_ViewContext(ViewContext value);
    public sealed virtual ViewDataDictionary get_ViewData();
    public sealed virtual void set_ViewData(ViewDataDictionary value);
    public string get_ViewDataKey();
    public void set_ViewDataKey(string value);
    internal ViewPage get_ViewPage();
    public HtmlTextWriter get_Writer();
    protected virtual void SetViewData(ViewDataDictionary viewData);
    protected void EnsureViewData();
    private static IViewDataContainer GetViewDataContainer(Control control);
    public virtual void RenderView(ViewContext viewContext);
    internal static void RenderViewAndRestoreContentType(ViewPage containerPage, ViewContext viewContext);
    [ObsoleteAttribute("The TextWriter is now provided by the ViewContext object passed to the RenderView method.", "True")]
public void SetTextWriter(TextWriter textWriter);
    [CompilerGeneratedAttribute]
private ViewDataDictionary <get_ViewBag>b__0();
}
public class System.Web.Mvc.ViewUserControl`1 : ViewUserControl {
    private AjaxHelper`1<TModel> _ajaxHelper;
    private HtmlHelper`1<TModel> _htmlHelper;
    private ViewDataDictionary`1<TModel> _viewData;
    public AjaxHelper`1<TModel> Ajax { get; }
    public HtmlHelper`1<TModel> Html { get; }
    public TModel Model { get; }
    public ViewDataDictionary`1<TModel> ViewData { get; public set; }
    public AjaxHelper`1<TModel> get_Ajax();
    public HtmlHelper`1<TModel> get_Html();
    public TModel get_Model();
    public ViewDataDictionary`1<TModel> get_ViewData();
    public void set_ViewData(ViewDataDictionary`1<TModel> value);
    protected virtual void SetViewData(ViewDataDictionary viewData);
}
internal class System.Web.Mvc.ViewUserControlControlBuilder : FileLevelUserControlBuilder {
    [CompilerGeneratedAttribute]
private string <Inherits>k__BackingField;
    public string Inherits { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Inherits();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inherits(string value);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod);
}
public abstract class System.Web.Mvc.VirtualPathProviderViewEngine : object {
    private static string _cacheKeyFormat;
    private static string _cacheKeyPrefix_Master;
    private static string _cacheKeyPrefix_Partial;
    private static string _cacheKeyPrefix_View;
    private static String[] _emptyLocations;
    private VirtualPathProvider _vpp;
    internal Func`2<string, string> GetExtensionThunk;
    [CompilerGeneratedAttribute]
private String[] <AreaMasterLocationFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AreaPartialViewLocationFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AreaViewLocationFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MasterLocationFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PartialViewLocationFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewLocationCache <ViewLocationCache>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ViewLocationFormats>k__BackingField;
    public String[] AreaMasterLocationFormats { get; public set; }
    public String[] AreaPartialViewLocationFormats { get; public set; }
    public String[] AreaViewLocationFormats { get; public set; }
    public String[] FileExtensions { get; public set; }
    public String[] MasterLocationFormats { get; public set; }
    public String[] PartialViewLocationFormats { get; public set; }
    public IViewLocationCache ViewLocationCache { get; public set; }
    public String[] ViewLocationFormats { get; public set; }
    protected VirtualPathProvider VirtualPathProvider { get; protected set; }
    private static VirtualPathProviderViewEngine();
    [CompilerGeneratedAttribute]
public String[] get_AreaMasterLocationFormats();
    [CompilerGeneratedAttribute]
public void set_AreaMasterLocationFormats(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_AreaPartialViewLocationFormats();
    [CompilerGeneratedAttribute]
public void set_AreaPartialViewLocationFormats(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_AreaViewLocationFormats();
    [CompilerGeneratedAttribute]
public void set_AreaViewLocationFormats(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_FileExtensions();
    [CompilerGeneratedAttribute]
public void set_FileExtensions(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_MasterLocationFormats();
    [CompilerGeneratedAttribute]
public void set_MasterLocationFormats(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PartialViewLocationFormats();
    [CompilerGeneratedAttribute]
public void set_PartialViewLocationFormats(String[] value);
    [CompilerGeneratedAttribute]
public IViewLocationCache get_ViewLocationCache();
    [CompilerGeneratedAttribute]
public void set_ViewLocationCache(IViewLocationCache value);
    [CompilerGeneratedAttribute]
public String[] get_ViewLocationFormats();
    [CompilerGeneratedAttribute]
public void set_ViewLocationFormats(String[] value);
    protected VirtualPathProvider get_VirtualPathProvider();
    protected void set_VirtualPathProvider(VirtualPathProvider value);
    private string CreateCacheKey(string prefix, string name, string controllerName, string areaName);
    protected abstract virtual IView CreatePartialView(ControllerContext controllerContext, string partialPath);
    protected abstract virtual IView CreateView(ControllerContext controllerContext, string viewPath, string masterPath);
    protected virtual bool FileExists(ControllerContext controllerContext, string virtualPath);
    public virtual ViewEngineResult FindPartialView(ControllerContext controllerContext, string partialViewName, bool useCache);
    public virtual ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache);
    private string GetPath(ControllerContext controllerContext, String[] locations, String[] areaLocations, string locationsPropertyName, string name, string controllerName, string cacheKeyPrefix, bool useCache, String[]& searchedLocations);
    private string GetPathFromGeneralName(ControllerContext controllerContext, List`1<ViewLocation> locations, string name, string controllerName, string areaName, string cacheKey, String[]& searchedLocations);
    private string GetPathFromSpecificName(ControllerContext controllerContext, string name, string cacheKey, String[]& searchedLocations);
    private bool FilePathIsSupported(string virtualPath);
    private static List`1<ViewLocation> GetViewLocations(String[] viewLocationFormats, String[] areaViewLocationFormats);
    private static bool IsSpecificPath(string name);
    public virtual void ReleaseView(ControllerContext controllerContext, IView view);
}
public class System.Web.Mvc.WebFormView : BuildManagerCompiledView {
    [CompilerGeneratedAttribute]
private string <MasterPath>k__BackingField;
    public string MasterPath { get; private set; }
    public WebFormView(ControllerContext controllerContext, string viewPath);
    public WebFormView(ControllerContext controllerContext, string viewPath, string masterPath);
    public WebFormView(ControllerContext controllerContext, string viewPath, string masterPath, IViewPageActivator viewPageActivator);
    [CompilerGeneratedAttribute]
public string get_MasterPath();
    [CompilerGeneratedAttribute]
private void set_MasterPath(string value);
    protected virtual void RenderView(ViewContext viewContext, TextWriter writer, object instance);
    private void RenderViewPage(ViewContext context, ViewPage page);
    private void RenderViewUserControl(ViewContext context, ViewUserControl control);
}
public class System.Web.Mvc.WebFormViewEngine : BuildManagerViewEngine {
    public WebFormViewEngine(IViewPageActivator viewPageActivator);
    protected virtual IView CreatePartialView(ControllerContext controllerContext, string partialPath);
    protected virtual IView CreateView(ControllerContext controllerContext, string viewPath, string masterPath);
}
public abstract class System.Web.Mvc.WebViewPage : WebPageBase {
    private ViewDataDictionary _viewData;
    private DynamicViewDataDictionary _dynamicViewData;
    private HttpContextBase _context;
    [CompilerGeneratedAttribute]
private AjaxHelper`1<object> <Ajax>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlHelper`1<object> <Html>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverridenLayoutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlHelper <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewContext <ViewContext>k__BackingField;
    public AjaxHelper`1<object> Ajax { get; public set; }
    public HttpContextBase Context { get; public set; }
    public HtmlHelper`1<object> Html { get; public set; }
    public object Model { get; }
    internal string OverridenLayoutPath { get; internal set; }
    public TempDataDictionary TempData { get; }
    public UrlHelper Url { get; public set; }
    [DynamicAttribute]
public object ViewBag { get; }
    public ViewContext ViewContext { get; public set; }
    public ViewDataDictionary ViewData { get; public set; }
    [CompilerGeneratedAttribute]
public AjaxHelper`1<object> get_Ajax();
    [CompilerGeneratedAttribute]
public void set_Ajax(AjaxHelper`1<object> value);
    public virtual HttpContextBase get_Context();
    public virtual void set_Context(HttpContextBase value);
    [CompilerGeneratedAttribute]
public sealed virtual HtmlHelper`1<object> get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(HtmlHelper`1<object> value);
    public object get_Model();
    [CompilerGeneratedAttribute]
internal string get_OverridenLayoutPath();
    [CompilerGeneratedAttribute]
internal void set_OverridenLayoutPath(string value);
    public TempDataDictionary get_TempData();
    [CompilerGeneratedAttribute]
public sealed virtual UrlHelper get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(UrlHelper value);
    public object get_ViewBag();
    [CompilerGeneratedAttribute]
public sealed virtual ViewContext get_ViewContext();
    [CompilerGeneratedAttribute]
public void set_ViewContext(ViewContext value);
    public sealed virtual ViewDataDictionary get_ViewData();
    public sealed virtual void set_ViewData(ViewDataDictionary value);
    protected virtual void ConfigurePage(WebPageBase parentPage);
    public virtual void ExecutePageHierarchy();
    public virtual void InitHelpers();
    protected virtual void SetViewData(ViewDataDictionary viewData);
    [CompilerGeneratedAttribute]
private ViewDataDictionary <get_ViewBag>b__0();
}
public abstract class System.Web.Mvc.WebViewPage`1 : WebViewPage {
    private ViewDataDictionary`1<TModel> _viewData;
    [CompilerGeneratedAttribute]
private AjaxHelper`1<TModel> <Ajax>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlHelper`1<TModel> <Html>k__BackingField;
    public AjaxHelper`1<TModel> Ajax { get; public set; }
    public HtmlHelper`1<TModel> Html { get; public set; }
    public TModel Model { get; }
    public ViewDataDictionary`1<TModel> ViewData { get; public set; }
    [CompilerGeneratedAttribute]
public AjaxHelper`1<TModel> get_Ajax();
    [CompilerGeneratedAttribute]
public void set_Ajax(AjaxHelper`1<TModel> value);
    [CompilerGeneratedAttribute]
public HtmlHelper`1<TModel> get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(HtmlHelper`1<TModel> value);
    public TModel get_Model();
    public ViewDataDictionary`1<TModel> get_ViewData();
    public void set_ViewData(ViewDataDictionary`1<TModel> value);
    public virtual void InitHelpers();
    protected virtual void SetViewData(ViewDataDictionary viewData);
}
