[CompilerGeneratedAttribute]
internal static class Microsoft.Internal.Web.Utils.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string Argument_Must_Be_Between { get; }
    internal static string Argument_Must_Be_Enum_Member { get; }
    internal static string Argument_Must_Be_GreaterThan { get; }
    internal static string Argument_Must_Be_GreaterThanOrEqualTo { get; }
    internal static string Argument_Must_Be_LessThan { get; }
    internal static string Argument_Must_Be_LessThanOrEqualTo { get; }
    internal static string Argument_Must_Be_Null_Or_Non_Empty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_Argument_Must_Be_Between();
    internal static string get_Argument_Must_Be_Enum_Member();
    internal static string get_Argument_Must_Be_GreaterThan();
    internal static string get_Argument_Must_Be_GreaterThanOrEqualTo();
    internal static string get_Argument_Must_Be_LessThan();
    internal static string get_Argument_Must_Be_LessThanOrEqualTo();
    internal static string get_Argument_Must_Be_Null_Or_Non_Empty();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
internal static class Microsoft.Internal.Web.Utils.ExceptionHelper : object {
    internal static ArgumentException CreateArgumentNullOrEmptyException(string paramName);
}
public class System.Web.Razor.CSharpRazorCodeLanguage : RazorCodeLanguage {
    private static string CSharpLanguageName;
    public string LanguageName { get; }
    public Type CodeDomProviderType { get; }
    public virtual string get_LanguageName();
    public virtual Type get_CodeDomProviderType();
    public virtual ParserBase CreateCodeParser();
    public virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
}
public class System.Web.Razor.DocumentParseCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <TreeStructureChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private GeneratorResults <GeneratorResults>k__BackingField;
    [CompilerGeneratedAttribute]
private TextChange <SourceChange>k__BackingField;
    public bool TreeStructureChanged { get; public set; }
    public GeneratorResults GeneratorResults { get; public set; }
    public TextChange SourceChange { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TreeStructureChanged();
    [CompilerGeneratedAttribute]
public void set_TreeStructureChanged(bool value);
    [CompilerGeneratedAttribute]
public GeneratorResults get_GeneratorResults();
    [CompilerGeneratedAttribute]
public void set_GeneratorResults(GeneratorResults value);
    [CompilerGeneratedAttribute]
public TextChange get_SourceChange();
    [CompilerGeneratedAttribute]
public void set_SourceChange(TextChange value);
}
public abstract class System.Web.Razor.Generator.BaseCodeWriter : CodeWriter {
    public virtual void WriteSnippet(string snippet);
    protected internal virtual void EmitStartMethodInvoke(string methodName);
    protected internal virtual void EmitEndMethodInvoke();
    protected internal virtual void EmitEndConstructor();
    protected internal virtual void EmitEndLambdaExpression();
    public virtual void WriteParameterSeparator();
    protected internal void WriteCommaSeparatedList(T[] items, Action`1<T> writeItemAction);
}
public class System.Web.Razor.Generator.CodeGenerationCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CodeCompileUnit <GeneratedCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhysicalPath>k__BackingField;
    public CodeCompileUnit GeneratedCode { get; private set; }
    public string VirtualPath { get; private set; }
    public string PhysicalPath { get; private set; }
    public CodeGenerationCompleteEventArgs(string virtualPath, string physicalPath, CodeCompileUnit generatedCode);
    [CompilerGeneratedAttribute]
public CodeCompileUnit get_GeneratedCode();
    [CompilerGeneratedAttribute]
private void set_GeneratedCode(CodeCompileUnit value);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
private void set_VirtualPath(string value);
    [CompilerGeneratedAttribute]
public string get_PhysicalPath();
    [CompilerGeneratedAttribute]
private void set_PhysicalPath(string value);
}
public abstract class System.Web.Razor.Generator.CodeWriter : object {
    private StringWriter _writer;
    private Stack`1<WriterMode> _contextStack;
    public string Content { get; }
    public StringWriter InnerWriter { get; }
    public string get_Content();
    public StringWriter get_InnerWriter();
    public abstract virtual void WriteParameterSeparator();
    public abstract virtual void WriteReturn();
    public abstract virtual void WriteLinePragma(Nullable`1<int> lineNumber, string fileName);
    public abstract virtual void WriteHelperHeaderPrefix(string templateTypeName, bool isStatic);
    public abstract virtual void WriteSnippet(string snippet);
    public abstract virtual void WriteStringLiteral(string literal);
    public virtual void WriteHiddenLinePragma();
    public virtual void WriteIdentifier(string identifier);
    public virtual void WriteHelperHeaderSuffix(string templateTypeName);
    public virtual void WriteHelperTrailer();
    public void WriteStartMethodInvoke(string methodName);
    public void WriteEndMethodInvoke();
    public virtual void WriteEndStatement();
    public virtual void WriteStartAssignment(string variableName);
    public void WriteStartLambdaExpression(String[] parameterNames);
    public void WriteStartConstructor(string typeName);
    public void WriteStartLambdaDelegate(String[] parameterNames);
    public void WriteEndLambdaExpression();
    public void WriteEndConstructor();
    public void WriteEndLambdaDelegate();
    private void EnsureCorrectContext(WriterMode writerContext);
    private static string GetContextName(WriterMode writerContext);
    public sealed virtual void Dispose();
    public void Clear();
    public CodeSnippetStatement ToStatement();
    public CodeSnippetTypeMember ToTypeMember();
    protected internal abstract virtual void EmitStartLambdaDelegate(String[] parameterNames);
    protected internal abstract virtual void EmitStartLambdaExpression(String[] parameterNames);
    protected internal abstract virtual void EmitStartConstructor(string typeName);
    protected internal abstract virtual void EmitStartMethodInvoke(string methodName);
    protected internal abstract virtual void EmitEndLambdaDelegate();
    protected internal abstract virtual void EmitEndLambdaExpression();
    protected internal abstract virtual void EmitEndConstructor();
    protected internal abstract virtual void EmitEndMethodInvoke();
    protected virtual void Dispose(bool disposing);
}
public class System.Web.Razor.Generator.CSharpCodeWriter : BaseCodeWriter {
    public virtual void WriteStringLiteral(string literal);
    private void WriteVerbatimStringLiteral(string literal);
    private void WriteCStyleStringLiteral(string literal);
    public virtual void WriteEndStatement();
    public virtual void WriteIdentifier(string identifier);
    protected internal virtual void EmitStartLambdaExpression(String[] parameterNames);
    protected internal virtual void EmitStartLambdaDelegate(String[] parameterNames);
    protected internal virtual void EmitEndLambdaDelegate();
    protected internal virtual void EmitStartConstructor(string typeName);
    public virtual void WriteReturn();
    public virtual void WriteLinePragma(Nullable`1<int> lineNumber, string fileName);
    public virtual void WriteHiddenLinePragma();
    public virtual void WriteHelperHeaderPrefix(string templateTypeName, bool isStatic);
}
public class System.Web.Razor.Generator.CSharpRazorCodeGenerator : RazorCodeGenerator {
    public CSharpRazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    protected virtual CodeWriter CreateCodeWriter();
    protected virtual void WriteHelperVariable(string type, string name);
}
public class System.Web.Razor.Generator.GeneratedClassContext : ValueType {
    public static string DefaultWriteMethodName;
    public static string DefaultWriteLiteralMethodName;
    public static string DefaultExecuteMethodName;
    public static GeneratedClassContext Default;
    [CompilerGeneratedAttribute]
private string <WriteMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteLiteralMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteToMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteLiteralToMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecuteMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefineSectionMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateTypeName>k__BackingField;
    public string WriteMethodName { get; public set; }
    public string WriteLiteralMethodName { get; public set; }
    public string WriteToMethodName { get; public set; }
    public string WriteLiteralToMethodName { get; public set; }
    public string ExecuteMethodName { get; public set; }
    public bool AllowSections { get; }
    public string DefineSectionMethodName { get; private set; }
    public bool AllowTemplates { get; }
    public string TemplateTypeName { get; private set; }
    public GeneratedClassContext(string executeMethodName, string writeMethodName, string writeLiteralMethodName);
    public GeneratedClassContext(string executeMethodName, string writeMethodName, string writeLiteralMethodName, string writeToMethodName, string writeLiteralToMethodName, string templateTypeName);
    public GeneratedClassContext(string executeMethodName, string writeMethodName, string writeLiteralMethodName, string writeToMethodName, string writeLiteralToMethodName, string templateTypeName, string defineSectionMethodName);
    private static GeneratedClassContext();
    [CompilerGeneratedAttribute]
public string get_WriteMethodName();
    [CompilerGeneratedAttribute]
public void set_WriteMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteLiteralMethodName();
    [CompilerGeneratedAttribute]
public void set_WriteLiteralMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteToMethodName();
    [CompilerGeneratedAttribute]
public void set_WriteToMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteLiteralToMethodName();
    [CompilerGeneratedAttribute]
public void set_WriteLiteralToMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecuteMethodName();
    [CompilerGeneratedAttribute]
public void set_ExecuteMethodName(string value);
    public bool get_AllowSections();
    [CompilerGeneratedAttribute]
public string get_DefineSectionMethodName();
    [CompilerGeneratedAttribute]
private void set_DefineSectionMethodName(string value);
    public bool get_AllowTemplates();
    [CompilerGeneratedAttribute]
public string get_TemplateTypeName();
    [CompilerGeneratedAttribute]
private void set_TemplateTypeName(string value);
    public virtual bool Equals(object obj);
    public static bool op_Equality(GeneratedClassContext left, GeneratedClassContext right);
    public static bool op_Inequality(GeneratedClassContext left, GeneratedClassContext right);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.GeneratedCodeMapping : ValueType {
    [CompilerGeneratedAttribute]
private int <CodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartGeneratedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    public int CodeLength { get; public set; }
    public int StartColumn { get; public set; }
    public int StartGeneratedColumn { get; public set; }
    public int StartLine { get; public set; }
    public GeneratedCodeMapping(int startLine, int startColumn, int startGeneratedColumn, int codeLength);
    [CompilerGeneratedAttribute]
public int get_CodeLength();
    [CompilerGeneratedAttribute]
public void set_CodeLength(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_StartGeneratedColumn();
    [CompilerGeneratedAttribute]
public void set_StartGeneratedColumn(int value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(int value);
    public virtual bool Equals(object obj);
    public static bool op_Equality(GeneratedCodeMapping left, GeneratedCodeMapping right);
    public static bool op_Inequality(GeneratedCodeMapping left, GeneratedCodeMapping right);
    public virtual int GetHashCode();
}
public abstract class System.Web.Razor.Generator.RazorCodeGenerator : ParserVisitor {
    private static string TemplateWriterName;
    private static string HelperWriterName;
    protected static string InheritsHelperName;
    private CodeCompileUnit _generatedCode;
    private CodeNamespace _rootNamespace;
    private CodeTypeDeclaration _generatedClass;
    private CodeMemberMethod _renderMethod;
    private CodeMemberMethod _helperVariablesMethod;
    private int _nextDesignTimeLinePragma;
    private Stack`1<BlockContext> _blockStack;
    private Stack`1<HelperContext> _helperStack;
    private CodeWriter _writer;
    private bool _insertedExpressionVariable;
    [CompilerGeneratedAttribute]
private bool <InTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InSection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngineHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateLinePragmas>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, GeneratedCodeMapping> <CodeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, CodeNamespaceImport> CS$<>9__CachedAnonymousMethodDelegatec;
    private HelperContext CurrentHelper { get; }
    protected internal bool InTemplate { get; protected internal set; }
    protected internal bool InSection { get; protected internal set; }
    protected internal bool InHelper { get; }
    protected internal bool InNestedWriterBlock { get; }
    protected internal string CurrentWriteMethod { get; }
    protected internal string CurrentWriteLiteralMethod { get; }
    protected internal string CurrentWriterName { get; }
    public string ClassName { get; private set; }
    public string RootNamespaceName { get; private set; }
    public string SourceFileName { get; private set; }
    public RazorEngineHost Host { get; private set; }
    public bool GenerateLinePragmas { get; public set; }
    public bool DesignTimeMode { get; public set; }
    public IDictionary`2<int, GeneratedCodeMapping> CodeMappings { get; private set; }
    public CodeCompileUnit GeneratedCode { get; internal set; }
    public CodeNamespace GeneratedNamespace { get; }
    public CodeTypeDeclaration GeneratedClass { get; }
    public CodeMemberMethod GeneratedExecuteMethod { get; }
    public CodeMemberMethod HelperVariablesMethod { get; }
    protected BlockContext CurrentBlock { get; }
    private CodeWriter Writer { get; }
    protected RazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    private static RazorCodeGenerator();
    private HelperContext get_CurrentHelper();
    [CompilerGeneratedAttribute]
protected internal bool get_InTemplate();
    [CompilerGeneratedAttribute]
protected internal void set_InTemplate(bool value);
    [CompilerGeneratedAttribute]
protected internal bool get_InSection();
    [CompilerGeneratedAttribute]
protected internal void set_InSection(bool value);
    protected internal bool get_InHelper();
    protected internal bool get_InNestedWriterBlock();
    protected internal string get_CurrentWriteMethod();
    protected internal string get_CurrentWriteLiteralMethod();
    protected internal string get_CurrentWriterName();
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
private void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_RootNamespaceName();
    [CompilerGeneratedAttribute]
private void set_RootNamespaceName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceFileName();
    [CompilerGeneratedAttribute]
private void set_SourceFileName(string value);
    [CompilerGeneratedAttribute]
public RazorEngineHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(RazorEngineHost value);
    [CompilerGeneratedAttribute]
public bool get_GenerateLinePragmas();
    [CompilerGeneratedAttribute]
public void set_GenerateLinePragmas(bool value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public void set_DesignTimeMode(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, GeneratedCodeMapping> get_CodeMappings();
    [CompilerGeneratedAttribute]
private void set_CodeMappings(IDictionary`2<int, GeneratedCodeMapping> value);
    public CodeCompileUnit get_GeneratedCode();
    internal void set_GeneratedCode(CodeCompileUnit value);
    public CodeNamespace get_GeneratedNamespace();
    public CodeTypeDeclaration get_GeneratedClass();
    public CodeMemberMethod get_GeneratedExecuteMethod();
    public CodeMemberMethod get_HelperVariablesMethod();
    protected BlockContext get_CurrentBlock();
    private CodeWriter get_Writer();
    protected abstract virtual CodeWriter CreateCodeWriter();
    protected virtual void WriteHelperVariable(string type, string name);
    public virtual void VisitStartBlock(BlockType type);
    public virtual void VisitEndBlock(BlockType type);
    public virtual void VisitSpan(Span span);
    private bool TryVisitSpecialSpanCore(Span span);
    protected virtual bool TryVisitSpecialSpan(Span span);
    protected internal static bool TryVisit(Span baseSpan, Action`1<T> subclassVisitor);
    public virtual void VisitError(RazorError err);
    public virtual void OnComplete();
    protected internal virtual void VisitSpan(InheritsSpan span);
    protected internal virtual void VisitSpan(HelperFooterSpan span);
    protected internal virtual void VisitSpan(HelperHeaderSpan span);
    protected internal virtual void VisitSpan(NamespaceImportSpan span);
    protected internal virtual void VisitSpan(SectionHeaderSpan span);
    protected virtual void SuspendBlock(BlockContext currentBlock, BlockContext nextBlock);
    protected virtual void ResumeBlock(BlockContext block, BlockContext previousBlock);
    protected virtual void EndBlock(BlockContext block);
    protected virtual void StartBlock(BlockContext block);
    protected virtual void WriteHelperTrailer(BlockContext block);
    protected virtual void WriteHelperTrailer(BlockContext block, HelperFooterSpan endSequenceSpan);
    private void WriteHelper();
    private CodeTypeMember CreateTypeMember(BlockContext block);
    protected virtual CodeSnippetStatement CreateStatement(BlockContext block);
    protected virtual CodeLinePragma CreateLinePragma(BlockContext block);
    protected virtual CodeLinePragma CreateLinePragma(SourceLocation sourceLocation, int generatedCodeStart, int generatedCodeLength);
    protected virtual void EnsureExpressionHelperVariable();
    private string PadContent(BlockContext block, string content);
    private void AddCodeMapping(int pragmaId, SourceLocation sourceLocation, int generatedCodeStart, int generatedCodeLength);
    private void WriteBlock(BlockContext block);
    private void WriteBlockToHelperContent(BlockContext block);
    private void EnsureCompileUnitInitialized();
    private void InitializeCodeCompileUnit();
    [CompilerGeneratedAttribute]
private static CodeNamespaceImport <InitializeCodeCompileUnit>b__b(string s);
}
public class System.Web.Razor.Generator.VBCodeWriter : BaseCodeWriter {
    public virtual void WriteStringLiteral(string literal);
    protected internal virtual void EmitStartLambdaExpression(String[] parameterNames);
    protected internal virtual void EmitStartConstructor(string typeName);
    protected internal virtual void EmitStartLambdaDelegate(String[] parameterNames);
    protected internal virtual void EmitEndLambdaDelegate();
    private void WriteCharLiteral(char literal);
    private void EnsureInQuotes(Boolean& inQuotes);
    private void EnsureOutOfQuotes(Boolean& inQuotes);
    public virtual void WriteReturn();
    public virtual void WriteLinePragma(Nullable`1<int> lineNumber, string fileName);
    public virtual void WriteHelperHeaderPrefix(string templateTypeName, bool isStatic);
    public virtual void WriteHelperHeaderSuffix(string templateTypeName);
    public virtual void WriteHelperTrailer();
    public virtual void WriteEndStatement();
}
public class System.Web.Razor.Generator.VBRazorCodeGenerator : RazorCodeGenerator {
    public VBRazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    protected virtual CodeWriter CreateCodeWriter();
    protected virtual void WriteHelperVariable(string type, string name);
    public virtual void VisitSpan(Span span);
    protected virtual void VisitSpan(VBOptionSpan span);
}
public class System.Web.Razor.GeneratorResults : ParserResults {
    [CompilerGeneratedAttribute]
private CodeCompileUnit <GeneratedCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, GeneratedCodeMapping> <DesignTimeLineMappings>k__BackingField;
    public CodeCompileUnit GeneratedCode { get; private set; }
    public IDictionary`2<int, GeneratedCodeMapping> DesignTimeLineMappings { get; private set; }
    public GeneratorResults(ParserResults parserResults, CodeCompileUnit generatedCode, IDictionary`2<int, GeneratedCodeMapping> designTimeLineMappings);
    public GeneratorResults(Block document, IList`1<RazorError> parserErrors, CodeCompileUnit generatedCode, IDictionary`2<int, GeneratedCodeMapping> designTimeLineMappings);
    protected GeneratorResults(bool success, Block document, IList`1<RazorError> parserErrors, CodeCompileUnit generatedCode, IDictionary`2<int, GeneratedCodeMapping> designTimeLineMappings);
    [CompilerGeneratedAttribute]
public CodeCompileUnit get_GeneratedCode();
    [CompilerGeneratedAttribute]
private void set_GeneratedCode(CodeCompileUnit value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, GeneratedCodeMapping> get_DesignTimeLineMappings();
    [CompilerGeneratedAttribute]
private void set_DesignTimeLineMappings(IDictionary`2<int, GeneratedCodeMapping> value);
}
public class System.Web.Razor.Parser.CallbackVisitor : ParserVisitor {
    private Action`1<Span> _spanCallback;
    private Action`1<RazorError> _errorCallback;
    private Action`1<BlockType> _endBlockCallback;
    private Action`1<BlockType> _startBlockCallback;
    private Action _completeCallback;
    [CompilerGeneratedAttribute]
private SynchronizationContext <SynchronizationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<RazorError> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`1<BlockType> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<BlockType> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate7;
    public SynchronizationContext SynchronizationContext { get; public set; }
    public CallbackVisitor(Action`1<Span> spanCallback);
    public CallbackVisitor(Action`1<Span> spanCallback, Action`1<RazorError> errorCallback);
    public CallbackVisitor(Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, Action`1<BlockType> startBlockCallback, Action`1<BlockType> endBlockCallback);
    public CallbackVisitor(Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, Action`1<BlockType> startBlockCallback, Action`1<BlockType> endBlockCallback, Action completeCallback);
    [CompilerGeneratedAttribute]
public SynchronizationContext get_SynchronizationContext();
    [CompilerGeneratedAttribute]
public void set_SynchronizationContext(SynchronizationContext value);
    public virtual void VisitStartBlock(BlockType type);
    public virtual void VisitSpan(Span span);
    public virtual void VisitEndBlock(BlockType type);
    public virtual void VisitError(RazorError err);
    public virtual void OnComplete();
    private static void RaiseCallback(SynchronizationContext syncContext, T param, Action`1<T> callback);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(RazorError _);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(BlockType _);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3(BlockType _);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__6();
    [CompilerGeneratedAttribute]
private void <OnComplete>b__8(object _);
}
public class System.Web.Razor.Parser.CodeBlockInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <TransitionSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <InitialSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTopLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockType <BlockType>k__BackingField;
    public string Name { get; public set; }
    public SourceLocation Start { get; public set; }
    public Span TransitionSpan { get; public set; }
    public Span InitialSpan { get; public set; }
    public bool IsTopLevel { get; public set; }
    public BlockType BlockType { get; public set; }
    public CodeBlockInfo(string name, SourceLocation start, bool isTopLevel);
    public CodeBlockInfo(string name, SourceLocation start, bool isTopLevel, Span transitionSpan, Span initialSpan);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SourceLocation get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(SourceLocation value);
    [CompilerGeneratedAttribute]
public Span get_TransitionSpan();
    [CompilerGeneratedAttribute]
public void set_TransitionSpan(Span value);
    [CompilerGeneratedAttribute]
public Span get_InitialSpan();
    [CompilerGeneratedAttribute]
public void set_InitialSpan(Span value);
    [CompilerGeneratedAttribute]
public bool get_IsTopLevel();
    [CompilerGeneratedAttribute]
public void set_IsTopLevel(bool value);
    [CompilerGeneratedAttribute]
public BlockType get_BlockType();
    [CompilerGeneratedAttribute]
public void set_BlockType(BlockType value);
    public void ResumeSpans(ParserContext context);
}
public abstract class System.Web.Razor.Parser.CodeParser : ParserBase {
    private static Dictionary`2<char, char> _bracketPairs;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate6;
    protected ParserBase OtherParser { get; }
    protected internal ISet`1<string> TopLevelKeywords { get; }
    private static CodeParser();
    protected virtual ParserBase get_OtherParser();
    protected internal virtual ISet`1<string> get_TopLevelKeywords();
    protected internal abstract virtual bool TryAcceptStringOrComment();
    protected internal abstract virtual bool HandleTransition(SpanFactory spanFactory);
    protected internal abstract virtual void AcceptGenericArgument();
    protected virtual bool TryRecover(bool allowTransition, SpanFactory previousSpanFactory);
    protected void AcceptTypeName();
    protected void AcceptTypeName(bool allowGenerics);
    protected virtual void AcceptUntilUnquoted(Predicate`1<char> condition);
    private SpanFactory CreateImplicitExpressionSpanFactory(bool acceptTrailingDot);
    protected virtual ImplicitExpressionSpan CreateImplicitExpressionSpan(ParserContext context, bool acceptTrailingDot, AcceptedCharacters accepted);
    protected AcceptedCharacters AcceptDottedExpression(bool isWithinCode, bool expectIdentifierFirst, Char[] allowedBrackets);
    protected bool TryRecover(RecoveryModes mode);
    protected bool TryRecover(RecoveryModes mode, Predicate`1<char> condition, bool allowTransition, SpanFactory previousSpanFactory);
    private void AcceptOrSkipCurrent(bool appendOuter, int nesting);
    protected bool RequireSingleWhiteSpace();
    protected CodeBlockInfo ParseBlockStart(bool isTopLevel, bool captureTransition);
    protected virtual void AcceptWhiteSpaceByLines();
    protected bool BalanceBrackets();
    protected bool BalanceBrackets(bool allowTransition);
    protected bool BalanceBrackets(bool allowTransition, SpanFactory spanFactory);
    protected bool BalanceBrackets(bool allowTransition, SpanFactory spanFactory, bool appendOuter);
    protected bool BalanceBrackets(bool allowTransition, SpanFactory spanFactory, bool appendOuter, char bracket);
    protected virtual bool BalanceBrackets(bool allowTransition, SpanFactory spanFactory, bool appendOuter, Nullable`1<char> bracket, bool useTemporaryBuffer);
    [CompilerGeneratedAttribute]
private bool <AcceptDottedExpression>b__3(char c);
    [CompilerGeneratedAttribute]
private static bool <TryRecover>b__5(char ch);
}
public class System.Web.Razor.Parser.CSharpCodeParser : CodeParser {
    internal static ISet`1<string> DefaultKeywords;
    internal static int UsingKeywordLength;
    private static Dictionary`2<char, char> _bracketPairs;
    private ISet`1<string> _topLevelKeywords;
    private BlockParser _implicitExpressionParser;
    private Dictionary`2<string, BlockParser> _identifierHandlers;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, BlockParser> <RazorKeywords>k__BackingField;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate8;
    protected internal Dictionary`2<string, BlockParser> RazorKeywords { get; private set; }
    protected internal ISet`1<string> TopLevelKeywords { get; }
    private static CSharpCodeParser();
    [CompilerGeneratedAttribute]
protected internal Dictionary`2<string, BlockParser> get_RazorKeywords();
    [CompilerGeneratedAttribute]
private void set_RazorKeywords(Dictionary`2<string, BlockParser> value);
    protected internal virtual ISet`1<string> get_TopLevelKeywords();
    public virtual bool IsAtExplicitTransition();
    public virtual bool IsAtImplicitTransition();
    protected virtual bool TryRecover(bool allowTransition, SpanFactory previousSpanFactory);
    public virtual void ParseBlock();
    protected internal BlockParser WrapSimpleBlockParser(BlockType type, BlockParser blockParser);
    protected bool HandleReservedWord(CodeBlockInfo block);
    protected internal virtual bool ParseInheritsStatement(CodeBlockInfo block);
    protected internal virtual bool ParseImplicitExpression(CodeBlockInfo block);
    protected internal virtual bool ParseImplicitExpression(CodeBlockInfo block, bool isWithinCode, bool expectIdentifierFirst);
    protected internal virtual void ParseStatement(CodeBlockInfo block);
    protected internal virtual void ParseInvalidMarkupSwitch();
    protected internal virtual bool ParseConditionalBlockStatement(CodeBlockInfo block);
    protected internal virtual bool ParseControlFlowBody(CodeBlockInfo block);
    protected internal virtual bool ParseTryStatement(CodeBlockInfo block);
    protected internal virtual bool ParseDoStatement(CodeBlockInfo block);
    protected internal virtual bool ParseIfStatement(CodeBlockInfo block);
    protected internal virtual void AcceptWhiteSpaceAndComments();
    protected internal virtual bool ParseCaseBlock(CodeBlockInfo block);
    private bool ParseUsingStatement(CodeBlockInfo block);
    private bool ParseHelperBlock(CodeBlockInfo block);
    private bool ParseSectionBlock(CodeBlockInfo block);
    private bool ParseFunctionsBlock(CodeBlockInfo block);
    private bool ParseDelimitedBlock(CodeBlockInfo block, bool allowTransition, bool useErrorRecovery, string autoCompleteString);
    private bool ParseCodeBlock(CodeBlockInfo block, bool bracesAreMetacode, bool acceptBraces);
    private void ParseNamespaceImport();
    private void ParseEmbeddedExpression();
    protected internal virtual bool HandleTransition(SpanFactory spanFactory);
    private bool HandleTransition(SpanFactory spanFactory, bool acceptOuterTemporaryIfSwitching);
    protected internal virtual bool TryAcceptStringOrComment();
    private void AcceptComment();
    private bool IsCommentStart();
    private void AcceptStatementToSemicolon();
    private void AcceptQuotedLiteral(bool verbatim);
    private BlockParser GetBlockParser(CodeBlockInfo block, BlockParser fallbackParser);
    private BlockParser GetBlockParser(CodeBlockInfo block, BlockParser fallbackParser, Boolean& isStatementBlock);
    protected internal virtual void AcceptGenericArgument();
    [CompilerGeneratedAttribute]
private static bool <AcceptStatementToSemicolon>b__5(char c);
    [CompilerGeneratedAttribute]
private static bool <AcceptStatementToSemicolon>b__6(char ch);
}
public class System.Web.Razor.Parser.HtmlMarkupParser : MarkupParser {
    private static string PseudoTagName;
    private static char TagTransitionCharacter;
    private static char LineTransitionCharacter;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate13;
    public virtual bool IsAtExplicitTransition();
    public virtual bool IsAtImplicitTransition();
    public virtual void ParseSection(Tuple`2<string, string> nestingSequences, bool caseSensitive);
    public virtual void ParseDocument();
    private void ParseRootBlock(Tuple`2<string, string> nestingSequences, bool caseSensitive);
    public virtual void ParseBlock();
    public virtual bool IsStartTag();
    public virtual bool IsEndTag();
    private bool ParseSingleLineBlock();
    private bool ParseTagBlock(bool inDocument);
    private void ParseEndPsuedoTag(Stack`1<TagInfo> tags, TagInfo tag, bool inDocument);
    private bool ParseStartPsuedoTag(Stack`1<TagInfo> tags, TagInfo tag);
    private TagInfo ParseStartOfTag();
    private bool ParseEndTag(Stack`1<TagInfo> tags, TagInfo tag, bool acceptUnmatchedEndTag);
    private void UpdateTagStack(Stack`1<TagInfo> tags, TagInfo tag, bool errorIfUnmatched);
    private bool ParseStartTag(Stack`1<TagInfo> tags, TagInfo tag);
    private bool ParseProcessingInstruction();
    private bool ParseBangTag(string tagName);
    private bool ParseSgmlDeclaration();
    private bool ParseCData();
    private bool ParseHtmlComment();
    private void AppendToEndOfTag(TagInfo tag);
    private void AppendUntilAndParseCode(Func`2<char, bool> terminator);
    private bool TryStartCodeParser(bool isSingleLineMarkup, bool documentLevel);
    private string AcceptTagName();
    private bool CheckForCodeBlockAndSkipIfNotCode();
    private static bool IsPsuedoTagValidHere(bool inDocument, Stack`1<TagInfo> tags, bool startedByPseudoTag, TagInfo tag);
    [CompilerGeneratedAttribute]
private static bool <ParseTagBlock>b__0(char c);
    [CompilerGeneratedAttribute]
private static bool <ParseEndTag>b__2(char c);
    [CompilerGeneratedAttribute]
private static bool <ParseProcessingInstruction>b__4(char c);
    [CompilerGeneratedAttribute]
private static bool <ParseSgmlDeclaration>b__6(char c);
    [CompilerGeneratedAttribute]
private static bool <ParseCData>b__8(char c);
    [CompilerGeneratedAttribute]
private static bool <ParseHtmlComment>b__a(char c);
    [CompilerGeneratedAttribute]
private static bool <AppendToEndOfTag>b__c(char c);
    [CompilerGeneratedAttribute]
private static bool <AcceptTagName>b__12(char c);
}
public abstract class System.Web.Razor.Parser.MarkupParser : ParserBase {
    protected ParserBase OtherParser { get; }
    protected virtual ParserBase get_OtherParser();
    public abstract virtual void ParseDocument();
    public abstract virtual void ParseSection(Tuple`2<string, string> nestingSequences, bool caseSensitive);
    public abstract virtual bool IsStartTag();
    public abstract virtual bool IsEndTag();
}
public abstract class System.Web.Razor.Parser.ParserBase : object {
    private ParserContext _context;
    public ParserContext Context { get; public set; }
    protected ParserBase OtherParser { get; }
    protected bool HaveContent { get; }
    protected bool InTemporaryBuffer { get; }
    protected bool DesignTimeMode { get; }
    protected bool EndOfFile { get; }
    protected char CurrentCharacter { get; }
    protected SourceLocation CurrentLocation { get; }
    public ParserContext get_Context();
    public void set_Context(ParserContext value);
    protected abstract virtual ParserBase get_OtherParser();
    public virtual bool IsAtExplicitTransition();
    public virtual bool IsAtImplicitTransition();
    public virtual bool IsAtTransition();
    protected bool get_HaveContent();
    protected bool get_InTemporaryBuffer();
    protected bool get_DesignTimeMode();
    protected bool get_EndOfFile();
    protected char get_CurrentCharacter();
    protected SourceLocation get_CurrentLocation();
    public virtual bool NextIsTransition(bool allowImplicit, bool allowExplicit);
    public abstract virtual void ParseBlock();
    protected IDisposable StartBlock(BlockType type);
    protected IDisposable StartBlock(BlockType type, bool outputCurrentAsTransition);
    protected void EndBlock();
    protected void Output(Span span);
    protected void OnError(SourceLocation location, string message);
    protected void OnError(SourceLocation location, string message, Object[] args);
    protected void End(SpanFactory spanFactory);
    protected void End(Span span);
    protected void ParseBlockWithOtherParser(SpanFactory previousSpanFactory);
    protected void ParseBlockWithOtherParser(SpanFactory previousSpanFactory, bool collectTransitionToken);
    protected bool TryParseComment(SpanFactory previousSpanFactory);
    protected void ParseComment();
    protected void AcceptLineWithBlockComments(ParserContext context, SpanFactory spanFactory);
}
public class System.Web.Razor.Parser.ParserContext : object {
    private Nullable`1<int> _ownerTaskId;
    private Stack`1<TemporaryContext> _temporaryContextStack;
    private StringBuilder _primaryBuffer;
    private int _nestedAnonymousSections;
    private int _nestedNamedSections;
    private int _nestedHelpers;
    private bool _terminated;
    private Span _nextSpanToOutput;
    private Stack`1<BlockType> _blockStack;
    private Stack`1<ParserVisitor> _visitorStack;
    [CompilerGeneratedAttribute]
private LookaheadTextReader <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <CurrentSpanStart>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <PreviousSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SeenValidEmailPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserBase <CodeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkupParser <MarkupParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserBase <ActiveParser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhiteSpaceIsImportantToAncestorBlock>k__BackingField;
    public LookaheadTextReader Source { get; public set; }
    public SourceLocation CurrentSpanStart { get; private set; }
    public Span PreviousSpan { get; private set; }
    public bool PreviousSpanCanGrow { get; }
    public SourceLocation CurrentLocation { get; }
    public bool SeenValidEmailPrefix { get; public set; }
    public ParserBase CodeParser { get; private set; }
    public MarkupParser MarkupParser { get; private set; }
    public ParserBase ActiveParser { get; private set; }
    public bool DesignTimeMode { get; public set; }
    public bool WhiteSpaceIsImportantToAncestorBlock { get; public set; }
    public bool InTemporaryBuffer { get; }
    public StringBuilder ContentBuffer { get; }
    public char CurrentCharacter { get; }
    public bool EndOfFile { get; }
    public bool HaveContent { get; }
    internal ParserVisitor Visitor { get; }
    public ParserContext(LookaheadTextReader source, ParserBase codeParser, MarkupParser markupParser, ParserBase activeParser, ParserVisitor visitor);
    [CompilerGeneratedAttribute]
public LookaheadTextReader get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(LookaheadTextReader value);
    [CompilerGeneratedAttribute]
public SourceLocation get_CurrentSpanStart();
    [CompilerGeneratedAttribute]
private void set_CurrentSpanStart(SourceLocation value);
    [CompilerGeneratedAttribute]
public Span get_PreviousSpan();
    [CompilerGeneratedAttribute]
private void set_PreviousSpan(Span value);
    public bool get_PreviousSpanCanGrow();
    public SourceLocation get_CurrentLocation();
    [CompilerGeneratedAttribute]
public bool get_SeenValidEmailPrefix();
    [CompilerGeneratedAttribute]
public void set_SeenValidEmailPrefix(bool value);
    [CompilerGeneratedAttribute]
public ParserBase get_CodeParser();
    [CompilerGeneratedAttribute]
private void set_CodeParser(ParserBase value);
    [CompilerGeneratedAttribute]
public MarkupParser get_MarkupParser();
    [CompilerGeneratedAttribute]
private void set_MarkupParser(MarkupParser value);
    [CompilerGeneratedAttribute]
public ParserBase get_ActiveParser();
    [CompilerGeneratedAttribute]
private void set_ActiveParser(ParserBase value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public void set_DesignTimeMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_WhiteSpaceIsImportantToAncestorBlock();
    [CompilerGeneratedAttribute]
public void set_WhiteSpaceIsImportantToAncestorBlock(bool value);
    public bool get_InTemporaryBuffer();
    public StringBuilder get_ContentBuffer();
    public char get_CurrentCharacter();
    public bool get_EndOfFile();
    public bool get_HaveContent();
    internal ParserVisitor get_Visitor();
    public IDisposable StartTemporaryBuffer();
    public void AcceptTemporaryBuffer();
    public char AcceptCurrent();
    public string Append(string value);
    public void OutputSpan(Span span);
    public void ResumeSpan(Span span);
    public IDisposable StartBlock(BlockType blockType, bool outputCurrentBufferAsTransition);
    public void PushVisitor(ParserVisitor visitor);
    public void PopVisitor();
    public void Replay(IEnumerable`1<SyntaxTreeNode> elements, IEnumerable`1<RazorError> errors);
    private string FormatForLanguage(string formatString, string vbExample, string csExample);
    private void HandleWhitespaceRewriting();
    public void EndBlock();
    public static bool IsEmailPrefixOrSuffixCharacter(char character);
    public void UpdateSeenValidEmailPrefix();
    public void RejectTemporaryBuffer();
    public bool SkipCurrent();
    public void ResetBuffers();
    public void SwitchActiveParser();
    public void OnComplete();
    public void OnError(SourceLocation location, string message);
    public void OnError(SourceLocation location, string message, Object[] args);
    public void FlushNextOutputSpan();
    private void HandleNestingCheck(string errorMessage, Int32& nestingCounter);
    private void RejectTemporaryBuffer(TemporaryContext context);
    public void AcceptTemporaryBufferInDesignTimeMode();
    [ConditionalAttribute("DEBUG")]
internal void CaptureOwnerTask();
    [ConditionalAttribute("DEBUG")]
internal void AssertOnOwnerTask();
    [ConditionalAttribute("DEBUG")]
internal void AssertCurrent(char expected);
}
[ExtensionAttribute]
public static class System.Web.Razor.Parser.ParserContextExtensions : object {
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static bool Accept(ParserContext context, string expected, bool caseSensitive);
    [ExtensionAttribute]
public static bool Accept(ParserContext context, string expected, bool caseSensitive, Nullable`1& errorLocation, Nullable`1& errorChar);
    private static bool CharsEqual(char l, char r, bool caseSensitive);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, char expected);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, char expected, bool outputError);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, char expected, bool outputError, string errorMessage);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, char expected, bool outputError, string errorMessage, bool caseSensitive);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, char expected, bool outputError, string errorMessage, bool caseSensitive, Nullable`1<SourceLocation> errorLocation);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, string expected);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, string expected, bool outputError);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, string expected, bool outputError, string errorMessage);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, string expected, bool outputError, string errorMessage, bool caseSensitive);
    [ExtensionAttribute]
public static bool Expect(ParserContext context, string expected, bool outputError, string errorMessage, bool caseSensitive, Nullable`1<SourceLocation> errorLocation);
    [ExtensionAttribute]
public static void AcceptCharacters(ParserContext context, int number);
    [ExtensionAttribute]
public static void AcceptLine(ParserContext context, bool includeNewLineSequence);
    [ExtensionAttribute]
public static string AcceptIdentifier(ParserContext context);
    [ExtensionAttribute]
public static string AcceptUntil(ParserContext context, SourceLocation location);
    [ExtensionAttribute]
public static string AcceptUntil(ParserContext context, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string AcceptUntil(ParserContext context, Char[] terminators);
    [ExtensionAttribute]
public static string AcceptUntilInclusive(ParserContext context, Char[] terminators);
    [ExtensionAttribute]
public static string AcceptWhiteSpace(ParserContext context, bool includeNewLines);
    [ExtensionAttribute]
public static string AcceptWhile(ParserContext context, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string ReadWhiteSpace(ParserContext context, bool includeNewLines);
    [ExtensionAttribute]
public static bool Peek(ParserContext context, string expectedText, bool caseSensitive);
    [ExtensionAttribute]
public static bool PeekAny(ParserContext context, String[] items);
    [ExtensionAttribute]
public static bool PeekAny(ParserContext context, bool caseSensitive, String[] items);
    [ExtensionAttribute]
public static string ExpectIdentifier(ParserContext context, string unexpectedErrorMessageFormat);
    [ExtensionAttribute]
public static string ExpectIdentifier(ParserContext context, string unexpectedErrorMessageFormat, bool allowPrecedingWhiteSpace);
    [ExtensionAttribute]
public static string ExpectIdentifier(ParserContext context, string unexpectedErrorMessageFormat, bool allowPrecedingWhiteSpace, Nullable`1<SourceLocation> errorLocation);
    [ExtensionAttribute]
public static void AcceptNewLine(ParserContext context);
    [CompilerGeneratedAttribute]
private static bool <AcceptIdentifier>b__0(char c);
}
public static class System.Web.Razor.Parser.ParserHelpers : object {
    [CompilerGeneratedAttribute]
private static Func`2<char, char> CS$<>9__CachedAnonymousMethodDelegate1;
    public static bool IsIdentifier(string value);
    public static bool IsIdentifier(string value, bool requireIdentifierStart);
    public static bool IsHexDigit(char value);
    public static bool IsIdentifierStart(char value);
    public static bool IsIdentifierPart(char value);
    public static bool IsTerminatingCharToken(char value);
    public static bool IsTerminatingQuotedStringToken(char value);
    public static bool IsDecimalDigit(char value);
    public static bool IsLetter(char value);
    public static bool IsNewLine(char value);
    public static bool IsNewLine(string value);
    public static bool IsFormatting(char value);
    public static bool IsCombining(char value);
    public static bool IsConnecting(char value);
    public static string SanitizeClassName(string inputName);
    [CompilerGeneratedAttribute]
private static char <SanitizeClassName>b__0(char value);
}
public abstract class System.Web.Razor.Parser.ParserVisitor : object {
    [CompilerGeneratedAttribute]
private Nullable`1<CancellationToken> <CancelToken>k__BackingField;
    public Nullable`1<CancellationToken> CancelToken { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<CancellationToken> get_CancelToken();
    [CompilerGeneratedAttribute]
public void set_CancelToken(Nullable`1<CancellationToken> value);
    public virtual void VisitStartBlock(BlockType type);
    public virtual void VisitSpan(Span span);
    public virtual void VisitEndBlock(BlockType type);
    public virtual void VisitError(RazorError err);
    public virtual void OnComplete();
    public virtual void ThrowIfCanceled();
}
public class System.Web.Razor.Parser.RazorParser : object {
    public static char TransitionCharacter;
    public static string TransitionString;
    public static string StartCommentSequence;
    public static string EndCommentSequence;
    [CompilerGeneratedAttribute]
private ParserBase <CodeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkupParser <MarkupParser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    internal ParserBase CodeParser { get; private set; }
    internal MarkupParser MarkupParser { get; private set; }
    public bool DesignTimeMode { get; public set; }
    public RazorParser(ParserBase codeParser, MarkupParser markupParser);
    private static RazorParser();
    [CompilerGeneratedAttribute]
internal ParserBase get_CodeParser();
    [CompilerGeneratedAttribute]
private void set_CodeParser(ParserBase value);
    [CompilerGeneratedAttribute]
internal MarkupParser get_MarkupParser();
    [CompilerGeneratedAttribute]
private void set_MarkupParser(MarkupParser value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public void set_DesignTimeMode(bool value);
    public virtual void Parse(TextReader input, ParserVisitor visitor);
    public virtual ParserResults Parse(TextReader input);
    public virtual void Parse(LookaheadTextReader input, ParserVisitor visitor);
    public virtual ParserResults Parse(LookaheadTextReader input);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, SynchronizationContext context);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, CancellationToken cancelToken);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, SynchronizationContext context, CancellationToken cancelToken);
    public virtual Task CreateParseTask(TextReader input, ParserVisitor consumer);
    private ParserResults SyncParseCore(LookaheadTextReader input);
}
[FlagsAttribute]
public enum System.Web.Razor.Parser.RecoveryModes : Enum {
    public int value__;
    public static RecoveryModes Markup;
    public static RecoveryModes Code;
    public static RecoveryModes Transition;
    public static RecoveryModes Any;
}
[FlagsAttribute]
public enum System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters : Enum {
    public int value__;
    public static AcceptedCharacters None;
    public static AcceptedCharacters NewLine;
    public static AcceptedCharacters WhiteSpace;
    public static AcceptedCharacters NonWhiteSpace;
    public static AcceptedCharacters AllWhiteSpace;
    public static AcceptedCharacters Any;
}
public class System.Web.Razor.Parser.SyntaxTree.Block : SyntaxTreeNode {
    [CompilerGeneratedAttribute]
private BlockType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SyntaxTreeNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<SyntaxTreeNode, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public BlockType Type { get; private set; }
    public IEnumerable`1<SyntaxTreeNode> Children { get; private set; }
    public string Name { get; private set; }
    public bool IsBlock { get; }
    public SourceLocation Start { get; }
    public int Length { get; }
    public Block(BlockType type, IEnumerable`1<SyntaxTreeNode> contents);
    public Block(BlockType type, IEnumerable`1<SyntaxTreeNode> contents, string name);
    [CompilerGeneratedAttribute]
public BlockType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(BlockType value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SyntaxTreeNode> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IEnumerable`1<SyntaxTreeNode> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual bool get_IsBlock();
    public virtual SourceLocation get_Start();
    public virtual int get_Length();
    public Span FindFirstDescendentSpan();
    public Span FindLastDescendentSpan();
    public virtual void Accept(ParserVisitor visitor);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public IEnumerable`1<Span> Flatten();
    public Span LocateOwner(TextChange change);
    private static bool ChildrenEqual(IEnumerable`1<SyntaxTreeNode> left, IEnumerable`1<SyntaxTreeNode> right);
    [CompilerGeneratedAttribute]
private static int <get_Length>b__0(SyntaxTreeNode child);
}
public enum System.Web.Razor.Parser.SyntaxTree.BlockType : Enum {
    public int value__;
    public static BlockType Statement;
    public static BlockType Directive;
    public static BlockType Functions;
    public static BlockType Expression;
    public static BlockType Helper;
    public static BlockType Markup;
    public static BlockType Section;
    public static BlockType Template;
    public static BlockType Comment;
}
public class System.Web.Razor.Parser.SyntaxTree.CodeSpan : Span {
    internal CodeSpan(string content);
    internal CodeSpan(string content, bool hidden);
    internal CodeSpan(string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public CodeSpan(SourceLocation start, string content);
    public CodeSpan(SourceLocation start, string content, bool hidden);
    public CodeSpan(SourceLocation start, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public static CodeSpan Create(ParserContext context);
    public static CodeSpan Create(ParserContext context, string autoCompleteString);
    public static CodeSpan Create(ParserContext context, bool hidden);
    public static CodeSpan Create(ParserContext context, bool hidden, AcceptedCharacters acceptedCharacters);
    public virtual string ToString();
    protected virtual PartialParseResult CanAcceptChange(TextChange change);
}
public class System.Web.Razor.Parser.SyntaxTree.CommentSpan : Span {
    internal CommentSpan(string content);
    internal CommentSpan(string content, bool hidden);
    internal CommentSpan(string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public CommentSpan(SourceLocation start, string content);
    public CommentSpan(SourceLocation start, string content, bool hidden);
    public CommentSpan(SourceLocation start, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public static CommentSpan Create(ParserContext context);
    public static CommentSpan Create(ParserContext context, bool hidden);
    public static CommentSpan Create(ParserContext context, bool hidden, AcceptedCharacters acceptedCharacters);
}
public class System.Web.Razor.Parser.SyntaxTree.HelperFooterSpan : CodeSpan {
    internal HelperFooterSpan(string content);
    public HelperFooterSpan(SourceLocation start, string content);
    public static HelperFooterSpan Create(ParserContext context);
    public static HelperFooterSpan Create(ParserContext context, AcceptedCharacters acceptedCharacters);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Web.Razor.Parser.SyntaxTree.HelperHeaderSpan : CodeSpan {
    [CompilerGeneratedAttribute]
private bool <Complete>k__BackingField;
    public bool Complete { get; private set; }
    internal HelperHeaderSpan(string content, bool complete);
    public HelperHeaderSpan(SourceLocation start, string content, bool complete);
    [CompilerGeneratedAttribute]
public bool get_Complete();
    [CompilerGeneratedAttribute]
private void set_Complete(bool value);
    public static HelperHeaderSpan Create(ParserContext context, bool complete);
    public static HelperHeaderSpan Create(ParserContext context, bool complete, AcceptedCharacters acceptedCharacters);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual PartialParseResult CanAcceptChange(TextChange change);
}
public class System.Web.Razor.Parser.SyntaxTree.ImplicitExpressionSpan : CodeSpan {
    [CompilerGeneratedAttribute]
private bool <AcceptTrailingDot>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    internal bool AcceptTrailingDot { get; private set; }
    internal ISet`1<string> Keywords { get; private set; }
    internal ImplicitExpressionSpan(string content, ISet`1<string> keywords, bool acceptTrailingDot);
    internal ImplicitExpressionSpan(string content, ISet`1<string> keywords, bool acceptTrailingDot, AcceptedCharacters acceptedCharacters);
    public ImplicitExpressionSpan(SourceLocation start, string content, ISet`1<string> keywords, bool acceptTrailingDot);
    public ImplicitExpressionSpan(SourceLocation start, string content, ISet`1<string> keywords, bool acceptTrailingDot, AcceptedCharacters acceptedCharacters);
    [CompilerGeneratedAttribute]
internal bool get_AcceptTrailingDot();
    [CompilerGeneratedAttribute]
private void set_AcceptTrailingDot(bool value);
    [CompilerGeneratedAttribute]
internal ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
private void set_Keywords(ISet`1<string> value);
    public static ImplicitExpressionSpan Create(ParserContext context, ISet`1<string> keywords, bool acceptTrailingDot, AcceptedCharacters acceptedCharacters);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual PartialParseResult CanAcceptChange(TextChange change);
    private bool IsAcceptableReplace(TextChange change);
    private bool IsAcceptableDeletion(TextChange change);
    private bool IsAcceptableInsertion(TextChange change);
    private bool RemainingIsWhitespace(TextChange change);
    private PartialParseResult HandleReplacement(TextChange change);
    private PartialParseResult HandleDeletion(char previousChar, TextChange change);
    private PartialParseResult HandleInsertion(char previousChar, TextChange change);
    private PartialParseResult HandleInsertionAfterIdPart(TextChange change);
    private static bool IsDotWithOptionalPreceedingIdentifier(string content);
    private PartialParseResult HandleInsertionAfterDot(TextChange change);
    private PartialParseResult TryAcceptChange(TextChange change, PartialParseResult acceptResult);
    private bool StartsWithKeyword(string newContent);
}
public class System.Web.Razor.Parser.SyntaxTree.InheritsSpan : CodeSpan {
    [CompilerGeneratedAttribute]
private string <BaseClass>k__BackingField;
    public string BaseClass { get; public set; }
    internal InheritsSpan(string content);
    internal InheritsSpan(string content, string baseClass);
    public InheritsSpan(SourceLocation start, string content, string baseClass);
    [CompilerGeneratedAttribute]
public string get_BaseClass();
    [CompilerGeneratedAttribute]
public void set_BaseClass(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static InheritsSpan Create(ParserContext context, string baseClass);
}
public class System.Web.Razor.Parser.SyntaxTree.MarkupSpan : Span {
    [CompilerGeneratedAttribute]
private bool <DocumentLevel>k__BackingField;
    public bool DocumentLevel { get; public set; }
    internal MarkupSpan(string content);
    internal MarkupSpan(string content, bool hidden);
    internal MarkupSpan(string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public MarkupSpan(SourceLocation start, string content);
    public MarkupSpan(SourceLocation start, string content, bool hidden);
    public MarkupSpan(SourceLocation start, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    [CompilerGeneratedAttribute]
public bool get_DocumentLevel();
    [CompilerGeneratedAttribute]
public void set_DocumentLevel(bool value);
    public static MarkupSpan Create(ParserContext context);
    public static MarkupSpan Create(ParserContext context, bool hidden);
    public static MarkupSpan Create(ParserContext context, bool hidden, AcceptedCharacters acceptedCharacters);
    public virtual string ToString();
}
public class System.Web.Razor.Parser.SyntaxTree.MetaCodeSpan : Span {
    internal MetaCodeSpan(string content);
    internal MetaCodeSpan(string content, bool hidden);
    internal MetaCodeSpan(string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public MetaCodeSpan(SourceLocation start, string content);
    public MetaCodeSpan(SourceLocation start, string content, bool hidden);
    public MetaCodeSpan(SourceLocation start, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public static MetaCodeSpan Create(ParserContext context);
    public static MetaCodeSpan Create(ParserContext context, bool hidden);
    public static MetaCodeSpan Create(ParserContext context, bool hidden, AcceptedCharacters acceptedCharacters);
}
public class System.Web.Razor.Parser.SyntaxTree.NamespaceImportSpan : Span {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NamespaceKeywordLength>k__BackingField;
    public string Namespace { get; public set; }
    public int NamespaceKeywordLength { get; public set; }
    internal NamespaceImportSpan(SpanKind kind, string content, AcceptedCharacters acceptedCharacters, string ns, int namespaceKeywordLength);
    public NamespaceImportSpan(SpanKind kind, SourceLocation start, string content, AcceptedCharacters acceptedCharacters, string ns, int namespaceKeywordLength);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public int get_NamespaceKeywordLength();
    [CompilerGeneratedAttribute]
public void set_NamespaceKeywordLength(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static NamespaceImportSpan Create(ParserContext context, AcceptedCharacters acceptedCharacters, SpanKind kind, string ns, int namespaceKeywordLength);
}
public class System.Web.Razor.Parser.SyntaxTree.RazorError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string Message { get; private set; }
    public SourceLocation Location { get; private set; }
    public int Length { get; private set; }
    public RazorError(string message, SourceLocation location);
    public RazorError(string message, SourceLocation location, int length);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public SourceLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(SourceLocation value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(RazorError other);
}
public class System.Web.Razor.Parser.SyntaxTree.SectionHeaderSpan : MetaCodeSpan {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    public string SectionName { get; public set; }
    internal SectionHeaderSpan(string content, string sectionName, AcceptedCharacters acceptedCharacters);
    public SectionHeaderSpan(SourceLocation start, string content, string sectionName, AcceptedCharacters acceptedCharacters);
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
    public virtual bool Equals(object obj);
    protected virtual PartialParseResult CanAcceptChange(TextChange change);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static SectionHeaderSpan Create(ParserContext context, string sectionName, AcceptedCharacters acceptedCharacters);
}
public class System.Web.Razor.Parser.SyntaxTree.SingleLineMarkupSpan : MarkupSpan {
    internal SingleLineMarkupSpan(string content);
    internal SingleLineMarkupSpan(string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public SingleLineMarkupSpan(SourceLocation start, string content);
    public SingleLineMarkupSpan(SourceLocation start, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public static SingleLineMarkupSpan Create(ParserContext context);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.Web.Razor.Parser.SyntaxTree.Span : SyntaxTreeNode {
    private Nullable`1<SourceLocation> _start;
    private string _content;
    [CompilerGeneratedAttribute]
private SpanKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private AcceptedCharacters <AcceptedCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutoCompleteString>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <Offset>k__BackingField;
    public SpanKind Kind { get; public set; }
    public bool Hidden { get; public set; }
    public AcceptedCharacters AcceptedCharacters { get; public set; }
    public Span Previous { get; public set; }
    public Span Next { get; public set; }
    public string AutoCompleteString { get; public set; }
    public bool IsBlock { get; }
    public int Length { get; }
    public SourceLocation Start { get; }
    public SourceLocation Offset { get; private set; }
    public string Content { get; public set; }
    private int EndIndex { get; }
    internal Span(SpanKind kind, string content);
    internal Span(SpanKind kind, string content, bool hidden);
    internal Span(SpanKind kind, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    protected Span(SpanKind kind, SourceLocation start, string content);
    protected Span(SpanKind kind, SourceLocation start, string content, bool hidden);
    protected Span(SpanKind kind, SourceLocation start, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    protected Span(ParserContext context, SpanKind kind);
    protected Span(ParserContext context, SpanKind kind, bool hidden);
    protected Span(ParserContext context, SpanKind kind, bool hidden, AcceptedCharacters acceptedCharacters);
    [CompilerGeneratedAttribute]
public SpanKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(SpanKind value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public AcceptedCharacters get_AcceptedCharacters();
    [CompilerGeneratedAttribute]
public void set_AcceptedCharacters(AcceptedCharacters value);
    [CompilerGeneratedAttribute]
public Span get_Previous();
    [CompilerGeneratedAttribute]
public void set_Previous(Span value);
    [CompilerGeneratedAttribute]
public Span get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(Span value);
    [CompilerGeneratedAttribute]
public string get_AutoCompleteString();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteString(string value);
    public virtual bool get_IsBlock();
    public virtual int get_Length();
    public virtual SourceLocation get_Start();
    [CompilerGeneratedAttribute]
public SourceLocation get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(SourceLocation value);
    public string get_Content();
    public void set_Content(string value);
    private int get_EndIndex();
    public virtual void Accept(ParserVisitor visitor);
    public PartialParseResult ApplyChange(TextChange change);
    public PartialParseResult ApplyChange(TextChange change, bool force);
    protected virtual PartialParseResult CanAcceptChange(TextChange change);
    private void UpdateContent(TextChange change);
    public virtual bool OwnsChange(TextChange change);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool TryMergeWith(Span other);
    protected bool IsAtEndOfFirstLine(TextChange change);
    protected virtual string GetSpanTypeName();
    protected bool IsEndInsertion(TextChange change);
    protected bool IsEndDeletion(TextChange change);
    protected bool IsEndReplace(TextChange change);
    protected bool IsAtEndOfSpan(TextChange change);
    protected internal string GetOldText(TextChange change);
    private void EnsureStart();
    internal static void ClearCachedStartPoints(Span startSpan);
    private void UpdateOffset();
    private void MergeRight(Span other);
    private void MergeLeft(Span other);
    private bool IsAdjacentOnRight(Span other);
    private bool IsAdjacentOnLeft(Span other);
}
public class System.Web.Razor.Parser.SyntaxTree.SpanFactory : MulticastDelegate {
    public SpanFactory(object object, IntPtr method);
    public virtual Span Invoke(ParserContext context);
    public virtual IAsyncResult BeginInvoke(ParserContext context, AsyncCallback callback, object object);
    public virtual Span EndInvoke(IAsyncResult result);
}
public enum System.Web.Razor.Parser.SyntaxTree.SpanKind : Enum {
    public int value__;
    public static SpanKind Transition;
    public static SpanKind MetaCode;
    public static SpanKind Comment;
    public static SpanKind Code;
    public static SpanKind Markup;
}
public class System.Web.Razor.Parser.SyntaxTree.SyntaxTreeBuilderVisitor : ParserVisitor {
    private Block _rootBlock;
    private Stack`1<List`1<SyntaxTreeNode>> _blockStack;
    private IList`1<RazorError> _errorList;
    private Span _previous;
    [CompilerGeneratedAttribute]
private ParserResults <Results>k__BackingField;
    public ParserResults Results { get; public set; }
    private List`1<SyntaxTreeNode> CurrentBlock { get; }
    [CompilerGeneratedAttribute]
public ParserResults get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(ParserResults value);
    private List`1<SyntaxTreeNode> get_CurrentBlock();
    public virtual void VisitStartBlock(BlockType type);
    public virtual void VisitSpan(Span span);
    public virtual void VisitEndBlock(BlockType type);
    public virtual void VisitError(RazorError err);
    public virtual void OnComplete();
}
public abstract class System.Web.Razor.Parser.SyntaxTree.SyntaxTreeNode : object {
    [CompilerGeneratedAttribute]
private Block <Parent>k__BackingField;
    public Block Parent { get; internal set; }
    public bool IsBlock { get; }
    public int Length { get; }
    public SourceLocation Start { get; }
    [CompilerGeneratedAttribute]
public Block get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(Block value);
    public abstract virtual bool get_IsBlock();
    public abstract virtual int get_Length();
    public abstract virtual SourceLocation get_Start();
    public abstract virtual void Accept(ParserVisitor visitor);
}
public class System.Web.Razor.Parser.SyntaxTree.TransitionSpan : Span {
    internal TransitionSpan(string content);
    internal TransitionSpan(string content, bool hidden);
    internal TransitionSpan(string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public TransitionSpan(SourceLocation start, string content);
    public TransitionSpan(SourceLocation start, string content, bool hidden);
    public TransitionSpan(SourceLocation start, string content, bool hidden, AcceptedCharacters acceptedCharacters);
    public static TransitionSpan Create(ParserContext context);
    public static TransitionSpan Create(ParserContext context, bool hidden);
    public static TransitionSpan Create(ParserContext context, bool hidden, AcceptedCharacters acceptedCharacters);
}
public class System.Web.Razor.Parser.SyntaxTree.VBOptionSpan : MetaCodeSpan {
    [CompilerGeneratedAttribute]
private string <OptionName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public string OptionName { get; public set; }
    public bool Value { get; public set; }
    internal VBOptionSpan(string content, string optionName, bool value);
    public VBOptionSpan(SourceLocation start, string content, string optionName, bool value);
    [CompilerGeneratedAttribute]
public string get_OptionName();
    [CompilerGeneratedAttribute]
public void set_OptionName(string value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(bool value);
    public static VBOptionSpan Create(ParserContext context, string optionName, bool value);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class System.Web.Razor.Parser.TextReaderExtensions : object {
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegatef;
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, char terminator);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, char terminator, bool inclusive);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Char[] terminators);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, bool inclusive, Char[] terminators);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Predicate`1<char> condition, bool inclusive);
    [ExtensionAttribute]
public static string ReadWhile(TextReader reader, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string ReadWhile(TextReader reader, Predicate`1<char> condition, bool inclusive);
    [ExtensionAttribute]
public static string ReadWhiteSpace(TextReader reader);
    [ExtensionAttribute]
public static string ReadUntilWhiteSpace(TextReader reader);
    [CompilerGeneratedAttribute]
private static bool <ReadWhiteSpace>b__c(char c);
    [CompilerGeneratedAttribute]
private static bool <ReadUntilWhiteSpace>b__e(char c);
}
public class System.Web.Razor.Parser.VBCodeParser : CodeParser {
    private static string ExitKeyword;
    private static string ContinueKeyword;
    private static string OptionStrictCodeDomName;
    private static string OptionExplicitCodeDomName;
    internal static ISet`1<string> DefaultKeywords;
    private ISet`1<string> _topLevelKeywords;
    internal static string EndSectionKeyword;
    internal static string EndHelperKeyword;
    internal static int ImportsKeywordLength;
    private BlockParser HelperBodyParser;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, BlockParser> <KeywordHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegate2;
    protected internal Dictionary`2<string, BlockParser> KeywordHandlers { get; private set; }
    protected internal ISet`1<string> TopLevelKeywords { get; }
    private static VBCodeParser();
    [CompilerGeneratedAttribute]
protected internal Dictionary`2<string, BlockParser> get_KeywordHandlers();
    [CompilerGeneratedAttribute]
private void set_KeywordHandlers(Dictionary`2<string, BlockParser> value);
    protected internal virtual ISet`1<string> get_TopLevelKeywords();
    public virtual bool IsAtExplicitTransition();
    public virtual bool IsAtImplicitTransition();
    public virtual void ParseBlock();
    protected internal virtual bool TryAcceptStringOrComment();
    protected internal virtual bool HandleTransition(SpanFactory spanFactory);
    private bool HandleTransitionCore(SpanFactory spanFactory, bool allowEmbeddedExpression, bool rejectOuterIfSwitching);
    protected bool HandleReservedWord(CodeBlockInfo block);
    private bool ParseHelperBlock(CodeBlockInfo block);
    private bool ParseImplicitBlock(bool isTopLevel);
    private bool ParseSectionStatement(CodeBlockInfo block);
    protected virtual bool ParseInheritsStatement(CodeBlockInfo block);
    private bool ParseOptionStatement(CodeBlockInfo block);
    private bool ParseImportsStatement(CodeBlockInfo block);
    private bool ParseImplicitExpression(CodeBlockInfo block);
    private bool ParseImplicitExpression(CodeBlockInfo block, bool acceptTrailingDot);
    private bool ParseExplicitExpression();
    private BlockParser CreateKeywordBlockParser(string identifier, string blockName, bool isSpecialBlock, bool supportsExitAndContinue, bool acceptRestOfLine, BlockType blockType, String[] terminatorTokens);
    private bool ParseBlockStatement(string identifier, bool isSpecialBlock, bool supportsExitAndContinue, String[] terminatorTokens);
    private void AcceptCurrentAndNextIfXmlAttributeProperty();
    private void ParseEmbeddedExpression();
    protected internal virtual void AcceptGenericArgument();
    private void AcceptWhitespaceWithVBNewlines();
    private bool AcceptWithInterleavedWhiteSpace(bool caseSensitive, String[] expectedTokens);
    [CompilerGeneratedAttribute]
private static bool <TryAcceptStringOrComment>b__1(char c);
}
internal class System.Web.Razor.Parser.VisitorPair : ParserVisitor {
    [CompilerGeneratedAttribute]
private ParserVisitor <Visitor1>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserVisitor <Visitor2>k__BackingField;
    public ParserVisitor Visitor1 { get; private set; }
    public ParserVisitor Visitor2 { get; private set; }
    public VisitorPair(ParserVisitor visitor1, ParserVisitor visitor2);
    [CompilerGeneratedAttribute]
public ParserVisitor get_Visitor1();
    [CompilerGeneratedAttribute]
private void set_Visitor1(ParserVisitor value);
    [CompilerGeneratedAttribute]
public ParserVisitor get_Visitor2();
    [CompilerGeneratedAttribute]
private void set_Visitor2(ParserVisitor value);
    public virtual void VisitStartBlock(BlockType type);
    public virtual void VisitSpan(Span span);
    public virtual void VisitEndBlock(BlockType type);
    public virtual void VisitError(RazorError err);
    public virtual void OnComplete();
}
public class System.Web.Razor.ParserResults : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RazorError> <ParserErrors>k__BackingField;
    public bool Success { get; private set; }
    public Block Document { get; private set; }
    public IList`1<RazorError> ParserErrors { get; private set; }
    public ParserResults(Block document, IList`1<RazorError> parserErrors);
    protected ParserResults(bool success, Block document, IList`1<RazorError> errors);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public Block get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(Block value);
    [CompilerGeneratedAttribute]
public IList`1<RazorError> get_ParserErrors();
    [CompilerGeneratedAttribute]
private void set_ParserErrors(IList`1<RazorError> value);
}
[FlagsAttribute]
public enum System.Web.Razor.PartialParseResult : Enum {
    public int value__;
    public static PartialParseResult Rejected;
    public static PartialParseResult Accepted;
    public static PartialParseResult Provisional;
    public static PartialParseResult SpanContextChanged;
    public static PartialParseResult AutoCompleteBlock;
}
public abstract class System.Web.Razor.RazorCodeLanguage : object {
    private static IDictionary`2<string, RazorCodeLanguage> _services;
    public static IDictionary`2<string, RazorCodeLanguage> Languages { get; }
    public string LanguageName { get; }
    public Type CodeDomProviderType { get; }
    private static RazorCodeLanguage();
    public static IDictionary`2<string, RazorCodeLanguage> get_Languages();
    public static RazorCodeLanguage GetLanguageByExtension(string fileExtension);
    public abstract virtual string get_LanguageName();
    public abstract virtual Type get_CodeDomProviderType();
    public abstract virtual ParserBase CreateCodeParser();
    public abstract virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
}
public class System.Web.Razor.RazorEditorParser : object {
    private RazorEngineHost _host;
    private string _sourceFileName;
    private Block _currentParseTree;
    private Span _lastChangeOwner;
    private Span _lastAutoCompleteSpan;
    private bool _parseUnderway;
    private SpinLock _syncLock;
    private BackgroundParserTask _currentTask;
    private EventHandler`1<DocumentParseCompleteEventArgs> DocumentParseComplete;
    [CompilerGeneratedAttribute]
private bool <LastResultProvisional>k__BackingField;
    internal bool LastResultProvisional { get; internal set; }
    public Block CurrentParseTree { get; }
    public RazorEditorParser(RazorEngineHost host, string sourceFileName);
    [CompilerGeneratedAttribute]
internal bool get_LastResultProvisional();
    [CompilerGeneratedAttribute]
internal void set_LastResultProvisional(bool value);
    public Block get_CurrentParseTree();
    public void add_DocumentParseComplete(EventHandler`1<DocumentParseCompleteEventArgs> value);
    public void remove_DocumentParseComplete(EventHandler`1<DocumentParseCompleteEventArgs> value);
    public virtual string GetAutoCompleteString();
    public virtual PartialParseResult CheckForStructureChanges(TextChange change);
    [ConditionalAttribute("DEBUG")]
private static void VerifyFlagsAreValid(PartialParseResult result);
    protected internal virtual void QueueFullReparse(TextChange change);
    private PartialParseResult TryPartialParse(TextChange change);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected internal virtual void ProcessChange(CancellationToken cancelToken, TextChange change, Block parseTree);
    private static bool TreesAreDifferent(Block leftTree, Block rightTree, TextChange change);
    private void OnDocumentParseComplete(DocumentParseCompleteEventArgs args);
}
public class System.Web.Razor.RazorEngineHost : object {
    internal static string InternalDefaultClassName;
    internal static string InternalDefaultNamespace;
    private Func`1<MarkupParser> _markupParserFactory;
    [CompilerGeneratedAttribute]
private GeneratedClassContext <GeneratedClassContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <NamespaceImports>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBaseClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticHelpers>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorCodeLanguage <CodeLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<MarkupParser> CS$<>9__CachedAnonymousMethodDelegate1;
    public GeneratedClassContext GeneratedClassContext { get; public set; }
    public ISet`1<string> NamespaceImports { get; private set; }
    public string DefaultBaseClass { get; public set; }
    public bool DesignTimeMode { get; public set; }
    public string DefaultClassName { get; public set; }
    public string DefaultNamespace { get; public set; }
    public bool StaticHelpers { get; public set; }
    public RazorCodeLanguage CodeLanguage { get; protected set; }
    public RazorEngineHost(RazorCodeLanguage codeLanguage);
    public RazorEngineHost(RazorCodeLanguage codeLanguage, Func`1<MarkupParser> markupParserFactory);
    [CompilerGeneratedAttribute]
public virtual GeneratedClassContext get_GeneratedClassContext();
    [CompilerGeneratedAttribute]
public virtual void set_GeneratedClassContext(GeneratedClassContext value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_NamespaceImports();
    [CompilerGeneratedAttribute]
private void set_NamespaceImports(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultBaseClass();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultBaseClass(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeMode(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultClassName();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultClassName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_StaticHelpers();
    [CompilerGeneratedAttribute]
public virtual void set_StaticHelpers(bool value);
    [CompilerGeneratedAttribute]
public virtual RazorCodeLanguage get_CodeLanguage();
    [CompilerGeneratedAttribute]
protected virtual void set_CodeLanguage(RazorCodeLanguage value);
    public virtual MarkupParser CreateMarkupParser();
    public virtual ParserBase DecorateCodeParser(ParserBase incomingCodeParser);
    public virtual MarkupParser DecorateMarkupParser(MarkupParser incomingMarkupParser);
    public virtual RazorCodeGenerator DecorateCodeGenerator(RazorCodeGenerator incomingCodeGenerator);
    public virtual void PostProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
    [CompilerGeneratedAttribute]
private static MarkupParser <.ctor>b__0();
}
public class System.Web.Razor.RazorTemplateEngine : object {
    [CompilerGeneratedAttribute]
private RazorEngineHost <Host>k__BackingField;
    public RazorEngineHost Host { get; private set; }
    public RazorTemplateEngine(RazorEngineHost host);
    [CompilerGeneratedAttribute]
public RazorEngineHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(RazorEngineHost value);
    public ParserResults ParseTemplate(ITextBuffer input);
    public ParserResults ParseTemplate(ITextBuffer input, Nullable`1<CancellationToken> cancelToken);
    public ParserResults ParseTemplate(TextReader input);
    public ParserResults ParseTemplate(TextReader input, Nullable`1<CancellationToken> cancelToken);
    protected internal virtual ParserResults ParseTemplateCore(LookaheadTextReader input, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(ITextBuffer input);
    public GeneratorResults GenerateCode(ITextBuffer input, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(ITextBuffer input, string className, string rootNamespace, string sourceFileName);
    public GeneratorResults GenerateCode(ITextBuffer input, string className, string rootNamespace, string sourceFileName, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(TextReader input);
    public GeneratorResults GenerateCode(TextReader input, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(TextReader input, string className, string rootNamespace, string sourceFileName);
    public GeneratorResults GenerateCode(TextReader input, string className, string rootNamespace, string sourceFileName, Nullable`1<CancellationToken> cancelToken);
    protected internal virtual GeneratorResults GenerateCodeCore(LookaheadTextReader input, string className, string rootNamespace, string sourceFileName, Nullable`1<CancellationToken> cancelToken);
    protected internal virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespace, string sourceFileName);
    protected internal virtual RazorParser CreateParser();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Razor.Resources.RazorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActiveParser_Must_Be_Code_Or_Markup_Parser { get; }
    internal static string Argument_Not_Valid_Class_Name { get; }
    internal static string BlockName_Code { get; }
    internal static string BlockName_ExplicitExpression { get; }
    internal static string BlockName_ImplicitExpression { get; }
    internal static string Cannot_Call_EndSpan_From_Temporary_Buffer { get; }
    internal static string CodeGenerator_SectionsNotSupported { get; }
    internal static string CodeGenerator_TemplatesNotSupported { get; }
    internal static string CodeGenerators_Must_Implement_Block_Or_StringProperty { get; }
    internal static string CodeWriter_MismatchedContexts { get; }
    internal static string CodeWriter_NoCurrentContext { get; }
    internal static string DoNotBacktrack_Must_Be_Called_Within_Lookahead { get; }
    internal static string EndBlock_Called_Without_Matching_StartBlock { get; }
    internal static string Engine_UnableToLoadCodeDomProvider { get; }
    internal static string Error_RecursiveCallToExecute { get; }
    internal static string ErrorComponent_Character { get; }
    internal static string ErrorComponent_EndOfFile { get; }
    internal static string ErrorComponent_Whitespace { get; }
    internal static string No_Current_Parser_Block { get; }
    internal static string ParseDelimitedBlock_Requires_Bracket { get; }
    internal static string ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start { get; }
    internal static string ParseError_BlockComment_Not_Terminated { get; }
    internal static string ParseError_BlockNotTerminated { get; }
    internal static string ParseError_Expected_CloseBracket_Before_EOF { get; }
    internal static string ParseError_Expected_CloseParen_Before_EOF { get; }
    internal static string ParseError_Expected_EndOfBlock_Before_EOF { get; }
    internal static string ParseError_Expected_X { get; }
    internal static string ParseError_Expected_X__But_Got_Y { get; }
    internal static string ParseError_ExpectedCloseAngle_After_GenericTypeArgument { get; }
    internal static string ParseError_ExpectedCloseParen_After_GenericTypeArgument { get; }
    internal static string ParseError_ExpectedOfKeyword_After_Start_Of_GenericTypeArgument { get; }
    internal static string ParseError_ExpectedTypeName_After_OfKeyword { get; }
    internal static string ParseError_Helpers_Cannot_Be_Nested { get; }
    internal static string ParseError_Helpers_Cannot_Contain_Sections { get; }
    internal static string ParseError_InfiniteLoopDetected { get; }
    internal static string ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName { get; }
    internal static string ParseError_InlineMarkup_Blocks_Cannot_Be_Nested { get; }
    internal static string ParseError_Internal_Error_Is_Causing_Infinite_Loop { get; }
    internal static string ParseError_InvalidOptionValue { get; }
    internal static string ParseError_MarkupBlock_Must_Start_With_Tag { get; }
    internal static string ParseError_MissingCharAfterHelperName { get; }
    internal static string ParseError_MissingCharAfterHelperParameters { get; }
    internal static string ParseError_MissingEndTag { get; }
    internal static string ParseError_MissingOpenBraceAfterSection { get; }
    internal static string ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock { get; }
    internal static string ParseError_NamespaceOrTypeAliasExpected { get; }
    internal static string ParseError_OuterTagMissingName { get; }
    internal static string ParseError_RazorComment_Not_Terminated { get; }
    internal static string ParseError_ReservedWord { get; }
    internal static string ParseError_Sections_Cannot_Be_Nested { get; }
    internal static string ParseError_SingleLine_ControlFlowStatements_Not_Allowed { get; }
    internal static string ParseError_SlashInEmptyTagMustBeFollowedByCloseAngle { get; }
    internal static string ParseError_TextTagCannotContainAttributes { get; }
    internal static string ParseError_Unexpected { get; }
    internal static string ParseError_Unexpected_Character_At_Helper_Name_Start { get; }
    internal static string ParseError_Unexpected_Character_At_Section_Name_Start { get; }
    internal static string ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS { get; }
    internal static string ParseError_Unexpected_Character_At_Start_Of_CodeBlock_VB { get; }
    internal static string ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock { get; }
    internal static string ParseError_Unexpected_Keyword_After_At { get; }
    internal static string ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS { get; }
    internal static string ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_VB { get; }
    internal static string ParseError_UnexpectedEndTag { get; }
    internal static string ParseError_UnfinishedTag { get; }
    internal static string ParseError_UnknownOption { get; }
    internal static string ParseError_Unterminated_String_Literal { get; }
    internal static string ParseError_UnterminatedHelperParameterList { get; }
    internal static string Parser_Context_Not_Set { get; }
    internal static string ParserContext_VisitorStackEmpty { get; }
    internal static string SectionExample_CS { get; }
    internal static string SectionExample_VB { get; }
    internal static string Span_GetInserted_Must_Be_Called_With_Insertion { get; }
    internal static string Structure_Member_CannotBeNull { get; }
    internal static string Structure_Member_Must_Be_NonNegative { get; }
    internal static string Temporary_Buffers_Cannot_Be_Nested { get; }
    internal static string Value_Must_Be_An_EnumType { get; }
    internal static string WriterContext_Constructor { get; }
    internal static string WriterContext_LambdaDelegate { get; }
    internal static string WriterContext_LambdaExpression { get; }
    internal static string WriterContext_MethodCall { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActiveParser_Must_Be_Code_Or_Markup_Parser();
    internal static string get_Argument_Not_Valid_Class_Name();
    internal static string get_BlockName_Code();
    internal static string get_BlockName_ExplicitExpression();
    internal static string get_BlockName_ImplicitExpression();
    internal static string get_Cannot_Call_EndSpan_From_Temporary_Buffer();
    internal static string get_CodeGenerator_SectionsNotSupported();
    internal static string get_CodeGenerator_TemplatesNotSupported();
    internal static string get_CodeGenerators_Must_Implement_Block_Or_StringProperty();
    internal static string get_CodeWriter_MismatchedContexts();
    internal static string get_CodeWriter_NoCurrentContext();
    internal static string get_DoNotBacktrack_Must_Be_Called_Within_Lookahead();
    internal static string get_EndBlock_Called_Without_Matching_StartBlock();
    internal static string get_Engine_UnableToLoadCodeDomProvider();
    internal static string get_Error_RecursiveCallToExecute();
    internal static string get_ErrorComponent_Character();
    internal static string get_ErrorComponent_EndOfFile();
    internal static string get_ErrorComponent_Whitespace();
    internal static string get_No_Current_Parser_Block();
    internal static string get_ParseDelimitedBlock_Requires_Bracket();
    internal static string get_ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start();
    internal static string get_ParseError_BlockComment_Not_Terminated();
    internal static string get_ParseError_BlockNotTerminated();
    internal static string get_ParseError_Expected_CloseBracket_Before_EOF();
    internal static string get_ParseError_Expected_CloseParen_Before_EOF();
    internal static string get_ParseError_Expected_EndOfBlock_Before_EOF();
    internal static string get_ParseError_Expected_X();
    internal static string get_ParseError_Expected_X__But_Got_Y();
    internal static string get_ParseError_ExpectedCloseAngle_After_GenericTypeArgument();
    internal static string get_ParseError_ExpectedCloseParen_After_GenericTypeArgument();
    internal static string get_ParseError_ExpectedOfKeyword_After_Start_Of_GenericTypeArgument();
    internal static string get_ParseError_ExpectedTypeName_After_OfKeyword();
    internal static string get_ParseError_Helpers_Cannot_Be_Nested();
    internal static string get_ParseError_Helpers_Cannot_Contain_Sections();
    internal static string get_ParseError_InfiniteLoopDetected();
    internal static string get_ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName();
    internal static string get_ParseError_InlineMarkup_Blocks_Cannot_Be_Nested();
    internal static string get_ParseError_Internal_Error_Is_Causing_Infinite_Loop();
    internal static string get_ParseError_InvalidOptionValue();
    internal static string get_ParseError_MarkupBlock_Must_Start_With_Tag();
    internal static string get_ParseError_MissingCharAfterHelperName();
    internal static string get_ParseError_MissingCharAfterHelperParameters();
    internal static string get_ParseError_MissingEndTag();
    internal static string get_ParseError_MissingOpenBraceAfterSection();
    internal static string get_ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock();
    internal static string get_ParseError_NamespaceOrTypeAliasExpected();
    internal static string get_ParseError_OuterTagMissingName();
    internal static string get_ParseError_RazorComment_Not_Terminated();
    internal static string get_ParseError_ReservedWord();
    internal static string get_ParseError_Sections_Cannot_Be_Nested();
    internal static string get_ParseError_SingleLine_ControlFlowStatements_Not_Allowed();
    internal static string get_ParseError_SlashInEmptyTagMustBeFollowedByCloseAngle();
    internal static string get_ParseError_TextTagCannotContainAttributes();
    internal static string get_ParseError_Unexpected();
    internal static string get_ParseError_Unexpected_Character_At_Helper_Name_Start();
    internal static string get_ParseError_Unexpected_Character_At_Section_Name_Start();
    internal static string get_ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS();
    internal static string get_ParseError_Unexpected_Character_At_Start_Of_CodeBlock_VB();
    internal static string get_ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock();
    internal static string get_ParseError_Unexpected_Keyword_After_At();
    internal static string get_ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS();
    internal static string get_ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_VB();
    internal static string get_ParseError_UnexpectedEndTag();
    internal static string get_ParseError_UnfinishedTag();
    internal static string get_ParseError_UnknownOption();
    internal static string get_ParseError_Unterminated_String_Literal();
    internal static string get_ParseError_UnterminatedHelperParameterList();
    internal static string get_Parser_Context_Not_Set();
    internal static string get_ParserContext_VisitorStackEmpty();
    internal static string get_SectionExample_CS();
    internal static string get_SectionExample_VB();
    internal static string get_Span_GetInserted_Must_Be_Called_With_Insertion();
    internal static string get_Structure_Member_CannotBeNull();
    internal static string get_Structure_Member_Must_Be_NonNegative();
    internal static string get_Temporary_Buffers_Cannot_Be_Nested();
    internal static string get_Value_Must_Be_An_EnumType();
    internal static string get_WriterContext_Constructor();
    internal static string get_WriterContext_LambdaDelegate();
    internal static string get_WriterContext_LambdaExpression();
    internal static string get_WriterContext_MethodCall();
}
public class System.Web.Razor.Text.BufferingTextReader : LookaheadTextReader {
    private Stack`1<BacktrackContext> _backtrackStack;
    private int _currentBufferPosition;
    private int _currentCharacter;
    private SourceLocationTracker _locationTracker;
    [CompilerGeneratedAttribute]
private StringBuilder <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Buffering>k__BackingField;
    [CompilerGeneratedAttribute]
private TextReader <InnerReader>k__BackingField;
    internal StringBuilder Buffer { get; internal set; }
    internal bool Buffering { get; internal set; }
    internal TextReader InnerReader { get; private set; }
    public SourceLocation CurrentLocation { get; }
    protected int CurrentCharacter { get; }
    public BufferingTextReader(TextReader source);
    [CompilerGeneratedAttribute]
internal StringBuilder get_Buffer();
    [CompilerGeneratedAttribute]
internal void set_Buffer(StringBuilder value);
    [CompilerGeneratedAttribute]
internal bool get_Buffering();
    [CompilerGeneratedAttribute]
internal void set_Buffering(bool value);
    [CompilerGeneratedAttribute]
internal TextReader get_InnerReader();
    [CompilerGeneratedAttribute]
private void set_InnerReader(TextReader value);
    public virtual SourceLocation get_CurrentLocation();
    protected virtual int get_CurrentCharacter();
    public virtual int Read();
    public virtual int Peek();
    protected virtual void Dispose(bool disposing);
    public virtual IDisposable BeginLookahead();
    public virtual void CancelBacktrack();
    private void EndLookahead(BacktrackContext context);
    protected virtual void NextCharacter();
    protected bool ExpandBuffer();
    private void UpdateCurrentCharacter();
    [CompilerGeneratedAttribute]
private char <NextCharacter>b__4();
}
public interface System.Web.Razor.Text.ITextBuffer {
    public int Length { get; }
    public int Position { get; public set; }
    public abstract virtual int get_Length();
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual int Read();
    public abstract virtual int Peek();
}
public abstract class System.Web.Razor.Text.LookaheadTextReader : TextReader {
    public SourceLocation CurrentLocation { get; }
    public abstract virtual SourceLocation get_CurrentLocation();
    public abstract virtual IDisposable BeginLookahead();
    public abstract virtual void CancelBacktrack();
}
public class System.Web.Razor.Text.SourceLocation : ValueType {
    public static SourceLocation Zero;
    private int _absoluteIndex;
    private int _lineIndex;
    private int _characterIndex;
    public int AbsoluteIndex { get; }
    public int LineIndex { get; }
    public int CharacterIndex { get; }
    public SourceLocation(int absoluteIndex, int lineIndex, int characterIndex);
    private static SourceLocation();
    public int get_AbsoluteIndex();
    public int get_LineIndex();
    public int get_CharacterIndex();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SourceLocation other);
    public sealed virtual int CompareTo(SourceLocation other);
    public static bool op_LessThan(SourceLocation left, SourceLocation right);
    public static bool op_GreaterThan(SourceLocation left, SourceLocation right);
    public static bool op_Equality(SourceLocation left, SourceLocation right);
    public static bool op_Inequality(SourceLocation left, SourceLocation right);
}
public class System.Web.Razor.Text.SourceLocationTracker : object {
    private int _absoluteIndex;
    private int _characterIndex;
    private int _lineIndex;
    private SourceLocation _currentLocation;
    [CompilerGeneratedAttribute]
private static Func`1<char> CS$<>9__CachedAnonymousMethodDelegate2;
    public SourceLocation CurrentLocation { get; public set; }
    public SourceLocationTracker(SourceLocation loc);
    public SourceLocation get_CurrentLocation();
    public void set_CurrentLocation(SourceLocation value);
    public void UpdateLocation(char characterRead, Func`1<char> nextCharacter);
    public void UpdateLocation(string content);
    private void UpdateInternalState();
    private void UpdateLocation();
    [CompilerGeneratedAttribute]
private static char <UpdateLocation>b__0();
}
public class System.Web.Razor.Text.TextBufferReader : LookaheadTextReader {
    private Stack`1<BacktrackContext> _bookmarks;
    private SourceLocationTracker _tracker;
    [CompilerGeneratedAttribute]
private ITextBuffer <InnerBuffer>k__BackingField;
    internal ITextBuffer InnerBuffer { get; private set; }
    public SourceLocation CurrentLocation { get; }
    public TextBufferReader(ITextBuffer buffer);
    [CompilerGeneratedAttribute]
internal ITextBuffer get_InnerBuffer();
    [CompilerGeneratedAttribute]
private void set_InnerBuffer(ITextBuffer value);
    public virtual int Peek();
    public virtual int Read();
    protected virtual void Dispose(bool disposing);
    public virtual SourceLocation get_CurrentLocation();
    public virtual IDisposable BeginLookahead();
    public virtual void CancelBacktrack();
    private void EndLookahead(BacktrackContext context);
    [CompilerGeneratedAttribute]
private char <Read>b__0();
}
public class System.Web.Razor.Text.TextChange : ValueType {
    private string _newText;
    private string _oldText;
    [CompilerGeneratedAttribute]
private int <OldPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextBuffer <NewBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextBuffer <OldBuffer>k__BackingField;
    public int OldPosition { get; private set; }
    public int NewPosition { get; private set; }
    public int OldLength { get; private set; }
    public int NewLength { get; private set; }
    public ITextBuffer NewBuffer { get; private set; }
    public ITextBuffer OldBuffer { get; private set; }
    public string OldText { get; }
    public string NewText { get; }
    public bool IsInsert { get; }
    public bool IsDelete { get; }
    public bool IsReplace { get; }
    internal TextChange(int position, int oldLength, ITextBuffer oldBuffer, int newLength, ITextBuffer newBuffer);
    public TextChange(int oldPosition, int oldLength, ITextBuffer oldBuffer, int newPosition, int newLength, ITextBuffer newBuffer);
    [CompilerGeneratedAttribute]
public int get_OldPosition();
    [CompilerGeneratedAttribute]
private void set_OldPosition(int value);
    [CompilerGeneratedAttribute]
public int get_NewPosition();
    [CompilerGeneratedAttribute]
private void set_NewPosition(int value);
    [CompilerGeneratedAttribute]
public int get_OldLength();
    [CompilerGeneratedAttribute]
private void set_OldLength(int value);
    [CompilerGeneratedAttribute]
public int get_NewLength();
    [CompilerGeneratedAttribute]
private void set_NewLength(int value);
    [CompilerGeneratedAttribute]
public ITextBuffer get_NewBuffer();
    [CompilerGeneratedAttribute]
private void set_NewBuffer(ITextBuffer value);
    [CompilerGeneratedAttribute]
public ITextBuffer get_OldBuffer();
    [CompilerGeneratedAttribute]
private void set_OldBuffer(ITextBuffer value);
    public string get_OldText();
    public string get_NewText();
    public bool get_IsInsert();
    public bool get_IsDelete();
    public bool get_IsReplace();
    public virtual bool Equals(object obj);
    public string ApplyChange(string content, int changeOffset);
    public string ApplyChange(Span span);
    public virtual int GetHashCode();
    public static bool op_Equality(TextChange left, TextChange right);
    public static bool op_Inequality(TextChange left, TextChange right);
    public virtual string ToString();
    public TextChange Normalize();
    private string GetText(ITextBuffer buffer, int position, int length);
}
public enum System.Web.Razor.Text.TextChangeType : Enum {
    public int value__;
    public static TextChangeType Insert;
    public static TextChangeType Remove;
}
internal static class System.Web.Razor.Utils.CharUtils : object {
    internal static bool IsNonNewLineWhitespace(char c);
    internal static bool IsNewLine(char c);
}
internal class System.Web.Razor.Utils.DisposableAction : object {
    private Action _action;
    public DisposableAction(Action action);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class System.Web.Razor.Utils.EnumeratorExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Flatten(IEnumerable`1<IEnumerable`1<T>> source);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<T> <Flatten>b__0(IEnumerable`1<T> e);
}
internal static class System.Web.Razor.Utils.EnumUtil : object {
    public static IEnumerable`1<T> Single(T item);
    public static IEnumerable`1<T> Prepend(T item, IEnumerable`1<T> enumerable);
}
public class System.Web.Razor.VBRazorCodeLanguage : RazorCodeLanguage {
    private static string VBLanguageName;
    public string LanguageName { get; }
    public Type CodeDomProviderType { get; }
    public virtual string get_LanguageName();
    public virtual Type get_CodeDomProviderType();
    public virtual ParserBase CreateCodeParser();
    public virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
}
