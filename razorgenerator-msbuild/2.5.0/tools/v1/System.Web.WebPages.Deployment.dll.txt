[CompilerGeneratedAttribute]
internal static class Microsoft.Internal.Web.Utils.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string Argument_Must_Be_Between { get; }
    internal static string Argument_Must_Be_Enum_Member { get; }
    internal static string Argument_Must_Be_GreaterThan { get; }
    internal static string Argument_Must_Be_GreaterThanOrEqualTo { get; }
    internal static string Argument_Must_Be_LessThan { get; }
    internal static string Argument_Must_Be_LessThanOrEqualTo { get; }
    internal static string Argument_Must_Be_Null_Or_Non_Empty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_Argument_Must_Be_Between();
    internal static string get_Argument_Must_Be_Enum_Member();
    internal static string get_Argument_Must_Be_GreaterThan();
    internal static string get_Argument_Must_Be_GreaterThanOrEqualTo();
    internal static string get_Argument_Must_Be_LessThan();
    internal static string get_Argument_Must_Be_LessThanOrEqualTo();
    internal static string get_Argument_Must_Be_Null_Or_Non_Empty();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
internal static class Microsoft.Internal.Web.Utils.ExceptionHelper : object {
    internal static ArgumentException CreateArgumentNullOrEmptyException(string paramName);
}
internal static class System.Web.WebPages.Deployment.AssemblyUtils : object {
    internal static Assembly ThisAssembly;
    internal static AssemblyName ThisAssemblyName;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyName, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyName, Version> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Assembly, AssemblyName> CS$<>9__CachedAnonymousMethodDelegate5;
    private static AssemblyUtils();
    internal static Version GetMaxWebPagesVersion();
    internal static bool NamesMatch(AssemblyName left, AssemblyName right, bool matchVersion);
    internal static bool ByteArraysEqual(Byte[] left, Byte[] right);
    internal static IEnumerable`1<AssemblyName> GetLoadedAssemblyNames();
    [CompilerGeneratedAttribute]
private static bool <GetMaxWebPagesVersion>b__0(AssemblyName otherName);
    [CompilerGeneratedAttribute]
private static Version <GetMaxWebPagesVersion>b__1(AssemblyName otherName);
    [CompilerGeneratedAttribute]
private static AssemblyName <GetLoadedAssemblyNames>b__4(Assembly asm);
}
[EditorBrowsableAttribute("1")]
public static class System.Web.WebPages.Deployment.PreApplicationStartCode : object {
    private static string SharedLibPublicKey;
    private static bool _startWasCalled;
    private static AssemblyName[] _assemblyList;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyName, Assembly> CS$<>9__CachedAnonymousMethodDelegate1;
    private static PreApplicationStartCode();
    public static void Start();
    internal static bool StartCore(Version testVersion);
    internal static ICollection`1<MethodInfo> GetPreStartInitMethodsFromAssemblyCollection(IEnumerable`1<Assembly> assemblies);
    internal static MethodInfo FindPreStartInitMethod(Type type, string methodName);
    private static void RegisterForChangeNotifications();
    private static void OnChanged(string key, object value, CacheItemRemovedReason reason);
    private static void LoadWebPages();
    internal static AssemblyName GetFullName(string name);
    private static AssemblyName GetFullName(string name, Version version, string publicKeyToken);
    private static Assembly LoadAssembly(AssemblyName name);
    [CompilerGeneratedAttribute]
private static Assembly <LoadWebPages>b__0(AssemblyName asmName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Web.WebPages.Deployment.Resources.ConfigurationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InstallPathNotFound { get; }
    internal static string WebPagesRegistryKeyDoesNotExist { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InstallPathNotFound();
    internal static string get_WebPagesRegistryKeyDoesNotExist();
}
public static class System.Web.WebPages.Deployment.WebPagesDeployment : object {
    private static string _appSettingsVersion;
    private static string _appSettingsEnabled;
    private static string WebPagesRegistryKey;
    private static String[] _webPagesExtensions;
    private static object _installPathNotFound;
    public static string CacheKeyPrefix;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static WebPagesDeployment();
    public static Version GetVersion(string path);
    public static bool IsEnabled(string path);
    public static bool IsExplicitlyDisabled(string path);
    internal static bool IsEnabled(string path, NameValueCollection appSettings);
    internal static bool IsExplicitlyDisabled(NameValueCollection appSettings);
    internal static Version GetVersion(string path, NameValueCollection appSettings);
    public static string GetAssemblyPath(Version version);
    private static NameValueCollection GetAppSettings(string path);
    private static Version GetVersionFromConfig(NameValueCollection appSettings);
    internal static bool AppRootContainsWebPagesFile(string path);
    private static bool IsWebPagesFile(string file);
    [CompilerGeneratedAttribute]
private static bool <AppRootContainsWebPagesFile>b__0(string f);
}
