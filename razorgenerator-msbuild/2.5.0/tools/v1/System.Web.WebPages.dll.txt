[CompilerGeneratedAttribute]
internal static class Microsoft.Internal.Web.Utils.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string Argument_Must_Be_Between { get; }
    internal static string Argument_Must_Be_Enum_Member { get; }
    internal static string Argument_Must_Be_GreaterThan { get; }
    internal static string Argument_Must_Be_GreaterThanOrEqualTo { get; }
    internal static string Argument_Must_Be_LessThan { get; }
    internal static string Argument_Must_Be_LessThanOrEqualTo { get; }
    internal static string Argument_Must_Be_Null_Or_Non_Empty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_Argument_Must_Be_Between();
    internal static string get_Argument_Must_Be_Enum_Member();
    internal static string get_Argument_Must_Be_GreaterThan();
    internal static string get_Argument_Must_Be_GreaterThanOrEqualTo();
    internal static string get_Argument_Must_Be_LessThan();
    internal static string get_Argument_Must_Be_LessThanOrEqualTo();
    internal static string get_Argument_Must_Be_Null_Or_Non_Empty();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
internal static class Microsoft.Internal.Web.Utils.ExceptionHelper : object {
    internal static ArgumentException CreateArgumentNullOrEmptyException(string paramName);
}
internal static class Microsoft.Internal.Web.Utils.MimeMapping : object {
    private static IDictionary`2<string, string> _mimeMappings;
    private static MimeMapping();
    internal static string GetMimeMapping(string fileName);
    internal static void AddMimeMapping(string extension, string mimeType);
}
public static class System.Web.Helpers.AntiForgery : object {
    private static AntiForgeryWorker _worker;
    private static AntiForgery();
    public static HtmlString GetHtml();
    public static HtmlString GetHtml(HttpContextBase httpContext, string salt, string domain, string path);
    public static void Validate();
    public static void Validate(HttpContextBase httpContext, string salt);
}
internal class System.Web.Helpers.AntiForgeryData : object {
    private static string AntiForgeryTokenFieldName;
    private static int TokenLength;
    private static RNGCryptoServiceProvider _prng;
    private DateTime _creationDate;
    private string _salt;
    private string _username;
    private string _value;
    public DateTime CreationDate { get; public set; }
    public string Salt { get; public set; }
    public string Username { get; public set; }
    public string Value { get; public set; }
    public AntiForgeryData(AntiForgeryData token);
    private static AntiForgeryData();
    public DateTime get_CreationDate();
    public void set_CreationDate(DateTime value);
    public string get_Salt();
    public void set_Salt(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Value();
    public void set_Value(string value);
    private static string Base64EncodeForCookieName(string s);
    private static string GenerateRandomTokenString();
    internal static string GetAntiForgeryTokenName(string appPath);
    internal static string GetUsername(IPrincipal user);
    public static AntiForgeryData NewToken();
}
internal class System.Web.Helpers.AntiForgeryDataSerializer : object {
    internal Func`2<string, Byte[]> Decoder;
    internal Func`2<Byte[], string> Encoder;
    [CompilerGeneratedAttribute]
private static Func`2<string, Byte[]> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Byte[], string> CS$<>9__CachedAnonymousMethodDelegate4;
    public virtual AntiForgeryData Deserialize(string serializedToken);
    public virtual string Serialize(AntiForgeryData token);
    private static string Base64ToHex(string base64);
    private static char HexDigit(int value);
    private static int HexValue(char digit);
    private static string HexToBase64(string hex);
    [CompilerGeneratedAttribute]
private static Byte[] <.ctor>b__1(string value);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(Byte[] bytes);
}
internal class System.Web.Helpers.AntiForgeryWorker : object {
    [CompilerGeneratedAttribute]
private AntiForgeryDataSerializer <Serializer>k__BackingField;
    internal AntiForgeryDataSerializer Serializer { get; internal set; }
    [CompilerGeneratedAttribute]
internal AntiForgeryDataSerializer get_Serializer();
    [CompilerGeneratedAttribute]
internal void set_Serializer(AntiForgeryDataSerializer value);
    private static HttpAntiForgeryException CreateValidationException();
    public HtmlString GetHtml(HttpContextBase httpContext, string salt, string domain, string path);
    private string GetAntiForgeryTokenAndSetCookie(HttpContextBase httpContext, string salt, string domain, string path);
    public void Validate(HttpContextBase context, string salt);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Helpers.UnvalidatedRequestValues : object {
    private HttpRequestBase _request;
    private Func`1<NameValueCollection> _formGetter;
    private Func`1<NameValueCollection> _queryStringGetter;
    public NameValueCollection Form { get; }
    public NameValueCollection QueryString { get; }
    public string Item { get; }
    internal UnvalidatedRequestValues(HttpRequestBase request, Func`1<NameValueCollection> formGetter, Func`1<NameValueCollection> queryStringGetter);
    public NameValueCollection get_Form();
    public NameValueCollection get_QueryString();
    public string get_Item(string key);
}
[ExtensionAttribute]
public static class System.Web.Helpers.Validation : object {
    [ExtensionAttribute]
public static UnvalidatedRequestValues Unvalidated(HttpRequestBase request);
    [ExtensionAttribute]
public static UnvalidatedRequestValues Unvalidated(HttpRequest request);
    [ExtensionAttribute]
public static string Unvalidated(HttpRequestBase request, string key);
    [ExtensionAttribute]
public static string Unvalidated(HttpRequest request, string key);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.HttpAntiForgeryException : HttpException {
    private HttpAntiForgeryException(SerializationInfo info, StreamingContext context);
    public HttpAntiForgeryException(string message);
    public HttpAntiForgeryException(string message, Exception innerException);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.TagBuilder : object {
    private string _idAttributeDotReplacement;
    private string _innerHtml;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    public IDictionary`2<string, string> Attributes { get; private set; }
    public string IdAttributeDotReplacement { get; public set; }
    public string InnerHtml { get; public set; }
    public string TagName { get; private set; }
    public TagBuilder(string tagName);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, string> value);
    public string get_IdAttributeDotReplacement();
    public void set_IdAttributeDotReplacement(string value);
    public string get_InnerHtml();
    public void set_InnerHtml(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    public void AddCssClass(string value);
    public static string CreateSanitizedId(string originalId);
    public static string CreateSanitizedId(string originalId, string invalidCharReplacement);
    public void GenerateId(string name);
    private void AppendAttributes(StringBuilder sb);
    public void MergeAttribute(string key, string value);
    public void MergeAttribute(string key, string value, bool replaceExisting);
    public void MergeAttributes(IDictionary`2<TKey, TValue> attributes);
    public void MergeAttributes(IDictionary`2<TKey, TValue> attributes, bool replaceExisting);
    public void SetInnerText(string innerText);
    internal IHtmlString ToHtmlString(TagRenderMode renderMode);
    public virtual string ToString();
    public string ToString(TagRenderMode renderMode);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public enum System.Web.Mvc.TagRenderMode : Enum {
    public int value__;
    public static TagRenderMode Normal;
    public static TagRenderMode StartTag;
    public static TagRenderMode EndTag;
    public static TagRenderMode SelfClosing;
}
public class System.Web.WebPages.ApplicationPart : object {
    private static string ModuleRootSyntax;
    private static string ResourceVirtualPathRoot;
    private static string ResourceRoute;
    private static LazyAction _initApplicationPart;
    private static ApplicationPartRegistry _partRegistry;
    private Lazy`1<IDictionary`2<string, string>> _applicationPartResources;
    private Lazy`1<string> _applicationPartName;
    [CompilerGeneratedAttribute]
private IResourceAssembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    internal IResourceAssembly Assembly { get; private set; }
    internal string RootVirtualPath { get; private set; }
    internal string Name { get; }
    internal IDictionary`2<string, string> ApplicationPartResources { get; }
    public ApplicationPart(Assembly assembly, string rootVirtualPath);
    internal ApplicationPart(IResourceAssembly assembly, string rootVirtualPath);
    private static ApplicationPart();
    [CompilerGeneratedAttribute]
internal IResourceAssembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(IResourceAssembly value);
    [CompilerGeneratedAttribute]
internal string get_RootVirtualPath();
    [CompilerGeneratedAttribute]
private void set_RootVirtualPath(string value);
    internal string get_Name();
    internal IDictionary`2<string, string> get_ApplicationPartResources();
    public static void Register(ApplicationPart applicationPart);
    public static string ProcessVirtualPath(Assembly assembly, string baseVirtualPath, string virtualPath);
    internal static IEnumerable`1<ApplicationPart> GetRegisteredParts();
    private string ProcessVirtualPath(string baseVirtualPath, string virtualPath);
    internal static string ResolveVirtualPath(string applicationRoot, string baseVirtualPath, string virtualPath);
    internal Stream GetResourceStream(string virtualPath);
    private string GetResourceNameFromVirtualPath(string virtualPath);
    internal static string GetResourceNameFromVirtualPath(string moduleName, string virtualPath);
    private string GetResourceVirtualPath(string virtualPath);
    internal static string GetResourceVirtualPath(string moduleName, string moduleRoot, string virtualPath);
    private static void InitApplicationParts();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__3();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(string key);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(string key);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.ApplicationParts.ApplicationPartRegistry : object {
    private static Type _webPageType;
    private DictionaryBasedVirtualPathFactory _virtualPathFactory;
    private ConcurrentDictionary`2<string, bool> _registeredVirtualPaths;
    private ConcurrentDictionary`2<IResourceAssembly, ApplicationPart> _applicationParts;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public ApplicationPart Item { get; }
    public ApplicationPart Item { get; }
    public IEnumerable`1<ApplicationPart> RegisteredParts { get; }
    public ApplicationPartRegistry(DictionaryBasedVirtualPathFactory pathFactory);
    private static ApplicationPartRegistry();
    public ApplicationPart get_Item(string name);
    public ApplicationPart get_Item(IResourceAssembly assembly);
    public IEnumerable`1<ApplicationPart> get_RegisteredParts();
    public void Register(ApplicationPart applicationPart);
    internal void Register(ApplicationPart applicationPart, Func`1<object> registerPageAction);
    private void RegisterWebPage(ApplicationPart module, Type webPageType, Func`1<object> registerPageAction);
    private static Func`1<object> NewTypeInstance(Type type);
    internal static string GetRootRelativeVirtualPath(string rootVirtualPath, string pageVirtualPath);
    [CompilerGeneratedAttribute]
private static bool <Register>b__3(Type type);
}
internal class System.Web.WebPages.ApplicationParts.DictionaryBasedVirtualPathFactory : object {
    private Dictionary`2<string, Func`1<object>> _factories;
    internal void RegisterPath(string virtualPath, Func`1<object> factory);
    public sealed virtual bool Exists(string virtualPath);
    public sealed virtual object CreateInstance(string virtualPath);
}
internal interface System.Web.WebPages.ApplicationParts.IResourceAssembly {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Stream GetManifestResourceStream(string name);
    public abstract virtual IEnumerable`1<string> GetManifestResourceNames();
    public abstract virtual IEnumerable`1<Type> GetTypes();
}
internal class System.Web.WebPages.ApplicationParts.LazyAction : object {
    private Lazy`1<object> _lazyAction;
    public LazyAction(Action action);
    public object EnsurePerformed();
}
internal class System.Web.WebPages.ApplicationParts.ResourceAssembly : object {
    private Assembly _assembly;
    public string Name { get; }
    public ResourceAssembly(Assembly assembly);
    public sealed virtual string get_Name();
    public sealed virtual Stream GetManifestResourceStream(string name);
    public sealed virtual IEnumerable`1<string> GetManifestResourceNames();
    public sealed virtual IEnumerable`1<Type> GetTypes();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Web.WebPages.ApplicationParts.ResourceHandler : object {
    private string _path;
    private ApplicationPart _applicationPart;
    public bool IsReusable { get; }
    public ResourceHandler(ApplicationPart applicationPart, string path);
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
    internal void ProcessRequest(HttpResponseBase response);
}
internal class System.Web.WebPages.ApplicationParts.ResourceRouteHandler : object {
    private ApplicationPartRegistry _partRegistry;
    public ResourceRouteHandler(ApplicationPartRegistry partRegistry);
    public sealed virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
}
public abstract class System.Web.WebPages.ApplicationStartPage : WebPageExecutingBase {
    private static Action`1<Action> _safeExecuteStartPageThunk;
    public static string StartPageVirtualPath;
    public static string CacheKeyPrefix;
    [CompilerGeneratedAttribute]
private HttpApplication <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private static HtmlString <Markup>k__BackingField;
    [CompilerGeneratedAttribute]
private static Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<string, object> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegateb;
    public HttpApplication Application { get; internal set; }
    public HttpContextBase Context { get; }
    public static HtmlString Markup { get; private set; }
    internal static Exception Exception { get; private set; }
    public TextWriter Output { get; internal set; }
    public string VirtualPath { get; public set; }
    private static ApplicationStartPage();
    [CompilerGeneratedAttribute]
public HttpApplication get_Application();
    [CompilerGeneratedAttribute]
internal void set_Application(HttpApplication value);
    public virtual HttpContextBase get_Context();
    [CompilerGeneratedAttribute]
public static HtmlString get_Markup();
    [CompilerGeneratedAttribute]
private static void set_Markup(HtmlString value);
    [CompilerGeneratedAttribute]
internal static Exception get_Exception();
    [CompilerGeneratedAttribute]
private static void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public TextWriter get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(TextWriter value);
    internal void ExecuteInternal();
    internal static void ExecuteStartPage(HttpApplication application);
    internal static void ExecuteStartPage(HttpApplication application, Action`1<string> monitorFile, Func`2<string, bool> fileExists, Func`2<string, object> createInstance, IEnumerable`1<string> supportedExtensions);
    internal static void ExecuteStartPageInternal(HttpApplication application, Action`1<string> monitorFile, Func`2<string, bool> fileExists, Func`2<string, object> createInstance, IEnumerable`1<string> supportedExtensions);
    private static Action`1<Action> GetSafeExecuteStartPageThunk();
    private static void InitiateShutdown(string key, object value, CacheItemRemovedReason reason);
    private static void MonitorFile(string virtualPath);
    private static void ShutdownCallBack(object state);
    public virtual void Write(HelperResult result);
    public virtual void WriteLiteral(object value);
    public virtual void Write(object value);
    public virtual string get_VirtualPath();
    public virtual void set_VirtualPath(string value);
    [CompilerGeneratedAttribute]
private void <ExecuteInternal>b__3();
    [CompilerGeneratedAttribute]
private static void <ExecuteStartPage>b__4(string vpath);
    [CompilerGeneratedAttribute]
private static bool <ExecuteStartPage>b__5(string vpath);
    [CompilerGeneratedAttribute]
private static object <ExecuteStartPage>b__6(string vpath);
    [CompilerGeneratedAttribute]
private static void <GetSafeExecuteStartPageThunk>b__a(Action action);
}
internal static class System.Web.WebPages.CultureUtil : object {
    internal static void SetCulture(Thread thread, HttpContextBase context, string cultureName);
    internal static void SetUICulture(Thread thread, HttpContextBase context, string cultureName);
    private static CultureInfo GetCulture(HttpContextBase context, string cultureName);
    private static CultureInfo DetermineAutoCulture(HttpContextBase context);
}
internal class System.Web.WebPages.DisposableAction : object {
    private Action _action;
    private bool _hasDisposed;
    public DisposableAction(Action action);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class System.Web.WebPages.DynamicHttpApplicationState : DynamicObject {
    private HttpApplicationStateBase _state;
    public DynamicHttpApplicationState(HttpApplicationStateBase state);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.DynamicPageDataDictionary`1 : DynamicObject {
    private PageDataDictionary`1<TValue> _data;
    public ICollection`1<object> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public DynamicPageDataDictionary`1(PageDataDictionary`1<TValue> dictionary);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public sealed virtual void Add(object key, TValue value);
    public sealed virtual bool ContainsKey(object key);
    public sealed virtual ICollection`1<object> get_Keys();
    public sealed virtual bool Remove(object key);
    public sealed virtual bool TryGetValue(object key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(object key);
    public sealed virtual void set_Item(object key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<object, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<object, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<object, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<object, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Web.WebPages.FileExistenceCache : object {
    private static int TickPerMiliseconds;
    private static FileExistenceCache s_instance;
    private ConcurrentDictionary`2<string, bool> _cache;
    private long _creationTick;
    private int _ticksBeforeReset;
    private VirtualPathProvider _virtualPathProvider;
    public VirtualPathProvider VirtualPathProvider { get; }
    public int MilliSecondsBeforeReset { get; internal set; }
    public bool TimeExceeded { get; }
    internal IDictionary`2<string, bool> CacheInternal { get; }
    public FileExistenceCache(VirtualPathProvider virtualPathProvider, int milliSecondsBeforeReset);
    private static FileExistenceCache();
    public VirtualPathProvider get_VirtualPathProvider();
    public int get_MilliSecondsBeforeReset();
    internal void set_MilliSecondsBeforeReset(int value);
    public void Reset();
    public bool get_TimeExceeded();
    public bool FileExists(string virtualPath);
    public static FileExistenceCache GetInstance();
    internal IDictionary`2<string, bool> get_CacheInternal();
}
public class System.Web.WebPages.HelperPage : object {
    private static WebPageContext _pageContext;
    public static HttpContextBase Context { get; }
    public static WebPageRenderingBase CurrentPage { get; }
    [DynamicAttribute]
public static object Page { get; }
    [DynamicAttribute]
public static object Model { get; }
    public static ModelStateDictionary ModelState { get; }
    public static HtmlHelper Html { get; }
    public static WebPageContext PageContext { get; public set; }
    public static HttpApplicationStateBase AppState { get; }
    [DynamicAttribute]
public static object App { get; }
    public static string VirtualPath { get; }
    public static Cache Cache { get; }
    public static HttpRequestBase Request { get; }
    public static HttpResponseBase Response { get; }
    public static HttpServerUtilityBase Server { get; }
    public static HttpSessionStateBase Session { get; }
    public static IList`1<string> UrlData { get; }
    public static IPrincipal User { get; }
    public static bool IsPost { get; }
    public static bool IsAjax { get; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDictionary`2<object, object> PageData { get; }
    public static HttpContextBase get_Context();
    public static WebPageRenderingBase get_CurrentPage();
    public static object get_Page();
    public static object get_Model();
    public static ModelStateDictionary get_ModelState();
    public static HtmlHelper get_Html();
    public static WebPageContext get_PageContext();
    public static void set_PageContext(WebPageContext value);
    public static HttpApplicationStateBase get_AppState();
    public static object get_App();
    public static string get_VirtualPath();
    public static Cache get_Cache();
    public static HttpRequestBase get_Request();
    public static HttpResponseBase get_Response();
    public static HttpServerUtilityBase get_Server();
    public static HttpSessionStateBase get_Session();
    public static IList`1<string> get_UrlData();
    public static IPrincipal get_User();
    public static bool get_IsPost();
    public static bool get_IsAjax();
    public static IDictionary`2<object, object> get_PageData();
    public static string Href(string path, Object[] pathParts);
    public static void WriteTo(TextWriter writer, object value);
    public static void WriteLiteralTo(TextWriter writer, object value);
    public static void WriteTo(TextWriter writer, HelperResult value);
    public static void WriteLiteralTo(TextWriter writer, HelperResult value);
}
public class System.Web.WebPages.HelperResult : object {
    private Action`1<TextWriter> _action;
    public HelperResult(Action`1<TextWriter> action);
    public sealed virtual string ToHtmlString();
    public virtual string ToString();
    public void WriteTo(TextWriter writer);
}
public class System.Web.WebPages.Html.HtmlHelper : object {
    private static string DefaultErrorClass;
    private static string DefaultValidationSummaryClass;
    private static int TextAreaRows;
    private static int TextAreaColumns;
    private static object _validationInputCssClassKey;
    private static object _validationSummaryClassKey;
    private static string _idAttributeDotReplacement;
    private static IDictionary`2<string, object> implicitRowsAndColumns;
    [CompilerGeneratedAttribute]
private ModelStateDictionary <ModelState>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<SelectListItem, SelectListItem> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, ModelState> CS$<>9__CachedAnonymousMethodDelegate13;
    public static string IdAttributeDotReplacement { get; public set; }
    public static string ValidationInputCssClassName { get; public set; }
    public static string ValidationSummaryClass { get; public set; }
    private ModelStateDictionary ModelState { get; private set; }
    internal HtmlHelper(ModelStateDictionary modelState);
    private static HtmlHelper();
    public IHtmlString CheckBox(string name);
    public IHtmlString CheckBox(string name, object htmlAttributes);
    public IHtmlString CheckBox(string name, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString CheckBox(string name, bool isChecked);
    public IHtmlString CheckBox(string name, bool isChecked, object htmlAttributes);
    public IHtmlString CheckBox(string name, bool isChecked, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildCheckBox(string name, Nullable`1<bool> isChecked, IDictionary`2<string, object> attributes);
    public static string get_IdAttributeDotReplacement();
    public static void set_IdAttributeDotReplacement(string value);
    public static string get_ValidationInputCssClassName();
    public static void set_ValidationInputCssClassName(string value);
    public static string get_ValidationSummaryClass();
    public static void set_ValidationSummaryClass(string value);
    [CompilerGeneratedAttribute]
private ModelStateDictionary get_ModelState();
    [CompilerGeneratedAttribute]
private void set_ModelState(ModelStateDictionary value);
    public string AttributeEncode(object value);
    public string AttributeEncode(string value);
    public string Encode(object value);
    public string Encode(string value);
    public IHtmlString Raw(string value);
    public IHtmlString TextBox(string name);
    public IHtmlString TextBox(string name, object value);
    public IHtmlString TextBox(string name, object value, object htmlAttributes);
    public IHtmlString TextBox(string name, object value, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString Hidden(string name);
    public IHtmlString Hidden(string name, object value);
    public IHtmlString Hidden(string name, object value, object htmlAttributes);
    public IHtmlString Hidden(string name, object value, IDictionary`2<string, object> htmlAttributes);
    private static object GetHiddenFieldValue(object value);
    public IHtmlString Password(string name);
    public IHtmlString Password(string name, object value);
    public IHtmlString Password(string name, object value, object htmlAttributes);
    public IHtmlString Password(string name, object value, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildInputField(string name, InputType type, object value, bool isExplicitValue, IDictionary`2<string, object> attributes);
    private static string GetInputTypeString(InputType inputType);
    internal static IDictionary`2<string, object> ObjectToDictionary(object instance);
    private void AddErrorClass(TagBuilder tagBuilder, string name);
    private static object ConvertTo(object value, Type type);
    private static object UnwrapPossibleArrayType(object value, Type destinationType, CultureInfo culture);
    private static object ConvertSimpleType(object value, Type destinationType, CultureInfo culture);
    public IHtmlString Label(string labelText);
    public IHtmlString Label(string labelText, string labelFor);
    public IHtmlString Label(string labelText, object attributes);
    public IHtmlString Label(string labelText, string labelFor, object attributes);
    public IHtmlString Label(string labelText, string labelFor, IDictionary`2<string, object> attributes);
    public IHtmlString RadioButton(string name, object value);
    public IHtmlString RadioButton(string name, object value, object htmlAttributes);
    public IHtmlString RadioButton(string name, object value, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString RadioButton(string name, object value, bool isChecked);
    public IHtmlString RadioButton(string name, object value, bool isChecked, object htmlAttributes);
    public IHtmlString RadioButton(string name, object value, bool isChecked, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildRadioButton(string name, object value, Nullable`1<bool> isChecked, IDictionary`2<string, object> attributes);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, object htmlAttributes);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple, object htmlAttributes);
    private IHtmlString BuildListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, Nullable`1<int> size, bool allowMultiple, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString DropDownList(string name, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString DropDownList(string name, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValue, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValue, object htmlAttributes);
    private IHtmlString BuildDropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValue, IDictionary`2<string, object> htmlAttributes);
    private static string BuildListOptions(IEnumerable`1<SelectListItem> selectList, string optionText);
    private static string ListItemToOption(SelectListItem item);
    private static IDictionary`2<string, object> GetRowsAndColumnsDictionary(int rows, int columns);
    public IHtmlString TextArea(string name);
    public IHtmlString TextArea(string name, object htmlAttributes);
    public IHtmlString TextArea(string name, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString TextArea(string name, string value);
    public IHtmlString TextArea(string name, string value, object htmlAttributes);
    public IHtmlString TextArea(string name, string value, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString TextArea(string name, string value, int rows, int columns, object htmlAttributes);
    public IHtmlString TextArea(string name, string value, int rows, int columns, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildTextArea(string name, string value, IDictionary`2<string, object> rowsAndColumnsDictionary, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationMessage(string name);
    public IHtmlString ValidationMessage(string name, string message);
    public IHtmlString ValidationMessage(string name, object htmlAttributes);
    public IHtmlString ValidationMessage(string name, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationMessage(string name, string message, object htmlAttributes);
    public IHtmlString ValidationMessage(string name, string message, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildValidationMessage(string name, string message, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationSummary();
    public IHtmlString ValidationSummary(string message);
    public IHtmlString ValidationSummary(bool excludeFieldErrors);
    public IHtmlString ValidationSummary(object htmlAttributes);
    public IHtmlString ValidationSummary(IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationSummary(string message, object htmlAttributes);
    public IHtmlString ValidationSummary(string message, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationSummary(string message, bool excludeFieldErrors, object htmlAttributes);
    public IHtmlString ValidationSummary(string message, bool excludeFieldErrors, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildValidationSummary(string message, Nullable`1<bool> excludeFieldErrors, IDictionary`2<string, object> htmlAttributes);
    [CompilerGeneratedAttribute]
private static string <BuildListBox>b__3(object value);
    [CompilerGeneratedAttribute]
private static SelectListItem <BuildDropDownList>b__6(SelectListItem item);
    [CompilerGeneratedAttribute]
private static bool <BuildValidationSummary>b__10(KeyValuePair`2<string, ModelState> state);
    [CompilerGeneratedAttribute]
private static ModelState <BuildValidationSummary>b__11(KeyValuePair`2<string, ModelState> state);
}
public class System.Web.WebPages.Html.ModelState : object {
    private List`1<string> _errors;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IList`1<string> Errors { get; }
    public object Value { get; public set; }
    public IList`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.WebPages.Html.ModelStateDictionary : object {
    internal static string FormFieldKey;
    internal Dictionary`2<string, ModelState> _innerDictionary;
    [CompilerGeneratedAttribute]
private static Func`2<ModelState, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsValid { get; }
    public ICollection`1<string> Keys { get; }
    public ModelState Item { get; public set; }
    public ICollection`1<ModelState> Values { get; }
    public ModelStateDictionary(ModelStateDictionary dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsValid();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ModelState get_Item(string key);
    public sealed virtual void set_Item(string key, ModelState value);
    public sealed virtual ICollection`1<ModelState> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, ModelState> item);
    public sealed virtual void Add(string key, ModelState value);
    public void AddError(string key, string errorMessage);
    public void AddFormError(string errorMessage);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ModelState>> GetEnumerator();
    private ModelState GetModelStateForKey(string key);
    public bool IsValidField(string key);
    public void Merge(ModelStateDictionary dictionary);
    public sealed virtual bool Remove(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, ModelState& value);
    public void SetModelValue(string key, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static bool <get_IsValid>b__0(ModelState modelState);
}
public class System.Web.WebPages.Html.SelectListItem : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    public string Text { get; public set; }
    public string Value { get; public set; }
    public bool Selected { get; public set; }
    public SelectListItem(SelectListItem item);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
}
[ExtensionAttribute]
public static class System.Web.WebPages.HttpContextExtensions : object {
    [ExtensionAttribute]
public static void RedirectLocal(HttpContextBase context, string url);
    [ExtensionAttribute]
public static void RegisterForDispose(HttpContextBase context, IDisposable resource);
}
public interface System.Web.WebPages.ITemplateFile {
    public TemplateFileInfo TemplateInfo { get; }
    public abstract virtual TemplateFileInfo get_TemplateInfo();
}
public interface System.Web.WebPages.IVirtualPathFactory {
    public abstract virtual bool Exists(string virtualPath);
    public abstract virtual object CreateInstance(string virtualPath);
}
public interface System.Web.WebPages.IWebPageRequestExecutor {
    public abstract virtual bool Execute(WebPage page);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.PageDataDictionary`1 : object {
    private IDictionary`2<object, TValue> _data;
    private IDictionary`2<string, TValue> _stringDictionary;
    private IList`1<TValue> _indexedValues;
    internal IDictionary`2<object, TValue> Data { get; }
    internal IDictionary`2<string, TValue> StringDictionary { get; }
    internal IList`1<TValue> IndexedValues { get; }
    public ICollection`1<object> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    internal ICollection`1<KeyValuePair`2<object, TValue>> Items { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal IDictionary`2<object, TValue> get_Data();
    internal IDictionary`2<string, TValue> get_StringDictionary();
    internal IList`1<TValue> get_IndexedValues();
    public sealed virtual void Add(object key, TValue value);
    internal bool ContainsIndex(object o);
    internal bool ContainsIndex(int index);
    internal bool ContainsStringKey(object o);
    internal bool ContainsStringKey(string key);
    public sealed virtual ICollection`1<object> get_Keys();
    public sealed virtual bool ContainsKey(object key);
    public sealed virtual bool Remove(object key);
    public sealed virtual bool TryGetValue(object key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(object key);
    public sealed virtual void set_Item(object key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<object, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<object, TValue> item);
    internal ICollection`1<KeyValuePair`2<object, TValue>> get_Items();
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<object, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<object, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static IDictionary`2<object, object> CreatePageDataFromParameters(IDictionary`2<object, object> previousPageData, Object[] data);
}
[AttributeUsageAttribute("4")]
public class System.Web.WebPages.PageVirtualPathAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    public string VirtualPath { get; private set; }
    public PageVirtualPathAttribute(string virtualPath);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
private void set_VirtualPath(string value);
}
internal static class System.Web.WebPages.PathUtil : object {
    internal static string GetExtension(string path);
}
[EditorBrowsableAttribute("1")]
public static class System.Web.WebPages.PreApplicationStartCode : object {
    private static bool _startWasCalled;
    public static void Start();
}
internal class System.Web.WebPages.ReflectionDynamicObject : DynamicObject {
    [CompilerGeneratedAttribute]
private object <RealObject>k__BackingField;
    private object RealObject { get; private set; }
    [CompilerGeneratedAttribute]
private object get_RealObject();
    [CompilerGeneratedAttribute]
private void set_RealObject(object value);
    public static object WrapObjectIfInternal(object o);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class System.Web.WebPages.RequestExtensions : object {
    [ExtensionAttribute]
public static bool IsUrlLocalToHost(HttpRequestBase request, string url);
}
internal static class System.Web.WebPages.RequestResourceTracker : object {
    private static object _resourcesKey;
    [CompilerGeneratedAttribute]
private static Action`1<SecureWeakReference> CS$<>9__CachedAnonymousMethodDelegate1;
    private static RequestResourceTracker();
    private static List`1<SecureWeakReference> GetResources(HttpContextBase context);
    internal static void DisposeResources(HttpContextBase context);
    internal static void RegisterForDispose(HttpContextBase context, IDisposable resource);
    internal static void RegisterForDispose(IDisposable resource);
    [CompilerGeneratedAttribute]
private static void <DisposeResources>b__0(SecureWeakReference resource);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class System.Web.WebPages.Resources.WebPageResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AntiForgeryToken_ValidationFailed { get; }
    internal static string ApplicationPart_ModuleAlreadyRegistered { get; }
    internal static string ApplicationPart_ModuleAlreadyRegisteredForVirtualPath { get; }
    internal static string ApplicationPart_ModuleCannotBeFound { get; }
    internal static string ApplicationPart_ModuleNotRegistered { get; }
    internal static string ApplicationPart_ResourceNotFound { get; }
    internal static string DataHelpers_ConnectionStringNotFound { get; }
    internal static string DataHelpers_FileNotFound { get; }
    internal static string DynamicDictionary_InvalidNumberOfIndexes { get; }
    internal static string DynamicHttpApplicationState_UseOnlyStringOrIntToGet { get; }
    internal static string DynamicHttpApplicationState_UseOnlyStringToSet { get; }
    internal static string HtmlHelper_ConversionThrew { get; }
    internal static string HtmlHelper_NoConverterExists { get; }
    internal static string HtmlHelper_WrongSelectDataType { get; }
    internal static string HttpContextUnavailable { get; }
    internal static string StateStorage_RequestScopeNotAvailable { get; }
    internal static string StateStorage_ScopeIsReadOnly { get; }
    internal static string StateStorage_StorageScopesCannotBeCreated { get; }
    internal static string UrlData_ReadOnly { get; }
    internal static string WebPage_CannotRequestDirectly { get; }
    internal static string WebPage_FileNotSupported { get; }
    internal static string WebPage_InvalidPageType { get; }
    internal static string WebPage_LayoutPageNotFound { get; }
    internal static string WebPage_RenderBodyAlreadyCalled { get; }
    internal static string WebPage_RenderBodyNotCalled { get; }
    internal static string WebPage_SectionAleadyDefined { get; }
    internal static string WebPage_SectionAleadyRendered { get; }
    internal static string WebPage_SectionNotDefined { get; }
    internal static string WebPage_SectionsNotRendered { get; }
    internal static string WebPageRoute_UnderscoreBlocked { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AntiForgeryToken_ValidationFailed();
    internal static string get_ApplicationPart_ModuleAlreadyRegistered();
    internal static string get_ApplicationPart_ModuleAlreadyRegisteredForVirtualPath();
    internal static string get_ApplicationPart_ModuleCannotBeFound();
    internal static string get_ApplicationPart_ModuleNotRegistered();
    internal static string get_ApplicationPart_ResourceNotFound();
    internal static string get_DataHelpers_ConnectionStringNotFound();
    internal static string get_DataHelpers_FileNotFound();
    internal static string get_DynamicDictionary_InvalidNumberOfIndexes();
    internal static string get_DynamicHttpApplicationState_UseOnlyStringOrIntToGet();
    internal static string get_DynamicHttpApplicationState_UseOnlyStringToSet();
    internal static string get_HtmlHelper_ConversionThrew();
    internal static string get_HtmlHelper_NoConverterExists();
    internal static string get_HtmlHelper_WrongSelectDataType();
    internal static string get_HttpContextUnavailable();
    internal static string get_StateStorage_RequestScopeNotAvailable();
    internal static string get_StateStorage_ScopeIsReadOnly();
    internal static string get_StateStorage_StorageScopesCannotBeCreated();
    internal static string get_UrlData_ReadOnly();
    internal static string get_WebPage_CannotRequestDirectly();
    internal static string get_WebPage_FileNotSupported();
    internal static string get_WebPage_InvalidPageType();
    internal static string get_WebPage_LayoutPageNotFound();
    internal static string get_WebPage_RenderBodyAlreadyCalled();
    internal static string get_WebPage_RenderBodyNotCalled();
    internal static string get_WebPage_SectionAleadyDefined();
    internal static string get_WebPage_SectionAleadyRendered();
    internal static string get_WebPage_SectionNotDefined();
    internal static string get_WebPage_SectionsNotRendered();
    internal static string get_WebPageRoute_UnderscoreBlocked();
}
[ExtensionAttribute]
public static class System.Web.WebPages.ResponseExtensions : object {
    [ExtensionAttribute]
public static void SetStatus(HttpResponseBase response, HttpStatusCode httpStatusCode);
    [ExtensionAttribute]
public static void SetStatus(HttpResponseBase response, int httpStatusCode);
    [ExtensionAttribute]
public static void WriteBinary(HttpResponseBase response, Byte[] data, string mimeType);
    [ExtensionAttribute]
public static void WriteBinary(HttpResponseBase response, Byte[] data);
    [ExtensionAttribute]
public static void OutputCache(HttpResponseBase response, int numberOfSeconds, bool sliding, IEnumerable`1<string> varyByParams, IEnumerable`1<string> varyByHeaders, IEnumerable`1<string> varyByContentEncodings, HttpCacheability cacheability);
}
internal class System.Web.WebPages.Scope.ApplicationScopeStorageDictionary : ScopeStorageDictionary {
    private static IDictionary`2<object, object> _innerDictionary;
    public ApplicationScopeStorageDictionary(WebConfigScopeDictionary webConfigState);
    private static ApplicationScopeStorageDictionary();
}
public class System.Web.WebPages.Scope.AspNetRequestScopeStorageProvider : object {
    private static object _pageScopeKey;
    private static object _requestScopeKey;
    private HttpContextBase _httpContext;
    private Func`1<bool> _appStartExecuted;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <ApplicationScope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public IDictionary`2<object, object> CurrentScope { get; public set; }
    public IDictionary`2<object, object> GlobalScope { get; }
    public IDictionary`2<object, object> ApplicationScope { get; private set; }
    public IDictionary`2<object, object> RequestScope { get; }
    private HttpContextBase HttpContext { get; }
    private IDictionary`2<object, object> RequestScopeInternal { get; }
    private IDictionary`2<object, object> PageScope { get; private set; }
    internal AspNetRequestScopeStorageProvider(HttpContextBase httpContext, Func`1<bool> appStartExecuted);
    private static AspNetRequestScopeStorageProvider();
    public sealed virtual IDictionary`2<object, object> get_CurrentScope();
    public sealed virtual void set_CurrentScope(IDictionary`2<object, object> value);
    public sealed virtual IDictionary`2<object, object> get_GlobalScope();
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_ApplicationScope();
    [CompilerGeneratedAttribute]
private void set_ApplicationScope(IDictionary`2<object, object> value);
    public IDictionary`2<object, object> get_RequestScope();
    private HttpContextBase get_HttpContext();
    private IDictionary`2<object, object> get_RequestScopeInternal();
    private IDictionary`2<object, object> get_PageScope();
    private void set_PageScope(IDictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0();
}
public interface System.Web.WebPages.Scope.IScopeStorageProvider {
    public IDictionary`2<object, object> CurrentScope { get; public set; }
    public IDictionary`2<object, object> GlobalScope { get; }
    public abstract virtual IDictionary`2<object, object> get_CurrentScope();
    public abstract virtual void set_CurrentScope(IDictionary`2<object, object> value);
    public abstract virtual IDictionary`2<object, object> get_GlobalScope();
}
public static class System.Web.WebPages.Scope.ScopeStorage : object {
    private static IScopeStorageProvider _stateStorageProvider;
    private static IScopeStorageProvider _defaultStorageProvider;
    public static IScopeStorageProvider CurrentProvider { get; public set; }
    public static IDictionary`2<object, object> CurrentScope { get; }
    public static IDictionary`2<object, object> GlobalScope { get; }
    private static ScopeStorage();
    public static IScopeStorageProvider get_CurrentProvider();
    public static void set_CurrentProvider(IScopeStorageProvider value);
    public static IDictionary`2<object, object> get_CurrentScope();
    public static IDictionary`2<object, object> get_GlobalScope();
    public static IDisposable CreateTransientScope(IDictionary`2<object, object> context);
    public static IDisposable CreateTransientScope();
}
internal class System.Web.WebPages.Scope.ScopeStorageComparer : object {
    private IEqualityComparer`1<object> _defaultComparer;
    private IEqualityComparer`1<string> _stringComparer;
    private static IEqualityComparer`1<object> _instance;
    public static IEqualityComparer`1<object> Instance { get; }
    public static IEqualityComparer`1<object> get_Instance();
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Web.WebPages.Scope.ScopeStorageDictionary : object {
    private IDictionary`2<object, object> _baseScope;
    private IDictionary`2<object, object> _backingStore;
    private static StateStorageKeyValueComparer _keyValueComparer;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<object, object>, object> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<object, object>, object> CS$<>9__CachedAnonymousMethodDelegate3;
    public object Item { get; public set; }
    protected IDictionary`2<object, object> BackingStore { get; }
    protected IDictionary`2<object, object> BaseScope { get; }
    public ICollection`1<object> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ScopeStorageDictionary(IDictionary`2<object, object> baseScope);
    internal ScopeStorageDictionary(IDictionary`2<object, object> baseScope, IDictionary`2<object, object> backingStore);
    private static ScopeStorageDictionary();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    protected IDictionary`2<object, object> get_BackingStore();
    protected IDictionary`2<object, object> get_BaseScope();
    public virtual void SetValue(object key, object value);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual bool Remove(object key);
    public virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(object key, object value);
    public virtual bool ContainsKey(object key);
    public virtual ICollection`1<object> get_Keys();
    public virtual ICollection`1<object> get_Values();
    public virtual void Add(KeyValuePair`2<object, object> item);
    public virtual void Clear();
    public virtual bool Contains(KeyValuePair`2<object, object> item);
    public virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(KeyValuePair`2<object, object> item);
    protected virtual IEnumerable`1<KeyValuePair`2<object, object>> GetItems();
    [CompilerGeneratedAttribute]
private static object <get_Keys>b__0(KeyValuePair`2<object, object> item);
    [CompilerGeneratedAttribute]
private static object <get_Values>b__2(KeyValuePair`2<object, object> item);
}
public class System.Web.WebPages.Scope.StaticScopeStorageProvider : object {
    private static IDictionary`2<object, object> _defaultContext;
    private IDictionary`2<object, object> _currentContext;
    public IDictionary`2<object, object> CurrentScope { get; public set; }
    public IDictionary`2<object, object> GlobalScope { get; }
    private static StaticScopeStorageProvider();
    public sealed virtual IDictionary`2<object, object> get_CurrentScope();
    public sealed virtual void set_CurrentScope(IDictionary`2<object, object> value);
    public sealed virtual IDictionary`2<object, object> get_GlobalScope();
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.Scope.WebConfigScopeDictionary : object {
    private Lazy`1<Dictionary`2<object, object>> _items;
    public object Item { get; public set; }
    private IDictionary`2<object, object> Items { get; }
    public ICollection`1<object> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public WebConfigScopeDictionary(NameValueCollection appSettings);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    private IDictionary`2<object, object> get_Items();
    public sealed virtual bool TryGetValue(object key, Object& value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(object key, object value);
    public sealed virtual bool ContainsKey(object key);
    public sealed virtual ICollection`1<object> get_Keys();
    public sealed virtual bool Remove(object key);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual void Add(KeyValuePair`2<object, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<object, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<object, object> item);
}
public class System.Web.WebPages.SectionWriter : MulticastDelegate {
    public SectionWriter(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Web.WebPages.SecurityUtil : object {
    private static Action`1<Action> _callInAppTrustThunk;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate6;
    private static Action`1<Action> GetCallInAppTrustThunk();
    public static TResult ProcessInApplicationTrust(Func`1<TResult> func);
    public static void ProcessInApplicationTrust(Action action);
    [CompilerGeneratedAttribute]
private static void <GetCallInAppTrustThunk>b__0(Action f);
    [CompilerGeneratedAttribute]
private static void <GetCallInAppTrustThunk>b__2(Action f);
    [CompilerGeneratedAttribute]
private static void <GetCallInAppTrustThunk>b__3(Action f);
}
public abstract class System.Web.WebPages.StartPage : WebPageRenderingBase {
    [CompilerGeneratedAttribute]
private WebPageRenderingBase <ChildPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunPageCalled>k__BackingField;
    public WebPageRenderingBase ChildPage { get; public set; }
    public HttpContextBase Context { get; public set; }
    public string Layout { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; }
    [DynamicAttribute]
public object Page { get; }
    internal bool RunPageCalled { get; internal set; }
    [CompilerGeneratedAttribute]
public WebPageRenderingBase get_ChildPage();
    [CompilerGeneratedAttribute]
public void set_ChildPage(WebPageRenderingBase value);
    public virtual HttpContextBase get_Context();
    public virtual void set_Context(HttpContextBase value);
    public virtual string get_Layout();
    public virtual void set_Layout(string value);
    public virtual IDictionary`2<object, object> get_PageData();
    public virtual object get_Page();
    [CompilerGeneratedAttribute]
internal bool get_RunPageCalled();
    [CompilerGeneratedAttribute]
internal void set_RunPageCalled(bool value);
    public virtual void ExecutePageHierarchy();
    public static WebPageRenderingBase GetStartPage(WebPageRenderingBase page, string fileName, IEnumerable`1<string> supportedExtensions);
    public virtual HelperResult RenderPage(string path, Object[] data);
    public void RunPage();
    public virtual void Write(HelperResult result);
    public virtual void WriteLiteral(object value);
    public virtual void Write(object value);
}
[ExtensionAttribute]
public static class System.Web.WebPages.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsEmpty(string value);
    [ExtensionAttribute]
public static int AsInt(string value);
    [ExtensionAttribute]
public static int AsInt(string value, int defaultValue);
    [ExtensionAttribute]
public static decimal AsDecimal(string value);
    [ExtensionAttribute]
public static decimal AsDecimal(string value, decimal defaultValue);
    [ExtensionAttribute]
public static float AsFloat(string value);
    [ExtensionAttribute]
public static float AsFloat(string value, float defaultValue);
    [ExtensionAttribute]
public static DateTime AsDateTime(string value);
    [ExtensionAttribute]
public static DateTime AsDateTime(string value, DateTime defaultValue);
    [ExtensionAttribute]
public static TValue As(string value);
    [ExtensionAttribute]
public static bool AsBool(string value);
    [ExtensionAttribute]
public static bool AsBool(string value, bool defaultValue);
    [ExtensionAttribute]
public static TValue As(string value, TValue defaultValue);
    [ExtensionAttribute]
public static bool IsBool(string value);
    [ExtensionAttribute]
public static bool IsInt(string value);
    [ExtensionAttribute]
public static bool IsDecimal(string value);
    [ExtensionAttribute]
public static bool IsFloat(string value);
    [ExtensionAttribute]
public static bool IsDateTime(string value);
    [ExtensionAttribute]
public static bool Is(string value);
}
public class System.Web.WebPages.TemplateFileInfo : object {
    private string _virtualPath;
    public string VirtualPath { get; }
    public TemplateFileInfo(string virtualPath);
    public string get_VirtualPath();
}
public static class System.Web.WebPages.TemplateStack : object {
    private static object _contextKey;
    private static TemplateStack();
    public static ITemplateFile GetCurrentTemplate(HttpContextBase httpContext);
    public static ITemplateFile Pop(HttpContextBase httpContext);
    public static void Push(HttpContextBase httpContext, ITemplateFile templateFile);
    private static Stack`1<ITemplateFile> GetStack(HttpContextBase httpContext);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.UrlDataList : object {
    private List`1<string> _urlData;
    public string Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public UrlDataList(string pathInfo);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(string item);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Web.WebPages.Util : object {
    private static Control s_helperControl;
    private static Util();
    private static Control CreateHelperControl();
    public static string Url(string basePath, string path, Object[] pathParts);
    internal static string BuildUrl(string path, Object[] pathParts);
    internal static bool IsWithinAppRoot(string vpath);
    private static bool IsDisplayableType(Type t);
    internal static WebPageContext CreatePageContext(HttpContext context);
    internal static WebPageContext CreatePageContext(HttpContextBase httpContext);
    internal static WebPageContext CreateNestedPageContext(WebPageContext parentContext, IDictionary`2<object, object> pageData, TModel model, bool isLayoutPage);
    internal static bool IsSimpleName(string path);
    internal static bool IsAnonymousType(Type type);
    internal static void AddAnonymousTypeObjectToDictionary(IDictionary`2<string, object> dictionary, object o);
    internal static bool IsUnsupportedExtensionError(HttpException e);
    internal static void ThrowIfUnsupportedExtension(string virtualPath, HttpException e);
    internal static void ThrowIfCodeDomDefinedExtension(string virtualPath, HttpException e);
    internal static void EnsureValidPageType(WebPageBase page, string virtualPath);
}
public class System.Web.WebPages.VirtualPathFactoryManager : object {
    private static VirtualPathFactoryManager s_instance;
    private static object s_lock;
    private VirtualPathProvider _vpp;
    private Func`3<string, Type, object> _createInstanceMethod;
    private List`1<IVirtualPathFactory> _virtualPathFactories;
    internal VirtualPathProvider VirtualPathProvider { get; }
    internal static VirtualPathFactoryManager Instance { get; }
    internal VirtualPathFactoryManager(VirtualPathProvider vpp, Func`3<string, Type, object> createInstanceMethod);
    private static VirtualPathFactoryManager();
    internal VirtualPathProvider get_VirtualPathProvider();
    public static void RegisterVirtualPathFactory(IVirtualPathFactory virtualPathFactory);
    internal void RegisterVirtualPathFactoryInternal(IVirtualPathFactory virtualPathFactory);
    internal bool PageExists(string virtualPath, bool useCache);
    private bool PageExistsInVPP(string virtualPath, bool useCache);
    internal T CreateInstance(string virtualPath);
    internal static VirtualPathFactoryManager get_Instance();
    internal static VirtualPathFactoryManager CreateFromLambda(string virtualPath, Func`3<string, Type, object> createInstanceMethod);
}
public abstract class System.Web.WebPages.WebPage : WebPageBase {
    private static List`1<IWebPageRequestExecutor> s_executors;
    private HttpContextBase _context;
    [DynamicAttribute]
private object _model;
    private ModelStateDictionary _modelState;
    [CompilerGeneratedAttribute]
private bool <TopLevelPage>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlHelper <Html>k__BackingField;
    internal bool TopLevelPage { get; internal set; }
    public HttpContextBase Context { get; public set; }
    public HtmlHelper Html { get; private set; }
    [DynamicAttribute]
public object Model { get; }
    public ModelStateDictionary ModelState { get; }
    private static WebPage();
    [CompilerGeneratedAttribute]
internal bool get_TopLevelPage();
    [CompilerGeneratedAttribute]
internal void set_TopLevelPage(bool value);
    public virtual HttpContextBase get_Context();
    public virtual void set_Context(HttpContextBase value);
    [CompilerGeneratedAttribute]
public HtmlHelper get_Html();
    [CompilerGeneratedAttribute]
private void set_Html(HtmlHelper value);
    public object get_Model();
    public ModelStateDictionary get_ModelState();
    public static void RegisterPageExecutor(IWebPageRequestExecutor executor);
    public virtual void ExecutePageHierarchy();
    internal void ExecutePageHierarchy(IEnumerable`1<IWebPageRequestExecutor> executors);
    protected virtual void InitializePage();
    [CompilerGeneratedAttribute]
private bool <ExecutePageHierarchy>b__3(IWebPageRequestExecutor executor);
}
public abstract class System.Web.WebPages.WebPageBase : WebPageRenderingBase {
    private HashSet`1<string> _renderedSections;
    private bool _renderedBody;
    private Action`1<TextWriter> _body;
    private TextWriter _tempWriter;
    private TextWriter _currentWriter;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private DynamicPageDataDictionary`1<object> _dynamicPageData;
    [CompilerGeneratedAttribute]
private string <Layout>k__BackingField;
    public string Layout { get; public set; }
    public TextWriter Output { get; }
    public Stack`1<TextWriter> OutputStack { get; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; }
    [DynamicAttribute]
public object Page { get; }
    private Dictionary`2<string, SectionWriter> PreviousSectionWriters { get; }
    private Dictionary`2<string, SectionWriter> SectionWriters { get; }
    private Stack`1<Dictionary`2<string, SectionWriter>> SectionWritersStack { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Layout();
    [CompilerGeneratedAttribute]
public virtual void set_Layout(string value);
    public TextWriter get_Output();
    public Stack`1<TextWriter> get_OutputStack();
    public virtual IDictionary`2<object, object> get_PageData();
    public virtual object get_Page();
    private Dictionary`2<string, SectionWriter> get_PreviousSectionWriters();
    private Dictionary`2<string, SectionWriter> get_SectionWriters();
    private Stack`1<Dictionary`2<string, SectionWriter>> get_SectionWritersStack();
    protected virtual void ConfigurePage(WebPageBase parentPage);
    public static WebPageBase CreateInstanceFromVirtualPath(string virtualPath);
    internal static WebPageBase CreateInstanceFromVirtualPath(string virtualPath, Func`3<string, Type, object> createInstanceMethod);
    internal static WebPageBase CreateInstanceFromVirtualPath(string virtualPath, VirtualPathFactoryManager virtualPathFactoryManager);
    internal virtual WebPageBase CreatePageFromVirtualPath(string path);
    private WebPageContext CreatePageContextFromParameters(bool isLayoutPage, Object[] data);
    public void DefineSection(string name, SectionWriter action);
    internal void EnsurePageCanBeRequestedDirectly(string methodName);
    public void ExecutePageHierarchy(WebPageContext pageContext, TextWriter writer);
    public void ExecutePageHierarchy(WebPageContext pageContext, TextWriter writer, WebPageRenderingBase startPage);
    public virtual void ExecutePageHierarchy();
    protected virtual void InitializePage();
    public bool IsSectionDefined(string name);
    public void PopContext();
    public void PushContext(WebPageContext pageContext, TextWriter writer);
    public HelperResult RenderBody();
    public virtual HelperResult RenderPage(string path, Object[] data);
    private HelperResult RenderPageCore(string path, bool isLayoutPage, Object[] data);
    public HelperResult RenderSection(string name);
    public HelperResult RenderSection(string name, bool required);
    private void RenderSurrounding(string partialViewName, Action`1<TextWriter> body);
    private void VerifyRenderedBodyOrSections();
    public virtual void Write(HelperResult result);
    public virtual void Write(object value);
    public virtual void WriteLiteral(object value);
    [CompilerGeneratedAttribute]
private void <RenderBody>b__4(TextWriter tw);
}
public class System.Web.WebPages.WebPageContext : object {
    private Stack`1<TextWriter> _outputStack;
    private Stack`1<Dictionary`2<string, SectionWriter>> _sectionWritersStack;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<object, object> _pageData;
    private static object SourceFileKey;
    [CompilerGeneratedAttribute]
private HttpContextBase <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TextWriter> <BodyAction>k__BackingField;
    [CompilerGeneratedAttribute]
private WebPageRenderingBase <Page>k__BackingField;
    public static WebPageContext Current { get; }
    internal HttpContextBase HttpContext { get; internal set; }
    public object Model { get; internal set; }
    internal Action`1<TextWriter> BodyAction { get; internal set; }
    internal Stack`1<TextWriter> OutputStack { get; internal set; }
    public WebPageRenderingBase Page { get; internal set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; internal set; }
    internal Stack`1<Dictionary`2<string, SectionWriter>> SectionWritersStack { get; internal set; }
    internal HashSet`1<string> SourceFiles { get; }
    public WebPageContext(HttpContextBase context, WebPageRenderingBase page, object model);
    private static WebPageContext();
    public static WebPageContext get_Current();
    [CompilerGeneratedAttribute]
internal HttpContextBase get_HttpContext();
    [CompilerGeneratedAttribute]
internal void set_HttpContext(HttpContextBase value);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(object value);
    [CompilerGeneratedAttribute]
internal Action`1<TextWriter> get_BodyAction();
    [CompilerGeneratedAttribute]
internal void set_BodyAction(Action`1<TextWriter> value);
    internal Stack`1<TextWriter> get_OutputStack();
    internal void set_OutputStack(Stack`1<TextWriter> value);
    [CompilerGeneratedAttribute]
public WebPageRenderingBase get_Page();
    [CompilerGeneratedAttribute]
internal void set_Page(WebPageRenderingBase value);
    public IDictionary`2<object, object> get_PageData();
    internal void set_PageData(IDictionary`2<object, object> value);
    internal Stack`1<Dictionary`2<string, SectionWriter>> get_SectionWritersStack();
    internal void set_SectionWritersStack(Stack`1<Dictionary`2<string, SectionWriter>> value);
    internal HashSet`1<string> get_SourceFiles();
}
public abstract class System.Web.WebPages.WebPageExecutingBase : object {
    private DynamicHttpApplicationState _dynamicAppState;
    [CompilerGeneratedAttribute]
private HttpContextBase <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    public HttpApplicationStateBase AppState { get; }
    [DynamicAttribute]
public object App { get; }
    public HttpContextBase Context { get; public set; }
    public string VirtualPath { get; public set; }
    public virtual HttpApplicationStateBase get_AppState();
    public virtual object get_App();
    [CompilerGeneratedAttribute]
public virtual HttpContextBase get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(HttpContextBase value);
    [CompilerGeneratedAttribute]
public virtual string get_VirtualPath();
    [CompilerGeneratedAttribute]
public virtual void set_VirtualPath(string value);
    [EditorBrowsableAttribute("1")]
public abstract virtual void Execute();
    internal virtual bool FileExists(string path);
    internal virtual bool FileExists(string path, bool useCache);
    internal virtual string GetDirectory(string virtualPath);
    internal virtual Func`1<object> GetObjectFactory(string virtualPath);
    internal virtual string NormalizeLayoutPagePath(string layoutPage);
    internal string NormalizeLayoutPagePath(string layoutPage, Func`2<string, bool> fileExists);
    public virtual string NormalizePath(string path);
    public abstract virtual void Write(HelperResult result);
    public abstract virtual void Write(object value);
    public abstract virtual void WriteLiteral(object value);
    public static void WriteTo(TextWriter writer, HelperResult content);
    public static void WriteTo(TextWriter writer, object content);
    public static void WriteLiteralTo(TextWriter writer, object content);
}
public class System.Web.WebPages.WebPageHttpHandler : object {
    internal static string StartPageFileName;
    private WebPage _webPage;
    private static List`1<string> _supportedExtensions;
    internal static string WebPagesVersion;
    public static string WebPagesVersionHeaderName;
    [CompilerGeneratedAttribute]
private static bool <DisableWebPagesResponseHeader>k__BackingField;
    public static bool DisableWebPagesResponseHeader { get; public set; }
    public bool IsReusable { get; }
    public WebPageHttpHandler(WebPage webPage);
    private static WebPageHttpHandler();
    [CompilerGeneratedAttribute]
public static bool get_DisableWebPagesResponseHeader();
    [CompilerGeneratedAttribute]
public static void set_DisableWebPagesResponseHeader(bool value);
    public virtual bool get_IsReusable();
    internal static void AddVersionHeader(HttpContextBase httpContext);
    public static IHttpHandler CreateFromVirtualPath(string virtualPath);
    internal static IHttpHandler CreateFromVirtualPath(string virtualPath, Func`3<string, Type, object> createInstanceMethod);
    internal static IHttpHandler CreateFromVirtualPath(string virtualPath, VirtualPathFactoryManager virtualPathFactoryManager);
    public static ReadOnlyCollection`1<string> GetRegisteredExtensions();
    private static string GetVersionString();
    private static bool HandleError(Exception e);
    internal static void GenerateSourceFilesHeader(WebPageContext context);
    public virtual void ProcessRequest(HttpContext context);
    internal void ProcessRequestInternal(HttpContext context);
    public static void RegisterExtension(string extension);
    internal static bool ShouldGenerateSourceHeader(HttpContextBase context);
}
internal class System.Web.WebPages.WebPageHttpModule : object {
    internal static EventHandler Initialize;
    internal static EventHandler ApplicationStart;
    internal static EventHandler BeginRequest;
    internal static EventHandler EndRequest;
    private static bool s_appStartExecuted;
    private static object s_appStartExecutedLock;
    private static object s_hasBeenRegisteredKey;
    [CompilerGeneratedAttribute]
private static bool <AppStartExecuteCompleted>k__BackingField;
    internal static bool AppStartExecuteCompleted { get; internal set; }
    private static WebPageHttpModule();
    [CompilerGeneratedAttribute]
internal static bool get_AppStartExecuteCompleted();
    [CompilerGeneratedAttribute]
internal static void set_AppStartExecuteCompleted(bool value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication application);
    internal static void InitApplication(HttpApplication application);
    internal static void InitializeApplication(HttpApplication application);
    internal static void InitializeApplication(HttpApplication application, EventHandler onApplicationPostResolveRequestCache, EventHandler initialize);
    internal static void StartApplication(HttpApplication application);
    internal static void StartApplication(HttpApplication application, Action`1<HttpApplication> executeStartPage, EventHandler applicationStart);
    internal static void OnApplicationPostResolveRequestCache(object sender, EventArgs e);
    internal static void OnBeginRequest(object sender, EventArgs e);
    internal static void OnEndRequest(object sender, EventArgs e);
}
internal class System.Web.WebPages.WebPageMatch : object {
    [CompilerGeneratedAttribute]
private string <MatchedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    public string MatchedPath { get; private set; }
    public string PathInfo { get; private set; }
    public WebPageMatch(string matchedPath, string pathInfo);
    [CompilerGeneratedAttribute]
public string get_MatchedPath();
    [CompilerGeneratedAttribute]
private void set_MatchedPath(string value);
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
private void set_PathInfo(string value);
}
public abstract class System.Web.WebPages.WebPageRenderingBase : WebPageExecutingBase {
    private IPrincipal _user;
    private UrlDataList _urlData;
    private TemplateFileInfo _templateFileInfo;
    [CompilerGeneratedAttribute]
private WebPageContext <PageContext>k__BackingField;
    public Cache Cache { get; }
    public string Layout { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; }
    [DynamicAttribute]
public object Page { get; }
    public WebPageContext PageContext { get; internal set; }
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    public HttpServerUtilityBase Server { get; }
    public HttpSessionStateBase Session { get; }
    public IList`1<string> UrlData { get; }
    public IPrincipal User { get; internal set; }
    public TemplateFileInfo TemplateInfo { get; }
    public bool IsPost { get; }
    public bool IsAjax { get; }
    public string Culture { get; public set; }
    public string UICulture { get; public set; }
    public virtual Cache get_Cache();
    public abstract virtual string get_Layout();
    public abstract virtual void set_Layout(string value);
    public abstract virtual IDictionary`2<object, object> get_PageData();
    public abstract virtual object get_Page();
    [CompilerGeneratedAttribute]
public WebPageContext get_PageContext();
    [CompilerGeneratedAttribute]
internal void set_PageContext(WebPageContext value);
    public virtual HttpRequestBase get_Request();
    public virtual HttpResponseBase get_Response();
    public virtual HttpServerUtilityBase get_Server();
    public virtual HttpSessionStateBase get_Session();
    public virtual IList`1<string> get_UrlData();
    public virtual IPrincipal get_User();
    internal virtual void set_User(IPrincipal value);
    public virtual TemplateFileInfo get_TemplateInfo();
    public virtual bool get_IsPost();
    public virtual bool get_IsAjax();
    public virtual string Href(string path, Object[] pathParts);
    public string get_Culture();
    public void set_Culture(string value);
    public string get_UICulture();
    public void set_UICulture(string value);
    public abstract virtual void ExecutePageHierarchy();
    public abstract virtual HelperResult RenderPage(string path, Object[] data);
}
internal class System.Web.WebPages.WebPageRoute : object {
    private VirtualPathFactoryManager _virtualPathFactoryManager;
    internal VirtualPathFactoryManager VirtualPathFactoryManager { get; internal set; }
    internal VirtualPathFactoryManager get_VirtualPathFactoryManager();
    internal void set_VirtualPathFactoryManager(VirtualPathFactoryManager value);
    internal void DoPostResolveRequestCache(HttpContextBase context);
    private static bool FileExists(string virtualPath, VirtualPathFactoryManager virtualPathFactoryManager);
    internal static WebPageMatch GetWebPageMatch(HttpContextBase context);
    private static string GetRouteLevelMatch(string pathValue, IEnumerable`1<string> supportedExtensions, VirtualPathFactoryManager virtualPathFactoryManager);
    internal static WebPageMatch MatchRequest(string pathValue, IEnumerable`1<string> supportedExtensions, VirtualPathFactoryManager virtualPathFactoryManager);
}
