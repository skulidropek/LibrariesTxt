[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.Internal.Web.Utils.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string Argument_Must_Be_Between { get; }
    internal static string Argument_Must_Be_Enum_Member { get; }
    internal static string Argument_Must_Be_GreaterThan { get; }
    internal static string Argument_Must_Be_GreaterThanOrEqualTo { get; }
    internal static string Argument_Must_Be_LessThan { get; }
    internal static string Argument_Must_Be_LessThanOrEqualTo { get; }
    internal static string Argument_Must_Be_Null_Or_Non_Empty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_Argument_Must_Be_Between();
    internal static string get_Argument_Must_Be_Enum_Member();
    internal static string get_Argument_Must_Be_GreaterThan();
    internal static string get_Argument_Must_Be_GreaterThanOrEqualTo();
    internal static string get_Argument_Must_Be_LessThan();
    internal static string get_Argument_Must_Be_LessThanOrEqualTo();
    internal static string get_Argument_Must_Be_Null_Or_Non_Empty();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
internal static class Microsoft.Internal.Web.Utils.ExceptionHelper : object {
    internal static ArgumentException CreateArgumentNullOrEmptyException(string paramName);
}
internal class Microsoft.Internal.Web.Utils.HashCodeCombiner : object {
    private long _combinedHash64;
    public int CombinedHash { get; }
    public int get_CombinedHash();
    public HashCodeCombiner Add(IEnumerable e);
    public HashCodeCombiner Add(int i);
    public HashCodeCombiner Add(object o);
    public static HashCodeCombiner Start();
}
internal interface Microsoft.Internal.Web.Utils.IVirtualPathUtility {
    public abstract virtual string Combine(string basePath, string relativePath);
    public abstract virtual string ToAbsolute(string virtualPath);
}
internal static class Microsoft.Internal.Web.Utils.MimeMapping : object {
    private static IDictionary`2<string, string> _mimeMappings;
    private static MimeMapping();
    internal static string GetMimeMapping(string fileName);
    internal static void AddMimeMapping(string extension, string mimeType);
}
internal class Microsoft.Internal.Web.Utils.VirtualPathUtilityWrapper : object {
    public sealed virtual string Combine(string basePath, string relativePath);
    public sealed virtual string ToAbsolute(string virtualPath);
}
public static class System.Web.Helpers.AntiForgery : object {
    private static AntiForgeryWorker _worker;
    private static AntiForgery();
    private static AntiForgeryWorker CreateSingletonAntiForgeryWorker();
    public static HtmlString GetHtml();
    [EditorBrowsableAttribute("2")]
public static void GetTokens(string oldCookieToken, String& newCookieToken, String& formToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is deprecated. Use the GetHtml() method instead. To specify a custom domain for the generated cookie, use the <httpCookies> configuration element. To specify custom data to be embedded within the token, use the static AntiForgeryConfig.AdditionalDataProvider property.", "True")]
public static HtmlString GetHtml(HttpContextBase httpContext, string salt, string domain, string path);
    public static void Validate();
    [EditorBrowsableAttribute("2")]
public static void Validate(string cookieToken, string formToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is deprecated. Use the Validate() method instead.", "True")]
public static void Validate(HttpContextBase httpContext, string salt);
}
public static class System.Web.Helpers.AntiForgeryConfig : object {
    internal static string AntiForgeryTokenFieldName;
    private static string _cookieName;
    private static string _uniqueClaimTypeIdentifier;
    [CompilerGeneratedAttribute]
private static IAntiForgeryAdditionalDataProvider <AdditionalDataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <RequireSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <SuppressIdentityHeuristicChecks>k__BackingField;
    public static IAntiForgeryAdditionalDataProvider AdditionalDataProvider { get; public set; }
    public static string CookieName { get; public set; }
    public static bool RequireSsl { get; public set; }
    [EditorBrowsableAttribute("1")]
public static bool SuppressIdentityHeuristicChecks { get; public set; }
    public static string UniqueClaimTypeIdentifier { get; public set; }
    [CompilerGeneratedAttribute]
public static IAntiForgeryAdditionalDataProvider get_AdditionalDataProvider();
    [CompilerGeneratedAttribute]
public static void set_AdditionalDataProvider(IAntiForgeryAdditionalDataProvider value);
    public static string get_CookieName();
    public static void set_CookieName(string value);
    [CompilerGeneratedAttribute]
public static bool get_RequireSsl();
    [CompilerGeneratedAttribute]
public static void set_RequireSsl(bool value);
    [CompilerGeneratedAttribute]
public static bool get_SuppressIdentityHeuristicChecks();
    [CompilerGeneratedAttribute]
public static void set_SuppressIdentityHeuristicChecks(bool value);
    public static string get_UniqueClaimTypeIdentifier();
    public static void set_UniqueClaimTypeIdentifier(string value);
    private static string GetAntiForgeryCookieName();
    internal static string GetAntiForgeryCookieName(string appPath);
}
internal class System.Web.Helpers.AntiXsrf.AntiForgeryConfigWrapper : object {
    public IAntiForgeryAdditionalDataProvider AdditionalDataProvider { get; }
    public string CookieName { get; }
    public string FormFieldName { get; }
    public bool RequireSSL { get; }
    public bool SuppressIdentityHeuristicChecks { get; }
    public string UniqueClaimTypeIdentifier { get; }
    public sealed virtual IAntiForgeryAdditionalDataProvider get_AdditionalDataProvider();
    public sealed virtual string get_CookieName();
    public sealed virtual string get_FormFieldName();
    public sealed virtual bool get_RequireSSL();
    public sealed virtual bool get_SuppressIdentityHeuristicChecks();
    public sealed virtual string get_UniqueClaimTypeIdentifier();
}
internal class System.Web.Helpers.AntiXsrf.AntiForgeryToken : object {
    internal static int SecurityTokenBitLength;
    internal static int ClaimUidBitLength;
    private string _additionalData;
    private BinaryBlob _securityToken;
    private string _username;
    [CompilerGeneratedAttribute]
private BinaryBlob <ClaimUid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSessionToken>k__BackingField;
    public string AdditionalData { get; public set; }
    public BinaryBlob ClaimUid { get; public set; }
    public bool IsSessionToken { get; public set; }
    public BinaryBlob SecurityToken { get; public set; }
    public string Username { get; public set; }
    public string get_AdditionalData();
    public void set_AdditionalData(string value);
    [CompilerGeneratedAttribute]
public BinaryBlob get_ClaimUid();
    [CompilerGeneratedAttribute]
public void set_ClaimUid(BinaryBlob value);
    [CompilerGeneratedAttribute]
public bool get_IsSessionToken();
    [CompilerGeneratedAttribute]
public void set_IsSessionToken(bool value);
    public BinaryBlob get_SecurityToken();
    public void set_SecurityToken(BinaryBlob value);
    public string get_Username();
    public void set_Username(string value);
}
internal class System.Web.Helpers.AntiXsrf.AntiForgeryTokenSerializer : object {
    private static byte TokenVersion;
    private ICryptoSystem _cryptoSystem;
    internal AntiForgeryTokenSerializer(ICryptoSystem cryptoSystem);
    public sealed virtual AntiForgeryToken Deserialize(string serializedToken);
    private static AntiForgeryToken DeserializeImpl(BinaryReader reader);
    public sealed virtual string Serialize(AntiForgeryToken token);
}
internal class System.Web.Helpers.AntiXsrf.AntiForgeryTokenStore : object {
    private IAntiForgeryConfig _config;
    private IAntiForgeryTokenSerializer _serializer;
    internal AntiForgeryTokenStore(IAntiForgeryConfig config, IAntiForgeryTokenSerializer serializer);
    public sealed virtual AntiForgeryToken GetCookieToken(HttpContextBase httpContext);
    public sealed virtual AntiForgeryToken GetFormToken(HttpContextBase httpContext);
    public sealed virtual void SaveCookieToken(HttpContextBase httpContext, AntiForgeryToken token);
}
internal class System.Web.Helpers.AntiXsrf.AntiForgeryWorker : object {
    private IAntiForgeryConfig _config;
    private IAntiForgeryTokenSerializer _serializer;
    private ITokenStore _tokenStore;
    private ITokenValidator _validator;
    internal AntiForgeryWorker(IAntiForgeryTokenSerializer serializer, IAntiForgeryConfig config, ITokenStore tokenStore, ITokenValidator validator);
    private void CheckSSLConfig(HttpContextBase httpContext);
    private AntiForgeryToken DeserializeToken(string serializedToken);
    private AntiForgeryToken DeserializeTokenNoThrow(string serializedToken);
    private static IIdentity ExtractIdentity(HttpContextBase httpContext);
    private AntiForgeryToken GetCookieTokenNoThrow(HttpContextBase httpContext);
    public TagBuilder GetFormInputElement(HttpContextBase httpContext);
    public void GetTokens(HttpContextBase httpContext, string serializedOldCookieToken, String& serializedNewCookieToken, String& serializedFormToken);
    private void GetTokens(HttpContextBase httpContext, AntiForgeryToken oldCookieToken, AntiForgeryToken& newCookieToken, AntiForgeryToken& formToken);
    private string Serialize(AntiForgeryToken token);
    public void Validate(HttpContextBase httpContext);
    public void Validate(HttpContextBase httpContext, string cookieToken, string formToken);
}
[DebuggerDisplayAttribute("{DebuggerString}")]
internal class System.Web.Helpers.AntiXsrf.BinaryBlob : object {
    private static RNGCryptoServiceProvider _prng;
    private Byte[] _data;
    public int BitLength { get; }
    private string DebuggerString { get; }
    public BinaryBlob(int bitLength);
    public BinaryBlob(int bitLength, Byte[] data);
    private static BinaryBlob();
    public int get_BitLength();
    private string get_DebuggerString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BinaryBlob other);
    public Byte[] GetData();
    public virtual int GetHashCode();
    private static Byte[] GenerateNewToken(int bitLength);
}
internal class System.Web.Helpers.AntiXsrf.ClaimUidExtractor : object {
    internal static string NameIdentifierClaimType;
    internal static string IdentityProviderClaimType;
    private ClaimsIdentityConverter _claimsIdentityConverter;
    private IAntiForgeryConfig _config;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    internal ClaimUidExtractor(IAntiForgeryConfig config, ClaimsIdentityConverter claimsIdentityConverter);
    public sealed virtual BinaryBlob ExtractClaimUid(IIdentity identity);
    internal static String[] GetUniqueIdentifierParameters(ClaimsIdentity claimsIdentity, string uniqueClaimTypeIdentifier);
    [CompilerGeneratedAttribute]
private static bool <GetUniqueIdentifierParameters>b__1(Claim claim);
    [CompilerGeneratedAttribute]
private static bool <GetUniqueIdentifierParameters>b__2(Claim claim);
}
internal interface System.Web.Helpers.AntiXsrf.IAntiForgeryConfig {
    public IAntiForgeryAdditionalDataProvider AdditionalDataProvider { get; }
    public string CookieName { get; }
    public string FormFieldName { get; }
    public bool RequireSSL { get; }
    public bool SuppressIdentityHeuristicChecks { get; }
    public string UniqueClaimTypeIdentifier { get; }
    public abstract virtual IAntiForgeryAdditionalDataProvider get_AdditionalDataProvider();
    public abstract virtual string get_CookieName();
    public abstract virtual string get_FormFieldName();
    public abstract virtual bool get_RequireSSL();
    public abstract virtual bool get_SuppressIdentityHeuristicChecks();
    public abstract virtual string get_UniqueClaimTypeIdentifier();
}
internal interface System.Web.Helpers.AntiXsrf.IAntiForgeryTokenSerializer {
    public abstract virtual AntiForgeryToken Deserialize(string serializedToken);
    public abstract virtual string Serialize(AntiForgeryToken token);
}
internal interface System.Web.Helpers.AntiXsrf.IClaimUidExtractor {
    public abstract virtual BinaryBlob ExtractClaimUid(IIdentity identity);
}
internal interface System.Web.Helpers.AntiXsrf.ICryptoSystem {
    public abstract virtual string Protect(Byte[] data);
    public abstract virtual Byte[] Unprotect(string protectedData);
}
internal interface System.Web.Helpers.AntiXsrf.ITokenStore {
    public abstract virtual AntiForgeryToken GetCookieToken(HttpContextBase httpContext);
    public abstract virtual AntiForgeryToken GetFormToken(HttpContextBase httpContext);
    public abstract virtual void SaveCookieToken(HttpContextBase httpContext, AntiForgeryToken token);
}
internal interface System.Web.Helpers.AntiXsrf.ITokenValidator {
    public abstract virtual AntiForgeryToken GenerateCookieToken();
    public abstract virtual AntiForgeryToken GenerateFormToken(HttpContextBase httpContext, IIdentity identity, AntiForgeryToken cookieToken);
    public abstract virtual bool IsCookieTokenValid(AntiForgeryToken cookieToken);
    public abstract virtual void ValidateTokens(HttpContextBase httpContext, IIdentity identity, AntiForgeryToken cookieToken, AntiForgeryToken formToken);
}
internal class System.Web.Helpers.AntiXsrf.MachineKey40CryptoSystem : object {
    private static UInt32 MagicHeader;
    private Func`3<string, MachineKeyProtection, Byte[]> _decoder;
    private Func`3<Byte[], MachineKeyProtection, string> _encoder;
    internal MachineKey40CryptoSystem(Func`3<Byte[], MachineKeyProtection, string> encoder, Func`3<string, MachineKeyProtection, Byte[]> decoder);
    public sealed virtual string Protect(Byte[] data);
    public sealed virtual Byte[] Unprotect(string protectedData);
    internal static string Base64ToHex(string base64);
    private static char HexDigit(int value);
    private static int HexValue(char digit);
    internal static string HexToBase64(string hex);
}
internal class System.Web.Helpers.AntiXsrf.MachineKey45CryptoSystem : object {
    private static String[] _purposes;
    private static MachineKey45CryptoSystem _singletonInstance;
    private Func`3<Byte[], String[], Byte[]> _protectThunk;
    private Func`3<Byte[], String[], Byte[]> _unprotectThunk;
    public static MachineKey45CryptoSystem Instance { get; }
    internal MachineKey45CryptoSystem(Func`3<Byte[], String[], Byte[]> protectThunk, Func`3<Byte[], String[], Byte[]> unprotectThunk);
    private static MachineKey45CryptoSystem();
    public static MachineKey45CryptoSystem get_Instance();
    private static MachineKey45CryptoSystem GetSingletonInstance();
    public sealed virtual string Protect(Byte[] data);
    public sealed virtual Byte[] Unprotect(string protectedData);
}
internal class System.Web.Helpers.AntiXsrf.TokenValidator : object {
    private IClaimUidExtractor _claimUidExtractor;
    private IAntiForgeryConfig _config;
    internal TokenValidator(IAntiForgeryConfig config, IClaimUidExtractor claimUidExtractor);
    public sealed virtual AntiForgeryToken GenerateCookieToken();
    public sealed virtual AntiForgeryToken GenerateFormToken(HttpContextBase httpContext, IIdentity identity, AntiForgeryToken cookieToken);
    public sealed virtual bool IsCookieTokenValid(AntiForgeryToken cookieToken);
    public sealed virtual void ValidateTokens(HttpContextBase httpContext, IIdentity identity, AntiForgeryToken sessionToken, AntiForgeryToken fieldToken);
}
internal class System.Web.Helpers.Claims.Claim : object {
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string ClaimType { get; private set; }
    public string Value { get; private set; }
    public Claim(string claimType, string value);
    [CompilerGeneratedAttribute]
public string get_ClaimType();
    [CompilerGeneratedAttribute]
private void set_ClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    internal static Claim Create(TClaim claim);
}
internal abstract class System.Web.Helpers.Claims.ClaimsIdentity : object {
    public abstract virtual IEnumerable`1<Claim> GetClaims();
    internal static ClaimsIdentity TryConvert(IIdentity identity);
}
internal class System.Web.Helpers.Claims.ClaimsIdentityConverter : object {
    private static MethodInfo _claimsIdentityTryConvertOpenMethod;
    private static ClaimsIdentityConverter _default;
    private Func`2[] _converters;
    public static ClaimsIdentityConverter Default { get; }
    internal ClaimsIdentityConverter(Func`2[] converters);
    private static ClaimsIdentityConverter();
    public static ClaimsIdentityConverter get_Default();
    private static bool IsGrandfatheredIdentityType(IIdentity claimsIdentity);
    public ClaimsIdentity TryConvert(IIdentity identity);
    private static void AddToList(IList`1<Func`2<IIdentity, ClaimsIdentity>> converters, Type claimsIdentityType, Type claimType);
    private static Func`2[] GetDefaultConverters();
}
internal static class System.Web.Helpers.CryptoUtil : object {
    private static Func`1<SHA256> _sha256Factory;
    [CompilerGeneratedAttribute]
private static Func`1<SHA256> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`1<SHA256> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`1<SHA256> CS$<>9__CachedAnonymousMethodDelegate5;
    private static CryptoUtil();
    public static bool AreByteArraysEqual(Byte[] a, Byte[] b);
    public static Byte[] ComputeSHA256(IList`1<string> parameters);
    private static Func`1<SHA256> GetSHA256Factory();
    [CompilerGeneratedAttribute]
private static SHA256 <GetSHA256Factory>b__0();
    [CompilerGeneratedAttribute]
private static SHA256 <GetSHA256Factory>b__1();
    [CompilerGeneratedAttribute]
private static SHA256 <GetSHA256Factory>b__2();
}
public interface System.Web.Helpers.IAntiForgeryAdditionalDataProvider {
    public abstract virtual string GetAdditionalData(HttpContextBase context);
    public abstract virtual bool ValidateAdditionalData(HttpContextBase context, string additionalData);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Helpers.UnvalidatedRequestValues : object {
    private HttpRequestBase _request;
    private Func`1<NameValueCollection> _formGetter;
    private Func`1<NameValueCollection> _queryStringGetter;
    public NameValueCollection Form { get; }
    public NameValueCollection QueryString { get; }
    public string Item { get; }
    internal UnvalidatedRequestValues(HttpRequestBase request, Func`1<NameValueCollection> formGetter, Func`1<NameValueCollection> queryStringGetter);
    public NameValueCollection get_Form();
    public NameValueCollection get_QueryString();
    public string get_Item(string key);
}
[ExtensionAttribute]
public static class System.Web.Helpers.Validation : object {
    [ExtensionAttribute]
public static UnvalidatedRequestValues Unvalidated(HttpRequestBase request);
    [ExtensionAttribute]
public static UnvalidatedRequestValues Unvalidated(HttpRequest request);
    [ExtensionAttribute]
public static string Unvalidated(HttpRequestBase request, string key);
    [ExtensionAttribute]
public static string Unvalidated(HttpRequest request, string key);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.HttpAntiForgeryException : HttpException {
    private HttpAntiForgeryException(SerializationInfo info, StreamingContext context);
    public HttpAntiForgeryException(string message);
    private HttpAntiForgeryException(string message, Object[] args);
    public HttpAntiForgeryException(string message, Exception innerException);
    internal static HttpAntiForgeryException CreateAdditionalDataCheckFailedException();
    internal static HttpAntiForgeryException CreateClaimUidMismatchException();
    internal static HttpAntiForgeryException CreateCookieMissingException(string cookieName);
    internal static HttpAntiForgeryException CreateDeserializationFailedException();
    internal static HttpAntiForgeryException CreateFormFieldMissingException(string formFieldName);
    internal static HttpAntiForgeryException CreateSecurityTokenMismatchException();
    internal static HttpAntiForgeryException CreateTokensSwappedException(string cookieName, string formFieldName);
    internal static HttpAntiForgeryException CreateUsernameMismatchException(string usernameInToken, string currentUsername);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.ModelClientValidationEqualToRule : ModelClientValidationRule {
    public ModelClientValidationEqualToRule(string errorMessage, object other);
}
internal class System.Web.Mvc.ModelClientValidationMembershipPasswordRule : ModelClientValidationRule {
    public ModelClientValidationMembershipPasswordRule(string errorMessage, int minRequiredPasswordLength, int minRequiredNonAlphanumericCharacters, string passwordStrengthRegularExpression);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.ModelClientValidationRangeRule : ModelClientValidationRule {
    public ModelClientValidationRangeRule(string errorMessage, object minValue, object maxValue);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.ModelClientValidationRegexRule : ModelClientValidationRule {
    public ModelClientValidationRegexRule(string errorMessage, string pattern);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.ModelClientValidationRemoteRule : ModelClientValidationRule {
    public ModelClientValidationRemoteRule(string errorMessage, string url, string httpMethod, string additionalFields);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.ModelClientValidationRequiredRule : ModelClientValidationRule {
    public ModelClientValidationRequiredRule(string errorMessage);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.ModelClientValidationRule : object {
    private Dictionary`2<string, object> _validationParameters;
    private string _validationType;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string ErrorMessage { get; public set; }
    public IDictionary`2<string, object> ValidationParameters { get; }
    public string ValidationType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    public IDictionary`2<string, object> get_ValidationParameters();
    public string get_ValidationType();
    public void set_ValidationType(string value);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.ModelClientValidationStringLengthRule : ModelClientValidationRule {
    public ModelClientValidationStringLengthRule(string errorMessage, int minimumLength, int maximumLength);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Mvc.TagBuilder : object {
    private string _idAttributeDotReplacement;
    private string _innerHtml;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    public IDictionary`2<string, string> Attributes { get; private set; }
    public string IdAttributeDotReplacement { get; public set; }
    public string InnerHtml { get; public set; }
    public string TagName { get; private set; }
    public TagBuilder(string tagName);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, string> value);
    public string get_IdAttributeDotReplacement();
    public void set_IdAttributeDotReplacement(string value);
    public string get_InnerHtml();
    public void set_InnerHtml(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    public void AddCssClass(string value);
    public static string CreateSanitizedId(string originalId);
    public static string CreateSanitizedId(string originalId, string invalidCharReplacement);
    public void GenerateId(string name);
    private void AppendAttributes(StringBuilder sb);
    public void MergeAttribute(string key, string value);
    public void MergeAttribute(string key, string value, bool replaceExisting);
    public void MergeAttributes(IDictionary`2<TKey, TValue> attributes);
    public void MergeAttributes(IDictionary`2<TKey, TValue> attributes, bool replaceExisting);
    public void SetInnerText(string innerText);
    internal HtmlString ToHtmlString(TagRenderMode renderMode);
    public virtual string ToString();
    public string ToString(TagRenderMode renderMode);
}
[TypeForwardedFromAttribute("System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public enum System.Web.Mvc.TagRenderMode : Enum {
    public int value__;
    public static TagRenderMode Normal;
    public static TagRenderMode StartTag;
    public static TagRenderMode EndTag;
    public static TagRenderMode SelfClosing;
}
public static class System.Web.Mvc.UnobtrusiveValidationAttributesGenerator : object {
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public static void GetValidationAttributes(IEnumerable`1<ModelClientValidationRule> clientRules, IDictionary`2<string, object> results);
    private static void ValidateUnobtrusiveValidationRule(ModelClientValidationRule rule, IDictionary`2<string, object> resultsDictionary, string dictionaryKey);
    [CompilerGeneratedAttribute]
private static bool <ValidateUnobtrusiveValidationRule>b__0(char c);
    [CompilerGeneratedAttribute]
private static bool <ValidateUnobtrusiveValidationRule>b__1(char c);
}
public class System.Web.WebPages.ApplicationPart : object {
    private static string ModuleRootSyntax;
    private static string ResourceVirtualPathRoot;
    private static string ResourceRoute;
    private static LazyAction _initApplicationPart;
    private static ApplicationPartRegistry _partRegistry;
    private Lazy`1<IDictionary`2<string, string>> _applicationPartResources;
    private Lazy`1<string> _applicationPartName;
    [CompilerGeneratedAttribute]
private IResourceAssembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    internal IResourceAssembly Assembly { get; private set; }
    internal string RootVirtualPath { get; private set; }
    internal string Name { get; }
    internal IDictionary`2<string, string> ApplicationPartResources { get; }
    public ApplicationPart(Assembly assembly, string rootVirtualPath);
    internal ApplicationPart(IResourceAssembly assembly, string rootVirtualPath);
    private static ApplicationPart();
    [CompilerGeneratedAttribute]
internal IResourceAssembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(IResourceAssembly value);
    [CompilerGeneratedAttribute]
internal string get_RootVirtualPath();
    [CompilerGeneratedAttribute]
private void set_RootVirtualPath(string value);
    internal string get_Name();
    internal IDictionary`2<string, string> get_ApplicationPartResources();
    public static void Register(ApplicationPart applicationPart);
    public static string ProcessVirtualPath(Assembly assembly, string baseVirtualPath, string virtualPath);
    internal static IEnumerable`1<ApplicationPart> GetRegisteredParts();
    private string ProcessVirtualPath(string baseVirtualPath, string virtualPath);
    internal static string ResolveVirtualPath(string applicationRoot, string baseVirtualPath, string virtualPath);
    internal Stream GetResourceStream(string virtualPath);
    private string GetResourceNameFromVirtualPath(string virtualPath);
    internal static string GetResourceNameFromVirtualPath(string moduleName, string virtualPath);
    private string GetResourceVirtualPath(string virtualPath);
    internal static string GetResourceVirtualPath(string moduleName, string moduleRoot, string virtualPath);
    private static void InitApplicationParts();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__3();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(string key);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(string key);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.ApplicationParts.ApplicationPartRegistry : object {
    private static Type _webPageType;
    private DictionaryBasedVirtualPathFactory _virtualPathFactory;
    private ConcurrentDictionary`2<string, bool> _registeredVirtualPaths;
    private ConcurrentDictionary`2<IResourceAssembly, ApplicationPart> _applicationParts;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public IEnumerable`1<ApplicationPart> RegisteredParts { get; }
    public ApplicationPart Item { get; }
    public ApplicationPart Item { get; }
    public ApplicationPartRegistry(DictionaryBasedVirtualPathFactory pathFactory);
    private static ApplicationPartRegistry();
    public IEnumerable`1<ApplicationPart> get_RegisteredParts();
    public ApplicationPart get_Item(string name);
    public ApplicationPart get_Item(IResourceAssembly assembly);
    public void Register(ApplicationPart applicationPart);
    internal void Register(ApplicationPart applicationPart, Func`1<object> registerPageAction);
    private void RegisterWebPage(ApplicationPart module, Type webPageType, Func`1<object> registerPageAction);
    private static Func`1<object> NewTypeInstance(Type type);
    internal static string GetRootRelativeVirtualPath(string rootVirtualPath, string pageVirtualPath);
    [CompilerGeneratedAttribute]
private static bool <Register>b__3(Type type);
}
internal class System.Web.WebPages.ApplicationParts.DictionaryBasedVirtualPathFactory : object {
    private Dictionary`2<string, Func`1<object>> _factories;
    internal void RegisterPath(string virtualPath, Func`1<object> factory);
    public sealed virtual bool Exists(string virtualPath);
    public sealed virtual object CreateInstance(string virtualPath);
}
internal interface System.Web.WebPages.ApplicationParts.IResourceAssembly {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Stream GetManifestResourceStream(string name);
    public abstract virtual IEnumerable`1<string> GetManifestResourceNames();
    public abstract virtual IEnumerable`1<Type> GetTypes();
}
internal class System.Web.WebPages.ApplicationParts.LazyAction : object {
    private Lazy`1<object> _lazyAction;
    public LazyAction(Action action);
    public object EnsurePerformed();
}
internal class System.Web.WebPages.ApplicationParts.ResourceAssembly : object {
    private Assembly _assembly;
    public string Name { get; }
    public ResourceAssembly(Assembly assembly);
    public sealed virtual string get_Name();
    public sealed virtual Stream GetManifestResourceStream(string name);
    public sealed virtual IEnumerable`1<string> GetManifestResourceNames();
    public sealed virtual IEnumerable`1<Type> GetTypes();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Web.WebPages.ApplicationParts.ResourceHandler : object {
    private string _path;
    private ApplicationPart _applicationPart;
    public bool IsReusable { get; }
    public ResourceHandler(ApplicationPart applicationPart, string path);
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
    internal void ProcessRequest(HttpResponseBase response);
}
internal class System.Web.WebPages.ApplicationParts.ResourceRouteHandler : object {
    private ApplicationPartRegistry _partRegistry;
    public ResourceRouteHandler(ApplicationPartRegistry partRegistry);
    public sealed virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
}
public abstract class System.Web.WebPages.ApplicationStartPage : WebPageExecutingBase {
    private static Action`1<Action> _safeExecuteStartPageThunk;
    public static string StartPageVirtualPath;
    public static string CacheKeyPrefix;
    [CompilerGeneratedAttribute]
private HttpApplication <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private static HtmlString <Markup>k__BackingField;
    [CompilerGeneratedAttribute]
private static Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate4;
    public HttpApplication Application { get; internal set; }
    public HttpContextBase Context { get; }
    public static HtmlString Markup { get; private set; }
    internal static Exception Exception { get; private set; }
    public TextWriter Output { get; internal set; }
    public string VirtualPath { get; public set; }
    private static ApplicationStartPage();
    [CompilerGeneratedAttribute]
public HttpApplication get_Application();
    [CompilerGeneratedAttribute]
internal void set_Application(HttpApplication value);
    public virtual HttpContextBase get_Context();
    [CompilerGeneratedAttribute]
public static HtmlString get_Markup();
    [CompilerGeneratedAttribute]
private static void set_Markup(HtmlString value);
    [CompilerGeneratedAttribute]
internal static Exception get_Exception();
    [CompilerGeneratedAttribute]
private static void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public TextWriter get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(TextWriter value);
    public virtual string get_VirtualPath();
    public virtual void set_VirtualPath(string value);
    internal void ExecuteInternal();
    internal static void ExecuteStartPage(HttpApplication application);
    internal static void ExecuteStartPage(HttpApplication application, Action`1<string> monitorFile, IVirtualPathFactory virtualPathFactory, IEnumerable`1<string> supportedExtensions);
    internal static void ExecuteStartPageInternal(HttpApplication application, Action`1<string> monitorFile, IVirtualPathFactory virtualPathFactory, IEnumerable`1<string> supportedExtensions);
    private static Action`1<Action> GetSafeExecuteStartPageThunk();
    private static void InitiateShutdown(string key, object value, CacheItemRemovedReason reason);
    private static void MonitorFile(string virtualPath);
    private static void ShutdownCallBack(object state);
    public virtual void Write(HelperResult result);
    public virtual void WriteLiteral(object value);
    public virtual void Write(object value);
    protected internal virtual TextWriter GetOutputWriter();
    [CompilerGeneratedAttribute]
private void <ExecuteInternal>b__0();
    [CompilerGeneratedAttribute]
private static void <ExecuteStartPage>b__1(string vpath);
    [CompilerGeneratedAttribute]
private static void <GetSafeExecuteStartPageThunk>b__3(Action action);
}
public class System.Web.WebPages.AttributeValue : object {
    [CompilerGeneratedAttribute]
private PositionTagged`1<string> <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private PositionTagged`1<object> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Literal>k__BackingField;
    public PositionTagged`1<string> Prefix { get; private set; }
    public PositionTagged`1<object> Value { get; private set; }
    public bool Literal { get; private set; }
    public AttributeValue(PositionTagged`1<string> prefix, PositionTagged`1<object> value, bool literal);
    [CompilerGeneratedAttribute]
public PositionTagged`1<string> get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(PositionTagged`1<string> value);
    [CompilerGeneratedAttribute]
public PositionTagged`1<object> get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(PositionTagged`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_Literal();
    [CompilerGeneratedAttribute]
private void set_Literal(bool value);
    public static AttributeValue FromTuple(Tuple`3<Tuple`2<string, int>, Tuple`2<object, int>, bool> value);
    public static AttributeValue FromTuple(Tuple`3<Tuple`2<string, int>, Tuple`2<string, int>, bool> value);
    public static AttributeValue op_Implicit(Tuple`3<Tuple`2<string, int>, Tuple`2<object, int>, bool> value);
    public static AttributeValue op_Implicit(Tuple`3<Tuple`2<string, int>, Tuple`2<string, int>, bool> value);
}
[ExtensionAttribute]
public static class System.Web.WebPages.BrowserHelpers : object {
    private static string DesktopUserAgent;
    private static string MobileUserAgent;
    private static object _browserOverrideKey;
    private static object _userAgentKey;
    [CompilerGeneratedAttribute]
private static Func`2<string, HttpBrowserCapabilitiesBase> CS$<>9__CachedAnonymousMethodDelegate1;
    private static BrowserHelpers();
    [ExtensionAttribute]
public static void ClearOverriddenBrowser(HttpContextBase httpContext);
    private static HttpBrowserCapabilitiesBase CreateOverriddenBrowser(string userAgent);
    [ExtensionAttribute]
public static HttpBrowserCapabilitiesBase GetOverriddenBrowser(HttpContextBase httpContext);
    [ExtensionAttribute]
internal static HttpBrowserCapabilitiesBase GetOverriddenBrowser(HttpContextBase httpContext, Func`2<string, HttpBrowserCapabilitiesBase> createBrowser);
    [ExtensionAttribute]
public static string GetOverriddenUserAgent(HttpContextBase httpContext);
    [ExtensionAttribute]
public static string GetVaryByCustomStringForOverriddenBrowser(HttpContext httpContext);
    [ExtensionAttribute]
public static string GetVaryByCustomStringForOverriddenBrowser(HttpContextBase httpContext);
    [ExtensionAttribute]
internal static string GetVaryByCustomStringForOverriddenBrowser(HttpContextBase httpContext, Func`2<string, HttpBrowserCapabilitiesBase> generateBrowser);
    [ExtensionAttribute]
public static void SetOverriddenBrowser(HttpContextBase httpContext, BrowserOverride browserOverride);
    [ExtensionAttribute]
public static void SetOverriddenBrowser(HttpContextBase httpContext, string userAgent);
    [CompilerGeneratedAttribute]
private static HttpBrowserCapabilitiesBase <GetVaryByCustomStringForOverriddenBrowser>b__0(string userAgent);
}
public enum System.Web.WebPages.BrowserOverride : Enum {
    public int value__;
    public static BrowserOverride Desktop;
    public static BrowserOverride Mobile;
}
public abstract class System.Web.WebPages.BrowserOverrideStore : object {
    public abstract virtual string GetOverriddenUserAgent(HttpContextBase httpContext);
    public abstract virtual void SetOverriddenUserAgent(HttpContextBase httpContext, string userAgent);
}
public class System.Web.WebPages.BrowserOverrideStores : object {
    private static BrowserOverrideStores _instance;
    private BrowserOverrideStore _currentOverrideStore;
    public static BrowserOverrideStore Current { get; public set; }
    internal BrowserOverrideStore CurrentInternal { get; internal set; }
    private static BrowserOverrideStores();
    public static BrowserOverrideStore get_Current();
    public static void set_Current(BrowserOverrideStore value);
    internal BrowserOverrideStore get_CurrentInternal();
    internal void set_CurrentInternal(BrowserOverrideStore value);
}
internal static class System.Web.WebPages.BuildManagerExceptionUtil : object {
    internal static bool IsUnsupportedExtensionError(HttpException e);
    internal static void ThrowIfUnsupportedExtension(string virtualPath, HttpException e);
    internal static void ThrowIfCodeDomDefinedExtension(string virtualPath, HttpException e);
}
internal class System.Web.WebPages.BuildManagerWrapper : object {
    internal static Guid KeyGuid;
    private static TimeSpan _objectFactoryCacheDuration;
    private IVirtualPathUtility _virtualPathUtility;
    private VirtualPathProvider _vpp;
    private bool _isPrecompiled;
    private FileExistenceCache _vppCache;
    private IEnumerable`1<string> _supportedExtensions;
    public IEnumerable`1<string> SupportedExtensions { get; public set; }
    public BuildManagerWrapper(VirtualPathProvider vpp, IVirtualPathUtility virtualPathUtility);
    private static BuildManagerWrapper();
    public IEnumerable`1<string> get_SupportedExtensions();
    public void set_SupportedExtensions(IEnumerable`1<string> value);
    public sealed virtual bool Exists(string virtualPath);
    internal bool IsNonUpdatablePrecompiledApp();
    private bool ExistsInPrecompiledSite(string virtualPath);
    private bool ExistsInVpp(string virtualPath);
    private IWebObjectFactory GetObjectFactory(string virtualPath);
    public sealed virtual object CreateInstance(string virtualPath);
    public T CreateInstanceOfType(string virtualPath);
    public bool IsPathExtensionSupported(string virtualPath);
    private static string GetKeyFromVirtualPath(string virtualPath);
}
internal class System.Web.WebPages.CompareValidator : RequestFieldValidatorBase {
    private string _otherField;
    private ModelClientValidationEqualToRule _clientValidationRule;
    public ModelClientValidationRule ClientValidationRule { get; }
    public CompareValidator(string otherField, string errorMessage);
    public virtual ModelClientValidationRule get_ClientValidationRule();
    protected virtual bool IsValid(HttpContextBase httpContext, string value);
}
public class System.Web.WebPages.CookieBrowserOverrideStore : BrowserOverrideStore {
    internal static string BrowserOverrideCookieName;
    private int _daysToExpire;
    public CookieBrowserOverrideStore(int daysToExpire);
    private static CookieBrowserOverrideStore();
    public virtual string GetOverriddenUserAgent(HttpContextBase httpContext);
    public virtual void SetOverriddenUserAgent(HttpContextBase httpContext, string userAgent);
}
internal static class System.Web.WebPages.CultureUtil : object {
    internal static void SetCulture(Thread thread, HttpContextBase context, string cultureName);
    internal static void SetUICulture(Thread thread, HttpContextBase context, string cultureName);
    private static CultureInfo GetCulture(HttpContextBase context, string cultureName);
    private static CultureInfo DetermineAutoCulture(HttpContextBase context);
}
internal class System.Web.WebPages.DataTypeValidator : RequestFieldValidatorBase {
    private SupportedValidationDataType _dataType;
    public DataTypeValidator(SupportedValidationDataType type, string errorMessage);
    protected virtual bool IsValid(HttpContextBase httpContext, string value);
}
public class System.Web.WebPages.DefaultDisplayMode : object {
    private string _suffix;
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> <ContextCondition>k__BackingField;
    public Func`2<HttpContextBase, bool> ContextCondition { get; public set; }
    public string DisplayModeId { get; }
    public DefaultDisplayMode(string suffix);
    [CompilerGeneratedAttribute]
public Func`2<HttpContextBase, bool> get_ContextCondition();
    [CompilerGeneratedAttribute]
public void set_ContextCondition(Func`2<HttpContextBase, bool> value);
    public virtual string get_DisplayModeId();
    public sealed virtual bool CanHandleContext(HttpContextBase httpContext);
    public virtual DisplayInfo GetDisplayInfo(HttpContextBase httpContext, string virtualPath, Func`2<string, bool> virtualPathExists);
    protected virtual string TransformPath(string virtualPath, string suffix);
}
public class System.Web.WebPages.DisplayInfo : object {
    [CompilerGeneratedAttribute]
private IDisplayMode <DisplayMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public IDisplayMode DisplayMode { get; private set; }
    public string FilePath { get; private set; }
    public DisplayInfo(string filePath, IDisplayMode displayMode);
    [CompilerGeneratedAttribute]
public IDisplayMode get_DisplayMode();
    [CompilerGeneratedAttribute]
private void set_DisplayMode(IDisplayMode value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
}
public class System.Web.WebPages.DisplayModeProvider : object {
    public static string MobileDisplayModeId;
    public static string DefaultDisplayModeId;
    private static object _displayModeKey;
    private static DisplayModeProvider _instance;
    private List`1<IDisplayMode> _displayModes;
    [CompilerGeneratedAttribute]
private bool <RequireConsistentDisplayMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<HttpContextBase, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<DisplayInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    public bool RequireConsistentDisplayMode { get; public set; }
    public static DisplayModeProvider Instance { get; }
    public IList`1<IDisplayMode> Modes { get; }
    private static DisplayModeProvider();
    [CompilerGeneratedAttribute]
public bool get_RequireConsistentDisplayMode();
    [CompilerGeneratedAttribute]
public void set_RequireConsistentDisplayMode(bool value);
    public static DisplayModeProvider get_Instance();
    public IList`1<IDisplayMode> get_Modes();
    public IEnumerable`1<IDisplayMode> GetAvailableDisplayModesForContext(HttpContextBase httpContext, IDisplayMode currentDisplayMode);
    internal IEnumerable`1<IDisplayMode> GetAvailableDisplayModesForContext(HttpContextBase httpContext, IDisplayMode currentDisplayMode, bool requireConsistentDisplayMode);
    public DisplayInfo GetDisplayInfoForVirtualPath(string virtualPath, HttpContextBase httpContext, Func`2<string, bool> virtualPathExists, IDisplayMode currentDisplayMode);
    internal DisplayInfo GetDisplayInfoForVirtualPath(string virtualPath, HttpContextBase httpContext, Func`2<string, bool> virtualPathExists, IDisplayMode currentDisplayMode, bool requireConsistentDisplayMode);
    internal static IDisplayMode GetDisplayMode(HttpContextBase context);
    internal static void SetDisplayMode(HttpContextBase context, IDisplayMode displayMode);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(HttpContextBase context);
    [CompilerGeneratedAttribute]
private static bool <GetDisplayInfoForVirtualPath>b__9(DisplayInfo info);
}
internal class System.Web.WebPages.DisposableAction : object {
    private Action _action;
    private bool _hasDisposed;
    public DisposableAction(Action action);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class System.Web.WebPages.DynamicHttpApplicationState : DynamicObject {
    private HttpApplicationStateBase _state;
    public DynamicHttpApplicationState(HttpApplicationStateBase state);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.DynamicPageDataDictionary`1 : DynamicObject {
    private PageDataDictionary`1<TValue> _data;
    public ICollection`1<object> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public DynamicPageDataDictionary`1(PageDataDictionary`1<TValue> dictionary);
    public sealed virtual ICollection`1<object> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TValue get_Item(object key);
    public sealed virtual void set_Item(object key, TValue value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public sealed virtual void Add(object key, TValue value);
    public sealed virtual bool ContainsKey(object key);
    public sealed virtual bool Remove(object key);
    public sealed virtual bool TryGetValue(object key, TValue& value);
    public sealed virtual void Add(KeyValuePair`2<object, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<object, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<object, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<object, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Web.WebPages.FileExistenceCache : object {
    private static int TickPerMiliseconds;
    private VirtualPathProvider _virtualPathProvider;
    private ConcurrentDictionary`2<string, bool> _cache;
    private long _creationTick;
    private int _ticksBeforeReset;
    public VirtualPathProvider VirtualPathProvider { get; }
    public int MilliSecondsBeforeReset { get; internal set; }
    internal IDictionary`2<string, bool> CacheInternal { get; }
    public bool TimeExceeded { get; }
    public FileExistenceCache(VirtualPathProvider virtualPathProvider, int milliSecondsBeforeReset);
    public VirtualPathProvider get_VirtualPathProvider();
    public int get_MilliSecondsBeforeReset();
    internal void set_MilliSecondsBeforeReset(int value);
    internal IDictionary`2<string, bool> get_CacheInternal();
    public bool get_TimeExceeded();
    public void Reset();
    public bool FileExists(string virtualPath);
}
public class System.Web.WebPages.HelperPage : object {
    private static WebPageContext _pageContext;
    private static InstrumentationService _instrumentationService;
    [CompilerGeneratedAttribute]
private static string <HelperVirtualPath>k__BackingField;
    private static InstrumentationService InstrumentationService { get; }
    public static HttpContextBase Context { get; }
    public static WebPageRenderingBase CurrentPage { get; }
    [DynamicAttribute]
public static object Page { get; }
    [DynamicAttribute]
public static object Model { get; }
    public static ModelStateDictionary ModelState { get; }
    public static HtmlHelper Html { get; }
    public static WebPageContext PageContext { get; public set; }
    public static HttpApplicationStateBase AppState { get; }
    [DynamicAttribute]
public static object App { get; }
    public static string VirtualPath { get; }
    public static Cache Cache { get; }
    public static HttpRequestBase Request { get; }
    public static HttpResponseBase Response { get; }
    public static HttpServerUtilityBase Server { get; }
    public static HttpSessionStateBase Session { get; }
    public static IList`1<string> UrlData { get; }
    public static IPrincipal User { get; }
    public static bool IsPost { get; }
    public static bool IsAjax { get; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDictionary`2<object, object> PageData { get; }
    protected static string HelperVirtualPath { get; protected set; }
    private static HelperPage();
    private static InstrumentationService get_InstrumentationService();
    public static HttpContextBase get_Context();
    public static WebPageRenderingBase get_CurrentPage();
    public static object get_Page();
    public static object get_Model();
    public static ModelStateDictionary get_ModelState();
    public static HtmlHelper get_Html();
    public static WebPageContext get_PageContext();
    public static void set_PageContext(WebPageContext value);
    public static HttpApplicationStateBase get_AppState();
    public static object get_App();
    public static string get_VirtualPath();
    public static Cache get_Cache();
    public static HttpRequestBase get_Request();
    public static HttpResponseBase get_Response();
    public static HttpServerUtilityBase get_Server();
    public static HttpSessionStateBase get_Session();
    public static IList`1<string> get_UrlData();
    public static IPrincipal get_User();
    public static bool get_IsPost();
    public static bool get_IsAjax();
    public static IDictionary`2<object, object> get_PageData();
    [CompilerGeneratedAttribute]
protected static string get_HelperVirtualPath();
    [CompilerGeneratedAttribute]
protected static void set_HelperVirtualPath(string value);
    public static string Href(string path, Object[] pathParts);
    public static void WriteTo(TextWriter writer, object value);
    public static void WriteLiteralTo(TextWriter writer, object value);
    public static void WriteTo(TextWriter writer, HelperResult value);
    public static void WriteLiteralTo(TextWriter writer, HelperResult value);
    public static void WriteAttributeTo(TextWriter writer, string name, PositionTagged`1<string> prefix, PositionTagged`1<string> suffix, AttributeValue[] values);
    public static void BeginContext(string virtualPath, int startPosition, int length, bool isLiteral);
    public static void BeginContext(TextWriter writer, string virtualPath, int startPosition, int length, bool isLiteral);
    public static void EndContext(string virtualPath, int startPosition, int length, bool isLiteral);
    public static void EndContext(TextWriter writer, string virtualPath, int startPosition, int length, bool isLiteral);
}
public class System.Web.WebPages.HelperResult : object {
    private Action`1<TextWriter> _action;
    public HelperResult(Action`1<TextWriter> action);
    public sealed virtual string ToHtmlString();
    public virtual string ToString();
    public void WriteTo(TextWriter writer);
}
public class System.Web.WebPages.Html.HtmlHelper : object {
    internal static string DefaultValidationInputErrorCssClass;
    private static string DefaultValidationInputValidCssClass;
    private static string DefaultValidationMessageErrorCssClass;
    private static string DefaultValidationMessageValidCssClass;
    private static string DefaultValidationSummaryErrorCssClass;
    private static string DefaultValidationSummaryValidCssClassName;
    private static int TextAreaRows;
    private static int TextAreaColumns;
    private static object _validationMesssageErrorClassKey;
    private static object _validationMessageValidClassKey;
    private static object _validationInputErrorClassKey;
    private static object _validationInputValidClassKey;
    private static object _validationSummaryClassKey;
    private static object _validationSummaryValidClassKey;
    private static object _unobtrusiveValidationKey;
    private static string _idAttributeDotReplacement;
    private ValidationHelper _validationHelper;
    private static IDictionary`2<string, object> _implicitRowsAndColumns;
    [CompilerGeneratedAttribute]
private ModelStateDictionary <ModelState>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<SelectListItem, SelectListItem> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate11;
    public static string IdAttributeDotReplacement { get; public set; }
    public static string ValidationInputValidCssClassName { get; public set; }
    public static string ValidationInputCssClassName { get; public set; }
    public static string ValidationMessageValidCssClassName { get; public set; }
    public static string ValidationMessageCssClassName { get; public set; }
    public static string ValidationSummaryClass { get; public set; }
    public static string ValidationSummaryValidClass { get; public set; }
    public static bool UnobtrusiveJavaScriptEnabled { get; public set; }
    private ModelStateDictionary ModelState { get; private set; }
    internal HtmlHelper(ModelStateDictionary modelState, ValidationHelper validationHelper);
    private static HtmlHelper();
    public IHtmlString CheckBox(string name);
    public IHtmlString CheckBox(string name, object htmlAttributes);
    public IHtmlString CheckBox(string name, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString CheckBox(string name, bool isChecked);
    public IHtmlString CheckBox(string name, bool isChecked, object htmlAttributes);
    public IHtmlString CheckBox(string name, bool isChecked, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildCheckBox(string name, Nullable`1<bool> isChecked, IDictionary`2<string, object> attributes);
    public static string get_IdAttributeDotReplacement();
    public static void set_IdAttributeDotReplacement(string value);
    public static string get_ValidationInputValidCssClassName();
    public static void set_ValidationInputValidCssClassName(string value);
    public static string get_ValidationInputCssClassName();
    public static void set_ValidationInputCssClassName(string value);
    public static string get_ValidationMessageValidCssClassName();
    public static void set_ValidationMessageValidCssClassName(string value);
    public static string get_ValidationMessageCssClassName();
    public static void set_ValidationMessageCssClassName(string value);
    public static string get_ValidationSummaryClass();
    public static void set_ValidationSummaryClass(string value);
    public static string get_ValidationSummaryValidClass();
    public static void set_ValidationSummaryValidClass(string value);
    public static bool get_UnobtrusiveJavaScriptEnabled();
    public static void set_UnobtrusiveJavaScriptEnabled(bool value);
    [CompilerGeneratedAttribute]
private ModelStateDictionary get_ModelState();
    [CompilerGeneratedAttribute]
private void set_ModelState(ModelStateDictionary value);
    public string AttributeEncode(object value);
    public string AttributeEncode(string value);
    public string Encode(object value);
    public string Encode(string value);
    public IHtmlString Raw(string value);
    public IHtmlString Raw(object value);
    public IHtmlString TextBox(string name);
    public IHtmlString TextBox(string name, object value);
    public IHtmlString TextBox(string name, object value, object htmlAttributes);
    public IHtmlString TextBox(string name, object value, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString Hidden(string name);
    public IHtmlString Hidden(string name, object value);
    public IHtmlString Hidden(string name, object value, object htmlAttributes);
    public IHtmlString Hidden(string name, object value, IDictionary`2<string, object> htmlAttributes);
    private static object GetHiddenFieldValue(object value);
    public IHtmlString Password(string name);
    public IHtmlString Password(string name, object value);
    public IHtmlString Password(string name, object value, object htmlAttributes);
    public IHtmlString Password(string name, object value, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildInputField(string name, InputType type, object value, bool isExplicitValue, IDictionary`2<string, object> attributes);
    private static string GetInputTypeString(InputType inputType);
    private void AddErrorClass(TagBuilder tagBuilder, string name);
    private static object ConvertTo(object value, Type type);
    private static object UnwrapPossibleArrayType(object value, Type destinationType, CultureInfo culture);
    private static object ConvertSimpleType(object value, Type destinationType, CultureInfo culture);
    public IHtmlString Label(string labelText);
    public IHtmlString Label(string labelText, string labelFor);
    public IHtmlString Label(string labelText, object attributes);
    public IHtmlString Label(string labelText, string labelFor, object attributes);
    public IHtmlString Label(string labelText, string labelFor, IDictionary`2<string, object> attributes);
    public IHtmlString RadioButton(string name, object value);
    public IHtmlString RadioButton(string name, object value, object htmlAttributes);
    public IHtmlString RadioButton(string name, object value, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString RadioButton(string name, object value, bool isChecked);
    public IHtmlString RadioButton(string name, object value, bool isChecked, object htmlAttributes);
    public IHtmlString RadioButton(string name, object value, bool isChecked, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildRadioButton(string name, object value, Nullable`1<bool> isChecked, IDictionary`2<string, object> attributes);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, object htmlAttributes);
    public IHtmlString ListBox(string name, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, int size, bool allowMultiple, object htmlAttributes);
    private IHtmlString BuildListBox(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValues, Nullable`1<int> size, bool allowMultiple, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString DropDownList(string name, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString DropDownList(string name, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValue, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString DropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValue, object htmlAttributes);
    private IHtmlString BuildDropDownList(string name, string defaultOption, IEnumerable`1<SelectListItem> selectList, object selectedValue, IDictionary`2<string, object> htmlAttributes);
    private static string BuildListOptions(IEnumerable`1<SelectListItem> selectList, string optionText);
    private static string ListItemToOption(SelectListItem item);
    private static IDictionary`2<string, object> GetRowsAndColumnsDictionary(int rows, int columns);
    public IHtmlString TextArea(string name);
    public IHtmlString TextArea(string name, object htmlAttributes);
    public IHtmlString TextArea(string name, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString TextArea(string name, string value);
    public IHtmlString TextArea(string name, string value, object htmlAttributes);
    public IHtmlString TextArea(string name, string value, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString TextArea(string name, string value, int rows, int columns, object htmlAttributes);
    public IHtmlString TextArea(string name, string value, int rows, int columns, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildTextArea(string name, string value, IDictionary`2<string, object> rowsAndColumnsDictionary, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationMessage(string name);
    public IHtmlString ValidationMessage(string name, string message);
    public IHtmlString ValidationMessage(string name, object htmlAttributes);
    public IHtmlString ValidationMessage(string name, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationMessage(string name, string message, object htmlAttributes);
    public IHtmlString ValidationMessage(string name, string message, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildValidationMessage(string name, string message, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationSummary();
    public IHtmlString ValidationSummary(string message);
    public IHtmlString ValidationSummary(bool excludeFieldErrors);
    public IHtmlString ValidationSummary(object htmlAttributes);
    public IHtmlString ValidationSummary(IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationSummary(string message, object htmlAttributes);
    public IHtmlString ValidationSummary(string message, IDictionary`2<string, object> htmlAttributes);
    public IHtmlString ValidationSummary(string message, bool excludeFieldErrors, object htmlAttributes);
    public IHtmlString ValidationSummary(string message, bool excludeFieldErrors, IDictionary`2<string, object> htmlAttributes);
    private IHtmlString BuildValidationSummary(string message, bool excludeFieldErrors, IDictionary`2<string, object> htmlAttributes);
    [CompilerGeneratedAttribute]
private static string <BuildListBox>b__3(object value);
    [CompilerGeneratedAttribute]
private static SelectListItem <BuildDropDownList>b__6(SelectListItem item);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <BuildValidationSummary>b__10(KeyValuePair`2<string, ModelState> c);
}
public class System.Web.WebPages.Html.ModelState : object {
    private List`1<string> _errors;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IList`1<string> Errors { get; }
    public object Value { get; public set; }
    public IList`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.WebPages.Html.ModelStateDictionary : object {
    internal static string FormFieldKey;
    private Dictionary`2<string, ModelState> _innerDictionary;
    [CompilerGeneratedAttribute]
private static Func`2<ModelState, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate1;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsValid { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<ModelState> Values { get; }
    public ModelState Item { get; public set; }
    public ModelStateDictionary(ModelStateDictionary dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsValid();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<ModelState> get_Values();
    public sealed virtual ModelState get_Item(string key);
    public sealed virtual void set_Item(string key, ModelState value);
    public sealed virtual void Add(KeyValuePair`2<string, ModelState> item);
    public sealed virtual void Add(string key, ModelState value);
    public void AddError(string key, string errorMessage);
    public void AddFormError(string errorMessage);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ModelState>> GetEnumerator();
    private ModelState GetModelStateForKey(string key);
    public bool IsValidField(string key);
    public void Merge(ModelStateDictionary dictionary);
    public sealed virtual bool Remove(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, ModelState& value);
    public void SetModelValue(string key, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <get_IsValid>b__0(ModelState modelState);
}
public class System.Web.WebPages.Html.SelectListItem : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    public string Text { get; public set; }
    public string Value { get; public set; }
    public bool Selected { get; public set; }
    public SelectListItem(SelectListItem item);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
}
[ExtensionAttribute]
public static class System.Web.WebPages.HttpContextExtensions : object {
    [ExtensionAttribute]
public static void RedirectLocal(HttpContextBase context, string url);
    [ExtensionAttribute]
public static void RegisterForDispose(HttpContextBase context, IDisposable resource);
}
public interface System.Web.WebPages.IDisplayMode {
    public string DisplayModeId { get; }
    public abstract virtual string get_DisplayModeId();
    public abstract virtual bool CanHandleContext(HttpContextBase httpContext);
    public abstract virtual DisplayInfo GetDisplayInfo(HttpContextBase httpContext, string virtualPath, Func`2<string, bool> virtualPathExists);
}
[GeneratedCodeAttribute("Microsoft.Web.CodeGen.DynamicCallerGenerator", "1.0.0.0")]
internal class System.Web.WebPages.Instrumentation.HttpContextAdapter : object {
    private static bool _isInstrumentationAvailable;
    private static Type _TargetType;
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <Adaptee>k__BackingField;
    internal static bool IsInstrumentationAvailable { get; }
    internal PageInstrumentationServiceAdapter PageInstrumentation { get; }
    [DynamicAttribute]
internal object Adaptee { get; private set; }
    internal HttpContextAdapter(object existing);
    private static HttpContextAdapter();
    internal static bool get_IsInstrumentationAvailable();
    internal PageInstrumentationServiceAdapter get_PageInstrumentation();
    [CompilerGeneratedAttribute]
internal object get_Adaptee();
    [CompilerGeneratedAttribute]
private void set_Adaptee(object value);
}
public class System.Web.WebPages.Instrumentation.InstrumentationService : object {
    private static bool _isAvailable;
    private bool _localIsAvailable;
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, PageInstrumentationServiceAdapter> <ExtractInstrumentationService>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`6<string, TextWriter, int, int, bool, PageExecutionContextAdapter> <CreateContext>k__BackingField;
    public bool IsAvailable { get; internal set; }
    internal Func`2<HttpContextBase, PageInstrumentationServiceAdapter> ExtractInstrumentationService { get; internal set; }
    internal Func`6<string, TextWriter, int, int, bool, PageExecutionContextAdapter> CreateContext { get; internal set; }
    private static InstrumentationService();
    public bool get_IsAvailable();
    internal void set_IsAvailable(bool value);
    [CompilerGeneratedAttribute]
internal Func`2<HttpContextBase, PageInstrumentationServiceAdapter> get_ExtractInstrumentationService();
    [CompilerGeneratedAttribute]
internal void set_ExtractInstrumentationService(Func`2<HttpContextBase, PageInstrumentationServiceAdapter> value);
    [CompilerGeneratedAttribute]
internal Func`6<string, TextWriter, int, int, bool, PageExecutionContextAdapter> get_CreateContext();
    [CompilerGeneratedAttribute]
internal void set_CreateContext(Func`6<string, TextWriter, int, int, bool, PageExecutionContextAdapter> value);
    public void BeginContext(HttpContextBase context, string virtualPath, TextWriter writer, int startPosition, int length, bool isLiteral);
    public void EndContext(HttpContextBase context, string virtualPath, TextWriter writer, int startPosition, int length, bool isLiteral);
    private PageExecutionContextAdapter CreateSystemWebContext(string virtualPath, TextWriter writer, int startPosition, int length, bool isLiteral);
    private PageInstrumentationServiceAdapter GetInstrumentationService(HttpContextBase context);
    private void RunOnListeners(HttpContextBase context, Action`1<PageExecutionListenerAdapter> act);
}
[GeneratedCodeAttribute("Microsoft.Web.CodeGen.DynamicCallerGenerator", "1.0.0.0")]
internal class System.Web.WebPages.Instrumentation.PageExecutionContextAdapter : object {
    private static Type _TargetType;
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <Adaptee>k__BackingField;
    internal bool IsLiteral { get; internal set; }
    internal int Length { get; internal set; }
    internal int StartPosition { get; internal set; }
    internal TextWriter TextWriter { get; internal set; }
    internal string VirtualPath { get; internal set; }
    [DynamicAttribute]
internal object Adaptee { get; private set; }
    internal PageExecutionContextAdapter(object existing);
    private static PageExecutionContextAdapter();
    internal bool get_IsLiteral();
    internal void set_IsLiteral(bool value);
    internal int get_Length();
    internal void set_Length(int value);
    internal int get_StartPosition();
    internal void set_StartPosition(int value);
    internal TextWriter get_TextWriter();
    internal void set_TextWriter(TextWriter value);
    internal string get_VirtualPath();
    internal void set_VirtualPath(string value);
    [CompilerGeneratedAttribute]
internal object get_Adaptee();
    [CompilerGeneratedAttribute]
private void set_Adaptee(object value);
}
[GeneratedCodeAttribute("Microsoft.Web.CodeGen.DynamicCallerGenerator", "1.0.0.0")]
internal class System.Web.WebPages.Instrumentation.PageExecutionListenerAdapter : object {
    private static Type _TargetType;
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <Adaptee>k__BackingField;
    [DynamicAttribute]
internal object Adaptee { get; private set; }
    internal PageExecutionListenerAdapter(object existing);
    private static PageExecutionListenerAdapter();
    internal void BeginContext(PageExecutionContextAdapter context);
    internal void EndContext(PageExecutionContextAdapter context);
    [CompilerGeneratedAttribute]
internal object get_Adaptee();
    [CompilerGeneratedAttribute]
private void set_Adaptee(object value);
}
internal class System.Web.WebPages.Instrumentation.PageInstrumentationServiceAdapter : object {
    private static Type _targetType;
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <Adaptee>k__BackingField;
    [CompilerGeneratedAttribute]
[DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<object, PageExecutionListenerAdapter> CS$<>9__CachedAnonymousMethodDelegate4;
    internal IEnumerable`1<PageExecutionListenerAdapter> ExecutionListeners { get; }
    internal static bool IsEnabled { get; internal set; }
    [DynamicAttribute]
internal object Adaptee { get; private set; }
    internal PageInstrumentationServiceAdapter(object existing);
    private static PageInstrumentationServiceAdapter();
    internal IEnumerable`1<PageExecutionListenerAdapter> get_ExecutionListeners();
    internal static bool get_IsEnabled();
    internal static void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
internal object get_Adaptee();
    [CompilerGeneratedAttribute]
private void set_Adaptee(object value);
    [CompilerGeneratedAttribute]
private static PageExecutionListenerAdapter <get_ExecutionListeners>b__3(object listener);
}
[DebuggerDisplayAttribute("({Position})"{Value}"")]
public class System.Web.WebPages.Instrumentation.PositionTagged`1 : object {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public int Position { get; private set; }
    public T Value { get; private set; }
    public PositionTagged`1(T value, int offset);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static T op_Implicit(PositionTagged`1<T> value);
    public static PositionTagged`1<T> op_Implicit(Tuple`2<T, int> value);
    public static bool op_Equality(PositionTagged`1<T> left, PositionTagged`1<T> right);
    public static bool op_Inequality(PositionTagged`1<T> left, PositionTagged`1<T> right);
}
public interface System.Web.WebPages.ITemplateFile {
    public TemplateFileInfo TemplateInfo { get; }
    public abstract virtual TemplateFileInfo get_TemplateInfo();
}
public interface System.Web.WebPages.IValidator {
    public ModelClientValidationRule ClientValidationRule { get; }
    public abstract virtual ModelClientValidationRule get_ClientValidationRule();
    public abstract virtual ValidationResult Validate(ValidationContext validationContext);
}
public interface System.Web.WebPages.IVirtualPathFactory {
    public abstract virtual bool Exists(string virtualPath);
    public abstract virtual object CreateInstance(string virtualPath);
}
public interface System.Web.WebPages.IWebPageRequestExecutor {
    public abstract virtual bool Execute(WebPage page);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.PageDataDictionary`1 : object {
    private IDictionary`2<object, TValue> _data;
    private IDictionary`2<string, TValue> _stringDictionary;
    private IList`1<TValue> _indexedValues;
    internal IDictionary`2<object, TValue> Data { get; }
    internal IDictionary`2<string, TValue> StringDictionary { get; }
    internal IList`1<TValue> IndexedValues { get; }
    public ICollection`1<object> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    internal ICollection`1<KeyValuePair`2<object, TValue>> Items { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    internal IDictionary`2<object, TValue> get_Data();
    internal IDictionary`2<string, TValue> get_StringDictionary();
    internal IList`1<TValue> get_IndexedValues();
    public sealed virtual ICollection`1<object> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    internal ICollection`1<KeyValuePair`2<object, TValue>> get_Items();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TValue get_Item(object key);
    public sealed virtual void set_Item(object key, TValue value);
    public sealed virtual void Add(object key, TValue value);
    internal bool ContainsIndex(object o);
    internal bool ContainsIndex(int index);
    internal bool ContainsStringKey(object o);
    internal bool ContainsStringKey(string key);
    public sealed virtual bool ContainsKey(object key);
    public sealed virtual bool Remove(object key);
    public sealed virtual bool TryGetValue(object key, TValue& value);
    public sealed virtual void Add(KeyValuePair`2<object, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<object, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<object, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<object, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static IDictionary`2<object, object> CreatePageDataFromParameters(IDictionary`2<object, object> previousPageData, Object[] data);
}
[AttributeUsageAttribute("4")]
public class System.Web.WebPages.PageVirtualPathAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    public string VirtualPath { get; private set; }
    public PageVirtualPathAttribute(string virtualPath);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
private void set_VirtualPath(string value);
}
internal static class System.Web.WebPages.PathUtil : object {
    internal static string GetExtension(string path);
    internal static bool IsWithinAppRoot(string appDomainAppVirtualPath, string virtualPath);
    internal static bool IsSimpleName(string path);
}
[EditorBrowsableAttribute("1")]
public static class System.Web.WebPages.PreApplicationStartCode : object {
    private static bool _startWasCalled;
    public static void Start();
}
internal class System.Web.WebPages.ReflectionDynamicObject : DynamicObject {
    [CompilerGeneratedAttribute]
private object <RealObject>k__BackingField;
    private object RealObject { get; private set; }
    [CompilerGeneratedAttribute]
private object get_RealObject();
    [CompilerGeneratedAttribute]
private void set_RealObject(object value);
    public static object WrapObjectIfInternal(object o);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual string ToString();
}
internal class System.Web.WebPages.RequestBrowserOverrideStore : BrowserOverrideStore {
    public virtual string GetOverriddenUserAgent(HttpContextBase httpContext);
    public virtual void SetOverriddenUserAgent(HttpContextBase httpContext, string userAgent);
}
[ExtensionAttribute]
public static class System.Web.WebPages.RequestExtensions : object {
    [ExtensionAttribute]
public static bool IsUrlLocalToHost(HttpRequestBase request, string url);
}
public abstract class System.Web.WebPages.RequestFieldValidatorBase : object {
    private string _errorMessage;
    private bool _useUnvalidatedValues;
    [CompilerGeneratedAttribute]
private static bool <IgnoreUseUnvalidatedValues>k__BackingField;
    public ModelClientValidationRule ClientValidationRule { get; }
    internal static bool IgnoreUseUnvalidatedValues { get; internal set; }
    protected RequestFieldValidatorBase(string errorMessage);
    protected RequestFieldValidatorBase(string errorMessage, bool useUnvalidatedValues);
    public virtual ModelClientValidationRule get_ClientValidationRule();
    [CompilerGeneratedAttribute]
internal static bool get_IgnoreUseUnvalidatedValues();
    [CompilerGeneratedAttribute]
internal static void set_IgnoreUseUnvalidatedValues(bool value);
    protected abstract virtual bool IsValid(HttpContextBase httpContext, string value);
    public virtual ValidationResult Validate(ValidationContext validationContext);
    protected static HttpContextBase GetHttpContext(ValidationContext validationContext);
    protected string GetRequestValue(HttpRequestBase request, string field);
}
internal static class System.Web.WebPages.RequestResourceTracker : object {
    private static object _resourcesKey;
    [CompilerGeneratedAttribute]
private static Action`1<SecureWeakReference> CS$<>9__CachedAnonymousMethodDelegate1;
    private static RequestResourceTracker();
    private static List`1<SecureWeakReference> GetResources(HttpContextBase context);
    internal static void DisposeResources(HttpContextBase context);
    internal static void RegisterForDispose(HttpContextBase context, IDisposable resource);
    internal static void RegisterForDispose(IDisposable resource);
    [CompilerGeneratedAttribute]
private static void <DisposeResources>b__0(SecureWeakReference resource);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.WebPages.Resources.WebPageResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AntiForgeryToken_AdditionalDataCheckFailed { get; }
    internal static string AntiForgeryToken_ClaimUidMismatch { get; }
    internal static string AntiForgeryToken_CookieMissing { get; }
    internal static string AntiForgeryToken_DeserializationFailed { get; }
    internal static string AntiForgeryToken_FormFieldMissing { get; }
    internal static string AntiForgeryToken_SecurityTokenMismatch { get; }
    internal static string AntiForgeryToken_TokensSwapped { get; }
    internal static string AntiForgeryToken_UsernameMismatch { get; }
    internal static string AntiForgeryWorker_RequireSSL { get; }
    internal static string ApplicationPart_ModuleAlreadyRegistered { get; }
    internal static string ApplicationPart_ModuleAlreadyRegisteredForVirtualPath { get; }
    internal static string ApplicationPart_ModuleCannotBeFound { get; }
    internal static string ApplicationPart_ModuleNotRegistered { get; }
    internal static string ApplicationPart_ResourceNotFound { get; }
    internal static string ClaimUidExtractor_ClaimNotPresent { get; }
    internal static string ClaimUidExtractor_DefaultClaimsNotPresent { get; }
    internal static string DynamicDictionary_InvalidNumberOfIndexes { get; }
    internal static string DynamicHttpApplicationState_UseOnlyStringOrIntToGet { get; }
    internal static string DynamicHttpApplicationState_UseOnlyStringToSet { get; }
    internal static string HtmlHelper_ConversionThrew { get; }
    internal static string HtmlHelper_NoConverterExists { get; }
    internal static string HttpContextUnavailable { get; }
    internal static string SessionState_InvalidValue { get; }
    internal static string SessionState_TooManyValues { get; }
    internal static string StateStorage_RequestScopeNotAvailable { get; }
    internal static string StateStorage_ScopeIsReadOnly { get; }
    internal static string StateStorage_StorageScopesCannotBeCreated { get; }
    internal static string TokenValidator_AuthenticatedUserWithoutUsername { get; }
    internal static string UnobtrusiveJavascript_ValidationParameterCannotBeEmpty { get; }
    internal static string UnobtrusiveJavascript_ValidationParameterMustBeLegal { get; }
    internal static string UnobtrusiveJavascript_ValidationTypeCannotBeEmpty { get; }
    internal static string UnobtrusiveJavascript_ValidationTypeMustBeLegal { get; }
    internal static string UnobtrusiveJavascript_ValidationTypeMustBeUnique { get; }
    internal static string UrlData_ReadOnly { get; }
    internal static string ValidationDefault_DataType { get; }
    internal static string ValidationDefault_EqualsTo { get; }
    internal static string ValidationDefault_FloatRange { get; }
    internal static string ValidationDefault_IntegerRange { get; }
    internal static string ValidationDefault_Regex { get; }
    internal static string ValidationDefault_Required { get; }
    internal static string ValidationDefault_StringLength { get; }
    internal static string ValidationDefault_StringLengthRange { get; }
    internal static string WebPage_CannotRequestDirectly { get; }
    internal static string WebPage_FileNotSupported { get; }
    internal static string WebPage_InvalidPageType { get; }
    internal static string WebPage_LayoutPageNotFound { get; }
    internal static string WebPage_RenderBodyAlreadyCalled { get; }
    internal static string WebPage_RenderBodyNotCalled { get; }
    internal static string WebPage_SectionAleadyDefined { get; }
    internal static string WebPage_SectionAleadyRendered { get; }
    internal static string WebPage_SectionNotDefined { get; }
    internal static string WebPage_SectionsNotRendered { get; }
    internal static string WebPageRoute_UnderscoreBlocked { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AntiForgeryToken_AdditionalDataCheckFailed();
    internal static string get_AntiForgeryToken_ClaimUidMismatch();
    internal static string get_AntiForgeryToken_CookieMissing();
    internal static string get_AntiForgeryToken_DeserializationFailed();
    internal static string get_AntiForgeryToken_FormFieldMissing();
    internal static string get_AntiForgeryToken_SecurityTokenMismatch();
    internal static string get_AntiForgeryToken_TokensSwapped();
    internal static string get_AntiForgeryToken_UsernameMismatch();
    internal static string get_AntiForgeryWorker_RequireSSL();
    internal static string get_ApplicationPart_ModuleAlreadyRegistered();
    internal static string get_ApplicationPart_ModuleAlreadyRegisteredForVirtualPath();
    internal static string get_ApplicationPart_ModuleCannotBeFound();
    internal static string get_ApplicationPart_ModuleNotRegistered();
    internal static string get_ApplicationPart_ResourceNotFound();
    internal static string get_ClaimUidExtractor_ClaimNotPresent();
    internal static string get_ClaimUidExtractor_DefaultClaimsNotPresent();
    internal static string get_DynamicDictionary_InvalidNumberOfIndexes();
    internal static string get_DynamicHttpApplicationState_UseOnlyStringOrIntToGet();
    internal static string get_DynamicHttpApplicationState_UseOnlyStringToSet();
    internal static string get_HtmlHelper_ConversionThrew();
    internal static string get_HtmlHelper_NoConverterExists();
    internal static string get_HttpContextUnavailable();
    internal static string get_SessionState_InvalidValue();
    internal static string get_SessionState_TooManyValues();
    internal static string get_StateStorage_RequestScopeNotAvailable();
    internal static string get_StateStorage_ScopeIsReadOnly();
    internal static string get_StateStorage_StorageScopesCannotBeCreated();
    internal static string get_TokenValidator_AuthenticatedUserWithoutUsername();
    internal static string get_UnobtrusiveJavascript_ValidationParameterCannotBeEmpty();
    internal static string get_UnobtrusiveJavascript_ValidationParameterMustBeLegal();
    internal static string get_UnobtrusiveJavascript_ValidationTypeCannotBeEmpty();
    internal static string get_UnobtrusiveJavascript_ValidationTypeMustBeLegal();
    internal static string get_UnobtrusiveJavascript_ValidationTypeMustBeUnique();
    internal static string get_UrlData_ReadOnly();
    internal static string get_ValidationDefault_DataType();
    internal static string get_ValidationDefault_EqualsTo();
    internal static string get_ValidationDefault_FloatRange();
    internal static string get_ValidationDefault_IntegerRange();
    internal static string get_ValidationDefault_Regex();
    internal static string get_ValidationDefault_Required();
    internal static string get_ValidationDefault_StringLength();
    internal static string get_ValidationDefault_StringLengthRange();
    internal static string get_WebPage_CannotRequestDirectly();
    internal static string get_WebPage_FileNotSupported();
    internal static string get_WebPage_InvalidPageType();
    internal static string get_WebPage_LayoutPageNotFound();
    internal static string get_WebPage_RenderBodyAlreadyCalled();
    internal static string get_WebPage_RenderBodyNotCalled();
    internal static string get_WebPage_SectionAleadyDefined();
    internal static string get_WebPage_SectionAleadyRendered();
    internal static string get_WebPage_SectionNotDefined();
    internal static string get_WebPage_SectionsNotRendered();
    internal static string get_WebPageRoute_UnderscoreBlocked();
}
[ExtensionAttribute]
public static class System.Web.WebPages.ResponseExtensions : object {
    [ExtensionAttribute]
public static void SetStatus(HttpResponseBase response, HttpStatusCode httpStatusCode);
    [ExtensionAttribute]
public static void SetStatus(HttpResponseBase response, int httpStatusCode);
    [ExtensionAttribute]
public static void WriteBinary(HttpResponseBase response, Byte[] data, string mimeType);
    [ExtensionAttribute]
public static void WriteBinary(HttpResponseBase response, Byte[] data);
    [ExtensionAttribute]
public static void OutputCache(HttpResponseBase response, int numberOfSeconds, bool sliding, IEnumerable`1<string> varyByParams, IEnumerable`1<string> varyByHeaders, IEnumerable`1<string> varyByContentEncodings, HttpCacheability cacheability);
    internal static void OutputCache(HttpContextBase httpContext, HttpCachePolicyBase cache, int numberOfSeconds, bool sliding, IEnumerable`1<string> varyByParams, IEnumerable`1<string> varyByHeaders, IEnumerable`1<string> varyByContentEncodings, HttpCacheability cacheability);
}
internal class System.Web.WebPages.Scope.ApplicationScopeStorageDictionary : ScopeStorageDictionary {
    private static IDictionary`2<object, object> _innerDictionary;
    public ApplicationScopeStorageDictionary(WebConfigScopeDictionary webConfigState);
    private static ApplicationScopeStorageDictionary();
}
public class System.Web.WebPages.Scope.AspNetRequestScopeStorageProvider : object {
    private static object _pageScopeKey;
    private static object _requestScopeKey;
    private HttpContextBase _httpContext;
    private Func`1<bool> _appStartExecuted;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <ApplicationScope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public IDictionary`2<object, object> CurrentScope { get; public set; }
    public IDictionary`2<object, object> GlobalScope { get; }
    public IDictionary`2<object, object> ApplicationScope { get; private set; }
    public IDictionary`2<object, object> RequestScope { get; }
    private HttpContextBase HttpContext { get; }
    private IDictionary`2<object, object> RequestScopeInternal { get; }
    private IDictionary`2<object, object> PageScope { get; private set; }
    internal AspNetRequestScopeStorageProvider(HttpContextBase httpContext, Func`1<bool> appStartExecuted);
    private static AspNetRequestScopeStorageProvider();
    public sealed virtual IDictionary`2<object, object> get_CurrentScope();
    public sealed virtual void set_CurrentScope(IDictionary`2<object, object> value);
    public sealed virtual IDictionary`2<object, object> get_GlobalScope();
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_ApplicationScope();
    [CompilerGeneratedAttribute]
private void set_ApplicationScope(IDictionary`2<object, object> value);
    public IDictionary`2<object, object> get_RequestScope();
    private HttpContextBase get_HttpContext();
    private IDictionary`2<object, object> get_RequestScopeInternal();
    private IDictionary`2<object, object> get_PageScope();
    private void set_PageScope(IDictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0();
}
public interface System.Web.WebPages.Scope.IScopeStorageProvider {
    public IDictionary`2<object, object> CurrentScope { get; public set; }
    public IDictionary`2<object, object> GlobalScope { get; }
    public abstract virtual IDictionary`2<object, object> get_CurrentScope();
    public abstract virtual void set_CurrentScope(IDictionary`2<object, object> value);
    public abstract virtual IDictionary`2<object, object> get_GlobalScope();
}
public static class System.Web.WebPages.Scope.ScopeStorage : object {
    private static IScopeStorageProvider _defaultStorageProvider;
    private static IScopeStorageProvider _stateStorageProvider;
    public static IScopeStorageProvider CurrentProvider { get; public set; }
    public static IDictionary`2<object, object> CurrentScope { get; }
    public static IDictionary`2<object, object> GlobalScope { get; }
    private static ScopeStorage();
    public static IScopeStorageProvider get_CurrentProvider();
    public static void set_CurrentProvider(IScopeStorageProvider value);
    public static IDictionary`2<object, object> get_CurrentScope();
    public static IDictionary`2<object, object> get_GlobalScope();
    public static IDisposable CreateTransientScope(IDictionary`2<object, object> context);
    public static IDisposable CreateTransientScope();
}
internal class System.Web.WebPages.Scope.ScopeStorageComparer : object {
    private static IEqualityComparer`1<object> _instance;
    private IEqualityComparer`1<object> _defaultComparer;
    private IEqualityComparer`1<string> _stringComparer;
    public static IEqualityComparer`1<object> Instance { get; }
    public static IEqualityComparer`1<object> get_Instance();
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Web.WebPages.Scope.ScopeStorageDictionary : object {
    private static StateStorageKeyValueComparer _keyValueComparer;
    private IDictionary`2<object, object> _baseScope;
    private IDictionary`2<object, object> _backingStore;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<object, object>, object> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<object, object>, object> CS$<>9__CachedAnonymousMethodDelegate3;
    protected IDictionary`2<object, object> BackingStore { get; }
    protected IDictionary`2<object, object> BaseScope { get; }
    public ICollection`1<object> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public ScopeStorageDictionary(IDictionary`2<object, object> baseScope);
    internal ScopeStorageDictionary(IDictionary`2<object, object> baseScope, IDictionary`2<object, object> backingStore);
    private static ScopeStorageDictionary();
    protected IDictionary`2<object, object> get_BackingStore();
    protected IDictionary`2<object, object> get_BaseScope();
    public virtual ICollection`1<object> get_Keys();
    public virtual ICollection`1<object> get_Values();
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public virtual void SetValue(object key, object value);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual bool Remove(object key);
    public virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(object key, object value);
    public virtual bool ContainsKey(object key);
    public virtual void Add(KeyValuePair`2<object, object> item);
    public virtual void Clear();
    public virtual bool Contains(KeyValuePair`2<object, object> item);
    public virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public virtual bool Remove(KeyValuePair`2<object, object> item);
    protected virtual IEnumerable`1<KeyValuePair`2<object, object>> GetItems();
    [CompilerGeneratedAttribute]
private static object <get_Keys>b__0(KeyValuePair`2<object, object> item);
    [CompilerGeneratedAttribute]
private static object <get_Values>b__2(KeyValuePair`2<object, object> item);
}
public class System.Web.WebPages.Scope.StaticScopeStorageProvider : object {
    private static IDictionary`2<object, object> _defaultContext;
    private IDictionary`2<object, object> _currentContext;
    public IDictionary`2<object, object> CurrentScope { get; public set; }
    public IDictionary`2<object, object> GlobalScope { get; }
    private static StaticScopeStorageProvider();
    public sealed virtual IDictionary`2<object, object> get_CurrentScope();
    public sealed virtual void set_CurrentScope(IDictionary`2<object, object> value);
    public sealed virtual IDictionary`2<object, object> get_GlobalScope();
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.Scope.WebConfigScopeDictionary : object {
    private Lazy`1<Dictionary`2<object, object>> _items;
    private IDictionary`2<object, object> Items { get; }
    public ICollection`1<object> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public WebConfigScopeDictionary(NameValueCollection appSettings);
    private IDictionary`2<object, object> get_Items();
    public sealed virtual ICollection`1<object> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual bool TryGetValue(object key, Object& value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(object key, object value);
    public sealed virtual bool ContainsKey(object key);
    public sealed virtual bool Remove(object key);
    public sealed virtual void Add(KeyValuePair`2<object, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<object, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<object, object> item);
}
public class System.Web.WebPages.SectionWriter : MulticastDelegate {
    public SectionWriter(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Web.WebPages.SessionStateUtil : object {
    private static ConcurrentDictionary`2<Type, Nullable`1<SessionStateBehavior>> _sessionStateBehaviorCache;
    private static SessionStateUtil();
    internal static void SetUpSessionState(HttpContextBase context, IHttpHandler handler);
    internal static void SetUpSessionState(HttpContextBase context, IHttpHandler handler, ConcurrentDictionary`2<Type, Nullable`1<SessionStateBehavior>> cache);
    private static Nullable`1<SessionStateBehavior> GetSessionStateBehavior(WebPageExecutingBase page, ConcurrentDictionary`2<Type, Nullable`1<SessionStateBehavior>> cache);
}
public abstract class System.Web.WebPages.StartPage : WebPageRenderingBase {
    [CompilerGeneratedAttribute]
private WebPageRenderingBase <ChildPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunPageCalled>k__BackingField;
    public WebPageRenderingBase ChildPage { get; public set; }
    public HttpContextBase Context { get; public set; }
    public string Layout { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; }
    [DynamicAttribute]
public object Page { get; }
    internal bool RunPageCalled { get; internal set; }
    [CompilerGeneratedAttribute]
public WebPageRenderingBase get_ChildPage();
    [CompilerGeneratedAttribute]
public void set_ChildPage(WebPageRenderingBase value);
    public virtual HttpContextBase get_Context();
    public virtual void set_Context(HttpContextBase value);
    public virtual string get_Layout();
    public virtual void set_Layout(string value);
    public virtual IDictionary`2<object, object> get_PageData();
    public virtual object get_Page();
    [CompilerGeneratedAttribute]
internal bool get_RunPageCalled();
    [CompilerGeneratedAttribute]
internal void set_RunPageCalled(bool value);
    public virtual void ExecutePageHierarchy();
    public static WebPageRenderingBase GetStartPage(WebPageRenderingBase page, string fileName, IEnumerable`1<string> supportedExtensions);
    internal static WebPageRenderingBase GetStartPage(WebPageRenderingBase page, IVirtualPathFactory virtualPathFactory, string appDomainAppVirtualPath, string fileName, IEnumerable`1<string> supportedExtensions);
    public virtual HelperResult RenderPage(string path, Object[] data);
    public void RunPage();
    public virtual void Write(HelperResult result);
    public virtual void WriteLiteral(object value);
    public virtual void Write(object value);
    protected internal virtual TextWriter GetOutputWriter();
}
[ExtensionAttribute]
public static class System.Web.WebPages.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsEmpty(string value);
    [ExtensionAttribute]
public static int AsInt(string value);
    [ExtensionAttribute]
public static int AsInt(string value, int defaultValue);
    [ExtensionAttribute]
public static decimal AsDecimal(string value);
    [ExtensionAttribute]
public static decimal AsDecimal(string value, decimal defaultValue);
    [ExtensionAttribute]
public static float AsFloat(string value);
    [ExtensionAttribute]
public static float AsFloat(string value, float defaultValue);
    [ExtensionAttribute]
public static DateTime AsDateTime(string value);
    [ExtensionAttribute]
public static DateTime AsDateTime(string value, DateTime defaultValue);
    [ExtensionAttribute]
public static TValue As(string value);
    [ExtensionAttribute]
public static bool AsBool(string value);
    [ExtensionAttribute]
public static bool AsBool(string value, bool defaultValue);
    [ExtensionAttribute]
public static TValue As(string value, TValue defaultValue);
    [ExtensionAttribute]
public static bool IsBool(string value);
    [ExtensionAttribute]
public static bool IsInt(string value);
    [ExtensionAttribute]
public static bool IsDecimal(string value);
    [ExtensionAttribute]
public static bool IsFloat(string value);
    [ExtensionAttribute]
public static bool IsDateTime(string value);
    [ExtensionAttribute]
public static bool Is(string value);
}
public class System.Web.WebPages.TemplateFileInfo : object {
    private string _virtualPath;
    public string VirtualPath { get; }
    public TemplateFileInfo(string virtualPath);
    public string get_VirtualPath();
}
public static class System.Web.WebPages.TemplateStack : object {
    private static object _contextKey;
    private static TemplateStack();
    public static ITemplateFile GetCurrentTemplate(HttpContextBase httpContext);
    public static ITemplateFile Pop(HttpContextBase httpContext);
    public static void Push(HttpContextBase httpContext, ITemplateFile templateFile);
    private static Stack`1<ITemplateFile> GetStack(HttpContextBase httpContext);
}
internal static class System.Web.WebPages.TypeHelper : object {
    internal static IDictionary`2<string, object> ObjectToDictionary(object value);
    internal static void AddAnonymousObjectToDictionary(IDictionary`2<string, object> dictionary, object value);
    internal static bool IsAnonymousType(Type type);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.WebPages.UrlDataList : object {
    private List`1<string> _urlData;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    public UrlDataList(string pathInfo);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Web.WebPages.UrlUtil : object {
    internal static string Url(string basePath, string path, Object[] pathParts);
    internal static string BuildUrl(string path, Object[] pathParts);
    private static bool IsDisplayableType(Type t);
}
internal class System.Web.WebPages.ValidationAttributeAdapter : RequestFieldValidatorBase {
    private ValidationAttribute _attribute;
    private ModelClientValidationRule _clientValidationRule;
    public ValidationAttribute Attribute { get; }
    public ModelClientValidationRule ClientValidationRule { get; }
    public ValidationAttributeAdapter(ValidationAttribute attribute, string errorMessage, ModelClientValidationRule clientValidationRule);
    public ValidationAttributeAdapter(ValidationAttribute attribute, string errorMessage, ModelClientValidationRule clientValidationRule, bool useUnvalidatedValues);
    public ValidationAttribute get_Attribute();
    public virtual ModelClientValidationRule get_ClientValidationRule();
    protected virtual bool IsValid(HttpContextBase httpContext, string value);
}
public class System.Web.WebPages.ValidationHelper : object {
    private static object _invalidCssClassKey;
    private static object _validCssClassKey;
    private static IDictionary`2<object, object> _scopeOverride;
    private Dictionary`2<string, List`1<IValidator>> _validators;
    private HttpContextBase _httpContext;
    private ModelStateDictionary _modelStateDictionary;
    [CompilerGeneratedAttribute]
private static Func`2<IValidator, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ValidationResult, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<ValidationResult, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ValidationResult, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<IValidator, <>f__AnonymousType0`2<IValidator, ModelClientValidationRule>> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<IValidator, ModelClientValidationRule>, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<IValidator, ModelClientValidationRule>, ModelClientValidationRule> CS$<>9__CachedAnonymousMethodDelegate17;
    public static string ValidCssClass { get; public set; }
    public static string InvalidCssClass { get; public set; }
    public string FormField { get; }
    internal static IDictionary`2<object, object> Scope { get; }
    internal ValidationHelper(HttpContextBase httpContext, ModelStateDictionary modelStateDictionary);
    private static ValidationHelper();
    public static string get_ValidCssClass();
    public static void set_ValidCssClass(string value);
    public static string get_InvalidCssClass();
    public static void set_InvalidCssClass(string value);
    public string get_FormField();
    internal static IDictionary`2<object, object> get_Scope();
    public void RequireField(string field);
    public void RequireField(string field, string errorMessage);
    public void RequireFields(String[] fields);
    public void Add(string field, IValidator[] validators);
    public void Add(IEnumerable`1<string> fields, IValidator[] validators);
    public void AddFormError(string errorMessage);
    public bool IsValid(String[] fields);
    public IEnumerable`1<ValidationResult> Validate(String[] fields);
    public IEnumerable`1<string> GetErrors(String[] fields);
    public HtmlString For(string field);
    public HtmlString ClassFor(string field);
    internal static IDisposable OverrideScope();
    internal IDictionary`2<string, object> GetUnobtrusiveValidationAttributes(string field);
    private IEnumerable`1<ValidationResult> ValidateFieldsAndUpdateModelState(IEnumerable`1<string> fields);
    private void AddFieldValidators(string field, IValidator[] validators);
    private IEnumerable`1<ValidationResult> ValidateField(string field, ValidationContext context);
    private IEnumerable`1<ModelClientValidationRule> GetClientValidationRules(string field);
    internal static HtmlString GenerateHtmlFromClientValidationRules(IEnumerable`1<ModelClientValidationRule> clientRules);
    [CompilerGeneratedAttribute]
private static bool <Add>b__0(IValidator v);
    [CompilerGeneratedAttribute]
private static string <GetErrors>b__2(ValidationResult r);
    [CompilerGeneratedAttribute]
private static void <OverrideScope>b__4();
    [CompilerGeneratedAttribute]
private static string <ValidateFieldsAndUpdateModelState>b__6(ValidationResult c);
    [CompilerGeneratedAttribute]
private static bool <ValidateField>b__d(ValidationResult result);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<IValidator, ModelClientValidationRule> <GetClientValidationRules>b__12(IValidator item);
    [CompilerGeneratedAttribute]
private static bool <GetClientValidationRules>b__13(<>f__AnonymousType0`2<IValidator, ModelClientValidationRule> <>h__TransparentIdentifier11);
    [CompilerGeneratedAttribute]
private static ModelClientValidationRule <GetClientValidationRules>b__14(<>f__AnonymousType0`2<IValidator, ModelClientValidationRule> <>h__TransparentIdentifier11);
}
public abstract class System.Web.WebPages.Validator : object {
    public static IValidator Required(string errorMessage);
    public static IValidator Range(int minValue, int maxValue, string errorMessage);
    public static IValidator Range(double minValue, double maxValue, string errorMessage);
    public static IValidator StringLength(int maxLength, int minLength, string errorMessage);
    public static IValidator Regex(string pattern, string errorMessage);
    public static IValidator EqualsTo(string otherFieldName, string errorMessage);
    public static IValidator DateTime(string errorMessage);
    public static IValidator Decimal(string errorMessage);
    public static IValidator Integer(string errorMessage);
    public static IValidator Url(string errorMessage);
    public static IValidator Float(string errorMessage);
    private static string DefaultIfEmpty(string errorMessage, string defaultErrorMessage);
}
[ExtensionAttribute]
internal static class System.Web.WebPages.VirtualPathFactoryExtensions : object {
    [ExtensionAttribute]
public static T CreateInstance(IVirtualPathFactory factory, string virtualPath);
}
public class System.Web.WebPages.VirtualPathFactoryManager : object {
    private static Lazy`1<VirtualPathFactoryManager> _instance;
    private LinkedList`1<IVirtualPathFactory> _virtualPathFactories;
    [CompilerGeneratedAttribute]
private static Func`1<VirtualPathFactoryManager> CS$<>9__CachedAnonymousMethodDelegate7;
    internal static VirtualPathFactoryManager Instance { get; }
    internal IEnumerable`1<IVirtualPathFactory> RegisteredFactories { get; }
    internal VirtualPathFactoryManager(IVirtualPathFactory defaultFactory);
    private static VirtualPathFactoryManager();
    internal static VirtualPathFactoryManager get_Instance();
    internal IEnumerable`1<IVirtualPathFactory> get_RegisteredFactories();
    public static void RegisterVirtualPathFactory(IVirtualPathFactory virtualPathFactory);
    internal void RegisterVirtualPathFactoryInternal(IVirtualPathFactory virtualPathFactory);
    public sealed virtual bool Exists(string virtualPath);
    public sealed virtual object CreateInstance(string virtualPath);
    internal T CreateInstanceOfType(string virtualPath);
    [CompilerGeneratedAttribute]
private static VirtualPathFactoryManager <.cctor>b__6();
}
public abstract class System.Web.WebPages.WebPage : WebPageBase {
    private static List`1<IWebPageRequestExecutor> _executors;
    private HttpContextBase _context;
    [DynamicAttribute]
private object _model;
    [CompilerGeneratedAttribute]
private bool <TopLevelPage>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlHelper <Html>k__BackingField;
    internal bool TopLevelPage { get; internal set; }
    public HttpContextBase Context { get; public set; }
    public HtmlHelper Html { get; private set; }
    public ValidationHelper Validation { get; }
    [DynamicAttribute]
public object Model { get; }
    public ModelStateDictionary ModelState { get; }
    private static WebPage();
    [CompilerGeneratedAttribute]
internal bool get_TopLevelPage();
    [CompilerGeneratedAttribute]
internal void set_TopLevelPage(bool value);
    public virtual HttpContextBase get_Context();
    public virtual void set_Context(HttpContextBase value);
    [CompilerGeneratedAttribute]
public HtmlHelper get_Html();
    [CompilerGeneratedAttribute]
private void set_Html(HtmlHelper value);
    public ValidationHelper get_Validation();
    public object get_Model();
    public ModelStateDictionary get_ModelState();
    public static void RegisterPageExecutor(IWebPageRequestExecutor executor);
    public virtual void ExecutePageHierarchy();
    internal void ExecutePageHierarchy(IEnumerable`1<IWebPageRequestExecutor> executors);
    public virtual HelperResult RenderPage(string path, Object[] data);
    protected virtual void InitializePage();
    [CompilerGeneratedAttribute]
private bool <ExecutePageHierarchy>b__3(IWebPageRequestExecutor executor);
}
public abstract class System.Web.WebPages.WebPageBase : WebPageRenderingBase {
    private HashSet`1<string> _renderedSections;
    private bool _renderedBody;
    private Action`1<TextWriter> _body;
    private TextWriter _tempWriter;
    private TextWriter _currentWriter;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private DynamicPageDataDictionary`1<object> _dynamicPageData;
    [CompilerGeneratedAttribute]
private string <Layout>k__BackingField;
    public string Layout { get; public set; }
    public TextWriter Output { get; }
    public Stack`1<TextWriter> OutputStack { get; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; }
    [DynamicAttribute]
public object Page { get; }
    private Dictionary`2<string, SectionWriter> PreviousSectionWriters { get; }
    private Dictionary`2<string, SectionWriter> SectionWriters { get; }
    private Stack`1<Dictionary`2<string, SectionWriter>> SectionWritersStack { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Layout();
    [CompilerGeneratedAttribute]
public virtual void set_Layout(string value);
    public TextWriter get_Output();
    public Stack`1<TextWriter> get_OutputStack();
    public virtual IDictionary`2<object, object> get_PageData();
    public virtual object get_Page();
    private Dictionary`2<string, SectionWriter> get_PreviousSectionWriters();
    private Dictionary`2<string, SectionWriter> get_SectionWriters();
    private Stack`1<Dictionary`2<string, SectionWriter>> get_SectionWritersStack();
    protected virtual void ConfigurePage(WebPageBase parentPage);
    public static WebPageBase CreateInstanceFromVirtualPath(string virtualPath);
    internal static WebPageBase CreateInstanceFromVirtualPath(string virtualPath, IVirtualPathFactory virtualPathFactory);
    private WebPageBase CreatePageFromVirtualPath(string virtualPath, HttpContextBase httpContext, Func`2<string, bool> virtualPathExists, DisplayModeProvider displayModeProvider, IDisplayMode displayMode);
    private WebPageContext CreatePageContextFromParameters(bool isLayoutPage, Object[] data);
    public void DefineSection(string name, SectionWriter action);
    internal void EnsurePageCanBeRequestedDirectly(string methodName);
    public void ExecutePageHierarchy(WebPageContext pageContext, TextWriter writer);
    public void ExecutePageHierarchy(WebPageContext pageContext, TextWriter writer, WebPageRenderingBase startPage);
    public virtual void ExecutePageHierarchy();
    protected virtual void InitializePage();
    public bool IsSectionDefined(string name);
    public void PopContext();
    public void PushContext(WebPageContext pageContext, TextWriter writer);
    public HelperResult RenderBody();
    public virtual HelperResult RenderPage(string path, Object[] data);
    private HelperResult RenderPageCore(string path, bool isLayoutPage, Object[] data);
    public HelperResult RenderSection(string name);
    public HelperResult RenderSection(string name, bool required);
    private void RenderSurrounding(string partialViewName, Action`1<TextWriter> body);
    private void VerifyRenderedBodyOrSections();
    public virtual void Write(HelperResult result);
    public virtual void Write(object value);
    public virtual void WriteLiteral(object value);
    protected internal virtual TextWriter GetOutputWriter();
    [CompilerGeneratedAttribute]
private void <RenderBody>b__4(TextWriter tw);
}
public class System.Web.WebPages.WebPageContext : object {
    private static object _sourceFileKey;
    private Stack`1<TextWriter> _outputStack;
    private Stack`1<Dictionary`2<string, SectionWriter>> _sectionWritersStack;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<object, object> _pageData;
    private ValidationHelper _validation;
    private ModelStateDictionary _modelStateDictionary;
    [CompilerGeneratedAttribute]
private HttpContextBase <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TextWriter> <BodyAction>k__BackingField;
    [CompilerGeneratedAttribute]
private WebPageRenderingBase <Page>k__BackingField;
    public static WebPageContext Current { get; }
    internal HttpContextBase HttpContext { get; internal set; }
    public object Model { get; internal set; }
    internal ModelStateDictionary ModelState { get; }
    internal ValidationHelper Validation { get; private set; }
    internal Action`1<TextWriter> BodyAction { get; internal set; }
    internal Stack`1<TextWriter> OutputStack { get; internal set; }
    public WebPageRenderingBase Page { get; internal set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; internal set; }
    internal Stack`1<Dictionary`2<string, SectionWriter>> SectionWritersStack { get; internal set; }
    internal HashSet`1<string> SourceFiles { get; }
    public WebPageContext(HttpContextBase context, WebPageRenderingBase page, object model);
    private static WebPageContext();
    public static WebPageContext get_Current();
    [CompilerGeneratedAttribute]
internal HttpContextBase get_HttpContext();
    [CompilerGeneratedAttribute]
internal void set_HttpContext(HttpContextBase value);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(object value);
    internal ModelStateDictionary get_ModelState();
    internal ValidationHelper get_Validation();
    private void set_Validation(ValidationHelper value);
    [CompilerGeneratedAttribute]
internal Action`1<TextWriter> get_BodyAction();
    [CompilerGeneratedAttribute]
internal void set_BodyAction(Action`1<TextWriter> value);
    internal Stack`1<TextWriter> get_OutputStack();
    internal void set_OutputStack(Stack`1<TextWriter> value);
    [CompilerGeneratedAttribute]
public WebPageRenderingBase get_Page();
    [CompilerGeneratedAttribute]
internal void set_Page(WebPageRenderingBase value);
    public IDictionary`2<object, object> get_PageData();
    internal void set_PageData(IDictionary`2<object, object> value);
    internal Stack`1<Dictionary`2<string, SectionWriter>> get_SectionWritersStack();
    internal void set_SectionWritersStack(Stack`1<Dictionary`2<string, SectionWriter>> value);
    internal HashSet`1<string> get_SourceFiles();
    internal static WebPageContext CreateNestedPageContext(WebPageContext parentContext, IDictionary`2<object, object> pageData, TModel model, bool isLayoutPage);
}
public abstract class System.Web.WebPages.WebPageExecutingBase : object {
    private IVirtualPathFactory _virtualPathFactory;
    private DynamicHttpApplicationState _dynamicAppState;
    private InstrumentationService _instrumentationService;
    [CompilerGeneratedAttribute]
private HttpContextBase <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    internal InstrumentationService InstrumentationService { get; internal set; }
    public HttpApplicationStateBase AppState { get; }
    [DynamicAttribute]
public object App { get; }
    public HttpContextBase Context { get; public set; }
    public string VirtualPath { get; public set; }
    [EditorBrowsableAttribute("1")]
public IVirtualPathFactory VirtualPathFactory { get; public set; }
    internal InstrumentationService get_InstrumentationService();
    internal void set_InstrumentationService(InstrumentationService value);
    public virtual HttpApplicationStateBase get_AppState();
    public virtual object get_App();
    [CompilerGeneratedAttribute]
public virtual HttpContextBase get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(HttpContextBase value);
    [CompilerGeneratedAttribute]
public virtual string get_VirtualPath();
    [CompilerGeneratedAttribute]
public virtual void set_VirtualPath(string value);
    public virtual IVirtualPathFactory get_VirtualPathFactory();
    public virtual void set_VirtualPathFactory(IVirtualPathFactory value);
    [EditorBrowsableAttribute("1")]
public abstract virtual void Execute();
    public virtual string Href(string path, Object[] pathParts);
    protected internal void BeginContext(int startPosition, int length, bool isLiteral);
    protected internal void BeginContext(string virtualPath, int startPosition, int length, bool isLiteral);
    protected internal void BeginContext(TextWriter writer, int startPosition, int length, bool isLiteral);
    protected internal void BeginContext(TextWriter writer, string virtualPath, int startPosition, int length, bool isLiteral);
    protected internal void EndContext(int startPosition, int length, bool isLiteral);
    protected internal void EndContext(string virtualPath, int startPosition, int length, bool isLiteral);
    protected internal void EndContext(TextWriter writer, int startPosition, int length, bool isLiteral);
    protected internal void EndContext(TextWriter writer, string virtualPath, int startPosition, int length, bool isLiteral);
    internal virtual string GetDirectory(string virtualPath);
    internal string NormalizeLayoutPagePath(string layoutPagePath);
    public virtual string NormalizePath(string path);
    public abstract virtual void Write(HelperResult result);
    public abstract virtual void Write(object value);
    public abstract virtual void WriteLiteral(object value);
    public virtual void WriteAttribute(string name, PositionTagged`1<string> prefix, PositionTagged`1<string> suffix, AttributeValue[] values);
    public virtual void WriteAttributeTo(TextWriter writer, string name, PositionTagged`1<string> prefix, PositionTagged`1<string> suffix, AttributeValue[] values);
    protected internal virtual void WriteAttributeTo(string pageVirtualPath, TextWriter writer, string name, PositionTagged`1<string> prefix, PositionTagged`1<string> suffix, AttributeValue[] values);
    private void WritePositionTaggedLiteral(TextWriter writer, string pageVirtualPath, string value, int position);
    private void WritePositionTaggedLiteral(TextWriter writer, string pageVirtualPath, PositionTagged`1<string> value);
    public static void WriteTo(TextWriter writer, HelperResult content);
    public static void WriteTo(TextWriter writer, object content);
    public static void WriteLiteralTo(TextWriter writer, object content);
    protected internal virtual TextWriter GetOutputWriter();
}
public class System.Web.WebPages.WebPageHttpHandler : object {
    internal static string StartPageFileName;
    public static string WebPagesVersionHeaderName;
    private static List`1<string> _supportedExtensions;
    internal static string WebPagesVersion;
    private WebPage _webPage;
    private Lazy`1<WebPageRenderingBase> _startPage;
    [CompilerGeneratedAttribute]
private static bool <DisableWebPagesResponseHeader>k__BackingField;
    public static bool DisableWebPagesResponseHeader { get; public set; }
    public bool IsReusable { get; }
    internal WebPage RequestedPage { get; }
    internal WebPageRenderingBase StartPage { get; }
    public WebPageHttpHandler(WebPage webPage);
    internal WebPageHttpHandler(WebPage webPage, Lazy`1<WebPageRenderingBase> startPage);
    private static WebPageHttpHandler();
    [CompilerGeneratedAttribute]
public static bool get_DisableWebPagesResponseHeader();
    [CompilerGeneratedAttribute]
public static void set_DisableWebPagesResponseHeader(bool value);
    public virtual bool get_IsReusable();
    internal WebPage get_RequestedPage();
    internal WebPageRenderingBase get_StartPage();
    internal static void AddVersionHeader(HttpContextBase httpContext);
    public static IHttpHandler CreateFromVirtualPath(string virtualPath);
    internal static IHttpHandler CreateFromVirtualPath(string virtualPath, IVirtualPathFactory virtualPathFactory);
    public static ReadOnlyCollection`1<string> GetRegisteredExtensions();
    private static string GetVersionString();
    private static bool HandleError(Exception e);
    internal static void GenerateSourceFilesHeader(WebPageContext context);
    public virtual void ProcessRequest(HttpContext context);
    internal void ProcessRequestInternal(HttpContext context);
    internal void ProcessRequestInternal(HttpContextBase httpContext);
    public static void RegisterExtension(string extension);
    internal static bool ShouldGenerateSourceHeader(HttpContextBase context);
}
internal class System.Web.WebPages.WebPageHttpModule : object {
    internal static EventHandler Initialize;
    internal static EventHandler ApplicationStart;
    internal static EventHandler BeginRequest;
    internal static EventHandler EndRequest;
    private static bool _appStartExecuted;
    private static object _appStartExecutedLock;
    private static object _hasBeenRegisteredKey;
    [CompilerGeneratedAttribute]
private static bool <AppStartExecuteCompleted>k__BackingField;
    internal static bool AppStartExecuteCompleted { get; internal set; }
    private static WebPageHttpModule();
    [CompilerGeneratedAttribute]
internal static bool get_AppStartExecuteCompleted();
    [CompilerGeneratedAttribute]
internal static void set_AppStartExecuteCompleted(bool value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication application);
    internal static void InitApplication(HttpApplication application);
    internal static void InitializeApplication(HttpApplication application);
    internal static void InitializeApplication(HttpApplication application, EventHandler onApplicationPostResolveRequestCache, EventHandler initialize);
    internal static void StartApplication(HttpApplication application);
    internal static void StartApplication(HttpApplication application, Action`1<HttpApplication> executeStartPage, EventHandler applicationStart);
    internal static void OnApplicationPostResolveRequestCache(object sender, EventArgs e);
    internal static void OnBeginRequest(object sender, EventArgs e);
    internal static void OnEndRequest(object sender, EventArgs e);
}
internal class System.Web.WebPages.WebPageMatch : object {
    [CompilerGeneratedAttribute]
private string <MatchedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    public string MatchedPath { get; private set; }
    public string PathInfo { get; private set; }
    public WebPageMatch(string matchedPath, string pathInfo);
    [CompilerGeneratedAttribute]
public string get_MatchedPath();
    [CompilerGeneratedAttribute]
private void set_MatchedPath(string value);
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
private void set_PathInfo(string value);
}
public abstract class System.Web.WebPages.WebPageRenderingBase : WebPageExecutingBase {
    private IPrincipal _user;
    private UrlDataList _urlData;
    private TemplateFileInfo _templateFileInfo;
    private DisplayModeProvider _displayModeProvider;
    [CompilerGeneratedAttribute]
private WebPageContext <PageContext>k__BackingField;
    public Cache Cache { get; }
    internal DisplayModeProvider DisplayModeProvider { get; internal set; }
    protected internal IDisplayMode DisplayMode { get; }
    public string Layout { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> PageData { get; }
    [DynamicAttribute]
public object Page { get; }
    public WebPageContext PageContext { get; internal set; }
    public ProfileBase Profile { get; }
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    public HttpServerUtilityBase Server { get; }
    public HttpSessionStateBase Session { get; }
    public IList`1<string> UrlData { get; }
    public IPrincipal User { get; internal set; }
    public TemplateFileInfo TemplateInfo { get; }
    public bool IsPost { get; }
    public bool IsAjax { get; }
    public string Culture { get; public set; }
    public string UICulture { get; public set; }
    public virtual Cache get_Cache();
    internal DisplayModeProvider get_DisplayModeProvider();
    internal void set_DisplayModeProvider(DisplayModeProvider value);
    protected internal IDisplayMode get_DisplayMode();
    public abstract virtual string get_Layout();
    public abstract virtual void set_Layout(string value);
    public abstract virtual IDictionary`2<object, object> get_PageData();
    public abstract virtual object get_Page();
    [CompilerGeneratedAttribute]
public WebPageContext get_PageContext();
    [CompilerGeneratedAttribute]
internal void set_PageContext(WebPageContext value);
    public ProfileBase get_Profile();
    public virtual HttpRequestBase get_Request();
    public virtual HttpResponseBase get_Response();
    public virtual HttpServerUtilityBase get_Server();
    public virtual HttpSessionStateBase get_Session();
    public virtual IList`1<string> get_UrlData();
    public virtual IPrincipal get_User();
    internal virtual void set_User(IPrincipal value);
    public virtual TemplateFileInfo get_TemplateInfo();
    public virtual bool get_IsPost();
    public virtual bool get_IsAjax();
    public string get_Culture();
    public void set_Culture(string value);
    public string get_UICulture();
    public void set_UICulture(string value);
    public abstract virtual void ExecutePageHierarchy();
    public abstract virtual HelperResult RenderPage(string path, Object[] data);
}
internal class System.Web.WebPages.WebPageRoute : object {
    private static Lazy`1<bool> _isRootExplicitlyDisabled;
    private IVirtualPathFactory _virtualPathFactory;
    private Nullable`1<bool> _isExplicitlyDisabled;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate1;
    internal IVirtualPathFactory VirtualPathFactory { get; internal set; }
    internal bool IsExplicitlyDisabled { get; internal set; }
    private static WebPageRoute();
    internal IVirtualPathFactory get_VirtualPathFactory();
    internal void set_VirtualPathFactory(IVirtualPathFactory value);
    internal bool get_IsExplicitlyDisabled();
    internal void set_IsExplicitlyDisabled(bool value);
    internal void DoPostResolveRequestCache(HttpContextBase context);
    private static bool FileExists(string virtualPath, IVirtualPathFactory virtualPathFactory);
    internal static WebPageMatch GetWebPageMatch(HttpContextBase context);
    private static string GetRouteLevelMatch(string pathValue, IEnumerable`1<string> supportedExtensions, IVirtualPathFactory virtualPathFactory, HttpContextBase context, DisplayModeProvider displayModeProvider);
    internal static WebPageMatch MatchRequest(string pathValue, IEnumerable`1<string> supportedExtensions, IVirtualPathFactory virtualPathFactory, HttpContextBase context, DisplayModeProvider displayModes);
    private static WebPageMatch MatchDefaultFiles(string pathValue, IEnumerable`1<string> supportedExtensions, IVirtualPathFactory virtualPathFactory, HttpContextBase context, DisplayModeProvider displayModes, string currentLevel);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__0();
}
