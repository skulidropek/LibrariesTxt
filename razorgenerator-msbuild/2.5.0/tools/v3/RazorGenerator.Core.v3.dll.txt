public class RazorGenerator.Core.AddGeneratedClassAttribute : RazorCodeTransformerBase {
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public class RazorGenerator.Core.AddPageVirtualPathAttribute : RazorCodeTransformerBase {
    private static string VirtualPathDirectiveKey;
    private string _projectRelativePath;
    private string _overriddenVirtualPath;
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public abstract class RazorGenerator.Core.AggregateCodeTransformer : RazorCodeTransformerBase {
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    protected abstract virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
    public virtual string ProcessOutput(string codeContent);
}
public class RazorGenerator.Core.DirectivesBasedTransformers : AggregateCodeTransformer {
    public static string TypeVisibilityKey;
    public static string DisableLinePragmasKey;
    public static string TrimLeadingUnderscoresKey;
    public static string GenerateAbsolutePathLinePragmas;
    public static string NamespaceKey;
    public static string ExcludeFromCodeCoverage;
    public static string SuffixFileName;
    public static string GenericParametersKey;
    public static string ImportsKey;
    public static string BaseType;
    private List`1<RazorCodeTransformerBase> _transformers;
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    private static DirectivesBasedTransformers();
    protected virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    private static Nullable`1<bool> ReadSwitchValue(IDictionary`2<string, string> directives, string key);
}
public class RazorGenerator.Core.ExcludeFromCodeCoverageTransformer : RazorCodeTransformerBase {
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public class RazorGenerator.Core.GeneratePrettyNamesTransformer : RazorCodeTransformerBase {
    public static string DirectiveName;
    public static string VsNamespaceKey;
    private bool _trimLeadingUnderscores;
    public GeneratePrettyNamesTransformer(bool trimLeadingUnderscores);
    private static GeneratePrettyNamesTransformer();
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
}
public class RazorGenerator.Core.GenericParametersTransformer : RazorCodeTransformerBase {
    private String[] _parameters;
    public GenericParametersTransformer(IEnumerable`1<string> parameters);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public class RazorGenerator.Core.MakeTypeHelper : RazorCodeTransformerBase {
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public class RazorGenerator.Core.MakeTypePartial : RazorCodeTransformerBase {
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public class RazorGenerator.Core.MakeTypeStatic : RazorCodeTransformerBase {
    public virtual string ProcessOutput(string codeContent);
}
[ExportAttribute("RazorGenerator.Core.IHostProvider")]
public class RazorGenerator.Core.Mvc3.RazorHostProvider : object {
    public sealed virtual IRazorHost GetRazorHost(string projectRelativePath, string fullPath, IRazorCodeTransformer codeTransformer, CodeDomProvider codeDomProvider, IDictionary`2<string, string> directives);
}
[ExportAttribute("MvcHelper", "RazorGenerator.Core.IRazorCodeTransformer")]
public class RazorGenerator.Core.MvcHelperTransformer : AggregateCodeTransformer {
    private static string WriteToMethodName;
    private static string WriteLiteralToMethodName;
    private RazorCodeTransformerBase[] _transformers;
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    protected virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
[ExportAttribute("MvcView", "RazorGenerator.Core.IRazorCodeTransformer")]
public class RazorGenerator.Core.MvcViewTransformer : AggregateCodeTransformer {
    private static string ViewStartFileName;
    private static IEnumerable`1<string> _namespaces;
    private RazorCodeTransformerBase[] _codeTransformers;
    private bool _isSpecialPage;
    private CodeLanguageUtil _languageUtil;
    internal static IEnumerable`1<string> MvcNamespaces { get; }
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    private static MvcViewTransformer();
    internal static IEnumerable`1<string> get_MvcNamespaces();
    protected virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    private void FixupDefaultClassNameIfTemplate(RazorHost razorHost);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
    private bool IsSpecialPage(string path);
}
public class RazorGenerator.Core.MvcWebConfigTransformer : AggregateCodeTransformer {
    private static string DefaultBaseType;
    private List`1<RazorCodeTransformerBase> _transformers;
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    protected virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    private static string GetProjectRoot(string projectRelativePath, string fullPath);
}
public class RazorGenerator.Core.RazorCodeTransformerBase : object {
    protected RazorHost _razorHost;
    private sealed virtual override void RazorGenerator.Core.IRazorCodeTransformer.Initialize(IRazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
    public virtual string ProcessOutput(string codeContent);
}
public class RazorGenerator.Core.RazorHost : RazorEngineHost {
    private static IEnumerable`1<string> _defaultImports;
    private IRazorCodeTransformer _codeTransformer;
    private string _baseRelativePath;
    private string _fullPath;
    private CodeDomProvider _codeDomProvider;
    private IDictionary`2<string, string> _directives;
    private string _defaultClassName;
    private CodeLanguageUtil _languageUtil;
    [CompilerGeneratedAttribute]
private EventHandler`1<GeneratorErrorEventArgs> Error;
    [CompilerGeneratedAttribute]
private EventHandler`1<ProgressEventArgs> Progress;
    [CompilerGeneratedAttribute]
private ParserBase <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorCodeGenerator <CodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLinePragmas>k__BackingField;
    public string ProjectRelativePath { get; }
    public string FullPath { get; }
    public string DefaultClassName { get; public set; }
    public ParserBase Parser { get; public set; }
    public RazorCodeGenerator CodeGenerator { get; public set; }
    public bool EnableLinePragmas { get; public set; }
    public CodeLanguageUtil CodeLanguageUtil { get; }
    public RazorHost(string baseRelativePath, string fullPath, IRazorCodeTransformer codeTransformer, CodeDomProvider codeDomProvider, IDictionary`2<string, string> directives);
    private static RazorHost();
    public string get_ProjectRelativePath();
    public string get_FullPath();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(EventHandler`1<GeneratorErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(EventHandler`1<GeneratorErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Progress(EventHandler`1<ProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Progress(EventHandler`1<ProgressEventArgs> value);
    public virtual string get_DefaultClassName();
    public virtual void set_DefaultClassName(string value);
    [CompilerGeneratedAttribute]
public ParserBase get_Parser();
    [CompilerGeneratedAttribute]
public void set_Parser(ParserBase value);
    [CompilerGeneratedAttribute]
public RazorCodeGenerator get_CodeGenerator();
    [CompilerGeneratedAttribute]
public void set_CodeGenerator(RazorCodeGenerator value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableLinePragmas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableLinePragmas(bool value);
    public sealed virtual CodeLanguageUtil get_CodeLanguageUtil();
    public sealed virtual string GenerateCode();
    public virtual void PostProcessGeneratedCode(CodeGeneratorContext context);
    public virtual RazorCodeGenerator DecorateCodeGenerator(RazorCodeGenerator incomingCodeGenerator);
    public virtual ParserBase DecorateCodeParser(ParserBase incomingCodeParser);
    private void OnGenerateError(UInt32 errorCode, string errorMessage, UInt32 lineNumber, UInt32 columnNumber);
    private void OnCodeCompletion(UInt32 completed, UInt32 total);
    protected virtual string GetClassName();
}
public class RazorGenerator.Core.RemoveLineHiddenPragmas : RazorCodeTransformerBase {
    private static string LinePragmaText;
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
internal class RazorGenerator.Core.RewriteLinePragmas : RazorCodeTransformerBase {
    private string _binRelativePath;
    private string _fullPath;
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual string ProcessOutput(string codeContent);
}
public class RazorGenerator.Core.SetBaseType : RazorCodeTransformerBase {
    private string _typeName;
    private bool _override;
    public SetBaseType(string typeName, bool override);
    public SetBaseType(Type type, bool override);
    private bool IsDefaultBaseClass(string baseClass);
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
}
public class RazorGenerator.Core.SetImports : RazorCodeTransformerBase {
    private IEnumerable`1<string> _imports;
    private bool _replaceExisting;
    public SetImports(IEnumerable`1<string> imports, bool replaceExisting);
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public class RazorGenerator.Core.SetTypeNamespace : RazorCodeTransformerBase {
    private string _namespace;
    public SetTypeNamespace(string namespace);
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
}
public class RazorGenerator.Core.SetTypeVisibility : RazorCodeTransformerBase {
    private string _visibility;
    public SetTypeVisibility(string visibility);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
public class RazorGenerator.Core.SuffixFileNameTransformer : RazorCodeTransformerBase {
    private string _suffix;
    public SuffixFileNameTransformer(string suffix);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
[ExportAttribute("Template", "RazorGenerator.Core.IRazorCodeTransformer")]
public class RazorGenerator.Core.TemplateCodeTransformer : AggregateCodeTransformer {
    private static string GenerationEnvironmentPropertyName;
    private static IEnumerable`1<string> _defaultImports;
    private RazorCodeTransformerBase[] _codeTransforms;
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    private static TemplateCodeTransformer();
    protected virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
[ExportAttribute("WebPagesHelper", "RazorGenerator.Core.IRazorCodeTransformer")]
public class RazorGenerator.Core.WebPagesHelperTransformer : AggregateCodeTransformer {
    private RazorCodeTransformerBase[] _codeTransformers;
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    protected virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
[ExportAttribute("WebPage", "RazorGenerator.Core.IRazorCodeTransformer")]
public class RazorGenerator.Core.WebPageTransformer : AggregateCodeTransformer {
    private List`1<RazorCodeTransformerBase> _transformers;
    protected IEnumerable`1<RazorCodeTransformerBase> CodeTransformers { get; }
    protected virtual IEnumerable`1<RazorCodeTransformerBase> get_CodeTransformers();
    public virtual void Initialize(RazorHost razorHost, IDictionary`2<string, string> directives);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
}
