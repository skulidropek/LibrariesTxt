internal static class Microsoft.Internal.Web.Utils.DynamicHelper : object {
    public static bool TryGetMemberValue(object obj, string memberName, Object& result);
    public static bool TryGetMemberValue(object obj, GetMemberBinder binder, Object& result);
    public static object GetMemberValue(object obj, string memberName);
    public static object GetMemberValue(object obj, GetMemberBinder binder);
    public static CallSite`1<Func`3<CallSite, object, object>> GetMemberAccessCallSite(string memberName);
    public static CallSite`1<Func`3<CallSite, object, object>> GetMemberAccessCallSite(CallSiteBinder binder);
    public static IEnumerable`1<string> GetMemberNames(object obj);
}
public class System.Web.Helpers.Chart : object {
    private int _height;
    private int _width;
    private string _themePath;
    private string _theme;
    private List`1<LegendData> _legends;
    private List`1<SeriesData> _series;
    private List`1<TitleData> _titles;
    private HttpContextBase _httpContext;
    private Func`1<VirtualPathProvider> _virtualPathProviderFunc;
    private string _path;
    private DataSourceData _dataSource;
    private ChartAxisData _xAxis;
    private ChartAxisData _yAxis;
    [CompilerGeneratedAttribute]
private static Func`1<VirtualPathProvider> CS$<>9__CachedAnonymousMethodDelegate1;
    public string FileName { get; }
    public int Height { get; }
    public int Width { get; }
    public Chart(int width, int height, string theme, string themePath);
    internal Chart(HttpContextBase httpContext, VirtualPathProvider virtualPathProvider, int width, int height, string theme, string themePath);
    internal Chart(HttpContextBase httpContext, Func`1<VirtualPathProvider> virtualPathProviderFunc, int width, int height, string theme, string themePath);
    public string get_FileName();
    public int get_Height();
    public int get_Width();
    public Chart AddLegend(string title, string name);
    public Chart AddSeries(string name, string chartType, string chartArea, string axisLabel, string legend, int markerStep, IEnumerable xValue, string xField, IEnumerable yValues, string yFields);
    public Chart AddTitle(string text, string name);
    public Chart SetXAxis(string title, double min, double max);
    public Chart SetYAxis(string title, double min, double max);
    public Chart DataBindCrossTable(IEnumerable dataSource, string groupByField, string xField, string yFields, string otherFields, string pointSortOrder);
    public Chart DataBindTable(IEnumerable dataSource, string xField);
    public Byte[] GetBytes(string format);
    public static Chart GetFromCache(string key);
    public Chart Save(string path, string format);
    internal Chart Save(HttpContextBase httpContext, string path, string format);
    public string SaveToCache(string key, int minutesToCache, bool slidingExpiration);
    public Chart SaveXml(string path);
    internal Chart SaveXml(HttpContextBase httpContext, string path);
    public WebImage ToWebImage(string format);
    public Chart Write(string format);
    public static Chart WriteFromCache(string key, string format);
    internal void ExecuteChartAction(Action`1<Chart> action);
    private void LoadThemes(Chart chart);
    private static void LoadChartThemeFromFile(Chart chart, Stream templateStream);
    internal static Chart GetFromCache(HttpContextBase context, string key);
    internal static Chart WriteFromCache(HttpContextBase context, string key, string format);
    private void ApplyChartArea(Chart chart);
    private static void ApplyAxis(Axis axis, ChartAxisData axisData);
    private void ApplyLegends(Chart chart);
    private void ApplySeries(Chart chart);
    private void ApplyTitles(Chart chart);
    private static T ConvertStringArgument(string paramName, string value);
    private static ChartImageFormat ConvertStringToChartImageFormat(string format);
    private void DataBindChart(Chart chart);
    private static HttpContextBase GetDefaultContext();
    private static string GetUniqueKey();
    private static string NormalizeFormat(string format);
    [CompilerGeneratedAttribute]
private static VirtualPathProvider <.ctor>b__0();
}
public static class System.Web.Helpers.ChartTheme : object {
    public static string Blue;
    public static string Green;
    public static string Vanilla;
    public static string Vanilla3D;
    public static string Yellow;
}
internal static class System.Web.Helpers.ConversionUtil : object {
    private static MethodInfo _stringToEnumMethod;
    internal static string ToString(T obj);
    internal static bool TryFromString(Type type, string value, Object& result);
    internal static bool TryFromStringToEnum(string value, T& result);
    private static bool TryFromStringToEnumHelper(Type enumType, string value, Object& result);
    internal static bool TryFromStringToFontFamily(string fontFamily, FontFamily& result);
    internal static bool TryFromStringToColor(string value, Color& result);
    internal static string NormalizeImageFormat(string value);
    internal static bool TryFromStringToImageFormat(string value, ImageFormat& result);
}
public static class System.Web.Helpers.Crypto : object {
    private static int PBKDF2IterCount;
    private static int PBKDF2SubkeyLength;
    private static int SaltSize;
    internal static Byte[] GenerateSaltInternal(int byteLength);
    public static string GenerateSalt(int byteLength);
    public static string Hash(string input, string algorithm);
    public static string Hash(Byte[] input, string algorithm);
    public static string SHA1(string input);
    public static string SHA256(string input);
    public static string HashPassword(string password);
    public static bool VerifyHashedPassword(string hashedPassword, string password);
    internal static string BinaryToHex(Byte[] data);
    private static bool ByteArraysEqual(Byte[] a, Byte[] b);
}
internal class System.Web.Helpers.DynamicJavaScriptConverter : JavaScriptConverter {
    public IEnumerable`1<Type> SupportedTypes { get; }
    public virtual IEnumerable`1<Type> get_SupportedTypes();
    public virtual object Deserialize(IDictionary`2<string, object> dictionary, Type type, JavaScriptSerializer serializer);
    public virtual IDictionary`2<string, object> Serialize(object obj, JavaScriptSerializer serializer);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Helpers.DynamicJsonArray : DynamicObject {
    private Object[] _arrayValues;
    public int Length { get; }
    [DynamicAttribute]
public object Item { get; public set; }
    public DynamicJsonArray(Object[] arrayValues);
    public int get_Length();
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public sealed virtual IEnumerator GetEnumerator();
    private IEnumerable`1<object> GetEnumerable();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    public static Object[] op_Implicit(DynamicJsonArray obj);
    public static Array op_Implicit(DynamicJsonArray obj);
}
public class System.Web.Helpers.DynamicJsonObject : DynamicObject {
    private IDictionary`2<string, object> _values;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
[DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<KeyValuePair`2<string, object>, object> CS$<>9__CachedAnonymousMethodDelegate3;
    public DynamicJsonObject(IDictionary`2<string, object> values);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    private static string GetKey(Object[] indexes);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    private object GetValue(string name);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(KeyValuePair`2<string, object> p);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__1(KeyValuePair`2<string, object> p);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Helpers.HtmlElement : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InnerText>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HtmlElement> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    internal string TagName { get; internal set; }
    internal string InnerText { get; internal set; }
    public IList`1<HtmlElement> Children { get; public set; }
    private IDictionary`2<string, string> Attributes { get; private set; }
    public string Item { get; public set; }
    public HtmlElement(string tagName);
    [CompilerGeneratedAttribute]
internal string get_TagName();
    [CompilerGeneratedAttribute]
internal void set_TagName(string value);
    [CompilerGeneratedAttribute]
internal string get_InnerText();
    [CompilerGeneratedAttribute]
internal void set_InnerText(string value);
    [CompilerGeneratedAttribute]
public IList`1<HtmlElement> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(IList`1<HtmlElement> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, string> value);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public HtmlElement SetInnerText(string innerText);
    public HtmlElement AppendChild(HtmlElement e);
    public HtmlElement AppendChild(string innerText);
    private void MergeAttribute(string name, string value);
    public HtmlElement AddCssClass(string className);
    public IHtmlString ToHtmlString();
    public void WriteTo(TextWriter writer);
    private void WriteToInternal(HtmlTextWriter writer);
    public virtual string ToString();
    internal static HtmlElement CreateSpan(string innerText, string cssClass);
}
internal class System.Web.Helpers.HtmlObjectPrinter : ObjectVisitor {
    private static string Styles;
    private static HtmlElement _nullSpan;
    private static Dictionary`2<char, string> _printableEscapeChars;
    private bool _excludeTypeName;
    private Stack`1<HtmlElement> _elementStack;
    private HtmlElement Current { get; }
    public HtmlObjectPrinter(int recursionLimit, int enumerationLimit);
    private static HtmlObjectPrinter();
    private HtmlElement get_Current();
    public void WriteTo(object value, TextWriter writer);
    public virtual void VisitKeyValues(object value, IEnumerable`1<object> keys, Func`2<object, object> valueSelector, int depth);
    public virtual void VisitKeyValue(object key, object value, int depth);
    public virtual void VisitEnumerable(IEnumerable enumerable, int depth);
    public virtual void VisitIndexedEnumeratedValue(int index, object item, int depth);
    public virtual void VisitEnumeratedValue(object item, int depth);
    public virtual void VisitEnumeratonLimitExceeded();
    public virtual void VisitMembers(IEnumerable`1<string> names, Func`2<string, Type> typeSelector, Func`2<string, object> valueSelector, int depth);
    public virtual void VisitMember(string name, Type type, object value, int depth);
    public virtual void VisitComplexObject(object value, int depth);
    public virtual void VisitNull();
    public virtual void VisitStringValue(string stringValue);
    public virtual void VisitVisitedObject(string id, object value);
    public virtual void Visit(object value, int depth);
    public virtual void VisitObjectVisitorException(ObjectVisitorException exception);
    public virtual void VisitConvertedValue(object value, string convertedValue);
    private static HtmlElement CreateParentSpan(HtmlElement[] elements);
    private static HtmlElement CreateNameSpan(string name);
    private static HtmlElement CreateOperatorSpan(string operator);
    private static HtmlElement CreateValueSpan(string value);
    private static HtmlElement CreateExceptionSpan(ObjectVisitorException exception);
    private static HtmlElement CreateQuotedSpan(string value);
    private static HtmlElement CreateLink(string href, string linkText, string cssClass);
    private static HtmlElement CreateVisitedLink(string id);
    private static HtmlElement CreateTypeSpan(string value);
    private static HtmlElement CreateTypeNameSpan(Type type);
    private static bool IsOperator(char ch);
    internal void PushElement(HtmlElement element);
    internal HtmlElement PopElement();
    internal static string ConvertEscapseSequences(string value);
    private static string GetCharValue(char ch);
}
internal interface System.Web.Helpers.IWebGridDataSource {
    public int TotalRowCount { get; }
    public abstract virtual int get_TotalRowCount();
    public abstract virtual IList`1<WebGridRow> GetRows(SortInfo sortInfo, int pageIndex);
}
public static class System.Web.Helpers.Json : object {
    private static JavaScriptSerializer _serializer;
    private static Json();
    public static string Encode(object value);
    public static void Write(object value, TextWriter writer);
    public static object Decode(string value);
    public static object Decode(string value, Type targetType);
    public static T Decode(string value);
    private static JavaScriptSerializer CreateSerializer();
    internal static object WrapObject(object value);
}
public static class System.Web.Helpers.ObjectInfo : object {
    private static int DefaultRecursionLimit;
    private static int DefaultEnumerationLimit;
    public static HelperResult Print(object value, int depth, int enumerationLength);
}
internal class System.Web.Helpers.ObjectVisitor : object {
    private static Dictionary`2<Type, string> _typeNames;
    private static Char[] _separators;
    private int _recursionLimit;
    private int _enumerationLimit;
    private Dictionary`2<object, string> _visited;
    [CompilerGeneratedAttribute]
private static Func`2<string, Type> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDescriptor, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<FieldInfo, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate17;
    public ObjectVisitor(int recursionLimit, int enumerationLimit);
    private static ObjectVisitor();
    protected string GetObjectId(object value);
    public virtual void Visit(object value, int depth);
    public virtual void VisitObjectVisitorException(ObjectVisitorException exception);
    public virtual void VisitConvertedValue(object value, string convertedValue);
    public virtual void VisitVisitedObject(string id, object value);
    public virtual void VisitNull();
    public virtual void VisitStringValue(string stringValue);
    public virtual void VisitComplexObject(object value, int depth);
    public virtual void VisitNameValueCollection(NameValueCollection collection, int depth);
    public virtual void VisitDictionary(IDictionary dictionary, int depth);
    public virtual void VisitEnumerable(IEnumerable enumerable, int depth);
    public virtual void VisitEnumeratedValue(object item, int depth);
    public virtual void VisitIndexedEnumeratedValue(int index, object item, int depth);
    public virtual void VisitEnumeratonLimitExceeded();
    public virtual void VisitMembers(IEnumerable`1<string> names, Func`2<string, Type> typeSelector, Func`2<string, object> valueSelector, int depth);
    public virtual void VisitMember(string name, Type type, object value, int depth);
    public virtual void VisitKeyValues(object value, IEnumerable`1<object> keys, Func`2<object, object> valueSelector, int depth);
    public virtual void VisitKeyValue(object key, object value, int depth);
    protected virtual string CreateObjectId(object value);
    internal static string GetTypeName(Type type);
    private static string GetGenericTypeName(Type type);
    private static bool IsAnonymousType(Type type);
    private static bool ImplementsInterface(Type type, Type targetInterfaceType);
    private static object GetFieldValue(object value, string name, IDictionary`2<string, FieldInfo> fields);
    private static object GetPropertyDescriptorValue(object value, string name, PropertyDescriptorCollection props);
    private static bool TryConvertToString(object value, String& stringValue);
    [CompilerGeneratedAttribute]
private static Type <VisitComplexObject>b__0(string name);
    [CompilerGeneratedAttribute]
private static string <VisitComplexObject>b__2(PropertyDescriptor p);
    [CompilerGeneratedAttribute]
private static string <VisitComplexObject>b__5(FieldInfo field);
    [CompilerGeneratedAttribute]
private static string <GetTypeName>b__16(Type argType);
}
internal class System.Web.Helpers.PreComputedGridDataSource : object {
    private int _totalRows;
    private IList`1<WebGridRow> _rows;
    public int TotalRowCount { get; }
    public PreComputedGridDataSource(WebGrid grid, IEnumerable`1<object> values, int totalRows);
    public sealed virtual int get_TotalRowCount();
    public sealed virtual IList`1<WebGridRow> GetRows(SortInfo sortInfo, int pageIndex);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Helpers.Resources.HelpersResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Chart_ArgumentConversionFailed { get; }
    internal static string Chart_ExceptionDataBindSeriesToString { get; }
    internal static string Chart_ThemeFileNotFound { get; }
    internal static string Crypto_NotSupportedHashAlg { get; }
    internal static string Image_IncorrectImageFormat { get; }
    internal static string Json_UnableToConvertType { get; }
    internal static string ObjectInfo_PreviousDisplayed { get; }
    internal static string ObjectInfo_PropertyThrewException { get; }
    internal static string PathUtils_IncorrectPath { get; }
    internal static string ServerInfo_AdditionalInfo { get; }
    internal static string ServerInfo_EnvVars { get; }
    internal static string ServerInfo_Header { get; }
    internal static string ServerInfo_HttpRuntime { get; }
    internal static string ServerInfo_LegacyCAS { get; }
    internal static string ServerInfo_LegacyCasHelpInfo { get; }
    internal static string ServerInfo_NoValue { get; }
    internal static string ServerInfo_ServerConfigTable { get; }
    internal static string ServerInfo_ServerVars { get; }
    internal static string WebGrid_ColumnNameOrFormatRequired { get; }
    internal static string WebGrid_ColumnNotFound { get; }
    internal static string WebGrid_DataSourceBound { get; }
    internal static string WebGrid_NoDataSourceBound { get; }
    internal static string WebGrid_NotSupportedIfPagingIsDisabled { get; }
    internal static string WebGrid_NotSupportedIfSortingIsDisabled { get; }
    internal static string WebGrid_PagerModeMustBeEnabled { get; }
    internal static string WebGrid_PropertySetterNotSupportedAfterDataBound { get; }
    internal static string WebGrid_RowCountNotSpecified { get; }
    internal static string WebGrid_SelectLinkText { get; }
    internal static string WebImage_IncorrectColorName { get; }
    internal static string WebImage_IncorrectFontFamily { get; }
    internal static string WebImage_IncorrectFontStyle { get; }
    internal static string WebImage_IncorrectHorizontalAlignment { get; }
    internal static string WebImage_IncorrectVerticalAlignment { get; }
    internal static string WebImage_IncorrectWidthAndHeight { get; }
    internal static string WebImage_InvalidImageContents { get; }
    internal static string WebMail_InvalidPriority { get; }
    internal static string WebMail_ItemInCollectionIsNull { get; }
    internal static string WebMail_SmtpServerNotSpecified { get; }
    internal static string WebMail_UnableToDetermineFrom { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Chart_ArgumentConversionFailed();
    internal static string get_Chart_ExceptionDataBindSeriesToString();
    internal static string get_Chart_ThemeFileNotFound();
    internal static string get_Crypto_NotSupportedHashAlg();
    internal static string get_Image_IncorrectImageFormat();
    internal static string get_Json_UnableToConvertType();
    internal static string get_ObjectInfo_PreviousDisplayed();
    internal static string get_ObjectInfo_PropertyThrewException();
    internal static string get_PathUtils_IncorrectPath();
    internal static string get_ServerInfo_AdditionalInfo();
    internal static string get_ServerInfo_EnvVars();
    internal static string get_ServerInfo_Header();
    internal static string get_ServerInfo_HttpRuntime();
    internal static string get_ServerInfo_LegacyCAS();
    internal static string get_ServerInfo_LegacyCasHelpInfo();
    internal static string get_ServerInfo_NoValue();
    internal static string get_ServerInfo_ServerConfigTable();
    internal static string get_ServerInfo_ServerVars();
    internal static string get_WebGrid_ColumnNameOrFormatRequired();
    internal static string get_WebGrid_ColumnNotFound();
    internal static string get_WebGrid_DataSourceBound();
    internal static string get_WebGrid_NoDataSourceBound();
    internal static string get_WebGrid_NotSupportedIfPagingIsDisabled();
    internal static string get_WebGrid_NotSupportedIfSortingIsDisabled();
    internal static string get_WebGrid_PagerModeMustBeEnabled();
    internal static string get_WebGrid_PropertySetterNotSupportedAfterDataBound();
    internal static string get_WebGrid_RowCountNotSpecified();
    internal static string get_WebGrid_SelectLinkText();
    internal static string get_WebImage_IncorrectColorName();
    internal static string get_WebImage_IncorrectFontFamily();
    internal static string get_WebImage_IncorrectFontStyle();
    internal static string get_WebImage_IncorrectHorizontalAlignment();
    internal static string get_WebImage_IncorrectVerticalAlignment();
    internal static string get_WebImage_IncorrectWidthAndHeight();
    internal static string get_WebImage_InvalidImageContents();
    internal static string get_WebMail_InvalidPriority();
    internal static string get_WebMail_ItemInCollectionIsNull();
    internal static string get_WebMail_SmtpServerNotSpecified();
    internal static string get_WebMail_UnableToDetermineFrom();
}
public static class System.Web.Helpers.ServerInfo : object {
    private static string Style;
    internal static IDictionary`2<string, string> EnvironmentVariables();
    internal static IDictionary`2<string, string> ServerVariables();
    internal static IDictionary`2<string, string> ServerVariables(HttpContextBase context);
    internal static IDictionary`2<string, string> Configuration();
    internal static IDictionary`2<string, string> HttpRuntimeInfo();
    internal static IDictionary`2<string, string> LegacyCAS();
    internal static IDictionary`2<string, string> LegacyCAS(AppDomain appDomain);
    public static HtmlString GetHtml();
    private static void PrintInfoSection(StringBuilder builder, string sectionTitle, IDictionary`2<string, string> entries);
    private static string InsertWhiteSpace(string s);
}
public enum System.Web.Helpers.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
internal class System.Web.Helpers.SortInfo : object {
    [CompilerGeneratedAttribute]
private string <SortColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    public string SortColumn { get; public set; }
    public SortDirection SortDirection { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SortColumn();
    [CompilerGeneratedAttribute]
public void set_SortColumn(string value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    public sealed virtual bool Equals(SortInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Web.Helpers.VirtualPathUtil : object {
    public static string MapPath(HttpContextBase httpContext, string path);
    public static string ResolvePath(string virtualPath);
    internal static string ResolvePath(ITemplateFile templateFile, HttpContextBase httpContext, string virtualPath);
}
public static class System.Web.Helpers.WebCache : object {
    public static void Set(string key, object value, int minutesToCache, bool slidingExpiration);
    public static object Get(string key);
    public static object Remove(string key);
}
public class System.Web.Helpers.WebGrid : object {
    private static string AjaxUpdateScript;
    private HttpContextBase _context;
    private bool _canPage;
    private bool _canSort;
    private string _ajaxUpdateContainerId;
    private string _ajaxUpdateCallback;
    private string _defaultSort;
    private string _pageFieldName;
    private string _sortDirectionFieldName;
    private string _selectionFieldName;
    private string _sortFieldName;
    private string _fieldNamePrefix;
    private int _pageIndex;
    private bool _pageIndexSet;
    private int _rowsPerPage;
    private int _selectedIndex;
    private bool _selectedIndexSet;
    private string _sortColumn;
    private bool _sortColumnSet;
    private bool _sortColumnExplicitlySet;
    private SortDirection _sortDirection;
    private bool _sortDirectionSet;
    private IWebGridDataSource _dataSource;
    private bool _dataSourceBound;
    private bool _dataSourceMaterialized;
    private IEnumerable`1<string> _columnNames;
    private Type _elementType;
    private IList`1<WebGridRow> _rows;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Expression> <CustomSorters>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<WebGridColumn, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<string, WebGridColumn> CS$<>9__CachedAnonymousMethodDelegate13;
    public IEnumerable`1<string> ColumnNames { get; }
    public bool CanSort { get; }
    public string AjaxUpdateContainerId { get; }
    public bool IsAjaxEnabled { get; }
    public string AjaxUpdateCallback { get; }
    public string FieldNamePrefix { get; }
    public bool HasSelection { get; }
    public int PageCount { get; }
    public string PageFieldName { get; }
    public int PageIndex { get; public set; }
    public IList`1<WebGridRow> Rows { get; }
    public int RowsPerPage { get; }
    public WebGridRow SelectedRow { get; }
    public int SelectedIndex { get; public set; }
    public string SelectionFieldName { get; }
    public string SortColumn { get; public set; }
    public SortDirection SortDirection { get; public set; }
    private SortInfo SortInfo { get; }
    public string SortDirectionFieldName { get; }
    public string SortFieldName { get; }
    internal IDictionary`2<string, Expression> CustomSorters { get; private set; }
    public int TotalRowCount { get; }
    private HttpContextBase HttpContext { get; }
    private NameValueCollection QueryString { get; }
    public WebGrid(IEnumerable`1<object> source, IEnumerable`1<string> columnNames, string defaultSort, int rowsPerPage, bool canPage, bool canSort, string ajaxUpdateContainerId, string ajaxUpdateCallback, string fieldNamePrefix, string pageFieldName, string selectionFieldName, string sortFieldName, string sortDirectionFieldName);
    internal WebGrid(HttpContextBase context, string defaultSort, int rowsPerPage, bool canPage, bool canSort, string ajaxUpdateContainerId, string ajaxUpdateCallback, string fieldNamePrefix, string pageFieldName, string selectionFieldName, string sortFieldName, string sortDirectionFieldName);
    public IEnumerable`1<string> get_ColumnNames();
    public bool get_CanSort();
    public string get_AjaxUpdateContainerId();
    public bool get_IsAjaxEnabled();
    public string get_AjaxUpdateCallback();
    public string get_FieldNamePrefix();
    public bool get_HasSelection();
    public int get_PageCount();
    public string get_PageFieldName();
    public int get_PageIndex();
    public void set_PageIndex(int value);
    public IList`1<WebGridRow> get_Rows();
    public int get_RowsPerPage();
    public WebGridRow get_SelectedRow();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public string get_SelectionFieldName();
    public string get_SortColumn();
    public void set_SortColumn(string value);
    public SortDirection get_SortDirection();
    public void set_SortDirection(SortDirection value);
    private SortInfo get_SortInfo();
    public string get_SortDirectionFieldName();
    public string get_SortFieldName();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, Expression> get_CustomSorters();
    [CompilerGeneratedAttribute]
private void set_CustomSorters(IDictionary`2<string, Expression> value);
    public int get_TotalRowCount();
    private HttpContextBase get_HttpContext();
    private NameValueCollection get_QueryString();
    internal static Type GetElementType(IEnumerable`1<object> source);
    private static Type GetGenericEnumerableType(Type type);
    public WebGrid Bind(IEnumerable`1<object> source, IEnumerable`1<string> columnNames, bool autoSortAndPage, int rowCount);
    public WebGridColumn Column(string columnName, string header, Func`2<object, object> format, string style, bool canSort);
    public WebGridColumn[] Columns(WebGridColumn[] columnSet);
    public IHtmlString GetContainerUpdateScript(string path);
    public IHtmlString GetHtml(string tableStyle, string headerStyle, string footerStyle, string rowStyle, string alternatingRowStyle, string selectedRowStyle, string caption, bool displayHeader, bool fillEmptyRows, string emptyRowCellValue, IEnumerable`1<WebGridColumn> columns, IEnumerable`1<string> exclusions, WebGridPagerModes mode, string firstText, string previousText, string nextText, string lastText, int numericLinksCount, object htmlAttributes);
    public string GetPageUrl(int pageIndex);
    public string GetSortUrl(string column);
    public HelperResult Pager(WebGridPagerModes mode, string firstText, string previousText, string nextText, string lastText, int numericLinksCount);
    private HelperResult Pager(WebGridPagerModes mode, string firstText, string previousText, string nextText, string lastText, int numericLinksCount, bool explicitlyCalled);
    public IHtmlString Table(string tableStyle, string headerStyle, string footerStyle, string rowStyle, string alternatingRowStyle, string selectedRowStyle, string caption, bool displayHeader, bool fillEmptyRows, string emptyRowCellValue, IEnumerable`1<WebGridColumn> columns, IEnumerable`1<string> exclusions, Func`2<object, object> footer, object htmlAttributes);
    public WebGrid AddSorter(string columnName, Expression`1<Func`2<TElement, TProperty>> keySelector);
    private void EnsureColumnIsSortable(IEnumerable`1<WebGridColumn> columns);
    internal static object GetMember(WebGridRow row, string name);
    internal string GetPath(NameValueCollection queryString, String[] exclusions);
    internal static string GetSortDirectionString(SortDirection sortDir);
    private void EnsureDataBound();
    private void EnsureDataSourceNotMaterialized();
    private void ValidatePreDataBoundValues();
    private bool ValidateSortColumn(string value);
    private static IEnumerable`1<string> GetDefaultColumnNames(IEnumerable`1<object> source, Type elementType);
    private IEnumerable`1<WebGridColumn> GetDefaultColumns(IEnumerable`1<string> exclusions);
    private static bool IsBindableType(Type type);
    private static bool ModeEnabled(WebGridPagerModes mode, WebGridPagerModes modeCheck);
    [CompilerGeneratedAttribute]
private static bool <GetElementType>b__1(Type t);
    [CompilerGeneratedAttribute]
private static string <EnsureColumnIsSortable>b__9(WebGridColumn c);
    [CompilerGeneratedAttribute]
private static bool <GetDefaultColumnNames>b__b(PropertyInfo p);
    [CompilerGeneratedAttribute]
private static string <GetDefaultColumnNames>b__c(PropertyInfo p);
    [CompilerGeneratedAttribute]
private static string <GetDefaultColumnNames>b__d(string n);
    [CompilerGeneratedAttribute]
private static WebGridColumn <GetDefaultColumns>b__12(string n);
}
public class System.Web.Helpers.WebGridColumn : object {
    [CompilerGeneratedAttribute]
private bool <CanSort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    public bool CanSort { get; public set; }
    public string ColumnName { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Format { get; public set; }
    public string Header { get; public set; }
    public string Style { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CanSort();
    [CompilerGeneratedAttribute]
public void set_CanSort(bool value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
}
internal class System.Web.Helpers.WebGridDataSource : object {
    private static MethodInfo SortGenericExpressionMethod;
    private WebGrid _grid;
    private Type _elementType;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> _values;
    private bool _canPage;
    private bool _canSort;
    [CompilerGeneratedAttribute]
private SortInfo <DefaultSort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowsPerPage>k__BackingField;
    public SortInfo DefaultSort { get; public set; }
    public int RowsPerPage { get; public set; }
    public int TotalRowCount { get; }
    public WebGridDataSource(WebGrid grid, IEnumerable`1<object> values, Type elementType, bool canPage, bool canSort);
    private static WebGridDataSource();
    [CompilerGeneratedAttribute]
public SortInfo get_DefaultSort();
    [CompilerGeneratedAttribute]
public void set_DefaultSort(SortInfo value);
    [CompilerGeneratedAttribute]
public int get_RowsPerPage();
    [CompilerGeneratedAttribute]
public void set_RowsPerPage(int value);
    public sealed virtual int get_TotalRowCount();
    public sealed virtual IList`1<WebGridRow> GetRows(SortInfo sortInfo, int pageIndex);
    private IQueryable`1<object> Sort(IQueryable`1<object> data, SortInfo sortInfo);
    private IEnumerable`1<object> Page(IEnumerable`1<object> data, int pageIndex);
    private IQueryable`1<object> Sort(IQueryable`1<object> data, Type elementType, SortInfo sort);
    private static IQueryable`1<TElement> SortGenericExpression(IQueryable`1<object> data, Expression body, ParameterExpression param, SortDirection sortDirection);
    [CompilerGeneratedAttribute]
private WebGridRow <GetRows>b__2(object value, int index);
}
[FlagsAttribute]
public enum System.Web.Helpers.WebGridPagerModes : Enum {
    public int value__;
    public static WebGridPagerModes Numeric;
    public static WebGridPagerModes NextPrevious;
    public static WebGridPagerModes FirstLast;
    public static WebGridPagerModes All;
}
[GeneratedCodeAttribute("RazorSingleFileGenerator", "1.0.0.0")]
internal class System.Web.Helpers.WebGridRenderer : HelperPage {
    private static object _gridScriptRenderedKey;
    protected static HttpApplication ApplicationInstance { get; }
    private static WebGridRenderer();
    public static HelperResult GridInitScript(WebGrid webGrid, HttpContextBase httpContext);
    public static HelperResult Table(WebGrid webGrid, HttpContextBase httpContext, string tableStyle, string headerStyle, string footerStyle, string rowStyle, string alternatingRowStyle, string selectedRowStyle, string caption, bool displayHeader, bool fillEmptyRows, string emptyRowCellValue, IEnumerable`1<WebGridColumn> columns, IEnumerable`1<string> exclusions, Func`2<object, object> footer, object htmlAttributes);
    public static HelperResult Pager(WebGrid webGrid, HttpContextBase httpContext, WebGridPagerModes mode, string firstText, string previousText, string nextText, string lastText, int numericLinksCount, bool renderAjaxContainer);
    private static bool IsGridScriptRendered(HttpContextBase context);
    private static void SetGridScriptRendered(HttpContextBase context, bool value);
    private static bool ShowSortableColumnHeader(WebGrid grid, WebGridColumn column);
    public static IHtmlString GridLink(WebGrid webGrid, string url, string text);
    private static IHtmlString Raw(string text);
    private static IHtmlString RawJS(string text);
    private static IHtmlString CssClass(string className);
    private static string GetRowStyle(WebGrid webGrid, int rowIndex, string rowStyle, string alternatingRowStyle, string selectedRowStyle);
    private static HelperResult Format(Func`2<object, object> format, object arg);
    private static IHtmlString PrintAttributes(IDictionary`2<string, object> attributes);
    private static bool ModeEnabled(WebGridPagerModes mode, WebGridPagerModes modeCheck);
    protected static HttpApplication get_ApplicationInstance();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Helpers.WebGridRow : DynamicObject {
    private static string RowIndexMemberName;
    private static BindingFlags BindFlags;
    private WebGrid _grid;
    private IDynamicMetaObjectProvider _dynamic;
    private int _rowIndex;
    private object _value;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> _values;
    [DynamicAttribute]
public object Value { get; }
    public WebGrid WebGrid { get; }
    public object Item { get; }
    public object Item { get; }
    public WebGridRow(WebGrid webGrid, object value, int rowIndex);
    public object get_Value();
    public WebGrid get_WebGrid();
    public object get_Item(string name);
    public object get_Item(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    public IHtmlString GetSelectLink(string text);
    public string GetSelectUrl();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    internal bool TryGetMember(string memberName, Object& result);
    public virtual string ToString();
    private bool TryGetRowIndex(string memberName, Object& result);
    private static bool TryGetComplexMember(object obj, string name, Object& result);
    private static bool TryGetMember(object obj, string name, Object& result);
    [CompilerGeneratedAttribute]
private object <GetEnumerator>b__0(string c);
}
public class System.Web.Helpers.WebImage : object {
    private static float FixedResolution;
    private static IDictionary`2<Guid, ImageFormat> _imageFormatLookup;
    private static Func`2<string, Byte[]> _defaultReadAction;
    private ImageFormat _initialFormat;
    private List`1<ImageTransformation> _transformations;
    private ImageFormat _currentFormat;
    private Byte[] _content;
    private string _fileName;
    private int _height;
    private int _width;
    private PropertyItem[] _properties;
    [CompilerGeneratedAttribute]
private static Func`2<ImageFormat, Guid> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ImageFormat, ImageFormat> CS$<>9__CachedAnonymousMethodDelegate3;
    public int Height { get; }
    public int Width { get; }
    public string FileName { get; public set; }
    public string ImageFormat { get; }
    public WebImage(Byte[] content);
    public WebImage(string filePath);
    public WebImage(Stream imageStream);
    internal WebImage(HttpContextBase httpContext, Func`2<string, Byte[]> readAction, string filePath);
    private WebImage(WebImage other);
    private static WebImage();
    public int get_Height();
    public int get_Width();
    public string get_FileName();
    public void set_FileName(string value);
    public string get_ImageFormat();
    public static WebImage GetImageFromRequest(string postedFileName);
    internal static WebImage GetImageFromRequest(HttpRequestBase request, string postedFileName);
    public WebImage Clone();
    public Byte[] GetBytes(string requestedFormat);
    public WebImage Resize(int width, int height, bool preserveAspectRatio, bool preventEnlarge);
    public WebImage Crop(int top, int left, int bottom, int right);
    public WebImage RotateLeft();
    public WebImage RotateRight();
    public WebImage FlipVertical();
    public WebImage FlipHorizontal();
    public WebImage AddTextWatermark(string text, string fontColor, int fontSize, string fontStyle, string fontFamily, string horizontalAlign, string verticalAlign, int opacity, int padding);
    public WebImage AddImageWatermark(WebImage watermarkImage, int width, int height, string horizontalAlign, string verticalAlign, int opacity, int padding);
    public WebImage AddImageWatermark(string watermarkImageFilePath, int width, int height, string horizontalAlign, string verticalAlign, int opacity, int padding);
    internal WebImage AddImageWatermark(HttpContextBase httpContext, Func`2<string, Byte[]> readAction, string watermarkImageFilePath, int width, int height, string horizontalAlign, string verticalAlign, int opacity, int padding);
    public WebImage Write(string requestedFormat);
    public WebImage Save(string filePath, string imageFormat, bool forceCorrectExtension);
    internal WebImage Save(HttpContextBase context, Action`2<string, Byte[]> saveAction, string filePath, string imageFormat, bool forceWellKnownExtension);
    private static ImageFormat ValidateImageContent(Byte[] content, string paramName);
    private static ImageFormat GetImageFormat(string format);
    private static HorizontalAlign ParseHorizontalAlign(string alignment);
    private static VerticalAlign ParseVerticalAlign(string alignment);
    private void GetContentFromImageAndUpdateFormat(Image image);
    private void ApplyTransformationsAndSetProperties();
    private static Bitmap GetBitmapFromImage(Image image, int width, int height, bool preserveResolution);
    private static void CopyMetadata(PropertyItem[] properties, Image target);
    [CompilerGeneratedAttribute]
private static Guid <.cctor>b__0(ImageFormat format);
    [CompilerGeneratedAttribute]
private static ImageFormat <.cctor>b__1(ImageFormat format);
}
public static class System.Web.Helpers.WebMail : object {
    internal static object SmtpServerKey;
    internal static object SmtpPortKey;
    internal static object SmtpUseDefaultCredentialsKey;
    internal static object EnableSslKey;
    internal static object PasswordKey;
    internal static object UserNameKey;
    internal static object FromKey;
    internal static Lazy`1<IDictionary`2<object, object>> SmtpDefaults;
    private static Dictionary`2<string, Action`2<MailMessage, string>> _actionableHeaders;
    [CompilerGeneratedAttribute]
private static Action`2<MailMessage, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`2<MailMessage, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`2<MailMessage, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`2<MailMessage, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`2<MailMessage, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action`2<MailMessage, string> CS$<>9__CachedAnonymousMethodDelegatec;
    public static string SmtpServer { get; public set; }
    public static int SmtpPort { get; public set; }
    public static string From { get; public set; }
    public static bool SmtpUseDefaultCredentials { get; public set; }
    public static bool EnableSsl { get; public set; }
    public static string UserName { get; public set; }
    public static string Password { get; public set; }
    private static WebMail();
    public static string get_SmtpServer();
    public static void set_SmtpServer(string value);
    public static int get_SmtpPort();
    public static void set_SmtpPort(int value);
    public static string get_From();
    public static void set_From(string value);
    public static bool get_SmtpUseDefaultCredentials();
    public static void set_SmtpUseDefaultCredentials(bool value);
    public static bool get_EnableSsl();
    public static void set_EnableSsl(bool value);
    public static string get_UserName();
    public static void set_UserName(string value);
    public static string get_Password();
    public static void set_Password(string value);
    public static void Send(string to, string subject, string body, string from, string cc, IEnumerable`1<string> filesToAttach, bool isBodyHtml, IEnumerable`1<string> additionalHeaders, string bcc, string contentEncoding, string headerEncoding, string priority, string replyTo);
    private static TValue ReadValue(object key);
    private static IDictionary`2<object, object> ReadSmtpDefaults();
    internal static void SetPropertiesOnClient(SmtpClient client);
    internal static void SetPropertiesOnMessage(MailMessage message, string to, string subject, string body, string from, string cc, string bcc, string replyTo, string contentEncoding, string headerEncoding, MailPriority priority, IEnumerable`1<string> filesToAttach, bool isBodyHtml, IEnumerable`1<string> additionalHeaders);
    internal static void AssignHeaderValues(MailMessage message, IEnumerable`1<string> headerValues);
    internal static bool TryParseHeader(string header, String& key, String& value);
    private static void SetPriority(MailMessage message, string priority);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(MailMessage message, string value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(MailMessage message, string value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(MailMessage mailMessage, string value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(MailMessage mailMessage, string value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(MailMessage mailMessage, string value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(MailMessage mailMessage, string value);
}
