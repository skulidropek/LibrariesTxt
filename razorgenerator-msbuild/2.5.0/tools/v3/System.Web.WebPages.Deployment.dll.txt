[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Microsoft.Internal.Web.Utils.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string Argument_Must_Be_Between { get; }
    internal static string Argument_Must_Be_Enum_Member { get; }
    internal static string Argument_Must_Be_GreaterThan { get; }
    internal static string Argument_Must_Be_GreaterThanOrEqualTo { get; }
    internal static string Argument_Must_Be_LessThan { get; }
    internal static string Argument_Must_Be_LessThanOrEqualTo { get; }
    internal static string Argument_Must_Be_Null_Or_Non_Empty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_Argument_Must_Be_Between();
    internal static string get_Argument_Must_Be_Enum_Member();
    internal static string get_Argument_Must_Be_GreaterThan();
    internal static string get_Argument_Must_Be_GreaterThanOrEqualTo();
    internal static string get_Argument_Must_Be_LessThan();
    internal static string get_Argument_Must_Be_LessThanOrEqualTo();
    internal static string get_Argument_Must_Be_Null_Or_Non_Empty();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
internal interface Microsoft.Internal.Web.Utils.IFileSystem {
    public abstract virtual bool FileExists(string path);
    public abstract virtual Stream ReadFile(string path);
    public abstract virtual Stream OpenFile(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string root);
}
internal class Microsoft.Internal.Web.Utils.PhysicalFileSystem : object {
    public sealed virtual bool FileExists(string path);
    public sealed virtual Stream ReadFile(string path);
    public sealed virtual Stream OpenFile(string path);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path);
    private static void EnsureDirectory(string path);
}
internal static class System.Web.WebPages.Deployment.AppDomainHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public static IDictionary`2<string, IEnumerable`1<string>> GetBinAssemblyReferences(string appPath, string configPath);
    [CompilerGeneratedAttribute]
private static string <GetBinAssemblyReferences>b__1(string assemblyPath);
}
internal static class System.Web.WebPages.Deployment.AssemblyUtils : object {
    private static string SharedLibPublicKey;
    internal static AssemblyName ThisAssemblyName;
    internal static Version WebPagesV1Version;
    private static string _binFileName;
    private static Version _mwiVersion;
    private static AssemblyName _mwiAssemblyName;
    private static AssemblyName[] _version1AssemblyList;
    private static AssemblyName[] _versionCurrentAssemblyList;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyName, Version> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyName, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<KeyValuePair`2<string, IEnumerable`1<string>>, Version>, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<KeyValuePair`2<string, IEnumerable`1<string>>, Version>, KeyValuePair`2<string, Version>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, Version>, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, Version>, Version> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`3<AssemblyName, string, <>f__AnonymousType1`2<AssemblyName, string>> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<AssemblyName, string>, <>f__AnonymousType2`2<<>f__AnonymousType1`2<AssemblyName, string>, AssemblyName>> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<AssemblyName, string>, AssemblyName>, bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<AssemblyName, string>, AssemblyName>, Version> CS$<>9__CachedAnonymousMethodDelegate1d;
    private static AssemblyUtils();
    internal static Version GetMaxWebPagesVersion();
    internal static Version GetMaxWebPagesVersion(IEnumerable`1<AssemblyName> loadedAssemblies);
    internal static bool IsVersionAvailable(Version version);
    internal static bool IsVersionAvailable(IEnumerable`1<AssemblyName> loadedAssemblies, Version version);
    private static IEnumerable`1<AssemblyName> GetWebPagesAssemblies(IEnumerable`1<AssemblyName> loadedAssemblies);
    internal static Version GetVersionFromBin(string binDirectory, IFileSystem fileSystem, Func`2<string, AssemblyName> getAssemblyNameThunk);
    internal static bool NamesMatch(AssemblyName left, AssemblyName right, bool matchVersion);
    internal static IEnumerable`1<AssemblyName> GetLoadedAssemblies();
    internal static IEnumerable`1<AssemblyName> GetAssembliesForVersion(Version version);
    private static AssemblyName GetAssemblyName(Assembly assembly);
    private static AssemblyName GetFullName(string name, Version version, string publicKeyToken);
    internal static AssemblyName GetFullName(string name, Version version);
    public static IDictionary`2<string, Version> GetAssembliesMatchingOtherVersions(IDictionary`2<string, IEnumerable`1<string>> references);
    private static Version GetMatchingVersion(IEnumerable`1<AssemblyName> webPagesAssemblies, IEnumerable`1<string> references);
    [CompilerGeneratedAttribute]
private static Version <GetMaxWebPagesVersion>b__0(AssemblyName c);
    [CompilerGeneratedAttribute]
private static bool <GetWebPagesAssemblies>b__5(AssemblyName otherName);
    [CompilerGeneratedAttribute]
private static bool <GetAssembliesMatchingOtherVersions>b__9(<>f__AnonymousType0`2<KeyValuePair`2<string, IEnumerable`1<string>>, Version> <>h__TransparentIdentifier7);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, Version> <GetAssembliesMatchingOtherVersions>b__a(<>f__AnonymousType0`2<KeyValuePair`2<string, IEnumerable`1<string>>, Version> <>h__TransparentIdentifier7);
    [CompilerGeneratedAttribute]
private static string <GetAssembliesMatchingOtherVersions>b__b(KeyValuePair`2<string, Version> k);
    [CompilerGeneratedAttribute]
private static Version <GetAssembliesMatchingOtherVersions>b__c(KeyValuePair`2<string, Version> k);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1`2<AssemblyName, string> <GetMatchingVersion>b__16(AssemblyName webPagesAssembly, string referenceName);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2`2<<>f__AnonymousType1`2<AssemblyName, string>, AssemblyName> <GetMatchingVersion>b__17(<>f__AnonymousType1`2<AssemblyName, string> <>h__TransparentIdentifier13);
    [CompilerGeneratedAttribute]
private static bool <GetMatchingVersion>b__18(<>f__AnonymousType2`2<<>f__AnonymousType1`2<AssemblyName, string>, AssemblyName> <>h__TransparentIdentifier14);
    [CompilerGeneratedAttribute]
private static Version <GetMatchingVersion>b__19(<>f__AnonymousType2`2<<>f__AnonymousType1`2<AssemblyName, string>, AssemblyName> <>h__TransparentIdentifier14);
}
internal class System.Web.WebPages.Deployment.BuildManagerWrapper : object {
    public sealed virtual Stream ReadCachedFile(string path);
    public sealed virtual Stream CreateCachedFile(string path);
}
internal interface System.Web.WebPages.Deployment.IBuildManager {
    public abstract virtual Stream CreateCachedFile(string fileName);
    public abstract virtual Stream ReadCachedFile(string fileName);
}
[EditorBrowsableAttribute("1")]
public static class System.Web.WebPages.Deployment.PreApplicationStartCode : object {
    private static string ToolingIndicatorKey;
    private static IFileSystem _physicalFileSystem;
    private static bool _startWasCalled;
    private static PreApplicationStartCode();
    public static void Start();
    internal static bool StartCore();
    internal static bool StartCore(IFileSystem fileSystem, string appDomainAppPath, string binDirectory, NameValueCollection appSettings, IEnumerable`1<AssemblyName> loadedAssemblies, IBuildManager buildManager, Action`1<Version> loadWebPages, Action registerForChangeNotification, Func`2<string, AssemblyName> getAssemblyNameThunk);
    private static void InvalidateCompilationResultsIfVersionChanged(IBuildManager buildManager, IFileSystem fileSystem, string binDirectory, Version currentVersion);
    internal static ICollection`1<MethodInfo> GetPreStartInitMethodsFromAssemblyCollection(IEnumerable`1<Assembly> assemblies);
    internal static MethodInfo FindPreStartInitMethod(Type type, string methodName);
    private static void RegisterForChangeNotifications();
    private static void OnChanged(string key, object value, CacheItemRemovedReason reason);
    private static void LoadWebPages(Version version);
    private static Assembly LoadAssembly(AssemblyName name);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class System.Web.WebPages.Deployment.Resources.ConfigurationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InstallPathNotFound { get; }
    internal static string WebPagesImplicitVersionFailure { get; }
    internal static string WebPagesRegistryKeyDoesNotExist { get; }
    internal static string WebPagesVersionChanges { get; }
    internal static string WebPagesVersionConflict { get; }
    internal static string WebPagesVersionNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InstallPathNotFound();
    internal static string get_WebPagesImplicitVersionFailure();
    internal static string get_WebPagesRegistryKeyDoesNotExist();
    internal static string get_WebPagesVersionChanges();
    internal static string get_WebPagesVersionConflict();
    internal static string get_WebPagesVersionNotFound();
}
[EditorBrowsableAttribute("1")]
public static class System.Web.WebPages.Deployment.WebPagesDeployment : object {
    private static string AppSettingsVersionKey;
    private static string AppSettingsEnabledKey;
    private static string ForceRecompilationFile;
    private static string WebPagesRegistryKey;
    internal static string CacheKeyPrefix;
    private static String[] _webPagesExtensions;
    private static object _installPathNotFound;
    private static IFileSystem _fileSystem;
    private static WebPagesDeployment();
    public static Version GetVersionWithoutEnabledCheck(string path);
    public static Version GetExplicitWebPagesVersion(string path);
    [ObsoleteAttribute("This method is obsolete and is meant for legacy code. Use GetVersionWithoutEnabled instead.")]
public static Version GetVersion(string path);
    internal static Version GetObsoleteVersionInternal(string path, NameValueCollection configuration, IFileSystem fileSystem);
    public static Version GetMaxVersion();
    public static bool IsEnabled(string path);
    public static bool IsExplicitlyDisabled(string path);
    [EditorBrowsableAttribute("1")]
public static IDictionary`2<string, Version> GetIncompatibleDependencies(string appPath);
    internal static bool IsExplicitlyDisabled(NameValueCollection appSettings);
    internal static bool IsEnabled(IFileSystem fileSystem, string path, NameValueCollection appSettings);
    private static Nullable`1<bool> GetEnabled(NameValueCollection appSettings);
    internal static Version GetVersionInternal(NameValueCollection appSettings, Version binVersion, Version defaultVersion);
    private static Version GetVersionWithoutEnabledCheckInternal(string path, Version defaultVersion);
    public static string GetAssemblyPath(Version version);
    public static IEnumerable`1<AssemblyName> GetWebPagesAssemblies();
    private static NameValueCollection GetAppSettings(string path);
    internal static Version GetVersionFromConfig(NameValueCollection appSettings);
    internal static bool AppRootContainsWebPagesFile(IFileSystem fileSystem, string path);
    private static bool IsWebPagesFile(string file);
    private static string GetBinDirectory(string path);
    internal static Version GetPreviousRuntimeVersion(IBuildManager buildManagerFileSystem);
    internal static void PersistRuntimeVersion(IBuildManager buildManager, Version version);
    internal static void ForceRecompile(IFileSystem fileSystem, string binDirectory);
    private static string GetCachedFileName();
    private static string RemoveTrailingSlash(string path);
}
