public class React.AssemblyRegistration : object {
    public static TinyIoCContainer Container { get; }
    public static TinyIoCContainer get_Container();
    public sealed virtual void Register(TinyIoCContainer container);
}
public class React.Babel : object {
    protected static string JSX_CACHE_KEY;
    protected static string COMPILED_FILE_SUFFIX;
    protected static string SOURE_MAP_FILE_SUFFIX;
    protected static int LINES_IN_HEADER;
    protected IReactEnvironment _environment;
    protected ICache _cache;
    protected IFileSystem _fileSystem;
    protected IFileCacheHash _fileCacheHash;
    protected IReactSiteConfiguration _config;
    protected string _babelConfig;
    public Babel(IReactEnvironment environment, ICache cache, IFileSystem fileSystem, IFileCacheHash fileCacheHash, IReactSiteConfiguration siteConfig);
    public virtual string TransformFile(string filename);
    public virtual JavaScriptWithSourceMap TransformFileWithSourceMap(string filename, bool forceGenerateSourceMap);
    protected virtual JavaScriptWithSourceMap LoadFromFileCache(string filename, string hash, bool forceGenerateSourceMap);
    protected virtual JavaScriptWithSourceMap TransformWithHeader(string filename, string contents, string hash);
    public virtual string Transform(string input, string filename);
    public virtual JavaScriptWithSourceMap TransformWithSourceMap(string input, string filename);
    protected virtual string GetFileHeader(string hash, string babelVersion);
    public virtual string GetOutputPath(string path);
    public virtual string GetSourceMapOutputPath(string path);
    public virtual string TransformAndSaveFile(string filename);
    public virtual bool CacheIsValid(string inputFileContents, string outputPath);
}
public class React.BabelConfig : object {
    [CompilerGeneratedAttribute]
private ISet`1<string> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Presets>k__BackingField;
    public ISet`1<string> Plugins { get; public set; }
    public ISet`1<string> Presets { get; public set; }
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Plugins();
    [CompilerGeneratedAttribute]
public void set_Plugins(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Presets();
    [CompilerGeneratedAttribute]
public void set_Presets(ISet`1<string> value);
    public string Serialize(string babelVersion);
}
public static class React.BabelVersions : object {
    public static string Babel6;
    public static string Babel7;
    private static BabelVersions();
}
public class React.Exceptions.BabelException : ReactException {
    public BabelException(string message);
    public BabelException(string message, Exception innerException);
    protected BabelException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.BabelNotLoadedException : ReactException {
    protected BabelNotLoadedException(SerializationInfo info, StreamingContext context);
    private static string GetMessage();
}
public class React.Exceptions.ReactConfigurationException : ReactException {
    public ReactConfigurationException(string message);
    public ReactConfigurationException(string message, Exception innerException);
    protected ReactConfigurationException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.ReactEngineNotFoundException : ReactException {
    public ReactEngineNotFoundException(string message);
    protected ReactEngineNotFoundException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.ReactException : Exception {
    public ReactException(string message);
    public ReactException(string message, Exception innerException);
    protected ReactException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.ReactInvalidComponentException : ReactException {
    public ReactInvalidComponentException(string message);
    public ReactInvalidComponentException(string message, Exception innerException);
    protected ReactInvalidComponentException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.ReactNotInitialisedException : ReactException {
    public ReactNotInitialisedException(string message);
    public ReactNotInitialisedException(string message, Exception innerException);
    protected ReactNotInitialisedException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.ReactScriptLoadException : ReactException {
    public ReactScriptLoadException(string message);
    public ReactScriptLoadException(string message, Exception innerException);
    protected ReactScriptLoadException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.ReactScriptPrecompilationNotAvailableException : ReactException {
    public ReactScriptPrecompilationNotAvailableException(string message);
    protected ReactScriptPrecompilationNotAvailableException(SerializationInfo info, StreamingContext context);
}
public class React.Exceptions.ReactServerRenderingException : ReactException {
    public ReactServerRenderingException(string message);
    public ReactServerRenderingException(string message, Exception innerException);
    protected ReactServerRenderingException(SerializationInfo info, StreamingContext context);
}
public class React.FileCacheHash : object {
    private static string HASH_PREFIX;
    private HashAlgorithm _hash;
    public sealed virtual string CalculateHash(string input);
    public virtual bool ValidateHash(string cacheContents, string hash);
    public virtual string AddPrefix(string hash);
}
public abstract class React.FileSystemBase : object {
    public static string RELATIVE_PREFIX;
    public abstract virtual string MapPath(string relativePath);
    public virtual string ToRelativePath(string absolutePath);
    public virtual string ReadAsString(string relativePath);
    public virtual void WriteAsString(string relativePath, string contents);
    public virtual bool FileExists(string relativePath);
    public virtual IEnumerable`1<string> Glob(string glob);
}
[ExtensionAttribute]
public static class React.FileSystemExtensions : object {
    [ExtensionAttribute]
public static bool IsGlobPattern(string input);
}
public interface React.IAssemblyRegistration {
    public abstract virtual void Register(TinyIoCContainer container);
}
public interface React.IBabel {
    public abstract virtual string TransformFile(string filename);
    public abstract virtual JavaScriptWithSourceMap TransformFileWithSourceMap(string filename, bool forceGenerateSourceMap);
    public abstract virtual string Transform(string input, string filename);
    public abstract virtual JavaScriptWithSourceMap TransformWithSourceMap(string input, string filename);
    public abstract virtual string TransformAndSaveFile(string filename);
    public abstract virtual string GetOutputPath(string path);
    public abstract virtual string GetSourceMapOutputPath(string path);
}
public interface React.ICache {
    public abstract virtual T Get(string key, T fallback);
    public abstract virtual void Set(string key, T data, TimeSpan slidingExpiration, IEnumerable`1<string> cacheDependencyFiles);
}
public interface React.IFileCacheHash {
    public abstract virtual string CalculateHash(string input);
    public abstract virtual bool ValidateHash(string cacheContents, string hash);
    public abstract virtual string AddPrefix(string hash);
}
public interface React.IFileSystem {
    public abstract virtual string MapPath(string relativePath);
    public abstract virtual string ToRelativePath(string absolutePath);
    public abstract virtual string ReadAsString(string relativePath);
    public abstract virtual void WriteAsString(string relativePath, string contents);
    public abstract virtual bool FileExists(string relativePath);
    public abstract virtual IEnumerable`1<string> Glob(string glob);
}
public interface React.IJavaScriptEngineFactory {
    public abstract virtual IJsEngine GetEngineForCurrentThread();
    public abstract virtual void DisposeEngineForCurrentThread();
    public abstract virtual PooledJsEngine GetEngine();
}
public static class React.Initializer : object {
    private static ISet`1<string> _obsoleteAssemblies;
    private static Initializer();
    public static void Initialize(Func`2<RegisterOptions, RegisterOptions> requestLifetimeRegistration);
    private static void InitializeIoC(Func`2<RegisterOptions, RegisterOptions> requestLifetimeRegistration);
    private static bool IsReactAssembly(Assembly assembly);
    private static bool IsReactAssembly(string assemblyName);
    private static bool IsComponentRegistration(Type type);
}
public interface React.IReactComponent {
    public object Props { get; public set; }
    public string ComponentName { get; public set; }
    public string ContainerId { get; public set; }
    public string ContainerTag { get; public set; }
    public string ContainerClass { get; public set; }
    public bool ServerOnly { get; public set; }
    public abstract virtual object get_Props();
    public abstract virtual void set_Props(object value);
    public abstract virtual string get_ComponentName();
    public abstract virtual void set_ComponentName(string value);
    public abstract virtual string get_ContainerId();
    public abstract virtual void set_ContainerId(string value);
    public abstract virtual string get_ContainerTag();
    public abstract virtual void set_ContainerTag(string value);
    public abstract virtual string get_ContainerClass();
    public abstract virtual void set_ContainerClass(string value);
    public abstract virtual bool get_ServerOnly();
    public abstract virtual void set_ServerOnly(bool value);
    public abstract virtual string RenderHtml(bool renderContainerOnly, bool renderServerOnly, Action`3<Exception, string, string> exceptionHandler, IRenderFunctions renderFunctions);
    public abstract virtual void RenderHtml(TextWriter writer, bool renderContainerOnly, bool renderServerOnly, Action`3<Exception, string, string> exceptionHandler, IRenderFunctions renderFunctions);
    public abstract virtual string RenderJavaScript(bool waitForDOMContentLoad);
    public abstract virtual void RenderJavaScript(TextWriter writer, bool waitForDOMContentLoad);
}
public interface React.IReactEnvironment {
    public string Version { get; }
    public string EngineVersion { get; }
    public IBabel Babel { get; }
    public IReactSiteConfiguration Configuration { get; }
    public abstract virtual string get_Version();
    public abstract virtual string get_EngineVersion();
    public abstract virtual void Execute(string code);
    public abstract virtual T Execute(string code);
    public abstract virtual T Execute(string function, Object[] args);
    public abstract virtual T ExecuteWithBabel(string function, Object[] args);
    public abstract virtual bool HasVariable(string name);
    public abstract virtual IReactComponent CreateComponent(string componentName, T props, string containerId, bool clientOnly, bool serverOnly, bool skipLazyInit);
    public abstract virtual IReactComponent CreateComponent(IReactComponent component, bool clientOnly);
    public abstract virtual string GetInitJavaScript(bool clientOnly);
    public abstract virtual IBabel get_Babel();
    public abstract virtual void ReturnEngineToPool();
    public abstract virtual IReactSiteConfiguration get_Configuration();
    public abstract virtual void GetInitJavaScript(TextWriter writer, bool clientOnly);
    public abstract virtual IEnumerable`1<string> GetScriptPaths();
    public abstract virtual IEnumerable`1<string> GetStylePaths();
}
public interface React.IReactIdGenerator {
    public abstract virtual string Generate();
}
public interface React.IReactSiteConfiguration {
    public IEnumerable`1<string> Scripts { get; }
    public IEnumerable`1<string> ScriptsWithoutTransform { get; }
    public bool ReuseJavaScriptEngines { get; public set; }
    public JsonSerializerSettings JsonSerializerSettings { get; public set; }
    public Nullable`1<int> StartEngines { get; public set; }
    public Nullable`1<int> MaxEngines { get; public set; }
    public Nullable`1<int> MaxUsagesPerEngine { get; public set; }
    public bool AllowJavaScriptPrecompilation { get; public set; }
    public bool LoadReact { get; public set; }
    public bool LoadBabel { get; public set; }
    public BabelConfig BabelConfig { get; public set; }
    public string BabelVersion { get; public set; }
    public bool UseDebugReact { get; public set; }
    public bool UseServerSideRendering { get; public set; }
    public Action`3<Exception, string, string> ExceptionHandler { get; public set; }
    public Func`1<string> ScriptNonceProvider { get; public set; }
    public string ReactAppBuildPath { get; public set; }
    public abstract virtual IReactSiteConfiguration AddScript(string filename);
    public abstract virtual IReactSiteConfiguration AddScriptWithoutTransform(string filename);
    public abstract virtual IEnumerable`1<string> get_Scripts();
    public abstract virtual IEnumerable`1<string> get_ScriptsWithoutTransform();
    public abstract virtual bool get_ReuseJavaScriptEngines();
    public abstract virtual void set_ReuseJavaScriptEngines(bool value);
    public abstract virtual IReactSiteConfiguration SetReuseJavaScriptEngines(bool value);
    public abstract virtual JsonSerializerSettings get_JsonSerializerSettings();
    public abstract virtual void set_JsonSerializerSettings(JsonSerializerSettings value);
    public abstract virtual IReactSiteConfiguration SetJsonSerializerSettings(JsonSerializerSettings settings);
    public abstract virtual Nullable`1<int> get_StartEngines();
    public abstract virtual void set_StartEngines(Nullable`1<int> value);
    public abstract virtual IReactSiteConfiguration SetStartEngines(Nullable`1<int> startEngines);
    public abstract virtual Nullable`1<int> get_MaxEngines();
    public abstract virtual void set_MaxEngines(Nullable`1<int> value);
    public abstract virtual IReactSiteConfiguration SetMaxEngines(Nullable`1<int> maxEngines);
    public abstract virtual Nullable`1<int> get_MaxUsagesPerEngine();
    public abstract virtual void set_MaxUsagesPerEngine(Nullable`1<int> value);
    public abstract virtual IReactSiteConfiguration SetMaxUsagesPerEngine(Nullable`1<int> maxUsagesPerEngine);
    public abstract virtual bool get_AllowJavaScriptPrecompilation();
    public abstract virtual void set_AllowJavaScriptPrecompilation(bool value);
    public abstract virtual IReactSiteConfiguration SetAllowJavaScriptPrecompilation(bool allowJavaScriptPrecompilation);
    public abstract virtual bool get_LoadReact();
    public abstract virtual void set_LoadReact(bool value);
    public abstract virtual IReactSiteConfiguration SetLoadReact(bool loadReact);
    public abstract virtual bool get_LoadBabel();
    public abstract virtual void set_LoadBabel(bool value);
    public abstract virtual IReactSiteConfiguration SetLoadBabel(bool loadBabel);
    public abstract virtual BabelConfig get_BabelConfig();
    public abstract virtual void set_BabelConfig(BabelConfig value);
    public abstract virtual IReactSiteConfiguration SetBabelConfig(BabelConfig value);
    public abstract virtual string get_BabelVersion();
    public abstract virtual void set_BabelVersion(string value);
    public abstract virtual IReactSiteConfiguration SetBabelVersion(string value);
    public abstract virtual bool get_UseDebugReact();
    public abstract virtual void set_UseDebugReact(bool value);
    public abstract virtual IReactSiteConfiguration SetUseDebugReact(bool value);
    public abstract virtual bool get_UseServerSideRendering();
    public abstract virtual void set_UseServerSideRendering(bool value);
    public abstract virtual IReactSiteConfiguration DisableServerSideRendering();
    public abstract virtual Action`3<Exception, string, string> get_ExceptionHandler();
    public abstract virtual void set_ExceptionHandler(Action`3<Exception, string, string> value);
    public abstract virtual IReactSiteConfiguration SetExceptionHandler(Action`3<Exception, string, string> handler);
    public abstract virtual Func`1<string> get_ScriptNonceProvider();
    public abstract virtual void set_ScriptNonceProvider(Func`1<string> value);
    public abstract virtual IReactSiteConfiguration SetScriptNonceProvider(Func`1<string> provider);
    public abstract virtual string get_ReactAppBuildPath();
    public abstract virtual void set_ReactAppBuildPath(string value);
    public abstract virtual IReactSiteConfiguration SetReactAppBuildPath(string reactAppBuildPath);
}
public interface React.IRenderFunctions {
    public abstract virtual void PreRender(Func`2<string, string> executeJs);
    public abstract virtual string WrapComponent(string componentToRender);
    public abstract virtual string TransformRenderedHtml(string input);
    public abstract virtual void PostRender(Func`2<string, string> executeJs);
}
public class React.JavaScriptEngineFactory : object {
    protected IReactSiteConfiguration _config;
    protected ICache _cache;
    protected IFileSystem _fileSystem;
    protected Func`1<IJsEngine> _factory;
    protected IJsEngineSwitcher _jsEngineSwitcher;
    protected ConcurrentDictionary`2<int, IJsEngine> _engines;
    protected IJsPool _pool;
    protected bool _disposed;
    protected Exception _scriptLoadException;
    public JavaScriptEngineFactory(IJsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, ICache cache, IFileSystem fileSystem);
    protected virtual IJsPool CreatePool();
    protected virtual void InitialiseEngine(IJsEngine engine);
    private void LoadResource(IJsEngine engine, string resourceName, Assembly assembly);
    private void LoadUserScripts(IJsEngine engine);
    private void EnsureReactLoaded(IJsEngine engine);
    public virtual IJsEngine GetEngineForCurrentThread();
    public virtual void DisposeEngineForCurrentThread();
    public virtual PooledJsEngine GetEngine();
    private static Func`1<IJsEngine> GetFactory(IJsEngineSwitcher jsEngineSwitcher);
    private static bool EngineIsUsable(IJsEngine engine);
    public virtual void Dispose();
    public void EnsureValidState();
    [CompilerGeneratedAttribute]
private void <CreatePool>b__10_0(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private IJsEngine <GetEngineForCurrentThread>b__15_0(int id);
}
[ExtensionAttribute]
public static class React.JavaScriptEnginePrecompilationUtils : object {
    private static string PRECOMPILED_JS_RESOURCE_CACHE_KEY;
    private static string PRECOMPILED_JS_FILE_CACHE_KEY;
    private static TimeSpan PRECOMPILED_JS_CACHE_ENTRY_SLIDING_EXPIRATION;
    private static JavaScriptEnginePrecompilationUtils();
    [ExtensionAttribute]
public static bool TryExecuteFileWithPrecompilation(IJsEngine engine, ICache cache, IFileSystem fileSystem, string path, Func`2<string, string> scriptLoader);
    [ExtensionAttribute]
public static bool TryExecuteResourceWithPrecompilation(IJsEngine engine, ICache cache, string resourceName, Assembly assembly);
    private static void EnsurePrecompilationAvailability(IJsEngine engine, ICache cache);
}
[ExtensionAttribute]
public static class React.JavaScriptEngineUtils : object {
    [ExtensionAttribute]
public static void ExecuteFile(IJsEngine engine, IFileSystem fileSystem, string path);
    [ExtensionAttribute]
public static T CallFunctionReturningJson(IJsEngine engine, string function, Object[] args);
}
public class React.JavaScriptWithSourceMap : object {
    [CompilerGeneratedAttribute]
private string <BabelVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceMap <SourceMap>k__BackingField;
    public string BabelVersion { get; public set; }
    public string Code { get; public set; }
    public string Hash { get; public set; }
    public SourceMap SourceMap { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BabelVersion();
    [CompilerGeneratedAttribute]
public void set_BabelVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public SourceMap get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(SourceMap value);
}
public class React.NullCache : object {
    public sealed virtual T Get(string key, T fallback);
    public sealed virtual void Set(string key, T data, TimeSpan slidingExpiration, IEnumerable`1<string> cacheDependencyFiles);
}
internal class React.ReactAppAssetManifest : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Entrypoints>k__BackingField;
    public Dictionary`2<string, string> Files { get; public set; }
    public List`1<string> Entrypoints { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Entrypoints();
    [CompilerGeneratedAttribute]
public void set_Entrypoints(List`1<string> value);
    public static ReactAppAssetManifest LoadManifest(IReactSiteConfiguration config, IFileSystem fileSystem, ICache cache, bool useCacheRead);
}
public class React.ReactComponent : object {
    private static ConcurrentDictionary`2<string, bool> _componentNameValidCache;
    [ThreadStaticAttribute]
private static StringWriter _sharedStringWriter;
    private static Regex _identifierRegex;
    protected IReactEnvironment _environment;
    protected IReactSiteConfiguration _configuration;
    protected object _props;
    protected string _serializedProps;
    [CompilerGeneratedAttribute]
private string <ComponentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServerOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClientOnly>k__BackingField;
    public string ComponentName { get; public set; }
    public string ContainerId { get; public set; }
    public string ContainerTag { get; public set; }
    public string ContainerClass { get; public set; }
    public bool ServerOnly { get; public set; }
    public object Props { get; public set; }
    public bool ClientOnly { get; public set; }
    public ReactComponent(IReactEnvironment environment, IReactSiteConfiguration configuration, IReactIdGenerator reactIdGenerator, string componentName, string containerId);
    private static ReactComponent();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ComponentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ComponentName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContainerId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContainerId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContainerTag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContainerTag(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContainerClass();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContainerClass(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ServerOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerOnly(bool value);
    public sealed virtual object get_Props();
    public sealed virtual void set_Props(object value);
    [CompilerGeneratedAttribute]
public bool get_ClientOnly();
    [CompilerGeneratedAttribute]
public void set_ClientOnly(bool value);
    public virtual string RenderHtml(bool renderContainerOnly, bool renderServerOnly, Action`3<Exception, string, string> exceptionHandler, IRenderFunctions renderFunctions);
    public virtual void RenderHtml(TextWriter writer, bool renderContainerOnly, bool renderServerOnly, Action`3<Exception, string, string> exceptionHandler, IRenderFunctions renderFunctions);
    public virtual string RenderJavaScript(bool waitForDOMContentLoad);
    public virtual void RenderJavaScript(TextWriter writer, bool waitForDOMContentLoad);
    protected virtual void EnsureComponentExists();
    protected virtual void WriteComponentInitialiser(TextWriter writer);
    internal static void EnsureComponentNameValid(string componentName);
    private string GetStringFromWriter(Action`1<TextWriter> fnWithTextWriter);
    [CompilerGeneratedAttribute]
private void <RenderHtml>b__36_0(TextWriter componentInitWriter);
    [CompilerGeneratedAttribute]
private string <RenderHtml>b__36_1(string x);
    [CompilerGeneratedAttribute]
private string <RenderHtml>b__36_2(string x);
}
public class React.ReactEnvironment : object {
    protected static string USER_SCRIPTS_LOADED_KEY;
    protected static int LARGE_STACK_SIZE;
    protected IJavaScriptEngineFactory _engineFactory;
    protected IReactSiteConfiguration _config;
    protected ICache _cache;
    protected IFileSystem _fileSystem;
    protected IFileCacheHash _fileCacheHash;
    private IReactIdGenerator _reactIdGenerator;
    protected Lazy`1<IBabel> _babelTransformer;
    protected Lazy`1<string> _version;
    protected Lazy`1<PooledJsEngine> _engineFromPool;
    protected IList`1<IReactComponent> _components;
    public static IReactEnvironment Current { get; }
    public static IReactEnvironment GetCurrentOrThrow { get; }
    protected IJsEngine Engine { get; }
    public IBabel Babel { get; }
    public string EngineVersion { get; }
    public string Version { get; }
    public IReactSiteConfiguration Configuration { get; }
    public ReactEnvironment(IJavaScriptEngineFactory engineFactory, IReactSiteConfiguration config, ICache cache, IFileSystem fileSystem, IFileCacheHash fileCacheHash, IReactIdGenerator reactIdGenerator);
    public static IReactEnvironment get_Current();
    public static IReactEnvironment get_GetCurrentOrThrow();
    protected virtual IJsEngine get_Engine();
    public virtual IBabel get_Babel();
    public virtual string get_EngineVersion();
    public virtual string get_Version();
    protected virtual void EnsureUserScriptsLoaded();
    public virtual void Execute(string code);
    public virtual T Execute(string code);
    public virtual T Execute(string function, Object[] args);
    public virtual bool HasVariable(string name);
    public virtual IReactComponent CreateComponent(string componentName, T props, string containerId, bool clientOnly, bool serverOnly, bool skipLazyInit);
    public virtual IReactComponent CreateComponent(IReactComponent component, bool clientOnly);
    public virtual string GetInitJavaScript(bool clientOnly);
    public virtual void GetInitJavaScript(TextWriter writer, bool clientOnly);
    private ReactAppAssetManifest GetAppManifest();
    public virtual IEnumerable`1<string> GetScriptPaths();
    public virtual IEnumerable`1<string> GetStylePaths();
    public virtual T ExecuteWithBabel(string function, Object[] args);
    private static string GetVersion();
    public virtual void Dispose();
    public sealed virtual void ReturnEngineToPool();
    public virtual IReactSiteConfiguration get_Configuration();
    private void EnsureBabelLoaded(IJsEngine engine);
    [CompilerGeneratedAttribute]
private IBabel <.ctor>b__16_0();
    [CompilerGeneratedAttribute]
private PooledJsEngine <.ctor>b__16_1();
    [CompilerGeneratedAttribute]
private PooledJsEngine <ReturnEngineToPool>b__40_0();
}
public class React.ReactIdGenerator : object {
    private static string _encode32Chars;
    private static long _random;
    private static Char[] reactPrefix;
    private static int reactIdLength;
    [ThreadStaticAttribute]
private static Char[] _chars;
    private static ReactIdGenerator();
    public sealed virtual string Generate();
}
public class React.ReactSiteConfiguration : object {
    [CompilerGeneratedAttribute]
private static IReactSiteConfiguration <Configuration>k__BackingField;
    private IList`1<string> _scriptFiles;
    private IList`1<string> _scriptFilesWithoutTransform;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <JsonSerializerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReuseJavaScriptEngines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartEngines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxEngines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxUsagesPerEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowJavaScriptPrecompilation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadReact>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadBabel>k__BackingField;
    [CompilerGeneratedAttribute]
private BabelConfig <BabelConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BabelVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDebugReact>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseServerSideRendering>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<Exception, string, string> <ExceptionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <ScriptNonceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReactAppBuildPath>k__BackingField;
    public static IReactSiteConfiguration Configuration { get; public set; }
    public IEnumerable`1<string> Scripts { get; }
    public IEnumerable`1<string> ScriptsWithoutTransform { get; }
    public JsonSerializerSettings JsonSerializerSettings { get; public set; }
    public bool ReuseJavaScriptEngines { get; public set; }
    public Nullable`1<int> StartEngines { get; public set; }
    public Nullable`1<int> MaxEngines { get; public set; }
    public Nullable`1<int> MaxUsagesPerEngine { get; public set; }
    public bool AllowJavaScriptPrecompilation { get; public set; }
    public bool LoadReact { get; public set; }
    public bool LoadBabel { get; public set; }
    public BabelConfig BabelConfig { get; public set; }
    public string BabelVersion { get; public set; }
    public bool UseDebugReact { get; public set; }
    public bool UseServerSideRendering { get; public set; }
    public Action`3<Exception, string, string> ExceptionHandler { get; public set; }
    public Func`1<string> ScriptNonceProvider { get; public set; }
    public string ReactAppBuildPath { get; public set; }
    private static ReactSiteConfiguration();
    [CompilerGeneratedAttribute]
public static IReactSiteConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public static void set_Configuration(IReactSiteConfiguration value);
    public sealed virtual IReactSiteConfiguration AddScript(string filename);
    public sealed virtual IReactSiteConfiguration AddScriptWithoutTransform(string filename);
    private IEnumerable`1<string> Glob(string glob);
    public sealed virtual IEnumerable`1<string> get_Scripts();
    public sealed virtual IEnumerable`1<string> get_ScriptsWithoutTransform();
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerSettings get_JsonSerializerSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonSerializerSettings(JsonSerializerSettings value);
    public sealed virtual IReactSiteConfiguration SetJsonSerializerSettings(JsonSerializerSettings settings);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReuseJavaScriptEngines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReuseJavaScriptEngines(bool value);
    public sealed virtual IReactSiteConfiguration SetReuseJavaScriptEngines(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_StartEngines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartEngines(Nullable`1<int> value);
    public sealed virtual IReactSiteConfiguration SetStartEngines(Nullable`1<int> startEngines);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxEngines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxEngines(Nullable`1<int> value);
    public sealed virtual IReactSiteConfiguration SetMaxEngines(Nullable`1<int> maxEngines);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxUsagesPerEngine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxUsagesPerEngine(Nullable`1<int> value);
    public sealed virtual IReactSiteConfiguration SetMaxUsagesPerEngine(Nullable`1<int> maxUsagesPerEngine);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowJavaScriptPrecompilation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowJavaScriptPrecompilation(bool value);
    public sealed virtual IReactSiteConfiguration SetAllowJavaScriptPrecompilation(bool allowJavaScriptPrecompilation);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LoadReact();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LoadReact(bool value);
    public sealed virtual IReactSiteConfiguration SetLoadReact(bool loadReact);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LoadBabel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LoadBabel(bool value);
    public sealed virtual IReactSiteConfiguration SetLoadBabel(bool loadBabel);
    [CompilerGeneratedAttribute]
public sealed virtual BabelConfig get_BabelConfig();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BabelConfig(BabelConfig value);
    public sealed virtual IReactSiteConfiguration SetBabelConfig(BabelConfig value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BabelVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BabelVersion(string value);
    public sealed virtual IReactSiteConfiguration SetBabelVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseDebugReact();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseDebugReact(bool value);
    public sealed virtual IReactSiteConfiguration SetUseDebugReact(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseServerSideRendering();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseServerSideRendering(bool value);
    public sealed virtual IReactSiteConfiguration DisableServerSideRendering();
    [CompilerGeneratedAttribute]
public sealed virtual Action`3<Exception, string, string> get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExceptionHandler(Action`3<Exception, string, string> value);
    public sealed virtual IReactSiteConfiguration SetExceptionHandler(Action`3<Exception, string, string> handler);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<string> get_ScriptNonceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScriptNonceProvider(Func`1<string> value);
    public sealed virtual IReactSiteConfiguration SetScriptNonceProvider(Func`1<string> provider);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReactAppBuildPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReactAppBuildPath(string value);
    public sealed virtual IReactSiteConfiguration SetReactAppBuildPath(string reactAppBuildPath);
}
public class React.RenderFunctions.ChainedRenderFunctions : object {
    private ReadOnlyCollection`1<IRenderFunctions> _chainedFunctions;
    public ChainedRenderFunctions(IRenderFunctions[] chainedFunctions);
    public sealed virtual void PreRender(Func`2<string, string> executeJs);
    public sealed virtual string WrapComponent(string componentToRender);
    public sealed virtual string TransformRenderedHtml(string input);
    public sealed virtual void PostRender(Func`2<string, string> executeJs);
}
public class React.RenderFunctions.EmotionFunctions : RenderFunctionsBase {
    public virtual string TransformRenderedHtml(string input);
}
public class React.RenderFunctions.ReactHelmetFunctions : RenderFunctionsBase {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenderedHelmet>k__BackingField;
    public Dictionary`2<string, string> RenderedHelmet { get; private set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenderedHelmet();
    [CompilerGeneratedAttribute]
private void set_RenderedHelmet(Dictionary`2<string, string> value);
    public virtual void PostRender(Func`2<string, string> executeJs);
}
public class React.RenderFunctions.ReactJssFunctions : RenderFunctionsBase {
    [CompilerGeneratedAttribute]
private string <RenderedStyles>k__BackingField;
    public string RenderedStyles { get; private set; }
    [CompilerGeneratedAttribute]
public string get_RenderedStyles();
    [CompilerGeneratedAttribute]
private void set_RenderedStyles(string value);
    public virtual void PreRender(Func`2<string, string> executeJs);
    public virtual string WrapComponent(string componentToRender);
    public virtual void PostRender(Func`2<string, string> executeJs);
}
public class React.RenderFunctions.StyledComponentsFunctions : RenderFunctionsBase {
    [CompilerGeneratedAttribute]
private string <RenderedStyles>k__BackingField;
    public string RenderedStyles { get; private set; }
    [CompilerGeneratedAttribute]
public string get_RenderedStyles();
    [CompilerGeneratedAttribute]
private void set_RenderedStyles(string value);
    public virtual void PreRender(Func`2<string, string> executeJs);
    public virtual string WrapComponent(string componentToRender);
    public virtual void PostRender(Func`2<string, string> executeJs);
}
public abstract class React.RenderFunctionsBase : object {
    public virtual void PreRender(Func`2<string, string> executeJs);
    public virtual string WrapComponent(string componentToRender);
    public virtual string TransformRenderedHtml(string input);
    public virtual void PostRender(Func`2<string, string> executeJs);
}
public class React.SimpleFileSystem : FileSystemBase {
    public virtual string MapPath(string relativePath);
}
public class React.SourceMap : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SourcesContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mappings>k__BackingField;
    public int Version { get; public set; }
    public string File { get; public set; }
    public string SourceRoot { get; public set; }
    public IList`1<string> Sources { get; public set; }
    public IList`1<string> SourcesContent { get; public set; }
    public IList`1<string> Names { get; public set; }
    public string Mappings { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_SourceRoot();
    [CompilerGeneratedAttribute]
public void set_SourceRoot(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SourcesContent();
    [CompilerGeneratedAttribute]
public void set_SourcesContent(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Names();
    [CompilerGeneratedAttribute]
public void set_Names(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Mappings();
    [CompilerGeneratedAttribute]
public void set_Mappings(string value);
    public string ToJson();
    public static SourceMap FromJson(string json);
}
public static class React.SystemEnvironmentUtils : object {
    private static Lazy`1<bool> _isRunningOnMac;
    private static SystemEnvironmentUtils();
    public static bool IsRunningOnMac();
}
[ExtensionAttribute]
public static class React.TinyIoC.AssemblyExtensions : object {
    [ExtensionAttribute]
public static Type[] SafeGetTypes(Assembly assembly);
}
public enum React.TinyIoC.DuplicateImplementationActions : Enum {
    public int value__;
    public static DuplicateImplementationActions RegisterSingle;
    public static DuplicateImplementationActions RegisterMultiple;
    public static DuplicateImplementationActions Fail;
}
public class React.TinyIoC.NamedParameterOverloads : Dictionary`2<string, object> {
    private static NamedParameterOverloads _Default;
    public static NamedParameterOverloads Default { get; }
    public NamedParameterOverloads(IDictionary`2<string, object> data);
    private static NamedParameterOverloads();
    public static NamedParameterOverloads FromIDictionary(IDictionary`2<string, object> data);
    public static NamedParameterOverloads get_Default();
}
public enum React.TinyIoC.NamedResolutionFailureActions : Enum {
    public int value__;
    public static NamedResolutionFailureActions AttemptUnnamedResolution;
    public static NamedResolutionFailureActions Fail;
}
public class React.TinyIoC.ResolveOptions : object {
    private static ResolveOptions _Default;
    private static ResolveOptions _FailUnregisteredAndNameNotFound;
    private static ResolveOptions _FailUnregisteredOnly;
    private static ResolveOptions _FailNameNotFoundOnly;
    private UnregisteredResolutionActions _UnregisteredResolutionAction;
    private NamedResolutionFailureActions _NamedResolutionFailureAction;
    public UnregisteredResolutionActions UnregisteredResolutionAction { get; public set; }
    public NamedResolutionFailureActions NamedResolutionFailureAction { get; public set; }
    public static ResolveOptions Default { get; }
    public static ResolveOptions FailNameNotFoundOnly { get; }
    public static ResolveOptions FailUnregisteredAndNameNotFound { get; }
    public static ResolveOptions FailUnregisteredOnly { get; }
    private static ResolveOptions();
    public UnregisteredResolutionActions get_UnregisteredResolutionAction();
    public void set_UnregisteredResolutionAction(UnregisteredResolutionActions value);
    public NamedResolutionFailureActions get_NamedResolutionFailureAction();
    public void set_NamedResolutionFailureAction(NamedResolutionFailureActions value);
    public static ResolveOptions get_Default();
    public static ResolveOptions get_FailNameNotFoundOnly();
    public static ResolveOptions get_FailUnregisteredAndNameNotFound();
    public static ResolveOptions get_FailUnregisteredOnly();
}
[ExtensionAttribute]
internal static class React.TinyIoC.ReverseTypeExtender : object {
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericParameter(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
}
[DefaultMemberAttribute("Item")]
public class React.TinyIoC.SafeDictionary`2 : object {
    private ReaderWriterLockSlim _padlock;
    private Dictionary`2<TKey, TValue> _Dictionary;
    unknown TValue Item {public set; }
    public IEnumerable`1<TKey> Keys { get; }
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& value);
    public bool Remove(TKey key);
    public void Clear();
    public IEnumerable`1<TKey> get_Keys();
    public sealed virtual void Dispose();
}
public class React.TinyIoC.TinyIoCAutoRegistrationException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCAutoRegistrationException(Type registerType, IEnumerable`1<Type> types);
    public TinyIoCAutoRegistrationException(Type registerType, IEnumerable`1<Type> types, Exception innerException);
    protected TinyIoCAutoRegistrationException(SerializationInfo info, StreamingContext context);
    private static string GetTypesString(IEnumerable`1<Type> types);
}
public class React.TinyIoC.TinyIoCConstructorResolutionException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCConstructorResolutionException(Type type);
    public TinyIoCConstructorResolutionException(Type type, Exception innerException);
    public TinyIoCConstructorResolutionException(string message, Exception innerException);
    public TinyIoCConstructorResolutionException(string message);
    protected TinyIoCConstructorResolutionException(SerializationInfo info, StreamingContext context);
}
public class React.TinyIoC.TinyIoCContainer : object {
    private static TinyIoCContainer _Current;
    private SafeDictionary`2<TypeRegistration, ObjectFactoryBase> _RegisteredTypes;
    private static SafeDictionary`2<ConstructorInfo, ObjectConstructor> _ObjectConstructorCache;
    private TinyIoCContainer _Parent;
    private object _AutoRegisterLock;
    private bool disposed;
    public static TinyIoCContainer Current { get; }
    private static TinyIoCContainer();
    private TinyIoCContainer(TinyIoCContainer parent);
    public TinyIoCContainer GetChildContainer();
    public void AutoRegister();
    public void AutoRegister(Func`2<Type, bool> registrationPredicate);
    public void AutoRegister(DuplicateImplementationActions duplicateAction);
    public void AutoRegister(DuplicateImplementationActions duplicateAction, Func`2<Type, bool> registrationPredicate);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies, Func`2<Type, bool> registrationPredicate);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies, DuplicateImplementationActions duplicateAction);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies, DuplicateImplementationActions duplicateAction, Func`2<Type, bool> registrationPredicate);
    public RegisterOptions Register(Type registerType);
    public RegisterOptions Register(Type registerType, string name);
    public RegisterOptions Register(Type registerType, Type registerImplementation);
    public RegisterOptions Register(Type registerType, Type registerImplementation, string name);
    public RegisterOptions Register(Type registerType, object instance);
    public RegisterOptions Register(Type registerType, object instance, string name);
    public RegisterOptions Register(Type registerType, Type registerImplementation, object instance);
    public RegisterOptions Register(Type registerType, Type registerImplementation, object instance, string name);
    public RegisterOptions Register(Type registerType, Func`3<TinyIoCContainer, NamedParameterOverloads, object> factory);
    public RegisterOptions Register(Type registerType, Func`3<TinyIoCContainer, NamedParameterOverloads, object> factory, string name);
    public RegisterOptions Register();
    public RegisterOptions Register(string name);
    public RegisterOptions Register();
    public RegisterOptions Register(string name);
    public RegisterOptions Register(RegisterType instance);
    public RegisterOptions Register(RegisterType instance, string name);
    public RegisterOptions Register(RegisterImplementation instance);
    public RegisterOptions Register(RegisterImplementation instance, string name);
    public RegisterOptions Register(Func`3<TinyIoCContainer, NamedParameterOverloads, RegisterType> factory);
    public RegisterOptions Register(Func`3<TinyIoCContainer, NamedParameterOverloads, RegisterType> factory, string name);
    public MultiRegisterOptions RegisterMultiple(IEnumerable`1<Type> implementationTypes);
    public MultiRegisterOptions RegisterMultiple(Type registrationType, IEnumerable`1<Type> implementationTypes);
    public bool Unregister();
    public bool Unregister(string name);
    public bool Unregister(Type registerType);
    public bool Unregister(Type registerType, string name);
    public object Resolve(Type resolveType);
    public object Resolve(Type resolveType, ResolveOptions options);
    public object Resolve(Type resolveType, string name);
    public object Resolve(Type resolveType, string name, ResolveOptions options);
    public object Resolve(Type resolveType, NamedParameterOverloads parameters);
    public object Resolve(Type resolveType, NamedParameterOverloads parameters, ResolveOptions options);
    public object Resolve(Type resolveType, string name, NamedParameterOverloads parameters);
    public object Resolve(Type resolveType, string name, NamedParameterOverloads parameters, ResolveOptions options);
    public ResolveType Resolve();
    public ResolveType Resolve(ResolveOptions options);
    public ResolveType Resolve(string name);
    public ResolveType Resolve(string name, ResolveOptions options);
    public ResolveType Resolve(NamedParameterOverloads parameters);
    public ResolveType Resolve(NamedParameterOverloads parameters, ResolveOptions options);
    public ResolveType Resolve(string name, NamedParameterOverloads parameters);
    public ResolveType Resolve(string name, NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve(Type resolveType);
    private bool CanResolve(Type resolveType, string name);
    public bool CanResolve(Type resolveType, ResolveOptions options);
    public bool CanResolve(Type resolveType, string name, ResolveOptions options);
    public bool CanResolve(Type resolveType, NamedParameterOverloads parameters);
    public bool CanResolve(Type resolveType, string name, NamedParameterOverloads parameters);
    public bool CanResolve(Type resolveType, NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve(Type resolveType, string name, NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve();
    public bool CanResolve(string name);
    public bool CanResolve(ResolveOptions options);
    public bool CanResolve(string name, ResolveOptions options);
    public bool CanResolve(NamedParameterOverloads parameters);
    public bool CanResolve(string name, NamedParameterOverloads parameters);
    public bool CanResolve(NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve(string name, NamedParameterOverloads parameters, ResolveOptions options);
    public bool TryResolve(Type resolveType, Object& resolvedType);
    public bool TryResolve(Type resolveType, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(Type resolveType, NamedParameterOverloads parameters, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, NamedParameterOverloads parameters, Object& resolvedType);
    public bool TryResolve(Type resolveType, NamedParameterOverloads parameters, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, NamedParameterOverloads parameters, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(ResolveType& resolvedType);
    public bool TryResolve(ResolveOptions options, ResolveType& resolvedType);
    public bool TryResolve(string name, ResolveType& resolvedType);
    public bool TryResolve(string name, ResolveOptions options, ResolveType& resolvedType);
    public bool TryResolve(NamedParameterOverloads parameters, ResolveType& resolvedType);
    public bool TryResolve(string name, NamedParameterOverloads parameters, ResolveType& resolvedType);
    public bool TryResolve(NamedParameterOverloads parameters, ResolveOptions options, ResolveType& resolvedType);
    public bool TryResolve(string name, NamedParameterOverloads parameters, ResolveOptions options, ResolveType& resolvedType);
    public IEnumerable`1<object> ResolveAll(Type resolveType, bool includeUnnamed);
    public IEnumerable`1<object> ResolveAll(Type resolveType);
    public IEnumerable`1<ResolveType> ResolveAll(bool includeUnnamed);
    public IEnumerable`1<ResolveType> ResolveAll();
    public void BuildUp(object input);
    public void BuildUp(object input, ResolveOptions resolveOptions);
    public static TinyIoCContainer get_Current();
    private void AutoRegisterInternal(IEnumerable`1<Assembly> assemblies, DuplicateImplementationActions duplicateAction, Func`2<Type, bool> registrationPredicate);
    private bool IsIgnoredAssembly(Assembly assembly);
    private bool IsIgnoredType(Type type, Func`2<Type, bool> registrationPredicate);
    private void RegisterDefaultTypes();
    private ObjectFactoryBase GetCurrentFactory(TypeRegistration registration);
    private RegisterOptions RegisterInternal(Type registerType, string name, ObjectFactoryBase factory);
    private RegisterOptions AddUpdateRegistration(TypeRegistration typeRegistration, ObjectFactoryBase factory);
    private bool RemoveRegistration(TypeRegistration typeRegistration);
    private ObjectFactoryBase GetDefaultObjectFactory(Type registerType, Type registerImplementation);
    private bool CanResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options);
    private bool IsIEnumerableRequest(Type type);
    private bool IsAutomaticLazyFactoryRequest(Type type);
    private ObjectFactoryBase GetParentObjectFactory(TypeRegistration registration);
    private object ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options);
    private object GetLazyAutomaticFactoryRequest(Type type);
    private object GetIEnumerableRequest(Type type);
    private bool CanConstruct(ConstructorInfo ctor, NamedParameterOverloads parameters, ResolveOptions options);
    private ConstructorInfo GetBestConstructor(Type type, NamedParameterOverloads parameters, ResolveOptions options);
    private IEnumerable`1<ConstructorInfo> GetTypeConstructors(Type type);
    private object ConstructType(Type requestedType, Type implementationType, ResolveOptions options);
    private object ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, ResolveOptions options);
    private object ConstructType(Type requestedType, Type implementationType, NamedParameterOverloads parameters, ResolveOptions options);
    private object ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options);
    private static ObjectConstructor CreateObjectConstructionDelegateWithCache(ConstructorInfo constructor);
    private void BuildUpInternal(object input, ResolveOptions resolveOptions);
    private IEnumerable`1<TypeRegistration> GetParentRegistrationsForType(Type resolveType);
    private IEnumerable`1<object> ResolveAllInternal(Type resolveType, bool includeUnnamed);
    private static bool IsValidAssignment(Type registerType, Type registerImplementation);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__3_0(Assembly a);
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__4_0(Assembly a);
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__5_0(Assembly a);
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__6_0(Assembly a);
}
public class React.TinyIoC.TinyIoCRegistrationException : Exception {
    private static string CONVERT_ERROR_TEXT;
    private static string GENERIC_CONSTRAINT_ERROR_TEXT;
    public TinyIoCRegistrationException(Type type, string method);
    public TinyIoCRegistrationException(Type type, string method, Exception innerException);
    public TinyIoCRegistrationException(Type registerType, Type implementationType);
    public TinyIoCRegistrationException(Type registerType, Type implementationType, Exception innerException);
    protected TinyIoCRegistrationException(SerializationInfo info, StreamingContext context);
}
public class React.TinyIoC.TinyIoCRegistrationTypeException : Exception {
    private static string REGISTER_ERROR_TEXT;
    public TinyIoCRegistrationTypeException(Type type, string factory);
    public TinyIoCRegistrationTypeException(Type type, string factory, Exception innerException);
    protected TinyIoCRegistrationTypeException(SerializationInfo info, StreamingContext context);
}
public class React.TinyIoC.TinyIoCResolutionException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCResolutionException(Type type);
    public TinyIoCResolutionException(Type type, Exception innerException);
    protected TinyIoCResolutionException(SerializationInfo info, StreamingContext context);
}
public class React.TinyIoC.TinyIoCWeakReferenceException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCWeakReferenceException(Type type);
    public TinyIoCWeakReferenceException(Type type, Exception innerException);
    protected TinyIoCWeakReferenceException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class React.TinyIoC.TypeExtensions : object {
    private static SafeDictionary`2<GenericMethodCacheKey, MethodInfo> _genericMethodCache;
    private static TypeExtensions();
    [ExtensionAttribute]
public static MethodInfo GetGenericMethod(Type sourceType, BindingFlags bindingFlags, string methodName, Type[] genericTypes, Type[] parameterTypes);
    private static MethodInfo GetMethod(Type sourceType, BindingFlags bindingFlags, string methodName, Type[] genericTypes, Type[] parameterTypes);
}
public enum React.TinyIoC.UnregisteredResolutionActions : Enum {
    public int value__;
    public static UnregisteredResolutionActions AttemptResolve;
    public static UnregisteredResolutionActions Fail;
    public static UnregisteredResolutionActions GenericsOnly;
}
[ExtensionAttribute]
public static class React.TinyIoCExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<RegisterOptions, RegisterOptions> <AsRequestLifetime>k__BackingField;
    private static Func`2<RegisterOptions, RegisterOptions> AsRequestLifetime { get; internal set; }
    [CompilerGeneratedAttribute]
private static Func`2<RegisterOptions, RegisterOptions> get_AsRequestLifetime();
    [CompilerGeneratedAttribute]
internal static void set_AsRequestLifetime(Func`2<RegisterOptions, RegisterOptions> value);
    [ExtensionAttribute]
public static RegisterOptions AsPerRequestSingleton(RegisterOptions registerOptions);
}
