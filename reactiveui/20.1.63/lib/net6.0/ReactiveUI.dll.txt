[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.AutoPersistHelper : object {
    private static MemoizingMRUCache`2<Type, Dictionary`2<string, bool>> _persistablePropertiesCache;
    private static MemoizingMRUCache`2<Type, bool> _dataContractCheckCache;
    private static AutoPersistHelper();
    [ExtensionAttribute]
public static IDisposable AutoPersist(T this, Func`2<T, IObservable`1<Unit>> doPersist, Nullable`1<TimeSpan> interval);
    [ExtensionAttribute]
public static IDisposable AutoPersist(T this, Func`2<T, IObservable`1<Unit>> doPersist, IObservable`1<TDontCare> manualSaveSignal, Nullable`1<TimeSpan> interval);
    [ExtensionAttribute]
public static IDisposable AutoPersistCollection(ObservableCollection`1<TItem> this, Func`2<TItem, IObservable`1<Unit>> doPersist, Nullable`1<TimeSpan> interval);
    [ExtensionAttribute]
public static IDisposable AutoPersistCollection(ObservableCollection`1<TItem> this, Func`2<TItem, IObservable`1<Unit>> doPersist, IObservable`1<TDontCare> manualSaveSignal, Nullable`1<TimeSpan> interval);
    [ExtensionAttribute]
public static IDisposable AutoPersistCollection(ReadOnlyObservableCollection`1<TItem> this, Func`2<TItem, IObservable`1<Unit>> doPersist, IObservable`1<TDontCare> manualSaveSignal, Nullable`1<TimeSpan> interval);
    [ExtensionAttribute]
public static IDisposable AutoPersistCollection(TCollection this, Func`2<TItem, IObservable`1<Unit>> doPersist, IObservable`1<TDontCare> manualSaveSignal, Nullable`1<TimeSpan> interval);
    [ExtensionAttribute]
public static IDisposable ActOnEveryObject(ObservableCollection`1<TItem> this, Action`1<TItem> onAdd, Action`1<TItem> onRemove);
    [ExtensionAttribute]
public static IDisposable ActOnEveryObject(ReadOnlyObservableCollection`1<TItem> this, Action`1<TItem> onAdd, Action`1<TItem> onRemove);
    [ExtensionAttribute]
public static IDisposable ActOnEveryObject(TCollection collection, Action`1<TItem> onAdd, Action`1<TItem> onRemove);
    [ExtensionAttribute]
public static IDisposable ActOnEveryObject(IObservable`1<IChangeSet`1<TItem>> this, Action`1<TItem> onAdd, Action`1<TItem> onRemove);
}
public enum ReactiveUI.BindingDirection : Enum {
    public int value__;
    public static BindingDirection OneWay;
    public static BindingDirection TwoWay;
    public static BindingDirection AsyncOneWay;
}
public class ReactiveUI.ByteToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.CanActivateViewFetcher : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForView(Type view);
    [NullableContextAttribute("1")]
public sealed virtual IObservable`1<bool> GetActivationForView(IActivatableView view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ReactiveUI.ChainedComparer`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IComparer`1<T> <parent>P;
    [CompilerGeneratedAttribute]
private Comparison`1<T> <comparison>P;
    public ChainedComparer`1(IComparer`1<T> parent, Comparison`1<T> comparison);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(T x, T y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ChangeSetMixin : object {
    [ExtensionAttribute]
public static bool HasCountChanged(IChangeSet changeSet);
    [ExtensionAttribute]
public static IObservable`1<IChangeSet> CountChanged(IObservable`1<IChangeSet> changeSet);
    [ExtensionAttribute]
public static IObservable`1<IChangeSet`1<T>> CountChanged(IObservable`1<IChangeSet`1<T>> changeSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class ReactiveUI.CombinedReactiveCommand`2 : ReactiveCommandBase`2<TParam, IList`1<TResult>> {
    private ReactiveCommand`2<TParam, IList`1<TResult>> _innerCommand;
    private ScheduledSubject`1<Exception> _exceptions;
    private IDisposable _exceptionsSubscription;
    private IScheduler _outputScheduler;
    public IObservable`1<bool> CanExecute { get; }
    public IObservable`1<bool> IsExecuting { get; }
    public IObservable`1<Exception> ThrownExceptions { get; }
    [NullableContextAttribute("2")]
protected internal CombinedReactiveCommand`2(IEnumerable`1<ReactiveCommandBase`2<TParam, TResult>> childCommands, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public virtual IObservable`1<bool> get_CanExecute();
    public virtual IObservable`1<bool> get_IsExecuting();
    public virtual IObservable`1<Exception> get_ThrownExceptions();
    public virtual IDisposable Subscribe(IObserver`1<IList`1<TResult>> observer);
    public virtual IObservable`1<IList`1<TResult>> Execute(TParam parameter);
    public virtual IObservable`1<IList`1<TResult>> Execute();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private IObservable`1<bool> <.ctor>b__4_2(Exception ex);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__4_5(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.CommandBinder : object {
    private static ICommandBinderImplementation _binderImplementation;
    private static CommandBinder();
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, TProp> BindCommand(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TProp>> propertyName, Expression`1<Func`2<TView, TControl>> controlName, IObservable`1<TParam> withParameter, string toEvent);
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, TProp> BindCommand(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TProp>> propertyName, Expression`1<Func`2<TView, TControl>> controlName, string toEvent);
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, TProp> BindCommand(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TProp>> propertyName, Expression`1<Func`2<TView, TControl>> controlName, Expression`1<Func`2<TViewModel, TParam>> withParameter, string toEvent);
}
public class ReactiveUI.CommandBinderImplementation : object {
    [NullableContextAttribute("1")]
public sealed virtual IReactiveBinding`2<TView, TProp> BindCommand(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> vmProperty, Expression`1<Func`2<TView, TControl>> controlProperty, Expression`1<Func`2<TViewModel, TParam>> withParameter, string toEvent);
    [NullableContextAttribute("1")]
public sealed virtual IReactiveBinding`2<TView, TProp> BindCommand(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> vmProperty, Expression`1<Func`2<TView, TControl>> controlProperty, IObservable`1<TParam> withParameter, string toEvent);
    [NullableContextAttribute("1")]
private static IDisposable BindCommandInternal(IObservable`1<TProp> source, TView view, Expression controlExpression, IObservable`1<TParam> withParameter, string toEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ReactiveUI.CommandBinderImplementationMixins : object {
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, TProp> BindCommand(ICommandBinderImplementation this, TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> propertyName, Expression`1<Func`2<TView, TControl>> controlName, string toEvent);
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, TProp> BindCommand(ICommandBinderImplementation this, TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> propertyName, Expression`1<Func`2<TView, TControl>> controlName, Expression`1<Func`2<TViewModel, TParam>> withParameter, string toEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ComparerChainingExtensions : object {
    [ExtensionAttribute]
public static IComparer`1<T> ThenBy(IComparer`1<T> parent, Func`2<T, TValue> selector);
    [ExtensionAttribute]
public static IComparer`1<T> ThenBy(IComparer`1<T> parent, Func`2<T, TValue> selector, IComparer`1<TValue> comparer);
    [ExtensionAttribute]
public static IComparer`1<T> ThenByDescending(IComparer`1<T> parent, Func`2<T, TValue> selector);
    [ExtensionAttribute]
public static IComparer`1<T> ThenByDescending(IComparer`1<T> parent, Func`2<T, TValue> selector, IComparer`1<TValue> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ReactiveUI.CompatMixins : object {
    [ExtensionAttribute]
internal static void ForEach(IEnumerable`1<T> this, Action`1<T> block);
    [ExtensionAttribute]
internal static IEnumerable`1<T> SkipLast(IEnumerable`1<T> enumerable, int count);
}
public class ReactiveUI.ComponentModelTypeConverter : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MemoizingMRUCache`2<ValueTuple`2<Type, Type>, TypeConverter> _typeConverterCache;
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("2")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ReactiveUI.CreatesCommandBinding : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoizingMRUCache`2<Type, ICreatesCommandBinding> _bindCommandCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoizingMRUCache`2<Type, ICreatesCommandBinding> _bindCommandEventCache;
    private static CreatesCommandBinding();
    public static IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter);
    public static IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter, string eventName);
}
public class ReactiveUI.CreatesCommandBindingViaCommandParameter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObject(Type type, bool hasEventTarget);
    [NullableContextAttribute("2")]
public sealed virtual IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter);
    [NullableContextAttribute("2")]
public sealed virtual IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter, string eventName);
}
public class ReactiveUI.CreatesCommandBindingViaEvent : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<ValueTuple`2<string, Type>> _defaultEventsToBind;
    private static CreatesCommandBindingViaEvent();
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObject(Type type, bool hasEventTarget);
    [NullableContextAttribute("2")]
public sealed virtual IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter);
    [NullableContextAttribute("2")]
public sealed virtual IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter, string eventName);
}
public class ReactiveUI.DecimalToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.DefaultViewLocator : object {
    [CompilerGeneratedAttribute]
private Func`2<string, string> <ViewModelToViewFunc>k__BackingField;
    public Func`2<string, string> ViewModelToViewFunc { get; public set; }
    internal DefaultViewLocator(Func`2<string, string> viewModelToViewFunc);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ViewModelToViewFunc();
    [CompilerGeneratedAttribute]
public void set_ViewModelToViewFunc(Func`2<string, string> value);
    [NullableContextAttribute("2")]
public sealed virtual IViewFor ResolveView(T viewModel, string contract);
    private static Type ToggleViewModelType(Type viewModelType);
    private static string DeinterfaceifyTypeName(string typeName);
    private static string InterfaceifyTypeName(string typeName);
    [NullableContextAttribute("2")]
private IViewFor AttemptViewResolutionFor(Type viewModelType, string contract);
    [NullableContextAttribute("2")]
private IViewFor AttemptViewResolution(string viewTypeName, string contract);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.DependencyResolverMixins : object {
    [ExtensionAttribute]
public static void InitializeReactiveUI(IMutableDependencyResolver resolver, RegistrationNamespace[] registrationNamespaces);
    [ExtensionAttribute]
public static void RegisterViewsForViewModels(IMutableDependencyResolver resolver, Assembly assembly);
    private static void RegisterType(IMutableDependencyResolver resolver, TypeInfo ti, Type serviceType, string contract);
    private static Func`1<object> TypeFactory(TypeInfo typeInfo);
    private static void ProcessRegistrationForNamespace(string namespaceName, AssemblyName assemblyName, IMutableDependencyResolver resolver);
}
public class ReactiveUI.DoubleToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.DummySuspensionDriver : object {
    public sealed virtual IObservable`1<object> LoadState();
    public sealed virtual IObservable`1<Unit> SaveState(object state);
    public sealed virtual IObservable`1<Unit> InvalidateState();
}
public class ReactiveUI.EqualityTypeConverter : object {
    [NullableAttribute("1")]
private static MemoizingMRUCache`2<Type, MethodInfo> _referenceCastCache;
    [NullableAttribute("2")]
private static MethodInfo _methodInfo;
    private static EqualityTypeConverter();
    [NullableContextAttribute("2")]
public static object DoReferenceCast(object from, Type targetType);
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("2")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
    [NullableContextAttribute("1")]
private static bool IsInstanceOfType(object from, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ExpressionMixins : object {
    [ExtensionAttribute]
public static IEnumerable`1<Expression> GetExpressionChain(Expression expression);
    [ExtensionAttribute]
public static MemberInfo GetMemberInfo(Expression expression);
    [ExtensionAttribute]
public static Expression GetParent(Expression expression);
    [ExtensionAttribute]
public static Object[] GetArgumentsArray(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ReactiveUI.ExpressionRewriter : ExpressionVisitor {
    public virtual Expression Visit(Expression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitIndex(IndexExpression node);
}
public interface ReactiveUI.IActivatableView {
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IActivatableViewModel {
    public ViewModelActivator Activator { get; }
    public abstract virtual ViewModelActivator get_Activator();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IActivationForViewFetcher {
    public abstract virtual int GetAffinityForView(Type view);
    public abstract virtual IObservable`1<bool> GetActivationForView(IActivatableView view);
}
public interface ReactiveUI.IBindingTypeConverter {
    [NullableContextAttribute("1")]
public abstract virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("2")]
public abstract virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.ICanActivate {
    public IObservable`1<Unit> Activated { get; }
    public IObservable`1<Unit> Deactivated { get; }
    public abstract virtual IObservable`1<Unit> get_Activated();
    public abstract virtual IObservable`1<Unit> get_Deactivated();
}
internal interface ReactiveUI.ICanForceManualActivation {
    public abstract virtual void Activate(bool activate);
}
[NullableContextAttribute("1")]
internal interface ReactiveUI.ICommandBinderImplementation {
    public abstract virtual IReactiveBinding`2<TView, TProp> BindCommand(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> vmProperty, Expression`1<Func`2<TView, TControl>> controlProperty, Expression`1<Func`2<TViewModel, TParam>> withParameter, string toEvent);
    public abstract virtual IReactiveBinding`2<TView, TProp> BindCommand(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> vmProperty, Expression`1<Func`2<TView, TControl>> controlProperty, IObservable`1<TParam> withParameter, string toEvent);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IComparerBuilder`1 {
    public abstract virtual IComparer`1<T> OrderBy(Func`2<T, TValue> selector);
    public abstract virtual IComparer`1<T> OrderBy(Func`2<T, TValue> selector, IComparer`1<TValue> comparer);
    public abstract virtual IComparer`1<T> OrderByDescending(Func`2<T, TValue> selector);
    public abstract virtual IComparer`1<T> OrderByDescending(Func`2<T, TValue> selector, IComparer`1<TValue> comparer);
}
[NullableContextAttribute("2")]
public interface ReactiveUI.ICreatesCommandBinding {
    [NullableContextAttribute("1")]
public abstract virtual int GetAffinityForObject(Type type, bool hasEventTarget);
    public abstract virtual IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter);
    public abstract virtual IDisposable BindCommandToObject(ICommand command, object target, IObservable`1<object> commandParameter, string eventName);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.ICreatesObservableForProperty {
    public abstract virtual int GetAffinityForObject(Type type, string propertyName, bool beforeChanged);
    public abstract virtual IObservable`1<IObservedChange`2<object, object>> GetNotificationForProperty(object sender, Expression expression, string propertyName, bool beforeChanged, bool suppressWarnings);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IHandleObservableErrors {
    public IObservable`1<Exception> ThrownExceptions { get; }
    public abstract virtual IObservable`1<Exception> get_ThrownExceptions();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IInteraction`2 {
    public abstract virtual IDisposable RegisterHandler(Action`1<IInteractionContext`2<TInput, TOutput>> handler);
    public abstract virtual IDisposable RegisterHandler(Func`2<IInteractionContext`2<TInput, TOutput>, Task> handler);
    public abstract virtual IDisposable RegisterHandler(Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<TDontCare>> handler);
    public abstract virtual IObservable`1<TOutput> Handle(TInput input);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IInteractionBinderImplementation {
    public abstract virtual IDisposable BindInteraction(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, IInteraction`2<TInput, TOutput>>> propertyName, Func`2<IInteractionContext`2<TInput, TOutput>, Task> handler);
    public abstract virtual IDisposable BindInteraction(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, IInteraction`2<TInput, TOutput>>> propertyName, Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<TDontCare>> handler);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IInteractionContext`2 {
    public TInput Input { get; }
    public bool IsHandled { get; }
    public abstract virtual TInput get_Input();
    public abstract virtual bool get_IsHandled();
    public abstract virtual void SetOutput(TOutput output);
}
[NullableContextAttribute("2")]
public interface ReactiveUI.IMessageBus {
    public abstract virtual void RegisterScheduler(IScheduler scheduler, string contract);
    public abstract virtual IObservable`1<T> Listen(string contract);
    public abstract virtual IObservable`1<T> ListenIncludeLatest(string contract);
    [NullableContextAttribute("1")]
public abstract virtual bool IsRegistered(Type type, string contract);
    [NullableContextAttribute("1")]
public abstract virtual IDisposable RegisterMessageSource(IObservable`1<T> source, string contract);
    public abstract virtual void SendMessage(T message, string contract);
}
public class ReactiveUI.INPCObservableForProperty : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObject(Type type, string propertyName, bool beforeChanged);
    [NullableContextAttribute("1")]
public sealed virtual IObservable`1<IObservedChange`2<object, object>> GetNotificationForProperty(object sender, Expression expression, string propertyName, bool beforeChanged, bool suppressWarnings);
}
public class ReactiveUI.IntegerToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.Interaction`2 : object {
    private List`1<Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<Unit>>> _handlers;
    private object _sync;
    private IScheduler _handlerScheduler;
    [NullableContextAttribute("2")]
public Interaction`2(IScheduler handlerScheduler);
    public sealed virtual IDisposable RegisterHandler(Action`1<IInteractionContext`2<TInput, TOutput>> handler);
    public sealed virtual IDisposable RegisterHandler(Func`2<IInteractionContext`2<TInput, TOutput>, Task> handler);
    public sealed virtual IDisposable RegisterHandler(Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<TDontCare>> handler);
    public virtual IObservable`1<TOutput> Handle(TInput input);
    protected Func`2[] GetHandlers();
    protected virtual IOutputContext`2<TInput, TOutput> GenerateContext(TInput input);
    private void AddHandler(Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<Unit>> handler);
    private void RemoveHandler(Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<Unit>> handler);
}
public class ReactiveUI.InteractionBinderImplementation : object {
    [NullableContextAttribute("1")]
public sealed virtual IDisposable BindInteraction(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, IInteraction`2<TInput, TOutput>>> propertyName, Func`2<IInteractionContext`2<TInput, TOutput>, Task> handler);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable BindInteraction(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, IInteraction`2<TInput, TOutput>>> propertyName, Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<TDontCare>> handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.InteractionBindingMixins : object {
    private static InteractionBinderImplementation _binderImplementation;
    private static InteractionBindingMixins();
    [ExtensionAttribute]
public static IDisposable BindInteraction(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, IInteraction`2<TInput, TOutput>>> propertyName, Func`2<IInteractionContext`2<TInput, TOutput>, Task> handler);
    [ExtensionAttribute]
public static IDisposable BindInteraction(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, IInteraction`2<TInput, TOutput>>> propertyName, Func`2<IInteractionContext`2<TInput, TOutput>, IObservable`1<TDontCare>> handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.InteractionContext`2 : object {
    private TOutput _output;
    private int _outputSet;
    [CompilerGeneratedAttribute]
private TInput <Input>k__BackingField;
    public TInput Input { get; }
    public bool IsHandled { get; }
    internal InteractionContext`2(TInput input);
    [CompilerGeneratedAttribute]
public sealed virtual TInput get_Input();
    public sealed virtual bool get_IsHandled();
    public sealed virtual void SetOutput(TOutput output);
    public sealed virtual TOutput GetOutput();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IObservedChange`2 {
    public TSender Sender { get; }
    [NullableAttribute("2")]
public Expression Expression { get; }
    public TValue Value { get; }
    public abstract virtual TSender get_Sender();
    [NullableContextAttribute("2")]
public abstract virtual Expression get_Expression();
    public abstract virtual TValue get_Value();
}
[NullableContextAttribute("2")]
public interface ReactiveUI.IOutputContext`2 {
    [NullableContextAttribute("1")]
public abstract virtual TOutput GetOutput();
}
[NullableContextAttribute("2")]
public interface ReactiveUI.IPlatformOperations {
    public abstract virtual string GetOrientation();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IPropertyBinderImplementation {
    [NullableContextAttribute("2")]
public abstract virtual IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, IObservable`1<TDontCare> signalViewUpdate, object conversionHint, IBindingTypeConverter vmToViewConverterOverride, IBindingTypeConverter viewToVMConverterOverride, TriggerUpdate triggerUpdate);
    public abstract virtual IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, IObservable`1<TDontCare> signalViewUpdate, Func`2<TVMProp, TVProp> vmToViewConverter, Func`2<TVProp, TVMProp> viewToVmConverter, TriggerUpdate triggerUpdate);
    public abstract virtual IReactiveBinding`2<TView, TVProp> OneWayBind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, object conversionHint, IBindingTypeConverter vmToViewConverterOverride);
    public abstract virtual IReactiveBinding`2<TView, TOut> OneWayBind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> vmProperty, Expression`1<Func`2<TView, TOut>> viewProperty, Func`2<TProp, TOut> selector);
    [NullableContextAttribute("2")]
public abstract virtual IDisposable BindTo(IObservable`1<TValue> observedChange, TTarget target, Expression`1<Func`2<TTarget, TTValue>> propertyExpression, object conversionHint, IBindingTypeConverter vmToViewConverterOverride);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IPropertyBindingHook {
    public abstract virtual bool ExecuteHook(object source, object target, Func`1<IObservedChange`2[]> getCurrentViewModelProperties, Func`1<IObservedChange`2[]> getCurrentViewProperties, BindingDirection direction);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IReactiveBinding`2 {
    public Expression ViewModelExpression { get; }
    public TView View { get; }
    public Expression ViewExpression { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IObservable`1<TValue> Changed { get; }
    public BindingDirection Direction { get; }
    public abstract virtual Expression get_ViewModelExpression();
    public abstract virtual TView get_View();
    public abstract virtual Expression get_ViewExpression();
    public abstract virtual IObservable`1<TValue> get_Changed();
    public abstract virtual BindingDirection get_Direction();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IReactiveCommand {
    public IObservable`1<bool> IsExecuting { get; }
    public IObservable`1<bool> CanExecute { get; }
    public abstract virtual IObservable`1<bool> get_IsExecuting();
    public abstract virtual IObservable`1<bool> get_CanExecute();
}
public interface ReactiveUI.IReactiveCommand`2 {
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<TResult> Execute(TParam parameter);
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<TResult> Execute();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IReactiveNotifyPropertyChanged`1 {
    public IObservable`1<IReactivePropertyChangedEventArgs`1<TSender>> Changing { get; }
    public IObservable`1<IReactivePropertyChangedEventArgs`1<TSender>> Changed { get; }
    public abstract virtual IObservable`1<IReactivePropertyChangedEventArgs`1<TSender>> get_Changing();
    public abstract virtual IObservable`1<IReactivePropertyChangedEventArgs`1<TSender>> get_Changed();
    public abstract virtual IDisposable SuppressChangeNotifications();
}
public interface ReactiveUI.IReactiveObject {
    [NullableContextAttribute("1")]
public abstract virtual void RaisePropertyChanging(PropertyChangingEventArgs args);
    [NullableContextAttribute("1")]
public abstract virtual void RaisePropertyChanged(PropertyChangedEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PreserveAttribute]
public static class ReactiveUI.IReactiveObjectExtensions : object {
    private static ConditionalWeakTable`2<IReactiveObject, IExtensionState`1<IReactiveObject>> state;
    private static IReactiveObjectExtensions();
    [ExtensionAttribute]
public static TRet RaiseAndSetIfChanged(TObj reactiveObject, TRet& backingField, TRet newValue, string propertyName);
    [ExtensionAttribute]
public static void RaisePropertyChanged(TSender reactiveObject, string propertyName);
    [ExtensionAttribute]
public static void RaisePropertyChanging(TSender reactiveObject, string propertyName);
    [ExtensionAttribute]
public static void SubscribePropertyChangingEvents(TSender reactiveObject);
    [ExtensionAttribute]
public static void SubscribePropertyChangedEvents(TSender reactiveObject);
    [ExtensionAttribute]
internal static IObservable`1<IReactivePropertyChangedEventArgs`1<TSender>> GetChangedObservable(TSender reactiveObject);
    [ExtensionAttribute]
internal static IObservable`1<IReactivePropertyChangedEventArgs`1<TSender>> GetChangingObservable(TSender reactiveObject);
    [ExtensionAttribute]
internal static IObservable`1<Exception> GetThrownExceptionsObservable(TSender reactiveObject);
    [ExtensionAttribute]
internal static void RaisingPropertyChanging(TSender reactiveObject, string propertyName);
    [ExtensionAttribute]
internal static void RaisingPropertyChanged(TSender reactiveObject, string propertyName);
    [ExtensionAttribute]
internal static IDisposable SuppressChangeNotifications(TSender reactiveObject);
    [ExtensionAttribute]
internal static bool AreChangeNotificationsEnabled(TSender reactiveObject);
    [ExtensionAttribute]
internal static IDisposable DelayChangeNotifications(TSender reactiveObject);
}
public interface ReactiveUI.IReactiveProperty`1 {
    [NullableAttribute("2")]
public T Value { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IObservable`1<IEnumerable> ObserveErrorChanged { get; }
    [NullableAttribute("1")]
public IObservable`1<bool> ObserveHasErrors { get; }
    [NullableContextAttribute("2")]
public abstract virtual T get_Value();
    [NullableContextAttribute("2")]
public abstract virtual void set_Value(T value);
    public abstract virtual IObservable`1<IEnumerable> get_ObserveErrorChanged();
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<bool> get_ObserveHasErrors();
    public abstract virtual void Refresh();
}
[NullableContextAttribute("2")]
public interface ReactiveUI.IReactivePropertyChangedEventArgs`1 {
    public string PropertyName { get; }
    [NullableAttribute("1")]
public TSender Sender { get; }
    public abstract virtual string get_PropertyName();
    [NullableContextAttribute("1")]
public abstract virtual TSender get_Sender();
}
public class ReactiveUI.IROObservableForProperty : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObject(Type type, string propertyName, bool beforeChanged);
    [NullableContextAttribute("1")]
public sealed virtual IObservable`1<IObservedChange`2<object, object>> GetNotificationForProperty(object sender, Expression expression, string propertyName, bool beforeChanged, bool suppressWarnings);
}
public interface ReactiveUI.IRoutableViewModel {
    [NullableAttribute("2")]
public string UrlPathSegment { get; }
    [NullableAttribute("1")]
public IScreen HostScreen { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_UrlPathSegment();
    [NullableContextAttribute("1")]
public abstract virtual IScreen get_HostScreen();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.IScreen {
    public RoutingState Router { get; }
    public abstract virtual RoutingState get_Router();
}
[NullableContextAttribute("2")]
public interface ReactiveUI.ISetMethodBindingConverter {
    public abstract virtual int GetAffinityForObjects(Type fromType, Type toType);
    public abstract virtual object PerformSet(object toTarget, object newValue, Object[] arguments);
}
[NullableContextAttribute("1")]
public interface ReactiveUI.ISuspensionDriver {
    public abstract virtual IObservable`1<object> LoadState();
    public abstract virtual IObservable`1<Unit> SaveState(object state);
    public abstract virtual IObservable`1<Unit> InvalidateState();
}
[NullableContextAttribute("1")]
public interface ReactiveUI.ISuspensionHost {
    public IObservable`1<Unit> IsLaunchingNew { get; public set; }
    public IObservable`1<Unit> IsResuming { get; public set; }
    public IObservable`1<Unit> IsUnpausing { get; public set; }
    public IObservable`1<IDisposable> ShouldPersistState { get; public set; }
    public IObservable`1<Unit> ShouldInvalidateState { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> CreateNewAppState { get; public set; }
    [NullableAttribute("2")]
public object AppState { get; public set; }
    public abstract virtual IObservable`1<Unit> get_IsLaunchingNew();
    public abstract virtual void set_IsLaunchingNew(IObservable`1<Unit> value);
    public abstract virtual IObservable`1<Unit> get_IsResuming();
    public abstract virtual void set_IsResuming(IObservable`1<Unit> value);
    public abstract virtual IObservable`1<Unit> get_IsUnpausing();
    public abstract virtual void set_IsUnpausing(IObservable`1<Unit> value);
    public abstract virtual IObservable`1<IDisposable> get_ShouldPersistState();
    public abstract virtual void set_ShouldPersistState(IObservable`1<IDisposable> value);
    public abstract virtual IObservable`1<Unit> get_ShouldInvalidateState();
    public abstract virtual void set_ShouldInvalidateState(IObservable`1<Unit> value);
    public abstract virtual Func`1<object> get_CreateNewAppState();
    public abstract virtual void set_CreateNewAppState(Func`1<object> value);
    [NullableContextAttribute("2")]
public abstract virtual object get_AppState();
    [NullableContextAttribute("2")]
public abstract virtual void set_AppState(object value);
}
[NullableContextAttribute("2")]
public interface ReactiveUI.IViewFor {
    public object ViewModel { get; public set; }
    public abstract virtual object get_ViewModel();
    public abstract virtual void set_ViewModel(object value);
}
[NullableContextAttribute("2")]
public interface ReactiveUI.IViewFor`1 {
    public T ViewModel { get; public set; }
    public abstract virtual T get_ViewModel();
    public abstract virtual void set_ViewModel(T value);
}
public interface ReactiveUI.IViewLocator {
    [NullableContextAttribute("2")]
public abstract virtual IViewFor ResolveView(T viewModel, string contract);
}
[NullableContextAttribute("1")]
internal interface ReactiveUI.IWantsToRegisterStuff {
    public abstract virtual void Register(Action`2<Func`1<object>, Type> registerFunction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ReactiveUI.Legacy.CollectionDebugView`1 : object {
    private ICollection`1<T> _collection;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public CollectionDebugView`1(ICollection`1<T> collection);
    public T[] get_Items();
}
internal class ReactiveUI.Legacy.RefcountDisposeWrapper : object {
    [NullableAttribute("2")]
private IDisposable _inner;
    private int _refCount;
    [NullableContextAttribute("1")]
public RefcountDisposeWrapper(IDisposable inner);
    public void AddRef();
    public void Release();
}
public class ReactiveUI.LongToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.MessageBus : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Type, string>, NotAWeakReference> _messageBus;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Type, string>, IScheduler> _schedulerMappings;
    [CompilerGeneratedAttribute]
private static IMessageBus <Current>k__BackingField;
    public static IMessageBus Current { get; public set; }
    private static MessageBus();
    [CompilerGeneratedAttribute]
public static IMessageBus get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(IMessageBus value);
    [NullableContextAttribute("2")]
public sealed virtual void RegisterScheduler(IScheduler scheduler, string contract);
    [NullableContextAttribute("2")]
public sealed virtual IObservable`1<T> Listen(string contract);
    [NullableContextAttribute("2")]
public sealed virtual IObservable`1<T> ListenIncludeLatest(string contract);
    public sealed virtual bool IsRegistered(Type type, string contract);
    public sealed virtual IDisposable RegisterMessageSource(IObservable`1<T> source, string contract);
    [NullableContextAttribute("2")]
public sealed virtual void SendMessage(T message, string contract);
    [NullableContextAttribute("2")]
private ISubject`1<T> SetupSubjectIfNecessary(string contract);
    private void WithMessageBus(Type type, string contract, Action`2<Dictionary`2<ValueTuple`2<Type, string>, NotAWeakReference>, ValueTuple`2<Type, string>> block);
    private IScheduler GetScheduler(ValueTuple`2<Type, string> item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ReactiveUI.NotAWeakReference : object {
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    public object Target { get; }
    public bool IsAlive { get; }
    public NotAWeakReference(object target);
    [CompilerGeneratedAttribute]
public object get_Target();
    public bool get_IsAlive();
}
public class ReactiveUI.NullableByteToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.NullableDecimalToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.NullableDoubleToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.NullableIntegerToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.NullableLongToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.NullableShortToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.NullableSingleToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.OAPHCreationHelperMixin : object {
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, Expression`1<Func`2<TObj, TRet>> property, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, Expression`1<Func`2<TObj, TRet>> property, TRet initialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, Expression`1<Func`2<TObj, TRet>> property, Func`1<TRet> getInitialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, Expression`1<Func`2<TObj, TRet>> property, ObservableAsPropertyHelper`1& result, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, Expression`1<Func`2<TObj, TRet>> property, ObservableAsPropertyHelper`1& result, TRet initialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, Expression`1<Func`2<TObj, TRet>> property, ObservableAsPropertyHelper`1& result, Func`1<TRet> getInitialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, string property, TRet initialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, string property, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, string property, Func`1<TRet> getInitialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, string property, ObservableAsPropertyHelper`1& result, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
public static ObservableAsPropertyHelper`1<TRet> ToProperty(IObservable`1<TRet> target, TObj source, string property, ObservableAsPropertyHelper`1& result, Func`1<TRet> getInitialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
private static ObservableAsPropertyHelper`1<TRet> ObservableToProperty(TObj target, IObservable`1<TRet> observable, Expression`1<Func`2<TObj, TRet>> property, Func`1<TRet> getInitialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
private static ObservableAsPropertyHelper`1<TRet> ObservableToProperty(TObj target, IObservable`1<TRet> observable, Expression`1<Func`2<TObj, TRet>> property, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
private static ObservableAsPropertyHelper`1<TRet> ObservableToProperty(TObj target, IObservable`1<TRet> observable, string property, Func`1<TRet> getInitialValue, bool deferSubscription, IScheduler scheduler);
    [ExtensionAttribute]
private static ObservableAsPropertyHelper`1<TRet> ObservableToProperty(TObj target, IObservable`1<TRet> observable, string property, bool deferSubscription, IScheduler scheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.ObservableAsPropertyHelper`1 : object {
    private Lazy`1<ISubject`1<Exception>> _thrownExceptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ISubject`1<T> _subject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<T> _getInitialValue;
    [NullableAttribute("2")]
private T _lastValue;
    private CompositeDisposable _disposable;
    private int _activated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IObservable`1<T> <Source>k__BackingField;
    public T Value { get; }
    public bool IsSubscribed { get; }
    public IObservable`1<Exception> ThrownExceptions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IObservable`1<T> Source { get; }
    [NullableContextAttribute("2")]
public ObservableAsPropertyHelper`1(IObservable`1<T> observable, Action`1<T> onChanged, T initialValue, bool deferSubscription, IScheduler scheduler);
    [NullableContextAttribute("2")]
public ObservableAsPropertyHelper`1(IObservable`1<T> observable, Action`1<T> onChanged, Action`1<T> onChanging, T initialValue, bool deferSubscription, IScheduler scheduler);
    [NullableContextAttribute("2")]
public ObservableAsPropertyHelper`1(IObservable`1<T> observable, Action`1<T> onChanged, Action`1<T> onChanging, Func`1<T> getInitialValue, bool deferSubscription, IScheduler scheduler);
    public T get_Value();
    public bool get_IsSubscribed();
    public sealed virtual IObservable`1<Exception> get_ThrownExceptions();
    [CompilerGeneratedAttribute]
internal IObservable`1<T> get_Source();
    [NullableContextAttribute("2")]
public static ObservableAsPropertyHelper`1<T> Default(T initialValue, IScheduler scheduler);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class ReactiveUI.ObservableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IObservable`1<T> EmptyIfNull(IObservable`1<T> this);
}
[ExtensionAttribute]
public static class ReactiveUI.ObservableFuncMixins : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TResult> ToObservable(Expression`1<Func`2<TSource, TResult>> expression, TSource source, bool beforeChange, bool skipInitial);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ObservableLoggingMixin : object {
    [ExtensionAttribute]
public static IObservable`1<T> Log(IObservable`1<T> this, TObj logObject, string message, Func`2<T, string> stringifier);
    [ExtensionAttribute]
public static IObservable`1<T> LoggedCatch(IObservable`1<T> this, TObj klass, IObservable`1<T> next, string message);
    [ExtensionAttribute]
public static IObservable`1<T> LoggedCatch(IObservable`1<T> this, TObj klass, Func`2<TException, IObservable`1<T>> next, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ObservableMixins : object {
    [ExtensionAttribute]
public static IObservable`1<T> WhereNotNull(IObservable`1<T> observable);
    internal static IObservable`1<ValueTuple`2<IObservable`1<Unit>, Action>> FromAsyncWithAllNotifications(Func`2<CancellationToken, Task> actionAsync);
    internal static IObservable`1<ValueTuple`2<IObservable`1<Unit>, Action>> FromAsyncWithAllNotifications(Func`3<TParam, CancellationToken, Task> actionAsync, TParam param);
    internal static IObservable`1<ValueTuple`2<IObservable`1<TResult>, Action>> FromAsyncWithAllNotifications(Func`2<CancellationToken, Task`1<TResult>> actionAsync);
    internal static IObservable`1<ValueTuple`2<IObservable`1<TResult>, Action>> FromAsyncWithAllNotifications(Func`3<TParam, CancellationToken, Task`1<TResult>> actionAsync, TParam param);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.ObservedChange`2 : object {
    [CompilerGeneratedAttribute]
private TSender <Sender>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public TSender Sender { get; }
    [NullableAttribute("2")]
public Expression Expression { get; }
    public TValue Value { get; }
    public ObservedChange`2(TSender sender, Expression expression, TValue value);
    [CompilerGeneratedAttribute]
public sealed virtual TSender get_Sender();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual TValue get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ObservedChangedMixin : object {
    [ExtensionAttribute]
public static string GetPropertyName(IObservedChange`2<TSender, TValue> item);
    [ExtensionAttribute]
public static TValue GetValue(IObservedChange`2<TSender, TValue> item);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue GetValueOrDefault(IObservedChange`2<TSender, TValue> item);
    [ExtensionAttribute]
public static IObservable`1<TValue> Value(IObservable`1<IObservedChange`2<TSender, TValue>> item);
    [ExtensionAttribute]
internal static bool TryGetValue(IObservedChange`2<TSender, TValue> item, TValue& changeValue);
    [ExtensionAttribute]
internal static void SetValueToProperty(IObservedChange`2<TSender, TValue> item, TTarget target, Expression`1<Func`2<TTarget, TValue>> property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ReactiveUI.OrderedComparer : object {
    public static IComparerBuilder`1<T> For(IEnumerable`1<T> enumerable);
    public static IComparerBuilder`1<T> For();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ReactiveUI.OrderedComparer`1 : object {
    public static IComparer`1<T> OrderBy(Func`2<T, TValue> selector);
    public static IComparer`1<T> OrderBy(Func`2<T, TValue> selector, IComparer`1<TValue> comparer);
    public static IComparer`1<T> OrderByDescending(Func`2<T, TValue> selector);
    public static IComparer`1<T> OrderByDescending(Func`2<T, TValue> selector, IComparer`1<TValue> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ReactiveUI.PlatformRegistrationManager : object {
    [CompilerGeneratedAttribute]
private static RegistrationNamespace[] <DefaultRegistrationNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private static RegistrationNamespace[] <NamespacesToRegister>k__BackingField;
    internal static RegistrationNamespace[] DefaultRegistrationNamespaces { get; }
    internal static RegistrationNamespace[] NamespacesToRegister { get; internal set; }
    private static PlatformRegistrationManager();
    [CompilerGeneratedAttribute]
internal static RegistrationNamespace[] get_DefaultRegistrationNamespaces();
    [CompilerGeneratedAttribute]
internal static RegistrationNamespace[] get_NamespacesToRegister();
    [CompilerGeneratedAttribute]
internal static void set_NamespacesToRegister(RegistrationNamespace[] value);
    public static void SetRegistrationNamespaces(RegistrationNamespace[] namespaces);
}
public class ReactiveUI.PlatformRegistrations : object {
    public sealed virtual void Register(Action`2<Func`1<object>, Type> registerFunction);
}
public class ReactiveUI.POCOObservableForProperty : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, string>, bool> _hasWarned;
    private static POCOObservableForProperty();
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObject(Type type, string propertyName, bool beforeChanged);
    [NullableContextAttribute("1")]
public sealed virtual IObservable`1<IObservedChange`2<object, object>> GetNotificationForProperty(object sender, Expression expression, string propertyName, bool beforeChanged, bool suppressWarnings);
}
[AttributeUsageAttribute("32767")]
internal class ReactiveUI.PreserveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AllMembers>k__BackingField;
    public bool AllMembers { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllMembers();
    [CompilerGeneratedAttribute]
public void set_AllMembers(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.PropertyBinderImplementation : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoizingMRUCache`2<ValueTuple`2<Type, Type>, IBindingTypeConverter> _typeConverterCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoizingMRUCache`2<ValueTuple`2<Type, Type>, ISetMethodBindingConverter> _setMethodCache;
    private static PropertyBinderImplementation();
    [NullableContextAttribute("2")]
public sealed virtual IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, IObservable`1<TDontCare> signalViewUpdate, object conversionHint, IBindingTypeConverter vmToViewConverterOverride, IBindingTypeConverter viewToVMConverterOverride, TriggerUpdate triggerUpdate);
    public sealed virtual IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, IObservable`1<TDontCare> signalViewUpdate, Func`2<TVMProp, TVProp> vmToViewConverter, Func`2<TVProp, TVMProp> viewToVmConverter, TriggerUpdate triggerUpdate);
    public sealed virtual IReactiveBinding`2<TView, TVProp> OneWayBind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, object conversionHint, IBindingTypeConverter vmToViewConverterOverride);
    public sealed virtual IReactiveBinding`2<TView, TOut> OneWayBind(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TProp>> vmProperty, Expression`1<Func`2<TView, TOut>> viewProperty, Func`2<TProp, TOut> selector);
    [NullableContextAttribute("2")]
public sealed virtual IDisposable BindTo(IObservable`1<TValue> observedChange, TTarget target, Expression`1<Func`2<TTarget, TTValue>> propertyExpression, object conversionHint, IBindingTypeConverter vmToViewConverterOverride);
    internal static IBindingTypeConverter GetConverterForTypes(Type lhs, Type rhs);
    [NullableContextAttribute("2")]
private static Func`4<object, object, Object[], object> GetSetConverter(Type fromType, Type targetType);
    private ValueTuple`2<IDisposable, IObservable`1<TValue>> BindToDirect(IObservable`1<TObs> changeObservable, TTarget target, Expression viewExpression);
    private bool EvalBindingHooks(TViewModel viewModel, TView view, Expression vmExpression, Expression viewExpression, BindingDirection direction);
    private ReactiveBinding`2<TView, ValueTuple`2<object, bool>> BindImpl(TViewModel viewModel, TView view, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, IObservable`1<TDontCare> signalViewUpdate, OutFunc`2<TVMProp, TVProp> vmToViewConverter, OutFunc`2<TVProp, TVMProp> viewToVmConverter, TriggerUpdate triggerUpdate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.PropertyBindingMixins : object {
    private static PropertyBinderImplementation _binderImplementation;
    private static PropertyBindingMixins();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, object conversionHint, IBindingTypeConverter vmToViewConverterOverride, IBindingTypeConverter viewToVMConverterOverride);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, IObservable`1<TDontCare> signalViewUpdate, object conversionHint, IBindingTypeConverter vmToViewConverterOverride, IBindingTypeConverter viewToVMConverterOverride, TriggerUpdate triggerUpdate);
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, Func`2<TVMProp, TVProp> vmToViewConverter, Func`2<TVProp, TVMProp> viewToVmConverter);
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, ValueTuple`2<object, bool>> Bind(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, IObservable`1<TDontCare> signalViewUpdate, Func`2<TVMProp, TVProp> vmToViewConverter, Func`2<TVProp, TVMProp> viewToVmConverter, TriggerUpdate triggerUpdate);
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, TVProp> OneWayBind(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TVMProp>> vmProperty, Expression`1<Func`2<TView, TVProp>> viewProperty, object conversionHint, IBindingTypeConverter vmToViewConverterOverride);
    [ExtensionAttribute]
public static IReactiveBinding`2<TView, TOut> OneWayBind(TView view, TViewModel viewModel, Expression`1<Func`2<TViewModel, TProp>> vmProperty, Expression`1<Func`2<TView, TOut>> viewProperty, Func`2<TProp, TOut> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IDisposable BindTo(IObservable`1<TValue> this, TTarget target, Expression`1<Func`2<TTarget, TTValue>> property, object conversionHint, IBindingTypeConverter vmToViewConverterOverride);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ReactiveUI.ReactiveBinding`2 : object {
    [CompilerGeneratedAttribute]
private IDisposable <bindingDisposable>P;
    [CompilerGeneratedAttribute]
private Expression <ViewModelExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private TView <View>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ViewExpression>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IObservable`1<TValue> <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingDirection <Direction>k__BackingField;
    public Expression ViewModelExpression { get; }
    public TView View { get; }
    public Expression ViewExpression { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IObservable`1<TValue> Changed { get; }
    public BindingDirection Direction { get; }
    public ReactiveBinding`2(TView view, Expression viewExpression, Expression viewModelExpression, IObservable`1<TValue> changed, BindingDirection direction, IDisposable bindingDisposable);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_ViewModelExpression();
    [CompilerGeneratedAttribute]
public sealed virtual TView get_View();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_ViewExpression();
    [CompilerGeneratedAttribute]
public sealed virtual IObservable`1<TValue> get_Changed();
    [CompilerGeneratedAttribute]
public sealed virtual BindingDirection get_Direction();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class ReactiveUI.ReactiveCommand : object {
    [NullableContextAttribute("1")]
public static ReactiveCommand`2<Unit, Unit> Create(Action execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<Unit, Unit> CreateRunInBackground(Action execute, IObservable`1<bool> canExecute, IScheduler backgroundScheduler, IScheduler outputScheduler);
    public static ReactiveCommand`2<Unit, TResult> Create(Func`1<TResult> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<Unit, TResult> CreateRunInBackground(Func`1<TResult> execute, IObservable`1<bool> canExecute, IScheduler backgroundScheduler, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, Unit> Create(Action`1<TParam> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, Unit> CreateRunInBackground(Action`1<TParam> execute, IObservable`1<bool> canExecute, IScheduler backgroundScheduler, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, TResult> Create(Func`2<TParam, TResult> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, TResult> CreateRunInBackground(Func`2<TParam, TResult> execute, IObservable`1<bool> canExecute, IScheduler backgroundScheduler, IScheduler outputScheduler);
    public static CombinedReactiveCommand`2<TParam, TResult> CreateCombined(IEnumerable`1<ReactiveCommandBase`2<TParam, TResult>> childCommands, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<Unit, TResult> CreateFromObservable(Func`1<IObservable`1<TResult>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, TResult> CreateFromObservable(Func`2<TParam, IObservable`1<TResult>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<Unit, TResult> CreateFromTask(Func`1<Task`1<TResult>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<Unit, TResult> CreateFromTask(Func`2<CancellationToken, Task`1<TResult>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    [NullableContextAttribute("1")]
public static ReactiveCommand`2<Unit, Unit> CreateFromTask(Func`1<Task> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    [NullableContextAttribute("1")]
public static ReactiveCommand`2<Unit, Unit> CreateFromTask(Func`2<CancellationToken, Task> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, TResult> CreateFromTask(Func`2<TParam, Task`1<TResult>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, TResult> CreateFromTask(Func`3<TParam, CancellationToken, Task`1<TResult>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, Unit> CreateFromTask(Func`2<TParam, Task> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public static ReactiveCommand`2<TParam, Unit> CreateFromTask(Func`3<TParam, CancellationToken, Task> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    internal static ReactiveCommand`2<TParam, TResult> CreateFromObservableCancellable(Func`1<IObservable`1<ValueTuple`2<IObservable`1<TResult>, Action>>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    internal static ReactiveCommand`2<TParam, TResult> CreateFromObservableCancellable(Func`2<TParam, IObservable`1<ValueTuple`2<IObservable`1<TResult>, Action>>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class ReactiveUI.ReactiveCommand`2 : ReactiveCommandBase`2<TParam, TResult> {
    private IObservable`1<bool> _canExecute;
    private IDisposable _canExecuteSubscription;
    private ScheduledSubject`1<Exception> _exceptions;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TParam, IObservable`1<ValueTuple`2<IObservable`1<TResult>, Action>>> _execute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Subject`1<ExecutionInfo<TParam, TResult>> _executionInfo;
    private IObservable`1<bool> _isExecuting;
    private IScheduler _outputScheduler;
    private IObservable`1<TResult> _results;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ISubject`2<ExecutionInfo<TParam, TResult>, ExecutionInfo<TParam, TResult>> _synchronizedExecutionInfo;
    public IObservable`1<bool> CanExecute { get; }
    public IObservable`1<bool> IsExecuting { get; }
    public IObservable`1<Exception> ThrownExceptions { get; }
    [NullableContextAttribute("2")]
protected internal ReactiveCommand`2(Func`2<TParam, IObservable`1<ValueTuple`2<IObservable`1<TResult>, Action>>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    [NullableContextAttribute("2")]
protected internal ReactiveCommand`2(Func`2<TParam, IObservable`1<TResult>> execute, IObservable`1<bool> canExecute, IScheduler outputScheduler);
    public virtual IObservable`1<bool> get_CanExecute();
    public virtual IObservable`1<bool> get_IsExecuting();
    public virtual IObservable`1<Exception> get_ThrownExceptions();
    public virtual IObservable`1<TResult> Execute(TParam parameter);
    public virtual IObservable`1<TResult> Execute();
    public virtual IDisposable Subscribe(IObserver`1<TResult> observer);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private IObservable`1<bool> <.ctor>b__9_2(Exception ex);
    [CompilerGeneratedAttribute]
private IObservable`1<ValueTuple`2<IObservable`1<TResult>, Action>> <Execute>b__18_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IObservable`1<TResult> <Execute>b__18_1(ValueTuple`2<IObservable`1<TResult>, Action> sourceAndCancellation);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Execute>b__18_2(TResult result);
    [CompilerGeneratedAttribute]
private IObservable`1<TResult> <Execute>b__18_3(Exception ex);
    [CompilerGeneratedAttribute]
private void <Execute>b__18_4();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class ReactiveUI.ReactiveCommandBase`2 : object {
    private EventHandler _canExecuteChanged;
    private bool _canExecuteValue;
    [NullableAttribute("1")]
public IObservable`1<bool> CanExecute { get; }
    [NullableAttribute("1")]
public IObservable`1<bool> IsExecuting { get; }
    [NullableAttribute("1")]
public IObservable`1<Exception> ThrownExceptions { get; }
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<bool> get_CanExecute();
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<bool> get_IsExecuting();
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<Exception> get_ThrownExceptions();
    public sealed virtual void Dispose();
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    [NullableContextAttribute("1")]
public abstract virtual IDisposable Subscribe(IObserver`1<TResult> observer);
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<TResult> Execute(TParam parameter);
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<TResult> Execute();
    protected abstract virtual void Dispose(bool disposing);
    protected void OnCanExecuteChanged(bool newValue);
    protected virtual bool ICommandCanExecute(object parameter);
    protected virtual void ICommandExecute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ReactiveCommandMixins : object {
    [ExtensionAttribute]
public static IDisposable InvokeCommand(IObservable`1<T> item, ICommand command);
    [ExtensionAttribute]
public static IDisposable InvokeCommand(IObservable`1<T> item, ReactiveCommandBase`2<T, TResult> command);
    [ExtensionAttribute]
public static IDisposable InvokeCommand(IObservable`1<T> item, TTarget target, Expression`1<Func`2<TTarget, ICommand>> commandProperty);
    [ExtensionAttribute]
public static IDisposable InvokeCommand(IObservable`1<T> item, TTarget target, Expression`1<Func`2<TTarget, ReactiveCommandBase`2<T, TResult>>> commandProperty);
    private static IObservable`1<TResult> WithLatestFromFixed(IObservable`1<TLeft> item, IObservable`1<TRight> other, Func`3<TLeft, TRight, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ReactiveNotifyPropertyChangedMixin : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoizingMRUCache`2<ValueTuple`3<Type, string, bool>, ICreatesObservableForProperty> _notifyFactoryCache;
    private static ReactiveNotifyPropertyChangedMixin();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<IObservedChange`2<TSender, TValue>> ObservableForProperty(TSender item, Expression`1<Func`2<TSender, TValue>> property, bool beforeChange, bool skipInitial);
    [ExtensionAttribute]
public static IObservable`1<TRet> ObservableForProperty(TSender item, Expression`1<Func`2<TSender, TValue>> property, Func`2<TValue, TRet> selector, bool beforeChange);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<IObservedChange`2<TSender, TValue>> SubscribeToExpressionChain(TSender source, Expression expression, bool beforeChange, bool skipInitial, bool suppressWarnings);
    private static IObservable`1<IObservedChange`2<object, object>> NestedObservedChanges(Expression expression, IObservedChange`2<object, object> sourceChange, bool beforeChange, bool suppressWarnings);
    private static IObservable`1<IObservedChange`2<object, object>> NotifyForProperty(object sender, Expression expression, bool beforeChange, bool suppressWarnings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class ReactiveUI.ReactiveObject : object {
    private Lazy`1<IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>>> _changing;
    private Lazy`1<IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>>> _changed;
    private Lazy`1<Unit> _propertyChangingEventsSubscribed;
    private Lazy`1<Unit> _propertyChangedEventsSubscribed;
    private Lazy`1<IObservable`1<Exception>> _thrownExceptions;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChangingHandler;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChangedHandler;
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
[BrowsableAttribute("False")]
[DisplayAttribute]
public IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> Changing { get; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
[BrowsableAttribute("False")]
[DisplayAttribute]
public IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> Changed { get; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
[BrowsableAttribute("False")]
[DisplayAttribute]
public IObservable`1<Exception> ThrownExceptions { get; }
    [NullableContextAttribute("2")]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add_PropertyChangingHandler(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove_PropertyChangingHandler(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add_PropertyChangedHandler(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove_PropertyChangedHandler(PropertyChangedEventHandler value);
    public sealed virtual IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> get_Changing();
    public sealed virtual IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> get_Changed();
    public sealed virtual IObservable`1<Exception> get_ThrownExceptions();
    private sealed virtual override void ReactiveUI.IReactiveObject.RaisePropertyChanging(PropertyChangingEventArgs args);
    private sealed virtual override void ReactiveUI.IReactiveObject.RaisePropertyChanged(PropertyChangedEventArgs args);
    public sealed virtual IDisposable SuppressChangeNotifications();
    public bool AreChangeNotificationsEnabled();
    public IDisposable DelayChangeNotifications();
    [CompilerGeneratedAttribute]
private IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
private IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> <.ctor>b__5_1();
    [CompilerGeneratedAttribute]
private Unit <.ctor>b__5_2();
    [CompilerGeneratedAttribute]
private Unit <.ctor>b__5_3();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class ReactiveUI.ReactiveProperty`1 : ReactiveObject {
    private IScheduler _scheduler;
    private CompositeDisposable _disposables;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EqualityComparer`1<T> _checkIf;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Subject`1<T> _checkValidation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Subject`1<T> _valueRefereshed;
    private SerialDisposable _validationDisposable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<BehaviorSubject`1<IEnumerable>> _errorChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<List`1<Func`2<IObservable`1<T>, IObservable`1<IEnumerable>>>> _validatorStore;
    private int _skipCurrentValue;
    private bool _isDistinctUntilChanged;
    [NullableAttribute("2")]
private T _value;
    [NullableAttribute("2")]
private IEnumerable _currentErrors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<DataErrorsChangedEventArgs> ErrorsChanged;
    public bool IsDisposed { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
[JsonIncludeAttribute]
public T Value { get; public set; }
    public bool HasErrors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IObservable`1<IEnumerable> ObserveErrorChanged { get; }
    public IObservable`1<bool> ObserveHasErrors { get; }
    [NullableContextAttribute("2")]
public ReactiveProperty`1(T initialValue);
    [NullableContextAttribute("2")]
public ReactiveProperty`1(T initialValue, bool skipCurrentValueOnSubscribe, bool allowDuplicateValues);
    [NullableContextAttribute("2")]
public ReactiveProperty`1(T initialValue, IScheduler scheduler, bool skipCurrentValueOnSubscribe, bool allowDuplicateValues);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    public sealed virtual bool get_IsDisposed();
    [NullableContextAttribute("2")]
public sealed virtual T get_Value();
    [NullableContextAttribute("2")]
public sealed virtual void set_Value(T value);
    public sealed virtual bool get_HasErrors();
    public sealed virtual IObservable`1<IEnumerable> get_ObserveErrorChanged();
    public sealed virtual IObservable`1<bool> get_ObserveHasErrors();
    public ReactiveProperty`1<T> AddValidationError(Func`2<IObservable`1<T>, IObservable`1<IEnumerable>> validator, bool ignoreInitialError);
    public ReactiveProperty`1<T> AddValidationError(Func`2<IObservable`1<T>, IObservable`1<string>> validator, bool ignoreInitialError);
    public ReactiveProperty`1<T> AddValidationError(Func`2<T, Task`1<IEnumerable>> validator, bool ignoreInitialError);
    public ReactiveProperty`1<T> AddValidationError(Func`2<T, Task`1<string>> validator, bool ignoreInitialError);
    public ReactiveProperty`1<T> AddValidationError(Func`2<T, IEnumerable> validator, bool ignoreInitialError);
    public ReactiveProperty`1<T> AddValidationError(Func`2<T, string> validator, bool ignoreInitialError);
    public sealed virtual void Dispose();
    public void CheckValidation();
    public sealed virtual void Refresh();
    [NullableContextAttribute("2")]
public IEnumerable GetErrors(string propertyName);
    private sealed virtual override IEnumerable System.ComponentModel.INotifyDataErrorInfo.GetErrors(string propertyName);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("2")]
private void SetValue(T value);
    [CompilerGeneratedAttribute]
private BehaviorSubject`1<IEnumerable> <.ctor>b__15_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <get_ObserveHasErrors>b__29_0(IEnumerable _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.ReactivePropertyChangedEventArgs`1 : PropertyChangedEventArgs {
    [CompilerGeneratedAttribute]
private TSender <Sender>k__BackingField;
    public TSender Sender { get; }
    public ReactivePropertyChangedEventArgs`1(TSender sender, string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual TSender get_Sender();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.ReactivePropertyChangingEventArgs`1 : PropertyChangingEventArgs {
    [CompilerGeneratedAttribute]
private TSender <Sender>k__BackingField;
    public TSender Sender { get; }
    public ReactivePropertyChangingEventArgs`1(TSender sender, string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual TSender get_Sender();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ReactivePropertyMixins : object {
    [ExtensionAttribute]
public static ReactiveProperty`1<T> AddValidation(ReactiveProperty`1<T> self, Expression`1<Func`1<ReactiveProperty`1<T>>> selfSelector);
    [ExtensionAttribute]
public static IObservable`1<string> ObserveValidationErrors(ReactiveProperty`1<T> self);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class ReactiveUI.ReactiveRecord : object {
    private Lazy`1<IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>>> _changing;
    private Lazy`1<IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>>> _changed;
    private Lazy`1<Unit> _propertyChangingEventsSubscribed;
    private Lazy`1<Unit> _propertyChangedEventsSubscribed;
    private Lazy`1<IObservable`1<Exception>> _thrownExceptions;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChangingHandler;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChangedHandler;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
[BrowsableAttribute("False")]
[DisplayAttribute]
public IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> Changing { get; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
[BrowsableAttribute("False")]
[DisplayAttribute]
public IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> Changed { get; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
[BrowsableAttribute("False")]
[DisplayAttribute]
public IObservable`1<Exception> ThrownExceptions { get; }
    [CompilerGeneratedAttribute]
protected ReactiveRecord(ReactiveRecord original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("2")]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add_PropertyChangingHandler(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove_PropertyChangingHandler(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add_PropertyChangedHandler(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove_PropertyChangedHandler(PropertyChangedEventHandler value);
    public sealed virtual IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> get_Changing();
    public sealed virtual IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> get_Changed();
    public sealed virtual IObservable`1<Exception> get_ThrownExceptions();
    private sealed virtual override void ReactiveUI.IReactiveObject.RaisePropertyChanging(PropertyChangingEventArgs args);
    private sealed virtual override void ReactiveUI.IReactiveObject.RaisePropertyChanged(PropertyChangedEventArgs args);
    public sealed virtual IDisposable SuppressChangeNotifications();
    public bool AreChangeNotificationsEnabled();
    public IDisposable DelayChangeNotifications();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ReactiveRecord left, ReactiveRecord right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ReactiveRecord left, ReactiveRecord right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ReactiveRecord other);
    [CompilerGeneratedAttribute]
public virtual ReactiveRecord <Clone>$();
    [CompilerGeneratedAttribute]
private IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private IObservable`1<IReactivePropertyChangedEventArgs`1<IReactiveObject>> <.ctor>b__7_1();
    [CompilerGeneratedAttribute]
private Unit <.ctor>b__7_2();
    [CompilerGeneratedAttribute]
private Unit <.ctor>b__7_3();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.Reflection : object {
    private static ExpressionRewriter _expressionRewriter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoizingMRUCache`2<string, Type> _typeCache;
    private static Reflection();
    public static Expression Rewrite(Expression expression);
    public static string ExpressionToPropertyNames(Expression expression);
    [NullableContextAttribute("2")]
public static Func`3<object, Object[], object> GetValueFetcherForProperty(MemberInfo member);
    [NullableContextAttribute("2")]
public static Func`3<object, Object[], object> GetValueFetcherOrThrow(MemberInfo member);
    [NullableContextAttribute("2")]
public static Action`3<object, object, Object[]> GetValueSetterForProperty(MemberInfo member);
    [NullableContextAttribute("2")]
public static Action`3<object, object, Object[]> GetValueSetterOrThrow(MemberInfo member);
    public static bool TryGetValueForPropertyChain(TValue& changeValue, object current, IEnumerable`1<Expression> expressionChain);
    public static bool TryGetAllValuesForPropertyChain(IObservedChange`2[]& changeValues, object current, IEnumerable`1<Expression> expressionChain);
    public static bool TrySetValueToPropertyChain(object target, IEnumerable`1<Expression> expressionChain, TValue value, bool shouldThrow);
    [NullableContextAttribute("2")]
public static Type ReallyFindType(string type, bool throwOnFailure);
    public static Type GetEventArgsTypeForEvent(Type type, string eventName);
    public static void ThrowIfMethodsNotOverloaded(string callingTypeName, object targetObject, String[] methodsToCheck);
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo item);
    internal static IObservable`1<object> ViewModelWhenAnyValue(TViewModel viewModel, TView view, Expression expression);
}
public enum ReactiveUI.RegistrationNamespace : Enum {
    public int value__;
    public static RegistrationNamespace None;
    public static RegistrationNamespace XamForms;
    public static RegistrationNamespace Winforms;
    public static RegistrationNamespace Wpf;
    public static RegistrationNamespace Uno;
    public static RegistrationNamespace UnoWinUI;
    public static RegistrationNamespace Blazor;
    public static RegistrationNamespace Drawing;
    public static RegistrationNamespace Avalonia;
    public static RegistrationNamespace Maui;
    public static RegistrationNamespace Uwp;
    public static RegistrationNamespace WinUI;
}
public class ReactiveUI.Registrations : object {
    [NullableContextAttribute("1")]
public sealed virtual void Register(Action`2<Func`1<object>, Type> registerFunction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.RoutableViewModelMixin : object {
    private static ListChangeReason[] _navigationStackRemovalOperations;
    private static RoutableViewModelMixin();
    [ExtensionAttribute]
public static IDisposable WhenNavigatedTo(IRoutableViewModel item, Func`1<IDisposable> onNavigatedTo);
    [ExtensionAttribute]
public static IObservable`1<Unit> WhenNavigatedToObservable(IRoutableViewModel item);
    [ExtensionAttribute]
public static IObservable`1<Unit> WhenNavigatingFromObservable(IRoutableViewModel item);
    private static bool WasItemRemoved(IChangeSet`1<IRoutableViewModel> changeSet, IRoutableViewModel item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class ReactiveUI.RoutingState : ReactiveObject {
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
private IScheduler _scheduler;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<IRoutableViewModel> <NavigationStack>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactiveCommand`2<Unit, IRoutableViewModel> <NavigateBack>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> <Navigate>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> <NavigateAndReset>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<IRoutableViewModel> <CurrentViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<IChangeSet`1<IRoutableViewModel>> <NavigationChanged>k__BackingField;
    [DataMemberAttribute]
[JsonRequiredAttribute]
public ObservableCollection`1<IRoutableViewModel> NavigationStack { get; public set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public ReactiveCommand`2<Unit, IRoutableViewModel> NavigateBack { get; protected set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> Navigate { get; protected set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> NavigateAndReset { get; protected set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public IObservable`1<IRoutableViewModel> CurrentViewModel { get; protected set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public IObservable`1<IChangeSet`1<IRoutableViewModel>> NavigationChanged { get; protected set; }
    private static RoutingState();
    [NullableContextAttribute("2")]
public RoutingState(IScheduler scheduler);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<IRoutableViewModel> get_NavigationStack();
    [CompilerGeneratedAttribute]
public void set_NavigationStack(ObservableCollection`1<IRoutableViewModel> value);
    [CompilerGeneratedAttribute]
public ReactiveCommand`2<Unit, IRoutableViewModel> get_NavigateBack();
    [CompilerGeneratedAttribute]
protected void set_NavigateBack(ReactiveCommand`2<Unit, IRoutableViewModel> value);
    [CompilerGeneratedAttribute]
public ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> get_Navigate();
    [CompilerGeneratedAttribute]
protected void set_Navigate(ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> value);
    [CompilerGeneratedAttribute]
public ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> get_NavigateAndReset();
    [CompilerGeneratedAttribute]
protected void set_NavigateAndReset(ReactiveCommand`2<IRoutableViewModel, IRoutableViewModel> value);
    [CompilerGeneratedAttribute]
public IObservable`1<IRoutableViewModel> get_CurrentViewModel();
    [CompilerGeneratedAttribute]
protected void set_CurrentViewModel(IObservable`1<IRoutableViewModel> value);
    [CompilerGeneratedAttribute]
public IObservable`1<IChangeSet`1<IRoutableViewModel>> get_NavigationChanged();
    [CompilerGeneratedAttribute]
protected void set_NavigationChanged(IObservable`1<IChangeSet`1<IRoutableViewModel>> value);
    [OnDeserializedAttribute]
private void SetupRx(StreamingContext& sc);
    private void SetupRx();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.RoutingStateMixins : object {
    [ExtensionAttribute]
public static T FindViewModelInStack(RoutingState item);
    [ExtensionAttribute]
public static IRoutableViewModel GetCurrentViewModel(RoutingState item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ReactiveUI.RxApp : object {
    public static int SmallCacheLimit;
    public static int BigCacheLimit;
    [ThreadStaticAttribute]
private static IScheduler _unitTestTaskpoolScheduler;
    private static IScheduler _taskpoolScheduler;
    [ThreadStaticAttribute]
private static IScheduler _unitTestMainThreadScheduler;
    private static IScheduler _mainThreadScheduler;
    [ThreadStaticAttribute]
private static ISuspensionHost _unitTestSuspensionHost;
    private static ISuspensionHost _suspensionHost;
    private static bool _hasSchedulerBeenChecked;
    [CompilerGeneratedAttribute]
private static bool <SuppressViewCommandBindingMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static IObserver`1<Exception> <DefaultExceptionHandler>k__BackingField;
    public static IScheduler MainThreadScheduler { get; public set; }
    public static IScheduler TaskpoolScheduler { get; public set; }
    public static bool SuppressViewCommandBindingMessage { get; public set; }
    public static IObserver`1<Exception> DefaultExceptionHandler { get; public set; }
    public static ISuspensionHost SuspensionHost { get; public set; }
    private static IScheduler UnitTestMainThreadScheduler { get; private set; }
    private static RxApp();
    public static IScheduler get_MainThreadScheduler();
    public static void set_MainThreadScheduler(IScheduler value);
    public static IScheduler get_TaskpoolScheduler();
    public static void set_TaskpoolScheduler(IScheduler value);
    [CompilerGeneratedAttribute]
public static bool get_SuppressViewCommandBindingMessage();
    [CompilerGeneratedAttribute]
public static void set_SuppressViewCommandBindingMessage(bool value);
    [CompilerGeneratedAttribute]
public static IObserver`1<Exception> get_DefaultExceptionHandler();
    [CompilerGeneratedAttribute]
public static void set_DefaultExceptionHandler(IObserver`1<Exception> value);
    public static ISuspensionHost get_SuspensionHost();
    public static void set_SuspensionHost(ISuspensionHost value);
    private static IScheduler get_UnitTestMainThreadScheduler();
    private static void set_UnitTestMainThreadScheduler(IScheduler value);
    internal static void EnsureInitialized();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.ScheduledSubject`1 : object {
    private IObserver`1<T> _defaultObserver;
    private IScheduler _scheduler;
    private ISubject`1<T> _subject;
    private int _observerRefCount;
    private IDisposable _defaultObserverSub;
    public ScheduledSubject`1(IScheduler scheduler, IObserver`1<T> defaultObserver, ISubject`1<T> defaultSubject);
    public sealed virtual void Dispose();
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(T value);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
    protected virtual void Dispose(bool isDisposing);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__10_0();
}
public class ReactiveUI.ShortToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[AttributeUsageAttribute("4")]
public class ReactiveUI.SingleInstanceViewAttribute : Attribute {
}
internal static class ReactiveUI.SingletonDataErrorsChangedEventArgs : object {
    [NullableAttribute("1")]
public static DataErrorsChangedEventArgs Value;
    private static SingletonDataErrorsChangedEventArgs();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ReactiveUI.SingletonPropertyChangedEventArgs : object {
    public static PropertyChangedEventArgs Value;
    public static PropertyChangedEventArgs HasErrors;
    public static PropertyChangedEventArgs ErrorMessage;
    private static SingletonPropertyChangedEventArgs();
}
public class ReactiveUI.SingleToStringTypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
public class ReactiveUI.StringConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual int GetAffinityForObjects(Type fromType, Type toType);
    [NullableContextAttribute("2")]
public sealed virtual bool TryConvert(object from, Type toType, object conversionHint, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ReactiveUI.SuspensionHost : ReactiveObject {
    private ReplaySubject`1<IObservable`1<Unit>> _isLaunchingNew;
    private ReplaySubject`1<IObservable`1<Unit>> _isResuming;
    private ReplaySubject`1<IObservable`1<Unit>> _isUnpausing;
    private ReplaySubject`1<IObservable`1<IDisposable>> _shouldPersistState;
    private ReplaySubject`1<IObservable`1<Unit>> _shouldInvalidateState;
    [NullableAttribute("2")]
private object _appState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<object> <CreateNewAppState>k__BackingField;
    public IObservable`1<Unit> IsResuming { get; public set; }
    public IObservable`1<Unit> IsUnpausing { get; public set; }
    public IObservable`1<IDisposable> ShouldPersistState { get; public set; }
    public IObservable`1<Unit> IsLaunchingNew { get; public set; }
    public IObservable`1<Unit> ShouldInvalidateState { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> CreateNewAppState { get; public set; }
    [NullableAttribute("2")]
public object AppState { get; public set; }
    public sealed virtual IObservable`1<Unit> get_IsResuming();
    public sealed virtual void set_IsResuming(IObservable`1<Unit> value);
    public sealed virtual IObservable`1<Unit> get_IsUnpausing();
    public sealed virtual void set_IsUnpausing(IObservable`1<Unit> value);
    public sealed virtual IObservable`1<IDisposable> get_ShouldPersistState();
    public sealed virtual void set_ShouldPersistState(IObservable`1<IDisposable> value);
    public sealed virtual IObservable`1<Unit> get_IsLaunchingNew();
    public sealed virtual void set_IsLaunchingNew(IObservable`1<Unit> value);
    public sealed virtual IObservable`1<Unit> get_ShouldInvalidateState();
    public sealed virtual void set_ShouldInvalidateState(IObservable`1<Unit> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<object> get_CreateNewAppState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreateNewAppState(Func`1<object> value);
    [NullableContextAttribute("2")]
public sealed virtual object get_AppState();
    [NullableContextAttribute("2")]
public sealed virtual void set_AppState(object value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.SuspensionHostExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`1<IObservable`1<Unit>> ensureLoadAppStateFunc;
    [NullableAttribute("2")]
private static ISuspensionDriver suspensionDriver;
    [ExtensionAttribute]
public static T GetAppState(ISuspensionHost item);
    [ExtensionAttribute]
public static IObservable`1<T> ObserveAppState(ISuspensionHost item);
    [ExtensionAttribute]
public static IDisposable SetupDefaultSuspendResume(ISuspensionHost item, ISuspensionDriver driver);
    [ExtensionAttribute]
private static IObservable`1<Unit> EnsureLoadAppState(ISuspensionHost item, ISuspensionDriver driver);
}
public enum ReactiveUI.TriggerUpdate : Enum {
    public int value__;
    public static TriggerUpdate ViewToViewModel;
    public static TriggerUpdate ViewModelToView;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.UnhandledErrorException : Exception {
    public UnhandledErrorException(string message);
    public UnhandledErrorException(string message, Exception innerException);
    protected UnhandledErrorException(SerializationInfo info, StreamingContext& context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.UnhandledInteractionException`2 : Exception {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Interaction`2<TInput, TOutput> _interaction;
    [CompilerGeneratedAttribute]
private TInput <Input>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Interaction`2<TInput, TOutput> Interaction { get; }
    public TInput Input { get; }
    public UnhandledInteractionException`2(Interaction`2<TInput, TOutput> interaction, TInput input);
    public UnhandledInteractionException`2(string message);
    public UnhandledInteractionException`2(string message, Exception innerException);
    protected UnhandledInteractionException`2(SerializationInfo info, StreamingContext& context);
    public Interaction`2<TInput, TOutput> get_Interaction();
    [CompilerGeneratedAttribute]
public TInput get_Input();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class ReactiveUI.ViewContractAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    public string Contract { get; }
    public ViewContractAttribute(string contract);
    [CompilerGeneratedAttribute]
public string get_Contract();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.ViewForMixins : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoizingMRUCache`2<Type, IActivationForViewFetcher> _activationFetcherCache;
    private static ViewForMixins();
    [ExtensionAttribute]
public static void WhenActivated(IActivatableViewModel item, Func`1<IEnumerable`1<IDisposable>> block);
    [ExtensionAttribute]
public static void WhenActivated(IActivatableViewModel item, Action`1<Action`1<IDisposable>> block);
    [ExtensionAttribute]
public static void WhenActivated(IActivatableViewModel item, Action`1<CompositeDisposable> block);
    [ExtensionAttribute]
public static IDisposable WhenActivated(IActivatableView item, Func`1<IEnumerable`1<IDisposable>> block);
    [ExtensionAttribute]
public static IDisposable WhenActivated(IActivatableView item, Func`1<IEnumerable`1<IDisposable>> block, IViewFor view);
    [ExtensionAttribute]
public static IDisposable WhenActivated(IActivatableView item, Action`1<Action`1<IDisposable>> block);
    [ExtensionAttribute]
public static IDisposable WhenActivated(IActivatableView item, Action`1<Action`1<IDisposable>> block, IViewFor view);
    [ExtensionAttribute]
public static IDisposable WhenActivated(IActivatableView item, Action`1<CompositeDisposable> block, IViewFor view);
    private static CompositeDisposable HandleViewActivation(Func`1<IEnumerable`1<IDisposable>> block, IObservable`1<bool> activation);
    private static CompositeDisposable HandleViewModelActivation(IViewFor view, IObservable`1<bool> activation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ReactiveUI.ViewLocator : object {
    public static IViewLocator Current { get; }
    public static IViewLocator get_Current();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.ViewLocatorNotFoundException : Exception {
    public ViewLocatorNotFoundException(string message);
    public ViewLocatorNotFoundException(string message, Exception innerException);
    protected ViewLocatorNotFoundException(SerializationInfo info, StreamingContext& context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.ViewModelActivator : object {
    private List`1<Func`1<IEnumerable`1<IDisposable>>> _blocks;
    private Subject`1<Unit> _activated;
    private Subject`1<Unit> _deactivated;
    private IDisposable _activationHandle;
    private int _refCount;
    public IObservable`1<Unit> Activated { get; }
    public IObservable`1<Unit> Deactivated { get; }
    public IObservable`1<Unit> get_Activated();
    public IObservable`1<Unit> get_Deactivated();
    public IDisposable Activate();
    public void Deactivate(bool ignoreRefCount);
    public sealed virtual void Dispose();
    internal void AddActivationBlock(Func`1<IEnumerable`1<IDisposable>> block);
    [CompilerGeneratedAttribute]
private void <Activate>b__10_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ReactiveUI.WaitForDispatcherScheduler : object {
    private Func`1<IScheduler> _schedulerFactory;
    [NullableAttribute("2")]
private IScheduler _scheduler;
    public DateTimeOffset Now { get; }
    public WaitForDispatcherScheduler(Func`1<IScheduler> schedulerFactory);
    public sealed virtual DateTimeOffset get_Now();
    public sealed virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable Schedule(TState state, DateTimeOffset dueTime, Func`3<IScheduler, TState, IDisposable> action);
    private IScheduler AttemptToCreateScheduler();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.WhenAnyMixin : object {
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, TRet>> property1);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Func`2<T1, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Func`2<IObservedChange`2<TSender, T1>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Func`2<IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`2<T1, T2>> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Func`3<T1, T2, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Func`3<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Func`3<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`3<T1, T2, T3>> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Func`4<T1, T2, T3, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Func`4<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Func`4<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`4<T1, T2, T3, T4>> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Func`5<T1, T2, T3, T4, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Func`5<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Func`5<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`5<T1, T2, T3, T4, T5>> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Func`6<T1, T2, T3, T4, T5, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Func`6<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Func`6<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Func`7<T1, T2, T3, T4, T5, T6, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Func`7<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, IObservedChange`2<TSender, T6>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Expression property6, Func`7<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Func`8<T1, T2, T3, T4, T5, T6, T7, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Func`8<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, IObservedChange`2<TSender, T6>, IObservedChange`2<TSender, T7>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Expression property6, Expression property7, Func`8<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Func`9<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, IObservedChange`2<TSender, T6>, IObservedChange`2<TSender, T7>, IObservedChange`2<TSender, T8>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Expression property6, Expression property7, Expression property8, Func`9<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Func`10<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, IObservedChange`2<TSender, T6>, IObservedChange`2<TSender, T7>, IObservedChange`2<TSender, T8>, IObservedChange`2<TSender, T9>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Expression property6, Expression property7, Expression property8, Expression property9, Func`10<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Expression`1<Func`2<TSender, T10>> property10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Expression`1<Func`2<TSender, T10>> property10, Func`11<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, IObservedChange`2<TSender, T6>, IObservedChange`2<TSender, T7>, IObservedChange`2<TSender, T8>, IObservedChange`2<TSender, T9>, IObservedChange`2<TSender, T10>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Expression property6, Expression property7, Expression property8, Expression property9, Expression property10, Func`11<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Expression`1<Func`2<TSender, T10>> property10, Expression`1<Func`2<TSender, T11>> property11, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Expression`1<Func`2<TSender, T10>> property10, Expression`1<Func`2<TSender, T11>> property11, Func`12<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, IObservedChange`2<TSender, T6>, IObservedChange`2<TSender, T7>, IObservedChange`2<TSender, T8>, IObservedChange`2<TSender, T9>, IObservedChange`2<TSender, T10>, IObservedChange`2<TSender, T11>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Expression property6, Expression property7, Expression property8, Expression property9, Expression property10, Expression property11, Func`12<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyValue(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Expression`1<Func`2<TSender, T10>> property10, Expression`1<Func`2<TSender, T11>> property11, Expression`1<Func`2<TSender, T12>> property12, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAny(TSender sender, Expression`1<Func`2<TSender, T1>> property1, Expression`1<Func`2<TSender, T2>> property2, Expression`1<Func`2<TSender, T3>> property3, Expression`1<Func`2<TSender, T4>> property4, Expression`1<Func`2<TSender, T5>> property5, Expression`1<Func`2<TSender, T6>> property6, Expression`1<Func`2<TSender, T7>> property7, Expression`1<Func`2<TSender, T8>> property8, Expression`1<Func`2<TSender, T9>> property9, Expression`1<Func`2<TSender, T10>> property10, Expression`1<Func`2<TSender, T11>> property11, Expression`1<Func`2<TSender, T12>> property12, Func`13<IObservedChange`2<TSender, T1>, IObservedChange`2<TSender, T2>, IObservedChange`2<TSender, T3>, IObservedChange`2<TSender, T4>, IObservedChange`2<TSender, T5>, IObservedChange`2<TSender, T6>, IObservedChange`2<TSender, T7>, IObservedChange`2<TSender, T8>, IObservedChange`2<TSender, T9>, IObservedChange`2<TSender, T10>, IObservedChange`2<TSender, T11>, IObservedChange`2<TSender, T12>, TRet> selector);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyDynamic(TSender sender, Expression property1, Expression property2, Expression property3, Expression property4, Expression property5, Expression property6, Expression property7, Expression property8, Expression property9, Expression property10, Expression property11, Expression property12, Func`13<IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, IObservedChange`2<TSender, object>, TRet> selector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ReactiveUI.WhenAnyObservableMixin : object {
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs6);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs6, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs7);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs6, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs7, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs8);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs6, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs7, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs8, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs9);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs6, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs7, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs8, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs9, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs10);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs6, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs7, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs8, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs9, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs10, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs11);
    [ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs1, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs2, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs3, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs4, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs5, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs6, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs7, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs8, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs9, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs10, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs11, Expression`1<Func`2<TSender, IObservable`1<TRet>>> obs12);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Func`3<T1, T2, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Func`4<T1, T2, T3, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Func`5<T1, T2, T3, T4, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Func`6<T1, T2, T3, T4, T5, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Expression`1<Func`2<TSender, IObservable`1<T6>>> obs6, Func`7<T1, T2, T3, T4, T5, T6, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Expression`1<Func`2<TSender, IObservable`1<T6>>> obs6, Expression`1<Func`2<TSender, IObservable`1<T7>>> obs7, Func`8<T1, T2, T3, T4, T5, T6, T7, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Expression`1<Func`2<TSender, IObservable`1<T6>>> obs6, Expression`1<Func`2<TSender, IObservable`1<T7>>> obs7, Expression`1<Func`2<TSender, IObservable`1<T8>>> obs8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Expression`1<Func`2<TSender, IObservable`1<T6>>> obs6, Expression`1<Func`2<TSender, IObservable`1<T7>>> obs7, Expression`1<Func`2<TSender, IObservable`1<T8>>> obs8, Expression`1<Func`2<TSender, IObservable`1<T9>>> obs9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Expression`1<Func`2<TSender, IObservable`1<T6>>> obs6, Expression`1<Func`2<TSender, IObservable`1<T7>>> obs7, Expression`1<Func`2<TSender, IObservable`1<T8>>> obs8, Expression`1<Func`2<TSender, IObservable`1<T9>>> obs9, Expression`1<Func`2<TSender, IObservable`1<T10>>> obs10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Expression`1<Func`2<TSender, IObservable`1<T6>>> obs6, Expression`1<Func`2<TSender, IObservable`1<T7>>> obs7, Expression`1<Func`2<TSender, IObservable`1<T8>>> obs8, Expression`1<Func`2<TSender, IObservable`1<T9>>> obs9, Expression`1<Func`2<TSender, IObservable`1<T10>>> obs10, Expression`1<Func`2<TSender, IObservable`1<T11>>> obs11, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TRet> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObservable`1<TRet> WhenAnyObservable(TSender sender, Expression`1<Func`2<TSender, IObservable`1<T1>>> obs1, Expression`1<Func`2<TSender, IObservable`1<T2>>> obs2, Expression`1<Func`2<TSender, IObservable`1<T3>>> obs3, Expression`1<Func`2<TSender, IObservable`1<T4>>> obs4, Expression`1<Func`2<TSender, IObservable`1<T5>>> obs5, Expression`1<Func`2<TSender, IObservable`1<T6>>> obs6, Expression`1<Func`2<TSender, IObservable`1<T7>>> obs7, Expression`1<Func`2<TSender, IObservable`1<T8>>> obs8, Expression`1<Func`2<TSender, IObservable`1<T9>>> obs9, Expression`1<Func`2<TSender, IObservable`1<T10>>> obs10, Expression`1<Func`2<TSender, IObservable`1<T11>>> obs11, Expression`1<Func`2<TSender, IObservable`1<T12>>> obs12, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TRet> selector);
}
[ExtensionAttribute]
internal static class System.ExceptionMixins : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ArgumentNullExceptionThrowIfNull(T value, string name);
}
[ExtensionAttribute]
public static class System.Reactive.Disposables.DisposableMixins : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T DisposeWith(T item, CompositeDisposable compositeDisposable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.Observable`1 : object {
    public static IObservable`1<T> Empty;
    public static IObservable`1<T> Never;
    public static IObservable`1<T> Default;
    private static Observable`1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.Observables : object {
    public static IObservable`1<bool> True;
    public static IObservable`1<bool> False;
    public static IObservable`1<Unit> Unit;
    private static Observables();
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.143.54359")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
