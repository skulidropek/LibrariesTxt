[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Rebus.Autofac.AutofacHandlerActivator : object {
    private static string LongExceptionMessage;
    private ConcurrentDictionary`2<Type, Func`2<ILifetimeScope, IEnumerable`1<IHandleMessages>>> _resolvers;
    private ILifetimeScope _container;
    public AutofacHandlerActivator(ContainerBuilder containerBuilder, Action`2<RebusConfigurer, IComponentContext> configureBus, bool startBus, bool enablePolymorphicDispatch, bool multipleRegistrationsCheckEnabled);
    [AsyncStateMachineAttribute("Rebus.Autofac.AutofacHandlerActivator/<GetHandlers>d__4`1")]
public sealed virtual Task`1<IEnumerable`1<IHandleMessages`1<TMessage>>> GetHandlers(TMessage message, ITransactionContext transactionContext);
    [CompilerGeneratedAttribute]
internal static Func`2<ILifetimeScope, IEnumerable`1<IHandleMessages>> <GetHandlers>g__GetResolveForMessageType|4_1(Type messageType);
}
[ExtensionAttribute]
public static class Rebus.Config.ContainerBuilderExtensions : object {
    [ExtensionAttribute]
public static void RegisterRebus(ContainerBuilder containerBuilder, Func`2<RebusConfigurer, RebusConfigurer> configure, bool startAutomatically, bool enablePolymorphicDispatch, bool disableMultipleRegistrationsCheck);
    [ExtensionAttribute]
public static void RegisterRebus(ContainerBuilder containerBuilder, Func`3<RebusConfigurer, IComponentContext, RebusConfigurer> configure, bool startAutomatically, bool enablePolymorphicDispatch, bool disableMultipleRegistrationsCheck);
    [ExtensionAttribute]
public static void RegisterHandlersFromAssemblyOf(ContainerBuilder builder, PropertyWiringOptions propertyWiringOptions);
    [ExtensionAttribute]
public static void RegisterHandlersFromAssemblyOf(ContainerBuilder builder, Type handlerType, PropertyWiringOptions propertyWiringOptions);
    [ExtensionAttribute]
public static void RegisterHandlersFromAssemblyNamespaceOf(ContainerBuilder builder, PropertyWiringOptions propertyWiringOptions);
    [ExtensionAttribute]
public static void RegisterHandlersFromAssemblyNamespaceOf(ContainerBuilder builder, Type handlerType, PropertyWiringOptions propertyWiringOptions);
    [ExtensionAttribute]
public static void RegisterHandler(ContainerBuilder builder, PropertyWiringOptions propertyWiringOptions);
    private static IEnumerable`1<Type> GetImplementedHandlerInterfaces(Type handlerType);
    private static bool IsRebusHandler(Type i);
}
[ExtensionAttribute]
public static class Rebus.Config.ContainerExtensions : object {
    [ExtensionAttribute]
public static void StartBus(IContainer container);
}
[ExtensionAttribute]
internal static class Rebus.Internals.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsAssignableTo(Type sourceType, Type targetType);
    [IteratorStateMachineAttribute("Rebus.Internals.TypeExtensions/<GetBaseTypes>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type, bool includeSelf, bool includeInterfaces);
    [ExtensionAttribute]
public static IReadOnlyList`1<Type> GetGenericTypeParameters(Type genericType, Type genericTypeDefinition);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
