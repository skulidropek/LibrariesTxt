[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Rebus.Config.RabbitMqCallbackOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private Action`2<object, BasicReturnEventArgs> <BasicReturnCallback>k__BackingField;
    internal Action`2<object, BasicReturnEventArgs> BasicReturnCallback { get; private set; }
    internal bool HasMandatoryCallback { get; }
    public RabbitMqCallbackOptionsBuilder BasicReturn(Action`2<object, BasicReturnEventArgs> basicReturnCallback);
    [CompilerGeneratedAttribute]
internal Action`2<object, BasicReturnEventArgs> get_BasicReturnCallback();
    [CompilerGeneratedAttribute]
private void set_BasicReturnCallback(Action`2<object, BasicReturnEventArgs> value);
    internal bool get_HasMandatoryCallback();
    internal void ConfigureEvents(IModel model);
    [CompilerGeneratedAttribute]
private void <ConfigureEvents>b__7_0(object sender, BasicReturnEventArgs args);
}
[ExtensionAttribute]
public static class Rebus.Config.RabbitMqConfigurationExtensions : object {
    private static string RabbitMqSubText;
    [ExtensionAttribute]
public static RabbitMqOptionsBuilder UseRabbitMqAsOneWayClient(StandardConfigurer`1<ITransport> configurer, string connectionString);
    [ExtensionAttribute]
public static RabbitMqOptionsBuilder UseRabbitMqAsOneWayClient(StandardConfigurer`1<ITransport> configurer, IList`1<ConnectionEndpoint> endpoints);
    [ExtensionAttribute]
public static RabbitMqOptionsBuilder UseRabbitMq(StandardConfigurer`1<ITransport> configurer, string connectionString, string inputQueueName);
    [ExtensionAttribute]
public static RabbitMqOptionsBuilder UseRabbitMq(StandardConfigurer`1<ITransport> configurer, IList`1<ConnectionEndpoint> endpoints, string inputQueueName);
    private static RabbitMqOptionsBuilder BuildInternal(StandardConfigurer`1<ITransport> configurer, bool oneway, Func`3<IResolutionContext, RabbitMqOptionsBuilder, RabbitMqTransport> rabbitMqTransportBuilder);
}
[ExtensionAttribute]
public static class Rebus.Config.RabbitMqDelayedMessageExchangeExtensions : object {
    [ExtensionAttribute]
public static void UseDelayedMessageExchange(StandardConfigurer`1<ITimeoutManager> configurer, string exchangeName, bool automaticallyDeclareExchange);
}
public class Rebus.Config.RabbitMqExchangeOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <DirectExchangeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <TopicExchangeArguments>k__BackingField;
    internal Dictionary`2<string, object> DirectExchangeArguments { get; }
    internal Dictionary`2<string, object> TopicExchangeArguments { get; }
    public RabbitMqExchangeOptionsBuilder AddArgumentToDirectExchange(string key, string val);
    public RabbitMqExchangeOptionsBuilder AddArgumentToTopicExchange(string key, string val);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_DirectExchangeArguments();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_TopicExchangeArguments();
}
public class Rebus.Config.RabbitMqOptionsBuilder : object {
    private Dictionary`2<string, string> _additionalClientProperties;
    public static string DefaultDirectExchangeName;
    public static string DefaultTopicExchangeName;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeclareExchanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeclareInputQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BindInputQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublisherConfirmsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <PublisherConfirmsTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectExchangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopicExchangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerTag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxNumberOfMessagesToPrefetch>k__BackingField;
    [CompilerGeneratedAttribute]
private SslSettings <SslSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private RabbitMqCallbackOptionsBuilder <CallbackOptionsBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private RabbitMqQueueOptionsBuilder <InputQueueOptionsBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private RabbitMqQueueOptionsBuilder <DefaultQueueOptionsBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private RabbitMqExchangeOptionsBuilder <ExchangeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWriterPoolSize>k__BackingField;
    internal Func`2<IConnectionFactory, IConnectionFactory> ConnectionFactoryCustomizer;
    internal Nullable`1<bool> DeclareExchanges { get; private set; }
    internal Nullable`1<bool> DeclareInputQueue { get; private set; }
    internal Nullable`1<bool> BindInputQueue { get; private set; }
    internal Nullable`1<bool> PublisherConfirmsEnabled { get; private set; }
    internal Nullable`1<TimeSpan> PublisherConfirmsTimeout { get; private set; }
    internal int BatchSize { get; private set; }
    internal string DirectExchangeName { get; private set; }
    internal string TopicExchangeName { get; private set; }
    internal string ConsumerTag { get; private set; }
    internal Nullable`1<int> MaxNumberOfMessagesToPrefetch { get; private set; }
    internal SslSettings SslSettings { get; private set; }
    internal RabbitMqCallbackOptionsBuilder CallbackOptionsBuilder { get; }
    internal RabbitMqQueueOptionsBuilder InputQueueOptionsBuilder { get; }
    internal RabbitMqQueueOptionsBuilder DefaultQueueOptionsBuilder { get; }
    internal RabbitMqExchangeOptionsBuilder ExchangeOptions { get; }
    internal int MaxWriterPoolSize { get; private set; }
    public RabbitMqOptionsBuilder Declarations(bool declareExchanges, bool declareInputQueue, bool bindInputQueue);
    public RabbitMqOptionsBuilder CustomizeConnectionFactory(Func`2<IConnectionFactory, IConnectionFactory> customizer);
    public RabbitMqOptionsBuilder Prefetch(int maxNumberOfMessagesToPrefetch);
    public RabbitMqOptionsBuilder ExchangeNames(string directExchangeName, string topicExchangeName);
    public RabbitMqOptionsBuilder AddClientProperties(IDictionary`2<string, string> additionalProperties);
    public RabbitMqOptionsBuilder StrictPriorityQueue(int maxPriority);
    public RabbitMqOptionsBuilder PriorityQueue(int maxPriority);
    public RabbitMqOptionsBuilder Mandatory(Action`2<object, BasicReturnEventArgs> basicReturnCallback);
    public RabbitMqOptionsBuilder InputQueueOptions(Action`1<RabbitMqQueueOptionsBuilder> configurer);
    public RabbitMqOptionsBuilder DefaultQueueOptions(Action`1<RabbitMqQueueOptionsBuilder> configurer);
    public RabbitMqOptionsBuilder InputExchangeOptions(Action`1<RabbitMqExchangeOptionsBuilder> configurer);
    public RabbitMqOptionsBuilder RegisterEventCallbacks(Action`1<RabbitMqCallbackOptionsBuilder> configurer);
    public RabbitMqOptionsBuilder Ssl(SslSettings sslSettings);
    public RabbitMqOptionsBuilder SetPublisherConfirms(bool enabled);
    public RabbitMqOptionsBuilder SetPublisherConfirms(bool enabled, TimeSpan timeout);
    public RabbitMqOptionsBuilder ClientConnectionName(string connectionName);
    public RabbitMqOptionsBuilder SetMaxWriterPoolSize(int size);
    public RabbitMqOptionsBuilder SetConsumerTag(string consumerTag);
    public RabbitMqOptionsBuilder SetBatchSize(int batchSize);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_DeclareExchanges();
    [CompilerGeneratedAttribute]
private void set_DeclareExchanges(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_DeclareInputQueue();
    [CompilerGeneratedAttribute]
private void set_DeclareInputQueue(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_BindInputQueue();
    [CompilerGeneratedAttribute]
private void set_BindInputQueue(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_PublisherConfirmsEnabled();
    [CompilerGeneratedAttribute]
private void set_PublisherConfirmsEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_PublisherConfirmsTimeout();
    [CompilerGeneratedAttribute]
private void set_PublisherConfirmsTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal int get_BatchSize();
    [CompilerGeneratedAttribute]
private void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
internal string get_DirectExchangeName();
    [CompilerGeneratedAttribute]
private void set_DirectExchangeName(string value);
    [CompilerGeneratedAttribute]
internal string get_TopicExchangeName();
    [CompilerGeneratedAttribute]
private void set_TopicExchangeName(string value);
    [CompilerGeneratedAttribute]
internal string get_ConsumerTag();
    [CompilerGeneratedAttribute]
private void set_ConsumerTag(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_MaxNumberOfMessagesToPrefetch();
    [CompilerGeneratedAttribute]
private void set_MaxNumberOfMessagesToPrefetch(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal SslSettings get_SslSettings();
    [CompilerGeneratedAttribute]
private void set_SslSettings(SslSettings value);
    [CompilerGeneratedAttribute]
internal RabbitMqCallbackOptionsBuilder get_CallbackOptionsBuilder();
    [CompilerGeneratedAttribute]
internal RabbitMqQueueOptionsBuilder get_InputQueueOptionsBuilder();
    [CompilerGeneratedAttribute]
internal RabbitMqQueueOptionsBuilder get_DefaultQueueOptionsBuilder();
    [CompilerGeneratedAttribute]
internal RabbitMqExchangeOptionsBuilder get_ExchangeOptions();
    [CompilerGeneratedAttribute]
internal int get_MaxWriterPoolSize();
    [CompilerGeneratedAttribute]
private void set_MaxWriterPoolSize(int value);
    internal void Configure(RabbitMqTransport transport);
}
public class Rebus.Config.RabbitMqQueueOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Arguments>k__BackingField;
    internal bool Durable { get; private set; }
    internal bool Exclusive { get; private set; }
    internal bool AutoDelete { get; private set; }
    internal Dictionary`2<string, object> Arguments { get; private set; }
    public RabbitMqQueueOptionsBuilder SetDurable(bool durable);
    public RabbitMqQueueOptionsBuilder SetExclusive(bool exclusive);
    public RabbitMqQueueOptionsBuilder SetAutoDelete(bool autoDelete);
    public RabbitMqQueueOptionsBuilder SetQueueTTL(long ttlInMs);
    public RabbitMqQueueOptionsBuilder SetAutoDelete(bool autoDelete, long ttlInMs);
    public RabbitMqQueueOptionsBuilder SetArguments(Dictionary`2<string, object> arguments);
    public RabbitMqQueueOptionsBuilder AddArgument(string key, object val);
    [CompilerGeneratedAttribute]
internal bool get_Durable();
    [CompilerGeneratedAttribute]
private void set_Durable(bool value);
    [CompilerGeneratedAttribute]
internal bool get_Exclusive();
    [CompilerGeneratedAttribute]
private void set_Exclusive(bool value);
    [CompilerGeneratedAttribute]
internal bool get_AutoDelete();
    [CompilerGeneratedAttribute]
private void set_AutoDelete(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(Dictionary`2<string, object> value);
}
public class Rebus.Exceptions.MandatoryDeliveryException : Exception {
    public MandatoryDeliveryException(string message);
    public MandatoryDeliveryException(Exception innerException, string message);
    public MandatoryDeliveryException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
internal static class Rebus.Internals.ArrayExtensions : object {
    [ExtensionAttribute]
public static T[] Truncate(T[] array, int size);
}
internal class Rebus.Internals.ConnectionManager : object {
    private object _activeConnectionLock;
    private IConnectionFactory _connectionFactory;
    private IList`1<AmqpTcpEndpoint> _amqpTcpEndpoints;
    private ILog _log;
    private IConnection _activeConnection;
    private bool _disposed;
    public ConnectionManager(IList`1<ConnectionEndpoint> endpoints, string inputQueueAddress, IRebusLoggerFactory rebusLoggerFactory, Func`2<IConnectionFactory, IConnectionFactory> customizer);
    public ConnectionManager(string connectionString, string inputQueueAddress, IRebusLoggerFactory rebusLoggerFactory, Func`2<IConnectionFactory, IConnectionFactory> customizer);
    private ConnectionFactory CreateConnectionFactory(Uri uri, string inputQueueAddress);
    public IConnection GetConnection();
    public sealed virtual void Dispose();
    public void AddClientProperties(Dictionary`2<string, string> additionalClientProperties);
    public void SetSslOptions(SslSettings ssl);
    private static SslOption ToSslOption(SslSettings ssl);
    private IDictionary`2<string, object> CreateClientProperties(string inputQueueAddress);
    [CompilerGeneratedAttribute]
internal static string <CreateConnectionFactory>g__GetVirtualHostPath|8_0(<>c__DisplayClass8_0& );
}
internal class Rebus.Internals.CustomQueueingConsumer : DefaultBasicConsumer {
    [CompilerGeneratedAttribute]
private Channel`1<BasicDeliverEventArgs> <Queue>k__BackingField;
    public Channel`1<BasicDeliverEventArgs> Queue { get; }
    public CustomQueueingConsumer(IModel model);
    [CompilerGeneratedAttribute]
public Channel`1<BasicDeliverEventArgs> get_Queue();
    public virtual void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory`1<byte> body);
    public virtual void OnCancel(String[] consumerTags);
    public void Dispose();
}
[ExtensionAttribute]
internal static class Rebus.Internals.EnumerableExtensions : object {
    [IteratorStateMachineAttribute("Rebus.Internals.EnumerableExtensions/<Batch>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<IReadOnlyList`1<TItem>> Batch(IEnumerable`1<TItem> items, int maxBatchSize);
    [CompilerGeneratedAttribute]
internal static List`1<TItem> <Batch>g__CreateList|0_0(<>c__DisplayClass0_0`1& );
}
internal class Rebus.Internals.FullyQualifiedRoutingKey : object {
    [CompilerGeneratedAttribute]
private string <ExchangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string ExchangeName { get; }
    public string RoutingKey { get; }
    public FullyQualifiedRoutingKey(string destinationAddress);
    [CompilerGeneratedAttribute]
protected FullyQualifiedRoutingKey(FullyQualifiedRoutingKey original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_ExchangeName();
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FullyQualifiedRoutingKey left, FullyQualifiedRoutingKey right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FullyQualifiedRoutingKey left, FullyQualifiedRoutingKey right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FullyQualifiedRoutingKey other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual FullyQualifiedRoutingKey <Clone>$();
}
internal static class Rebus.Internals.Knuth : object {
    public static ulong CalculateHash(string read);
}
[ExtensionAttribute]
internal static class Rebus.Internals.ModelExtensions : object {
    [ExtensionAttribute]
internal static void SafeDrop(IModel model);
}
internal class Rebus.Internals.ModelObjectPool : object {
    private ConcurrentBag`1<IModel> _availableObjects;
    private WriterModelPoolPolicy _policy;
    private int _maxEntries;
    public ModelObjectPool(WriterModelPoolPolicy policy, int maxEntries);
    public void SetMaxEntries(int maxEntries);
    public IModel Get();
    public void Return(IModel model);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Rebus.Internals.OperationInterruptedExceptionExtensions : object {
    [ExtensionAttribute]
public static bool HasReplyCode(OperationInterruptedException exception, int code);
}
internal class Rebus.Internals.RabbitMqErrorHandlerDecorator : object {
    [CompilerGeneratedAttribute]
private IErrorHandler <errorHandler>P;
    public RabbitMqErrorHandlerDecorator(IErrorHandler errorHandler);
    [AsyncStateMachineAttribute("Rebus.Internals.RabbitMqErrorHandlerDecorator/<HandlePoisonMessage>d__2")]
public sealed virtual Task HandlePoisonMessage(TransportMessage transportMessage, ITransactionContext transactionContext, ExceptionInfo exception);
}
[ExtensionAttribute]
internal static class Rebus.Internals.UriExtensions : object {
    [ExtensionAttribute]
public static bool TryGetCredentials(Uri uri, NetworkCredential& result);
}
internal class Rebus.Internals.WriterModelPoolPolicy : object {
    private RabbitMqTransport _transport;
    public WriterModelPoolPolicy(RabbitMqTransport transport);
    public IModel Create();
}
public class Rebus.RabbitMq.BasicReturnEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TransportMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReplyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    public TransportMessage Message { get; }
    public Dictionary`2<string, string> Headers { get; }
    public string Exchange { get; }
    public int ReplyCode { get; }
    public string ReplyText { get; }
    public string RoutingKey { get; }
    public BasicReturnEventArgs(TransportMessage message, string exchange, int replyCode, string replyText, string routingKey);
    [CompilerGeneratedAttribute]
public TransportMessage get_Message();
    public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public string get_Exchange();
    [CompilerGeneratedAttribute]
public int get_ReplyCode();
    [CompilerGeneratedAttribute]
public string get_ReplyText();
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
}
public class Rebus.RabbitMq.ConnectionEndpoint : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private SslSettings <SslSettings>k__BackingField;
    public string ConnectionString { get; public set; }
    public Uri ConnectionUri { get; }
    public SslSettings SslSettings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    public Uri get_ConnectionUri();
    [CompilerGeneratedAttribute]
public SslSettings get_SslSettings();
    [CompilerGeneratedAttribute]
public void set_SslSettings(SslSettings value);
}
public static class Rebus.RabbitMq.RabbitMqHeaders : object {
    public static string Mandatory;
    public static string MessageId;
    public static string AppId;
    public static string CorrelationId;
    public static string UserId;
    public static string ContentType;
    public static string ContentEncoding;
    public static string DeliveryMode;
    public static string Expiration;
    public static string Priority;
    public static string Timestamp;
    public static string Type;
}
public class Rebus.RabbitMq.RabbitMqTransport : AbstractRebusTransport {
    private static int QueueDoesNotExist;
    private static int WriterAttempts;
    private static Encoding HeaderValueEncoding;
    private SemaphoreSlim _consumerLock;
    private ModelObjectPool _writerPool;
    private CustomQueueingConsumer _consumer;
    private ConcurrentDictionary`2<FullyQualifiedRoutingKey, bool> _verifiedQueues;
    private List`1<Subscription> _registeredSubscriptions;
    private SemaphoreSlim _subscriptionSemaphore;
    private ConnectionManager _connectionManager;
    private ILog _log;
    private ushort _maxMessagesToPrefetch;
    private bool _declareExchanges;
    private bool _declareInputQueue;
    private bool _bindInputQueue;
    private bool _publisherConfirmsEnabled;
    private int _batchSize;
    private TimeSpan _publisherConfirmsTimeout;
    private string _consumerTag;
    private string _directExchangeName;
    private string _topicExchangeName;
    private RabbitMqCallbackOptionsBuilder _callbackOptions;
    private RabbitMqQueueOptionsBuilder _inputQueueOptions;
    private RabbitMqQueueOptionsBuilder _defaultQueueOptions;
    private RabbitMqExchangeOptionsBuilder _inputExchangeOptions;
    private long _queueDeclarePassiveCounter;
    private bool _blockOnReceive;
    private static ConcurrentDictionary`2<string, ValueTuple`2<string, string>> ContentTypeHeadersToContentTypeAndCharsetMappings;
    public bool IsCentralized { get; }
    private RabbitMqTransport(IRebusLoggerFactory rebusLoggerFactory, int maxMessagesToPrefetch, string inputQueueAddress);
    public RabbitMqTransport(IList`1<ConnectionEndpoint> endpoints, string inputQueueAddress, IRebusLoggerFactory rebusLoggerFactory, int maxMessagesToPrefetch, Func`2<IConnectionFactory, IConnectionFactory> customizer);
    public RabbitMqTransport(string connectionString, string inputQueueAddress, IRebusLoggerFactory rebusLoggerFactory, int maxMessagesToPrefetch, Func`2<IConnectionFactory, IConnectionFactory> customizer);
    private static RabbitMqTransport();
    public void SetBlockOnReceive(bool blockOnReceive);
    public void AddClientProperties(Dictionary`2<string, string> additionalClientProperties);
    public void SetSslSettings(SslSettings sslSettings);
    public void SetBatchSize(int batchSize);
    public void SetDeclareExchanges(bool value);
    public void SetDeclareInputQueue(bool value);
    public void SetBindInputQueue(bool value);
    public void EnablePublisherConfirms(bool value, TimeSpan timeout);
    public void SetDirectExchangeName(string directExchangeName);
    public void SetTopicExchangeName(string topicExchangeName);
    public void SetMaxMessagesToPrefetch(int maxMessagesToPrefetch);
    public void SetCallbackOptions(RabbitMqCallbackOptionsBuilder callbackOptions);
    public void SetInputQueueOptions(RabbitMqQueueOptionsBuilder inputQueueOptions);
    public void SetDefaultQueueOptions(RabbitMqQueueOptionsBuilder defaultQueueOptions);
    public void SetExchangeOptions(RabbitMqExchangeOptionsBuilder inputExchangeOptions);
    public void SetMaxWriterPoolSize(int poolSize);
    public void SetConsumerTag(string consumerTag);
    public sealed virtual void Initialize();
    public virtual void CreateQueue(string address);
    public void DeclareDelayedMessageExchange(string exchangeName);
    private void DeclareExchanges(IModel model, bool durable);
    private void DeclareQueue(string address, IModel model);
    private void BindInputQueue(string address, IModel model);
    [AsyncStateMachineAttribute("Rebus.RabbitMq.RabbitMqTransport/<SendOutgoingMessages>d__52")]
protected virtual Task SendOutgoingMessages(IEnumerable`1<OutgoingTransportMessage> outgoingMessages, ITransactionContext context);
    public void PurgeInputQueue();
    [AsyncStateMachineAttribute("Rebus.RabbitMq.RabbitMqTransport/<Receive>d__55")]
public virtual Task`1<TransportMessage> Receive(ITransactionContext context, CancellationToken cancellationToken);
    private void ReconnectQueue();
    internal static TransportMessage CreateTransportMessage(IBasicProperties basicProperties, Byte[] body);
    private static void AddMessageId(IDictionary`2<string, string> headers, IBasicProperties basicProperties, Byte[] body);
    private static string GenerateMessageIdFromBodyContents(Byte[] body);
    internal IModel CreateChannel();
    private CustomQueueingConsumer InitializeConsumer();
    private void DoSend(IReadOnlyList`1<OutgoingTransportMessage> outgoingMessages, IModel model, bool isExpress);
    private void DoBatchedSend(IReadOnlyList`1<OutgoingTransportMessage> outgoingMessages, IModel model, int batchSize);
    private void DoNormalSend(IReadOnlyList`1<OutgoingTransportMessage> outgoingMessages, IModel model);
    private RabbitMqPublishInfo GetPublishInfo(IModel model, OutgoingTransportMessage outgoingMessage);
    private static IBasicProperties CreateBasicProperties(IModel model, Dictionary`2<string, string> headers);
    private static ValueTuple`2<string, string> GetContentTypeAndEncodingValues(string input);
    private void EnsureQueueExists(FullyQualifiedRoutingKey routingKey, IModel model);
    private bool CheckQueueExistence(FullyQualifiedRoutingKey routingKey, IModel model);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Rebus.RabbitMq.RabbitMqTransport/<GetSubscriberAddresses>d__73")]
public sealed virtual Task`1<IReadOnlyList`1<string>> GetSubscriberAddresses(string topic);
    [AsyncStateMachineAttribute("Rebus.RabbitMq.RabbitMqTransport/<RegisterSubscriber>d__74")]
public sealed virtual Task RegisterSubscriber(string topic, string subscriberAddress);
    [AsyncStateMachineAttribute("Rebus.RabbitMq.RabbitMqTransport/<UnregisterSubscriber>d__75")]
public sealed virtual Task UnregisterSubscriber(string topic, string subscriberAddress);
    private Subscription ParseSubscription(string topicPossiblyQualified, string queueName);
    public sealed virtual bool get_IsCentralized();
    [CompilerGeneratedAttribute]
private Task <ReconnectQueue>b__56_0(Subscription x);
    [CompilerGeneratedAttribute]
internal static string <CreateTransportMessage>g__GetStringValue|57_0(KeyValuePair`2<string, object> kvp);
}
public class Rebus.RabbitMq.SslSettings : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private SslPolicyErrors <AcceptablePolicyErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertPassphrase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <Version>k__BackingField;
    public bool Enabled { get; public set; }
    public string ServerName { get; public set; }
    public SslPolicyErrors AcceptablePolicyErrors { get; public set; }
    public string CertPassphrase { get; public set; }
    public string CertPath { get; public set; }
    public SslProtocols Version { get; public set; }
    public SslSettings(bool enabled, string serverName, string certificatePath, string certPassphrase, SslProtocols version, SslPolicyErrors acceptablePolicyErrors);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public SslPolicyErrors get_AcceptablePolicyErrors();
    [CompilerGeneratedAttribute]
public void set_AcceptablePolicyErrors(SslPolicyErrors value);
    [CompilerGeneratedAttribute]
public string get_CertPassphrase();
    [CompilerGeneratedAttribute]
public void set_CertPassphrase(string value);
    [CompilerGeneratedAttribute]
public string get_CertPath();
    [CompilerGeneratedAttribute]
public void set_CertPath(string value);
    [CompilerGeneratedAttribute]
public SslProtocols get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(SslProtocols value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
