[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Rebus.Config.Outbox.OutboxConnectionProvider : object {
    private string _connectionString;
    public OutboxConnectionProvider(string connectionString);
    public sealed virtual OutboxConnection GetDbConnection();
}
[ExtensionAttribute]
public static class Rebus.Config.Outbox.OutboxExtensions : object {
    internal static string CurrentOutboxConnectionKey;
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<IOutboxStorage> configurer, string connectionString, string tableName);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<IOutboxStorage> configurer, string connectionString, TableName tableName);
    [ExtensionAttribute]
public static void UseOutbox(RebusTransactionScope rebusTransactionScope, SqlConnection connection, SqlTransaction transaction);
}
[ExtensionAttribute]
public static class Rebus.Config.Outbox.SqlServerOutboxConfigurationExtensions : object {
    [ExtensionAttribute]
public static RebusConfigurer Outbox(RebusConfigurer configurer, Action`1<StandardConfigurer`1<IOutboxStorage>> configure);
}
[ExtensionAttribute]
public static class Rebus.Config.SqlServerDataBusConfigurationExtensions : object {
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<IDataBusStorage> configurer, string connectionString, string tableName, bool automaticallyCreateTables, int commandTimeout, bool enlistInAmbientTransaction);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<IDataBusStorage> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, string tableName, bool automaticallyCreateTables, int commandTimeout);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<IDataBusStorage> configurer, SqlServerDataBusOptions options, string tableName);
}
public class Rebus.Config.SqlServerDataBusOptions : SqlServerOptions {
    [CompilerGeneratedAttribute]
private TimeSpan <CommandTimeout>k__BackingField;
    public TimeSpan CommandTimeout { get; public set; }
    public SqlServerDataBusOptions(Func`2<IResolutionContext, IDbConnectionProvider> connectionProviderFactory);
    public SqlServerDataBusOptions(IDbConnectionProvider connectionProvider);
    public SqlServerDataBusOptions(string connectionString, bool enlistInAmbientTransactions);
    [CompilerGeneratedAttribute]
public TimeSpan get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(TimeSpan value);
}
public class Rebus.Config.SqlServerLeaseTransportOptions : SqlServerTransportOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LeaseInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LeaseTolerance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutomaticallyRenewLeases>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LeaseAutoRenewInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <LeasedByFactory>k__BackingField;
    public Nullable`1<TimeSpan> LeaseInterval { get; internal set; }
    public Nullable`1<TimeSpan> LeaseTolerance { get; internal set; }
    public bool AutomaticallyRenewLeases { get; internal set; }
    public Nullable`1<TimeSpan> LeaseAutoRenewInterval { get; internal set; }
    public Func`1<string> LeasedByFactory { get; internal set; }
    public SqlServerLeaseTransportOptions(IDbConnectionProvider connectionProvider);
    public SqlServerLeaseTransportOptions(string connectionString, bool enlistInAmbientTransaction);
    public SqlServerLeaseTransportOptions(Func`1<Task`1<IDbConnection>> connectionFactory);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LeaseInterval();
    [CompilerGeneratedAttribute]
internal void set_LeaseInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LeaseTolerance();
    [CompilerGeneratedAttribute]
internal void set_LeaseTolerance(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_AutomaticallyRenewLeases();
    [CompilerGeneratedAttribute]
internal void set_AutomaticallyRenewLeases(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LeaseAutoRenewInterval();
    [CompilerGeneratedAttribute]
internal void set_LeaseAutoRenewInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LeasedByFactory();
    [CompilerGeneratedAttribute]
internal void set_LeasedByFactory(Func`1<string> value);
}
public abstract class Rebus.Config.SqlServerOptions : object {
    [CompilerGeneratedAttribute]
private Func`2<IResolutionContext, IDbConnectionProvider> <ConnectionProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnsureTablesAreCreated>k__BackingField;
    public Func`2<IResolutionContext, IDbConnectionProvider> ConnectionProviderFactory { get; protected set; }
    public bool EnsureTablesAreCreated { get; internal set; }
    [CompilerGeneratedAttribute]
public Func`2<IResolutionContext, IDbConnectionProvider> get_ConnectionProviderFactory();
    [CompilerGeneratedAttribute]
protected void set_ConnectionProviderFactory(Func`2<IResolutionContext, IDbConnectionProvider> value);
    [CompilerGeneratedAttribute]
public bool get_EnsureTablesAreCreated();
    [CompilerGeneratedAttribute]
internal void set_EnsureTablesAreCreated(bool value);
}
[ExtensionAttribute]
public static class Rebus.Config.SqlServerSagaConfigurationExtensions : object {
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISagaStorage> configurer, string connectionString, string dataTableName, string indexTableName, bool automaticallyCreateTables, bool enlistInAmbientTransaction);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISagaStorage> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, string dataTableName, string indexTableName, bool automaticallyCreateTables);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISagaStorage> configurer, SqlServerSagaStorageOptions options, string dataTableName, string indexTableName);
    [ExtensionAttribute]
public static void UseSagaSerializer(StandardConfigurer`1<ISagaStorage> configurer, ISagaSerializer serializer);
    private static ISagaTypeNamingStrategy GetSagaTypeNamingStrategy(IResolutionContext resolutionContext, IRebusLoggerFactory rebusLoggerFactory);
}
[ExtensionAttribute]
public static class Rebus.Config.SqlServerSagaSnapshotsConfigurationExtensions : object {
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISagaSnapshotStorage> configurer, string connectionString, string tableName, bool automaticallyCreateTables, bool enlistInAmbientTransaction);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISagaSnapshotStorage> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, string tableName, bool automaticallyCreateTables);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISagaSnapshotStorage> configurer, SqlServerSagaSnapshotStorageOptions options, string tableName);
}
public class Rebus.Config.SqlServerSagaSnapshotStorageOptions : SqlServerOptions {
    public SqlServerSagaSnapshotStorageOptions(Func`2<IResolutionContext, IDbConnectionProvider> connectionProviderFactory);
    public SqlServerSagaSnapshotStorageOptions(IDbConnectionProvider connectionProvider);
    public SqlServerSagaSnapshotStorageOptions(string connectionString, bool enlistInAmbientTransactions);
}
public class Rebus.Config.SqlServerSagaStorageOptions : SqlServerOptions {
    public SqlServerSagaStorageOptions(Func`2<IResolutionContext, IDbConnectionProvider> connectionProviderFactory);
    public SqlServerSagaStorageOptions(IDbConnectionProvider connectionProvider);
    public SqlServerSagaStorageOptions(string connectionString, bool enlistInAmbientTransactions);
}
[ExtensionAttribute]
public static class Rebus.Config.SqlServerSubscriptionsConfigurationExtensions : object {
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISubscriptionStorage> configurer, string connectionString, string tableName, bool isCentralized, bool automaticallyCreateTables, bool enlistInAmbientTransaction);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ISubscriptionStorage> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, string tableName, bool isCentralized, bool automaticallyCreateTables);
}
public class Rebus.Config.SqlServerTimeoutManagerOptions : SqlServerOptions {
    public SqlServerTimeoutManagerOptions(Func`2<IResolutionContext, IDbConnectionProvider> connectionProviderFactory);
    public SqlServerTimeoutManagerOptions(IDbConnectionProvider connectionProvider);
    public SqlServerTimeoutManagerOptions(string connectionString, bool enlistInAmbientTransactions);
}
[ExtensionAttribute]
public static class Rebus.Config.SqlServerTimeoutsConfigurationExtensions : object {
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ITimeoutManager> configurer, string connectionString, string tableName, bool automaticallyCreateTables, bool enlistInAmbientTransaction);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ITimeoutManager> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, string tableName, bool automaticallyCreateTables);
    [ExtensionAttribute]
public static void StoreInSqlServer(StandardConfigurer`1<ITimeoutManager> configurer, SqlServerTimeoutManagerOptions options, string tableName);
}
[ExtensionAttribute]
public static class Rebus.Config.SqlServerTransportConfigurationExtensions : object {
    [ExtensionAttribute]
public static SqlServerLeaseTransportOptions UseSqlServerInLeaseMode(StandardConfigurer`1<ITransport> configurer, SqlServerLeaseTransportOptions transportOptions, string inputQueueName);
    [ExtensionAttribute]
public static SqlServerLeaseTransportOptions UseSqlServerInLeaseModeAsOneWayClient(StandardConfigurer`1<ITransport> configurer, SqlServerLeaseTransportOptions transportOptions);
    [ExtensionAttribute]
public static SqlServerTransportOptions UseSqlServer(StandardConfigurer`1<ITransport> configurer, SqlServerTransportOptions transportOptions, string inputQueueName);
    [ExtensionAttribute]
public static SqlServerTransportOptions UseSqlServerAsOneWayClient(StandardConfigurer`1<ITransport> configurer, SqlServerTransportOptions transportOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServerInLeaseMode with a SqlServerLeaseTransportOptions instead.")]
public static void UseSqlServerInLeaseModeAsOneWayClient(StandardConfigurer`1<ITransport> configurer, string connectionString, Nullable`1<TimeSpan> leaseInterval, Nullable`1<TimeSpan> leaseTolerance, bool automaticallyRenewLeases, Nullable`1<TimeSpan> leaseAutoRenewInterval, Func`1<string> leasedByFactory, bool enlistInAmbientTransaction, bool ensureTablesAreCreated);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServerInLeaseMode with a SqlServerLeaseTransportOptions instead.")]
public static void UseSqlServerInLeaseModeAsOneWayClient(StandardConfigurer`1<ITransport> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, Nullable`1<TimeSpan> leaseInterval, Nullable`1<TimeSpan> leaseTolerance, bool automaticallyRenewLeases, Nullable`1<TimeSpan> leaseAutoRenewInterval, Func`1<string> leasedByFactory);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServerInLeaseMode with a SqlServerLeaseTransportOptions instead.")]
public static void UseSqlServerInLeaseMode(StandardConfigurer`1<ITransport> configurer, string connectionString, string inputQueueName, Nullable`1<TimeSpan> leaseInterval, Nullable`1<TimeSpan> leaseTolerance, bool automaticallyRenewLeases, Nullable`1<TimeSpan> leaseAutoRenewInterval, Func`1<string> leasedByFactory, bool enlistInAmbientTransaction, bool ensureTablesAreCreated);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServerInLeaseMode with a SqlServerLeaseTransportOptions instead.")]
public static void UseSqlServerInLeaseMode(StandardConfigurer`1<ITransport> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, string inputQueueName, Nullable`1<TimeSpan> leaseInterval, Nullable`1<TimeSpan> leaseTolerance, bool automaticallyRenewLeases, Nullable`1<TimeSpan> leaseAutoRenewInterval, Func`1<string> leasedByFactory, bool ensureTablesAreCreated);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServer with a SqlServerTransport instead.")]
public static void UseSqlServerAsOneWayClient(StandardConfigurer`1<ITransport> configurer, Func`1<Task`1<IDbConnection>> connectionFactory);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServer with a SqlServerTransport instead.")]
public static void UseSqlServerAsOneWayClient(StandardConfigurer`1<ITransport> configurer, string connectionString, bool enlistInAmbientTransaction);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServer with a SqlServerTransport instead.")]
public static void UseSqlServer(StandardConfigurer`1<ITransport> configurer, Func`1<Task`1<IDbConnection>> connectionFactory, string inputQueueName, bool ensureTablesAreCreated);
    [ExtensionAttribute]
[ObsoleteAttribute("Will be removed in a future version use UseSqlServer with a SqlServerTransport instead.")]
public static void UseSqlServer(StandardConfigurer`1<ITransport> configurer, string connectionString, string inputQueueName, bool enlistInAmbientTransaction, bool ensureTablesAreCreated);
    private static TTransportOptions Configure(StandardConfigurer`1<ITransport> configurer, TransportFactoryDelegate transportFactory, TTransportOptions transportOptions);
}
public class Rebus.Config.SqlServerTransportOptions : SqlServerOptions {
    [CompilerGeneratedAttribute]
private string <InputQueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDeleteQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ExpiredMessagesCleanupInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NativeTimeoutManagerDisabled>k__BackingField;
    public string InputQueueName { get; internal set; }
    public bool AutoDeleteQueue { get; internal set; }
    internal bool IsOneWayClient { get; }
    internal Nullable`1<TimeSpan> ExpiredMessagesCleanupInterval { get; internal set; }
    internal bool NativeTimeoutManagerDisabled { get; internal set; }
    public SqlServerTransportOptions(IDbConnectionProvider connectionProvider);
    public SqlServerTransportOptions(Func`2<IResolutionContext, IDbConnectionProvider> connectionProviderFactory);
    public SqlServerTransportOptions(string connectionString, bool enlistInAmbientTransaction);
    public SqlServerTransportOptions(Func`1<Task`1<IDbConnection>> connectionFactory);
    public SqlServerTransportOptions DisableNativeTimeoutManager();
    [CompilerGeneratedAttribute]
public string get_InputQueueName();
    [CompilerGeneratedAttribute]
internal void set_InputQueueName(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoDeleteQueue();
    [CompilerGeneratedAttribute]
internal void set_AutoDeleteQueue(bool value);
    internal bool get_IsOneWayClient();
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_ExpiredMessagesCleanupInterval();
    [CompilerGeneratedAttribute]
internal void set_ExpiredMessagesCleanupInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal bool get_NativeTimeoutManagerDisabled();
    [CompilerGeneratedAttribute]
internal void set_NativeTimeoutManagerDisabled(bool value);
}
[ExtensionAttribute]
public static class Rebus.Config.SqlServerTransportOptionsExtensions : object {
    [ExtensionAttribute]
public static TTransportOptions AsOneWayClient(TTransportOptions options);
    [ExtensionAttribute]
public static TTransportOptions ReadFrom(TTransportOptions options, string inputQueueName);
    [ExtensionAttribute]
public static TTransportOptions OptOutOfTableCreation(TTransportOptions options);
    [ExtensionAttribute]
public static TTransportOptions SetEnsureTablesAreCreated(TTransportOptions options, bool ensureTablesAreCreated);
    [ExtensionAttribute]
public static TTransportOptions SetAutoDeleteQueue(TTransportOptions options, bool autoDeleteQueue);
    [ExtensionAttribute]
public static TTransportOptions SetExpiredMessagesCleanupInterval(TTransportOptions options, TimeSpan interval);
    [ExtensionAttribute]
public static TLeaseTransportOptions SetLeaseInterval(TLeaseTransportOptions options, Nullable`1<TimeSpan> leaseInterval);
    [ExtensionAttribute]
public static TLeaseTransportOptions SetLeaseTolerance(TLeaseTransportOptions options, Nullable`1<TimeSpan> leaseTolerance);
    [ExtensionAttribute]
public static TLeaseTransportOptions SetAutomaticLeaseRenewal(TLeaseTransportOptions options, bool automaticallyRenewLeases, Nullable`1<TimeSpan> automaticLeaseRenewInterval);
    [ExtensionAttribute]
public static TLeaseTransportOptions EnableAutomaticLeaseRenewal(TLeaseTransportOptions options, Nullable`1<TimeSpan> automaticLeaseRenewInterval);
    [ExtensionAttribute]
public static TLeaseTransportOptions DisableAutomaticLeaseRenewal(TLeaseTransportOptions options);
    [ExtensionAttribute]
public static TLeaseTransportOptions SetLeasedByFactory(TLeaseTransportOptions options, Func`1<string> leasedByFactory);
}
internal static class Rebus.SqlServer.AsyncHelpers : object {
    public static T GetSync(Func`1<Task`1<T>> task);
    public static void RunSync(Func`1<Task> task);
}
public class Rebus.SqlServer.DataBus.SqlServerDataBusStorage : object {
    private static Encoding TextEncoding;
    private DictionarySerializer _dictionarySerializer;
    private IDbConnectionProvider _connectionProvider;
    private TableName _tableName;
    private bool _ensureTableIsCreated;
    private ILog _log;
    private int _commandTimeout;
    private IRebusTime _rebusTime;
    public SqlServerDataBusStorage(IDbConnectionProvider connectionProvider, string tableName, bool ensureTableIsCreated, IRebusLoggerFactory rebusLoggerFactory, IRebusTime rebusTime, int commandTimeout);
    private static SqlServerDataBusStorage();
    public sealed virtual void Initialize();
    [AsyncStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<EnsureTableIsCreatedAsync>d__10")]
private Task EnsureTableIsCreatedAsync();
    [AsyncStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<Save>d__11")]
public sealed virtual Task Save(string id, Stream source, Dictionary`2<string, string> metadata);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<Read>d__12")]
public sealed virtual Task`1<Stream> Read(string id);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<UpdateLastReadTime>d__13")]
private Task UpdateLastReadTime(string id);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<UpdateLastReadTime>d__14")]
private Task UpdateLastReadTime(string id, IDbConnection connection);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<ReadMetadata>d__15")]
public sealed virtual Task`1<Dictionary`2<string, string>> ReadMetadata(string id);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<Delete>d__16")]
public sealed virtual Task Delete(string id);
    [IteratorStateMachineAttribute("Rebus.SqlServer.DataBus.SqlServerDataBusStorage/<Query>d__17")]
public sealed virtual IEnumerable`1<string> Query(TimeRange readTime, TimeRange saveTime);
}
internal class Rebus.SqlServer.DataBus.StreamWrapper : Stream {
    private Stream _innerStream;
    private IDisposable[] _disposables;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamWrapper(Stream innerStream, IEnumerable`1<IDisposable> disposables);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
}
public class Rebus.SqlServer.DbColumn : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlDbType <Type>k__BackingField;
    public string Name { get; }
    public SqlDbType Type { get; }
    public DbColumn(string name, SqlDbType type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public SqlDbType get_Type();
}
public class Rebus.SqlServer.DbConnectionFactoryProvider : object {
    private Func`1<Task`1<IDbConnection>> _connectionFactory;
    public DbConnectionFactoryProvider(Func`1<Task`1<IDbConnection>> connectionFactory);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DbConnectionFactoryProvider/<GetConnection>d__2")]
public sealed virtual Task`1<IDbConnection> GetConnection();
}
public class Rebus.SqlServer.DbConnectionProvider : object {
    private bool _enlistInAmbientTransaction;
    private string _connectionString;
    private ILog _log;
    [CompilerGeneratedAttribute]
private Func`2<SqlConnection, Task> <SqlConnectionOpening>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    public Func`2<SqlConnection, Task> SqlConnectionOpening { get; public set; }
    public IsolationLevel IsolationLevel { get; public set; }
    public DbConnectionProvider(string connectionString, IRebusLoggerFactory rebusLoggerFactory, bool enlistInAmbientTransaction);
    [CompilerGeneratedAttribute]
public Func`2<SqlConnection, Task> get_SqlConnectionOpening();
    [CompilerGeneratedAttribute]
public void set_SqlConnectionOpening(Func`2<SqlConnection, Task> value);
    private string EnsureMarsIsEnabled(string connectionString);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DbConnectionProvider/<GetConnection>d__9")]
public sealed virtual Task`1<IDbConnection> GetConnection();
    private SqlConnection CreateSqlConnectionInAPossiblyAmbientTransaction();
    private SqlConnection CreateSqlConnectionSuppressingAPossibleAmbientTransaction();
    [CompilerGeneratedAttribute]
public IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(IsolationLevel value);
}
public class Rebus.SqlServer.DbConnectionWrapper : object {
    private SqlConnection _connection;
    private bool _managedExternally;
    private SqlTransaction _currentTransaction;
    private bool _disposed;
    public DbConnectionWrapper(SqlConnection connection, SqlTransaction currentTransaction, bool managedExternally);
    public sealed virtual SqlCommand CreateCommand();
    public sealed virtual IEnumerable`1<TableName> GetTableNames();
    public sealed virtual IEnumerable`1<DbColumn> GetColumns(string schema, string dataTableName);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DbConnectionWrapper/<Complete>d__8")]
public sealed virtual Task Complete();
    public sealed virtual void Dispose();
}
internal class Rebus.SqlServer.DisabledTimeoutManager : object {
    [AsyncStateMachineAttribute("Rebus.SqlServer.DisabledTimeoutManager/<Defer>d__0")]
public sealed virtual Task Defer(DateTimeOffset approximateDueTime, Dictionary`2<string, string> headers, Byte[] body);
    [AsyncStateMachineAttribute("Rebus.SqlServer.DisabledTimeoutManager/<GetDueMessages>d__1")]
public sealed virtual Task`1<DueMessagesResult> GetDueMessages();
}
public interface Rebus.SqlServer.IDbConnection {
    public abstract virtual SqlCommand CreateCommand();
    public abstract virtual IEnumerable`1<TableName> GetTableNames();
    public abstract virtual Task Complete();
    public abstract virtual IEnumerable`1<DbColumn> GetColumns(string schema, string dataTableName);
}
public interface Rebus.SqlServer.IDbConnectionProvider {
    public abstract virtual Task`1<IDbConnection> GetConnection();
}
[ExtensionAttribute]
internal static class Rebus.SqlServer.MathExtensions : object {
    [ExtensionAttribute]
public static int RoundUpToNextPowerOfTwo(int number);
}
internal static class Rebus.SqlServer.MathUtil : object {
    public static int GetNextPowerOfTwo(int input);
}
internal interface Rebus.SqlServer.Outbox.IOutboxConnectionProvider {
    public abstract virtual OutboxConnection GetDbConnection();
}
public interface Rebus.SqlServer.Outbox.IOutboxStorage {
    public abstract virtual Task Save(IEnumerable`1<OutgoingTransportMessage> outgoingMessages, string messageId, string sourceQueue, string correlationId);
    public abstract virtual Task Save(IEnumerable`1<OutgoingTransportMessage> outgoingMessages, IDbConnection dbConnection);
    public abstract virtual Task`1<OutboxMessageBatch> GetNextMessageBatch(string correlationId, int maxMessageBatchSize);
}
internal class Rebus.SqlServer.Outbox.OutboxClientTransportDecorator : object {
    private static string OutgoingMessagesKey;
    private static string SecondLevelOutgoingMessagesKey;
    private ITransport _transport;
    private IOutboxStorage _outboxStorage;
    public string Address { get; }
    public OutboxClientTransportDecorator(ITransport transport, IOutboxStorage outboxStorage);
    public sealed virtual void CreateQueue(string address);
    public sealed virtual Task Send(string destinationAddress, TransportMessage message, ITransactionContext context);
    private static string GetOutgoingMessagesKey(ITransactionContext context);
    private static bool SecondLevelRetryInProgress(ITransactionContext context);
    public sealed virtual Task`1<TransportMessage> Receive(ITransactionContext context, CancellationToken cancellationToken);
    public sealed virtual string get_Address();
}
public class Rebus.SqlServer.Outbox.OutboxConnection : object {
    [CompilerGeneratedAttribute]
private SqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTransaction <Transaction>k__BackingField;
    public SqlConnection Connection { get; }
    public SqlTransaction Transaction { get; }
    internal OutboxConnection(SqlConnection connection, SqlTransaction transaction);
    [CompilerGeneratedAttribute]
public SqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public SqlTransaction get_Transaction();
}
internal class Rebus.SqlServer.Outbox.OutboxForwarder : object {
    private static Retrier SendRetrier;
    private CancellationTokenSource _cancellationTokenSource;
    private IOutboxStorage _outboxStorage;
    private ITransport _transport;
    private IAsyncTask _forwarder;
    private IAsyncTask _cleaner;
    private ILog _logger;
    public OutboxForwarder(IAsyncTaskFactory asyncTaskFactory, IRebusLoggerFactory rebusLoggerFactory, IOutboxStorage outboxStorage, ITransport transport);
    private static OutboxForwarder();
    public sealed virtual void Initialize();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.OutboxForwarder/<RunForwarder>d__9")]
private Task RunForwarder();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.OutboxForwarder/<ProcessMessageBatch>d__10")]
private Task ProcessMessageBatch(IReadOnlyCollection`1<OutboxMessage> batch, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.OutboxForwarder/<RunCleaner>d__11")]
private Task RunCleaner();
    public void TryEagerSend(IEnumerable`1<OutgoingTransportMessage> outgoingMessages, string correlationId);
    public sealed virtual void Dispose();
}
internal class Rebus.SqlServer.Outbox.OutboxIncomingStep : object {
    private IOutboxConnectionProvider _outboxConnectionProvider;
    public OutboxIncomingStep(IOutboxConnectionProvider outboxConnectionProvider);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.OutboxIncomingStep/<Process>d__2")]
public sealed virtual Task Process(IncomingStepContext context, Func`1<Task> next);
}
public class Rebus.SqlServer.Outbox.OutboxMessage : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Body>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public long Id { get; public set; }
    public string DestinationAddress { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public Byte[] Body { get; public set; }
    public OutboxMessage(long Id, string DestinationAddress, Dictionary`2<string, string> Headers, Byte[] Body);
    [CompilerGeneratedAttribute]
protected OutboxMessage(OutboxMessage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_DestinationAddress();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DestinationAddress(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Byte[] get_Body();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(Byte[] value);
    public TransportMessage ToTransportMessage();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(OutboxMessage left, OutboxMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(OutboxMessage left, OutboxMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(OutboxMessage other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual OutboxMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int64& Id, String& DestinationAddress, Dictionary`2& Headers, Byte[]& Body);
}
[DefaultMemberAttribute("Item")]
public class Rebus.SqlServer.Outbox.OutboxMessageBatch : object {
    private IReadOnlyList`1<OutboxMessage> _messages;
    private Func`1<Task> _completionFunction;
    private Action _disposeFunction;
    public int Count { get; }
    public OutboxMessage Item { get; }
    public OutboxMessageBatch(Func`1<Task> completionFunction, IEnumerable`1<OutboxMessage> messages, Action disposeFunction);
    public static OutboxMessageBatch Empty(Action disposeFunction);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.OutboxMessageBatch/<Complete>d__5")]
public Task Complete();
    public sealed virtual void Dispose();
    public sealed virtual int get_Count();
    public sealed virtual OutboxMessage get_Item(int index);
    public sealed virtual IEnumerator`1<OutboxMessage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Rebus.SqlServer.Outbox.SqlServerOutboxStorage : object {
    private static HeaderSerializer HeaderSerializer;
    private Func`2<ITransactionContext, IDbConnection> _connectionProvider;
    private TableName _tableName;
    public SqlServerOutboxStorage(Func`2<ITransactionContext, IDbConnection> connectionProvider, TableName tableName);
    private static SqlServerOutboxStorage();
    public sealed virtual void Initialize();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<Save>d__5")]
public sealed virtual Task Save(IEnumerable`1<OutgoingTransportMessage> outgoingMessages, string messageId, string sourceQueue, string correlationId);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<Save>d__6")]
public sealed virtual Task Save(IEnumerable`1<OutgoingTransportMessage> outgoingMessages, IDbConnection dbConnection);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<GetNextMessageBatch>d__7")]
public sealed virtual Task`1<OutboxMessageBatch> GetNextMessageBatch(string correlationId, int maxMessageBatchSize);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<InnerGetMessageBatch>d__8")]
private Task`1<OutboxMessageBatch> InnerGetMessageBatch(int maxMessageBatchSize, string correlationId);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<InnerSave>d__9")]
private Task InnerSave(IEnumerable`1<OutgoingTransportMessage> outgoingMessages, string messageId, string sourceQueue, string correlationId);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<SaveUsingConnection>d__10")]
private Task SaveUsingConnection(IDbConnection connection, IEnumerable`1<OutgoingTransportMessage> outgoingMessages, string messageId, string sourceQueue, string correlationId);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<CompleteMessages>d__11")]
private Task CompleteMessages(IDbConnection connection, IEnumerable`1<OutboxMessage> messages);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<GetOutboxMessages>d__12")]
private Task`1<List`1<OutboxMessage>> GetOutboxMessages(IDbConnection connection, int maxMessageBatchSize, string correlationId);
    private static string SerializeHeaders(Dictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Outbox.SqlServerOutboxStorage/<<Initialize>g__InitializeAsync|4_0>d")]
[CompilerGeneratedAttribute]
private Task <Initialize>g__InitializeAsync|4_0();
}
internal class Rebus.SqlServer.Reflect : object {
    public static object Value(object obj, string path);
}
internal class Rebus.SqlServer.Retrier : object {
    private List`1<TimeSpan> _delays;
    public Retrier(IEnumerable`1<TimeSpan> delays);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Retrier/<ExecuteAsync>d__2")]
public Task ExecuteAsync(Func`1<Task> execute, CancellationToken cancellationToken);
}
public class Rebus.SqlServer.Sagas.CachedSagaTypeNamingStrategy : object {
    private ConcurrentDictionary`2<Type, string> _sagaTypeCache;
    private ISagaTypeNamingStrategy _innerSagaTypeNamingStrategy;
    public CachedSagaTypeNamingStrategy(ISagaTypeNamingStrategy innerSagaTypeNamingStrategy);
    public sealed virtual string GetSagaTypeName(Type sagaDataType, int maximumLength);
}
public class Rebus.SqlServer.Sagas.HumanReadableHashedSagaTypeNamingStrategy : Sha512SagaTypeNamingStrategy {
    public static int DefaultHumanReadableBytes;
    private int _numberOfHumanReadableBytes;
    public HumanReadableHashedSagaTypeNamingStrategy(int numberOfHumanReadableBytes);
    public virtual string GetSagaTypeName(Type sagaDataType, int maximumLength);
    protected virtual string GenerateHumanReadableHash(string humanReadableName, Type sagaDataType, int maximumLength);
}
public interface Rebus.SqlServer.Sagas.ISagaTypeNamingStrategy {
    public abstract virtual string GetSagaTypeName(Type sagaDataType, int maximumLength);
}
public class Rebus.SqlServer.Sagas.LegacySagaTypeNamingStrategy : object {
    public sealed virtual string GetSagaTypeName(Type sagaDataType, int maximumLength);
}
public class Rebus.SqlServer.Sagas.Serialization.DefaultSagaSerializer : object {
    private ObjectSerializer _objectSerializer;
    public sealed virtual string SerializeToString(ISagaData obj);
    public sealed virtual ISagaData DeserializeFromString(Type type, string str);
}
public interface Rebus.SqlServer.Sagas.Serialization.ISagaSerializer {
    public abstract virtual string SerializeToString(ISagaData obj);
    public abstract virtual ISagaData DeserializeFromString(Type type, string str);
}
public class Rebus.SqlServer.Sagas.Sha512SagaTypeNamingStrategy : object {
    public virtual string GetSagaTypeName(Type sagaDataType, int maximumLength);
    protected string GetBase64EncodedPartialHash(string inputString, int numberOfBytes, Encoding encoding);
    private static int GetMaximumBase64EncodedBytesThatFit(int maximumSize);
}
public class Rebus.SqlServer.Sagas.SqlServerSagaSnapshotStorage : object {
    private IDbConnectionProvider _connectionProvider;
    private TableName _tableName;
    private ILog _log;
    private static ObjectSerializer DataSerializer;
    private static HeaderSerializer MetadataSerializer;
    public SqlServerSagaSnapshotStorage(IDbConnectionProvider connectionProvider, string tableName, IRebusLoggerFactory rebusLoggerFactory);
    private static SqlServerSagaSnapshotStorage();
    public void EnsureTableIsCreated();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaSnapshotStorage/<EnsureTableIsCreatedAsync>d__7")]
private Task EnsureTableIsCreatedAsync();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaSnapshotStorage/<Save>d__8")]
public sealed virtual Task Save(ISagaData sagaData, Dictionary`2<string, string> sagaAuditMetadata);
}
public class Rebus.SqlServer.Sagas.SqlServerSagaStorage : object {
    private static int MaximumSagaDataTypeNameLength;
    private static string IdPropertyName;
    private static bool IndexNullProperties;
    private static Encoding JsonTextEncoding;
    private ILog _log;
    private IDbConnectionProvider _connectionProvider;
    private ISagaTypeNamingStrategy _sagaTypeNamingStrategy;
    private ISagaSerializer _sagaSerializer;
    private TableName _dataTableName;
    private TableName _indexTableName;
    private bool _oldFormatDataTable;
    public SqlServerSagaStorage(IDbConnectionProvider connectionProvider, string dataTableName, string indexTableName, IRebusLoggerFactory rebusLoggerFactory, ISagaTypeNamingStrategy sagaTypeNamingStrategy, ISagaSerializer sagaSerializer);
    private static SqlServerSagaStorage();
    public sealed virtual void Initialize();
    public void EnsureTablesAreCreated();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<EnsureTablesAreCreatedAsync>d__14")]
private Task EnsureTablesAreCreatedAsync();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<ExecuteCommands>d__15")]
private static Task ExecuteCommands(IDbConnection connection, string sqlCommands);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<Find>d__16")]
public sealed virtual Task`1<ISagaData> Find(Type sagaDataType, string propertyName, object propertyValue);
    private static Nullable`1<Guid> GetValueAsGuid(object propertyValue);
    private static void CacheOriginalSagaDataIfPossible(ISagaData sagaData, string value);
    private static string GetTxContextKeyFromSagaData(ISagaData sagaData);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<Insert>d__20")]
public sealed virtual Task Insert(ISagaData sagaData, IEnumerable`1<ISagaCorrelationProperty> correlationProperties);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<Update>d__21")]
public sealed virtual Task Update(ISagaData sagaData, IEnumerable`1<ISagaCorrelationProperty> correlationProperties);
    private bool OneOrMoreSagaPropertiesMightHaveBeenUpdated(ISagaData sagaData);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<Delete>d__23")]
public sealed virtual Task Delete(ISagaData sagaData);
    private void SetData(SqlCommand command, string data);
    private string GetData(SqlDataReader reader);
    private static string GetCorrelationPropertyValue(object propertyValue);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<CreateIndex>d__27")]
private Task CreateIndex(IDbConnection connection, ISagaData sagaData, IEnumerable`1<KeyValuePair`2<string, string>> propertiesToIndex);
    private string GetSagaTypeName(Type sagaDataType);
    private static List`1<KeyValuePair`2<string, string>> GetPropertiesToIndex(ISagaData sagaData, IEnumerable`1<ISagaCorrelationProperty> correlationProperties);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Sagas.SqlServerSagaStorage/<<Initialize>b__12_0>d")]
[CompilerGeneratedAttribute]
private Task <Initialize>b__12_0();
    [CompilerGeneratedAttribute]
private string <CreateIndex>b__27_1(<>f__AnonymousType0`4<string, string, string, string> a);
}
[ExtensionAttribute]
internal static class Rebus.SqlServer.SqlServerMagic : object {
    public static int PrimaryKeyViolationNumber;
    public static int ObjectDoesNotExistOrNoPermission;
    [ExtensionAttribute]
public static List`1<TableName> GetTableNames(SqlConnection connection, SqlTransaction transaction);
    [ExtensionAttribute]
public static List`1<string> GetIndexNames(SqlConnection connection, SqlTransaction transaction);
    [ExtensionAttribute]
public static Dictionary`2<string, SqlDbType> GetColumns(SqlConnection connection, string schema, string tableName, SqlTransaction transaction);
    private static SqlDbType GetDbType(string typeString);
    private static List`1<object> GetNamesFrom(SqlConnection connection, SqlTransaction transaction, string systemTableName, String[] columnNames);
}
public class Rebus.SqlServer.Subscriptions.SqlServerSubscriptionStorage : object {
    private IDbConnectionProvider _connectionProvider;
    private TableName _tableName;
    private ILog _log;
    private int _topicLength;
    private int _addressLength;
    [CompilerGeneratedAttribute]
private bool <IsCentralized>k__BackingField;
    public bool IsCentralized { get; }
    public SqlServerSubscriptionStorage(IDbConnectionProvider connectionProvider, string tableName, bool isCentralized, IRebusLoggerFactory rebusLoggerFactory);
    public sealed virtual void Initialize();
    private int GetColumnWidth(string columnName, IDbConnection connection);
    public void EnsureTableIsCreated();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Subscriptions.SqlServerSubscriptionStorage/<EnsureTableIsCreatedAsync>d__9")]
private Task EnsureTableIsCreatedAsync();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Subscriptions.SqlServerSubscriptionStorage/<GetSubscriberAddresses>d__10")]
public sealed virtual Task`1<IReadOnlyList`1<string>> GetSubscriberAddresses(string topic);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Subscriptions.SqlServerSubscriptionStorage/<RegisterSubscriber>d__11")]
public sealed virtual Task RegisterSubscriber(string topic, string subscriberAddress);
    private void CheckLengths(string topic, string subscriberAddress);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Subscriptions.SqlServerSubscriptionStorage/<UnregisterSubscriber>d__13")]
public sealed virtual Task UnregisterSubscriber(string topic, string subscriberAddress);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCentralized();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Subscriptions.SqlServerSubscriptionStorage/<<Initialize>b__6_0>d")]
[CompilerGeneratedAttribute]
private Task <Initialize>b__6_0();
}
public class Rebus.SqlServer.TableName : object {
    private static ConcurrentDictionary`2<string, TableName> Cache;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Schema { get; }
    public string Name { get; }
    internal string QualifiedName { get; }
    public TableName(string schema, string tableName);
    private static TableName();
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public string get_Name();
    internal string get_QualifiedName();
    public static TableName Parse(string name);
    private static TableName InnerParse(string input);
    private static TableName TableNameFromParts(string name, String[] parts);
    private static string StripBrackets(string value);
    public virtual string ToString();
    public sealed virtual bool Equals(TableName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TableName left, TableName right);
    public static bool op_Inequality(TableName left, TableName right);
}
public class Rebus.SqlServer.Timeouts.SqlServerTimeoutManager : object {
    private static HeaderSerializer HeaderSerializer;
    private IDbConnectionProvider _connectionProvider;
    private IRebusTime _rebusTime;
    private TableName _tableName;
    private ILog _log;
    public SqlServerTimeoutManager(IDbConnectionProvider connectionProvider, string tableName, IRebusLoggerFactory rebusLoggerFactory, IRebusTime rebusTime);
    private static SqlServerTimeoutManager();
    public void EnsureTableIsCreated();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Timeouts.SqlServerTimeoutManager/<EnsureTableIsCreatedAsync>d__7")]
private Task EnsureTableIsCreatedAsync();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Timeouts.SqlServerTimeoutManager/<Defer>d__8")]
public sealed virtual Task Defer(DateTimeOffset approximateDueTime, Dictionary`2<string, string> headers, Byte[] body);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Timeouts.SqlServerTimeoutManager/<GetDueMessages>d__9")]
public sealed virtual Task`1<DueMessagesResult> GetDueMessages();
}
public class Rebus.SqlServer.Transport.SqlServerLeaseTransport : SqlServerTransport {
    private static Task CompletedResult;
    public static string OutboundMessageBufferKey;
    public static int LeasedByColumnSize;
    public static TimeSpan DefaultLeaseTime;
    public static TimeSpan DefaultLeaseTolerance;
    public static TimeSpan DefaultLeaseAutomaticRenewal;
    private TimeSpan _leaseInterval;
    private TimeSpan _leaseTolerance;
    private bool _automaticLeaseRenewal;
    private TimeSpan _automaticLeaseRenewalInterval;
    private Func`1<string> _leasedByFactory;
    public SqlServerLeaseTransport(IDbConnectionProvider connectionProvider, string inputQueueName, IRebusLoggerFactory rebusLoggerFactory, IAsyncTaskFactory asyncTaskFactory, IRebusTime rebusTime, TimeSpan leaseInterval, Nullable`1<TimeSpan> leaseTolerance, Func`1<string> leasedByFactory, SqlServerLeaseTransportOptions options);
    private static SqlServerLeaseTransport();
    public virtual Task Send(string destinationAddress, TransportMessage message, ITransactionContext context);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerLeaseTransport/<ReceiveInternal>d__13")]
protected virtual Task`1<TransportMessage> ReceiveInternal(ITransactionContext context, CancellationToken cancellationToken);
    protected virtual string AdditionalSchemaModifications(TableName tableName);
    private void ApplyTransactionSemantics(ITransactionContext context, long messageId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerLeaseTransport/<DeleteMessage>d__16")]
protected virtual Task DeleteMessage(long messageId, CancellationToken cancellationToken);
    private ConcurrentQueue`1<AddressedTransportMessage> GetOutboundMessageBuffer(ITransactionContext context);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerLeaseTransport/<UpdateLease>d__18")]
protected virtual Task UpdateLease(IDbConnectionProvider connectionProvider, string tableName, long messageId, Nullable`1<TimeSpan> leaseInterval, CancellationToken cancellationToken);
}
public class Rebus.SqlServer.Transport.SqlServerTransport : object {
    private static HeaderSerializer HeaderSerializer;
    public static string MagicExternalTimeoutManagerAddress;
    public static string MessagePriorityHeaderKey;
    public static string CurrentConnectionKey;
    public static TimeSpan DefaultExpiredMessagesCleanupInterval;
    protected static int RecipientColumnSize;
    protected IDbConnectionProvider ConnectionProvider;
    private IRebusTime _rebusTime;
    protected TableName ReceiveTableName;
    protected ILog Log;
    private AsyncBottleneck _bottleneck;
    private IAsyncTask _expiredMessagesCleanupTask;
    private bool _nativeTimeoutManagerDisabled;
    private bool _autoDeleteQueue;
    private bool _disposed;
    public string Address { get; }
    public SqlServerTransport(IDbConnectionProvider connectionProvider, string inputQueueName, IRebusLoggerFactory rebusLoggerFactory, IAsyncTaskFactory asyncTaskFactory, IRebusTime rebusTime, SqlServerTransportOptions options);
    private static SqlServerTransport();
    public sealed virtual void Initialize();
    public sealed virtual string get_Address();
    public sealed virtual void CreateQueue(string address);
    public void EnsureTableIsCreated();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<EnsureTableIsCreatedAsync>d__21")]
private Task EnsureTableIsCreatedAsync(TableName tableName);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<InnerEnsureTableIsCreatedAsync>d__22")]
private Task InnerEnsureTableIsCreatedAsync(TableName tableName);
    protected virtual string AdditionalSchemaModifications(TableName tableName);
    private void EnsureTableIsDropped();
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<EnsureTableIsDroppedAsync>d__25")]
private Task EnsureTableIsDroppedAsync(TableName tableName);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<InnerEnsureTableIsDroppedAsync>d__26")]
private Task InnerEnsureTableIsDroppedAsync(TableName tableName);
    protected virtual string AdditionalSchemaModificationsOnDeleteQueue();
    private static void ExecuteCommands(IDbConnection connection, string sqlCommands);
    private static void Execute(IDbCommand command);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<Send>d__30")]
public virtual Task Send(string destinationAddress, TransportMessage message, ITransactionContext context);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<Receive>d__31")]
public sealed virtual Task`1<TransportMessage> Receive(ITransactionContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<ReceiveInternal>d__32")]
protected virtual Task`1<TransportMessage> ReceiveInternal(ITransactionContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<ExtractTransportMessageFromReader>d__33")]
protected static Task`1<TransportMessage> ExtractTransportMessageFromReader(SqlDataReader reader, CancellationToken cancellationToken);
    protected static string GetDestinationAddressToUse(string destinationAddress, TransportMessage message);
    private static string GetDeferredRecipient(TransportMessage message);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<InnerSend>d__36")]
protected Task InnerSend(string destinationAddress, TransportMessage message, IDbConnection connection);
    private TimeSpan GetInitialVisibilityDelay(IDictionary`2<string, string> headers);
    private static TimeSpan GetTtl(IReadOnlyDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("Rebus.SqlServer.Transport.SqlServerTransport/<PerformExpiredMessagesCleanupCycle>d__39")]
private Task PerformExpiredMessagesCleanupCycle();
    private static int GetMessagePriority(Dictionary`2<string, string> headers);
    private Task`1<IDbConnection> GetConnection(ITransactionContext context);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Task <EnsureTableIsCreated>b__20_0();
    [CompilerGeneratedAttribute]
private Task <EnsureTableIsDropped>b__24_0();
    [CompilerGeneratedAttribute]
private Task <EnsureTableIsDropped>b__24_1();
}
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
