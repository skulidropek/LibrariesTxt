public class RedLockNet.SERedis.Configuration.ExistingMultiplexersRedLockConnectionProvider : RedLockConnectionProvider {
    [CompilerGeneratedAttribute]
private IList`1<RedLockMultiplexer> <Multiplexers>k__BackingField;
    public IList`1<RedLockMultiplexer> Multiplexers { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<RedLockMultiplexer> get_Multiplexers();
    [CompilerGeneratedAttribute]
public void set_Multiplexers(IList`1<RedLockMultiplexer> value);
    internal virtual ICollection`1<RedisConnection> CreateRedisConnections();
    internal virtual void DisposeConnections();
}
public class RedLockNet.SERedis.Configuration.InternallyManagedRedLockConnectionProvider : RedLockConnectionProvider {
    private ILoggerFactory loggerFactory;
    [CompilerGeneratedAttribute]
private IList`1<RedLockEndPoint> <EndPoints>k__BackingField;
    private ICollection`1<RedisConnection> connections;
    private static int DefaultConnectionTimeout;
    private static int DefaultSyncTimeout;
    private static int DefaultConfigCheckSeconds;
    public IList`1<RedLockEndPoint> EndPoints { get; public set; }
    public InternallyManagedRedLockConnectionProvider(ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public IList`1<RedLockEndPoint> get_EndPoints();
    [CompilerGeneratedAttribute]
public void set_EndPoints(IList`1<RedLockEndPoint> value);
    internal virtual ICollection`1<RedisConnection> CreateRedisConnections();
    internal virtual void DisposeConnections();
}
public class RedLockNet.SERedis.Configuration.RedLockConfiguration : object {
    [CompilerGeneratedAttribute]
private RedLockConnectionProvider <ConnectionProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private RedLockRetryConfiguration <RetryConfiguration>k__BackingField;
    public RedLockConnectionProvider ConnectionProvider { get; }
    public ILoggerFactory LoggerFactory { get; }
    public RedLockRetryConfiguration RetryConfiguration { get; public set; }
    public RedLockConfiguration(IList`1<RedLockEndPoint> endPoints, ILoggerFactory loggerFactory);
    public RedLockConfiguration(RedLockConnectionProvider connectionProvider, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public RedLockConnectionProvider get_ConnectionProvider();
    [CompilerGeneratedAttribute]
public ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
public RedLockRetryConfiguration get_RetryConfiguration();
    [CompilerGeneratedAttribute]
public void set_RetryConfiguration(RedLockRetryConfiguration value);
}
public abstract class RedLockNet.SERedis.Configuration.RedLockConnectionProvider : object {
    protected static int DefaultRedisDatabase;
    protected static string DefaultRedisKeyFormat;
    internal abstract virtual ICollection`1<RedisConnection> CreateRedisConnections();
    internal abstract virtual void DisposeConnections();
}
public class RedLockNet.SERedis.Configuration.RedLockEndPoint : object {
    [CompilerGeneratedAttribute]
private IList`1<EndPoint> <EndPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ssl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SslProtocols> <SslProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SyncTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RedisDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedisKeyFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConfigCheckSeconds>k__BackingField;
    public EndPoint EndPoint { get; public set; }
    public IList`1<EndPoint> EndPoints { get; private set; }
    public bool Ssl { get; public set; }
    public Nullable`1<SslProtocols> SslProtocols { get; public set; }
    public string Password { get; public set; }
    public Nullable`1<int> ConnectionTimeout { get; public set; }
    public Nullable`1<int> SyncTimeout { get; public set; }
    public Nullable`1<int> RedisDatabase { get; public set; }
    public string RedisKeyFormat { get; public set; }
    public Nullable`1<int> ConfigCheckSeconds { get; public set; }
    public RedLockEndPoint(EndPoint endPoint);
    public RedLockEndPoint(IList`1<EndPoint> endPoints);
    public static RedLockEndPoint op_Implicit(EndPoint endPoint);
    public static RedLockEndPoint op_Implicit(List`1<EndPoint> endPoints);
    public EndPoint get_EndPoint();
    public void set_EndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public IList`1<EndPoint> get_EndPoints();
    [CompilerGeneratedAttribute]
private void set_EndPoints(IList`1<EndPoint> value);
    [CompilerGeneratedAttribute]
public bool get_Ssl();
    [CompilerGeneratedAttribute]
public void set_Ssl(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<SslProtocols> get_SslProtocols();
    [CompilerGeneratedAttribute]
public void set_SslProtocols(Nullable`1<SslProtocols> value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SyncTimeout();
    [CompilerGeneratedAttribute]
public void set_SyncTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RedisDatabase();
    [CompilerGeneratedAttribute]
public void set_RedisDatabase(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_RedisKeyFormat();
    [CompilerGeneratedAttribute]
public void set_RedisKeyFormat(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConfigCheckSeconds();
    [CompilerGeneratedAttribute]
public void set_ConfigCheckSeconds(Nullable`1<int> value);
}
public class RedLockNet.SERedis.Configuration.RedLockMultiplexer : object {
    [CompilerGeneratedAttribute]
private IConnectionMultiplexer <ConnectionMultiplexer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RedisDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedisKeyFormat>k__BackingField;
    public IConnectionMultiplexer ConnectionMultiplexer { get; }
    public Nullable`1<int> RedisDatabase { get; public set; }
    public string RedisKeyFormat { get; public set; }
    public RedLockMultiplexer(IConnectionMultiplexer connectionMultiplexer);
    [CompilerGeneratedAttribute]
public IConnectionMultiplexer get_ConnectionMultiplexer();
    public static RedLockMultiplexer op_Implicit(ConnectionMultiplexer connectionMultiplexer);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RedisDatabase();
    [CompilerGeneratedAttribute]
public void set_RedisDatabase(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_RedisKeyFormat();
    [CompilerGeneratedAttribute]
public void set_RedisKeyFormat(string value);
}
public class RedLockNet.SERedis.Configuration.RedLockRetryConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetryDelayMs>k__BackingField;
    public Nullable`1<int> RetryCount { get; }
    public Nullable`1<int> RetryDelayMs { get; }
    public RedLockRetryConfiguration(Nullable`1<int> retryCount, Nullable`1<int> retryDelayMs);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RetryCount();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RetryDelayMs();
}
public class RedLockNet.SERedis.Events.RedLockConfigurationChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ICollection`1<Dictionary`2<EndPoint, RedLockEndPointStatus>> <EndPointConnections>k__BackingField;
    public ICollection`1<Dictionary`2<EndPoint, RedLockEndPointStatus>> EndPointConnections { get; }
    public int Quorum { get; }
    public bool HasQuorum { get; }
    public int InstancesCount { get; }
    public int InstancesWithConnectedMastersCount { get; }
    public RedLockConfigurationChangedEventArgs(ICollection`1<Dictionary`2<EndPoint, RedLockEndPointStatus>> connections);
    [CompilerGeneratedAttribute]
public ICollection`1<Dictionary`2<EndPoint, RedLockEndPointStatus>> get_EndPointConnections();
    public int get_Quorum();
    public bool get_HasQuorum();
    public int get_InstancesCount();
    public int get_InstancesWithConnectedMastersCount();
}
internal class RedLockNet.SERedis.Internal.RedisConnection : object {
    [CompilerGeneratedAttribute]
private IConnectionMultiplexer <ConnectionMultiplexer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RedisDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedisKeyFormat>k__BackingField;
    public IConnectionMultiplexer ConnectionMultiplexer { get; public set; }
    public int RedisDatabase { get; public set; }
    public string RedisKeyFormat { get; public set; }
    [CompilerGeneratedAttribute]
public IConnectionMultiplexer get_ConnectionMultiplexer();
    [CompilerGeneratedAttribute]
public void set_ConnectionMultiplexer(IConnectionMultiplexer value);
    [CompilerGeneratedAttribute]
public int get_RedisDatabase();
    [CompilerGeneratedAttribute]
public void set_RedisDatabase(int value);
    [CompilerGeneratedAttribute]
public string get_RedisKeyFormat();
    [CompilerGeneratedAttribute]
public void set_RedisKeyFormat(string value);
}
internal enum RedLockNet.SERedis.Internal.RedLockInstanceResult : Enum {
    public int value__;
    public static RedLockInstanceResult Success;
    public static RedLockInstanceResult Conflicted;
    public static RedLockInstanceResult Error;
}
public class RedLockNet.SERedis.RedLock : object {
    private object lockObject;
    private SemaphoreSlim extendUnlockSemaphore;
    private CancellationTokenSource unlockCancellationTokenSource;
    private ICollection`1<RedisConnection> redisCaches;
    private ILogger`1<RedLock> logger;
    private int quorum;
    private int quorumRetryCount;
    private int quorumRetryDelayMs;
    private static double ClockDriftFactor;
    private static long ClockPrecisionPaddingTicks;
    private bool isDisposed;
    private Timer lockKeepaliveTimer;
    private static string UnlockScript;
    private static string ExtendIfMatchingValueScript;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockId>k__BackingField;
    [CompilerGeneratedAttribute]
private RedLockStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private RedLockInstanceSummary <InstanceSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtendCount>k__BackingField;
    private TimeSpan expiryTime;
    private Nullable`1<TimeSpan> waitTime;
    private Nullable`1<TimeSpan> retryTime;
    private CancellationToken cancellationToken;
    private static TimeSpan MinimumExpiryTime;
    private static TimeSpan MinimumRetryTime;
    private static int DefaultQuorumRetryCount;
    private static int DefaultQuorumRetryDelayMs;
    public string Resource { get; }
    public string LockId { get; }
    public bool IsAcquired { get; }
    public RedLockStatus Status { get; private set; }
    public RedLockInstanceSummary InstanceSummary { get; private set; }
    public int ExtendCount { get; private set; }
    private RedLock(ILogger`1<RedLock> logger, ICollection`1<RedisConnection> redisCaches, string resource, TimeSpan expiryTime, Nullable`1<TimeSpan> waitTime, Nullable`1<TimeSpan> retryTime, RedLockRetryConfiguration retryConfiguration, Nullable`1<CancellationToken> cancellationToken);
    private static RedLock();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Resource();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LockId();
    public sealed virtual bool get_IsAcquired();
    [CompilerGeneratedAttribute]
public sealed virtual RedLockStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(RedLockStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual RedLockInstanceSummary get_InstanceSummary();
    [CompilerGeneratedAttribute]
private void set_InstanceSummary(RedLockInstanceSummary value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ExtendCount();
    [CompilerGeneratedAttribute]
private void set_ExtendCount(int value);
    internal static RedLock Create(ILogger`1<RedLock> logger, ICollection`1<RedisConnection> redisCaches, string resource, TimeSpan expiryTime, Nullable`1<TimeSpan> waitTime, Nullable`1<TimeSpan> retryTime, RedLockRetryConfiguration retryConfiguration, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<CreateAsync>d__44")]
internal static Task`1<RedLock> CreateAsync(ILogger`1<RedLock> logger, ICollection`1<RedisConnection> redisCaches, string resource, TimeSpan expiryTime, Nullable`1<TimeSpan> waitTime, Nullable`1<TimeSpan> retryTime, RedLockRetryConfiguration retryConfiguration, Nullable`1<CancellationToken> cancellationToken);
    private void Start();
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<StartAsync>d__46")]
private Task StartAsync();
    private ValueTuple`2<RedLockStatus, RedLockInstanceSummary> Acquire();
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<AcquireAsync>d__48")]
private Task`1<ValueTuple`2<RedLockStatus, RedLockInstanceSummary>> AcquireAsync();
    private void StartAutoExtendTimer();
    private void ExtendLockLifetime();
    private long GetRemainingValidityTicks(Stopwatch sw);
    private RedLockInstanceSummary Lock();
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<LockAsync>d__53")]
private Task`1<RedLockInstanceSummary> LockAsync();
    private RedLockInstanceSummary Extend();
    private void Unlock();
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<UnlockAsync>d__56")]
private Task UnlockAsync();
    private RedLockInstanceResult LockInstance(RedisConnection cache);
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<LockInstanceAsync>d__58")]
private Task`1<RedLockInstanceResult> LockInstanceAsync(RedisConnection cache);
    private RedLockInstanceResult ExtendInstance(RedisConnection cache);
    private void UnlockInstance(RedisConnection cache);
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<UnlockInstanceAsync>d__61")]
private Task`1<bool> UnlockInstanceAsync(RedisConnection cache);
    private static string GetRedisKey(string redisKeyFormat, string resource);
    internal static string GetHost(IConnectionMultiplexer cache);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLock/<DisposeAsync>d__67")]
protected virtual ValueTask DisposeAsync(bool disposing);
    private RedLockStatus GetFailedRedLockStatus(RedLockInstanceSummary lockResult);
    private static RedLockInstanceSummary PopulateRedLockResult(IEnumerable`1<RedLockInstanceResult> instanceResults);
    internal void StopKeepAliveTimer();
    [CompilerGeneratedAttribute]
private void <StartAutoExtendTimer>b__49_0(object state);
}
public class RedLockNet.SERedis.RedLockFactory : object {
    private RedLockConfiguration configuration;
    private ILoggerFactory loggerFactory;
    private ICollection`1<RedisConnection> redisCaches;
    [CompilerGeneratedAttribute]
private EventHandler`1<RedLockConfigurationChangedEventArgs> ConfigurationChanged;
    public RedLockFactory(RedLockConfiguration configuration);
    [CompilerGeneratedAttribute]
public void add_ConfigurationChanged(EventHandler`1<RedLockConfigurationChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationChanged(EventHandler`1<RedLockConfigurationChangedEventArgs> value);
    public static RedLockFactory Create(IList`1<RedLockEndPoint> endPoints, ILoggerFactory loggerFactory);
    public static RedLockFactory Create(IList`1<RedLockEndPoint> endPoints, RedLockRetryConfiguration retryConfiguration, ILoggerFactory loggerFactory);
    public static RedLockFactory Create(IList`1<RedLockMultiplexer> existingMultiplexers, ILoggerFactory loggerFactory);
    public static RedLockFactory Create(IList`1<RedLockMultiplexer> existingMultiplexers, RedLockRetryConfiguration retryConfiguration, ILoggerFactory loggerFactory);
    private void SubscribeToConnectionEvents();
    private void UnsubscribeFromConnectionEvents();
    private void MultiplexerConfigurationChanged(object sender, EndPointEventArgs args);
    public sealed virtual IRedLock CreateLock(string resource, TimeSpan expiryTime);
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLockFactory/<CreateLockAsync>d__15")]
public sealed virtual Task`1<IRedLock> CreateLockAsync(string resource, TimeSpan expiryTime);
    public sealed virtual IRedLock CreateLock(string resource, TimeSpan expiryTime, TimeSpan waitTime, TimeSpan retryTime, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("RedLockNet.SERedis.RedLockFactory/<CreateLockAsync>d__17")]
public sealed virtual Task`1<IRedLock> CreateLockAsync(string resource, TimeSpan expiryTime, TimeSpan waitTime, TimeSpan retryTime, Nullable`1<CancellationToken> cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void RaiseConfigurationChanged();
}
internal static class RedLockNet.SERedis.Util.EmbeddedResourceLoader : object {
    internal static string GetEmbeddedResource(string name);
}
[ExtensionAttribute]
internal static class RedLockNet.SERedis.Util.EndPointExtensions : object {
    [ExtensionAttribute]
internal static string GetFriendlyName(EndPoint endPoint);
}
internal static class RedLockNet.SERedis.Util.TaskUtils : object {
    public static Task Delay(TimeSpan timeSpan);
    public static Task Delay(TimeSpan timeSpan, CancellationToken cancellationToken);
    public static Task Delay(int delayMs);
    public static Task Delay(int delayMs, CancellationToken cancellationToken);
    public static Task`1<T[]> WhenAll(IEnumerable`1<Task`1<T>> tasks);
}
internal static class RedLockNet.SERedis.Util.ThreadSafeRandom : object {
    private static Random GlobalRandom;
    [ThreadStaticAttribute]
private static Random localRandom;
    private static ThreadSafeRandom();
    public static int Next();
    public static int Next(int maxValue);
    public static int Next(int minValue, int maxValue);
    public static double NextDouble();
    public static void NextBytes(Byte[] buffer);
    private static Random GetLocalRandom();
}
