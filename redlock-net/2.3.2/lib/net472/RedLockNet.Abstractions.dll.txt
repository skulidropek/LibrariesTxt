public interface RedLockNet.IDistributedLockFactory {
    public abstract virtual IRedLock CreateLock(string resource, TimeSpan expiryTime);
    public abstract virtual Task`1<IRedLock> CreateLockAsync(string resource, TimeSpan expiryTime);
    public abstract virtual IRedLock CreateLock(string resource, TimeSpan expiryTime, TimeSpan waitTime, TimeSpan retryTime, Nullable`1<CancellationToken> cancellationToken);
    public abstract virtual Task`1<IRedLock> CreateLockAsync(string resource, TimeSpan expiryTime, TimeSpan waitTime, TimeSpan retryTime, Nullable`1<CancellationToken> cancellationToken);
}
public interface RedLockNet.IRedLock {
    public string Resource { get; }
    public string LockId { get; }
    public bool IsAcquired { get; }
    public RedLockStatus Status { get; }
    public RedLockInstanceSummary InstanceSummary { get; }
    public int ExtendCount { get; }
    public abstract virtual string get_Resource();
    public abstract virtual string get_LockId();
    public abstract virtual bool get_IsAcquired();
    public abstract virtual RedLockStatus get_Status();
    public abstract virtual RedLockInstanceSummary get_InstanceSummary();
    public abstract virtual int get_ExtendCount();
}
public class RedLockNet.RedLockInstanceSummary : ValueType {
    public int Acquired;
    public int Conflicted;
    public int Error;
    public RedLockInstanceSummary(int acquired, int conflicted, int error);
    public virtual string ToString();
}
public enum RedLockNet.RedLockStatus : Enum {
    public int value__;
    public static RedLockStatus Unlocked;
    public static RedLockStatus Acquired;
    public static RedLockStatus NoQuorum;
    public static RedLockStatus Conflicted;
    public static RedLockStatus Expired;
}
