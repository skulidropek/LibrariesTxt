[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmHelpers.BaseViewModel : ObservableObject {
    private string title;
    private string subtitle;
    private string icon;
    private bool isBusy;
    private bool isNotBusy;
    private bool canLoadMore;
    private string header;
    private string footer;
    public string Title { get; public set; }
    public string Subtitle { get; public set; }
    public string Icon { get; public set; }
    public bool IsBusy { get; public set; }
    public bool IsNotBusy { get; public set; }
    public bool CanLoadMore { get; public set; }
    public string Header { get; public set; }
    public string Footer { get; public set; }
    public string get_Title();
    public void set_Title(string value);
    public string get_Subtitle();
    public void set_Subtitle(string value);
    public string get_Icon();
    public void set_Icon(string value);
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    public bool get_IsNotBusy();
    public void set_IsNotBusy(bool value);
    public bool get_CanLoadMore();
    public void set_CanLoadMore(bool value);
    public string get_Header();
    public void set_Header(string value);
    public string get_Footer();
    public void set_Footer(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmHelpers.Commands.AsyncCommand : object {
    private Func`1<Task> execute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, bool> canExecute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> onException;
    private bool continueOnCapturedContext;
    private WeakEventManager weakEventManager;
    public AsyncCommand(Func`1<Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual Task ExecuteAsync();
    public void RaiseCanExecuteChanged();
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmHelpers.Commands.AsyncCommand`1 : object {
    private Func`2<T, Task> execute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, bool> canExecute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> onException;
    private bool continueOnCapturedContext;
    private WeakEventManager weakEventManager;
    public AsyncCommand`1(Func`2<T, Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual Task ExecuteAsync(T parameter);
    public void RaiseCanExecuteChanged();
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmHelpers.Commands.Command : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, bool> canExecute;
    private Action`1<object> execute;
    private WeakEventManager weakEventManager;
    public Command(Action`1<object> execute);
    public Command(Action execute);
    public Command(Action`1<object> execute, Func`2<object, bool> canExecute);
    public Command(Action execute, Func`1<bool> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void Execute(object parameter);
    public void RaiseCanExecuteChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmHelpers.Commands.Command`1 : Command {
    public Command`1(Action`1<T> execute);
    public Command`1(Action`1<T> execute, Func`2<T, bool> canExecute);
}
internal static class MvvmHelpers.Commands.CommandUtils : object {
    [NullableContextAttribute("1")]
internal static bool IsValidCommandParameter(object o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmHelpers.Exceptions.InvalidCommandParameterException : Exception {
    public InvalidCommandParameterException(Type expectedType, Type actualType, Exception innerException);
    public InvalidCommandParameterException(Type expectedType, Exception innerException);
    public InvalidCommandParameterException(Type expectedType, Type actualType);
    public InvalidCommandParameterException(Type expectedType);
    private static string CreateErrorMessage(Type expectedType, Type actualType);
    private static string CreateErrorMessage(Type expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmHelpers.Grouping`2 : ObservableRangeCollection`1<TItem> {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public TKey Key { get; }
    public IList`1<TItem> Items { get; }
    public Grouping`2(TKey key, IEnumerable`1<TItem> items);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    public IList`1<TItem> get_Items();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmHelpers.Grouping`3 : ObservableRangeCollection`1<TItem> {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TSubKey <SubKey>k__BackingField;
    public TKey Key { get; }
    public TSubKey SubKey { get; }
    public IList`1<TItem> Items { get; }
    public Grouping`3(TKey key, TSubKey subkey, IEnumerable`1<TItem> items);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public TSubKey get_SubKey();
    public IList`1<TItem> get_Items();
}
public interface MvvmHelpers.Interfaces.IAsyncCommand {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync();
}
public interface MvvmHelpers.Interfaces.IAsyncCommand`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(T parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmHelpers.ObservableObject : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableContextAttribute("1")]
protected virtual bool SetProperty(T& backingStore, T value, string propertyName, Action onChanged, Func`3<T, T, bool> validateValue);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmHelpers.ObservableRangeCollection`1 : ObservableCollection`1<T> {
    public ObservableRangeCollection`1(IEnumerable`1<T> collection);
    public void AddRange(IEnumerable`1<T> collection, NotifyCollectionChangedAction notificationMode);
    public void RemoveRange(IEnumerable`1<T> collection, NotifyCollectionChangedAction notificationMode);
    public void Replace(T item);
    public void ReplaceRange(IEnumerable`1<T> collection);
    private bool AddArrangeCore(IEnumerable`1<T> collection);
    private void RaiseChangeNotificationEvents(NotifyCollectionChangedAction action, List`1<T> changedItems, int startingIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmHelpers.Utils : object {
    [AsyncStateMachineAttribute("MvvmHelpers.Utils/<WithTimeout>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, int timeoutInMilliseconds);
    [ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, TimeSpan timeout);
    [AsyncStateMachineAttribute("MvvmHelpers.Utils/<SafeFireAndForget>d__2")]
[ExtensionAttribute]
public static void SafeFireAndForget(Task task, Action`1<Exception> onException, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmHelpers.WeakEventManager : object {
    private Dictionary`2<string, List`1<Subscription>> eventHandlers;
    public void AddEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void AddEventHandler(EventHandler handler, string eventName);
    public void HandleEvent(object sender, object args, string eventName);
    public void RemoveEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void RemoveEventHandler(EventHandler handler, string eventName);
    private void AddEventHandler(string eventName, object handlerTarget, MethodInfo methodInfo);
    private void RemoveEventHandler(string eventName, object handlerTarget, MemberInfo methodInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
