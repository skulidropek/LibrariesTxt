[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AssertionConditionAttribute : Attribute {
    private AssertionConditionType myConditionType;
    public AssertionConditionType ConditionType { get; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    public AssertionConditionType get_ConditionType();
}
internal enum JetBrains.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.AssertionMethodAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <BaseTypes>k__BackingField;
    public Type[] BaseTypes { get; private set; }
    public BaseTypeRequiredAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type[] get_BaseTypes();
    [CompilerGeneratedAttribute]
private void set_BaseTypes(Type[] value);
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FDT>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string FDT { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string fdt);
    public ContractAnnotationAttribute(string fdt, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_FDT();
    [CompilerGeneratedAttribute]
private void set_FDT(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.LinqTunnelAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public bool Required { get; private set; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; private set; }
    public NotifyPropertyChangedInvocatorAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.PathReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    public string BasePath { get; private set; }
    public PathReferenceAttribute(string basePath);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
}
[MeansImplicitUseAttribute]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    public PublicAPIAttribute(string comment);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.PureAttribute : Attribute {
}
[AttributeUsageAttribute("96")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.TerminatesProgramAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    [UsedImplicitlyAttribute]
public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [UsedImplicitlyAttribute]
public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    [UsedImplicitlyAttribute]
public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
public class Remotion.Linq.EagerFetching.FetchFilteringQueryModelVisitor : QueryModelVisitorBase {
    private List`1<FetchQueryModelBuilder> _fetchQueryModelBuilders;
    protected ReadOnlyCollection`1<FetchQueryModelBuilder> FetchQueryModelBuilders { get; }
    public static FetchQueryModelBuilder[] RemoveFetchRequestsFromQueryModel(QueryModel queryModel);
    protected ReadOnlyCollection`1<FetchQueryModelBuilder> get_FetchQueryModelBuilders();
    public virtual void VisitResultOperator(ResultOperatorBase resultOperator, QueryModel queryModel, int index);
}
public class Remotion.Linq.EagerFetching.FetchManyRequest : FetchRequestBase {
    private Type _relatedObjectType;
    public FetchManyRequest(MemberInfo relationMember);
    protected virtual void ModifyFetchQueryModel(QueryModel fetchQueryModel);
    public virtual ResultOperatorBase Clone(CloneContext cloneContext);
    public virtual void TransformExpressions(Func`2<Expression, Expression> transformation);
}
public class Remotion.Linq.EagerFetching.FetchOneRequest : FetchRequestBase {
    public FetchOneRequest(MemberInfo relationMember);
    protected virtual void ModifyFetchQueryModel(QueryModel fetchQueryModel);
    public virtual ResultOperatorBase Clone(CloneContext cloneContext);
    public virtual void TransformExpressions(Func`2<Expression, Expression> transformation);
}
public class Remotion.Linq.EagerFetching.FetchQueryModelBuilder : object {
    private QueryModel _cachedFetchModel;
    [CompilerGeneratedAttribute]
private FetchRequestBase <FetchRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryModel <SourceItemQueryModel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultOperatorPosition>k__BackingField;
    public FetchRequestBase FetchRequest { get; private set; }
    public QueryModel SourceItemQueryModel { get; private set; }
    public int ResultOperatorPosition { get; private set; }
    public FetchQueryModelBuilder(FetchRequestBase fetchRequest, QueryModel queryModel, int resultOperatorPosition);
    [CompilerGeneratedAttribute]
public FetchRequestBase get_FetchRequest();
    [CompilerGeneratedAttribute]
private void set_FetchRequest(FetchRequestBase value);
    [CompilerGeneratedAttribute]
public QueryModel get_SourceItemQueryModel();
    [CompilerGeneratedAttribute]
private void set_SourceItemQueryModel(QueryModel value);
    [CompilerGeneratedAttribute]
public int get_ResultOperatorPosition();
    [CompilerGeneratedAttribute]
private void set_ResultOperatorPosition(int value);
    public QueryModel GetOrCreateFetchQueryModel();
    public FetchQueryModelBuilder[] CreateInnerBuilders();
    [CompilerGeneratedAttribute]
private FetchQueryModelBuilder <CreateInnerBuilders>b__15_0(FetchRequestBase request);
}
public abstract class Remotion.Linq.EagerFetching.FetchRequestBase : SequenceTypePreservingResultOperatorBase {
    private FetchRequestCollection _innerFetchRequestCollection;
    private MemberInfo _relationMember;
    public MemberInfo RelationMember { get; public set; }
    public IEnumerable`1<FetchRequestBase> InnerFetchRequests { get; }
    protected FetchRequestBase(MemberInfo relationMember);
    public MemberInfo get_RelationMember();
    public void set_RelationMember(MemberInfo value);
    public IEnumerable`1<FetchRequestBase> get_InnerFetchRequests();
    public virtual QueryModel CreateFetchQueryModel(QueryModel sourceItemQueryModel);
    protected Expression GetFetchedMemberExpression(Expression source);
    protected abstract virtual void ModifyFetchQueryModel(QueryModel fetchQueryModel);
    public FetchRequestBase GetOrAddInnerFetchRequest(FetchRequestBase fetchRequest);
    public virtual StreamedSequence ExecuteInMemory(StreamedSequence input);
    public virtual string ToString();
}
public class Remotion.Linq.EagerFetching.FetchRequestCollection : object {
    private Dictionary`2<MemberInfo, FetchRequestBase> _fetchRequests;
    public IEnumerable`1<FetchRequestBase> FetchRequests { get; }
    public IEnumerable`1<FetchRequestBase> get_FetchRequests();
    public FetchRequestBase GetOrAddFetchRequest(FetchRequestBase fetchRequest);
}
public abstract class Remotion.Linq.EagerFetching.Parsing.FetchExpressionNodeBase : ResultOperatorExpressionNodeBase {
    [CompilerGeneratedAttribute]
private MemberInfo <RelationMember>k__BackingField;
    public MemberInfo RelationMember { get; private set; }
    protected FetchExpressionNodeBase(MethodCallExpressionParseInfo parseInfo, LambdaExpression relatedObjectSelector);
    private Expression StripConverts(Expression expression);
    [CompilerGeneratedAttribute]
public MemberInfo get_RelationMember();
    [CompilerGeneratedAttribute]
private void set_RelationMember(MemberInfo value);
    public virtual Expression Resolve(ParameterExpression inputParameter, Expression expressionToBeResolved, ClauseGenerationContext clauseGenerationContext);
}
public class Remotion.Linq.EagerFetching.Parsing.FetchManyExpressionNode : OuterFetchExpressionNodeBase {
    public FetchManyExpressionNode(MethodCallExpressionParseInfo parseInfo, LambdaExpression relatedObjectSelector);
    protected virtual FetchRequestBase CreateFetchRequest();
}
public class Remotion.Linq.EagerFetching.Parsing.FetchOneExpressionNode : OuterFetchExpressionNodeBase {
    public FetchOneExpressionNode(MethodCallExpressionParseInfo parseInfo, LambdaExpression relatedObjectSelector);
    protected virtual FetchRequestBase CreateFetchRequest();
}
public abstract class Remotion.Linq.EagerFetching.Parsing.OuterFetchExpressionNodeBase : FetchExpressionNodeBase {
    protected OuterFetchExpressionNodeBase(MethodCallExpressionParseInfo parseInfo, LambdaExpression relatedObjectSelector);
    protected abstract virtual FetchRequestBase CreateFetchRequest();
    protected virtual void ApplyNodeSpecificSemantics(QueryModel queryModel, ClauseGenerationContext clauseGenerationContext);
    protected virtual ResultOperatorBase CreateResultOperator(ClauseGenerationContext clauseGenerationContext);
    [CompilerGeneratedAttribute]
private bool <ApplyNodeSpecificSemantics>b__2_0(FetchRequestBase r);
}
public abstract class Remotion.Linq.EagerFetching.Parsing.ThenFetchExpressionNodeBase : FetchExpressionNodeBase {
    protected ThenFetchExpressionNodeBase(MethodCallExpressionParseInfo parseInfo, LambdaExpression relatedObjectSelector);
    protected abstract virtual FetchRequestBase CreateFetchRequest();
    protected virtual ResultOperatorBase CreateResultOperator(ClauseGenerationContext clauseGenerationContext);
    protected virtual void ApplyNodeSpecificSemantics(QueryModel queryModel, ClauseGenerationContext clauseGenerationContext);
}
public class Remotion.Linq.EagerFetching.Parsing.ThenFetchManyExpressionNode : ThenFetchExpressionNodeBase {
    public ThenFetchManyExpressionNode(MethodCallExpressionParseInfo parseInfo, LambdaExpression relatedObjectSelector);
    protected virtual FetchRequestBase CreateFetchRequest();
}
public class Remotion.Linq.EagerFetching.Parsing.ThenFetchOneExpressionNode : ThenFetchExpressionNodeBase {
    public ThenFetchOneExpressionNode(MethodCallExpressionParseInfo parseInfo, LambdaExpression relatedObjectSelector);
    protected virtual FetchRequestBase CreateFetchRequest();
}
internal static class Remotion.Linq.EagerFetching.Utilities.ReflectionUtility : object {
    public static Type GetMemberReturnType(MemberInfo member);
    public static Type GetItemTypeOfClosedGenericIEnumerable(Type enumerableType, string argumentName);
}
internal static class Remotion.Linq.EagerFetching.Utilities.StringUtility : object {
    public static string Join(string separator, IEnumerable`1<T> values);
}
internal static class Remotion.Utilities.ArgumentUtility : object {
    [AssertionMethodAttribute]
public static T CheckNotNull(string argumentName, T actualValue);
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
public static void DebugCheckNotNull(string argumentName, T actualValue);
    [AssertionMethodAttribute]
public static string CheckNotNullOrEmpty(string argumentName, string actualValue);
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
public static void DebugCheckNotNullOrEmpty(string argumentName, string actualValue);
    [AssertionMethodAttribute]
public static T CheckNotNullOrEmpty(string argumentName, T enumerable);
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
public static void DebugCheckNotNullOrEmpty(string argumentName, T enumerable);
    [AssertionMethodAttribute]
public static T CheckNotNullOrItemsNull(string argumentName, T enumerable);
    [AssertionMethodAttribute]
public static T CheckNotNullOrEmptyOrItemsNull(string argumentName, T enumerable);
    [AssertionMethodAttribute]
public static string CheckNotEmpty(string argumentName, string actualValue);
    [AssertionMethodAttribute]
public static T CheckNotEmpty(string argumentName, T enumerable);
    [AssertionMethodAttribute]
public static Guid CheckNotEmpty(string argumentName, Guid actualValue);
    public static object CheckNotNullAndType(string argumentName, object actualValue, Type expectedType);
    public static TExpected CheckNotNullAndType(string argumentName, object actualValue);
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
public static void DebugCheckNotNullAndType(string argumentName, object actualValue, Type expectedType);
    public static object CheckType(string argumentName, object actualValue, Type expectedType);
    public static TExpected CheckType(string argumentName, object actualValue);
    public static Type CheckNotNullAndTypeIsAssignableFrom(string argumentName, Type actualType, Type expectedType);
    public static Type CheckTypeIsAssignableFrom(string argumentName, Type actualType, Type expectedType);
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
public static void DebugCheckTypeIsAssignableFrom(string argumentName, Type actualType, Type expectedType);
    public static T CheckItemsType(string argumentName, T collection, Type itemType);
    public static T CheckItemsNotNullAndType(string argumentName, T collection, Type itemType);
    public static ArgumentException CreateArgumentEmptyException(string argumentName);
    public static ArgumentException CreateArgumentTypeException(string argumentName, Type actualType, Type expectedType);
    public static ArgumentException CreateArgumentItemTypeException(string argumentName, int index, Type expectedType, Type actualType);
    public static ArgumentNullException CreateArgumentItemNullException(string argumentName, int index);
}
internal static class Remotion.Utilities.Assertion : object {
    private static string c_msgIsTrue;
    private static string c_msgIsFalse;
    private static string c_msgIsNull;
    private static string c_msgIsNotNull;
    private static Object[] s_emptyArguments;
    private static Assertion();
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
public static void DebugAssert(bool assertion, string message);
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
[StringFormatMethodAttribute("message")]
public static void DebugAssert(bool assertion, string message, Object[] arguments);
    [ConditionalAttribute("DEBUG")]
[AssertionMethodAttribute]
public static void DebugAssert(bool assertion);
    [ConditionalAttribute("TRACE")]
[AssertionMethodAttribute]
public static void TraceAssert(bool assertion, string message);
    [ConditionalAttribute("TRACE")]
[AssertionMethodAttribute]
[StringFormatMethodAttribute("message")]
public static void TraceAssert(bool assertion, string message, Object[] arguments);
    [ConditionalAttribute("TRACE")]
[AssertionMethodAttribute]
public static void TraceAssert(bool assertion);
    [AssertionMethodAttribute]
public static void IsTrue(bool assertion, string message);
    [AssertionMethodAttribute]
[StringFormatMethodAttribute("message")]
public static void IsTrue(bool assertion, string message, Object[] arguments);
    [AssertionMethodAttribute]
public static void IsTrue(bool assertion);
    [AssertionMethodAttribute]
public static void IsFalse(bool expression, string message);
    [AssertionMethodAttribute]
public static void IsFalse(bool expression);
    [AssertionMethodAttribute]
[StringFormatMethodAttribute("message")]
public static void IsFalse(bool expression, string message, Object[] arguments);
    [AssertionMethodAttribute]
public static T IsNotNull(T obj, string message);
    [AssertionMethodAttribute]
public static T IsNotNull(T obj);
    [AssertionMethodAttribute]
[StringFormatMethodAttribute("message")]
public static T IsNotNull(T obj, string message, Object[] arguments);
    [AssertionMethodAttribute]
public static void IsNull(object obj, string message);
    [AssertionMethodAttribute]
public static void IsNull(object obj);
    [AssertionMethodAttribute]
[StringFormatMethodAttribute("message")]
public static void IsNull(object obj, string message, Object[] arguments);
}
internal static class Remotion.Utilities.NullableTypeUtility : object {
    public static bool IsNullableType(Type type);
    internal static bool IsNullableType_NoArgumentCheck(Type expectedType);
    public static Type GetNullableType(Type type);
    public static Type GetBasicType(Type type);
}
