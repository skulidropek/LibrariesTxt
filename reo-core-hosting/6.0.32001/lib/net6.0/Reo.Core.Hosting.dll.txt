[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.Attributes.HandleUiExceptionAttribute : ExceptionFilterAttribute {
    public virtual void OnException(ExceptionContext context);
}
public class Reo.Core.Hosting.Attributes.ValidationExceptionView : object {
    [CompilerGeneratedAttribute]
private ValidationFailure[] <Errors>k__BackingField;
    public ValidationFailure[] Errors { get; public set; }
    [CompilerGeneratedAttribute]
public ValidationFailure[] get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(ValidationFailure[] value);
}
public enum Reo.Core.Hosting.Constants.CalculationProviders : Enum {
    public int value__;
    public static CalculationProviders None;
    public static CalculationProviders Yandex;
    public static CalculationProviders OpenStreetMap;
}
public static class Reo.Core.Hosting.Constants.DateFormats : object {
    public static string Default;
}
public static class Reo.Core.Hosting.Constants.HttpContextSettings : object {
    public static string UiTimeZoneOffset;
    public static int RetryTimeout;
    public static int MaxRetries;
}
public static class Reo.Core.Hosting.Constants.LogKeys : object {
    public static string LocalDate;
    public static string TransmitData;
}
public enum Reo.Core.Hosting.Constants.SerializerType : Enum {
    public int value__;
    public static SerializerType NewtonsoftJson;
    public static SerializerType SystemTextJson;
}
[ExtensionAttribute]
public static class Reo.Core.Hosting.DependencyInjectionExtensions.ServicesExtensions : object {
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddAllTypes(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddAllTypes(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddAllTypes(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddAllTypes(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddAllTypes(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddAllTypes(IServiceCollection services, IEnumerable`1<Assembly> assemblies, ServiceLifetime lifetime);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddAllGenericTypes(IServiceCollection services, Type typeService, IEnumerable`1<Assembly> assemblies, ServiceLifetime lifetime);
    private static IEnumerable`1<Type> GetAllNonAbstractTypesImplementingOpenGenericType(Type openGenericType, Assembly assembly);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddTransmitDataProviders(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddReoTime(IServiceCollection services);
}
[ExtensionAttribute]
[UsedImplicitlyAttribute]
public static class Reo.Core.Hosting.DependencyInjectionExtensions.WebHostExtensions : object {
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Необходимо использовать методы ConfigureReoWebApiConventions. !ВАЖНО! При использовании методов ConfigureReoWebApiConventions регистрировать и вызывать валидаторы вы должны будете самостоятельно")]
public static IServiceCollection AddReoControllers(IServiceCollection services, Type[] validators);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Необходимо использовать методы ConfigureReoWebApiConventions. !ВАЖНО! При использовании методов ConfigureReoWebApiConventions регистрировать и вызывать валидаторы вы должны будете самостоятельно")]
public static IServiceCollection AddReoControllers(IServiceCollection services, Action`1<MvcOptions> applyMvcOptions, Type[] validators);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Необходимо использовать методы ConfigureReoWebApiConventions. !ВАЖНО! При использовании методов ConfigureReoWebApiConventions регистрировать и вызывать валидаторы вы должны будете самостоятельно")]
public static IServiceCollection AddReoControllers(IServiceCollection services, Action`1<MvcOptions> applyMvcOptions, Action`1<MvcNewtonsoftJsonOptions> applyNewtonsoftJsonOptions, Type[] validators);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Необходимо использовать методы ConfigureReoWebApiConventions. !ВАЖНО! При использовании методов ConfigureReoWebApiConventions регистрировать и вызывать валидаторы вы должны будете самостоятельно")]
public static IServiceCollection AddReoControllersWithSystemTextJson(IServiceCollection services, Type[] validators);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Необходимо использовать методы ConfigureReoWebApiConventions. !ВАЖНО! При использовании методов ConfigureReoWebApiConventions регистрировать и вызывать валидаторы вы должны будете самостоятельно")]
public static IServiceCollection AddReoControllersWithSystemTextJson(IServiceCollection services, Action`1<MvcOptions> applyMvcOptions, Type[] validators);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Необходимо использовать методы ConfigureReoWebApiConventions. !ВАЖНО! При использовании методов ConfigureReoWebApiConventions регистрировать и вызывать валидаторы вы должны будете самостоятельно")]
public static IServiceCollection AddReoControllersWithSystemTextJson(IServiceCollection services, Action`1<MvcOptions> applyMvcOptions, Action`1<JsonOptions> applyJsonOptions, Type[] validators);
    [ExtensionAttribute]
public static IServiceCollection ConfigureReoWebApiConventions(IServiceCollection services, SerializerType serializerType);
    [ExtensionAttribute]
public static IServiceCollection ConfigureReoWebApiConventions(IServiceCollection services, SerializerType serializerType, Action`1<MvcOptions> applyMvcOptions);
    [ExtensionAttribute]
public static IServiceCollection ConfigureReoWebApiConventions(IServiceCollection services, SerializerType serializerType, Action`1<MvcOptions> applyMvcOptions, Action`1<ReoJsonSerializerOptions> applyJsonOptions);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.Exceptions.AccessDeniedException : Exception {
    public AccessDeniedException(string message);
    public AccessDeniedException(string message, Exception innerException);
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.Exceptions.ConflictedDataException : Exception {
    public ConflictedDataException(string message);
    public ConflictedDataException(string message, Exception innerException);
}
[ExtensionAttribute]
[UsedImplicitlyAttribute]
public static class Reo.Core.Hosting.Extensions.ExceptionExtensions : object {
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static ValidationException CreateValidationException(string message, string propertyName, Exception innerException);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static ValidationException CreateValidationException(T exception, string propertyName);
}
[ExtensionAttribute]
public static class Reo.Core.Hosting.Extensions.GisProviderServiceExtensions : object {
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddReoGisProvider(IServiceCollection services);
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.Formatters.JsonpOutputFormatter : StringOutputFormatter {
    public virtual bool CanWriteResult(OutputFormatterCanWriteContext context);
    public virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding encoding);
}
public class Reo.Core.Hosting.Infrastructure.UntrustedCertClientFactory : DefaultHttpClientFactory {
    public virtual HttpMessageHandler CreateMessageHandler();
}
public class Reo.Core.Hosting.KebabParameterTransformer : object {
    public sealed virtual string TransformOutbound(object value);
}
[IsReadOnlyAttribute]
public class Reo.Core.Hosting.Models.GisCode : ValueType {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public static GisCode TerritorialScheme;
    public static GisCode ExtendedProducerResponsibility;
    public static GisCode MinistryOfNature;
    public static GisCode MobileApplications;
    public static GisCode FederalScheme;
    public static GisCode ApplicantsElectronicCabinet;
    public static GisCode EcoMonitoring;
    public static GisCode InvestorPersonalCabinet;
    public static IReadOnlyList`1<GisCode> AvailableCodes;
    public string Code { get; }
    private GisCode(string code);
    private static GisCode();
    [CompilerGeneratedAttribute]
public string get_Code();
    public static GisCode Create(string code);
    public static string op_Implicit(GisCode gisCode);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Reo.Core.Hosting.Models.ReoJsonSerializerOptions : object {
    private MvcNewtonsoftJsonOptions _newtonsoftJsonSerializerOptions;
    private JsonOptions _systemTextJsonSerializerOptions;
    private SerializerType _serializerType;
    public MvcNewtonsoftJsonOptions NewtonsoftJsonSerializerOptions { get; }
    public JsonOptions SystemTextJsonSerializerOptions { get; }
    [NullableContextAttribute("0")]
public ReoJsonSerializerOptions(SerializerType serializerType, MvcNewtonsoftJsonOptions options);
    [NullableContextAttribute("0")]
public ReoJsonSerializerOptions(SerializerType serializerType, JsonOptions options);
    public MvcNewtonsoftJsonOptions get_NewtonsoftJsonSerializerOptions();
    public JsonOptions get_SystemTextJsonSerializerOptions();
}
[ObsoleteAttribute("Используйте кортежи вместо данного класса")]
public class Reo.Core.Hosting.Models.UnitedItem`2 : object {
    [CompilerGeneratedAttribute]
private TFirst <First>k__BackingField;
    [CompilerGeneratedAttribute]
private TSecond <Second>k__BackingField;
    public TFirst First { get; public set; }
    public TSecond Second { get; public set; }
    [CompilerGeneratedAttribute]
public TFirst get_First();
    [CompilerGeneratedAttribute]
public void set_First(TFirst value);
    [CompilerGeneratedAttribute]
public TSecond get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(TSecond value);
}
public class Reo.Core.Hosting.Options.CalcRequestOptions : object {
    [CompilerGeneratedAttribute]
private string <RootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private CalculationStartTypeProvider[] <StartTypeProviders>k__BackingField;
    public string RootFolder { get; public set; }
    public CalculationStartTypeProvider[] StartTypeProviders { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RootFolder();
    [CompilerGeneratedAttribute]
public void set_RootFolder(string value);
    [CompilerGeneratedAttribute]
public CalculationStartTypeProvider[] get_StartTypeProviders();
    [CompilerGeneratedAttribute]
public void set_StartTypeProviders(CalculationStartTypeProvider[] value);
}
public class Reo.Core.Hosting.Options.CalculationStartTypeProvider : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CalculationProviders <Provider>k__BackingField;
    public string Type { get; public set; }
    public CalculationProviders Provider { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public CalculationProviders get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(CalculationProviders value);
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.ReoTime.AutoMapper.ReoDateTimeNullableTypeConverter : object {
    private IReoTimeService _timeService;
    public ReoDateTimeNullableTypeConverter(IReoTimeService timeService);
    public sealed virtual string Convert(Nullable`1<DateTime> source, string destination, ResolutionContext context);
}
public class Reo.Core.Hosting.ReoTime.AutoMapper.ReoDateTimeProfile : Profile {
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.ReoTime.AutoMapper.ReoDateTimeTypeConverter : object {
    private IReoTimeService _timeService;
    public ReoDateTimeTypeConverter(IReoTimeService timeService);
    public sealed virtual string Convert(DateTime source, string destination, ResolutionContext context);
}
public interface Reo.Core.Hosting.ReoTime.IReoTimeService {
    public DateTime Now { get; }
    public abstract virtual string AddLocalUtcOffsetToUtcDate(string utcDate, string format);
    public abstract virtual string AddLocalUtcOffsetToUtcDate(Nullable`1<DateTime> utcDate, string format);
    public abstract virtual string AddLocalUtcOffsetToUtcDate(DateTime utcDate, string format);
    public abstract virtual DateTime get_Now();
    public abstract virtual TimeSpan GetLocalTimeZoneOffset();
    public abstract virtual DateTimeOffset AdjustUtcToLocalTimeZone(DateTime dateTime);
}
public interface Reo.Core.Hosting.ReoTime.IReoUtcTimeService {
    public DateTime CurrentDateTime { get; }
    public DateOnly CurrentDate { get; }
    public TimeOnly CurrentTime { get; }
    public abstract virtual DateTime get_CurrentDateTime();
    public abstract virtual DateOnly get_CurrentDate();
    public abstract virtual TimeOnly get_CurrentTime();
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.ReoTime.ReoTimeService : object {
    private IHttpContextAccessor _httpContextAccessor;
    private ILogger _logger;
    public DateTime Now { get; }
    public ReoTimeService(IHttpContextAccessor httpContextAccessor, ILogger logger);
    public virtual string AddLocalUtcOffsetToUtcDate(string utcDate, string format);
    public sealed virtual string AddLocalUtcOffsetToUtcDate(Nullable`1<DateTime> utcDate, string format);
    public sealed virtual string AddLocalUtcOffsetToUtcDate(DateTime utcDate, string format);
    public sealed virtual DateTime get_Now();
    public sealed virtual TimeSpan GetLocalTimeZoneOffset();
    public sealed virtual DateTimeOffset AdjustUtcToLocalTimeZone(DateTime dateTime);
}
public class Reo.Core.Hosting.ReoTime.ReoUtcTimeService : object {
    public DateTime CurrentDateTime { get; }
    public DateOnly CurrentDate { get; }
    public TimeOnly CurrentTime { get; }
    public sealed virtual DateTime get_CurrentDateTime();
    public sealed virtual DateOnly get_CurrentDate();
    public sealed virtual TimeOnly get_CurrentTime();
}
[UsedImplicitlyAttribute]
public abstract class Reo.Core.Hosting.Services.DistributedPeriodicBackgroundRoutine : BackgroundService {
    private IDistributedLockFactory _distributedLockFactory;
    private ILogger`1<DistributedPeriodicBackgroundRoutine> _logger;
    private TimeSpan _runPeriod;
    protected string LockName { get; }
    protected string TaskDisplayName { get; }
    protected TimeSpan TryExecuteCycleTimeout { get; }
    protected TimeSpan LockPeriod { get; }
    protected DistributedPeriodicBackgroundRoutine(IDistributedLockFactory distributedLockFactory, ILogger`1<DistributedPeriodicBackgroundRoutine> logger, TimeSpan runPeriod);
    protected abstract virtual ValueTask ExecutePeriodicWorkAsync(CancellationToken cancellationToken);
    protected abstract virtual string get_LockName();
    protected abstract virtual string get_TaskDisplayName();
    protected virtual TimeSpan get_TryExecuteCycleTimeout();
    protected virtual TimeSpan get_LockPeriod();
    [AsyncStateMachineAttribute("Reo.Core.Hosting.Services.DistributedPeriodicBackgroundRoutine/<ExecuteAsync>d__13")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("Reo.Core.Hosting.Services.DistributedPeriodicBackgroundRoutine/<TryRunMainCycleAsync>d__14")]
private ValueTask`1<bool> TryRunMainCycleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Reo.Core.Hosting.Services.DistributedPeriodicBackgroundRoutine/<WorkCycleAsync>d__15")]
private Task WorkCycleAsync(CancellationToken cancellationToken);
}
public class Reo.Core.Hosting.Services.FileSystemDmRequestDataProvider : FileSystemRequestDataProviderBase`1<DmCalculationRequest> {
    public FileSystemDmRequestDataProvider(IFileSystem fileSystem, IValidator`1<DmCalculationRequest> validator, IOptions`1<CalcRequestOptions> options, ILogger logger);
    protected virtual string Folder();
}
[UsedImplicitlyAttribute]
public abstract class Reo.Core.Hosting.Services.FileSystemNYearsDataProviderBase`1 : object {
    private IValidator`1<TRequest> _validator;
    private IFileSystem _fileSystem;
    private CalcRequestOptions _calcRequestOptions;
    private ILogger _logger;
    protected FileSystemNYearsDataProviderBase`1(IFileSystem fileSystem, IValidator`1<TRequest> validator, IOptions`1<CalcRequestOptions> options, ILogger logger);
    protected abstract virtual string Folder();
    [AsyncStateMachineAttribute("Reo.Core.Hosting.Services.FileSystemNYearsDataProviderBase`1/<SaveAsync>d__6")]
public sealed virtual Task`1<string> SaveAsync(TRequest data, CancellationToken token);
    private static string GetSubFolder(TRequest data);
    [AsyncStateMachineAttribute("Reo.Core.Hosting.Services.FileSystemNYearsDataProviderBase`1/<GetAsync>d__8")]
public sealed virtual Task`1<TRequest> GetAsync(string key, CancellationToken token);
    private void ValidateKey(string key);
}
public abstract class Reo.Core.Hosting.Services.FileSystemRequestDataProviderBase`1 : object {
    private IValidator`1<TRequest> _validator;
    private IFileSystem _fileSystem;
    private CalcRequestOptions _calcRequestOptions;
    private ILogger _logger;
    protected FileSystemRequestDataProviderBase`1(IFileSystem fileSystem, IValidator`1<TRequest> validator, IOptions`1<CalcRequestOptions> options, ILogger logger);
    protected abstract virtual string Folder();
    [AsyncStateMachineAttribute("Reo.Core.Hosting.Services.FileSystemRequestDataProviderBase`1/<SaveAsync>d__6")]
public sealed virtual Task`1<string> SaveAsync(TRequest data, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.Hosting.Services.FileSystemRequestDataProviderBase`1/<GetAsync>d__7")]
public sealed virtual Task`1<TRequest> GetAsync(string key, CancellationToken token);
    private void ValidateKey(string key);
}
public class Reo.Core.Hosting.Services.FileSystemRouteRequestDataProvider : FileSystemRequestDataProviderBase`1<RouteCalculationRequest> {
    public FileSystemRouteRequestDataProvider(IFileSystem fileSystem, IValidator`1<RouteCalculationRequest> validator, IOptions`1<CalcRequestOptions> options, ILogger logger);
    protected virtual string Folder();
}
public class Reo.Core.Hosting.Services.GisProviderService : object {
    public static string GisEnvironmentKey;
    private IConfiguration _configuration;
    public GisProviderService(IConfiguration configuration);
    public sealed virtual GisCode GetCode();
}
public interface Reo.Core.Hosting.Services.Interfaces.IFilteringService`3 {
    public abstract virtual Task`1<TResult> ApplyFilterAsync(TFilter filter, CancellationToken token);
}
public interface Reo.Core.Hosting.Services.Interfaces.IGisProviderService {
    public abstract virtual GisCode GetCode();
}
public interface Reo.Core.Hosting.Services.Interfaces.ITransmitDataProvider`2 {
    public abstract virtual Task`1<TKey> SaveAsync(TData data, CancellationToken token);
    public abstract virtual Task`1<TData> GetAsync(TKey key, CancellationToken token);
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.Validation.CalcRequestOptionsValidator : CustomAbstractValidator`1<CalcRequestOptions> {
    protected virtual void DefineValidation();
}
public class Reo.Core.Hosting.Validation.CalculationStartTypeProviderValidator : CustomAbstractValidator`1<CalculationStartTypeProvider> {
    protected virtual void DefineValidation();
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.Validation.DmCalculationRequestValidator : CustomAbstractValidator`1<DmCalculationRequest> {
    protected virtual void DefineValidation();
}
[UsedImplicitlyAttribute]
public class Reo.Core.Hosting.Validation.RouteCalculationRequestValidator : CustomAbstractValidator`1<RouteCalculationRequest> {
    protected virtual void DefineValidation();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
