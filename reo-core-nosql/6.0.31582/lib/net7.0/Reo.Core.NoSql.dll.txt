[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Reo.Core.NoSql.Attributes.BsonCollectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CollectionName>k__BackingField;
    public string CollectionName { get; }
    public BsonCollectionAttribute(string collectionName);
    [CompilerGeneratedAttribute]
public string get_CollectionName();
}
public class Reo.Core.NoSql.DefaultMongoClientManager : object {
    private MongoDbOptions _config;
    private IMongoClient _client;
    public DefaultMongoClientManager(MongoDbOptions config);
    public sealed virtual IMongoClient GetClient();
    [CompilerGeneratedAttribute]
internal static void <GetClient>g__SocketConfigurator|3_0(Socket s);
}
public class Reo.Core.NoSql.HealthChecks.MongoClusterHealthCheck : AbstractClusterHealthCheck {
    public MongoClusterHealthCheck(string connectionString);
    private static IEnumerable`1<IHealthCheck> CreateHealthChecks(string connectionString);
}
public interface Reo.Core.NoSql.IContextAsyncAccessService {
    public abstract virtual Task`1<T> FirstOrDefaultAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<TProjection> FirstOrDefaultAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<List`1<T>> ToListAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<T[]> ToArrayAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<IReadOnlyCollection`1<T>> ToReadOnlyAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<List`1<TProjection>> ToListAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<IReadOnlyCollection`1<TProjection>> ToReadOnlyAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<TProjection[]> ToArrayAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
}
public interface Reo.Core.NoSql.IMongoClientManager {
    public abstract virtual IMongoClient GetClient();
}
public interface Reo.Core.NoSql.IMongoCollectionRegistrar {
    [UsedImplicitlyAttribute]
public abstract virtual IMongoCollectionRegistrar RegisterCollection();
}
public interface Reo.Core.NoSql.INoSql {
    public abstract virtual T GetById(string id);
    [CanBeNullAttribute]
public abstract virtual Task`1<T> GetByIdAsync(string id, CancellationToken token);
    public abstract virtual INoSqlQueryable`1<T> Query(bool actual);
    public abstract virtual Task`1<IAsyncCursor`1<T>> QueryAsync(Expression`1<Func`2<T, bool>> filter, bool actual, CancellationToken token);
    public abstract virtual bool Any();
    public abstract virtual Task`1<bool> AnyAsync(CancellationToken token);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> filter, CancellationToken token);
    public abstract virtual T InsertOrUpdate(Expression`1<Func`2<T, bool>> filter, T entity);
    public abstract virtual Task`1<T> InsertOrUpdateAsync(Expression`1<Func`2<T, bool>> filter, T entity, CancellationToken token);
    public abstract virtual T Insert(T entity);
    public abstract virtual Task`1<T> InsertAsync(T entity, CancellationToken token);
    public abstract virtual Task`1<long> BulkInsertAsync(IEnumerable`1<T> list, CancellationToken token);
    public abstract virtual Task`1<long> BulkUpdateAsync(IEnumerable`1<T> list, CancellationToken token);
    public abstract virtual Task`1<int> BulkHardDeleteAsync(IEnumerable`1<T> entities, CancellationToken token);
    public abstract virtual void Delete(string id, bool archive);
    public abstract virtual Task DeleteAsync(string id, bool archive, CancellationToken token);
    public abstract virtual Task DeleteAsync(T entity, bool archive, CancellationToken token);
    public abstract virtual long DeleteAll(Expression`1<Func`2<T, bool>> predicate, bool archive);
    public abstract virtual Task`1<long> DeleteAllAsync(Expression`1<Func`2<T, bool>> predicate, bool archive, CancellationToken token);
    public abstract virtual Task DeleteCollectionAsync(CancellationToken token);
    public abstract virtual void DeleteCollection();
    public abstract virtual Task`1<long> CountAsync(Expression`1<Func`2<T, bool>> filter, CancellationToken token);
    public abstract virtual IMongoCollection`1<T> GetCollection();
    public abstract virtual Task`1<List`1<TResult>> GetProjectedListAsync(Expression`1<Func`2<T, bool>> filter, CancellationToken token);
}
public interface Reo.Core.NoSql.INoSqlFactory {
    public abstract virtual INoSql Create(string dataBase);
}
public interface Reo.Core.NoSql.INoSqlQueryable`1 {
    public bool IsMongoQueryable { get; }
    public abstract virtual IMongoQueryable`1<T> AsMongoQueryable();
    public abstract virtual bool get_IsMongoQueryable();
    public abstract virtual QueryableExecutionModel GetExecutionModel();
    public abstract virtual IAsyncCursor`1<T> ToCursor(CancellationToken token);
    public abstract virtual Task`1<IAsyncCursor`1<T>> ToCursorAsync(CancellationToken token);
}
public interface Reo.Core.NoSql.INoSqlSeedService {
    public abstract virtual Task`1<int> SeedAsync(CancellationToken cancellationToken);
    public abstract virtual string EntityName();
}
public class Reo.Core.NoSql.Models.MongoDbConnectionParameters : object {
    [CompilerGeneratedAttribute]
private List`1<MongoDbEndPoint> <EndPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    public List`1<MongoDbEndPoint> EndPoints { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string DatabaseName { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<MongoDbEndPoint> get_EndPoints();
    [CompilerGeneratedAttribute]
public void set_EndPoints(List`1<MongoDbEndPoint> value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
}
public class Reo.Core.NoSql.Models.MongoDbEndPoint : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Address { get; public set; }
    public int Port { get; public set; }
    public bool IsValid { get; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    public bool get_IsValid();
}
[UsedImplicitlyAttribute]
public class Reo.Core.NoSql.MongoContextAsyncWrapper : object {
    private IMapper _mapper;
    private INoSql _noSql;
    public MongoContextAsyncWrapper(IMapper mapper, INoSql noSql);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<FirstOrDefaultAsync>d__3`1")]
public sealed virtual Task`1<T> FirstOrDefaultAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<FirstOrDefaultAsync>d__4`2")]
public sealed virtual Task`1<TProjection> FirstOrDefaultAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<ToListAsync>d__5`1")]
public sealed virtual Task`1<List`1<T>> ToListAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<ToArrayAsync>d__6`1")]
public sealed virtual Task`1<T[]> ToArrayAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<ToReadOnlyAsync>d__7`1")]
public sealed virtual Task`1<IReadOnlyCollection`1<T>> ToReadOnlyAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<ToListAsync>d__8`2")]
public sealed virtual Task`1<List`1<TProjection>> ToListAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<ToReadOnlyAsync>d__9`2")]
public sealed virtual Task`1<IReadOnlyCollection`1<TProjection>> ToReadOnlyAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<ToArrayAsync>d__10`2")]
public sealed virtual Task`1<TProjection[]> ToArrayAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<AnyAsync>d__11`1")]
public sealed virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<CountAsync>d__12`1")]
public sealed virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    private static MongoCursorNotFoundException GetMongoCursorException(Expression`1<Func`2<T, bool>> predicate);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoContextAsyncWrapper/<GetNoSqlAsyncCursorAsync>d__14`1")]
private Task`1<IAsyncCursor`1<T>> GetNoSqlAsyncCursorAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
}
[ExtensionAttribute]
public static class Reo.Core.NoSql.MongoDatabaseExtensions : object {
    private static string EntitySuffix;
    public static string GetCollectionName(bool trimPostfix);
    [ExtensionAttribute]
public static IMongoCollection`1<TEntity> GetCollection(IMongoDatabase db, bool trimPostfix);
}
public class Reo.Core.NoSql.MongoDbConnectionStringValidator : CustomAbstractValidator`1<string> {
    private MongoDbConnectionStringParser _connectionStringParser;
    protected virtual void DefineValidation();
    public virtual ValidationResult Validate(ValidationContext`1<string> context);
    public virtual Task`1<ValidationResult> ValidateAsync(ValidationContext`1<string> context, CancellationToken token);
    [CompilerGeneratedAttribute]
private void <DefineValidation>b__2_2();
    [CompilerGeneratedAttribute]
private void <DefineValidation>b__2_6();
}
[ExtensionAttribute]
public static class Reo.Core.NoSql.MongoDbHealthChecksBuilderExtensions : object {
    [ExtensionAttribute]
public static IHealthChecksBuilder TryAddMongoDb(IHealthChecksBuilder builder, MongoDbOptions options);
    [ExtensionAttribute]
private static IHealthChecksBuilder AddMongoCluster(IHealthChecksBuilder builder, string mongodbConnectionString, string name);
}
public class Reo.Core.NoSql.MongoDbOptions : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuditCollectionName>k__BackingField;
    public string ConnectionString { get; public set; }
    public string Host { get; public set; }
    public UInt32 Port { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string Database { get; public set; }
    public bool IsKeepAlive { get; public set; }
    public string AuditCollectionName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public bool get_IsKeepAlive();
    [CompilerGeneratedAttribute]
public void set_IsKeepAlive(bool value);
    [CompilerGeneratedAttribute]
public string get_AuditCollectionName();
    [CompilerGeneratedAttribute]
public void set_AuditCollectionName(string value);
}
public class Reo.Core.NoSql.MongoDbOptionsValidator : CustomAbstractValidator`1<MongoDbOptions> {
    protected virtual void DefineValidation();
    [CompilerGeneratedAttribute]
private void <DefineValidation>b__0_2();
    [CompilerGeneratedAttribute]
private void <DefineValidation>b__0_8();
    [CompilerGeneratedAttribute]
private void <DefineValidation>b__0_10();
    [CompilerGeneratedAttribute]
private void <DefineValidation>b__0_4();
}
[ExtensionAttribute]
[UsedImplicitlyAttribute]
public static class Reo.Core.NoSql.MongoInitializeExtensions : object {
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection StoringGuidsAsStringInMongoDb(IServiceCollection services);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IServiceCollection AddMongoServices(IServiceCollection services);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IMongoCollectionRegistrar UsingMongoDatabase(IServiceCollection services, string connectionString);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static IMongoCollectionRegistrar UsingMongoDatabase(IServiceCollection services, MongoDbOptions mongoDbOptions);
    private static IMongoDatabase GetDatabase(string connectionString, string database);
    [CompilerGeneratedAttribute]
internal static void <GetDatabase>g__SocketConfigurator|5_1(Socket s);
}
public class Reo.Core.NoSql.MongoInitializeService : BackgroundService {
    private ILogger`1<MongoInitializeService> _logger;
    private IEnumerable`1<INoSqlSeedService> _seeders;
    private IDistributedLockFactory _lockFactory;
    private static string LockName;
    public MongoInitializeService(IEnumerable`1<INoSqlSeedService> seeders, ILogger`1<MongoInitializeService> logger, IDistributedLockFactory lockFactory);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoInitializeService/<ExecuteAsync>d__5")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoInitializeService/<RunSeedersAsync>d__6")]
private Task RunSeedersAsync(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoInitializeService/<RunSeederAsync>d__7")]
private Task RunSeederAsync(INoSqlSeedService seedService, CancellationToken stoppingToken);
}
public class Reo.Core.NoSql.MongoManager : object {
    private IMongoDatabase _database;
    private MongoManager(IMongoDatabase database);
    public MongoManager(MongoDbOptions config, IMongoClientManager clientManager, string dataBase);
    public MongoManager(MongoDbOptions config, IMongoClientManager clientManager);
    public sealed virtual T GetById(string id);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<GetByIdAsync>d__5`1")]
public sealed virtual Task`1<T> GetByIdAsync(string id, CancellationToken token);
    public sealed virtual INoSqlQueryable`1<T> Query(bool actual);
    public sealed virtual Task`1<IAsyncCursor`1<T>> QueryAsync(Expression`1<Func`2<T, bool>> filter, bool actual, CancellationToken token);
    public sealed virtual bool Any();
    public sealed virtual Task`1<bool> AnyAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<AnyAsync>d__10`1")]
public sealed virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> filter, CancellationToken token);
    public sealed virtual T InsertOrUpdate(Expression`1<Func`2<T, bool>> filter, T entity);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<InsertOrUpdateAsync>d__12`1")]
public sealed virtual Task`1<T> InsertOrUpdateAsync(Expression`1<Func`2<T, bool>> filter, T entity, CancellationToken token);
    public sealed virtual T Insert(T entity);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<InsertAsync>d__14`1")]
public sealed virtual Task`1<T> InsertAsync(T entity, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<BulkInsertAsync>d__15`1")]
public sealed virtual Task`1<long> BulkInsertAsync(IEnumerable`1<T> list, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<BulkUpdateAsync>d__16`1")]
public sealed virtual Task`1<long> BulkUpdateAsync(IEnumerable`1<T> list, CancellationToken token);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<BulkHardDeleteAsync>d__17`1")]
public sealed virtual Task`1<int> BulkHardDeleteAsync(IEnumerable`1<T> entities, CancellationToken token);
    public sealed virtual void Delete(string id, bool archive);
    public sealed virtual Task DeleteAsync(string id, bool archive, CancellationToken token);
    public sealed virtual Task DeleteAsync(T entity, bool archive, CancellationToken token);
    public sealed virtual long DeleteAll(Expression`1<Func`2<T, bool>> predicate, bool archive);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<DeleteAllAsync>d__22`1")]
public sealed virtual Task`1<long> DeleteAllAsync(Expression`1<Func`2<T, bool>> predicate, bool archive, CancellationToken token);
    public sealed virtual Task DeleteCollectionAsync(CancellationToken token);
    public sealed virtual void DeleteCollection();
    public sealed virtual Task`1<long> CountAsync(Expression`1<Func`2<T, bool>> filter, CancellationToken token);
    public sealed virtual IMongoCollection`1<T> GetCollection();
    [AsyncStateMachineAttribute("Reo.Core.NoSql.MongoManager/<GetProjectedListAsync>d__27`2")]
public sealed virtual Task`1<List`1<TResult>> GetProjectedListAsync(Expression`1<Func`2<T, bool>> filter, CancellationToken token);
    private static ProjectionDefinition`1<T> BuildProjectionDefinition();
    public static MongoManager Create(IMongoDatabase database);
    public void Delete(T entity, bool archive);
}
public class Reo.Core.NoSql.NoSqlEntity : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [BsonRepresentationAttribute]
public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(string value);
}
public class Reo.Core.NoSql.NoSqlEntityRecord : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [BsonRepresentationAttribute]
public string Id { get; public set; }
    [CompilerGeneratedAttribute]
protected NoSqlEntityRecord(NoSqlEntityRecord original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NoSqlEntityRecord left, NoSqlEntityRecord right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NoSqlEntityRecord left, NoSqlEntityRecord right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NoSqlEntityRecord other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual NoSqlEntityRecord <Clone>$();
}
[ExtensionAttribute]
public static class Reo.Core.NoSql.NoSqlExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IServiceCollection AddReoNoSql(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
private static MongoDbOptions ValidationAndRegistrationOptions(IServiceCollection services, IConfiguration configuration);
    [CompilerGeneratedAttribute]
internal static void <AddReoNoSql>g__SocketConfigurator|0_1(Socket s);
}
public class Reo.Core.NoSql.NoSqlExternalEntity : NoSqlEntity {
    [CompilerGeneratedAttribute]
private string <ExternalId>k__BackingField;
    public string ExternalId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExternalId();
    [CompilerGeneratedAttribute]
public void set_ExternalId(string value);
}
public class Reo.Core.NoSql.NoSqlFactory : object {
    private MongoDbOptions _options;
    private IMongoClientManager _manager;
    public NoSqlFactory(IOptions`1<MongoDbOptions> options, IMongoClientManager manager);
    public sealed virtual INoSql Create(string dataBase);
}
[ExtensionAttribute]
public static class Reo.Core.NoSql.NoSqlQueryable : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static INoSqlQueryable`1<T> ToNoSqlQueryable(IQueryable`1<T> source);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static INoSqlQueryable`1<TSource> Distinct(INoSqlQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static INoSqlQueryable`1<TResult> GroupBy(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MaxAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MaxAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MinAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MinAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static INoSqlQueryable`1<TResult> Select(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static INoSqlQueryable`1<TSource> Skip(INoSqlQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static INoSqlQueryable`1<TSource> Take(INoSqlQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
public static INoSqlQueryable`1<TSource> Where(INoSqlQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [AsyncStateMachineAttribute("Reo.Core.NoSql.NoSqlQueryable/<ToListAsync>d__45`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(INoSqlQueryable`1<TSource> source, CancellationToken cancellationToken);
}
public class Reo.Core.NoSql.NoSqlQueryable`1 : object {
    private IQueryable`1<T> _source;
    public bool IsMongoQueryable { get; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public NoSqlQueryable`1(IQueryable`1<T> source);
    public sealed virtual IMongoQueryable`1<T> AsMongoQueryable();
    public sealed virtual bool get_IsMongoQueryable();
    private void ThrowIfNotMongoQueryable();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual QueryableExecutionModel GetExecutionModel();
    public sealed virtual IAsyncCursor`1<T> ToCursor(CancellationToken token);
    public sealed virtual Task`1<IAsyncCursor`1<T>> ToCursorAsync(CancellationToken token);
}
public class Reo.Core.NoSql.ReoMongoDbSectionException : Exception {
}
internal static class Reo.Core.NoSql.Utils.EndPointHelper : object {
    private static string AddressRegExp;
    private static string HostRegExp;
    public static MongoDbEndPoint TryParse(string value);
    [NotNullAttribute]
private static MongoDbEndPoint ParseByRegExp(string value, string regExp);
    [NotNullAttribute]
private static MongoDbEndPoint ParseEndPoint(Capture addressGroup, Capture portGroup);
}
public class Reo.Core.NoSql.Utils.MongoDbConnectionStringParser : object {
    private static string ServerPattern;
    private static string ServersListPattern;
    private static string DatabasePattern;
    private static string OptionPattern;
    private static string OptionsListPattern;
    private static string ConnectionStringPattern;
    private Regex _regex;
    public MongoDbConnectionParameters GetConnectionParameters(string connectionString);
    private string ExtractDatabaseName(Match match);
    private static List`1<MongoDbEndPoint> ExtractEndPoints(Match match);
    private static string ExtractUsername(Match match);
    private static string ExtractPassword(Match match);
    private static string UnescapeDataString(Group group);
    private MongoDbConnectionParameters ParseParameters(string connectionString);
}
[ExtensionAttribute]
public static class Reo.Core.NoSql.Utils.MongoHelper : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<WriteModel`1<T>> CreateWriteModels(IReadOnlyCollection`1<T> entities);
}
public class Reo.Core.NoSql.Validators.MongoDbConnectionParametersValidator : AbstractValidator`1<MongoDbConnectionParameters> {
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_6();
}
public class Reo.Core.NoSql.Validators.MongoDbEndPointValidator : AbstractValidator`1<MongoDbEndPoint> {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
