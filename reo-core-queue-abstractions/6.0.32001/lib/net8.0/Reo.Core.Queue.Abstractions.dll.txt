public interface Reo.Core.Queue.Abstractions.IDynamicIntegrationEventHandler {
    public abstract virtual Task HandleAsync(object eventData, CancellationToken token);
}
[ObsoleteAttribute("Используйте вместо данного сервиса сервис IQueueService")]
public interface Reo.Core.Queue.Abstractions.IEventBus {
    public abstract virtual Task PublishAsync(string queue, T event, CancellationToken token);
    public abstract virtual Task PublishAsync(string queue, IIntegrationEvent`1<Byte[]> event, CancellationToken token);
    public abstract virtual void Subscribe(string queue);
}
public interface Reo.Core.Queue.Abstractions.IEventBusSubscriptionsManager {
    public abstract virtual void AddSubscription(string queue);
    public abstract virtual bool HasSubscriptionsForQueue(string queue);
    public abstract virtual Type GetEventTypeByQueue(string queue);
    public abstract virtual Type GetHandlerTypeByQueue(string queue);
    public abstract virtual void Clear();
}
public interface Reo.Core.Queue.Abstractions.IIntegrationEvent {
    public Guid Id { get; }
    public string TimeStamp { get; }
    public string EventType { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual string get_TimeStamp();
    public abstract virtual string get_EventType();
}
public interface Reo.Core.Queue.Abstractions.IIntegrationEvent`1 {
    public T Body { get; public set; }
    public abstract virtual T get_Body();
    public abstract virtual void set_Body(T value);
}
public interface Reo.Core.Queue.Abstractions.IIntegrationEventHandler {
}
public interface Reo.Core.Queue.Abstractions.IIntegrationEventHandler`1 {
    public abstract virtual Task HandleAsync(TIntegrationEvent event, CancellationToken token);
}
public abstract class Reo.Core.Queue.Abstractions.IntegrationEvent : object {
    public Guid Id { get; }
    public string TimeStamp { get; }
    public string EventType { get; }
    public sealed virtual Guid get_Id();
    public sealed virtual string get_TimeStamp();
    public sealed virtual string get_EventType();
}
public abstract class Reo.Core.Queue.Abstractions.IntegrationEvent`1 : object {
    [CompilerGeneratedAttribute]
private T <Body>k__BackingField;
    public T Body { get; public set; }
    public Guid Id { get; }
    public string TimeStamp { get; }
    public string EventType { get; }
    protected IntegrationEvent`1(T body);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(T value);
    public sealed virtual Guid get_Id();
    public sealed virtual string get_TimeStamp();
    public sealed virtual string get_EventType();
}
[UsedImplicitlyAttribute]
[AttributeUsageAttribute("4")]
public class Reo.Core.Queue.Abstractions.QueueNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    [NotNullAttribute]
public string QueueName { get; }
    public QueueNameAttribute(string queueName);
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public string get_QueueName();
}
[UsedImplicitlyAttribute]
public class Reo.Core.Queue.Abstractions.SubscriptionInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HandlerType>k__BackingField;
    [UsedImplicitlyAttribute]
public bool IsDynamic { get; }
    [UsedImplicitlyAttribute]
public Type HandlerType { get; }
    private SubscriptionInfo(bool isDynamic, Type handlerType);
    [CompilerGeneratedAttribute]
public bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public Type get_HandlerType();
    public static SubscriptionInfo Dynamic(Type handlerType);
    public static SubscriptionInfo Typed(Type handlerType);
}
