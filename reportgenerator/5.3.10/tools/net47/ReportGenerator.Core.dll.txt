public interface Palmmedia.ReportGenerator.Core.CodeAnalysis.IRiskHotspotsAnalyzer {
    public abstract virtual RiskHotspotAnalysisResult PerformRiskHotspotAnalysis(IEnumerable`1<Assembly> assemblies);
}
public class Palmmedia.ReportGenerator.Core.CodeAnalysis.MetricStatus : object {
    [CompilerGeneratedAttribute]
private Metric <Metric>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exceeded>k__BackingField;
    public Metric Metric { get; }
    public bool Exceeded { get; }
    public MetricStatus(Metric metric, bool exceeded);
    [CompilerGeneratedAttribute]
public Metric get_Metric();
    [CompilerGeneratedAttribute]
public bool get_Exceeded();
}
public class Palmmedia.ReportGenerator.Core.CodeAnalysis.RiskHotspot : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Class <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodMetric <MethodMetric>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<MetricStatus> <StatusMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileIndex>k__BackingField;
    public Assembly Assembly { get; }
    public Class Class { get; }
    public MethodMetric MethodMetric { get; }
    public IEnumerable`1<MetricStatus> StatusMetrics { get; }
    public int FileIndex { get; }
    public RiskHotspot(Assembly assembly, Class class, MethodMetric methodMetric, IEnumerable`1<MetricStatus> statusMetrics, int fileIndex);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public Class get_Class();
    [CompilerGeneratedAttribute]
public MethodMetric get_MethodMetric();
    [CompilerGeneratedAttribute]
public IEnumerable`1<MetricStatus> get_StatusMetrics();
    [CompilerGeneratedAttribute]
public int get_FileIndex();
}
public class Palmmedia.ReportGenerator.Core.CodeAnalysis.RiskHotspotAnalysisResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RiskHotspot> <RiskHotspots>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CodeCodeQualityMetricsAvailable>k__BackingField;
    public IReadOnlyCollection`1<RiskHotspot> RiskHotspots { get; }
    public bool CodeCodeQualityMetricsAvailable { get; }
    public RiskHotspotAnalysisResult(IReadOnlyCollection`1<RiskHotspot> riskHotspots, bool codeCodeQualityMetricsAvailable);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<RiskHotspot> get_RiskHotspots();
    [CompilerGeneratedAttribute]
public bool get_CodeCodeQualityMetricsAvailable();
}
public class Palmmedia.ReportGenerator.Core.CodeAnalysis.RiskHotspotsAnalysisThresholds : object {
    [CompilerGeneratedAttribute]
private decimal <MetricThresholdForCyclomaticComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MetricThresholdForCrapScore>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MetricThresholdForNPathComplexity>k__BackingField;
    public decimal MetricThresholdForCyclomaticComplexity { get; public set; }
    public decimal MetricThresholdForCrapScore { get; public set; }
    public decimal MetricThresholdForNPathComplexity { get; public set; }
    [CompilerGeneratedAttribute]
public decimal get_MetricThresholdForCyclomaticComplexity();
    [CompilerGeneratedAttribute]
public void set_MetricThresholdForCyclomaticComplexity(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MetricThresholdForCrapScore();
    [CompilerGeneratedAttribute]
public void set_MetricThresholdForCrapScore(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MetricThresholdForNPathComplexity();
    [CompilerGeneratedAttribute]
public void set_MetricThresholdForNPathComplexity(decimal value);
}
internal class Palmmedia.ReportGenerator.Core.CodeAnalysis.RiskHotspotsAnalyzer : object {
    private bool disabled;
    private Dictionary`2<string, decimal> thresholdsByMetricName;
    private IFilter riskHotSpotAssemblyFilter;
    private IFilter riskHotSpotClassFilter;
    public RiskHotspotsAnalyzer(RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds, bool disableRiskHotspots);
    public RiskHotspotsAnalyzer(RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds, bool disableRiskHotspots, IFilter riskHotSpotAssemblyFilter, IFilter riskHotSpotClassFilter);
    public sealed virtual RiskHotspotAnalysisResult PerformRiskHotspotAnalysis(IEnumerable`1<Assembly> assemblies);
}
internal static class Palmmedia.ReportGenerator.Core.CommandLineArgumentNames : object {
    public static string Reports;
    public static string TargetDirectory;
    public static string SourceDirectories;
    public static string HistoryDirectory;
    public static string ReportTypes;
    public static string ReportType;
    public static string Plugins;
    public static string AssemblyFilters;
    public static string Filters;
    public static string ClassFilters;
    public static string FileFilters;
    public static string RiskHotspotAssemblyFilters;
    public static string RiskHotspotClassFilters;
    public static string Verbosity;
    public static string Tag;
    public static string Title;
    public static string License;
    private static HashSet`1<string> ValidNames;
    [CompilerGeneratedAttribute]
private static Regex <CommandLineParameterRegex>k__BackingField;
    internal static Regex CommandLineParameterRegex { get; }
    private static CommandLineArgumentNames();
    [CompilerGeneratedAttribute]
internal static Regex get_CommandLineParameterRegex();
    public static bool IsValid(string name);
}
[ExtensionAttribute]
internal static class Palmmedia.ReportGenerator.Core.Common.EnumerableExtensions : object {
    [ExtensionAttribute]
public static int SafeSum(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<int> SafeSum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static long SafeSum(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<long> SafeSum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static decimal SafeSum(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> SafeSum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<T> TakeLast(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
private static IEnumerable`1<T> KeepElementByCount(IEnumerable`1<T> source, int count);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Common.EnumerableExtensions/<TakeLast>d__8`1")]
private static IEnumerable`1<T> TakeLast(IList`1<T> list, int count);
}
[ExtensionAttribute]
internal static class Palmmedia.ReportGenerator.Core.Common.ExceptionExtensions : object {
    [ExtensionAttribute]
public static string GetExceptionMessageForDisplay(Exception exception);
}
public class Palmmedia.ReportGenerator.Core.Common.FileHelper : object {
    public static Encoding GetEncoding(string filename);
    private static Encoding GetEncodingByBOM(string filename);
    private static Encoding GetEncodingByParsing(string filename, Encoding encoding);
}
internal class Palmmedia.ReportGenerator.Core.Common.Glob : object {
    private static Char[] GlobCharacters;
    private static Dictionary`2<string, RegexOrString> RegexOrStringCache;
    private static HashSet`1<char> RegexSpecialChars;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    public string Pattern { get; public set; }
    public bool IgnoreCase { get; public set; }
    public Glob(string pattern);
    private static Glob();
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(bool value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public IEnumerable`1<string> ExpandNames();
    public IEnumerable`1<FileSystemInfo> Expand();
    private RegexOrString CreateRegexOrString(string pattern);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Common.Glob/<Expand>d__19")]
private IEnumerable`1<FileSystemInfo> Expand(string path, bool dirOnly);
    private static string GlobToRegex(string glob);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Common.Glob/<Ungroup>d__21")]
private static IEnumerable`1<string> Ungroup(string path);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Common.Glob/<GetDirectories>d__22")]
private static IEnumerable`1<DirectoryInfo> GetDirectories(DirectoryInfo root);
    [CompilerGeneratedAttribute]
private RegexOrString <Expand>b__19_2(string s);
}
internal static class Palmmedia.ReportGenerator.Core.Common.GlobbingFileSearch : object {
    internal static IEnumerable`1<string> GetFiles(string pattern);
}
public class Palmmedia.ReportGenerator.Core.Common.JsonSerializer : object {
    public static string ToJsonString(object obj);
    public static string EscapeString(string input);
    [CompilerGeneratedAttribute]
internal static bool <EscapeString>g__NeedEscape|1_0(string src, int i);
}
[ExtensionAttribute]
internal static class Palmmedia.ReportGenerator.Core.Common.LinqExtensions : object {
    [ExtensionAttribute]
internal static HashSet`1<T> ToHashSet(IEnumerable`1<T> input);
    [ExtensionAttribute]
internal static bool HasAttributeWithValue(XElement element, XName attributeName, string attributeValue);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Common.LinqExtensions/<DistinctBy>d__2`2")]
[ExtensionAttribute]
internal static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
}
internal static class Palmmedia.ReportGenerator.Core.Common.MathExtensions : object {
    private static int maximumDecimalPlaces;
    private static double factor;
    private static int divisor;
    public static int MaximumDecimalPlaces { get; public set; }
    private static MathExtensions();
    public static int get_MaximumDecimalPlaces();
    public static void set_MaximumDecimalPlaces(int value);
    internal static decimal CalculatePercentage(int number1, int number2);
}
[ExtensionAttribute]
public static class Palmmedia.ReportGenerator.Core.Common.StringExtensions : object {
    [ExtensionAttribute]
public static int ParseLargeInteger(string input);
}
internal static class Palmmedia.ReportGenerator.Core.Common.WildCardFileSearch : object {
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Common.WildCardFileSearch/<GetFiles>d__0")]
internal static IEnumerable`1<string> GetFiles(string pattern);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Common.WildCardFileSearch/<GetDirectories>d__1")]
private static IEnumerable`1<string> GetDirectories(string directory, String[] directoryParts, int currentIndex, bool directoryIsUNCPath);
}
public static class Palmmedia.ReportGenerator.Core.DotNetConfigSettingNames : object {
    public static string SectionName;
    public static string Reports;
    public static string Report;
    public static string TargetDirectory;
    public static string SourceDirectories;
    public static string SourceDirectory;
    public static string HistoryDirectory;
    public static string ReportTypes;
    public static string ReportType;
    public static string Plugins;
    public static string Plugin;
    public static string AssemblyFilters;
    public static string AssemblyFilter;
    public static string ClassFilters;
    public static string ClassFilter;
    public static string FileFilters;
    public static string FileFilter;
    public static string RiskHotspotAssemblyFilters;
    public static string RiskHotspotAssemblyFilter;
    public static string RiskHotspotClassFilters;
    public static string RiskHotspotClassFilter;
    public static string Verbosity;
    public static string Tag;
    public static string Title;
    public static string License;
}
public class Palmmedia.ReportGenerator.Core.Generator : object {
    private static ILogger Logger;
    private static Generator();
    public sealed virtual bool GenerateReport(IReportConfiguration reportConfiguration);
    public sealed virtual bool GenerateReport(IReportConfiguration reportConfiguration, Settings settings, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds);
    public sealed virtual bool GenerateReport(IReportConfiguration reportConfiguration, Settings settings, MinimumCoverageThresholds minimumCoverageThresholds, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds);
    public sealed virtual void GenerateReport(IReportConfiguration reportConfiguration, ParserResult parserResult);
    public sealed virtual void GenerateReport(IReportConfiguration reportConfiguration, Settings settings, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds, ParserResult parserResult);
    public sealed virtual void GenerateReport(IReportConfiguration reportConfiguration, Settings settings, MinimumCoverageThresholds minimumCoverageThresholds, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds, ParserResult parserResult);
    private IConfigurationRoot GetConfiguration();
}
internal class Palmmedia.ReportGenerator.Core.Help : object {
    private IReportBuilderFactory reportBuilderFactory;
    internal Help(IReportBuilderFactory reportBuilderFactory);
    internal void ShowHelp();
}
public interface Palmmedia.ReportGenerator.Core.IReportGenerator {
    public abstract virtual bool GenerateReport(IReportConfiguration reportConfiguration);
    public abstract virtual bool GenerateReport(IReportConfiguration reportConfiguration, Settings settings, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds);
    public abstract virtual bool GenerateReport(IReportConfiguration reportConfiguration, Settings settings, MinimumCoverageThresholds minimumCoverageThresholds, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds);
    public abstract virtual void GenerateReport(IReportConfiguration reportConfiguration, ParserResult parserResult);
    public abstract virtual void GenerateReport(IReportConfiguration reportConfiguration, Settings settings, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds, ParserResult parserResult);
    public abstract virtual void GenerateReport(IReportConfiguration reportConfiguration, Settings settings, MinimumCoverageThresholds minimumCoverageThresholds, RiskHotspotsAnalysisThresholds riskHotspotsAnalysisThresholds, ParserResult parserResult);
}
internal class Palmmedia.ReportGenerator.Core.Licensing.License : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <IssuedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpiresAt>k__BackingField;
    public Guid Id { get; public set; }
    public string Login { get; public set; }
    public string Name { get; public set; }
    public string Email { get; public set; }
    public string LicenseType { get; public set; }
    public DateTime IssuedAt { get; public set; }
    public Nullable`1<DateTime> ExpiresAt { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseType();
    [CompilerGeneratedAttribute]
public void set_LicenseType(string value);
    [CompilerGeneratedAttribute]
public DateTime get_IssuedAt();
    [CompilerGeneratedAttribute]
public void set_IssuedAt(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExpiresAt();
    [CompilerGeneratedAttribute]
public void set_ExpiresAt(Nullable`1<DateTime> value);
    public string GetSignatureInput();
}
public enum Palmmedia.ReportGenerator.Core.Licensing.LicenseType : Enum {
    public int value__;
    public static LicenseType None;
    public static LicenseType Pro;
}
[ExtensionAttribute]
internal static class Palmmedia.ReportGenerator.Core.Licensing.LicenseValidator : object {
    private static string PublicRsaKey;
    private static ILogger Logger;
    private static Dictionary`2<Guid, DateTime> LockedLicences;
    private static string cachedLicenseAsBase64;
    private static LicenseWrapper cachedLicense;
    private static bool exceptionLogged;
    private static LicenseValidator();
    [ExtensionAttribute]
public static bool IsValid(string license);
    [ExtensionAttribute]
public static LicenseType DetermineLicenseType(string license);
}
internal class Palmmedia.ReportGenerator.Core.Licensing.LicenseWrapper : object {
    [CompilerGeneratedAttribute]
private License <License>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    public License License { get; public set; }
    public string Signature { get; public set; }
    [CompilerGeneratedAttribute]
public License get_License();
    [CompilerGeneratedAttribute]
public void set_License(License value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
}
internal class Palmmedia.ReportGenerator.Core.Logging.ConsoleLogger : object {
    [CompilerGeneratedAttribute]
private VerbosityLevel <VerbosityLevel>k__BackingField;
    public VerbosityLevel VerbosityLevel { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual VerbosityLevel get_VerbosityLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerbosityLevel(VerbosityLevel value);
    public sealed virtual void Debug(string message);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(string message);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void Error(string message);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    private void WriteLine(ConsoleColor consoleColor, string format, Object[] args);
    private void WriteLine(string message, ConsoleColor consoleColor);
}
internal class Palmmedia.ReportGenerator.Core.Logging.ConsoleLoggerFactory : object {
    private ILogger logger;
    public VerbosityLevel VerbosityLevel { get; public set; }
    public sealed virtual VerbosityLevel get_VerbosityLevel();
    public sealed virtual void set_VerbosityLevel(VerbosityLevel value);
    public sealed virtual ILogger GetLogger(Type type);
}
internal class Palmmedia.ReportGenerator.Core.Logging.DelegateLogger : object {
    private Action`2<VerbosityLevel, string> logDelegate;
    [CompilerGeneratedAttribute]
private VerbosityLevel <VerbosityLevel>k__BackingField;
    public VerbosityLevel VerbosityLevel { get; public set; }
    public DelegateLogger(Action`2<VerbosityLevel, string> logDelegate);
    [CompilerGeneratedAttribute]
public sealed virtual VerbosityLevel get_VerbosityLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerbosityLevel(VerbosityLevel value);
    public sealed virtual void Debug(string message);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(string message);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void Error(string message);
    public sealed virtual void ErrorFormat(string format, Object[] args);
}
internal class Palmmedia.ReportGenerator.Core.Logging.DelegateLoggerFactory : object {
    private ILogger logger;
    public VerbosityLevel VerbosityLevel { get; public set; }
    public DelegateLoggerFactory(Action`2<VerbosityLevel, string> logDelegate);
    public sealed virtual VerbosityLevel get_VerbosityLevel();
    public sealed virtual void set_VerbosityLevel(VerbosityLevel value);
    public sealed virtual ILogger GetLogger(Type type);
}
public interface Palmmedia.ReportGenerator.Core.Logging.ILogger {
    public VerbosityLevel VerbosityLevel { get; public set; }
    public abstract virtual VerbosityLevel get_VerbosityLevel();
    public abstract virtual void set_VerbosityLevel(VerbosityLevel value);
    public abstract virtual void Debug(string message);
    public abstract virtual void DebugFormat(string format, Object[] args);
    public abstract virtual void Info(string message);
    public abstract virtual void InfoFormat(string format, Object[] args);
    public abstract virtual void Warn(string message);
    public abstract virtual void WarnFormat(string format, Object[] args);
    public abstract virtual void Error(string message);
    public abstract virtual void ErrorFormat(string format, Object[] args);
}
public interface Palmmedia.ReportGenerator.Core.Logging.ILoggerFactory {
    public VerbosityLevel VerbosityLevel { get; public set; }
    public abstract virtual VerbosityLevel get_VerbosityLevel();
    public abstract virtual void set_VerbosityLevel(VerbosityLevel value);
    public abstract virtual ILogger GetLogger(Type type);
}
public static class Palmmedia.ReportGenerator.Core.Logging.LoggerFactory : object {
    private static ILoggerFactory modreq(System.Runtime.CompilerServices.IsVolatile) innerFactory;
    public static VerbosityLevel VerbosityLevel { get; public set; }
    private static LoggerFactory();
    public static VerbosityLevel get_VerbosityLevel();
    public static void set_VerbosityLevel(VerbosityLevel value);
    public static void Configure(ILoggerFactory factory);
    public static void Configure(Action`2<VerbosityLevel, string> logDelegate);
    public static ILogger GetLogger(Type type);
}
public enum Palmmedia.ReportGenerator.Core.Logging.VerbosityLevel : Enum {
    public int value__;
    public static VerbosityLevel Verbose;
    public static VerbosityLevel Info;
    public static VerbosityLevel Warning;
    public static VerbosityLevel Error;
    public static VerbosityLevel Off;
}
internal class Palmmedia.ReportGenerator.Core.LowCoverageException : Exception {
    public LowCoverageException(string message);
    public LowCoverageException(string message, Exception inner);
}
public class Palmmedia.ReportGenerator.Core.MinimumCoverageThresholds : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BranchCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MethodCoverage>k__BackingField;
    public Nullable`1<int> LineCoverage { get; public set; }
    public Nullable`1<int> BranchCoverage { get; public set; }
    public Nullable`1<int> MethodCoverage { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineCoverage();
    [CompilerGeneratedAttribute]
public void set_LineCoverage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BranchCoverage();
    [CompilerGeneratedAttribute]
public void set_BranchCoverage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MethodCoverage();
    [CompilerGeneratedAttribute]
public void set_MethodCoverage(Nullable`1<int> value);
}
public class Palmmedia.ReportGenerator.Core.MinimumCoverageThresholdsValidator : object {
    private MinimumCoverageThresholds minimumCoverageThresholds;
    public MinimumCoverageThresholdsValidator(MinimumCoverageThresholds minimumCoverageThresholds);
    public void Validate(ParserResult parserResult);
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.Assembly : object {
    private ConcurrentBag`1<Class> classes;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<Class> Classes { get; }
    public string Name { get; }
    public string ShortName { get; }
    public int CoveredLines { get; }
    public int CoverableLines { get; }
    public Nullable`1<int> TotalLines { get; }
    public Nullable`1<decimal> CoverageQuota { get; }
    public Nullable`1<int> CoveredBranches { get; }
    public Nullable`1<int> TotalBranches { get; }
    public Nullable`1<decimal> BranchCoverageQuota { get; }
    public int CoveredCodeElements { get; }
    public int TotalCodeElements { get; }
    public Nullable`1<decimal> CodeElementCoverageQuota { get; }
    internal Assembly(string name);
    public IEnumerable`1<Class> get_Classes();
    [CompilerGeneratedAttribute]
public string get_Name();
    public string get_ShortName();
    public int get_CoveredLines();
    public int get_CoverableLines();
    public Nullable`1<int> get_TotalLines();
    public Nullable`1<decimal> get_CoverageQuota();
    public Nullable`1<int> get_CoveredBranches();
    public Nullable`1<int> get_TotalBranches();
    public Nullable`1<decimal> get_BranchCoverageQuota();
    public int get_CoveredCodeElements();
    public int get_TotalCodeElements();
    public Nullable`1<decimal> get_CodeElementCoverageQuota();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void AddClass(Class class);
    internal void Merge(Assembly assembly);
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.Branch : object {
    private string identifier;
    [CompilerGeneratedAttribute]
private int <BranchVisits>k__BackingField;
    public int BranchVisits { get; internal set; }
    internal Branch(int branchVisits, string identifier);
    [CompilerGeneratedAttribute]
public int get_BranchVisits();
    [CompilerGeneratedAttribute]
internal void set_BranchVisits(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.Class : object {
    private static Regex GenericClassRegex;
    private object historicCoveragesLock;
    private List`1<CodeFile> files;
    private List`1<HistoricCoverage> historicCoverages;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawName>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public string Name { get; }
    public string DisplayName { get; }
    public string RawName { get; }
    public Assembly Assembly { get; internal set; }
    public IEnumerable`1<CodeFile> Files { get; }
    public IEnumerable`1<HistoricCoverage> HistoricCoverages { get; }
    public int CoveredLines { get; }
    public int CoverableLines { get; }
    public Nullable`1<int> TotalLines { get; }
    public Nullable`1<decimal> CoverageQuota { get; }
    public Nullable`1<int> CoveredBranches { get; }
    public Nullable`1<int> TotalBranches { get; }
    public Nullable`1<decimal> BranchCoverageQuota { get; }
    public int CoveredCodeElements { get; }
    public int TotalCodeElements { get; }
    public Nullable`1<decimal> CodeElementCoverageQuota { get; }
    internal Class(string name, Assembly assembly);
    internal Class(string name, string rawName, Assembly assembly);
    private static Class();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_RawName();
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
internal void set_Assembly(Assembly value);
    public IEnumerable`1<CodeFile> get_Files();
    public IEnumerable`1<HistoricCoverage> get_HistoricCoverages();
    public int get_CoveredLines();
    public int get_CoverableLines();
    public Nullable`1<int> get_TotalLines();
    public Nullable`1<decimal> get_CoverageQuota();
    public Nullable`1<int> get_CoveredBranches();
    public Nullable`1<int> get_TotalBranches();
    public Nullable`1<decimal> get_BranchCoverageQuota();
    public int get_CoveredCodeElements();
    public int get_TotalCodeElements();
    public Nullable`1<decimal> get_CodeElementCoverageQuota();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void AddFile(CodeFile codeFile);
    internal void AddHistoricCoverage(HistoricCoverage historicCoverage);
    internal void Merge(Class class);
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.CodeElement : object {
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeElementType <CodeElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <CoverageQuota>k__BackingField;
    public string FullName { get; }
    public string Name { get; }
    public CodeElementType CodeElementType { get; }
    public int FirstLine { get; }
    public int LastLine { get; }
    public Nullable`1<decimal> CoverageQuota { get; private set; }
    internal CodeElement(string name, CodeElementType type, int firstLine, int lastLine, Nullable`1<decimal> coverageQuota);
    internal CodeElement(string fullName, string name, CodeElementType type, int firstLine, int lastLine, Nullable`1<decimal> coverageQuota);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public CodeElementType get_CodeElementType();
    [CompilerGeneratedAttribute]
public int get_FirstLine();
    [CompilerGeneratedAttribute]
public int get_LastLine();
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_CoverageQuota();
    [CompilerGeneratedAttribute]
private void set_CoverageQuota(Nullable`1<decimal> value);
    public void ApplyMaximumCoverageQuota(Nullable`1<decimal> quota);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Palmmedia.ReportGenerator.Core.Parser.Analysis.CodeElementType : Enum {
    public int value__;
    public static CodeElementType Property;
    public static CodeElementType Method;
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.CodeFile : object {
    private static ILogger Logger;
    private IDictionary`2<TestMethod, CoverageByTrackedMethod> lineCoveragesByTestMethod;
    private HashSet`1<MethodMetric> methodMetrics;
    private HashSet`1<CodeElement> codeElements;
    private Int32[] lineCoverage;
    private LineVisitStatus[] lineVisitStatus;
    private IDictionary`2<int, ICollection`1<Branch>> branches;
    private IFileReader additionalFileReader;
    private int coveredLines;
    private int coverableLines;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalLines>k__BackingField;
    public string Path { get; }
    public IEnumerable`1<TestMethod> TestMethods { get; }
    public IEnumerable`1<MethodMetric> MethodMetrics { get; }
    public IEnumerable`1<CodeElement> CodeElements { get; }
    public int CoveredLines { get; }
    public int CoverableLines { get; }
    public Nullable`1<int> TotalLines { get; private set; }
    public ReadOnlyCollection`1<int> LineCoverage { get; }
    public ReadOnlyCollection`1<LineVisitStatus> LineVisitStatus { get; }
    public IDictionary`2<int, ICollection`1<Branch>> BranchesByLine { get; }
    public Nullable`1<int> CoveredBranches { get; }
    public Nullable`1<int> TotalBranches { get; }
    public int CoveredCodeElements { get; }
    public int TotalCodeElements { get; }
    public Nullable`1<decimal> CoverageQuota { get; }
    internal CodeFile(string path, Int32[] lineCoverage, LineVisitStatus[] lineVisitStatus);
    internal CodeFile(string path, Int32[] lineCoverage, LineVisitStatus[] lineVisitStatus, IFileReader additionalFileReader);
    internal CodeFile(string path, Int32[] lineCoverage, LineVisitStatus[] lineVisitStatus, IDictionary`2<int, ICollection`1<Branch>> branches);
    internal CodeFile(string path, Int32[] lineCoverage, LineVisitStatus[] lineVisitStatus, IDictionary`2<int, ICollection`1<Branch>> branches, IFileReader additionalFileReader);
    private static CodeFile();
    [CompilerGeneratedAttribute]
public string get_Path();
    public IEnumerable`1<TestMethod> get_TestMethods();
    public IEnumerable`1<MethodMetric> get_MethodMetrics();
    public IEnumerable`1<CodeElement> get_CodeElements();
    public int get_CoveredLines();
    public int get_CoverableLines();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TotalLines();
    [CompilerGeneratedAttribute]
private void set_TotalLines(Nullable`1<int> value);
    public ReadOnlyCollection`1<int> get_LineCoverage();
    public ReadOnlyCollection`1<LineVisitStatus> get_LineVisitStatus();
    public IDictionary`2<int, ICollection`1<Branch>> get_BranchesByLine();
    public Nullable`1<int> get_CoveredBranches();
    public Nullable`1<int> get_TotalBranches();
    public int get_CoveredCodeElements();
    public int get_TotalCodeElements();
    public Nullable`1<decimal> get_CoverageQuota();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal Nullable`1<decimal> CoverageQuotaInRange(int firstLine, int lastLine);
    internal void AddCoverageByTestMethod(TestMethod testMethod, CoverageByTrackedMethod trackedMethodCoverage);
    internal void AddMethodMetric(MethodMetric methodMetric);
    internal void AddCodeElement(CodeElement codeElement);
    internal FileAnalysis AnalyzeFile(IFileReader fileReader);
    internal void Merge(CodeFile file);
    private static CoverageByTrackedMethod MergeCoverageByTrackedMethod(CoverageByTrackedMethod existingTrackedMethodCoverage, CoverageByTrackedMethod lineCoverageByTestMethod);
    [CompilerGeneratedAttribute]
private bool <get_CoveredCodeElements>b__42_0(CodeElement x);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Analysis.CoverageByTrackedMethod : object {
    [CompilerGeneratedAttribute]
private Int32[] <Coverage>k__BackingField;
    [CompilerGeneratedAttribute]
private LineVisitStatus[] <LineVisitStatus>k__BackingField;
    internal Int32[] Coverage { get; internal set; }
    internal LineVisitStatus[] LineVisitStatus { get; internal set; }
    [CompilerGeneratedAttribute]
internal Int32[] get_Coverage();
    [CompilerGeneratedAttribute]
internal void set_Coverage(Int32[] value);
    [CompilerGeneratedAttribute]
internal LineVisitStatus[] get_LineVisitStatus();
    [CompilerGeneratedAttribute]
internal void set_LineVisitStatus(LineVisitStatus[] value);
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.FileAnalysis : object {
    private List`1<LineAnalysis> lineAnalysis;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Path { get; }
    public string Error { get; }
    public IEnumerable`1<LineAnalysis> Lines { get; }
    internal FileAnalysis(string path);
    internal FileAnalysis(string path, string error);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Error();
    public IEnumerable`1<LineAnalysis> get_Lines();
    public virtual string ToString();
    internal void AddLineAnalysis(LineAnalysis lineAnalysis);
}
[FlagsAttribute]
internal enum Palmmedia.ReportGenerator.Core.Parser.Analysis.FlagsLineVisitStatus : Enum {
    public int value__;
    public static FlagsLineVisitStatus NotCoverable;
    public static FlagsLineVisitStatus NotCovered;
    public static FlagsLineVisitStatus PartiallyCovered;
    public static FlagsLineVisitStatus Covered;
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.HistoricCoverage : object {
    [CompilerGeneratedAttribute]
private DateTime <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CoveredLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CoverableLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CoveredBranches>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalBranches>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CoveredCodeElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalCodeElements>k__BackingField;
    public DateTime ExecutionTime { get; }
    public string Tag { get; }
    public int CoveredLines { get; public set; }
    public int CoverableLines { get; public set; }
    public Nullable`1<decimal> CoverageQuota { get; }
    public int TotalLines { get; public set; }
    public int CoveredBranches { get; public set; }
    public int TotalBranches { get; public set; }
    public Nullable`1<decimal> BranchCoverageQuota { get; }
    public Nullable`1<int> CoveredCodeElements { get; public set; }
    public Nullable`1<int> TotalCodeElements { get; public set; }
    public Nullable`1<decimal> CodeElementCoverageQuota { get; }
    public HistoricCoverage(DateTime executionTime, string tag);
    public HistoricCoverage(Class class, DateTime executionTime, string tag);
    [CompilerGeneratedAttribute]
public DateTime get_ExecutionTime();
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public int get_CoveredLines();
    [CompilerGeneratedAttribute]
public void set_CoveredLines(int value);
    [CompilerGeneratedAttribute]
public int get_CoverableLines();
    [CompilerGeneratedAttribute]
public void set_CoverableLines(int value);
    public Nullable`1<decimal> get_CoverageQuota();
    [CompilerGeneratedAttribute]
public int get_TotalLines();
    [CompilerGeneratedAttribute]
public void set_TotalLines(int value);
    [CompilerGeneratedAttribute]
public int get_CoveredBranches();
    [CompilerGeneratedAttribute]
public void set_CoveredBranches(int value);
    [CompilerGeneratedAttribute]
public int get_TotalBranches();
    [CompilerGeneratedAttribute]
public void set_TotalBranches(int value);
    public Nullable`1<decimal> get_BranchCoverageQuota();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CoveredCodeElements();
    [CompilerGeneratedAttribute]
public void set_CoveredCodeElements(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TotalCodeElements();
    [CompilerGeneratedAttribute]
public void set_TotalCodeElements(Nullable`1<int> value);
    public Nullable`1<decimal> get_CodeElementCoverageQuota();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Palmmedia.ReportGenerator.Core.Parser.Analysis.HistoricCoverages : object {
    public static IEnumerable`1<HistoricCoverage> GetOverallHistoricCoverages(IEnumerable`1<HistoricCoverage> overallHistoricCoverages);
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.LineAnalysis : ShortLineAnalysis {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TestMethod, ShortLineAnalysis> <LineCoverageByTestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CoveredBranches>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalBranches>k__BackingField;
    public int LineNumber { get; }
    public string LineContent { get; }
    public IDictionary`2<TestMethod, ShortLineAnalysis> LineCoverageByTestMethod { get; }
    public Nullable`1<int> CoveredBranches { get; }
    public Nullable`1<int> TotalBranches { get; }
    internal LineAnalysis(int lineVisits, LineVisitStatus lineVisitStatus, IDictionary`2<TestMethod, ShortLineAnalysis> lineCoverageByTestMethod, int lineNumber, string lineContent);
    internal LineAnalysis(int lineVisits, LineVisitStatus lineVisitStatus, IDictionary`2<TestMethod, ShortLineAnalysis> lineCoverageByTestMethod, int lineNumber, string lineContent, int coveredBranches, int totalBranches);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public string get_LineContent();
    [CompilerGeneratedAttribute]
public IDictionary`2<TestMethod, ShortLineAnalysis> get_LineCoverageByTestMethod();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CoveredBranches();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TotalBranches();
}
public enum Palmmedia.ReportGenerator.Core.Parser.Analysis.LineVisitStatus : Enum {
    public int value__;
    public static LineVisitStatus NotCoverable;
    public static LineVisitStatus NotCovered;
    public static LineVisitStatus PartiallyCovered;
    public static LineVisitStatus Covered;
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.MethodMetric : object {
    private List`1<Metric> metrics;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    public IEnumerable`1<Metric> Metrics { get; }
    public string FullName { get; }
    public string ShortName { get; }
    public Nullable`1<int> Line { get; internal set; }
    public MethodMetric(string fullName, string shortName, IEnumerable`1<Metric> metrics);
    public IEnumerable`1<Metric> get_Metrics();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
internal void set_Line(Nullable`1<int> value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void AddMetric(Metric metric);
    internal void AddMetrics(IEnumerable`1<Metric> metrics);
    internal void Merge(MethodMetric methodMetric);
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.Metric : object {
    private static Uri CyclomaticComplexityUri;
    private static Uri CodeCoverageUri;
    private static Uri NPathComplexityUri;
    private static Uri CrapScoreUri;
    [CompilerGeneratedAttribute]
private MetricMergeOrder <MergeOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Abbreviation>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ExplanationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private MetricType <MetricType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Value>k__BackingField;
    public MetricMergeOrder MergeOrder { get; }
    public string Name { get; }
    public string Abbreviation { get; }
    public Uri ExplanationUrl { get; }
    public MetricType MetricType { get; }
    public Nullable`1<decimal> Value { get; internal set; }
    public Metric(string name, Uri explanationUrl, MetricType metricType, Nullable`1<decimal> value);
    public Metric(string name, string abbreviation, Uri explanationUrl, MetricType metricType, Nullable`1<decimal> value);
    public Metric(string name, Uri explanationUrl, MetricType metricType, Nullable`1<decimal> value, MetricMergeOrder mergeOrder);
    public Metric(string name, string abbreviation, Uri explanationUrl, MetricType metricType, Nullable`1<decimal> value, MetricMergeOrder mergeOrder);
    private static Metric();
    [CompilerGeneratedAttribute]
public MetricMergeOrder get_MergeOrder();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Abbreviation();
    [CompilerGeneratedAttribute]
public Uri get_ExplanationUrl();
    [CompilerGeneratedAttribute]
public MetricType get_MetricType();
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(Nullable`1<decimal> value);
    public static Metric Coverage(Nullable`1<decimal> value);
    public static Metric BranchCoverage(Nullable`1<decimal> value);
    public static Metric SequenceCoverage(Nullable`1<decimal> value);
    public static Metric BlocksCovered(Nullable`1<decimal> value);
    public static Metric BlocksNotCovered(Nullable`1<decimal> value);
    public static Metric CyclomaticComplexity(Nullable`1<decimal> value);
    public static Metric NPathComplexity(Nullable`1<decimal> value);
    public static Metric CrapScore(Nullable`1<decimal> value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Palmmedia.ReportGenerator.Core.Parser.Analysis.MetricMergeOrder : Enum {
    public int value__;
    public static MetricMergeOrder HigherIsBetter;
    public static MetricMergeOrder LowerIsBetter;
}
public enum Palmmedia.ReportGenerator.Core.Parser.Analysis.MetricType : Enum {
    public int value__;
    public static MetricType CoveragePercentual;
    public static MetricType CoverageAbsolute;
    public static MetricType CodeQuality;
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.ShortLineAnalysis : object {
    [CompilerGeneratedAttribute]
private LineVisitStatus <LineVisitStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineVisits>k__BackingField;
    public LineVisitStatus LineVisitStatus { get; }
    public int LineVisits { get; }
    internal ShortLineAnalysis(int lineVisits, LineVisitStatus lineVisitStatus);
    [CompilerGeneratedAttribute]
public LineVisitStatus get_LineVisitStatus();
    [CompilerGeneratedAttribute]
public int get_LineVisits();
    public virtual string ToString();
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.SummaryResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Assembly> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsedParser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsBranchCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MinimumTimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MaximumTimeStamp>k__BackingField;
    public IReadOnlyCollection`1<Assembly> Assemblies { get; }
    public string UsedParser { get; }
    public bool SupportsBranchCoverage { get; }
    public IReadOnlyCollection`1<string> SourceDirectories { get; }
    public Nullable`1<DateTime> MinimumTimeStamp { get; }
    public Nullable`1<DateTime> MaximumTimeStamp { get; }
    public int CoveredLines { get; }
    public int CoverableLines { get; }
    public Nullable`1<int> TotalLines { get; }
    public Nullable`1<decimal> CoverageQuota { get; }
    public Nullable`1<int> CoveredBranches { get; }
    public Nullable`1<int> TotalBranches { get; }
    public Nullable`1<decimal> BranchCoverageQuota { get; }
    public int CoveredCodeElements { get; }
    public int TotalCodeElements { get; }
    public Nullable`1<decimal> CodeElementCoverageQuota { get; }
    public IReadOnlyCollection`1<Metric> SumableMetrics { get; }
    public SummaryResult(ParserResult parserResult);
    public SummaryResult(IReadOnlyCollection`1<Assembly> assemblies, string usedParser, bool supportsBranchCoverage, IReadOnlyCollection`1<string> sourceDirectories);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Assembly> get_Assemblies();
    [CompilerGeneratedAttribute]
public string get_UsedParser();
    [CompilerGeneratedAttribute]
public bool get_SupportsBranchCoverage();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_SourceDirectories();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MinimumTimeStamp();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MaximumTimeStamp();
    public int get_CoveredLines();
    public int get_CoverableLines();
    public Nullable`1<int> get_TotalLines();
    public Nullable`1<decimal> get_CoverageQuota();
    public Nullable`1<int> get_CoveredBranches();
    public Nullable`1<int> get_TotalBranches();
    public Nullable`1<decimal> get_BranchCoverageQuota();
    public int get_CoveredCodeElements();
    public int get_TotalCodeElements();
    public Nullable`1<decimal> get_CodeElementCoverageQuota();
    public IReadOnlyCollection`1<Metric> get_SumableMetrics();
    public string CoverageDate();
}
public class Palmmedia.ReportGenerator.Core.Parser.Analysis.TestMethod : object {
    private static long counter;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public string Name { get; }
    public string ShortName { get; }
    public long Id { get; }
    internal TestMethod(string name, string shortName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public long get_Id();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Palmmedia.ReportGenerator.Core.Parser.ClassNameParser : object {
    private static Regex CleanupRegex;
    private static Regex GenericClassRegex;
    private static ClassNameParser();
    public static ClassNameParserResult ParseClassName(string rawName, bool rawMode);
    private static bool IncludeClass(string name);
}
internal class Palmmedia.ReportGenerator.Core.Parser.ClassNameParserResult : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Include>k__BackingField;
    public string Name { get; }
    public string DisplayName { get; }
    public string RawName { get; }
    public bool Include { get; }
    public ClassNameParserResult(string name, string displayName, string rawName, bool include);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_RawName();
    [CompilerGeneratedAttribute]
public bool get_Include();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Palmmedia.ReportGenerator.Core.Parser.CloverParser : ParserBase {
    private static ILogger Logger;
    private bool excludeTestProjects;
    internal CloverParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    internal CloverParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter, bool excludeTestProjects);
    private static CloverParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement[] modules, string assemblyName);
    private void ProcessFile(Assembly assembly, XElement fileElement);
    private static Dictionary`2<int, ICollection`1<Branch>> GetBranches(IEnumerable`1<XElement> lines);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile, int numberOrLines);
    [CompilerGeneratedAttribute]
private bool <Parse>b__4_1(XElement p);
    [CompilerGeneratedAttribute]
private bool <Parse>b__4_4(string a);
}
internal class Palmmedia.ReportGenerator.Core.Parser.CoberturaParser : ParserBase {
    private static ILogger Logger;
    private static Regex LambdaMethodNameRegex;
    private static Regex CompilerGeneratedMethodNameRegex;
    private static Regex LocalFunctionMethodNameRegex;
    private static Regex BranchCoverageRegex;
    internal CoberturaParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static CoberturaParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement[] modules, string assemblyName);
    private void ProcessClass(XElement[] allClasses, Assembly assembly, ClassNameParserResult classNameParserResult);
    private CodeFile ProcessFile(XElement[] classElements, Class class, string className, string filePath);
    private static void SetMethodMetrics(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static Nullable`1<decimal> ParseCoberturaDecimalValue(string value);
    private static Nullable`1<decimal> GetCoberturaDecimalValue(string value);
    private static Nullable`1<decimal> GetCoberturaDecimalPercentageValue(string value);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static Dictionary`2<int, ICollection`1<Branch>> GetBranches(IEnumerable`1<XElement> lines);
    private static string ExtractMethodName(string methodName, string className);
    private static string GetShortMethodName(string fullName);
    [CompilerGeneratedAttribute]
private bool <Parse>b__6_1(IGrouping`2<string, XElement> a);
}
internal class Palmmedia.ReportGenerator.Core.Parser.CodeElementBase : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstLine>k__BackingField;
    public string Name { get; }
    public int FirstLine { get; }
    public CodeElementBase(string name, int firstLine);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_FirstLine();
    public virtual string ToString();
}
public class Palmmedia.ReportGenerator.Core.Parser.CoverageReportParser : object {
    private static ILogger Logger;
    private IReportContext reportContext;
    private int numberOfReportsParsedInParallel;
    private int numberOfReportsMergedInParallel;
    private bool excludeTestProjects;
    private IEnumerable`1<string> sourceDirectories;
    private string defaultAssemblyName;
    private IFilter assemblyFilter;
    private IFilter classFilter;
    private IFilter fileFilter;
    private int mergeCount;
    private bool rawModeProhibited;
    public CoverageReportParser(int numberOfReportsParsedInParallel, int numberOfReportsMergedInParallel, IEnumerable`1<string> sourceDirectories, IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    public CoverageReportParser(int numberOfReportsParsedInParallel, int numberOfReportsMergedInParallel, bool excludeTestProjects, IEnumerable`1<string> sourceDirectories, IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    public CoverageReportParser(int numberOfReportsParsedInParallel, int numberOfReportsMergedInParallel, bool excludeTestProjects, string defaultAssemblyName, IEnumerable`1<string> sourceDirectories, IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    public CoverageReportParser(IReportContext reportContext);
    private static CoverageReportParser();
    public ParserResult ParseFiles(IReadOnlyCollection`1<string> reportFiles);
    private Task`1<ParserResult> CreateConsumer(BlockingCollection`1<ParserResult> collection);
    private void MergeResults(ParserResult result1, ParserResult result2);
    private Task CreateProducer(IReadOnlyCollection`1<string> reportFiles, BlockingCollection`1<ParserResult> collection);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Parser.CoverageReportParser/<GetXElements>d__20")]
private IEnumerable`1<XElement> GetXElements(string filePath, string elementName);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Parser.CoverageReportParser/<ParseXmlFile>d__21")]
private IEnumerable`1<ParserResult> ParseXmlFile(string filePath);
    [IteratorStateMachineAttribute("Palmmedia.ReportGenerator.Core.Parser.CoverageReportParser/<ParseTextFile>d__22")]
private IEnumerable`1<ParserResult> ParseTextFile(String[] lines);
    private static string GetHumanReadableFileSize(string fileName);
}
internal class Palmmedia.ReportGenerator.Core.Parser.DotCoverParser : ParserBase {
    private static ILogger Logger;
    private static Regex LambdaMethodNameRegex;
    private static Regex CompilerGeneratedMethodNameRegex;
    private static Regex LocalFunctionMethodNameRegex;
    internal DotCoverParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static DotCoverParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement[] modules, XElement[] files, string assemblyName);
    private void ProcessClass(XElement[] files, Assembly assembly, XElement classElement);
    private CodeFile ProcessFile(string fileId, XElement classElement, string filePath);
    private static void SetCodeElements(CodeFile codeFile, string fileId, IEnumerable`1<XElement> methods);
    private static string ExtractMethodName(string typeName, string methodName);
    [CompilerGeneratedAttribute]
private bool <Parse>b__5_1(string a);
}
internal class Palmmedia.ReportGenerator.Core.Parser.DynamicCodeCoverageParser : ParserBase {
    private static ILogger Logger;
    private static Regex LambdaMethodNameRegex;
    private static Regex CompilerGeneratedMethodNameRegex;
    private static Regex MethodRegex;
    internal DynamicCodeCoverageParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static DynamicCodeCoverageParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement module);
    private void ProcessClass(XElement module, Assembly assembly, ClassWithNamespace classWithNamespace);
    private static CodeFile ProcessFile(XElement module, string fileId, ClassWithNamespace classWithNamespace, string filePath);
    private static void SetMethodMetrics(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static string ExtractMethodName(string methodName, string typeName);
    [CompilerGeneratedAttribute]
private bool <Parse>b__5_0(XElement m);
}
internal class Palmmedia.ReportGenerator.Core.Parser.FileReading.AltCoverEmbeddedFileReader : object {
    private static String[] LineEndings;
    private string base64DeflateCompressedFile;
    public AltCoverEmbeddedFileReader(string base64DeflateCompressedFile);
    private static AltCoverEmbeddedFileReader();
    public sealed virtual String[] LoadFile(string path, String& error);
    private Byte[] Decompress(Byte[] data);
}
internal class Palmmedia.ReportGenerator.Core.Parser.FileReading.CachingFileReader : object {
    private static HttpClient HttpClient;
    private IFileReader localFileReader;
    private int cachingDurationOfRemoteFilesInMinutes;
    public CachingFileReader(IFileReader localFileReader, int cachingDurationOfRemoteFilesInMinutes, string customHeadersForRemoteFiles);
    private static CachingFileReader();
    public sealed virtual String[] LoadFile(string path, String& error);
    private static string GetSha1Hash(string input);
}
internal interface Palmmedia.ReportGenerator.Core.Parser.FileReading.IFileReader {
    public abstract virtual String[] LoadFile(string path, String& error);
}
internal class Palmmedia.ReportGenerator.Core.Parser.FileReading.LocalFileReader : object {
    private static Regex DeterministicPathRegex;
    private static IReadOnlyList`1<string> DeterministicSourceDirectories;
    private IReadOnlyList`1<string> sourceDirectories;
    private static LocalFileReader();
    public LocalFileReader(IEnumerable`1<string> sourceDirectories);
    public sealed virtual String[] LoadFile(string path, String& error);
    private string MapPath(string path);
    private static string MapPath(string path, IEnumerable`1<string> directories);
}
public class Palmmedia.ReportGenerator.Core.Parser.Filtering.DefaultFilter : object {
    private Regex[] includeFilters;
    private Regex[] excludeFilters;
    [CompilerGeneratedAttribute]
private bool <HasCustomFilters>k__BackingField;
    public bool HasCustomFilters { get; }
    public DefaultFilter(IEnumerable`1<string> filters);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasCustomFilters();
    public sealed virtual bool IsElementIncludedInReport(string name);
    private static Regex CreateFilterRegex(string filter);
}
public interface Palmmedia.ReportGenerator.Core.Parser.Filtering.IFilter {
    public bool HasCustomFilters { get; }
    public abstract virtual bool get_HasCustomFilters();
    public abstract virtual bool IsElementIncludedInReport(string name);
}
internal class Palmmedia.ReportGenerator.Core.Parser.GCovParser : ParserBase {
    public static string SourceElementInFirstLine;
    private static Regex LineCoverageRegex;
    private static Regex BranchCoverageRegex;
    private string defaultAssemblyName;
    public GCovParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    public GCovParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter, string defaultAssemblyName);
    private static GCovParser();
    public ParserResult Parse(String[] lines);
    private void ProcessClass(Assembly assembly, String[] lines);
    private void ProcessCoverage(Class class, string fileName, String[] lines);
}
internal class Palmmedia.ReportGenerator.Core.Parser.JaCoCoParser : ParserBase {
    private static ILogger Logger;
    private static Regex MethodRegex;
    internal JaCoCoParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static JaCoCoParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement[] modules, string assemblyName);
    private void ProcessClass(XElement[] modules, Assembly assembly, string className);
    private static CodeFile ProcessFile(XElement[] modules, Class class, string filePath, Int32& numberOrLines);
    private static void SetMethodMetrics(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile, int numberOrLines);
    private static Dictionary`2<int, ICollection`1<Branch>> GetBranches(IEnumerable`1<JaCoCoLineCoverage> lines);
    [CompilerGeneratedAttribute]
private bool <Parse>b__3_1(string a);
}
internal class Palmmedia.ReportGenerator.Core.Parser.LCovParser : ParserBase {
    private string defaultAssemblyName;
    public LCovParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    public LCovParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter, string defaultAssemblyName);
    public ParserResult Parse(String[] lines);
    private void ProcessAssembly(Assembly assembly, String[] lines);
    private void ProcessClass(Class class, string fileName, String[] lines, Int32& currentLine);
}
internal class Palmmedia.ReportGenerator.Core.Parser.MProfParser : ParserBase {
    private static ILogger Logger;
    private static Regex LambdaMethodNameRegex;
    internal MProfParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static MProfParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement[] methods, string assemblyName);
    private void ProcessClass(XElement[] methods, Assembly assembly, string className);
    private static CodeFile ProcessFile(XElement[] methods, Class class, string filePath);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    [CompilerGeneratedAttribute]
private bool <Parse>b__3_1(string a);
}
internal class Palmmedia.ReportGenerator.Core.Parser.NCoverParser : ParserBase {
    private static ILogger Logger;
    private static Regex LambdaMethodNameRegex;
    internal NCoverParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static NCoverParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement[] modules, string assemblyName);
    private void ProcessClass(XElement[] modules, Assembly assembly, string className);
    private static CodeFile ProcessFile(XElement[] modules, Class class, string filePath);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfClass);
    [CompilerGeneratedAttribute]
private bool <Parse>b__3_1(string a);
}
internal class Palmmedia.ReportGenerator.Core.Parser.OpenCoverParser : ParserBase {
    private static ILogger Logger;
    private static Regex GenericClassRegex;
    private static Regex AsyncClassRegex;
    private static Regex LambdaMethodNameRegex;
    private static Regex CompilerGeneratedMethodNameRegex;
    private static Regex LocalFunctionMethodNameRegex;
    private static Regex MethodRegex;
    private static ConcurrentDictionary`2<string, string> MethodNameMap;
    internal OpenCoverParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static OpenCoverParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(IDictionary`2<string, XElement[]> assemblyModules, XElement[] files, IDictionary`2<string, string> trackedMethods, string assemblyName);
    private void ProcessClass(IDictionary`2<string, XElement[]> assemblyModules, XElement[] files, IDictionary`2<string, string> trackedMethods, Dictionary`2<string, FileElement> fileIdsByFilename, Assembly assembly, string className);
    private static CodeFile ProcessFile(IDictionary`2<string, string> trackedMethods, FileElement fileIds, string filePath, XElement[] methods);
    private static void SetMethodMetrics(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static Dictionary`2<int, ICollection`1<Branch>> GetBranches(XElement[] methods, FileElement fileIds);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static string ExtractMethodName(string methodName);
}
internal abstract class Palmmedia.ReportGenerator.Core.Parser.ParserBase : object {
    [CompilerGeneratedAttribute]
private bool <RawMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilter <AssemblyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilter <ClassFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilter <FileFilter>k__BackingField;
    public bool RawMode { get; public set; }
    protected IFilter AssemblyFilter { get; }
    protected IFilter ClassFilter { get; }
    protected IFilter FileFilter { get; }
    protected ParserBase(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    [CompilerGeneratedAttribute]
public bool get_RawMode();
    [CompilerGeneratedAttribute]
public void set_RawMode(bool value);
    [CompilerGeneratedAttribute]
protected IFilter get_AssemblyFilter();
    [CompilerGeneratedAttribute]
protected IFilter get_ClassFilter();
    [CompilerGeneratedAttribute]
protected IFilter get_FileFilter();
    public virtual string ToString();
}
public class Palmmedia.ReportGenerator.Core.Parser.ParserResult : object {
    private List`1<string> parserNames;
    private List`1<Assembly> assemblies;
    private HashSet`1<string> sourceDirectories;
    [CompilerGeneratedAttribute]
private bool <SupportsBranchCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MinimumTimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MaximumTimeStamp>k__BackingField;
    public IReadOnlyCollection`1<Assembly> Assemblies { get; }
    public IReadOnlyCollection`1<string> SourceDirectories { get; }
    public bool SupportsBranchCoverage { get; private set; }
    public Nullable`1<DateTime> MinimumTimeStamp { get; internal set; }
    public Nullable`1<DateTime> MaximumTimeStamp { get; internal set; }
    public string ParserName { get; }
    public ParserResult(List`1<Assembly> assemblies, bool supportsBranchCoverage, string parserName);
    public IReadOnlyCollection`1<Assembly> get_Assemblies();
    public IReadOnlyCollection`1<string> get_SourceDirectories();
    [CompilerGeneratedAttribute]
public bool get_SupportsBranchCoverage();
    [CompilerGeneratedAttribute]
private void set_SupportsBranchCoverage(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MinimumTimeStamp();
    [CompilerGeneratedAttribute]
internal void set_MinimumTimeStamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MaximumTimeStamp();
    [CompilerGeneratedAttribute]
internal void set_MaximumTimeStamp(Nullable`1<DateTime> value);
    public string get_ParserName();
    public void AddSourceDirectory(string directory);
    internal void Merge(ParserResult parserResult);
    private static DateTime Min(DateTime first, DateTime second);
    private static DateTime Max(DateTime first, DateTime second);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.CloverReportPreprocessor : object {
    private static ILogger Logger;
    private IReadOnlyList`1<string> sourceDirectories;
    private string defaultAssemblyName;
    internal CloverReportPreprocessor(IEnumerable`1<string> sourceDirectories);
    internal CloverReportPreprocessor(IEnumerable`1<string> sourceDirectories, string defaultAssemblyName);
    private static CloverReportPreprocessor();
    internal void Execute(XContainer report);
    private string GetFullFilePath(string initialPath);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.CoberturaReportPreprocessor : object {
    private static ILogger Logger;
    private static CoberturaReportPreprocessor();
    internal void Execute(XContainer report);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.DotCoverReportPreprocessor : object {
    private static ILogger Logger;
    private static DotCoverReportPreprocessor();
    internal void Execute(XContainer report);
    private static void MoveStartupCodeElementsToParentType(XElement module);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.DynamicCodeCoverageReportPreprocessor : object {
    internal void Execute(XContainer report);
    private static void ApplyClassNameToStartupCodeElements(XElement module);
    private static void AddMissingTypeNames(XElement module);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.GCovReportPreprocessor : object {
    private static ILogger Logger;
    private IReadOnlyList`1<string> sourceDirectories;
    internal GCovReportPreprocessor(IEnumerable`1<string> sourceDirectories);
    private static GCovReportPreprocessor();
    internal void Execute(String[] lines);
    private string GetFullFilePath(string fileName);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.JaCoCoReportPreprocessor : object {
    private static ILogger Logger;
    private IReadOnlyList`1<string> sourceDirectories;
    internal JaCoCoReportPreprocessor(IEnumerable`1<string> sourceDirectories);
    private static JaCoCoReportPreprocessor();
    internal void Execute(XContainer report);
    private string GetFullFilePath(string moduleName, string fileName);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.OpenCoverReportPreprocessor : object {
    internal void Execute(XContainer report);
    private static void ApplyClassNameToStartupCodeElements(XElement module);
}
internal class Palmmedia.ReportGenerator.Core.Parser.Preprocessing.VisualStudioReportPreprocessor : object {
    internal void Execute(XContainer report);
    private static void ApplyClassNameToStartupCodeElements(XElement module);
}
internal class Palmmedia.ReportGenerator.Core.Parser.UnsupportedParserException : Exception {
    public UnsupportedParserException(string message);
    public UnsupportedParserException(string message, Exception inner);
}
internal class Palmmedia.ReportGenerator.Core.Parser.VisualStudioParser : ParserBase {
    private static ILogger Logger;
    private static Regex LambdaMethodNameRegex;
    private static Regex CompilerGeneratedMethodNameRegex;
    private static Regex LocalFunctionMethodNameRegex;
    private static Regex MethodRegex;
    internal VisualStudioParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter);
    private static VisualStudioParser();
    public ParserResult Parse(XContainer report);
    private Assembly ProcessAssembly(XElement[] modules, XElement[] files, string assemblyName);
    private void ProcessClass(XElement[] modules, XElement[] files, Assembly assembly, string className);
    private static CodeFile ProcessFile(XElement[] modules, string fileId, Class class, string filePath);
    private static void SetMethodMetrics(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static void SetCodeElements(CodeFile codeFile, IEnumerable`1<XElement> methodsOfFile);
    private static string ExtractMethodName(string methodName, string methodKeyName);
    [CompilerGeneratedAttribute]
private bool <Parse>b__6_1(string a);
}
internal class Palmmedia.ReportGenerator.Core.Plugin.DefaultAssemblyLoader : object {
    public sealed virtual Assembly Load(string name);
}
internal static class Palmmedia.ReportGenerator.Core.Plugin.FileUnblocker : object {
    public static bool Unblock(string fileName);
    private static bool DeleteFile(string name);
}
public interface Palmmedia.ReportGenerator.Core.Plugin.IAssemblyLoader {
    public abstract virtual Assembly Load(string name);
}
internal interface Palmmedia.ReportGenerator.Core.Plugin.IPluginLoader {
    public abstract virtual IReadOnlyCollection`1<T> LoadInstancesOfType();
}
internal class Palmmedia.ReportGenerator.Core.Plugin.ReflectionPluginLoader : object {
    private static ILogger Logger;
    private static bool pluginsNotSupportedMessageShown;
    private IReadOnlyCollection`1<string> plugins;
    private IAssemblyLoader assemblyLoader;
    public ReflectionPluginLoader(IReadOnlyCollection`1<string> plugins);
    private static ReflectionPluginLoader();
    public sealed virtual IReadOnlyCollection`1<T> LoadInstancesOfType();
    private IAssemblyLoader CreateAssemblyLoader();
}
public class Palmmedia.ReportGenerator.Core.Plugin.ReflectionWrapperAssemblyLoader : object {
    private object assemblyLoader;
    public ReflectionWrapperAssemblyLoader(object assemblyLoader);
    public sealed virtual Assembly Load(string name);
}
public class Palmmedia.ReportGenerator.Core.Program : object {
    private static ILogger Logger;
    private static String[] HelpArguments;
    private static Program();
    public static int Main(String[] args);
    public static String[] NormalizeArgs(String[] args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Palmmedia.ReportGenerator.Core.Properties.Help : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DefaultValues { get; }
    internal static string Examples { get; }
    internal static string Explanations { get; }
    internal static string Explanations_AssemblyFilters { get; }
    internal static string Explanations_ClassFilters { get; }
    internal static string Explanations_FileFilters { get; }
    internal static string Explanations_FiltersCommon { get; }
    internal static string Explanations_HistoryDirectory { get; }
    internal static string Explanations_License { get; }
    internal static string Explanations_Plugins { get; }
    internal static string Explanations_Reports { get; }
    internal static string Explanations_ReportTypes { get; }
    internal static string Explanations_RiskHotspotAssemblyFilters { get; }
    internal static string Explanations_RiskHotspotClassFilters { get; }
    internal static string Explanations_SourceDirectories { get; }
    internal static string Explanations_SourceDirectories2 { get; }
    internal static string Explanations_Tag { get; }
    internal static string Explanations_TargetDirectory { get; }
    internal static string Explanations_Title { get; }
    internal static string Explanations_Verbosity { get; }
    internal static string Explanations7 { get; }
    internal static string Parameters { get; }
    internal static string Parameters_AssemblyFilters { get; }
    internal static string Parameters_ClassFilters { get; }
    internal static string Parameters_FileFilters { get; }
    internal static string Parameters_HistoryDirectory { get; }
    internal static string Parameters_License { get; }
    internal static string Parameters_Plugins { get; }
    internal static string Parameters_Reports { get; }
    internal static string Parameters_ReportTypes { get; }
    internal static string Parameters_RiskHotspotAssemblyFilters { get; }
    internal static string Parameters_RiskHotspotClassFilters { get; }
    internal static string Parameters_SourceDirectories { get; }
    internal static string Parameters_Tag { get; }
    internal static string Parameters_TargetDirectory { get; }
    internal static string Parameters_Title { get; }
    internal static string Parameters_Verbosity { get; }
    internal static string ReportTypeValues { get; }
    internal static string VerbosityValues { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DefaultValues();
    internal static string get_Examples();
    internal static string get_Explanations();
    internal static string get_Explanations_AssemblyFilters();
    internal static string get_Explanations_ClassFilters();
    internal static string get_Explanations_FileFilters();
    internal static string get_Explanations_FiltersCommon();
    internal static string get_Explanations_HistoryDirectory();
    internal static string get_Explanations_License();
    internal static string get_Explanations_Plugins();
    internal static string get_Explanations_Reports();
    internal static string get_Explanations_ReportTypes();
    internal static string get_Explanations_RiskHotspotAssemblyFilters();
    internal static string get_Explanations_RiskHotspotClassFilters();
    internal static string get_Explanations_SourceDirectories();
    internal static string get_Explanations_SourceDirectories2();
    internal static string get_Explanations_Tag();
    internal static string get_Explanations_TargetDirectory();
    internal static string get_Explanations_Title();
    internal static string get_Explanations_Verbosity();
    internal static string get_Explanations7();
    internal static string get_Parameters();
    internal static string get_Parameters_AssemblyFilters();
    internal static string get_Parameters_ClassFilters();
    internal static string get_Parameters_FileFilters();
    internal static string get_Parameters_HistoryDirectory();
    internal static string get_Parameters_License();
    internal static string get_Parameters_Plugins();
    internal static string get_Parameters_Reports();
    internal static string get_Parameters_ReportTypes();
    internal static string get_Parameters_RiskHotspotAssemblyFilters();
    internal static string get_Parameters_RiskHotspotClassFilters();
    internal static string get_Parameters_SourceDirectories();
    internal static string get_Parameters_Tag();
    internal static string get_Parameters_TargetDirectory();
    internal static string get_Parameters_Title();
    internal static string get_Parameters_Verbosity();
    internal static string get_ReportTypeValues();
    internal static string get_VerbosityValues();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Palmmedia.ReportGenerator.Core.Properties.ReportResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string All { get; }
    public static string AllChanges { get; }
    public static string Assemblies { get; }
    public static string Assemblies2 { get; }
    public static string Assembly { get; }
    public static string Assembly2 { get; }
    public static string BlocksCovered { get; }
    public static string BlocksNotCovered { get; }
    public static string Branch { get; }
    public static string BranchCoverage { get; }
    public static string BranchCoverage2 { get; }
    public static string BranchCoverageDecreaseOnly { get; }
    public static string BranchCoverageIncreaseOnly { get; }
    public static string Branches { get; }
    public static string ByAssembly { get; }
    public static string ByNamespace { get; }
    public static string Class { get; }
    public static string Class2 { get; }
    public static string Classes { get; }
    public static string CodeCoverage { get; }
    public static string CodeElementCoverageDecreaseOnly { get; }
    public static string CodeElementCoverageIncreaseOnly { get; }
    public static string CodeElementCoverageQuota { get; }
    public static string CodeElementCoverageQuota2 { get; }
    public static string CollapseAll { get; }
    public static string CompareHistory { get; }
    public static string Coverable { get; }
    public static string CoverableLines { get; }
    public static string Coverage { get; }
    public static string Coverage2 { get; }
    public static string Coverage3 { get; }
    public static string CoverageDate { get; }
    public static string CoverageReport { get; }
    public static string CoverageTooltip_Covered { get; }
    public static string CoverageTooltip_NotCoverable { get; }
    public static string CoverageTooltip_NotCovered { get; }
    public static string CoverageTooltip_PartiallyCovered { get; }
    public static string CoverageTypes { get; }
    public static string Covered { get; }
    public static string CoveredBranches { get; }
    public static string CoveredBranches2 { get; }
    public static string CoveredCodeElements { get; }
    public static string CoveredLines { get; }
    public static string CrapScore { get; }
    public static string Current { get; }
    public static string CyclomaticComplexity { get; }
    public static string Date { get; }
    public static string Delta { get; }
    public static string DeltaSummary { get; }
    public static string Description { get; }
    public static string ExpandAll { get; }
    public static string File { get; }
    public static string Files { get; }
    public static string Files2 { get; }
    public static string Files3 { get; }
    public static string Filter { get; }
    public static string GeneratedBy { get; }
    public static string GeneratedOn { get; }
    public static string Grouping { get; }
    public static string History { get; }
    public static string Information { get; }
    public static string Line { get; }
    public static string LineCoverageDecreaseOnly { get; }
    public static string LineCoverageIncreaseOnly { get; }
    public static string Method { get; }
    public static string MethodCoverageProButton { get; }
    public static string MethodCoverageProVersion { get; }
    public static string MethodsProperties { get; }
    public static string Metrics { get; }
    public static string Name { get; }
    public static string NoCoveredAssemblies { get; }
    public static string NoFilesFound { get; }
    public static string NoGrouping { get; }
    public static string NoRiskHotspots { get; }
    public static string NotAvailable { get; }
    public static string NPathComplexity { get; }
    public static string Of { get; }
    public static string Parser { get; }
    public static string Percentage { get; }
    public static string Previous { get; }
    public static string RiskHotspots { get; }
    public static string SelectCoverageTypes { get; }
    public static string SelectCoverageTypesAndMetrics { get; }
    public static string SequenceCoverage { get; }
    public static string Sponsor { get; }
    public static string SponsorTooltip { get; }
    public static string Star { get; }
    public static string StarTooltip { get; }
    public static string Summary { get; }
    public static string Tag { get; }
    public static string Testmethods { get; }
    public static string Top { get; }
    public static string Total { get; }
    public static string TotalBranches { get; }
    public static string TotalCodeElements { get; }
    public static string TotalLines { get; }
    public static string Uncovered { get; }
    public static string UncoveredLines { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_All();
    public static string get_AllChanges();
    public static string get_Assemblies();
    public static string get_Assemblies2();
    public static string get_Assembly();
    public static string get_Assembly2();
    public static string get_BlocksCovered();
    public static string get_BlocksNotCovered();
    public static string get_Branch();
    public static string get_BranchCoverage();
    public static string get_BranchCoverage2();
    public static string get_BranchCoverageDecreaseOnly();
    public static string get_BranchCoverageIncreaseOnly();
    public static string get_Branches();
    public static string get_ByAssembly();
    public static string get_ByNamespace();
    public static string get_Class();
    public static string get_Class2();
    public static string get_Classes();
    public static string get_CodeCoverage();
    public static string get_CodeElementCoverageDecreaseOnly();
    public static string get_CodeElementCoverageIncreaseOnly();
    public static string get_CodeElementCoverageQuota();
    public static string get_CodeElementCoverageQuota2();
    public static string get_CollapseAll();
    public static string get_CompareHistory();
    public static string get_Coverable();
    public static string get_CoverableLines();
    public static string get_Coverage();
    public static string get_Coverage2();
    public static string get_Coverage3();
    public static string get_CoverageDate();
    public static string get_CoverageReport();
    public static string get_CoverageTooltip_Covered();
    public static string get_CoverageTooltip_NotCoverable();
    public static string get_CoverageTooltip_NotCovered();
    public static string get_CoverageTooltip_PartiallyCovered();
    public static string get_CoverageTypes();
    public static string get_Covered();
    public static string get_CoveredBranches();
    public static string get_CoveredBranches2();
    public static string get_CoveredCodeElements();
    public static string get_CoveredLines();
    public static string get_CrapScore();
    public static string get_Current();
    public static string get_CyclomaticComplexity();
    public static string get_Date();
    public static string get_Delta();
    public static string get_DeltaSummary();
    public static string get_Description();
    public static string get_ExpandAll();
    public static string get_File();
    public static string get_Files();
    public static string get_Files2();
    public static string get_Files3();
    public static string get_Filter();
    public static string get_GeneratedBy();
    public static string get_GeneratedOn();
    public static string get_Grouping();
    public static string get_History();
    public static string get_Information();
    public static string get_Line();
    public static string get_LineCoverageDecreaseOnly();
    public static string get_LineCoverageIncreaseOnly();
    public static string get_Method();
    public static string get_MethodCoverageProButton();
    public static string get_MethodCoverageProVersion();
    public static string get_MethodsProperties();
    public static string get_Metrics();
    public static string get_Name();
    public static string get_NoCoveredAssemblies();
    public static string get_NoFilesFound();
    public static string get_NoGrouping();
    public static string get_NoRiskHotspots();
    public static string get_NotAvailable();
    public static string get_NPathComplexity();
    public static string get_Of();
    public static string get_Parser();
    public static string get_Percentage();
    public static string get_Previous();
    public static string get_RiskHotspots();
    public static string get_SelectCoverageTypes();
    public static string get_SelectCoverageTypesAndMetrics();
    public static string get_SequenceCoverage();
    public static string get_Sponsor();
    public static string get_SponsorTooltip();
    public static string get_Star();
    public static string get_StarTooltip();
    public static string get_Summary();
    public static string get_Tag();
    public static string get_Testmethods();
    public static string get_Top();
    public static string get_Total();
    public static string get_TotalBranches();
    public static string get_TotalCodeElements();
    public static string get_TotalLines();
    public static string get_Uncovered();
    public static string get_UncoveredLines();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Palmmedia.ReportGenerator.Core.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddedCoverageInformationOfProperties { get; }
    internal static string AddedCoverageInformationOfPropertiesOpenCover { get; }
    internal static string AddedCoverageInformationUnexecutedMethods { get; }
    internal static string AnalyzingClasses { get; }
    internal static string Arguments { get; }
    internal static string CreatingHistoryReport { get; }
    internal static string CreatingReport { get; }
    internal static string CreatingSummary { get; }
    internal static string CssNotSaved { get; }
    internal static string CurrentAssembly { get; }
    internal static string DefaultReportBuilderReplaced { get; }
    internal static string DuplicateCommandLineParameter { get; }
    internal static string ErrorCoverageFormat { get; }
    internal static string ErrorDeltaReport { get; }
    internal static string ErrorDuringDeserializingLicense { get; }
    internal static string ErrorDuringReadingFile { get; }
    internal static string ErrorDuringReadingHistoricReport { get; }
    internal static string ErrorDuringReadingHistoricReports { get; }
    internal static string ErrorDuringReadingReport { get; }
    internal static string ErrorDuringRenderingClassReport { get; }
    internal static string ErrorDuringRenderingSummaryReport { get; }
    internal static string ErrorDuringSavingHistoricReport { get; }
    internal static string ErrorFontNotFound { get; }
    internal static string ErrorInvalidCoberturaReport { get; }
    internal static string ErrorInvalidDotCoverReport { get; }
    internal static string ErrorLowBranchCoverage { get; }
    internal static string ErrorLowLineCoverage { get; }
    internal static string ErrorLowMethodCoverage { get; }
    internal static string ErrorNotUniqueTrackedMethodUid { get; }
    internal static string ErrorPartCover { get; }
    internal static string Executable { get; }
    internal static string FailedReportFile { get; }
    internal static string FailedReportFilePattern { get; }
    internal static string FailedToInstantiatePlugin { get; }
    internal static string FailedToLoadPlugins { get; }
    internal static string FileDoesNotExist { get; }
    internal static string FileLoadError { get; }
    internal static string FileReflectionLoadError { get; }
    internal static string FinishedLoadingReport { get; }
    internal static string FinishedMergingResult { get; }
    internal static string FinishedParsingFile { get; }
    internal static string HistoryDirectoryCouldNotBeCreated { get; }
    internal static string IndexingClasses { get; }
    internal static string InitializingReportBuilders { get; }
    internal static string InitiatingParser { get; }
    internal static string InvalidFilter { get; }
    internal static string InvalidLicense { get; }
    internal static string LoadingReport { get; }
    internal static string MultipleErrors { get; }
    internal static string NoAssembliesHaveBeenCovered { get; }
    internal static string NoReportFiles { get; }
    internal static string NoSourceDirectories { get; }
    internal static string NoTargetDirectory { get; }
    internal static string NotExistingPlugin { get; }
    internal static string NotExistingReportFile { get; }
    internal static string OpenCoverProVersion { get; }
    internal static string ParseHistoricFile { get; }
    internal static string ParsingCompleted { get; }
    internal static string PluginsNotSupported { get; }
    internal static string PreprocessingReport { get; }
    internal static string RawModeProVersion { get; }
    internal static string ReadingHistoricReports { get; }
    internal static string ReportGenerationTook { get; }
    internal static string ReportParsingTook { get; }
    internal static string Settings { get; }
    internal static string SeveralCustomHistoryStorages { get; }
    internal static string SeveralCustomReportBuildersWithSameReportType { get; }
    internal static string SourceDirectoryDoesNotExist { get; }
    internal static string StartingMergingResult { get; }
    internal static string TargetDirectoryCouldNotBeCreated { get; }
    internal static string UnknownCommandLineParameter { get; }
    internal static string UnknownReportType { get; }
    internal static string UnknownVerbosityLevel { get; }
    internal static string WorkingDirectory { get; }
    internal static string WritingReportFile { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddedCoverageInformationOfProperties();
    internal static string get_AddedCoverageInformationOfPropertiesOpenCover();
    internal static string get_AddedCoverageInformationUnexecutedMethods();
    internal static string get_AnalyzingClasses();
    internal static string get_Arguments();
    internal static string get_CreatingHistoryReport();
    internal static string get_CreatingReport();
    internal static string get_CreatingSummary();
    internal static string get_CssNotSaved();
    internal static string get_CurrentAssembly();
    internal static string get_DefaultReportBuilderReplaced();
    internal static string get_DuplicateCommandLineParameter();
    internal static string get_ErrorCoverageFormat();
    internal static string get_ErrorDeltaReport();
    internal static string get_ErrorDuringDeserializingLicense();
    internal static string get_ErrorDuringReadingFile();
    internal static string get_ErrorDuringReadingHistoricReport();
    internal static string get_ErrorDuringReadingHistoricReports();
    internal static string get_ErrorDuringReadingReport();
    internal static string get_ErrorDuringRenderingClassReport();
    internal static string get_ErrorDuringRenderingSummaryReport();
    internal static string get_ErrorDuringSavingHistoricReport();
    internal static string get_ErrorFontNotFound();
    internal static string get_ErrorInvalidCoberturaReport();
    internal static string get_ErrorInvalidDotCoverReport();
    internal static string get_ErrorLowBranchCoverage();
    internal static string get_ErrorLowLineCoverage();
    internal static string get_ErrorLowMethodCoverage();
    internal static string get_ErrorNotUniqueTrackedMethodUid();
    internal static string get_ErrorPartCover();
    internal static string get_Executable();
    internal static string get_FailedReportFile();
    internal static string get_FailedReportFilePattern();
    internal static string get_FailedToInstantiatePlugin();
    internal static string get_FailedToLoadPlugins();
    internal static string get_FileDoesNotExist();
    internal static string get_FileLoadError();
    internal static string get_FileReflectionLoadError();
    internal static string get_FinishedLoadingReport();
    internal static string get_FinishedMergingResult();
    internal static string get_FinishedParsingFile();
    internal static string get_HistoryDirectoryCouldNotBeCreated();
    internal static string get_IndexingClasses();
    internal static string get_InitializingReportBuilders();
    internal static string get_InitiatingParser();
    internal static string get_InvalidFilter();
    internal static string get_InvalidLicense();
    internal static string get_LoadingReport();
    internal static string get_MultipleErrors();
    internal static string get_NoAssembliesHaveBeenCovered();
    internal static string get_NoReportFiles();
    internal static string get_NoSourceDirectories();
    internal static string get_NoTargetDirectory();
    internal static string get_NotExistingPlugin();
    internal static string get_NotExistingReportFile();
    internal static string get_OpenCoverProVersion();
    internal static string get_ParseHistoricFile();
    internal static string get_ParsingCompleted();
    internal static string get_PluginsNotSupported();
    internal static string get_PreprocessingReport();
    internal static string get_RawModeProVersion();
    internal static string get_ReadingHistoricReports();
    internal static string get_ReportGenerationTook();
    internal static string get_ReportParsingTook();
    internal static string get_Settings();
    internal static string get_SeveralCustomHistoryStorages();
    internal static string get_SeveralCustomReportBuildersWithSameReportType();
    internal static string get_SourceDirectoryDoesNotExist();
    internal static string get_StartingMergingResult();
    internal static string get_TargetDirectoryCouldNotBeCreated();
    internal static string get_UnknownCommandLineParameter();
    internal static string get_UnknownReportType();
    internal static string get_UnknownVerbosityLevel();
    internal static string get_WorkingDirectory();
    internal static string get_WritingReportFile();
}
public class Palmmedia.ReportGenerator.Core.ReportConfiguration : object {
    private List`1<string> reportFiles;
    private List`1<string> invalidReportFilePatterns;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <ReportTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <AssemblyFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <ClassFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <FileFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <RiskHotspotAssemblyFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <RiskHotspotClassFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private VerbosityLevel <VerbosityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <License>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerbosityLevelValid>k__BackingField;
    public IReadOnlyCollection`1<string> ReportFiles { get; }
    public string TargetDirectory { get; }
    public IReadOnlyCollection`1<string> SourceDirectories { get; }
    public string HistoryDirectory { get; }
    public IReadOnlyCollection`1<string> ReportTypes { get; }
    public IReadOnlyCollection`1<string> Plugins { get; }
    public IReadOnlyCollection`1<string> AssemblyFilters { get; }
    public IReadOnlyCollection`1<string> ClassFilters { get; }
    public IReadOnlyCollection`1<string> FileFilters { get; }
    public IReadOnlyCollection`1<string> RiskHotspotAssemblyFilters { get; }
    public IReadOnlyCollection`1<string> RiskHotspotClassFilters { get; }
    public VerbosityLevel VerbosityLevel { get; }
    public string Title { get; }
    public string License { get; }
    public string Tag { get; }
    public IReadOnlyCollection`1<string> InvalidReportFilePatterns { get; }
    public bool VerbosityLevelValid { get; private set; }
    public ReportConfiguration(IEnumerable`1<string> reportFilePatterns, string targetDirectory, IEnumerable`1<string> sourceDirectories, string historyDirectory, IEnumerable`1<string> reportTypes, IEnumerable`1<string> plugins, IEnumerable`1<string> assemblyFilters, IEnumerable`1<string> classFilters, IEnumerable`1<string> fileFilters, string verbosityLevel, string tag);
    public ReportConfiguration(IEnumerable`1<string> reportFilePatterns, string targetDirectory, IEnumerable`1<string> sourceDirectories, string historyDirectory, IEnumerable`1<string> reportTypes, IEnumerable`1<string> plugins, IEnumerable`1<string> assemblyFilters, IEnumerable`1<string> classFilters, IEnumerable`1<string> fileFilters, string verbosityLevel, string tag, string title);
    public ReportConfiguration(IEnumerable`1<string> reportFilePatterns, string targetDirectory, IEnumerable`1<string> sourceDirectories, string historyDirectory, IEnumerable`1<string> reportTypes, IEnumerable`1<string> plugins, IEnumerable`1<string> assemblyFilters, IEnumerable`1<string> classFilters, IEnumerable`1<string> fileFilters, IEnumerable`1<string> riskHotspotAssemblyFilters, IEnumerable`1<string> riskHotspotClassFilters, string verbosityLevel, string tag, string title, string license);
    public sealed virtual IReadOnlyCollection`1<string> get_ReportFiles();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_SourceDirectories();
    [CompilerGeneratedAttribute]
public sealed virtual string get_HistoryDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_ReportTypes();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_Plugins();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_AssemblyFilters();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_ClassFilters();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_FileFilters();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_RiskHotspotAssemblyFilters();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_RiskHotspotClassFilters();
    [CompilerGeneratedAttribute]
public sealed virtual VerbosityLevel get_VerbosityLevel();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual string get_License();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    public sealed virtual IReadOnlyCollection`1<string> get_InvalidReportFilePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_VerbosityLevelValid();
    [CompilerGeneratedAttribute]
private void set_VerbosityLevelValid(bool value);
}
public class Palmmedia.ReportGenerator.Core.ReportConfigurationBuilder : object {
    private static ILogger Logger;
    private static ReportConfigurationBuilder();
    public ReportConfiguration Create(Dictionary`2<string, string> cliArguments);
    internal ReportConfiguration Create(String[] args);
}
internal class Palmmedia.ReportGenerator.Core.ReportConfigurationValidator : object {
    private static ILogger Logger;
    private IReportBuilderFactory reportBuilderFactory;
    internal ReportConfigurationValidator(IReportBuilderFactory reportBuilderFactory);
    private static ReportConfigurationValidator();
    internal bool Validate(IReportConfiguration reportConfiguration);
}
internal class Palmmedia.ReportGenerator.Core.ReportContext : object {
    private IReadOnlyCollection`1<HistoricCoverage> overallHistoricCoverages;
    [CompilerGeneratedAttribute]
private IReportConfiguration <ReportConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Settings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private RiskHotspotAnalysisResult <RiskHotspotAnalysisResult>k__BackingField;
    public IReportConfiguration ReportConfiguration { get; }
    public Settings Settings { get; }
    public RiskHotspotAnalysisResult RiskHotspotAnalysisResult { get; public set; }
    public IReadOnlyCollection`1<HistoricCoverage> OverallHistoricCoverages { get; public set; }
    internal ReportContext(IReportConfiguration reportConfiguration, Settings settings);
    [CompilerGeneratedAttribute]
public sealed virtual IReportConfiguration get_ReportConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual Settings get_Settings();
    [CompilerGeneratedAttribute]
public sealed virtual RiskHotspotAnalysisResult get_RiskHotspotAnalysisResult();
    [CompilerGeneratedAttribute]
public void set_RiskHotspotAnalysisResult(RiskHotspotAnalysisResult value);
    public sealed virtual IReadOnlyCollection`1<HistoricCoverage> get_OverallHistoricCoverages();
    public void set_OverallHistoricCoverages(IReadOnlyCollection`1<HistoricCoverage> value);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.BadgeReportBuilder : object {
    private static string Template;
    private static string LineCoverageSymbol;
    private static string BranchCoverageSymbol;
    private static string MethodCoverageSymbol;
    private static string CoverageText;
    private static string CoverageTooltip;
    private static string ShieldsIoTemplate;
    private static Tuple`2[] ShieldIoColors;
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static BadgeReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private string CreateSvgBadge(SummaryResult summaryResult, bool includeLineCoverage, bool includeBranchCoverage, bool includeMethodCoverage);
    private string CreateShieldsIoSvgBadge(Nullable`1<decimal> coverage, string backgroundColor);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.CloverReportBuilder : object {
    private static ILogger Logger;
    private Dictionary`2<string, XElement> packageElementsByName;
    private Dictionary`2<XElement, int> totalLinesByFileElement;
    private Dictionary`2<XElement, int> coverableLinesByFileElement;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static CloverReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.CoberturaReportBuilder : object {
    private static ILogger Logger;
    private Dictionary`2<string, XElement> packageElementsByName;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static CoberturaReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private void AddLineElements(XElement parent, IEnumerable`1<LineAnalysis> lines, Double& lineRate, Double& branchRate);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.CodeClimateReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static CodeClimateReportBuilder();
    public virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.CsvSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static CsvSummaryReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlBlueRedReportBuilder : HtmlReportBuilderBase {
    private HtmlMode htmlMode;
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public HtmlBlueRedReportBuilder(bool externalCssAndJavaScriptWithQueryStringHandling);
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlBlueRedSummaryReportBuilder : HtmlReportBuilderBase {
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlChartReportBuilder : HtmlSummaryReportBuilder {
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateSummaryReport(IHtmlRenderer reportRenderer, SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlDarkReportBuilder : HtmlReportBuilderBase {
    private HtmlMode htmlMode;
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public HtmlDarkReportBuilder(bool externalCssAndJavaScriptWithQueryStringHandling);
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlInlineAzurePipelinesDarkReportBuilder : HtmlReportBuilderBase {
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlInlineAzurePipelinesLightReportBuilder : HtmlReportBuilderBase {
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlInlineAzurePipelinesReportBuilder : HtmlReportBuilderBase {
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlInlineCssAndJavaScriptReportBuilder : HtmlReportBuilderBase {
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlLightReportBuilder : HtmlReportBuilderBase {
    private HtmlMode htmlMode;
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public HtmlLightReportBuilder(bool externalCssAndJavaScriptWithQueryStringHandling);
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlReportBuilder : HtmlReportBuilderBase {
    private HtmlMode htmlMode;
    private IDictionary`2<string, string> fileNameByClass;
    public string ReportType { get; }
    public HtmlReportBuilder(bool externalCssAndJavaScriptWithQueryStringHandling);
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public abstract class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlReportBuilderBase : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static HtmlReportBuilderBase();
    public abstract virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public virtual void CreateClassReport(IHtmlRenderer reportRenderer, Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(IHtmlRenderer reportRenderer, SummaryResult summaryResult);
    public abstract virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public abstract virtual void CreateSummaryReport(SummaryResult summaryResult);
    protected string CreateTargetDirectory();
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.HtmlSummaryReportBuilder : HtmlReportBuilderBase {
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.JsonSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static JsonSummaryReportBuilder();
    public virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.LatexReportBuilder : LatexReportBuilderBase {
    private LatexRenderer renderer;
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class Palmmedia.ReportGenerator.Core.Reporting.Builders.LatexReportBuilderBase : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static LatexReportBuilderBase();
    public abstract virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public virtual void CreateClassReport(ILatexRenderer reportRenderer, Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(ILatexRenderer reportRenderer, SummaryResult summaryResult);
    public abstract virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public abstract virtual void CreateSummaryReport(SummaryResult summaryResult);
    protected string CreateTargetDirectory();
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.LatexSummaryReportBuilder : LatexReportBuilderBase {
    public string ReportType { get; }
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.LCovSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static LCovSummaryReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.MarkdownAssembliesSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static MarkdownAssembliesSummaryReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.MarkdownDeltaSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static MarkdownDeltaSummaryReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private string ReportTime(DateTime dateTime);
    private string ReportCoverageQuota(Nullable`1<decimal> optionalPreviousQuota, Nullable`1<decimal> optionalCurrentQuota);
    private string ReportValues(int previousValue, int currentValue);
    private string ReportValues(Nullable`1<int> previousValue, Nullable`1<int> currentValue);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.MarkdownSummaryGithubReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static MarkdownSummaryGithubReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private static string InsertLineBreaks(string text, int chunkLength, string separator);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.MarkdownSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static MarkdownSummaryReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.MhtmlReportBuilder : object {
    private static ILogger Logger;
    private IReportBuilder htmlReportBuilder;
    private IReportContext reportContext;
    private string htmlReportTargetDirectory;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static MhtmlReportBuilder();
    public sealed virtual string get_ReportType();
    public sealed virtual IReportContext get_ReportContext();
    public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private static void WriteFile(StreamWriter writer, string filePath, string contentType, string content);
    private static string AddFilePrefixForCssAndJavaScript(string content);
    private void CreateMhtmlFile();
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.OpenCoverReportBuilder : object {
    private static ILogger Logger;
    private Dictionary`2<string, XElement> packageElementsByName;
    private Dictionary`2<string, Dictionary`2<string, int>> fileIdByPathByName;
    private XNamespace xsiNamespace;
    private int fileCounter;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static OpenCoverReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private void AddSequenceAndBranchPoints(XElement sequencePointsElement, XElement branchPointsElement, CodeFile file, IEnumerable`1<LineAnalysis> lines, int fileId, Int32& coveredLines, Int32& coverableLines, Int32& methodVisits, Int32& coveredBranches, Int32& totalBranches);
    private decimal CalculateQuota(int covered, int total);
}
[ObsoleteAttribute("PngChart was replaced by SvgChart")]
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.PngChartReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static PngChartReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.Card : object {
    [CompilerGeneratedAttribute]
private bool <ProRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <SubTitlePercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<CardLineItem> <Rows>k__BackingField;
    public bool ProRequired { get; public set; }
    public string Title { get; }
    public string SubTitle { get; }
    public Nullable`1<decimal> SubTitlePercentage { get; }
    public IReadOnlyCollection`1<CardLineItem> Rows { get; }
    public Card(string title);
    public Card(string title, string subtitle, Nullable`1<decimal> subTitlePercentage, CardLineItem[] rows);
    [CompilerGeneratedAttribute]
public bool get_ProRequired();
    [CompilerGeneratedAttribute]
public void set_ProRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_SubTitle();
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_SubTitlePercentage();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<CardLineItem> get_Rows();
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.CardLineItem : object {
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private CardLineItemAlignment <Alignment>k__BackingField;
    public string Header { get; }
    public string Text { get; }
    public string Tooltip { get; }
    public IReadOnlyCollection`1<string> Links { get; }
    public CardLineItemAlignment Alignment { get; }
    public CardLineItem(string header, string text, string tooltip);
    public CardLineItem(string header, string text, string tooltip, CardLineItemAlignment alignment);
    public CardLineItem(string header, String[] links);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Links();
    [CompilerGeneratedAttribute]
public CardLineItemAlignment get_Alignment();
}
public enum Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.CardLineItemAlignment : Enum {
    public int value__;
    public static CardLineItemAlignment Right;
    public static CardLineItemAlignment Left;
}
internal enum Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.HtmlMode : Enum {
    public int value__;
    public static HtmlMode ExternalCssAndJavaScript;
    public static HtmlMode ExternalCssAndJavaScriptWithQueryStringHandling;
    public static HtmlMode InlineCssAndJavaScript;
}
internal class Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.HtmlRenderer : object {
    private static string CssLink;
    private static ILogger Logger;
    private static HashSet`1<string> WrittenCssAndJavascriptFiles;
    private IDictionary`2<string, string> fileNameByClass;
    private bool onlySummary;
    private HtmlMode htmlMode;
    private StringBuilder javaScriptContent;
    private string cssFileResource;
    private String[] additionalCssFileResources;
    private bool javaScriptGenerated;
    private TextWriter reportTextWriter;
    private bool classReport;
    internal HtmlRenderer(IDictionary`2<string, string> fileNameByClass, bool onlySummary, HtmlMode htmlMode, string cssFileResource, string additionalCssFileResource);
    internal HtmlRenderer(IDictionary`2<string, string> fileNameByClass, bool onlySummary, HtmlMode htmlMode, String[] additionalCssFileResources, string cssFileResource);
    private static HtmlRenderer();
    public sealed virtual void BeginSummaryReport(string targetDirectory, string fileName, string title);
    public sealed virtual void BeginClassReport(string targetDirectory, Assembly assembly, string className, string classDisplayName, string additionalTitle);
    public sealed virtual void Cards(IEnumerable`1<Card> cards);
    public sealed virtual void Header(string text);
    public sealed virtual void HeaderWithGithubLinks(string text);
    public sealed virtual void HeaderWithBackLink(string text);
    public sealed virtual void TestMethods(IEnumerable`1<TestMethod> testMethods, IEnumerable`1<FileAnalysis> fileAnalyses, IDictionary`2<int, IEnumerable`1<CodeElement>> codeElementsByFileIndex);
    public sealed virtual void File(string path);
    public sealed virtual void Paragraph(string text);
    public sealed virtual void BeginSummaryTable();
    public sealed virtual void FinishSummaryTable();
    public sealed virtual void BeginSummaryTable(bool branchCoverageAvailable, bool methodCoverageAvailable);
    public sealed virtual void CustomSummary(IEnumerable`1<Assembly> assemblies, IEnumerable`1<RiskHotspot> riskHotspots, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public sealed virtual void BeginLineAnalysisTable(IEnumerable`1<string> headers);
    public sealed virtual void MetricsTable(Class class);
    public sealed virtual void MetricsTable(IEnumerable`1<MethodMetric> methodMetrics);
    public sealed virtual void LineAnalysis(int fileIndex, LineAnalysis analysis);
    public sealed virtual void FinishTable();
    public sealed virtual void Chart(IEnumerable`1<HistoricCoverage> historicCoverages, bool methodCoverageAvailable);
    public sealed virtual void BeginRiskHotspots();
    public sealed virtual void FinishRiskHotspots();
    public sealed virtual void RiskHotspots(IEnumerable`1<RiskHotspot> riskHotspots);
    public sealed virtual void SummaryAssembly(Assembly assembly, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public sealed virtual void SummaryClass(Class class, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public sealed virtual void AddFooter();
    public sealed virtual void SaveSummaryReport(string targetDirectory);
    public sealed virtual void SaveClassReport(string targetDirectory, string className);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void WriteCoverageTable(TextWriter writer, string surroundingElement, Nullable`1<decimal> coverage);
    private static string ConvertToCssClass(LineVisitStatus lineVisitStatus, bool lightcolor);
    private static string GetTooltip(LineAnalysis analysis);
    private void WriteHtmlStart(TextWriter writer, string title, string subtitle);
    private string GetClassReportFilename(Assembly assembly, string className);
    private void SaveCss(string targetDirectory);
    private void SaveJavaScript(string targetDirectory);
    private void WriteCss(TextWriter writer);
    private void WriteCombinedJavascript(TextWriter writer);
    private void CreateTextWriter(string targetPath);
    private void SaveReport();
    private void FinishReport();
    private List`1<HistoricCoverage> FilterHistoricCoverages(IEnumerable`1<HistoricCoverage> historicCoverages, int maximum);
    [CompilerGeneratedAttribute]
private void <CustomSummary>g__WriteHistoricCoverage|26_5(<>c__DisplayClass26_0& , <>c__DisplayClass26_1& );
    [CompilerGeneratedAttribute]
private void <CustomSummary>g__WriteMetricsCoverage|26_6(<>c__DisplayClass26_0& , <>c__DisplayClass26_1& );
    [CompilerGeneratedAttribute]
private void <WriteCss>g__WriteWithFilteredUrls|50_0(string resourceName, <>c__DisplayClass50_0& );
}
public interface Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.IHtmlRenderer {
    public abstract virtual void BeginSummaryReport(string targetDirectory, string fileName, string title);
    public abstract virtual void BeginClassReport(string targetDirectory, Assembly assembly, string className, string classDisplayName, string additionalTitle);
    public abstract virtual void Cards(IEnumerable`1<Card> cards);
    public abstract virtual void Header(string text);
    public abstract virtual void HeaderWithGithubLinks(string text);
    public abstract virtual void HeaderWithBackLink(string text);
    public abstract virtual void TestMethods(IEnumerable`1<TestMethod> testMethods, IEnumerable`1<FileAnalysis> fileAnalyses, IDictionary`2<int, IEnumerable`1<CodeElement>> codeElementsByFileIndex);
    public abstract virtual void File(string path);
    public abstract virtual void Paragraph(string text);
    public abstract virtual void BeginSummaryTable();
    public abstract virtual void FinishSummaryTable();
    public abstract virtual void BeginSummaryTable(bool branchCoverageAvailable, bool methodCoverageAvailable);
    public abstract virtual void CustomSummary(IEnumerable`1<Assembly> assemblies, IEnumerable`1<RiskHotspot> riskHotspots, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public abstract virtual void BeginLineAnalysisTable(IEnumerable`1<string> headers);
    public abstract virtual void MetricsTable(Class class);
    public abstract virtual void MetricsTable(IEnumerable`1<MethodMetric> methodMetrics);
    public abstract virtual void LineAnalysis(int fileIndex, LineAnalysis analysis);
    public abstract virtual void FinishTable();
    public abstract virtual void Chart(IEnumerable`1<HistoricCoverage> historicCoverages, bool methodCoverageAvailable);
    public abstract virtual void BeginRiskHotspots();
    public abstract virtual void FinishRiskHotspots();
    public abstract virtual void RiskHotspots(IEnumerable`1<RiskHotspot> riskHotspots);
    public abstract virtual void SummaryAssembly(Assembly assembly, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public abstract virtual void SummaryClass(Class class, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public abstract virtual void AddFooter();
    public abstract virtual void SaveSummaryReport(string targetDirectory);
    public abstract virtual void SaveClassReport(string targetDirectory, string className);
}
public interface Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.ILatexRenderer {
    public abstract virtual void BeginSummaryReport();
    public abstract virtual void BeginClassReport(string targetDirectory, string classDisplayName);
    public abstract virtual void Header(string text);
    public abstract virtual void File(string path);
    public abstract virtual void Paragraph(string text);
    public abstract virtual void BeginKeyValueTable();
    public abstract virtual void BeginSummaryTable(bool branchCoverageAvailable, bool methodCoverageAvailable);
    public abstract virtual void BeginLineAnalysisTable(IEnumerable`1<string> headers);
    public abstract virtual void KeyValueRow(string key, string value);
    public abstract virtual void KeyValueRow(string key, IEnumerable`1<string> files);
    public abstract virtual void MetricsTable(Class class);
    public abstract virtual void MetricsTable(IEnumerable`1<MethodMetric> methodMetrics);
    public abstract virtual void LineAnalysis(int fileIndex, LineAnalysis analysis);
    public abstract virtual void FinishTable();
    public abstract virtual void RiskHotspots(IEnumerable`1<RiskHotspot> riskHotspots);
    public abstract virtual void SummaryAssembly(Assembly assembly, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public abstract virtual void SummaryClass(Class class, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public abstract virtual void SaveSummaryReport(string targetDirectory);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.LatexRenderer : object {
    private static string LatexStart;
    private static string LatexEnd;
    private static ILogger Logger;
    private TextWriter reportTextWriter;
    private TextWriter summaryReportTextWriter;
    private TextWriter classReportTextWriter;
    private Stream summaryReportStream;
    private Stream classReportStream;
    private static LatexRenderer();
    public sealed virtual void BeginSummaryReport();
    public sealed virtual void BeginClassReport(string targetDirectory, string classDisplayName);
    public sealed virtual void Header(string text);
    public sealed virtual void File(string path);
    public sealed virtual void Paragraph(string text);
    public sealed virtual void BeginKeyValueTable();
    public sealed virtual void BeginSummaryTable(bool branchCoverageAvailable, bool methodCoverageAvailable);
    public sealed virtual void BeginLineAnalysisTable(IEnumerable`1<string> headers);
    public sealed virtual void KeyValueRow(string key, string value);
    public sealed virtual void KeyValueRow(string key, IEnumerable`1<string> files);
    public sealed virtual void MetricsTable(Class class);
    public sealed virtual void MetricsTable(IEnumerable`1<MethodMetric> methodMetrics);
    public sealed virtual void LineAnalysis(int fileIndex, LineAnalysis analysis);
    public sealed virtual void FinishTable();
    public sealed virtual void RiskHotspots(IEnumerable`1<RiskHotspot> riskHotspots);
    public sealed virtual void SummaryAssembly(Assembly assembly, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public sealed virtual void SummaryClass(Class class, bool branchCoverageAvailable, bool methodCoverageAvailable);
    public sealed virtual void SaveSummaryReport(string targetDirectory);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static string ShortenString(string text);
    private static string ShortenString(string text, int maxLength);
    private static string EscapeLatexChars(string text);
}
public static class Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.StringHelper : object {
    public static string ReplaceInvalidPathChars(string path);
    public static string ReplaceNonLetterChars(string text);
    public static string ReplaceInvalidXmlChars(string text);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.Builders.Rendering.SvgHistoryChartRenderer : object {
    public static string RenderHistoryChart(IReadOnlyList`1<HistoricCoverage> historicCoverages, bool methodCoverageAvailable);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.SonarQubeBuilder : object {
    private static ILogger Logger;
    private Dictionary`2<string, XElement> fileElementsByName;
    private XDocument document;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static SonarQubeBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private static void AddLineElements(XElement parent, IEnumerable`1<LineAnalysis> lines, bool existingFile);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.SvgChartReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static SvgChartReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private List`1<HistoricCoverage> FilterHistoricCoverages(IEnumerable`1<HistoricCoverage> historicCoverages, int maximum);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.TeamCitySummaryReportBuilder : object {
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private static void WriteStatistics(char type, decimal covered, decimal total);
    private static void WriteStatistic(string name, decimal value);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.TextDeltaSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static TextDeltaSummaryReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    private string ReportTime(DateTime dateTime);
    private string ReportCoverageQuota(Nullable`1<decimal> optionalPreviousQuota, Nullable`1<decimal> optionalCurrentQuota);
    private string ReportValues(int previousValue, int currentValue);
    private string ReportValues(Nullable`1<int> previousValue, Nullable`1<int> currentValue);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.TextSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static TextSummaryReportBuilder();
    public sealed virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public sealed virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.XmlReportBuilder : XmlSummaryReportBuilder {
    private static ILogger Logger;
    private static Dictionary`2<string, string> FileNameByClass;
    public string ReportType { get; }
    private static XmlReportBuilder();
    public virtual string get_ReportType();
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    private static string GetClassReportFilename(string assemblyName, string className);
}
public class Palmmedia.ReportGenerator.Core.Reporting.Builders.XmlSummaryReportBuilder : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private IReportContext <ReportContext>k__BackingField;
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    private static XmlSummaryReportBuilder();
    public virtual string get_ReportType();
    [CompilerGeneratedAttribute]
public sealed virtual IReportContext get_ReportContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportContext(IReportContext value);
    public virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public sealed virtual void CreateSummaryReport(SummaryResult summaryResult);
    protected string CreateTargetDirectory();
}
internal static class Palmmedia.ReportGenerator.Core.Reporting.GitHelper : object {
    public static GitInformation GetGitInformation();
    public static string GetFileHash(string path);
    private static string ExecuteGitCommand(string arguments);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.GitInformation : object {
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeStamp>k__BackingField;
    public string Branch { get; public set; }
    public string Sha { get; public set; }
    public string TimeStamp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_TimeStamp();
    [CompilerGeneratedAttribute]
public void set_TimeStamp(string value);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.History.FileHistoryStorage : object {
    private string historyDirectory;
    public FileHistoryStorage(string historyDirectory);
    public sealed virtual IEnumerable`1<string> GetHistoryFilePaths();
    public sealed virtual Stream LoadFile(string filePath);
    public sealed virtual void SaveFile(Stream stream, string fileName);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.History.HistoryParser : object {
    private static ILogger Logger;
    private IHistoryStorage historyStorage;
    private int maximumNumberOfHistoricCoverageFiles;
    private int numberOfReportsParsedInParallel;
    internal HistoryParser(IHistoryStorage historyStorage, int maximumNumberOfHistoricCoverageFiles, int numberOfReportsParsedInParallel);
    private static HistoryParser();
    internal void ApplyHistoricCoverage(IEnumerable`1<Assembly> assemblies, List`1<HistoricCoverage> overallHistoricCoverages);
    private IEnumerable`1<HistoricCoverage> ParseHistoricFile(IDictionary`2<string, Class> classes, XDocument document, DateTime date, string tag);
    private string GetFullClassName(string assemblyName, string className);
    private XDocument LoadXDocument(string file);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.History.HistoryReportGenerator : object {
    private static ILogger Logger;
    private IHistoryStorage historyStorage;
    private string customfilePrefix;
    internal HistoryReportGenerator(IHistoryStorage historyStorage, string customfilePrefix);
    private static HistoryReportGenerator();
    internal void CreateReport(IEnumerable`1<Assembly> assemblies, DateTime executionTime, string tag);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.History.HistoryStorageFactory : object {
    private static ILogger Logger;
    private IPluginLoader pluginLoader;
    public HistoryStorageFactory(IPluginLoader pluginLoader);
    private static HistoryStorageFactory();
    public IHistoryStorage GetHistoryStorage(IReportConfiguration reportConfiguration);
}
public interface Palmmedia.ReportGenerator.Core.Reporting.History.IHistoryStorage {
    public abstract virtual IEnumerable`1<string> GetHistoryFilePaths();
    public abstract virtual Stream LoadFile(string filePath);
    public abstract virtual void SaveFile(Stream stream, string fileName);
}
public interface Palmmedia.ReportGenerator.Core.Reporting.IReportBuilder {
    public string ReportType { get; }
    public IReportContext ReportContext { get; public set; }
    public abstract virtual string get_ReportType();
    public abstract virtual IReportContext get_ReportContext();
    public abstract virtual void set_ReportContext(IReportContext value);
    public abstract virtual void CreateClassReport(Class class, IEnumerable`1<FileAnalysis> fileAnalyses);
    public abstract virtual void CreateSummaryReport(SummaryResult summaryResult);
}
public interface Palmmedia.ReportGenerator.Core.Reporting.IReportBuilderFactory {
    public abstract virtual IEnumerable`1<string> GetAvailableReportTypes();
    public abstract virtual IEnumerable`1<IReportBuilder> GetReportBuilders(IReportContext reportContext);
}
public interface Palmmedia.ReportGenerator.Core.Reporting.IReportConfiguration {
    public IReadOnlyCollection`1<string> ReportFiles { get; }
    public string TargetDirectory { get; }
    public IReadOnlyCollection`1<string> SourceDirectories { get; }
    public string HistoryDirectory { get; }
    public IReadOnlyCollection`1<string> ReportTypes { get; }
    public IReadOnlyCollection`1<string> Plugins { get; }
    public IReadOnlyCollection`1<string> AssemblyFilters { get; }
    public IReadOnlyCollection`1<string> ClassFilters { get; }
    public IReadOnlyCollection`1<string> FileFilters { get; }
    public IReadOnlyCollection`1<string> RiskHotspotAssemblyFilters { get; }
    public IReadOnlyCollection`1<string> RiskHotspotClassFilters { get; }
    public VerbosityLevel VerbosityLevel { get; }
    public string Tag { get; }
    public string Title { get; }
    public string License { get; }
    public IReadOnlyCollection`1<string> InvalidReportFilePatterns { get; }
    public bool VerbosityLevelValid { get; }
    public abstract virtual IReadOnlyCollection`1<string> get_ReportFiles();
    public abstract virtual string get_TargetDirectory();
    public abstract virtual IReadOnlyCollection`1<string> get_SourceDirectories();
    public abstract virtual string get_HistoryDirectory();
    public abstract virtual IReadOnlyCollection`1<string> get_ReportTypes();
    public abstract virtual IReadOnlyCollection`1<string> get_Plugins();
    public abstract virtual IReadOnlyCollection`1<string> get_AssemblyFilters();
    public abstract virtual IReadOnlyCollection`1<string> get_ClassFilters();
    public abstract virtual IReadOnlyCollection`1<string> get_FileFilters();
    public abstract virtual IReadOnlyCollection`1<string> get_RiskHotspotAssemblyFilters();
    public abstract virtual IReadOnlyCollection`1<string> get_RiskHotspotClassFilters();
    public abstract virtual VerbosityLevel get_VerbosityLevel();
    public abstract virtual string get_Tag();
    public abstract virtual string get_Title();
    public abstract virtual string get_License();
    public abstract virtual IReadOnlyCollection`1<string> get_InvalidReportFilePatterns();
    public abstract virtual bool get_VerbosityLevelValid();
}
public interface Palmmedia.ReportGenerator.Core.Reporting.IReportContext {
    public IReportConfiguration ReportConfiguration { get; }
    public Settings Settings { get; }
    public RiskHotspotAnalysisResult RiskHotspotAnalysisResult { get; }
    public IReadOnlyCollection`1<HistoricCoverage> OverallHistoricCoverages { get; }
    public abstract virtual IReportConfiguration get_ReportConfiguration();
    public abstract virtual Settings get_Settings();
    public abstract virtual RiskHotspotAnalysisResult get_RiskHotspotAnalysisResult();
    public abstract virtual IReadOnlyCollection`1<HistoricCoverage> get_OverallHistoricCoverages();
}
internal class Palmmedia.ReportGenerator.Core.Reporting.ReportBuilderFactory : object {
    private static ILogger Logger;
    private IPluginLoader pluginLoader;
    public ReportBuilderFactory(IPluginLoader pluginLoader);
    private static ReportBuilderFactory();
    public sealed virtual IEnumerable`1<string> GetAvailableReportTypes();
    public sealed virtual IEnumerable`1<IReportBuilder> GetReportBuilders(IReportContext reportContext);
}
internal class Palmmedia.ReportGenerator.Core.Reporting.ReportGenerator : object {
    private static ILogger Logger;
    private IFileReader fileReader;
    private ParserResult parserResult;
    private IEnumerable`1<IReportBuilder> renderers;
    internal ReportGenerator(IFileReader fileReader, ParserResult parserResult, IEnumerable`1<IReportBuilder> renderers);
    private static ReportGenerator();
    internal void CreateReport(bool addHistoricCoverage, List`1<HistoricCoverage> overallHistoricCoverages, DateTime executionTime, string tag);
    [CompilerGeneratedAttribute]
private FileAnalysis <CreateReport>b__5_1(CodeFile f);
}
public class Palmmedia.ReportGenerator.Core.Settings : object {
    [CompilerGeneratedAttribute]
private int <NumberOfReportsParsedInParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfReportsMergedInParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumNumberOfHistoricCoverageFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CachingDurationOfRemoteFilesInMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRiskHotspots>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeTestProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateSubdirectoryForAllReportTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomHeadersForRemoteFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultAssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumDecimalPlacesForCoverageQuotas>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryFileNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RawMode>k__BackingField;
    public int NumberOfReportsParsedInParallel { get; public set; }
    public int NumberOfReportsMergedInParallel { get; public set; }
    public int MaximumNumberOfHistoricCoverageFiles { get; public set; }
    public int CachingDurationOfRemoteFilesInMinutes { get; public set; }
    [ObsoleteAttribute("Replaced by 'CachingDurationOfRemoteFilesInMinutes'.")]
public int CachingDuringOfRemoteFilesInMinutes { get; public set; }
    public bool DisableRiskHotspots { get; public set; }
    public bool ExcludeTestProjects { get; public set; }
    public bool CreateSubdirectoryForAllReportTypes { get; public set; }
    public string CustomHeadersForRemoteFiles { get; public set; }
    public string DefaultAssemblyName { get; public set; }
    public int MaximumDecimalPlacesForCoverageQuotas { get; public set; }
    public string HistoryFileNamePrefix { get; public set; }
    public bool RawMode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NumberOfReportsParsedInParallel();
    [CompilerGeneratedAttribute]
public void set_NumberOfReportsParsedInParallel(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfReportsMergedInParallel();
    [CompilerGeneratedAttribute]
public void set_NumberOfReportsMergedInParallel(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumNumberOfHistoricCoverageFiles();
    [CompilerGeneratedAttribute]
public void set_MaximumNumberOfHistoricCoverageFiles(int value);
    [CompilerGeneratedAttribute]
public int get_CachingDurationOfRemoteFilesInMinutes();
    [CompilerGeneratedAttribute]
public void set_CachingDurationOfRemoteFilesInMinutes(int value);
    public int get_CachingDuringOfRemoteFilesInMinutes();
    public void set_CachingDuringOfRemoteFilesInMinutes(int value);
    [CompilerGeneratedAttribute]
public bool get_DisableRiskHotspots();
    [CompilerGeneratedAttribute]
public void set_DisableRiskHotspots(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeTestProjects();
    [CompilerGeneratedAttribute]
public void set_ExcludeTestProjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateSubdirectoryForAllReportTypes();
    [CompilerGeneratedAttribute]
public void set_CreateSubdirectoryForAllReportTypes(bool value);
    [CompilerGeneratedAttribute]
public string get_CustomHeadersForRemoteFiles();
    [CompilerGeneratedAttribute]
public void set_CustomHeadersForRemoteFiles(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultAssemblyName();
    [CompilerGeneratedAttribute]
public void set_DefaultAssemblyName(string value);
    [CompilerGeneratedAttribute]
public int get_MaximumDecimalPlacesForCoverageQuotas();
    [CompilerGeneratedAttribute]
public void set_MaximumDecimalPlacesForCoverageQuotas(int value);
    [CompilerGeneratedAttribute]
public string get_HistoryFileNamePrefix();
    [CompilerGeneratedAttribute]
public void set_HistoryFileNamePrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_RawMode();
    [CompilerGeneratedAttribute]
public void set_RawMode(bool value);
}
