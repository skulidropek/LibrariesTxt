internal class McMaster.NETCore.Plugins.Internal.Debouncer : object {
    [NullableAttribute("1")]
private CancellationTokenSource _cts;
    private TimeSpan _waitTime;
    private int _counter;
    public Debouncer(TimeSpan waitTime);
    [NullableContextAttribute("1")]
public void Execute(Action action);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name} = {AdditionalProbingPath}")]
public class McMaster.NETCore.Plugins.LibraryModel.ManagedLibrary : object {
    [CompilerGeneratedAttribute]
private AssemblyName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalProbingPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppLocalPath>k__BackingField;
    public AssemblyName Name { get; private set; }
    public string AdditionalProbingPath { get; private set; }
    public string AppLocalPath { get; private set; }
    private ManagedLibrary(AssemblyName name, string additionalProbingPath, string appLocalPath);
    [CompilerGeneratedAttribute]
public AssemblyName get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(AssemblyName value);
    [CompilerGeneratedAttribute]
public string get_AdditionalProbingPath();
    [CompilerGeneratedAttribute]
private void set_AdditionalProbingPath(string value);
    [CompilerGeneratedAttribute]
public string get_AppLocalPath();
    [CompilerGeneratedAttribute]
private void set_AppLocalPath(string value);
    public static ManagedLibrary CreateFromPackage(string packageId, string packageVersion, string assetPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name} = {AdditionalProbingPath}")]
public class McMaster.NETCore.Plugins.LibraryModel.NativeLibrary : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppLocalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalProbingPath>k__BackingField;
    public string Name { get; private set; }
    public string AppLocalPath { get; private set; }
    public string AdditionalProbingPath { get; private set; }
    private NativeLibrary(string name, string appLocalPath, string additionalProbingPath);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AppLocalPath();
    [CompilerGeneratedAttribute]
private void set_AppLocalPath(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalProbingPath();
    [CompilerGeneratedAttribute]
private void set_AdditionalProbingPath(string value);
    public static NativeLibrary CreateFromPackage(string packageId, string packageVersion, string assetPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.NETCore.Plugins.Loader.AssemblyLoadContextBuilder : object {
    private List`1<string> _additionalProbingPaths;
    private List`1<string> _resourceProbingPaths;
    private List`1<string> _resourceProbingSubpaths;
    private Dictionary`2<string, ManagedLibrary> _managedLibraries;
    private Dictionary`2<string, NativeLibrary> _nativeLibraries;
    private HashSet`1<string> _privateAssemblies;
    private HashSet`1<string> _defaultAssemblies;
    private AssemblyLoadContext _defaultLoadContext;
    [NullableAttribute("2")]
private string _mainAssemblyPath;
    private bool _preferDefaultLoadContext;
    private bool _lazyLoadReferences;
    private bool _isCollectible;
    private bool _loadInMemory;
    private bool _shadowCopyNativeLibraries;
    public AssemblyLoadContext Build();
    public AssemblyLoadContextBuilder SetMainAssemblyPath(string path);
    public AssemblyLoadContextBuilder SetDefaultContext(AssemblyLoadContext context);
    public AssemblyLoadContextBuilder PreferLoadContextAssembly(AssemblyName assemblyName);
    public AssemblyLoadContextBuilder PreferDefaultLoadContextAssembly(AssemblyName assemblyName);
    public AssemblyLoadContextBuilder PreferDefaultLoadContext(bool preferDefaultLoadContext);
    public AssemblyLoadContextBuilder IsLazyLoaded(bool isLazyLoaded);
    public AssemblyLoadContextBuilder AddManagedLibrary(ManagedLibrary library);
    public AssemblyLoadContextBuilder AddNativeLibrary(NativeLibrary library);
    public AssemblyLoadContextBuilder AddProbingPath(string path);
    public AssemblyLoadContextBuilder AddResourceProbingPath(string path);
    public AssemblyLoadContextBuilder EnableUnloading();
    public AssemblyLoadContextBuilder PreloadAssembliesIntoMemory();
    public AssemblyLoadContextBuilder ShadowCopyNativeLibraries();
    internal AssemblyLoadContextBuilder AddResourceProbingSubpath(string path);
    private static void ValidateRelativePath(string probingPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class McMaster.NETCore.Plugins.Loader.DependencyContextExtensions : object {
    [ExtensionAttribute]
public static AssemblyLoadContextBuilder TryAddDependencyContext(AssemblyLoadContextBuilder builder, string depsFilePath, Exception& error);
    [ExtensionAttribute]
public static AssemblyLoadContextBuilder AddDependencyContext(AssemblyLoadContextBuilder builder, string depsFilePath);
    private static string GetFallbackRid();
    [ExtensionAttribute]
public static AssemblyLoadContextBuilder AddDependencyContext(AssemblyLoadContextBuilder builder, DependencyContext dependencyContext);
    [ExtensionAttribute]
private static IEnumerable`1<ManagedLibrary> ResolveRuntimeAssemblies(DependencyContext depContext, RuntimeFallbacks runtimeGraph);
    [ExtensionAttribute]
private static IEnumerable`1<RuntimeLibrary> ResolveResourceAssemblies(DependencyContext depContext);
    [ExtensionAttribute]
private static IEnumerable`1<NativeLibrary> ResolveNativeAssets(DependencyContext depContext, RuntimeFallbacks runtimeGraph);
    private static IEnumerable`1<string> GetRids(RuntimeFallbacks runtimeGraph);
    private static IEnumerable`1<string> SelectAssets(IEnumerable`1<string> rids, IEnumerable`1<RuntimeAssetGroup> groups);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("'{Name}' ({_mainAssemblyPath})")]
internal class McMaster.NETCore.Plugins.Loader.ManagedLoadContext : AssemblyLoadContext {
    private string _basePath;
    private string _mainAssemblyPath;
    private IReadOnlyDictionary`2<string, ManagedLibrary> _managedAssemblies;
    private IReadOnlyDictionary`2<string, NativeLibrary> _nativeLibraries;
    private IReadOnlyCollection`1<string> _privateAssemblies;
    private ICollection`1<string> _defaultAssemblies;
    private IReadOnlyCollection`1<string> _additionalProbingPaths;
    private bool _preferDefaultLoadContext;
    private String[] _resourceRoots;
    private bool _loadInMemory;
    private bool _lazyLoadReferences;
    private AssemblyLoadContext _defaultLoadContext;
    private AssemblyDependencyResolver _dependencyResolver;
    private bool _shadowCopyNativeLibraries;
    private string _unmanagedDllShadowCopyDirectoryPath;
    public ManagedLoadContext(string mainAssemblyPath, IReadOnlyDictionary`2<string, ManagedLibrary> managedAssemblies, IReadOnlyDictionary`2<string, NativeLibrary> nativeLibraries, IReadOnlyCollection`1<string> privateAssemblies, IReadOnlyCollection`1<string> defaultAssemblies, IReadOnlyCollection`1<string> additionalProbingPaths, IReadOnlyCollection`1<string> resourceProbingPaths, AssemblyLoadContext defaultLoadContext, bool preferDefaultLoadContext, bool lazyLoadReferences, bool isCollectible, bool loadInMemory, bool shadowCopyNativeLibraries);
    protected virtual Assembly Load(AssemblyName assemblyName);
    public Assembly LoadAssemblyFromFilePath(string path);
    protected virtual IntPtr LoadUnmanagedDll(string unmanagedDllName);
    private bool SearchForLibrary(ManagedLibrary library, String& path);
    private bool SearchForLibrary(NativeLibrary library, string prefix, String& path);
    private IntPtr LoadUnmanagedDllFromResolvedPath(string unmanagedDllPath, bool normalizePath);
    private IntPtr LoadUnmanagedDllFromShadowCopy(string unmanagedDllPath);
    private string CreateShadowCopy(string dllPath);
    private void OnUnloaded();
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0(AssemblyLoadContext _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class McMaster.NETCore.Plugins.Loader.RuntimeConfigExtensions : object {
    private static string JsonExt;
    private static JsonSerializerOptions s_serializerOptions;
    private static RuntimeConfigExtensions();
    [ExtensionAttribute]
public static AssemblyLoadContextBuilder TryAddAdditionalProbingPathFromRuntimeConfig(AssemblyLoadContextBuilder builder, string runtimeConfigPath, bool includeDevConfig, Exception& error);
    private static void AddProbingPaths(AssemblyLoadContextBuilder builder, RuntimeOptions options, string tfm);
    private static RuntimeConfig TryReadConfig(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.NETCore.Plugins.PlatformInformation : object {
    public static String[] NativeLibraryExtensions;
    public static String[] NativeLibraryPrefixes;
    public static String[] ManagedAssemblyExtensions;
    private static PlatformInformation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.NETCore.Plugins.PluginConfig : object {
    [CompilerGeneratedAttribute]
private string <MainAssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<AssemblyName> <PrivateAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<AssemblyName> <SharedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferSharedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLazyLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyLoadContext <DefaultContext>k__BackingField;
    private bool _isUnloadable;
    private bool _loadInMemory;
    [CompilerGeneratedAttribute]
private bool <EnableHotReload>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ReloadDelay>k__BackingField;
    public string MainAssemblyPath { get; }
    public ICollection`1<AssemblyName> PrivateAssemblies { get; protected set; }
    public ICollection`1<AssemblyName> SharedAssemblies { get; protected set; }
    public bool PreferSharedTypes { get; public set; }
    public bool IsLazyLoaded { get; public set; }
    public AssemblyLoadContext DefaultContext { get; public set; }
    public bool IsUnloadable { get; public set; }
    public bool LoadInMemory { get; public set; }
    public bool EnableHotReload { get; public set; }
    public TimeSpan ReloadDelay { get; public set; }
    public PluginConfig(string mainAssemblyPath);
    [CompilerGeneratedAttribute]
public string get_MainAssemblyPath();
    [CompilerGeneratedAttribute]
public ICollection`1<AssemblyName> get_PrivateAssemblies();
    [CompilerGeneratedAttribute]
protected void set_PrivateAssemblies(ICollection`1<AssemblyName> value);
    [CompilerGeneratedAttribute]
public ICollection`1<AssemblyName> get_SharedAssemblies();
    [CompilerGeneratedAttribute]
protected void set_SharedAssemblies(ICollection`1<AssemblyName> value);
    [CompilerGeneratedAttribute]
public bool get_PreferSharedTypes();
    [CompilerGeneratedAttribute]
public void set_PreferSharedTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLazyLoaded();
    [CompilerGeneratedAttribute]
public void set_IsLazyLoaded(bool value);
    [CompilerGeneratedAttribute]
public AssemblyLoadContext get_DefaultContext();
    [CompilerGeneratedAttribute]
public void set_DefaultContext(AssemblyLoadContext value);
    public bool get_IsUnloadable();
    public void set_IsUnloadable(bool value);
    public bool get_LoadInMemory();
    public void set_LoadInMemory(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableHotReload();
    [CompilerGeneratedAttribute]
public void set_EnableHotReload(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ReloadDelay();
    [CompilerGeneratedAttribute]
public void set_ReloadDelay(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.NETCore.Plugins.PluginLoader : object {
    private PluginConfig _config;
    private ManagedLoadContext _context;
    private AssemblyLoadContextBuilder _contextBuilder;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    [NullableAttribute("2")]
private FileSystemWatcher _fileWatcher;
    [NullableAttribute("2")]
private Debouncer _debouncer;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PluginReloadedEventHandler Reloaded;
    public bool IsUnloadable { get; }
    internal AssemblyLoadContext LoadContext { get; }
    public PluginLoader(PluginConfig config);
    public static PluginLoader CreateFromAssemblyFile(string assemblyFile, bool isUnloadable, Type[] sharedTypes);
    public static PluginLoader CreateFromAssemblyFile(string assemblyFile, bool isUnloadable, Type[] sharedTypes, Action`1<PluginConfig> configure);
    public static PluginLoader CreateFromAssemblyFile(string assemblyFile, Type[] sharedTypes);
    public static PluginLoader CreateFromAssemblyFile(string assemblyFile, Type[] sharedTypes, Action`1<PluginConfig> configure);
    public static PluginLoader CreateFromAssemblyFile(string assemblyFile);
    public static PluginLoader CreateFromAssemblyFile(string assemblyFile, Action`1<PluginConfig> configure);
    public bool get_IsUnloadable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Reloaded(PluginReloadedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Reloaded(PluginReloadedEventHandler value);
    public void Reload();
    private void StartFileWatcher();
    private void OnFileChanged(object source, FileSystemEventArgs e);
    internal AssemblyLoadContext get_LoadContext();
    public Assembly LoadDefaultAssembly();
    public Assembly LoadAssembly(AssemblyName assemblyName);
    public Assembly LoadAssemblyFromPath(string assemblyPath);
    public Assembly LoadAssembly(string assemblyName);
    public ContextualReflectionScope EnterContextualReflection();
    public sealed virtual void Dispose();
    private void EnsureNotDisposed();
    private static AssemblyLoadContextBuilder CreateLoadContextBuilder(PluginConfig config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.NETCore.Plugins.PluginReloadedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PluginLoader <Loader>k__BackingField;
    public PluginLoader Loader { get; }
    public PluginReloadedEventArgs(PluginLoader loader);
    [CompilerGeneratedAttribute]
public PluginLoader get_Loader();
}
public class McMaster.NETCore.Plugins.PluginReloadedEventHandler : MulticastDelegate {
    public PluginReloadedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PluginReloadedEventArgs eventArgs);
    public virtual IAsyncResult BeginInvoke(object sender, PluginReloadedEventArgs eventArgs, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class McMaster.NETCore.Plugins.RuntimeConfig : object {
    [CompilerGeneratedAttribute]
private RuntimeOptions <runtimeOptions>k__BackingField;
    public RuntimeOptions runtimeOptions { get; public set; }
    [CompilerGeneratedAttribute]
public RuntimeOptions get_runtimeOptions();
    [CompilerGeneratedAttribute]
public void set_runtimeOptions(RuntimeOptions value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class McMaster.NETCore.Plugins.RuntimeOptions : object {
    [CompilerGeneratedAttribute]
private string <Tfm>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <AdditionalProbingPaths>k__BackingField;
    public string Tfm { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AdditionalProbingPaths { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Tfm();
    [CompilerGeneratedAttribute]
public void set_Tfm(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalProbingPaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalProbingPaths(String[] value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
