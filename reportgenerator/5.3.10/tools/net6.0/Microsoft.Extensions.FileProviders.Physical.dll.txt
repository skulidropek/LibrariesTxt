internal static class FxResources.Microsoft.Extensions.FileProviders.Physical.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.FileProviders.EmptyDisposable : object {
    [CompilerGeneratedAttribute]
private static EmptyDisposable <Instance>k__BackingField;
    [NullableAttribute("1")]
public static EmptyDisposable Instance { get; }
    private static EmptyDisposable();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static EmptyDisposable get_Instance();
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents : object {
    private IEnumerable`1<IFileInfo> _entries;
    private string _directory;
    private ExclusionFilters _filters;
    public bool Exists { get; }
    [NullableContextAttribute("1")]
public PhysicalDirectoryContents(string directory);
    [NullableContextAttribute("1")]
public PhysicalDirectoryContents(string directory, ExclusionFilters filters);
    public sealed virtual bool get_Exists();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [MemberNotNullAttribute("_entries")]
private void EnsureInitialized();
    [CompilerGeneratedAttribute]
private bool <EnsureInitialized>b__9_0(FileSystemInfo info);
}
[NullableContextAttribute("2")]
internal interface Microsoft.Extensions.FileProviders.IPollingChangeToken {
    public CancellationTokenSource CancellationTokenSource { get; }
    public abstract virtual CancellationTokenSource get_CancellationTokenSource();
}
internal class Microsoft.Extensions.FileProviders.Physical.Clock : object {
    [NullableAttribute("1")]
public static Clock Instance;
    public DateTime UtcNow { get; }
    private static Clock();
    public sealed virtual DateTime get_UtcNow();
}
[FlagsAttribute]
public enum Microsoft.Extensions.FileProviders.Physical.ExclusionFilters : Enum {
    public int value__;
    public static ExclusionFilters Sensitive;
    public static ExclusionFilters DotPrefixed;
    public static ExclusionFilters Hidden;
    public static ExclusionFilters System;
    public static ExclusionFilters None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.FileProviders.Physical.FileSystemInfoHelper : object {
    public static bool IsExcluded(FileSystemInfo fileSystemInfo, ExclusionFilters filters);
    public static Nullable`1<DateTime> GetFileLinkTargetLastWriteTimeUtc(string filePath);
    public static Nullable`1<DateTime> GetFileLinkTargetLastWriteTimeUtc(FileInfo fileInfo);
}
internal interface Microsoft.Extensions.FileProviders.Physical.IClock {
    public DateTime UtcNow { get; }
    public abstract virtual DateTime get_UtcNow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.FileProviders.Physical.Internal.PathUtils : object {
    private static Char[] _invalidFileNameChars;
    private static Char[] _invalidFilterChars;
    private static Char[] _pathSeparators;
    private static PathUtils();
    private static Char[] GetInvalidFileNameChars();
    private static Char[] GetInvalidFilterChars();
    internal static bool HasInvalidPathChars(string path);
    internal static bool HasInvalidFilterChars(string path);
    internal static string EnsureTrailingSlash(string path);
    internal static bool PathNavigatesAboveRoot(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo : object {
    private DirectoryInfo _info;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public PhysicalDirectoryInfo(DirectoryInfo info);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    public sealed virtual string get_PhysicalPath();
    public sealed virtual string get_Name();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo : object {
    private FileInfo _info;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public PhysicalFileInfo(FileInfo info);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    public sealed virtual string get_PhysicalPath();
    public sealed virtual string get_Name();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher : object {
    private static Action`1<object> _cancelTokenSource;
    internal static TimeSpan DefaultPollingInterval;
    private ConcurrentDictionary`2<string, ChangeTokenInfo> _filePathTokenLookup;
    private ConcurrentDictionary`2<string, ChangeTokenInfo> _wildcardTokenLookup;
    private FileSystemWatcher _fileWatcher;
    private object _fileWatcherLock;
    private string _root;
    private ExclusionFilters _filters;
    private Timer _timer;
    private bool _timerInitialized;
    private object _timerLock;
    private Func`1<Timer> _timerFactory;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private bool <PollForChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseActivePolling>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<IPollingChangeToken, IPollingChangeToken> <PollingChangeTokens>k__BackingField;
    internal bool PollForChanges { get; }
    internal bool UseActivePolling { get; internal set; }
    internal ConcurrentDictionary`2<IPollingChangeToken, IPollingChangeToken> PollingChangeTokens { get; }
    public PhysicalFilesWatcher(string root, FileSystemWatcher fileSystemWatcher, bool pollForChanges);
    public PhysicalFilesWatcher(string root, FileSystemWatcher fileSystemWatcher, bool pollForChanges, ExclusionFilters filters);
    private static PhysicalFilesWatcher();
    [CompilerGeneratedAttribute]
internal bool get_PollForChanges();
    [CompilerGeneratedAttribute]
internal bool get_UseActivePolling();
    [CompilerGeneratedAttribute]
internal void set_UseActivePolling(bool value);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<IPollingChangeToken, IPollingChangeToken> get_PollingChangeTokens();
    public IChangeToken CreateFileChangeToken(string filter);
    private IChangeToken GetOrAddChangeToken(string pattern);
    internal IChangeToken GetOrAddFilePathChangeToken(string filePath);
    internal IChangeToken GetOrAddWildcardChangeToken(string pattern);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
private void OnRenamed(object sender, RenamedEventArgs e);
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
private void OnChanged(object sender, FileSystemEventArgs e);
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
private void OnError(object sender, ErrorEventArgs e);
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
private void OnFileSystemEntryChange(string fullPath);
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
private void ReportChangeForMatchedEntries(string path);
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
private void TryDisableFileSystemWatcher();
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
private void TryEnableFileSystemWatcher();
    private static string NormalizePath(string filter);
    private static bool IsDirectoryPath(string path);
    private static void CancelToken(ChangeTokenInfo matchInfo);
    [NullableContextAttribute("2")]
internal static void RaiseChangeEvents(object state);
    [CompilerGeneratedAttribute]
private Timer <.ctor>b__14_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken : object {
    private FileInfo _fileInfo;
    private DateTime _previousWriteTimeUtc;
    private DateTime _lastCheckedTimeUtc;
    private bool _hasChanged;
    private CancellationTokenSource _tokenSource;
    private CancellationChangeToken _changeToken;
    [CompilerGeneratedAttribute]
private static TimeSpan <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActiveChangeCallbacks>k__BackingField;
    internal static TimeSpan PollingInterval { get; internal set; }
    public bool ActiveChangeCallbacks { get; internal set; }
    internal CancellationTokenSource CancellationTokenSource { get; internal set; }
    private CancellationTokenSource Microsoft.Extensions.FileProviders.IPollingChangeToken.CancellationTokenSource { get; }
    public bool HasChanged { get; }
    [NullableContextAttribute("1")]
public PollingFileChangeToken(FileInfo fileInfo);
    private static PollingFileChangeToken();
    [CompilerGeneratedAttribute]
internal static TimeSpan get_PollingInterval();
    [CompilerGeneratedAttribute]
internal static void set_PollingInterval(TimeSpan value);
    private DateTime GetLastWriteTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ActiveChangeCallbacks();
    [CompilerGeneratedAttribute]
internal void set_ActiveChangeCallbacks(bool value);
    internal CancellationTokenSource get_CancellationTokenSource();
    internal void set_CancellationTokenSource(CancellationTokenSource value);
    private sealed virtual override CancellationTokenSource Microsoft.Extensions.FileProviders.IPollingChangeToken.get_CancellationTokenSource();
    public sealed virtual bool get_HasChanged();
    [NullableContextAttribute("1")]
public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken : object {
    private static Byte[] Separator;
    private object _enumerationLock;
    private DirectoryInfoBase _directoryInfo;
    private Matcher _matcher;
    private bool _changed;
    private Nullable`1<DateTime> _lastScanTimeUtc;
    private Byte[] _byteBuffer;
    private Byte[] _previousHash;
    private CancellationTokenSource _tokenSource;
    private CancellationChangeToken _changeToken;
    [CompilerGeneratedAttribute]
private bool <ActiveChangeCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IClock <Clock>k__BackingField;
    public bool ActiveChangeCallbacks { get; internal set; }
    internal TimeSpan PollingInterval { get; internal set; }
    [NullableAttribute("2")]
internal CancellationTokenSource CancellationTokenSource { get; internal set; }
    [NullableAttribute("2")]
private CancellationTokenSource Microsoft.Extensions.FileProviders.IPollingChangeToken.CancellationTokenSource { get; }
    private IClock Clock { get; }
    public bool HasChanged { get; }
    public PollingWildCardChangeToken(string root, string pattern);
    internal PollingWildCardChangeToken(DirectoryInfoBase directoryInfo, string pattern, IClock clock);
    private static PollingWildCardChangeToken();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ActiveChangeCallbacks();
    [CompilerGeneratedAttribute]
internal void set_ActiveChangeCallbacks(bool value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_PollingInterval();
    [CompilerGeneratedAttribute]
internal void set_PollingInterval(TimeSpan value);
    [NullableContextAttribute("2")]
internal CancellationTokenSource get_CancellationTokenSource();
    [NullableContextAttribute("2")]
internal void set_CancellationTokenSource(CancellationTokenSource value);
    private sealed virtual override CancellationTokenSource Microsoft.Extensions.FileProviders.IPollingChangeToken.get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
private IClock get_Clock();
    public sealed virtual bool get_HasChanged();
    private bool CalculateChanges();
    protected virtual DateTime GetLastWriteUtc(string path);
    private static bool ArrayEquals(Byte[] previousHash, Byte[] currentHash);
    private void ComputeHash(IncrementalHash sha256, string path, DateTime lastChangedUtc);
    private sealed virtual override IDisposable Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.PhysicalFileProvider : object {
    private static string PollingEnvironmentKey;
    private static Char[] _pathSeparators;
    private ExclusionFilters _filters;
    private Func`1<PhysicalFilesWatcher> _fileWatcherFactory;
    private PhysicalFilesWatcher _fileWatcher;
    private bool _fileWatcherInitialized;
    private object _fileWatcherLock;
    private Nullable`1<bool> _usePollingFileWatcher;
    private Nullable`1<bool> _useActivePolling;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    public bool UsePollingFileWatcher { get; public set; }
    public bool UseActivePolling { get; public set; }
    internal PhysicalFilesWatcher FileWatcher { get; internal set; }
    public string Root { get; }
    public PhysicalFileProvider(string root);
    public PhysicalFileProvider(string root, ExclusionFilters filters);
    private static PhysicalFileProvider();
    public bool get_UsePollingFileWatcher();
    public void set_UsePollingFileWatcher(bool value);
    public bool get_UseActivePolling();
    public void set_UseActivePolling(bool value);
    internal PhysicalFilesWatcher get_FileWatcher();
    internal void set_FileWatcher(PhysicalFilesWatcher value);
    internal PhysicalFilesWatcher CreateFileWatcher();
    [MemberNotNullAttribute("_usePollingFileWatcher")]
[MemberNotNullAttribute("_useActivePolling")]
private void ReadPollingEnvironmentVariables();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public string get_Root();
    private string GetFullPath(string path);
    private bool IsUnderneathRoot(string fullPath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
}
internal static class Microsoft.Extensions.Internal.NonCapturingTimer : object {
    [NullableContextAttribute("1")]
public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Error_FileSystemWatcherRequiredWithoutPolling { get; }
    internal static string CannotCreateStream { get; }
    internal static string CannotModifyWhenFileWatcherInitialized { get; }
    internal static string Cryptography_HashAlgorithmNameNullOrEmpty { get; }
    internal static string UnexpectedFileSystemInfo { get; }
    internal static string FileSystemWatcher_PlatformNotSupported { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Error_FileSystemWatcherRequiredWithoutPolling();
    internal static string get_CannotCreateStream();
    internal static string get_CannotModifyWhenFileWatcherInitialized();
    internal static string get_Cryptography_HashAlgorithmNameNullOrEmpty();
    internal static string get_UnexpectedFileSystemInfo();
    internal static string get_FileSystemWatcher_PlatformNotSupported();
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
