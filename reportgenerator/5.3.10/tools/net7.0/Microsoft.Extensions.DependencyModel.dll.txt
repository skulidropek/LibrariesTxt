[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is obsolete and will be removed in a future version. The recommended alternative is System.HashCode.")]
public class Microsoft.DotNet.PlatformAbstractions.HashCodeCombiner : ValueType {
    private long _combinedHash64;
    public int CombinedHash { get; }
    private HashCodeCombiner(long seed);
    public int get_CombinedHash();
    public void Add(int i);
    public void Add(string s);
    public void Add(object o);
    public void Add(TValue value, IEqualityComparer`1<TValue> comparer);
    public static HashCodeCombiner Start();
}
internal static class Microsoft.Extensions.DependencyModel.ApplicationEnvironment : object {
    [CompilerGeneratedAttribute]
private static string <ApplicationBasePath>k__BackingField;
    public static string ApplicationBasePath { get; }
    private static ApplicationEnvironment();
    [CompilerGeneratedAttribute]
public static string get_ApplicationBasePath();
    private static string GetApplicationBasePath();
}
internal class Microsoft.Extensions.DependencyModel.ArrayBufferWriter : object {
    private Byte[] _rentedBuffer;
    private int _written;
    private static int MinimumBufferSize;
    public ArrayBufferWriter(int initialCapacity);
    public void CopyTo(Stream stream);
    public sealed virtual void Advance(int count);
    public sealed virtual void Dispose();
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    private void CheckAndResizeBuffer(int sizeHint);
}
public class Microsoft.Extensions.DependencyModel.CompilationLibrary : Library {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private static ICompilationAssemblyResolver <DefaultResolver>k__BackingField;
    public IReadOnlyList`1<string> Assemblies { get; }
    internal static ICompilationAssemblyResolver DefaultResolver { get; }
    public CompilationLibrary(string type, string name, string version, string hash, IEnumerable`1<string> assemblies, IEnumerable`1<Dependency> dependencies, bool serviceable);
    public CompilationLibrary(string type, string name, string version, string hash, IEnumerable`1<string> assemblies, IEnumerable`1<Dependency> dependencies, bool serviceable, string path, string hashPath);
    private static CompilationLibrary();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Assemblies();
    [CompilerGeneratedAttribute]
internal static ICompilationAssemblyResolver get_DefaultResolver();
    public IEnumerable`1<string> ResolveReferencePaths();
    public IEnumerable`1<string> ResolveReferencePaths(ICompilationAssemblyResolver[] customResolvers);
    private IEnumerable`1<string> ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1<string> assemblies);
}
public class Microsoft.Extensions.DependencyModel.CompilationOptions : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Defines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUnsafe>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Optimize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DelaySign>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublicSign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EmitEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <GenerateXmlDocumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private static CompilationOptions <Default>k__BackingField;
    public IReadOnlyList`1<string> Defines { get; }
    public string LanguageVersion { get; }
    public string Platform { get; }
    public Nullable`1<bool> AllowUnsafe { get; }
    public Nullable`1<bool> WarningsAsErrors { get; }
    public Nullable`1<bool> Optimize { get; }
    public string KeyFile { get; }
    public Nullable`1<bool> DelaySign { get; }
    public Nullable`1<bool> PublicSign { get; }
    public string DebugType { get; }
    public Nullable`1<bool> EmitEntryPoint { get; }
    public Nullable`1<bool> GenerateXmlDocumentation { get; }
    public static CompilationOptions Default { get; }
    public CompilationOptions(IEnumerable`1<string> defines, string languageVersion, string platform, Nullable`1<bool> allowUnsafe, Nullable`1<bool> warningsAsErrors, Nullable`1<bool> optimize, string keyFile, Nullable`1<bool> delaySign, Nullable`1<bool> publicSign, string debugType, Nullable`1<bool> emitEntryPoint, Nullable`1<bool> generateXmlDocumentation);
    private static CompilationOptions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Defines();
    [CompilerGeneratedAttribute]
public string get_LanguageVersion();
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUnsafe();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WarningsAsErrors();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Optimize();
    [CompilerGeneratedAttribute]
public string get_KeyFile();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DelaySign();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublicSign();
    [CompilerGeneratedAttribute]
public string get_DebugType();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EmitEntryPoint();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_GenerateXmlDocumentation();
    [CompilerGeneratedAttribute]
public static CompilationOptions get_Default();
}
public class Microsoft.Extensions.DependencyModel.Dependency : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; }
    public string Version { get; }
    public Dependency(string name, string version);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Version();
    public bool Equals(Dependency other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.Extensions.DependencyModel.DependencyContext : object {
    private static Lazy`1<DependencyContext> _defaultContext;
    [CompilerGeneratedAttribute]
private TargetInfo <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private CompilationOptions <CompilationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CompilationLibrary> <CompileLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RuntimeLibrary> <RuntimeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RuntimeFallbacks> <RuntimeGraph>k__BackingField;
    public static DependencyContext Default { get; }
    public TargetInfo Target { get; }
    public CompilationOptions CompilationOptions { get; }
    public IReadOnlyList`1<CompilationLibrary> CompileLibraries { get; }
    public IReadOnlyList`1<RuntimeLibrary> RuntimeLibraries { get; }
    public IReadOnlyList`1<RuntimeFallbacks> RuntimeGraph { get; }
    public DependencyContext(TargetInfo target, CompilationOptions compilationOptions, IEnumerable`1<CompilationLibrary> compileLibraries, IEnumerable`1<RuntimeLibrary> runtimeLibraries, IEnumerable`1<RuntimeFallbacks> runtimeGraph);
    private static DependencyContext();
    public static DependencyContext get_Default();
    [CompilerGeneratedAttribute]
public TargetInfo get_Target();
    [CompilerGeneratedAttribute]
public CompilationOptions get_CompilationOptions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CompilationLibrary> get_CompileLibraries();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RuntimeLibrary> get_RuntimeLibraries();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RuntimeFallbacks> get_RuntimeGraph();
    public DependencyContext Merge(DependencyContext other);
    private static DependencyContext LoadDefault();
    public static DependencyContext Load(Assembly assembly);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyModel.DependencyContextExtensions : object {
    private static string NativeImageSufix;
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDefaultNativeAssets(DependencyContext self);
    [ExtensionAttribute]
public static IEnumerable`1<RuntimeFile> GetDefaultNativeRuntimeFileAssets(DependencyContext self);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetRuntimeNativeAssets(DependencyContext self, string runtimeIdentifier);
    [ExtensionAttribute]
public static IEnumerable`1<RuntimeFile> GetRuntimeNativeRuntimeFileAssets(DependencyContext self, string runtimeIdentifier);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDefaultNativeAssets(RuntimeLibrary self, DependencyContext context);
    [ExtensionAttribute]
public static IEnumerable`1<RuntimeFile> GetDefaultNativeRuntimeFileAssets(RuntimeLibrary self, DependencyContext context);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetRuntimeNativeAssets(RuntimeLibrary self, DependencyContext context, string runtimeIdentifier);
    [ExtensionAttribute]
public static IEnumerable`1<RuntimeFile> GetRuntimeNativeRuntimeFileAssets(RuntimeLibrary self, DependencyContext context, string runtimeIdentifier);
    [ExtensionAttribute]
public static IEnumerable`1<AssemblyName> GetDefaultAssemblyNames(DependencyContext self);
    [ExtensionAttribute]
public static IEnumerable`1<AssemblyName> GetRuntimeAssemblyNames(DependencyContext self, string runtimeIdentifier);
    [ExtensionAttribute]
public static IEnumerable`1<AssemblyName> GetDefaultAssemblyNames(RuntimeLibrary self, DependencyContext context);
    [ExtensionAttribute]
public static IEnumerable`1<AssemblyName> GetRuntimeAssemblyNames(RuntimeLibrary self, DependencyContext context, string runtimeIdentifier);
    private static AssemblyName GetAssemblyName(string assetPath);
    private static IEnumerable`1<string> ResolveAssets(DependencyContext context, string runtimeIdentifier, IEnumerable`1<RuntimeAssetGroup> assets);
    private static IEnumerable`1<RuntimeFile> ResolveRuntimeFiles(DependencyContext context, string runtimeIdentifier, IEnumerable`1<RuntimeAssetGroup> assets);
    private static IEnumerable`1<string> SelectAssets(IEnumerable`1<string> rids, IEnumerable`1<RuntimeAssetGroup> groups);
    private static IEnumerable`1<RuntimeFile> SelectRuntimeFiles(IEnumerable`1<string> rids, IEnumerable`1<RuntimeAssetGroup> groups);
}
public class Microsoft.Extensions.DependencyModel.DependencyContextJsonReader : object {
    private IDictionary`2<string, string> _stringPool;
    private static int UnseekableStreamInitialRentSize;
    private static ReadOnlySpan`1<byte> Utf8Bom { get; }
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private DependencyContext ReadCore(UnifiedJsonReader reader);
    private static Target SelectRuntimeTarget(List`1<Target> targets, string runtimeTargetName);
    private static bool IsRuntimeTarget(string name);
    private static void ReadRuntimeTarget(UnifiedJsonReader& reader, String& runtimeTargetName, String& runtimeSignature);
    private static CompilationOptions ReadCompilationOptions(UnifiedJsonReader& reader);
    private List`1<Target> ReadTargets(UnifiedJsonReader& reader);
    private Target ReadTarget(UnifiedJsonReader& reader, string targetName);
    private TargetLibrary ReadTargetLibrary(UnifiedJsonReader& reader, string targetLibraryName);
    private IEnumerable`1<Dependency> ReadTargetLibraryDependencies(UnifiedJsonReader& reader);
    private static List`1<string> ReadPropertyNames(UnifiedJsonReader& reader);
    private static List`1<RuntimeFile> ReadRuntimeFiles(UnifiedJsonReader& reader);
    private List`1<RuntimeTargetEntryStub> ReadTargetLibraryRuntimeTargets(UnifiedJsonReader& reader);
    private List`1<ResourceAssembly> ReadTargetLibraryResources(UnifiedJsonReader& reader);
    private Dictionary`2<string, LibraryStub> ReadLibraries(UnifiedJsonReader& reader);
    private LibraryStub ReadOneLibrary(UnifiedJsonReader& reader);
    private static List`1<RuntimeFallbacks> ReadRuntimes(UnifiedJsonReader& reader);
    private IEnumerable`1<Library> CreateLibraries(IEnumerable`1<TargetLibrary> libraries, bool runtime, Dictionary`2<string, LibraryStub> libraryStubs);
    private Library CreateLibrary(TargetLibrary targetLibrary, bool runtime, Dictionary`2<string, LibraryStub> libraryStubs);
    private string Pool(string s);
    private static ReadOnlySpan`1<byte> get_Utf8Bom();
    public sealed virtual DependencyContext Read(Stream stream);
    private DependencyContext Read(Utf8JsonReader jsonReader);
    private static ArraySegment`1<byte> ReadToEnd(Stream stream);
}
public class Microsoft.Extensions.DependencyModel.DependencyContextLoader : object {
    private static string DepsJsonExtension;
    private string _entryPointDepsLocation;
    private IEnumerable`1<string> _nonEntryPointDepsPaths;
    private IFileSystem _fileSystem;
    private Func`1<IDependencyContextReader> _jsonReaderFactory;
    [CompilerGeneratedAttribute]
private static DependencyContextLoader <Default>k__BackingField;
    public static DependencyContextLoader Default { get; }
    internal DependencyContextLoader(string entryPointDepsLocation, IEnumerable`1<string> nonEntryPointDepsPaths, IFileSystem fileSystem, Func`1<IDependencyContextReader> jsonReaderFactory);
    private static DependencyContextLoader();
    [CompilerGeneratedAttribute]
public static DependencyContextLoader get_Default();
    private static bool IsEntryAssembly(Assembly assembly);
    private static Stream GetResourceStream(Assembly assembly, string name);
    public DependencyContext Load(Assembly assembly);
    private DependencyContext LoadEntryAssemblyContext(IDependencyContextReader reader);
    private DependencyContext LoadContext(IDependencyContextReader reader, string location);
    private DependencyContext LoadAssemblyContext(Assembly assembly, IDependencyContextReader reader);
    private string GetDepsJsonPath(Assembly assembly);
    private static string GetNormalizedCodeBasePath(Assembly assembly);
}
internal class Microsoft.Extensions.DependencyModel.DependencyContextPaths : object {
    private static string DepsFilesProperty;
    private static string FxDepsFileProperty;
    [CompilerGeneratedAttribute]
private static DependencyContextPaths <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <NonApplicationPaths>k__BackingField;
    public static DependencyContextPaths Current { get; }
    public string Application { get; }
    public string SharedRuntime { get; }
    public IEnumerable`1<string> NonApplicationPaths { get; }
    public DependencyContextPaths(string application, string sharedRuntime, IEnumerable`1<string> nonApplicationPaths);
    private static DependencyContextPaths();
    [CompilerGeneratedAttribute]
public static DependencyContextPaths get_Current();
    [CompilerGeneratedAttribute]
public string get_Application();
    [CompilerGeneratedAttribute]
public string get_SharedRuntime();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_NonApplicationPaths();
    private static DependencyContextPaths GetCurrent();
    internal static DependencyContextPaths Create(string depsFiles, string sharedRuntime);
}
internal class Microsoft.Extensions.DependencyModel.DependencyContextStrings : object {
    internal static char VersionSeparator;
    internal static string CompileTimeAssembliesKey;
    internal static string RuntimeAssembliesKey;
    internal static string NativeLibrariesKey;
    internal static string RuntimeTargetPropertyName;
    internal static string LibrariesPropertyName;
    internal static string TargetsPropertyName;
    internal static string DependenciesPropertyName;
    internal static string Sha512PropertyName;
    internal static string PathPropertyName;
    internal static string HashPathPropertyName;
    internal static string RuntimeStoreManifestPropertyName;
    internal static string TypePropertyName;
    internal static string ServiceablePropertyName;
    internal static string CompilationOptionsPropertName;
    internal static string DefinesPropertyName;
    internal static string LanguageVersionPropertyName;
    internal static string PlatformPropertyName;
    internal static string AllowUnsafePropertyName;
    internal static string WarningsAsErrorsPropertyName;
    internal static string OptimizePropertyName;
    internal static string KeyFilePropertyName;
    internal static string DelaySignPropertyName;
    internal static string PublicSignPropertyName;
    internal static string DebugTypePropertyName;
    internal static string EmitEntryPointPropertyName;
    internal static string GenerateXmlDocumentationPropertyName;
    internal static string PortablePropertyName;
    internal static string RuntimeTargetNamePropertyName;
    internal static string RuntimeTargetSignaturePropertyName;
    internal static string RuntimesPropertyName;
    internal static string RuntimeTargetsPropertyName;
    internal static string RidPropertyName;
    internal static string AssetTypePropertyName;
    internal static string RuntimeAssetType;
    internal static string NativeAssetType;
    internal static string ResourceAssembliesPropertyName;
    internal static string LocalePropertyName;
    internal static string CompilationOnlyPropertyName;
    internal static string AssemblyVersionPropertyName;
    internal static string FileVersionPropertyName;
}
public class Microsoft.Extensions.DependencyModel.DependencyContextWriter : object {
    private void WriteCore(DependencyContext context, UnifiedJsonWriter jsonWriter);
    private void WriteRuntimeTargetInfo(DependencyContext context, UnifiedJsonWriter& jsonWriter);
    private void WriteRuntimeGraph(DependencyContext context, UnifiedJsonWriter& jsonWriter);
    private void WriteCompilationOptions(CompilationOptions compilationOptions, UnifiedJsonWriter& jsonWriter);
    private void AddStringPropertyIfNotNull(string name, string value, UnifiedJsonWriter& jsonWriter);
    private void AddBooleanPropertyIfNotNull(string name, Nullable`1<bool> value, UnifiedJsonWriter& jsonWriter);
    private void WriteTargets(DependencyContext context, UnifiedJsonWriter& jsonWriter);
    private void WriteTarget(string key, IReadOnlyList`1<Library> libraries, UnifiedJsonWriter& jsonWriter);
    private void WritePortableTarget(string key, IReadOnlyList`1<RuntimeLibrary> runtimeLibraries, IReadOnlyList`1<CompilationLibrary> compilationLibraries, UnifiedJsonWriter& jsonWriter);
    private void AddCompilationAssemblies(IEnumerable`1<string> compilationAssemblies, UnifiedJsonWriter& jsonWriter);
    private void AddAssets(string key, RuntimeAssetGroup group, UnifiedJsonWriter& jsonWriter);
    private void AddDependencies(IEnumerable`1<Dependency> dependencies, UnifiedJsonWriter& jsonWriter);
    private void AddResourceAssemblies(IEnumerable`1<ResourceAssembly> resourceAssemblies, UnifiedJsonWriter& jsonWriter);
    private void WriteTargetLibrary(string key, Library library, UnifiedJsonWriter& jsonWriter);
    private void WritePortableTargetLibrary(string key, RuntimeLibrary runtimeLibrary, CompilationLibrary compilationLibrary, UnifiedJsonWriter& jsonWriter);
    private bool AddRuntimeSpecificAssetGroups(string assetType, IEnumerable`1<RuntimeAssetGroup> assetGroups, bool wroteObjectStart, UnifiedJsonWriter& jsonWriter);
    private void AddRuntimeSpecificAssets(IEnumerable`1<RuntimeFile> assets, string runtime, string assetType, UnifiedJsonWriter& jsonWriter);
    private void WriteAssetList(string key, IEnumerable`1<string> assetPaths, UnifiedJsonWriter& jsonWriter);
    private void WriteAssetList(string key, IEnumerable`1<RuntimeFile> runtimeFiles, UnifiedJsonWriter& jsonWriter);
    private void WriteLibraries(DependencyContext context, UnifiedJsonWriter& jsonWriter);
    private void WriteLibrary(string key, Library library, UnifiedJsonWriter& jsonWriter);
    private static string NormalizePath(string path);
    public void Write(DependencyContext context, Stream stream);
}
internal class Microsoft.Extensions.DependencyModel.DirectoryWrapper : object {
    public sealed virtual bool Exists(string path);
}
internal class Microsoft.Extensions.DependencyModel.EnvironmentWrapper : object {
    public static IEnvironment Default;
    private static EnvironmentWrapper();
    public sealed virtual string GetEnvironmentVariable(string name);
    public sealed virtual object GetAppContextData(string name);
    public sealed virtual bool IsWindows();
}
internal class Microsoft.Extensions.DependencyModel.FileSystemWrapper : object {
    [CompilerGeneratedAttribute]
private static IFileSystem <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IDirectory <Directory>k__BackingField;
    public static IFileSystem Default { get; }
    public IFile File { get; }
    public IDirectory Directory { get; }
    private static FileSystemWrapper();
    [CompilerGeneratedAttribute]
public static IFileSystem get_Default();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    [CompilerGeneratedAttribute]
public sealed virtual IDirectory get_Directory();
}
internal class Microsoft.Extensions.DependencyModel.FileWrapper : object {
    public sealed virtual bool Exists(string path);
    public sealed virtual string ReadAllText(string path);
    public sealed virtual Stream OpenRead(string path);
    public sealed virtual Stream OpenFile(string path, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, int bufferSize, FileOptions fileOptions);
    public sealed virtual void CreateEmptyFile(string path);
}
public interface Microsoft.Extensions.DependencyModel.IDependencyContextReader {
    public abstract virtual DependencyContext Read(Stream stream);
}
internal interface Microsoft.Extensions.DependencyModel.IDirectory {
    public abstract virtual bool Exists(string path);
}
internal interface Microsoft.Extensions.DependencyModel.IEnvironment {
    public abstract virtual string GetEnvironmentVariable(string name);
    public abstract virtual object GetAppContextData(string name);
    public abstract virtual bool IsWindows();
}
internal interface Microsoft.Extensions.DependencyModel.IFile {
    public abstract virtual bool Exists(string path);
    public abstract virtual string ReadAllText(string path);
    public abstract virtual Stream OpenRead(string path);
    public abstract virtual Stream OpenFile(string path, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, int bufferSize, FileOptions fileOptions);
    public abstract virtual void CreateEmptyFile(string path);
}
internal interface Microsoft.Extensions.DependencyModel.IFileSystem {
    public IFile File { get; }
    public IDirectory Directory { get; }
    public abstract virtual IFile get_File();
    public abstract virtual IDirectory get_Directory();
}
public class Microsoft.Extensions.DependencyModel.Library : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Dependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Serviceable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeStoreManifestName>k__BackingField;
    public string Type { get; }
    public string Name { get; }
    public string Version { get; }
    public string Hash { get; }
    public IReadOnlyList`1<Dependency> Dependencies { get; }
    public bool Serviceable { get; }
    public string Path { get; }
    public string HashPath { get; }
    public string RuntimeStoreManifestName { get; }
    public Library(string type, string name, string version, string hash, IEnumerable`1<Dependency> dependencies, bool serviceable);
    public Library(string type, string name, string version, string hash, IEnumerable`1<Dependency> dependencies, bool serviceable, string path, string hashPath);
    public Library(string type, string name, string version, string hash, IEnumerable`1<Dependency> dependencies, bool serviceable, string path, string hashPath, string runtimeStoreManifestName);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Dependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public bool get_Serviceable();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_HashPath();
    [CompilerGeneratedAttribute]
public string get_RuntimeStoreManifestName();
}
public class Microsoft.Extensions.DependencyModel.Resolution.AppBaseCompilationAssemblyResolver : object {
    private static string RefsDirectoryName;
    private IFileSystem _fileSystem;
    private string _basePath;
    private DependencyContextPaths _dependencyContextPaths;
    public AppBaseCompilationAssemblyResolver(string basePath);
    internal AppBaseCompilationAssemblyResolver(IFileSystem fileSystem);
    internal AppBaseCompilationAssemblyResolver(IFileSystem fileSystem, string basePath, DependencyContextPaths dependencyContextPaths);
    private static AppBaseCompilationAssemblyResolver();
    public sealed virtual bool TryResolveAssemblyPaths(CompilationLibrary library, List`1<string> assemblies);
}
public class Microsoft.Extensions.DependencyModel.Resolution.CompositeCompilationAssemblyResolver : object {
    private ICompilationAssemblyResolver[] _resolvers;
    public CompositeCompilationAssemblyResolver(ICompilationAssemblyResolver[] resolvers);
    public sealed virtual bool TryResolveAssemblyPaths(CompilationLibrary library, List`1<string> assemblies);
}
public class Microsoft.Extensions.DependencyModel.Resolution.DotNetReferenceAssembliesPathResolver : object {
    public static string DotNetReferenceAssembliesPathEnv;
    private static DotNetReferenceAssembliesPathResolver();
    internal static string Resolve(IEnvironment environment, IFileSystem fileSystem);
    public static string Resolve();
    private static string GetDefaultDotNetReferenceAssembliesPath(IFileSystem fileSystem);
}
public interface Microsoft.Extensions.DependencyModel.Resolution.ICompilationAssemblyResolver {
    public abstract virtual bool TryResolveAssemblyPaths(CompilationLibrary library, List`1<string> assemblies);
}
public class Microsoft.Extensions.DependencyModel.Resolution.PackageCompilationAssemblyResolver : object {
    private IFileSystem _fileSystem;
    private String[] _nugetPackageDirectories;
    public PackageCompilationAssemblyResolver(string nugetPackageDirectory);
    internal PackageCompilationAssemblyResolver(IEnvironment environment, IFileSystem fileSystem);
    internal PackageCompilationAssemblyResolver(IFileSystem fileSystem, String[] nugetPackageDirectories);
    internal static String[] GetDefaultProbeDirectories(IEnvironment environment);
    public sealed virtual bool TryResolveAssemblyPaths(CompilationLibrary library, List`1<string> assemblies);
    private static bool TryResolveFromPackagePath(IFileSystem fileSystem, CompilationLibrary library, string basePath, IEnumerable`1& results);
}
public class Microsoft.Extensions.DependencyModel.Resolution.ReferenceAssemblyPathResolver : object {
    private IFileSystem _fileSystem;
    private string _defaultReferenceAssembliesPath;
    private String[] _fallbackSearchPaths;
    public ReferenceAssemblyPathResolver(string defaultReferenceAssembliesPath, String[] fallbackSearchPaths);
    internal ReferenceAssemblyPathResolver(IFileSystem fileSystem, IEnvironment environment);
    internal ReferenceAssemblyPathResolver(IFileSystem fileSystem, string defaultReferenceAssembliesPath, String[] fallbackSearchPaths);
    public sealed virtual bool TryResolveAssemblyPaths(CompilationLibrary library, List`1<string> assemblies);
    private bool TryResolveReferenceAssembly(string path, String& fullPath);
    internal static String[] GetFallbackSearchPaths(IFileSystem fileSystem, IEnvironment environment);
    internal static string GetDefaultReferenceAssembliesPath(IFileSystem fileSystem, IEnvironment environment);
}
internal static class Microsoft.Extensions.DependencyModel.Resolution.ResolverUtils : object {
    internal static bool TryResolvePackagePath(IFileSystem fileSystem, CompilationLibrary library, string basePath, String& packagePath);
    internal static bool TryResolveAssemblyFile(IFileSystem fileSystem, string basePath, string assemblyPath, String& fullName);
}
public class Microsoft.Extensions.DependencyModel.ResourceAssembly : object {
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Locale { get; public set; }
    public string Path { get; public set; }
    public ResourceAssembly(string path, string locale);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class Microsoft.Extensions.DependencyModel.RuntimeAssembly : object {
    private static string NativeImageSufix;
    private string _assemblyName;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public AssemblyName Name { get; }
    public string Path { get; }
    public RuntimeAssembly(string assemblyName, string path);
    public AssemblyName get_Name();
    [CompilerGeneratedAttribute]
public string get_Path();
    public static RuntimeAssembly Create(string path);
}
public class Microsoft.Extensions.DependencyModel.RuntimeAssetGroup : object {
    private IReadOnlyList`1<string> _assetPaths;
    private IReadOnlyList`1<RuntimeFile> _runtimeFiles;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    public string Runtime { get; }
    public IReadOnlyList`1<string> AssetPaths { get; }
    public IReadOnlyList`1<RuntimeFile> RuntimeFiles { get; }
    public RuntimeAssetGroup(string runtime, String[] assetPaths);
    public RuntimeAssetGroup(string runtime, IEnumerable`1<string> assetPaths);
    public RuntimeAssetGroup(string runtime, IEnumerable`1<RuntimeFile> runtimeFiles);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    public IReadOnlyList`1<string> get_AssetPaths();
    public IReadOnlyList`1<RuntimeFile> get_RuntimeFiles();
}
public class Microsoft.Extensions.DependencyModel.RuntimeFallbacks : object {
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Fallbacks>k__BackingField;
    public string Runtime { get; public set; }
    public IReadOnlyList`1<string> Fallbacks { get; public set; }
    public RuntimeFallbacks(string runtime, String[] fallbacks);
    public RuntimeFallbacks(string runtime, IEnumerable`1<string> fallbacks);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Fallbacks();
    [CompilerGeneratedAttribute]
public void set_Fallbacks(IReadOnlyList`1<string> value);
}
public class Microsoft.Extensions.DependencyModel.RuntimeFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileVersion>k__BackingField;
    public string Path { get; }
    public string AssemblyVersion { get; }
    public string FileVersion { get; }
    public RuntimeFile(string path, string assemblyVersion, string fileVersion);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public string get_FileVersion();
}
public class Microsoft.Extensions.DependencyModel.RuntimeLibrary : Library {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RuntimeAssetGroup> <RuntimeAssemblyGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RuntimeAssetGroup> <NativeLibraryGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ResourceAssembly> <ResourceAssemblies>k__BackingField;
    public IReadOnlyList`1<RuntimeAssetGroup> RuntimeAssemblyGroups { get; }
    public IReadOnlyList`1<RuntimeAssetGroup> NativeLibraryGroups { get; }
    public IReadOnlyList`1<ResourceAssembly> ResourceAssemblies { get; }
    public RuntimeLibrary(string type, string name, string version, string hash, IReadOnlyList`1<RuntimeAssetGroup> runtimeAssemblyGroups, IReadOnlyList`1<RuntimeAssetGroup> nativeLibraryGroups, IEnumerable`1<ResourceAssembly> resourceAssemblies, IEnumerable`1<Dependency> dependencies, bool serviceable);
    public RuntimeLibrary(string type, string name, string version, string hash, IReadOnlyList`1<RuntimeAssetGroup> runtimeAssemblyGroups, IReadOnlyList`1<RuntimeAssetGroup> nativeLibraryGroups, IEnumerable`1<ResourceAssembly> resourceAssemblies, IEnumerable`1<Dependency> dependencies, bool serviceable, string path, string hashPath);
    public RuntimeLibrary(string type, string name, string version, string hash, IReadOnlyList`1<RuntimeAssetGroup> runtimeAssemblyGroups, IReadOnlyList`1<RuntimeAssetGroup> nativeLibraryGroups, IEnumerable`1<ResourceAssembly> resourceAssemblies, IEnumerable`1<Dependency> dependencies, bool serviceable, string path, string hashPath, string runtimeStoreManifestName);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RuntimeAssetGroup> get_RuntimeAssemblyGroups();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RuntimeAssetGroup> get_NativeLibraryGroups();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ResourceAssembly> get_ResourceAssemblies();
}
public class Microsoft.Extensions.DependencyModel.TargetInfo : object {
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPortable>k__BackingField;
    public string Framework { get; }
    public string Runtime { get; }
    public string RuntimeSignature { get; }
    public bool IsPortable { get; }
    public TargetInfo(string framework, string runtime, string runtimeSignature, bool isPortable);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public string get_RuntimeSignature();
    [CompilerGeneratedAttribute]
public bool get_IsPortable();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Microsoft.Extensions.DependencyModel.UnifiedJsonReader : ValueType {
    private Utf8JsonReader _reader;
    public UnifiedJsonReader(Utf8JsonReader reader);
    public bool Read();
    public string GetStringValue();
    public bool IsTokenTypeProperty();
    public bool TryReadStringProperty(String& name, String& value);
    public void ReadStartObject();
    public void CheckStartObject();
    public void CheckEndObject();
    public String[] ReadStringArray();
    public void Skip();
    public string ReadAsString();
    public Nullable`1<bool> ReadAsNullableBoolean();
    public bool ReadAsBoolean(bool defaultValue);
    private static Exception CreateUnexpectedException(Utf8JsonReader& reader, string expected);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Microsoft.Extensions.DependencyModel.UnifiedJsonWriter : ValueType {
    private Utf8JsonWriter _writer;
    public UnifiedJsonWriter(Utf8JsonWriter writer);
    public void WriteStartObject();
    public void WriteEndObject();
    public void WriteStartArray();
    public void WriteEndArray();
    public void Flush();
    public void WriteStartObject(string propertyName, bool escape);
    public void WriteStartArray(string propertyName, bool escape);
    public void WriteString(string propertyName, string value, bool escape);
    public void WriteBoolean(string propertyName, bool value, bool escape);
    public void WriteStringValue(string value, bool escape);
}
[ExtensionAttribute]
public static class System.Collections.Generic.CollectionExtensions : object {
    [ExtensionAttribute]
public static RuntimeAssetGroup GetDefaultGroup(IEnumerable`1<RuntimeAssetGroup> self);
    [ExtensionAttribute]
public static RuntimeAssetGroup GetRuntimeGroup(IEnumerable`1<RuntimeAssetGroup> self, string runtime);
    private static RuntimeAssetGroup GetGroup(IEnumerable`1<RuntimeAssetGroup> groups, string runtime);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDefaultAssets(IEnumerable`1<RuntimeAssetGroup> self);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetRuntimeAssets(IEnumerable`1<RuntimeAssetGroup> self, string runtime);
    private static IEnumerable`1<string> GetAssets(IEnumerable`1<RuntimeAssetGroup> groups, string runtime);
    [ExtensionAttribute]
public static IEnumerable`1<RuntimeFile> GetDefaultRuntimeFileAssets(IEnumerable`1<RuntimeAssetGroup> self);
    [ExtensionAttribute]
public static IEnumerable`1<RuntimeFile> GetRuntimeFileAssets(IEnumerable`1<RuntimeAssetGroup> self, string runtime);
    private static IEnumerable`1<RuntimeFile> GetRuntimeFiles(IEnumerable`1<RuntimeAssetGroup> groups, string runtime);
}
internal static class System.Numerics.Hashing.HashHelpers : object {
    public static int RandomSeed;
    private static HashHelpers();
    public static int Combine(int h1, int h2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
