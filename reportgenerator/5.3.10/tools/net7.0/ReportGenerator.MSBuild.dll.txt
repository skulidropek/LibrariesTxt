internal static class Palmmedia.ReportGenerator.MSBuild.AssemblyResolver : object {
    private static AssemblyResolver();
    public static void Enable();
    private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    private static bool Probe(string filePath, Version minimumVersion, Assembly& assembly);
}
public class Palmmedia.ReportGenerator.MSBuild.ReportGenerator : Task {
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReportFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReportTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssemblyFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ClassFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FileFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RiskHotspotAssemblyFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RiskHotspotClassFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerbosityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <License>k__BackingField;
    public string ProjectDirectory { get; public set; }
    public ITaskItem[] ReportFiles { get; public set; }
    public string TargetDirectory { get; public set; }
    public string HistoryDirectory { get; public set; }
    public ITaskItem[] ReportTypes { get; public set; }
    public ITaskItem[] SourceDirectories { get; public set; }
    public ITaskItem[] Plugins { get; public set; }
    public ITaskItem[] Filters { get; public set; }
    public ITaskItem[] AssemblyFilters { get; public set; }
    public ITaskItem[] ClassFilters { get; public set; }
    public ITaskItem[] FileFilters { get; public set; }
    public ITaskItem[] RiskHotspotAssemblyFilters { get; public set; }
    public ITaskItem[] RiskHotspotClassFilters { get; public set; }
    public string VerbosityLevel { get; public set; }
    public string Tag { get; public set; }
    public string Title { get; public set; }
    public string License { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReportFiles();
    [CompilerGeneratedAttribute]
public void set_ReportFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_HistoryDirectory();
    [CompilerGeneratedAttribute]
public void set_HistoryDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReportTypes();
    [CompilerGeneratedAttribute]
public void set_ReportTypes(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceDirectories();
    [CompilerGeneratedAttribute]
public void set_SourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Plugins();
    [CompilerGeneratedAttribute]
public void set_Plugins(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssemblyFilters();
    [CompilerGeneratedAttribute]
public void set_AssemblyFilters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ClassFilters();
    [CompilerGeneratedAttribute]
public void set_ClassFilters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FileFilters();
    [CompilerGeneratedAttribute]
public void set_FileFilters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RiskHotspotAssemblyFilters();
    [CompilerGeneratedAttribute]
public void set_RiskHotspotAssemblyFilters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RiskHotspotClassFilters();
    [CompilerGeneratedAttribute]
public void set_RiskHotspotClassFilters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_VerbosityLevel();
    [CompilerGeneratedAttribute]
public void set_VerbosityLevel(string value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_License();
    [CompilerGeneratedAttribute]
public void set_License(string value);
    public virtual bool Execute();
}
