[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseLabelWithDash;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string UncommittedChanges;
    public static string CommitDate;
    private static GitVersionInformation();
}
public class ReportPortal.Shared.Configuration.Configuration : object {
    private string _notFoundMessage;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public IDictionary`2<string, object> Properties { get; }
    public Configuration(IDictionary`2<string, object> values);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual T GetValue(string property);
    public sealed virtual T GetValue(string property, T defaultValue);
    public sealed virtual IEnumerable`1<T> GetValues(string property);
    public sealed virtual IEnumerable`1<T> GetValues(string property, IEnumerable`1<T> defaultValue);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, T>> GetKeyValues(string property);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, T>> GetKeyValues(string property, IEnumerable`1<KeyValuePair`2<string, T>> defaultValue);
    private T ConvertValue(object value);
    [CompilerGeneratedAttribute]
private T <GetValues>b__7_0(string v);
}
public class ReportPortal.Shared.Configuration.ConfigurationBuilder : object {
    [CompilerGeneratedAttribute]
private IList`1<IConfigurationProvider> <Providers>k__BackingField;
    public IList`1<IConfigurationProvider> Providers { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IConfigurationProvider> get_Providers();
    public sealed virtual IConfigurationBuilder Add(IConfigurationProvider provider);
    public sealed virtual IConfiguration Build();
}
[ExtensionAttribute]
public static class ReportPortal.Shared.Configuration.ConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddDefaults(IConfigurationBuilder builder);
    [ExtensionAttribute]
public static IConfigurationBuilder AddDefaults(IConfigurationBuilder builder, string baseDir);
    [ExtensionAttribute]
public static IConfigurationBuilder AddJsonFile(IConfigurationBuilder builder, string filePath, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddEnvironmentVariables(IConfigurationBuilder builder);
    [ExtensionAttribute]
public static IConfigurationBuilder AddEnvironmentVariables(IConfigurationBuilder builder, string prefix, string delimiter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddDirectoryProbing(IConfigurationBuilder builder, string directoryPath, string prefix, string delimiter, bool optional);
}
public static class ReportPortal.Shared.Configuration.ConfigurationPath : object {
    public static string KeyDelimeter;
    public static string AppenderPrefix;
    public static string ServerUrl;
    public static string ServerProject;
    [ObsoleteAttribute("'Server:Authentication:Uuid' parameter is deprecated. Use 'Server:ApiKey' instead.")]
public static string ServerAuthenticationUuid;
    public static string ServerAuthenticationKey;
    public static string LogsBatchCapacity;
    public static string AsyncReporting;
    public static string LaunchName;
    public static string LaunchDescription;
    public static string LaunchDebugMode;
    public static string LaunchTags;
    private static ConfigurationPath();
}
public interface ReportPortal.Shared.Configuration.IConfiguration {
    public IDictionary`2<string, object> Properties { get; }
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual T GetValue(string property);
    public abstract virtual T GetValue(string property, T defaultValue);
    public abstract virtual IEnumerable`1<T> GetValues(string property);
    public abstract virtual IEnumerable`1<T> GetValues(string property, IEnumerable`1<T> defaultValue);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, T>> GetKeyValues(string property);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, T>> GetKeyValues(string property, IEnumerable`1<KeyValuePair`2<string, T>> defaultValue);
}
public interface ReportPortal.Shared.Configuration.IConfigurationBuilder {
    public IList`1<IConfigurationProvider> Providers { get; }
    public abstract virtual IList`1<IConfigurationProvider> get_Providers();
    public abstract virtual IConfigurationBuilder Add(IConfigurationProvider provider);
    public abstract virtual IConfiguration Build();
}
public interface ReportPortal.Shared.Configuration.IConfigurationProvider {
    public abstract virtual IDictionary`2<string, string> Load();
}
public class ReportPortal.Shared.Configuration.Providers.DirectoryProbingConfigurationProvider : object {
    private string _directoryPath;
    private string _prefix;
    private string _delimeter;
    private bool _optional;
    public DirectoryProbingConfigurationProvider(string directoryPath, string prefix, string delimeter, bool optional);
    public sealed virtual IDictionary`2<string, string> Load();
}
public class ReportPortal.Shared.Configuration.Providers.EnvironmentVariablesConfigurationProvider : object {
    private string _prefix;
    private string _delimeter;
    private EnvironmentVariableTarget _target;
    public EnvironmentVariablesConfigurationProvider(string prefix, string delimeter, EnvironmentVariableTarget target);
    public sealed virtual IDictionary`2<string, string> Load();
    [CompilerGeneratedAttribute]
private bool <Load>b__4_0(DictionaryEntry v);
}
public class ReportPortal.Shared.Configuration.Providers.JsonFileConfigurationProvider : object {
    private string _delimeter;
    private string _filePath;
    private bool _optional;
    private static JsonFileConfigurationProvider();
    public JsonFileConfigurationProvider(string delimeter, string filePath, bool optional);
    private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    public sealed virtual IDictionary`2<string, string> Load();
    private Dictionary`2<string, string> GetFlattenProperties(string json);
    private Dictionary`2<string, string> ParseJsonProperty(JsonProperty jsonProperty, string parentPropertyName);
    [CompilerGeneratedAttribute]
private bool <Load>b__6_0(string f);
}
public static class ReportPortal.Shared.Context : object {
    private static Lazy`1<CommandsSource> _commandsSource;
    private static Lazy`1<ITestContext> _current;
    private static Lazy`1<ILaunchContext> _launch;
    public static ITestContext Current { get; }
    public static ILaunchContext Launch { get; }
    private static Context();
    public static ITestContext get_Current();
    public static ILaunchContext get_Launch();
}
public class ReportPortal.Shared.Converters.ItemAttributeConverter : object {
    public ItemAttribute ConvertFrom(string tag, Action`1<ConvertOptions> optionsProvider);
}
internal static class ReportPortal.Shared.Converters.StringTrimmer : object {
    public static string Trim(string value, int maxSize);
}
public class ReportPortal.Shared.Execution.CommandsSource : object {
    private IList`1<ICommandsListener> _listeners;
    [CompilerGeneratedAttribute]
private ITestCommandsSource <TestCommandsSource>k__BackingField;
    [CompilerGeneratedAttribute]
private LogCommandHandler`1<LogScopeCommandArgs> OnBeginLogScopeCommand;
    [CompilerGeneratedAttribute]
private LogCommandHandler`1<LogScopeCommandArgs> OnEndLogScopeCommand;
    [CompilerGeneratedAttribute]
private LogCommandHandler`1<LogMessageCommandArgs> OnLogMessageCommand;
    public ITestCommandsSource TestCommandsSource { get; }
    public CommandsSource(IList`1<ICommandsListener> listeners);
    [CompilerGeneratedAttribute]
public sealed virtual ITestCommandsSource get_TestCommandsSource();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBeginLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBeginLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnEndLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnEndLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnLogMessageCommand(LogCommandHandler`1<LogMessageCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnLogMessageCommand(LogCommandHandler`1<LogMessageCommandArgs> value);
    public static void RaiseOnBeginScopeCommand(CommandsSource commandsSource, ILogContext logContext, LogScopeCommandArgs args);
    public static void RaiseOnEndScopeCommand(CommandsSource commandsSource, ILogContext logContext, LogScopeCommandArgs args);
    public static void RaiseOnLogMessageCommand(CommandsSource commandsSource, ILogContext logContext, LogMessageCommandArgs args);
}
public interface ReportPortal.Shared.Execution.ILaunchContext {
}
public interface ReportPortal.Shared.Execution.ILogContext {
    public ILogScope Log { get; public set; }
    public abstract virtual ILogScope get_Log();
    public abstract virtual void set_Log(ILogScope value);
}
public interface ReportPortal.Shared.Execution.ITestContext {
    public ITestMetadataEmitter Metadata { get; }
    public abstract virtual ITestMetadataEmitter get_Metadata();
}
public interface ReportPortal.Shared.Execution.ITestMetadataEmitter {
    public IMetaAttributesCollection Attributes { get; }
    public abstract virtual IMetaAttributesCollection get_Attributes();
}
public class ReportPortal.Shared.Execution.LaunchContext : object {
    private IExtensionManager _extensionManager;
    private CommandsSource _commadsSource;
    private AsyncLocal`1<ILogScope> _activeLogScope;
    private AsyncLocal`1<ILogScope> _rootLogScope;
    public ILogScope Log { get; public set; }
    private ILogScope RootScope { get; private set; }
    public LaunchContext(IExtensionManager extensionManager, CommandsSource commandsSource);
    public sealed virtual ILogScope get_Log();
    public sealed virtual void set_Log(ILogScope value);
    private ILogScope get_RootScope();
    private void set_RootScope(ILogScope value);
}
internal abstract class ReportPortal.Shared.Execution.Logging.BaseLogScope : object {
    protected IExtensionManager _extensionManager;
    protected CommandsSource _commandsSource;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogScope <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogScope <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <BeginTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private LogScopeStatus <Status>k__BackingField;
    public string Id { get; }
    public ILogScope Parent { get; }
    public ILogScope Root { get; protected set; }
    public ILogContext Context { get; }
    public string Name { get; }
    public DateTime BeginTime { get; }
    public Nullable`1<DateTime> EndTime { get; private set; }
    public LogScopeStatus Status { get; public set; }
    public BaseLogScope(ILogContext logContext, IExtensionManager extensionManager, CommandsSource commandsSource);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual ILogScope get_Parent();
    [CompilerGeneratedAttribute]
public virtual ILogScope get_Root();
    [CompilerGeneratedAttribute]
protected virtual void set_Root(ILogScope value);
    [CompilerGeneratedAttribute]
public virtual ILogContext get_Context();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual DateTime get_BeginTime();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_EndTime();
    [CompilerGeneratedAttribute]
private void set_EndTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual LogScopeStatus get_Status();
    [CompilerGeneratedAttribute]
public virtual void set_Status(LogScopeStatus value);
    public virtual ILogScope BeginScope(string name);
    public sealed virtual void Debug(string message);
    public sealed virtual void Debug(string message, string mimeType, Byte[] content);
    public sealed virtual void Debug(string message, FileInfo file);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, string mimeType, Byte[] content);
    public sealed virtual void Error(string message, FileInfo file);
    public sealed virtual void Fatal(string message);
    public sealed virtual void Fatal(string message, string mimeType, Byte[] content);
    public sealed virtual void Fatal(string message, FileInfo file);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(string message, string mimeType, Byte[] content);
    public sealed virtual void Info(string message, FileInfo file);
    public sealed virtual void Trace(string message);
    public sealed virtual void Trace(string message, string mimeType, Byte[] content);
    public sealed virtual void Trace(string message, FileInfo file);
    public sealed virtual void Warn(string message);
    public sealed virtual void Warn(string message, string mimeType, Byte[] content);
    public sealed virtual void Warn(string message, FileInfo file);
    public virtual void Message(ILogMessage log);
    protected ILogMessage GetDefaultLogRequest(string text);
    protected ILogMessageAttachment GetAttachFromContent(string mimeType, Byte[] content);
    protected ILogMessage GetLogMessageWithAttachmentFromFileInfo(ILogMessage message, FileInfo file);
    public virtual void Dispose();
}
public interface ReportPortal.Shared.Execution.Logging.ILogMessage {
    public string Message { get; public set; }
    public DateTime Time { get; public set; }
    public LogMessageLevel Level { get; public set; }
    public ILogMessageAttachment Attachment { get; public set; }
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual DateTime get_Time();
    public abstract virtual void set_Time(DateTime value);
    public abstract virtual LogMessageLevel get_Level();
    public abstract virtual void set_Level(LogMessageLevel value);
    public abstract virtual ILogMessageAttachment get_Attachment();
    public abstract virtual void set_Attachment(ILogMessageAttachment value);
}
public interface ReportPortal.Shared.Execution.Logging.ILogMessageAttachment {
    public string MimeType { get; public set; }
    public Byte[] Data { get; public set; }
    public abstract virtual string get_MimeType();
    public abstract virtual void set_MimeType(string value);
    public abstract virtual Byte[] get_Data();
    public abstract virtual void set_Data(Byte[] value);
}
public interface ReportPortal.Shared.Execution.Logging.ILogScope {
    public string Id { get; }
    public ILogScope Parent { get; }
    public ILogScope Root { get; }
    public ILogContext Context { get; }
    public string Name { get; }
    public DateTime BeginTime { get; }
    public Nullable`1<DateTime> EndTime { get; }
    public LogScopeStatus Status { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual ILogScope get_Parent();
    public abstract virtual ILogScope get_Root();
    public abstract virtual ILogContext get_Context();
    public abstract virtual string get_Name();
    public abstract virtual DateTime get_BeginTime();
    public abstract virtual Nullable`1<DateTime> get_EndTime();
    public abstract virtual LogScopeStatus get_Status();
    public abstract virtual void set_Status(LogScopeStatus value);
    public abstract virtual ILogScope BeginScope(string name);
    public abstract virtual void Message(ILogMessage log);
    public abstract virtual void Info(string message);
    public abstract virtual void Info(string message, string mimeType, Byte[] content);
    public abstract virtual void Info(string message, FileInfo file);
    public abstract virtual void Debug(string message);
    public abstract virtual void Debug(string message, string mimeType, Byte[] content);
    public abstract virtual void Debug(string message, FileInfo file);
    public abstract virtual void Trace(string message);
    public abstract virtual void Trace(string message, string mimeType, Byte[] content);
    public abstract virtual void Trace(string message, FileInfo file);
    public abstract virtual void Error(string message);
    public abstract virtual void Error(string message, string mimeType, Byte[] content);
    public abstract virtual void Error(string message, FileInfo file);
    public abstract virtual void Fatal(string message);
    public abstract virtual void Fatal(string message, string mimeType, Byte[] content);
    public abstract virtual void Fatal(string message, FileInfo file);
    public abstract virtual void Warn(string message);
    public abstract virtual void Warn(string message, string mimeType, Byte[] content);
    public abstract virtual void Warn(string message, FileInfo file);
}
public class ReportPortal.Shared.Execution.Logging.LogMessage : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private LogMessageLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogMessageAttachment <Attachment>k__BackingField;
    public string Message { get; public set; }
    public DateTime Time { get; public set; }
    public LogMessageLevel Level { get; public set; }
    public ILogMessageAttachment Attachment { get; public set; }
    public LogMessage(string message);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Time();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Time(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual LogMessageLevel get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(LogMessageLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual ILogMessageAttachment get_Attachment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Attachment(ILogMessageAttachment value);
}
public class ReportPortal.Shared.Execution.Logging.LogMessageAttachment : object {
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public string MimeType { get; public set; }
    public Byte[] Data { get; public set; }
    public LogMessageAttachment(string mimeType, Byte[] data);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MimeType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(Byte[] value);
}
[ExtensionAttribute]
public static class ReportPortal.Shared.Execution.Logging.LogMessageExtensions : object {
    [ExtensionAttribute]
public static CreateLogItemRequest ConvertToRequest(ILogMessage logMessage);
}
public enum ReportPortal.Shared.Execution.Logging.LogMessageLevel : Enum {
    public int value__;
    public static LogMessageLevel Trace;
    public static LogMessageLevel Debug;
    public static LogMessageLevel Info;
    public static LogMessageLevel Warning;
    public static LogMessageLevel Error;
    public static LogMessageLevel Fatal;
}
internal class ReportPortal.Shared.Execution.Logging.LogScope : BaseLogScope {
    [CompilerGeneratedAttribute]
private ILogScope <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ILogScope Parent { get; }
    public string Name { get; }
    public LogScope(ILogContext logContext, IExtensionManager extensionManager, CommandsSource commandsSource, ILogScope root, ILogScope parent, string name);
    [CompilerGeneratedAttribute]
public virtual ILogScope get_Parent();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual void Dispose();
}
public enum ReportPortal.Shared.Execution.Logging.LogScopeStatus : Enum {
    public int value__;
    public static LogScopeStatus InProgress;
    public static LogScopeStatus Passed;
    public static LogScopeStatus Failed;
    public static LogScopeStatus Skipped;
    public static LogScopeStatus Warn;
    public static LogScopeStatus Info;
}
internal class ReportPortal.Shared.Execution.Logging.RootLogScope : BaseLogScope {
    public LogScopeStatus Status { get; public set; }
    public ILogScope Root { get; protected set; }
    public RootLogScope(ILogContext logContext, IExtensionManager extensionManager, CommandsSource commandsSource);
    public virtual LogScopeStatus get_Status();
    public virtual void set_Status(LogScopeStatus value);
    public virtual void Message(ILogMessage logMessage);
    public virtual ILogScope BeginScope(string name);
    public virtual ILogScope get_Root();
    protected virtual void set_Root(ILogScope value);
}
public interface ReportPortal.Shared.Execution.Metadata.IMetaAttributesCollection {
    public abstract virtual void Add(string key, string value);
}
public class ReportPortal.Shared.Execution.Metadata.MetaAttribute : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; }
    public string Value { get; }
    public MetaAttribute(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Value();
    public static MetaAttribute Parse(string value);
    public sealed virtual bool Equals(MetaAttribute other);
    public virtual bool Equals(object obj);
    public static ItemAttribute op_Implicit(MetaAttribute a);
}
internal class ReportPortal.Shared.Execution.Metadata.MetaAttributesCollection : object {
    private ITestContext _testContext;
    private TestCommandsSource _commandsSource;
    private ObservableCollection`1<MetaAttribute> _attributes;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MetaAttributesCollection(ITestContext testContext, TestCommandsSource commandsSource);
    private void _attributes_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(MetaAttribute item);
    public sealed virtual void Add(string key, string value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(MetaAttribute item);
    public sealed virtual void CopyTo(MetaAttribute[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<MetaAttribute> GetEnumerator();
    public sealed virtual bool Remove(MetaAttribute item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class ReportPortal.Shared.Execution.Metadata.TestMetadataEmitter : object {
    private TestCommandsSource _commandsSource;
    private ITestContext _testContext;
    private IMetaAttributesCollection _attributes;
    public IMetaAttributesCollection Attributes { get; }
    public TestMetadataEmitter(ITestContext testContext, TestCommandsSource commandsSource);
    public sealed virtual IMetaAttributesCollection get_Attributes();
}
public class ReportPortal.Shared.Execution.TestCommandsSource : object {
    [CompilerGeneratedAttribute]
private TestCommandHandler`1<TestAttributesCommandArgs> OnGetTestAttributes;
    [CompilerGeneratedAttribute]
private TestCommandHandler`1<TestAttributesCommandArgs> OnAddTestAttributes;
    [CompilerGeneratedAttribute]
private TestCommandHandler`1<TestAttributesCommandArgs> OnRemoveTestAttributes;
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnGetTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnGetTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnAddTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnAddTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnRemoveTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnRemoveTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    public static void RaiseOnGetTestAttributes(TestCommandsSource commandsSource, ITestContext testContext, TestAttributesCommandArgs args);
    public static void RaiseOnAddTestAttributes(TestCommandsSource commandsSource, ITestContext testContext, TestAttributesCommandArgs args);
    public static void RaiseOnRemoveTestAttributes(TestCommandsSource commandsSource, ITestContext testContext, TestAttributesCommandArgs args);
}
public class ReportPortal.Shared.Execution.TestContext : object {
    private IExtensionManager _extensionManager;
    private CommandsSource _commadsSource;
    private AsyncLocal`1<ILogScope> _activeLogScope;
    private AsyncLocal`1<ILogScope> _rootLogScope;
    [CompilerGeneratedAttribute]
private ITestMetadataEmitter <Metadata>k__BackingField;
    public ILogScope Log { get; public set; }
    private ILogScope RootScope { get; private set; }
    public ITestMetadataEmitter Metadata { get; private set; }
    public TestContext(IExtensionManager extensionManager, CommandsSource commandsSource);
    public sealed virtual ILogScope get_Log();
    public sealed virtual void set_Log(ILogScope value);
    private ILogScope get_RootScope();
    private void set_RootScope(ILogScope value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestMetadataEmitter get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(ITestMetadataEmitter value);
}
public class ReportPortal.Shared.Extensibility.Commands.CommandArgs.LogMessageCommandArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ILogScope <LogScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogMessage <LogMessage>k__BackingField;
    public ILogScope LogScope { get; }
    public ILogMessage LogMessage { get; }
    public LogMessageCommandArgs(ILogScope logScope, ILogMessage logMessage);
    [CompilerGeneratedAttribute]
public ILogScope get_LogScope();
    [CompilerGeneratedAttribute]
public ILogMessage get_LogMessage();
}
public class ReportPortal.Shared.Extensibility.Commands.CommandArgs.LogScopeCommandArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ILogScope <LogScope>k__BackingField;
    public ILogScope LogScope { get; }
    public LogScopeCommandArgs(ILogScope logScope);
    [CompilerGeneratedAttribute]
public ILogScope get_LogScope();
}
public class ReportPortal.Shared.Extensibility.Commands.CommandArgs.TestAttributesCommandArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ICollection`1<MetaAttribute> <Attributes>k__BackingField;
    public ICollection`1<MetaAttribute> Attributes { get; }
    public TestAttributesCommandArgs(ICollection`1<MetaAttribute> attributes);
    [CompilerGeneratedAttribute]
public ICollection`1<MetaAttribute> get_Attributes();
}
public interface ReportPortal.Shared.Extensibility.Commands.ICommandsSource {
    public ITestCommandsSource TestCommandsSource { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeginLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeginLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnEndLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnEndLogScopeCommand(LogCommandHandler`1<LogScopeCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnLogMessageCommand(LogCommandHandler`1<LogMessageCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnLogMessageCommand(LogCommandHandler`1<LogMessageCommandArgs> value);
    public abstract virtual ITestCommandsSource get_TestCommandsSource();
}
public interface ReportPortal.Shared.Extensibility.Commands.ITestCommandsSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnGetTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnGetTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAddTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAddTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRemoveTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRemoveTestAttributes(TestCommandHandler`1<TestAttributesCommandArgs> value);
}
public class ReportPortal.Shared.Extensibility.Commands.LogCommandHandler`1 : MulticastDelegate {
    public LogCommandHandler`1(object object, IntPtr method);
    public virtual void Invoke(ILogContext logContext, TCommandArgs args);
    public virtual IAsyncResult BeginInvoke(ILogContext logContext, TCommandArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ReportPortal.Shared.Extensibility.Commands.TestCommandHandler`1 : MulticastDelegate {
    public TestCommandHandler`1(object object, IntPtr method);
    public virtual void Invoke(ITestContext testContext, TCommandArgs args);
    public virtual IAsyncResult BeginInvoke(ITestContext testContext, TCommandArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ReportPortal.Shared.Extensibility.Embedded.Analytics.AnalyticsReportEventsObserver : object {
    private static string CLIENT_INFO;
    private static string BASE_URI;
    private static string CLIENT_NAME;
    private static string EVENT_NAME;
    private string _clientVersion;
    private string _platformVersion;
    private string _measurementId;
    private string _apiKey;
    private HttpClient _httpClient;
    private object _httpClientLock;
    [CompilerGeneratedAttribute]
private static string <AgentName>k__BackingField;
    private static string _agentVersion;
    private IReportEventsSource _reportEventsSource;
    private Task _sendGaUsageTask;
    private static ITraceLogger TraceLogger { get; }
    public static string AgentName { get; private set; }
    public static string AgentVersion { get; }
    public AnalyticsReportEventsObserver(HttpMessageHandler httpHandler);
    private static AnalyticsReportEventsObserver();
    private static ITraceLogger get_TraceLogger();
    public static void DefineConsumer(string agentName, string agentVersion);
    [CompilerGeneratedAttribute]
public static string get_AgentName();
    [CompilerGeneratedAttribute]
private static void set_AgentName(string value);
    public static string get_AgentVersion();
    public sealed virtual void Initialize(IReportEventsSource reportEventsSource);
    private HttpClient GetHttpClient(IConfiguration configuration);
    private void ReportEventsSource_OnBeforeLaunchStarting(ILaunchReporter launchReporter, BeforeLaunchStartingEventArgs args);
    private void ReportEventsSource_OnAfterLaunchFinished(ILaunchReporter launchReporter, AfterLaunchFinishedEventArgs args);
    public sealed virtual void Dispose();
}
internal static class ReportPortal.Shared.Extensibility.Embedded.Analytics.ClientIdProvider : object {
    public static string FILE_PATH;
    private static string CLIENT_ID_KEY;
    private static ClientIdProvider();
    [AsyncStateMachineAttribute("ReportPortal.Shared.Extensibility.Embedded.Analytics.ClientIdProvider/<GetClientIdAsync>d__2")]
public static Task`1<string> GetClientIdAsync();
    [AsyncStateMachineAttribute("ReportPortal.Shared.Extensibility.Embedded.Analytics.ClientIdProvider/<ReadClientIdAsync>d__3")]
private static Task`1<string> ReadClientIdAsync();
    [AsyncStateMachineAttribute("ReportPortal.Shared.Extensibility.Embedded.Analytics.ClientIdProvider/<SaveClientIdAsync>d__4")]
private static Task SaveClientIdAsync(string clientId);
}
public class ReportPortal.Shared.Extensibility.Embedded.Normalization.RequestNormalizer : object {
    internal static int MAX_LAUNCH_NAME_LENGTH;
    internal static int MAX_TEST_ITEM_NAME_LENGTH;
    internal static int MAX_ATTRIBUTE_KEY_LENGTH;
    internal static int MAX_ATTRIBUTE_VALUE_LENGTH;
    public sealed virtual void Initialize(IReportEventsSource reportEventsSource);
    private void ReportEventsSource_OnBeforeLaunchStarting(ILaunchReporter launchReporter, BeforeLaunchStartingEventArgs args);
    private void ReportEventsSource_OnBeforeLaunchFinishing(ILaunchReporter launchReporter, BeforeLaunchFinishingEventArgs args);
    private void ReportEventsSource_OnBeforeTestStarting(ITestReporter testReporter, BeforeTestStartingEventArgs args);
    private void ReportEventsSource_OnBeforeTestFinishing(ITestReporter testReporter, BeforeTestFinishingEventArgs args);
    private static void NormalizeAttributes(IEnumerable`1<ItemAttribute> attributes);
}
public class ReportPortal.Shared.Extensibility.ExtensionManager : object {
    private static ITraceLogger _traceLogger;
    private static Lazy`1<IExtensionManager> _instance;
    private List`1<string> _exploredPaths;
    private List`1<string> _exploredAssemblyNames;
    private static object _lockObj;
    [CompilerGeneratedAttribute]
private IList`1<IReportEventsObserver> <ReportEventObservers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ICommandsListener> <CommandsListeners>k__BackingField;
    public static IExtensionManager Instance { get; }
    public IList`1<IReportEventsObserver> ReportEventObservers { get; }
    public IList`1<ICommandsListener> CommandsListeners { get; }
    private static ExtensionManager();
    public static IExtensionManager get_Instance();
    public sealed virtual void Explore(string path);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IReportEventsObserver> get_ReportEventObservers();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ICommandsListener> get_CommandsListeners();
    [CompilerGeneratedAttribute]
private void <Explore>b__7_0(IReportEventsObserver reo);
    [CompilerGeneratedAttribute]
private void <Explore>b__7_1(ICommandsListener cl);
}
public interface ReportPortal.Shared.Extensibility.ICommandsListener {
    public abstract virtual void Initialize(ICommandsSource commandsSource);
}
public interface ReportPortal.Shared.Extensibility.IExtensionManager {
    public IList`1<IReportEventsObserver> ReportEventObservers { get; }
    public IList`1<ICommandsListener> CommandsListeners { get; }
    public abstract virtual void Explore(string path);
    public abstract virtual IList`1<IReportEventsObserver> get_ReportEventObservers();
    public abstract virtual IList`1<ICommandsListener> get_CommandsListeners();
}
public interface ReportPortal.Shared.Extensibility.IReportEventsObserver {
    public abstract virtual void Initialize(IReportEventsSource reportEventsSource);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.AfterLaunchFinishedEventArgs : ReportEventBaseArgs {
    public AfterLaunchFinishedEventArgs(IClientService clientService, IConfiguration configuration);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.AfterLaunchStartedEventArgs : ReportEventBaseArgs {
    public AfterLaunchStartedEventArgs(IClientService clientService, IConfiguration configuration);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.AfterLogsSentEventArgs : ReportEventBaseArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CreateLogItemRequest> <CreateLogItemRequests>k__BackingField;
    public IReadOnlyList`1<CreateLogItemRequest> CreateLogItemRequests { get; }
    public AfterLogsSentEventArgs(IClientService clientService, IConfiguration configuration, IReadOnlyList`1<CreateLogItemRequest> createLogItemRequests);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CreateLogItemRequest> get_CreateLogItemRequests();
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.AfterTestFinishedEventArgs : ReportEventBaseArgs {
    public AfterTestFinishedEventArgs(IClientService clientService, IConfiguration configuration);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.AfterTestStartedEventArgs : ReportEventBaseArgs {
    public AfterTestStartedEventArgs(IClientService clientService, IConfiguration configuration);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.BeforeLaunchFinishingEventArgs : ReportEventBaseArgs {
    [CompilerGeneratedAttribute]
private FinishLaunchRequest <FinishLaunchRequest>k__BackingField;
    public FinishLaunchRequest FinishLaunchRequest { get; }
    public BeforeLaunchFinishingEventArgs(IClientService clientService, IConfiguration configuration, FinishLaunchRequest finishLaunchRequest);
    [CompilerGeneratedAttribute]
public FinishLaunchRequest get_FinishLaunchRequest();
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.BeforeLaunchStartingEventArgs : ReportEventBaseArgs {
    [CompilerGeneratedAttribute]
private StartLaunchRequest <StartLaunchRequest>k__BackingField;
    public StartLaunchRequest StartLaunchRequest { get; }
    public BeforeLaunchStartingEventArgs(IClientService clientService, IConfiguration configuration, StartLaunchRequest startLaunchRequest);
    [CompilerGeneratedAttribute]
public StartLaunchRequest get_StartLaunchRequest();
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.BeforeLogsSendingEventArgs : ReportEventBaseArgs {
    [CompilerGeneratedAttribute]
private IList`1<CreateLogItemRequest> <CreateLogItemRequests>k__BackingField;
    public IList`1<CreateLogItemRequest> CreateLogItemRequests { get; }
    public BeforeLogsSendingEventArgs(IClientService clientService, IConfiguration configuration, IList`1<CreateLogItemRequest> createLogItemRequests);
    [CompilerGeneratedAttribute]
public IList`1<CreateLogItemRequest> get_CreateLogItemRequests();
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.BeforeTestFinishingEventArgs : ReportEventBaseArgs {
    [CompilerGeneratedAttribute]
private FinishTestItemRequest <FinishTestItemRequest>k__BackingField;
    public FinishTestItemRequest FinishTestItemRequest { get; }
    public BeforeTestFinishingEventArgs(IClientService clientService, IConfiguration configuration, FinishTestItemRequest finishTestItemRequest);
    [CompilerGeneratedAttribute]
public FinishTestItemRequest get_FinishTestItemRequest();
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.BeforeTestStartingEventArgs : ReportEventBaseArgs {
    [CompilerGeneratedAttribute]
private StartTestItemRequest <StartTestItemRequest>k__BackingField;
    public StartTestItemRequest StartTestItemRequest { get; }
    public BeforeTestStartingEventArgs(IClientService clientService, IConfiguration configuration, StartTestItemRequest startTestItemRequest);
    [CompilerGeneratedAttribute]
public StartTestItemRequest get_StartTestItemRequest();
}
public class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.LaunchInitializingEventArgs : ReportEventBaseArgs {
    public LaunchInitializingEventArgs(IClientService clientService, IConfiguration configuration);
}
public abstract class ReportPortal.Shared.Extensibility.ReportEvents.EventArgs.ReportEventBaseArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IClientService <ClientService>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IClientService ClientService { get; }
    public IConfiguration Configuration { get; }
    public ReportEventBaseArgs(IClientService clientService, IConfiguration configuration);
    [CompilerGeneratedAttribute]
public IClientService get_ClientService();
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
}
public interface ReportPortal.Shared.Extensibility.ReportEvents.IReportEventsSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnLaunchInitializing(LaunchEventHandler`1<LaunchInitializingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnLaunchInitializing(LaunchEventHandler`1<LaunchInitializingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeforeLaunchStarting(LaunchEventHandler`1<BeforeLaunchStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeforeLaunchStarting(LaunchEventHandler`1<BeforeLaunchStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAfterLaunchStarted(LaunchEventHandler`1<AfterLaunchStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAfterLaunchStarted(LaunchEventHandler`1<AfterLaunchStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeforeLaunchFinishing(LaunchEventHandler`1<BeforeLaunchFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeforeLaunchFinishing(LaunchEventHandler`1<BeforeLaunchFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAfterLaunchFinished(LaunchEventHandler`1<AfterLaunchFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAfterLaunchFinished(LaunchEventHandler`1<AfterLaunchFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeforeTestStarting(TestEventHandler`1<BeforeTestStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeforeTestStarting(TestEventHandler`1<BeforeTestStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAfterTestStarted(TestEventHandler`1<AfterTestStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAfterTestStarted(TestEventHandler`1<AfterTestStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeforeTestFinishing(TestEventHandler`1<BeforeTestFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeforeTestFinishing(TestEventHandler`1<BeforeTestFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAfterTestFinished(TestEventHandler`1<AfterTestFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAfterTestFinished(TestEventHandler`1<AfterTestFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeforeLogsSending(LogsEventHandler`1<BeforeLogsSendingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeforeLogsSending(LogsEventHandler`1<BeforeLogsSendingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAfterLogsSent(LogsEventHandler`1<AfterLogsSentEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAfterLogsSent(LogsEventHandler`1<AfterLogsSentEventArgs> value);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.LaunchEventHandler`1 : MulticastDelegate {
    public LaunchEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(ILaunchReporter launchReporter, TEventArgs args);
    public virtual IAsyncResult BeginInvoke(ILaunchReporter launchReporter, TEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.LogsEventHandler`1 : MulticastDelegate {
    public LogsEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(ILogsReporter logsReporter, TEventArgs args);
    public virtual IAsyncResult BeginInvoke(ILogsReporter logsReporter, TEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ReportPortal.Shared.Extensibility.ReportEvents.TestEventHandler`1 : MulticastDelegate {
    public TestEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(ITestReporter testReporter, TEventArgs args);
    public virtual IAsyncResult BeginInvoke(ITestReporter testReporter, TEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class ReportPortal.Shared.Internal.Delegating.BaseRequestExecuter : object {
    [AsyncStateMachineAttribute("ReportPortal.Shared.Internal.Delegating.BaseRequestExecuter/<ExecuteAsync>d__0`1")]
public virtual Task`1<T> ExecuteAsync(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttemptCallback, IStatisticsCounter statisticsCounter, string logicalOperationName);
}
public class ReportPortal.Shared.Internal.Delegating.ExponentialRetryRequestExecuter : BaseRequestExecuter {
    [CompilerGeneratedAttribute]
private ITraceLogger <TraceLogger>k__BackingField;
    private IRequestExecutionThrottler _concurrentThrottler;
    [CompilerGeneratedAttribute]
private UInt32 <MaxRetryAttemps>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BaseIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode[] <HttpStatusCodes>k__BackingField;
    private ITraceLogger TraceLogger { get; }
    public UInt32 MaxRetryAttemps { get; private set; }
    public UInt32 BaseIndex { get; private set; }
    public HttpStatusCode[] HttpStatusCodes { get; private set; }
    public ExponentialRetryRequestExecuter(UInt32 maxRetryAttempts, UInt32 baseIndex);
    public ExponentialRetryRequestExecuter(UInt32 maxRetryAttempts, UInt32 baseIndex, IRequestExecutionThrottler throttler, HttpStatusCode[] httpStatusCodes);
    [CompilerGeneratedAttribute]
private ITraceLogger get_TraceLogger();
    [CompilerGeneratedAttribute]
public UInt32 get_MaxRetryAttemps();
    [CompilerGeneratedAttribute]
private void set_MaxRetryAttemps(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BaseIndex();
    [CompilerGeneratedAttribute]
private void set_BaseIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public HttpStatusCode[] get_HttpStatusCodes();
    [CompilerGeneratedAttribute]
private void set_HttpStatusCodes(HttpStatusCode[] value);
    [AsyncStateMachineAttribute("ReportPortal.Shared.Internal.Delegating.ExponentialRetryRequestExecuter/<ExecuteAsync>d__18`1")]
public virtual Task`1<T> ExecuteAsync(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttempt, IStatisticsCounter statisticsCounter, string logicalOperationName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<T> <>n__0(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttemptCallback, IStatisticsCounter statisticsCounter, string logicalOperationName);
}
public interface ReportPortal.Shared.Internal.Delegating.IRequestExecuter {
    public abstract virtual Task`1<T> ExecuteAsync(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttemptCallback, IStatisticsCounter statisticsCounter, string logicalOperationName);
}
public interface ReportPortal.Shared.Internal.Delegating.IRequestExecuterFactory {
    public abstract virtual IRequestExecuter Create();
}
public interface ReportPortal.Shared.Internal.Delegating.IRequestExecutionThrottleFactory {
    public abstract virtual IRequestExecutionThrottler Create();
}
public interface ReportPortal.Shared.Internal.Delegating.IRequestExecutionThrottler {
    public int MaxCapacity { get; }
    public abstract virtual int get_MaxCapacity();
    public abstract virtual Task ReserveAsync();
    public abstract virtual void Release();
}
public class ReportPortal.Shared.Internal.Delegating.LinearRetryRequestExecuter : BaseRequestExecuter {
    [CompilerGeneratedAttribute]
private ITraceLogger <TraceLogger>k__BackingField;
    private IRequestExecutionThrottler _concurrentThrottler;
    [CompilerGeneratedAttribute]
private UInt32 <MaxRetryAttemps>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode[] <HttpStatusCodes>k__BackingField;
    private ITraceLogger TraceLogger { get; }
    public UInt32 MaxRetryAttemps { get; private set; }
    public UInt32 Delay { get; private set; }
    public HttpStatusCode[] HttpStatusCodes { get; private set; }
    public LinearRetryRequestExecuter(UInt32 maxRetryAttempts, UInt32 delay);
    public LinearRetryRequestExecuter(UInt32 maxRetryAttempts, UInt32 delay, IRequestExecutionThrottler throttler, HttpStatusCode[] httpStatusCodes);
    [CompilerGeneratedAttribute]
private ITraceLogger get_TraceLogger();
    [CompilerGeneratedAttribute]
public UInt32 get_MaxRetryAttemps();
    [CompilerGeneratedAttribute]
private void set_MaxRetryAttemps(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(UInt32 value);
    [CompilerGeneratedAttribute]
public HttpStatusCode[] get_HttpStatusCodes();
    [CompilerGeneratedAttribute]
private void set_HttpStatusCodes(HttpStatusCode[] value);
    [AsyncStateMachineAttribute("ReportPortal.Shared.Internal.Delegating.LinearRetryRequestExecuter/<ExecuteAsync>d__18`1")]
public virtual Task`1<T> ExecuteAsync(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttempt, IStatisticsCounter statisticsCounter, string logicalOperationName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<T> <>n__0(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttemptCallback, IStatisticsCounter statisticsCounter, string logicalOperationName);
}
public class ReportPortal.Shared.Internal.Delegating.NoneRetryRequestExecuter : BaseRequestExecuter {
    [CompilerGeneratedAttribute]
private ITraceLogger <TraceLogger>k__BackingField;
    private IRequestExecutionThrottler _concurrentThrottler;
    private ITraceLogger TraceLogger { get; }
    public NoneRetryRequestExecuter(IRequestExecutionThrottler throttler);
    [CompilerGeneratedAttribute]
private ITraceLogger get_TraceLogger();
    [AsyncStateMachineAttribute("ReportPortal.Shared.Internal.Delegating.NoneRetryRequestExecuter/<ExecuteAsync>d__5`1")]
public virtual Task`1<T> ExecuteAsync(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttempt, IStatisticsCounter statisticsCounter, string logicalOperationName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<T> <>n__0(Func`1<Task`1<T>> func, Action`1<Exception> beforeNextAttemptCallback, IStatisticsCounter statisticsCounter, string logicalOperationName);
}
public class ReportPortal.Shared.Internal.Delegating.RequestExecuterFactory : object {
    private IConfiguration _configuration;
    public RequestExecuterFactory(IConfiguration configuration);
    public sealed virtual IRequestExecuter Create();
}
public class ReportPortal.Shared.Internal.Delegating.RequestExecutionThrottleFactory : object {
    private static int MAX_CONCURRENT_REQUESTS;
    private IConfiguration _configuration;
    public RequestExecutionThrottleFactory(IConfiguration configuration);
    public sealed virtual IRequestExecutionThrottler Create();
}
public class ReportPortal.Shared.Internal.Delegating.RequestExecutionThrottler : object {
    [CompilerGeneratedAttribute]
private ITraceLogger <TraceLogger>k__BackingField;
    private SemaphoreSlim _concurrentAwaiter;
    private int _waitingThreads;
    [CompilerGeneratedAttribute]
private int <MaxCapacity>k__BackingField;
    private ITraceLogger TraceLogger { get; }
    public int MaxCapacity { get; }
    public RequestExecutionThrottler(int maxConcurrentRequests);
    [CompilerGeneratedAttribute]
private ITraceLogger get_TraceLogger();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxCapacity();
    [AsyncStateMachineAttribute("ReportPortal.Shared.Internal.Delegating.RequestExecutionThrottler/<ReserveAsync>d__9")]
public sealed virtual Task ReserveAsync();
    public sealed virtual void Release();
    public sealed virtual void Dispose();
}
public class ReportPortal.Shared.Internal.Delegating.RetryExecutionException : AggregateException {
    private string _message;
    public string Message { get; }
    public RetryExecutionException(string methodName, IEnumerable`1<Exception> innerExceptions);
    public virtual string get_Message();
    public virtual string ToString();
}
public interface ReportPortal.Shared.Internal.Logging.ITraceLogger {
    public abstract virtual void Info(string message);
    public abstract virtual void Verbose(string message);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
}
internal class ReportPortal.Shared.Internal.Logging.TraceLogger : object {
    private TraceSource _traceSource;
    private int _appDomainId;
    private string _appDomainFriendlyName;
    public TraceLogger(TraceSource traceSource);
    public sealed virtual void Info(string message);
    public sealed virtual void Verbose(string message);
    public sealed virtual void Error(string message);
    public sealed virtual void Warn(string message);
    private void Message(TraceEventType eventType, string message);
}
public class ReportPortal.Shared.Internal.Logging.TraceLogManager : object {
    private static Lazy`1<TraceLogManager> _instance;
    private string _baseDir;
    private static object _lockObj;
    private static Dictionary`2<Type, ITraceLogger> _traceLoggers;
    public static TraceLogManager Instance { get; }
    private static TraceLogManager();
    public static TraceLogManager get_Instance();
    public TraceLogManager WithBaseDir(string baseDir);
    public ITraceLogger GetLogger(Type type);
    public ITraceLogger GetLogger();
}
public static class ReportPortal.Shared.MimeTypes.MimeTypeMap : object {
    private static Dictionary`2<string, string> _mappings;
    private static MimeTypeMap();
    public static string GetMimeType(string extension);
}
public class ReportPortal.Shared.Reporter.Http.ClientServiceBuilder : object {
    private IConfiguration _configuration;
    private HttpClientHandlerFactory _httpClientHandlerFactory;
    private HttpClientFactory _httpClientFactory;
    private static ITraceLogger TraceLogger { get; }
    public ClientServiceBuilder(IConfiguration configuration);
    private static ITraceLogger get_TraceLogger();
    public ClientServiceBuilder UseHttpClientHandlerFactory(HttpClientHandlerFactory httpClientHandlerFactory);
    public ClientServiceBuilder UseHttpClientFactory(HttpClientFactory httpClientFactory);
    public IClientService Build();
}
public class ReportPortal.Shared.Reporter.Http.HttpClientFactory : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClientHandler <HttpClientHandler>k__BackingField;
    private static ITraceLogger TraceLogger { get; }
    protected IConfiguration Configuration { get; }
    protected HttpClientHandler HttpClientHandler { get; }
    public HttpClientFactory(IConfiguration configuration, HttpClientHandler httpClientHandler);
    private static ITraceLogger get_TraceLogger();
    [CompilerGeneratedAttribute]
protected IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
protected HttpClientHandler get_HttpClientHandler();
    public virtual HttpClient Create();
    protected virtual Nullable`1<TimeSpan> GetTimeout();
}
public class ReportPortal.Shared.Reporter.Http.HttpClientHandlerFactory : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    protected IConfiguration Configuration { get; }
    public HttpClientHandlerFactory(IConfiguration configuration);
    [CompilerGeneratedAttribute]
protected IConfiguration get_Configuration();
    public virtual HttpClientHandler Create();
    protected virtual IWebProxy GetProxy();
}
public interface ReportPortal.Shared.Reporter.ILaunchReporter {
    public ILaunchReporterInfo Info { get; }
    public IList`1<ITestReporter> ChildTestReporters { get; }
    public abstract virtual ILaunchReporterInfo get_Info();
    public abstract virtual void Start(StartLaunchRequest startLaunchRequest);
    public abstract virtual void Finish(FinishLaunchRequest finishLaunchRequest);
    public abstract virtual ITestReporter StartChildTestReporter(StartTestItemRequest startTestItemRequest);
    public abstract virtual IList`1<ITestReporter> get_ChildTestReporters();
    public abstract virtual void Log(CreateLogItemRequest createLogItemRequest);
}
public interface ReportPortal.Shared.Reporter.ILaunchReporterInfo {
    public string Url { get; public set; }
    public abstract virtual string get_Url();
    public abstract virtual void set_Url(string value);
}
public interface ReportPortal.Shared.Reporter.ILogRequestAmender {
    public abstract virtual void Amend(CreateLogItemRequest request);
}
public interface ReportPortal.Shared.Reporter.ILogsReporter {
    public Task ProcessingTask { get; }
    public abstract virtual Task get_ProcessingTask();
    public abstract virtual void Log(CreateLogItemRequest logRequest);
    public abstract virtual void Sync();
}
public interface ReportPortal.Shared.Reporter.IReporter {
    public Task StartTask { get; }
    public Task FinishTask { get; }
    public ILaunchStatisticsCounter StatisticsCounter { get; }
    public abstract virtual Task get_StartTask();
    public abstract virtual Task get_FinishTask();
    public abstract virtual void Sync();
    public abstract virtual ILaunchStatisticsCounter get_StatisticsCounter();
}
public interface ReportPortal.Shared.Reporter.IReporterInfo {
    public string Uuid { get; }
    public string Name { get; }
    public DateTime StartTime { get; }
    public Nullable`1<DateTime> FinishTime { get; }
    public abstract virtual string get_Uuid();
    public abstract virtual string get_Name();
    public abstract virtual DateTime get_StartTime();
    public abstract virtual Nullable`1<DateTime> get_FinishTime();
}
public interface ReportPortal.Shared.Reporter.ITestReporter {
    public ITestReporterInfo Info { get; }
    public ITestReporter ParentTestReporter { get; }
    public ILaunchReporter LaunchReporter { get; }
    public IList`1<ITestReporter> ChildTestReporters { get; }
    public abstract virtual ITestReporterInfo get_Info();
    public abstract virtual ITestReporter get_ParentTestReporter();
    public abstract virtual ILaunchReporter get_LaunchReporter();
    public abstract virtual void Start(StartTestItemRequest startTestItemRequest);
    public abstract virtual void Finish(FinishTestItemRequest finishTestItemRequest);
    public abstract virtual ITestReporter StartChildTestReporter(StartTestItemRequest startTestItemRequest);
    public abstract virtual IList`1<ITestReporter> get_ChildTestReporters();
    public abstract virtual void Log(CreateLogItemRequest createLogItemRequest);
}
public interface ReportPortal.Shared.Reporter.ITestReporterInfo {
}
public class ReportPortal.Shared.Reporter.LaunchInfo : object {
    [CompilerGeneratedAttribute]
private string <Uuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FinishTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Uuid { get; public set; }
    public string Name { get; public set; }
    public DateTime StartTime { get; public set; }
    public Nullable`1<DateTime> FinishTime { get; public set; }
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uuid();
    [CompilerGeneratedAttribute]
public void set_Uuid(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_FinishTime();
    [CompilerGeneratedAttribute]
public void set_FinishTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Url(string value);
}
internal class ReportPortal.Shared.Reporter.LaunchLogRequestAmender : object {
    private ILaunchReporter _launchReporter;
    public LaunchLogRequestAmender(ILaunchReporter launchReporter);
    public sealed virtual void Amend(CreateLogItemRequest request);
}
public class ReportPortal.Shared.Reporter.LaunchReporter : object {
    [CompilerGeneratedAttribute]
private ITraceLogger <TraceLogger>k__BackingField;
    private bool _asyncReporting;
    private IConfiguration _configuration;
    private IClientService _service;
    private IRequestExecuter _requestExecuter;
    private IExtensionManager _extensionManager;
    private ReportEventsSource _reportEventsSource;
    private LogsReporter _logsReporter;
    private object _lockObj;
    private LaunchInfo _launchInfo;
    [CompilerGeneratedAttribute]
private ILaunchStatisticsCounter <StatisticsCounter>k__BackingField;
    private bool _isExternalLaunchId;
    [CompilerGeneratedAttribute]
private Task <StartTask>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <FinishTask>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ITestReporter> <ChildTestReporters>k__BackingField;
    private ITraceLogger TraceLogger { get; }
    public ILaunchReporterInfo Info { get; }
    public ILaunchStatisticsCounter StatisticsCounter { get; }
    public Task StartTask { get; private set; }
    public Task FinishTask { get; private set; }
    public IList`1<ITestReporter> ChildTestReporters { get; private set; }
    public LaunchReporter(IClientService service, IConfiguration configuration, IRequestExecuter requestExecuter, IExtensionManager extensionManager);
    [CompilerGeneratedAttribute]
private ITraceLogger get_TraceLogger();
    public sealed virtual ILaunchReporterInfo get_Info();
    [CompilerGeneratedAttribute]
public sealed virtual ILaunchStatisticsCounter get_StatisticsCounter();
    [CompilerGeneratedAttribute]
public sealed virtual Task get_StartTask();
    [CompilerGeneratedAttribute]
private void set_StartTask(Task value);
    public sealed virtual void Start(StartLaunchRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_FinishTask();
    [CompilerGeneratedAttribute]
private void set_FinishTask(Task value);
    public sealed virtual void Finish(FinishLaunchRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ITestReporter> get_ChildTestReporters();
    [CompilerGeneratedAttribute]
private void set_ChildTestReporters(IList`1<ITestReporter> value);
    public sealed virtual ITestReporter StartChildTestReporter(StartTestItemRequest request);
    public sealed virtual void Log(CreateLogItemRequest createLogItemRequest);
    public sealed virtual void Sync();
    private LaunchInitializingEventArgs NotifyInitializing();
    private BeforeLaunchStartingEventArgs NotifyStarting(StartLaunchRequest request);
    private AfterLaunchStartedEventArgs NotifyStarted();
    private BeforeLaunchFinishingEventArgs NotifyFinishing(FinishLaunchRequest request);
    private AfterLaunchFinishedEventArgs NotifyFinished();
}
public class ReportPortal.Shared.Reporter.LogsReporter : object {
    [CompilerGeneratedAttribute]
private static ITraceLogger <TraceLogger>k__BackingField;
    private BlockingCollection`1<CreateLogItemRequest> _queue;
    private bool _asyncReporting;
    private IReporter _reporter;
    private IClientService _service;
    private IConfiguration _configuration;
    private IExtensionManager _extensionManager;
    private IRequestExecuter _requestExecuter;
    private ILogRequestAmender _logRequestAmender;
    private ReportEventsSource _reportEventsSource;
    [CompilerGeneratedAttribute]
private Task <ProcessingTask>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchCapacity>k__BackingField;
    private static ITraceLogger TraceLogger { get; }
    public Task ProcessingTask { get; private set; }
    public int BatchCapacity { get; }
    public LogsReporter(IReporter testReporter, IClientService service, IConfiguration configuration, IExtensionManager extensionManager, IRequestExecuter requestExecuter, ILogRequestAmender logRequestAmender, ReportEventsSource reportEventsSource, int batchCapacity);
    private static LogsReporter();
    [CompilerGeneratedAttribute]
private static ITraceLogger get_TraceLogger();
    [CompilerGeneratedAttribute]
public sealed virtual Task get_ProcessingTask();
    [CompilerGeneratedAttribute]
private void set_ProcessingTask(Task value);
    [CompilerGeneratedAttribute]
public int get_BatchCapacity();
    public sealed virtual void Log(CreateLogItemRequest logRequest);
    public void Finish();
    public sealed virtual void Sync();
    [AsyncStateMachineAttribute("ReportPortal.Shared.Reporter.LogsReporter/<ConsumeLogRequests>d__23")]
private Task ConsumeLogRequests();
    [AsyncStateMachineAttribute("ReportPortal.Shared.Reporter.LogsReporter/<SendLogRequests>d__24")]
private Task SendLogRequests(List`1<CreateLogItemRequest> logRequests);
    private BeforeLogsSendingEventArgs NotifySending(IList`1<CreateLogItemRequest> requests);
    private AfterLogsSentEventArgs NotifySent(IReadOnlyList`1<CreateLogItemRequest> requests);
    [AsyncStateMachineAttribute("ReportPortal.Shared.Reporter.LogsReporter/<<-ctor>b__16_0>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__16_0(Task consumer);
}
public class ReportPortal.Shared.Reporter.ReportEventsSource : object {
    private static ITraceLogger _traceLogger;
    [CompilerGeneratedAttribute]
private LaunchEventHandler`1<LaunchInitializingEventArgs> OnLaunchInitializing;
    [CompilerGeneratedAttribute]
private LaunchEventHandler`1<BeforeLaunchStartingEventArgs> OnBeforeLaunchStarting;
    [CompilerGeneratedAttribute]
private LaunchEventHandler`1<AfterLaunchStartedEventArgs> OnAfterLaunchStarted;
    [CompilerGeneratedAttribute]
private LaunchEventHandler`1<BeforeLaunchFinishingEventArgs> OnBeforeLaunchFinishing;
    [CompilerGeneratedAttribute]
private LaunchEventHandler`1<AfterLaunchFinishedEventArgs> OnAfterLaunchFinished;
    [CompilerGeneratedAttribute]
private TestEventHandler`1<BeforeTestStartingEventArgs> OnBeforeTestStarting;
    [CompilerGeneratedAttribute]
private TestEventHandler`1<AfterTestStartedEventArgs> OnAfterTestStarted;
    [CompilerGeneratedAttribute]
private TestEventHandler`1<BeforeTestFinishingEventArgs> OnBeforeTestFinishing;
    [CompilerGeneratedAttribute]
private TestEventHandler`1<AfterTestFinishedEventArgs> OnAfterTestFinished;
    [CompilerGeneratedAttribute]
private LogsEventHandler`1<BeforeLogsSendingEventArgs> OnBeforeLogsSending;
    [CompilerGeneratedAttribute]
private LogsEventHandler`1<AfterLogsSentEventArgs> OnAfterLogsSent;
    private static ReportEventsSource();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnLaunchInitializing(LaunchEventHandler`1<LaunchInitializingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnLaunchInitializing(LaunchEventHandler`1<LaunchInitializingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBeforeLaunchStarting(LaunchEventHandler`1<BeforeLaunchStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBeforeLaunchStarting(LaunchEventHandler`1<BeforeLaunchStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnAfterLaunchStarted(LaunchEventHandler`1<AfterLaunchStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnAfterLaunchStarted(LaunchEventHandler`1<AfterLaunchStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBeforeLaunchFinishing(LaunchEventHandler`1<BeforeLaunchFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBeforeLaunchFinishing(LaunchEventHandler`1<BeforeLaunchFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnAfterLaunchFinished(LaunchEventHandler`1<AfterLaunchFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnAfterLaunchFinished(LaunchEventHandler`1<AfterLaunchFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBeforeTestStarting(TestEventHandler`1<BeforeTestStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBeforeTestStarting(TestEventHandler`1<BeforeTestStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnAfterTestStarted(TestEventHandler`1<AfterTestStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnAfterTestStarted(TestEventHandler`1<AfterTestStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBeforeTestFinishing(TestEventHandler`1<BeforeTestFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBeforeTestFinishing(TestEventHandler`1<BeforeTestFinishingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnAfterTestFinished(TestEventHandler`1<AfterTestFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnAfterTestFinished(TestEventHandler`1<AfterTestFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBeforeLogsSending(LogsEventHandler`1<BeforeLogsSendingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBeforeLogsSending(LogsEventHandler`1<BeforeLogsSendingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnAfterLogsSent(LogsEventHandler`1<AfterLogsSentEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnAfterLogsSent(LogsEventHandler`1<AfterLogsSentEventArgs> value);
    public static void RaiseLaunchInitializing(ReportEventsSource source, ILaunchReporter launchReporter, LaunchInitializingEventArgs args);
    public static void RaiseBeforeLaunchStarting(ReportEventsSource source, ILaunchReporter launchReporter, BeforeLaunchStartingEventArgs args);
    public static void RaiseAfterLaunchStarted(ReportEventsSource source, ILaunchReporter launchReporter, AfterLaunchStartedEventArgs args);
    public static void RaiseBeforeLaunchFinishing(ReportEventsSource source, ILaunchReporter launchReporter, BeforeLaunchFinishingEventArgs args);
    public static void RaiseAfterLaunchFinished(ReportEventsSource source, ILaunchReporter launchReporter, AfterLaunchFinishedEventArgs args);
    public static void RaiseBeforeTestStarting(ReportEventsSource source, ITestReporter testReporter, BeforeTestStartingEventArgs args);
    public static void RaiseAfterTestStarted(ReportEventsSource source, ITestReporter testReporter, AfterTestStartedEventArgs args);
    public static void RaiseBeforeTestFinishing(ReportEventsSource source, ITestReporter testReporter, BeforeTestFinishingEventArgs args);
    public static void RaiseAfterTestFinished(ReportEventsSource source, ITestReporter testReporter, AfterTestFinishedEventArgs args);
    public static void RaiseBeforeLogsSending(ReportEventsSource source, ILogsReporter logsReporter, BeforeLogsSendingEventArgs args);
    public static void RaiseAfterLogsSent(ReportEventsSource source, ILogsReporter logsReporter, AfterLogsSentEventArgs args);
    private static void RaiseSafe(Delegate source, object reporter, ReportEventBaseArgs args);
}
public interface ReportPortal.Shared.Reporter.Statistics.ILaunchStatisticsCounter {
    public IStatisticsCounter StartTestItemStatisticsCounter { get; }
    public IStatisticsCounter FinishTestItemStatisticsCounter { get; }
    public IStatisticsCounter LogItemStatisticsCounter { get; }
    public abstract virtual IStatisticsCounter get_StartTestItemStatisticsCounter();
    public abstract virtual IStatisticsCounter get_FinishTestItemStatisticsCounter();
    public abstract virtual IStatisticsCounter get_LogItemStatisticsCounter();
}
public interface ReportPortal.Shared.Reporter.Statistics.IStatisticsCounter {
    public TimeSpan Min { get; }
    public TimeSpan Max { get; }
    public TimeSpan Avg { get; }
    public long Count { get; }
    public abstract virtual TimeSpan get_Min();
    public abstract virtual TimeSpan get_Max();
    public abstract virtual TimeSpan get_Avg();
    public abstract virtual long get_Count();
    public abstract virtual void Measure(TimeSpan duration);
}
public class ReportPortal.Shared.Reporter.Statistics.LaunchStatisticsCounter : object {
    [CompilerGeneratedAttribute]
private IStatisticsCounter <StartTestItemStatisticsCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private IStatisticsCounter <FinishTestItemStatisticsCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private IStatisticsCounter <LogItemStatisticsCounter>k__BackingField;
    public IStatisticsCounter StartTestItemStatisticsCounter { get; }
    public IStatisticsCounter FinishTestItemStatisticsCounter { get; }
    public IStatisticsCounter LogItemStatisticsCounter { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IStatisticsCounter get_StartTestItemStatisticsCounter();
    [CompilerGeneratedAttribute]
public sealed virtual IStatisticsCounter get_FinishTestItemStatisticsCounter();
    [CompilerGeneratedAttribute]
public sealed virtual IStatisticsCounter get_LogItemStatisticsCounter();
    public virtual string ToString();
}
public class ReportPortal.Shared.Reporter.Statistics.StatisticsCounter : object {
    private object _lockObj;
    private TimeSpan _sum;
    [CompilerGeneratedAttribute]
private TimeSpan <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    public TimeSpan Min { get; private set; }
    public TimeSpan Max { get; private set; }
    public TimeSpan Avg { get; }
    public long Count { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(TimeSpan value);
    public sealed virtual TimeSpan get_Avg();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(long value);
    public sealed virtual void Measure(TimeSpan duration);
    public virtual string ToString();
}
public class ReportPortal.Shared.Reporter.TestInfo : object {
    [CompilerGeneratedAttribute]
private string <Uuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FinishTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Status <Status>k__BackingField;
    public string Uuid { get; public set; }
    public string Name { get; public set; }
    public DateTime StartTime { get; public set; }
    public Nullable`1<DateTime> FinishTime { get; public set; }
    public Status Status { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uuid();
    [CompilerGeneratedAttribute]
public void set_Uuid(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_FinishTime();
    [CompilerGeneratedAttribute]
public void set_FinishTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Status get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Status value);
}
internal class ReportPortal.Shared.Reporter.TestLogRequestAmender : object {
    private ITestReporter _testReporter;
    public TestLogRequestAmender(ITestReporter testReporter);
    public sealed virtual void Amend(CreateLogItemRequest request);
}
public class ReportPortal.Shared.Reporter.TestReporter : object {
    private bool _asyncReporting;
    private IClientService _service;
    private IConfiguration _configuration;
    private IRequestExecuter _requestExecuter;
    private IExtensionManager _extensionManager;
    private LogsReporter _logsReporter;
    private ReportEventsSource _reportEventsSource;
    [CompilerGeneratedAttribute]
private static ITraceLogger <TraceLogger>k__BackingField;
    private object _lockObj;
    private TestInfo _testInfo;
    [CompilerGeneratedAttribute]
private ILaunchReporter <LaunchReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestReporter <ParentTestReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <StartTask>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <FinishTask>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ITestReporter> <ChildTestReporters>k__BackingField;
    private static ITraceLogger TraceLogger { get; }
    public ITestReporterInfo Info { get; }
    public ILaunchReporter LaunchReporter { get; }
    public ITestReporter ParentTestReporter { get; }
    public Task StartTask { get; private set; }
    public Task FinishTask { get; private set; }
    public IList`1<ITestReporter> ChildTestReporters { get; private set; }
    public ILaunchStatisticsCounter StatisticsCounter { get; }
    public TestReporter(IClientService service, IConfiguration configuration, ILaunchReporter launchReporter, ITestReporter parentTestReporter, IRequestExecuter requestExecuter, IExtensionManager extensionManager, ReportEventsSource reportEventNotifier);
    private static TestReporter();
    [CompilerGeneratedAttribute]
private static ITraceLogger get_TraceLogger();
    public sealed virtual ITestReporterInfo get_Info();
    [CompilerGeneratedAttribute]
public sealed virtual ILaunchReporter get_LaunchReporter();
    [CompilerGeneratedAttribute]
public sealed virtual ITestReporter get_ParentTestReporter();
    [CompilerGeneratedAttribute]
public sealed virtual Task get_StartTask();
    [CompilerGeneratedAttribute]
private void set_StartTask(Task value);
    public sealed virtual void Start(StartTestItemRequest startTestItemRequest);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_FinishTask();
    [CompilerGeneratedAttribute]
private void set_FinishTask(Task value);
    public sealed virtual void Finish(FinishTestItemRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ITestReporter> get_ChildTestReporters();
    [CompilerGeneratedAttribute]
private void set_ChildTestReporters(IList`1<ITestReporter> value);
    public sealed virtual ILaunchStatisticsCounter get_StatisticsCounter();
    public sealed virtual ITestReporter StartChildTestReporter(StartTestItemRequest request);
    public sealed virtual void Log(CreateLogItemRequest request);
    public sealed virtual void Sync();
    private BeforeTestStartingEventArgs NotifyStarting(StartTestItemRequest request);
    private AfterTestStartedEventArgs NotifyStarted();
    private BeforeTestFinishingEventArgs NotifyFinishing(FinishTestItemRequest request);
    private AfterTestFinishedEventArgs NotifyFinished();
}
