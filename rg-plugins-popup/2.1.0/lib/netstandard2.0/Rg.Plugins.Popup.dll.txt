[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Rg.Plugins.Popup.Animations.Base.BaseAnimation : object {
    private static UInt32 DefaultDuration;
    [CompilerGeneratedAttribute]
private UInt32 <DurationIn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DurationOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Easing <EasingIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Easing <EasingOut>k__BackingField;
    [TypeConverterAttribute("Rg.Plugins.Popup.Converters.TypeConverters.UintTypeConverter")]
public UInt32 DurationIn { get; public set; }
    [TypeConverterAttribute("Rg.Plugins.Popup.Converters.TypeConverters.UintTypeConverter")]
public UInt32 DurationOut { get; public set; }
    [TypeConverterAttribute("Rg.Plugins.Popup.Converters.TypeConverters.EasingTypeConverter")]
public Easing EasingIn { get; public set; }
    [TypeConverterAttribute("Rg.Plugins.Popup.Converters.TypeConverters.EasingTypeConverter")]
public Easing EasingOut { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_DurationIn();
    [CompilerGeneratedAttribute]
public void set_DurationIn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DurationOut();
    [CompilerGeneratedAttribute]
public void set_DurationOut(UInt32 value);
    [CompilerGeneratedAttribute]
public Easing get_EasingIn();
    [CompilerGeneratedAttribute]
public void set_EasingIn(Easing value);
    [CompilerGeneratedAttribute]
public Easing get_EasingOut();
    [CompilerGeneratedAttribute]
public void set_EasingOut(Easing value);
    public abstract virtual void Preparing(View content, PopupPage page);
    public abstract virtual void Disposing(View content, PopupPage page);
    public abstract virtual Task Appearing(View content, PopupPage page);
    public abstract virtual Task Disappearing(View content, PopupPage page);
    protected virtual int GetTopOffset(View content, Page page);
    protected virtual int GetLeftOffset(View content, Page page);
    protected virtual void HidePage(Page page);
    protected virtual void ShowPage(Page page);
}
public abstract class Rg.Plugins.Popup.Animations.Base.FadeBackgroundAnimation : BaseAnimation {
    private Color _backgroundColor;
    [CompilerGeneratedAttribute]
private bool <HasBackgroundAnimation>k__BackingField;
    public bool HasBackgroundAnimation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasBackgroundAnimation();
    [CompilerGeneratedAttribute]
public void set_HasBackgroundAnimation(bool value);
    public virtual void Preparing(View content, PopupPage page);
    public virtual void Disposing(View content, PopupPage page);
    public virtual Task Appearing(View content, PopupPage page);
    public virtual Task Disappearing(View content, PopupPage page);
    private Color GetColor(double transparent);
}
public class Rg.Plugins.Popup.Animations.FadeAnimation : BaseAnimation {
    private double _defaultOpacity;
    [CompilerGeneratedAttribute]
private bool <HasBackgroundAnimation>k__BackingField;
    public bool HasBackgroundAnimation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasBackgroundAnimation();
    [CompilerGeneratedAttribute]
public void set_HasBackgroundAnimation(bool value);
    public virtual void Preparing(View content, PopupPage page);
    public virtual void Disposing(View content, PopupPage page);
    public virtual Task Appearing(View content, PopupPage page);
    public virtual Task Disappearing(View content, PopupPage page);
}
public class Rg.Plugins.Popup.Animations.MoveAnimation : FadeBackgroundAnimation {
    private double _defaultTranslationX;
    private double _defaultTranslationY;
    [CompilerGeneratedAttribute]
private MoveAnimationOptions <PositionIn>k__BackingField;
    [CompilerGeneratedAttribute]
private MoveAnimationOptions <PositionOut>k__BackingField;
    public MoveAnimationOptions PositionIn { get; public set; }
    public MoveAnimationOptions PositionOut { get; public set; }
    public MoveAnimation(MoveAnimationOptions positionIn, MoveAnimationOptions positionOut);
    [CompilerGeneratedAttribute]
public MoveAnimationOptions get_PositionIn();
    [CompilerGeneratedAttribute]
public void set_PositionIn(MoveAnimationOptions value);
    [CompilerGeneratedAttribute]
public MoveAnimationOptions get_PositionOut();
    [CompilerGeneratedAttribute]
public void set_PositionOut(MoveAnimationOptions value);
    public virtual void Preparing(View content, PopupPage page);
    public virtual void Disposing(View content, PopupPage page);
    public virtual Task Appearing(View content, PopupPage page);
    public virtual Task Disappearing(View content, PopupPage page);
    private void UpdateDefaultTranslations(View content);
}
public class Rg.Plugins.Popup.Animations.ScaleAnimation : FadeAnimation {
    private double _defaultScale;
    private double _defaultOpacity;
    private double _defaultTranslationX;
    private double _defaultTranslationY;
    [CompilerGeneratedAttribute]
private double <ScaleIn>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScaleOut>k__BackingField;
    [CompilerGeneratedAttribute]
private MoveAnimationOptions <PositionIn>k__BackingField;
    [CompilerGeneratedAttribute]
private MoveAnimationOptions <PositionOut>k__BackingField;
    public double ScaleIn { get; public set; }
    public double ScaleOut { get; public set; }
    public MoveAnimationOptions PositionIn { get; public set; }
    public MoveAnimationOptions PositionOut { get; public set; }
    public ScaleAnimation(MoveAnimationOptions positionIn, MoveAnimationOptions positionOut);
    [CompilerGeneratedAttribute]
public double get_ScaleIn();
    [CompilerGeneratedAttribute]
public void set_ScaleIn(double value);
    [CompilerGeneratedAttribute]
public double get_ScaleOut();
    [CompilerGeneratedAttribute]
public void set_ScaleOut(double value);
    [CompilerGeneratedAttribute]
public MoveAnimationOptions get_PositionIn();
    [CompilerGeneratedAttribute]
public void set_PositionIn(MoveAnimationOptions value);
    [CompilerGeneratedAttribute]
public MoveAnimationOptions get_PositionOut();
    [CompilerGeneratedAttribute]
public void set_PositionOut(MoveAnimationOptions value);
    public virtual void Preparing(View content, PopupPage page);
    public virtual void Disposing(View content, PopupPage page);
    [AsyncStateMachineAttribute("Rg.Plugins.Popup.Animations.ScaleAnimation/<Appearing>d__24")]
public virtual Task Appearing(View content, PopupPage page);
    [AsyncStateMachineAttribute("Rg.Plugins.Popup.Animations.ScaleAnimation/<Disappearing>d__25")]
public virtual Task Disappearing(View content, PopupPage page);
    private Task Scale(View content, Easing easing, double start, double end, bool isAppearing);
    private void UpdateDefaultProperties(View content);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(View content, PopupPage page);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(View content, PopupPage page);
}
internal static class Rg.Plugins.Popup.Config : object {
    public static string InitializationDescriptionUrl;
    public static string MigrationV1_0_xToV1_1_xUrl;
}
public interface Rg.Plugins.Popup.Contracts.IPopupNavigation {
    public IReadOnlyList`1<PopupPage> PopupStack { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Pushing(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Pushing(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Pushed(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Pushed(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Popping(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Popping(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Popped(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Popped(EventHandler`1<PopupNavigationEventArgs> value);
    public abstract virtual IReadOnlyList`1<PopupPage> get_PopupStack();
    public abstract virtual Task PushAsync(PopupPage page, bool animate);
    public abstract virtual Task PopAsync(bool animate);
    public abstract virtual Task PopAllAsync(bool animate);
    public abstract virtual Task RemovePageAsync(PopupPage page, bool animate);
}
public interface Rg.Plugins.Popup.Contracts.IPopupPlatform {
    public bool IsInitialized { get; }
    public bool IsSystemAnimationEnabled { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnInitialized(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnInitialized(EventHandler value);
    public abstract virtual bool get_IsInitialized();
    public abstract virtual bool get_IsSystemAnimationEnabled();
    public abstract virtual Task AddAsync(PopupPage page);
    public abstract virtual Task RemoveAsync(PopupPage page);
}
public class Rg.Plugins.Popup.Converters.TypeConverters.EasingTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Rg.Plugins.Popup.Converters.TypeConverters.UintTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public enum Rg.Plugins.Popup.Enums.MoveAnimationOptions : Enum {
    public int value__;
    public static MoveAnimationOptions Center;
    public static MoveAnimationOptions Left;
    public static MoveAnimationOptions Right;
    public static MoveAnimationOptions Top;
    public static MoveAnimationOptions Bottom;
}
[FlagsAttribute]
public enum Rg.Plugins.Popup.Enums.PaddingSide : Enum {
    public int value__;
    public static PaddingSide Left;
    public static PaddingSide Top;
    public static PaddingSide Right;
    public static PaddingSide Bottom;
    public static PaddingSide All;
}
public class Rg.Plugins.Popup.Events.PopupNavigationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PopupPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnimated>k__BackingField;
    public PopupPage Page { get; }
    public bool IsAnimated { get; }
    public PopupNavigationEventArgs(PopupPage page, bool isAnimated);
    [CompilerGeneratedAttribute]
public PopupPage get_Page();
    [CompilerGeneratedAttribute]
public bool get_IsAnimated();
}
public class Rg.Plugins.Popup.Exceptions.RGInitialisationException : Exception {
    public RGInitialisationException(string message);
    public RGInitialisationException(string message, Exception innerException);
    protected RGInitialisationException(SerializationInfo info, StreamingContext context);
}
public class Rg.Plugins.Popup.Exceptions.RGPageInvalidException : Exception {
    public RGPageInvalidException(string message);
    public RGPageInvalidException(string message, Exception innerException);
    protected RGPageInvalidException(SerializationInfo info, StreamingContext context);
}
public class Rg.Plugins.Popup.Exceptions.RGPopupStackInvalidException : Exception {
    public RGPopupStackInvalidException(string message);
    public RGPopupStackInvalidException(string message, Exception innerException);
    protected RGPopupStackInvalidException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Rg.Plugins.Popup.Extensions.NavigationExtension : object {
    [ExtensionAttribute]
public static Task PushPopupAsync(INavigation sender, PopupPage page, bool animate);
    [ExtensionAttribute]
public static Task PopPopupAsync(INavigation sender, bool animate);
    [ExtensionAttribute]
public static Task PopAllPopupAsync(INavigation sender, bool animate);
    [ExtensionAttribute]
public static Task RemovePopupPageAsync(INavigation sender, PopupPage page, bool animate);
}
[ExtensionAttribute]
internal static class Rg.Plugins.Popup.Extensions.VisualElementExtensions : object {
    [IteratorStateMachineAttribute("Rg.Plugins.Popup.Extensions.VisualElementExtensions/<RgDescendants>d__0")]
[ExtensionAttribute]
[ObsoleteAttribute("Use Element.Descendants")]
internal static IEnumerable`1<Element> RgDescendants(Element element);
}
public interface Rg.Plugins.Popup.Interfaces.Animations.IPopupAnimation {
    public abstract virtual void Preparing(View content, PopupPage page);
    public abstract virtual void Disposing(View content, PopupPage page);
    public abstract virtual Task Appearing(View content, PopupPage page);
    public abstract virtual Task Disappearing(View content, PopupPage page);
}
public class Rg.Plugins.Popup.Pages.PopupPage : ContentPage {
    private static string IsAnimatingObsoleteText;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Task <AppearingTransactionTask>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Task <DisappearingTransactionTask>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler BackgroundClicked;
    [ObsoleteAttribute("IsAnimating is obsolute as of v1.1.5. Please use IsAnimationEnabled instead. See more info: https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Migration-from-v1.0.x-to-v1.1.x")]
public static BindableProperty IsAnimatingProperty;
    public static BindableProperty IsAnimationEnabledProperty;
    public static BindableProperty HasSystemPaddingProperty;
    public static BindableProperty AnimationProperty;
    public static BindableProperty SystemPaddingProperty;
    public static BindableProperty SystemPaddingSidesProperty;
    public static BindableProperty CloseWhenBackgroundIsClickedProperty;
    public static BindableProperty BackgroundInputTransparentProperty;
    public static BindableProperty HasKeyboardOffsetProperty;
    public static BindableProperty KeyboardOffsetProperty;
    public static BindableProperty BackgroundClickedCommandProperty;
    public static BindableProperty BackgroundClickedCommandParameterProperty;
    public static BindableProperty AndroidTalkbackAccessibilityWorkaroundProperty;
    [NullableAttribute("2")]
internal Task AppearingTransactionTask { get; internal set; }
    [NullableAttribute("2")]
internal Task DisappearingTransactionTask { get; internal set; }
    [ObsoleteAttribute("IsAnimating is obsolute as of v1.1.5. Please use IsAnimationEnabled instead. See more info: https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Migration-from-v1.0.x-to-v1.1.x")]
public bool IsAnimating { get; public set; }
    public bool IsAnimationEnabled { get; public set; }
    public bool HasSystemPadding { get; public set; }
    public IPopupAnimation Animation { get; public set; }
    public Thickness SystemPadding { get; private set; }
    public PaddingSide SystemPaddingSides { get; public set; }
    public bool CloseWhenBackgroundIsClicked { get; public set; }
    public bool BackgroundInputTransparent { get; public set; }
    public bool HasKeyboardOffset { get; public set; }
    public double KeyboardOffset { get; private set; }
    public ICommand BackgroundClickedCommand { get; public set; }
    public object BackgroundClickedCommandParameter { get; public set; }
    public bool AndroidTalkbackAccessibilityWorkaround { get; public set; }
    private static PopupPage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Task get_AppearingTransactionTask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_AppearingTransactionTask(Task value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Task get_DisappearingTransactionTask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_DisappearingTransactionTask(Task value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_BackgroundClicked(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_BackgroundClicked(EventHandler value);
    public bool get_IsAnimating();
    public void set_IsAnimating(bool value);
    public bool get_IsAnimationEnabled();
    public void set_IsAnimationEnabled(bool value);
    public bool get_HasSystemPadding();
    public void set_HasSystemPadding(bool value);
    public IPopupAnimation get_Animation();
    public void set_Animation(IPopupAnimation value);
    public Thickness get_SystemPadding();
    private void set_SystemPadding(Thickness value);
    public PaddingSide get_SystemPaddingSides();
    public void set_SystemPaddingSides(PaddingSide value);
    public bool get_CloseWhenBackgroundIsClicked();
    public void set_CloseWhenBackgroundIsClicked(bool value);
    public bool get_BackgroundInputTransparent();
    public void set_BackgroundInputTransparent(bool value);
    public bool get_HasKeyboardOffset();
    public void set_HasKeyboardOffset(bool value);
    public double get_KeyboardOffset();
    private void set_KeyboardOffset(double value);
    public ICommand get_BackgroundClickedCommand();
    public void set_BackgroundClickedCommand(ICommand value);
    public object get_BackgroundClickedCommandParameter();
    public void set_BackgroundClickedCommandParameter(object value);
    public bool get_AndroidTalkbackAccessibilityWorkaround();
    public void set_AndroidTalkbackAccessibilityWorkaround(bool value);
    [NullableContextAttribute("2")]
protected virtual void OnPropertyChanged(string propertyName);
    protected virtual bool OnBackButtonPressed();
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    internal void PreparingAnimation();
    internal void DisposingAnimation();
    [AsyncStateMachineAttribute("Rg.Plugins.Popup.Pages.PopupPage/<AppearingAnimation>d__70")]
internal Task AppearingAnimation();
    [AsyncStateMachineAttribute("Rg.Plugins.Popup.Pages.PopupPage/<DisappearingAnimation>d__71")]
internal Task DisappearingAnimation();
    protected virtual void OnAppearingAnimationBegin();
    protected virtual void OnAppearingAnimationEnd();
    protected virtual void OnDisappearingAnimationBegin();
    protected virtual void OnDisappearingAnimationEnd();
    protected virtual Task OnAppearingAnimationBeginAsync();
    protected virtual Task OnAppearingAnimationEndAsync();
    protected virtual Task OnDisappearingAnimationBeginAsync();
    protected virtual Task OnDisappearingAnimationEndAsync();
    protected virtual bool OnBackgroundClicked();
    [AsyncStateMachineAttribute("Rg.Plugins.Popup.Pages.PopupPage/<SendBackgroundClick>d__81")]
internal Task SendBackgroundClick();
}
public static class Rg.Plugins.Popup.Services.PopupNavigation : object {
    private static string DepractedMethodsText;
    [NullableAttribute("2")]
private static IPopupNavigation _popupNavigation;
    [NullableAttribute("2")]
private static IPopupNavigation _customNavigation;
    public static IPopupNavigation Instance { get; }
    [ObsoleteAttribute("You should use IPopupNavigation instance from PopupNavigation.Instance.
See more info: https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Migration-from-v1.0.x-to-v1.1.x")]
public static IReadOnlyList`1<PopupPage> PopupStack { get; }
    public static IPopupNavigation get_Instance();
    public static IReadOnlyList`1<PopupPage> get_PopupStack();
    [ObsoleteAttribute("You should use IPopupNavigation instance from PopupNavigation.Instance.
See more info: https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Migration-from-v1.0.x-to-v1.1.x")]
public static Task PushAsync(PopupPage page, bool animate);
    [ObsoleteAttribute("You should use IPopupNavigation instance from PopupNavigation.Instance.
See more info: https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Migration-from-v1.0.x-to-v1.1.x")]
public static Task PopAsync(bool animate);
    [ObsoleteAttribute("You should use IPopupNavigation instance from PopupNavigation.Instance.
See more info: https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Migration-from-v1.0.x-to-v1.1.x")]
public static Task PopAllAsync(bool animate);
    [ObsoleteAttribute("You should use IPopupNavigation instance from PopupNavigation.Instance.
See more info: https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Migration-from-v1.0.x-to-v1.1.x")]
public static Task RemovePageAsync(PopupPage page, bool animate);
    [EditorBrowsableAttribute("1")]
public static void SetInstance(IPopupNavigation instance);
    [EditorBrowsableAttribute("1")]
public static void RestoreDefaultInstance();
}
internal class Rg.Plugins.Popup.Services.PopupNavigationImpl : object {
    private object _locker;
    private List`1<PopupPage> _popupStack;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PopupNavigationEventArgs> Pushing;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PopupNavigationEventArgs> Pushed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PopupNavigationEventArgs> Popping;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PopupNavigationEventArgs> Popped;
    private static IPopupPlatform PopupPlatform { get; }
    public IReadOnlyList`1<PopupPage> PopupStack { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_Pushing(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Pushing(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Pushed(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Pushed(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Popping(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Popping(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Popped(EventHandler`1<PopupNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Popped(EventHandler`1<PopupNavigationEventArgs> value);
    private static IPopupPlatform get_PopupPlatform();
    public sealed virtual IReadOnlyList`1<PopupPage> get_PopupStack();
    [AsyncStateMachineAttribute("Rg.Plugins.Popup.Services.PopupNavigationImpl/<OnInitialized>d__19")]
private void OnInitialized(object sender, EventArgs e);
    public sealed virtual Task PushAsync(PopupPage page, bool animate);
    public sealed virtual Task PopAsync(bool animate);
    public sealed virtual Task PopAllAsync(bool animate);
    public sealed virtual Task RemovePageAsync(PopupPage page, bool animate);
    private static Task AddAsync(PopupPage page);
    private static Task RemoveAsync(PopupPage page);
    internal void RemovePopupFromStack(PopupPage page);
    private static bool CanBeAnimated(bool animate);
    private static Task InvokeThreadSafe(Func`1<Task> action);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
