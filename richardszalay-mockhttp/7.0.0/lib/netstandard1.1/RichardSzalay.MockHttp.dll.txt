[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum RichardSzalay.MockHttp.BackendDefinitionBehavior : Enum {
    public int value__;
    public static BackendDefinitionBehavior NoExpectations;
    public static BackendDefinitionBehavior Always;
}
internal class RichardSzalay.MockHttp.Formatters.MockedRequestFormatter : object {
    [NullableContextAttribute("1")]
public static void FormatWithResult(StringBuilder sb, MockedRequestResult result);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static string <FormatWithResult>g__GetMatcherStatus|0_0(IMockedRequestMatcher matcher, <>c__DisplayClass0_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <FormatWithResult>g__FormatAllMatchers|0_1(IEnumerable`1<IMockedRequestMatcher> matchers, string joiner, int indent, <>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RichardSzalay.MockHttp.Formatters.RequestHandlerResultFormatter : object {
    public static string FormatRequestMessage(HttpRequestMessage request);
    public static string Format(RequestHandlerResult result);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class RichardSzalay.MockHttp.Formatters.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AnyMatcherDescriptor { get; }
    internal static string BackendDefinitionFallbackHeader { get; }
    internal static string BackendDefinitionMatchSuccessHeader { get; }
    internal static string BackendDefinitionsMatchFailedHeader { get; }
    internal static string ContentMatcherDescriptor { get; }
    internal static string CustomMatcherDescriptor { get; }
    internal static string FormDataMatcherDescriptor { get; }
    internal static string HeadersMatcherDescriptor { get; }
    internal static string JsonContentMatcherDescriptor { get; }
    internal static string MatcherStatusFailedLabel { get; }
    internal static string MatcherStatusSkippedLabel { get; }
    internal static string MatcherStatusSuccessLabel { get; }
    internal static string MatchFailureHeader { get; }
    internal static string MatchSuccessHeader { get; }
    internal static string MethodMatcherDescriptor { get; }
    internal static string NoBackendDefinitionFallbackHeader { get; }
    internal static string PartialContentMatcherDescriptor { get; }
    internal static string PartialFormDataMatcherDescriptor { get; }
    internal static string PartialQueryStringMatcherDescriptor { get; }
    internal static string QueryStringMatcherDescriptor { get; }
    internal static string RequestExpectationMatchFailureHeader { get; }
    internal static string RequestExpectationMatchSuccessHeader { get; }
    internal static string SkippedRequestExpectationsHeader { get; }
    internal static string UrlMatcherDescriptor { get; }
    internal static string XmlContentMatcherDescriptor { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AnyMatcherDescriptor();
    internal static string get_BackendDefinitionFallbackHeader();
    internal static string get_BackendDefinitionMatchSuccessHeader();
    internal static string get_BackendDefinitionsMatchFailedHeader();
    internal static string get_ContentMatcherDescriptor();
    internal static string get_CustomMatcherDescriptor();
    internal static string get_FormDataMatcherDescriptor();
    internal static string get_HeadersMatcherDescriptor();
    internal static string get_JsonContentMatcherDescriptor();
    internal static string get_MatcherStatusFailedLabel();
    internal static string get_MatcherStatusSkippedLabel();
    internal static string get_MatcherStatusSuccessLabel();
    internal static string get_MatchFailureHeader();
    internal static string get_MatchSuccessHeader();
    internal static string get_MethodMatcherDescriptor();
    internal static string get_NoBackendDefinitionFallbackHeader();
    internal static string get_PartialContentMatcherDescriptor();
    internal static string get_PartialFormDataMatcherDescriptor();
    internal static string get_PartialQueryStringMatcherDescriptor();
    internal static string get_QueryStringMatcherDescriptor();
    internal static string get_RequestExpectationMatchFailureHeader();
    internal static string get_RequestExpectationMatchSuccessHeader();
    internal static string get_SkippedRequestExpectationsHeader();
    internal static string get_UrlMatcherDescriptor();
    internal static string get_XmlContentMatcherDescriptor();
}
[NullableContextAttribute("1")]
public interface RichardSzalay.MockHttp.IMockedRequest {
    public abstract virtual bool Matches(HttpRequestMessage request);
    public abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage message, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface RichardSzalay.MockHttp.IMockedRequestMatcher {
    public abstract virtual bool Matches(HttpRequestMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.AnyMatcher : object {
    private IEnumerable`1<IMockedRequestMatcher> _matchers;
    public AnyMatcher(IEnumerable`1<IMockedRequestMatcher> matchers);
    public sealed virtual bool Matches(HttpRequestMessage message);
    private sealed virtual override IEnumerator`1<IMockedRequestMatcher> System.Collections.Generic.IEnumerable<RichardSzalay.MockHttp.IMockedRequestMatcher>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.ContentMatcher : object {
    private string content;
    public ContentMatcher(string content);
    public sealed virtual bool Matches(HttpRequestMessage message);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.CustomMatcher : object {
    private Func`2<HttpRequestMessage, bool> matcher;
    public CustomMatcher(Func`2<HttpRequestMessage, bool> matcher);
    public sealed virtual bool Matches(HttpRequestMessage message);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.FormDataMatcher : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<KeyValuePair`2<string, string>> values;
    private bool exact;
    public FormDataMatcher(string formData, bool exact);
    public FormDataMatcher(IEnumerable`1<KeyValuePair`2<string, string>> values, bool exact);
    public sealed virtual bool Matches(HttpRequestMessage message);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetFormData(HttpContent content);
    [NullableContextAttribute("2")]
private bool CanProcessContent(HttpContent httpContent);
    [NullableContextAttribute("2")]
private bool IsFormData(string mediaType);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.HeadersMatcher : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<KeyValuePair`2<string, string>> headers;
    public HeadersMatcher(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    public HeadersMatcher(string headers);
    public sealed virtual bool Matches(HttpRequestMessage message);
    [NullableContextAttribute("2")]
private bool MatchesHeader(KeyValuePair`2<string, string> matchHeader, HttpHeaders messageHeader);
    internal static IEnumerable`1<KeyValuePair`2<string, string>> ParseHeaders(string headers);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.MethodMatcher : object {
    private HttpMethod method;
    public MethodMatcher(HttpMethod method);
    public sealed virtual bool Matches(HttpRequestMessage message);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.PartialContentMatcher : object {
    private string content;
    public PartialContentMatcher(string content);
    public sealed virtual bool Matches(HttpRequestMessage message);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.QueryStringMatcher : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<KeyValuePair`2<string, string>> values;
    private bool exact;
    public QueryStringMatcher(string queryString, bool exact);
    public QueryStringMatcher(IEnumerable`1<KeyValuePair`2<string, string>> values, bool exact);
    public sealed virtual bool Matches(HttpRequestMessage message);
    internal static IEnumerable`1<KeyValuePair`2<string, string>> ParseQueryString(string input);
    internal static string UrlDecode(string urlEncodedValue);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.Matchers.UrlMatcher : object {
    private string url;
    public UrlMatcher(string url);
    public sealed virtual bool Matches(HttpRequestMessage message);
    private string GetUrlToMatch(Uri input);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.MockedRequest : object {
    private List`1<IMockedRequestMatcher> matchers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<HttpRequestMessage, Task`1<HttpResponseMessage>> response;
    public MockedRequest(string url);
    public sealed virtual bool Matches(HttpRequestMessage message);
    public MockedRequest With(IMockedRequestMatcher matcher);
    public void Respond(Func`1<Task`1<HttpResponseMessage>> handler);
    public MockedRequest Respond(Func`2<HttpRequestMessage, Task`1<HttpResponseMessage>> handler);
    public sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage message, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<IMockedRequestMatcher> System.Collections.Generic.IEnumerable<RichardSzalay.MockHttp.IMockedRequestMatcher>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RichardSzalay.MockHttp.MockedRequestExtensions : object {
    [ExtensionAttribute]
public static MockedRequest With(MockedRequest source, Func`2<HttpRequestMessage, bool> matcher);
    [ExtensionAttribute]
public static MockedRequest WithQueryString(MockedRequest source, string name, string value);
    [ExtensionAttribute]
public static MockedRequest WithQueryString(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> values);
    [ExtensionAttribute]
public static MockedRequest WithQueryString(MockedRequest source, string values);
    [ExtensionAttribute]
public static MockedRequest WithExactQueryString(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> values);
    [ExtensionAttribute]
public static MockedRequest WithExactQueryString(MockedRequest source, string values);
    [ExtensionAttribute]
public static MockedRequest WithFormData(MockedRequest source, string name, string value);
    [ExtensionAttribute]
public static MockedRequest WithFormData(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> values);
    [ExtensionAttribute]
public static MockedRequest WithFormData(MockedRequest source, string values);
    [ExtensionAttribute]
public static MockedRequest WithExactFormData(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> values);
    [ExtensionAttribute]
public static MockedRequest WithExactFormData(MockedRequest source, string values);
    [ExtensionAttribute]
public static MockedRequest WithContent(MockedRequest source, string content);
    [ExtensionAttribute]
public static MockedRequest WithPartialContent(MockedRequest source, string partialContent);
    [ExtensionAttribute]
public static MockedRequest WithHeaders(MockedRequest source, string name, string value);
    [ExtensionAttribute]
public static MockedRequest WithHeaders(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> headers);
    [ExtensionAttribute]
public static MockedRequest WithHeaders(MockedRequest source, string headers);
    [ExtensionAttribute]
public static MockedRequest WithAny(MockedRequest source, IEnumerable`1<IMockedRequestMatcher> matchers);
    [ExtensionAttribute]
public static MockedRequest WithAny(MockedRequest source, IMockedRequestMatcher[] matchers);
    [ExtensionAttribute]
[ObsoleteAttribute("Using this overload is not recommended. Instead, use Respond(req => new HttpResponseMessage(...))")]
public static MockedRequest Respond(MockedRequest source, HttpResponseMessage message);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, HttpContent content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, IEnumerable`1<KeyValuePair`2<string, string>> headers, HttpContent content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpContent content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> headers, HttpContent content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, string mediaType, string content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, IEnumerable`1<KeyValuePair`2<string, string>> headers, string mediaType, string content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, string mediaType, string content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> headers, string mediaType, string content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, string mediaType, Stream content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, IEnumerable`1<KeyValuePair`2<string, string>> headers, string mediaType, Stream content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, string mediaType, Func`2<HttpRequestMessage, Stream> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> headers, string mediaType, Func`2<HttpRequestMessage, Stream> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, string mediaType, Func`2<HttpRequestMessage, Stream> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, IEnumerable`1<KeyValuePair`2<string, string>> headers, string mediaType, Func`2<HttpRequestMessage, Stream> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, string mediaType, Stream content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> headers, string mediaType, Stream content);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, Func`2<HttpRequestMessage, HttpContent> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, IEnumerable`1<KeyValuePair`2<string, string>> headers, Func`2<HttpRequestMessage, HttpContent> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, Func`2<HttpRequestMessage, HttpContent> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpStatusCode statusCode, IEnumerable`1<KeyValuePair`2<string, string>> headers, Func`2<HttpRequestMessage, HttpContent> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, Func`2<HttpRequestMessage, HttpResponseMessage> handler);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpClient httpClient);
    [ExtensionAttribute]
public static MockedRequest Respond(MockedRequest source, HttpMessageHandler handler);
    [ExtensionAttribute]
public static MockedRequest RespondMatchSummary(MockedRequest source, HttpStatusCode statusCode);
    [ExtensionAttribute]
public static MockedRequest Throw(MockedRequest source, Exception exception);
    [ExtensionAttribute]
public static MockedRequest ThrowMatchSummary(MockedRequest source);
    private static HttpRequestMessage CloneRequest(HttpRequestMessage message);
}
internal class RichardSzalay.MockHttp.MockedRequestMatcherResult : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RichardSzalay.MockHttp.MockedRequestResult : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IMockedRequest <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IMockedRequestMatcher, bool> <MatcherResults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [NullableAttribute("2")]
public IMockedRequest Handler { get; public set; }
    public Dictionary`2<IMockedRequestMatcher, bool> MatcherResults { get; private set; }
    public bool Success { get; internal set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IMockedRequest get_Handler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Handler(IMockedRequest value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IMockedRequestMatcher, bool> get_MatcherResults();
    [CompilerGeneratedAttribute]
private void set_MatcherResults(Dictionary`2<IMockedRequestMatcher, bool> value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
internal void set_Success(bool value);
    internal static MockedRequestResult FromMatcherResults(IMockedRequest handler, Dictionary`2<IMockedRequestMatcher, bool> matcherResults, bool success);
    internal static MockedRequestResult FromResult(IMockedRequest handler, bool success);
}
public class RichardSzalay.MockHttp.MockHttpMatchException : Exception {
    [NullableContextAttribute("1")]
public MockHttpMatchException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RichardSzalay.MockHttp.MockHttpMessageHandler : HttpMessageHandler {
    private Queue`1<IMockedRequest> requestExpectations;
    private List`1<IMockedRequest> backendDefinitions;
    private Dictionary`2<IMockedRequest, int> matchCounts;
    private object lockObject;
    private int outstandingRequests;
    private bool autoFlush;
    private BackendDefinitionBehavior backendDefinitionBehavior;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<TaskCompletionSource`1<object>> pendingFlushers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<object> flusher;
    private MockedRequest fallback;
    private static string HandlerResultMessageKey;
    public bool AutoFlush { get; public set; }
    public MockedRequest Fallback { get; }
    public MockHttpMessageHandler(BackendDefinitionBehavior backendDefinitionBehavior);
    public bool get_AutoFlush();
    public void set_AutoFlush(bool value);
    public void Flush();
    public void Flush(int count);
    public HttpClient ToHttpClient();
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private IMockedRequest FindHandler(HttpRequestMessage request);
    private MockedRequestResult EvaluateMockedRequest(IMockedRequest mockedRequest, HttpRequestMessage request);
    private Task`1<HttpResponseMessage> SendAsync(IMockedRequest handler, HttpRequestMessage request, CancellationToken cancellationToken);
    private void IncrementMatchCount(IMockedRequest handler);
    public MockedRequest get_Fallback();
    public void AddRequestExpectation(IMockedRequest handler);
    public void AddBackendDefinition(IMockedRequest handler);
    public int GetMatchCount(IMockedRequest request);
    protected virtual void Dispose(bool disposing);
    public void VerifyNoOutstandingRequest();
    public void VerifyNoOutstandingExpectation();
    public void ResetExpectations();
    public void ResetBackendDefinitions();
    public void Clear();
    internal static RequestHandlerResult GetHandlerResult(HttpRequestMessage request);
    internal static void SetHandlerResult(HttpRequestMessage request, RequestHandlerResult handlerResult);
    [CompilerGeneratedAttribute]
internal static bool <EvaluateMockedRequest>g__IsAnyMatch|18_0(AnyMatcher matcher, <>c__DisplayClass18_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RichardSzalay.MockHttp.MockHttpMessageHandlerExtensions : object {
    [ExtensionAttribute]
public static MockedRequest When(MockHttpMessageHandler handler, HttpMethod method, string url);
    [ExtensionAttribute]
public static MockedRequest When(MockHttpMessageHandler handler, string url);
    [ExtensionAttribute]
public static MockedRequest Expect(MockHttpMessageHandler handler, HttpMethod method, string url);
    [ExtensionAttribute]
public static MockedRequest Expect(MockHttpMessageHandler handler, string url);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RichardSzalay.MockHttp.RequestHandlerResult : object {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IMockedRequest <Handler>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MockedRequestResult <RequestExpectationResult>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IMockedRequest> <UnevaluatedRequestExpectations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MockedRequestResult> <BackendDefinitionResults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IMockedRequest> <UnevaluatedBackendDefinitions>k__BackingField;
    public HttpRequestMessage Request { get; }
    [NullableAttribute("2")]
public IMockedRequest Handler { get; public set; }
    [NullableAttribute("2")]
public MockedRequestResult RequestExpectationResult { get; public set; }
    public List`1<IMockedRequest> UnevaluatedRequestExpectations { get; }
    public List`1<MockedRequestResult> BackendDefinitionResults { get; }
    public List`1<IMockedRequest> UnevaluatedBackendDefinitions { get; }
    public RequestHandlerResult(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IMockedRequest get_Handler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Handler(IMockedRequest value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MockedRequestResult get_RequestExpectationResult();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestExpectationResult(MockedRequestResult value);
    [CompilerGeneratedAttribute]
public List`1<IMockedRequest> get_UnevaluatedRequestExpectations();
    [CompilerGeneratedAttribute]
public List`1<MockedRequestResult> get_BackendDefinitionResults();
    [CompilerGeneratedAttribute]
public List`1<IMockedRequest> get_UnevaluatedBackendDefinitions();
}
internal static class RichardSzalay.MockHttp.StringUtil : object {
    [NullableContextAttribute("1")]
public static String[] Split(string input, char c, int count);
}
internal class RichardSzalay.MockHttp.TaskEx : object {
    [NullableContextAttribute("1")]
public static Task`1<T> FromResult(T result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class RichardSzalay.MockHttp.UriUtil : object {
    public static bool IsWellFormedUriString(string url, UriKind kind);
    public static bool TryParse(string url, UriKind kind, Uri& output);
}
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
