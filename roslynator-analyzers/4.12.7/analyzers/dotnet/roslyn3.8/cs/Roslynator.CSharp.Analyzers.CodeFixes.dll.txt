[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Roslynator.CodeFixes.BaseCodeFixProvider : AbstractCodeFixProvider {
}
internal abstract class Roslynator.CSharp.Analysis.Documentation.ElementInfo`1 : object {
    [CompilerGeneratedAttribute]
private TNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InsertIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLinePosition <NewLinePosition>k__BackingField;
    public string Name { get; }
    public TNode Node { get; }
    public int InsertIndex { get; }
    public NewLinePosition NewLinePosition { get; }
    protected ElementInfo`1(TNode node, int insertIndex, NewLinePosition newLinePosition);
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
public TNode get_Node();
    [CompilerGeneratedAttribute]
public int get_InsertIndex();
    [CompilerGeneratedAttribute]
public NewLinePosition get_NewLinePosition();
}
internal enum Roslynator.CSharp.Analysis.Documentation.NewLinePosition : Enum {
    public int value__;
    public static NewLinePosition Beginning;
    public static NewLinePosition End;
}
internal class Roslynator.CSharp.Analysis.Documentation.ParamElementInfo : ElementInfo`1<ParameterSyntax> {
    public string Name { get; }
    public ParamElementInfo(ParameterSyntax node, int insertIndex, NewLinePosition newLinePosition);
    public virtual string get_Name();
}
internal class Roslynator.CSharp.Analysis.Documentation.TypeParamElementInfo : ElementInfo`1<TypeParameterSyntax> {
    public string Name { get; }
    public TypeParamElementInfo(TypeParameterSyntax node, int insertIndex, NewLinePosition newLinePosition);
    public virtual string get_Name();
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AddBracesCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AddBracesCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AddBracesToIfElseCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AddBracesToIfElseCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AddExceptionToDocumentationCommentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AddExceptionToDocumentationCommentCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AddOrRemoveParenthesesWhenCreatingNewObjectCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AddOrRemoveParenthesesWhenCreatingNewObjectCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> AddParenthesesAsync(Document document, ObjectCreationExpressionSyntax objectCreationExpression, CancellationToken cancellationToken);
    private static Task`1<Document> RemoveParenthesesAsync(Document document, ArgumentListSyntax argumentList, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AddOrRemoveTrailingCommaCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AddOrRemoveTrailingCommaCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RemoveTrailingComma(Document document, SyntaxToken comma, CancellationToken cancellationToken);
    private static Task`1<Document> AddTrailingComma(Document document, SyntaxNode lastNode, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AddParagraphToDocumentationCommentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AddParagraphToDocumentationCommentCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RefactorAsync(Document document, XmlElementSyntax xmlElement, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AddParenthesesWhenNecessaryCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AddParenthesesWhenNecessaryCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> AddParenthesesAccordingToOperatorPrecedenceAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AnonymousMethodCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AnonymousMethodCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AssignmentExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AssignmentExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseUnaryOperatorInsteadOfAssignmentAsync(Document document, AssignmentExpressionSyntax assignment, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static List`1<SyntaxTrivia> <UseUnaryOperatorInsteadOfAssignmentAsync>g__GetTrailingTrivia|3_0(<>c__DisplayClass3_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AttributeArgumentListCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AttributeArgumentListCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AvoidBoxingOfValueTypeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AvoidBoxingOfValueTypeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AvoidBoxingOfValueTypeCodeFixProvider/<RefactorAsync>d__3")]
private static Task`1<Document> RefactorAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <RefactorAsync>g__ShouldAddConditionalAccess|3_0(SemanticModel semanticModel, <>c__DisplayClass3_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AvoidNullReferenceExceptionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AvoidNullReferenceExceptionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AvoidNullReferenceExceptionCodeFixProvider/<RefactorAsync>d__3")]
private static Task`1<Document> RefactorAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.AwaitExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.AwaitExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> AddCallToConfigureAwaitRefactorAsync(Document document, AwaitExpressionSyntax awaitExpression, CancellationToken cancellationToken);
    private static Task`1<Document> RemoveCallToConfigureAwaitRefactorAsync(Document document, AwaitExpressionSyntax awaitExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.BaseArgumentListCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.BaseArgumentListCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.BaseArgumentListCodeFixProvider/<OrderNamedArgumentsAsync>d__3")]
private static Task`1<Document> OrderNamedArgumentsAsync(Document document, BaseArgumentListSyntax argumentList, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.BaseTypeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.BaseTypeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.BinaryExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.BinaryExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseStringIsNullOrEmptyMethodAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.BinaryExpressionCodeFixProvider/<UseStringLengthInsteadOfComparisonWithEmptyStringAsync>d__4")]
private static Task`1<Document> UseStringLengthInsteadOfComparisonWithEmptyStringAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    private static ConditionalAccessExpressionSyntax CreateConditionalAccess(ExpressionSyntax expression);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.BinaryExpressionCodeFixProvider/<RemoveUnnecessaryNullCheckAsync>d__6")]
private static Task`1<Document> RemoveUnnecessaryNullCheckAsync(Document document, BinaryExpressionSyntax logicalAnd, CancellationToken cancellationToken);
    private static Task`1<Document> SimplifyNumericComparisonAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.BlockCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.BlockCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RemoveBracesAsync(Document document, BlockSyntax block, CancellationToken cancellationToken);
    private static Task`1<Document> SimplifyLazyInitializationAsync(Document document, BlockSyntax block, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static SyntaxTriviaList <RemoveBracesAsync>g__AddTriviaIfNecessary|3_0(SyntaxTriviaList trivia, SyntaxTriviaList triviaToAdd);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.CaseSwitchLabelCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.CaseSwitchLabelCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.CastExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.CastExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.CastExpressionCodeFixProvider/<UseEnumFieldExplicitlyAsync>d__3")]
private static Task`1<Document> UseEnumFieldExplicitlyAsync(CastExpressionSyntax castExpression, Document document, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static MemberAccessExpressionSyntax <UseEnumFieldExplicitlyAsync>g__CreateEnumFieldExpression|3_0(IFieldSymbol symbol);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ClassDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ClassDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseAttributeUsageAttributeAsync(Document document, ClassDeclarationSyntax classDeclaration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ClassDeclarationCodeFixProvider/<ImplementExceptionConstructorsAsync>d__4")]
private static Task`1<Document> ImplementExceptionConstructorsAsync(Document document, ClassDeclarationSyntax classDeclaration, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.CompositeEnumValueContainsUndefinedFlagCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.CompositeEnumValueContainsUndefinedFlagCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.CompositeEnumValueContainsUndefinedFlagCodeFixProvider/<RefactorAsync>d__4")]
private static Task`1<Document> RefactorAsync(Document document, EnumDeclarationSyntax enumDeclaration, string value, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ConditionalExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ConditionalExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ConditionalExpressionCodeFixProvider/<SimplifyConditionalExpressionAsync>d__3")]
private static Task`1<Document> SimplifyConditionalExpressionAsync(Document document, ConditionalExpressionSyntax conditionalExpression, CancellationToken cancellationToken);
    private static ExpressionSyntax CreateNewNode(ConditionalExpressionSyntax conditionalExpression, ExpressionSyntax newNode);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ConstructorDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ConstructorDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ConvertLambdaExpressionBodyToExpressionBodyCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ConvertLambdaExpressionBodyToExpressionBodyCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DeclareEachAttributeSeparatelyCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DeclareEachAttributeSeparatelyCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DeclareEnumMemberWithZeroValueCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DeclareEnumMemberWithZeroValueCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DeclareEnumMemberWithZeroValueCodeFixProvider/<RefactorAsync>d__4")]
private static Task`1<Document> RefactorAsync(Document document, EnumDeclarationSyntax enumDeclaration, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DeclareTypeInsideNamespaceCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DeclareTypeInsideNamespaceCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DeclareTypeInsideNamespaceCodeFixProvider/<DeclareTypeInsideNamespaceAsync>d__4")]
private static Task`1<Document> DeclareTypeInsideNamespaceAsync(Document document, MemberDeclarationSyntax member, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DefaultExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DefaultExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> SimplifyDefaultExpressionAsync(Document document, DefaultExpressionSyntax defaultExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DestructorDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DestructorDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DirectiveTriviaCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DirectiveTriviaCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RefactorAsync(Document document, PragmaWarningDirectiveTriviaSyntax directive, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DisposeResourceAsynchronouslyCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DisposeResourceAsynchronouslyCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DisposeResourceAsynchronouslyCodeFixProvider/<RefactorAsync>d__4")]
private static Task`1<Document> RefactorAsync(Document document, UsingStatementSyntax usingStatement, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DisposeResourceAsynchronouslyCodeFixProvider/<RefactorAsync>d__5")]
private static Task`1<Document> RefactorAsync(Document document, LocalDeclarationStatementSyntax localDeclaration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DisposeResourceAsynchronouslyCodeFixProvider/<RefactorAsync>d__6")]
private static Task`1<Document> RefactorAsync(Document document, StatementSyntax statement, StatementSyntax newStatement, SemanticModel semanticModel, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DocumentationCommentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DocumentationCommentCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DocumentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public static Task`1<Solution> RemoveFromSolutionAsync(Document document);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DoStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DoStatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.DuplicateWordInCommentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.DuplicateWordInCommentCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ElseClauseCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ElseClauseCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ElseClauseCodeFixProvider/<RemoveEmptyElseClauseAsync>d__3")]
internal static Task`1<Document> RemoveEmptyElseClauseAsync(Document document, ElseClauseSyntax elseClause, CancellationToken cancellationToken);
    private static Task`1<Document> MergeElseWithNestedIfAsync(Document document, ElseClauseSyntax elseClause, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.EmptyStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EmptyStatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.EndRegionDirectiveTriviaCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EndRegionDirectiveTriviaCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.EnumDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumDeclarationCodeFixProvider/<SortEnumMembersAsync>d__3")]
private static Task`1<Document> SortEnumMembersAsync(Document document, EnumDeclarationSyntax enumDeclaration, CancellationToken cancellationToken);
    private static object GetConstantValue(EnumMemberDeclarationSyntax enumMemberDeclaration, SemanticModel semanticModel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumDeclarationCodeFixProvider/<DeclareExplicitValueAsync>d__5")]
private static Task`1<Document> DeclareExplicitValueAsync(Document document, EnumDeclarationSyntax enumDeclaration, INamedTypeSymbol enumSymbol, bool isFlags, bool useBitShift, ImmutableArray`1<ulong> values, SemanticModel semanticModel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumDeclarationCodeFixProvider/<UseBitShiftOperatorAsync>d__6")]
private static Task`1<Document> UseBitShiftOperatorAsync(Document document, EnumDeclarationSyntax enumDeclaration, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.EnumMemberDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumMemberDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumMemberDeclarationCodeFixProvider/<DeclareEnumValueAsCombinationOfNamesAsync>d__3")]
private static Task`1<Document> DeclareEnumValueAsCombinationOfNamesAsync(Document document, EnumMemberDeclarationSyntax enumMemberDeclaration, CancellationToken cancellationToken);
    private static IdentifierNameSyntax CreateIdentifierName(EnumFieldSymbolInfo& fieldInfo);
    private static Task`1<Document> ChangeEnumValueAsync(Document document, EnumMemberDeclarationSyntax enumMember, string valueText, CancellationToken cancellationToken);
    private static EnumMemberDeclarationSyntax FindMemberByValue(EnumDeclarationSyntax enumDeclaration, EnumFieldSymbolInfo& fieldSymbolInfo, SemanticModel semanticModel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumMemberDeclarationCodeFixProvider/<UseBitShiftOperatorAsync>d__7")]
private static Task`1<Document> UseBitShiftOperatorAsync(Document document, EnumMemberDeclarationSyntax enumMemberDeclaration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.EnumMemberDeclarationCodeFixProvider/<ConvertToDecimalNumberAsync>d__8")]
private static Task`1<Document> ConvertToDecimalNumberAsync(Document document, EnumMemberDeclarationSyntax enumMemberDeclaration, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> ParenthesizeConditionOfConditionalExpressionAsync(Document document, ExpressionSyntax condition, CancellationToken cancellationToken);
    private static Task`1<Document> RemoveUnnecessaryNullCheckAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ExtractMemberToNewDocumentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ExtractMemberToNewDocumentCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.FinallyClauseCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.FinallyClauseCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.FinallyClauseCodeFixProvider/<RemoveEmptyFinallyClauseAsync>d__3")]
internal static Task`1<Document> RemoveEmptyFinallyClauseAsync(Document document, FinallyClauseSyntax finallyClause, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ForStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ForStatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.IfStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.IfStatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.IfStatementCodeFixProvider/<UseExceptionFilterAsync>d__3")]
private static Task`1<Document> UseExceptionFilterAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    public static Task`1<Document> MergeIfWithNestedIfAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    private static IfStatementSyntax GetNewIfStatement(IfStatementSyntax ifStatement, IfStatementSyntax ifStatement2);
    private static Task`1<Document> CallArgumentNullExceptionThrowIfNullAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static SyntaxList`1<StatementSyntax> <UseExceptionFilterAsync>g__ReplaceStatement|3_0(StatementSyntax statement, <>c__DisplayClass3_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ImplementNonGenericCounterpartCodeFixProvider : BaseCodeFixProvider {
    internal string ExplicitEquivalenceKey;
    private static string IComparableCompareText;
    private static string IComparerCompareText;
    private static string IEqualityComparerEqualsText;
    private static string IEqualityComparerGetHashCodeText;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIComparableCompare;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIComparerCompare;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIEqualityComparerEquals;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIEqualityComparerGetHashCode;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIComparableCompareExplicit;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIComparerCompareExplicit;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIEqualityComparerEqualsExplicit;
    private static Lazy`1<MethodDeclarationSyntax> _lazyIEqualityComparerGetHashCodeExplicit;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static ImplementNonGenericCounterpartCodeFixProvider();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ImplementNonGenericCounterpartCodeFixProvider/<RegisterCodeFixesAsync>d__16")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static MethodDeclarationSyntax CreateMethodDeclaration(string text, bool explicitInterfaceImplementation);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ImplementNonGenericCounterpartCodeFixProvider/<RefactorAsync>d__18")]
private static Task`1<Document> RefactorAsync(Document document, TypeDeclarationSyntax typeDeclaration, string interfaceName, bool explicitImplementation, CancellationToken cancellationToken);
    private static SeparatedSyntaxList`1<BaseTypeSyntax> AddBaseType(SeparatedSyntaxList`1<BaseTypeSyntax> baseTypes, SimpleBaseTypeSyntax baseType);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.InitializerCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.InitializerCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static InitializerExpressionSyntax RemoveTrailingComma(InitializerExpressionSyntax initializer);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.InterpolatedStringCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.InterpolatedStringCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.InterpolationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.InterpolationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.InvalidArgumentNullCheckCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.InvalidArgumentNullCheckCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.InvocationExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.InvocationExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static ExpressionSyntax RemoveInvocation(InvocationExpressionSyntax invocation);
    private static Task`1<Document> CallThenByInsteadOfOrderByAsync(Document document, InvocationExpressionSyntax invocationExpression, string newName, CancellationToken cancellationToken);
    private static Task`1<Document> UseStringInterpolationInsteadOfStringConcatAsync(Document document, InvocationExpressionSyntax invocationExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.LocalDeclarationStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.LocalDeclarationStatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.LocalDeclarationStatementCodeFixProvider/<RefactorAsync>d__3")]
private static Task`1<Document> RefactorAsync(Document document, LocalDeclarationStatementSyntax localDeclaration, CancellationToken cancellationToken);
    private static ExpressionSyntax GetExpressionToInline(LocalDeclarationStatementSyntax localDeclaration, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static StatementSyntax GetStatementWithInlinedExpression(StatementSyntax statement, ExpressionSyntax expression);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.LockStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.LockStatementCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.MarkLocalVariableAsConstCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.MarkLocalVariableAsConstCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static string GetNames(LocalDeclarationStatementSyntax localDeclaration);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.MarkLocalVariableAsConstCodeFixProvider/<MarkLocalVariableAsConstAsync>d__4")]
private static Task`1<Document> MarkLocalVariableAsConstAsync(Document document, LocalDeclarationStatementSyntax localDeclaration, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.MarkTypeWithDebuggerDisplayAttributeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.MarkTypeWithDebuggerDisplayAttributeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.MemberDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.MemberDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> OrderModifiersAsync(Document document, MemberDeclarationSyntax declaration, CancellationToken cancellationToken);
    private static Task`1<Document> UseReadOnlyAutoPropertyAsync(Document document, PropertyDeclarationSyntax propertyDeclaration, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.NamespaceDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.NamespaceDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.NormalizeNullCheckProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.NormalizeNullCheckProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseIsNullPatternInsteadOfComparisonAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    private static Task`1<Document> UseComparisonInsteadOfIsNullPatternAsync(Document document, IsPatternExpressionSyntax isPatternExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.NormalizeUsageOfInfiniteLoopCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.NormalizeUsageOfInfiniteLoopCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> ConvertForToWhileAsync(Document document, ForStatementSyntax forStatement, CancellationToken cancellationToken);
    private static Task`1<Document> ConvertDoToForAsync(Document document, DoStatementSyntax doStatement, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ObjectCreationExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ObjectCreationExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.OptimizeLinqMethodCallCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.OptimizeLinqMethodCallCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> CallOfTypeInsteadOfWhereAndCastAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> CombineWhereAndAnyAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> SimplifyLinqMethodChainAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> CallAnyInsteadOfFirstOrDefaultAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
    private static Task`1<Document> CallWhereInsteadOfOfTypeAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> CallCastInsteadOfSelectAsync(Document document, InvocationExpressionSyntax invocationExpression, CancellationToken cancellationToken);
    private static Task`1<Document> CallFindInsteadOfFirstOrDefaultAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    public static Task`1<Document> UseCountOrLengthPropertyInsteadOfCountMethodAsync(Document document, InvocationExpressionSyntax invocation, string propertyName, CancellationToken cancellationToken);
    private static Task`1<Document> CallAnyInsteadOfCountAsync(Document document, InvocationExpressionSyntax invocationExpression, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    private static Task`1<Document> CallFirstOrDefaultInsteadOfConditionalExpressionAsync(Document document, ConditionalExpressionSyntax conditionalExpression, CancellationToken cancellationToken);
    private static Task`1<Document> CallOrderByDescendingInsteadOfOrderByAndReverseAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> CallOrderInsteadOfOrderByIdentityAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> CallOrderByAndWhereInReverseOrderAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, SimpleMemberInvocationExpressionInfo& invocationInfo2, CancellationToken cancellationToken);
    private static Task`1<Document> CallConvertAllInsteadOfSelectAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> CallSumInsteadOfSelectManyAndCountAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, string propertyName, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.OptimizeMethodCallCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.OptimizeMethodCallCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> CallCompareOrdinalInsteadOfCompareAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    private static Task`1<Document> CallEqualsInsteadOfCompareAsync(Document document, BinaryExpressionSyntax equalityExpression, CancellationToken cancellationToken);
    private static Task`1<Document> CallStringConcatInsteadOfStringJoinAsync(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
    private static Task`1<Document> CallDebugFailInsteadOfDebugAssertAsync(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
    private static Task`1<Document> UseElementAccessInsteadOfContainsKeyAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    private static Task`1<Document> CallAddRangeInsteadOfAddAsync(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.OptimizeStringBuilderAppendCallCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.OptimizeStringBuilderAppendCallCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public static Task`1<Document> RefactorAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.OptimizeStringBuilderAppendCallCodeFixProvider/<RefactorAsync>d__4")]
public static Task`1<Document> RefactorAsync(Document document, ArgumentSyntax argument, SimpleMemberInvocationExpressionInfo invocationInfo, CancellationToken cancellationToken);
    private static InvocationExpressionSyntax CreateInvocationExpression(InvocationExpressionSyntax innerInvocationExpression, InvocationExpressionSyntax outerInvocationExpression);
    private static InvocationExpressionSyntax CreateNewInvocationExpression(InvocationExpressionSyntax invocationExpression, string methodName, ArgumentListSyntax argumentList);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.OrderElementsInDocumentationCommentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.OrderElementsInDocumentationCommentCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> OrderElementsAsync(Document document, XmlNodeSyntax xmlNode, CancellationToken cancellationToken);
    private static SyntaxList`1<XmlNodeSyntax> SortElements(SeparatedSyntaxList`1<TNode> nodes, SyntaxList`1<XmlNodeSyntax> content, int firstIndex, XmlTag tag, Func`3<SeparatedSyntaxList`1<TNode>, string, int> indexOf);
    [CompilerGeneratedAttribute]
internal static SyntaxList`1<XmlNodeSyntax> <OrderElementsAsync>g__GetNewContent|3_0(<>c__DisplayClass3_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.OrderTypeParameterConstraintsCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.OrderTypeParameterConstraintsCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RefactorAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
    private static SyntaxList`1<TypeParameterConstraintClauseSyntax> SortConstraints(SeparatedSyntaxList`1<TypeParameterSyntax> typeParameters, SyntaxList`1<TypeParameterConstraintClauseSyntax> constraintClauses);
    private static SyntaxList`1<TNode> Swap(SyntaxList`1<TNode> list, int index1, int index2);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ParameterCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ParameterCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ParameterNameDiffersFromBaseCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ParameterNameDiffersFromBaseCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ParenthesizedExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ParenthesizedExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.PropertyDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.PropertyDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RawStringLiteralCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RawStringLiteralCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RegionDirectiveTriviaCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RegionDirectiveTriviaCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveBracesCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveBracesCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveBracesFromIfElseCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveBracesFromIfElseCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveEmptyInitializerCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveEmptyInitializerCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveEmptySyntaxCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveEmptySyntaxCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveEnumDefaultBaseTypeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveEnumDefaultBaseTypeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveOriginalExceptionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveOriginalExceptionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemovePartialModifierFromTypeWithSinglePartCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemovePartialModifierFromTypeWithSinglePartCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveRedundantAssignmentCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveRedundantAssignmentCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public static Task`1<Document> RemoveRedundantAssignmentAfterLocalDeclarationAsync(Document document, VariableDeclaratorSyntax declarator, CancellationToken cancellationToken);
    private static Task`1<Document> RemoveRedundantAssignmentBeforeReturnStatementAsync(Document document, AssignmentExpressionSyntax assignmentExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveRedundantAsyncAwaitCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveRedundantAsyncAwaitCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveRedundantBooleanLiteralCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveRedundantBooleanLiteralCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static void RegisterCodeFix(CodeFixContext context, string textToRemove, Func`2<CancellationToken, Task`1<Document>> createChangedDocument);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveRedundantCastCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveRedundantCastCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveUnnecessaryBracesCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveUnnecessaryBracesCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.RemoveUnnecessaryElseCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.RemoveUnnecessaryElseCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RefactorAsync(Document document, ElseClauseSyntax elseClause, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ReturnCompletedTaskInsteadOfNullCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ReturnCompletedTaskInsteadOfNullCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ReturnCompletedTaskInsteadOfNullCodeFixProvider/<RefactorAsync>d__3")]
private static Task`1<Document> RefactorAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
    internal static ExpressionSyntax CreateCompletedTaskExpression(Document document, ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ReturnCompletedTaskInsteadOfNullCodeFixProvider2 : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ReturnCompletedTaskInsteadOfNullCodeFixProvider2/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ReturnCompletedTaskInsteadOfNullCodeFixProvider2/<RefactorAsync>d__4")]
private static Task`1<Document> RefactorAsync(Document document, ConditionalAccessExpressionSyntax conditionalAccess, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <RefactorAsync>g__CreateNewNode|4_0(SyntaxNode node, <>c__DisplayClass4_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.SimplifyBooleanComparisonCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyBooleanComparisonCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyBooleanComparisonCodeFixProvider/<SimplifyBooleanComparisonAsync>d__4")]
public static Task`1<Document> SimplifyBooleanComparisonAsync(Document document, IsPatternExpressionSyntax isPattern, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyBooleanComparisonCodeFixProvider/<SimplifyBooleanComparisonAsync>d__5")]
public static Task`1<Document> SimplifyBooleanComparisonAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyBooleanComparisonCodeFixProvider/<CreateNewNodeAsync>d__6")]
private static Task`1<ExpressionSyntax> CreateNewNodeAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.SimplifyCodeBranchingCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyCodeBranchingCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyCodeBranchingCodeFixProvider/<RefactorAsync>d__3")]
private static Task`1<Document> RefactorAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.SimplifyLogicalNegationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyLogicalNegationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> SimplifyLogicalNegationAsync(Document document, PrefixUnaryExpressionSyntax logicalNot, CancellationToken cancellationToken);
    private static ExpressionSyntax GetNewNode(PrefixUnaryExpressionSyntax logicalNot, Document document);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.SimplifyNestedUsingStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyNestedUsingStatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.SimplifyNullableOfTCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SimplifyNullableOfTCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static TypeSyntax GetNullableType(TypeSyntax type);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.SingleLineDocumentationCommentTriviaCodeFixProvider : BaseCodeFixProvider {
    private static Regex _formatSummaryOnSingleLineRegex;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static SingleLineDocumentationCommentTriviaCodeFixProvider();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SingleLineDocumentationCommentTriviaCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> FormatSummaryOnSingleLineAsync(Document document, DocumentationCommentTriviaSyntax documentationComment, CancellationToken cancellationToken);
    private static Task`1<Document> FormatSummaryOnMultipleLinesAsync(Document document, DocumentationCommentTriviaSyntax documentationComment, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.StatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.StatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public static Task`1<Document> InlineLazyInitializationAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <InlineLazyInitializationAsync>g__AddTrivia|3_0(SyntaxTriviaList trivia, <>c__DisplayClass3_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.SwitchSectionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.SwitchSectionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.TokenCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.TokenCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.TypeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.TypeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.TypeParameterCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.TypeParameterCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UnnecessaryAssignmentCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryAssignmentCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryAssignmentCodeFixProvider/<RefactorAsync>d__4")]
private static Task`1<Document> RefactorAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    private static IfStatementSyntax CreateNewIfStatement(IfStatementSyntax ifStatement);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryAssignmentCodeFixProvider/<RefactorAsync>d__6")]
private static Task`1<Document> RefactorAsync(Document document, SwitchStatementSyntax switchStatement, CancellationToken cancellationToken);
    private static SwitchStatementSyntax CreateNewSwitchStatement(SwitchStatementSyntax switchStatement);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryAssignmentCodeFixProvider/<RefactorAsync>d__8`1")]
private static Task`1<StatementListInfo> RefactorAsync(Document document, TStatement statement, StatementListInfo statementsInfo, Func`2<TStatement, TStatement> createNewStatement, int count, bool removeReturnStatement, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static SwitchSectionSyntax <CreateNewSwitchStatement>g__CreateNewSection|7_1(SwitchSectionSyntax section);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UnnecessaryEnumFlagCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryEnumFlagCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UnnecessaryExplicitUseOfEnumeratorCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryExplicitUseOfEnumeratorCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryExplicitUseOfEnumeratorCodeFixProvider/<RefactorAsync>d__4")]
private static Task`1<Document> RefactorAsync(Document document, UsingStatementSyntax usingStatement, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UnnecessaryUnsafeContextCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryUnsafeContextCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UnnecessaryUsageOfVerbatimStringLiteralCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnnecessaryUsageOfVerbatimStringLiteralCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RefactorAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UnusedMemberCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnusedMemberCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RefactorAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
    private static bool Predicate(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UnusedParameterCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnusedParameterCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UnusedParameterCodeFixProvider/<RefactorAsync>d__4")]
private static Task`1<Solution> RefactorAsync(Document document, ParameterSyntax parameter, AnonymousFunctionExpressionSyntax anonymousFunction, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseAnonymousFunctionOrMethodGroupCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseAnonymousFunctionOrMethodGroupCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseAnonymousFunctionOrMethodGroupCodeFixProvider/<ConvertAnonymousFunctionToMethodGroupAsync>d__3")]
private static Task`1<Document> ConvertAnonymousFunctionToMethodGroupAsync(Document document, AnonymousFunctionExpressionSyntax anonymousFunction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseAnonymousFunctionOrMethodGroupCodeFixProvider/<ConvertMethodGroupToAnonymousFunctionAsync>d__4")]
private static Task`1<Document> ConvertMethodGroupToAnonymousFunctionAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseAsyncAwaitCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseAsyncAwaitCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseAsyncAwaitCodeFixProvider/<RefactorAsync>d__3")]
private static Task`1<Document> RefactorAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseAutoPropertyCodeFixProvider : BaseCodeFixProvider {
    private static SyntaxAnnotation _removeAnnotation;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static UseAutoPropertyCodeFixProvider();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseAutoPropertyCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseAutoPropertyCodeFixProvider/<RefactorAsync>d__4")]
public static Task`1<Document> RefactorAsync(Document document, PropertyDeclarationSyntax propertyDeclaration, CancellationToken cancellationToken);
    private static ISymbol GetFieldSymbol(PropertyDeclarationSyntax property, SemanticModel semanticModel, CancellationToken cancellationToken);
    public static PropertyDeclarationSyntax CreateAutoProperty(PropertyDeclarationSyntax property, EqualsValueClauseSyntax initializer);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseBlockBodyOrExpressionBodyCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseBlockBodyOrExpressionBodyCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseCoalesceExpressionCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseCoalesceExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseCoalesceExpressionCodeFixProvider/<RefactorAsync>d__4")]
private static Task`1<Document> RefactorAsync(Document document, StatementSyntax statement, CancellationToken cancellationToken);
    private static Task`1<Document> RefactorAsync(Document document, StatementSyntax statement, IfStatementSyntax ifStatement, int statementIndex, StatementListInfo& statementsInfo, ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static BinaryExpressionSyntax CreateCoalesceExpression(ExpressionSyntax left, ExpressionSyntax right, ITypeSymbol targetType, ITypeSymbol ifNullType);
    private static Task`1<Document> RefactorAsync(Document document, InvocationExpressionSyntax invocationExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseCompoundAssignmentCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseCompoundAssignmentCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseCompoundAssignmentAsync(Document document, AssignmentExpressionSyntax assignmentExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseCompoundAssignmentCodeFixProvider/<ConvertLazyInitializationToCompoundAssignmentAsync>d__5")]
private static Task`1<Document> ConvertLazyInitializationToCompoundAssignmentAsync(Document document, BinaryExpressionSyntax coalesceExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseConditionalAccessCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseConditionalAccessCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseConditionalAccessCodeFixProvider/<UseConditionalAccessAsync>d__4")]
private static Task`1<Document> UseConditionalAccessAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseConditionalAccessCodeFixProvider/<UseConditionalAccessAsync>d__5")]
private static Task`1<Document> UseConditionalAccessAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static int <UseConditionalAccessAsync>g__GetParenTokenDiff|4_0(<>c__DisplayClass4_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseEmptyStringLiteralOrStringEmptyCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseEmptyStringLiteralOrStringEmptyCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseEmptyStringLiteralInsteadOfStringEmptyAsync(Document document, MemberAccessExpressionSyntax memberAccessExpression, CancellationToken cancellationToken);
    private static Task`1<Document> UseStringEmptyInsteadOfEmptyStringLiteralAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider : BaseCodeFixProvider {
    private static string UseExplicitlyTypedArrayTitle;
    private static string UseImplicitlyTypedArrayTitle;
    private static string UseCollectionExpressionTitle;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider/<RegisterCodeFixesAsync>d__5")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider/<GetChangedDocumentAsync>d__6")]
private static Task`1<ValueTuple`2<Func`2<CancellationToken, Task`1<Document>>, string>> GetChangedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider/<ConvertToExplicitAsync>d__7")]
private static Task`1<Document> ConvertToExplicitAsync(Document document, ImplicitArrayCreationExpressionSyntax implicitArrayCreation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider/<ConvertToExplicitAndUseVarAsync>d__8")]
private static Task`1<Document> ConvertToExplicitAndUseVarAsync(Document document, ImplicitArrayCreationExpressionSyntax implicitArrayCreation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider/<CreateArrayCreationAsync>d__9")]
private static Task`1<ArrayCreationExpressionSyntax> CreateArrayCreationAsync(Document document, ImplicitArrayCreationExpressionSyntax implicitArrayCreation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider/<ConvertToImplicitAsync>d__10")]
private static Task`1<Document> ConvertToImplicitAsync(Document document, ArrayCreationExpressionSyntax arrayCreation, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use code fix provider 'UseVarOrExplicitTypeCodeFixProvider' instead.")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseExplicitTypeInsteadOfVarCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitTypeInsteadOfVarCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static void RegisterCodeFix(CodeFixContext context, TypeSyntax type, ITypeSymbol typeSymbol, SemanticModel semanticModel);
}
[ObsoleteAttribute("Use code fix provider 'UseVarOrExplicitTypeCodeFixProvider' instead.")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseExplicitTypeInsteadOfVarInForEachCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseExplicitTypeInsteadOfVarInForEachCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseHasFlagMethodOrBitwiseOperatorCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseHasFlagMethodOrBitwiseOperatorCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseHasFlagMethodOrBitwiseOperatorCodeFixProvider/<ConvertBitwiseOperationToHasFlagCallAsync>d__3")]
private static Task`1<Document> ConvertBitwiseOperationToHasFlagCallAsync(Document document, BinaryExpressionSyntax equalsOrNotEquals, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseImplicitOrExplicitObjectCreationCodeFixProvider : BaseCodeFixProvider {
    private static string UseExplicitObjectCreationTitle;
    private static string UseImplicitObjectCreationTitle;
    private static string UseCollectionExpressionTitle;
    private static string UseCollectionExpressionEquivalenceKey;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseImplicitOrExplicitObjectCreationCodeFixProvider/<RegisterCodeFixesAsync>d__6")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseIsOperatorInsteadOfAsOperatorCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseIsOperatorInsteadOfAsOperatorCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseNameOfOperatorCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseNameOfOperatorCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UsePatternMatchingInsteadOfAsAndNullCheckCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UsePatternMatchingInsteadOfAsAndNullCheckCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RefactorAsync(Document document, LocalDeclarationStatementSyntax localDeclaration, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UsePatternMatchingInsteadOfIsAndCastCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UsePatternMatchingInsteadOfIsAndCastCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UsePatternMatchingInsteadOfIsAndCastCodeFixProvider/<RefactorAsync>d__5")]
private static Task`1<Document> RefactorAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UsePatternMatchingInsteadOfIsAndCastCodeFixProvider/<RefactorAsync>d__6")]
private static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    private static ValueTuple`2<IsPatternExpressionSyntax, TNode> GetNewNodes(SyntaxNode node, ExpressionSyntax expression, TNode nodeToRewrite, SemanticModel semanticModel, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UsePredefinedTypeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UsePredefinedTypeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UsePredefinedTypeAsync(Document document, SyntaxNode node, ITypeSymbol typeSymbol, CancellationToken cancellationToken);
    private static SyntaxNode GetNewNode(SyntaxNode node, TypeSyntax type);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseRegexInstanceInsteadOfStaticMethodCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseRegexInstanceInsteadOfStaticMethodCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseStringComparisonCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseStringComparisonCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static bool RegisterCodeFix(CodeFixContext context, Diagnostic diagnostic, BinaryExpressionSyntax binaryExpression, INamedTypeSymbol comparisonSymbol, string comparisonName);
    private static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, string comparisonName, CancellationToken cancellationToken);
    private static bool RegisterCodeFix(CodeFixContext context, Diagnostic diagnostic, SimpleMemberInvocationExpressionInfo invocationInfo, INamedTypeSymbol comparisonSymbol, string comparisonName, SemanticModel semanticModel);
    private static string GetTitle(string stringComparison);
    private static Task`1<Document> RefactorAsync(Document document, SimpleMemberInvocationExpressionInfo& invocationInfo, string comparisonName, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static NameSyntax CreateStringComparison(string comparisonName);
    private static ArgumentSyntax CreateArgument(ExpressionSyntax expression);
    private static ArgumentSyntax CreateArgument(ArgumentSyntax argument);
    [CompilerGeneratedAttribute]
internal static bool <RefactorAsync>g__ExistsStringContainsWithStringComparison|7_0(<>c__DisplayClass7_0& );
}
[ObsoleteAttribute("Use code fix provider 'UseVarOrExplicitTypeCodeFixProvider' instead.")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseVarInsteadOfExplicitTypeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseVarInsteadOfExplicitTypeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UseVarOrExplicitTypeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UseVarOrExplicitTypeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.UsingDirectiveCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.UsingDirectiveCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.ValidateArgumentsCorrectlyCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ValidateArgumentsCorrectlyCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.ValidateArgumentsCorrectlyCodeFixProvider/<AddLocalFunctionWithIteratorAsync>d__4")]
private static Task`1<Document> AddLocalFunctionWithIteratorAsync(Document document, StatementSyntax statement, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.VariableDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.VariableDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.VariableDeclaratorCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.VariableDeclaratorCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RemoveRedundantFieldInitializationAsync(Document document, VariableDeclaratorSyntax variableDeclarator, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.WhileStatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.WhileStatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> ConvertWhileStatementToForStatementAsync(Document document, WhileStatementSyntax whileStatement, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.WhitespaceTriviaCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.WhitespaceTriviaCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CodeFixes.XmlNodeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CodeFixes.XmlNodeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RemoveUnusedElementInDocumentationCommentAsync(Document document, XmlElementInfo& elementInfo, CancellationToken cancellationToken);
    private static Task`1<Document> FixDocumentationCommentTagAsync(Document document, XmlElementInfo& elementInfo, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <RemoveUnusedElementInDocumentationCommentAsync>g__IsXmlTextBetweenLines|3_0(XmlTextSyntax xmlText);
    [CompilerGeneratedAttribute]
internal static bool <RemoveUnusedElementInDocumentationCommentAsync>g__IsEmptyOrWhitespace|3_3(SyntaxToken token);
    [CompilerGeneratedAttribute]
internal static bool <RemoveUnusedElementInDocumentationCommentAsync>g__IsWhitespace|3_1(XmlTextSyntax xmlText);
    [CompilerGeneratedAttribute]
internal static bool <RemoveUnusedElementInDocumentationCommentAsync>g__IsNewLine|3_2(XmlTextSyntax xmlText);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CSharp.CSharp.CodeFixes.RemoveRedundantCatchBlockCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CSharp.CSharp.CodeFixes.RemoveRedundantCatchBlockCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Roslynator.CSharp.CSharp.CodeFixes.RemoveRedundantCatchBlockCodeFixProvider/<RemoveRedundantCatchAsync>d__3")]
private static Task`1<Document> RemoveRedundantCatchAsync(Document document, CatchClauseSyntax catchClause, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.AbstractTypeShouldNotHavePublicConstructorsRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ConstructorDeclarationSyntax constructorDeclaration, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.AddBracesRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, StatementSyntax statement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.AddOrRemoveRegionNameRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, EndRegionDirectiveTriviaSyntax endRegionDirective, SyntaxTrivia trivia, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.AddSummaryToDocumentationCommentRefactoring : object {
    [AsyncStateMachineAttribute("Roslynator.CSharp.Refactorings.AddSummaryToDocumentationCommentRefactoring/<RefactorAsync>d__0")]
public static Task`1<Document> RefactorAsync(Document document, DocumentationCommentTriviaSyntax documentationComment, CancellationToken cancellationToken);
    private static string CreateSummaryElement(string indent, string text);
}
internal static class Roslynator.CSharp.Refactorings.AvoidLockingOnPubliclyAccessibleInstanceRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, LockStatementSyntax lockStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.AvoidUsageOfForStatementToCreateInfiniteLoopRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ForStatementSyntax forStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.AvoidUsageOfUsingAliasDirectiveRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, UsingDirectiveSyntax usingDirective, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.CombineEnumerableWhereMethodChainRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
    private static ExpressionSyntax GetCondition(InvocationExpressionSyntax invocation);
}
internal static class Roslynator.CSharp.Refactorings.ConvertDoToWhileRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, DoStatementSyntax doStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.ConvertInterpolatedStringToConcatenationRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, InterpolatedStringExpressionSyntax interpolatedString, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.DeclareEachAttributeSeparatelyRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, AttributeListSyntax attributeList, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.DeclareUsingDirectiveOnTopLevelRefactoring : object {
    private static SymbolDisplayFormat _symbolDisplayFormat;
    private static DeclareUsingDirectiveOnTopLevelRefactoring();
    [AsyncStateMachineAttribute("Roslynator.CSharp.Refactorings.DeclareUsingDirectiveOnTopLevelRefactoring/<RefactorAsync>d__1")]
public static Task`1<Document> RefactorAsync(Document document, NamespaceDeclarationSyntax namespaceDeclaration, CancellationToken cancellationToken);
    private static UsingDirectiveSyntax EnsureFullyQualifiedName(UsingDirectiveSyntax usingDirective, SemanticModel semanticModel, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static NameSyntax <EnsureFullyQualifiedName>g__EnsureFullyQualifiedName|2_0(<>c__DisplayClass2_0& );
}
internal static class Roslynator.CSharp.Refactorings.DefaultLabelShouldBeLastLabelInSwitchSectionRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, SwitchSectionSyntax switchSection, CancellationToken cancellationToken);
}
internal class Roslynator.CSharp.Refactorings.Documentation.AddParamElementToDocumentationCommentRefactoring : DocumentationCommentRefactoring`1<ParameterSyntax> {
    public XmlTag Tag { get; }
    public virtual XmlTag get_Tag();
    public virtual bool ShouldBeBefore(XmlTag tag);
    public virtual string GetName(ParameterSyntax node);
    public virtual ElementInfo`1<ParameterSyntax> CreateInfo(ParameterSyntax node, int insertIndex, NewLinePosition newLinePosition);
    protected virtual SeparatedSyntaxList`1<ParameterSyntax> GetSyntaxList(SyntaxNode node);
}
internal class Roslynator.CSharp.Refactorings.Documentation.AddTypeParamElementToDocumentationCommentRefactoring : DocumentationCommentRefactoring`1<TypeParameterSyntax> {
    public XmlTag Tag { get; }
    public virtual XmlTag get_Tag();
    public virtual bool ShouldBeBefore(XmlTag tag);
    public virtual string GetName(TypeParameterSyntax node);
    public virtual ElementInfo`1<TypeParameterSyntax> CreateInfo(TypeParameterSyntax node, int insertIndex, NewLinePosition newLinePosition);
    protected virtual SeparatedSyntaxList`1<TypeParameterSyntax> GetSyntaxList(SyntaxNode node);
}
internal abstract class Roslynator.CSharp.Refactorings.Documentation.DocumentationCommentRefactoring`1 : object {
    public XmlTag Tag { get; }
    public abstract virtual XmlTag get_Tag();
    public abstract virtual bool ShouldBeBefore(XmlTag tag);
    public abstract virtual string GetName(TNode node);
    public abstract virtual ElementInfo`1<TNode> CreateInfo(TNode node, int insertIndex, NewLinePosition newLinePosition);
    [AsyncStateMachineAttribute("Roslynator.CSharp.Refactorings.Documentation.DocumentationCommentRefactoring`1/<RefactorAsync>d__5")]
public Task`1<Document> RefactorAsync(Document document, DocumentationCommentTriviaSyntax comment, CancellationToken cancellationToken);
    protected abstract virtual SeparatedSyntaxList`1<TNode> GetSyntaxList(SyntaxNode node);
    private string GetNewTrivia(DocumentationCommentTriviaSyntax comment, List`1<ElementInfo`1<TNode>> elementInfos);
    private List`1<ElementInfo`1<TNode>> GetElementInfos(DocumentationCommentTriviaSyntax comment, SeparatedSyntaxList`1<TNode> nodes);
    private static XmlElementSyntax GetPreviousElement(DocumentationCommentTriviaSyntax comment, XmlElementSyntax element);
    public Dictionary`2<string, XmlElementSyntax> CreateNameElementMap(DocumentationCommentTriviaSyntax comment);
    private int GetDefaultIndex(DocumentationCommentTriviaSyntax comment);
}
internal static class Roslynator.CSharp.Refactorings.JoinStringExpressionsRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, TextSpan span, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.MergeSwitchSectionsRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, SwitchSectionSyntax switchSection, CancellationToken cancellationToken);
    private static SwitchSectionSyntax CreateSectionWithoutStatements(SwitchSectionSyntax section);
}
internal static class Roslynator.CSharp.Refactorings.RemoveBracesRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BlockSyntax block, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveEmptyInitializerRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ObjectCreationExpressionSyntax objectCreationExpression, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveEmptyRegionRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, RegionInfo& region, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveEmptyStatementRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, EmptyStatementSyntax emptyStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveEnumDefaultUnderlyingTypeRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BaseTypeSyntax baseType, CancellationToken cancellationToken);
    private static SyntaxNode GetNodeToRemove(BaseTypeSyntax baseType, BaseListSyntax baseList);
}
internal static class Roslynator.CSharp.Refactorings.RemoveOriginalExceptionFromThrowStatementRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ThrowStatementSyntax throwStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantAsOperatorRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantAutoPropertyInitializationRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, PropertyDeclarationSyntax propertyDeclaration, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantBaseConstructorCallRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ConstructorDeclarationSyntax constructor, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantBaseInterfaceRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BaseTypeSyntax baseType, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantBooleanLiteralRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    public static Task`1<Document> RefactorAsync(Document document, ForStatementSyntax forStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantCastRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, CastExpressionSyntax castExpression, CancellationToken cancellationToken);
    public static Task`1<Document> RefactorAsync(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantDefaultSwitchSectionRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, SwitchSectionSyntax switchSection, CancellationToken cancellationToken);
    private static SwitchStatementSyntax GetNewSwitchStatement(SwitchSectionSyntax switchSection, SwitchStatementSyntax switchStatement);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantDelegateCreationRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ObjectCreationExpressionSyntax objectCreation, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveRedundantDisposeOrCloseCallRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ExpressionStatementSyntax expressionStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.RemoveSemicolonAtEndOfDeclarationRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, MemberDeclarationSyntax memberDeclaration, CancellationToken cancellationToken);
    private static MemberDeclarationSyntax GetNewMemberDeclaration(MemberDeclarationSyntax memberDeclaration);
    private static SyntaxTriviaList GetNewTrailingTrivia(SyntaxToken closeBrace, SyntaxToken semicolon);
}
internal static class Roslynator.CSharp.Refactorings.RemoveUnnecessaryCaseLabelRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, CaseSwitchLabelSyntax label, CancellationToken cancellationToken);
    private static SyntaxRemoveOptions GetRemoveOptions(CaseSwitchLabelSyntax label);
}
internal static class Roslynator.CSharp.Refactorings.SimplifyCoalesceExpressionRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, ExpressionSyntax expression, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.SimplifyNestedUsingStatementRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, UsingStatementSyntax usingStatement, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.SimplifyNullableOfTRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, TypeSyntax type, TypeSyntax nullableType, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.SimplifyNullCheckRefactoring : object {
    [AsyncStateMachineAttribute("Roslynator.CSharp.Refactorings.SimplifyNullCheckRefactoring/<RefactorAsync>d__0")]
public static Task`1<Document> RefactorAsync(Document document, ConditionalExpressionSyntax conditionalExpression, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UnconstrainedTypeParameterCheckedForNullRefactoring : object {
    [AsyncStateMachineAttribute("Roslynator.CSharp.Refactorings.UnconstrainedTypeParameterCheckedForNullRefactoring/<RefactorAsync>d__0")]
public static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, ITypeSymbol typeSymbol, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UnnecessaryInterpolatedStringRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, InterpolatedStringExpressionSyntax interpolatedString, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UnnecessaryInterpolationRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, InterpolationSyntax interpolation, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UnusedParameterRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, TypeParameterSyntax typeParameter, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UseCountOrLengthPropertyInsteadOfAnyMethodRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, InvocationExpressionSyntax invocation, string propertyName, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UseEventArgsEmptyRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, ObjectCreationExpressionSyntax objectCreationExpression, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UseExclusiveOrOperatorRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax logicalOr, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UseIsOperatorInsteadOfAsOperatorRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UseNameOfOperatorRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, LiteralExpressionSyntax literalExpression, string identifier, CancellationToken cancellationToken);
    public static Task`1<Document> RefactorAsync(Document document, InvocationExpressionSyntax invocationExpression, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.UseRegexInstanceInsteadOfStaticMethodRefactoring : object {
    [AsyncStateMachineAttribute("Roslynator.CSharp.Refactorings.UseRegexInstanceInsteadOfStaticMethodRefactoring/<RefactorAsync>d__0")]
public static Task`1<Document> RefactorAsync(Document document, InvocationExpressionSyntax invocationExpression, CancellationToken cancellationToken);
    private static ArgumentListPair RewriteArgumentLists(ArgumentListSyntax argumentList, SemanticModel semanticModel, CancellationToken cancellationToken);
}
internal static class Roslynator.CSharp.Refactorings.ValueTypeObjectIsNeverEqualToNullRefactoring : object {
    [AsyncStateMachineAttribute("Roslynator.CSharp.Refactorings.ValueTypeObjectIsNeverEqualToNullRefactoring/<RefactorAsync>d__0")]
public static Task`1<Document> RefactorAsync(Document document, BinaryExpressionSyntax binaryExpression, ITypeSymbol typeSymbol, CancellationToken cancellationToken);
}
internal class Roslynator.CSharp.SyntaxRewriters.UseAsyncAwaitRewriter : SkipFunctionRewriter {
    private static SyntaxAnnotation[] _asyncAwaitAnnotation;
    private static SyntaxAnnotation[] _asyncAwaitAnnotationAndFormatterAnnotation;
    [CompilerGeneratedAttribute]
private bool <KeepReturnStatement>k__BackingField;
    public bool KeepReturnStatement { get; }
    private UseAsyncAwaitRewriter(bool keepReturnStatement);
    private static UseAsyncAwaitRewriter();
    [CompilerGeneratedAttribute]
public bool get_KeepReturnStatement();
    public static UseAsyncAwaitRewriter Create(IMethodSymbol methodSymbol, SemanticModel semanticModel, int position);
    public virtual SyntaxNode VisitReturnStatement(ReturnStatementSyntax node);
    public virtual SyntaxNode VisitBlock(BlockSyntax node);
    public virtual SyntaxNode VisitSwitchSection(SwitchSectionSyntax node);
    private static SyntaxList`1<StatementSyntax> RewriteStatements(SyntaxNode parent, SyntaxList`1<StatementSyntax> statements);
    private static bool IsMethodLike(SyntaxNode node);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
