[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Roslynator.CSharp.FormattingVerifier : object {
    [ConditionalAttribute("DEBUG")]
public static void VerifyChangedSpansAreWhitespace(SyntaxNode node, IList`1<TextChange> textChanges);
    [CompilerGeneratedAttribute]
internal static bool <VerifyChangedSpansAreWhitespace>g__VerifyTextChange|0_0(TextChange textChange, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static bool <VerifyChangedSpansAreWhitespace>g__VerifySpan|0_1(TextSpan span, SyntaxTriviaList leading);
}
[ExtensionAttribute]
internal static class Roslynator.CSharp.SyntaxTriviaExtensions : object {
    [ExtensionAttribute]
public static TNode PrependEndOfLineToLeadingTrivia(TNode node);
    [ExtensionAttribute]
public static TNode AppendEndOfLineToLeadingTrivia(TNode node);
    [ExtensionAttribute]
public static TNode PrependEndOfLineToTrailingTrivia(TNode node);
    [ExtensionAttribute]
public static TNode AppendEndOfLineToTrailingTrivia(TNode node);
    [ExtensionAttribute]
public static SyntaxToken PrependEndOfLineToLeadingTrivia(SyntaxToken token);
    [ExtensionAttribute]
public static SyntaxToken AppendEndOfLineToLeadingTrivia(SyntaxToken token);
    [ExtensionAttribute]
public static SyntaxToken PrependEndOfLineToTrailingTrivia(SyntaxToken token);
    [ExtensionAttribute]
public static SyntaxToken AppendEndOfLineToTrailingTrivia(SyntaxToken token);
}
public abstract class Roslynator.Formatting.CodeFixes.BaseCodeFixProvider : AbstractCodeFixProvider {
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.AccessorDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.AccessorDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> FormatAccessorBracesOnSingleLineAsync(Document document, AccessorDeclarationSyntax accessor, CancellationToken cancellationToken);
    private static Task`1<Document> FormatAccessorBracesOnMultipleLinesAsync(Document document, AccessorDeclarationSyntax accessor, CancellationToken cancellationToken);
    private static Task`1<Document> PutAccessorOnItsOwnLineAsync(AccessorDeclarationSyntax accessorDeclaration, Document document, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.AccessorListCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.AccessorListCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> PutAccessorsOnSingleLine(Document document, AccessorListSyntax accessorList, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.AddBlankLineBeforeAndAfterUsingDirectiveListCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.AddBlankLineBeforeAndAfterUsingDirectiveListCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.BinaryExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.BlankLineBetweenDeclarationsCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.BlockCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.BlockCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> FormatBlockBracesOnSingleLineAsync(Document document, BlockSyntax block, CancellationToken cancellationToken);
    private static Task`1<Document> FormatBlockBracesOnMultipleLinesAsync(Document document, BlockSyntax block, CancellationToken cancellationToken);
}
internal static class Roslynator.Formatting.CodeFixes.CSharp.CodeFixHelpers : object {
    public static Task`1<Document> AddNewLineBeforeAsync(Document document, SyntaxToken token, string indentation, CancellationToken cancellationToken);
    public static TextChange GetNewLineBeforeTextChange(SyntaxToken token, string indentation);
    public static Task`1<Document> AddNewLineAfterAsync(Document document, SyntaxToken token, string indentation, CancellationToken cancellationToken);
    public static TextChange GetNewLineAfterTextChange(SyntaxToken token, string indentation);
    public static Task`1<Document> AddBlankLineBeforeDirectiveAsync(Document document, DirectiveTriviaSyntax directiveTrivia, CancellationToken cancellationToken);
    public static Task`1<Document> AddBlankLineAfterDirectiveAsync(Document document, DirectiveTriviaSyntax directiveTrivia, CancellationToken cancellationToken);
    public static Task`1<Document> FixCallChainAsync(Document document, ExpressionSyntax expression, CancellationToken cancellationToken);
    public static Task`1<Document> FixCallChainAsync(Document document, ExpressionSyntax expression, TextSpan span, CancellationToken cancellationToken);
    public static Task`1<Document> FixBinaryExpressionAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
    public static Task`1<Document> FixBinaryExpressionAsync(Document document, BinaryExpressionSyntax binaryExpression, TextSpan span, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, ParameterListSyntax parameterList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, BracketedParameterListSyntax bracketedParameterList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, TypeParameterListSyntax typeParameterList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, ArgumentListSyntax argumentList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, BracketedArgumentListSyntax bracketedArgumentList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, AttributeArgumentListSyntax attributeArgumentList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, TypeArgumentListSyntax typeArgumentList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, AttributeListSyntax attributeList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, BaseListSyntax baseList, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, TupleTypeSyntax tupleType, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, TupleExpressionSyntax tupleExpression, ListFixMode fixMode, CancellationToken cancellationToken);
    public static Task`1<Document> FixListAsync(Document document, InitializerExpressionSyntax initializerExpression, ListFixMode fixMode, CancellationToken cancellationToken);
    private static Task`1<Document> FixListAsync(Document document, SyntaxNode containingNode, SyntaxNodeOrToken openNodeOrToken, SeparatedSyntaxList`1<TNode> nodes, ListFixMode fixMode, CancellationToken cancellationToken);
    internal static List`1<TextChange> GetFixListChanges(Document document, SyntaxNode containingNode, SyntaxNodeOrToken openNodeOrToken, IReadOnlyList`1<TNode> nodes, ListFixMode fixMode, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <FixCallChainAsync>g__SetIndentation|7_0(SyntaxToken token, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <FixCallChainAsync>g__SetIndentation2|7_1(SyntaxToken token, int endIndex, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static bool <FixBinaryExpressionAsync>g__SetIndentation|9_0(SyntaxNodeOrToken nodeOrToken, <>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static void <FixBinaryExpressionAsync>g__AddTextChange|9_2(TextSpan span, <>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static void <FixBinaryExpressionAsync>g__SetIndentation2|9_1(SyntaxNodeOrToken nodeOrToken, int endIndex, <>c__DisplayClass9_0& );
}
internal static class Roslynator.Formatting.CodeFixes.CSharp.CodeFixTitles : object {
    public static string AddBlankLine;
    public static string AddNewLine;
    public static string RemoveBlankLine;
    public static string RemoveNewLine;
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.CompilationUnitCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.CompilationUnitCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.ConditionalAccessExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.DirectiveTriviaCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.DirectiveTriviaCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> AddBlankLineAfterRegionDirectiveAndBeforeEndRegionAsync(Document document, DirectiveTriviaSyntax directiveTrivia, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.EnumDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.FileScopedNamespaceDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.FixFormattingOfBinaryExpressionChainCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.FixFormattingOfBinaryExpressionChainCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.FixFormattingOfCallChainCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.FixFormattingOfCallChainCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.FixFormattingOfListCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.FixFormattingOfListCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.InitializerCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.InitializerCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
internal enum Roslynator.Formatting.CodeFixes.CSharp.ListFixMode : Enum {
    public int value__;
    public static ListFixMode Fix;
    public static ListFixMode Wrap;
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.MemberDeclarationCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.MemberDeclarationCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> FormatTypeDeclarationBracesOnMultipleLinesAsync(Document document, MemberDeclarationSyntax declaration, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static MemberDeclarationSyntax <FormatTypeDeclarationBracesOnMultipleLinesAsync>g__GetNewDeclaration|3_0(<>c__DisplayClass3_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.NormalizeWhitespaceAtEndOfFileCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.NormalizeWhitespaceAtEndOfFileCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.ReplaceTabWithSpacesCodeFixProvider : BaseCodeFixProvider {
    [CompilerGeneratedAttribute]
private string <TwoSpacesEquivalenceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FourSpacesEquivalenceKey>k__BackingField;
    internal string TwoSpacesEquivalenceKey { get; }
    internal string FourSpacesEquivalenceKey { get; }
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
internal string get_TwoSpacesEquivalenceKey();
    [CompilerGeneratedAttribute]
internal string get_FourSpacesEquivalenceKey();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseSpacesInsteadOfTabAsync(Document document, TextSpan span, int numberOfSpaces, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.StatementCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.StatementCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.SwitchSectionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.SyntaxTokenCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.SyntaxTokenCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.SyntaxTriviaCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.SyntaxTriviaCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.CSharp.TypeParameterConstraintClauseSyntaxCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.CSharp.TypeParameterConstraintClauseSyntaxCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.LineIsTooLong.LineIsTooLongCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.Formatting.CodeFixes.LineIsTooLong.LineIsTooLongCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Func`2<CancellationToken, Task`1<Document>> GetCreateChangedDocument(Document document, SyntaxNode node);
    private static Task`1<Document> AddNewLineBeforeOrAfterArrowAsync(Document document, ArrowExpressionClauseSyntax arrowExpressionClause, CancellationToken cancellationToken);
    private static Task`1<Document> AddNewLineBeforeOrAfterEqualsSignAsync(Document document, SyntaxToken operatorToken, CancellationToken cancellationToken);
    private static Task`1<Document> AddNewLineBeforeOrAfterConditionalOperatorAsync(Document document, ConditionalExpressionSyntax conditionalExpression, CancellationToken cancellationToken);
    private static Task`1<Document> AddNewLineBeforeOrAfterAsync(Document document, SyntaxToken token, bool addNewLineAfter, CancellationToken cancellationToken);
    private static Task`1<Document> WrapForStatementAsync(Document document, ForStatementSyntax forStatement, CancellationToken cancellationToken);
    private static Task`1<Document> WrapBaseListAsync(Document document, BaseListSyntax baseList, CancellationToken cancellationToken);
}
internal enum Roslynator.Formatting.CodeFixes.LineIsTooLong.SyntaxGroup : Enum {
    public int value__;
    public static SyntaxGroup ArrowExpressionClause;
    public static SyntaxGroup PropertyInitializer;
    public static SyntaxGroup ForStatement;
    public static SyntaxGroup ConditionalExpression;
    public static SyntaxGroup AttributeList;
    public static SyntaxGroup BaseList;
    public static SyntaxGroup InitializerExpression;
    public static SyntaxGroup ParameterList;
    public static SyntaxGroup BinaryExpression;
    public static SyntaxGroup MemberExpression;
    public static SyntaxGroup ArgumentList;
    public static SyntaxGroup Is_As_EqualityExpression;
    public static SyntaxGroup AssignmentExpression;
    public static SyntaxGroup FieldOrLocalInitializer;
}
internal static class Roslynator.Formatting.CodeFixes.LineIsTooLong.SyntaxGroupMap : object {
    [CompilerGeneratedAttribute]
private static ImmutableDictionary`2<SyntaxKind, SyntaxGroup> <Value>k__BackingField;
    internal static ImmutableDictionary`2<SyntaxKind, SyntaxGroup> Value { get; }
    private static SyntaxGroupMap();
    [CompilerGeneratedAttribute]
internal static ImmutableDictionary`2<SyntaxKind, SyntaxGroup> get_Value();
}
internal class Roslynator.Formatting.CodeFixes.LineIsTooLong.WrapLineNodeFinder : object {
    private Dictionary`2<SyntaxGroup, SyntaxNode> _nodes;
    private HashSet`1<SyntaxNode> _processedNodes;
    [CompilerGeneratedAttribute]
private Document <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticModel <SemanticModel>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSpan <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLineLength>k__BackingField;
    public Document Document { get; }
    public SemanticModel SemanticModel { get; }
    public TextSpan Span { get; }
    public int MaxLineLength { get; }
    public WrapLineNodeFinder(Document document, SemanticModel semanticModel, TextSpan span, int maxLineLength);
    [CompilerGeneratedAttribute]
public Document get_Document();
    [CompilerGeneratedAttribute]
public SemanticModel get_SemanticModel();
    [CompilerGeneratedAttribute]
public TextSpan get_Span();
    [CompilerGeneratedAttribute]
public int get_MaxLineLength();
    public SyntaxNode FindNodeToFix(SyntaxNode root);
    private SyntaxNode GetFixableNode(SyntaxNode node);
    private static SyntaxGroup GetSyntaxGroup(SyntaxNode node);
    private static bool TryGetSyntaxGroup(SyntaxNode node, SyntaxGroup& syntaxGroup);
    private bool TryGetNode(SyntaxGroup syntaxGroup, SyntaxNode& node);
    private bool ShouldAnalyze(SyntaxNode node, SyntaxGroup syntaxGroup);
    private bool CanWrap(SeparatedSyntaxList`1<TNode> nodes, int wrapPosition, int minCount);
    private bool CanWrap(SyntaxNode node, int wrapPosition, int longestLength);
    private bool CanWrap(MemberAccessExpressionSyntax memberAccessExpression);
    private static SyntaxNode ChooseNode(SyntaxNode node1, SyntaxNode node2);
    private static SyntaxNode ChooseBetweenArgumentListAndMemberExpression(SyntaxNode argumentList, SyntaxNode memberExpression);
    [CompilerGeneratedAttribute]
internal static bool <ShouldAnalyze>g__IsInsideInterpolation|20_0(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.Formatting.CodeFixes.NewLineCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
