[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportLanguageServiceAttribute("Roslynator.CodeMetrics.ICodeMetricsService", "C#", "Default")]
internal class Roslynator.CSharp.CodeMetrics.CSharpCodeMetricsService : CodeMetricsService {
    public ISyntaxFactsService SyntaxFacts { get; }
    public virtual ISyntaxFactsService get_SyntaxFacts();
    public virtual CodeMetricsInfo CountPhysicalLines(SyntaxNode node, SourceText sourceText, CodeMetricsOptions options, CancellationToken cancellationToken);
    public virtual CodeMetricsInfo CountLogicalLines(SyntaxNode node, SourceText sourceText, CodeMetricsOptions options, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Roslynator.CSharp.CodeMetrics.CSharpLinesWalker : CSharpSyntaxWalker {
    [CompilerGeneratedAttribute]
private int <CommentLineCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PreprocessorDirectiveLineCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TextLineCollection <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeMetricsOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public int CommentLineCount { get; public set; }
    public int PreprocessorDirectiveLineCount { get; public set; }
    public TextLineCollection Lines { get; }
    public CodeMetricsOptions Options { get; }
    public CancellationToken CancellationToken { get; }
    protected CSharpLinesWalker(TextLineCollection lines, CodeMetricsOptions options, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public int get_CommentLineCount();
    [CompilerGeneratedAttribute]
public void set_CommentLineCount(int value);
    [CompilerGeneratedAttribute]
public int get_PreprocessorDirectiveLineCount();
    [CompilerGeneratedAttribute]
public void set_PreprocessorDirectiveLineCount(int value);
    [CompilerGeneratedAttribute]
public TextLineCollection get_Lines();
    [CompilerGeneratedAttribute]
public CodeMetricsOptions get_Options();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    public virtual void VisitTrivia(SyntaxTrivia trivia);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Roslynator.CSharp.CodeMetrics.CSharpLogicalLinesWalker : CSharpLinesWalker {
    [CompilerGeneratedAttribute]
private int <LogicalLineCount>k__BackingField;
    public int LogicalLineCount { get; public set; }
    public CSharpLogicalLinesWalker(TextLineCollection lines, CodeMetricsOptions options, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public int get_LogicalLineCount();
    [CompilerGeneratedAttribute]
public void set_LogicalLineCount(int value);
    public virtual void VisitAccessorDeclaration(AccessorDeclarationSyntax node);
    public virtual void VisitAttributeList(AttributeListSyntax node);
    public virtual void VisitBreakStatement(BreakStatementSyntax node);
    public virtual void VisitCatchClause(CatchClauseSyntax node);
    public virtual void VisitClassDeclaration(ClassDeclarationSyntax node);
    public virtual void VisitConstructorDeclaration(ConstructorDeclarationSyntax node);
    public virtual void VisitContinueStatement(ContinueStatementSyntax node);
    public virtual void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node);
    public virtual void VisitDelegateDeclaration(DelegateDeclarationSyntax node);
    public virtual void VisitDestructorDeclaration(DestructorDeclarationSyntax node);
    public virtual void VisitDoStatement(DoStatementSyntax node);
    public virtual void VisitElseClause(ElseClauseSyntax node);
    public virtual void VisitEnumDeclaration(EnumDeclarationSyntax node);
    public virtual void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node);
    public virtual void VisitEventDeclaration(EventDeclarationSyntax node);
    public virtual void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node);
    public virtual void VisitExpressionStatement(ExpressionStatementSyntax node);
    public virtual void VisitExternAliasDirective(ExternAliasDirectiveSyntax node);
    public virtual void VisitFieldDeclaration(FieldDeclarationSyntax node);
    public virtual void VisitFinallyClause(FinallyClauseSyntax node);
    public virtual void VisitFixedStatement(FixedStatementSyntax node);
    public virtual void VisitForEachStatement(ForEachStatementSyntax node);
    public virtual void VisitForEachVariableStatement(ForEachVariableStatementSyntax node);
    public virtual void VisitForStatement(ForStatementSyntax node);
    public virtual void VisitGotoStatement(GotoStatementSyntax node);
    public virtual void VisitCheckedStatement(CheckedStatementSyntax node);
    public virtual void VisitIfStatement(IfStatementSyntax node);
    public virtual void VisitIncompleteMember(IncompleteMemberSyntax node);
    public virtual void VisitIndexerDeclaration(IndexerDeclarationSyntax node);
    public virtual void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node);
    public virtual void VisitLabeledStatement(LabeledStatementSyntax node);
    public virtual void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node);
    public virtual void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node);
    public virtual void VisitLockStatement(LockStatementSyntax node);
    public virtual void VisitMethodDeclaration(MethodDeclarationSyntax node);
    public virtual void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node);
    public virtual void VisitOperatorDeclaration(OperatorDeclarationSyntax node);
    public virtual void VisitPropertyDeclaration(PropertyDeclarationSyntax node);
    public virtual void VisitReturnStatement(ReturnStatementSyntax node);
    public virtual void VisitStructDeclaration(StructDeclarationSyntax node);
    public virtual void VisitSwitchSection(SwitchSectionSyntax node);
    public virtual void VisitSwitchStatement(SwitchStatementSyntax node);
    public virtual void VisitThrowStatement(ThrowStatementSyntax node);
    public virtual void VisitTryStatement(TryStatementSyntax node);
    public virtual void VisitUnsafeStatement(UnsafeStatementSyntax node);
    public virtual void VisitUsingDirective(UsingDirectiveSyntax node);
    public virtual void VisitUsingStatement(UsingStatementSyntax node);
    public virtual void VisitWhileStatement(WhileStatementSyntax node);
    public virtual void VisitYieldStatement(YieldStatementSyntax node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Roslynator.CSharp.CodeMetrics.CSharpPhysicalLinesWalker : CSharpLinesWalker {
    [CompilerGeneratedAttribute]
private int <BlockBoundaryLineCount>k__BackingField;
    public int BlockBoundaryLineCount { get; public set; }
    public CSharpPhysicalLinesWalker(TextLineCollection lines, CodeMetricsOptions options, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public int get_BlockBoundaryLineCount();
    [CompilerGeneratedAttribute]
public void set_BlockBoundaryLineCount(int value);
    public virtual void VisitAccessorList(AccessorListSyntax node);
    public virtual void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node);
    public virtual void VisitBlock(BlockSyntax node);
    public virtual void VisitClassDeclaration(ClassDeclarationSyntax node);
    public virtual void VisitEnumDeclaration(EnumDeclarationSyntax node);
    public virtual void VisitInitializerExpression(InitializerExpressionSyntax node);
    public virtual void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node);
    public virtual void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node);
    public virtual void VisitStructDeclaration(StructDeclarationSyntax node);
    public virtual void VisitSwitchStatement(SwitchStatementSyntax node);
    private void VisitBraces(SyntaxToken& openBraceToken, SyntaxToken& closeBraceToken);
    private void VisitBrace(SyntaxToken& braceToken);
    private void VisitBraceTrivia(SyntaxToken& braceToken);
    [CompilerGeneratedAttribute]
private bool <VisitBraceTrivia>g__AnalyzeLeadingTrivia|17_0(SyntaxTriviaList& leadingTrivia, <>c__DisplayClass17_0& );
    [CompilerGeneratedAttribute]
private bool <VisitBraceTrivia>g__AnalyzeTrailingTrivia|17_1(SyntaxTriviaList& trailingTrivia, <>c__DisplayClass17_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportLanguageServiceAttribute("Roslynator.ISyntaxFactsService", "C#", "Default")]
internal class Roslynator.CSharp.CSharpSyntaxFactsService : object {
    [CompilerGeneratedAttribute]
private static CSharpSyntaxFactsService <Instance>k__BackingField;
    public static CSharpSyntaxFactsService Instance { get; }
    public string SingleLineCommentStart { get; }
    private static CSharpSyntaxFactsService();
    [CompilerGeneratedAttribute]
public static CSharpSyntaxFactsService get_Instance();
    public sealed virtual string get_SingleLineCommentStart();
    public sealed virtual bool IsEndOfLineTrivia(SyntaxTrivia trivia);
    public sealed virtual bool IsComment(SyntaxTrivia trivia);
    public sealed virtual bool IsSingleLineComment(SyntaxTrivia trivia);
    public sealed virtual bool IsWhitespaceTrivia(SyntaxTrivia trivia);
    public sealed virtual SyntaxTriviaList ParseLeadingTrivia(string text, int offset);
    public sealed virtual SyntaxTriviaList ParseTrailingTrivia(string text, int offset);
    public sealed virtual bool BeginsWithAutoGeneratedComment(SyntaxNode root);
    public sealed virtual bool AreEquivalent(SyntaxTree oldTree, SyntaxTree newTree);
    [NullableContextAttribute("2")]
public sealed virtual SyntaxNode GetSymbolDeclaration(SyntaxToken identifier);
    public sealed virtual bool IsValidIdentifier(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Roslynator.CSharp.CSharpTypeFactory : object {
    [NullableAttribute("2")]
private static TypeSyntax _boolType;
    [NullableAttribute("2")]
private static TypeSyntax _intType;
    [NullableAttribute("2")]
private static TypeSyntax _doubleType;
    [NullableAttribute("2")]
private static TypeSyntax _stringType;
    [NullableAttribute("2")]
private static TypeSyntax _objectType;
    [NullableAttribute("2")]
private static TypeSyntax _notImplementedException;
    [NullableAttribute("2")]
private static TypeSyntax _notSupportedException;
    public static TypeSyntax BoolType();
    public static TypeSyntax IntType();
    public static TypeSyntax DoubleType();
    public static TypeSyntax StringType();
    public static TypeSyntax ObjectType();
    public static TypeSyntax NotImplementedException();
    public static TypeSyntax NotSupportedException();
    private static TypeSyntax Parse(string typeName);
}
[FlagsAttribute]
public enum Roslynator.CSharp.DefaultSyntaxOptions : Enum {
    public int value__;
    public static DefaultSyntaxOptions None;
    public static DefaultSyntaxOptions UseDefault;
    public static DefaultSyntaxOptions AllowDefaultLiteral;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportLanguageServiceAttribute("Roslynator.FindSymbols.IFindSymbolService", "C#", "Default")]
internal class Roslynator.CSharp.FindSymbols.CSharpFindSymbolService : FindSymbolService {
    public ISyntaxFactsService SyntaxFacts { get; }
    public virtual ISyntaxFactsService get_SyntaxFacts();
    public virtual SyntaxNode FindDeclaration(SyntaxNode node);
    public virtual bool CanBeRenamed(SyntaxToken token);
    public virtual ImmutableArray`1<ISymbol> FindLocalSymbols(SyntaxNode node, SemanticModel semanticModel, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Roslynator.CSharp.FindSymbols.LocalSymbolFinder : object {
    public static ImmutableArray`1<ISymbol> FindLocalSymbols(SyntaxNode node, SemanticModel semanticModel, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Roslynator.CSharp.FindSymbols.LocalWalker : CSharpSyntaxWalker {
    public virtual void VisitLocal(SyntaxNode node);
    public virtual void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node);
    public virtual void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node);
    public virtual void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node);
    public virtual void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node);
    public virtual void VisitVariableDeclarator(VariableDeclaratorSyntax node);
    public virtual void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node);
    public virtual void VisitCatchDeclaration(CatchDeclarationSyntax node);
    public virtual void VisitForEachStatement(ForEachStatementSyntax node);
}
[FlagsAttribute]
internal enum Roslynator.CSharp.PreprocessorDirectiveRemoveOptions : Enum {
    public int value__;
    public static PreprocessorDirectiveRemoveOptions None;
    public static PreprocessorDirectiveRemoveOptions IncludeContent;
}
internal static class Roslynator.CSharp.RemoveCommentHelper : object {
    public static SyntaxToken GetReplacementToken(SyntaxTrivia comment);
    private static SyntaxTriviaList RemoveTrivia(SyntaxTriviaList triviaList, int index);
    private static int FindFirstTriviaToRemove(SyntaxTriviaList triviaList, int index);
    private static int FindLastTriviaToRemove(SyntaxTriviaList triviaList, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Roslynator.CSharp.Spelling.CSharpSpellingDiagnostic : SpellingDiagnostic {
    public CSharpSpellingDiagnostic(Diagnostic diagnostic, string value, int valueIndex, string containingValue, int containingValueIndex, SyntaxToken identifier);
    public virtual bool IsApplicableFix(string fix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportLanguageServiceAttribute("Roslynator.Spelling.ISpellingService", "C#", "Default")]
internal class Roslynator.CSharp.Spelling.CSharpSpellingService : SpellingService {
    public ISyntaxFactsService SyntaxFacts { get; }
    public virtual ISyntaxFactsService get_SyntaxFacts();
    public virtual DiagnosticAnalyzer CreateAnalyzer(SpellingData spellingData, SpellcheckOptions options);
    public virtual ImmutableArray`1<Diagnostic> AnalyzeSpelling(SyntaxNode node, SpellingData spellingData, SpellcheckOptions options, CancellationToken cancellationToken);
    public virtual SpellingDiagnostic CreateSpellingDiagnostic(Diagnostic diagnostic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Roslynator.CSharp.Spelling.CSharpSpellingWalker : CSharpSyntaxWalker {
    private SpellingAnalysisContext _analysisContext;
    private Stack`1<SyntaxNode> _stack;
    private SpellcheckOptions Options { get; }
    private CSharpSpellingWalker(SpellingAnalysisContext analysisContext, SyntaxWalkerDepth depth);
    private SpellcheckOptions get_Options();
    public static CSharpSpellingWalker Create(SpellingAnalysisContext context);
    private void AnalyzeText(string value, SyntaxTree syntaxTree, TextSpan textSpan);
    private void AnalyzeIdentifier(SyntaxToken identifier, int prefixLength);
    public virtual void VisitTrivia(SyntaxTrivia trivia);
    public virtual void VisitTupleType(TupleTypeSyntax node);
    public virtual void VisitTupleElement(TupleElementSyntax node);
    public virtual void VisitArgument(ArgumentSyntax node);
    public virtual void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node);
    public virtual void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node);
    public virtual void VisitVariableDeclarator(VariableDeclaratorSyntax node);
    public virtual void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node);
    public virtual void VisitCatchDeclaration(CatchDeclarationSyntax node);
    public virtual void VisitUsingDirective(UsingDirectiveSyntax node);
    public virtual void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node);
    private void VisitName(NameSyntax node);
    public virtual void VisitTypeParameter(TypeParameterSyntax node);
    public virtual void VisitClassDeclaration(ClassDeclarationSyntax node);
    public virtual void VisitStructDeclaration(StructDeclarationSyntax node);
    public virtual void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node);
    public virtual void VisitRecordDeclaration(RecordDeclarationSyntax node);
    public virtual void VisitEnumDeclaration(EnumDeclarationSyntax node);
    public virtual void VisitDelegateDeclaration(DelegateDeclarationSyntax node);
    public virtual void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node);
    public virtual void VisitMethodDeclaration(MethodDeclarationSyntax node);
    public virtual void VisitPropertyDeclaration(PropertyDeclarationSyntax node);
    public virtual void VisitEventDeclaration(EventDeclarationSyntax node);
    public virtual void VisitParameter(ParameterSyntax node);
    public virtual void VisitForEachStatement(ForEachStatementSyntax node);
    public virtual void VisitXmlElement(XmlElementSyntax node);
    public virtual void VisitXmlText(XmlTextSyntax node);
    public virtual void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node);
    public virtual void VisitUsingStatement(UsingStatementSyntax node);
    public virtual void VisitForStatement(ForStatementSyntax node);
    public virtual void VisitFixedStatement(FixedStatementSyntax node);
    public virtual void VisitFieldDeclaration(FieldDeclarationSyntax node);
    public virtual void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node);
    public virtual void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node);
    public virtual void VisitIndexerDeclaration(IndexerDeclarationSyntax node);
    public virtual void VisitLiteralExpression(LiteralExpressionSyntax node);
    public virtual void VisitInterpolatedStringText(InterpolatedStringTextSyntax node);
    private bool ShouldVisit(SpellingScopeFilter filter);
    private bool ShouldVisitFieldDeclaration(SyntaxNode fieldDeclaration);
    [CompilerGeneratedAttribute]
internal static SyntaxWalkerDepth <Create>g__GetWalkerDepth|5_0(SpellingAnalysisContext context);
}
[ObsoleteAttribute("SyntaxInverter is obsolete, use SyntaxLogicalInverter instead.")]
public static class Roslynator.CSharp.SyntaxInverter : object {
    public static ExpressionSyntax LogicallyInvert(ExpressionSyntax expression, CancellationToken cancellationToken);
    public static ExpressionSyntax LogicallyInvert(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static ParenthesizedExpressionSyntax LogicallyInvertAndParenthesize(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static ExpressionSyntax LogicallyInvertImpl(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static ExpressionSyntax InvertLessThanOrGreaterThan(BinaryExpressionSyntax binaryExpression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static ExpressionSyntax InvertLessThanGreaterThan(BinaryExpressionSyntax binaryExpression, ExpressionSyntax expression, ExpressionSyntax otherExpression, bool isLeft);
    private static ExpressionSyntax TryCreateExpressionWithoutConditionalAccess(ConditionalAccessExpressionSyntax conditionalAccess);
    internal static BinaryExpressionSyntax InvertBinaryExpression(BinaryExpressionSyntax binaryExpression);
    private static SyntaxToken InvertBinaryOperatorToken(SyntaxToken operatorToken);
    private static BinaryExpressionSyntax InvertBinaryExpression(BinaryExpressionSyntax binaryExpression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static SyntaxKind InvertBinaryExpressionKind(SyntaxKind kind);
    private static ConditionalExpressionSyntax InvertConditionalExpression(ConditionalExpressionSyntax conditionalExpression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static PrefixUnaryExpressionSyntax DefaultInvert(ExpressionSyntax expression);
    [CompilerGeneratedAttribute]
internal static bool <InvertLessThanOrGreaterThan>g__IsConstructedFromNullableOfT|4_0(ExpressionSyntax expression, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static SyntaxKind <InvertBinaryOperatorToken>g__InvertBinaryOperator|8_0(SyntaxKind kind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Roslynator.CSharp.SyntaxLogicalInverter : object {
    [CompilerGeneratedAttribute]
private static SyntaxLogicalInverter <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static SyntaxLogicalInverter <CSharp8>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxLogicalInverterOptions <Options>k__BackingField;
    public static SyntaxLogicalInverter Default { get; }
    internal static SyntaxLogicalInverter CSharp8 { get; }
    public SyntaxLogicalInverterOptions Options { get; }
    public SyntaxLogicalInverter(SyntaxLogicalInverterOptions options);
    private static SyntaxLogicalInverter();
    [CompilerGeneratedAttribute]
public static SyntaxLogicalInverter get_Default();
    [CompilerGeneratedAttribute]
internal static SyntaxLogicalInverter get_CSharp8();
    [CompilerGeneratedAttribute]
public SyntaxLogicalInverterOptions get_Options();
    internal static SyntaxLogicalInverter GetInstance(Document document);
    public ExpressionSyntax LogicallyInvert(ExpressionSyntax expression, CancellationToken cancellationToken);
    public ExpressionSyntax LogicallyInvert(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private ExpressionSyntax LogicallyInvertAndParenthesize(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private ExpressionSyntax LogicallyInvertImpl(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private ExpressionSyntax InvertLessThanOrGreaterThan(BinaryExpressionSyntax binaryExpression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private ExpressionSyntax InvertLessThanGreaterThan(BinaryExpressionSyntax binaryExpression, ExpressionSyntax expression, ExpressionSyntax otherExpression, bool isLeft);
    private static ExpressionSyntax TryCreateExpressionWithoutConditionalAccess(ConditionalAccessExpressionSyntax conditionalAccess);
    internal BinaryExpressionSyntax InvertBinaryExpression(BinaryExpressionSyntax binaryExpression);
    private static SyntaxToken InvertBinaryOperatorToken(SyntaxToken operatorToken);
    private BinaryExpressionSyntax InvertBinaryExpression(BinaryExpressionSyntax binaryExpression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static SyntaxKind InvertBinaryExpressionKind(SyntaxKind kind);
    private ConditionalExpressionSyntax InvertConditionalExpression(ConditionalExpressionSyntax conditionalExpression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private ExpressionSyntax InvertIsPattern(IsPatternExpressionSyntax isPattern);
    private static PrefixUnaryExpressionSyntax DefaultInvert(ExpressionSyntax expression, bool needsParenthesize);
    [CompilerGeneratedAttribute]
internal static bool <InvertLessThanOrGreaterThan>g__IsConstructedFromNullableOfT|15_0(ExpressionSyntax expression, <>c__DisplayClass15_0& );
    [CompilerGeneratedAttribute]
internal static SyntaxKind <InvertBinaryOperatorToken>g__InvertBinaryOperator|19_0(SyntaxKind kind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Roslynator.CSharp.SyntaxLogicalInverterOptions : object {
    [CompilerGeneratedAttribute]
private static SyntaxLogicalInverterOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static SyntaxLogicalInverterOptions <CSharp8>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNotPattern>k__BackingField;
    public static SyntaxLogicalInverterOptions Default { get; }
    internal static SyntaxLogicalInverterOptions CSharp8 { get; }
    public bool UseNotPattern { get; }
    public SyntaxLogicalInverterOptions(bool useNotPattern);
    private static SyntaxLogicalInverterOptions();
    [CompilerGeneratedAttribute]
public static SyntaxLogicalInverterOptions get_Default();
    [CompilerGeneratedAttribute]
internal static SyntaxLogicalInverterOptions get_CSharp8();
    [CompilerGeneratedAttribute]
public bool get_UseNotPattern();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Roslynator.CSharp.WorkspaceExtensions : object {
    [ExtensionAttribute]
internal static bool SupportsLanguageFeature(Document document, CSharpLanguageFeature feature);
    [ExtensionAttribute]
internal static bool SupportsLanguageVersion(Document document, LanguageVersion languageVersion);
    [ExtensionAttribute]
internal static DefaultSyntaxOptions GetDefaultSyntaxOptions(Document document, DefaultSyntaxOptions options);
    [ExtensionAttribute]
internal static Task`1<Document> RemoveNodeAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Document> RemoveMemberAsync(Document document, MemberDeclarationSyntax member, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Document> RemoveStatementAsync(Document document, StatementSyntax statement, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.WorkspaceExtensions/<RemoveCommentsAsync>d__6")]
[ExtensionAttribute]
public static Task`1<Document> RemoveCommentsAsync(Document document, CommentFilter comments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.WorkspaceExtensions/<RemoveCommentsAsync>d__7")]
[ExtensionAttribute]
public static Task`1<Document> RemoveCommentsAsync(Document document, TextSpan span, CommentFilter comments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.WorkspaceExtensions/<RemoveTriviaAsync>d__8")]
[ExtensionAttribute]
public static Task`1<Document> RemoveTriviaAsync(Document document, TextSpan span, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.WorkspaceExtensions/<RemovePreprocessorDirectivesAsync>d__9")]
[ExtensionAttribute]
public static Task`1<Document> RemovePreprocessorDirectivesAsync(Document document, PreprocessorDirectiveFilter directiveFilter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.WorkspaceExtensions/<RemovePreprocessorDirectivesAsync>d__10")]
[ExtensionAttribute]
public static Task`1<Document> RemovePreprocessorDirectivesAsync(Document document, TextSpan span, PreprocessorDirectiveFilter directiveFilter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CSharp.WorkspaceExtensions/<RemovePreprocessorDirectivesAsync>d__11")]
[ExtensionAttribute]
internal static Task`1<Document> RemovePreprocessorDirectivesAsync(Document document, IEnumerable`1<DirectiveTriviaSyntax> directives, PreprocessorDirectiveRemoveOptions options, CancellationToken cancellationToken);
    private static SourceText RemovePreprocessorDirectivesIncludingContent(SourceText sourceText, IEnumerable`1<DirectiveTriviaSyntax> directives);
    private static SourceText RemovePreprocessorDirectives(SourceText sourceText, IEnumerable`1<DirectiveTriviaSyntax> directives, PreprocessorDirectiveFilter directiveFilter);
    [AsyncStateMachineAttribute("Roslynator.CSharp.WorkspaceExtensions/<RemoveRegionAsync>d__14")]
[ExtensionAttribute]
public static Task`1<Document> RemoveRegionAsync(Document document, RegionInfo region, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Document> RemoveSingleLineDocumentationComment(Document document, DocumentationCommentTriviaSyntax documentationComment, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Document> ReplaceStatementsAsync(Document document, StatementListInfo statementsInfo, IEnumerable`1<StatementSyntax> newStatements, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Document> ReplaceStatementsAsync(Document document, StatementListInfo statementsInfo, SyntaxList`1<StatementSyntax> newStatements, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Document> ReplaceStatementsAsync(Document document, StatementListInfo statementsInfo, StatementListInfo newStatementsInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Document> ReplaceMembersAsync(Document document, MemberDeclarationListInfo info, IEnumerable`1<MemberDeclarationSyntax> newMembers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Document> ReplaceMembersAsync(Document document, MemberDeclarationListInfo info, SyntaxList`1<MemberDeclarationSyntax> newMembers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Document> ReplaceModifiersAsync(Document document, ModifierListInfo modifiersInfo, IEnumerable`1<SyntaxToken> newModifiers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Document> ReplaceModifiersAsync(Document document, ModifierListInfo modifiersInfo, SyntaxTokenList newModifiers, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Roslynator.CSharp.WorkspaceSymbolExtensions : object {
    [ExtensionAttribute]
public static ExpressionSyntax GetDefaultValueSyntax(ITypeSymbol typeSymbol, DefaultSyntaxOptions options, SymbolDisplayFormat format);
    [ExtensionAttribute]
public static ExpressionSyntax GetDefaultValueSyntax(ITypeSymbol typeSymbol, TypeSyntax type, DefaultSyntaxOptions options);
    [ExtensionAttribute]
private static ExpressionSyntax GetDefaultValueSyntax(ITypeSymbol typeSymbol, DefaultSyntaxOptions options, TypeSyntax type, SymbolDisplayFormat format);
    [ExtensionAttribute]
internal static ExpressionSyntax GetDefaultValueSyntax(IParameterSymbol parameterSymbol, SymbolDisplayFormat format);
    [CompilerGeneratedAttribute]
internal static TypeSyntax <GetDefaultValueSyntax>g__GetTypeSyntax|2_0(<>c__DisplayClass2_0& );
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GetDefaultValueSyntax>g__CreateDefault|2_1(<>c__DisplayClass2_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IFieldSymbol <GetDefaultValueSyntax>g__FindFieldWithConstantValue|3_0(<>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Roslynator.CSharp.WorkspaceSyntaxExtensions : object {
    private static SyntaxAnnotation[] _formatterAnnotationArray;
    private static SyntaxAnnotation[] _simplifierAnnotationArray;
    private static SyntaxAnnotation[] _renameAnnotationArray;
    private static SyntaxAnnotation[] _navigationAnnotationArray;
    private static SyntaxAnnotation[] _formatterAndSimplifierAnnotationArray;
    private static WorkspaceSyntaxExtensions();
    [ExtensionAttribute]
public static ParenthesizedExpressionSyntax Parenthesize(ExpressionSyntax expression, bool includeElasticTrivia, bool simplifiable);
    [ExtensionAttribute]
internal static ExpressionSyntax ParenthesizeIf(ExpressionSyntax expression, bool condition, bool includeElasticTrivia, bool simplifiable);
    [ExtensionAttribute]
internal static MemberAccessExpressionSyntax QualifyWithThis(SimpleNameSyntax simpleName, bool simplifiable);
    [ExtensionAttribute]
public static TNode WithFormatterAnnotation(TNode node);
    [ExtensionAttribute]
public static TNode WithSimplifierAnnotation(TNode node);
    [ExtensionAttribute]
internal static TNode WithNavigationAnnotation(TNode node);
    [ExtensionAttribute]
internal static TNode WithSimplifierAnnotationIf(TNode node, bool condition);
    [ExtensionAttribute]
internal static TNode WithFormatterAndSimplifierAnnotation(TNode node);
    [ExtensionAttribute]
public static SyntaxToken WithFormatterAnnotation(SyntaxToken token);
    [ExtensionAttribute]
public static SyntaxToken WithSimplifierAnnotation(SyntaxToken token);
    [ExtensionAttribute]
public static SyntaxToken WithNavigationAnnotation(SyntaxToken token);
    [ExtensionAttribute]
public static SyntaxToken WithRenameAnnotation(SyntaxToken token);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
