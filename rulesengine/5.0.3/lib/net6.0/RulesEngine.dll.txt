public abstract class RulesEngine.Actions.ActionBase : object {
    [AsyncStateMachineAttribute("RulesEngine.Actions.ActionBase/<ExecuteAndReturnResultAsync>d__0")]
internal virtual ValueTask`1<ActionRuleResult> ExecuteAndReturnResultAsync(ActionContext context, RuleParameter[] ruleParameters, bool includeRuleResults);
    public abstract virtual ValueTask`1<object> Run(ActionContext context, RuleParameter[] ruleParameters);
}
public class RulesEngine.Actions.ActionContext : object {
    private IDictionary`2<string, string> _context;
    private RuleResultTree _parentResult;
    public ActionContext(IDictionary`2<string, object> context, RuleResultTree parentResult);
    public RuleResultTree GetParentRuleResult();
    public bool TryGetContext(string name, T& output);
    public T GetContext(string name);
}
internal class RulesEngine.Actions.ActionFactory : object {
    private IDictionary`2<string, Func`1<ActionBase>> _actionRegistry;
    internal ActionFactory(IDictionary`2<string, Func`1<ActionBase>> actionRegistry);
    internal ActionBase Get(string name);
}
public class RulesEngine.Actions.EvaluateRuleAction : ActionBase {
    private RulesEngine _ruleEngine;
    private RuleExpressionParser _ruleExpressionParser;
    public EvaluateRuleAction(RulesEngine ruleEngine, RuleExpressionParser ruleExpressionParser);
    [AsyncStateMachineAttribute("RulesEngine.Actions.EvaluateRuleAction/<ExecuteAndReturnResultAsync>d__3")]
internal virtual ValueTask`1<ActionRuleResult> ExecuteAndReturnResultAsync(ActionContext context, RuleParameter[] ruleParameters, bool includeRuleResults);
    [AsyncStateMachineAttribute("RulesEngine.Actions.EvaluateRuleAction/<Run>d__4")]
public virtual ValueTask`1<object> Run(ActionContext context, RuleParameter[] ruleParameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<ActionRuleResult> <>n__0(ActionContext context, RuleParameter[] ruleParameters, bool includeRuleResults);
}
public class RulesEngine.Actions.OutputExpressionAction : ActionBase {
    private RuleExpressionParser _ruleExpressionParser;
    public OutputExpressionAction(RuleExpressionParser ruleExpressionParser);
    public virtual ValueTask`1<object> Run(ActionContext context, RuleParameter[] ruleParameters);
}
public class RulesEngine.CustomTypeProvider : DefaultDynamicLinqCustomTypeProvider {
    private HashSet`1<Type> _types;
    public CustomTypeProvider(Type[] types);
    public virtual HashSet`1<Type> GetCustomTypes();
}
public class RulesEngine.Exceptions.ExpressionParserException : Exception {
    public ExpressionParserException(string message, string expression);
}
public class RulesEngine.Exceptions.RuleException : Exception {
    public RuleException(string message);
    public RuleException(string message, Exception innerException);
}
public class RulesEngine.Exceptions.RuleValidationException : ValidationException {
    public RuleValidationException(string message, IEnumerable`1<ValidationFailure> errors);
}
public class RulesEngine.Exceptions.ScopedParamException : Exception {
    public ScopedParamException(string message, Exception innerException, string scopedParamName);
}
internal class RulesEngine.ExpressionBuilders.LambdaExpressionBuilder : RuleExpressionBuilderBase {
    private ReSettings _reSettings;
    private RuleExpressionParser _ruleExpressionParser;
    internal LambdaExpressionBuilder(ReSettings reSettings, RuleExpressionParser ruleExpressionParser);
    internal virtual RuleFunc`1<RuleResultTree> BuildDelegateForRule(Rule rule, RuleParameter[] ruleParams);
    internal virtual Expression Parse(string expression, ParameterExpression[] parameters, Type returnType);
    internal virtual Func`2<Object[], Dictionary`2<string, object>> CompileScopedParams(RuleParameter[] ruleParameters, RuleExpressionParameter[] scopedParameters);
    [CompilerGeneratedAttribute]
internal static bool <BuildDelegateForRule>g__func|3_0(Object[] param);
}
internal abstract class RulesEngine.ExpressionBuilders.RuleExpressionBuilderBase : object {
    internal abstract virtual RuleFunc`1<RuleResultTree> BuildDelegateForRule(Rule rule, RuleParameter[] ruleParams);
    internal abstract virtual Expression Parse(string expression, ParameterExpression[] parameters, Type returnType);
    internal abstract virtual Func`2<Object[], Dictionary`2<string, object>> CompileScopedParams(RuleParameter[] ruleParameters, RuleExpressionParameter[] scopedParameters);
}
public class RulesEngine.ExpressionBuilders.RuleExpressionParser : object {
    private ReSettings _reSettings;
    private IDictionary`2<string, MethodInfo> _methodInfo;
    public RuleExpressionParser(ReSettings reSettings);
    private void PopulateMethodInfo();
    public Expression Parse(string expression, ParameterExpression[] parameters, Type returnType);
    public Func`2<Object[], T> Compile(string expression, RuleParameter[] ruleParams);
    private Func`2<Object[], T> CompileExpression(Expression`1<Func`2<Object[], T>> expression);
    private Expression`1<Func`2<Object[], T>> WrapExpression(List`1<Expression> expressionList, ParameterExpression[] parameters, ParameterExpression[] variables);
    internal Func`2<Object[], Dictionary`2<string, object>> CompileRuleExpressionParameters(RuleParameter[] ruleParams, RuleExpressionParameter[] ruleExpParams);
    public T Evaluate(string expression, RuleParameter[] ruleParams);
    private IEnumerable`1<Expression> CreateAssignedParameterExpression(RuleExpressionParameter[] ruleExpParams);
    [IteratorStateMachineAttribute("RulesEngine.ExpressionBuilders.RuleExpressionParser/<GetParameterExpression>d__11")]
private IEnumerable`1<ParameterExpression> GetParameterExpression(RuleParameter[] ruleParams);
    private Expression`1<Func`2<Object[], Dictionary`2<string, object>>> CreateDictionaryExpression(RuleParameter[] ruleParams, RuleExpressionParameter[] ruleExpParams);
}
[ExtensionAttribute]
internal static class RulesEngine.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Safe(IEnumerable`1<T> enumerable);
}
[ExtensionAttribute]
public static class RulesEngine.Extensions.ListofRuleResultTreeExtension : object {
    [ExtensionAttribute]
public static List`1<RuleResultTree> OnSuccess(List`1<RuleResultTree> ruleResultTrees, OnSuccessFunc onSuccessFunc);
    [ExtensionAttribute]
public static List`1<RuleResultTree> OnFail(List`1<RuleResultTree> ruleResultTrees, OnFailureFunc onFailureFunc);
}
public static class RulesEngine.HelperFunctions.Constants : object {
    public static string WORKFLOW_NAME_NULL_ERRMSG;
    public static string INJECT_WORKFLOW_RULES_ERRMSG;
    public static string RULE_CATEGORY_CONFIGURED_ERRMSG;
    public static string RULE_NULL_ERRMSG;
    public static string NESTED_RULE_NULL_ERRMSG;
    public static string NESTED_RULE_CONFIGURED_ERRMSG;
    public static string OPERATOR_NULL_ERRMSG;
    public static string OPERATOR_INCORRECT_ERRMSG;
    public static string RULE_NAME_NULL_ERRMSG;
    public static string OPERATOR_RULES_ERRMSG;
    public static string LAMBDA_EXPRESSION_EXPRESSION_NULL_ERRMSG;
    public static string LAMBDA_EXPRESSION_OPERATOR_ERRMSG;
    public static string LAMBDA_EXPRESSION_RULES_ERRMSG;
}
public static class RulesEngine.HelperFunctions.ExpressionUtils : object {
    public static bool CheckContains(string check, string valList);
}
internal static class RulesEngine.HelperFunctions.Helpers : object {
    internal static RuleFunc`1<RuleResultTree> ToResultTree(ReSettings reSettings, Rule rule, IEnumerable`1<RuleResultTree> childRuleResults, Func`2<Object[], bool> isSuccessFunc, string exceptionMessage);
    internal static RuleFunc`1<RuleResultTree> ToRuleExceptionResult(ReSettings reSettings, Rule rule, Exception ex);
    internal static void HandleRuleException(Exception ex, Rule rule, ReSettings reSettings);
    internal static string GetExceptionMessage(string message, ReSettings reSettings);
}
internal class RulesEngine.HelperFunctions.MemCache : object {
    private MemCacheConfig _config;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ValueTuple`2<object, DateTimeOffset>> _cacheDictionary;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<ValueTuple`2<string, DateTimeOffset>> _cacheEvictionQueue;
    public MemCache(MemCacheConfig config);
    public bool TryGetValue(string key, T& value);
    public T Get(string key);
    public IEnumerable`1<string> GetKeys();
    public T GetOrCreate(string key, Func`1<T> createFn, Nullable`1<DateTimeOffset> expiry);
    public T Set(string key, T value, Nullable`1<DateTimeOffset> expiry);
    public void Remove(string key);
    public void Clear();
}
public class RulesEngine.HelperFunctions.MemCacheConfig : object {
    [CompilerGeneratedAttribute]
private int <SizeLimit>k__BackingField;
    public int SizeLimit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_SizeLimit();
    [CompilerGeneratedAttribute]
public void set_SizeLimit(int value);
}
[ExtensionAttribute]
public static class RulesEngine.HelperFunctions.Utils : object {
    public static object GetTypedObject(object input);
    public static Type CreateAbstractClassType(object input);
    public static object CreateObject(Type type, object input);
    [ExtensionAttribute]
private static IEnumerable Cast(IEnumerable self, Type innerType);
    [ExtensionAttribute]
private static IList ToList(IEnumerable self, Type innerType);
}
public interface RulesEngine.Interfaces.IRulesEngine {
    public abstract virtual ValueTask`1<List`1<RuleResultTree>> ExecuteAllRulesAsync(string workflowName, Object[] inputs);
    public abstract virtual ValueTask`1<List`1<RuleResultTree>> ExecuteAllRulesAsync(string workflowName, RuleParameter[] ruleParams);
    public abstract virtual ValueTask`1<ActionRuleResult> ExecuteActionWorkflowAsync(string workflowName, string ruleName, RuleParameter[] ruleParameters);
    public abstract virtual void AddWorkflow(Workflow[] Workflows);
    public abstract virtual void ClearWorkflows();
    public abstract virtual void RemoveWorkflow(String[] workflowNames);
    public abstract virtual bool ContainsWorkflow(string workflowName);
    public abstract virtual List`1<string> GetAllRegisteredWorkflowNames();
    public abstract virtual void AddOrUpdateWorkflow(Workflow[] Workflows);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.ActionInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Context>k__BackingField;
    public string Name { get; public set; }
    public Dictionary`2<string, object> Context { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(Dictionary`2<string, object> value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.ActionResult : object {
    [CompilerGeneratedAttribute]
private object <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public object Output { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(object value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.ActionRuleResult : ActionResult {
    [CompilerGeneratedAttribute]
private List`1<RuleResultTree> <Results>k__BackingField;
    public List`1<RuleResultTree> Results { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<RuleResultTree> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<RuleResultTree> value);
}
public enum RulesEngine.Models.ErrorType : Enum {
    public int value__;
    public static ErrorType Warning;
    public static ErrorType Error;
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.LocalParam : ScopedParam {
}
public enum RulesEngine.Models.NestedRuleExecutionMode : Enum {
    public int value__;
    public static NestedRuleExecutionMode All;
    public static NestedRuleExecutionMode Performance;
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.ReSettings : object {
    [CompilerGeneratedAttribute]
private Type[] <CustomTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Func`1<ActionBase>> <CustomActions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableExceptionAsErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFormattedErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableScopedParams>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpressionCaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRegisterInputType>k__BackingField;
    [CompilerGeneratedAttribute]
private NestedRuleExecutionMode <NestedRuleExecutionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private MemCacheConfig <CacheConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFastExpressionCompiler>k__BackingField;
    public Type[] CustomTypes { get; public set; }
    public Dictionary`2<string, Func`1<ActionBase>> CustomActions { get; public set; }
    public bool EnableExceptionAsErrorMessage { get; public set; }
    public bool IgnoreException { get; public set; }
    public bool EnableFormattedErrorMessage { get; public set; }
    public bool EnableScopedParams { get; public set; }
    public bool IsExpressionCaseSensitive { get; public set; }
    public bool AutoRegisterInputType { get; public set; }
    public NestedRuleExecutionMode NestedRuleExecutionMode { get; public set; }
    public MemCacheConfig CacheConfig { get; public set; }
    public bool UseFastExpressionCompiler { get; public set; }
    internal ReSettings(ReSettings reSettings);
    [CompilerGeneratedAttribute]
public Type[] get_CustomTypes();
    [CompilerGeneratedAttribute]
public void set_CustomTypes(Type[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`1<ActionBase>> get_CustomActions();
    [CompilerGeneratedAttribute]
public void set_CustomActions(Dictionary`2<string, Func`1<ActionBase>> value);
    [CompilerGeneratedAttribute]
public bool get_EnableExceptionAsErrorMessage();
    [CompilerGeneratedAttribute]
public void set_EnableExceptionAsErrorMessage(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreException();
    [CompilerGeneratedAttribute]
public void set_IgnoreException(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableFormattedErrorMessage();
    [CompilerGeneratedAttribute]
public void set_EnableFormattedErrorMessage(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableScopedParams();
    [CompilerGeneratedAttribute]
public void set_EnableScopedParams(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExpressionCaseSensitive();
    [CompilerGeneratedAttribute]
public void set_IsExpressionCaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoRegisterInputType();
    [CompilerGeneratedAttribute]
public void set_AutoRegisterInputType(bool value);
    [CompilerGeneratedAttribute]
public NestedRuleExecutionMode get_NestedRuleExecutionMode();
    [CompilerGeneratedAttribute]
public void set_NestedRuleExecutionMode(NestedRuleExecutionMode value);
    [CompilerGeneratedAttribute]
public MemCacheConfig get_CacheConfig();
    [CompilerGeneratedAttribute]
public void set_CacheConfig(MemCacheConfig value);
    [CompilerGeneratedAttribute]
public bool get_UseFastExpressionCompiler();
    [CompilerGeneratedAttribute]
public void set_UseFastExpressionCompiler(bool value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.Rule : object {
    [CompilerGeneratedAttribute]
private string <RuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleExpressionType <RuleExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WorkflowsToInject>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Rule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ScopedParam> <LocalParams>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleActions <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuccessEvent>k__BackingField;
    public string RuleName { get; public set; }
    public Dictionary`2<string, object> Properties { get; public set; }
    public string Operator { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool Enabled { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public RuleExpressionType RuleExpressionType { get; public set; }
    public IEnumerable`1<string> WorkflowsToInject { get; public set; }
    public IEnumerable`1<Rule> Rules { get; public set; }
    public IEnumerable`1<ScopedParam> LocalParams { get; public set; }
    public string Expression { get; public set; }
    public RuleActions Actions { get; public set; }
    public string SuccessEvent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RuleName();
    [CompilerGeneratedAttribute]
public void set_RuleName(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public RuleExpressionType get_RuleExpressionType();
    [CompilerGeneratedAttribute]
public void set_RuleExpressionType(RuleExpressionType value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_WorkflowsToInject();
    [CompilerGeneratedAttribute]
public void set_WorkflowsToInject(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Rule> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(IEnumerable`1<Rule> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ScopedParam> get_LocalParams();
    [CompilerGeneratedAttribute]
public void set_LocalParams(IEnumerable`1<ScopedParam> value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public RuleActions get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(RuleActions value);
    [CompilerGeneratedAttribute]
public string get_SuccessEvent();
    [CompilerGeneratedAttribute]
public void set_SuccessEvent(string value);
}
[ObsoleteAttribute("RuleAction class is deprecated. Use RuleActions class instead.")]
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.RuleAction : RuleActions {
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.RuleActions : object {
    [CompilerGeneratedAttribute]
private ActionInfo <OnSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionInfo <OnFailure>k__BackingField;
    public ActionInfo OnSuccess { get; public set; }
    public ActionInfo OnFailure { get; public set; }
    [CompilerGeneratedAttribute]
public ActionInfo get_OnSuccess();
    [CompilerGeneratedAttribute]
public void set_OnSuccess(ActionInfo value);
    [CompilerGeneratedAttribute]
public ActionInfo get_OnFailure();
    [CompilerGeneratedAttribute]
public void set_OnFailure(ActionInfo value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.RuleExpressionParameter : object {
    [CompilerGeneratedAttribute]
private ParameterExpression <ParameterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ValueExpression>k__BackingField;
    public ParameterExpression ParameterExpression { get; public set; }
    public Expression ValueExpression { get; public set; }
    [CompilerGeneratedAttribute]
public ParameterExpression get_ParameterExpression();
    [CompilerGeneratedAttribute]
public void set_ParameterExpression(ParameterExpression value);
    [CompilerGeneratedAttribute]
public Expression get_ValueExpression();
    [CompilerGeneratedAttribute]
public void set_ValueExpression(Expression value);
}
public enum RulesEngine.Models.RuleExpressionType : Enum {
    public int value__;
    public static RuleExpressionType LambdaExpression;
}
public class RulesEngine.Models.RuleFunc`1 : MulticastDelegate {
    public RuleFunc`1(object object, IntPtr method);
    public virtual T Invoke(RuleParameter[] ruleParameters);
    public virtual IAsyncResult BeginInvoke(RuleParameter[] ruleParameters, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.RuleParameter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterExpression <ParameterExpression>k__BackingField;
    public Type Type { get; private set; }
    public string Name { get; private set; }
    public object Value { get; private set; }
    public ParameterExpression ParameterExpression { get; private set; }
    public RuleParameter(string name, object value);
    internal RuleParameter(string name, Type type, object value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    [CompilerGeneratedAttribute]
public ParameterExpression get_ParameterExpression();
    [CompilerGeneratedAttribute]
private void set_ParameterExpression(ParameterExpression value);
    private void Init(string name, Type type);
    public static RuleParameter Create(string name, T value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.RuleResultMessage : object {
    [CompilerGeneratedAttribute]
private List`1<string> <ErrorMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <WarningMessages>k__BackingField;
    public List`1<string> ErrorMessages { get; public set; }
    public List`1<string> WarningMessages { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_ErrorMessages();
    [CompilerGeneratedAttribute]
public void set_ErrorMessages(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_WarningMessages();
    [CompilerGeneratedAttribute]
public void set_WarningMessages(List`1<string> value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.RuleResultTree : object {
    [CompilerGeneratedAttribute]
private Rule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<RuleResultTree> <ChildResults>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionResult <ActionResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    public Rule Rule { get; public set; }
    public bool IsSuccess { get; public set; }
    public IEnumerable`1<RuleResultTree> ChildResults { get; public set; }
    public Dictionary`2<string, object> Inputs { get; public set; }
    public ActionResult ActionResult { get; public set; }
    public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public Rule get_Rule();
    [CompilerGeneratedAttribute]
public void set_Rule(Rule value);
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<RuleResultTree> get_ChildResults();
    [CompilerGeneratedAttribute]
public void set_ChildResults(IEnumerable`1<RuleResultTree> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ActionResult get_ActionResult();
    [CompilerGeneratedAttribute]
public void set_ActionResult(ActionResult value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.ScopedParam : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    public string Name { get; public set; }
    public string Expression { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
}
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.Workflow : object {
    [CompilerGeneratedAttribute]
private string <WorkflowName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WorkflowsToInject>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleExpressionType <RuleExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ScopedParam> <GlobalParams>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Rule> <Rules>k__BackingField;
    public string WorkflowName { get; public set; }
    [ObsoleteAttribute("WorkflowRulesToInject is deprecated. Use WorkflowsToInject instead.")]
unknown IEnumerable`1<string> WorkflowRulesToInject {public set; }
    public IEnumerable`1<string> WorkflowsToInject { get; public set; }
    public RuleExpressionType RuleExpressionType { get; public set; }
    public IEnumerable`1<ScopedParam> GlobalParams { get; public set; }
    public IEnumerable`1<Rule> Rules { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WorkflowName();
    [CompilerGeneratedAttribute]
public void set_WorkflowName(string value);
    public void set_WorkflowRulesToInject(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_WorkflowsToInject();
    [CompilerGeneratedAttribute]
public void set_WorkflowsToInject(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public RuleExpressionType get_RuleExpressionType();
    [CompilerGeneratedAttribute]
public void set_RuleExpressionType(RuleExpressionType value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ScopedParam> get_GlobalParams();
    [CompilerGeneratedAttribute]
public void set_GlobalParams(IEnumerable`1<ScopedParam> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Rule> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(IEnumerable`1<Rule> value);
}
[ObsoleteAttribute("WorkflowRules class is deprecated. Use Workflow class instead.")]
[ExcludeFromCodeCoverageAttribute]
public class RulesEngine.Models.WorkflowRules : Workflow {
}
internal class RulesEngine.RuleCompiler : object {
    private ExpressionType[] nestedOperators;
    private RuleExpressionBuilderFactory _expressionBuilderFactory;
    private ReSettings _reSettings;
    internal RuleCompiler(RuleExpressionBuilderFactory expressionBuilderFactory, ReSettings reSettings);
    internal RuleFunc`1<RuleResultTree> CompileRule(Rule rule, RuleExpressionType ruleExpressionType, RuleParameter[] ruleParams, Lazy`1<RuleExpressionParameter[]> globalParams);
    private RuleFunc`1<RuleResultTree> GetDelegateForRule(Rule rule, RuleParameter[] ruleParams);
    internal RuleExpressionParameter[] GetRuleExpressionParameters(RuleExpressionType ruleExpressionType, IEnumerable`1<ScopedParam> localParams, RuleParameter[] ruleParams);
    private RuleFunc`1<RuleResultTree> BuildRuleFunc(Rule rule, RuleParameter[] ruleParams);
    private RuleFunc`1<RuleResultTree> BuildNestedRuleFunc(Rule parentRule, ExpressionType operation, RuleParameter[] ruleParams);
    private ValueTuple`2<bool, IEnumerable`1<RuleResultTree>> ApplyOperation(RuleParameter[] paramArray, IEnumerable`1<RuleFunc`1<RuleResultTree>> ruleFuncList, ExpressionType operation);
    internal Func`2<Object[], Dictionary`2<string, object>> CompileScopedParams(RuleExpressionType ruleExpressionType, RuleParameter[] ruleParameters, RuleExpressionParameter[] ruleExpParams);
    private RuleFunc`1<RuleResultTree> GetWrappedRuleFunc(Rule rule, RuleFunc`1<RuleResultTree> ruleFunc, RuleParameter[] ruleParameters, RuleExpressionParameter[] ruleExpParams);
    private RuleExpressionBuilderBase GetExpressionBuilder(RuleExpressionType expressionType);
}
internal class RulesEngine.RuleExpressionBuilderFactory : object {
    private ReSettings _reSettings;
    private LambdaExpressionBuilder _lambdaExpressionBuilder;
    public RuleExpressionBuilderFactory(ReSettings reSettings, RuleExpressionParser expressionParser);
    public RuleExpressionBuilderBase RuleGetExpressionBuilder(RuleExpressionType ruleExpressionType);
}
internal class RulesEngine.RulesCache : object {
    private MemCache _compileRules;
    private ConcurrentDictionary`2<string, ValueTuple`2<Workflow, long>> _workflow;
    public RulesCache(ReSettings reSettings);
    public bool ContainsWorkflows(string workflowName);
    public List`1<string> GetAllWorkflowNames();
    public void AddOrUpdateWorkflows(string workflowName, Workflow rules);
    public void AddOrUpdateCompiledRule(string compiledRuleKey, IDictionary`2<string, RuleFunc`1<RuleResultTree>> compiledRule);
    public bool AreCompiledRulesUpToDate(string compiledRuleKey, string workflowName);
    public void Clear();
    public Workflow GetWorkflow(string workflowName);
    public IDictionary`2<string, RuleFunc`1<RuleResultTree>> GetCompiledRules(string compiledRulesKey);
    public void Remove(string workflowName);
}
public class RulesEngine.RulesEngine : object {
    private ReSettings _reSettings;
    private RulesCache _rulesCache;
    private RuleExpressionParser _ruleExpressionParser;
    private RuleCompiler _ruleCompiler;
    private ActionFactory _actionFactory;
    private static string ParamParseRegex;
    public RulesEngine(String[] jsonConfig, ReSettings reSettings);
    public RulesEngine(Workflow[] Workflows, ReSettings reSettings);
    public RulesEngine(ReSettings reSettings);
    private IDictionary`2<string, Func`1<ActionBase>> GetActionRegistry(ReSettings reSettings);
    [AsyncStateMachineAttribute("RulesEngine.RulesEngine/<ExecuteAllRulesAsync>d__10")]
public sealed virtual ValueTask`1<List`1<RuleResultTree>> ExecuteAllRulesAsync(string workflowName, Object[] inputs);
    [AsyncStateMachineAttribute("RulesEngine.RulesEngine/<ExecuteAllRulesAsync>d__11")]
public sealed virtual ValueTask`1<List`1<RuleResultTree>> ExecuteAllRulesAsync(string workflowName, RuleParameter[] ruleParams);
    [AsyncStateMachineAttribute("RulesEngine.RulesEngine/<ExecuteActionAsync>d__12")]
private ValueTask ExecuteActionAsync(IEnumerable`1<RuleResultTree> ruleResultList);
    [AsyncStateMachineAttribute("RulesEngine.RulesEngine/<ExecuteActionWorkflowAsync>d__13")]
public sealed virtual ValueTask`1<ActionRuleResult> ExecuteActionWorkflowAsync(string workflowName, string ruleName, RuleParameter[] ruleParameters);
    [AsyncStateMachineAttribute("RulesEngine.RulesEngine/<ExecuteActionForRuleResult>d__14")]
private ValueTask`1<ActionRuleResult> ExecuteActionForRuleResult(RuleResultTree resultTree, bool includeRuleResults);
    public sealed virtual void AddWorkflow(Workflow[] workflows);
    public sealed virtual void AddOrUpdateWorkflow(Workflow[] workflows);
    public sealed virtual List`1<string> GetAllRegisteredWorkflowNames();
    public sealed virtual bool ContainsWorkflow(string workflowName);
    public sealed virtual void ClearWorkflows();
    public sealed virtual void RemoveWorkflow(String[] workflowNames);
    private List`1<RuleResultTree> ValidateWorkflowAndExecuteRule(string workflowName, RuleParameter[] ruleParams);
    private bool RegisterRule(string workflowName, RuleParameter[] ruleParams);
    private RuleFunc`1<RuleResultTree> CompileRule(string workflowName, string ruleName, RuleParameter[] ruleParameters);
    private RuleFunc`1<RuleResultTree> CompileRule(Rule rule, RuleExpressionType ruleExpressionType, RuleParameter[] ruleParams, Lazy`1<RuleExpressionParameter[]> scopedParams);
    private List`1<RuleResultTree> ExecuteAllRuleByWorkflow(string workflowName, RuleParameter[] ruleParameters);
    private string GetCompiledRulesKey(string workflowName, RuleParameter[] ruleParams);
    private IDictionary`2<string, Func`1<ActionBase>> GetDefaultActionRegistry();
    private IEnumerable`1<RuleResultTree> FormatErrorMessages(IEnumerable`1<RuleResultTree> ruleResultList);
    private static string UpdateErrorMessage(string errorMessage, IDictionary`2<string, object> inputs, string property, string typeName, string propertyName);
    [CompilerGeneratedAttribute]
private ActionBase <GetDefaultActionRegistry>b__27_0();
    [CompilerGeneratedAttribute]
private ActionBase <GetDefaultActionRegistry>b__27_1();
}
internal class RulesEngine.Validators.RuleValidator : AbstractValidator`1<Rule> {
    private List`1<ExpressionType> _nestedOperators;
    private void RegisterExpressionTypeRules();
    private bool BeValidRulesList(IEnumerable`1<Rule> rules);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_2();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1_4(string op);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_7();
    [CompilerGeneratedAttribute]
private void <RegisterExpressionTypeRules>b__2_1();
}
internal class RulesEngine.Validators.WorkflowsValidator : AbstractValidator`1<Workflow> {
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_3();
}
