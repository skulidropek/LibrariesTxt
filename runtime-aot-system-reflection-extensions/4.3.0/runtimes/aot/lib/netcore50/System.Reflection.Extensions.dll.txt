internal class __DynamicallyInvokableAttribute : Attribute {
}
internal static class FxResources.System.Reflection.Extensions.SR : object {
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
internal static class System.ArrayT`1 : object {
    public static void Copy(T[] sourceArray, int sourceIndex, T[] destinationArray, int destinationIndex, int length);
    public static T[] Resize(T[] src, int newLength, int copyCount);
    public static void Clear(T[] array, int index, int length);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.EnumerableExtensions : object {
    [IteratorStateMachineAttribute("System.Collections.Generic.EnumerableExtensions/<AsNothingButIEnumerable>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> AsNothingButIEnumerable(IEnumerable`1<T> en);
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.LowLevelDictionary`2 : object {
    private static int DefaultSize;
    private Entry[] _buckets;
    private int _numEntries;
    private int _version;
    private IEqualityComparer`1<TKey> _comparer;
    public int Count { get; }
    public TValue Item { get; public set; }
    public LowLevelDictionary`2(int capacity);
    public LowLevelDictionary`2(IEqualityComparer`1<TKey> comparer);
    public LowLevelDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public int get_Count();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& value);
    public void Add(TKey key, TValue value);
    public void Clear(int capacity);
    public bool Remove(TKey key);
    internal TValue LookupOrAdd(TKey key, TValue value);
    private Entry<TKey, TValue> Find(TKey key);
    private Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
    private void ExpandBuckets();
    private int GetBucket(TKey key, int numBuckets);
}
internal class System.Collections.Generic.LowLevelDictionaryWithIEnumerable`2 : LowLevelDictionary`2<TKey, TValue> {
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class System.Collections.Generic.LowLevelList`1 : object {
    private static int _defaultCapacity;
    protected T[] _items;
    protected int _size;
    protected int _version;
    private static T[] s_emptyArray;
    public int Capacity { get; public set; }
    public int Count { get; }
    public T Item { get; public set; }
    public LowLevelList`1(int capacity);
    public LowLevelList`1(IEnumerable`1<T> collection);
    private static LowLevelList`1();
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    private void EnsureCapacity(int min);
    public void AddRange(IEnumerable`1<T> collection);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public void CopyTo(int index, T[] array, int arrayIndex, int count);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int IndexOf(T item);
    public int IndexOf(T item, int index);
    public sealed virtual void Insert(int index, T item);
    public void InsertRange(int index, IEnumerable`1<T> collection);
    public sealed virtual bool Remove(T item);
    public int RemoveAll(Predicate`1<T> match);
    public sealed virtual void RemoveAt(int index);
    public T[] ToArray();
}
internal class System.Collections.Generic.LowLevelListWithIList`1 : LowLevelList`1<T> {
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public LowLevelListWithIList`1(int capacity);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Collections.HashHelpers : object {
    private static int HashPrime;
    public static Int32[] primes;
    public static int MaxPrimeArrayLength;
    private static HashHelpers();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int GetMinPrime();
    public static int ExpandPrime(int oldSize);
}
internal static class System.CommonRuntimeTypes : object {
    private static Type _object;
    private static Type _valuetype;
    private static Type _attribute;
    private static Type _string;
    private static Type _array;
    private static Type _enum;
    private static Type _boolean;
    private static Type _char;
    private static Type _byte;
    private static Type _sByte;
    private static Type _uInt16;
    private static Type _int16;
    private static Type _uInt32;
    private static Type _int32;
    private static Type _uInt64;
    private static Type _int64;
    private static Type _uIntPtr;
    private static Type _intPtr;
    private static Type _single;
    private static Type _double;
    private static Type _decimal;
    private static Type _datetime;
    private static Type _nullable;
    private static Type _void;
    internal static Type Object { get; }
    internal static Type ValueType { get; }
    internal static Type Attribute { get; }
    internal static Type String { get; }
    internal static Type Array { get; }
    internal static Type Enum { get; }
    internal static Type Boolean { get; }
    internal static Type Char { get; }
    internal static Type Byte { get; }
    internal static Type SByte { get; }
    internal static Type UInt16 { get; }
    internal static Type Int16 { get; }
    internal static Type UInt32 { get; }
    internal static Type Int32 { get; }
    internal static Type UInt64 { get; }
    internal static Type Int64 { get; }
    internal static Type UIntPtr { get; }
    internal static Type IntPtr { get; }
    internal static Type Single { get; }
    internal static Type Double { get; }
    internal static Type Decimal { get; }
    internal static Type DateTime { get; }
    internal static Type Nullable { get; }
    internal static Type Void { get; }
    private static CommonRuntimeTypes();
    internal static Type get_Object();
    internal static Type get_ValueType();
    internal static Type get_Attribute();
    internal static Type get_String();
    internal static Type get_Array();
    internal static Type get_Enum();
    internal static Type get_Boolean();
    internal static Type get_Char();
    internal static Type get_Byte();
    internal static Type get_SByte();
    internal static Type get_UInt16();
    internal static Type get_Int16();
    internal static Type get_UInt32();
    internal static Type get_Int32();
    internal static Type get_UInt64();
    internal static Type get_Int64();
    internal static Type get_UIntPtr();
    internal static Type get_IntPtr();
    internal static Type get_Single();
    internal static Type get_Double();
    internal static Type get_Decimal();
    internal static Type get_DateTime();
    internal static Type get_Nullable();
    internal static Type get_Void();
}
[ExtensionAttribute]
internal static class System.Linq.LowLevelEnumerable : object {
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<T> values, Func`2<T, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.LowLevelEnumerable/<Select>d__1`2")]
[ExtensionAttribute]
public static IEnumerable`1<U> Select(IEnumerable`1<T> values, Func`2<T, U> func);
    [ExtensionAttribute]
public static T[] ToArray(IEnumerable`1<T> values);
}
[ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static class System.Reflection.CustomAttributeExtensions : object {
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static Attribute GetCustomAttribute(Assembly element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static Attribute GetCustomAttribute(Module element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static Attribute GetCustomAttribute(ParameterInfo element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static Attribute GetCustomAttribute(ParameterInfo element, Type attributeType, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static T GetCustomAttribute(Assembly element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static T GetCustomAttribute(Module element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static T GetCustomAttribute(MemberInfo element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static T GetCustomAttribute(MemberInfo element, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static T GetCustomAttribute(ParameterInfo element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static T GetCustomAttribute(ParameterInfo element, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(Assembly element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(Module element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(MemberInfo element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(MemberInfo element, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(ParameterInfo element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(ParameterInfo element, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(Assembly element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(Module element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(MemberInfo element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(MemberInfo element, Type attributeType, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(ParameterInfo element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(ParameterInfo element, Type attributeType, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<T> GetCustomAttributes(Assembly element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<T> GetCustomAttributes(Module element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<T> GetCustomAttributes(MemberInfo element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<T> GetCustomAttributes(MemberInfo element, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<T> GetCustomAttributes(ParameterInfo element);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<T> GetCustomAttributes(ParameterInfo element, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static bool IsDefined(Assembly element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static bool IsDefined(Module element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static bool IsDefined(MemberInfo element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static bool IsDefined(ParameterInfo element, Type attributeType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static bool IsDefined(ParameterInfo element, Type attributeType, bool inherit);
    [ExtensionAttribute]
private static T OneOrNull(IEnumerable`1<CustomAttributeData> results);
    [ExtensionAttribute]
private static IEnumerable`1<Attribute> Instantiate(IEnumerable`1<CustomAttributeData> cads, Type actualElementType);
}
[ExtensionAttribute]
internal static class System.Reflection.CustomAttributeInheritanceRules : object {
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttributeData> GetMatchingCustomAttributes(Assembly element, Type optionalAttributeTypeFilter, bool skipTypeValidation);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttributeData> GetMatchingCustomAttributes(Module element, Type optionalAttributeTypeFilter, bool skipTypeValidation);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttributeData> GetMatchingCustomAttributes(ParameterInfo element, Type optionalAttributeTypeFilter, bool inherit, bool skipTypeValidation);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttributeData> GetMatchingCustomAttributes(MemberInfo element, Type optionalAttributeTypeFilter, bool inherit, bool skipTypeValidation);
}
internal abstract class System.Reflection.CustomAttributeSearcher`1 : object {
    public IEnumerable`1<CustomAttributeData> GetMatchingCustomAttributes(E element, Type optionalAttributeTypeFilter, bool inherit, bool skipTypeValidation);
    public virtual E GetParent(E e);
    [IteratorStateMachineAttribute("System.Reflection.CustomAttributeSearcher`1/<GetMatchingCustomAttributesIterator>d__1")]
private IEnumerable`1<CustomAttributeData> GetMatchingCustomAttributesIterator(E element, Func`2<Type, bool> rawPassesFilter, bool inherit);
    private AttributeUsageAttribute GetAttributeUsage(Type attributeType);
    protected abstract virtual IEnumerable`1<CustomAttributeData> GetDeclaredCustomAttributes(E element);
}
[__DynamicallyInvokableAttribute]
public class System.Reflection.InterfaceMapping : ValueType {
    [__DynamicallyInvokableAttribute]
public MethodInfo[] InterfaceMethods;
    [__DynamicallyInvokableAttribute]
public MethodInfo[] TargetMethods;
    [__DynamicallyInvokableAttribute]
public Type InterfaceType;
    [__DynamicallyInvokableAttribute]
public Type TargetType;
    internal InterfaceMapping(MethodInfo[] interfaceMethods, MethodInfo[] targetMethods, Type interfaceType, Type targetType);
}
[ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static class System.Reflection.RuntimeReflectionExtensions : object {
    private static BindingFlags defaultPublicFlags;
    private static BindingFlags defaultNonPublicFlags;
    private static RuntimeReflectionExtensions();
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<FieldInfo> GetRuntimeFields(Type type);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<MethodInfo> GetRuntimeMethods(Type type);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<PropertyInfo> GetRuntimeProperties(Type type);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static IEnumerable`1<EventInfo> GetRuntimeEvents(Type type);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static FieldInfo GetRuntimeField(Type type, string name);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static MethodInfo GetRuntimeMethod(Type type, string name, Type[] parameters);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static PropertyInfo GetRuntimeProperty(Type type, string name);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static EventInfo GetRuntimeEvent(Type type, string name);
    [ExtensionAttribute]
private static M MostDerived(IEnumerable`1<M> members);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static MethodInfo GetRuntimeBaseDefinition(MethodInfo method);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static InterfaceMapping GetRuntimeInterfaceMap(TypeInfo typeInfo, Type interfaceType);
    [ExtensionAttribute]
[__DynamicallyInvokableAttribute]
public static MethodInfo GetMethodInfo(Delegate del);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_HTCapacityOverflow { get; }
    internal static string Argument_AddingDuplicate { get; }
    internal static string Argument_MustHaveAttributeBaseClass { get; }
    internal static string PlatformNotSupported_InterfaceMap { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_HTCapacityOverflow();
    internal static string get_Argument_AddingDuplicate();
    internal static string get_Argument_MustHaveAttributeBaseClass();
    internal static string get_PlatformNotSupported_InterfaceMap();
    internal static Type get_ResourceType();
}
