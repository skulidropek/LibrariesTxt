internal static class FxResources.System.Diagnostics.TextWriterTraceListener.SR : object {
}
public class System.Diagnostics.DelimitedListTraceListener : TextWriterTraceListener {
    private string _delimiter;
    private string _secondaryDelim;
    public string Delimiter { get; public set; }
    public DelimitedListTraceListener(Stream stream);
    public DelimitedListTraceListener(Stream stream, string name);
    public DelimitedListTraceListener(TextWriter writer);
    public DelimitedListTraceListener(TextWriter writer, string name);
    public DelimitedListTraceListener(string fileName);
    public DelimitedListTraceListener(string fileName, string name);
    public string get_Delimiter();
    public void set_Delimiter(string value);
    protected virtual String[] GetSupportedAttributes();
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    private void WriteHeader(string source, TraceEventType eventType, int id);
    private void WriteFooter(TraceEventCache eventCache);
    private void WriteEscaped(string message);
    private void WriteStackEscaped(Stack stack);
    private void EscapeMessage(string message, StringBuilder sb);
    private bool IsEnabled(TraceOptions opts);
}
public class System.Diagnostics.TextWriterTraceListener : TraceListener {
    internal TextWriter _writer;
    private string _fileName;
    public TextWriter Writer { get; public set; }
    public TextWriterTraceListener(Stream stream);
    public TextWriterTraceListener(Stream stream, string name);
    public TextWriterTraceListener(TextWriter writer);
    public TextWriterTraceListener(TextWriter writer, string name);
    public TextWriterTraceListener(string fileName);
    public TextWriterTraceListener(string fileName, string name);
    public TextWriter get_Writer();
    public void set_Writer(TextWriter value);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string Generic_ArgCantBeEmptyString { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_Generic_ArgCantBeEmptyString();
}
