internal static class FxResources.System.Net.ServicePoint.SR : object {
}
public class System.Net.BindIPEndPoint : MulticastDelegate {
    public BindIPEndPoint(object object, IntPtr method);
    public virtual IPEndPoint Invoke(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount);
    public virtual IAsyncResult BeginInvoke(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount, AsyncCallback callback, object object);
    public virtual IPEndPoint EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Net.SecurityProtocolType : Enum {
    public int value__;
    public static SecurityProtocolType SystemDefault;
    public static SecurityProtocolType Ssl3;
    public static SecurityProtocolType Tls;
    public static SecurityProtocolType Tls11;
    public static SecurityProtocolType Tls12;
}
public class System.Net.ServicePoint : object {
    private int _connectionLeaseTimeout;
    private int _maxIdleTime;
    private int _receiveBufferSize;
    private int _connectionLimit;
    [CompilerGeneratedAttribute]
private BindIPEndPoint <BindIPEndPointDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNagleAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expect100Continue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <IdleSince>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsPipelining>k__BackingField;
    public BindIPEndPoint BindIPEndPointDelegate { get; public set; }
    public int ConnectionLeaseTimeout { get; public set; }
    public Uri Address { get; }
    public int MaxIdleTime { get; public set; }
    public bool UseNagleAlgorithm { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public bool Expect100Continue { get; public set; }
    public DateTime IdleSince { get; internal set; }
    public Version ProtocolVersion { get; }
    public string ConnectionName { get; }
    public int ConnectionLimit { get; public set; }
    public int CurrentConnections { get; }
    public X509Certificate Certificate { get; }
    public X509Certificate ClientCertificate { get; }
    public bool SupportsPipelining { get; }
    internal ServicePoint(Uri address);
    [CompilerGeneratedAttribute]
public BindIPEndPoint get_BindIPEndPointDelegate();
    [CompilerGeneratedAttribute]
public void set_BindIPEndPointDelegate(BindIPEndPoint value);
    public int get_ConnectionLeaseTimeout();
    public void set_ConnectionLeaseTimeout(int value);
    [CompilerGeneratedAttribute]
public Uri get_Address();
    public int get_MaxIdleTime();
    public void set_MaxIdleTime(int value);
    [CompilerGeneratedAttribute]
public bool get_UseNagleAlgorithm();
    [CompilerGeneratedAttribute]
public void set_UseNagleAlgorithm(bool value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    [CompilerGeneratedAttribute]
public bool get_Expect100Continue();
    [CompilerGeneratedAttribute]
public void set_Expect100Continue(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_IdleSince();
    [CompilerGeneratedAttribute]
internal void set_IdleSince(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Version get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public string get_ConnectionName();
    public bool CloseConnectionGroup(string connectionGroupName);
    public int get_ConnectionLimit();
    public void set_ConnectionLimit(int value);
    public int get_CurrentConnections();
    [CompilerGeneratedAttribute]
public X509Certificate get_Certificate();
    [CompilerGeneratedAttribute]
public X509Certificate get_ClientCertificate();
    [CompilerGeneratedAttribute]
public bool get_SupportsPipelining();
    public void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);
}
public class System.Net.ServicePointManager : object {
    public static int DefaultNonPersistentConnectionLimit;
    public static int DefaultPersistentConnectionLimit;
    private static ConcurrentDictionary`2<string, WeakReference`1<ServicePoint>> s_servicePointTable;
    private static SecurityProtocolType s_securityProtocolType;
    private static int s_connectionLimit;
    private static int s_maxServicePoints;
    private static int s_maxServicePointIdleTime;
    private static int s_dnsRefreshTimeout;
    [CompilerGeneratedAttribute]
private static bool <UseNagleAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <Expect100Continue>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EnableDnsRoundRobin>k__BackingField;
    [CompilerGeneratedAttribute]
private static RemoteCertificateValidationCallback <ServerCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ReusePort>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <CheckCertificateRevocationList>k__BackingField;
    [CompilerGeneratedAttribute]
private static EncryptionPolicy <EncryptionPolicy>k__BackingField;
    public static SecurityProtocolType SecurityProtocol { get; public set; }
    public static int MaxServicePoints { get; public set; }
    public static int DefaultConnectionLimit { get; public set; }
    public static int MaxServicePointIdleTime { get; public set; }
    public static bool UseNagleAlgorithm { get; public set; }
    public static bool Expect100Continue { get; public set; }
    public static bool EnableDnsRoundRobin { get; public set; }
    public static int DnsRefreshTimeout { get; public set; }
    public static RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    public static bool ReusePort { get; public set; }
    public static bool CheckCertificateRevocationList { get; public set; }
    public static EncryptionPolicy EncryptionPolicy { get; }
    private static ServicePointManager();
    public static SecurityProtocolType get_SecurityProtocol();
    public static void set_SecurityProtocol(SecurityProtocolType value);
    private static void ValidateSecurityProtocol(SecurityProtocolType value);
    public static int get_MaxServicePoints();
    public static void set_MaxServicePoints(int value);
    public static int get_DefaultConnectionLimit();
    public static void set_DefaultConnectionLimit(int value);
    public static int get_MaxServicePointIdleTime();
    public static void set_MaxServicePointIdleTime(int value);
    [CompilerGeneratedAttribute]
public static bool get_UseNagleAlgorithm();
    [CompilerGeneratedAttribute]
public static void set_UseNagleAlgorithm(bool value);
    [CompilerGeneratedAttribute]
public static bool get_Expect100Continue();
    [CompilerGeneratedAttribute]
public static void set_Expect100Continue(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EnableDnsRoundRobin();
    [CompilerGeneratedAttribute]
public static void set_EnableDnsRoundRobin(bool value);
    public static int get_DnsRefreshTimeout();
    public static void set_DnsRefreshTimeout(int value);
    [CompilerGeneratedAttribute]
public static RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public static void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public static bool get_ReusePort();
    [CompilerGeneratedAttribute]
public static void set_ReusePort(bool value);
    [CompilerGeneratedAttribute]
public static bool get_CheckCertificateRevocationList();
    [CompilerGeneratedAttribute]
public static void set_CheckCertificateRevocationList(bool value);
    [CompilerGeneratedAttribute]
public static EncryptionPolicy get_EncryptionPolicy();
    public static ServicePoint FindServicePoint(Uri address);
    public static ServicePoint FindServicePoint(string uriString, IWebProxy proxy);
    public static ServicePoint FindServicePoint(Uri address, IWebProxy proxy);
    private static bool ProxyAddressIfNecessary(Uri& address, IWebProxy proxy);
    private static string MakeQueryString(Uri address);
    private static string MakeQueryString(Uri address, bool isProxy);
    public static void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_proxyschemenotsupported { get; }
    internal static string net_securityprotocolnotsupported { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_proxyschemenotsupported();
    internal static string get_net_securityprotocolnotsupported();
}
