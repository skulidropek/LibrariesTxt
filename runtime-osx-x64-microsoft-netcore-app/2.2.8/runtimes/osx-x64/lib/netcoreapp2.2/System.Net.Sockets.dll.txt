internal static class FxResources.System.Net.Sockets.SR : object {
}
internal static class Interop : object {
}
internal class System.Net.CallbackClosure : object {
    private AsyncCallback _savedCallback;
    private ExecutionContext _savedContext;
    internal AsyncCallback AsyncCallback { get; }
    internal ExecutionContext Context { get; }
    internal CallbackClosure(ExecutionContext context, AsyncCallback callback);
    internal bool IsCompatible(AsyncCallback callback);
    internal AsyncCallback get_AsyncCallback();
    internal ExecutionContext get_Context();
}
internal class System.Net.ContextAwareResult : LazyAsyncResult {
    private ExecutionContext modreq(System.Runtime.CompilerServices.IsVolatile) _context;
    private object _lock;
    private StateFlags _flags;
    internal EndPoint RemoteEndPoint { get; }
    internal ContextAwareResult(object myObject, object myState, AsyncCallback myCallBack);
    internal ContextAwareResult(bool captureIdentity, bool forceCaptureContext, object myObject, object myState, AsyncCallback myCallBack);
    internal ContextAwareResult(bool captureIdentity, bool forceCaptureContext, bool threadSafeContextCopy, object myObject, object myState, AsyncCallback myCallBack);
    internal object StartPostingAsyncOp(bool lockCapture);
    internal bool FinishPostingAsyncOp();
    internal bool FinishPostingAsyncOp(CallbackClosure& closure);
    protected virtual void Cleanup();
    private bool CaptureOrComplete(ExecutionContext& cachedContext, bool returnContext);
    protected virtual void Complete(IntPtr userToken);
    private void CompleteCallback();
    internal virtual EndPoint get_RemoteEndPoint();
    private void SafeCaptureIdentity();
    private void CleanupInternal();
}
internal static class System.Net.ExceptionCheck : object {
    internal static bool IsFatal(Exception exception);
}
internal class System.Net.InternalException : Exception {
}
[DefaultMemberAttribute("Item")]
internal class System.Net.Internals.SocketAddress : object {
    internal static int IPv6AddressSize;
    internal static int IPv4AddressSize;
    internal int InternalSize;
    internal Byte[] Buffer;
    private bool _changed;
    private int _hash;
    public AddressFamily Family { get; }
    public int Size { get; }
    public byte Item { get; public set; }
    public SocketAddress(AddressFamily family, int size);
    internal SocketAddress(IPAddress ipAddress);
    internal SocketAddress(IPAddress ipaddress, int port);
    private static SocketAddress();
    public AddressFamily get_Family();
    public int get_Size();
    public byte get_Item(int offset);
    public void set_Item(int offset, byte value);
    internal IPAddress GetIPAddress();
    internal IPEndPoint GetIPEndPoint();
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class System.Net.Internals.SocketExceptionFactory : object {
    public static SocketException CreateSocketException(int socketError, EndPoint endPoint);
}
[ExtensionAttribute]
internal static class System.Net.InteropIPAddressExtensions : object {
    [ExtensionAttribute]
public static IPAddress GetNativeIPAddress(IPAddress ipAddress);
    [ExtensionAttribute]
public static IPAddress GetIPAddress(IPAddress nativeIPAddress);
}
internal static class System.Net.IPEndPointStatics : object {
    internal static IPEndPoint Any;
    internal static IPEndPoint IPv6Any;
    private static IPEndPointStatics();
}
internal class System.Net.LazyAsyncResult : object {
    [ThreadStaticAttribute]
private static ThreadContext t_threadContext;
    private object _asyncObject;
    private object _asyncState;
    private AsyncCallback _asyncCallback;
    private object _result;
    private int _errorCode;
    private int _intCompleted;
    private bool _endCalled;
    private bool _userEvent;
    private object _event;
    private static ThreadContext CurrentThreadContext { get; }
    internal object AsyncObject { get; }
    public object AsyncState { get; }
    protected AsyncCallback AsyncCallback { get; protected set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    internal bool InternalPeekCompleted { get; }
    internal object Result { get; }
    internal bool EndCalled { get; internal set; }
    internal int ErrorCode { get; internal set; }
    internal LazyAsyncResult(object myObject, object myState, AsyncCallback myCallBack);
    private static ThreadContext get_CurrentThreadContext();
    internal object get_AsyncObject();
    public sealed virtual object get_AsyncState();
    protected AsyncCallback get_AsyncCallback();
    protected void set_AsyncCallback(AsyncCallback value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    private bool LazilyCreateEvent(ManualResetEvent& waitHandle);
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    internal bool get_InternalPeekCompleted();
    internal object get_Result();
    internal bool get_EndCalled();
    internal void set_EndCalled(bool value);
    internal int get_ErrorCode();
    internal void set_ErrorCode(int value);
    protected void ProtectedInvokeCallback(object result, IntPtr userToken);
    internal void InvokeCallback(object result);
    internal void InvokeCallback();
    protected virtual void Complete(IntPtr userToken);
    private static void WorkerThreadComplete(object state);
    protected virtual void Cleanup();
    internal object InternalWaitForCompletion();
    private object WaitForCompletion(bool snap);
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Accepted(Socket socket, object remoteEp, object localEp);
    [EventAttribute("17")]
private void Accepted(string remoteEp, string localEp, int socketHash);
    [NonEventAttribute]
public static void Connected(Socket socket, object localEp, object remoteEp);
    [EventAttribute("18")]
private void Connected(string localEp, string remoteEp, int socketHash);
    [NonEventAttribute]
public static void ConnectedAsyncDns(Socket socket);
    [EventAttribute("19")]
private void ConnectedAsyncDns(int socketHash);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Memory`1<byte> buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
}
internal static class System.Net.RangeValidationHelpers : object {
    public static bool ValidateRange(int actual, int fromAllowed, int toAllowed);
    public static void ValidateSegment(ArraySegment`1<byte> segment);
}
internal static class System.Net.SocketAddressPal : object {
    public static int IPv6AddressSize;
    public static int IPv4AddressSize;
    private static SocketAddressPal();
    private static int GetIPv6AddressSize();
    private static int GetIPv4AddressSize();
    private static void ThrowOnFailure(Error err);
    public static AddressFamily GetAddressFamily(Byte[] buffer);
    public static void SetAddressFamily(Byte[] buffer, AddressFamily family);
    public static ushort GetPort(Byte[] buffer);
    public static void SetPort(Byte[] buffer, ushort port);
    public static UInt32 GetIPv4Address(ReadOnlySpan`1<byte> buffer);
    public static void GetIPv6Address(ReadOnlySpan`1<byte> buffer, Span`1<byte> address, UInt32& scope);
    public static void SetIPv4Address(Byte[] buffer, UInt32 address);
    public static void SetIPv6Address(Byte[] buffer, Span`1<byte> address, UInt32 scope);
    public static void SetIPv6Address(Byte[] buffer, Byte* address, int addressLength, UInt32 scope);
}
internal class System.Net.SocketProtocolSupportPal : object {
    private static bool s_ipv4;
    private static bool s_ipv6;
    private static bool s_initialized;
    private static object s_initializedLock;
    public static bool OSSupportsIPv6 { get; }
    public static bool OSSupportsIPv4 { get; }
    private static SocketProtocolSupportPal();
    public static bool get_OSSupportsIPv6();
    public static bool get_OSSupportsIPv4();
    private static void EnsureInitialized();
    private static bool IsProtocolSupported(AddressFamily af);
}
internal class System.Net.Sockets.AcceptOverlappedAsyncResult : BaseOverlappedAsyncResult {
    private Socket _listenSocket;
    private Byte[] _buffer;
    private Socket _acceptedSocket;
    internal Byte[] Buffer { get; }
    internal int BytesTransferred { get; }
    unknown Socket AcceptSocket {internal set; }
    internal AcceptOverlappedAsyncResult(Socket listenSocket, object asyncState, AsyncCallback asyncCallback);
    internal Byte[] get_Buffer();
    internal int get_BytesTransferred();
    internal void set_AcceptSocket(Socket value);
    public void CompletionCallback(IntPtr acceptedFileDescriptor, Byte[] socketAddress, int socketAddressLen, SocketError errorCode);
    internal virtual object PostCompletion(int numBytes);
}
internal class System.Net.Sockets.BaseOverlappedAsyncResult : ContextAwareResult {
    private static object s_resultObjectSentinel;
    internal int _numBytes;
    public BaseOverlappedAsyncResult(Socket socket, object asyncState, AsyncCallback asyncCallback);
    private static BaseOverlappedAsyncResult();
    internal virtual object PostCompletion(int numBytes);
    internal int InternalWaitForCompletionInt32Result();
    protected void CompletionCallback(int numBytes, SocketError errorCode);
}
internal class System.Net.Sockets.ConnectOverlappedAsyncResult : BaseOverlappedAsyncResult {
    private EndPoint _endPoint;
    internal EndPoint RemoteEndPoint { get; }
    internal ConnectOverlappedAsyncResult(Socket socket, EndPoint endPoint, object asyncState, AsyncCallback asyncCallback);
    internal virtual EndPoint get_RemoteEndPoint();
    public void CompletionCallback(SocketError errorCode);
    internal virtual object PostCompletion(int numBytes);
}
internal class System.Net.Sockets.DisconnectOverlappedAsyncResult : BaseOverlappedAsyncResult {
    internal DisconnectOverlappedAsyncResult(Socket socket, object asyncState, AsyncCallback asyncCallback);
    internal virtual object PostCompletion(int numBytes);
    internal void PostCompletion(SocketError errorCode);
}
internal class System.Net.Sockets.DualSocketMultipleConnectAsync : MultipleConnectAsync {
    private Socket _socket4;
    private Socket _socket6;
    public DualSocketMultipleConnectAsync(SocketType socketType, ProtocolType protocolType);
    protected virtual IPAddress GetNextAddress(Socket& attemptSocket);
    protected virtual void OnSucceed();
    protected virtual void OnFail(bool abortive);
}
public enum System.Net.Sockets.IOControlCode : Enum {
    public long value__;
    public static IOControlCode AsyncIO;
    public static IOControlCode NonBlockingIO;
    public static IOControlCode DataToRead;
    public static IOControlCode OobDataRead;
    public static IOControlCode AssociateHandle;
    public static IOControlCode EnableCircularQueuing;
    public static IOControlCode Flush;
    public static IOControlCode GetBroadcastAddress;
    public static IOControlCode GetExtensionFunctionPointer;
    public static IOControlCode GetQos;
    public static IOControlCode GetGroupQos;
    public static IOControlCode MultipointLoopback;
    public static IOControlCode MulticastScope;
    public static IOControlCode SetQos;
    public static IOControlCode SetGroupQos;
    public static IOControlCode TranslateHandle;
    public static IOControlCode RoutingInterfaceQuery;
    public static IOControlCode RoutingInterfaceChange;
    public static IOControlCode AddressListQuery;
    public static IOControlCode AddressListChange;
    public static IOControlCode QueryTargetPnpHandle;
    public static IOControlCode NamespaceChange;
    public static IOControlCode AddressListSort;
    public static IOControlCode ReceiveAll;
    public static IOControlCode ReceiveAllMulticast;
    public static IOControlCode ReceiveAllIgmpMulticast;
    public static IOControlCode KeepAliveValues;
    public static IOControlCode AbsorbRouterAlert;
    public static IOControlCode UnicastInterface;
    public static IOControlCode LimitBroadcasts;
    public static IOControlCode BindToInterface;
    public static IOControlCode MulticastInterface;
    public static IOControlCode AddMulticastGroupOnInterface;
    public static IOControlCode DeleteMulticastGroupFromInterface;
}
[ExtensionAttribute]
internal static class System.Net.Sockets.IPAddressExtensions : object {
    [ExtensionAttribute]
public static IPAddress Snapshot(IPAddress original);
}
[ExtensionAttribute]
internal static class System.Net.Sockets.IPEndPointExtensions : object {
    public static SocketAddress Serialize(EndPoint endpoint);
    [ExtensionAttribute]
public static EndPoint Create(EndPoint thisObj, SocketAddress socketAddress);
    [ExtensionAttribute]
internal static IPEndPoint Snapshot(IPEndPoint thisObj);
    private static SocketAddress GetInternalSocketAddress(SocketAddress address);
    private static SocketAddress GetNetSocketAddress(SocketAddress address);
}
public class System.Net.Sockets.IPPacketInformation : ValueType {
    private IPAddress _address;
    private int _networkInterface;
    public IPAddress Address { get; }
    public int Interface { get; }
    internal IPPacketInformation(IPAddress address, int networkInterface);
    public IPAddress get_Address();
    public int get_Interface();
    public static bool op_Equality(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2);
    public static bool op_Inequality(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
}
public enum System.Net.Sockets.IPProtectionLevel : Enum {
    public int value__;
    public static IPProtectionLevel Unspecified;
    public static IPProtectionLevel Unrestricted;
    public static IPProtectionLevel EdgeRestricted;
    public static IPProtectionLevel Restricted;
}
public class System.Net.Sockets.IPv6MulticastOption : object {
    private IPAddress _group;
    private long _interface;
    public IPAddress Group { get; public set; }
    public long InterfaceIndex { get; public set; }
    public IPv6MulticastOption(IPAddress group, long ifindex);
    public IPv6MulticastOption(IPAddress group);
    public IPAddress get_Group();
    public void set_Group(IPAddress value);
    public long get_InterfaceIndex();
    public void set_InterfaceIndex(long value);
}
public class System.Net.Sockets.LingerOption : object {
    private bool _enabled;
    private int _lingerTime;
    public bool Enabled { get; public set; }
    public int LingerTime { get; public set; }
    public LingerOption(bool enable, int seconds);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_LingerTime();
    public void set_LingerTime(int value);
}
public class System.Net.Sockets.MulticastOption : object {
    private IPAddress _group;
    private IPAddress _localAddress;
    private int _ifIndex;
    public IPAddress Group { get; public set; }
    public IPAddress LocalAddress { get; public set; }
    public int InterfaceIndex { get; public set; }
    public MulticastOption(IPAddress group, IPAddress mcint);
    public MulticastOption(IPAddress group, int interfaceIndex);
    public MulticastOption(IPAddress group);
    public IPAddress get_Group();
    public void set_Group(IPAddress value);
    public IPAddress get_LocalAddress();
    public void set_LocalAddress(IPAddress value);
    public int get_InterfaceIndex();
    public void set_InterfaceIndex(int value);
}
internal abstract class System.Net.Sockets.MultipleConnectAsync : object {
    protected SocketAsyncEventArgs _userArgs;
    protected SocketAsyncEventArgs _internalArgs;
    protected DnsEndPoint _endPoint;
    protected IPAddress[] _addressList;
    protected int _nextAddress;
    private State _state;
    private object _lockObject;
    public bool StartConnectAsync(SocketAsyncEventArgs args, DnsEndPoint endPoint);
    private void DnsCallback(IAsyncResult result);
    private bool DoDnsCallback(IAsyncResult result, bool sync);
    private void InternalConnectCallback(object sender, SocketAsyncEventArgs args);
    private Exception AttemptConnection();
    private Exception AttemptConnection(Socket attemptSocket, SocketAsyncEventArgs args);
    protected abstract virtual void OnSucceed();
    private void Succeed();
    protected abstract virtual void OnFail(bool abortive);
    private bool Fail(bool sync, Exception e);
    private void SyncFail(Exception e);
    private void AsyncFail(Exception e);
    public void Cancel();
    private void CallAsyncFail(object ignored);
    protected abstract virtual IPAddress GetNextAddress(Socket& attemptSocket);
    [CompilerGeneratedAttribute]
private void <Cancel>b__20_0(object s);
}
public class System.Net.Sockets.NetworkStream : Stream {
    private Socket _streamSocket;
    private bool _ownsSocket;
    private bool _readable;
    private bool _writeable;
    private int _closeTimeout;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _cleanedUp;
    private int _currentReadTimeout;
    private int _currentWriteTimeout;
    protected Socket Socket { get; }
    protected bool Readable { get; protected set; }
    protected bool Writeable { get; protected set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public bool DataAvailable { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NetworkStream(Socket socket);
    public NetworkStream(Socket socket, bool ownsSocket);
    public NetworkStream(Socket socket, FileAccess access);
    public NetworkStream(Socket socket, FileAccess access, bool ownsSocket);
    protected Socket get_Socket();
    protected bool get_Readable();
    protected void set_Readable(bool value);
    protected bool get_Writeable();
    protected void set_Writeable(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual bool get_DataAvailable();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int size);
    public virtual int Read(Span`1<byte> destination);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int size);
    public virtual void Write(ReadOnlySpan`1<byte> source);
    public virtual void WriteByte(byte value);
    public void Close(int timeout);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int size, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int size, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int size, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int size, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    internal void SetSocketTimeoutOption(SocketShutdown mode, int timeout, bool silent);
}
internal class System.Net.Sockets.OriginalAddressOverlappedAsyncResult : OverlappedAsyncResult {
    [CompilerGeneratedAttribute]
private SocketAddress <SocketAddressOriginal>k__BackingField;
    internal SocketAddress SocketAddressOriginal { get; internal set; }
    internal OriginalAddressOverlappedAsyncResult(Socket socket, object asyncState, AsyncCallback asyncCallback);
    [CompilerGeneratedAttribute]
internal SocketAddress get_SocketAddressOriginal();
    [CompilerGeneratedAttribute]
internal void set_SocketAddressOriginal(SocketAddress value);
}
internal class System.Net.Sockets.OverlappedAsyncResult : BaseOverlappedAsyncResult {
    private SocketAddress _socketAddress;
    private int _socketAddressSize;
    internal SocketAddress SocketAddress { get; internal set; }
    internal OverlappedAsyncResult(Socket socket, object asyncState, AsyncCallback asyncCallback);
    internal SocketAddress get_SocketAddress();
    internal void set_SocketAddress(SocketAddress value);
    internal int GetSocketAddressSize();
    public void CompletionCallback(int numBytes, Byte[] socketAddress, int socketAddressSize, SocketFlags receivedFlags, SocketError errorCode);
}
public enum System.Net.Sockets.ProtocolFamily : Enum {
    public int value__;
    public static ProtocolFamily Unknown;
    public static ProtocolFamily Unspecified;
    public static ProtocolFamily Unix;
    public static ProtocolFamily InterNetwork;
    public static ProtocolFamily ImpLink;
    public static ProtocolFamily Pup;
    public static ProtocolFamily Chaos;
    public static ProtocolFamily NS;
    public static ProtocolFamily Ipx;
    public static ProtocolFamily Iso;
    public static ProtocolFamily Osi;
    public static ProtocolFamily Ecma;
    public static ProtocolFamily DataKit;
    public static ProtocolFamily Ccitt;
    public static ProtocolFamily Sna;
    public static ProtocolFamily DecNet;
    public static ProtocolFamily DataLink;
    public static ProtocolFamily Lat;
    public static ProtocolFamily HyperChannel;
    public static ProtocolFamily AppleTalk;
    public static ProtocolFamily NetBios;
    public static ProtocolFamily VoiceView;
    public static ProtocolFamily FireFox;
    public static ProtocolFamily Banyan;
    public static ProtocolFamily Atm;
    public static ProtocolFamily InterNetworkV6;
    public static ProtocolFamily Cluster;
    public static ProtocolFamily Ieee12844;
    public static ProtocolFamily Irda;
    public static ProtocolFamily NetworkDesigners;
    public static ProtocolFamily Max;
}
public enum System.Net.Sockets.ProtocolType : Enum {
    public int value__;
    public static ProtocolType IP;
    public static ProtocolType IPv6HopByHopOptions;
    public static ProtocolType Icmp;
    public static ProtocolType Igmp;
    public static ProtocolType Ggp;
    public static ProtocolType IPv4;
    public static ProtocolType Tcp;
    public static ProtocolType Pup;
    public static ProtocolType Udp;
    public static ProtocolType Idp;
    public static ProtocolType IPv6;
    public static ProtocolType IPv6RoutingHeader;
    public static ProtocolType IPv6FragmentHeader;
    public static ProtocolType IPSecEncapsulatingSecurityPayload;
    public static ProtocolType IPSecAuthenticationHeader;
    public static ProtocolType IcmpV6;
    public static ProtocolType IPv6NoNextHeader;
    public static ProtocolType IPv6DestinationOptions;
    public static ProtocolType ND;
    public static ProtocolType Raw;
    public static ProtocolType Unspecified;
    public static ProtocolType Ipx;
    public static ProtocolType Spx;
    public static ProtocolType SpxII;
    public static ProtocolType Unknown;
}
internal class System.Net.Sockets.ReceiveMessageOverlappedAsyncResult : BaseOverlappedAsyncResult {
    private SocketAddress _socketAddressOriginal;
    private SocketAddress _socketAddress;
    private SocketFlags _socketFlags;
    private IPPacketInformation _ipPacketInformation;
    private int _socketAddressSize;
    internal SocketAddress SocketAddress { get; internal set; }
    internal SocketAddress SocketAddressOriginal { get; internal set; }
    internal SocketFlags SocketFlags { get; }
    internal IPPacketInformation IPPacketInformation { get; }
    internal ReceiveMessageOverlappedAsyncResult(Socket socket, object asyncState, AsyncCallback asyncCallback);
    internal SocketAddress get_SocketAddress();
    internal void set_SocketAddress(SocketAddress value);
    internal SocketAddress get_SocketAddressOriginal();
    internal void set_SocketAddressOriginal(SocketAddress value);
    internal SocketFlags get_SocketFlags();
    internal IPPacketInformation get_IPPacketInformation();
    internal int GetSocketAddressSize();
    public void CompletionCallback(int numBytes, Byte[] socketAddress, int socketAddressSize, SocketFlags receivedFlags, IPPacketInformation ipPacketInformation, SocketError errorCode);
}
internal class System.Net.Sockets.SafeCloseSocket : SafeHandleMinusOneIsInvalid {
    private InnerSafeCloseSocket _innerSocket;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _released;
    private int _receiveTimeout;
    private int _sendTimeout;
    private bool _nonBlocking;
    private bool _underlyingHandleNonBlocking;
    private SocketAsyncContext _asyncContext;
    private TrackedSocketOptions _trackedOptions;
    [CompilerGeneratedAttribute]
private bool <LastConnectFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DualMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExposedHandleOrUntrackedConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisconnected>k__BackingField;
    public bool IsInvalid { get; }
    internal bool LastConnectFailed { get; internal set; }
    internal bool DualMode { get; internal set; }
    internal bool ExposedHandleOrUntrackedConfiguration { get; private set; }
    public SocketAsyncContext AsyncContext { get; }
    public bool IsNonBlocking { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public bool IsDisconnected { get; private set; }
    public virtual bool get_IsInvalid();
    private void SetInnerSocket(InnerSafeCloseSocket socket);
    private static SafeCloseSocket CreateSocket(InnerSafeCloseSocket socket);
    protected static void CreateSocket(InnerSafeCloseSocket socket, SafeCloseSocket target);
    protected virtual bool ReleaseHandle();
    internal void CloseAsIs();
    [CompilerGeneratedAttribute]
internal bool get_LastConnectFailed();
    [CompilerGeneratedAttribute]
internal void set_LastConnectFailed(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DualMode();
    [CompilerGeneratedAttribute]
internal void set_DualMode(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ExposedHandleOrUntrackedConfiguration();
    [CompilerGeneratedAttribute]
private void set_ExposedHandleOrUntrackedConfiguration(bool value);
    public void RegisterConnectResult(SocketError error);
    public void TransferTrackedState(SafeCloseSocket target);
    public void SetExposed();
    public bool IsTrackedOption(TrackedSocketOptions option);
    public void TrackOption(SocketOptionLevel level, SocketOptionName name);
    public SocketAsyncContext get_AsyncContext();
    private void SetHandleNonBlocking();
    public bool get_IsNonBlocking();
    public void set_IsNonBlocking(bool value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDisconnected();
    [CompilerGeneratedAttribute]
private void set_IsDisconnected(bool value);
    public void SetToDisconnected();
    public static SafeCloseSocket CreateSocket(IntPtr fileDescriptor);
    public static SocketError CreateSocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType, SafeCloseSocket& socket);
    public static SocketError Accept(SafeCloseSocket socketHandle, Byte[] socketAddress, Int32& socketAddressSize, SafeCloseSocket& socket);
    private void InnerReleaseHandle();
}
public enum System.Net.Sockets.SelectMode : Enum {
    public int value__;
    public static SelectMode SelectRead;
    public static SelectMode SelectWrite;
    public static SelectMode SelectError;
}
public class System.Net.Sockets.SendPacketsElement : object {
    internal string _filePath;
    internal Byte[] _buffer;
    internal int _offset;
    internal int _count;
    internal SendPacketsElementFlags _flags;
    public string FilePath { get; }
    public Byte[] Buffer { get; }
    public int Count { get; }
    public int Offset { get; }
    public bool EndOfPacket { get; }
    public SendPacketsElement(string filepath);
    public SendPacketsElement(string filepath, int offset, int count);
    public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket);
    public SendPacketsElement(Byte[] buffer);
    public SendPacketsElement(Byte[] buffer, int offset, int count);
    public SendPacketsElement(Byte[] buffer, int offset, int count, bool endOfPacket);
    private void Initialize(string filePath, Byte[] buffer, int offset, int count, SendPacketsElementFlags flags, bool endOfPacket);
    public string get_FilePath();
    public Byte[] get_Buffer();
    public int get_Count();
    public int get_Offset();
    public bool get_EndOfPacket();
}
internal enum System.Net.Sockets.SendPacketsElementFlags : Enum {
    public UInt32 value__;
    public static SendPacketsElementFlags File;
    public static SendPacketsElementFlags Memory;
    public static SendPacketsElementFlags EndOfPacket;
}
internal class System.Net.Sockets.SingleSocketMultipleConnectAsync : MultipleConnectAsync {
    private Socket _socket;
    private bool _userSocket;
    public SingleSocketMultipleConnectAsync(Socket socket, bool userSocket);
    protected virtual IPAddress GetNextAddress(Socket& attemptSocket);
    protected virtual void OnFail(bool abortive);
    protected virtual void OnSucceed();
}
public class System.Net.Sockets.Socket : object {
    private SafeCloseSocket _handle;
    internal EndPoint _rightEndPoint;
    internal EndPoint _remoteEndPoint;
    private bool _isConnected;
    private bool _isDisconnected;
    private bool _willBlock;
    private bool _willBlockInternal;
    private bool _isListening;
    private bool _nonBlockingConnectInProgress;
    private EndPoint _nonBlockingConnectRightEndPoint;
    private AddressFamily _addressFamily;
    private SocketType _socketType;
    private ProtocolType _protocolType;
    private CacheSet _caches;
    private bool _receivingPacketInformation;
    private static object s_internalSyncObject;
    private int _closeTimeout;
    private int _intCleanedUp;
    internal static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_initialized;
    private static AsyncCallback s_multipleAddressConnectCallback;
    private static EventHandler`1<SocketAsyncEventArgs> AcceptCompletedHandler;
    private static EventHandler`1<SocketAsyncEventArgs> ReceiveCompletedHandler;
    private static EventHandler`1<SocketAsyncEventArgs> SendCompletedHandler;
    private static TaskSocketAsyncEventArgs`1<Socket> s_rentedSocketSentinel;
    private static Int32TaskSocketAsyncEventArgs s_rentedInt32Sentinel;
    private static Task`1<int> s_zeroTask;
    private CachedEventArgs _cachedTaskEventArgs;
    [ObsoleteAttribute("SupportsIPv4 is obsoleted for this type, please use OSSupportsIPv4 instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public static bool SupportsIPv4 { get; }
    [ObsoleteAttribute("SupportsIPv6 is obsoleted for this type, please use OSSupportsIPv6 instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public static bool SupportsIPv6 { get; }
    public static bool OSSupportsIPv4 { get; }
    public static bool OSSupportsIPv6 { get; }
    public int Available { get; }
    public EndPoint LocalEndPoint { get; }
    public EndPoint RemoteEndPoint { get; }
    public IntPtr Handle { get; }
    internal SafeCloseSocket SafeHandle { get; }
    public bool Blocking { get; public set; }
    public bool UseOnlyOverlappedIO { get; public set; }
    public bool Connected { get; }
    public AddressFamily AddressFamily { get; }
    public SocketType SocketType { get; }
    public ProtocolType ProtocolType { get; }
    public bool IsBound { get; }
    public bool ExclusiveAddressUse { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public int SendBufferSize { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public LingerOption LingerState { get; public set; }
    public bool NoDelay { get; public set; }
    public short Ttl { get; public set; }
    public bool DontFragment { get; public set; }
    public bool MulticastLoopback { get; public set; }
    public bool EnableBroadcast { get; public set; }
    public bool DualMode { get; public set; }
    private bool IsDualMode { get; }
    private static object InternalSyncObject { get; }
    private CacheSet Caches { get; }
    internal bool CleanedUp { get; }
    internal TransportType Transport { get; }
    private static AsyncCallback CachedMultipleAddressConnectCallback { get; }
    public Socket(SocketType socketType, ProtocolType protocolType);
    public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType);
    public Socket(SocketInformation socketInformation);
    private Socket(SafeCloseSocket fd);
    private static Socket();
    public static bool get_SupportsIPv4();
    public static bool get_SupportsIPv6();
    public static bool get_OSSupportsIPv4();
    public static bool get_OSSupportsIPv6();
    public int get_Available();
    public EndPoint get_LocalEndPoint();
    public EndPoint get_RemoteEndPoint();
    public IntPtr get_Handle();
    internal SafeCloseSocket get_SafeHandle();
    public bool get_Blocking();
    public void set_Blocking(bool value);
    public bool get_UseOnlyOverlappedIO();
    public void set_UseOnlyOverlappedIO(bool value);
    public bool get_Connected();
    public AddressFamily get_AddressFamily();
    public SocketType get_SocketType();
    public ProtocolType get_ProtocolType();
    public bool get_IsBound();
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public LingerOption get_LingerState();
    public void set_LingerState(LingerOption value);
    public bool get_NoDelay();
    public void set_NoDelay(bool value);
    public short get_Ttl();
    public void set_Ttl(short value);
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
    public bool get_MulticastLoopback();
    public void set_MulticastLoopback(bool value);
    public bool get_EnableBroadcast();
    public void set_EnableBroadcast(bool value);
    public bool get_DualMode();
    public void set_DualMode(bool value);
    private bool get_IsDualMode();
    internal bool CanTryAddressFamily(AddressFamily family);
    public void Bind(EndPoint localEP);
    internal void InternalBind(EndPoint localEP);
    private void DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress);
    public void Connect(EndPoint remoteEP);
    public void Connect(IPAddress address, int port);
    public void Connect(string host, int port);
    public void Connect(IPAddress[] addresses, int port);
    public void Close();
    public void Close(int timeout);
    public void Listen(int backlog);
    public Socket Accept();
    public int Send(Byte[] buffer, int size, SocketFlags socketFlags);
    public int Send(Byte[] buffer, SocketFlags socketFlags);
    public int Send(Byte[] buffer);
    public int Send(IList`1<ArraySegment`1<byte>> buffers);
    public int Send(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    public int Send(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode);
    public int Send(Byte[] buffer, int offset, int size, SocketFlags socketFlags);
    public int Send(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode);
    public int Send(ReadOnlySpan`1<byte> buffer);
    public int Send(ReadOnlySpan`1<byte> buffer, SocketFlags socketFlags);
    public int Send(ReadOnlySpan`1<byte> buffer, SocketFlags socketFlags, SocketError& errorCode);
    public void SendFile(string fileName);
    public void SendFile(string fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags);
    public int SendTo(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP);
    public int SendTo(Byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP);
    public int SendTo(Byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP);
    public int SendTo(Byte[] buffer, EndPoint remoteEP);
    public int Receive(Byte[] buffer, int size, SocketFlags socketFlags);
    public int Receive(Byte[] buffer, SocketFlags socketFlags);
    public int Receive(Byte[] buffer);
    public int Receive(Byte[] buffer, int offset, int size, SocketFlags socketFlags);
    public int Receive(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode);
    public int Receive(Span`1<byte> buffer);
    public int Receive(Span`1<byte> buffer, SocketFlags socketFlags);
    public int Receive(Span`1<byte> buffer, SocketFlags socketFlags, SocketError& errorCode);
    public int Receive(IList`1<ArraySegment`1<byte>> buffers);
    public int Receive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    public int Receive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode);
    public int ReceiveMessageFrom(Byte[] buffer, int offset, int size, SocketFlags& socketFlags, EndPoint& remoteEP, IPPacketInformation& ipPacketInformation);
    public int ReceiveFrom(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint& remoteEP);
    public int ReceiveFrom(Byte[] buffer, int size, SocketFlags socketFlags, EndPoint& remoteEP);
    public int ReceiveFrom(Byte[] buffer, SocketFlags socketFlags, EndPoint& remoteEP);
    public int ReceiveFrom(Byte[] buffer, EndPoint& remoteEP);
    public int IOControl(int ioControlCode, Byte[] optionInValue, Byte[] optionOutValue);
    public int IOControl(IOControlCode ioControlCode, Byte[] optionInValue, Byte[] optionOutValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue);
    public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName);
    public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public Byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength);
    public void SetIPProtectionLevel(IPProtectionLevel level);
    public bool Poll(int microSeconds, SelectMode mode);
    public static void Select(IList checkRead, IList checkWrite, IList checkError, int microSeconds);
    public IAsyncResult BeginConnect(EndPoint remoteEP, AsyncCallback callback, object state);
    private bool CanUseConnectEx(EndPoint remoteEP);
    public SocketInformation DuplicateAndClose(int targetProcessId);
    internal IAsyncResult UnsafeBeginConnect(EndPoint remoteEP, AsyncCallback callback, object state, bool flowContext);
    public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginDisconnect(bool reuseSocket, AsyncCallback callback, object state);
    private void DoBeginDisconnect(bool reuseSocket, DisconnectOverlappedAsyncResult asyncResult);
    public void Disconnect(bool reuseSocket);
    public void EndConnect(IAsyncResult asyncResult);
    public void EndDisconnect(IAsyncResult asyncResult);
    public IAsyncResult BeginSend(Byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state);
    public IAsyncResult BeginSend(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    private SocketError DoBeginSend(Byte[] buffer, int offset, int size, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public IAsyncResult BeginSend(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, AsyncCallback callback, object state);
    public IAsyncResult BeginSend(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    private SocketError DoBeginSend(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public int EndSend(IAsyncResult asyncResult);
    public int EndSend(IAsyncResult asyncResult, SocketError& errorCode);
    public IAsyncResult BeginSendFile(string fileName, AsyncCallback callback, object state);
    public IAsyncResult BeginSendFile(string fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, object state);
    public void EndSendFile(IAsyncResult asyncResult);
    public IAsyncResult BeginSendTo(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP, AsyncCallback callback, object state);
    private void DoBeginSendTo(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint endPointSnapshot, SocketAddress socketAddress, OverlappedAsyncResult asyncResult);
    public int EndSendTo(IAsyncResult asyncResult);
    public IAsyncResult BeginReceive(Byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state);
    public IAsyncResult BeginReceive(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    private SocketError DoBeginReceive(Byte[] buffer, int offset, int size, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public IAsyncResult BeginReceive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, AsyncCallback callback, object state);
    public IAsyncResult BeginReceive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    private SocketError DoBeginReceive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public int EndReceive(IAsyncResult asyncResult);
    public int EndReceive(IAsyncResult asyncResult, SocketError& errorCode);
    public IAsyncResult BeginReceiveMessageFrom(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint& remoteEP, AsyncCallback callback, object state);
    public int EndReceiveMessageFrom(IAsyncResult asyncResult, SocketFlags& socketFlags, EndPoint& endPoint, IPPacketInformation& ipPacketInformation);
    public IAsyncResult BeginReceiveFrom(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint& remoteEP, AsyncCallback callback, object state);
    private void DoBeginReceiveFrom(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint endPointSnapshot, SocketAddress socketAddress, OriginalAddressOverlappedAsyncResult asyncResult);
    public int EndReceiveFrom(IAsyncResult asyncResult, EndPoint& endPoint);
    public IAsyncResult BeginAccept(AsyncCallback callback, object state);
    public IAsyncResult BeginAccept(int receiveSize, AsyncCallback callback, object state);
    public IAsyncResult BeginAccept(Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);
    private void DoBeginAccept(Socket acceptSocket, int receiveSize, AcceptOverlappedAsyncResult asyncResult);
    public Socket EndAccept(IAsyncResult asyncResult);
    public Socket EndAccept(Byte[]& buffer, IAsyncResult asyncResult);
    public Socket EndAccept(Byte[]& buffer, Int32& bytesTransferred, IAsyncResult asyncResult);
    public void Shutdown(SocketShutdown how);
    public bool AcceptAsync(SocketAsyncEventArgs e);
    public bool ConnectAsync(SocketAsyncEventArgs e);
    public static bool ConnectAsync(SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e);
    public static void CancelConnectAsync(SocketAsyncEventArgs e);
    public bool DisconnectAsync(SocketAsyncEventArgs e);
    public bool ReceiveAsync(SocketAsyncEventArgs e);
    public bool ReceiveFromAsync(SocketAsyncEventArgs e);
    public bool ReceiveMessageFromAsync(SocketAsyncEventArgs e);
    public bool SendAsync(SocketAsyncEventArgs e);
    public bool SendPacketsAsync(SocketAsyncEventArgs e);
    public bool SendToAsync(SocketAsyncEventArgs e);
    private static object get_InternalSyncObject();
    private CacheSet get_Caches();
    internal bool get_CleanedUp();
    internal TransportType get_Transport();
    internal static void GetIPProtocolInformation(AddressFamily addressFamily, SocketAddress socketAddress, Boolean& isIPv4, Boolean& isIPv6);
    internal static int GetAddressSize(EndPoint endPoint);
    private SocketAddress SnapshotAndSerialize(EndPoint& remoteEP);
    private IPEndPoint RemapIPEndPoint(IPEndPoint input);
    internal static void InitializeSockets();
    private void DoConnect(EndPoint endPointSnapshot, SocketAddress socketAddress);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    internal void InternalShutdown(SocketShutdown how);
    internal void SetReceivingPacketInformation();
    internal void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue, bool silent);
    private void SetMulticastOption(SocketOptionName optionName, MulticastOption MR);
    private void SetIPv6MulticastOption(SocketOptionName optionName, IPv6MulticastOption MR);
    private void SetLingerOption(LingerOption lref);
    private LingerOption GetLingerOpt();
    private MulticastOption GetMulticastOpt(SocketOptionName optionName);
    private IPv6MulticastOption GetIPv6MulticastOpt(SocketOptionName optionName);
    private SocketError InternalSetBlocking(bool desired, Boolean& current);
    internal void InternalSetBlocking(bool desired);
    private IAsyncResult BeginConnectEx(EndPoint remoteEP, bool flowContext, AsyncCallback callback, object state);
    private static void DnsCallback(IAsyncResult result);
    private static bool DoDnsCallback(IAsyncResult result, MultipleAddressConnectAsyncResult context);
    private static AsyncCallback get_CachedMultipleAddressConnectCallback();
    private static object PostOneBeginConnect(MultipleAddressConnectAsyncResult context);
    private static void MultipleAddressConnectCallback(IAsyncResult result);
    private static bool DoMultipleAddressConnectCallback(object result, MultipleAddressConnectAsyncResult context);
    internal Socket CreateAcceptSocket(SafeCloseSocket fd, EndPoint remoteEP);
    internal Socket UpdateAcceptSocket(Socket socket, EndPoint remoteEP);
    internal void SetToConnected();
    internal void SetToDisconnected();
    private void UpdateStatusAfterSocketErrorAndThrowException(SocketError error, string callerName);
    internal void UpdateStatusAfterSocketError(SocketException socketException);
    internal void UpdateStatusAfterSocketError(SocketError errorCode);
    private bool CheckErrorAndUpdateStatus(SocketError errorCode);
    private void ValidateBlockingMode();
    private void ValidateForMultiConnect(bool isMultiEndpoint);
    private static FileStream OpenFile(string name);
    internal Task`1<Socket> AcceptAsync(Socket acceptSocket);
    private Task`1<Socket> AcceptAsyncApm(Socket acceptSocket);
    internal Task ConnectAsync(EndPoint remoteEP);
    internal Task ConnectAsync(IPAddress address, int port);
    internal Task ConnectAsync(IPAddress[] addresses, int port);
    internal Task ConnectAsync(string host, int port);
    internal Task`1<int> ReceiveAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags, bool fromNetworkStream);
    internal ValueTask`1<int> ReceiveAsync(Memory`1<byte> buffer, SocketFlags socketFlags, bool fromNetworkStream, CancellationToken cancellationToken);
    private Task`1<int> ReceiveAsyncApm(Memory`1<byte> buffer, SocketFlags socketFlags);
    internal Task`1<int> ReceiveAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    private Task`1<int> ReceiveAsyncApm(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    internal Task`1<SocketReceiveFromResult> ReceiveFromAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    internal Task`1<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    internal Task`1<int> SendAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    internal ValueTask`1<int> SendAsync(ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    internal ValueTask SendAsyncForNetworkStream(ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    private Task`1<int> SendAsyncApm(ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags);
    internal Task`1<int> SendAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    private Task`1<int> SendAsyncApm(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    internal Task`1<int> SendToAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP);
    private static void ValidateBuffer(ArraySegment`1<byte> buffer);
    private static void ValidateBuffersList(IList`1<ArraySegment`1<byte>> buffers);
    private static void ConfigureBufferList(Int32TaskSocketAsyncEventArgs saea, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    private Task`1<int> GetTaskForSendReceive(bool pending, Int32TaskSocketAsyncEventArgs saea, bool fromNetworkStream, bool isReceive);
    private static void CompleteAccept(Socket s, TaskSocketAsyncEventArgs`1<Socket> saea);
    private static void CompleteSendReceive(Socket s, Int32TaskSocketAsyncEventArgs saea, bool isReceive);
    private static Exception GetException(SocketError error, bool wrapExceptionsInIOExceptions);
    private Int32TaskSocketAsyncEventArgs RentSocketAsyncEventArgs(bool isReceive);
    private void ReturnSocketAsyncEventArgs(Int32TaskSocketAsyncEventArgs saea, bool isReceive);
    private void ReturnSocketAsyncEventArgs(TaskSocketAsyncEventArgs`1<Socket> saea);
    private void DisposeCachedTaskSocketAsyncEventArgs();
    internal void ReplaceHandleIfNecessaryAfterFailedConnect();
    internal SocketError ReplaceHandle();
    private static void ThrowMultiConnectNotSupported();
    private Socket GetOrCreateAcceptSocket(Socket acceptSocket, bool unused, string propertyName, SafeCloseSocket& handle);
    private static void CheckTransmitFileOptions(TransmitFileOptions flags);
    private void SendFileInternal(string fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags);
    [AsyncStateMachineAttribute("System.Net.Sockets.Socket/<SendFileInternalAsync>d__312")]
private Task SendFileInternalAsync(FileStream fileStream, Byte[] preBuffer, Byte[] postBuffer);
    private IAsyncResult BeginSendFileInternal(string fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, object state);
    private void EndSendFileInternal(IAsyncResult asyncResult);
    [CompilerGeneratedAttribute]
internal static void <InitializeSockets>g__InitializeSocketsCore|224_0();
}
internal class System.Net.Sockets.SocketAsyncContext : object {
    private AcceptOperation _cachedAcceptOperation;
    private BufferMemoryReceiveOperation _cachedBufferMemoryReceiveOperation;
    private BufferListReceiveOperation _cachedBufferListReceiveOperation;
    private BufferMemorySendOperation _cachedBufferMemorySendOperation;
    private BufferListSendOperation _cachedBufferListSendOperation;
    private SafeCloseSocket _socket;
    private OperationQueue`1<ReadOperation> _receiveQueue;
    private OperationQueue`1<WriteOperation> _sendQueue;
    private Token _asyncEngineToken;
    private bool _registered;
    private bool _nonBlockingSet;
    private object _registerLock;
    public SocketAsyncContext(SafeCloseSocket socket);
    private void ReturnOperation(AcceptOperation operation);
    private void ReturnOperation(BufferMemoryReceiveOperation operation);
    private void ReturnOperation(BufferListReceiveOperation operation);
    private void ReturnOperation(BufferMemorySendOperation operation);
    private void ReturnOperation(BufferListSendOperation operation);
    private AcceptOperation RentAcceptOperation();
    private BufferMemoryReceiveOperation RentBufferMemoryReceiveOperation();
    private BufferListReceiveOperation RentBufferListReceiveOperation();
    private BufferMemorySendOperation RentBufferMemorySendOperation();
    private BufferListSendOperation RentBufferListSendOperation();
    private void Register();
    public void Close();
    public void SetNonBlocking();
    private void PerformSyncOperation(OperationQueue`1& queue, TOperation operation, int timeout, int observedSequenceNumber);
    private bool ShouldRetrySyncOperation(SocketError& errorCode);
    public SocketError Accept(Byte[] socketAddress, Int32& socketAddressLen, IntPtr& acceptedFd);
    public SocketError AcceptAsync(Byte[] socketAddress, Int32& socketAddressLen, IntPtr& acceptedFd, Action`4<IntPtr, Byte[], int, SocketError> callback);
    public SocketError Connect(Byte[] socketAddress, int socketAddressLen);
    public SocketError ConnectAsync(Byte[] socketAddress, int socketAddressLen, Action`1<SocketError> callback);
    public SocketError Receive(Memory`1<byte> buffer, SocketFlags& flags, int timeout, Int32& bytesReceived);
    public SocketError Receive(Span`1<byte> buffer, SocketFlags& flags, int timeout, Int32& bytesReceived);
    public SocketError ReceiveAsync(Memory`1<byte> buffer, SocketFlags flags, Int32& bytesReceived, SocketFlags& receivedFlags, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError ReceiveFrom(Memory`1<byte> buffer, SocketFlags& flags, Byte[] socketAddress, Int32& socketAddressLen, int timeout, Int32& bytesReceived);
    public SocketError ReceiveFrom(Span`1<byte> buffer, SocketFlags& flags, Byte[] socketAddress, Int32& socketAddressLen, int timeout, Int32& bytesReceived);
    public SocketError ReceiveFromAsync(Memory`1<byte> buffer, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesReceived, SocketFlags& receivedFlags, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError Receive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags& flags, int timeout, Int32& bytesReceived);
    public SocketError ReceiveAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Int32& bytesReceived, SocketFlags& receivedFlags, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError ReceiveFrom(IList`1<ArraySegment`1<byte>> buffers, SocketFlags& flags, Byte[] socketAddress, int socketAddressLen, int timeout, Int32& bytesReceived);
    public SocketError ReceiveFromAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesReceived, SocketFlags& receivedFlags, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError ReceiveMessageFrom(Memory`1<byte> buffer, IList`1<ArraySegment`1<byte>> buffers, SocketFlags& flags, Byte[] socketAddress, Int32& socketAddressLen, bool isIPv4, bool isIPv6, int timeout, IPPacketInformation& ipPacketInformation, Int32& bytesReceived);
    public SocketError ReceiveMessageFromAsync(Memory`1<byte> buffer, IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, bool isIPv4, bool isIPv6, Int32& bytesReceived, SocketFlags& receivedFlags, IPPacketInformation& ipPacketInformation, Action`6<int, Byte[], int, SocketFlags, IPPacketInformation, SocketError> callback);
    public SocketError Send(ReadOnlySpan`1<byte> buffer, SocketFlags flags, int timeout, Int32& bytesSent);
    public SocketError Send(Byte[] buffer, int offset, int count, SocketFlags flags, int timeout, Int32& bytesSent);
    public SocketError SendAsync(Memory`1<byte> buffer, int offset, int count, SocketFlags flags, Int32& bytesSent, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError SendTo(Byte[] buffer, int offset, int count, SocketFlags flags, Byte[] socketAddress, int socketAddressLen, int timeout, Int32& bytesSent);
    public SocketError SendTo(ReadOnlySpan`1<byte> buffer, SocketFlags flags, Byte[] socketAddress, int socketAddressLen, int timeout, Int32& bytesSent);
    public SocketError SendToAsync(Memory`1<byte> buffer, int offset, int count, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesSent, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError Send(IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, int timeout, Int32& bytesSent);
    public SocketError SendAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Int32& bytesSent, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError SendTo(IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Byte[] socketAddress, int socketAddressLen, int timeout, Int32& bytesSent);
    public SocketError SendToAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesSent, Action`5<int, Byte[], int, SocketFlags, SocketError> callback);
    public SocketError SendFile(SafeFileHandle fileHandle, long offset, long count, int timeout, Int64& bytesSent);
    public SocketError SendFileAsync(SafeFileHandle fileHandle, long offset, long count, Int64& bytesSent, Action`2<long, SocketError> callback);
    public void HandleEvents(SocketEvents events);
}
internal class System.Net.Sockets.SocketAsyncEngine : object {
    private static object s_lock;
    private static int EngineCount;
    private static SocketAsyncEngine[] s_currentEngines;
    private static int s_allocateFromEngine;
    private IntPtr _port;
    private SocketEvent* _buffer;
    private int _shutdownReadPipe;
    private int _shutdownWritePipe;
    private static IntPtr MaxHandles;
    private static IntPtr MinHandlesForAdditionalEngine;
    private static IntPtr ShutdownHandle;
    private IntPtr _nextHandle;
    private IntPtr _outstandingHandles;
    private Dictionary`2<IntPtr, SocketAsyncContext> _handleToContextMap;
    private bool IsFull { get; }
    private bool HasLowNumberOfSockets { get; }
    private static SocketAsyncEngine();
    private bool get_IsFull();
    private bool get_HasLowNumberOfSockets();
    private static void AllocateToken(SocketAsyncContext context, SocketAsyncEngine& engine, IntPtr& handle);
    private IntPtr AllocateHandle(SocketAsyncContext context);
    private void FreeHandle(IntPtr handle);
    private SocketAsyncContext GetContextFromHandle(IntPtr handle);
    private void EventLoop();
    private void RequestEventLoopShutdown();
    private void FreeNativeResources();
    private bool TryRegister(SafeCloseSocket socket, IntPtr handle, Error& error);
}
public class System.Net.Sockets.SocketAsyncEventArgs : EventArgs {
    private Socket _acceptSocket;
    private Socket _connectSocket;
    private Memory`1<byte> _buffer;
    private int _offset;
    private int _count;
    private bool _bufferIsExplicitArray;
    private IList`1<ArraySegment`1<byte>> _bufferList;
    private List`1<ArraySegment`1<byte>> _bufferListInternal;
    private int _bytesTransferred;
    [CompilerGeneratedAttribute]
private EventHandler`1<SocketAsyncEventArgs> _completed;
    private bool _completedChanged;
    private bool _disconnectReuseSocket;
    private SocketAsyncOperation _completedOperation;
    private IPPacketInformation _receiveMessageFromPacketInfo;
    private EndPoint _remoteEndPoint;
    private int _sendPacketsSendSize;
    private SendPacketsElement[] _sendPacketsElements;
    private TransmitFileOptions _sendPacketsFlags;
    private SocketError _socketError;
    private Exception _connectByNameError;
    private SocketFlags _socketFlags;
    private object _userToken;
    private Byte[] _acceptBuffer;
    private int _acceptAddressBufferCount;
    internal SocketAddress _socketAddress;
    private bool _flowExecutionContext;
    private ExecutionContext _context;
    private static ContextCallback s_executionCallback;
    private Socket _currentSocket;
    private bool _disposeCalled;
    private int _operating;
    private MultipleConnectAsync _multipleConnect;
    private IntPtr _acceptedFileDescriptor;
    private int _socketAddressSize;
    private SocketFlags _receivedFlags;
    private Action`5<int, Byte[], int, SocketFlags, SocketError> _transferCompletionCallback;
    public Socket AcceptSocket { get; public set; }
    public Socket ConnectSocket { get; }
    public Byte[] Buffer { get; }
    public Memory`1<byte> MemoryBuffer { get; }
    public int Offset { get; }
    public int Count { get; }
    public TransmitFileOptions SendPacketsFlags { get; public set; }
    public IList`1<ArraySegment`1<byte>> BufferList { get; public set; }
    public int BytesTransferred { get; }
    public bool DisconnectReuseSocket { get; public set; }
    public SocketAsyncOperation LastOperation { get; }
    public IPPacketInformation ReceiveMessageFromPacketInfo { get; }
    public EndPoint RemoteEndPoint { get; public set; }
    public SendPacketsElement[] SendPacketsElements { get; public set; }
    public int SendPacketsSendSize { get; public set; }
    public SocketError SocketError { get; public set; }
    public Exception ConnectByNameError { get; }
    public SocketFlags SocketFlags { get; public set; }
    public object UserToken { get; public set; }
    internal bool HasMultipleBuffers { get; }
    private Action`5<int, Byte[], int, SocketFlags, SocketError> TransferCompletionCallback { get; }
    internal SocketAsyncEventArgs(bool flowExecutionContext);
    private static SocketAsyncEventArgs();
    [CompilerGeneratedAttribute]
private void add__completed(EventHandler`1<SocketAsyncEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__completed(EventHandler`1<SocketAsyncEventArgs> value);
    public Socket get_AcceptSocket();
    public void set_AcceptSocket(Socket value);
    public Socket get_ConnectSocket();
    public Byte[] get_Buffer();
    public Memory`1<byte> get_MemoryBuffer();
    public int get_Offset();
    public int get_Count();
    public TransmitFileOptions get_SendPacketsFlags();
    public void set_SendPacketsFlags(TransmitFileOptions value);
    public IList`1<ArraySegment`1<byte>> get_BufferList();
    public void set_BufferList(IList`1<ArraySegment`1<byte>> value);
    public int get_BytesTransferred();
    public void add_Completed(EventHandler`1<SocketAsyncEventArgs> value);
    public void remove_Completed(EventHandler`1<SocketAsyncEventArgs> value);
    protected virtual void OnCompleted(SocketAsyncEventArgs e);
    public bool get_DisconnectReuseSocket();
    public void set_DisconnectReuseSocket(bool value);
    public SocketAsyncOperation get_LastOperation();
    public IPPacketInformation get_ReceiveMessageFromPacketInfo();
    public EndPoint get_RemoteEndPoint();
    public void set_RemoteEndPoint(EndPoint value);
    public SendPacketsElement[] get_SendPacketsElements();
    public void set_SendPacketsElements(SendPacketsElement[] value);
    public int get_SendPacketsSendSize();
    public void set_SendPacketsSendSize(int value);
    public SocketError get_SocketError();
    public void set_SocketError(SocketError value);
    public Exception get_ConnectByNameError();
    public SocketFlags get_SocketFlags();
    public void set_SocketFlags(SocketFlags value);
    public object get_UserToken();
    public void set_UserToken(object value);
    public void SetBuffer(int offset, int count);
    internal void CopyBufferFrom(SocketAsyncEventArgs source);
    public void SetBuffer(Byte[] buffer, int offset, int count);
    public void SetBuffer(Memory`1<byte> buffer);
    internal bool get_HasMultipleBuffers();
    internal void SetResults(SocketError socketError, int bytesTransferred, SocketFlags flags);
    internal void SetResults(Exception exception, int bytesTransferred, SocketFlags flags);
    private static void ExecutionCallback(object state);
    internal void Complete();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void StartConfiguring();
    private void ThrowForNonFreeStatus(int status);
    internal void StartOperationCommon(Socket socket, SocketAsyncOperation operation);
    internal void StartOperationAccept();
    internal void StartOperationConnect(MultipleConnectAsync multipleConnect);
    internal void CancelConnectAsync();
    internal void FinishOperationSyncFailure(SocketError socketError, int bytesTransferred, SocketFlags flags);
    internal void FinishConnectByNameSyncFailure(Exception exception, int bytesTransferred, SocketFlags flags);
    internal void FinishOperationAsyncFailure(SocketError socketError, int bytesTransferred, SocketFlags flags);
    internal void FinishOperationAsyncFailure(Exception exception, int bytesTransferred, SocketFlags flags);
    internal void FinishWrapperConnectSuccess(Socket connectSocket, int bytesTransferred, SocketFlags flags);
    internal void FinishOperationSyncSuccess(int bytesTransferred, SocketFlags flags);
    internal void FinishOperationAsyncSuccess(int bytesTransferred, SocketFlags flags);
    private void InitializeInternals();
    private void FreeInternals();
    private void SetupMultipleBuffers();
    private void CompleteCore();
    private void FinishOperationSync(SocketError socketError, int bytesTransferred, SocketFlags flags);
    private void AcceptCompletionCallback(IntPtr acceptedFileDescriptor, Byte[] socketAddress, int socketAddressSize, SocketError socketError);
    private void CompleteAcceptOperation(IntPtr acceptedFileDescriptor, Byte[] socketAddress, int socketAddressSize, SocketError socketError);
    internal SocketError DoOperationAccept(Socket socket, SafeCloseSocket handle, SafeCloseSocket acceptHandle);
    private void ConnectCompletionCallback(SocketError socketError);
    internal SocketError DoOperationConnect(Socket socket, SafeCloseSocket handle);
    internal SocketError DoOperationDisconnect(Socket socket, SafeCloseSocket handle);
    private Action`5<int, Byte[], int, SocketFlags, SocketError> get_TransferCompletionCallback();
    private void TransferCompletionCallbackCore(int bytesTransferred, Byte[] socketAddress, int socketAddressSize, SocketFlags receivedFlags, SocketError socketError);
    private void CompleteTransferOperation(int bytesTransferred, Byte[] socketAddress, int socketAddressSize, SocketFlags receivedFlags, SocketError socketError);
    internal SocketError DoOperationReceive(SafeCloseSocket handle);
    internal SocketError DoOperationReceiveFrom(SafeCloseSocket handle);
    private void ReceiveMessageFromCompletionCallback(int bytesTransferred, Byte[] socketAddress, int socketAddressSize, SocketFlags receivedFlags, IPPacketInformation ipPacketInformation, SocketError errorCode);
    private void CompleteReceiveMessageFromOperation(int bytesTransferred, Byte[] socketAddress, int socketAddressSize, SocketFlags receivedFlags, IPPacketInformation ipPacketInformation, SocketError errorCode);
    internal SocketError DoOperationReceiveMessageFrom(Socket socket, SafeCloseSocket handle);
    internal SocketError DoOperationSend(SafeCloseSocket handle);
    internal SocketError DoOperationSendPackets(Socket socket, SafeCloseSocket handle);
    internal SocketError DoOperationSendTo(SafeCloseSocket handle);
    internal void LogBuffer(int size);
    private SocketError FinishOperationAccept(SocketAddress remoteSocketAddress);
    private SocketError FinishOperationConnect();
    private int GetSocketAddressSize();
    private void FinishOperationReceiveMessageFrom();
    private void FinishOperationSendPackets();
    private void CompletionCallback(int bytesTransferred, SocketFlags flags, SocketError socketError);
    [CompilerGeneratedAttribute]
private void <DoOperationSendPackets>b__144_0(long bytesTransferred, SocketError error);
}
public enum System.Net.Sockets.SocketAsyncOperation : Enum {
    public int value__;
    public static SocketAsyncOperation None;
    public static SocketAsyncOperation Accept;
    public static SocketAsyncOperation Connect;
    public static SocketAsyncOperation Disconnect;
    public static SocketAsyncOperation Receive;
    public static SocketAsyncOperation ReceiveFrom;
    public static SocketAsyncOperation ReceiveMessageFrom;
    public static SocketAsyncOperation Send;
    public static SocketAsyncOperation SendPackets;
    public static SocketAsyncOperation SendTo;
}
internal static class System.Net.Sockets.SocketErrorPal : object {
    private static Dictionary`2<Error, SocketError> s_nativeErrorToSocketError;
    private static Dictionary`2<SocketError, Error> s_socketErrorToNativeError;
    private static SocketErrorPal();
    internal static SocketError GetSocketErrorForNativeError(Error errno);
}
[FlagsAttribute]
public enum System.Net.Sockets.SocketFlags : Enum {
    public int value__;
    public static SocketFlags None;
    public static SocketFlags OutOfBand;
    public static SocketFlags Peek;
    public static SocketFlags DontRoute;
    public static SocketFlags Truncated;
    public static SocketFlags ControlDataTruncated;
    public static SocketFlags Broadcast;
    public static SocketFlags Multicast;
    public static SocketFlags Partial;
}
public class System.Net.Sockets.SocketInformation : ValueType {
    [CompilerGeneratedAttribute]
private Byte[] <ProtocolInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private SocketInformationOptions <Options>k__BackingField;
    public Byte[] ProtocolInformation { get; public set; }
    public SocketInformationOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_ProtocolInformation();
    [CompilerGeneratedAttribute]
public void set_ProtocolInformation(Byte[] value);
    [CompilerGeneratedAttribute]
public SocketInformationOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(SocketInformationOptions value);
}
[FlagsAttribute]
public enum System.Net.Sockets.SocketInformationOptions : Enum {
    public int value__;
    public static SocketInformationOptions NonBlocking;
    public static SocketInformationOptions Connected;
    public static SocketInformationOptions Listening;
    public static SocketInformationOptions UseOnlyOverlappedIO;
}
public enum System.Net.Sockets.SocketOptionLevel : Enum {
    public int value__;
    public static SocketOptionLevel Socket;
    public static SocketOptionLevel IP;
    public static SocketOptionLevel IPv6;
    public static SocketOptionLevel Tcp;
    public static SocketOptionLevel Udp;
}
public enum System.Net.Sockets.SocketOptionName : Enum {
    public int value__;
    public static SocketOptionName Debug;
    public static SocketOptionName AcceptConnection;
    public static SocketOptionName ReuseAddress;
    public static SocketOptionName KeepAlive;
    public static SocketOptionName DontRoute;
    public static SocketOptionName Broadcast;
    public static SocketOptionName UseLoopback;
    public static SocketOptionName Linger;
    public static SocketOptionName OutOfBandInline;
    public static SocketOptionName DontLinger;
    public static SocketOptionName ExclusiveAddressUse;
    public static SocketOptionName SendBuffer;
    public static SocketOptionName ReceiveBuffer;
    public static SocketOptionName SendLowWater;
    public static SocketOptionName ReceiveLowWater;
    public static SocketOptionName SendTimeout;
    public static SocketOptionName ReceiveTimeout;
    public static SocketOptionName Error;
    public static SocketOptionName Type;
    public static SocketOptionName ReuseUnicastPort;
    public static SocketOptionName MaxConnections;
    public static SocketOptionName IPOptions;
    public static SocketOptionName HeaderIncluded;
    public static SocketOptionName TypeOfService;
    public static SocketOptionName IpTimeToLive;
    public static SocketOptionName MulticastInterface;
    public static SocketOptionName MulticastTimeToLive;
    public static SocketOptionName MulticastLoopback;
    public static SocketOptionName AddMembership;
    public static SocketOptionName DropMembership;
    public static SocketOptionName DontFragment;
    public static SocketOptionName AddSourceMembership;
    public static SocketOptionName DropSourceMembership;
    public static SocketOptionName BlockSource;
    public static SocketOptionName UnblockSource;
    public static SocketOptionName PacketInformation;
    public static SocketOptionName HopLimit;
    public static SocketOptionName IPProtectionLevel;
    public static SocketOptionName IPv6Only;
    public static SocketOptionName NoDelay;
    public static SocketOptionName BsdUrgent;
    public static SocketOptionName Expedited;
    public static SocketOptionName NoChecksum;
    public static SocketOptionName ChecksumCoverage;
    public static SocketOptionName UpdateAcceptContext;
    public static SocketOptionName UpdateConnectContext;
}
internal static class System.Net.Sockets.SocketPal : object {
    private static bool SupportsDualModeIPv4PacketInfo;
    private static SocketPal();
    private static bool GetPlatformSupportsDualModeIPv4PacketInfo();
    public static void Initialize();
    public static SocketError GetSocketErrorForErrorCode(Error errorCode);
    public static void CheckDualModeReceiveSupport(Socket socket);
    private static IPPacketInformation GetIPPacketInformation(MessageHeader* messageHeader, bool isIPv4, bool isIPv6);
    public static SocketError CreateSocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType, SafeCloseSocket& socket);
    private static int Receive(SafeCloseSocket socket, SocketFlags flags, Span`1<byte> buffer, Byte[] socketAddress, Int32& socketAddressLen, SocketFlags& receivedFlags, Error& errno);
    private static int Send(SafeCloseSocket socket, SocketFlags flags, ReadOnlySpan`1<byte> buffer, Int32& offset, Int32& count, Byte[] socketAddress, int socketAddressLen, Error& errno);
    private static int Send(SafeCloseSocket socket, SocketFlags flags, IList`1<ArraySegment`1<byte>> buffers, Int32& bufferIndex, Int32& offset, Byte[] socketAddress, int socketAddressLen, Error& errno);
    private static long SendFile(SafeCloseSocket socket, SafeFileHandle fileHandle, Int64& offset, Int64& count, Error& errno);
    private static int Receive(SafeCloseSocket socket, SocketFlags flags, IList`1<ArraySegment`1<byte>> buffers, Byte[] socketAddress, Int32& socketAddressLen, SocketFlags& receivedFlags, Error& errno);
    private static int ReceiveMessageFrom(SafeCloseSocket socket, SocketFlags flags, Span`1<byte> buffer, Byte[] socketAddress, Int32& socketAddressLen, bool isIPv4, bool isIPv6, SocketFlags& receivedFlags, IPPacketInformation& ipPacketInformation, Error& errno);
    private static int ReceiveMessageFrom(SafeCloseSocket socket, SocketFlags flags, IList`1<ArraySegment`1<byte>> buffers, Byte[] socketAddress, Int32& socketAddressLen, bool isIPv4, bool isIPv6, SocketFlags& receivedFlags, IPPacketInformation& ipPacketInformation, Error& errno);
    public static bool TryCompleteAccept(SafeCloseSocket socket, Byte[] socketAddress, Int32& socketAddressLen, IntPtr& acceptedFd, SocketError& errorCode);
    public static bool TryStartConnect(SafeCloseSocket socket, Byte[] socketAddress, int socketAddressLen, SocketError& errorCode);
    public static bool TryCompleteConnect(SafeCloseSocket socket, int socketAddressLen, SocketError& errorCode);
    public static bool TryCompleteReceiveFrom(SafeCloseSocket socket, Span`1<byte> buffer, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesReceived, SocketFlags& receivedFlags, SocketError& errorCode);
    public static bool TryCompleteReceiveFrom(SafeCloseSocket socket, IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesReceived, SocketFlags& receivedFlags, SocketError& errorCode);
    public static bool TryCompleteReceiveFrom(SafeCloseSocket socket, Span`1<byte> buffer, IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesReceived, SocketFlags& receivedFlags, SocketError& errorCode);
    public static bool TryCompleteReceiveMessageFrom(SafeCloseSocket socket, Span`1<byte> buffer, IList`1<ArraySegment`1<byte>> buffers, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, bool isIPv4, bool isIPv6, Int32& bytesReceived, SocketFlags& receivedFlags, IPPacketInformation& ipPacketInformation, SocketError& errorCode);
    public static bool TryCompleteSendTo(SafeCloseSocket socket, Span`1<byte> buffer, Int32& offset, Int32& count, SocketFlags flags, Byte[] socketAddress, int socketAddressLen, Int32& bytesSent, SocketError& errorCode);
    public static bool TryCompleteSendTo(SafeCloseSocket socket, ReadOnlySpan`1<byte> buffer, SocketFlags flags, Byte[] socketAddress, int socketAddressLen, Int32& bytesSent, SocketError& errorCode);
    public static bool TryCompleteSendTo(SafeCloseSocket socket, IList`1<ArraySegment`1<byte>> buffers, Int32& bufferIndex, Int32& offset, SocketFlags flags, Byte[] socketAddress, int socketAddressLen, Int32& bytesSent, SocketError& errorCode);
    public static bool TryCompleteSendTo(SafeCloseSocket socket, ReadOnlySpan`1<byte> buffer, IList`1<ArraySegment`1<byte>> buffers, Int32& bufferIndex, Int32& offset, Int32& count, SocketFlags flags, Byte[] socketAddress, int socketAddressLen, Int32& bytesSent, SocketError& errorCode);
    public static bool TryCompleteSendFile(SafeCloseSocket socket, SafeFileHandle handle, Int64& offset, Int64& count, Int64& bytesSent, SocketError& errorCode);
    public static SocketError SetBlocking(SafeCloseSocket handle, bool shouldBlock, Boolean& willBlock);
    public static SocketError GetSockName(SafeCloseSocket handle, Byte[] buffer, Int32& nameLen);
    public static SocketError GetAvailable(SafeCloseSocket handle, Int32& available);
    public static SocketError GetAtOutOfBandMark(SafeCloseSocket handle, Int32& atOutOfBandMark);
    public static SocketError GetPeerName(SafeCloseSocket handle, Byte[] buffer, Int32& nameLen);
    public static SocketError Bind(SafeCloseSocket handle, ProtocolType socketProtocolType, Byte[] buffer, int nameLen);
    public static SocketError Listen(SafeCloseSocket handle, int backlog);
    public static SocketError Accept(SafeCloseSocket handle, Byte[] buffer, Int32& nameLen, SafeCloseSocket& socket);
    public static SocketError Connect(SafeCloseSocket handle, Byte[] socketAddress, int socketAddressLen);
    public static SocketError Send(SafeCloseSocket handle, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, Int32& bytesTransferred);
    public static SocketError Send(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, Int32& bytesTransferred);
    public static SocketError Send(SafeCloseSocket handle, ReadOnlySpan`1<byte> buffer, SocketFlags socketFlags, Int32& bytesTransferred);
    public static SocketError SendFile(SafeCloseSocket handle, FileStream fileStream);
    public static SocketError SendTo(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, Byte[] socketAddress, int socketAddressLen, Int32& bytesTransferred);
    public static SocketError Receive(SafeCloseSocket handle, IList`1<ArraySegment`1<byte>> buffers, SocketFlags& socketFlags, Int32& bytesTransferred);
    public static SocketError Receive(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, Int32& bytesTransferred);
    public static SocketError Receive(SafeCloseSocket handle, Span`1<byte> buffer, SocketFlags socketFlags, Int32& bytesTransferred);
    public static SocketError ReceiveMessageFrom(Socket socket, SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags& socketFlags, SocketAddress socketAddress, SocketAddress& receiveAddress, IPPacketInformation& ipPacketInformation, Int32& bytesTransferred);
    public static SocketError ReceiveFrom(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesTransferred);
    public static SocketError WindowsIoctl(SafeCloseSocket handle, int ioControlCode, Byte[] optionInValue, Byte[] optionOutValue, Int32& optionLength);
    private static SocketError GetErrorAndTrackSetting(SafeCloseSocket handle, SocketOptionLevel optionLevel, SocketOptionName optionName, Error err);
    public static SocketError SetSockOpt(SafeCloseSocket handle, SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue);
    public static SocketError SetSockOpt(SafeCloseSocket handle, SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public static SocketError SetMulticastOption(SafeCloseSocket handle, SocketOptionName optionName, MulticastOption optionValue);
    public static SocketError SetIPv6MulticastOption(SafeCloseSocket handle, SocketOptionName optionName, IPv6MulticastOption optionValue);
    public static SocketError SetLingerOption(SafeCloseSocket handle, LingerOption optionValue);
    public static void SetReceivingDualModeIPv4PacketInformation(Socket socket);
    public static void SetIPProtectionLevel(Socket socket, SocketOptionLevel optionLevel, int protectionLevel);
    public static SocketError GetSockOpt(SafeCloseSocket handle, SocketOptionLevel optionLevel, SocketOptionName optionName, Int32& optionValue);
    public static SocketError GetSockOpt(SafeCloseSocket handle, SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue, Int32& optionLength);
    public static SocketError GetMulticastOption(SafeCloseSocket handle, SocketOptionName optionName, MulticastOption& optionValue);
    public static SocketError GetIPv6MulticastOption(SafeCloseSocket handle, SocketOptionName optionName, IPv6MulticastOption& optionValue);
    public static SocketError GetLingerOption(SafeCloseSocket handle, LingerOption& optionValue);
    public static SocketError Poll(SafeCloseSocket handle, int microseconds, SelectMode mode, Boolean& status);
    public static SocketError Select(IList checkRead, IList checkWrite, IList checkError, int microseconds);
    private static SocketError SelectViaPoll(IList checkRead, int checkReadInitialCount, IList checkWrite, int checkWriteInitialCount, IList checkError, int checkErrorInitialCount, PollEvent* events, int eventsLength, int microseconds);
    private static void AddToPollArray(PollEvent* arr, int arrLength, IList socketList, Int32& arrOffset, PollEvents events);
    private static void FilterPollList(IList socketList, PollEvent* arr, int arrEndOffset, PollEvents desiredEvents);
    public static SocketError Shutdown(SafeCloseSocket handle, bool isConnected, bool isDisconnected, SocketShutdown how);
    public static SocketError ConnectAsync(Socket socket, SafeCloseSocket handle, Byte[] socketAddress, int socketAddressLen, ConnectOverlappedAsyncResult asyncResult);
    public static SocketError SendAsync(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public static SocketError SendAsync(SafeCloseSocket handle, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public static SocketError SendFileAsync(SafeCloseSocket handle, FileStream fileStream, Action`2<long, SocketError> callback);
    private static SocketError SendFileAsync(SafeCloseSocket handle, FileStream fileStream, int offset, int count, Action`2<long, SocketError> callback);
    [AsyncStateMachineAttribute("System.Net.Sockets.SocketPal/<SendPacketsAsync>d__71")]
public static void SendPacketsAsync(Socket socket, TransmitFileOptions options, SendPacketsElement[] elements, FileStream[] files, Action`2<long, SocketError> callback);
    public static SocketError SendToAsync(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, SocketAddress socketAddress, OverlappedAsyncResult asyncResult);
    public static SocketError ReceiveAsync(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public static SocketError ReceiveAsync(SafeCloseSocket handle, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, OverlappedAsyncResult asyncResult);
    public static SocketError ReceiveFromAsync(SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, SocketAddress socketAddress, OverlappedAsyncResult asyncResult);
    public static SocketError ReceiveMessageFromAsync(Socket socket, SafeCloseSocket handle, Byte[] buffer, int offset, int count, SocketFlags socketFlags, SocketAddress socketAddress, ReceiveMessageOverlappedAsyncResult asyncResult);
    public static SocketError AcceptAsync(Socket socket, SafeCloseSocket handle, SafeCloseSocket acceptHandle, int receiveSize, int socketAddressSize, AcceptOverlappedAsyncResult asyncResult);
    internal static SocketError DisconnectAsync(Socket socket, SafeCloseSocket handle, bool reuseSocket, DisconnectOverlappedAsyncResult asyncResult);
    internal static SocketError Disconnect(Socket socket, SafeCloseSocket handle, bool reuseSocket);
}
public class System.Net.Sockets.SocketReceiveFromResult : ValueType {
    public int ReceivedBytes;
    public EndPoint RemoteEndPoint;
}
public class System.Net.Sockets.SocketReceiveMessageFromResult : ValueType {
    public int ReceivedBytes;
    public SocketFlags SocketFlags;
    public EndPoint RemoteEndPoint;
    public IPPacketInformation PacketInformation;
}
public enum System.Net.Sockets.SocketShutdown : Enum {
    public int value__;
    public static SocketShutdown Receive;
    public static SocketShutdown Send;
    public static SocketShutdown Both;
}
[ExtensionAttribute]
public static class System.Net.Sockets.SocketTaskExtensions : object {
    [ExtensionAttribute]
public static Task`1<Socket> AcceptAsync(Socket socket);
    [ExtensionAttribute]
public static Task`1<Socket> AcceptAsync(Socket socket, Socket acceptSocket);
    [ExtensionAttribute]
public static Task ConnectAsync(Socket socket, EndPoint remoteEP);
    [ExtensionAttribute]
public static Task ConnectAsync(Socket socket, IPAddress address, int port);
    [ExtensionAttribute]
public static Task ConnectAsync(Socket socket, IPAddress[] addresses, int port);
    [ExtensionAttribute]
public static Task ConnectAsync(Socket socket, string host, int port);
    [ExtensionAttribute]
public static Task`1<int> ReceiveAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    [ExtensionAttribute]
public static ValueTask`1<int> ReceiveAsync(Socket socket, Memory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ReceiveAsync(Socket socket, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    [ExtensionAttribute]
public static Task`1<SocketReceiveFromResult> ReceiveFromAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    [ExtensionAttribute]
public static Task`1<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    [ExtensionAttribute]
public static Task`1<int> SendAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    [ExtensionAttribute]
public static ValueTask`1<int> SendAsync(Socket socket, ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SendAsync(Socket socket, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    [ExtensionAttribute]
public static Task`1<int> SendToAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP);
}
public enum System.Net.Sockets.SocketType : Enum {
    public int value__;
    public static SocketType Stream;
    public static SocketType Dgram;
    public static SocketType Raw;
    public static SocketType Rdm;
    public static SocketType Seqpacket;
    public static SocketType Unknown;
}
public class System.Net.Sockets.TcpClient : object {
    private AddressFamily _family;
    private Socket _clientSocket;
    private NetworkStream _dataStream;
    private bool _cleanedUp;
    private bool _active;
    protected bool Active { get; protected set; }
    public int Available { get; }
    public Socket Client { get; public set; }
    public bool Connected { get; }
    public bool ExclusiveAddressUse { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public int SendBufferSize { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public LingerOption LingerState { get; public set; }
    public bool NoDelay { get; public set; }
    public TcpClient(AddressFamily family);
    public TcpClient(IPEndPoint localEP);
    public TcpClient(string hostname, int port);
    internal TcpClient(Socket acceptedSocket);
    protected bool get_Active();
    protected void set_Active(bool value);
    public int get_Available();
    public Socket get_Client();
    public void set_Client(Socket value);
    public bool get_Connected();
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public void Connect(string hostname, int port);
    public void Connect(IPAddress address, int port);
    public void Connect(IPEndPoint remoteEP);
    public void Connect(IPAddress[] ipAddresses, int port);
    public Task ConnectAsync(IPAddress address, int port);
    public Task ConnectAsync(string host, int port);
    public Task ConnectAsync(IPAddress[] addresses, int port);
    public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);
    public void EndConnect(IAsyncResult asyncResult);
    public NetworkStream GetStream();
    public void Close();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public LingerOption get_LingerState();
    public void set_LingerState(LingerOption value);
    public bool get_NoDelay();
    public void set_NoDelay(bool value);
    private void InitializeClientSocket();
}
public class System.Net.Sockets.TcpListener : object {
    private IPEndPoint _serverSocketEP;
    private Socket _serverSocket;
    private bool _active;
    private bool _exclusiveAddressUse;
    public Socket Server { get; }
    protected bool Active { get; }
    public EndPoint LocalEndpoint { get; }
    public bool ExclusiveAddressUse { get; public set; }
    public TcpListener(IPEndPoint localEP);
    public TcpListener(IPAddress localaddr, int port);
    [ObsoleteAttribute("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public TcpListener(int port);
    public Socket get_Server();
    protected bool get_Active();
    public EndPoint get_LocalEndpoint();
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public void AllowNatTraversal(bool allowed);
    public void Start();
    public void Start(int backlog);
    public void Stop();
    public bool Pending();
    public Socket AcceptSocket();
    public TcpClient AcceptTcpClient();
    public IAsyncResult BeginAcceptSocket(AsyncCallback callback, object state);
    public Socket EndAcceptSocket(IAsyncResult asyncResult);
    public IAsyncResult BeginAcceptTcpClient(AsyncCallback callback, object state);
    public TcpClient EndAcceptTcpClient(IAsyncResult asyncResult);
    public Task`1<Socket> AcceptSocketAsync();
    public Task`1<TcpClient> AcceptTcpClientAsync();
    public static TcpListener Create(int port);
}
[FlagsAttribute]
internal enum System.Net.Sockets.TrackedSocketOptions : Enum {
    public short value__;
    public static TrackedSocketOptions DontFragment;
    public static TrackedSocketOptions DualMode;
    public static TrackedSocketOptions EnableBroadcast;
    public static TrackedSocketOptions LingerState;
    public static TrackedSocketOptions NoDelay;
    public static TrackedSocketOptions ReceiveBufferSize;
    public static TrackedSocketOptions ReceiveTimeout;
    public static TrackedSocketOptions SendBufferSize;
    public static TrackedSocketOptions SendTimeout;
    public static TrackedSocketOptions Ttl;
}
[FlagsAttribute]
public enum System.Net.Sockets.TransmitFileOptions : Enum {
    public int value__;
    public static TransmitFileOptions UseDefaultWorkerThread;
    public static TransmitFileOptions Disconnect;
    public static TransmitFileOptions ReuseSocket;
    public static TransmitFileOptions WriteBehind;
    public static TransmitFileOptions UseSystemThread;
    public static TransmitFileOptions UseKernelApc;
}
public class System.Net.Sockets.UdpClient : object {
    private Socket _clientSocket;
    private bool _active;
    private Byte[] _buffer;
    private AddressFamily _family;
    private bool _cleanedUp;
    private bool _isBroadcast;
    protected bool Active { get; protected set; }
    public int Available { get; }
    public Socket Client { get; public set; }
    public short Ttl { get; public set; }
    public bool DontFragment { get; public set; }
    public bool MulticastLoopback { get; public set; }
    public bool EnableBroadcast { get; public set; }
    public bool ExclusiveAddressUse { get; public set; }
    public UdpClient(AddressFamily family);
    public UdpClient(int port);
    public UdpClient(int port, AddressFamily family);
    public UdpClient(IPEndPoint localEP);
    public UdpClient(string hostname, int port);
    protected bool get_Active();
    protected void set_Active(bool value);
    public int get_Available();
    public Socket get_Client();
    public void set_Client(Socket value);
    public short get_Ttl();
    public void set_Ttl(short value);
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
    public bool get_MulticastLoopback();
    public void set_MulticastLoopback(bool value);
    public bool get_EnableBroadcast();
    public void set_EnableBroadcast(bool value);
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public void AllowNatTraversal(bool allowed);
    private void FreeResources();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void CheckForBroadcast(IPAddress ipAddress);
    private bool IsBroadcast(IPAddress address);
    public IAsyncResult BeginSend(Byte[] datagram, int bytes, IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginSend(Byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginSend(Byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    public int EndSend(IAsyncResult asyncResult);
    public IAsyncResult BeginReceive(AsyncCallback requestCallback, object state);
    public Byte[] EndReceive(IAsyncResult asyncResult, IPEndPoint& remoteEP);
    public void JoinMulticastGroup(IPAddress multicastAddr);
    public void JoinMulticastGroup(IPAddress multicastAddr, IPAddress localAddress);
    public void JoinMulticastGroup(int ifindex, IPAddress multicastAddr);
    public void JoinMulticastGroup(IPAddress multicastAddr, int timeToLive);
    public void DropMulticastGroup(IPAddress multicastAddr);
    public void DropMulticastGroup(IPAddress multicastAddr, int ifindex);
    public Task`1<int> SendAsync(Byte[] datagram, int bytes);
    public Task`1<int> SendAsync(Byte[] datagram, int bytes, IPEndPoint endPoint);
    public Task`1<int> SendAsync(Byte[] datagram, int bytes, string hostname, int port);
    public Task`1<UdpReceiveResult> ReceiveAsync();
    private void CreateClientSocket();
    public void Close();
    public void Connect(string hostname, int port);
    public void Connect(IPAddress addr, int port);
    public void Connect(IPEndPoint endPoint);
    public Byte[] Receive(IPEndPoint& remoteEP);
    public int Send(Byte[] dgram, int bytes, IPEndPoint endPoint);
    public int Send(Byte[] dgram, int bytes, string hostname, int port);
    public int Send(Byte[] dgram, int bytes);
}
public class System.Net.Sockets.UdpReceiveResult : ValueType {
    private Byte[] _buffer;
    private IPEndPoint _remoteEndPoint;
    public Byte[] Buffer { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public UdpReceiveResult(Byte[] buffer, IPEndPoint remoteEndPoint);
    public Byte[] get_Buffer();
    public IPEndPoint get_RemoteEndPoint();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UdpReceiveResult other);
    public static bool op_Equality(UdpReceiveResult left, UdpReceiveResult right);
    public static bool op_Inequality(UdpReceiveResult left, UdpReceiveResult right);
}
public class System.Net.Sockets.UnixDomainSocketEndPoint : EndPoint {
    private static Encoding s_pathEncoding;
    private static Lazy`1<bool> s_udsSupported;
    private string _path;
    private Byte[] _encodedPath;
    private static int s_nativePathOffset;
    private static int s_nativePathLength;
    private static int s_nativeAddressSize;
    public AddressFamily AddressFamily { get; }
    public UnixDomainSocketEndPoint(string path);
    internal UnixDomainSocketEndPoint(SocketAddress socketAddress);
    private static UnixDomainSocketEndPoint();
    public virtual SocketAddress Serialize();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual AddressFamily get_AddressFamily();
    public virtual string ToString();
    private static bool IsAbstract(string path);
    private static bool IsAbstract(Byte[] encodedPath);
    private SocketAddress CreateSocketAddressForSerialize();
}
internal static class System.Net.TcpValidationHelpers : object {
    public static bool ValidatePortNumber(int port);
}
internal enum System.Net.TransportType : Enum {
    public int value__;
    public static TransportType Udp;
    public static TransportType Connectionless;
    public static TransportType Tcp;
    public static TransportType ConnectionOriented;
    public static TransportType All;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_invalidversion { get; }
    internal static string net_noseek { get; }
    internal static string net_invasync { get; }
    internal static string net_io_timeout_use_gt_zero { get; }
    internal static string net_notconnected { get; }
    internal static string net_notstream { get; }
    internal static string net_stopped { get; }
    internal static string net_udpconnected { get; }
    internal static string net_readonlystream { get; }
    internal static string net_writeonlystream { get; }
    internal static string net_InvalidAddressFamily { get; }
    internal static string net_InvalidEndPointAddressFamily { get; }
    internal static string net_InvalidSocketAddressSize { get; }
    internal static string net_invalidAddressList { get; }
    internal static string net_protocol_invalid_family { get; }
    internal static string net_protocol_invalid_multicast_family { get; }
    internal static string net_sockets_zerolist { get; }
    internal static string net_sockets_blocking { get; }
    internal static string net_sockets_useblocking { get; }
    internal static string net_sockets_select { get; }
    internal static string net_sockets_toolarge_select { get; }
    internal static string net_sockets_empty_select { get; }
    internal static string net_sockets_mustbind { get; }
    internal static string net_sockets_mustlisten { get; }
    internal static string net_sockets_mustnotlisten { get; }
    internal static string net_sockets_mustnotbebound { get; }
    internal static string net_sockets_invalid_ipaddress_length { get; }
    internal static string net_sockets_invalid_optionValue { get; }
    internal static string net_sockets_invalid_optionValue_all { get; }
    internal static string net_sockets_invalid_dnsendpoint { get; }
    internal static string net_sockets_disconnectedConnect { get; }
    internal static string net_sockets_disconnectedAccept { get; }
    internal static string net_tcplistener_mustbestopped { get; }
    internal static string net_socketopinprogress { get; }
    internal static string net_buffercounttoosmall { get; }
    internal static string net_multibuffernotsupported { get; }
    internal static string net_ambiguousbuffers { get; }
    internal static string net_io_writefailure { get; }
    internal static string net_io_readfailure { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_value_cannot_be_negative { get; }
    internal static string ArgumentOutOfRange_Bounds_Lower_Upper { get; }
    internal static string net_sockets_connect_multiconnect_notsupported { get; }
    internal static string net_sockets_dualmode_receivefrom_notsupported { get; }
    internal static string net_sockets_accept_receive_notsupported { get; }
    internal static string net_sockets_duplicateandclose_notsupported { get; }
    internal static string net_sockets_transmitfileoptions_notsupported { get; }
    internal static string ArgumentOutOfRange_PathLengthInvalid { get; }
    internal static string net_io_readwritefailure { get; }
    internal static string PlatformNotSupported_AcceptSocket { get; }
    internal static string PlatformNotSupported_IOControl { get; }
    internal static string PlatformNotSupported_IPProtectionLevel { get; }
    internal static string InvalidOperation_BufferNotExplicitArray { get; }
    internal static string InvalidOperation_IncorrectToken { get; }
    internal static string InvalidOperation_MultipleContinuations { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_invalidversion();
    internal static string get_net_noseek();
    internal static string get_net_invasync();
    internal static string get_net_io_timeout_use_gt_zero();
    internal static string get_net_notconnected();
    internal static string get_net_notstream();
    internal static string get_net_stopped();
    internal static string get_net_udpconnected();
    internal static string get_net_readonlystream();
    internal static string get_net_writeonlystream();
    internal static string get_net_InvalidAddressFamily();
    internal static string get_net_InvalidEndPointAddressFamily();
    internal static string get_net_InvalidSocketAddressSize();
    internal static string get_net_invalidAddressList();
    internal static string get_net_protocol_invalid_family();
    internal static string get_net_protocol_invalid_multicast_family();
    internal static string get_net_sockets_zerolist();
    internal static string get_net_sockets_blocking();
    internal static string get_net_sockets_useblocking();
    internal static string get_net_sockets_select();
    internal static string get_net_sockets_toolarge_select();
    internal static string get_net_sockets_empty_select();
    internal static string get_net_sockets_mustbind();
    internal static string get_net_sockets_mustlisten();
    internal static string get_net_sockets_mustnotlisten();
    internal static string get_net_sockets_mustnotbebound();
    internal static string get_net_sockets_invalid_ipaddress_length();
    internal static string get_net_sockets_invalid_optionValue();
    internal static string get_net_sockets_invalid_optionValue_all();
    internal static string get_net_sockets_invalid_dnsendpoint();
    internal static string get_net_sockets_disconnectedConnect();
    internal static string get_net_sockets_disconnectedAccept();
    internal static string get_net_tcplistener_mustbestopped();
    internal static string get_net_socketopinprogress();
    internal static string get_net_buffercounttoosmall();
    internal static string get_net_multibuffernotsupported();
    internal static string get_net_ambiguousbuffers();
    internal static string get_net_io_writefailure();
    internal static string get_net_io_readfailure();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_value_cannot_be_negative();
    internal static string get_ArgumentOutOfRange_Bounds_Lower_Upper();
    internal static string get_net_sockets_connect_multiconnect_notsupported();
    internal static string get_net_sockets_dualmode_receivefrom_notsupported();
    internal static string get_net_sockets_accept_receive_notsupported();
    internal static string get_net_sockets_duplicateandclose_notsupported();
    internal static string get_net_sockets_transmitfileoptions_notsupported();
    internal static string get_ArgumentOutOfRange_PathLengthInvalid();
    internal static string get_net_io_readwritefailure();
    internal static string get_PlatformNotSupported_AcceptSocket();
    internal static string get_PlatformNotSupported_IOControl();
    internal static string get_PlatformNotSupported_IPProtectionLevel();
    internal static string get_InvalidOperation_BufferNotExplicitArray();
    internal static string get_InvalidOperation_IncorrectToken();
    internal static string get_InvalidOperation_MultipleContinuations();
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
