internal static class FxResources.System.Net.WebClient.SR : object {
}
internal class System.IO.ChunkedMemoryStream : Stream {
    private MemoryChunk _headChunk;
    private MemoryChunk _currentChunk;
    private int _totalLength;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public Byte[] ToArray();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private void AppendChunk(long count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
public class System.Net.DownloadDataCompletedEventArgs : AsyncCompletedEventArgs {
    private Byte[] _result;
    public Byte[] Result { get; }
    internal DownloadDataCompletedEventArgs(Byte[] result, Exception exception, bool cancelled, object userToken);
    public Byte[] get_Result();
}
public class System.Net.DownloadDataCompletedEventHandler : MulticastDelegate {
    public DownloadDataCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadDataCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadDataCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.DownloadProgressChangedEventArgs : ProgressChangedEventArgs {
    [CompilerGeneratedAttribute]
private long <BytesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytesToReceive>k__BackingField;
    public long BytesReceived { get; }
    public long TotalBytesToReceive { get; }
    internal DownloadProgressChangedEventArgs(int progressPercentage, object userToken, long bytesReceived, long totalBytesToReceive);
    [CompilerGeneratedAttribute]
public long get_BytesReceived();
    [CompilerGeneratedAttribute]
public long get_TotalBytesToReceive();
}
public class System.Net.DownloadProgressChangedEventHandler : MulticastDelegate {
    public DownloadProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.DownloadStringCompletedEventArgs : AsyncCompletedEventArgs {
    private string _result;
    public string Result { get; }
    internal DownloadStringCompletedEventArgs(string result, Exception exception, bool cancelled, object userToken);
    public string get_Result();
}
public class System.Net.DownloadStringCompletedEventHandler : MulticastDelegate {
    public DownloadStringCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadStringCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadStringCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Net.Http.DelegatingStream : Stream {
    private Stream _innerStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public bool CanTimeout { get; }
    public int WriteTimeout { get; public set; }
    protected DelegatingStream(Stream innerStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual bool get_CanTimeout();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    public virtual int ReadByte();
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual void WriteByte(byte value);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
}
public class System.Net.OpenReadCompletedEventArgs : AsyncCompletedEventArgs {
    private Stream _result;
    public Stream Result { get; }
    internal OpenReadCompletedEventArgs(Stream result, Exception exception, bool cancelled, object userToken);
    public Stream get_Result();
}
public class System.Net.OpenReadCompletedEventHandler : MulticastDelegate {
    public OpenReadCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OpenReadCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OpenReadCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.OpenWriteCompletedEventArgs : AsyncCompletedEventArgs {
    private Stream _result;
    public Stream Result { get; }
    internal OpenWriteCompletedEventArgs(Stream result, Exception exception, bool cancelled, object userToken);
    public Stream get_Result();
}
public class System.Net.OpenWriteCompletedEventHandler : MulticastDelegate {
    public OpenWriteCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OpenWriteCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OpenWriteCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadDataCompletedEventArgs : AsyncCompletedEventArgs {
    private Byte[] _result;
    public Byte[] Result { get; }
    internal UploadDataCompletedEventArgs(Byte[] result, Exception exception, bool cancelled, object userToken);
    public Byte[] get_Result();
}
public class System.Net.UploadDataCompletedEventHandler : MulticastDelegate {
    public UploadDataCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadDataCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadDataCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadFileCompletedEventArgs : AsyncCompletedEventArgs {
    private Byte[] _result;
    public Byte[] Result { get; }
    internal UploadFileCompletedEventArgs(Byte[] result, Exception exception, bool cancelled, object userToken);
    public Byte[] get_Result();
}
public class System.Net.UploadFileCompletedEventHandler : MulticastDelegate {
    public UploadFileCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadFileCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadFileCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadProgressChangedEventArgs : ProgressChangedEventArgs {
    [CompilerGeneratedAttribute]
private long <BytesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytesToReceive>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesSent>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytesToSend>k__BackingField;
    public long BytesReceived { get; }
    public long TotalBytesToReceive { get; }
    public long BytesSent { get; }
    public long TotalBytesToSend { get; }
    internal UploadProgressChangedEventArgs(int progressPercentage, object userToken, long bytesSent, long totalBytesToSend, long bytesReceived, long totalBytesToReceive);
    [CompilerGeneratedAttribute]
public long get_BytesReceived();
    [CompilerGeneratedAttribute]
public long get_TotalBytesToReceive();
    [CompilerGeneratedAttribute]
public long get_BytesSent();
    [CompilerGeneratedAttribute]
public long get_TotalBytesToSend();
}
public class System.Net.UploadProgressChangedEventHandler : MulticastDelegate {
    public UploadProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadStringCompletedEventArgs : AsyncCompletedEventArgs {
    private string _result;
    public string Result { get; }
    internal UploadStringCompletedEventArgs(string result, Exception exception, bool cancelled, object userToken);
    public string get_Result();
}
public class System.Net.UploadStringCompletedEventHandler : MulticastDelegate {
    public UploadStringCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadStringCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadStringCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadValuesCompletedEventArgs : AsyncCompletedEventArgs {
    private Byte[] _result;
    public Byte[] Result { get; }
    internal UploadValuesCompletedEventArgs(Byte[] result, Exception exception, bool cancelled, object userToken);
    public Byte[] get_Result();
}
public class System.Net.UploadValuesCompletedEventHandler : MulticastDelegate {
    public UploadValuesCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadValuesCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadValuesCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.WebClient : Component {
    private Uri _baseAddress;
    private ICredentials _credentials;
    private WebHeaderCollection _headers;
    private NameValueCollection _requestParameters;
    private WebResponse _webResponse;
    private WebRequest _webRequest;
    private Encoding _encoding;
    private string _method;
    private long _contentLength;
    private bool _initWebClientAsync;
    private bool _canceled;
    private ProgressData _progress;
    private IWebProxy _proxy;
    private bool _proxySet;
    private int _callNesting;
    private AsyncOperation _asyncOp;
    private SendOrPostCallback _downloadDataOperationCompleted;
    private SendOrPostCallback _openReadOperationCompleted;
    private SendOrPostCallback _openWriteOperationCompleted;
    private SendOrPostCallback _downloadStringOperationCompleted;
    private SendOrPostCallback _downloadFileOperationCompleted;
    private SendOrPostCallback _uploadStringOperationCompleted;
    private SendOrPostCallback _uploadDataOperationCompleted;
    private SendOrPostCallback _uploadFileOperationCompleted;
    private SendOrPostCallback _uploadValuesOperationCompleted;
    private SendOrPostCallback _reportDownloadProgressChanged;
    private SendOrPostCallback _reportUploadProgressChanged;
    [CompilerGeneratedAttribute]
private DownloadStringCompletedEventHandler DownloadStringCompleted;
    [CompilerGeneratedAttribute]
private DownloadDataCompletedEventHandler DownloadDataCompleted;
    [CompilerGeneratedAttribute]
private AsyncCompletedEventHandler DownloadFileCompleted;
    [CompilerGeneratedAttribute]
private UploadStringCompletedEventHandler UploadStringCompleted;
    [CompilerGeneratedAttribute]
private UploadDataCompletedEventHandler UploadDataCompleted;
    [CompilerGeneratedAttribute]
private UploadFileCompletedEventHandler UploadFileCompleted;
    [CompilerGeneratedAttribute]
private UploadValuesCompletedEventHandler UploadValuesCompleted;
    [CompilerGeneratedAttribute]
private OpenReadCompletedEventHandler OpenReadCompleted;
    [CompilerGeneratedAttribute]
private OpenWriteCompletedEventHandler OpenWriteCompleted;
    [CompilerGeneratedAttribute]
private DownloadProgressChangedEventHandler DownloadProgressChanged;
    [CompilerGeneratedAttribute]
private UploadProgressChangedEventHandler UploadProgressChanged;
    [CompilerGeneratedAttribute]
private RequestCachePolicy <CachePolicy>k__BackingField;
    private static Char[] s_parseContentTypeSeparators;
    private static Encoding[] s_knownEncodings;
    [CompilerGeneratedAttribute]
private bool <AllowReadStreamBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowWriteStreamBuffering>k__BackingField;
    public Encoding Encoding { get; public set; }
    public string BaseAddress { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public NameValueCollection QueryString { get; public set; }
    public WebHeaderCollection ResponseHeaders { get; }
    public IWebProxy Proxy { get; public set; }
    public RequestCachePolicy CachePolicy { get; public set; }
    public bool IsBusy { get; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public bool AllowReadStreamBuffering { get; public set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public bool AllowWriteStreamBuffering { get; public set; }
    private static WebClient();
    [CompilerGeneratedAttribute]
public void add_DownloadStringCompleted(DownloadStringCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DownloadStringCompleted(DownloadStringCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DownloadDataCompleted(DownloadDataCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DownloadDataCompleted(DownloadDataCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DownloadFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DownloadFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UploadStringCompleted(UploadStringCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UploadStringCompleted(UploadStringCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UploadDataCompleted(UploadDataCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UploadDataCompleted(UploadDataCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UploadFileCompleted(UploadFileCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UploadFileCompleted(UploadFileCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UploadValuesCompleted(UploadValuesCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UploadValuesCompleted(UploadValuesCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_OpenReadCompleted(OpenReadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OpenReadCompleted(OpenReadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_OpenWriteCompleted(OpenWriteCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OpenWriteCompleted(OpenWriteCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UploadProgressChanged(UploadProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UploadProgressChanged(UploadProgressChangedEventHandler value);
    protected virtual void OnDownloadStringCompleted(DownloadStringCompletedEventArgs e);
    protected virtual void OnDownloadDataCompleted(DownloadDataCompletedEventArgs e);
    protected virtual void OnDownloadFileCompleted(AsyncCompletedEventArgs e);
    protected virtual void OnDownloadProgressChanged(DownloadProgressChangedEventArgs e);
    protected virtual void OnUploadStringCompleted(UploadStringCompletedEventArgs e);
    protected virtual void OnUploadDataCompleted(UploadDataCompletedEventArgs e);
    protected virtual void OnUploadFileCompleted(UploadFileCompletedEventArgs e);
    protected virtual void OnUploadValuesCompleted(UploadValuesCompletedEventArgs e);
    protected virtual void OnUploadProgressChanged(UploadProgressChangedEventArgs e);
    protected virtual void OnOpenReadCompleted(OpenReadCompletedEventArgs e);
    protected virtual void OnOpenWriteCompleted(OpenWriteCompletedEventArgs e);
    private void StartOperation();
    private AsyncOperation StartAsyncOperation(object userToken);
    private void EndOperation();
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_BaseAddress();
    public void set_BaseAddress(string value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public WebHeaderCollection get_Headers();
    public void set_Headers(WebHeaderCollection value);
    public NameValueCollection get_QueryString();
    public void set_QueryString(NameValueCollection value);
    public WebHeaderCollection get_ResponseHeaders();
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public RequestCachePolicy get_CachePolicy();
    [CompilerGeneratedAttribute]
public void set_CachePolicy(RequestCachePolicy value);
    public bool get_IsBusy();
    protected virtual WebRequest GetWebRequest(Uri address);
    protected virtual WebResponse GetWebResponse(WebRequest request);
    protected virtual WebResponse GetWebResponse(WebRequest request, IAsyncResult result);
    [AsyncStateMachineAttribute("System.Net.WebClient/<GetWebResponseTaskAsync>d__112")]
private Task`1<WebResponse> GetWebResponseTaskAsync(WebRequest request);
    public Byte[] DownloadData(string address);
    public Byte[] DownloadData(Uri address);
    private Byte[] DownloadDataInternal(Uri address, WebRequest& request);
    public void DownloadFile(string address, string fileName);
    public void DownloadFile(Uri address, string fileName);
    public Stream OpenRead(string address);
    public Stream OpenRead(Uri address);
    public Stream OpenWrite(string address);
    public Stream OpenWrite(Uri address);
    public Stream OpenWrite(string address, string method);
    public Stream OpenWrite(Uri address, string method);
    public Byte[] UploadData(string address, Byte[] data);
    public Byte[] UploadData(Uri address, Byte[] data);
    public Byte[] UploadData(string address, string method, Byte[] data);
    public Byte[] UploadData(Uri address, string method, Byte[] data);
    private Byte[] UploadDataInternal(Uri address, string method, Byte[] data, WebRequest& request);
    private void OpenFileInternal(bool needsHeaderAndBoundary, string fileName, FileStream& fs, Byte[]& buffer, Byte[]& formHeaderBytes, Byte[]& boundaryBytes);
    public Byte[] UploadFile(string address, string fileName);
    public Byte[] UploadFile(Uri address, string fileName);
    public Byte[] UploadFile(string address, string method, string fileName);
    public Byte[] UploadFile(Uri address, string method, string fileName);
    private Byte[] GetValuesToUpload(NameValueCollection data);
    public Byte[] UploadValues(string address, NameValueCollection data);
    public Byte[] UploadValues(Uri address, NameValueCollection data);
    public Byte[] UploadValues(string address, string method, NameValueCollection data);
    public Byte[] UploadValues(Uri address, string method, NameValueCollection data);
    public string UploadString(string address, string data);
    public string UploadString(Uri address, string data);
    public string UploadString(string address, string method, string data);
    public string UploadString(Uri address, string method, string data);
    public string DownloadString(string address);
    public string DownloadString(Uri address);
    private static void AbortRequest(WebRequest request);
    private void CopyHeadersTo(WebRequest request);
    private Uri GetUri(string address);
    private Uri GetUri(Uri address);
    private Byte[] DownloadBits(WebRequest request, Stream writeStream);
    [AsyncStateMachineAttribute("System.Net.WebClient/<DownloadBitsAsync>d__150")]
private void DownloadBitsAsync(WebRequest request, Stream writeStream, AsyncOperation asyncOp, Action`3<Byte[], Exception, AsyncOperation> completionDelegate);
    private Byte[] UploadBits(WebRequest request, Stream readStream, Byte[] buffer, int chunkSize, Byte[] header, Byte[] footer);
    [AsyncStateMachineAttribute("System.Net.WebClient/<UploadBitsAsync>d__152")]
private void UploadBitsAsync(WebRequest request, Stream readStream, Byte[] buffer, int chunkSize, Byte[] header, Byte[] footer, AsyncOperation asyncOp, Action`3<Byte[], Exception, AsyncOperation> completionDelegate);
    private static bool ByteArrayHasPrefix(Byte[] prefix, Byte[] byteArray);
    private string GetStringUsingEncoding(WebRequest request, Byte[] data);
    private string MapToDefaultMethod(Uri address);
    private static string UrlEncode(string str);
    private static Byte[] UrlEncodeBytesToBytesInternal(Byte[] bytes, int offset, int count, bool alwaysCreateReturnValue);
    private static char IntToHex(int n);
    private static bool IsSafe(char ch);
    private void InvokeOperationCompleted(AsyncOperation asyncOp, SendOrPostCallback callback, AsyncCompletedEventArgs eventArgs);
    public void OpenReadAsync(Uri address);
    public void OpenReadAsync(Uri address, object userToken);
    public void OpenWriteAsync(Uri address);
    public void OpenWriteAsync(Uri address, string method);
    public void OpenWriteAsync(Uri address, string method, object userToken);
    private void DownloadStringAsyncCallback(Byte[] returnBytes, Exception exception, object state);
    public void DownloadStringAsync(Uri address);
    public void DownloadStringAsync(Uri address, object userToken);
    private void DownloadDataAsyncCallback(Byte[] returnBytes, Exception exception, object state);
    public void DownloadDataAsync(Uri address);
    public void DownloadDataAsync(Uri address, object userToken);
    private void DownloadFileAsyncCallback(Byte[] returnBytes, Exception exception, object state);
    public void DownloadFileAsync(Uri address, string fileName);
    public void DownloadFileAsync(Uri address, string fileName, object userToken);
    public void UploadStringAsync(Uri address, string data);
    public void UploadStringAsync(Uri address, string method, string data);
    public void UploadStringAsync(Uri address, string method, string data, object userToken);
    public void UploadDataAsync(Uri address, Byte[] data);
    public void UploadDataAsync(Uri address, string method, Byte[] data);
    public void UploadDataAsync(Uri address, string method, Byte[] data, object userToken);
    public void UploadFileAsync(Uri address, string fileName);
    public void UploadFileAsync(Uri address, string method, string fileName);
    public void UploadFileAsync(Uri address, string method, string fileName, object userToken);
    public void UploadValuesAsync(Uri address, NameValueCollection data);
    public void UploadValuesAsync(Uri address, string method, NameValueCollection data);
    public void UploadValuesAsync(Uri address, string method, NameValueCollection data, object userToken);
    private static Exception GetExceptionToPropagate(Exception e);
    public void CancelAsync();
    public Task`1<string> DownloadStringTaskAsync(string address);
    public Task`1<string> DownloadStringTaskAsync(Uri address);
    public Task`1<Stream> OpenReadTaskAsync(string address);
    public Task`1<Stream> OpenReadTaskAsync(Uri address);
    public Task`1<Stream> OpenWriteTaskAsync(string address);
    public Task`1<Stream> OpenWriteTaskAsync(Uri address);
    public Task`1<Stream> OpenWriteTaskAsync(string address, string method);
    public Task`1<Stream> OpenWriteTaskAsync(Uri address, string method);
    public Task`1<string> UploadStringTaskAsync(string address, string data);
    public Task`1<string> UploadStringTaskAsync(Uri address, string data);
    public Task`1<string> UploadStringTaskAsync(string address, string method, string data);
    public Task`1<string> UploadStringTaskAsync(Uri address, string method, string data);
    public Task`1<Byte[]> DownloadDataTaskAsync(string address);
    public Task`1<Byte[]> DownloadDataTaskAsync(Uri address);
    public Task DownloadFileTaskAsync(string address, string fileName);
    public Task DownloadFileTaskAsync(Uri address, string fileName);
    public Task`1<Byte[]> UploadDataTaskAsync(string address, Byte[] data);
    public Task`1<Byte[]> UploadDataTaskAsync(Uri address, Byte[] data);
    public Task`1<Byte[]> UploadDataTaskAsync(string address, string method, Byte[] data);
    public Task`1<Byte[]> UploadDataTaskAsync(Uri address, string method, Byte[] data);
    public Task`1<Byte[]> UploadFileTaskAsync(string address, string fileName);
    public Task`1<Byte[]> UploadFileTaskAsync(Uri address, string fileName);
    public Task`1<Byte[]> UploadFileTaskAsync(string address, string method, string fileName);
    public Task`1<Byte[]> UploadFileTaskAsync(Uri address, string method, string fileName);
    public Task`1<Byte[]> UploadValuesTaskAsync(string address, NameValueCollection data);
    public Task`1<Byte[]> UploadValuesTaskAsync(string address, string method, NameValueCollection data);
    public Task`1<Byte[]> UploadValuesTaskAsync(Uri address, NameValueCollection data);
    public Task`1<Byte[]> UploadValuesTaskAsync(Uri address, string method, NameValueCollection data);
    private void HandleCompletion(TaskCompletionSource`1<T> tcs, TAsyncCompletedEventArgs e, Func`2<TAsyncCompletedEventArgs, T> getResult, TCompletionDelegate handler, Action`2<WebClient, TCompletionDelegate> unregisterHandler);
    private void PostProgressChanged(AsyncOperation asyncOp, ProgressData progress);
    private static void ThrowIfNull(object argument, string parameterName);
    [CompilerGeneratedAttribute]
public bool get_AllowReadStreamBuffering();
    [CompilerGeneratedAttribute]
public void set_AllowReadStreamBuffering(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowWriteStreamBuffering();
    [CompilerGeneratedAttribute]
public void set_AllowWriteStreamBuffering(bool value);
    public void add_WriteStreamClosed(WriteStreamClosedEventHandler value);
    public void remove_WriteStreamClosed(WriteStreamClosedEventHandler value);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
protected virtual void OnWriteStreamClosed(WriteStreamClosedEventArgs e);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_0(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_1(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_2(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_3(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_4(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_5(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_6(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_7(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_8(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_9(object arg);
    [CompilerGeneratedAttribute]
private void <StartAsyncOperation>b__78_10(object arg);
    [CompilerGeneratedAttribute]
private void <UploadStringAsync>b__179_0(Byte[] bytesResult, Exception error, AsyncOperation uploadAsyncOp);
}
[EditorBrowsableAttribute("1")]
public class System.Net.WriteStreamClosedEventArgs : EventArgs {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public Exception Error { get; }
    public Exception get_Error();
}
[EditorBrowsableAttribute("1")]
public class System.Net.WriteStreamClosedEventHandler : MulticastDelegate {
    public WriteStreamClosedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WriteStreamClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WriteStreamClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_webclient { get; }
    internal static string net_webclient_ContentType { get; }
    internal static string net_webclient_Multipart { get; }
    internal static string net_webclient_no_concurrent_io_allowed { get; }
    internal static string net_webclient_invalid_baseaddress { get; }
    internal static string net_webstatus_MessageLengthLimitExceeded { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    internal static string GetResourceString(string resourceKey, string defaultString);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_webclient();
    internal static string get_net_webclient_ContentType();
    internal static string get_net_webclient_Multipart();
    internal static string get_net_webclient_no_concurrent_io_allowed();
    internal static string get_net_webclient_invalid_baseaddress();
    internal static string get_net_webstatus_MessageLengthLimitExceeded();
}
internal class System.Threading.Tasks.BeginEndAwaitableAdapter : RendezvousAwaitable`1<IAsyncResult> {
    public static AsyncCallback Callback;
    private static BeginEndAwaitableAdapter();
}
internal class System.Threading.Tasks.RendezvousAwaitable`1 : object {
    private static Action s_completionSentinel;
    private Action _continuation;
    private ExceptionDispatchInfo _error;
    private TResult _result;
    [CompilerGeneratedAttribute]
private bool <RunContinuationsAsynchronously>k__BackingField;
    public bool RunContinuationsAsynchronously { get; public set; }
    public bool IsCompleted { get; }
    private static RendezvousAwaitable`1();
    [CompilerGeneratedAttribute]
public bool get_RunContinuationsAsynchronously();
    [CompilerGeneratedAttribute]
public void set_RunContinuationsAsynchronously(bool value);
    public RendezvousAwaitable`1<TResult> GetAwaiter();
    public bool get_IsCompleted();
    public TResult GetResult();
    public void SetResult(TResult result);
    private void NotifyAwaiter();
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual void UnsafeOnCompleted(Action continuation);
}
