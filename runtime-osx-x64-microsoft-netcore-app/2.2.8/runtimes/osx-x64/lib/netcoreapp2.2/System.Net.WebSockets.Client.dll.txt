internal static class FxResources.System.Net.WebSockets.Client.SR : object {
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
}
public class System.Net.WebSockets.ClientWebSocket : WebSocket {
    private ClientWebSocketOptions _options;
    private WebSocketHandle _innerWebSocket;
    private int _state;
    public ClientWebSocketOptions Options { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public string SubProtocol { get; }
    public WebSocketState State { get; }
    public ClientWebSocketOptions get_Options();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual string get_SubProtocol();
    public virtual WebSocketState get_State();
    public Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ClientWebSocket/<ConnectAsyncCore>d__16")]
private Task ConnectAsyncCore(Uri uri, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Abort();
    public virtual void Dispose();
    private void ThrowIfNotConnected();
}
public class System.Net.WebSockets.ClientWebSocketOptions : object {
    private bool _isReadOnly;
    private TimeSpan _keepAliveInterval;
    private bool _useDefaultCredentials;
    private ICredentials _credentials;
    private IWebProxy _proxy;
    private CookieContainer _cookies;
    private int _receiveBufferSize;
    private int _sendBufferSize;
    private Nullable`1<ArraySegment`1<byte>> _buffer;
    private RemoteCertificateValidationCallback _remoteCertificateValidationCallback;
    internal X509CertificateCollection _clientCertificates;
    internal WebHeaderCollection _requestHeaders;
    internal List`1<string> _requestedSubProtocols;
    internal WebHeaderCollection RequestHeaders { get; }
    internal List`1<string> RequestedSubProtocols { get; }
    public bool UseDefaultCredentials { get; public set; }
    public ICredentials Credentials { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public CookieContainer Cookies { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public void SetRequestHeader(string headerName, string headerValue);
    internal WebHeaderCollection get_RequestHeaders();
    internal List`1<string> get_RequestedSubProtocols();
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public CookieContainer get_Cookies();
    public void set_Cookies(CookieContainer value);
    public void AddSubProtocol(string subProtocol);
    public TimeSpan get_KeepAliveInterval();
    public void set_KeepAliveInterval(TimeSpan value);
    public void SetBuffer(int receiveBufferSize, int sendBufferSize);
    public void SetBuffer(int receiveBufferSize, int sendBufferSize, ArraySegment`1<byte> buffer);
    internal void SetToReadOnly();
    private void ThrowIfReadOnly();
}
internal class System.Net.WebSockets.WebSocketHandle : object {
    private static SocketsHttpHandler s_defaultHandler;
    private CancellationTokenSource _abortSource;
    private WebSocketState _state;
    private WebSocket _webSocket;
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    public static WebSocketHandle Create();
    public static bool IsValid(WebSocketHandle handle);
    public Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public string get_CloseStatusDescription();
    public WebSocketState get_State();
    public string get_SubProtocol();
    public static void CheckPlatformSupport();
    public void Dispose();
    public void Abort();
    public Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.WebSocketHandle/<ConnectAsyncCore>d__24")]
public Task ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options);
    private static void AddWebSocketHeaders(HttpRequestMessage request, string secKey, ClientWebSocketOptions options);
    private static KeyValuePair`2<string, string> CreateSecKeyAndSecWebSocketAccept();
    private static void ValidateHeader(HttpHeaders headers, string name, string expectedValue);
    private static void ThrowConnectFailure();
}
internal static class System.Net.WebSockets.WebSocketValidate : object {
    internal static void ValidateSubprotocol(string subProtocol);
    internal static void ValidateArraySegment(ArraySegment`1<byte> arraySegment, string parameterName);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_webstatus_ConnectFailure { get; }
    internal static string net_uri_NotAbsolute { get; }
    internal static string net_WebSockets_AcceptUnsupportedProtocol { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_TooSmall { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_InvalidEmptySubProtocol { get; }
    internal static string net_WebSockets_Scheme { get; }
    internal static string net_WebSockets_AlreadyStarted { get; }
    internal static string net_WebSockets_InvalidResponseHeader { get; }
    internal static string net_WebSockets_NotConnected { get; }
    internal static string net_WebSockets_NoDuplicateProtocol { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_webstatus_ConnectFailure();
    internal static string get_net_uri_NotAbsolute();
    internal static string get_net_WebSockets_AcceptUnsupportedProtocol();
    internal static string get_net_WebSockets_ArgumentOutOfRange_TooSmall();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_InvalidEmptySubProtocol();
    internal static string get_net_WebSockets_Scheme();
    internal static string get_net_WebSockets_AlreadyStarted();
    internal static string get_net_WebSockets_InvalidResponseHeader();
    internal static string get_net_WebSockets_NotConnected();
    internal static string get_net_WebSockets_NoDuplicateProtocol();
}
