internal static class FxResources.System.Net.WebSockets.SR : object {
}
internal class System.Net.WebSockets.ManagedWebSocket : WebSocket {
    private static RandomNumberGenerator s_random;
    private static UTF8Encoding s_textEncoding;
    private static WebSocketState[] s_validSendStates;
    private static WebSocketState[] s_validReceiveStates;
    private static WebSocketState[] s_validCloseOutputStates;
    private static WebSocketState[] s_validCloseStates;
    private static Task`1<WebSocketReceiveResult> s_cachedCloseTask;
    private Stream _stream;
    private bool _isServer;
    private string _subprotocol;
    private Timer _keepAliveTimer;
    private CancellationTokenSource _abortSource;
    private Memory`1<byte> _receiveBuffer;
    private Utf8MessageState _utf8TextState;
    private SemaphoreSlim _sendFrameAsyncLock;
    private WebSocketState _state;
    private bool _disposed;
    private bool _sentCloseFrame;
    private bool _receivedCloseFrame;
    private Nullable`1<WebSocketCloseStatus> _closeStatus;
    private string _closeStatusDescription;
    private MessageHeader _lastReceiveHeader;
    private int _receiveBufferOffset;
    private int _receiveBufferCount;
    private int _receivedMaskOffsetOffset;
    private Byte[] _sendBuffer;
    private bool _lastSendWasFragment;
    private Task _lastReceiveAsync;
    private object StateUpdateLock { get; }
    private object ReceiveAsyncLock { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    private ManagedWebSocket(Stream stream, bool isServer, string subprotocol, TimeSpan keepAliveInterval);
    private static ManagedWebSocket();
    public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    private Task ValidateAndReceiveAsync(Task receiveTask, Byte[] buffer, CancellationToken cancellationToken);
    public static ManagedWebSocket CreateFromConnectedStream(Stream stream, bool isServer, string subprotocol, TimeSpan keepAliveInterval);
    private object get_StateUpdateLock();
    private object get_ReceiveAsyncLock();
    public virtual void Dispose();
    private void DisposeCore();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    private ValueTask SendPrivateAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Abort();
    private ValueTask SendFrameAsync(MessageOpcode opcode, bool endOfMessage, ReadOnlyMemory`1<byte> payloadBuffer, CancellationToken cancellationToken);
    private ValueTask SendFrameLockAcquiredNonCancelableAsync(MessageOpcode opcode, bool endOfMessage, ReadOnlyMemory`1<byte> payloadBuffer);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<WaitForWriteTaskAsync>d__59")]
private Task WaitForWriteTaskAsync(ValueTask writeTask);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<SendFrameFallbackAsync>d__60")]
private Task SendFrameFallbackAsync(MessageOpcode opcode, bool endOfMessage, ReadOnlyMemory`1<byte> payloadBuffer, CancellationToken cancellationToken);
    private int WriteFrameToSendBuffer(MessageOpcode opcode, bool endOfMessage, ReadOnlySpan`1<byte> payloadBuffer);
    private void SendKeepAliveFrameAsync();
    private static int WriteHeader(MessageOpcode opcode, Byte[] sendBuffer, ReadOnlySpan`1<byte> payload, bool endOfMessage, bool useMask);
    private static void WriteRandomMask(Byte[] buffer, int offset);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<ReceiveAsyncPrivate>d__65`2")]
private ValueTask`1<TWebSocketReceiveResult> ReceiveAsyncPrivate(Memory`1<byte> payloadBuffer, CancellationToken cancellationToken, TWebSocketReceiveResultGetter resultGetter);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<HandleReceivedCloseAsync>d__66")]
private Task HandleReceivedCloseAsync(MessageHeader header, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<WaitForServerToCloseConnectionAsync>d__67")]
private Task WaitForServerToCloseConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<HandleReceivedPingPongAsync>d__68")]
private Task HandleReceivedPingPongAsync(MessageHeader header, CancellationToken cancellationToken);
    private static bool IsValidCloseStatus(WebSocketCloseStatus closeStatus);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<CloseWithReceiveErrorAndThrowAsync>d__70")]
private Task CloseWithReceiveErrorAndThrowAsync(WebSocketCloseStatus closeStatus, WebSocketError error, Exception innerException);
    private bool TryParseMessageHeaderFromReceiveBuffer(MessageHeader& resultHeader);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<CloseAsyncPrivate>d__72")]
private Task CloseAsyncPrivate(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<SendCloseFrameAsync>d__73")]
private Task SendCloseFrameAsync(WebSocketCloseStatus closeStatus, string closeStatusDescription, CancellationToken cancellationToken);
    private void ConsumeFromBuffer(int count);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<EnsureBufferContainsAsync>d__75")]
private Task EnsureBufferContainsAsync(int minimumRequiredBytes, CancellationToken cancellationToken, bool throwOnPrematureClosure);
    private void ThrowIfEOFUnexpected(bool throwOnPrematureClosure);
    private void AllocateSendBuffer(int minLength);
    private void ReleaseSendBuffer();
    private static int CombineMaskBytes(Span`1<byte> buffer, int maskOffset);
    private static int ApplyMask(Span`1<byte> toMask, Byte[] mask, int maskOffset, int maskOffsetIndex);
    private static int ApplyMask(Span`1<byte> toMask, int mask, int maskIndex);
    private void ThrowIfOperationInProgress(bool operationCompleted, string methodName);
    private void ThrowOperationInProgress(string methodName);
    private static Exception CreateOperationCanceledException(Exception innerException, CancellationToken cancellationToken);
    private static bool TryValidateUtf8(Span`1<byte> span, bool endOfMessage, Utf8MessageState state);
}
[IsReadOnlyAttribute]
public class System.Net.WebSockets.ValueWebSocketReceiveResult : ValueType {
    private UInt32 _countAndEndOfMessage;
    private WebSocketMessageType _messageType;
    public int Count { get; }
    public bool EndOfMessage { get; }
    public WebSocketMessageType MessageType { get; }
    public ValueWebSocketReceiveResult(int count, WebSocketMessageType messageType, bool endOfMessage);
    public int get_Count();
    public bool get_EndOfMessage();
    public WebSocketMessageType get_MessageType();
    private static void ThrowCountOutOfRange();
    private static void ThrowMessageTypeOutOfRange();
}
public abstract class System.Net.WebSockets.WebSocket : object {
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public string SubProtocol { get; }
    public WebSocketState State { get; }
    public static TimeSpan DefaultKeepAliveInterval { get; }
    public abstract virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public abstract virtual string get_CloseStatusDescription();
    public abstract virtual string get_SubProtocol();
    public abstract virtual WebSocketState get_State();
    public abstract virtual void Abort();
    public abstract virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public abstract virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public abstract virtual void Dispose();
    public abstract virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public abstract virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.WebSocket/<ReceiveAsync>d__14")]
public virtual ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.WebSocket/<SendWithArrayPoolAsync>d__16")]
private Task SendWithArrayPoolAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public static TimeSpan get_DefaultKeepAliveInterval();
    protected static void ThrowOnInvalidState(WebSocketState state, WebSocketState[] validStates);
    protected static bool IsStateTerminal(WebSocketState state);
    public static ArraySegment`1<byte> CreateClientBuffer(int receiveBufferSize, int sendBufferSize);
    public static ArraySegment`1<byte> CreateServerBuffer(int receiveBufferSize);
    public static WebSocket CreateFromStream(Stream stream, bool isServer, string subProtocol, TimeSpan keepAliveInterval);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.")]
public static bool IsApplicationTargeting45();
    [EditorBrowsableAttribute("1")]
public static void RegisterPrefixes();
    [EditorBrowsableAttribute("1")]
public static WebSocket CreateClientWebSocket(Stream innerStream, string subProtocol, int receiveBufferSize, int sendBufferSize, TimeSpan keepAliveInterval, bool useZeroMaskingKey, ArraySegment`1<byte> internalBuffer);
}
public enum System.Net.WebSockets.WebSocketCloseStatus : Enum {
    public int value__;
    public static WebSocketCloseStatus NormalClosure;
    public static WebSocketCloseStatus EndpointUnavailable;
    public static WebSocketCloseStatus ProtocolError;
    public static WebSocketCloseStatus InvalidMessageType;
    public static WebSocketCloseStatus Empty;
    public static WebSocketCloseStatus InvalidPayloadData;
    public static WebSocketCloseStatus PolicyViolation;
    public static WebSocketCloseStatus MessageTooBig;
    public static WebSocketCloseStatus MandatoryExtension;
    public static WebSocketCloseStatus InternalServerError;
}
public abstract class System.Net.WebSockets.WebSocketContext : object {
    public Uri RequestUri { get; }
    public NameValueCollection Headers { get; }
    public string Origin { get; }
    public IEnumerable`1<string> SecWebSocketProtocols { get; }
    public string SecWebSocketVersion { get; }
    public string SecWebSocketKey { get; }
    public CookieCollection CookieCollection { get; }
    public IPrincipal User { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public WebSocket WebSocket { get; }
    public abstract virtual Uri get_RequestUri();
    public abstract virtual NameValueCollection get_Headers();
    public abstract virtual string get_Origin();
    public abstract virtual IEnumerable`1<string> get_SecWebSocketProtocols();
    public abstract virtual string get_SecWebSocketVersion();
    public abstract virtual string get_SecWebSocketKey();
    public abstract virtual CookieCollection get_CookieCollection();
    public abstract virtual IPrincipal get_User();
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual bool get_IsLocal();
    public abstract virtual bool get_IsSecureConnection();
    public abstract virtual WebSocket get_WebSocket();
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public enum System.Net.WebSockets.WebSocketError : Enum {
    public int value__;
    public static WebSocketError Success;
    public static WebSocketError InvalidMessageType;
    public static WebSocketError Faulted;
    public static WebSocketError NativeError;
    public static WebSocketError NotAWebSocket;
    public static WebSocketError UnsupportedVersion;
    public static WebSocketError UnsupportedProtocol;
    public static WebSocketError HeaderError;
    public static WebSocketError ConnectionClosedPrematurely;
    public static WebSocketError InvalidState;
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Net.WebSockets.WebSocketException : Win32Exception {
    private WebSocketError _webSocketErrorCode;
    public int ErrorCode { get; }
    public WebSocketError WebSocketErrorCode { get; }
    public WebSocketException(WebSocketError error);
    public WebSocketException(WebSocketError error, string message);
    public WebSocketException(WebSocketError error, Exception innerException);
    public WebSocketException(WebSocketError error, string message, Exception innerException);
    public WebSocketException(int nativeError);
    public WebSocketException(int nativeError, string message);
    public WebSocketException(int nativeError, Exception innerException);
    public WebSocketException(WebSocketError error, int nativeError);
    public WebSocketException(WebSocketError error, int nativeError, string message);
    public WebSocketException(WebSocketError error, int nativeError, Exception innerException);
    public WebSocketException(WebSocketError error, int nativeError, string message, Exception innerException);
    public WebSocketException(string message);
    public WebSocketException(string message, Exception innerException);
    private WebSocketException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
    public WebSocketError get_WebSocketErrorCode();
    private static string GetErrorMessage(WebSocketError error);
    private void SetErrorCodeOnError(int nativeError);
    private static bool Succeeded(int hr);
}
public enum System.Net.WebSockets.WebSocketMessageType : Enum {
    public int value__;
    public static WebSocketMessageType Text;
    public static WebSocketMessageType Binary;
    public static WebSocketMessageType Close;
}
public class System.Net.WebSockets.WebSocketReceiveResult : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndOfMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private WebSocketMessageType <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WebSocketCloseStatus> <CloseStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseStatusDescription>k__BackingField;
    public int Count { get; }
    public bool EndOfMessage { get; }
    public WebSocketMessageType MessageType { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketReceiveResult(int count, WebSocketMessageType messageType, bool endOfMessage);
    public WebSocketReceiveResult(int count, WebSocketMessageType messageType, bool endOfMessage, Nullable`1<WebSocketCloseStatus> closeStatus, string closeStatusDescription);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public bool get_EndOfMessage();
    [CompilerGeneratedAttribute]
public WebSocketMessageType get_MessageType();
    [CompilerGeneratedAttribute]
public Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    [CompilerGeneratedAttribute]
public string get_CloseStatusDescription();
}
public enum System.Net.WebSockets.WebSocketState : Enum {
    public int value__;
    public static WebSocketState None;
    public static WebSocketState Connecting;
    public static WebSocketState Open;
    public static WebSocketState CloseSent;
    public static WebSocketState CloseReceived;
    public static WebSocketState Closed;
    public static WebSocketState Aborted;
}
internal static class System.Net.WebSockets.WebSocketValidate : object {
    internal static void ThrowIfInvalidState(WebSocketState currentState, bool isDisposed, WebSocketState[] validStates);
    internal static void ValidateSubprotocol(string subProtocol);
    internal static void ValidateCloseStatus(WebSocketCloseStatus closeStatus, string statusDescription);
    internal static void ValidateArraySegment(ArraySegment`1<byte> arraySegment, string parameterName);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_WebSockets_InvalidState { get; }
    internal static string net_WebSockets_Generic { get; }
    internal static string net_WebSockets_InvalidMessageType_Generic { get; }
    internal static string net_Websockets_WebSocketBaseFaulted { get; }
    internal static string net_WebSockets_NotAWebSocket_Generic { get; }
    internal static string net_WebSockets_UnsupportedWebSocketVersion_Generic { get; }
    internal static string net_WebSockets_UnsupportedProtocol_Generic { get; }
    internal static string net_WebSockets_HeaderError_Generic { get; }
    internal static string net_WebSockets_ConnectionClosedPrematurely_Generic { get; }
    internal static string net_WebSockets_InvalidState_Generic { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_TooSmall { get; }
    internal static string net_WebSockets_InvalidEmptySubProtocol { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_ReasonNotNull { get; }
    internal static string net_WebSockets_InvalidCloseStatusCode { get; }
    internal static string net_WebSockets_InvalidCloseStatusDescription { get; }
    internal static string net_WebSockets_Argument_InvalidMessageType { get; }
    internal static string net_Websockets_AlreadyOneOutstandingOperation { get; }
    internal static string NotReadableStream { get; }
    internal static string NotWriteableStream { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_WebSockets_InvalidState();
    internal static string get_net_WebSockets_Generic();
    internal static string get_net_WebSockets_InvalidMessageType_Generic();
    internal static string get_net_Websockets_WebSocketBaseFaulted();
    internal static string get_net_WebSockets_NotAWebSocket_Generic();
    internal static string get_net_WebSockets_UnsupportedWebSocketVersion_Generic();
    internal static string get_net_WebSockets_UnsupportedProtocol_Generic();
    internal static string get_net_WebSockets_HeaderError_Generic();
    internal static string get_net_WebSockets_ConnectionClosedPrematurely_Generic();
    internal static string get_net_WebSockets_InvalidState_Generic();
    internal static string get_net_WebSockets_ArgumentOutOfRange_TooSmall();
    internal static string get_net_WebSockets_InvalidEmptySubProtocol();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_ReasonNotNull();
    internal static string get_net_WebSockets_InvalidCloseStatusCode();
    internal static string get_net_WebSockets_InvalidCloseStatusDescription();
    internal static string get_net_WebSockets_Argument_InvalidMessageType();
    internal static string get_net_Websockets_AlreadyOneOutstandingOperation();
    internal static string get_NotReadableStream();
    internal static string get_NotWriteableStream();
}
