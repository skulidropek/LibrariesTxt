internal static class FxResources.System.Runtime.Numerics.SR : object {
}
internal class System.Globalization.FormatProvider : object {
    internal static void FormatBigInteger(ValueStringBuilder& sb, int precision, int scale, bool sign, ReadOnlySpan`1<char> format, NumberFormatInfo numberFormatInfo, Char[] digits, int startIndex);
    internal static bool TryStringToBigInteger(ReadOnlySpan`1<char> s, NumberStyles styles, NumberFormatInfo numberFormatInfo, StringBuilder receiver, Int32& precision, Int32& scale, Boolean& sign);
}
[TypeForwardedFromAttribute("System.Numerics, Version=4.0.0.0, PublicKeyToken=b77a5c561934e089")]
[IsReadOnlyAttribute]
public class System.Numerics.BigInteger : ValueType {
    internal int _sign;
    internal UInt32[] _bits;
    private static BigInteger s_bnMinInt;
    private static BigInteger s_bnOneInt;
    private static BigInteger s_bnZeroInt;
    private static BigInteger s_bnMinusOneInt;
    private static Byte[] s_success;
    public static BigInteger Zero { get; }
    public static BigInteger One { get; }
    public static BigInteger MinusOne { get; }
    public bool IsPowerOfTwo { get; }
    public bool IsZero { get; }
    public bool IsOne { get; }
    public bool IsEven { get; }
    public int Sign { get; }
    public BigInteger(int value);
    [CLSCompliantAttribute("False")]
public BigInteger(UInt32 value);
    public BigInteger(long value);
    [CLSCompliantAttribute("False")]
public BigInteger(ulong value);
    public BigInteger(float value);
    public BigInteger(double value);
    public BigInteger(decimal value);
    [CLSCompliantAttribute("False")]
public BigInteger(Byte[] value);
    public BigInteger(ReadOnlySpan`1<byte> value, bool isUnsigned, bool isBigEndian);
    internal BigInteger(int n, UInt32[] rgu);
    internal BigInteger(UInt32[] value, bool negative);
    private BigInteger(UInt32[] value);
    private static BigInteger();
    public static BigInteger get_Zero();
    public static BigInteger get_One();
    public static BigInteger get_MinusOne();
    public bool get_IsPowerOfTwo();
    public bool get_IsZero();
    public bool get_IsOne();
    public bool get_IsEven();
    public int get_Sign();
    public static BigInteger Parse(string value);
    public static BigInteger Parse(string value, NumberStyles style);
    public static BigInteger Parse(string value, IFormatProvider provider);
    public static BigInteger Parse(string value, NumberStyles style, IFormatProvider provider);
    public static bool TryParse(string value, BigInteger& result);
    public static bool TryParse(string value, NumberStyles style, IFormatProvider provider, BigInteger& result);
    public static BigInteger Parse(ReadOnlySpan`1<char> value, NumberStyles style, IFormatProvider provider);
    public static bool TryParse(ReadOnlySpan`1<char> value, BigInteger& result);
    public static bool TryParse(ReadOnlySpan`1<char> value, NumberStyles style, IFormatProvider provider, BigInteger& result);
    public static int Compare(BigInteger left, BigInteger right);
    public static BigInteger Abs(BigInteger value);
    public static BigInteger Add(BigInteger left, BigInteger right);
    public static BigInteger Subtract(BigInteger left, BigInteger right);
    public static BigInteger Multiply(BigInteger left, BigInteger right);
    public static BigInteger Divide(BigInteger dividend, BigInteger divisor);
    public static BigInteger Remainder(BigInteger dividend, BigInteger divisor);
    public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, BigInteger& remainder);
    public static BigInteger Negate(BigInteger value);
    public static double Log(BigInteger value);
    public static double Log(BigInteger value, double baseValue);
    public static double Log10(BigInteger value);
    public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right);
    private static BigInteger GreatestCommonDivisor(UInt32[] leftBits, UInt32[] rightBits);
    public static BigInteger Max(BigInteger left, BigInteger right);
    public static BigInteger Min(BigInteger left, BigInteger right);
    public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus);
    public static BigInteger Pow(BigInteger value, int exponent);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(long other);
    [CLSCompliantAttribute("False")]
public bool Equals(ulong other);
    public sealed virtual bool Equals(BigInteger other);
    public int CompareTo(long other);
    [CLSCompliantAttribute("False")]
public int CompareTo(ulong other);
    public sealed virtual int CompareTo(BigInteger other);
    public sealed virtual int CompareTo(object obj);
    public Byte[] ToByteArray();
    public Byte[] ToByteArray(bool isUnsigned, bool isBigEndian);
    public bool TryWriteBytes(Span`1<byte> destination, Int32& bytesWritten, bool isUnsigned, bool isBigEndian);
    internal bool TryWriteOrCountBytes(Span`1<byte> destination, Int32& bytesWritten, bool isUnsigned, bool isBigEndian);
    public int GetByteCount(bool isUnsigned);
    private Byte[] TryGetBytes(GetBytesMode mode, Span`1<byte> destination, bool isUnsigned, bool isBigEndian, Int32& bytesWritten);
    private UInt32[] ToUInt32Array();
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    private static BigInteger Add(UInt32[] leftBits, int leftSign, UInt32[] rightBits, int rightSign);
    public static BigInteger op_Subtraction(BigInteger left, BigInteger right);
    private static BigInteger Subtract(UInt32[] leftBits, int leftSign, UInt32[] rightBits, int rightSign);
    public static BigInteger op_Implicit(byte value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(sbyte value);
    public static BigInteger op_Implicit(short value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ushort value);
    public static BigInteger op_Implicit(int value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(UInt32 value);
    public static BigInteger op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ulong value);
    public static BigInteger op_Explicit(float value);
    public static BigInteger op_Explicit(double value);
    public static BigInteger op_Explicit(decimal value);
    public static byte op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(BigInteger value);
    public static short op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(BigInteger value);
    public static int op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(BigInteger value);
    public static long op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(BigInteger value);
    public static float op_Explicit(BigInteger value);
    public static double op_Explicit(BigInteger value);
    public static decimal op_Explicit(BigInteger value);
    public static BigInteger op_BitwiseAnd(BigInteger left, BigInteger right);
    public static BigInteger op_BitwiseOr(BigInteger left, BigInteger right);
    public static BigInteger op_ExclusiveOr(BigInteger left, BigInteger right);
    public static BigInteger op_LeftShift(BigInteger value, int shift);
    public static BigInteger op_RightShift(BigInteger value, int shift);
    public static BigInteger op_OnesComplement(BigInteger value);
    public static BigInteger op_UnaryNegation(BigInteger value);
    public static BigInteger op_UnaryPlus(BigInteger value);
    public static BigInteger op_Increment(BigInteger value);
    public static BigInteger op_Decrement(BigInteger value);
    public static BigInteger op_Addition(BigInteger left, BigInteger right);
    public static BigInteger op_Multiply(BigInteger left, BigInteger right);
    public static BigInteger op_Division(BigInteger dividend, BigInteger divisor);
    public static BigInteger op_Modulus(BigInteger dividend, BigInteger divisor);
    public static bool op_LessThan(BigInteger left, BigInteger right);
    public static bool op_LessThanOrEqual(BigInteger left, BigInteger right);
    public static bool op_GreaterThan(BigInteger left, BigInteger right);
    public static bool op_GreaterThanOrEqual(BigInteger left, BigInteger right);
    public static bool op_Equality(BigInteger left, BigInteger right);
    public static bool op_Inequality(BigInteger left, BigInteger right);
    public static bool op_LessThan(BigInteger left, long right);
    public static bool op_LessThanOrEqual(BigInteger left, long right);
    public static bool op_GreaterThan(BigInteger left, long right);
    public static bool op_GreaterThanOrEqual(BigInteger left, long right);
    public static bool op_Equality(BigInteger left, long right);
    public static bool op_Inequality(BigInteger left, long right);
    public static bool op_LessThan(long left, BigInteger right);
    public static bool op_LessThanOrEqual(long left, BigInteger right);
    public static bool op_GreaterThan(long left, BigInteger right);
    public static bool op_GreaterThanOrEqual(long left, BigInteger right);
    public static bool op_Equality(long left, BigInteger right);
    public static bool op_Inequality(long left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(ulong left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(ulong left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(ulong left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(ulong left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(ulong left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(ulong left, BigInteger right);
    private static bool GetPartsForBitManipulation(BigInteger& x, UInt32[]& xd, Int32& xl);
    internal static int GetDiffLength(UInt32[] rgu1, UInt32[] rgu2, int cu);
}
internal static class System.Numerics.BigIntegerCalculator : object {
    private static int ReducerThreshold;
    private static int SquareThreshold;
    private static int AllocationThreshold;
    private static int MultiplyThreshold;
    private static BigIntegerCalculator();
    public static UInt32[] Add(UInt32[] left, UInt32 right);
    public static UInt32[] Add(UInt32[] left, UInt32[] right);
    private static void Add(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength);
    private static void AddSelf(UInt32* left, int leftLength, UInt32* right, int rightLength);
    public static UInt32[] Subtract(UInt32[] left, UInt32 right);
    public static UInt32[] Subtract(UInt32[] left, UInt32[] right);
    private static void Subtract(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength);
    private static void SubtractSelf(UInt32* left, int leftLength, UInt32* right, int rightLength);
    public static int Compare(UInt32[] left, UInt32[] right);
    private static int Compare(UInt32* left, int leftLength, UInt32* right, int rightLength);
    public static UInt32[] Divide(UInt32[] left, UInt32 right, UInt32& remainder);
    public static UInt32[] Divide(UInt32[] left, UInt32 right);
    public static UInt32 Remainder(UInt32[] left, UInt32 right);
    public static UInt32[] Divide(UInt32[] left, UInt32[] right, UInt32[]& remainder);
    public static UInt32[] Divide(UInt32[] left, UInt32[] right);
    public static UInt32[] Remainder(UInt32[] left, UInt32[] right);
    private static void Divide(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength);
    private static UInt32 AddDivisor(UInt32* left, int leftLength, UInt32* right, int rightLength);
    private static UInt32 SubtractDivisor(UInt32* left, int leftLength, UInt32* right, int rightLength, ulong q);
    private static bool DivideGuessTooBig(ulong q, ulong valHi, UInt32 valLo, UInt32 divHi, UInt32 divLo);
    private static UInt32[] CreateCopy(UInt32[] value);
    private static int LeadingZeros(UInt32 value);
    public static UInt32 Gcd(UInt32 left, UInt32 right);
    public static ulong Gcd(ulong left, ulong right);
    public static UInt32 Gcd(UInt32[] left, UInt32 right);
    public static UInt32[] Gcd(UInt32[] left, UInt32[] right);
    private static void Gcd(BitsBuffer& left, BitsBuffer& right);
    private static void ExtractDigits(BitsBuffer& xBuffer, BitsBuffer& yBuffer, UInt64& x, UInt64& y);
    private static void LehmerCore(BitsBuffer& xBuffer, BitsBuffer& yBuffer, long a, long b, long c, long d);
    public static UInt32[] Pow(UInt32 value, UInt32 power);
    public static UInt32[] Pow(UInt32[] value, UInt32 power);
    private static UInt32[] PowCore(UInt32 power, BitsBuffer& value);
    private static int PowBound(UInt32 power, int valueLength, int resultLength);
    private static void PowCore(UInt32 power, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp);
    public static UInt32 Pow(UInt32 value, UInt32 power, UInt32 modulus);
    public static UInt32 Pow(UInt32[] value, UInt32 power, UInt32 modulus);
    public static UInt32 Pow(UInt32 value, UInt32[] power, UInt32 modulus);
    public static UInt32 Pow(UInt32[] value, UInt32[] power, UInt32 modulus);
    private static UInt32 PowCore(UInt32[] power, UInt32 modulus, ulong value, ulong result);
    private static UInt32 PowCore(UInt32 power, UInt32 modulus, ulong value, ulong result);
    public static UInt32[] Pow(UInt32 value, UInt32 power, UInt32[] modulus);
    public static UInt32[] Pow(UInt32[] value, UInt32 power, UInt32[] modulus);
    public static UInt32[] Pow(UInt32 value, UInt32[] power, UInt32[] modulus);
    public static UInt32[] Pow(UInt32[] value, UInt32[] power, UInt32[] modulus);
    private static UInt32[] PowCore(UInt32[] power, UInt32[] modulus, BitsBuffer& value);
    private static UInt32[] PowCore(UInt32 power, UInt32[] modulus, BitsBuffer& value);
    private static void PowCore(UInt32[] power, UInt32[] modulus, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp);
    private static void PowCore(UInt32 power, UInt32[] modulus, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp);
    private static void PowCore(UInt32[] power, FastReducer& reducer, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp);
    private static void PowCore(UInt32 power, FastReducer& reducer, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp);
    private static int ActualLength(UInt32[] value);
    private static int ActualLength(UInt32[] value, int length);
    public static UInt32[] Square(UInt32[] value);
    private static void Square(UInt32* value, int valueLength, UInt32* bits, int bitsLength);
    public static UInt32[] Multiply(UInt32[] left, UInt32 right);
    public static UInt32[] Multiply(UInt32[] left, UInt32[] right);
    private static void Multiply(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength);
    private static void SubtractCore(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* core, int coreLength);
}
internal static class System.Numerics.BigNumber : object {
    internal static bool TryValidateParseStyleInteger(NumberStyles style, ArgumentException& e);
    internal static bool TryParseBigInteger(string value, NumberStyles style, NumberFormatInfo info, BigInteger& result);
    internal static bool TryParseBigInteger(ReadOnlySpan`1<char> value, NumberStyles style, NumberFormatInfo info, BigInteger& result);
    internal static BigInteger ParseBigInteger(string value, NumberStyles style, NumberFormatInfo info);
    internal static BigInteger ParseBigInteger(ReadOnlySpan`1<char> value, NumberStyles style, NumberFormatInfo info);
    private static bool HexNumberToBigInteger(BigNumberBuffer& number, BigInteger& value);
    private static bool NumberToBigInteger(BigNumberBuffer& number, BigInteger& value);
    internal static char ParseFormatSpecifier(ReadOnlySpan`1<char> format, Int32& digits);
    private static string FormatBigIntegerToHex(bool targetSpan, BigInteger value, char format, int digits, NumberFormatInfo info, Span`1<char> destination, Int32& charsWritten, Boolean& spanSuccess);
    internal static string FormatBigInteger(BigInteger value, string format, NumberFormatInfo info);
    internal static bool TryFormatBigInteger(BigInteger value, ReadOnlySpan`1<char> format, NumberFormatInfo info, Span`1<char> destination, Int32& charsWritten);
    private static string FormatBigInteger(bool targetSpan, BigInteger value, string formatString, ReadOnlySpan`1<char> formatSpan, NumberFormatInfo info, Span`1<char> destination, Int32& charsWritten, Boolean& spanSuccess);
}
[TypeForwardedFromAttribute("System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Numerics.Complex : ValueType {
    public static Complex Zero;
    public static Complex One;
    public static Complex ImaginaryOne;
    private static double s_sqrtRescaleThreshold;
    private static double s_asinOverflowThreshold;
    private static double s_log2;
    private double m_real;
    private double m_imaginary;
    public double Real { get; }
    public double Imaginary { get; }
    public double Magnitude { get; }
    public double Phase { get; }
    public Complex(double real, double imaginary);
    private static Complex();
    public double get_Real();
    public double get_Imaginary();
    public double get_Magnitude();
    public double get_Phase();
    public static Complex FromPolarCoordinates(double magnitude, double phase);
    public static Complex Negate(Complex value);
    public static Complex Add(Complex left, Complex right);
    public static Complex Subtract(Complex left, Complex right);
    public static Complex Multiply(Complex left, Complex right);
    public static Complex Divide(Complex dividend, Complex divisor);
    public static Complex op_UnaryNegation(Complex value);
    public static Complex op_Addition(Complex left, Complex right);
    public static Complex op_Subtraction(Complex left, Complex right);
    public static Complex op_Multiply(Complex left, Complex right);
    public static Complex op_Division(Complex left, Complex right);
    public static double Abs(Complex value);
    private static double Hypot(double a, double b);
    private static double Log1P(double x);
    public static Complex Conjugate(Complex value);
    public static Complex Reciprocal(Complex value);
    public static bool op_Equality(Complex left, Complex right);
    public static bool op_Inequality(Complex left, Complex right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Complex value);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(string format);
    public string ToString(IFormatProvider provider);
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public static Complex Sin(Complex value);
    public static Complex Sinh(Complex value);
    public static Complex Asin(Complex value);
    public static Complex Cos(Complex value);
    public static Complex Cosh(Complex value);
    public static Complex Acos(Complex value);
    public static Complex Tan(Complex value);
    public static Complex Tanh(Complex value);
    public static Complex Atan(Complex value);
    private static void Asin_Internal(double x, double y, Double& b, Double& bPrime, Double& v);
    public static Complex Log(Complex value);
    public static Complex Log(Complex value, double baseValue);
    public static Complex Log10(Complex value);
    public static Complex Exp(Complex value);
    public static Complex Sqrt(Complex value);
    public static Complex Pow(Complex value, Complex power);
    public static Complex Pow(Complex value, double power);
    private static Complex Scale(Complex value, double factor);
    public static Complex op_Implicit(short value);
    public static Complex op_Implicit(int value);
    public static Complex op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(ushort value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(ulong value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(sbyte value);
    public static Complex op_Implicit(byte value);
    public static Complex op_Implicit(float value);
    public static Complex op_Implicit(double value);
    public static Complex op_Explicit(BigInteger value);
    public static Complex op_Explicit(decimal value);
}
internal class System.Numerics.DoubleUlong : ValueType {
    public double dbl;
    public ulong uu;
}
internal static class System.Numerics.NumericsHelpers : object {
    public static void GetDoubleParts(double dbl, Int32& sign, Int32& exp, UInt64& man, Boolean& fFinite);
    public static double GetDoubleFromParts(int sign, int exp, ulong man);
    public static void DangerousMakeTwosComplement(UInt32[] d);
    public static ulong MakeUlong(UInt32 uHi, UInt32 uLo);
    public static UInt32 Abs(int a);
    public static UInt32 CombineHash(UInt32 u1, UInt32 u2);
    public static int CombineHash(int n1, int n2);
    public static int CbitHighZero(UInt32 u);
    public static int CbitHighZero(ulong uu);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string Argument_BadFormatSpecifier { get; }
    internal static string Argument_InvalidNumberStyles { get; }
    internal static string Argument_InvalidHexStyle { get; }
    internal static string Argument_MustBeBigInt { get; }
    internal static string Format_TooLarge { get; }
    internal static string ArgumentOutOfRange_MustBeNonNeg { get; }
    internal static string Overflow_BigIntInfinity { get; }
    internal static string Overflow_NotANumber { get; }
    internal static string Overflow_ParseBigInteger { get; }
    internal static string Overflow_Int32 { get; }
    internal static string Overflow_Int64 { get; }
    internal static string Overflow_UInt32 { get; }
    internal static string Overflow_UInt64 { get; }
    internal static string Overflow_Decimal { get; }
    internal static string Overflow_Negative_Unsigned { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_Argument_BadFormatSpecifier();
    internal static string get_Argument_InvalidNumberStyles();
    internal static string get_Argument_InvalidHexStyle();
    internal static string get_Argument_MustBeBigInt();
    internal static string get_Format_TooLarge();
    internal static string get_ArgumentOutOfRange_MustBeNonNeg();
    internal static string get_Overflow_BigIntInfinity();
    internal static string get_Overflow_NotANumber();
    internal static string get_Overflow_ParseBigInteger();
    internal static string get_Overflow_Int32();
    internal static string get_Overflow_Int64();
    internal static string get_Overflow_UInt32();
    internal static string get_Overflow_UInt64();
    internal static string get_Overflow_Decimal();
    internal static string get_Overflow_Negative_Unsigned();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsByRefLikeAttribute]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public int get_Length();
    public virtual string ToString();
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int requiredAdditionalCapacity);
    public void Dispose();
}
