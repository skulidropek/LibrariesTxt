internal static class FxResources.System.Security.Cryptography.Algorithms.SR : object {
}
internal class Internal.Cryptography.AesImplementation : Aes {
    private static RandomNumberGenerator s_rng;
    private static AesImplementation();
    public sealed virtual ICryptoTransform CreateDecryptor();
    public sealed virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public sealed virtual ICryptoTransform CreateEncryptor();
    public sealed virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public sealed virtual void GenerateIV();
    public sealed virtual void GenerateKey();
    protected sealed virtual void Dispose(bool disposing);
    private ICryptoTransform CreateTransform(Byte[] rgbKey, Byte[] rgbIV, bool encrypting);
    private static ICryptoTransform CreateTransformCore(CipherMode cipherMode, PaddingMode paddingMode, Byte[] key, Byte[] iv, int blockSize, bool encrypting);
}
internal class Internal.Cryptography.AppleCCCryptor : BasicSymmetricCipher {
    private bool _encrypting;
    private SafeAppleCryptorHandle _cryptor;
    public AppleCCCryptor(PAL_SymmetricAlgorithm algorithm, CipherMode cipherMode, int blockSizeInBytes, Byte[] key, Byte[] iv, bool encrypting);
    protected virtual void Dispose(bool disposing);
    public virtual int Transform(Byte[] input, int inputOffset, int count, Byte[] output, int outputOffset);
    public virtual Byte[] TransformFinal(Byte[] input, int inputOffset, int count);
    private Byte[] ProcessFinalBlock(Byte[] input, int inputOffset, int count);
    private int CipherUpdate(Byte[] input, int inputOffset, int count, Byte[] output, int outputOffset);
    private void OpenCryptor(PAL_SymmetricAlgorithm algorithm, CipherMode cipherMode, Byte[] key);
    private PAL_ChainingMode GetPalChainMode(CipherMode cipherMode);
    private void Reset();
    private static void ProcessInteropError(int functionReturnCode, int ccStatus);
}
internal static class Internal.Cryptography.AsymmetricAlgorithmHelpers : object {
    public static Byte[] ConvertIeee1363ToDer(ReadOnlySpan`1<byte> input);
    public static Byte[] ConvertDerToIeee1363(Byte[] input, int inputOffset, int inputCount, int fieldSizeBits);
    public static int BitsToBytes(int bitLength);
    private static void CopySignatureField(Byte[] signatureField, Byte[] response, int offset, int fieldLength);
    public static Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public static Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public static bool TryHashData(ReadOnlySpan`1<byte> source, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    private static HashAlgorithm GetHashAlgorithm(HashAlgorithmName hashAlgorithmName);
}
internal abstract class Internal.Cryptography.BasicSymmetricCipher : object {
    [CompilerGeneratedAttribute]
private int <BlockSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <IV>k__BackingField;
    public int BlockSizeInBytes { get; private set; }
    protected Byte[] IV { get; private set; }
    protected BasicSymmetricCipher(Byte[] iv, int blockSizeInBytes);
    public abstract virtual int Transform(Byte[] input, int inputOffset, int count, Byte[] output, int outputOffset);
    public abstract virtual Byte[] TransformFinal(Byte[] input, int inputOffset, int count);
    [CompilerGeneratedAttribute]
public int get_BlockSizeInBytes();
    [CompilerGeneratedAttribute]
private void set_BlockSizeInBytes(int value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
protected Byte[] get_IV();
    [CompilerGeneratedAttribute]
private void set_IV(Byte[] value);
}
internal class Internal.Cryptography.DesImplementation : DES {
    private static RandomNumberGenerator s_rng;
    private static DesImplementation();
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public sealed virtual void GenerateKey();
    private ICryptoTransform CreateTransform(Byte[] rgbKey, Byte[] rgbIV, bool encrypting);
    private static ICryptoTransform CreateTransformCore(CipherMode cipherMode, PaddingMode paddingMode, Byte[] key, Byte[] iv, int blockSize, bool encrypting);
}
[ExtensionAttribute]
internal static class Internal.Cryptography.HashAlgorithmNames : object {
    private static HashSet`1<string> s_allNames;
    private static HashAlgorithmNames();
    [ExtensionAttribute]
public static string ToAlgorithmName(HashAlgorithm hashAlgorithm);
    public static string ToUpper(string hashAlgorithName);
    private static HashSet`1<string> CreateAllNames();
}
internal abstract class Internal.Cryptography.HashProvider : object {
    public int HashSizeInBytes { get; }
    public void AppendHashData(Byte[] data, int offset, int count);
    public abstract virtual void AppendHashData(ReadOnlySpan`1<byte> data);
    public abstract virtual Byte[] FinalizeHashAndReset();
    public abstract virtual bool TryFinalizeHashAndReset(Span`1<byte> destination, Int32& bytesWritten);
    public abstract virtual int get_HashSizeInBytes();
    public sealed virtual void Dispose();
    public abstract virtual void Dispose(bool disposing);
}
internal static class Internal.Cryptography.HashProviderDispenser : object {
    public static HashProvider CreateHashProvider(string hashAlgorithmId);
    public static HashProvider CreateMacProvider(string hashAlgorithmId, Byte[] key);
}
[ExtensionAttribute]
internal static class Internal.Cryptography.Helpers : object {
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] src);
    [ExtensionAttribute]
public static KeySizes[] CloneKeySizesArray(KeySizes[] src);
    [ExtensionAttribute]
public static bool UsesIv(CipherMode cipherMode);
    [ExtensionAttribute]
public static Byte[] GetCipherIv(CipherMode cipherMode, Byte[] iv);
    [ExtensionAttribute]
public static bool IsLegalSize(int size, KeySizes[] legalSizes);
    public static Byte[] GenerateRandom(int count);
    public static void WriteInt(UInt32 i, Byte[] arr, int offset);
    [ExtensionAttribute]
public static Byte[] FixupKeyParity(Byte[] key);
    internal static void ConvertIntToByteArray(UInt32 value, Byte[] dest);
}
internal class Internal.Cryptography.HMACCommon : object {
    [CompilerGeneratedAttribute]
private Byte[] <ActualKey>k__BackingField;
    private string _hashAlgorithmId;
    private HashProvider _hMacProvider;
    private HashProvider modreq(System.Runtime.CompilerServices.IsVolatile) _lazyHashProvider;
    private int _blockSize;
    public int HashSizeInBits { get; }
    public Byte[] ActualKey { get; private set; }
    public HMACCommon(string hashAlgorithmId, Byte[] key, int blockSize);
    public int get_HashSizeInBits();
    public void ChangeKey(Byte[] key);
    [CompilerGeneratedAttribute]
public Byte[] get_ActualKey();
    [CompilerGeneratedAttribute]
private void set_ActualKey(Byte[] value);
    public void AppendHashData(Byte[] data, int offset, int count);
    public void AppendHashData(ReadOnlySpan`1<byte> source);
    public Byte[] FinalizeHashAndReset();
    public bool TryFinalizeHashAndReset(Span`1<byte> destination, Int32& bytesWritten);
    public void Dispose(bool disposing);
}
internal class Internal.Cryptography.RC2Implementation : RC2 {
    private static RandomNumberGenerator s_rng;
    public int EffectiveKeySize { get; public set; }
    private static RC2Implementation();
    public virtual int get_EffectiveKeySize();
    public virtual void set_EffectiveKeySize(int value);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public sealed virtual void GenerateKey();
    private ICryptoTransform CreateTransform(Byte[] rgbKey, Byte[] rgbIV, bool encrypting);
    private static ICryptoTransform CreateTransformCore(CipherMode cipherMode, PaddingMode paddingMode, Byte[] key, int effectiveKeyLength, Byte[] iv, int blockSize, bool encrypting);
}
internal class Internal.Cryptography.RijndaelImplementation : Rijndael {
    private Aes _impl;
    public int BlockSize { get; public set; }
    public Byte[] IV { get; public set; }
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public virtual int get_BlockSize();
    public virtual void set_BlockSize(int value);
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual CipherMode get_Mode();
    public virtual void set_Mode(CipherMode value);
    public virtual PaddingMode get_Padding();
    public virtual void set_Padding(PaddingMode value);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
    protected virtual void Dispose(bool disposing);
}
internal class Internal.Cryptography.TripleDesImplementation : TripleDES {
    private static RandomNumberGenerator s_rng;
    private static TripleDesImplementation();
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public sealed virtual void GenerateKey();
    private ICryptoTransform CreateTransform(Byte[] rgbKey, Byte[] rgbIV, bool encrypting);
    private static ICryptoTransform CreateTransformCore(CipherMode cipherMode, PaddingMode paddingMode, Byte[] key, Byte[] iv, int blockSize, bool encrypting);
}
internal class Internal.Cryptography.UniversalCryptoDecryptor : UniversalCryptoTransform {
    private Byte[] _heldoverCipher;
    private bool DepaddingRequired { get; }
    public UniversalCryptoDecryptor(PaddingMode paddingMode, BasicSymmetricCipher basicSymmetricCipher);
    protected sealed virtual int UncheckedTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected sealed virtual Byte[] UncheckedTransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    protected sealed virtual void Dispose(bool disposing);
    private void Reset();
    private bool get_DepaddingRequired();
    private Byte[] DepadBlock(Byte[] block, int offset, int count);
}
internal class Internal.Cryptography.UniversalCryptoEncryptor : UniversalCryptoTransform {
    private static RandomNumberGenerator s_randomNumberGenerator;
    public UniversalCryptoEncryptor(PaddingMode paddingMode, BasicSymmetricCipher basicSymmetricCipher);
    private static UniversalCryptoEncryptor();
    protected sealed virtual int UncheckedTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected sealed virtual Byte[] UncheckedTransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    private Byte[] PadBlock(Byte[] block, int offset, int count);
}
internal abstract class Internal.Cryptography.UniversalCryptoTransform : object {
    [CompilerGeneratedAttribute]
private PaddingMode <PaddingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicSymmetricCipher <BasicSymmetricCipher>k__BackingField;
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    protected PaddingMode PaddingMode { get; private set; }
    protected BasicSymmetricCipher BasicSymmetricCipher { get; private set; }
    protected UniversalCryptoTransform(PaddingMode paddingMode, BasicSymmetricCipher basicSymmetricCipher);
    public static ICryptoTransform Create(PaddingMode paddingMode, BasicSymmetricCipher cipher, bool encrypting);
    public sealed virtual bool get_CanReuseTransform();
    public sealed virtual bool get_CanTransformMultipleBlocks();
    public sealed virtual int get_InputBlockSize();
    public sealed virtual int get_OutputBlockSize();
    public sealed virtual void Dispose();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    protected virtual void Dispose(bool disposing);
    protected abstract virtual int UncheckedTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected abstract virtual Byte[] UncheckedTransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    [CompilerGeneratedAttribute]
protected PaddingMode get_PaddingMode();
    [CompilerGeneratedAttribute]
private void set_PaddingMode(PaddingMode value);
    [CompilerGeneratedAttribute]
protected BasicSymmetricCipher get_BasicSymmetricCipher();
    [CompilerGeneratedAttribute]
private void set_BasicSymmetricCipher(BasicSymmetricCipher value);
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeCFDataHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeCFErrorHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeCFStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeCreateHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal static class Microsoft.Win32.SafeHandles.SafeHandleCache`1 : object {
    private static T s_invalidHandle;
    internal static bool IsCachedInvalidHandle(SafeHandle handle);
}
public abstract class System.Security.Cryptography.Aes : SymmetricAlgorithm {
    private static KeySizes[] s_legalBlockSizes;
    private static KeySizes[] s_legalKeySizes;
    private static Aes();
    public static Aes Create();
    public static Aes Create(string algorithmName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.AesManaged : Aes {
    private Aes _impl;
    public int FeedbackSize { get; public set; }
    public int BlockSize { get; public set; }
    public Byte[] IV { get; public set; }
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public KeySizes[] LegalBlockSizes { get; }
    public KeySizes[] LegalKeySizes { get; }
    public virtual int get_FeedbackSize();
    public virtual void set_FeedbackSize(int value);
    public virtual int get_BlockSize();
    public virtual void set_BlockSize(int value);
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual CipherMode get_Mode();
    public virtual void set_Mode(CipherMode value);
    public virtual PaddingMode get_Padding();
    public virtual void set_Padding(PaddingMode value);
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
    protected virtual void Dispose(bool disposing);
}
internal class System.Security.Cryptography.Apple.SafeDigestCtxHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class System.Security.Cryptography.Apple.SafeHmacHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class System.Security.Cryptography.Apple.SafeKeychainHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class System.Security.Cryptography.Apple.SafeKeychainItemHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class System.Security.Cryptography.Apple.SafeSecKeyRefHandle : SafeKeychainItemHandle {
}
internal class System.Security.Cryptography.Apple.SafeTemporaryKeychainHandle : SafeKeychainHandle {
    private static Dictionary`2<IntPtr, SafeTemporaryKeychainHandle> s_lookup;
    private static SafeTemporaryKeychainHandle();
    protected virtual bool ReleaseHandle();
    protected virtual void Dispose(bool disposing);
    internal static void TrackKeychain(SafeTemporaryKeychainHandle toTrack);
    internal static void UntrackItem(IntPtr keychainItem);
}
public abstract class System.Security.Cryptography.AsymmetricKeyExchangeDeformatter : object {
    public string Parameters { get; public set; }
    public abstract virtual string get_Parameters();
    public abstract virtual void set_Parameters(string value);
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
    public abstract virtual Byte[] DecryptKeyExchange(Byte[] rgb);
}
public abstract class System.Security.Cryptography.AsymmetricKeyExchangeFormatter : object {
    public string Parameters { get; }
    public abstract virtual string get_Parameters();
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
    public abstract virtual Byte[] CreateKeyExchange(Byte[] data);
    public abstract virtual Byte[] CreateKeyExchange(Byte[] data, Type symAlgType);
}
public abstract class System.Security.Cryptography.AsymmetricSignatureDeformatter : object {
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
    public abstract virtual void SetHashAlgorithm(string strName);
    public virtual bool VerifySignature(HashAlgorithm hash, Byte[] rgbSignature);
    public abstract virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
public abstract class System.Security.Cryptography.AsymmetricSignatureFormatter : object {
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
    public abstract virtual void SetHashAlgorithm(string strName);
    public virtual Byte[] CreateSignature(HashAlgorithm hash);
    public abstract virtual Byte[] CreateSignature(Byte[] rgbHash);
}
public class System.Security.Cryptography.CryptoConfig : object {
    private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_defaultOidHT;
    private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_defaultNameHT;
    private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) appNameHT;
    private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) appOidHT;
    private static Char[] SepArray;
    private static object s_InternalSyncObject;
    public static bool AllowOnlyFipsAlgorithms { get; }
    private static Dictionary`2<string, string> DefaultOidHT { get; }
    private static Dictionary`2<string, object> DefaultNameHT { get; }
    private static CryptoConfig();
    public static bool get_AllowOnlyFipsAlgorithms();
    private static Dictionary`2<string, string> get_DefaultOidHT();
    private static Dictionary`2<string, object> get_DefaultNameHT();
    public static void AddAlgorithm(Type algorithm, String[] names);
    public static object CreateFromName(string name, Object[] args);
    public static object CreateFromName(string name);
    public static void AddOID(string oid, String[] names);
    public static string MapNameToOID(string name);
    public static Byte[] EncodeOID(string str);
    private static void EncodeSingleOidNum(UInt32 value, Byte[] destination, Int32& index);
}
internal static class System.Security.Cryptography.DerEncoder : object {
    private static Byte[][] s_nullTlv;
    private static DerEncoder();
    private static Byte[] EncodeLength(int length);
    internal static Byte[][] SegmentedEncodeUnsignedInteger(ReadOnlySpan`1<byte> bigEndianBytes);
    internal static Byte[][] SegmentedEncodeBitString(Byte[][][] childSegments);
    internal static Byte[][] SegmentedEncodeBitString(Byte[] data);
    internal static Byte[][] SegmentedEncodeBitString(int unusedBits, Byte[] data);
    internal static Byte[][] SegmentedEncodeOctetString(Byte[] data);
    internal static Byte[][] SegmentedEncodeOid(Oid oid);
    internal static Byte[][] SegmentedEncodeOid(string oidValue);
    internal static Byte[][] ConstructSegmentedSequence(Byte[][][] items);
    internal static Byte[][] ConstructSegmentedSequence(IEnumerable`1<Byte[][]> items);
    internal static Byte[][] ConstructSegmentedContextSpecificValue(int contextId, Byte[][][] items);
    internal static Byte[] ConstructSequence(Byte[][][] items);
    internal static Byte[] ConstructSequence(IEnumerable`1<Byte[][]> items);
    private static BigInteger ParseOidRid(string oidValue, Int32& startIndex);
    private static int AtoI(char c);
    private static void EncodeRid(List`1<byte> encodedData, BigInteger& rid);
    private static Byte[] ConcatenateArrays(Byte[][][] segments);
    private static Byte[] ConcatenateArrays(IEnumerable`1<Byte[][]> segments);
}
public abstract class System.Security.Cryptography.DeriveBytes : object {
    public abstract virtual Byte[] GetBytes(int cb);
    public abstract virtual void Reset();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class System.Security.Cryptography.DerSequenceReader : object {
    private Byte[] _data;
    private int _end;
    private int _position;
    [CompilerGeneratedAttribute]
private int <ContentLength>k__BackingField;
    unknown int ContentLength {private set; }
    internal bool HasData { get; }
    private DerSequenceReader(bool startAtPayload, Byte[] data, int offset, int length);
    internal DerSequenceReader(Byte[] data);
    internal DerSequenceReader(Byte[] data, int offset, int length);
    private DerSequenceReader(DerTag tagToEat, Byte[] data, int offset, int length);
    [CompilerGeneratedAttribute]
private void set_ContentLength(int value);
    internal static DerSequenceReader CreateForPayload(Byte[] payload);
    internal bool get_HasData();
    internal byte PeekTag();
    internal int ReadInteger();
    internal Byte[] ReadIntegerBytes();
    internal Byte[] ReadBitString();
    internal Byte[] ReadOctetString();
    internal string ReadOidAsString();
    private DerSequenceReader ReadCollectionWithTag(DerTag expected);
    internal DerSequenceReader ReadSequence();
    private Byte[] ReadContentAsBytes();
    private void EatTag(DerTag expected);
    private static void CheckTag(DerTag expected, Byte[] data, int position);
    private int EatLength();
    private static int ScanContentLength(Byte[] data, int offset, int end, Int32& bytesConsumed);
}
[EditorBrowsableAttribute("1")]
public abstract class System.Security.Cryptography.DES : SymmetricAlgorithm {
    private static KeySizes[] s_legalBlockSizes;
    private static KeySizes[] s_legalKeySizes;
    public Byte[] Key { get; public set; }
    private static DES();
    public static DES Create();
    public static DES Create(string algName);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public static bool IsWeakKey(Byte[] rgbKey);
    public static bool IsSemiWeakKey(Byte[] rgbKey);
    private static bool IsLegalKeySize(Byte[] rgbKey);
    private static ulong QuadWordFromBigEndian(Byte[] block);
}
public abstract class System.Security.Cryptography.DSA : AsymmetricAlgorithm {
    public abstract virtual DSAParameters ExportParameters(bool includePrivateParameters);
    public abstract virtual void ImportParameters(DSAParameters parameters);
    public static DSA Create(string algName);
    public static DSA Create(int keySizeInBits);
    public static DSA Create(DSAParameters parameters);
    public abstract virtual Byte[] CreateSignature(Byte[] rgbHash);
    public abstract virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool TryCreateSignature(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, Int32& bytesWritten);
    protected virtual bool TryHashData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    public virtual bool TrySignData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    public virtual bool VerifyData(ReadOnlySpan`1<byte> data, ReadOnlySpan`1<byte> signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifySignature(ReadOnlySpan`1<byte> hash, ReadOnlySpan`1<byte> signature);
    private static Exception DerivedClassMustOverride();
    internal static Exception HashAlgorithmNameNullOrEmpty();
    public virtual void FromXmlString(string xmlString);
    public virtual string ToXmlString(bool includePrivateParameters);
    public static DSA Create();
}
[ExtensionAttribute]
internal static class System.Security.Cryptography.DsaKeyBlobHelpers : object {
    private static Oid s_idDsa;
    private static DsaKeyBlobHelpers();
    [ExtensionAttribute]
internal static void ReadSubjectPublicKeyInfo(DerSequenceReader keyInfo, DSAParameters& parameters);
    [ExtensionAttribute]
internal static void ReadSubjectPublicKeyInfo(DerSequenceReader algParameters, Byte[] publicKeyBlob, DSAParameters& parameters);
    [ExtensionAttribute]
internal static Byte[] ToSubjectPublicKeyInfo(DSAParameters parameters);
    [ExtensionAttribute]
internal static void ReadPkcs8Blob(DerSequenceReader reader, DSAParameters& parameters);
    [ExtensionAttribute]
internal static Byte[] ToPrivateKeyBlob(DSAParameters parameters);
}
public class System.Security.Cryptography.DSAParameters : ValueType {
    public Byte[] P;
    public Byte[] Q;
    public Byte[] G;
    public Byte[] Y;
    public Byte[] J;
    public Byte[] X;
    public Byte[] Seed;
    public int Counter;
}
public class System.Security.Cryptography.DSASignatureDeformatter : AsymmetricSignatureDeformatter {
    private DSA _dsaKey;
    public DSASignatureDeformatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
public class System.Security.Cryptography.DSASignatureFormatter : AsymmetricSignatureFormatter {
    private DSA _dsaKey;
    public DSASignatureFormatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual Byte[] CreateSignature(Byte[] rgbHash);
}
internal class System.Security.Cryptography.EccSecurityTransforms : object {
    private SecKeyPair _keys;
    public sealed virtual void Dispose();
    internal int GenerateKey(ECCurve curve);
    private SecKeyPair GenerateKey(int keySizeInBits);
    internal SecKeyPair GetOrGenerateKeys(int keySizeInBits);
    private void SetKey(SecKeyPair keyPair);
    internal ECParameters ExportParameters(bool includePrivateParameters, int keySizeInBIts);
    public int ImportParameters(ECParameters parameters);
    private static int GetKeySize(SecKeyPair newKeys);
    private static SafeSecKeyRefHandle ImportKey(ECParameters parameters);
}
[DebuggerDisplayAttribute("ECCurve: {Oid}")]
public class System.Security.Cryptography.ECCurve : ValueType {
    public Byte[] A;
    public Byte[] B;
    public ECPoint G;
    public Byte[] Order;
    public Byte[] Cofactor;
    public Byte[] Seed;
    public ECCurveType CurveType;
    public Nullable`1<HashAlgorithmName> Hash;
    public Byte[] Polynomial;
    public Byte[] Prime;
    private Oid _oid;
    public Oid Oid { get; private set; }
    public bool IsPrime { get; }
    public bool IsCharacteristic2 { get; }
    public bool IsExplicit { get; }
    public bool IsNamed { get; }
    public Oid get_Oid();
    private void set_Oid(Oid value);
    private static ECCurve Create(Oid oid);
    public static ECCurve CreateFromOid(Oid curveOid);
    public static ECCurve CreateFromFriendlyName(string oidFriendlyName);
    public static ECCurve CreateFromValue(string oidValue);
    private static ECCurve CreateFromValueAndName(string oidValue, string oidFriendlyName);
    public bool get_IsPrime();
    public bool get_IsCharacteristic2();
    public bool get_IsExplicit();
    public bool get_IsNamed();
    public void Validate();
    private bool HasAnyExplicitParameters();
}
public abstract class System.Security.Cryptography.ECDiffieHellman : AsymmetricAlgorithm {
    public string KeyExchangeAlgorithm { get; }
    public string SignatureAlgorithm { get; }
    public ECDiffieHellmanPublicKey PublicKey { get; }
    public virtual string get_KeyExchangeAlgorithm();
    public virtual string get_SignatureAlgorithm();
    public static ECDiffieHellman Create(string algorithm);
    public abstract virtual ECDiffieHellmanPublicKey get_PublicKey();
    public virtual Byte[] DeriveKeyMaterial(ECDiffieHellmanPublicKey otherPartyPublicKey);
    public Byte[] DeriveKeyFromHash(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] DeriveKeyFromHash(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] secretPrepend, Byte[] secretAppend);
    public Byte[] DeriveKeyFromHmac(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] hmacKey);
    public virtual Byte[] DeriveKeyFromHmac(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] hmacKey, Byte[] secretPrepend, Byte[] secretAppend);
    public virtual Byte[] DeriveKeyTls(ECDiffieHellmanPublicKey otherPartyPublicKey, Byte[] prfLabel, Byte[] prfSeed);
    private static Exception DerivedClassMustOverride();
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual void GenerateKey(ECCurve curve);
    public virtual void FromXmlString(string xmlString);
    public virtual string ToXmlString(bool includePrivateParameters);
    public static ECDiffieHellman Create();
    public static ECDiffieHellman Create(ECCurve curve);
    public static ECDiffieHellman Create(ECParameters parameters);
}
internal static class System.Security.Cryptography.ECDiffieHellmanDerivation : object {
    internal static Byte[] DeriveKeyFromHash(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, ReadOnlySpan`1<byte> secretPrepend, ReadOnlySpan`1<byte> secretAppend, DeriveSecretAgreement deriveSecretAgreement);
    internal static Byte[] DeriveKeyFromHmac(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] hmacKey, ReadOnlySpan`1<byte> secretPrepend, ReadOnlySpan`1<byte> secretAppend, DeriveSecretAgreement deriveSecretAgreement);
    internal static Byte[] DeriveKeyTls(ECDiffieHellmanPublicKey otherPartyPublicKey, ReadOnlySpan`1<byte> prfLabel, ReadOnlySpan`1<byte> prfSeed, DeriveSecretAgreement deriveSecretAgreement);
    private static void PHash(HashAlgorithmName algorithmName, ReadOnlySpan`1<byte> secret, ReadOnlySpan`1<byte> prfLabel, ReadOnlySpan`1<byte> prfSeed, int hashOutputSize, Span`1<byte> ret);
}
internal static class System.Security.Cryptography.ECDiffieHellmanImplementation : object {
}
public abstract class System.Security.Cryptography.ECDiffieHellmanPublicKey : object {
    private Byte[] _keyBlob;
    protected ECDiffieHellmanPublicKey(Byte[] keyBlob);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] ToByteArray();
    public virtual string ToXmlString();
    public virtual ECParameters ExportParameters();
    public virtual ECParameters ExportExplicitParameters();
}
public abstract class System.Security.Cryptography.ECDsa : AsymmetricAlgorithm {
    public string KeyExchangeAlgorithm { get; }
    public string SignatureAlgorithm { get; }
    public static ECDsa Create(string algorithm);
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual void GenerateKey(ECCurve curve);
    public virtual Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public virtual bool TrySignData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(ReadOnlySpan`1<byte> data, ReadOnlySpan`1<byte> signature, HashAlgorithmName hashAlgorithm);
    public bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public abstract virtual Byte[] SignHash(Byte[] hash);
    public abstract virtual bool VerifyHash(Byte[] hash, Byte[] signature);
    public virtual string get_KeyExchangeAlgorithm();
    public virtual string get_SignatureAlgorithm();
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    protected virtual bool TryHashData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    public virtual bool TrySignHash(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, Int32& bytesWritten);
    public virtual bool VerifyHash(ReadOnlySpan`1<byte> hash, ReadOnlySpan`1<byte> signature);
    public virtual void FromXmlString(string xmlString);
    public virtual string ToXmlString(bool includePrivateParameters);
    public static ECDsa Create();
    public static ECDsa Create(ECCurve curve);
    public static ECDsa Create(ECParameters parameters);
}
[ExtensionAttribute]
internal static class System.Security.Cryptography.EcKeyBlobHelpers : object {
    private static Byte[] s_version1;
    private static Byte[][] s_encodedVersion1;
    private static Oid s_idEcPublicKey;
    private static Byte[][] s_encodedIdEcPublicKey;
    private static EcKeyBlobHelpers();
    [ExtensionAttribute]
internal static void ReadPkcs8Blob(DerSequenceReader reader, ECParameters& parameters);
    [ExtensionAttribute]
internal static void ReadSubjectPublicKeyInfo(DerSequenceReader keyInfo, ECParameters& parameters);
    [ExtensionAttribute]
internal static Byte[] ToSubjectPublicKeyInfo(ECParameters parameters);
    private static Byte[] GetPointBlob(ECParameters& parameters);
    [ExtensionAttribute]
internal static Byte[] ToPrivateKeyBlob(ECParameters parameters);
    private static void ReadEncodedPoint(Byte[] encodedPoint, ECParameters& parameters);
}
public class System.Security.Cryptography.ECParameters : ValueType {
    public ECPoint Q;
    public Byte[] D;
    public ECCurve Curve;
    public void Validate();
}
public class System.Security.Cryptography.ECPoint : ValueType {
    public Byte[] X;
    public Byte[] Y;
}
public class System.Security.Cryptography.HMACMD5 : HMAC {
    private HMACCommon _hMacCommon;
    public Byte[] Key { get; public set; }
    public HMACMD5(Byte[] key);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected virtual Byte[] HashFinal();
    protected virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA1 : HMAC {
    private HMACCommon _hMacCommon;
    public Byte[] Key { get; public set; }
    public HMACSHA1(Byte[] key);
    [EditorBrowsableAttribute("1")]
public HMACSHA1(Byte[] key, bool useManagedSha1);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected virtual Byte[] HashFinal();
    protected virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA256 : HMAC {
    private HMACCommon _hMacCommon;
    public Byte[] Key { get; public set; }
    public HMACSHA256(Byte[] key);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected virtual Byte[] HashFinal();
    protected virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA384 : HMAC {
    private HMACCommon _hMacCommon;
    public bool ProduceLegacyHmacValues { get; public set; }
    public Byte[] Key { get; public set; }
    public HMACSHA384(Byte[] key);
    public bool get_ProduceLegacyHmacValues();
    public void set_ProduceLegacyHmacValues(bool value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected virtual Byte[] HashFinal();
    protected virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA512 : HMAC {
    private HMACCommon _hMacCommon;
    public bool ProduceLegacyHmacValues { get; public set; }
    public Byte[] Key { get; public set; }
    public HMACSHA512(Byte[] key);
    public bool get_ProduceLegacyHmacValues();
    public void set_ProduceLegacyHmacValues(bool value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected virtual Byte[] HashFinal();
    protected virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.IncrementalHash : object {
    private HashAlgorithmName _algorithmName;
    private HashProvider _hash;
    private HMACCommon _hmac;
    private bool _disposed;
    public HashAlgorithmName AlgorithmName { get; }
    private IncrementalHash(HashAlgorithmName name, HashProvider hash);
    private IncrementalHash(HashAlgorithmName name, HMACCommon hmac);
    public HashAlgorithmName get_AlgorithmName();
    public void AppendData(Byte[] data);
    public void AppendData(Byte[] data, int offset, int count);
    public void AppendData(ReadOnlySpan`1<byte> data);
    public Byte[] GetHashAndReset();
    public bool TryGetHashAndReset(Span`1<byte> destination, Int32& bytesWritten);
    public sealed virtual void Dispose();
    public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm);
    public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, Byte[] key);
}
internal static class System.Security.Cryptography.KeyBlobHelpers : object {
    internal static Byte[] TrimPaddingByte(Byte[] data);
    internal static void TrimPaddingByte(Byte[]& data);
    internal static Byte[] PadOrTrim(Byte[] data, int length);
    internal static void PadOrTrim(Byte[]& data, int length);
}
public abstract class System.Security.Cryptography.MaskGenerationMethod : object {
    public abstract virtual Byte[] GenerateMask(Byte[] rgbSeed, int cbReturn);
}
public abstract class System.Security.Cryptography.MD5 : HashAlgorithm {
    public static MD5 Create();
    public static MD5 Create(string algName);
}
public class System.Security.Cryptography.PKCS1MaskGenerationMethod : MaskGenerationMethod {
    private string _hashNameValue;
    public string HashName { get; public set; }
    public string get_HashName();
    public void set_HashName(string value);
    public virtual Byte[] GenerateMask(Byte[] rgbSeed, int cbReturn);
}
public abstract class System.Security.Cryptography.RandomNumberGenerator : object {
    public static RandomNumberGenerator Create();
    public static RandomNumberGenerator Create(string rngName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void GetBytes(Byte[] data);
    public virtual void GetBytes(Byte[] data, int offset, int count);
    public virtual void GetBytes(Span`1<byte> data);
    public virtual void GetNonZeroBytes(Byte[] data);
    public virtual void GetNonZeroBytes(Span`1<byte> data);
    public static void Fill(Span`1<byte> data);
    internal void VerifyGetBytes(Byte[] data, int offset, int count);
}
internal class System.Security.Cryptography.RandomNumberGeneratorImplementation : RandomNumberGenerator {
    internal static void FillSpan(Span`1<byte> data);
    public virtual void GetBytes(Byte[] data);
    public virtual void GetBytes(Byte[] data, int offset, int count);
    public virtual void GetBytes(Span`1<byte> data);
    public virtual void GetNonZeroBytes(Byte[] data);
    public virtual void GetNonZeroBytes(Span`1<byte> data);
    private static void GetBytes(Byte& pbBuffer, int count);
}
[EditorBrowsableAttribute("1")]
public abstract class System.Security.Cryptography.RC2 : SymmetricAlgorithm {
    protected int EffectiveKeySizeValue;
    private static KeySizes[] s_legalBlockSizes;
    private static KeySizes[] s_legalKeySizes;
    public int KeySize { get; public set; }
    public int EffectiveKeySize { get; public set; }
    private static RC2();
    public static RC2 Create();
    public static RC2 Create(string AlgName);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual int get_EffectiveKeySize();
    public virtual void set_EffectiveKeySize(int value);
}
public class System.Security.Cryptography.Rfc2898DeriveBytes : DeriveBytes {
    private Byte[] _password;
    private Byte[] _salt;
    private UInt32 _iterations;
    private HMAC _hmac;
    private int _blockSize;
    private Byte[] _buffer;
    private UInt32 _block;
    private int _startIndex;
    private int _endIndex;
    [CompilerGeneratedAttribute]
private HashAlgorithmName <HashAlgorithm>k__BackingField;
    public HashAlgorithmName HashAlgorithm { get; }
    public int IterationCount { get; public set; }
    public Byte[] Salt { get; public set; }
    public Rfc2898DeriveBytes(Byte[] password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(Byte[] password, Byte[] salt, int iterations, HashAlgorithmName hashAlgorithm);
    public Rfc2898DeriveBytes(string password, Byte[] salt);
    public Rfc2898DeriveBytes(string password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(string password, Byte[] salt, int iterations, HashAlgorithmName hashAlgorithm);
    public Rfc2898DeriveBytes(string password, int saltSize);
    public Rfc2898DeriveBytes(string password, int saltSize, int iterations);
    public Rfc2898DeriveBytes(string password, int saltSize, int iterations, HashAlgorithmName hashAlgorithm);
    [CompilerGeneratedAttribute]
public HashAlgorithmName get_HashAlgorithm();
    public int get_IterationCount();
    public void set_IterationCount(int value);
    public Byte[] get_Salt();
    public void set_Salt(Byte[] value);
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] GetBytes(int cb);
    public Byte[] CryptDeriveKey(string algname, string alghashname, int keySize, Byte[] rgbIV);
    public virtual void Reset();
    private HMAC OpenHmac();
    private void Initialize();
    private Byte[] Func();
}
[EditorBrowsableAttribute("1")]
public abstract class System.Security.Cryptography.Rijndael : SymmetricAlgorithm {
    private static KeySizes[] s_legalBlockSizes;
    private static KeySizes[] s_legalKeySizes;
    private static Rijndael();
    public static Rijndael Create();
    public static Rijndael Create(string algName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.RijndaelManaged : Rijndael {
    private Aes _impl;
    public int BlockSize { get; public set; }
    public Byte[] IV { get; public set; }
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public virtual int get_BlockSize();
    public virtual void set_BlockSize(int value);
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual CipherMode get_Mode();
    public virtual void set_Mode(CipherMode value);
    public virtual PaddingMode get_Padding();
    public virtual void set_Padding(PaddingMode value);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
    protected virtual void Dispose(bool disposing);
}
public abstract class System.Security.Cryptography.RSA : AsymmetricAlgorithm {
    public string KeyExchangeAlgorithm { get; }
    public string SignatureAlgorithm { get; }
    public static RSA Create(string algName);
    public static RSA Create(int keySizeInBits);
    public static RSA Create(RSAParameters parameters);
    public abstract virtual RSAParameters ExportParameters(bool includePrivateParameters);
    public abstract virtual void ImportParameters(RSAParameters parameters);
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual bool TryDecrypt(ReadOnlySpan`1<byte> data, Span`1<byte> destination, RSAEncryptionPadding padding, Int32& bytesWritten);
    public virtual bool TryEncrypt(ReadOnlySpan`1<byte> data, Span`1<byte> destination, RSAEncryptionPadding padding, Int32& bytesWritten);
    protected virtual bool TryHashData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    public virtual bool TrySignHash(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, Int32& bytesWritten);
    public virtual bool VerifyHash(ReadOnlySpan`1<byte> hash, ReadOnlySpan`1<byte> signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    private static Exception DerivedClassMustOverride();
    public virtual Byte[] DecryptValue(Byte[] rgb);
    public virtual Byte[] EncryptValue(Byte[] rgb);
    public Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool TrySignData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, Int32& bytesWritten);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyData(ReadOnlySpan`1<byte> data, ReadOnlySpan`1<byte> signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual string get_KeyExchangeAlgorithm();
    public virtual string get_SignatureAlgorithm();
    private static Exception HashAlgorithmNameNullOrEmpty();
    public virtual void FromXmlString(string xmlString);
    public virtual string ToXmlString(bool includePrivateParameters);
    public static RSA Create();
}
public class System.Security.Cryptography.RSAEncryptionPadding : object {
    private static RSAEncryptionPadding s_pkcs1;
    private static RSAEncryptionPadding s_oaepSHA1;
    private static RSAEncryptionPadding s_oaepSHA256;
    private static RSAEncryptionPadding s_oaepSHA384;
    private static RSAEncryptionPadding s_oaepSHA512;
    private RSAEncryptionPaddingMode _mode;
    private HashAlgorithmName _oaepHashAlgorithm;
    public static RSAEncryptionPadding Pkcs1 { get; }
    public static RSAEncryptionPadding OaepSHA1 { get; }
    public static RSAEncryptionPadding OaepSHA256 { get; }
    public static RSAEncryptionPadding OaepSHA384 { get; }
    public static RSAEncryptionPadding OaepSHA512 { get; }
    public RSAEncryptionPaddingMode Mode { get; }
    public HashAlgorithmName OaepHashAlgorithm { get; }
    private RSAEncryptionPadding(RSAEncryptionPaddingMode mode, HashAlgorithmName oaepHashAlgorithm);
    private static RSAEncryptionPadding();
    public static RSAEncryptionPadding get_Pkcs1();
    public static RSAEncryptionPadding get_OaepSHA1();
    public static RSAEncryptionPadding get_OaepSHA256();
    public static RSAEncryptionPadding get_OaepSHA384();
    public static RSAEncryptionPadding get_OaepSHA512();
    public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm);
    public RSAEncryptionPaddingMode get_Mode();
    public HashAlgorithmName get_OaepHashAlgorithm();
    public virtual int GetHashCode();
    private static int CombineHashCodes(int h1, int h2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSAEncryptionPadding other);
    public static bool op_Equality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public static bool op_Inequality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSAEncryptionPaddingMode : Enum {
    public int value__;
    public static RSAEncryptionPaddingMode Pkcs1;
    public static RSAEncryptionPaddingMode Oaep;
}
internal static class System.Security.Cryptography.RSAImplementation : object {
    private static Exception HashAlgorithmNameNullOrEmpty();
}
[ExtensionAttribute]
internal static class System.Security.Cryptography.RsaKeyBlobHelpers : object {
    private static Byte[] s_versionNumberBytes;
    private static Byte[][] s_encodedRsaAlgorithmIdentifier;
    private static RsaKeyBlobHelpers();
    [ExtensionAttribute]
internal static Byte[] ToPkcs1Blob(RSAParameters parameters);
    [ExtensionAttribute]
internal static void ReadPkcs8Blob(DerSequenceReader reader, RSAParameters& parameters);
    [ExtensionAttribute]
internal static Byte[] ToSubjectPublicKeyInfo(RSAParameters parameters);
    [ExtensionAttribute]
internal static void ReadSubjectPublicKeyInfo(DerSequenceReader keyInfo, RSAParameters& parameters);
    [ExtensionAttribute]
internal static void ReadPkcs1PublicBlob(DerSequenceReader subjectPublicKey, RSAParameters& parameters);
    private static void ReadPkcs1PrivateBlob(Byte[] privateKeyBytes, RSAParameters& parameters);
}
public class System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter {
    private RSA _rsaKey;
    public string Parameters { get; public set; }
    public RSAOAEPKeyExchangeDeformatter(AsymmetricAlgorithm key);
    public virtual string get_Parameters();
    public virtual void set_Parameters(string value);
    public virtual Byte[] DecryptKeyExchange(Byte[] rgbData);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.RSAOAEPKeyExchangeFormatter : AsymmetricKeyExchangeFormatter {
    private Byte[] ParameterValue;
    private RSA _rsaKey;
    private RandomNumberGenerator RngValue;
    public Byte[] Parameter { get; public set; }
    public string Parameters { get; }
    public RandomNumberGenerator Rng { get; public set; }
    public RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm key);
    public Byte[] get_Parameter();
    public void set_Parameter(Byte[] value);
    public virtual string get_Parameters();
    public RandomNumberGenerator get_Rng();
    public void set_Rng(RandomNumberGenerator value);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData, Type symAlgType);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData);
}
internal class System.Security.Cryptography.RsaPaddingProcessor : object {
    private static Byte[] s_eightZeros;
    private static ConcurrentDictionary`2<HashAlgorithmName, RsaPaddingProcessor> s_lookup;
    private HashAlgorithmName _hashAlgorithmName;
    private int _hLen;
    internal int HashLength { get; }
    private RsaPaddingProcessor(HashAlgorithmName hashAlgorithmName, int hLen);
    private static RsaPaddingProcessor();
    internal static int BytesRequiredForBitCount(int keySizeInBits);
    internal int get_HashLength();
    internal static RsaPaddingProcessor OpenProcessor(HashAlgorithmName hashAlgorithmName);
    internal static void PadPkcs1Encryption(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    internal void PadOaep(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    internal bool DepadOaep(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    internal void EncodePss(ReadOnlySpan`1<byte> mHash, Span`1<byte> destination, int keySize);
    internal bool VerifyPss(ReadOnlySpan`1<byte> mHash, ReadOnlySpan`1<byte> em, int keySize);
    private void Mgf1(IncrementalHash hasher, ReadOnlySpan`1<byte> mgfSeed, Span`1<byte> mask);
    private static void FillNonZeroBytes(Span`1<byte> data);
    private static void Xor(Span`1<byte> a, ReadOnlySpan`1<byte> b);
}
public class System.Security.Cryptography.RSAParameters : ValueType {
    public Byte[] D;
    public Byte[] DP;
    public Byte[] DQ;
    public Byte[] Exponent;
    public Byte[] InverseQ;
    public Byte[] Modulus;
    public Byte[] P;
    public Byte[] Q;
}
public class System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter {
    private RSA _rsaKey;
    private RandomNumberGenerator RngValue;
    public RandomNumberGenerator RNG { get; public set; }
    public string Parameters { get; public set; }
    public RSAPKCS1KeyExchangeDeformatter(AsymmetricAlgorithm key);
    public RandomNumberGenerator get_RNG();
    public void set_RNG(RandomNumberGenerator value);
    public virtual string get_Parameters();
    public virtual void set_Parameters(string value);
    public virtual Byte[] DecryptKeyExchange(Byte[] rgbIn);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter {
    private RSA _rsaKey;
    private RandomNumberGenerator RngValue;
    public string Parameters { get; }
    public RandomNumberGenerator Rng { get; public set; }
    public RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm key);
    public virtual string get_Parameters();
    public RandomNumberGenerator get_Rng();
    public void set_Rng(RandomNumberGenerator value);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData, Type symAlgType);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData);
}
public class System.Security.Cryptography.RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter {
    private RSA _rsaKey;
    private string _algName;
    public RSAPKCS1SignatureDeformatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
public class System.Security.Cryptography.RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter {
    private RSA _rsaKey;
    private string _algName;
    public RSAPKCS1SignatureFormatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual Byte[] CreateSignature(Byte[] rgbHash);
}
public class System.Security.Cryptography.RSASignaturePadding : object {
    private static RSASignaturePadding s_pkcs1;
    private static RSASignaturePadding s_pss;
    private RSASignaturePaddingMode _mode;
    public static RSASignaturePadding Pkcs1 { get; }
    public static RSASignaturePadding Pss { get; }
    public RSASignaturePaddingMode Mode { get; }
    private RSASignaturePadding(RSASignaturePaddingMode mode);
    private static RSASignaturePadding();
    public static RSASignaturePadding get_Pkcs1();
    public static RSASignaturePadding get_Pss();
    public RSASignaturePaddingMode get_Mode();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSASignaturePadding other);
    public static bool op_Equality(RSASignaturePadding left, RSASignaturePadding right);
    public static bool op_Inequality(RSASignaturePadding left, RSASignaturePadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSASignaturePaddingMode : Enum {
    public int value__;
    public static RSASignaturePaddingMode Pkcs1;
    public static RSASignaturePaddingMode Pss;
}
internal class System.Security.Cryptography.SafeAppleCryptorHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class System.Security.Cryptography.SecKeyPair : object {
    [CompilerGeneratedAttribute]
private SafeSecKeyRefHandle <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeSecKeyRefHandle <PrivateKey>k__BackingField;
    internal SafeSecKeyRefHandle PublicKey { get; private set; }
    internal SafeSecKeyRefHandle PrivateKey { get; private set; }
    private SecKeyPair(SafeSecKeyRefHandle publicKey, SafeSecKeyRefHandle privateKey);
    [CompilerGeneratedAttribute]
internal SafeSecKeyRefHandle get_PublicKey();
    [CompilerGeneratedAttribute]
private void set_PublicKey(SafeSecKeyRefHandle value);
    [CompilerGeneratedAttribute]
internal SafeSecKeyRefHandle get_PrivateKey();
    [CompilerGeneratedAttribute]
private void set_PrivateKey(SafeSecKeyRefHandle value);
    public sealed virtual void Dispose();
    internal static SecKeyPair PublicPrivatePair(SafeSecKeyRefHandle publicKey, SafeSecKeyRefHandle privateKey);
    internal static SecKeyPair PublicOnly(SafeSecKeyRefHandle publicKey);
}
public abstract class System.Security.Cryptography.SHA1 : HashAlgorithm {
    public static SHA1 Create();
    public static SHA1 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA1Managed : SHA1 {
    private HashProvider _hashProvider;
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected sealed virtual Byte[] HashFinal();
    protected sealed virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public sealed virtual void Initialize();
    protected sealed virtual void Dispose(bool disposing);
}
public abstract class System.Security.Cryptography.SHA256 : HashAlgorithm {
    public static SHA256 Create();
    public static SHA256 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA256Managed : SHA256 {
    private HashProvider _hashProvider;
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected sealed virtual Byte[] HashFinal();
    protected sealed virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public sealed virtual void Initialize();
    protected sealed virtual void Dispose(bool disposing);
}
public abstract class System.Security.Cryptography.SHA384 : HashAlgorithm {
    public static SHA384 Create();
    public static SHA384 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA384Managed : SHA384 {
    private HashProvider _hashProvider;
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected sealed virtual Byte[] HashFinal();
    protected sealed virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public sealed virtual void Initialize();
    protected sealed virtual void Dispose(bool disposing);
}
public abstract class System.Security.Cryptography.SHA512 : HashAlgorithm {
    public static SHA512 Create();
    public static SHA512 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA512Managed : SHA512 {
    private HashProvider _hashProvider;
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected sealed virtual Byte[] HashFinal();
    protected sealed virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public sealed virtual void Initialize();
    protected sealed virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.SignatureDescription : object {
    [CompilerGeneratedAttribute]
private string <KeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DigestAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatterAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeformatterAlgorithm>k__BackingField;
    public string KeyAlgorithm { get; public set; }
    public string DigestAlgorithm { get; public set; }
    public string FormatterAlgorithm { get; public set; }
    public string DeformatterAlgorithm { get; public set; }
    public SignatureDescription(SecurityElement el);
    [CompilerGeneratedAttribute]
public string get_KeyAlgorithm();
    [CompilerGeneratedAttribute]
public void set_KeyAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_DigestAlgorithm();
    [CompilerGeneratedAttribute]
public void set_DigestAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_FormatterAlgorithm();
    [CompilerGeneratedAttribute]
public void set_FormatterAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_DeformatterAlgorithm();
    [CompilerGeneratedAttribute]
public void set_DeformatterAlgorithm(string value);
    public virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key);
    public virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key);
    public virtual HashAlgorithm CreateDigest();
}
public abstract class System.Security.Cryptography.TripleDES : SymmetricAlgorithm {
    private static KeySizes[] s_legalBlockSizes;
    private static KeySizes[] s_legalKeySizes;
    public Byte[] Key { get; public set; }
    private static TripleDES();
    public static TripleDES Create();
    public static TripleDES Create(string str);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public static bool IsWeakKey(Byte[] rgbKey);
    private static bool EqualBytes(Byte[] rgbKey, int start1, int start2, int count);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string Argument_InvalidOidValue { get; }
    internal static string ArgumentNull_Buffer { get; }
    internal static string Arg_CryptographyException { get; }
    internal static string Cryptography_ArgECDHKeySizeMismatch { get; }
    internal static string Cryptography_TlsRequires64ByteSeed { get; }
    internal static string Cryptography_BadHashSize_ForAlgorithm { get; }
    internal static string Cryptography_Config_EncodedOIDError { get; }
    internal static string Cryptography_CSP_NoPrivateKey { get; }
    internal static string Cryptography_Der_Invalid_Encoding { get; }
    internal static string Cryptography_DSA_KeyGenNotSupported { get; }
    internal static string Cryptography_Encryption_MessageTooLong { get; }
    internal static string Cryptography_ECXmlSerializationFormatRequired { get; }
    internal static string Cryptography_ECC_NamedCurvesOnly { get; }
    internal static string Cryptography_HashAlgorithmNameNullOrEmpty { get; }
    internal static string Cryptography_InvalidOID { get; }
    internal static string Cryptography_CurveNotSupported { get; }
    internal static string Cryptography_InvalidCurveOid { get; }
    internal static string Cryptography_InvalidCurveKeyParameters { get; }
    internal static string Cryptography_InvalidDsaParameters_MissingFields { get; }
    internal static string Cryptography_InvalidDsaParameters_MismatchedPGY { get; }
    internal static string Cryptography_InvalidDsaParameters_MismatchedQX { get; }
    internal static string Cryptography_InvalidDsaParameters_MismatchedPJ { get; }
    internal static string Cryptography_InvalidDsaParameters_QRestriction_ShortKey { get; }
    internal static string Cryptography_InvalidECCharacteristic2Curve { get; }
    internal static string Cryptography_InvalidECPrimeCurve { get; }
    internal static string Cryptography_InvalidECNamedCurve { get; }
    internal static string Cryptography_InvalidKeySize { get; }
    internal static string Cryptography_InvalidKey_SemiWeak { get; }
    internal static string Cryptography_InvalidKey_Weak { get; }
    internal static string Cryptography_InvalidIVSize { get; }
    internal static string Cryptography_InvalidOperation { get; }
    internal static string Cryptography_InvalidPadding { get; }
    internal static string Cryptography_InvalidRsaParameters { get; }
    internal static string Cryptography_InvalidPaddingMode { get; }
    internal static string Cryptography_KeyTooSmall { get; }
    internal static string Cryptography_MissingIV { get; }
    internal static string Cryptography_MissingKey { get; }
    internal static string Cryptography_MissingOID { get; }
    internal static string Cryptography_MustTransformWholeBlock { get; }
    internal static string Cryptography_OAEP_Decryption_Failed { get; }
    internal static string Cryptography_OpenInvalidHandle { get; }
    internal static string Cryptography_PartialBlock { get; }
    internal static string Cryptography_PasswordDerivedBytes_FewBytesSalt { get; }
    internal static string Cryptography_RC2_EKS40 { get; }
    internal static string Cryptography_RC2_EKSKS { get; }
    internal static string Cryptography_RC2_EKSKS2 { get; }
    internal static string Cryptography_Rijndael_BlockSize { get; }
    internal static string Cryptography_RSA_DecryptWrongSize { get; }
    internal static string Cryptography_SignHash_WrongSize { get; }
    internal static string Cryptography_TransformBeyondEndOfBuffer { get; }
    internal static string Cryptography_CipherModeNotSupported { get; }
    internal static string Cryptography_UnknownHashAlgorithm { get; }
    internal static string Cryptography_UnknownPaddingMode { get; }
    internal static string Cryptography_Unmapped_System_Typed_Error { get; }
    internal static string NotSupported_Method { get; }
    internal static string NotSupported_SubclassOverride { get; }
    internal static string Cryptography_AlgorithmTypesMustBeVisible { get; }
    internal static string Cryptography_AddNullOrEmptyName { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_Argument_InvalidOidValue();
    internal static string get_ArgumentNull_Buffer();
    internal static string get_Arg_CryptographyException();
    internal static string get_Cryptography_ArgECDHKeySizeMismatch();
    internal static string get_Cryptography_TlsRequires64ByteSeed();
    internal static string get_Cryptography_BadHashSize_ForAlgorithm();
    internal static string get_Cryptography_Config_EncodedOIDError();
    internal static string get_Cryptography_CSP_NoPrivateKey();
    internal static string get_Cryptography_Der_Invalid_Encoding();
    internal static string get_Cryptography_DSA_KeyGenNotSupported();
    internal static string get_Cryptography_Encryption_MessageTooLong();
    internal static string get_Cryptography_ECXmlSerializationFormatRequired();
    internal static string get_Cryptography_ECC_NamedCurvesOnly();
    internal static string get_Cryptography_HashAlgorithmNameNullOrEmpty();
    internal static string get_Cryptography_InvalidOID();
    internal static string get_Cryptography_CurveNotSupported();
    internal static string get_Cryptography_InvalidCurveOid();
    internal static string get_Cryptography_InvalidCurveKeyParameters();
    internal static string get_Cryptography_InvalidDsaParameters_MissingFields();
    internal static string get_Cryptography_InvalidDsaParameters_MismatchedPGY();
    internal static string get_Cryptography_InvalidDsaParameters_MismatchedQX();
    internal static string get_Cryptography_InvalidDsaParameters_MismatchedPJ();
    internal static string get_Cryptography_InvalidDsaParameters_QRestriction_ShortKey();
    internal static string get_Cryptography_InvalidECCharacteristic2Curve();
    internal static string get_Cryptography_InvalidECPrimeCurve();
    internal static string get_Cryptography_InvalidECNamedCurve();
    internal static string get_Cryptography_InvalidKeySize();
    internal static string get_Cryptography_InvalidKey_SemiWeak();
    internal static string get_Cryptography_InvalidKey_Weak();
    internal static string get_Cryptography_InvalidIVSize();
    internal static string get_Cryptography_InvalidOperation();
    internal static string get_Cryptography_InvalidPadding();
    internal static string get_Cryptography_InvalidRsaParameters();
    internal static string get_Cryptography_InvalidPaddingMode();
    internal static string get_Cryptography_KeyTooSmall();
    internal static string get_Cryptography_MissingIV();
    internal static string get_Cryptography_MissingKey();
    internal static string get_Cryptography_MissingOID();
    internal static string get_Cryptography_MustTransformWholeBlock();
    internal static string get_Cryptography_OAEP_Decryption_Failed();
    internal static string get_Cryptography_OpenInvalidHandle();
    internal static string get_Cryptography_PartialBlock();
    internal static string get_Cryptography_PasswordDerivedBytes_FewBytesSalt();
    internal static string get_Cryptography_RC2_EKS40();
    internal static string get_Cryptography_RC2_EKSKS();
    internal static string get_Cryptography_RC2_EKSKS2();
    internal static string get_Cryptography_Rijndael_BlockSize();
    internal static string get_Cryptography_RSA_DecryptWrongSize();
    internal static string get_Cryptography_SignHash_WrongSize();
    internal static string get_Cryptography_TransformBeyondEndOfBuffer();
    internal static string get_Cryptography_CipherModeNotSupported();
    internal static string get_Cryptography_UnknownHashAlgorithm();
    internal static string get_Cryptography_UnknownPaddingMode();
    internal static string get_Cryptography_Unmapped_System_Typed_Error();
    internal static string get_NotSupported_Method();
    internal static string get_NotSupported_SubclassOverride();
    internal static string get_Cryptography_AlgorithmTypesMustBeVisible();
    internal static string get_Cryptography_AddNullOrEmptyName();
}
