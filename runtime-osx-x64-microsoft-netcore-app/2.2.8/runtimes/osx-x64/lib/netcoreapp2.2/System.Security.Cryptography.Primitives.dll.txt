internal static class FxResources.System.Security.Cryptography.Primitives.SR : object {
}
public abstract class System.Security.Cryptography.AsymmetricAlgorithm : object {
    protected int KeySizeValue;
    protected KeySizes[] LegalKeySizesValue;
    public int KeySize { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public string SignatureAlgorithm { get; }
    public string KeyExchangeAlgorithm { get; }
    public static AsymmetricAlgorithm Create();
    public static AsymmetricAlgorithm Create(string algName);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual string get_SignatureAlgorithm();
    public virtual string get_KeyExchangeAlgorithm();
    public virtual void FromXmlString(string xmlString);
    public virtual string ToXmlString(bool includePrivateParameters);
    public void Clear();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public enum System.Security.Cryptography.CipherMode : Enum {
    public int value__;
    public static CipherMode CBC;
    public static CipherMode ECB;
    [EditorBrowsableAttribute("1")]
public static CipherMode OFB;
    [EditorBrowsableAttribute("1")]
public static CipherMode CFB;
    public static CipherMode CTS;
}
internal static class System.Security.Cryptography.CryptoConfigForwarder : object {
    private static Func`2<string, object> s_createFromName;
    private static CryptoConfigForwarder();
    private static Func`2<string, object> BindCreateFromName();
    internal static object CreateFromName(string name);
}
public static class System.Security.Cryptography.CryptographicOperations : object {
    public static bool FixedTimeEquals(ReadOnlySpan`1<byte> left, ReadOnlySpan`1<byte> right);
    public static void ZeroMemory(Span`1<byte> buffer);
}
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Security.Cryptography.CryptographicUnexpectedOperationException : CryptographicException {
    public CryptographicUnexpectedOperationException(string message);
    public CryptographicUnexpectedOperationException(string message, Exception inner);
    public CryptographicUnexpectedOperationException(string format, string insert);
    protected CryptographicUnexpectedOperationException(SerializationInfo info, StreamingContext context);
}
public class System.Security.Cryptography.CryptoStream : Stream {
    private Stream _stream;
    private ICryptoTransform _transform;
    private CryptoStreamMode _transformMode;
    private Byte[] _inputBuffer;
    private int _inputBufferIndex;
    private int _inputBlockSize;
    private Byte[] _outputBuffer;
    private int _outputBufferIndex;
    private int _outputBlockSize;
    private bool _canRead;
    private bool _canWrite;
    private bool _finalBlockTransformed;
    private SemaphoreSlim _lazyAsyncActiveSemaphore;
    private bool _leaveOpen;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool HasFlushedFinalBlock { get; }
    private SemaphoreSlim AsyncActiveSemaphore { get; }
    public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode);
    public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode, bool leaveOpen);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public bool get_HasFlushedFinalBlock();
    public void FlushFinalBlock();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    [AsyncStateMachineAttribute("System.Security.Cryptography.CryptoStream/<ReadAsyncInternal>d__37")]
private Task`1<int> ReadAsyncInternal(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void CheckReadArguments(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("System.Security.Cryptography.CryptoStream/<ReadAsyncCore>d__42")]
private Task`1<int> ReadAsyncCore(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, bool useAsync);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    [AsyncStateMachineAttribute("System.Security.Cryptography.CryptoStream/<WriteAsyncInternal>d__46")]
private Task WriteAsyncInternal(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void CheckWriteArguments(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("System.Security.Cryptography.CryptoStream/<WriteAsyncCore>d__49")]
private Task WriteAsyncCore(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, bool useAsync);
    public void Clear();
    protected virtual void Dispose(bool disposing);
    private void InitializeBuffer();
    private SemaphoreSlim get_AsyncActiveSemaphore();
}
public enum System.Security.Cryptography.CryptoStreamMode : Enum {
    public int value__;
    public static CryptoStreamMode Read;
    public static CryptoStreamMode Write;
}
public abstract class System.Security.Cryptography.HashAlgorithm : object {
    private bool _disposed;
    protected int HashSizeValue;
    protected internal Byte[] HashValue;
    protected int State;
    public int HashSize { get; }
    public Byte[] Hash { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public bool CanTransformMultipleBlocks { get; }
    public bool CanReuseTransform { get; }
    public static HashAlgorithm Create();
    public static HashAlgorithm Create(string hashName);
    public virtual int get_HashSize();
    public virtual Byte[] get_Hash();
    public Byte[] ComputeHash(Byte[] buffer);
    public bool TryComputeHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    public Byte[] ComputeHash(Byte[] buffer, int offset, int count);
    public Byte[] ComputeHash(Stream inputStream);
    private Byte[] CaptureHashCodeAndReinitialize();
    public sealed virtual void Dispose();
    public void Clear();
    protected virtual void Dispose(bool disposing);
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual bool get_CanReuseTransform();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    private void ValidateTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    protected abstract virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected abstract virtual Byte[] HashFinal();
    public abstract virtual void Initialize();
    protected virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
}
[IsReadOnlyAttribute]
public class System.Security.Cryptography.HashAlgorithmName : ValueType {
    private string _name;
    public static HashAlgorithmName MD5 { get; }
    public static HashAlgorithmName SHA1 { get; }
    public static HashAlgorithmName SHA256 { get; }
    public static HashAlgorithmName SHA384 { get; }
    public static HashAlgorithmName SHA512 { get; }
    public string Name { get; }
    public HashAlgorithmName(string name);
    public static HashAlgorithmName get_MD5();
    public static HashAlgorithmName get_SHA1();
    public static HashAlgorithmName get_SHA256();
    public static HashAlgorithmName get_SHA384();
    public static HashAlgorithmName get_SHA512();
    public string get_Name();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(HashAlgorithmName other);
    public virtual int GetHashCode();
    public static bool op_Equality(HashAlgorithmName left, HashAlgorithmName right);
    public static bool op_Inequality(HashAlgorithmName left, HashAlgorithmName right);
}
[ExtensionAttribute]
internal static class System.Security.Cryptography.Helpers : object {
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] src);
    [ExtensionAttribute]
public static bool IsLegalSize(int size, KeySizes[] legalSizes);
    [ExtensionAttribute]
public static bool IsLegalSize(int size, KeySizes[] legalSizes, Boolean& validatedByZeroSkipSizeKeySizes);
}
public abstract class System.Security.Cryptography.HMAC : KeyedHashAlgorithm {
    private string _hashName;
    private int _blockSizeValue;
    protected int BlockSizeValue { get; protected set; }
    public string HashName { get; public set; }
    public Byte[] Key { get; public set; }
    protected int get_BlockSizeValue();
    protected void set_BlockSizeValue(int value);
    public static HMAC Create();
    public static HMAC Create(string algorithmName);
    public string get_HashName();
    public void set_HashName(string value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual void HashCore(ReadOnlySpan`1<byte> source);
    protected virtual Byte[] HashFinal();
    protected virtual bool TryHashFinal(Span`1<byte> destination, Int32& bytesWritten);
    public virtual void Initialize();
}
public interface System.Security.Cryptography.ICryptoTransform {
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public bool CanTransformMultipleBlocks { get; }
    public bool CanReuseTransform { get; }
    public abstract virtual int get_InputBlockSize();
    public abstract virtual int get_OutputBlockSize();
    public abstract virtual bool get_CanTransformMultipleBlocks();
    public abstract virtual bool get_CanReuseTransform();
    public abstract virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public abstract class System.Security.Cryptography.KeyedHashAlgorithm : HashAlgorithm {
    protected Byte[] KeyValue;
    public Byte[] Key { get; public set; }
    public static KeyedHashAlgorithm Create();
    public static KeyedHashAlgorithm Create(string algName);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.KeySizes : object {
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipSize>k__BackingField;
    public int MinSize { get; private set; }
    public int MaxSize { get; private set; }
    public int SkipSize { get; private set; }
    public KeySizes(int minSize, int maxSize, int skipSize);
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [CompilerGeneratedAttribute]
private void set_MinSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxSize();
    [CompilerGeneratedAttribute]
private void set_MaxSize(int value);
    [CompilerGeneratedAttribute]
public int get_SkipSize();
    [CompilerGeneratedAttribute]
private void set_SkipSize(int value);
}
public enum System.Security.Cryptography.PaddingMode : Enum {
    public int value__;
    public static PaddingMode None;
    public static PaddingMode PKCS7;
    public static PaddingMode Zeros;
    public static PaddingMode ANSIX923;
    public static PaddingMode ISO10126;
}
public abstract class System.Security.Cryptography.SymmetricAlgorithm : object {
    protected CipherMode ModeValue;
    protected PaddingMode PaddingValue;
    protected Byte[] KeyValue;
    protected Byte[] IVValue;
    protected int BlockSizeValue;
    protected int FeedbackSizeValue;
    protected int KeySizeValue;
    protected KeySizes[] LegalBlockSizesValue;
    protected KeySizes[] LegalKeySizesValue;
    public int FeedbackSize { get; public set; }
    public int BlockSize { get; public set; }
    public Byte[] IV { get; public set; }
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public KeySizes[] LegalBlockSizes { get; }
    public KeySizes[] LegalKeySizes { get; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public static SymmetricAlgorithm Create();
    public static SymmetricAlgorithm Create(string algName);
    public virtual int get_FeedbackSize();
    public virtual void set_FeedbackSize(int value);
    public virtual int get_BlockSize();
    public virtual void set_BlockSize(int value);
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual CipherMode get_Mode();
    public virtual void set_Mode(CipherMode value);
    public virtual PaddingMode get_Padding();
    public virtual void set_Padding(PaddingMode value);
    public virtual ICryptoTransform CreateDecryptor();
    public abstract virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public abstract virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public sealed virtual void Dispose();
    public void Clear();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void GenerateIV();
    public abstract virtual void GenerateKey();
    public bool ValidKeySize(int bitLength);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string Arg_CryptographyException { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string Argument_StreamNotReadable { get; }
    internal static string Argument_StreamNotWritable { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Cryptography_CryptoStream_FlushFinalBlockTwice { get; }
    internal static string Cryptography_DefaultAlgorithm_NotSupported { get; }
    internal static string Cryptography_HashNotYetFinalized { get; }
    internal static string Cryptography_InvalidFeedbackSize { get; }
    internal static string Cryptography_InvalidBlockSize { get; }
    internal static string Cryptography_InvalidCipherMode { get; }
    internal static string Cryptography_InvalidIVSize { get; }
    internal static string Cryptography_InvalidKeySize { get; }
    internal static string Cryptography_InvalidPaddingMode { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string HashNameMultipleSetNotSupported { get; }
    internal static string CryptoConfigNotSupported { get; }
    internal static string InvalidOperation_IncorrectImplementation { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_Arg_CryptographyException();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_Argument_InvalidValue();
    internal static string get_Argument_StreamNotReadable();
    internal static string get_Argument_StreamNotWritable();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Cryptography_CryptoStream_FlushFinalBlockTwice();
    internal static string get_Cryptography_DefaultAlgorithm_NotSupported();
    internal static string get_Cryptography_HashNotYetFinalized();
    internal static string get_Cryptography_InvalidFeedbackSize();
    internal static string get_Cryptography_InvalidBlockSize();
    internal static string get_Cryptography_InvalidCipherMode();
    internal static string get_Cryptography_InvalidIVSize();
    internal static string get_Cryptography_InvalidKeySize();
    internal static string get_Cryptography_InvalidPaddingMode();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_HashNameMultipleSetNotSupported();
    internal static string get_CryptoConfigNotSupported();
    internal static string get_InvalidOperation_IncorrectImplementation();
}
[IsReadOnlyAttribute]
internal class System.Threading.Tasks.ForceAsyncAwaiter : ValueType {
    private Task _task;
    public bool IsCompleted { get; }
    internal ForceAsyncAwaiter(Task task);
    public ForceAsyncAwaiter GetAwaiter();
    public bool get_IsCompleted();
    public void GetResult();
    public sealed virtual void OnCompleted(Action action);
    public sealed virtual void UnsafeOnCompleted(Action action);
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskAwaiters : object {
    [ExtensionAttribute]
public static ForceAsyncAwaiter ForceAsync(Task task);
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
