internal static class FxResources.System.Threading.Thread.SR : object {
}
public class System.LocalDataStoreSlot : object {
    [CompilerGeneratedAttribute]
private ThreadLocal`1<object> <Data>k__BackingField;
    internal ThreadLocal`1<object> Data { get; private set; }
    internal LocalDataStoreSlot(ThreadLocal`1<object> data);
    [CompilerGeneratedAttribute]
internal ThreadLocal`1<object> get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(ThreadLocal`1<object> value);
    protected virtual override void Finalize();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string Thread_Operation_RequiresCurrentThread { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string ArgumentOutOfRange_TimeoutMilliseconds { get; }
    internal static string ArgumentOutOfRange_NeedNonnegativeNumber { get; }
    internal static string Thread_GetSetCompressedStack_NotSupported { get; }
    internal static string PlatformNotSupported_COMInterop { get; }
    internal static string PlatformNotSupported_ThreadAbort { get; }
    internal static string PlatformNotSupported_ThreadSuspend { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    internal static string GetResourceString(string resourceKey, string defaultString);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_Thread_Operation_RequiresCurrentThread();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_ArgumentOutOfRange_TimeoutMilliseconds();
    internal static string get_ArgumentOutOfRange_NeedNonnegativeNumber();
    internal static string get_Thread_GetSetCompressedStack_NotSupported();
    internal static string get_PlatformNotSupported_COMInterop();
    internal static string get_PlatformNotSupported_ThreadAbort();
    internal static string get_PlatformNotSupported_ThreadSuspend();
}
public class System.Threading.CompressedStack : object {
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static CompressedStack Capture();
    public CompressedStack CreateCopy();
    public static CompressedStack GetCompressedStack();
    public static void Run(CompressedStack compressedStack, ContextCallback callback, object state);
}
public class System.Threading.Thread : CriticalFinalizerObject {
    [ThreadStaticAttribute]
private static Thread t_currentThread;
    private RuntimeThread _runtimeThread;
    private Delegate _start;
    private IPrincipal _principal;
    public static Thread CurrentThread { get; }
    public CultureInfo CurrentCulture { get; public set; }
    public CultureInfo CurrentUICulture { get; public set; }
    public static IPrincipal CurrentPrincipal { get; public set; }
    public ExecutionContext ExecutionContext { get; }
    public bool IsAlive { get; }
    public bool IsBackground { get; public set; }
    public bool IsThreadPoolThread { get; }
    public int ManagedThreadId { get; }
    public string Name { get; public set; }
    public ThreadPriority Priority { get; public set; }
    public ThreadState ThreadState { get; }
    [ObsoleteAttribute("The ApartmentState property has been deprecated.  Use GetApartmentState, SetApartmentState or TrySetApartmentState instead.", "False")]
public ApartmentState ApartmentState { get; public set; }
    private Thread(RuntimeThread runtimeThread);
    public Thread(ThreadStart start);
    public Thread(ThreadStart start, int maxStackSize);
    public Thread(ParameterizedThreadStart start);
    public Thread(ParameterizedThreadStart start, int maxStackSize);
    private void ThreadMain_ThreadStart();
    private void ThreadMain_ParameterizedThreadStart(object parameter);
    public static Thread get_CurrentThread();
    private void RequireCurrentThread();
    public CultureInfo get_CurrentCulture();
    public void set_CurrentCulture(CultureInfo value);
    public CultureInfo get_CurrentUICulture();
    public void set_CurrentUICulture(CultureInfo value);
    public static IPrincipal get_CurrentPrincipal();
    public static void set_CurrentPrincipal(IPrincipal value);
    public ExecutionContext get_ExecutionContext();
    public bool get_IsAlive();
    public bool get_IsBackground();
    public void set_IsBackground(bool value);
    public bool get_IsThreadPoolThread();
    public int get_ManagedThreadId();
    public string get_Name();
    public void set_Name(string value);
    public ThreadPriority get_Priority();
    public void set_Priority(ThreadPriority value);
    public ThreadState get_ThreadState();
    public void Abort();
    public void Abort(object stateInfo);
    public static void ResetAbort();
    [ObsoleteAttribute("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public void Suspend();
    [ObsoleteAttribute("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public void Resume();
    public static void BeginCriticalRegion();
    public static void EndCriticalRegion();
    public static void BeginThreadAffinity();
    public static void EndThreadAffinity();
    public static LocalDataStoreSlot AllocateDataSlot();
    public static LocalDataStoreSlot AllocateNamedDataSlot(string name);
    public static LocalDataStoreSlot GetNamedDataSlot(string name);
    public static void FreeNamedDataSlot(string name);
    public static object GetData(LocalDataStoreSlot slot);
    public static void SetData(LocalDataStoreSlot slot, object data);
    public ApartmentState get_ApartmentState();
    public void set_ApartmentState(ApartmentState value);
    public void SetApartmentState(ApartmentState state);
    public bool TrySetApartmentState(ApartmentState state);
    private static int ToTimeoutMilliseconds(TimeSpan timeout);
    [ObsoleteAttribute("Thread.GetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")]
public CompressedStack GetCompressedStack();
    [ObsoleteAttribute("Thread.SetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")]
public void SetCompressedStack(CompressedStack stack);
    public static int GetCurrentProcessorId();
    public static AppDomain GetDomain();
    public static int GetDomainID();
    public virtual int GetHashCode();
    public void Interrupt();
    public void Join();
    public bool Join(int millisecondsTimeout);
    public bool Join(TimeSpan timeout);
    public static void MemoryBarrier();
    public static void Sleep(int millisecondsTimeout);
    public static void Sleep(TimeSpan timeout);
    public static void SpinWait(int iterations);
    public static bool Yield();
    public void Start();
    public void Start(object parameter);
    public static byte VolatileRead(Byte& address);
    public static double VolatileRead(Double& address);
    public static short VolatileRead(Int16& address);
    public static int VolatileRead(Int32& address);
    public static long VolatileRead(Int64& address);
    public static IntPtr VolatileRead(IntPtr& address);
    public static object VolatileRead(Object& address);
    [CLSCompliantAttribute("False")]
public static sbyte VolatileRead(SByte& address);
    public static float VolatileRead(Single& address);
    [CLSCompliantAttribute("False")]
public static ushort VolatileRead(UInt16& address);
    [CLSCompliantAttribute("False")]
public static UInt32 VolatileRead(UInt32& address);
    [CLSCompliantAttribute("False")]
public static ulong VolatileRead(UInt64& address);
    [CLSCompliantAttribute("False")]
public static UIntPtr VolatileRead(UIntPtr& address);
    public static void VolatileWrite(Byte& address, byte value);
    public static void VolatileWrite(Double& address, double value);
    public static void VolatileWrite(Int16& address, short value);
    public static void VolatileWrite(Int32& address, int value);
    public static void VolatileWrite(Int64& address, long value);
    public static void VolatileWrite(IntPtr& address, IntPtr value);
    public static void VolatileWrite(Object& address, object value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(SByte& address, sbyte value);
    public static void VolatileWrite(Single& address, float value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UInt16& address, ushort value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UInt32& address, UInt32 value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UInt64& address, ulong value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UIntPtr& address, UIntPtr value);
    public ApartmentState GetApartmentState();
    private static Exception GetApartmentStateChangeFailedException();
    private bool TrySetApartmentStateUnchecked(ApartmentState state);
    public void DisableComObjectEagerCleanup();
}
public class System.Threading.ThreadExceptionEventArgs : EventArgs {
    private Exception m_exception;
    public Exception Exception { get; }
    public ThreadExceptionEventArgs(Exception t);
    public Exception get_Exception();
}
public class System.Threading.ThreadExceptionEventHandler : MulticastDelegate {
    public ThreadExceptionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ThreadExceptionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ThreadExceptionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
