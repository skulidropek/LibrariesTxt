internal static class FxResources.System.Private.Xml.SR : object {
}
internal enum MS.Internal.Xml.Cache.TextBlockType : Enum {
    public int value__;
    public static TextBlockType None;
    public static TextBlockType Text;
    public static TextBlockType SignificantWhitespace;
    public static TextBlockType Whitespace;
}
internal abstract class MS.Internal.Xml.Cache.XPathDocumentBaseIterator : XPathNodeIterator {
    protected XPathDocumentNavigator ctxt;
    protected int pos;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected XPathDocumentBaseIterator(XPathDocumentNavigator ctxt);
    protected XPathDocumentBaseIterator(XPathDocumentBaseIterator iter);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
}
internal class MS.Internal.Xml.Cache.XPathDocumentBuilder : XmlRawWriter {
    private NodePageFactory _nodePageFact;
    private NodePageFactory _nmspPageFact;
    private TextBlockBuilder _textBldr;
    private Stack`1<XPathNodeRef> _stkNmsp;
    private XPathNodeInfoTable _infoTable;
    private XPathDocument _doc;
    private IXmlLineInfo _lineInfo;
    private XmlNameTable _nameTable;
    private bool _atomizeNames;
    private XPathNode[] _pageNmsp;
    private int _idxNmsp;
    private XPathNode[] _pageParent;
    private int _idxParent;
    private XPathNode[] _pageSibling;
    private int _idxSibling;
    private int _lineNumBase;
    private int _linePosBase;
    private XmlQualifiedName _idAttrName;
    private Hashtable _elemIdMap;
    private XPathNodeRef[] _elemNameIndex;
    private static int ElementIndexSize;
    public XPathDocumentBuilder(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags);
    public void Initialize(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public void WriteStartElement(string prefix, string localName, string ns, string baseUri);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    internal virtual void WriteEndElement(string prefix, string localName, string namespaceName);
    internal virtual void WriteFullEndElement(string prefix, string localName, string namespaceName);
    public void WriteEndElement(bool allowShortcutTag);
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceName);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public void WriteProcessingInstruction(string name, string text, string baseUri);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public void WriteString(string text, TextBlockType textType);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void Close();
    public virtual void Flush();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    public void CreateIdTables(IDtdInfo dtdInfo);
    private XPathNodeRef LinkSimilarElements(XPathNode[] pagePrev, int idxPrev, XPathNode[] pageNext, int idxNext);
    private int NewNamespaceNode(XPathNode[]& page, string prefix, string namespaceUri, XPathNode[] pageElem, int idxElem);
    private int NewNode(XPathNode[]& page, XPathNodeType xptyp, string localName, string namespaceUri, string prefix, string baseUri);
    private void ComputeLineInfo(bool isTextNode, Int32& lineNumOffset, Int32& linePosOffset);
    private void AddSibling(XPathNodeType xptyp, string localName, string namespaceUri, string prefix, string baseUri);
    private void CachedTextNode();
}
internal class MS.Internal.Xml.Cache.XPathDocumentElementChildIterator : XPathDocumentBaseIterator {
    private string _localName;
    private string _namespaceUri;
    public XPathDocumentElementChildIterator(XPathDocumentNavigator parent, string name, string namespaceURI);
    public XPathDocumentElementChildIterator(XPathDocumentElementChildIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator : XPathDocumentBaseIterator {
    private XPathDocumentNavigator _end;
    private string _localName;
    private string _namespaceUri;
    private bool _matchSelf;
    public XPathDocumentElementDescendantIterator(XPathDocumentNavigator root, string name, string namespaceURI, bool matchSelf);
    public XPathDocumentElementDescendantIterator(XPathDocumentElementDescendantIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentKindChildIterator : XPathDocumentBaseIterator {
    private XPathNodeType _typ;
    public XPathDocumentKindChildIterator(XPathDocumentNavigator parent, XPathNodeType typ);
    public XPathDocumentKindChildIterator(XPathDocumentKindChildIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator : XPathDocumentBaseIterator {
    private XPathDocumentNavigator _end;
    private XPathNodeType _typ;
    private bool _matchSelf;
    public XPathDocumentKindDescendantIterator(XPathDocumentNavigator root, XPathNodeType typ, bool matchSelf);
    public XPathDocumentKindDescendantIterator(XPathDocumentKindDescendantIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentNavigator : XPathNavigator {
    private XPathNode[] _pageCurrent;
    private XPathNode[] _pageParent;
    private int _idxCurrent;
    private int _idxParent;
    private string _atomizedLocalName;
    public string Value { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlNameTable NameTable { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    internal string UniqueId { get; }
    public object UnderlyingObject { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XPathDocumentNavigator(XPathNode[] pageCurrent, int idxCurrent, XPathNode[] pageParent, int idxParent);
    public XPathDocumentNavigator(XPathDocumentNavigator nav);
    public virtual string get_Value();
    public virtual XPathNavigator Clone();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlNameTable get_NameTable();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool get_HasAttributes();
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool get_HasChildren();
    public virtual void MoveToRoot();
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator other);
    private int GetPrimaryLocation();
    private int GetSecondaryLocation();
    internal virtual string get_UniqueId();
    public virtual object get_UnderlyingObject();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public int GetPositionHashCode();
    public bool IsElementMatch(string localName, string namespaceURI);
    public bool IsKindMatch(XPathNodeType typ);
    private int GetFollowingEnd(XPathDocumentNavigator end, bool useParentOfVirtual, XPathNode[]& pageEnd);
}
internal class MS.Internal.Xml.Cache.XPathNode : ValueType {
    private XPathNodeInfoAtom _info;
    private ushort _idxSibling;
    private ushort _idxParent;
    private ushort _idxSimilar;
    private ushort _posOffset;
    private UInt32 _props;
    private string _value;
    private static UInt32 NodeTypeMask;
    private static UInt32 HasAttributeBit;
    private static UInt32 HasContentChildBit;
    private static UInt32 HasElementChildBit;
    private static UInt32 HasCollapsedTextBit;
    private static UInt32 AllowShortcutTagBit;
    private static UInt32 HasNmspDeclsBit;
    private static UInt32 LineNumberMask;
    private static int LineNumberShift;
    private static int CollapsedPositionShift;
    public static int MaxLineNumberOffset;
    public static int MaxLinePositionOffset;
    public static int MaxCollapsedPositionOffset;
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceUri { get; }
    public XPathDocument Document { get; }
    public string BaseUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public int CollapsedLinePosition { get; }
    public XPathNodePageInfo PageInfo { get; }
    public bool IsXmlNamespaceNode { get; }
    public bool HasSibling { get; }
    public bool HasCollapsedText { get; }
    public bool HasAttribute { get; }
    public bool HasContentChild { get; }
    public bool HasElementChild { get; }
    public bool IsAttrNmsp { get; }
    public bool IsText { get; }
    public bool HasNamespaceDecls { get; public set; }
    public bool AllowShortcutTag { get; }
    public int LocalNameHashCode { get; }
    public string Value { get; }
    public XPathNodeType get_NodeType();
    public string get_Prefix();
    public string get_LocalName();
    public string get_Name();
    public string get_NamespaceUri();
    public XPathDocument get_Document();
    public string get_BaseUri();
    public int get_LineNumber();
    public int get_LinePosition();
    public int get_CollapsedLinePosition();
    public XPathNodePageInfo get_PageInfo();
    public int GetRoot(XPathNode[]& pageNode);
    public int GetParent(XPathNode[]& pageNode);
    public int GetSibling(XPathNode[]& pageNode);
    public int GetSimilarElement(XPathNode[]& pageNode);
    public bool NameMatch(string localName, string namespaceName);
    public bool ElementMatch(string localName, string namespaceName);
    public bool get_IsXmlNamespaceNode();
    public bool get_HasSibling();
    public bool get_HasCollapsedText();
    public bool get_HasAttribute();
    public bool get_HasContentChild();
    public bool get_HasElementChild();
    public bool get_IsAttrNmsp();
    public bool get_IsText();
    public bool get_HasNamespaceDecls();
    public void set_HasNamespaceDecls(bool value);
    public bool get_AllowShortcutTag();
    public int get_LocalNameHashCode();
    public string get_Value();
    public void Create(XPathNodePageInfo pageInfo);
    public void Create(XPathNodeInfoAtom info, XPathNodeType xptyp, int idxParent);
    public void SetLineInfoOffsets(int lineNumOffset, int linePosOffset);
    public void SetCollapsedLineInfoOffset(int posOffset);
    public void SetValue(string value);
    public void SetEmptyValue(bool allowShortcutTag);
    public void SetCollapsedValue(string value);
    public void SetParentProperties(XPathNodeType xptyp);
    public void SetSibling(XPathNodeInfoTable infoTable, XPathNode[] pageSibling, int idxSibling);
    public void SetSimilarElement(XPathNodeInfoTable infoTable, XPathNode[] pageSimilar, int idxSimilar);
}
internal abstract class MS.Internal.Xml.Cache.XPathNodeHelper : object {
    public static int GetLocalNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    public static int GetInScopeNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    public static bool GetFirstAttribute(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetNextAttribute(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetParent(XPathNode[]& pageNode, Int32& idxNode);
    public static int GetLocation(XPathNode[] pageNode, int idxNode);
    public static bool GetElementChild(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetElementSibling(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ);
    public static bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ);
    public static bool GetPreviousContentSibling(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetAttribute(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetElementFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, string localName, string namespaceName);
    public static bool GetContentFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, XPathNodeType typ);
    public static bool GetTextFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd);
    public static bool GetNonDescendant(XPathNode[]& pageNode, Int32& idxNode);
    private static void GetChild(XPathNode[]& pageNode, Int32& idxNode);
}
internal class MS.Internal.Xml.Cache.XPathNodeInfoAtom : object {
    private string _localName;
    private string _namespaceUri;
    private string _prefix;
    private string _baseUri;
    private XPathNode[] _pageParent;
    private XPathNode[] _pageSibling;
    private XPathNode[] _pageSimilar;
    private XPathDocument _doc;
    private int _lineNumBase;
    private int _linePosBase;
    private int _hashCode;
    private int _localNameHash;
    private XPathNodeInfoAtom _next;
    private XPathNodePageInfo _pageInfo;
    public XPathNodePageInfo PageInfo { get; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public string Prefix { get; }
    public string BaseUri { get; }
    public XPathNode[] SiblingPage { get; }
    public XPathNode[] SimilarElementPage { get; }
    public XPathNode[] ParentPage { get; }
    public XPathDocument Document { get; }
    public int LineNumberBase { get; }
    public int LinePositionBase { get; }
    public int LocalNameHashCode { get; }
    public XPathNodeInfoAtom Next { get; public set; }
    public XPathNodeInfoAtom(XPathNodePageInfo pageInfo);
    public XPathNodeInfoAtom(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    public void Init(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    public XPathNodePageInfo get_PageInfo();
    public string get_LocalName();
    public string get_NamespaceUri();
    public string get_Prefix();
    public string get_BaseUri();
    public XPathNode[] get_SiblingPage();
    public XPathNode[] get_SimilarElementPage();
    public XPathNode[] get_ParentPage();
    public XPathDocument get_Document();
    public int get_LineNumberBase();
    public int get_LinePositionBase();
    public int get_LocalNameHashCode();
    public XPathNodeInfoAtom get_Next();
    public void set_Next(XPathNodeInfoAtom value);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(XPathNodeInfoAtom other);
    public virtual string ToString();
}
internal class MS.Internal.Xml.Cache.XPathNodeInfoTable : object {
    private XPathNodeInfoAtom[] _hashTable;
    private int _sizeTable;
    private XPathNodeInfoAtom _infoCached;
    private static int DefaultTableSize;
    public XPathNodeInfoAtom Create(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    private XPathNodeInfoAtom Atomize(XPathNodeInfoAtom info);
    private void AddInfo(XPathNodeInfoAtom info);
    public virtual string ToString();
}
internal class MS.Internal.Xml.Cache.XPathNodePageInfo : object {
    private int _pageNum;
    private int _nodeCount;
    private XPathNode[] _pagePrev;
    private XPathNode[] _pageNext;
    public int PageNumber { get; }
    public int NodeCount { get; public set; }
    public XPathNode[] PreviousPage { get; }
    public XPathNode[] NextPage { get; public set; }
    public XPathNodePageInfo(XPathNode[] pagePrev, int pageNum);
    public int get_PageNumber();
    public int get_NodeCount();
    public void set_NodeCount(int value);
    public XPathNode[] get_PreviousPage();
    public XPathNode[] get_NextPage();
    public void set_NextPage(XPathNode[] value);
}
internal class MS.Internal.Xml.Cache.XPathNodeRef : ValueType {
    private XPathNode[] _page;
    private int _idx;
    public XPathNode[] Page { get; }
    public int Index { get; }
    public XPathNodeRef(XPathNode[] page, int idx);
    public XPathNode[] get_Page();
    public int get_Index();
    public virtual int GetHashCode();
}
internal class MS.Internal.Xml.XPath.AbsoluteQuery : ContextQuery {
    private AbsoluteQuery(AbsoluteQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal abstract class MS.Internal.Xml.XPath.AstNode : object {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual AstType get_Type();
    public abstract virtual XPathResultType get_ReturnType();
}
internal class MS.Internal.Xml.XPath.AttributeQuery : BaseAxisQuery {
    private bool _onAttribute;
    public AttributeQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type);
    private AttributeQuery(AttributeQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Axis : AstNode {
    private AxisType _axisType;
    private AstNode _input;
    private string _prefix;
    private string _name;
    private XPathNodeType _nodeType;
    protected bool abbrAxis;
    private string _urn;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode Input { get; public set; }
    public string Prefix { get; }
    public string Name { get; }
    public XPathNodeType NodeType { get; }
    public AxisType TypeOfAxis { get; }
    public bool AbbrAxis { get; }
    public string Urn { get; public set; }
    public Axis(AxisType axisType, AstNode input, string prefix, string name, XPathNodeType nodetype);
    public Axis(AxisType axisType, AstNode input);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_Input();
    public void set_Input(AstNode value);
    public string get_Prefix();
    public string get_Name();
    public XPathNodeType get_NodeType();
    public AxisType get_TypeOfAxis();
    public bool get_AbbrAxis();
    public string get_Urn();
    public void set_Urn(string value);
}
internal abstract class MS.Internal.Xml.XPath.BaseAxisQuery : Query {
    internal Query qyInput;
    private bool _nameTest;
    private string _name;
    private string _prefix;
    private string _nsUri;
    private XPathNodeType _typeTest;
    protected XPathNavigator currentNode;
    protected int position;
    protected string Name { get; }
    protected string Namespace { get; }
    protected bool NameTest { get; }
    protected XPathNodeType TypeTest { get; }
    public int CurrentPosition { get; }
    public XPathNavigator Current { get; }
    public double XsltDefaultPriority { get; }
    public XPathResultType StaticType { get; }
    protected BaseAxisQuery(Query qyInput);
    protected BaseAxisQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected BaseAxisQuery(BaseAxisQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext context);
    protected string get_Name();
    protected string get_Namespace();
    protected bool get_NameTest();
    protected XPathNodeType get_TypeTest();
    public virtual int get_CurrentPosition();
    public virtual XPathNavigator get_Current();
    public virtual bool matches(XPathNavigator e);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual double get_XsltDefaultPriority();
    public virtual XPathResultType get_StaticType();
}
internal class MS.Internal.Xml.XPath.BooleanExpr : ValueQuery {
    private Query _opnd1;
    private Query _opnd2;
    private bool _isOr;
    public XPathResultType StaticType { get; }
    public BooleanExpr(Op op, Query opnd1, Query opnd2);
    private BooleanExpr(BooleanExpr other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
}
internal class MS.Internal.Xml.XPath.BooleanFunctions : ValueQuery {
    private Query _arg;
    private FunctionType _funcType;
    public XPathResultType StaticType { get; }
    public BooleanFunctions(FunctionType funcType, Query arg);
    private BooleanFunctions(BooleanFunctions other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    internal static bool toBoolean(double number);
    internal static bool toBoolean(string str);
    internal bool toBoolean(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    private bool Not(XPathNodeIterator nodeIterator);
    private bool Lang(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
}
internal abstract class MS.Internal.Xml.XPath.CacheAxisQuery : BaseAxisQuery {
    protected List`1<XPathNavigator> outputBuffer;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public CacheAxisQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected CacheAxisQuery(CacheAxisQuery other);
    public virtual void Reset();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.CacheChildrenQuery : ChildrenQuery {
    private XPathNavigator _nextInput;
    private ClonableStack`1<XPathNavigator> _elementStk;
    private ClonableStack`1<int> _positionStk;
    private bool _needInput;
    public CacheChildrenQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    private CacheChildrenQuery(CacheChildrenQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    private bool DecideNextNode();
    private XPathNavigator GetNextInput();
    public virtual XPathNodeIterator Clone();
}
internal abstract class MS.Internal.Xml.XPath.CacheOutputQuery : Query {
    internal Query input;
    protected List`1<XPathNavigator> outputBuffer;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public CacheOutputQuery(Query input);
    protected CacheOutputQuery(CacheOutputQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.ChildrenQuery : BaseAxisQuery {
    private XPathNodeIterator _iterator;
    public ChildrenQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    protected ChildrenQuery(ChildrenQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public sealed virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.ClonableStack`1 : List`1<T> {
    private ClonableStack`1(IEnumerable`1<T> collection);
    public void Push(T value);
    public T Pop();
    public T Peek();
    public ClonableStack`1<T> Clone();
}
internal class MS.Internal.Xml.XPath.CompiledXpathExpr : XPathExpression {
    private Query _query;
    private string _expr;
    private bool _needContext;
    internal Query QueryTree { get; }
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    internal CompiledXpathExpr(Query query, string expression, bool needContext);
    internal Query get_QueryTree();
    public virtual string get_Expression();
    public virtual void CheckErrors();
    public virtual void AddSort(object expr, IComparer comparer);
    public virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public virtual XPathExpression Clone();
    public virtual void SetContext(XmlNamespaceManager nsManager);
    public virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public virtual XPathResultType get_ReturnType();
}
internal class MS.Internal.Xml.XPath.ContextQuery : Query {
    protected XPathNavigator contextNode;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    protected ContextQuery(ContextQuery other);
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal abstract class MS.Internal.Xml.XPath.DescendantBaseQuery : BaseAxisQuery {
    protected bool matchSelf;
    protected bool abbrAxis;
    public DescendantBaseQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis);
    public DescendantBaseQuery(DescendantBaseQuery other);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
}
internal class MS.Internal.Xml.XPath.DescendantOverDescendantQuery : DescendantBaseQuery {
    private int _level;
    public DescendantOverDescendantQuery(Query qyParent, bool matchSelf, string name, string prefix, XPathNodeType typeTest, bool abbrAxis);
    private DescendantOverDescendantQuery(DescendantOverDescendantQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    private bool MoveToFirstChild();
    private bool MoveUpUntilNext();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.DescendantQuery : DescendantBaseQuery {
    private XPathNodeIterator _nodeIterator;
    internal DescendantQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis);
    public DescendantQuery(DescendantQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.DocumentOrderQuery : CacheOutputQuery {
    public DocumentOrderQuery(Query qyParent);
    private DocumentOrderQuery(DocumentOrderQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.EmptyQuery : Query {
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public XPathResultType StaticType { get; }
    public XPathNavigator Current { get; }
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
    public virtual XPathResultType get_StaticType();
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
}
internal abstract class MS.Internal.Xml.XPath.ExtensionQuery : Query {
    protected string prefix;
    protected string name;
    protected XsltContext xsltContext;
    private ResetableIterator _queryIterator;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected string QName { get; }
    public int Count { get; }
    public XPathResultType StaticType { get; }
    public ExtensionQuery(string prefix, string name);
    protected ExtensionQuery(ExtensionQuery other);
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
    public virtual XPathNavigator Advance();
    public virtual int get_CurrentPosition();
    protected object ProcessResult(object value);
    protected string get_QName();
    public virtual int get_Count();
    public virtual XPathResultType get_StaticType();
}
internal class MS.Internal.Xml.XPath.Filter : AstNode {
    private AstNode _input;
    private AstNode _condition;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode Input { get; }
    public AstNode Condition { get; }
    public Filter(AstNode input, AstNode condition);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_Input();
    public AstNode get_Condition();
}
internal class MS.Internal.Xml.XPath.FilterQuery : BaseAxisQuery {
    private Query _cond;
    private bool _noPosition;
    public Query Condition { get; }
    public QueryProps Properties { get; }
    public FilterQuery(Query qyParent, Query cond, bool noPosition);
    private FilterQuery(FilterQuery other);
    public virtual void Reset();
    public Query get_Condition();
    public virtual void SetXsltContext(XsltContext input);
    public virtual XPathNavigator Advance();
    internal bool EvaluatePredicate();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual QueryProps get_Properties();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.FollowingQuery : BaseAxisQuery {
    private XPathNavigator _input;
    private XPathNodeIterator _iterator;
    public FollowingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    private FollowingQuery(FollowingQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.FollSiblingQuery : BaseAxisQuery {
    private ClonableStack`1<XPathNavigator> _elementStk;
    private List`1<XPathNavigator> _parentStk;
    private XPathNavigator _nextInput;
    public FollSiblingQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    private FollSiblingQuery(FollSiblingQuery other);
    public virtual void Reset();
    private bool Visited(XPathNavigator nav);
    private XPathNavigator FetchInput();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.ForwardPositionQuery : CacheOutputQuery {
    public ForwardPositionQuery(Query input);
    protected ForwardPositionQuery(ForwardPositionQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Function : AstNode {
    private FunctionType _functionType;
    private List`1<AstNode> _argumentList;
    private string _name;
    private string _prefix;
    internal static XPathResultType[] ReturnTypes;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public FunctionType TypeOfFunction { get; }
    public List`1<AstNode> ArgumentList { get; }
    public string Prefix { get; }
    public string Name { get; }
    public Function(FunctionType ftype, List`1<AstNode> argumentList);
    public Function(string prefix, string name, List`1<AstNode> argumentList);
    public Function(FunctionType ftype, AstNode arg);
    private static Function();
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public FunctionType get_TypeOfFunction();
    public List`1<AstNode> get_ArgumentList();
    public string get_Prefix();
    public string get_Name();
}
internal class MS.Internal.Xml.XPath.FunctionQuery : ExtensionQuery {
    private IList`1<Query> _args;
    private IXsltContextFunction _function;
    public XPathResultType StaticType { get; }
    public FunctionQuery(string prefix, string name, List`1<Query> args);
    private FunctionQuery(FunctionQuery other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNavigator MatchNode(XPathNavigator navigator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Group : AstNode {
    private AstNode _groupNode;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode GroupNode { get; }
    public Group(AstNode groupNode);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_GroupNode();
}
internal class MS.Internal.Xml.XPath.GroupQuery : BaseAxisQuery {
    public XPathResultType StaticType { get; }
    public QueryProps Properties { get; }
    public GroupQuery(Query qy);
    private GroupQuery(GroupQuery other);
    public virtual XPathNavigator Advance();
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.IDQuery : CacheOutputQuery {
    public IDQuery(Query arg);
    private IDQuery(IDQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    private void ProcessIds(XPathNavigator contextNode, string val);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.IteratorFilter : XPathNodeIterator {
    private XPathNodeIterator _innerIterator;
    private string _name;
    private int _position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal IteratorFilter(XPathNodeIterator innerIterator, string name);
    private IteratorFilter(IteratorFilter it);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.LogicalExpr : ValueQuery {
    private Op _op;
    private Query _opnd1;
    private Query _opnd2;
    private static cmpXslt[][] s_CompXsltE;
    private static cmpXslt[][] s_CompXsltO;
    public XPathResultType StaticType { get; }
    public LogicalExpr(Op op, Query opnd1, Query opnd2);
    private LogicalExpr(LogicalExpr other);
    private static LogicalExpr();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    private static bool cmpQueryQueryE(Op op, object val1, object val2);
    private static bool cmpQueryQueryO(Op op, object val1, object val2);
    private static bool cmpQueryNumber(Op op, object val1, object val2);
    private static bool cmpQueryStringE(Op op, object val1, object val2);
    private static bool cmpQueryStringO(Op op, object val1, object val2);
    private static bool cmpRtfQueryE(Op op, object val1, object val2);
    private static bool cmpRtfQueryO(Op op, object val1, object val2);
    private static bool cmpQueryBoolE(Op op, object val1, object val2);
    private static bool cmpQueryBoolO(Op op, object val1, object val2);
    private static bool cmpBoolBoolE(Op op, bool n1, bool n2);
    private static bool cmpBoolBoolE(Op op, object val1, object val2);
    private static bool cmpBoolBoolO(Op op, object val1, object val2);
    private static bool cmpBoolNumberE(Op op, object val1, object val2);
    private static bool cmpBoolNumberO(Op op, object val1, object val2);
    private static bool cmpBoolStringE(Op op, object val1, object val2);
    private static bool cmpRtfBoolE(Op op, object val1, object val2);
    private static bool cmpBoolStringO(Op op, object val1, object val2);
    private static bool cmpRtfBoolO(Op op, object val1, object val2);
    private static bool cmpNumberNumber(Op op, double n1, double n2);
    private static bool cmpNumberNumberO(Op op, double n1, double n2);
    private static bool cmpNumberNumber(Op op, object val1, object val2);
    private static bool cmpStringNumber(Op op, object val1, object val2);
    private static bool cmpRtfNumber(Op op, object val1, object val2);
    private static bool cmpStringStringE(Op op, string n1, string n2);
    private static bool cmpStringStringE(Op op, object val1, object val2);
    private static bool cmpRtfStringE(Op op, object val1, object val2);
    private static bool cmpRtfRtfE(Op op, object val1, object val2);
    private static bool cmpStringStringO(Op op, object val1, object val2);
    private static bool cmpRtfStringO(Op op, object val1, object val2);
    private static bool cmpRtfRtfO(Op op, object val1, object val2);
    public virtual XPathNodeIterator Clone();
    private static string Rtf(object o);
    public virtual XPathResultType get_StaticType();
}
internal class MS.Internal.Xml.XPath.MergeFilterQuery : CacheOutputQuery {
    private Query _child;
    public MergeFilterQuery(Query input, Query child);
    private MergeFilterQuery(MergeFilterQuery other);
    public virtual void SetXsltContext(XsltContext xsltContext);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.NamespaceQuery : BaseAxisQuery {
    private bool _onNamespace;
    public NamespaceQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type);
    private NamespaceQuery(NamespaceQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual bool matches(XPathNavigator e);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.NodeFunctions : ValueQuery {
    private Query _arg;
    private FunctionType _funcType;
    private XsltContext _xsltContext;
    public XPathResultType StaticType { get; }
    public NodeFunctions(FunctionType funcType, Query arg);
    public virtual void SetXsltContext(XsltContext context);
    private XPathNavigator EvaluateArg(XPathNodeIterator context);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.NumberFunctions : ValueQuery {
    private Query _arg;
    private FunctionType _ftype;
    public XPathResultType StaticType { get; }
    public NumberFunctions(FunctionType ftype, Query arg);
    private NumberFunctions(NumberFunctions other);
    public virtual void SetXsltContext(XsltContext context);
    internal static double Number(bool arg);
    internal static double Number(string arg);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    private double Number(XPathNodeIterator nodeIterator);
    private double Sum(XPathNodeIterator nodeIterator);
    private double Floor(XPathNodeIterator nodeIterator);
    private double Ceiling(XPathNodeIterator nodeIterator);
    private double Round(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.NumericExpr : ValueQuery {
    private Op _op;
    private Query _opnd1;
    private Query _opnd2;
    public XPathResultType StaticType { get; }
    public NumericExpr(Op op, Query opnd1, Query opnd2);
    private NumericExpr(NumericExpr other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    private static double GetValue(Op op, double n1, double n2);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Operand : AstNode {
    private XPathResultType _type;
    private object _val;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public object OperandValue { get; }
    public Operand(string val);
    public Operand(double val);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public object get_OperandValue();
}
internal class MS.Internal.Xml.XPath.OperandQuery : ValueQuery {
    internal object val;
    public XPathResultType StaticType { get; }
    public OperandQuery(object val);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Operator : AstNode {
    private static Op[] s_invertOp;
    private Op _opType;
    private AstNode _opnd1;
    private AstNode _opnd2;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public Op OperatorType { get; }
    public AstNode Operand1 { get; }
    public AstNode Operand2 { get; }
    public Operator(Op op, AstNode opnd1, AstNode opnd2);
    private static Operator();
    public static Op InvertOperator(Op op);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public Op get_OperatorType();
    public AstNode get_Operand1();
    public AstNode get_Operand2();
}
internal class MS.Internal.Xml.XPath.ParentQuery : CacheAxisQuery {
    public ParentQuery(Query qyInput, string Name, string Prefix, XPathNodeType Type);
    private ParentQuery(ParentQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.PrecedingQuery : BaseAxisQuery {
    private XPathNodeIterator _workIterator;
    private ClonableStack`1<XPathNavigator> _ancestorStk;
    public QueryProps Properties { get; }
    public PrecedingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    private PrecedingQuery(PrecedingQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.PreSiblingQuery : CacheAxisQuery {
    public QueryProps Properties { get; }
    public PreSiblingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected PreSiblingQuery(PreSiblingQuery other);
    private static bool NotVisited(XPathNavigator nav, List`1<XPathNavigator> parentStk);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
    public virtual QueryProps get_Properties();
}
[DebuggerDisplayAttribute("{ToString()}")]
internal abstract class MS.Internal.Xml.XPath.Query : ResetableIterator {
    public static XPathResultType XPathResultType_Navigator;
    public int Count { get; }
    public double XsltDefaultPriority { get; }
    public XPathResultType StaticType { get; }
    public QueryProps Properties { get; }
    protected Query(Query other);
    public virtual bool MoveNext();
    public virtual int get_Count();
    public virtual void SetXsltContext(XsltContext context);
    public abstract virtual object Evaluate(XPathNodeIterator nodeIterator);
    public abstract virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual double get_XsltDefaultPriority();
    public abstract virtual XPathResultType get_StaticType();
    public virtual QueryProps get_Properties();
    public static Query Clone(Query input);
    protected static XPathNodeIterator Clone(XPathNodeIterator input);
    protected static XPathNavigator Clone(XPathNavigator input);
    public static bool Insert(List`1<XPathNavigator> buffer, XPathNavigator nav);
    private static int GetMedian(int l, int r);
    public static XmlNodeOrder CompareNodes(XPathNavigator l, XPathNavigator r);
    protected XPathResultType GetXPathType(object value);
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.QueryBuilder : object {
    private string _query;
    private bool _allowVar;
    private bool _allowKey;
    private bool _allowCurrent;
    private bool _needContext;
    private BaseAxisQuery _firstInput;
    private int _parseDepth;
    private static int MaxParseDepth;
    private void Reset();
    private Query ProcessAxis(Axis root, Flags flags, Props& props);
    private static bool CanBeNumber(Query q);
    private Query ProcessFilter(Filter root, Flags flags, Props& props);
    private Query ProcessOperator(Operator root, Props& props);
    private Query ProcessVariable(Variable root);
    private Query ProcessFunction(Function root, Props& props);
    private List`1<Query> ProcessArguments(List`1<AstNode> args, Props& props);
    private Query ProcessNode(AstNode root, Flags flags, Props& props);
    private Query Build(AstNode root, string query);
    internal Query Build(string query, bool allowVar, bool allowKey);
    internal Query Build(string query, Boolean& needContext);
    internal Query BuildPatternQuery(string query, bool allowVar, bool allowKey);
    internal Query BuildPatternQuery(string query, Boolean& needContext);
}
internal enum MS.Internal.Xml.XPath.QueryProps : Enum {
    public int value__;
    public static QueryProps None;
    public static QueryProps Position;
    public static QueryProps Count;
    public static QueryProps Cached;
    public static QueryProps Reverse;
    public static QueryProps Merge;
}
internal abstract class MS.Internal.Xml.XPath.ResetableIterator : XPathNodeIterator {
    public int CurrentPosition { get; }
    protected ResetableIterator(ResetableIterator other);
    protected void ResetCount();
    public abstract virtual void Reset();
    public abstract virtual int get_CurrentPosition();
}
internal class MS.Internal.Xml.XPath.ReversePositionQuery : ForwardPositionQuery {
    public int CurrentPosition { get; }
    public QueryProps Properties { get; }
    public ReversePositionQuery(Query input);
    private ReversePositionQuery(ReversePositionQuery other);
    public virtual XPathNodeIterator Clone();
    public virtual int get_CurrentPosition();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.Root : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Xml.XPath.SortKey : object {
    private int _numKeys;
    private Object[] _keys;
    private int _originalPosition;
    private XPathNavigator _node;
    public object Item { get; public set; }
    public int NumKeys { get; }
    public int OriginalPosition { get; }
    public XPathNavigator Node { get; }
    public SortKey(int numKeys, int originalPosition, XPathNavigator node);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int get_NumKeys();
    public int get_OriginalPosition();
    public XPathNavigator get_Node();
}
internal class MS.Internal.Xml.XPath.SortQuery : Query {
    private List`1<SortKey> _results;
    private XPathSortComparer _comparer;
    private Query _qyInput;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public SortQuery(Query qyInput);
    private SortQuery(SortQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext xsltContext);
    private void BuildResultsList();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    internal void AddSort(Query evalQuery, IComparer comparer);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.StringFunctions : ValueQuery {
    private FunctionType _funcType;
    private IList`1<Query> _argList;
    private static CompareInfo s_compareInfo;
    public XPathResultType StaticType { get; }
    public StringFunctions(FunctionType funcType, IList`1<Query> argList);
    private StringFunctions(StringFunctions other);
    private static StringFunctions();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    internal static string toString(double num);
    internal static string toString(bool b);
    private string toString(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    private string Concat(XPathNodeIterator nodeIterator);
    private bool StartsWith(XPathNodeIterator nodeIterator);
    private bool Contains(XPathNodeIterator nodeIterator);
    private string SubstringBefore(XPathNodeIterator nodeIterator);
    private string SubstringAfter(XPathNodeIterator nodeIterator);
    private string Substring(XPathNodeIterator nodeIterator);
    private double StringLength(XPathNodeIterator nodeIterator);
    private string Normalize(XPathNodeIterator nodeIterator);
    private string Translate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.UnionExpr : Query {
    internal Query qy1;
    internal Query qy2;
    private bool _advance1;
    private bool _advance2;
    private XPathNavigator _currentNode;
    private XPathNavigator _nextNode;
    public XPathResultType StaticType { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public UnionExpr(Query query1, Query query2);
    private UnionExpr(UnionExpr other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext xsltContext);
    public virtual object Evaluate(XPathNodeIterator context);
    private XPathNavigator ProcessSamePosition(XPathNavigator result);
    private XPathNavigator ProcessBeforePosition(XPathNavigator res1, XPathNavigator res2);
    private XPathNavigator ProcessAfterPosition(XPathNavigator res1, XPathNavigator res2);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator xsltContext);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
}
internal abstract class MS.Internal.Xml.XPath.ValueQuery : Query {
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    protected ValueQuery(ValueQuery other);
    public sealed virtual void Reset();
    public sealed virtual XPathNavigator get_Current();
    public sealed virtual int get_CurrentPosition();
    public sealed virtual int get_Count();
    public sealed virtual XPathNavigator Advance();
}
internal class MS.Internal.Xml.XPath.Variable : AstNode {
    private string _localname;
    private string _prefix;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public string Localname { get; }
    public string Prefix { get; }
    public Variable(string name, string prefix);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public string get_Localname();
    public string get_Prefix();
}
internal class MS.Internal.Xml.XPath.VariableQuery : ExtensionQuery {
    private IXsltContextVariable _variable;
    public XPathResultType StaticType { get; }
    public VariableQuery(string name, string prefix);
    private VariableQuery(VariableQuery other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathAncestorIterator : XPathAxisIterator {
    public XPathAncestorIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathAncestorIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathAncestorIterator(XPathAncestorIterator other);
    public virtual bool MoveNext();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathAncestorQuery : CacheAxisQuery {
    private bool _matchSelf;
    public int CurrentPosition { get; }
    public QueryProps Properties { get; }
    public XPathAncestorQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest, bool matchSelf);
    private XPathAncestorQuery(XPathAncestorQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
    public virtual int get_CurrentPosition();
    public virtual QueryProps get_Properties();
}
[DebuggerDisplayAttribute("Position={CurrentPosition}, Current={debuggerDisplayProxy, nq}")]
internal class MS.Internal.Xml.XPath.XPathArrayIterator : ResetableIterator {
    protected IList list;
    protected int index;
    public IList AsList { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private object debuggerDisplayProxy { get; }
    public XPathArrayIterator(IList list);
    public XPathArrayIterator(XPathArrayIterator it);
    public XPathArrayIterator(XPathNodeIterator nodeIterator);
    public IList get_AsList();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
    public virtual IEnumerator GetEnumerator();
    private object get_debuggerDisplayProxy();
}
internal abstract class MS.Internal.Xml.XPath.XPathAxisIterator : XPathNodeIterator {
    internal XPathNavigator nav;
    internal XPathNodeType type;
    internal string name;
    internal string uri;
    internal int position;
    internal bool matchSelf;
    internal bool first;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected bool Matches { get; }
    public XPathAxisIterator(XPathNavigator nav, bool matchSelf);
    public XPathAxisIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathAxisIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathAxisIterator(XPathAxisIterator it);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    protected virtual bool get_Matches();
}
internal class MS.Internal.Xml.XPath.XPathChildIterator : XPathAxisIterator {
    public XPathChildIterator(XPathNavigator nav, XPathNodeType type);
    public XPathChildIterator(XPathNavigator nav, string name, string namespaceURI);
    public XPathChildIterator(XPathChildIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathComparerHelper : object {
    private XmlSortOrder _order;
    private XmlCaseOrder _caseOrder;
    private CultureInfo _cinfo;
    private XmlDataType _dataType;
    public XPathComparerHelper(XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public sealed virtual int Compare(object x, object y);
}
internal class MS.Internal.Xml.XPath.XPathDescendantIterator : XPathAxisIterator {
    private int _level;
    public XPathDescendantIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathDescendantIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathDescendantIterator(XPathDescendantIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathEmptyIterator : ResetableIterator {
    public static XPathEmptyIterator Instance;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private static XPathEmptyIterator();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class MS.Internal.Xml.XPath.XPathMultyIterator : ResetableIterator {
    protected ResetableIterator[] arr;
    protected int firstNotEmpty;
    protected int position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public XPathMultyIterator(ArrayList inputArray);
    public XPathMultyIterator(XPathMultyIterator it);
    private void Init();
    private bool Advance(int pos);
    private bool SiftItem(int item);
    public virtual void Reset();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathParser : object {
    private XPathScanner _scanner;
    private int _parseDepth;
    private static int MaxParseDepth;
    private static XPathResultType[] s_temparray1;
    private static XPathResultType[] s_temparray2;
    private static XPathResultType[] s_temparray3;
    private static XPathResultType[] s_temparray4;
    private static XPathResultType[] s_temparray5;
    private static XPathResultType[] s_temparray6;
    private static XPathResultType[] s_temparray7;
    private static XPathResultType[] s_temparray8;
    private static XPathResultType[] s_temparray9;
    private static Dictionary`2<string, ParamInfo> s_functionTable;
    private static Dictionary`2<string, AxisType> s_AxesTable;
    private XPathParser(XPathScanner scanner);
    private static XPathParser();
    public static AstNode ParseXPathExpression(string xpathExpression);
    public static AstNode ParseXPathPattern(string xpathPattern);
    private AstNode ParseExpression(AstNode qyInput);
    private AstNode ParseOrExpr(AstNode qyInput);
    private AstNode ParseAndExpr(AstNode qyInput);
    private AstNode ParseEqualityExpr(AstNode qyInput);
    private AstNode ParseRelationalExpr(AstNode qyInput);
    private AstNode ParseAdditiveExpr(AstNode qyInput);
    private AstNode ParseMultiplicativeExpr(AstNode qyInput);
    private AstNode ParseUnaryExpr(AstNode qyInput);
    private AstNode ParseUnionExpr(AstNode qyInput);
    private static bool IsNodeType(XPathScanner scaner);
    private AstNode ParsePathExpr(AstNode qyInput);
    private AstNode ParseFilterExpr(AstNode qyInput);
    private AstNode ParsePredicate(AstNode qyInput);
    private AstNode ParseLocationPath(AstNode qyInput);
    private AstNode ParseRelativeLocationPath(AstNode qyInput);
    private static bool IsStep(LexKind lexKind);
    private AstNode ParseStep(AstNode qyInput);
    private AstNode ParseNodeTest(AstNode qyInput, AxisType axisType, XPathNodeType nodeType);
    private static bool IsPrimaryExpr(XPathScanner scanner);
    private AstNode ParsePrimaryExpr(AstNode qyInput);
    private AstNode ParseMethod(AstNode qyInput);
    private AstNode ParsePattern();
    private AstNode ParseLocationPathPattern();
    private AstNode ParseIdKeyPattern();
    private AstNode ParseRelativePathPattern(AstNode qyInput);
    private AstNode ParseStepPattern(AstNode qyInput);
    private void CheckToken(LexKind t);
    private void PassToken(LexKind t);
    private void NextLex();
    private bool TestOp(string op);
    private void CheckNodeSet(XPathResultType t);
    private static Dictionary`2<string, ParamInfo> CreateFunctionTable();
    private static Dictionary`2<string, AxisType> CreateAxesTable();
    private AxisType GetAxis();
}
internal class MS.Internal.Xml.XPath.XPathScanner : object {
    private string _xpathExpr;
    private int _xpathExprIndex;
    private LexKind _kind;
    private char _currentChar;
    private string _name;
    private string _prefix;
    private string _stringValue;
    private double _numberValue;
    private bool _canBeFunction;
    private XmlCharType _xmlCharType;
    public string SourceText { get; }
    private char CurrentChar { get; }
    public LexKind Kind { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string StringValue { get; }
    public double NumberValue { get; }
    public bool CanBeFunction { get; }
    public XPathScanner(string xpathExpr);
    public string get_SourceText();
    private char get_CurrentChar();
    private bool NextChar();
    public LexKind get_Kind();
    public string get_Name();
    public string get_Prefix();
    public string get_StringValue();
    public double get_NumberValue();
    public bool get_CanBeFunction();
    private void SkipSpace();
    public bool NextLex();
    private double ScanNumber();
    private double ScanFraction();
    private string ScanString();
    private string ScanName();
}
internal class MS.Internal.Xml.XPath.XPathSelectionIterator : ResetableIterator {
    private XPathNavigator _nav;
    private Query _query;
    private int _position;
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal XPathSelectionIterator(XPathNavigator nav, Query query);
    protected XPathSelectionIterator(XPathSelectionIterator it);
    public virtual void Reset();
    public virtual bool MoveNext();
    public virtual int get_Count();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathSelfQuery : BaseAxisQuery {
    public XPathSelfQuery(Query qyInput, string Name, string Prefix, XPathNodeType Type);
    private XPathSelfQuery(XPathSelfQuery other);
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathSingletonIterator : ResetableIterator {
    private XPathNavigator _nav;
    private int _position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public XPathSingletonIterator(XPathNavigator nav);
    public XPathSingletonIterator(XPathNavigator nav, bool moved);
    public XPathSingletonIterator(XPathSingletonIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class MS.Internal.Xml.XPath.XPathSortComparer : object {
    private static int minSize;
    private Query[] _expressions;
    private IComparer[] _comparers;
    private int _numSorts;
    public int NumSorts { get; }
    public XPathSortComparer(int size);
    public void AddSort(Query evalQuery, IComparer comparer);
    public int get_NumSorts();
    public Query Expression(int i);
    private sealed virtual override int System.Collections.Generic.IComparer<MS.Internal.Xml.XPath.SortKey>.Compare(SortKey x, SortKey y);
    internal XPathSortComparer Clone();
}
internal abstract class System.CSharpHelpers : object {
    private static Dictionary`2<string, object> s_fixedStringLookup;
    private static String[][] s_keywords;
    private static CSharpHelpers();
    public static string CreateEscapedIdentifier(string name);
    public static bool IsValidLanguageIndependentIdentifier(string value);
    internal static bool IsKeyword(string value);
    internal static bool IsPrefixTwoUnderscore(string value);
    internal static bool IsValidTypeNameOrIdentifier(string value, bool isTypeName);
    internal static bool IsSpecialTypeChar(char ch, Boolean& nextMustBeStartChar);
}
internal static class System.HResults : object {
    internal static int Xml;
    internal static int XmlSchema;
    internal static int XmlXslt;
    internal static int XmlXPath;
}
internal static class System.IO.StringBuilderCache : object {
    private static int MAX_BUILDER_SIZE;
    private static int DEFAULT_CAPACITY;
    [ThreadStaticAttribute]
private static StringBuilder t_cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
internal class System.LocalAppContext : object {
    private static bool s_isDisableCachingInitialized;
    private static bool s_disableCaching;
    private static object s_syncObject;
    private static bool DisableCaching { get; }
    internal static bool GetCachedSwitchValue(string switchName, Int32& switchValue);
    private static bool GetCachedSwitchValueInternal(string switchName, Int32& switchValue);
    private static bool get_DisableCaching();
}
internal class System.LocalAppContextSwitches : object {
    private static string DontThrowOnInvalidSurrogatePairsName;
    private static int s_dontThrowOnInvalidSurrogatePairs;
    private static string IgnoreEmptyKeySequencesName;
    private static int s_ignoreEmptyKeySequences;
    private static string IgnoreKindInUtcTimeSerializationName;
    private static int s_ignoreKindInUtcTimeSerialization;
    private static string LimitXPathComplexityName;
    private static int s_limitXPathComplexity;
    private static string AllowDefaultResolverName;
    private static int s_allowDefaultResolver;
    public static bool DontThrowOnInvalidSurrogatePairs { get; }
    public static bool IgnoreEmptyKeySequences { get; }
    public static bool IgnoreKindInUtcTimeSerialization { get; }
    public static bool LimitXPathComplexity { get; }
    public static bool AllowDefaultResolver { get; }
    public static bool get_DontThrowOnInvalidSurrogatePairs();
    public static bool get_IgnoreEmptyKeySequences();
    public static bool get_IgnoreKindInUtcTimeSerialization();
    public static bool get_LimitXPathComplexity();
    public static bool get_AllowDefaultResolver();
}
internal static class System.Marvin : object {
    [CompilerGeneratedAttribute]
private static ulong <DefaultSeed>k__BackingField;
    public static ulong DefaultSeed { get; }
    private static Marvin();
    public static int ComputeHash32(ReadOnlySpan`1<byte> data, ulong seed);
    public static long ComputeHash(ReadOnlySpan`1<byte> data, ulong seed);
    private static void Block(UInt32& rp0, UInt32& rp1);
    private static UInt32 _rotl(UInt32 value, int shift);
    [CompilerGeneratedAttribute]
public static ulong get_DefaultSeed();
    private static ulong GenerateSeed();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.RemovableFeatureAttribute : Attribute {
    public bool UseNopBody;
    public string FeatureSwitchName;
    public RemovableFeatureAttribute(string featureSwitchName);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string Xml_UserException { get; }
    internal static string Xml_DefaultException { get; }
    internal static string Xml_InvalidOperation { get; }
    internal static string Xml_ErrorFilePosition { get; }
    internal static string Xml_StackOverflow { get; }
    internal static string Xslt_NoStylesheetLoaded { get; }
    internal static string Xslt_NotCompiledStylesheet { get; }
    internal static string Xslt_IncompatibleCompiledStylesheetVersion { get; }
    internal static string Xml_AsyncIsRunningException { get; }
    internal static string Xml_ReaderAsyncNotSetException { get; }
    internal static string Xml_UnclosedQuote { get; }
    internal static string Xml_UnexpectedEOF { get; }
    internal static string Xml_UnexpectedEOF1 { get; }
    internal static string Xml_UnexpectedEOFInElementContent { get; }
    internal static string Xml_BadStartNameChar { get; }
    internal static string Xml_BadNameChar { get; }
    internal static string Xml_BadDecimalEntity { get; }
    internal static string Xml_BadHexEntity { get; }
    internal static string Xml_MissingByteOrderMark { get; }
    internal static string Xml_UnknownEncoding { get; }
    internal static string Xml_InternalError { get; }
    internal static string Xml_InvalidCharInThisEncoding { get; }
    internal static string Xml_ErrorPosition { get; }
    internal static string Xml_MessageWithErrorPosition { get; }
    internal static string Xml_UnexpectedTokenEx { get; }
    internal static string Xml_UnexpectedTokens2 { get; }
    internal static string Xml_ExpectingWhiteSpace { get; }
    internal static string Xml_TagMismatchEx { get; }
    internal static string Xml_UnexpectedEndTag { get; }
    internal static string Xml_UnknownNs { get; }
    internal static string Xml_BadAttributeChar { get; }
    internal static string Xml_ExpectExternalOrClose { get; }
    internal static string Xml_MissingRoot { get; }
    internal static string Xml_MultipleRoots { get; }
    internal static string Xml_InvalidRootData { get; }
    internal static string Xml_XmlDeclNotFirst { get; }
    internal static string Xml_InvalidXmlDecl { get; }
    internal static string Xml_InvalidNodeType { get; }
    internal static string Xml_InvalidPIName { get; }
    internal static string Xml_InvalidXmlSpace { get; }
    internal static string Xml_InvalidVersionNumber { get; }
    internal static string Xml_DupAttributeName { get; }
    internal static string Xml_BadDTDLocation { get; }
    internal static string Xml_ElementNotFound { get; }
    internal static string Xml_ElementNotFoundNs { get; }
    internal static string Xml_PartialContentNodeTypeNotSupportedEx { get; }
    internal static string Xml_MultipleDTDsProvided { get; }
    internal static string Xml_CanNotBindToReservedNamespace { get; }
    internal static string Xml_InvalidCharacter { get; }
    internal static string Xml_InvalidBinHexValue { get; }
    internal static string Xml_InvalidBinHexValueOddCount { get; }
    internal static string Xml_InvalidTextDecl { get; }
    internal static string Xml_InvalidBase64Value { get; }
    internal static string Xml_UndeclaredEntity { get; }
    internal static string Xml_RecursiveParEntity { get; }
    internal static string Xml_RecursiveGenEntity { get; }
    internal static string Xml_ExternalEntityInAttValue { get; }
    internal static string Xml_UnparsedEntityRef { get; }
    internal static string Xml_NotSameNametable { get; }
    internal static string Xml_NametableMismatch { get; }
    internal static string Xml_BadNamespaceDecl { get; }
    internal static string Xml_ErrorParsingEntityName { get; }
    internal static string Xml_InvalidNmToken { get; }
    internal static string Xml_EntityRefNesting { get; }
    internal static string Xml_CannotResolveEntity { get; }
    internal static string Xml_CannotResolveEntityDtdIgnored { get; }
    internal static string Xml_CannotResolveExternalSubset { get; }
    internal static string Xml_CannotResolveUrl { get; }
    internal static string Xml_CDATAEndInText { get; }
    internal static string Xml_ExternalEntityInStandAloneDocument { get; }
    internal static string Xml_DtdAfterRootElement { get; }
    internal static string Xml_ReadOnlyProperty { get; }
    internal static string Xml_DtdIsProhibited { get; }
    internal static string Xml_DtdIsProhibitedEx { get; }
    internal static string Xml_ReadSubtreeNotOnElement { get; }
    internal static string Xml_DtdNotAllowedInFragment { get; }
    internal static string Xml_CannotStartDocumentOnFragment { get; }
    internal static string Xml_ErrorOpeningExternalDtd { get; }
    internal static string Xml_ErrorOpeningExternalEntity { get; }
    internal static string Xml_ReadBinaryContentNotSupported { get; }
    internal static string Xml_ReadValueChunkNotSupported { get; }
    internal static string Xml_InvalidReadContentAs { get; }
    internal static string Xml_InvalidReadElementContentAs { get; }
    internal static string Xml_MixedReadElementContentAs { get; }
    internal static string Xml_MixingReadValueChunkWithBinary { get; }
    internal static string Xml_MixingBinaryContentMethods { get; }
    internal static string Xml_MixingV1StreamingWithV2Binary { get; }
    internal static string Xml_InvalidReadValueChunk { get; }
    internal static string Xml_ReadContentAsFormatException { get; }
    internal static string Xml_DoubleBaseUri { get; }
    internal static string Xml_NotEnoughSpaceForSurrogatePair { get; }
    internal static string Xml_EmptyUrl { get; }
    internal static string Xml_UnexpectedNodeInSimpleContent { get; }
    internal static string Xml_InvalidWhitespaceCharacter { get; }
    internal static string Xml_IncompatibleConformanceLevel { get; }
    internal static string Xml_LimitExceeded { get; }
    internal static string Xml_ClosedOrErrorReader { get; }
    internal static string Xml_CharEntityOverflow { get; }
    internal static string Xml_BadNameCharWithPos { get; }
    internal static string Xml_XmlnsBelongsToReservedNs { get; }
    internal static string Xml_UndeclaredParEntity { get; }
    internal static string Xml_InvalidXmlDocument { get; }
    internal static string Xml_NoDTDPresent { get; }
    internal static string Xml_MultipleValidaitonTypes { get; }
    internal static string Xml_NoValidation { get; }
    internal static string Xml_WhitespaceHandling { get; }
    internal static string Xml_InvalidResetStateCall { get; }
    internal static string Xml_EntityHandling { get; }
    internal static string Xml_AttlistDuplEnumValue { get; }
    internal static string Xml_AttlistDuplNotationValue { get; }
    internal static string Xml_EncodingSwitchAfterResetState { get; }
    internal static string Xml_UnexpectedNodeType { get; }
    internal static string Xml_InvalidConditionalSection { get; }
    internal static string Xml_UnexpectedCDataEnd { get; }
    internal static string Xml_UnclosedConditionalSection { get; }
    internal static string Xml_ExpectDtdMarkup { get; }
    internal static string Xml_IncompleteDtdContent { get; }
    internal static string Xml_EnumerationRequired { get; }
    internal static string Xml_InvalidContentModel { get; }
    internal static string Xml_FragmentId { get; }
    internal static string Xml_ExpectPcData { get; }
    internal static string Xml_ExpectNoWhitespace { get; }
    internal static string Xml_ExpectOp { get; }
    internal static string Xml_InvalidAttributeType { get; }
    internal static string Xml_InvalidAttributeType1 { get; }
    internal static string Xml_ExpectAttType { get; }
    internal static string Xml_ColonInLocalName { get; }
    internal static string Xml_InvalidParEntityRef { get; }
    internal static string Xml_ExpectSubOrClose { get; }
    internal static string Xml_ExpectExternalOrPublicId { get; }
    internal static string Xml_ExpectExternalIdOrEntityValue { get; }
    internal static string Xml_ExpectIgnoreOrInclude { get; }
    internal static string Xml_UnsupportedClass { get; }
    internal static string Xml_NullResolver { get; }
    internal static string Xml_RelativeUriNotSupported { get; }
    internal static string Xml_WriterAsyncNotSetException { get; }
    internal static string Xml_PrefixForEmptyNs { get; }
    internal static string Xml_InvalidCommentChars { get; }
    internal static string Xml_UndefNamespace { get; }
    internal static string Xml_EmptyName { get; }
    internal static string Xml_EmptyLocalName { get; }
    internal static string Xml_InvalidNameCharsDetail { get; }
    internal static string Xml_NoStartTag { get; }
    internal static string Xml_ClosedOrError { get; }
    internal static string Xml_WrongToken { get; }
    internal static string Xml_XmlPrefix { get; }
    internal static string Xml_XmlnsPrefix { get; }
    internal static string Xml_NamespaceDeclXmlXmlns { get; }
    internal static string Xml_NonWhitespace { get; }
    internal static string Xml_DupXmlDecl { get; }
    internal static string Xml_CannotWriteXmlDecl { get; }
    internal static string Xml_NoRoot { get; }
    internal static string Xml_InvalidPosition { get; }
    internal static string Xml_IncompleteEntity { get; }
    internal static string Xml_InvalidSurrogateHighChar { get; }
    internal static string Xml_InvalidSurrogateMissingLowChar { get; }
    internal static string Xml_InvalidSurrogatePairWithArgs { get; }
    internal static string Xml_RedefinePrefix { get; }
    internal static string Xml_DtdAlreadyWritten { get; }
    internal static string Xml_InvalidCharsInIndent { get; }
    internal static string Xml_IndentCharsNotWhitespace { get; }
    internal static string Xml_ConformanceLevelFragment { get; }
    internal static string Xml_InvalidQuote { get; }
    internal static string Xml_UndefPrefix { get; }
    internal static string Xml_NoNamespaces { get; }
    internal static string Xml_InvalidCDataChars { get; }
    internal static string Xml_NotTheFirst { get; }
    internal static string Xml_InvalidPiChars { get; }
    internal static string Xml_InvalidNameChars { get; }
    internal static string Xml_Closed { get; }
    internal static string Xml_InvalidPrefix { get; }
    internal static string Xml_InvalidIndentation { get; }
    internal static string Xml_NotInWriteState { get; }
    internal static string Xml_SurrogatePairSplit { get; }
    internal static string Xml_NoMultipleRoots { get; }
    internal static string XmlBadName { get; }
    internal static string XmlNoNameAllowed { get; }
    internal static string XmlConvert_BadUri { get; }
    internal static string XmlConvert_BadFormat { get; }
    internal static string XmlConvert_Overflow { get; }
    internal static string XmlConvert_TypeBadMapping { get; }
    internal static string XmlConvert_TypeBadMapping2 { get; }
    internal static string XmlConvert_TypeListBadMapping { get; }
    internal static string XmlConvert_TypeListBadMapping2 { get; }
    internal static string XmlConvert_TypeToString { get; }
    internal static string XmlConvert_TypeFromString { get; }
    internal static string XmlConvert_TypeNoPrefix { get; }
    internal static string XmlConvert_TypeNoNamespace { get; }
    internal static string XmlConvert_NotOneCharString { get; }
    internal static string Sch_ParEntityRefNesting { get; }
    internal static string Sch_NotTokenString { get; }
    internal static string Sch_InvalidDateTimeOption { get; }
    internal static string Sch_StandAloneNormalization { get; }
    internal static string Sch_UnSpecifiedDefaultAttributeInExternalStandalone { get; }
    internal static string Sch_DefaultException { get; }
    internal static string Sch_DupElementDecl { get; }
    internal static string Sch_IdAttrDeclared { get; }
    internal static string Sch_RootMatchDocType { get; }
    internal static string Sch_DupId { get; }
    internal static string Sch_UndeclaredElement { get; }
    internal static string Sch_UndeclaredAttribute { get; }
    internal static string Sch_UndeclaredNotation { get; }
    internal static string Sch_UndeclaredId { get; }
    internal static string Sch_SchemaRootExpected { get; }
    internal static string Sch_XSDSchemaRootExpected { get; }
    internal static string Sch_UnsupportedAttribute { get; }
    internal static string Sch_UnsupportedElement { get; }
    internal static string Sch_MissAttribute { get; }
    internal static string Sch_AnnotationLocation { get; }
    internal static string Sch_DataTypeTextOnly { get; }
    internal static string Sch_UnknownModel { get; }
    internal static string Sch_UnknownOrder { get; }
    internal static string Sch_UnknownContent { get; }
    internal static string Sch_UnknownRequired { get; }
    internal static string Sch_UnknownDtType { get; }
    internal static string Sch_MixedMany { get; }
    internal static string Sch_GroupDisabled { get; }
    internal static string Sch_MissDtvalue { get; }
    internal static string Sch_MissDtvaluesAttribute { get; }
    internal static string Sch_DupDtType { get; }
    internal static string Sch_DupAttribute { get; }
    internal static string Sch_RequireEnumeration { get; }
    internal static string Sch_DefaultIdValue { get; }
    internal static string Sch_ElementNotAllowed { get; }
    internal static string Sch_ElementMissing { get; }
    internal static string Sch_ManyMaxOccurs { get; }
    internal static string Sch_MaxOccursInvalid { get; }
    internal static string Sch_MinOccursInvalid { get; }
    internal static string Sch_DtMaxLengthInvalid { get; }
    internal static string Sch_DtMinLengthInvalid { get; }
    internal static string Sch_DupDtMaxLength { get; }
    internal static string Sch_DupDtMinLength { get; }
    internal static string Sch_DtMinMaxLength { get; }
    internal static string Sch_DupElement { get; }
    internal static string Sch_DupGroupParticle { get; }
    internal static string Sch_InvalidValue { get; }
    internal static string Sch_InvalidValueDetailed { get; }
    internal static string Sch_InvalidValueDetailedAttribute { get; }
    internal static string Sch_MissRequiredAttribute { get; }
    internal static string Sch_FixedAttributeValue { get; }
    internal static string Sch_FixedElementValue { get; }
    internal static string Sch_AttributeValueDataTypeDetailed { get; }
    internal static string Sch_AttributeDefaultDataType { get; }
    internal static string Sch_IncludeLocation { get; }
    internal static string Sch_ImportLocation { get; }
    internal static string Sch_RedefineLocation { get; }
    internal static string Sch_InvalidBlockDefaultValue { get; }
    internal static string Sch_InvalidFinalDefaultValue { get; }
    internal static string Sch_InvalidElementBlockValue { get; }
    internal static string Sch_InvalidElementFinalValue { get; }
    internal static string Sch_InvalidSimpleTypeFinalValue { get; }
    internal static string Sch_InvalidComplexTypeBlockValue { get; }
    internal static string Sch_InvalidComplexTypeFinalValue { get; }
    internal static string Sch_DupIdentityConstraint { get; }
    internal static string Sch_DupGlobalElement { get; }
    internal static string Sch_DupGlobalAttribute { get; }
    internal static string Sch_DupSimpleType { get; }
    internal static string Sch_DupComplexType { get; }
    internal static string Sch_DupGroup { get; }
    internal static string Sch_DupAttributeGroup { get; }
    internal static string Sch_DupNotation { get; }
    internal static string Sch_DefaultFixedAttributes { get; }
    internal static string Sch_FixedInRef { get; }
    internal static string Sch_FixedDefaultInRef { get; }
    internal static string Sch_DupXsdElement { get; }
    internal static string Sch_ForbiddenAttribute { get; }
    internal static string Sch_AttributeIgnored { get; }
    internal static string Sch_ElementRef { get; }
    internal static string Sch_TypeMutualExclusive { get; }
    internal static string Sch_ElementNameRef { get; }
    internal static string Sch_AttributeNameRef { get; }
    internal static string Sch_TextNotAllowed { get; }
    internal static string Sch_UndeclaredType { get; }
    internal static string Sch_UndeclaredSimpleType { get; }
    internal static string Sch_UndeclaredEquivClass { get; }
    internal static string Sch_AttListPresence { get; }
    internal static string Sch_NotationValue { get; }
    internal static string Sch_EnumerationValue { get; }
    internal static string Sch_EmptyAttributeValue { get; }
    internal static string Sch_InvalidLanguageId { get; }
    internal static string Sch_XmlSpace { get; }
    internal static string Sch_InvalidXsdAttributeValue { get; }
    internal static string Sch_InvalidXsdAttributeDatatypeValue { get; }
    internal static string Sch_ElementValueDataTypeDetailed { get; }
    internal static string Sch_InvalidElementDefaultValue { get; }
    internal static string Sch_NonDeterministic { get; }
    internal static string Sch_NonDeterministicAnyEx { get; }
    internal static string Sch_NonDeterministicAnyAny { get; }
    internal static string Sch_StandAlone { get; }
    internal static string Sch_XmlNsAttribute { get; }
    internal static string Sch_AllElement { get; }
    internal static string Sch_MismatchTargetNamespaceInclude { get; }
    internal static string Sch_MismatchTargetNamespaceImport { get; }
    internal static string Sch_MismatchTargetNamespaceEx { get; }
    internal static string Sch_XsiTypeNotFound { get; }
    internal static string Sch_XsiTypeAbstract { get; }
    internal static string Sch_ListFromNonatomic { get; }
    internal static string Sch_UnionFromUnion { get; }
    internal static string Sch_DupLengthFacet { get; }
    internal static string Sch_DupMinLengthFacet { get; }
    internal static string Sch_DupMaxLengthFacet { get; }
    internal static string Sch_DupWhiteSpaceFacet { get; }
    internal static string Sch_DupMaxInclusiveFacet { get; }
    internal static string Sch_DupMaxExclusiveFacet { get; }
    internal static string Sch_DupMinInclusiveFacet { get; }
    internal static string Sch_DupMinExclusiveFacet { get; }
    internal static string Sch_DupTotalDigitsFacet { get; }
    internal static string Sch_DupFractionDigitsFacet { get; }
    internal static string Sch_LengthFacetProhibited { get; }
    internal static string Sch_MinLengthFacetProhibited { get; }
    internal static string Sch_MaxLengthFacetProhibited { get; }
    internal static string Sch_PatternFacetProhibited { get; }
    internal static string Sch_EnumerationFacetProhibited { get; }
    internal static string Sch_WhiteSpaceFacetProhibited { get; }
    internal static string Sch_MaxInclusiveFacetProhibited { get; }
    internal static string Sch_MaxExclusiveFacetProhibited { get; }
    internal static string Sch_MinInclusiveFacetProhibited { get; }
    internal static string Sch_MinExclusiveFacetProhibited { get; }
    internal static string Sch_TotalDigitsFacetProhibited { get; }
    internal static string Sch_FractionDigitsFacetProhibited { get; }
    internal static string Sch_LengthFacetInvalid { get; }
    internal static string Sch_MinLengthFacetInvalid { get; }
    internal static string Sch_MaxLengthFacetInvalid { get; }
    internal static string Sch_MaxInclusiveFacetInvalid { get; }
    internal static string Sch_MaxExclusiveFacetInvalid { get; }
    internal static string Sch_MinInclusiveFacetInvalid { get; }
    internal static string Sch_MinExclusiveFacetInvalid { get; }
    internal static string Sch_TotalDigitsFacetInvalid { get; }
    internal static string Sch_FractionDigitsFacetInvalid { get; }
    internal static string Sch_PatternFacetInvalid { get; }
    internal static string Sch_EnumerationFacetInvalid { get; }
    internal static string Sch_InvalidWhiteSpace { get; }
    internal static string Sch_UnknownFacet { get; }
    internal static string Sch_LengthAndMinMax { get; }
    internal static string Sch_MinLengthGtMaxLength { get; }
    internal static string Sch_FractionDigitsGtTotalDigits { get; }
    internal static string Sch_LengthConstraintFailed { get; }
    internal static string Sch_MinLengthConstraintFailed { get; }
    internal static string Sch_MaxLengthConstraintFailed { get; }
    internal static string Sch_PatternConstraintFailed { get; }
    internal static string Sch_EnumerationConstraintFailed { get; }
    internal static string Sch_MaxInclusiveConstraintFailed { get; }
    internal static string Sch_MaxExclusiveConstraintFailed { get; }
    internal static string Sch_MinInclusiveConstraintFailed { get; }
    internal static string Sch_MinExclusiveConstraintFailed { get; }
    internal static string Sch_TotalDigitsConstraintFailed { get; }
    internal static string Sch_FractionDigitsConstraintFailed { get; }
    internal static string Sch_UnionFailedEx { get; }
    internal static string Sch_NotationRequired { get; }
    internal static string Sch_DupNotationAttribute { get; }
    internal static string Sch_MissingPublicSystemAttribute { get; }
    internal static string Sch_NotationAttributeOnEmptyElement { get; }
    internal static string Sch_RefNotInScope { get; }
    internal static string Sch_UndeclaredIdentityConstraint { get; }
    internal static string Sch_RefInvalidIdentityConstraint { get; }
    internal static string Sch_RefInvalidCardin { get; }
    internal static string Sch_ReftoKeyref { get; }
    internal static string Sch_EmptyXPath { get; }
    internal static string Sch_UnresolvedPrefix { get; }
    internal static string Sch_UnresolvedKeyref { get; }
    internal static string Sch_ICXpathError { get; }
    internal static string Sch_SelectorAttr { get; }
    internal static string Sch_FieldSimpleTypeExpected { get; }
    internal static string Sch_FieldSingleValueExpected { get; }
    internal static string Sch_MissingKey { get; }
    internal static string Sch_DuplicateKey { get; }
    internal static string Sch_TargetNamespaceXsi { get; }
    internal static string Sch_UndeclaredEntity { get; }
    internal static string Sch_UnparsedEntityRef { get; }
    internal static string Sch_MaxOccursInvalidXsd { get; }
    internal static string Sch_MinOccursInvalidXsd { get; }
    internal static string Sch_MaxInclusiveExclusive { get; }
    internal static string Sch_MinInclusiveExclusive { get; }
    internal static string Sch_MinInclusiveGtMaxInclusive { get; }
    internal static string Sch_MinExclusiveGtMaxExclusive { get; }
    internal static string Sch_MinInclusiveGtMaxExclusive { get; }
    internal static string Sch_MinExclusiveGtMaxInclusive { get; }
    internal static string Sch_SimpleTypeRestriction { get; }
    internal static string Sch_InvalidFacetPosition { get; }
    internal static string Sch_AttributeMutuallyExclusive { get; }
    internal static string Sch_AnyAttributeLastChild { get; }
    internal static string Sch_ComplexTypeContentModel { get; }
    internal static string Sch_ComplexContentContentModel { get; }
    internal static string Sch_NotNormalizedString { get; }
    internal static string Sch_FractionDigitsNotOnDecimal { get; }
    internal static string Sch_ContentInNill { get; }
    internal static string Sch_NoElementSchemaFound { get; }
    internal static string Sch_NoAttributeSchemaFound { get; }
    internal static string Sch_InvalidNamespace { get; }
    internal static string Sch_InvalidTargetNamespaceAttribute { get; }
    internal static string Sch_InvalidNamespaceAttribute { get; }
    internal static string Sch_InvalidSchemaLocation { get; }
    internal static string Sch_ImportTargetNamespace { get; }
    internal static string Sch_ImportTargetNamespaceNull { get; }
    internal static string Sch_GroupDoubleRedefine { get; }
    internal static string Sch_ComponentRedefineNotFound { get; }
    internal static string Sch_GroupRedefineNotFound { get; }
    internal static string Sch_AttrGroupDoubleRedefine { get; }
    internal static string Sch_AttrGroupRedefineNotFound { get; }
    internal static string Sch_ComplexTypeDoubleRedefine { get; }
    internal static string Sch_ComplexTypeRedefineNotFound { get; }
    internal static string Sch_SimpleToComplexTypeRedefine { get; }
    internal static string Sch_SimpleTypeDoubleRedefine { get; }
    internal static string Sch_ComplexToSimpleTypeRedefine { get; }
    internal static string Sch_SimpleTypeRedefineNotFound { get; }
    internal static string Sch_MinMaxGroupRedefine { get; }
    internal static string Sch_MultipleGroupSelfRef { get; }
    internal static string Sch_MultipleAttrGroupSelfRef { get; }
    internal static string Sch_InvalidTypeRedefine { get; }
    internal static string Sch_InvalidElementRef { get; }
    internal static string Sch_MinGtMax { get; }
    internal static string Sch_DupSelector { get; }
    internal static string Sch_IdConstraintNoSelector { get; }
    internal static string Sch_IdConstraintNoFields { get; }
    internal static string Sch_IdConstraintNoRefer { get; }
    internal static string Sch_SelectorBeforeFields { get; }
    internal static string Sch_NoSimpleTypeContent { get; }
    internal static string Sch_SimpleTypeRestRefBase { get; }
    internal static string Sch_SimpleTypeRestRefBaseNone { get; }
    internal static string Sch_SimpleTypeListRefBase { get; }
    internal static string Sch_SimpleTypeListRefBaseNone { get; }
    internal static string Sch_SimpleTypeUnionNoBase { get; }
    internal static string Sch_NoRestOrExtQName { get; }
    internal static string Sch_NoRestOrExt { get; }
    internal static string Sch_NoGroupParticle { get; }
    internal static string Sch_InvalidAllMin { get; }
    internal static string Sch_InvalidAllMax { get; }
    internal static string Sch_InvalidFacet { get; }
    internal static string Sch_AbstractElement { get; }
    internal static string Sch_XsiTypeBlockedEx { get; }
    internal static string Sch_InvalidXsiNill { get; }
    internal static string Sch_SubstitutionNotAllowed { get; }
    internal static string Sch_SubstitutionBlocked { get; }
    internal static string Sch_InvalidElementInEmptyEx { get; }
    internal static string Sch_InvalidElementInTextOnlyEx { get; }
    internal static string Sch_InvalidTextInElement { get; }
    internal static string Sch_InvalidElementContent { get; }
    internal static string Sch_InvalidElementContentComplex { get; }
    internal static string Sch_IncompleteContent { get; }
    internal static string Sch_IncompleteContentComplex { get; }
    internal static string Sch_InvalidTextInElementExpecting { get; }
    internal static string Sch_InvalidElementContentExpecting { get; }
    internal static string Sch_InvalidElementContentExpectingComplex { get; }
    internal static string Sch_IncompleteContentExpecting { get; }
    internal static string Sch_IncompleteContentExpectingComplex { get; }
    internal static string Sch_InvalidElementSubstitution { get; }
    internal static string Sch_ElementNameAndNamespace { get; }
    internal static string Sch_ElementName { get; }
    internal static string Sch_ContinuationString { get; }
    internal static string Sch_AnyElementNS { get; }
    internal static string Sch_AnyElement { get; }
    internal static string Sch_InvalidTextInEmpty { get; }
    internal static string Sch_InvalidWhitespaceInEmpty { get; }
    internal static string Sch_InvalidPIComment { get; }
    internal static string Sch_InvalidAttributeRef { get; }
    internal static string Sch_OptionalDefaultAttribute { get; }
    internal static string Sch_AttributeCircularRef { get; }
    internal static string Sch_IdentityConstraintCircularRef { get; }
    internal static string Sch_SubstitutionCircularRef { get; }
    internal static string Sch_InvalidAnyAttribute { get; }
    internal static string Sch_DupIdAttribute { get; }
    internal static string Sch_InvalidAllElementMax { get; }
    internal static string Sch_InvalidAny { get; }
    internal static string Sch_InvalidAnyDetailed { get; }
    internal static string Sch_InvalidExamplar { get; }
    internal static string Sch_NoExamplar { get; }
    internal static string Sch_InvalidSubstitutionMember { get; }
    internal static string Sch_RedefineNoSchema { get; }
    internal static string Sch_ProhibitedAttribute { get; }
    internal static string Sch_TypeCircularRef { get; }
    internal static string Sch_TwoIdAttrUses { get; }
    internal static string Sch_AttrUseAndWildId { get; }
    internal static string Sch_MoreThanOneWildId { get; }
    internal static string Sch_BaseFinalExtension { get; }
    internal static string Sch_NotSimpleContent { get; }
    internal static string Sch_NotComplexContent { get; }
    internal static string Sch_BaseFinalRestriction { get; }
    internal static string Sch_BaseFinalList { get; }
    internal static string Sch_BaseFinalUnion { get; }
    internal static string Sch_UndefBaseRestriction { get; }
    internal static string Sch_UndefBaseExtension { get; }
    internal static string Sch_DifContentType { get; }
    internal static string Sch_InvalidContentRestriction { get; }
    internal static string Sch_InvalidContentRestrictionDetailed { get; }
    internal static string Sch_InvalidBaseToEmpty { get; }
    internal static string Sch_InvalidBaseToMixed { get; }
    internal static string Sch_DupAttributeUse { get; }
    internal static string Sch_InvalidParticleRestriction { get; }
    internal static string Sch_InvalidParticleRestrictionDetailed { get; }
    internal static string Sch_ForbiddenDerivedParticleForAll { get; }
    internal static string Sch_ForbiddenDerivedParticleForElem { get; }
    internal static string Sch_ForbiddenDerivedParticleForChoice { get; }
    internal static string Sch_ForbiddenDerivedParticleForSeq { get; }
    internal static string Sch_ElementFromElement { get; }
    internal static string Sch_ElementFromAnyRule1 { get; }
    internal static string Sch_ElementFromAnyRule2 { get; }
    internal static string Sch_AnyFromAnyRule1 { get; }
    internal static string Sch_AnyFromAnyRule2 { get; }
    internal static string Sch_AnyFromAnyRule3 { get; }
    internal static string Sch_GroupBaseFromAny1 { get; }
    internal static string Sch_GroupBaseFromAny2 { get; }
    internal static string Sch_ElementFromGroupBase1 { get; }
    internal static string Sch_ElementFromGroupBase2 { get; }
    internal static string Sch_ElementFromGroupBase3 { get; }
    internal static string Sch_GroupBaseRestRangeInvalid { get; }
    internal static string Sch_GroupBaseRestNoMap { get; }
    internal static string Sch_GroupBaseRestNotEmptiable { get; }
    internal static string Sch_SeqFromAll { get; }
    internal static string Sch_SeqFromChoice { get; }
    internal static string Sch_UndefGroupRef { get; }
    internal static string Sch_GroupCircularRef { get; }
    internal static string Sch_AllRefNotRoot { get; }
    internal static string Sch_AllRefMinMax { get; }
    internal static string Sch_NotAllAlone { get; }
    internal static string Sch_AttributeGroupCircularRef { get; }
    internal static string Sch_UndefAttributeGroupRef { get; }
    internal static string Sch_InvalidAttributeExtension { get; }
    internal static string Sch_InvalidAnyAttributeRestriction { get; }
    internal static string Sch_AttributeRestrictionProhibited { get; }
    internal static string Sch_AttributeRestrictionInvalid { get; }
    internal static string Sch_AttributeFixedInvalid { get; }
    internal static string Sch_AttributeUseInvalid { get; }
    internal static string Sch_AttributeRestrictionInvalidFromWildcard { get; }
    internal static string Sch_NoDerivedAttribute { get; }
    internal static string Sch_UnexpressibleAnyAttribute { get; }
    internal static string Sch_RefInvalidAttribute { get; }
    internal static string Sch_ElementCircularRef { get; }
    internal static string Sch_RefInvalidElement { get; }
    internal static string Sch_ElementCannotHaveValue { get; }
    internal static string Sch_ElementInMixedWithFixed { get; }
    internal static string Sch_ElementTypeCollision { get; }
    internal static string Sch_InvalidIncludeLocation { get; }
    internal static string Sch_CannotLoadSchema { get; }
    internal static string Sch_CannotLoadSchemaLocation { get; }
    internal static string Sch_LengthGtBaseLength { get; }
    internal static string Sch_MinLengthGtBaseMinLength { get; }
    internal static string Sch_MaxLengthGtBaseMaxLength { get; }
    internal static string Sch_MaxMinLengthBaseLength { get; }
    internal static string Sch_MaxInclusiveMismatch { get; }
    internal static string Sch_MaxExclusiveMismatch { get; }
    internal static string Sch_MinInclusiveMismatch { get; }
    internal static string Sch_MinExclusiveMismatch { get; }
    internal static string Sch_MinExlIncMismatch { get; }
    internal static string Sch_MinExlMaxExlMismatch { get; }
    internal static string Sch_MinIncMaxExlMismatch { get; }
    internal static string Sch_MinIncExlMismatch { get; }
    internal static string Sch_MaxIncExlMismatch { get; }
    internal static string Sch_MaxExlIncMismatch { get; }
    internal static string Sch_TotalDigitsMismatch { get; }
    internal static string Sch_FacetBaseFixed { get; }
    internal static string Sch_WhiteSpaceRestriction1 { get; }
    internal static string Sch_WhiteSpaceRestriction2 { get; }
    internal static string Sch_XsiNilAndFixed { get; }
    internal static string Sch_MixSchemaTypes { get; }
    internal static string Sch_XSDSchemaOnly { get; }
    internal static string Sch_InvalidPublicAttribute { get; }
    internal static string Sch_InvalidSystemAttribute { get; }
    internal static string Sch_TypeAfterConstraints { get; }
    internal static string Sch_XsiNilAndType { get; }
    internal static string Sch_DupSimpleTypeChild { get; }
    internal static string Sch_InvalidIdAttribute { get; }
    internal static string Sch_InvalidNameAttributeEx { get; }
    internal static string Sch_InvalidAttribute { get; }
    internal static string Sch_EmptyChoice { get; }
    internal static string Sch_DerivedNotFromBase { get; }
    internal static string Sch_NeedSimpleTypeChild { get; }
    internal static string Sch_InvalidCollection { get; }
    internal static string Sch_UnrefNS { get; }
    internal static string Sch_InvalidSimpleTypeRestriction { get; }
    internal static string Sch_MultipleRedefine { get; }
    internal static string Sch_NullValue { get; }
    internal static string Sch_ComplexContentModel { get; }
    internal static string Sch_SchemaNotPreprocessed { get; }
    internal static string Sch_SchemaNotRemoved { get; }
    internal static string Sch_ComponentAlreadySeenForNS { get; }
    internal static string Sch_DefaultAttributeNotApplied { get; }
    internal static string Sch_NotXsiAttribute { get; }
    internal static string Sch_SchemaDoesNotExist { get; }
    internal static string XmlDocument_ValidateInvalidNodeType { get; }
    internal static string XmlDocument_NodeNotFromDocument { get; }
    internal static string XmlDocument_NoNodeSchemaInfo { get; }
    internal static string XmlDocument_NoSchemaInfo { get; }
    internal static string Sch_InvalidStartTransition { get; }
    internal static string Sch_InvalidStateTransition { get; }
    internal static string Sch_InvalidEndValidation { get; }
    internal static string Sch_InvalidEndElementCall { get; }
    internal static string Sch_InvalidEndElementCallTyped { get; }
    internal static string Sch_InvalidEndElementMultiple { get; }
    internal static string Sch_DuplicateAttribute { get; }
    internal static string Sch_InvalidPartialValidationType { get; }
    internal static string Sch_SchemaElementNameMismatch { get; }
    internal static string Sch_SchemaAttributeNameMismatch { get; }
    internal static string Sch_ValidateAttributeInvalidCall { get; }
    internal static string Sch_ValidateElementInvalidCall { get; }
    internal static string Sch_EnumNotStarted { get; }
    internal static string Sch_EnumFinished { get; }
    internal static string SchInf_schema { get; }
    internal static string SchInf_entity { get; }
    internal static string SchInf_simplecontent { get; }
    internal static string SchInf_extension { get; }
    internal static string SchInf_particle { get; }
    internal static string SchInf_ct { get; }
    internal static string SchInf_seq { get; }
    internal static string SchInf_noseq { get; }
    internal static string SchInf_noct { get; }
    internal static string SchInf_UnknownParticle { get; }
    internal static string SchInf_schematype { get; }
    internal static string SchInf_NoElement { get; }
    internal static string Xp_UnclosedString { get; }
    internal static string Xp_ExprExpected { get; }
    internal static string Xp_InvalidArgumentType { get; }
    internal static string Xp_InvalidNumArgs { get; }
    internal static string Xp_InvalidName { get; }
    internal static string Xp_InvalidToken { get; }
    internal static string Xp_NodeSetExpected { get; }
    internal static string Xp_NotSupported { get; }
    internal static string Xp_InvalidPattern { get; }
    internal static string Xp_InvalidKeyPattern { get; }
    internal static string Xp_BadQueryObject { get; }
    internal static string Xp_UndefinedXsltContext { get; }
    internal static string Xp_NoContext { get; }
    internal static string Xp_UndefVar { get; }
    internal static string Xp_UndefFunc { get; }
    internal static string Xp_FunctionFailed { get; }
    internal static string Xp_CurrentNotAllowed { get; }
    internal static string Xp_QueryTooComplex { get; }
    internal static string Xdom_DualDocumentTypeNode { get; }
    internal static string Xdom_DualDocumentElementNode { get; }
    internal static string Xdom_DualDeclarationNode { get; }
    internal static string Xdom_Import { get; }
    internal static string Xdom_Import_NullNode { get; }
    internal static string Xdom_NoRootEle { get; }
    internal static string Xdom_Attr_Name { get; }
    internal static string Xdom_AttrCol_Object { get; }
    internal static string Xdom_AttrCol_Insert { get; }
    internal static string Xdom_NamedNode_Context { get; }
    internal static string Xdom_Version { get; }
    internal static string Xdom_standalone { get; }
    internal static string Xdom_Ent_Innertext { get; }
    internal static string Xdom_EntRef_SetVal { get; }
    internal static string Xdom_WS_Char { get; }
    internal static string Xdom_Node_SetVal { get; }
    internal static string Xdom_Empty_LocalName { get; }
    internal static string Xdom_Set_InnerXml { get; }
    internal static string Xdom_Attr_InUse { get; }
    internal static string Xdom_Enum_ElementList { get; }
    internal static string Xdom_Invalid_NT_String { get; }
    internal static string Xdom_InvalidCharacter_EntityReference { get; }
    internal static string Xdom_IndexOutOfRange { get; }
    internal static string Xdom_Document_Innertext { get; }
    internal static string Xpn_BadPosition { get; }
    internal static string Xpn_MissingParent { get; }
    internal static string Xpn_NoContent { get; }
    internal static string Xdom_Load_NoDocument { get; }
    internal static string Xdom_Load_NoReader { get; }
    internal static string Xdom_Node_Null_Doc { get; }
    internal static string Xdom_Node_Insert_Child { get; }
    internal static string Xdom_Node_Insert_Contain { get; }
    internal static string Xdom_Node_Insert_Path { get; }
    internal static string Xdom_Node_Insert_Context { get; }
    internal static string Xdom_Node_Insert_Location { get; }
    internal static string Xdom_Node_Insert_TypeConflict { get; }
    internal static string Xdom_Node_Remove_Contain { get; }
    internal static string Xdom_Node_Remove_Child { get; }
    internal static string Xdom_Node_Modify_ReadOnly { get; }
    internal static string Xdom_TextNode_SplitText { get; }
    internal static string Xdom_Attr_Reserved_XmlNS { get; }
    internal static string Xdom_Node_Cloning { get; }
    internal static string Xnr_ResolveEntity { get; }
    internal static string XPathDocument_MissingSchemas { get; }
    internal static string XPathDocument_NotEnoughSchemaInfo { get; }
    internal static string XPathDocument_ValidateInvalidNodeType { get; }
    internal static string XPathDocument_SchemaSetNotAllowed { get; }
    internal static string XmlBin_MissingEndCDATA { get; }
    internal static string XmlBin_InvalidQNameID { get; }
    internal static string XmlBinary_UnexpectedToken { get; }
    internal static string XmlBinary_InvalidSqlDecimal { get; }
    internal static string XmlBinary_InvalidSignature { get; }
    internal static string XmlBinary_InvalidProtocolVersion { get; }
    internal static string XmlBinary_UnsupportedCodePage { get; }
    internal static string XmlBinary_InvalidStandalone { get; }
    internal static string XmlBinary_NoParserContext { get; }
    internal static string XmlBinary_ListsOfValuesNotSupported { get; }
    internal static string XmlBinary_CastNotSupported { get; }
    internal static string XmlBinary_NoRemapPrefix { get; }
    internal static string XmlBinary_AttrWithNsNoPrefix { get; }
    internal static string XmlBinary_ValueTooBig { get; }
    internal static string SqlTypes_ArithOverflow { get; }
    internal static string XmlMissingType { get; }
    internal static string XmlSerializerUnsupportedType { get; }
    internal static string XmlSerializerUnsupportedMember { get; }
    internal static string XmlUnsupportedTypeKind { get; }
    internal static string XmlUnsupportedSoapTypeKind { get; }
    internal static string XmlUnsupportedIDictionary { get; }
    internal static string XmlUnsupportedIDictionaryDetails { get; }
    internal static string XmlDuplicateTypeName { get; }
    internal static string XmlSerializableNameMissing1 { get; }
    internal static string XmlConstructorInaccessible { get; }
    internal static string XmlTypeInaccessible { get; }
    internal static string XmlTypeStatic { get; }
    internal static string XmlNoDefaultAccessors { get; }
    internal static string XmlNoAddMethod { get; }
    internal static string XmlReadOnlyPropertyError { get; }
    internal static string XmlAttributeSetAgain { get; }
    internal static string XmlIllegalWildcard { get; }
    internal static string XmlIllegalArrayElement { get; }
    internal static string XmlIllegalForm { get; }
    internal static string XmlBareTextMember { get; }
    internal static string XmlBareAttributeMember { get; }
    internal static string XmlReflectionError { get; }
    internal static string XmlTypeReflectionError { get; }
    internal static string XmlPropertyReflectionError { get; }
    internal static string XmlFieldReflectionError { get; }
    internal static string XmlInvalidDataTypeUsage { get; }
    internal static string XmlInvalidXsdDataType { get; }
    internal static string XmlDataTypeMismatch { get; }
    internal static string XmlIllegalTypeContext { get; }
    internal static string XmlUdeclaredXsdType { get; }
    internal static string XmlInvalidConstantAttribute { get; }
    internal static string XmlIllegalAttributesArrayAttribute { get; }
    internal static string XmlIllegalElementsArrayAttribute { get; }
    internal static string XmlIllegalArrayArrayAttribute { get; }
    internal static string XmlIllegalAttribute { get; }
    internal static string XmlIllegalType { get; }
    internal static string XmlIllegalAttrOrText { get; }
    internal static string XmlIllegalSoapAttribute { get; }
    internal static string XmlIllegalAttrOrTextInterface { get; }
    internal static string XmlIllegalAttributeFlagsArray { get; }
    internal static string XmlIllegalAnyElement { get; }
    internal static string XmlInvalidIsNullable { get; }
    internal static string XmlInvalidNotNullable { get; }
    internal static string XmlInvalidFormUnqualified { get; }
    internal static string XmlDuplicateNamespace { get; }
    internal static string XmlElementHasNoName { get; }
    internal static string XmlAttributeHasNoName { get; }
    internal static string XmlElementImportedTwice { get; }
    internal static string XmlHiddenMember { get; }
    internal static string XmlInvalidXmlOverride { get; }
    internal static string XmlMembersDeriveError { get; }
    internal static string XmlTypeUsedTwice { get; }
    internal static string XmlMissingGroup { get; }
    internal static string XmlMissingAttributeGroup { get; }
    internal static string XmlMissingDataType { get; }
    internal static string XmlInvalidEncoding { get; }
    internal static string XmlMissingElement { get; }
    internal static string XmlMissingAttribute { get; }
    internal static string XmlMissingMethodEnum { get; }
    internal static string XmlNoAttributeHere { get; }
    internal static string XmlNeedAttributeHere { get; }
    internal static string XmlElementNameMismatch { get; }
    internal static string XmlUnsupportedDefaultType { get; }
    internal static string XmlUnsupportedDefaultValue { get; }
    internal static string XmlInvalidDefaultValue { get; }
    internal static string XmlInvalidDefaultEnumValue { get; }
    internal static string XmlUnknownNode { get; }
    internal static string XmlUnknownConstant { get; }
    internal static string XmlSerializeError { get; }
    internal static string XmlSerializeErrorDetails { get; }
    internal static string XmlSchemaDuplicateNamespace { get; }
    internal static string XmlSchemaCompiled { get; }
    internal static string XmlInvalidArrayDimentions { get; }
    internal static string XmlInvalidArrayTypeName { get; }
    internal static string XmlInvalidArrayTypeNamespace { get; }
    internal static string XmlMissingArrayType { get; }
    internal static string XmlEmptyArrayType { get; }
    internal static string XmlInvalidArraySyntax { get; }
    internal static string XmlInvalidArrayTypeSyntax { get; }
    internal static string XmlMismatchedArrayBrackets { get; }
    internal static string XmlInvalidArrayLength { get; }
    internal static string XmlMissingHref { get; }
    internal static string XmlInvalidHref { get; }
    internal static string XmlUnknownType { get; }
    internal static string XmlAbstractType { get; }
    internal static string XmlMappingsScopeMismatch { get; }
    internal static string XmlMethodTypeNameConflict { get; }
    internal static string XmlCannotReconcileAccessor { get; }
    internal static string XmlCannotReconcileAttributeAccessor { get; }
    internal static string XmlCannotReconcileAccessorDefault { get; }
    internal static string XmlInvalidTypeAttributes { get; }
    internal static string XmlInvalidAttributeUse { get; }
    internal static string XmlTypesDuplicate { get; }
    internal static string XmlInvalidSoapArray { get; }
    internal static string XmlCannotIncludeInSchema { get; }
    internal static string XmlInvalidSerializable { get; }
    internal static string XmlInvalidUseOfType { get; }
    internal static string XmlUnxpectedType { get; }
    internal static string XmlUnknownAnyElement { get; }
    internal static string XmlMultipleAttributeOverrides { get; }
    internal static string XmlInvalidEnumAttribute { get; }
    internal static string XmlInvalidReturnPosition { get; }
    internal static string XmlInvalidElementAttribute { get; }
    internal static string XmlInvalidVoid { get; }
    internal static string XmlInvalidContent { get; }
    internal static string XmlInvalidAttributeType { get; }
    internal static string XmlInvalidBaseType { get; }
    internal static string XmlInvalidIdentifier { get; }
    internal static string XmlGenError { get; }
    internal static string XmlInvalidXmlns { get; }
    internal static string XmlCircularReference { get; }
    internal static string XmlCircularReference2 { get; }
    internal static string XmlAnonymousBaseType { get; }
    internal static string XmlMissingSchema { get; }
    internal static string XmlNoSerializableMembers { get; }
    internal static string XmlIllegalOverride { get; }
    internal static string XmlReadOnlyCollection { get; }
    internal static string XmlRpcNestedValueType { get; }
    internal static string XmlRpcRefsInValueType { get; }
    internal static string XmlRpcArrayOfValueTypes { get; }
    internal static string XmlDuplicateElementName { get; }
    internal static string XmlDuplicateAttributeName { get; }
    internal static string XmlBadBaseElement { get; }
    internal static string XmlBadBaseType { get; }
    internal static string XmlUndefinedAlias { get; }
    internal static string XmlChoiceIdentifierType { get; }
    internal static string XmlChoiceIdentifierArrayType { get; }
    internal static string XmlChoiceIdentifierTypeEnum { get; }
    internal static string XmlChoiceIdentiferMemberMissing { get; }
    internal static string XmlChoiceIdentiferAmbiguous { get; }
    internal static string XmlChoiceIdentiferMissing { get; }
    internal static string XmlChoiceMissingValue { get; }
    internal static string XmlChoiceMissingAnyValue { get; }
    internal static string XmlChoiceMismatchChoiceException { get; }
    internal static string XmlArrayItemAmbiguousTypes { get; }
    internal static string XmlUnsupportedInterface { get; }
    internal static string XmlUnsupportedInterfaceDetails { get; }
    internal static string XmlUnsupportedRank { get; }
    internal static string XmlUnsupportedInheritance { get; }
    internal static string XmlIllegalMultipleText { get; }
    internal static string XmlIllegalMultipleTextMembers { get; }
    internal static string XmlIllegalArrayTextAttribute { get; }
    internal static string XmlIllegalTypedTextAttribute { get; }
    internal static string XmlIllegalSimpleContentExtension { get; }
    internal static string XmlInvalidCast { get; }
    internal static string XmlInvalidCastWithId { get; }
    internal static string XmlInvalidArrayRef { get; }
    internal static string XmlInvalidNullCast { get; }
    internal static string XmlMultipleXmlns { get; }
    internal static string XmlMultipleXmlnsMembers { get; }
    internal static string XmlXmlnsInvalidType { get; }
    internal static string XmlSoleXmlnsAttribute { get; }
    internal static string XmlConstructorHasSecurityAttributes { get; }
    internal static string XmlInvalidChoiceIdentifierValue { get; }
    internal static string XmlAnyElementDuplicate { get; }
    internal static string XmlChoiceIdDuplicate { get; }
    internal static string XmlChoiceIdentifierMismatch { get; }
    internal static string XmlUnsupportedRedefine { get; }
    internal static string XmlDuplicateElementInScope { get; }
    internal static string XmlDuplicateElementInScope1 { get; }
    internal static string XmlNoPartialTrust { get; }
    internal static string XmlInvalidEncodingNotEncoded1 { get; }
    internal static string XmlInvalidEncoding3 { get; }
    internal static string XmlInvalidSpecifiedType { get; }
    internal static string XmlUnsupportedOpenGenericType { get; }
    internal static string XmlMismatchSchemaObjects { get; }
    internal static string XmlCircularTypeReference { get; }
    internal static string XmlCircularGroupReference { get; }
    internal static string XmlRpcLitElementNamespace { get; }
    internal static string XmlRpcLitElementNullable { get; }
    internal static string XmlRpcLitElements { get; }
    internal static string XmlRpcLitArrayElement { get; }
    internal static string XmlRpcLitAttributeAttributes { get; }
    internal static string XmlRpcLitAttributes { get; }
    internal static string XmlSequenceMembers { get; }
    internal static string XmlRpcLitXmlns { get; }
    internal static string XmlDuplicateNs { get; }
    internal static string XmlAnonymousInclude { get; }
    internal static string XmlSchemaIncludeLocation { get; }
    internal static string XmlSerializableSchemaError { get; }
    internal static string XmlGetSchemaMethodName { get; }
    internal static string XmlGetSchemaMethodMissing { get; }
    internal static string XmlGetSchemaMethodReturnType { get; }
    internal static string XmlGetSchemaEmptyTypeName { get; }
    internal static string XmlGetSchemaTypeMissing { get; }
    internal static string XmlGetSchemaInclude { get; }
    internal static string XmlSerializableAttributes { get; }
    internal static string XmlSerializableMergeItem { get; }
    internal static string XmlSerializableBadDerivation { get; }
    internal static string XmlSerializableMissingClrType { get; }
    internal static string XmlCircularDerivation { get; }
    internal static string XmlMelformMapping { get; }
    internal static string XmlSchemaSyntaxErrorDetails { get; }
    internal static string XmlSchemaElementReference { get; }
    internal static string XmlSchemaAttributeReference { get; }
    internal static string XmlSchemaItem { get; }
    internal static string XmlSchemaNamedItem { get; }
    internal static string XmlSchemaContentDef { get; }
    internal static string XmlSchema { get; }
    internal static string XmlSerializableRootDupName { get; }
    internal static string XmlNotSerializable { get; }
    internal static string XmlPregenInvalidXmlSerializerAssemblyAttribute { get; }
    internal static string XmlSequenceInconsistent { get; }
    internal static string XmlSequenceUnique { get; }
    internal static string XmlSequenceHierarchy { get; }
    internal static string XmlSequenceMatch { get; }
    internal static string XmlDisallowNegativeValues { get; }
    internal static string Xml_UnexpectedToken { get; }
    internal static string Sch_AttributeValueDataType { get; }
    internal static string Sch_ElementValueDataType { get; }
    internal static string XmlInternalError { get; }
    internal static string XmlInternalErrorDetails { get; }
    internal static string XmlInternalErrorMethod { get; }
    internal static string Arg_NeverValueType { get; }
    internal static string XmlInternalErrorReaderAdvance { get; }
    internal static string Enc_InvalidByteInEncoding { get; }
    internal static string Arg_ExpectingXmlTextReader { get; }
    internal static string Arg_CannotCreateNode { get; }
    internal static string Arg_IncompatibleParamType { get; }
    internal static string Xml_SystemPathResolverCannotOpenUri { get; }
    internal static string Xml_EndOfInnerExceptionStack { get; }
    internal static string XPath_UnclosedString { get; }
    internal static string XPath_ScientificNotation { get; }
    internal static string XPath_UnexpectedToken { get; }
    internal static string XPath_NodeTestExpected { get; }
    internal static string XPath_EofExpected { get; }
    internal static string XPath_TokenExpected { get; }
    internal static string XPath_InvalidAxisInPattern { get; }
    internal static string XPath_PredicateAfterDot { get; }
    internal static string XPath_PredicateAfterDotDot { get; }
    internal static string XPath_NArgsExpected { get; }
    internal static string XPath_NOrMArgsExpected { get; }
    internal static string XPath_AtLeastNArgsExpected { get; }
    internal static string XPath_AtMostMArgsExpected { get; }
    internal static string XPath_NodeSetArgumentExpected { get; }
    internal static string XPath_NodeSetExpected { get; }
    internal static string XPath_RtfInPathExpr { get; }
    internal static string Xslt_WarningAsError { get; }
    internal static string Xslt_InputTooComplex { get; }
    internal static string Xslt_CannotLoadStylesheet { get; }
    internal static string Xslt_WrongStylesheetElement { get; }
    internal static string Xslt_WdXslNamespace { get; }
    internal static string Xslt_NotAtTop { get; }
    internal static string Xslt_UnexpectedElement { get; }
    internal static string Xslt_NullNsAtTopLevel { get; }
    internal static string Xslt_TextNodesNotAllowed { get; }
    internal static string Xslt_NotEmptyContents { get; }
    internal static string Xslt_InvalidAttribute { get; }
    internal static string Xslt_MissingAttribute { get; }
    internal static string Xslt_InvalidAttrValue { get; }
    internal static string Xslt_BistateAttribute { get; }
    internal static string Xslt_CharAttribute { get; }
    internal static string Xslt_CircularInclude { get; }
    internal static string Xslt_SingleRightBraceInAvt { get; }
    internal static string Xslt_VariableCntSel2 { get; }
    internal static string Xslt_KeyCntUse { get; }
    internal static string Xslt_DupTemplateName { get; }
    internal static string Xslt_BothMatchNameAbsent { get; }
    internal static string Xslt_InvalidVariable { get; }
    internal static string Xslt_DupGlobalVariable { get; }
    internal static string Xslt_DupLocalVariable { get; }
    internal static string Xslt_DupNsAlias { get; }
    internal static string Xslt_EmptyAttrValue { get; }
    internal static string Xslt_EmptyNsAlias { get; }
    internal static string Xslt_UnknownXsltFunction { get; }
    internal static string Xslt_UnsupportedXsltFunction { get; }
    internal static string Xslt_NoAttributeSet { get; }
    internal static string Xslt_UndefinedKey { get; }
    internal static string Xslt_CircularAttributeSet { get; }
    internal static string Xslt_InvalidCallTemplate { get; }
    internal static string Xslt_InvalidPrefix { get; }
    internal static string Xslt_ScriptXsltNamespace { get; }
    internal static string Xslt_ScriptInvalidLanguage { get; }
    internal static string Xslt_ScriptMixedLanguages { get; }
    internal static string Xslt_ScriptAndExtensionClash { get; }
    internal static string Xslt_NoDecimalFormat { get; }
    internal static string Xslt_DecimalFormatSignsNotDistinct { get; }
    internal static string Xslt_DecimalFormatRedefined { get; }
    internal static string Xslt_UnknownExtensionElement { get; }
    internal static string Xslt_ModeWithoutMatch { get; }
    internal static string Xslt_ModeListEmpty { get; }
    internal static string Xslt_ModeListDup { get; }
    internal static string Xslt_ModeListAll { get; }
    internal static string Xslt_PriorityWithoutMatch { get; }
    internal static string Xslt_InvalidApplyImports { get; }
    internal static string Xslt_DuplicateWithParam { get; }
    internal static string Xslt_ReservedNS { get; }
    internal static string Xslt_XmlnsAttr { get; }
    internal static string Xslt_NoWhen { get; }
    internal static string Xslt_WhenAfterOtherwise { get; }
    internal static string Xslt_DupOtherwise { get; }
    internal static string Xslt_AttributeRedefinition { get; }
    internal static string Xslt_InvalidMethod { get; }
    internal static string Xslt_InvalidEncoding { get; }
    internal static string Xslt_InvalidLanguage { get; }
    internal static string Xslt_InvalidCompareOption { get; }
    internal static string Xslt_KeyNotAllowed { get; }
    internal static string Xslt_VariablesNotAllowed { get; }
    internal static string Xslt_CurrentNotAllowed { get; }
    internal static string Xslt_DocumentFuncProhibited { get; }
    internal static string Xslt_ScriptsProhibited { get; }
    internal static string Xslt_ItemNull { get; }
    internal static string Xslt_NodeSetNotNode { get; }
    internal static string Xslt_UnsupportedClrType { get; }
    internal static string Xslt_NotYetImplemented { get; }
    internal static string Xslt_SchemaDeclaration { get; }
    internal static string Xslt_SchemaAttribute { get; }
    internal static string Xslt_SchemaAttributeValue { get; }
    internal static string Xslt_ElementCntSel { get; }
    internal static string Xslt_PerformSortCntSel { get; }
    internal static string Xslt_RequiredAndSelect { get; }
    internal static string Xslt_NoSelectNoContent { get; }
    internal static string Xslt_NonTemplateTunnel { get; }
    internal static string Xslt_RequiredOnFunction { get; }
    internal static string Xslt_ExcludeDefault { get; }
    internal static string Xslt_CollationSyntax { get; }
    internal static string Xslt_AnalyzeStringDupChild { get; }
    internal static string Xslt_AnalyzeStringChildOrder { get; }
    internal static string Xslt_AnalyzeStringEmpty { get; }
    internal static string Xslt_SortStable { get; }
    internal static string Xslt_InputTypeAnnotations { get; }
    internal static string Coll_BadOptFormat { get; }
    internal static string Coll_Unsupported { get; }
    internal static string Coll_UnsupportedLanguage { get; }
    internal static string Coll_UnsupportedOpt { get; }
    internal static string Coll_UnsupportedOptVal { get; }
    internal static string Coll_UnsupportedSortOpt { get; }
    internal static string Qil_Validation { get; }
    internal static string XmlIl_TooManyParameters { get; }
    internal static string XmlIl_BadXmlState { get; }
    internal static string XmlIl_BadXmlStateAttr { get; }
    internal static string XmlIl_NmspAfterAttr { get; }
    internal static string XmlIl_NmspConflict { get; }
    internal static string XmlIl_CantResolveEntity { get; }
    internal static string XmlIl_NoDefaultDocument { get; }
    internal static string XmlIl_UnknownDocument { get; }
    internal static string XmlIl_UnknownParam { get; }
    internal static string XmlIl_UnknownExtObj { get; }
    internal static string XmlIl_CantStripNav { get; }
    internal static string XmlIl_ExtensionError { get; }
    internal static string XmlIl_TopLevelAttrNmsp { get; }
    internal static string XmlIl_NoExtensionMethod { get; }
    internal static string XmlIl_AmbiguousExtensionMethod { get; }
    internal static string XmlIl_NonPublicExtensionMethod { get; }
    internal static string XmlIl_GenericExtensionMethod { get; }
    internal static string XmlIl_ByRefType { get; }
    internal static string XmlIl_DocumentLoadError { get; }
    internal static string Xslt_CompileError { get; }
    internal static string Xslt_CompileError2 { get; }
    internal static string Xslt_UnsuppFunction { get; }
    internal static string Xslt_NotFirstImport { get; }
    internal static string Xslt_UnexpectedKeyword { get; }
    internal static string Xslt_InvalidContents { get; }
    internal static string Xslt_CantResolve { get; }
    internal static string Xslt_SingleRightAvt { get; }
    internal static string Xslt_OpenBracesAvt { get; }
    internal static string Xslt_OpenLiteralAvt { get; }
    internal static string Xslt_NestedAvt { get; }
    internal static string Xslt_EmptyAvtExpr { get; }
    internal static string Xslt_InvalidXPath { get; }
    internal static string Xslt_InvalidQName { get; }
    internal static string Xslt_TemplateNoAttrib { get; }
    internal static string Xslt_DupVarName { get; }
    internal static string Xslt_WrongNumberArgs { get; }
    internal static string Xslt_NoNodeSetConversion { get; }
    internal static string Xslt_NoNavigatorConversion { get; }
    internal static string Xslt_InvalidFormat { get; }
    internal static string Xslt_InvalidFormat1 { get; }
    internal static string Xslt_InvalidFormat2 { get; }
    internal static string Xslt_InvalidFormat3 { get; }
    internal static string Xslt_InvalidFormat5 { get; }
    internal static string Xslt_InvalidFormat8 { get; }
    internal static string Xslt_ScriptInvalidPrefix { get; }
    internal static string Xslt_ScriptDub { get; }
    internal static string Xslt_ScriptEmpty { get; }
    internal static string Xslt_DupDecimalFormat { get; }
    internal static string Xslt_CircularReference { get; }
    internal static string Xslt_InvalidExtensionNamespace { get; }
    internal static string Xslt_InvalidModeAttribute { get; }
    internal static string Xslt_MultipleRoots { get; }
    internal static string Xslt_ApplyImports { get; }
    internal static string Xslt_Terminate { get; }
    internal static string Xslt_InvalidPattern { get; }
    internal static string XmlInvalidCharSchemaPrimitive { get; }
    internal static string UnknownConstantType { get; }
    internal static string ArrayTypeIsNotSupported { get; }
    internal static string Xml_MissingSerializationCodeException { get; }
    internal static string Xslt_UpperCaseFirstNotSupported { get; }
    internal static string XmlPregenTypeDynamic { get; }
    internal static string XmlPregenOrphanType { get; }
    internal static string ErrSerializerExists { get; }
    internal static string ErrDirectoryExists { get; }
    internal static string ErrDirectoryNotExists { get; }
    internal static string ErrInvalidArgument { get; }
    internal static string Warning { get; }
    internal static string ErrMissingRequiredArgument { get; }
    internal static string ErrAssembly { get; }
    internal static string InfoGeneratedFile { get; }
    internal static string InfoFileName { get; }
    internal static string ErrGenerationFailed { get; }
    internal static string ErrorDetails { get; }
    internal static string ErrLoadType { get; }
    internal static string DirectoryAccessDenied { get; }
    internal static string Xslt_NotSupported { get; }
    internal static string ErrLoadAssembly { get; }
    internal static string InfoNoSerializableTypes { get; }
    internal static string InfoIgnoreType { get; }
    internal static string FailLoadAssemblyUnderPregenMode { get; }
    internal static string HelpDescription { get; }
    internal static string HelpUsage { get; }
    internal static string HelpDevOptions { get; }
    internal static string HelpAssembly { get; }
    internal static string HelpType { get; }
    internal static string HelpForce { get; }
    internal static string HelpProxy { get; }
    internal static string HelpOut { get; }
    internal static string HelpMiscOptions { get; }
    internal static string HelpHelp { get; }
    internal static string MoreHelp { get; }
    internal static string GenerateSerializerNotFound { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_Xml_UserException();
    internal static string get_Xml_DefaultException();
    internal static string get_Xml_InvalidOperation();
    internal static string get_Xml_ErrorFilePosition();
    internal static string get_Xml_StackOverflow();
    internal static string get_Xslt_NoStylesheetLoaded();
    internal static string get_Xslt_NotCompiledStylesheet();
    internal static string get_Xslt_IncompatibleCompiledStylesheetVersion();
    internal static string get_Xml_AsyncIsRunningException();
    internal static string get_Xml_ReaderAsyncNotSetException();
    internal static string get_Xml_UnclosedQuote();
    internal static string get_Xml_UnexpectedEOF();
    internal static string get_Xml_UnexpectedEOF1();
    internal static string get_Xml_UnexpectedEOFInElementContent();
    internal static string get_Xml_BadStartNameChar();
    internal static string get_Xml_BadNameChar();
    internal static string get_Xml_BadDecimalEntity();
    internal static string get_Xml_BadHexEntity();
    internal static string get_Xml_MissingByteOrderMark();
    internal static string get_Xml_UnknownEncoding();
    internal static string get_Xml_InternalError();
    internal static string get_Xml_InvalidCharInThisEncoding();
    internal static string get_Xml_ErrorPosition();
    internal static string get_Xml_MessageWithErrorPosition();
    internal static string get_Xml_UnexpectedTokenEx();
    internal static string get_Xml_UnexpectedTokens2();
    internal static string get_Xml_ExpectingWhiteSpace();
    internal static string get_Xml_TagMismatchEx();
    internal static string get_Xml_UnexpectedEndTag();
    internal static string get_Xml_UnknownNs();
    internal static string get_Xml_BadAttributeChar();
    internal static string get_Xml_ExpectExternalOrClose();
    internal static string get_Xml_MissingRoot();
    internal static string get_Xml_MultipleRoots();
    internal static string get_Xml_InvalidRootData();
    internal static string get_Xml_XmlDeclNotFirst();
    internal static string get_Xml_InvalidXmlDecl();
    internal static string get_Xml_InvalidNodeType();
    internal static string get_Xml_InvalidPIName();
    internal static string get_Xml_InvalidXmlSpace();
    internal static string get_Xml_InvalidVersionNumber();
    internal static string get_Xml_DupAttributeName();
    internal static string get_Xml_BadDTDLocation();
    internal static string get_Xml_ElementNotFound();
    internal static string get_Xml_ElementNotFoundNs();
    internal static string get_Xml_PartialContentNodeTypeNotSupportedEx();
    internal static string get_Xml_MultipleDTDsProvided();
    internal static string get_Xml_CanNotBindToReservedNamespace();
    internal static string get_Xml_InvalidCharacter();
    internal static string get_Xml_InvalidBinHexValue();
    internal static string get_Xml_InvalidBinHexValueOddCount();
    internal static string get_Xml_InvalidTextDecl();
    internal static string get_Xml_InvalidBase64Value();
    internal static string get_Xml_UndeclaredEntity();
    internal static string get_Xml_RecursiveParEntity();
    internal static string get_Xml_RecursiveGenEntity();
    internal static string get_Xml_ExternalEntityInAttValue();
    internal static string get_Xml_UnparsedEntityRef();
    internal static string get_Xml_NotSameNametable();
    internal static string get_Xml_NametableMismatch();
    internal static string get_Xml_BadNamespaceDecl();
    internal static string get_Xml_ErrorParsingEntityName();
    internal static string get_Xml_InvalidNmToken();
    internal static string get_Xml_EntityRefNesting();
    internal static string get_Xml_CannotResolveEntity();
    internal static string get_Xml_CannotResolveEntityDtdIgnored();
    internal static string get_Xml_CannotResolveExternalSubset();
    internal static string get_Xml_CannotResolveUrl();
    internal static string get_Xml_CDATAEndInText();
    internal static string get_Xml_ExternalEntityInStandAloneDocument();
    internal static string get_Xml_DtdAfterRootElement();
    internal static string get_Xml_ReadOnlyProperty();
    internal static string get_Xml_DtdIsProhibited();
    internal static string get_Xml_DtdIsProhibitedEx();
    internal static string get_Xml_ReadSubtreeNotOnElement();
    internal static string get_Xml_DtdNotAllowedInFragment();
    internal static string get_Xml_CannotStartDocumentOnFragment();
    internal static string get_Xml_ErrorOpeningExternalDtd();
    internal static string get_Xml_ErrorOpeningExternalEntity();
    internal static string get_Xml_ReadBinaryContentNotSupported();
    internal static string get_Xml_ReadValueChunkNotSupported();
    internal static string get_Xml_InvalidReadContentAs();
    internal static string get_Xml_InvalidReadElementContentAs();
    internal static string get_Xml_MixedReadElementContentAs();
    internal static string get_Xml_MixingReadValueChunkWithBinary();
    internal static string get_Xml_MixingBinaryContentMethods();
    internal static string get_Xml_MixingV1StreamingWithV2Binary();
    internal static string get_Xml_InvalidReadValueChunk();
    internal static string get_Xml_ReadContentAsFormatException();
    internal static string get_Xml_DoubleBaseUri();
    internal static string get_Xml_NotEnoughSpaceForSurrogatePair();
    internal static string get_Xml_EmptyUrl();
    internal static string get_Xml_UnexpectedNodeInSimpleContent();
    internal static string get_Xml_InvalidWhitespaceCharacter();
    internal static string get_Xml_IncompatibleConformanceLevel();
    internal static string get_Xml_LimitExceeded();
    internal static string get_Xml_ClosedOrErrorReader();
    internal static string get_Xml_CharEntityOverflow();
    internal static string get_Xml_BadNameCharWithPos();
    internal static string get_Xml_XmlnsBelongsToReservedNs();
    internal static string get_Xml_UndeclaredParEntity();
    internal static string get_Xml_InvalidXmlDocument();
    internal static string get_Xml_NoDTDPresent();
    internal static string get_Xml_MultipleValidaitonTypes();
    internal static string get_Xml_NoValidation();
    internal static string get_Xml_WhitespaceHandling();
    internal static string get_Xml_InvalidResetStateCall();
    internal static string get_Xml_EntityHandling();
    internal static string get_Xml_AttlistDuplEnumValue();
    internal static string get_Xml_AttlistDuplNotationValue();
    internal static string get_Xml_EncodingSwitchAfterResetState();
    internal static string get_Xml_UnexpectedNodeType();
    internal static string get_Xml_InvalidConditionalSection();
    internal static string get_Xml_UnexpectedCDataEnd();
    internal static string get_Xml_UnclosedConditionalSection();
    internal static string get_Xml_ExpectDtdMarkup();
    internal static string get_Xml_IncompleteDtdContent();
    internal static string get_Xml_EnumerationRequired();
    internal static string get_Xml_InvalidContentModel();
    internal static string get_Xml_FragmentId();
    internal static string get_Xml_ExpectPcData();
    internal static string get_Xml_ExpectNoWhitespace();
    internal static string get_Xml_ExpectOp();
    internal static string get_Xml_InvalidAttributeType();
    internal static string get_Xml_InvalidAttributeType1();
    internal static string get_Xml_ExpectAttType();
    internal static string get_Xml_ColonInLocalName();
    internal static string get_Xml_InvalidParEntityRef();
    internal static string get_Xml_ExpectSubOrClose();
    internal static string get_Xml_ExpectExternalOrPublicId();
    internal static string get_Xml_ExpectExternalIdOrEntityValue();
    internal static string get_Xml_ExpectIgnoreOrInclude();
    internal static string get_Xml_UnsupportedClass();
    internal static string get_Xml_NullResolver();
    internal static string get_Xml_RelativeUriNotSupported();
    internal static string get_Xml_WriterAsyncNotSetException();
    internal static string get_Xml_PrefixForEmptyNs();
    internal static string get_Xml_InvalidCommentChars();
    internal static string get_Xml_UndefNamespace();
    internal static string get_Xml_EmptyName();
    internal static string get_Xml_EmptyLocalName();
    internal static string get_Xml_InvalidNameCharsDetail();
    internal static string get_Xml_NoStartTag();
    internal static string get_Xml_ClosedOrError();
    internal static string get_Xml_WrongToken();
    internal static string get_Xml_XmlPrefix();
    internal static string get_Xml_XmlnsPrefix();
    internal static string get_Xml_NamespaceDeclXmlXmlns();
    internal static string get_Xml_NonWhitespace();
    internal static string get_Xml_DupXmlDecl();
    internal static string get_Xml_CannotWriteXmlDecl();
    internal static string get_Xml_NoRoot();
    internal static string get_Xml_InvalidPosition();
    internal static string get_Xml_IncompleteEntity();
    internal static string get_Xml_InvalidSurrogateHighChar();
    internal static string get_Xml_InvalidSurrogateMissingLowChar();
    internal static string get_Xml_InvalidSurrogatePairWithArgs();
    internal static string get_Xml_RedefinePrefix();
    internal static string get_Xml_DtdAlreadyWritten();
    internal static string get_Xml_InvalidCharsInIndent();
    internal static string get_Xml_IndentCharsNotWhitespace();
    internal static string get_Xml_ConformanceLevelFragment();
    internal static string get_Xml_InvalidQuote();
    internal static string get_Xml_UndefPrefix();
    internal static string get_Xml_NoNamespaces();
    internal static string get_Xml_InvalidCDataChars();
    internal static string get_Xml_NotTheFirst();
    internal static string get_Xml_InvalidPiChars();
    internal static string get_Xml_InvalidNameChars();
    internal static string get_Xml_Closed();
    internal static string get_Xml_InvalidPrefix();
    internal static string get_Xml_InvalidIndentation();
    internal static string get_Xml_NotInWriteState();
    internal static string get_Xml_SurrogatePairSplit();
    internal static string get_Xml_NoMultipleRoots();
    internal static string get_XmlBadName();
    internal static string get_XmlNoNameAllowed();
    internal static string get_XmlConvert_BadUri();
    internal static string get_XmlConvert_BadFormat();
    internal static string get_XmlConvert_Overflow();
    internal static string get_XmlConvert_TypeBadMapping();
    internal static string get_XmlConvert_TypeBadMapping2();
    internal static string get_XmlConvert_TypeListBadMapping();
    internal static string get_XmlConvert_TypeListBadMapping2();
    internal static string get_XmlConvert_TypeToString();
    internal static string get_XmlConvert_TypeFromString();
    internal static string get_XmlConvert_TypeNoPrefix();
    internal static string get_XmlConvert_TypeNoNamespace();
    internal static string get_XmlConvert_NotOneCharString();
    internal static string get_Sch_ParEntityRefNesting();
    internal static string get_Sch_NotTokenString();
    internal static string get_Sch_InvalidDateTimeOption();
    internal static string get_Sch_StandAloneNormalization();
    internal static string get_Sch_UnSpecifiedDefaultAttributeInExternalStandalone();
    internal static string get_Sch_DefaultException();
    internal static string get_Sch_DupElementDecl();
    internal static string get_Sch_IdAttrDeclared();
    internal static string get_Sch_RootMatchDocType();
    internal static string get_Sch_DupId();
    internal static string get_Sch_UndeclaredElement();
    internal static string get_Sch_UndeclaredAttribute();
    internal static string get_Sch_UndeclaredNotation();
    internal static string get_Sch_UndeclaredId();
    internal static string get_Sch_SchemaRootExpected();
    internal static string get_Sch_XSDSchemaRootExpected();
    internal static string get_Sch_UnsupportedAttribute();
    internal static string get_Sch_UnsupportedElement();
    internal static string get_Sch_MissAttribute();
    internal static string get_Sch_AnnotationLocation();
    internal static string get_Sch_DataTypeTextOnly();
    internal static string get_Sch_UnknownModel();
    internal static string get_Sch_UnknownOrder();
    internal static string get_Sch_UnknownContent();
    internal static string get_Sch_UnknownRequired();
    internal static string get_Sch_UnknownDtType();
    internal static string get_Sch_MixedMany();
    internal static string get_Sch_GroupDisabled();
    internal static string get_Sch_MissDtvalue();
    internal static string get_Sch_MissDtvaluesAttribute();
    internal static string get_Sch_DupDtType();
    internal static string get_Sch_DupAttribute();
    internal static string get_Sch_RequireEnumeration();
    internal static string get_Sch_DefaultIdValue();
    internal static string get_Sch_ElementNotAllowed();
    internal static string get_Sch_ElementMissing();
    internal static string get_Sch_ManyMaxOccurs();
    internal static string get_Sch_MaxOccursInvalid();
    internal static string get_Sch_MinOccursInvalid();
    internal static string get_Sch_DtMaxLengthInvalid();
    internal static string get_Sch_DtMinLengthInvalid();
    internal static string get_Sch_DupDtMaxLength();
    internal static string get_Sch_DupDtMinLength();
    internal static string get_Sch_DtMinMaxLength();
    internal static string get_Sch_DupElement();
    internal static string get_Sch_DupGroupParticle();
    internal static string get_Sch_InvalidValue();
    internal static string get_Sch_InvalidValueDetailed();
    internal static string get_Sch_InvalidValueDetailedAttribute();
    internal static string get_Sch_MissRequiredAttribute();
    internal static string get_Sch_FixedAttributeValue();
    internal static string get_Sch_FixedElementValue();
    internal static string get_Sch_AttributeValueDataTypeDetailed();
    internal static string get_Sch_AttributeDefaultDataType();
    internal static string get_Sch_IncludeLocation();
    internal static string get_Sch_ImportLocation();
    internal static string get_Sch_RedefineLocation();
    internal static string get_Sch_InvalidBlockDefaultValue();
    internal static string get_Sch_InvalidFinalDefaultValue();
    internal static string get_Sch_InvalidElementBlockValue();
    internal static string get_Sch_InvalidElementFinalValue();
    internal static string get_Sch_InvalidSimpleTypeFinalValue();
    internal static string get_Sch_InvalidComplexTypeBlockValue();
    internal static string get_Sch_InvalidComplexTypeFinalValue();
    internal static string get_Sch_DupIdentityConstraint();
    internal static string get_Sch_DupGlobalElement();
    internal static string get_Sch_DupGlobalAttribute();
    internal static string get_Sch_DupSimpleType();
    internal static string get_Sch_DupComplexType();
    internal static string get_Sch_DupGroup();
    internal static string get_Sch_DupAttributeGroup();
    internal static string get_Sch_DupNotation();
    internal static string get_Sch_DefaultFixedAttributes();
    internal static string get_Sch_FixedInRef();
    internal static string get_Sch_FixedDefaultInRef();
    internal static string get_Sch_DupXsdElement();
    internal static string get_Sch_ForbiddenAttribute();
    internal static string get_Sch_AttributeIgnored();
    internal static string get_Sch_ElementRef();
    internal static string get_Sch_TypeMutualExclusive();
    internal static string get_Sch_ElementNameRef();
    internal static string get_Sch_AttributeNameRef();
    internal static string get_Sch_TextNotAllowed();
    internal static string get_Sch_UndeclaredType();
    internal static string get_Sch_UndeclaredSimpleType();
    internal static string get_Sch_UndeclaredEquivClass();
    internal static string get_Sch_AttListPresence();
    internal static string get_Sch_NotationValue();
    internal static string get_Sch_EnumerationValue();
    internal static string get_Sch_EmptyAttributeValue();
    internal static string get_Sch_InvalidLanguageId();
    internal static string get_Sch_XmlSpace();
    internal static string get_Sch_InvalidXsdAttributeValue();
    internal static string get_Sch_InvalidXsdAttributeDatatypeValue();
    internal static string get_Sch_ElementValueDataTypeDetailed();
    internal static string get_Sch_InvalidElementDefaultValue();
    internal static string get_Sch_NonDeterministic();
    internal static string get_Sch_NonDeterministicAnyEx();
    internal static string get_Sch_NonDeterministicAnyAny();
    internal static string get_Sch_StandAlone();
    internal static string get_Sch_XmlNsAttribute();
    internal static string get_Sch_AllElement();
    internal static string get_Sch_MismatchTargetNamespaceInclude();
    internal static string get_Sch_MismatchTargetNamespaceImport();
    internal static string get_Sch_MismatchTargetNamespaceEx();
    internal static string get_Sch_XsiTypeNotFound();
    internal static string get_Sch_XsiTypeAbstract();
    internal static string get_Sch_ListFromNonatomic();
    internal static string get_Sch_UnionFromUnion();
    internal static string get_Sch_DupLengthFacet();
    internal static string get_Sch_DupMinLengthFacet();
    internal static string get_Sch_DupMaxLengthFacet();
    internal static string get_Sch_DupWhiteSpaceFacet();
    internal static string get_Sch_DupMaxInclusiveFacet();
    internal static string get_Sch_DupMaxExclusiveFacet();
    internal static string get_Sch_DupMinInclusiveFacet();
    internal static string get_Sch_DupMinExclusiveFacet();
    internal static string get_Sch_DupTotalDigitsFacet();
    internal static string get_Sch_DupFractionDigitsFacet();
    internal static string get_Sch_LengthFacetProhibited();
    internal static string get_Sch_MinLengthFacetProhibited();
    internal static string get_Sch_MaxLengthFacetProhibited();
    internal static string get_Sch_PatternFacetProhibited();
    internal static string get_Sch_EnumerationFacetProhibited();
    internal static string get_Sch_WhiteSpaceFacetProhibited();
    internal static string get_Sch_MaxInclusiveFacetProhibited();
    internal static string get_Sch_MaxExclusiveFacetProhibited();
    internal static string get_Sch_MinInclusiveFacetProhibited();
    internal static string get_Sch_MinExclusiveFacetProhibited();
    internal static string get_Sch_TotalDigitsFacetProhibited();
    internal static string get_Sch_FractionDigitsFacetProhibited();
    internal static string get_Sch_LengthFacetInvalid();
    internal static string get_Sch_MinLengthFacetInvalid();
    internal static string get_Sch_MaxLengthFacetInvalid();
    internal static string get_Sch_MaxInclusiveFacetInvalid();
    internal static string get_Sch_MaxExclusiveFacetInvalid();
    internal static string get_Sch_MinInclusiveFacetInvalid();
    internal static string get_Sch_MinExclusiveFacetInvalid();
    internal static string get_Sch_TotalDigitsFacetInvalid();
    internal static string get_Sch_FractionDigitsFacetInvalid();
    internal static string get_Sch_PatternFacetInvalid();
    internal static string get_Sch_EnumerationFacetInvalid();
    internal static string get_Sch_InvalidWhiteSpace();
    internal static string get_Sch_UnknownFacet();
    internal static string get_Sch_LengthAndMinMax();
    internal static string get_Sch_MinLengthGtMaxLength();
    internal static string get_Sch_FractionDigitsGtTotalDigits();
    internal static string get_Sch_LengthConstraintFailed();
    internal static string get_Sch_MinLengthConstraintFailed();
    internal static string get_Sch_MaxLengthConstraintFailed();
    internal static string get_Sch_PatternConstraintFailed();
    internal static string get_Sch_EnumerationConstraintFailed();
    internal static string get_Sch_MaxInclusiveConstraintFailed();
    internal static string get_Sch_MaxExclusiveConstraintFailed();
    internal static string get_Sch_MinInclusiveConstraintFailed();
    internal static string get_Sch_MinExclusiveConstraintFailed();
    internal static string get_Sch_TotalDigitsConstraintFailed();
    internal static string get_Sch_FractionDigitsConstraintFailed();
    internal static string get_Sch_UnionFailedEx();
    internal static string get_Sch_NotationRequired();
    internal static string get_Sch_DupNotationAttribute();
    internal static string get_Sch_MissingPublicSystemAttribute();
    internal static string get_Sch_NotationAttributeOnEmptyElement();
    internal static string get_Sch_RefNotInScope();
    internal static string get_Sch_UndeclaredIdentityConstraint();
    internal static string get_Sch_RefInvalidIdentityConstraint();
    internal static string get_Sch_RefInvalidCardin();
    internal static string get_Sch_ReftoKeyref();
    internal static string get_Sch_EmptyXPath();
    internal static string get_Sch_UnresolvedPrefix();
    internal static string get_Sch_UnresolvedKeyref();
    internal static string get_Sch_ICXpathError();
    internal static string get_Sch_SelectorAttr();
    internal static string get_Sch_FieldSimpleTypeExpected();
    internal static string get_Sch_FieldSingleValueExpected();
    internal static string get_Sch_MissingKey();
    internal static string get_Sch_DuplicateKey();
    internal static string get_Sch_TargetNamespaceXsi();
    internal static string get_Sch_UndeclaredEntity();
    internal static string get_Sch_UnparsedEntityRef();
    internal static string get_Sch_MaxOccursInvalidXsd();
    internal static string get_Sch_MinOccursInvalidXsd();
    internal static string get_Sch_MaxInclusiveExclusive();
    internal static string get_Sch_MinInclusiveExclusive();
    internal static string get_Sch_MinInclusiveGtMaxInclusive();
    internal static string get_Sch_MinExclusiveGtMaxExclusive();
    internal static string get_Sch_MinInclusiveGtMaxExclusive();
    internal static string get_Sch_MinExclusiveGtMaxInclusive();
    internal static string get_Sch_SimpleTypeRestriction();
    internal static string get_Sch_InvalidFacetPosition();
    internal static string get_Sch_AttributeMutuallyExclusive();
    internal static string get_Sch_AnyAttributeLastChild();
    internal static string get_Sch_ComplexTypeContentModel();
    internal static string get_Sch_ComplexContentContentModel();
    internal static string get_Sch_NotNormalizedString();
    internal static string get_Sch_FractionDigitsNotOnDecimal();
    internal static string get_Sch_ContentInNill();
    internal static string get_Sch_NoElementSchemaFound();
    internal static string get_Sch_NoAttributeSchemaFound();
    internal static string get_Sch_InvalidNamespace();
    internal static string get_Sch_InvalidTargetNamespaceAttribute();
    internal static string get_Sch_InvalidNamespaceAttribute();
    internal static string get_Sch_InvalidSchemaLocation();
    internal static string get_Sch_ImportTargetNamespace();
    internal static string get_Sch_ImportTargetNamespaceNull();
    internal static string get_Sch_GroupDoubleRedefine();
    internal static string get_Sch_ComponentRedefineNotFound();
    internal static string get_Sch_GroupRedefineNotFound();
    internal static string get_Sch_AttrGroupDoubleRedefine();
    internal static string get_Sch_AttrGroupRedefineNotFound();
    internal static string get_Sch_ComplexTypeDoubleRedefine();
    internal static string get_Sch_ComplexTypeRedefineNotFound();
    internal static string get_Sch_SimpleToComplexTypeRedefine();
    internal static string get_Sch_SimpleTypeDoubleRedefine();
    internal static string get_Sch_ComplexToSimpleTypeRedefine();
    internal static string get_Sch_SimpleTypeRedefineNotFound();
    internal static string get_Sch_MinMaxGroupRedefine();
    internal static string get_Sch_MultipleGroupSelfRef();
    internal static string get_Sch_MultipleAttrGroupSelfRef();
    internal static string get_Sch_InvalidTypeRedefine();
    internal static string get_Sch_InvalidElementRef();
    internal static string get_Sch_MinGtMax();
    internal static string get_Sch_DupSelector();
    internal static string get_Sch_IdConstraintNoSelector();
    internal static string get_Sch_IdConstraintNoFields();
    internal static string get_Sch_IdConstraintNoRefer();
    internal static string get_Sch_SelectorBeforeFields();
    internal static string get_Sch_NoSimpleTypeContent();
    internal static string get_Sch_SimpleTypeRestRefBase();
    internal static string get_Sch_SimpleTypeRestRefBaseNone();
    internal static string get_Sch_SimpleTypeListRefBase();
    internal static string get_Sch_SimpleTypeListRefBaseNone();
    internal static string get_Sch_SimpleTypeUnionNoBase();
    internal static string get_Sch_NoRestOrExtQName();
    internal static string get_Sch_NoRestOrExt();
    internal static string get_Sch_NoGroupParticle();
    internal static string get_Sch_InvalidAllMin();
    internal static string get_Sch_InvalidAllMax();
    internal static string get_Sch_InvalidFacet();
    internal static string get_Sch_AbstractElement();
    internal static string get_Sch_XsiTypeBlockedEx();
    internal static string get_Sch_InvalidXsiNill();
    internal static string get_Sch_SubstitutionNotAllowed();
    internal static string get_Sch_SubstitutionBlocked();
    internal static string get_Sch_InvalidElementInEmptyEx();
    internal static string get_Sch_InvalidElementInTextOnlyEx();
    internal static string get_Sch_InvalidTextInElement();
    internal static string get_Sch_InvalidElementContent();
    internal static string get_Sch_InvalidElementContentComplex();
    internal static string get_Sch_IncompleteContent();
    internal static string get_Sch_IncompleteContentComplex();
    internal static string get_Sch_InvalidTextInElementExpecting();
    internal static string get_Sch_InvalidElementContentExpecting();
    internal static string get_Sch_InvalidElementContentExpectingComplex();
    internal static string get_Sch_IncompleteContentExpecting();
    internal static string get_Sch_IncompleteContentExpectingComplex();
    internal static string get_Sch_InvalidElementSubstitution();
    internal static string get_Sch_ElementNameAndNamespace();
    internal static string get_Sch_ElementName();
    internal static string get_Sch_ContinuationString();
    internal static string get_Sch_AnyElementNS();
    internal static string get_Sch_AnyElement();
    internal static string get_Sch_InvalidTextInEmpty();
    internal static string get_Sch_InvalidWhitespaceInEmpty();
    internal static string get_Sch_InvalidPIComment();
    internal static string get_Sch_InvalidAttributeRef();
    internal static string get_Sch_OptionalDefaultAttribute();
    internal static string get_Sch_AttributeCircularRef();
    internal static string get_Sch_IdentityConstraintCircularRef();
    internal static string get_Sch_SubstitutionCircularRef();
    internal static string get_Sch_InvalidAnyAttribute();
    internal static string get_Sch_DupIdAttribute();
    internal static string get_Sch_InvalidAllElementMax();
    internal static string get_Sch_InvalidAny();
    internal static string get_Sch_InvalidAnyDetailed();
    internal static string get_Sch_InvalidExamplar();
    internal static string get_Sch_NoExamplar();
    internal static string get_Sch_InvalidSubstitutionMember();
    internal static string get_Sch_RedefineNoSchema();
    internal static string get_Sch_ProhibitedAttribute();
    internal static string get_Sch_TypeCircularRef();
    internal static string get_Sch_TwoIdAttrUses();
    internal static string get_Sch_AttrUseAndWildId();
    internal static string get_Sch_MoreThanOneWildId();
    internal static string get_Sch_BaseFinalExtension();
    internal static string get_Sch_NotSimpleContent();
    internal static string get_Sch_NotComplexContent();
    internal static string get_Sch_BaseFinalRestriction();
    internal static string get_Sch_BaseFinalList();
    internal static string get_Sch_BaseFinalUnion();
    internal static string get_Sch_UndefBaseRestriction();
    internal static string get_Sch_UndefBaseExtension();
    internal static string get_Sch_DifContentType();
    internal static string get_Sch_InvalidContentRestriction();
    internal static string get_Sch_InvalidContentRestrictionDetailed();
    internal static string get_Sch_InvalidBaseToEmpty();
    internal static string get_Sch_InvalidBaseToMixed();
    internal static string get_Sch_DupAttributeUse();
    internal static string get_Sch_InvalidParticleRestriction();
    internal static string get_Sch_InvalidParticleRestrictionDetailed();
    internal static string get_Sch_ForbiddenDerivedParticleForAll();
    internal static string get_Sch_ForbiddenDerivedParticleForElem();
    internal static string get_Sch_ForbiddenDerivedParticleForChoice();
    internal static string get_Sch_ForbiddenDerivedParticleForSeq();
    internal static string get_Sch_ElementFromElement();
    internal static string get_Sch_ElementFromAnyRule1();
    internal static string get_Sch_ElementFromAnyRule2();
    internal static string get_Sch_AnyFromAnyRule1();
    internal static string get_Sch_AnyFromAnyRule2();
    internal static string get_Sch_AnyFromAnyRule3();
    internal static string get_Sch_GroupBaseFromAny1();
    internal static string get_Sch_GroupBaseFromAny2();
    internal static string get_Sch_ElementFromGroupBase1();
    internal static string get_Sch_ElementFromGroupBase2();
    internal static string get_Sch_ElementFromGroupBase3();
    internal static string get_Sch_GroupBaseRestRangeInvalid();
    internal static string get_Sch_GroupBaseRestNoMap();
    internal static string get_Sch_GroupBaseRestNotEmptiable();
    internal static string get_Sch_SeqFromAll();
    internal static string get_Sch_SeqFromChoice();
    internal static string get_Sch_UndefGroupRef();
    internal static string get_Sch_GroupCircularRef();
    internal static string get_Sch_AllRefNotRoot();
    internal static string get_Sch_AllRefMinMax();
    internal static string get_Sch_NotAllAlone();
    internal static string get_Sch_AttributeGroupCircularRef();
    internal static string get_Sch_UndefAttributeGroupRef();
    internal static string get_Sch_InvalidAttributeExtension();
    internal static string get_Sch_InvalidAnyAttributeRestriction();
    internal static string get_Sch_AttributeRestrictionProhibited();
    internal static string get_Sch_AttributeRestrictionInvalid();
    internal static string get_Sch_AttributeFixedInvalid();
    internal static string get_Sch_AttributeUseInvalid();
    internal static string get_Sch_AttributeRestrictionInvalidFromWildcard();
    internal static string get_Sch_NoDerivedAttribute();
    internal static string get_Sch_UnexpressibleAnyAttribute();
    internal static string get_Sch_RefInvalidAttribute();
    internal static string get_Sch_ElementCircularRef();
    internal static string get_Sch_RefInvalidElement();
    internal static string get_Sch_ElementCannotHaveValue();
    internal static string get_Sch_ElementInMixedWithFixed();
    internal static string get_Sch_ElementTypeCollision();
    internal static string get_Sch_InvalidIncludeLocation();
    internal static string get_Sch_CannotLoadSchema();
    internal static string get_Sch_CannotLoadSchemaLocation();
    internal static string get_Sch_LengthGtBaseLength();
    internal static string get_Sch_MinLengthGtBaseMinLength();
    internal static string get_Sch_MaxLengthGtBaseMaxLength();
    internal static string get_Sch_MaxMinLengthBaseLength();
    internal static string get_Sch_MaxInclusiveMismatch();
    internal static string get_Sch_MaxExclusiveMismatch();
    internal static string get_Sch_MinInclusiveMismatch();
    internal static string get_Sch_MinExclusiveMismatch();
    internal static string get_Sch_MinExlIncMismatch();
    internal static string get_Sch_MinExlMaxExlMismatch();
    internal static string get_Sch_MinIncMaxExlMismatch();
    internal static string get_Sch_MinIncExlMismatch();
    internal static string get_Sch_MaxIncExlMismatch();
    internal static string get_Sch_MaxExlIncMismatch();
    internal static string get_Sch_TotalDigitsMismatch();
    internal static string get_Sch_FacetBaseFixed();
    internal static string get_Sch_WhiteSpaceRestriction1();
    internal static string get_Sch_WhiteSpaceRestriction2();
    internal static string get_Sch_XsiNilAndFixed();
    internal static string get_Sch_MixSchemaTypes();
    internal static string get_Sch_XSDSchemaOnly();
    internal static string get_Sch_InvalidPublicAttribute();
    internal static string get_Sch_InvalidSystemAttribute();
    internal static string get_Sch_TypeAfterConstraints();
    internal static string get_Sch_XsiNilAndType();
    internal static string get_Sch_DupSimpleTypeChild();
    internal static string get_Sch_InvalidIdAttribute();
    internal static string get_Sch_InvalidNameAttributeEx();
    internal static string get_Sch_InvalidAttribute();
    internal static string get_Sch_EmptyChoice();
    internal static string get_Sch_DerivedNotFromBase();
    internal static string get_Sch_NeedSimpleTypeChild();
    internal static string get_Sch_InvalidCollection();
    internal static string get_Sch_UnrefNS();
    internal static string get_Sch_InvalidSimpleTypeRestriction();
    internal static string get_Sch_MultipleRedefine();
    internal static string get_Sch_NullValue();
    internal static string get_Sch_ComplexContentModel();
    internal static string get_Sch_SchemaNotPreprocessed();
    internal static string get_Sch_SchemaNotRemoved();
    internal static string get_Sch_ComponentAlreadySeenForNS();
    internal static string get_Sch_DefaultAttributeNotApplied();
    internal static string get_Sch_NotXsiAttribute();
    internal static string get_Sch_SchemaDoesNotExist();
    internal static string get_XmlDocument_ValidateInvalidNodeType();
    internal static string get_XmlDocument_NodeNotFromDocument();
    internal static string get_XmlDocument_NoNodeSchemaInfo();
    internal static string get_XmlDocument_NoSchemaInfo();
    internal static string get_Sch_InvalidStartTransition();
    internal static string get_Sch_InvalidStateTransition();
    internal static string get_Sch_InvalidEndValidation();
    internal static string get_Sch_InvalidEndElementCall();
    internal static string get_Sch_InvalidEndElementCallTyped();
    internal static string get_Sch_InvalidEndElementMultiple();
    internal static string get_Sch_DuplicateAttribute();
    internal static string get_Sch_InvalidPartialValidationType();
    internal static string get_Sch_SchemaElementNameMismatch();
    internal static string get_Sch_SchemaAttributeNameMismatch();
    internal static string get_Sch_ValidateAttributeInvalidCall();
    internal static string get_Sch_ValidateElementInvalidCall();
    internal static string get_Sch_EnumNotStarted();
    internal static string get_Sch_EnumFinished();
    internal static string get_SchInf_schema();
    internal static string get_SchInf_entity();
    internal static string get_SchInf_simplecontent();
    internal static string get_SchInf_extension();
    internal static string get_SchInf_particle();
    internal static string get_SchInf_ct();
    internal static string get_SchInf_seq();
    internal static string get_SchInf_noseq();
    internal static string get_SchInf_noct();
    internal static string get_SchInf_UnknownParticle();
    internal static string get_SchInf_schematype();
    internal static string get_SchInf_NoElement();
    internal static string get_Xp_UnclosedString();
    internal static string get_Xp_ExprExpected();
    internal static string get_Xp_InvalidArgumentType();
    internal static string get_Xp_InvalidNumArgs();
    internal static string get_Xp_InvalidName();
    internal static string get_Xp_InvalidToken();
    internal static string get_Xp_NodeSetExpected();
    internal static string get_Xp_NotSupported();
    internal static string get_Xp_InvalidPattern();
    internal static string get_Xp_InvalidKeyPattern();
    internal static string get_Xp_BadQueryObject();
    internal static string get_Xp_UndefinedXsltContext();
    internal static string get_Xp_NoContext();
    internal static string get_Xp_UndefVar();
    internal static string get_Xp_UndefFunc();
    internal static string get_Xp_FunctionFailed();
    internal static string get_Xp_CurrentNotAllowed();
    internal static string get_Xp_QueryTooComplex();
    internal static string get_Xdom_DualDocumentTypeNode();
    internal static string get_Xdom_DualDocumentElementNode();
    internal static string get_Xdom_DualDeclarationNode();
    internal static string get_Xdom_Import();
    internal static string get_Xdom_Import_NullNode();
    internal static string get_Xdom_NoRootEle();
    internal static string get_Xdom_Attr_Name();
    internal static string get_Xdom_AttrCol_Object();
    internal static string get_Xdom_AttrCol_Insert();
    internal static string get_Xdom_NamedNode_Context();
    internal static string get_Xdom_Version();
    internal static string get_Xdom_standalone();
    internal static string get_Xdom_Ent_Innertext();
    internal static string get_Xdom_EntRef_SetVal();
    internal static string get_Xdom_WS_Char();
    internal static string get_Xdom_Node_SetVal();
    internal static string get_Xdom_Empty_LocalName();
    internal static string get_Xdom_Set_InnerXml();
    internal static string get_Xdom_Attr_InUse();
    internal static string get_Xdom_Enum_ElementList();
    internal static string get_Xdom_Invalid_NT_String();
    internal static string get_Xdom_InvalidCharacter_EntityReference();
    internal static string get_Xdom_IndexOutOfRange();
    internal static string get_Xdom_Document_Innertext();
    internal static string get_Xpn_BadPosition();
    internal static string get_Xpn_MissingParent();
    internal static string get_Xpn_NoContent();
    internal static string get_Xdom_Load_NoDocument();
    internal static string get_Xdom_Load_NoReader();
    internal static string get_Xdom_Node_Null_Doc();
    internal static string get_Xdom_Node_Insert_Child();
    internal static string get_Xdom_Node_Insert_Contain();
    internal static string get_Xdom_Node_Insert_Path();
    internal static string get_Xdom_Node_Insert_Context();
    internal static string get_Xdom_Node_Insert_Location();
    internal static string get_Xdom_Node_Insert_TypeConflict();
    internal static string get_Xdom_Node_Remove_Contain();
    internal static string get_Xdom_Node_Remove_Child();
    internal static string get_Xdom_Node_Modify_ReadOnly();
    internal static string get_Xdom_TextNode_SplitText();
    internal static string get_Xdom_Attr_Reserved_XmlNS();
    internal static string get_Xdom_Node_Cloning();
    internal static string get_Xnr_ResolveEntity();
    internal static string get_XPathDocument_MissingSchemas();
    internal static string get_XPathDocument_NotEnoughSchemaInfo();
    internal static string get_XPathDocument_ValidateInvalidNodeType();
    internal static string get_XPathDocument_SchemaSetNotAllowed();
    internal static string get_XmlBin_MissingEndCDATA();
    internal static string get_XmlBin_InvalidQNameID();
    internal static string get_XmlBinary_UnexpectedToken();
    internal static string get_XmlBinary_InvalidSqlDecimal();
    internal static string get_XmlBinary_InvalidSignature();
    internal static string get_XmlBinary_InvalidProtocolVersion();
    internal static string get_XmlBinary_UnsupportedCodePage();
    internal static string get_XmlBinary_InvalidStandalone();
    internal static string get_XmlBinary_NoParserContext();
    internal static string get_XmlBinary_ListsOfValuesNotSupported();
    internal static string get_XmlBinary_CastNotSupported();
    internal static string get_XmlBinary_NoRemapPrefix();
    internal static string get_XmlBinary_AttrWithNsNoPrefix();
    internal static string get_XmlBinary_ValueTooBig();
    internal static string get_SqlTypes_ArithOverflow();
    internal static string get_XmlMissingType();
    internal static string get_XmlSerializerUnsupportedType();
    internal static string get_XmlSerializerUnsupportedMember();
    internal static string get_XmlUnsupportedTypeKind();
    internal static string get_XmlUnsupportedSoapTypeKind();
    internal static string get_XmlUnsupportedIDictionary();
    internal static string get_XmlUnsupportedIDictionaryDetails();
    internal static string get_XmlDuplicateTypeName();
    internal static string get_XmlSerializableNameMissing1();
    internal static string get_XmlConstructorInaccessible();
    internal static string get_XmlTypeInaccessible();
    internal static string get_XmlTypeStatic();
    internal static string get_XmlNoDefaultAccessors();
    internal static string get_XmlNoAddMethod();
    internal static string get_XmlReadOnlyPropertyError();
    internal static string get_XmlAttributeSetAgain();
    internal static string get_XmlIllegalWildcard();
    internal static string get_XmlIllegalArrayElement();
    internal static string get_XmlIllegalForm();
    internal static string get_XmlBareTextMember();
    internal static string get_XmlBareAttributeMember();
    internal static string get_XmlReflectionError();
    internal static string get_XmlTypeReflectionError();
    internal static string get_XmlPropertyReflectionError();
    internal static string get_XmlFieldReflectionError();
    internal static string get_XmlInvalidDataTypeUsage();
    internal static string get_XmlInvalidXsdDataType();
    internal static string get_XmlDataTypeMismatch();
    internal static string get_XmlIllegalTypeContext();
    internal static string get_XmlUdeclaredXsdType();
    internal static string get_XmlInvalidConstantAttribute();
    internal static string get_XmlIllegalAttributesArrayAttribute();
    internal static string get_XmlIllegalElementsArrayAttribute();
    internal static string get_XmlIllegalArrayArrayAttribute();
    internal static string get_XmlIllegalAttribute();
    internal static string get_XmlIllegalType();
    internal static string get_XmlIllegalAttrOrText();
    internal static string get_XmlIllegalSoapAttribute();
    internal static string get_XmlIllegalAttrOrTextInterface();
    internal static string get_XmlIllegalAttributeFlagsArray();
    internal static string get_XmlIllegalAnyElement();
    internal static string get_XmlInvalidIsNullable();
    internal static string get_XmlInvalidNotNullable();
    internal static string get_XmlInvalidFormUnqualified();
    internal static string get_XmlDuplicateNamespace();
    internal static string get_XmlElementHasNoName();
    internal static string get_XmlAttributeHasNoName();
    internal static string get_XmlElementImportedTwice();
    internal static string get_XmlHiddenMember();
    internal static string get_XmlInvalidXmlOverride();
    internal static string get_XmlMembersDeriveError();
    internal static string get_XmlTypeUsedTwice();
    internal static string get_XmlMissingGroup();
    internal static string get_XmlMissingAttributeGroup();
    internal static string get_XmlMissingDataType();
    internal static string get_XmlInvalidEncoding();
    internal static string get_XmlMissingElement();
    internal static string get_XmlMissingAttribute();
    internal static string get_XmlMissingMethodEnum();
    internal static string get_XmlNoAttributeHere();
    internal static string get_XmlNeedAttributeHere();
    internal static string get_XmlElementNameMismatch();
    internal static string get_XmlUnsupportedDefaultType();
    internal static string get_XmlUnsupportedDefaultValue();
    internal static string get_XmlInvalidDefaultValue();
    internal static string get_XmlInvalidDefaultEnumValue();
    internal static string get_XmlUnknownNode();
    internal static string get_XmlUnknownConstant();
    internal static string get_XmlSerializeError();
    internal static string get_XmlSerializeErrorDetails();
    internal static string get_XmlSchemaDuplicateNamespace();
    internal static string get_XmlSchemaCompiled();
    internal static string get_XmlInvalidArrayDimentions();
    internal static string get_XmlInvalidArrayTypeName();
    internal static string get_XmlInvalidArrayTypeNamespace();
    internal static string get_XmlMissingArrayType();
    internal static string get_XmlEmptyArrayType();
    internal static string get_XmlInvalidArraySyntax();
    internal static string get_XmlInvalidArrayTypeSyntax();
    internal static string get_XmlMismatchedArrayBrackets();
    internal static string get_XmlInvalidArrayLength();
    internal static string get_XmlMissingHref();
    internal static string get_XmlInvalidHref();
    internal static string get_XmlUnknownType();
    internal static string get_XmlAbstractType();
    internal static string get_XmlMappingsScopeMismatch();
    internal static string get_XmlMethodTypeNameConflict();
    internal static string get_XmlCannotReconcileAccessor();
    internal static string get_XmlCannotReconcileAttributeAccessor();
    internal static string get_XmlCannotReconcileAccessorDefault();
    internal static string get_XmlInvalidTypeAttributes();
    internal static string get_XmlInvalidAttributeUse();
    internal static string get_XmlTypesDuplicate();
    internal static string get_XmlInvalidSoapArray();
    internal static string get_XmlCannotIncludeInSchema();
    internal static string get_XmlInvalidSerializable();
    internal static string get_XmlInvalidUseOfType();
    internal static string get_XmlUnxpectedType();
    internal static string get_XmlUnknownAnyElement();
    internal static string get_XmlMultipleAttributeOverrides();
    internal static string get_XmlInvalidEnumAttribute();
    internal static string get_XmlInvalidReturnPosition();
    internal static string get_XmlInvalidElementAttribute();
    internal static string get_XmlInvalidVoid();
    internal static string get_XmlInvalidContent();
    internal static string get_XmlInvalidAttributeType();
    internal static string get_XmlInvalidBaseType();
    internal static string get_XmlInvalidIdentifier();
    internal static string get_XmlGenError();
    internal static string get_XmlInvalidXmlns();
    internal static string get_XmlCircularReference();
    internal static string get_XmlCircularReference2();
    internal static string get_XmlAnonymousBaseType();
    internal static string get_XmlMissingSchema();
    internal static string get_XmlNoSerializableMembers();
    internal static string get_XmlIllegalOverride();
    internal static string get_XmlReadOnlyCollection();
    internal static string get_XmlRpcNestedValueType();
    internal static string get_XmlRpcRefsInValueType();
    internal static string get_XmlRpcArrayOfValueTypes();
    internal static string get_XmlDuplicateElementName();
    internal static string get_XmlDuplicateAttributeName();
    internal static string get_XmlBadBaseElement();
    internal static string get_XmlBadBaseType();
    internal static string get_XmlUndefinedAlias();
    internal static string get_XmlChoiceIdentifierType();
    internal static string get_XmlChoiceIdentifierArrayType();
    internal static string get_XmlChoiceIdentifierTypeEnum();
    internal static string get_XmlChoiceIdentiferMemberMissing();
    internal static string get_XmlChoiceIdentiferAmbiguous();
    internal static string get_XmlChoiceIdentiferMissing();
    internal static string get_XmlChoiceMissingValue();
    internal static string get_XmlChoiceMissingAnyValue();
    internal static string get_XmlChoiceMismatchChoiceException();
    internal static string get_XmlArrayItemAmbiguousTypes();
    internal static string get_XmlUnsupportedInterface();
    internal static string get_XmlUnsupportedInterfaceDetails();
    internal static string get_XmlUnsupportedRank();
    internal static string get_XmlUnsupportedInheritance();
    internal static string get_XmlIllegalMultipleText();
    internal static string get_XmlIllegalMultipleTextMembers();
    internal static string get_XmlIllegalArrayTextAttribute();
    internal static string get_XmlIllegalTypedTextAttribute();
    internal static string get_XmlIllegalSimpleContentExtension();
    internal static string get_XmlInvalidCast();
    internal static string get_XmlInvalidCastWithId();
    internal static string get_XmlInvalidArrayRef();
    internal static string get_XmlInvalidNullCast();
    internal static string get_XmlMultipleXmlns();
    internal static string get_XmlMultipleXmlnsMembers();
    internal static string get_XmlXmlnsInvalidType();
    internal static string get_XmlSoleXmlnsAttribute();
    internal static string get_XmlConstructorHasSecurityAttributes();
    internal static string get_XmlInvalidChoiceIdentifierValue();
    internal static string get_XmlAnyElementDuplicate();
    internal static string get_XmlChoiceIdDuplicate();
    internal static string get_XmlChoiceIdentifierMismatch();
    internal static string get_XmlUnsupportedRedefine();
    internal static string get_XmlDuplicateElementInScope();
    internal static string get_XmlDuplicateElementInScope1();
    internal static string get_XmlNoPartialTrust();
    internal static string get_XmlInvalidEncodingNotEncoded1();
    internal static string get_XmlInvalidEncoding3();
    internal static string get_XmlInvalidSpecifiedType();
    internal static string get_XmlUnsupportedOpenGenericType();
    internal static string get_XmlMismatchSchemaObjects();
    internal static string get_XmlCircularTypeReference();
    internal static string get_XmlCircularGroupReference();
    internal static string get_XmlRpcLitElementNamespace();
    internal static string get_XmlRpcLitElementNullable();
    internal static string get_XmlRpcLitElements();
    internal static string get_XmlRpcLitArrayElement();
    internal static string get_XmlRpcLitAttributeAttributes();
    internal static string get_XmlRpcLitAttributes();
    internal static string get_XmlSequenceMembers();
    internal static string get_XmlRpcLitXmlns();
    internal static string get_XmlDuplicateNs();
    internal static string get_XmlAnonymousInclude();
    internal static string get_XmlSchemaIncludeLocation();
    internal static string get_XmlSerializableSchemaError();
    internal static string get_XmlGetSchemaMethodName();
    internal static string get_XmlGetSchemaMethodMissing();
    internal static string get_XmlGetSchemaMethodReturnType();
    internal static string get_XmlGetSchemaEmptyTypeName();
    internal static string get_XmlGetSchemaTypeMissing();
    internal static string get_XmlGetSchemaInclude();
    internal static string get_XmlSerializableAttributes();
    internal static string get_XmlSerializableMergeItem();
    internal static string get_XmlSerializableBadDerivation();
    internal static string get_XmlSerializableMissingClrType();
    internal static string get_XmlCircularDerivation();
    internal static string get_XmlMelformMapping();
    internal static string get_XmlSchemaSyntaxErrorDetails();
    internal static string get_XmlSchemaElementReference();
    internal static string get_XmlSchemaAttributeReference();
    internal static string get_XmlSchemaItem();
    internal static string get_XmlSchemaNamedItem();
    internal static string get_XmlSchemaContentDef();
    internal static string get_XmlSchema();
    internal static string get_XmlSerializableRootDupName();
    internal static string get_XmlNotSerializable();
    internal static string get_XmlPregenInvalidXmlSerializerAssemblyAttribute();
    internal static string get_XmlSequenceInconsistent();
    internal static string get_XmlSequenceUnique();
    internal static string get_XmlSequenceHierarchy();
    internal static string get_XmlSequenceMatch();
    internal static string get_XmlDisallowNegativeValues();
    internal static string get_Xml_UnexpectedToken();
    internal static string get_Sch_AttributeValueDataType();
    internal static string get_Sch_ElementValueDataType();
    internal static string get_XmlInternalError();
    internal static string get_XmlInternalErrorDetails();
    internal static string get_XmlInternalErrorMethod();
    internal static string get_Arg_NeverValueType();
    internal static string get_XmlInternalErrorReaderAdvance();
    internal static string get_Enc_InvalidByteInEncoding();
    internal static string get_Arg_ExpectingXmlTextReader();
    internal static string get_Arg_CannotCreateNode();
    internal static string get_Arg_IncompatibleParamType();
    internal static string get_Xml_SystemPathResolverCannotOpenUri();
    internal static string get_Xml_EndOfInnerExceptionStack();
    internal static string get_XPath_UnclosedString();
    internal static string get_XPath_ScientificNotation();
    internal static string get_XPath_UnexpectedToken();
    internal static string get_XPath_NodeTestExpected();
    internal static string get_XPath_EofExpected();
    internal static string get_XPath_TokenExpected();
    internal static string get_XPath_InvalidAxisInPattern();
    internal static string get_XPath_PredicateAfterDot();
    internal static string get_XPath_PredicateAfterDotDot();
    internal static string get_XPath_NArgsExpected();
    internal static string get_XPath_NOrMArgsExpected();
    internal static string get_XPath_AtLeastNArgsExpected();
    internal static string get_XPath_AtMostMArgsExpected();
    internal static string get_XPath_NodeSetArgumentExpected();
    internal static string get_XPath_NodeSetExpected();
    internal static string get_XPath_RtfInPathExpr();
    internal static string get_Xslt_WarningAsError();
    internal static string get_Xslt_InputTooComplex();
    internal static string get_Xslt_CannotLoadStylesheet();
    internal static string get_Xslt_WrongStylesheetElement();
    internal static string get_Xslt_WdXslNamespace();
    internal static string get_Xslt_NotAtTop();
    internal static string get_Xslt_UnexpectedElement();
    internal static string get_Xslt_NullNsAtTopLevel();
    internal static string get_Xslt_TextNodesNotAllowed();
    internal static string get_Xslt_NotEmptyContents();
    internal static string get_Xslt_InvalidAttribute();
    internal static string get_Xslt_MissingAttribute();
    internal static string get_Xslt_InvalidAttrValue();
    internal static string get_Xslt_BistateAttribute();
    internal static string get_Xslt_CharAttribute();
    internal static string get_Xslt_CircularInclude();
    internal static string get_Xslt_SingleRightBraceInAvt();
    internal static string get_Xslt_VariableCntSel2();
    internal static string get_Xslt_KeyCntUse();
    internal static string get_Xslt_DupTemplateName();
    internal static string get_Xslt_BothMatchNameAbsent();
    internal static string get_Xslt_InvalidVariable();
    internal static string get_Xslt_DupGlobalVariable();
    internal static string get_Xslt_DupLocalVariable();
    internal static string get_Xslt_DupNsAlias();
    internal static string get_Xslt_EmptyAttrValue();
    internal static string get_Xslt_EmptyNsAlias();
    internal static string get_Xslt_UnknownXsltFunction();
    internal static string get_Xslt_UnsupportedXsltFunction();
    internal static string get_Xslt_NoAttributeSet();
    internal static string get_Xslt_UndefinedKey();
    internal static string get_Xslt_CircularAttributeSet();
    internal static string get_Xslt_InvalidCallTemplate();
    internal static string get_Xslt_InvalidPrefix();
    internal static string get_Xslt_ScriptXsltNamespace();
    internal static string get_Xslt_ScriptInvalidLanguage();
    internal static string get_Xslt_ScriptMixedLanguages();
    internal static string get_Xslt_ScriptAndExtensionClash();
    internal static string get_Xslt_NoDecimalFormat();
    internal static string get_Xslt_DecimalFormatSignsNotDistinct();
    internal static string get_Xslt_DecimalFormatRedefined();
    internal static string get_Xslt_UnknownExtensionElement();
    internal static string get_Xslt_ModeWithoutMatch();
    internal static string get_Xslt_ModeListEmpty();
    internal static string get_Xslt_ModeListDup();
    internal static string get_Xslt_ModeListAll();
    internal static string get_Xslt_PriorityWithoutMatch();
    internal static string get_Xslt_InvalidApplyImports();
    internal static string get_Xslt_DuplicateWithParam();
    internal static string get_Xslt_ReservedNS();
    internal static string get_Xslt_XmlnsAttr();
    internal static string get_Xslt_NoWhen();
    internal static string get_Xslt_WhenAfterOtherwise();
    internal static string get_Xslt_DupOtherwise();
    internal static string get_Xslt_AttributeRedefinition();
    internal static string get_Xslt_InvalidMethod();
    internal static string get_Xslt_InvalidEncoding();
    internal static string get_Xslt_InvalidLanguage();
    internal static string get_Xslt_InvalidCompareOption();
    internal static string get_Xslt_KeyNotAllowed();
    internal static string get_Xslt_VariablesNotAllowed();
    internal static string get_Xslt_CurrentNotAllowed();
    internal static string get_Xslt_DocumentFuncProhibited();
    internal static string get_Xslt_ScriptsProhibited();
    internal static string get_Xslt_ItemNull();
    internal static string get_Xslt_NodeSetNotNode();
    internal static string get_Xslt_UnsupportedClrType();
    internal static string get_Xslt_NotYetImplemented();
    internal static string get_Xslt_SchemaDeclaration();
    internal static string get_Xslt_SchemaAttribute();
    internal static string get_Xslt_SchemaAttributeValue();
    internal static string get_Xslt_ElementCntSel();
    internal static string get_Xslt_PerformSortCntSel();
    internal static string get_Xslt_RequiredAndSelect();
    internal static string get_Xslt_NoSelectNoContent();
    internal static string get_Xslt_NonTemplateTunnel();
    internal static string get_Xslt_RequiredOnFunction();
    internal static string get_Xslt_ExcludeDefault();
    internal static string get_Xslt_CollationSyntax();
    internal static string get_Xslt_AnalyzeStringDupChild();
    internal static string get_Xslt_AnalyzeStringChildOrder();
    internal static string get_Xslt_AnalyzeStringEmpty();
    internal static string get_Xslt_SortStable();
    internal static string get_Xslt_InputTypeAnnotations();
    internal static string get_Coll_BadOptFormat();
    internal static string get_Coll_Unsupported();
    internal static string get_Coll_UnsupportedLanguage();
    internal static string get_Coll_UnsupportedOpt();
    internal static string get_Coll_UnsupportedOptVal();
    internal static string get_Coll_UnsupportedSortOpt();
    internal static string get_Qil_Validation();
    internal static string get_XmlIl_TooManyParameters();
    internal static string get_XmlIl_BadXmlState();
    internal static string get_XmlIl_BadXmlStateAttr();
    internal static string get_XmlIl_NmspAfterAttr();
    internal static string get_XmlIl_NmspConflict();
    internal static string get_XmlIl_CantResolveEntity();
    internal static string get_XmlIl_NoDefaultDocument();
    internal static string get_XmlIl_UnknownDocument();
    internal static string get_XmlIl_UnknownParam();
    internal static string get_XmlIl_UnknownExtObj();
    internal static string get_XmlIl_CantStripNav();
    internal static string get_XmlIl_ExtensionError();
    internal static string get_XmlIl_TopLevelAttrNmsp();
    internal static string get_XmlIl_NoExtensionMethod();
    internal static string get_XmlIl_AmbiguousExtensionMethod();
    internal static string get_XmlIl_NonPublicExtensionMethod();
    internal static string get_XmlIl_GenericExtensionMethod();
    internal static string get_XmlIl_ByRefType();
    internal static string get_XmlIl_DocumentLoadError();
    internal static string get_Xslt_CompileError();
    internal static string get_Xslt_CompileError2();
    internal static string get_Xslt_UnsuppFunction();
    internal static string get_Xslt_NotFirstImport();
    internal static string get_Xslt_UnexpectedKeyword();
    internal static string get_Xslt_InvalidContents();
    internal static string get_Xslt_CantResolve();
    internal static string get_Xslt_SingleRightAvt();
    internal static string get_Xslt_OpenBracesAvt();
    internal static string get_Xslt_OpenLiteralAvt();
    internal static string get_Xslt_NestedAvt();
    internal static string get_Xslt_EmptyAvtExpr();
    internal static string get_Xslt_InvalidXPath();
    internal static string get_Xslt_InvalidQName();
    internal static string get_Xslt_TemplateNoAttrib();
    internal static string get_Xslt_DupVarName();
    internal static string get_Xslt_WrongNumberArgs();
    internal static string get_Xslt_NoNodeSetConversion();
    internal static string get_Xslt_NoNavigatorConversion();
    internal static string get_Xslt_InvalidFormat();
    internal static string get_Xslt_InvalidFormat1();
    internal static string get_Xslt_InvalidFormat2();
    internal static string get_Xslt_InvalidFormat3();
    internal static string get_Xslt_InvalidFormat5();
    internal static string get_Xslt_InvalidFormat8();
    internal static string get_Xslt_ScriptInvalidPrefix();
    internal static string get_Xslt_ScriptDub();
    internal static string get_Xslt_ScriptEmpty();
    internal static string get_Xslt_DupDecimalFormat();
    internal static string get_Xslt_CircularReference();
    internal static string get_Xslt_InvalidExtensionNamespace();
    internal static string get_Xslt_InvalidModeAttribute();
    internal static string get_Xslt_MultipleRoots();
    internal static string get_Xslt_ApplyImports();
    internal static string get_Xslt_Terminate();
    internal static string get_Xslt_InvalidPattern();
    internal static string get_XmlInvalidCharSchemaPrimitive();
    internal static string get_UnknownConstantType();
    internal static string get_ArrayTypeIsNotSupported();
    internal static string get_Xml_MissingSerializationCodeException();
    internal static string get_Xslt_UpperCaseFirstNotSupported();
    internal static string get_XmlPregenTypeDynamic();
    internal static string get_XmlPregenOrphanType();
    internal static string get_ErrSerializerExists();
    internal static string get_ErrDirectoryExists();
    internal static string get_ErrDirectoryNotExists();
    internal static string get_ErrInvalidArgument();
    internal static string get_Warning();
    internal static string get_ErrMissingRequiredArgument();
    internal static string get_ErrAssembly();
    internal static string get_InfoGeneratedFile();
    internal static string get_InfoFileName();
    internal static string get_ErrGenerationFailed();
    internal static string get_ErrorDetails();
    internal static string get_ErrLoadType();
    internal static string get_DirectoryAccessDenied();
    internal static string get_Xslt_NotSupported();
    internal static string get_ErrLoadAssembly();
    internal static string get_InfoNoSerializableTypes();
    internal static string get_InfoIgnoreType();
    internal static string get_FailLoadAssemblyUnderPregenMode();
    internal static string get_HelpDescription();
    internal static string get_HelpUsage();
    internal static string get_HelpDevOptions();
    internal static string get_HelpAssembly();
    internal static string get_HelpType();
    internal static string get_HelpForce();
    internal static string get_HelpProxy();
    internal static string get_HelpOut();
    internal static string get_HelpMiscOptions();
    internal static string get_HelpHelp();
    internal static string get_MoreHelp();
    internal static string get_GenerateSerializerNotFound();
}
[ExtensionAttribute]
internal static class System.Xml.AsyncHelper : object {
    public static Task`1<bool> DoneTaskTrue;
    public static Task`1<bool> DoneTaskFalse;
    public static Task`1<int> DoneTaskZero;
    private static AsyncHelper();
    [ExtensionAttribute]
public static bool IsSuccess(Task task);
    [ExtensionAttribute]
public static Task CallVoidFuncWhenFinishAsync(Task task, Action`1<TArg> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<CallVoidFuncWhenFinishCoreAsync>d__5`1")]
[ExtensionAttribute]
private static Task CallVoidFuncWhenFinishCoreAsync(Task task, Action`1<TArg> func, TArg arg);
    [ExtensionAttribute]
public static Task`1<bool> ReturnTrueTaskWhenFinishAsync(Task task);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<ReturnTrueTaskWhenFinishCoreAsync>d__7")]
[ExtensionAttribute]
private static Task`1<bool> ReturnTrueTaskWhenFinishCoreAsync(Task task);
    [ExtensionAttribute]
public static Task CallTaskFuncWhenFinishAsync(Task task, Func`2<TArg, Task> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<CallTaskFuncWhenFinishCoreAsync>d__9`1")]
private static Task CallTaskFuncWhenFinishCoreAsync(Task task, Func`2<TArg, Task> func, TArg arg);
    [ExtensionAttribute]
public static Task`1<bool> CallBoolTaskFuncWhenFinishAsync(Task task, Func`2<TArg, Task`1<bool>> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<CallBoolTaskFuncWhenFinishCoreAsync>d__11`1")]
[ExtensionAttribute]
private static Task`1<bool> CallBoolTaskFuncWhenFinishCoreAsync(Task task, Func`2<TArg, Task`1<bool>> func, TArg arg);
    [ExtensionAttribute]
public static Task`1<bool> ContinueBoolTaskFuncWhenFalseAsync(Task`1<bool> task, Func`2<TArg, Task`1<bool>> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<ContinueBoolTaskFuncWhenFalseCoreAsync>d__13`1")]
private static Task`1<bool> ContinueBoolTaskFuncWhenFalseCoreAsync(Task`1<bool> task, Func`2<TArg, Task`1<bool>> func, TArg arg);
}
internal enum System.Xml.AttributeProperties : Enum {
    public UInt32 value__;
    public static AttributeProperties DEFAULT;
    public static AttributeProperties URI;
    public static AttributeProperties BOOLEAN;
    public static AttributeProperties NAME;
}
internal class System.Xml.AttributePSVIInfo : object {
    internal string localName;
    internal string namespaceUri;
    internal object typedAttributeValue;
    internal XmlSchemaInfo attributeSchemaInfo;
    internal void Reset();
}
internal class System.Xml.Base64Decoder : IncrementalReadDecoder {
    private Byte[] _buffer;
    private int _startIndex;
    private int _curIndex;
    private int _endIndex;
    private int _bits;
    private int _bitsFilled;
    private static string s_charsBase64;
    private static Byte[] s_mapBase64;
    private static int MaxValidChar;
    private static byte Invalid;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    private static Base64Decoder();
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
    private static Byte[] ConstructMapBase64();
    private void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Int32& charsDecoded, Int32& bytesDecoded);
}
internal abstract class System.Xml.Base64Encoder : object {
    private Byte[] _leftOverBytes;
    private int _leftOverBytesCount;
    private Char[] _charsLine;
    internal static int Base64LineSize;
    internal static int LineSizeInBytes;
    internal abstract virtual void WriteChars(Char[] chars, int index, int count);
    internal void Encode(Byte[] buffer, int index, int count);
    internal void Flush();
    internal abstract virtual Task WriteCharsAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.Base64Encoder/<EncodeAsync>d__10")]
internal Task EncodeAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.Base64Encoder/<FlushAsync>d__11")]
internal Task FlushAsync();
}
internal class System.Xml.BinHexDecoder : IncrementalReadDecoder {
    private Byte[] _buffer;
    private int _startIndex;
    private int _curIndex;
    private int _endIndex;
    private bool _hasHalfByteCached;
    private byte _cachedHalfByte;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
    public static Byte[] Decode(Char[] chars, bool allowOddChars);
    private static void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Boolean& hasHalfByteCached, Byte& cachedHalfByte, Int32& charsDecoded, Int32& bytesDecoded);
}
internal static class System.Xml.BinHexEncoder : object {
    private static string s_hexDigits;
    private static int CharsChunkSize;
    internal static void Encode(Byte[] buffer, int index, int count, XmlWriter writer);
    internal static string Encode(Byte[] inArray, int offsetIn, int count);
    private static int Encode(Byte[] inArray, int offsetIn, int count, Char[] outArray);
    [AsyncStateMachineAttribute("System.Xml.BinHexEncoder/<EncodeAsync>d__5")]
internal static Task EncodeAsync(Byte[] buffer, int index, int count, XmlWriter writer);
}
internal abstract class System.Xml.BinXmlDateTime : object {
    private static int MaxFractionDigits;
    internal static Int32[] KatmaiTimeScaleMultiplicator;
    private static double s_SQLTicksPerMillisecond;
    public static int SQLTicksPerSecond;
    public static int SQLTicksPerMinute;
    public static int SQLTicksPerHour;
    private static int s_SQLTicksPerDay;
    private static BinXmlDateTime();
    private static void Write2Dig(StringBuilder sb, int val);
    private static void Write4DigNeg(StringBuilder sb, int val);
    private static void Write3Dec(StringBuilder sb, int val);
    private static void WriteDate(StringBuilder sb, int yr, int mnth, int day);
    private static void WriteTime(StringBuilder sb, int hr, int min, int sec, int ms);
    private static void WriteTimeFullPrecision(StringBuilder sb, int hr, int min, int sec, int fraction);
    private static void WriteTimeZone(StringBuilder sb, TimeSpan zone);
    private static void WriteTimeZone(StringBuilder sb, bool negTimeZone, int hr, int min);
    private static void BreakDownXsdDateTime(long val, Int32& yr, Int32& mnth, Int32& day, Int32& hr, Int32& min, Int32& sec, Int32& ms);
    private static void BreakDownXsdDate(long val, Int32& yr, Int32& mnth, Int32& day, Boolean& negTimeZone, Int32& hr, Int32& min);
    private static void BreakDownXsdTime(long val, Int32& hr, Int32& min, Int32& sec, Int32& ms);
    public static string XsdDateTimeToString(long val);
    public static DateTime XsdDateTimeToDateTime(long val);
    public static string XsdDateToString(long val);
    public static DateTime XsdDateToDateTime(long val);
    public static string XsdTimeToString(long val);
    public static DateTime XsdTimeToDateTime(long val);
    public static string SqlDateTimeToString(int dateticks, UInt32 timeticks);
    public static DateTime SqlDateTimeToDateTime(int dateticks, UInt32 timeticks);
    public static string SqlSmallDateTimeToString(short dateticks, ushort timeticks);
    public static DateTime SqlSmallDateTimeToDateTime(short dateticks, ushort timeticks);
    public static DateTime XsdKatmaiDateToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiDateTimeToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiTimeToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiDateOffsetToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiDateTimeOffsetToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiTimeOffsetToDateTime(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiDateOffsetToDateTimeOffset(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiDateTimeOffsetToDateTimeOffset(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiTimeOffsetToDateTimeOffset(Byte[] data, int offset);
    public static string XsdKatmaiDateToString(Byte[] data, int offset);
    public static string XsdKatmaiDateTimeToString(Byte[] data, int offset);
    public static string XsdKatmaiTimeToString(Byte[] data, int offset);
    public static string XsdKatmaiDateOffsetToString(Byte[] data, int offset);
    public static string XsdKatmaiDateTimeOffsetToString(Byte[] data, int offset);
    public static string XsdKatmaiTimeOffsetToString(Byte[] data, int offset);
    private static long GetKatmaiDateTicks(Byte[] data, Int32& pos);
    private static long GetKatmaiTimeTicks(Byte[] data, Int32& pos);
    private static long GetKatmaiTimeZoneTicks(Byte[] data, int pos);
    private static int GetFractions(DateTime dt);
    private static int GetFractions(DateTimeOffset dt);
}
internal class System.Xml.BinXmlSqlDecimal : ValueType {
    internal byte m_bLen;
    internal byte m_bPrec;
    internal byte m_bScale;
    internal byte m_bSign;
    internal UInt32 m_data1;
    internal UInt32 m_data2;
    internal UInt32 m_data3;
    internal UInt32 m_data4;
    private static byte s_NUMERIC_MAX_PRECISION;
    private static byte s_maxPrecision;
    private static byte s_maxScale;
    private static int s_cNumeMax;
    private static long s_lInt32Base;
    private static ulong s_ulInt32Base;
    private static ulong s_ulInt32BaseForMod;
    internal static ulong x_llMax;
    private static double s_DUINT_BASE;
    private static double s_DUINT_BASE2;
    private static double s_DUINT_BASE3;
    private static UInt32[] s_rgulShiftBase;
    private static Byte[] s_rgCLenFromPrec;
    public bool IsPositive { get; }
    public BinXmlSqlDecimal(Byte[] data, int offset, bool trim);
    private static BinXmlSqlDecimal();
    public bool get_IsPositive();
    private static UInt32 UIntFromByteArray(Byte[] data, int offset);
    private static void MpDiv1(UInt32[] rgulU, Int32& ciulU, UInt32 iulD, UInt32& iulR);
    private static void MpNormalize(UInt32[] rgulU, Int32& ciulU);
    private static byte CLenFromPrec(byte bPrec);
    private static char ChFromDigit(UInt32 uiDigit);
    public decimal ToDecimal();
    private void TrimTrailingZeros();
    public virtual string ToString();
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
}
internal class System.Xml.BinXmlSqlMoney : ValueType {
    private long _data;
    public BinXmlSqlMoney(int v);
    public BinXmlSqlMoney(long v);
    public decimal ToDecimal();
    public virtual string ToString();
}
internal enum System.Xml.BinXmlToken : Enum {
    public int value__;
    public static BinXmlToken Error;
    public static BinXmlToken NotImpl;
    public static BinXmlToken EOF;
    public static BinXmlToken XmlDecl;
    public static BinXmlToken Encoding;
    public static BinXmlToken DocType;
    public static BinXmlToken System;
    public static BinXmlToken Public;
    public static BinXmlToken Subset;
    public static BinXmlToken Element;
    public static BinXmlToken EndElem;
    public static BinXmlToken Attr;
    public static BinXmlToken EndAttrs;
    public static BinXmlToken PI;
    public static BinXmlToken Comment;
    public static BinXmlToken CData;
    public static BinXmlToken EndCData;
    public static BinXmlToken Name;
    public static BinXmlToken QName;
    public static BinXmlToken XmlText;
    public static BinXmlToken Nest;
    public static BinXmlToken EndNest;
    public static BinXmlToken Extn;
    public static BinXmlToken NmFlush;
    public static BinXmlToken SQL_BIT;
    public static BinXmlToken SQL_TINYINT;
    public static BinXmlToken SQL_SMALLINT;
    public static BinXmlToken SQL_INT;
    public static BinXmlToken SQL_BIGINT;
    public static BinXmlToken SQL_REAL;
    public static BinXmlToken SQL_FLOAT;
    public static BinXmlToken SQL_MONEY;
    public static BinXmlToken SQL_SMALLMONEY;
    public static BinXmlToken SQL_DATETIME;
    public static BinXmlToken SQL_SMALLDATETIME;
    public static BinXmlToken SQL_DECIMAL;
    public static BinXmlToken SQL_NUMERIC;
    public static BinXmlToken SQL_UUID;
    public static BinXmlToken SQL_VARBINARY;
    public static BinXmlToken SQL_BINARY;
    public static BinXmlToken SQL_IMAGE;
    public static BinXmlToken SQL_CHAR;
    public static BinXmlToken SQL_VARCHAR;
    public static BinXmlToken SQL_TEXT;
    public static BinXmlToken SQL_NVARCHAR;
    public static BinXmlToken SQL_NCHAR;
    public static BinXmlToken SQL_NTEXT;
    public static BinXmlToken SQL_UDT;
    public static BinXmlToken XSD_KATMAI_DATE;
    public static BinXmlToken XSD_KATMAI_DATETIME;
    public static BinXmlToken XSD_KATMAI_TIME;
    public static BinXmlToken XSD_KATMAI_DATEOFFSET;
    public static BinXmlToken XSD_KATMAI_DATETIMEOFFSET;
    public static BinXmlToken XSD_KATMAI_TIMEOFFSET;
    public static BinXmlToken XSD_BOOLEAN;
    public static BinXmlToken XSD_TIME;
    public static BinXmlToken XSD_DATETIME;
    public static BinXmlToken XSD_DATE;
    public static BinXmlToken XSD_BINHEX;
    public static BinXmlToken XSD_BASE64;
    public static BinXmlToken XSD_DECIMAL;
    public static BinXmlToken XSD_BYTE;
    public static BinXmlToken XSD_UNSIGNEDSHORT;
    public static BinXmlToken XSD_UNSIGNEDINT;
    public static BinXmlToken XSD_UNSIGNEDLONG;
    public static BinXmlToken XSD_QNAME;
}
internal static class System.Xml.Bits : object {
    private static UInt32 s_MASK_0101010101010101;
    private static UInt32 s_MASK_0011001100110011;
    private static UInt32 s_MASK_0000111100001111;
    private static UInt32 s_MASK_0000000011111111;
    private static UInt32 s_MASK_1111111111111111;
    private static Bits();
    public static int Count(UInt32 num);
    public static bool ExactlyOne(UInt32 num);
    public static UInt32 ClearLeast(UInt32 num);
    public static int LeastPosition(UInt32 num);
}
internal class System.Xml.BitStack : object {
    private UInt32[] _bitStack;
    private int _stackPos;
    private UInt32 _curr;
    public void PushBit(bool bit);
    public bool PopBit();
    public bool PeekBit();
    private void PushCurr();
    private void PopCurr();
}
internal class System.Xml.ByteStack : object {
    private Byte[] _stack;
    private int _growthRate;
    private int _top;
    private int _size;
    public ByteStack(int growthRate);
    public void Push(byte data);
    public byte Pop();
}
internal class System.Xml.CachingEventHandler : MulticastDelegate {
    public CachingEventHandler(object object, IntPtr method);
    public virtual void Invoke(XsdCachingReader cachingReader);
    public virtual IAsyncResult BeginInvoke(XsdCachingReader cachingReader, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.CharEntityEncoderFallback : EncoderFallback {
    private CharEntityEncoderFallbackBuffer _fallbackBuffer;
    private Int32[] _textContentMarks;
    private int _endMarkPos;
    private int _curMarkPos;
    private int _startOffset;
    public int MaxCharCount { get; }
    internal int StartOffset { get; internal set; }
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual int get_MaxCharCount();
    internal int get_StartOffset();
    internal void set_StartOffset(int value);
    internal void Reset(Int32[] textContentMarks, int endMarkPos);
    internal bool CanReplaceAt(int index);
}
internal class System.Xml.CharEntityEncoderFallbackBuffer : EncoderFallbackBuffer {
    private CharEntityEncoderFallback _parent;
    private string _charEntity;
    private int _charEntityIndex;
    public int Remaining { get; }
    internal CharEntityEncoderFallbackBuffer(CharEntityEncoderFallback parent);
    public virtual bool Fallback(char charUnknown, int index);
    public virtual bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public virtual char GetNextChar();
    public virtual bool MovePrevious();
    public virtual int get_Remaining();
    public virtual void Reset();
    private int SurrogateCharToUtf32(char highSurrogate, char lowSurrogate);
}
public enum System.Xml.ConformanceLevel : Enum {
    public int value__;
    public static ConformanceLevel Auto;
    public static ConformanceLevel Fragment;
    public static ConformanceLevel Document;
}
internal static class System.Xml.DiagnosticsSwitches : object {
    private static BooleanSwitch modreq(System.Runtime.CompilerServices.IsVolatile) s_xmlSchemaContentModel;
    private static TraceSwitch modreq(System.Runtime.CompilerServices.IsVolatile) s_xmlSchema;
    private static BooleanSwitch modreq(System.Runtime.CompilerServices.IsVolatile) s_keepTempFiles;
    private static TraceSwitch modreq(System.Runtime.CompilerServices.IsVolatile) s_xmlSerialization;
    private static TraceSwitch modreq(System.Runtime.CompilerServices.IsVolatile) s_xslTypeInference;
    private static BooleanSwitch modreq(System.Runtime.CompilerServices.IsVolatile) s_nonRecursiveTypeLoading;
    public static BooleanSwitch XmlSchemaContentModel { get; }
    public static TraceSwitch XmlSchema { get; }
    public static BooleanSwitch KeepTempFiles { get; }
    public static TraceSwitch XmlSerialization { get; }
    public static TraceSwitch XslTypeInference { get; }
    public static BooleanSwitch NonRecursiveTypeLoading { get; }
    public static BooleanSwitch get_XmlSchemaContentModel();
    public static TraceSwitch get_XmlSchema();
    public static BooleanSwitch get_KeepTempFiles();
    public static TraceSwitch get_XmlSerialization();
    public static TraceSwitch get_XslTypeInference();
    public static BooleanSwitch get_NonRecursiveTypeLoading();
}
internal class System.Xml.DocumentSchemaValidator : object {
    private XmlSchemaValidator _validator;
    private XmlSchemaSet _schemas;
    private XmlNamespaceManager _nsManager;
    private XmlNameTable _nameTable;
    private ArrayList _defaultAttributes;
    private XmlValueGetter _nodeValueGetter;
    private XmlSchemaInfo _attributeSchemaInfo;
    private XmlSchemaInfo _schemaInfo;
    private ValidationEventHandler _eventHandler;
    private ValidationEventHandler _internalEventHandler;
    private XmlNode _startNode;
    private XmlNode _currentNode;
    private XmlDocument _document;
    private XmlNode[] _nodeSequenceToValidate;
    private bool _isPartialTreeValid;
    private bool _psviAugmentation;
    private bool _isValid;
    private string _nsXmlNs;
    private string _nsXsi;
    private string _xsiType;
    private string _xsiNil;
    public bool PsviAugmentation { get; public set; }
    private IXmlNamespaceResolver NamespaceResolver { get; }
    public DocumentSchemaValidator(XmlDocument ownerDocument, XmlSchemaSet schemas, ValidationEventHandler eventHandler);
    public bool get_PsviAugmentation();
    public void set_PsviAugmentation(bool value);
    public bool Validate(XmlNode nodeToValidate);
    public sealed virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public sealed virtual string LookupNamespace(string prefix);
    public sealed virtual string LookupPrefix(string namespaceName);
    private IXmlNamespaceResolver get_NamespaceResolver();
    private void CreateValidator(XmlSchemaObject partialValidationType, XmlSchemaValidationFlags validationFlags);
    private void ValidateNode(XmlNode node);
    private void ValidateElement();
    private void ValidateAttributes(XmlElement elementNode);
    private void SetDefaultAttributeSchemaInfo(XmlSchemaAttribute schemaAttribute);
    private string GetDefaultPrefix(string attributeNS);
    private object GetNodeValue();
    private XmlSchemaObject FindSchemaInfo(XmlElement elementToValidate);
    private void CheckNodeSequenceCapacity(int currentIndex);
    private XmlSchemaAttribute FindSchemaInfo(XmlAttribute attributeToValidate);
    private XmlSchemaObject GetTypeFromAncestors(XmlElement elementToValidate, XmlSchemaObject ancestorType, int ancestorsCount);
    private bool AncestorTypeHasWildcard(XmlSchemaObject ancestorType);
    private XmlSchemaComplexType GetComplexType(XmlSchemaObject schemaObject);
    private void ValidateSingleElement(XmlElement elementNode, bool skipToEnd, XmlSchemaInfo newSchemaInfo);
    private void ValidateChildrenTillNextAncestor(XmlNode parentNode, XmlNode childToStopAt);
    private XmlSchemaValidator CreateTypeFinderValidator(XmlSchemaObject partialValidationType);
    private void TypeFinderCallBack(object sender, ValidationEventArgs arg);
    private void InternalValidationCallBack(object sender, ValidationEventArgs arg);
}
internal class System.Xml.DocumentXmlWriter : XmlRawWriter {
    private DocumentXmlWriterType _type;
    private XmlNode _start;
    private XmlDocument _document;
    private XmlNamespaceManager _namespaceManager;
    private State _state;
    private XmlNode _write;
    private List`1<XmlNode> _fragment;
    private XmlWriterSettings _settings;
    private DocumentXPathNavigator _navigator;
    private XmlNode _end;
    private static State[] s_changeState;
    unknown XmlNamespaceManager NamespaceManager {public set; }
    public XmlWriterSettings Settings { get; }
    unknown DocumentXPathNavigator Navigator {public set; }
    unknown XmlNode EndNode {public set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public DocumentXmlWriter(DocumentXmlWriterType type, XmlNode start, XmlDocument document);
    private static DocumentXmlWriter();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public virtual XmlWriterSettings get_Settings();
    public void set_Navigator(DocumentXPathNavigator value);
    public void set_EndNode(XmlNode value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteFullEndElement();
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string text);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowCh, char highCh);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    internal virtual void Close(WriteState currentState);
    private void CloseWithAppendAttribute();
    private void CloseWithReplaceToFollowingSibling();
    public virtual void Flush();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private void AddAttribute(XmlAttribute attr, XmlNode parent);
    private void AddChild(XmlNode node, XmlNode parent);
    private State StartState();
    private void VerifyState(Method method);
}
internal enum System.Xml.DocumentXmlWriterType : Enum {
    public int value__;
    public static DocumentXmlWriterType InsertSiblingAfter;
    public static DocumentXmlWriterType InsertSiblingBefore;
    public static DocumentXmlWriterType PrependChild;
    public static DocumentXmlWriterType AppendChild;
    public static DocumentXmlWriterType AppendAttribute;
    public static DocumentXmlWriterType ReplaceToFollowingSibling;
}
internal class System.Xml.DocumentXPathNavigator : XPathNavigator {
    private XmlDocument _document;
    private XmlNode _source;
    private int _attributeIndex;
    private XmlElement _namespaceParent;
    public XmlNameTable NameTable { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string Value { get; }
    private string ValueDocument { get; }
    private string ValueText { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public object UnderlyingObject { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public bool CanEdit { get; }
    public DocumentXPathNavigator(XmlDocument document, XmlNode node);
    public DocumentXPathNavigator(DocumentXPathNavigator other);
    public virtual XPathNavigator Clone();
    public virtual void SetValue(string value);
    public virtual XmlNameTable get_NameTable();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_Value();
    private string get_ValueDocument();
    private string get_ValueText();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual object get_UnderlyingObject();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    private static bool MoveToFirstNamespaceLocal(XmlAttributeCollection attributes, Int32& index);
    private static bool MoveToFirstNamespaceGlobal(XmlAttributeCollection& attributes, Int32& index);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    private static bool MoveToNextNamespaceLocal(XmlAttributeCollection attributes, Int32& index);
    private static bool MoveToNextNamespaceGlobal(XmlAttributeCollection& attributes, Int32& index);
    private bool PathHasDuplicateNamespace(XmlElement top, XmlElement bottom, string localName);
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToChild(string localName, string namespaceUri);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceUri, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual bool MoveToNext(string localName, string namespaceUri);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool get_HasChildren();
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator other);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    private static XmlNode OwnerNode(XmlNode node);
    private static int GetDepth(XmlNode node);
    private XmlNodeOrder Compare(XmlNode node1, XmlNode node2);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    private sealed virtual override XmlNode System.Xml.IHasXmlNode.GetNode();
    public virtual XPathNodeIterator SelectDescendants(string localName, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType nt, bool includeSelf);
    public virtual bool get_CanEdit();
    public virtual XmlWriter PrependChild();
    public virtual XmlWriter AppendChild();
    public virtual XmlWriter InsertAfter();
    public virtual XmlWriter InsertBefore();
    public virtual XmlWriter CreateAttributes();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    private static void DeleteAttribute(XmlAttribute attribute, int index);
    internal static void DeleteToFollowingSibling(XmlNode node, XmlNode end);
    private static XmlNamespaceManager GetNamespaceManager(XmlNode node, XmlDocument document);
    internal void ResetPosition(XmlNode node);
    private static bool ResetAttributePosition(XmlAttribute attribute, XmlAttributeCollection attributes, Int32& index);
    private static bool CheckAttributePosition(XmlAttribute attribute, XmlAttributeCollection& attributes, int index);
    private void CalibrateText();
    private XmlNode ParentNode(XmlNode node);
    private XmlNode ParentNodeTail(XmlNode parent);
    private XmlNode FirstChild(XmlNode node);
    private XmlNode FirstChildTail(XmlNode child);
    private XmlNode NextSibling(XmlNode node);
    private XmlNode NextSiblingTail(XmlNode node, XmlNode sibling);
    private XmlNode PreviousSibling(XmlNode node);
    private XmlNode PreviousSiblingTail(XmlNode node, XmlNode sibling);
    private XmlNode PreviousText(XmlNode node);
    private XmlNode PreviousTextTail(XmlNode node, XmlNode text);
    internal static bool IsFollowingSibling(XmlNode left, XmlNode right);
    private static bool IsDescendant(XmlNode top, XmlNode bottom);
    private static bool IsValidChild(XmlNode parent, XmlNode child);
    private XmlNode TextStart(XmlNode node);
    private XmlNode TextEnd(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_AllElemChildren : DocumentXPathNodeIterator_ElemDescendants {
    internal DocumentXPathNodeIterator_AllElemChildren(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_AllElemChildren(DocumentXPathNodeIterator_AllElemChildren other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf : DocumentXPathNodeIterator_AllElemChildren {
    internal DocumentXPathNodeIterator_AllElemChildren_AndSelf(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_AllElemChildren_AndSelf(DocumentXPathNodeIterator_AllElemChildren_AndSelf other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren : DocumentXPathNodeIterator_ElemDescendants {
    protected string localNameAtom;
    protected string nsAtom;
    internal DocumentXPathNodeIterator_ElemChildren(DocumentXPathNavigator nav, string localNameAtom, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren(DocumentXPathNodeIterator_ElemChildren other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf : DocumentXPathNodeIterator_ElemChildren {
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf(DocumentXPathNavigator nav, string localNameAtom, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf(DocumentXPathNodeIterator_ElemChildren_AndSelf other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName : DocumentXPathNodeIterator_ElemChildren_NoLocalName {
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName(DocumentXPathNavigator nav, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName(DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName : DocumentXPathNodeIterator_ElemDescendants {
    private string _nsAtom;
    internal DocumentXPathNodeIterator_ElemChildren_NoLocalName(DocumentXPathNavigator nav, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_NoLocalName(DocumentXPathNodeIterator_ElemChildren_NoLocalName other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal abstract class System.Xml.DocumentXPathNodeIterator_ElemDescendants : XPathNodeIterator {
    private DocumentXPathNavigator _nav;
    private int _level;
    private int _position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal DocumentXPathNodeIterator_ElemDescendants(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_ElemDescendants(DocumentXPathNodeIterator_ElemDescendants other);
    protected abstract virtual bool Match(XmlNode node);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    protected void SetPosition(int pos);
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_Empty : XPathNodeIterator {
    private XPathNavigator _nav;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    internal DocumentXPathNodeIterator_Empty(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_Empty(DocumentXPathNodeIterator_Empty other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
}
internal class System.Xml.DomNameTable : object {
    private XmlName[] _entries;
    private int _count;
    private int _mask;
    private XmlDocument _ownerDocument;
    private XmlNameTable _nameTable;
    private static int InitialSize;
    public DomNameTable(XmlDocument document);
    public XmlName GetName(string prefix, string localName, string ns, IXmlSchemaInfo schemaInfo);
    public XmlName AddName(string prefix, string localName, string ns, IXmlSchemaInfo schemaInfo);
    private void Grow();
}
internal class System.Xml.DtdParser : object {
    private IDtdParserAdapter _readerAdapter;
    private IDtdParserAdapterWithValidation _readerAdapterWithValidation;
    private XmlNameTable _nameTable;
    private SchemaInfo _schemaInfo;
    private XmlCharType _xmlCharType;
    private string _systemId;
    private string _publicId;
    private bool _normalize;
    private bool _validate;
    private bool _supportNamespaces;
    private bool _v1Compat;
    private Char[] _chars;
    private int _charsUsed;
    private int _curPos;
    private ScanningFunction _scanningFunction;
    private ScanningFunction _nextScaningFunction;
    private ScanningFunction _savedScanningFunction;
    private bool _whitespaceSeen;
    private int _tokenStartPos;
    private int _colonPos;
    private StringBuilder _internalSubsetValueSb;
    private int _externalEntitiesDepth;
    private int _currentEntityId;
    private bool _freeFloatingDtd;
    private bool _hasFreeFloatingInternalSubset;
    private StringBuilder _stringBuilder;
    private int _condSectionDepth;
    private LineInfo _literalLineInfo;
    private char _literalQuoteChar;
    private string _documentBaseUri;
    private string _externalDtdBaseUri;
    private Dictionary`2<string, UndeclaredNotation> _undeclaredNotations;
    private Int32[] _condSectionEntityIds;
    private static int CondSectionEntityIdsInitialSize;
    private bool ParsingInternalSubset { get; }
    private bool IgnoreEntityReferences { get; }
    private bool SaveInternalSubsetValue { get; }
    private bool ParsingTopLevelMarkup { get; }
    private bool SupportNamespaces { get; }
    private bool Normalize { get; }
    private int LineNo { get; }
    private int LinePos { get; }
    private string BaseUriStr { get; }
    private static DtdParser();
    internal static IDtdParser Create();
    private void Initialize(IDtdParserAdapter readerAdapter);
    private void InitializeFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    private sealed virtual override IDtdInfo System.Xml.IDtdParser.ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset);
    private sealed virtual override IDtdInfo System.Xml.IDtdParser.ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    private bool get_ParsingInternalSubset();
    private bool get_IgnoreEntityReferences();
    private bool get_SaveInternalSubsetValue();
    private bool get_ParsingTopLevelMarkup();
    private bool get_SupportNamespaces();
    private bool get_Normalize();
    private void Parse(bool saveInternalSubset);
    private void ParseInDocumentDtd(bool saveInternalSubset);
    private void ParseFreeFloatingDtd();
    private void ParseInternalSubset();
    private void ParseExternalSubset();
    private void ParseSubset();
    private void ParseAttlistDecl();
    private void ParseAttlistType(SchemaAttDef attrDef, SchemaElementDecl elementDecl, bool ignoreErrors);
    private void ParseAttlistDefault(SchemaAttDef attrDef, bool ignoreErrors);
    private void ParseElementDecl();
    private void ParseElementOnlyContent(ParticleContentValidator pcv, int startParenEntityId);
    private void ParseHowMany(ParticleContentValidator pcv);
    private void ParseElementMixedContent(ParticleContentValidator pcv, int startParenEntityId);
    private void ParseEntityDecl();
    private void ParseNotationDecl();
    private void AddUndeclaredNotation(string notationName);
    private void ParseComment();
    private void ParsePI();
    private void ParseCondSection();
    private void ParseExternalId(Token idTokenType, Token declType, String& publicId, String& systemId);
    private Token GetToken(bool needWhiteSpace);
    private Token ScanSubsetContent();
    private Token ScanNameExpected();
    private Token ScanQNameExpected();
    private Token ScanNmtokenExpected();
    private Token ScanDoctype1();
    private Token ScanDoctype2();
    private Token ScanClosingTag();
    private Token ScanElement1();
    private Token ScanElement2();
    private Token ScanElement3();
    private Token ScanElement4();
    private Token ScanElement5();
    private Token ScanElement6();
    private Token ScanElement7();
    private Token ScanAttlist1();
    private Token ScanAttlist2();
    private Token ScanAttlist3();
    private Token ScanAttlist4();
    private Token ScanAttlist5();
    private Token ScanAttlist6();
    private Token ScanAttlist7();
    private Token ScanLiteral(LiteralType literalType);
    private XmlQualifiedName ScanEntityName();
    private Token ScanNotation1();
    private Token ScanSystemId();
    private Token ScanEntity1();
    private Token ScanEntity2();
    private Token ScanEntity3();
    private Token ScanPublicId1();
    private Token ScanPublicId2();
    private Token ScanCondSection1();
    private Token ScanCondSection2();
    private Token ScanCondSection3();
    private void ScanName();
    private void ScanQName();
    private void ScanQName(bool isQName);
    private bool ReadDataInName();
    private void ScanNmtoken();
    private bool EatPublicKeyword();
    private bool EatSystemKeyword();
    private XmlQualifiedName GetNameQualified(bool canHavePrefix);
    private string GetNameString();
    private string GetNmtokenString();
    private string GetValue();
    private string GetValueWithStrippedSpaces();
    private int ReadData();
    private void LoadParsingBuffer();
    private void SaveParsingBuffer();
    private void SaveParsingBuffer(int internalSubsetValueEndPos);
    private bool HandleEntityReference(bool paramEntity, bool inLiteral, bool inAttribute);
    private bool HandleEntityReference(XmlQualifiedName entityName, bool paramEntity, bool inLiteral, bool inAttribute);
    private bool HandleEntityEnd(bool inLiteral);
    private SchemaEntity VerifyEntityReference(XmlQualifiedName entityName, bool paramEntity, bool mustBeDeclared, bool inAttribute);
    private void SendValidationEvent(int pos, XmlSeverityType severity, string code, string arg);
    private void SendValidationEvent(XmlSeverityType severity, string code, string arg);
    private void SendValidationEvent(XmlSeverityType severity, XmlSchemaException e);
    private bool IsAttributeValueType(Token token);
    private int get_LineNo();
    private int get_LinePos();
    private string get_BaseUriStr();
    private void OnUnexpectedError();
    private void Throw(int curPos, string res);
    private void Throw(int curPos, string res, string arg);
    private void Throw(int curPos, string res, String[] args);
    private void Throw(string res, string arg, int lineNo, int linePos);
    private void ThrowInvalidChar(int pos, string data, int invCharPos);
    private void ThrowInvalidChar(Char[] data, int length, int invCharPos);
    private void ThrowUnexpectedToken(int pos, string expectedToken);
    private void ThrowUnexpectedToken(int pos, string expectedToken1, string expectedToken2);
    private string ParseUnexpectedToken(int startPos);
    internal static string StripSpaces(string value);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<System-Xml-IDtdParser-ParseInternalDtdAsync>d__153")]
private sealed virtual override Task`1<IDtdInfo> System.Xml.IDtdParser.ParseInternalDtdAsync(IDtdParserAdapter adapter, bool saveInternalSubset);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<System-Xml-IDtdParser-ParseFreeFloatingDtdAsync>d__154")]
private sealed virtual override Task`1<IDtdInfo> System.Xml.IDtdParser.ParseFreeFloatingDtdAsync(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseAsync>d__155")]
private Task ParseAsync(bool saveInternalSubset);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseInDocumentDtdAsync>d__156")]
private Task ParseInDocumentDtdAsync(bool saveInternalSubset);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseFreeFloatingDtdAsync>d__157")]
private Task ParseFreeFloatingDtdAsync();
    private Task ParseInternalSubsetAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseExternalSubsetAsync>d__159")]
private Task ParseExternalSubsetAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseSubsetAsync>d__160")]
private Task ParseSubsetAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseAttlistDeclAsync>d__161")]
private Task ParseAttlistDeclAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseAttlistTypeAsync>d__162")]
private Task ParseAttlistTypeAsync(SchemaAttDef attrDef, SchemaElementDecl elementDecl, bool ignoreErrors);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseAttlistDefaultAsync>d__163")]
private Task ParseAttlistDefaultAsync(SchemaAttDef attrDef, bool ignoreErrors);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseElementDeclAsync>d__164")]
private Task ParseElementDeclAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseElementOnlyContentAsync>d__165")]
private Task ParseElementOnlyContentAsync(ParticleContentValidator pcv, int startParenEntityId);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseHowManyAsync>d__166")]
private Task ParseHowManyAsync(ParticleContentValidator pcv);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseElementMixedContentAsync>d__167")]
private Task ParseElementMixedContentAsync(ParticleContentValidator pcv, int startParenEntityId);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseEntityDeclAsync>d__168")]
private Task ParseEntityDeclAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseNotationDeclAsync>d__169")]
private Task ParseNotationDeclAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseCommentAsync>d__170")]
private Task ParseCommentAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParsePIAsync>d__171")]
private Task ParsePIAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseCondSectionAsync>d__172")]
private Task ParseCondSectionAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ParseExternalIdAsync>d__173")]
private Task`1<Tuple`2<string, string>> ParseExternalIdAsync(Token idTokenType, Token declType);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<GetTokenAsync>d__174")]
private Task`1<Token> GetTokenAsync(bool needWhiteSpace);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanSubsetContentAsync>d__175")]
private Task`1<Token> ScanSubsetContentAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanNameExpectedAsync>d__176")]
private Task`1<Token> ScanNameExpectedAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanQNameExpectedAsync>d__177")]
private Task`1<Token> ScanQNameExpectedAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanNmtokenExpectedAsync>d__178")]
private Task`1<Token> ScanNmtokenExpectedAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanDoctype1Async>d__179")]
private Task`1<Token> ScanDoctype1Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanElement1Async>d__180")]
private Task`1<Token> ScanElement1Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanElement2Async>d__181")]
private Task`1<Token> ScanElement2Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanElement3Async>d__182")]
private Task`1<Token> ScanElement3Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanAttlist1Async>d__183")]
private Task`1<Token> ScanAttlist1Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanAttlist2Async>d__184")]
private Task`1<Token> ScanAttlist2Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanAttlist6Async>d__185")]
private Task`1<Token> ScanAttlist6Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanLiteralAsync>d__186")]
private Task`1<Token> ScanLiteralAsync(LiteralType literalType);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanNotation1Async>d__187")]
private Task`1<Token> ScanNotation1Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanSystemIdAsync>d__188")]
private Task`1<Token> ScanSystemIdAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanEntity1Async>d__189")]
private Task`1<Token> ScanEntity1Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanEntity2Async>d__190")]
private Task`1<Token> ScanEntity2Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanEntity3Async>d__191")]
private Task`1<Token> ScanEntity3Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanPublicId1Async>d__192")]
private Task`1<Token> ScanPublicId1Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanPublicId2Async>d__193")]
private Task`1<Token> ScanPublicId2Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanCondSection1Async>d__194")]
private Task`1<Token> ScanCondSection1Async();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanCondSection3Async>d__195")]
private Task`1<Token> ScanCondSection3Async();
    private Task ScanNameAsync();
    private Task ScanQNameAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanQNameAsync>d__198")]
private Task ScanQNameAsync(bool isQName);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ReadDataInNameAsync>d__199")]
private Task`1<bool> ReadDataInNameAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ScanNmtokenAsync>d__200")]
private Task ScanNmtokenAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<EatPublicKeywordAsync>d__201")]
private Task`1<bool> EatPublicKeywordAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<EatSystemKeywordAsync>d__202")]
private Task`1<bool> EatSystemKeywordAsync();
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<ReadDataAsync>d__203")]
private Task`1<int> ReadDataAsync();
    private Task`1<bool> HandleEntityReferenceAsync(bool paramEntity, bool inLiteral, bool inAttribute);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<HandleEntityReferenceAsync>d__205")]
private Task`1<bool> HandleEntityReferenceAsync(XmlQualifiedName entityName, bool paramEntity, bool inLiteral, bool inAttribute);
}
public enum System.Xml.DtdProcessing : Enum {
    public int value__;
    public static DtdProcessing Prohibit;
    public static DtdProcessing Ignore;
    public static DtdProcessing Parse;
}
internal enum System.Xml.ElementProperties : Enum {
    public UInt32 value__;
    public static ElementProperties DEFAULT;
    public static ElementProperties URI_PARENT;
    public static ElementProperties BOOL_PARENT;
    public static ElementProperties NAME_PARENT;
    public static ElementProperties EMPTY;
    public static ElementProperties NO_ENTITIES;
    public static ElementProperties HEAD;
    public static ElementProperties BLOCK_WS;
    public static ElementProperties HAS_NS;
}
internal class System.Xml.EmptyEnumerator : object {
    private object System.Collections.IEnumerator.Current { get; }
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
public enum System.Xml.EntityHandling : Enum {
    public int value__;
    public static EntityHandling ExpandEntities;
    public static EntityHandling ExpandCharEntities;
}
internal enum System.Xml.ExceptionType : Enum {
    public int value__;
    public static ExceptionType ArgumentException;
    public static ExceptionType XmlException;
}
[ExtensionAttribute]
internal static class System.Xml.Extensions.ExtensionMethods : object {
    private static bool TypeSequenceEqual(Type[] seq1, Type[] seq2);
    private static MethodBase FilterMethodBases(MethodBase[] methodBases, Type[] parameterTypes, string methodName);
    [ExtensionAttribute]
internal static ConstructorInfo GetConstructor(Type type, BindingFlags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
internal static MethodInfo GetMethod(Type type, string methodName, BindingFlags bindingFlags, Type[] parameterTypes);
    internal static Uri ToUri(string s);
}
public enum System.Xml.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
internal class System.Xml.HtmlEncodedRawTextWriter : XmlEncodedRawTextWriter {
    protected ByteStack elementScope;
    protected ElementProperties currentElementProperties;
    private AttributeProperties _currentAttributeProperties;
    private bool _endsWithAmpersand;
    private Byte[] _uriEscapingBuffer;
    private string _mediaType;
    private bool _doNotEscapeUriAttributes;
    protected static TernaryTreeReadOnly elementPropertySearch;
    protected static TernaryTreeReadOnly attributePropertySearch;
    private static int StackIncrement;
    public HtmlEncodedRawTextWriter(TextWriter writer, XmlWriterSettings settings);
    public HtmlEncodedRawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteString(string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    private void Init(XmlWriterSettings settings);
    protected void WriteMetaElement();
    protected void WriteHtmlElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteHtmlAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    private void WriteHtmlAttributeText(Char* pSrc, Char* pSrcEnd);
    private void WriteUriAttributeText(Char* pSrc, Char* pSrcEnd);
    private void OutputRestAmps();
}
internal class System.Xml.HtmlEncodedRawTextWriterIndent : HtmlEncodedRawTextWriter {
    private int _indentLevel;
    private int _endBlockPos;
    private string _indentChars;
    private bool _newLineOnAttributes;
    public HtmlEncodedRawTextWriterIndent(TextWriter writer, XmlWriterSettings settings);
    public HtmlEncodedRawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    protected virtual void FlushBuffer();
    private void Init(XmlWriterSettings settings);
    private void WriteIndent();
}
internal abstract class System.Xml.HtmlTernaryTree : object {
    internal static Byte[] htmlElements;
    internal static Byte[] htmlAttributes;
    private static HtmlTernaryTree();
}
internal class System.Xml.HtmlUtf8RawTextWriter : XmlUtf8RawTextWriter {
    protected ByteStack elementScope;
    protected ElementProperties currentElementProperties;
    private AttributeProperties _currentAttributeProperties;
    private bool _endsWithAmpersand;
    private Byte[] _uriEscapingBuffer;
    private string _mediaType;
    private bool _doNotEscapeUriAttributes;
    protected static TernaryTreeReadOnly elementPropertySearch;
    protected static TernaryTreeReadOnly attributePropertySearch;
    private static int StackIncrement;
    public HtmlUtf8RawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteString(string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    private void Init(XmlWriterSettings settings);
    protected void WriteMetaElement();
    protected void WriteHtmlElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteHtmlAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    private void WriteHtmlAttributeText(Char* pSrc, Char* pSrcEnd);
    private void WriteUriAttributeText(Char* pSrc, Char* pSrcEnd);
    private void OutputRestAmps();
}
internal class System.Xml.HtmlUtf8RawTextWriterIndent : HtmlUtf8RawTextWriter {
    private int _indentLevel;
    private int _endBlockPos;
    private string _indentChars;
    private bool _newLineOnAttributes;
    public HtmlUtf8RawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    protected virtual void FlushBuffer();
    private void Init(XmlWriterSettings settings);
    private void WriteIndent();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.HWStack : object {
    private Object[] _stack;
    private int _growthRate;
    private int _used;
    private int _size;
    private int _limit;
    internal object Item { get; internal set; }
    internal int Length { get; }
    internal HWStack(int GrowthRate);
    internal HWStack(int GrowthRate, int limit);
    private HWStack(Object[] stack, int growthRate, int used, int size);
    internal object Push();
    internal object Pop();
    internal object Peek();
    internal void AddToTop(object o);
    internal object get_Item(int index);
    internal void set_Item(int index, object value);
    internal int get_Length();
    public sealed virtual object Clone();
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public interface System.Xml.IApplicationResourceStreamResolver {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public abstract virtual Stream GetApplicationResourceStream(Uri relativeUri);
}
internal interface System.Xml.IDtdAttributeInfo {
    public string Prefix { get; }
    public string LocalName { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public bool IsNonCDataType { get; }
    public bool IsDeclaredInExternal { get; }
    public bool IsXmlAttribute { get; }
    public abstract virtual string get_Prefix();
    public abstract virtual string get_LocalName();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
    public abstract virtual bool get_IsNonCDataType();
    public abstract virtual bool get_IsDeclaredInExternal();
    public abstract virtual bool get_IsXmlAttribute();
}
internal interface System.Xml.IDtdAttributeListInfo {
    public string Prefix { get; }
    public string LocalName { get; }
    public bool HasNonCDataAttributes { get; }
    public abstract virtual string get_Prefix();
    public abstract virtual string get_LocalName();
    public abstract virtual bool get_HasNonCDataAttributes();
    public abstract virtual IDtdAttributeInfo LookupAttribute(string prefix, string localName);
    public abstract virtual IEnumerable`1<IDtdDefaultAttributeInfo> LookupDefaultAttributes();
    public abstract virtual IDtdAttributeInfo LookupIdAttribute();
}
internal interface System.Xml.IDtdDefaultAttributeInfo {
    public string DefaultValueExpanded { get; }
    public object DefaultValueTyped { get; }
    public int ValueLineNumber { get; }
    public int ValueLinePosition { get; }
    public abstract virtual string get_DefaultValueExpanded();
    public abstract virtual object get_DefaultValueTyped();
    public abstract virtual int get_ValueLineNumber();
    public abstract virtual int get_ValueLinePosition();
}
internal interface System.Xml.IDtdEntityInfo {
    public string Name { get; }
    public bool IsExternal { get; }
    public bool IsDeclaredInExternal { get; }
    public bool IsUnparsedEntity { get; }
    public bool IsParameterEntity { get; }
    public string BaseUriString { get; }
    public string DeclaredUriString { get; }
    public string SystemId { get; }
    public string PublicId { get; }
    public string Text { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsExternal();
    public abstract virtual bool get_IsDeclaredInExternal();
    public abstract virtual bool get_IsUnparsedEntity();
    public abstract virtual bool get_IsParameterEntity();
    public abstract virtual string get_BaseUriString();
    public abstract virtual string get_DeclaredUriString();
    public abstract virtual string get_SystemId();
    public abstract virtual string get_PublicId();
    public abstract virtual string get_Text();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
internal interface System.Xml.IDtdInfo {
    public XmlQualifiedName Name { get; }
    public string InternalDtdSubset { get; }
    public bool HasDefaultAttributes { get; }
    public bool HasNonCDataAttributes { get; }
    public abstract virtual XmlQualifiedName get_Name();
    public abstract virtual string get_InternalDtdSubset();
    public abstract virtual bool get_HasDefaultAttributes();
    public abstract virtual bool get_HasNonCDataAttributes();
    public abstract virtual IDtdAttributeListInfo LookupAttributeList(string prefix, string localName);
    public abstract virtual IEnumerable`1<IDtdAttributeListInfo> GetAttributeLists();
    public abstract virtual IDtdEntityInfo LookupEntity(string name);
}
internal interface System.Xml.IDtdParser {
    public abstract virtual IDtdInfo ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset);
    public abstract virtual IDtdInfo ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    public abstract virtual Task`1<IDtdInfo> ParseInternalDtdAsync(IDtdParserAdapter adapter, bool saveInternalSubset);
    public abstract virtual Task`1<IDtdInfo> ParseFreeFloatingDtdAsync(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
}
internal interface System.Xml.IDtdParserAdapter {
    public XmlNameTable NameTable { get; }
    public IXmlNamespaceResolver NamespaceResolver { get; }
    public Uri BaseUri { get; }
    public Char[] ParsingBuffer { get; }
    public int ParsingBufferLength { get; }
    public int CurrentPosition { get; public set; }
    public int LineNo { get; }
    public int LineStartPosition { get; }
    public bool IsEof { get; }
    public int EntityStackLength { get; }
    public bool IsEntityEolNormalized { get; }
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual IXmlNamespaceResolver get_NamespaceResolver();
    public abstract virtual Uri get_BaseUri();
    public abstract virtual Char[] get_ParsingBuffer();
    public abstract virtual int get_ParsingBufferLength();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual void set_CurrentPosition(int value);
    public abstract virtual int get_LineNo();
    public abstract virtual int get_LineStartPosition();
    public abstract virtual bool get_IsEof();
    public abstract virtual int get_EntityStackLength();
    public abstract virtual bool get_IsEntityEolNormalized();
    public abstract virtual int ReadData();
    public abstract virtual void OnNewLine(int pos);
    public abstract virtual int ParseNumericCharRef(StringBuilder internalSubsetBuilder);
    public abstract virtual int ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder);
    public abstract virtual void ParsePI(StringBuilder sb);
    public abstract virtual void ParseComment(StringBuilder sb);
    public abstract virtual bool PushEntity(IDtdEntityInfo entity, Int32& entityId);
    public abstract virtual bool PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId);
    public abstract virtual bool PushExternalSubset(string systemId, string publicId);
    public abstract virtual void PushInternalDtd(string baseUri, string internalDtd);
    public abstract virtual void OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo);
    public abstract virtual void OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo);
    public abstract virtual void Throw(Exception e);
    public abstract virtual Task`1<int> ReadDataAsync();
    public abstract virtual Task`1<int> ParseNumericCharRefAsync(StringBuilder internalSubsetBuilder);
    public abstract virtual Task`1<int> ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder);
    public abstract virtual Task ParsePIAsync(StringBuilder sb);
    public abstract virtual Task ParseCommentAsync(StringBuilder sb);
    public abstract virtual Task`1<Tuple`2<int, bool>> PushEntityAsync(IDtdEntityInfo entity);
    public abstract virtual Task`1<bool> PushExternalSubsetAsync(string systemId, string publicId);
}
internal interface System.Xml.IDtdParserAdapterV1 {
    public bool V1CompatibilityMode { get; }
    public bool Normalization { get; }
    public bool Namespaces { get; }
    public abstract virtual bool get_V1CompatibilityMode();
    public abstract virtual bool get_Normalization();
    public abstract virtual bool get_Namespaces();
}
internal interface System.Xml.IDtdParserAdapterWithValidation {
    public bool DtdValidation { get; }
    public IValidationEventHandling ValidationEventHandling { get; }
    public abstract virtual bool get_DtdValidation();
    public abstract virtual IValidationEventHandling get_ValidationEventHandling();
}
public interface System.Xml.IHasXmlNode {
    public abstract virtual XmlNode GetNode();
}
internal class System.Xml.IncrementalReadCharsDecoder : IncrementalReadDecoder {
    private Char[] _buffer;
    private int _startIndex;
    private int _curIndex;
    private int _endIndex;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
}
internal abstract class System.Xml.IncrementalReadDecoder : object {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal abstract virtual int get_DecodedCount();
    internal abstract virtual bool get_IsFull();
    internal abstract virtual void SetNextOutputBuffer(Array array, int offset, int len);
    internal abstract virtual int Decode(Char[] chars, int startPos, int len);
    internal abstract virtual int Decode(string str, int startPos, int len);
    internal abstract virtual void Reset();
}
internal class System.Xml.IncrementalReadDummyDecoder : IncrementalReadDecoder {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual void SetNextOutputBuffer(Array array, int offset, int len);
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
}
internal interface System.Xml.IRemovableWriter {
    public OnRemoveWriter OnRemoveWriterEvent { get; public set; }
    public abstract virtual OnRemoveWriter get_OnRemoveWriterEvent();
    public abstract virtual void set_OnRemoveWriterEvent(OnRemoveWriter value);
}
internal interface System.Xml.IValidationEventHandling {
    public object EventHandler { get; }
    public abstract virtual object get_EventHandler();
    public abstract virtual void SendEvent(Exception exception, XmlSeverityType severity);
}
public interface System.Xml.IXmlLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
public interface System.Xml.IXmlNamespaceResolver {
    public abstract virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public abstract virtual string LookupNamespace(string prefix);
    public abstract virtual string LookupPrefix(string namespaceName);
}
internal class System.Xml.LineInfo : ValueType {
    internal int lineNo;
    internal int linePos;
    public LineInfo(int lineNo, int linePos);
    public void Set(int lineNo, int linePos);
}
[FlagsAttribute]
public enum System.Xml.NamespaceHandling : Enum {
    public int value__;
    public static NamespaceHandling Default;
    public static NamespaceHandling OmitDuplicates;
}
public class System.Xml.NameTable : XmlNameTable {
    private Entry[] _entries;
    private int _count;
    private int _mask;
    public virtual string Add(string key);
    public virtual string Add(Char[] key, int start, int len);
    public virtual string Get(string value);
    public virtual string Get(Char[] key, int start, int len);
    private string AddEntry(string str, int hashCode);
    private void Grow();
    private static bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length);
    private static int ComputeHash32(string key);
    private static int ComputeHash32(Char[] key, int start, int len);
}
public enum System.Xml.NewLineHandling : Enum {
    public int value__;
    public static NewLineHandling Replace;
    public static NewLineHandling Entitize;
    public static NewLineHandling None;
}
internal class System.Xml.OnRemoveWriter : MulticastDelegate {
    public OnRemoveWriter(object object, IntPtr method);
    public virtual void Invoke(XmlRawWriter writer);
    public virtual IAsyncResult BeginInvoke(XmlRawWriter writer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.PositionInfo : object {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    public static PositionInfo GetPositionInfo(object o);
}
internal class System.Xml.QueryOutputWriter : XmlRawWriter {
    private XmlRawWriter _wrapped;
    private bool _inCDataSection;
    private Dictionary`2<XmlQualifiedName, int> _lookupCDataElems;
    private BitStack _bitsCData;
    private XmlQualifiedName _qnameCData;
    private bool _outputDocType;
    private bool _checkWellFormedDoc;
    private bool _hasDocElem;
    private bool _inAttr;
    private string _systemId;
    private string _publicId;
    private int _depth;
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public QueryOutputWriter(XmlRawWriter writer, XmlWriterSettings settings);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
    private bool StartCDataSection();
    private void EndCDataSection();
}
internal class System.Xml.QueryOutputWriterV1 : XmlWriter {
    private XmlWriter _wrapped;
    private bool _inCDataSection;
    private Dictionary`2<XmlQualifiedName, XmlQualifiedName> _lookupCDataElems;
    private BitStack _bitsCData;
    private XmlQualifiedName _qnameCData;
    private bool _outputDocType;
    private bool _inAttr;
    private string _systemId;
    private string _publicId;
    private XmlStandalone _standalone;
    public WriteState WriteState { get; }
    public QueryOutputWriterV1(XmlWriter writer, XmlWriterSettings settings);
    public virtual WriteState get_WriteState();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    private bool StartCDataSection();
    private void EndCDataSection();
}
internal class System.Xml.ReadContentAsBinaryHelper : object {
    private XmlReader _reader;
    private State _state;
    private int _valueOffset;
    private bool _isEnd;
    private bool _canReadValueChunk;
    private Char[] _valueChunk;
    private int _valueChunkLength;
    private IncrementalReadDecoder _decoder;
    private Base64Decoder _base64Decoder;
    private BinHexDecoder _binHexDecoder;
    private static int ChunkSize;
    internal ReadContentAsBinaryHelper(XmlReader reader);
    internal static ReadContentAsBinaryHelper CreateOrReset(ReadContentAsBinaryHelper helper, XmlReader reader);
    internal int ReadContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    internal void Finish();
    internal void Reset();
    private bool Init();
    private bool InitOnElement();
    private void InitBase64Decoder();
    private void InitBinHexDecoder();
    private int ReadContentAsBinary(Byte[] buffer, int index, int count);
    private int ReadElementContentAsBinary(Byte[] buffer, int index, int count);
    private bool MoveToNextContentNode(bool moveIfOnContentNode);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBase64Async>d__27")]
internal Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBinHexAsync>d__28")]
internal Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBase64Async>d__29")]
internal Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBinHexAsync>d__30")]
internal Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<FinishAsync>d__31")]
internal Task FinishAsync();
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<InitAsync>d__32")]
private Task`1<bool> InitAsync();
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<InitOnElementAsync>d__33")]
private Task`1<bool> InitOnElementAsync();
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBinaryAsync>d__34")]
private Task`1<int> ReadContentAsBinaryAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBinaryAsync>d__35")]
private Task`1<int> ReadElementContentAsBinaryAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<MoveToNextContentNodeAsync>d__36")]
private Task`1<bool> MoveToNextContentNodeAsync(bool moveIfOnContentNode);
}
internal class System.Xml.ReaderPositionInfo : PositionInfo {
    private IXmlLineInfo _lineInfo;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ReaderPositionInfo(IXmlLineInfo lineInfo);
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
}
public enum System.Xml.ReadState : Enum {
    public int value__;
    public static ReadState Initial;
    public static ReadState Interactive;
    public static ReadState Error;
    public static ReadState EndOfFile;
    public static ReadState Closed;
}
internal static class System.Xml.Ref : object {
    public static bool Equal(string strA, string strB);
    public static void Equals(object objA, object objB);
}
[FlagsAttribute]
public enum System.Xml.Resolvers.XmlKnownDtds : Enum {
    public int value__;
    public static XmlKnownDtds None;
    public static XmlKnownDtds Xhtml10;
    public static XmlKnownDtds Rss091;
    public static XmlKnownDtds All;
}
public class System.Xml.Resolvers.XmlPreloadedResolver : XmlResolver {
    private XmlResolver _fallbackResolver;
    private Dictionary`2<Uri, PreloadedData> _mappings;
    private XmlKnownDtds _preloadedDtds;
    private static XmlKnownDtdData[] s_xhtml10_Dtd;
    private static XmlKnownDtdData[] s_rss091_Dtd;
    unknown ICredentials Credentials {public set; }
    public IEnumerable`1<Uri> PreloadedUris { get; }
    public XmlPreloadedResolver(XmlKnownDtds preloadedDtds);
    public XmlPreloadedResolver(XmlResolver fallbackResolver);
    public XmlPreloadedResolver(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds);
    public XmlPreloadedResolver(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds, IEqualityComparer`1<Uri> uriComparer);
    private static XmlPreloadedResolver();
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual void set_Credentials(ICredentials value);
    public virtual bool SupportsType(Uri absoluteUri, Type type);
    public void Add(Uri uri, Byte[] value);
    public void Add(Uri uri, Byte[] value, int offset, int count);
    public void Add(Uri uri, Stream value);
    public void Add(Uri uri, string value);
    public IEnumerable`1<Uri> get_PreloadedUris();
    public void Remove(Uri uri);
    private void Add(Uri uri, PreloadedData data);
    private void AddKnownDtd(XmlKnownDtdData[] dtdSet);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
internal class System.Xml.SafeAsciiDecoder : Decoder {
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
}
internal class System.Xml.Schema.ActiveAxis : object {
    private int _currentDepth;
    private bool _isActive;
    private Asttree _axisTree;
    private ArrayList _axisStack;
    public int CurrentDepth { get; }
    internal ActiveAxis(Asttree axisTree);
    public int get_CurrentDepth();
    internal void Reactivate();
    public bool MoveToStartElement(string localname, string URN);
    public virtual bool EndElement(string localname, string URN);
    public bool MoveToAttribute(string localname, string URN);
}
internal class System.Xml.Schema.AllElementsContentValidator : ContentValidator {
    private Hashtable _elements;
    private Object[] _particles;
    private BitSet _isRequired;
    private int _countRequired;
    public bool IsEmptiable { get; }
    public AllElementsContentValidator(XmlSchemaContentType contentType, int size, bool isEmptiable);
    public bool AddElement(XmlQualifiedName name, object particle, bool isEmptiable);
    public virtual bool get_IsEmptiable();
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.Asttree : object {
    private ArrayList _fAxisArray;
    private string _xpathexpr;
    private bool _isField;
    private XmlNamespaceManager _nsmgr;
    internal ArrayList SubtreeArray { get; }
    public Asttree(string xPath, bool isField, XmlNamespaceManager nsmgr);
    internal ArrayList get_SubtreeArray();
    private static bool IsNameTest(Axis ast);
    internal static bool IsAttribute(Axis ast);
    private static bool IsDescendantOrSelf(Axis ast);
    internal static bool IsSelf(Axis ast);
    public void CompileXPath(string xPath, bool isField, XmlNamespaceManager nsmgr);
    private void SetURN(Axis axis, XmlNamespaceManager nsmgr);
}
internal enum System.Xml.Schema.AttributeMatchState : Enum {
    public int value__;
    public static AttributeMatchState AttributeFound;
    public static AttributeMatchState AnyIdAttributeFound;
    public static AttributeMatchState UndeclaredElementAndAttribute;
    public static AttributeMatchState UndeclaredAttribute;
    public static AttributeMatchState AnyAttributeLax;
    public static AttributeMatchState AnyAttributeSkip;
    public static AttributeMatchState ProhibitedAnyAttribute;
    public static AttributeMatchState ProhibitedAttribute;
    public static AttributeMatchState AttributeNameMismatch;
    public static AttributeMatchState ValidateAttributeInvalidCall;
}
internal class System.Xml.Schema.AutoValidator : BaseValidator {
    private static string x_schema;
    public bool PreserveWhitespace { get; }
    public AutoValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    public virtual bool get_PreserveWhitespace();
    public virtual void Validate();
    public virtual void CompleteValidation();
    public virtual object FindId(string name);
    private ValidationType DetectValidationType();
}
internal class System.Xml.Schema.AxisElement : object {
    internal DoubleLinkAxis curNode;
    internal int rootDepth;
    internal int curDepth;
    internal bool isMatch;
    internal DoubleLinkAxis CurNode { get; }
    internal AxisElement(DoubleLinkAxis node, int depth);
    internal DoubleLinkAxis get_CurNode();
    internal void SetDepth(int depth);
    internal void MoveToParent(int depth, ForwardAxis parent);
    internal bool MoveToChild(string name, string URN, int depth, ForwardAxis parent);
}
internal class System.Xml.Schema.AxisStack : object {
    private ArrayList _stack;
    private ForwardAxis _subtree;
    private ActiveAxis _parent;
    internal ForwardAxis Subtree { get; }
    internal int Length { get; }
    public AxisStack(ForwardAxis faxis, ActiveAxis parent);
    internal ForwardAxis get_Subtree();
    internal int get_Length();
    internal void Push(int depth);
    internal void Pop();
    internal static bool Equal(string thisname, string thisURN, string name, string URN);
    internal void MoveToParent(string name, string URN, int depth);
    internal bool MoveToChild(string name, string URN, int depth);
    internal bool MoveToAttribute(string name, string URN, int depth);
}
internal class System.Xml.Schema.BaseProcessor : object {
    private XmlNameTable _nameTable;
    private SchemaNames _schemaNames;
    private ValidationEventHandler _eventHandler;
    private XmlSchemaCompilationSettings _compilationSettings;
    private int _errorCount;
    private string _nsXml;
    protected XmlNameTable NameTable { get; }
    protected SchemaNames SchemaNames { get; }
    protected ValidationEventHandler EventHandler { get; }
    protected XmlSchemaCompilationSettings CompilationSettings { get; }
    protected bool HasErrors { get; }
    public BaseProcessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public BaseProcessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings);
    protected XmlNameTable get_NameTable();
    protected SchemaNames get_SchemaNames();
    protected ValidationEventHandler get_EventHandler();
    protected XmlSchemaCompilationSettings get_CompilationSettings();
    protected bool get_HasErrors();
    protected void AddToTable(XmlSchemaObjectTable table, XmlQualifiedName qname, XmlSchemaObject item);
    private bool IsValidAttributeGroupRedefine(XmlSchemaObject existingObject, XmlSchemaObject item, XmlSchemaObjectTable table);
    private bool IsValidGroupRedefine(XmlSchemaObject existingObject, XmlSchemaObject item, XmlSchemaObjectTable table);
    private bool IsValidTypeRedefine(XmlSchemaObject existingObject, XmlSchemaObject item, XmlSchemaObjectTable table);
    protected void SendValidationEvent(string code, XmlSchemaObject source);
    protected void SendValidationEvent(string code, string msg, XmlSchemaObject source);
    protected void SendValidationEvent(string code, string msg1, string msg2, XmlSchemaObject source);
    protected void SendValidationEvent(string code, String[] args, Exception innerException, XmlSchemaObject source);
    protected void SendValidationEvent(string code, string msg1, string msg2, string sourceUri, int lineNumber, int linePosition);
    protected void SendValidationEvent(string code, XmlSchemaObject source, XmlSeverityType severity);
    protected void SendValidationEvent(XmlSchemaException e);
    protected void SendValidationEvent(string code, string msg, XmlSchemaObject source, XmlSeverityType severity);
    protected void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity);
    protected void SendValidationEventNoThrow(XmlSchemaException e, XmlSeverityType severity);
}
internal class System.Xml.Schema.BaseValidator : object {
    private XmlSchemaCollection _schemaCollection;
    private IValidationEventHandling _eventHandling;
    private XmlNameTable _nameTable;
    private SchemaNames _schemaNames;
    private PositionInfo _positionInfo;
    private XmlResolver _xmlResolver;
    private Uri _baseUri;
    protected SchemaInfo schemaInfo;
    protected XmlValidatingReaderImpl reader;
    protected XmlQualifiedName elementName;
    protected ValidationState context;
    protected StringBuilder textValue;
    protected string textString;
    protected bool hasSibling;
    protected bool checkDatatype;
    public XmlValidatingReaderImpl Reader { get; }
    public XmlSchemaCollection SchemaCollection { get; }
    public XmlNameTable NameTable { get; }
    public SchemaNames SchemaNames { get; }
    public PositionInfo PositionInfo { get; }
    public XmlResolver XmlResolver { get; public set; }
    public Uri BaseUri { get; public set; }
    public ValidationEventHandler EventHandler { get; }
    public SchemaInfo SchemaInfo { get; public set; }
    public IDtdInfo DtdInfo { get; public set; }
    public bool PreserveWhitespace { get; }
    public BaseValidator(BaseValidator other);
    public BaseValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    public XmlValidatingReaderImpl get_Reader();
    public XmlSchemaCollection get_SchemaCollection();
    public XmlNameTable get_NameTable();
    public SchemaNames get_SchemaNames();
    public PositionInfo get_PositionInfo();
    public XmlResolver get_XmlResolver();
    public void set_XmlResolver(XmlResolver value);
    public Uri get_BaseUri();
    public void set_BaseUri(Uri value);
    public ValidationEventHandler get_EventHandler();
    public SchemaInfo get_SchemaInfo();
    public void set_SchemaInfo(SchemaInfo value);
    public IDtdInfo get_DtdInfo();
    public void set_DtdInfo(IDtdInfo value);
    public virtual bool get_PreserveWhitespace();
    public virtual void Validate();
    public virtual void CompleteValidation();
    public virtual object FindId(string name);
    public void ValidateText();
    public void ValidateWhitespace();
    private void SaveTextValue(string value);
    protected void SendValidationEvent(string code);
    protected void SendValidationEvent(string code, String[] args);
    protected void SendValidationEvent(string code, string arg);
    protected void SendValidationEvent(XmlSchemaException e);
    protected void SendValidationEvent(string code, string msg, XmlSeverityType severity);
    protected void SendValidationEvent(string code, String[] args, XmlSeverityType severity);
    protected void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity);
    protected static void ProcessEntity(SchemaInfo sinfo, string name, object sender, ValidationEventHandler eventhandler, string baseUri, int lineNumber, int linePosition);
    protected static void ProcessEntity(SchemaInfo sinfo, string name, IValidationEventHandling eventHandling, string baseUriStr, int lineNumber, int linePosition);
    public static BaseValidator CreateInstance(ValidationType valType, XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling, bool processIdentityConstraints);
}
internal class System.Xml.Schema.BinaryFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(Byte[] value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    private bool MatchEnumeration(Byte[] value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.BitSet : object {
    private static int bitSlotShift;
    private static int bitSlotMask;
    private int _count;
    private UInt32[] _bits;
    public int Count { get; }
    public bool Item { get; }
    public bool IsEmpty { get; }
    public BitSet(int count);
    public int get_Count();
    public bool get_Item(int index);
    public void Clear();
    public void Set(int index);
    public bool Get(int index);
    public int NextSet(int startFrom);
    public void And(BitSet other);
    public void Or(BitSet other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public BitSet Clone();
    public bool get_IsEmpty();
    public bool Intersects(BitSet other);
    private int Subscript(int bitIndex);
    private void EnsureLength(int nRequiredLength);
}
internal class System.Xml.Schema.ChameleonKey : object {
    internal string targetNS;
    internal Uri chameleonLocation;
    internal XmlSchema originalSchema;
    private int _hashCode;
    public ChameleonKey(string ns, XmlSchema originalSchema);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Xml.Schema.ChoiceNode : InteriorNode {
    public bool IsNullable { get; }
    private static void ConstructChildPos(SyntaxTreeNode child, BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
internal class System.Xml.Schema.CompiledIdentityConstraint : object {
    internal XmlQualifiedName name;
    private ConstraintRole _role;
    private Asttree _selector;
    private Asttree[] _fields;
    internal XmlQualifiedName refer;
    public static CompiledIdentityConstraint Empty;
    public ConstraintRole Role { get; }
    public Asttree Selector { get; }
    public Asttree[] Fields { get; }
    public CompiledIdentityConstraint(XmlSchemaIdentityConstraint constraint, XmlNamespaceManager nsmgr);
    private static CompiledIdentityConstraint();
    public ConstraintRole get_Role();
    public Asttree get_Selector();
    public Asttree[] get_Fields();
}
internal class System.Xml.Schema.Compiler : BaseProcessor {
    private string _restrictionErrorMsg;
    private XmlSchemaObjectTable _attributes;
    private XmlSchemaObjectTable _attributeGroups;
    private XmlSchemaObjectTable _elements;
    private XmlSchemaObjectTable _schemaTypes;
    private XmlSchemaObjectTable _groups;
    private XmlSchemaObjectTable _notations;
    private XmlSchemaObjectTable _examplars;
    private XmlSchemaObjectTable _identityConstraints;
    private Stack _complexTypeStack;
    private Hashtable _schemasToCompile;
    private Hashtable _importedSchemas;
    private XmlSchema _schemaForSchema;
    public Compiler(XmlNameTable nameTable, ValidationEventHandler eventHandler, XmlSchema schemaForSchema, XmlSchemaCompilationSettings compilationSettings);
    public bool Execute(XmlSchemaSet schemaSet, SchemaInfo schemaCompiledInfo);
    internal void Prepare(XmlSchema schema, bool cleanup);
    private void UpdateSForSSimpleTypes();
    private void Output(SchemaInfo schemaInfo);
    internal void ImportAllCompiledSchemas(XmlSchemaSet schemaSet);
    internal bool Compile();
    private void CleanupAttribute(XmlSchemaAttribute attribute);
    private void CleanupAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private void CleanupComplexType(XmlSchemaComplexType complexType);
    private void CleanupSimpleType(XmlSchemaSimpleType simpleType);
    private void CleanupElement(XmlSchemaElement element);
    private void CleanupAttributes(XmlSchemaObjectCollection attributes);
    private void CleanupGroup(XmlSchemaGroup group);
    private void CleanupParticle(XmlSchemaParticle particle);
    private void ProcessSubstitutionGroups();
    private void CompileSubstitutionGroup(XmlSchemaSubstitutionGroup substitutionGroup);
    private void RecursivelyCheckRedefinedGroups(XmlSchemaGroup redefinedGroup, XmlSchemaGroup baseGroup);
    private void RecursivelyCheckRedefinedAttributeGroups(XmlSchemaAttributeGroup attributeGroup, XmlSchemaAttributeGroup baseAttributeGroup);
    private void CompileGroup(XmlSchemaGroup group);
    private void CompileSimpleType(XmlSchemaSimpleType simpleType);
    private XmlSchemaSimpleType[] CompileBaseMemberTypes(XmlSchemaSimpleType simpleType);
    private void CheckUnionType(XmlSchemaSimpleType unionMember, ArrayList memberTypeDefinitions, XmlSchemaSimpleType parentType);
    private void CompileComplexType(XmlSchemaComplexType complexType);
    private void CompileSimpleContentExtension(XmlSchemaComplexType complexType, XmlSchemaSimpleContentExtension simpleExtension);
    private void CompileSimpleContentRestriction(XmlSchemaComplexType complexType, XmlSchemaSimpleContentRestriction simpleRestriction);
    private void CompileComplexContentExtension(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentExtension complexExtension);
    private void CompileComplexContentRestriction(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentRestriction complexRestriction);
    private void CheckParticleDerivation(XmlSchemaComplexType complexType);
    private void CheckParticleDerivation(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle);
    private XmlSchemaParticle CompileContentTypeParticle(XmlSchemaParticle particle);
    private XmlSchemaParticle CannonicalizeParticle(XmlSchemaParticle particle, bool root);
    private XmlSchemaParticle CannonicalizeElement(XmlSchemaElement element);
    private XmlSchemaParticle CannonicalizeGroupRef(XmlSchemaGroupRef groupRef, bool root);
    private XmlSchemaParticle CannonicalizeAll(XmlSchemaAll all, bool root);
    private XmlSchemaParticle CannonicalizeChoice(XmlSchemaChoice choice, bool root);
    private XmlSchemaParticle CannonicalizeSequence(XmlSchemaSequence sequence, bool root);
    private XmlSchemaParticle CannonicalizePointlessRoot(XmlSchemaParticle particle);
    private bool IsValidRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle);
    private bool IsElementFromElement(XmlSchemaElement derivedElement, XmlSchemaElement baseElement);
    private bool IsElementFromAny(XmlSchemaElement derivedElement, XmlSchemaAny baseAny);
    private bool IsAnyFromAny(XmlSchemaAny derivedAny, XmlSchemaAny baseAny);
    private bool IsGroupBaseFromAny(XmlSchemaGroupBase derivedGroupBase, XmlSchemaAny baseAny);
    private bool IsElementFromGroupBase(XmlSchemaElement derivedElement, XmlSchemaGroupBase baseGroupBase);
    private bool IsChoiceFromChoiceSubstGroup(XmlSchemaChoice derivedChoice, XmlSchemaChoice baseChoice);
    private bool IsGroupBaseFromGroupBase(XmlSchemaGroupBase derivedGroupBase, XmlSchemaGroupBase baseGroupBase, bool skipEmptableOnly);
    private bool IsSequenceFromAll(XmlSchemaSequence derivedSequence, XmlSchemaAll baseAll);
    private bool IsSequenceFromChoice(XmlSchemaSequence derivedSequence, XmlSchemaChoice baseChoice);
    private bool IsValidOccurrenceRangeRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle);
    private bool IsValidOccurrenceRangeRestriction(decimal minOccurs, decimal maxOccurs, decimal baseMinOccurs, decimal baseMaxOccurs);
    private int GetMappingParticle(XmlSchemaParticle particle, XmlSchemaObjectCollection collection);
    private bool IsParticleEmptiable(XmlSchemaParticle particle);
    private void CalculateEffectiveTotalRange(XmlSchemaParticle particle, Decimal& minOccurs, Decimal& maxOccurs);
    private void PushComplexType(XmlSchemaComplexType complexType);
    private XmlSchemaContentType GetSchemaContentType(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaParticle particle);
    private void CompileAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private void CompileLocalAttributes(XmlSchemaComplexType baseType, XmlSchemaComplexType derivedType, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaDerivationMethod derivedBy);
    private void CheckAtrributeGroupRestriction(XmlSchemaAttributeGroup baseAttributeGroup, XmlSchemaAttributeGroup derivedAttributeGroup);
    private bool IsProcessContentsRestricted(XmlSchemaComplexType baseType, XmlSchemaAnyAttribute derivedAttributeWildcard, XmlSchemaAnyAttribute baseAttributeWildcard);
    private XmlSchemaAnyAttribute CompileAnyAttributeUnion(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b);
    private XmlSchemaAnyAttribute CompileAnyAttributeIntersection(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b);
    private void CompileAttribute(XmlSchemaAttribute xa);
    private void SetDefaultFixed(XmlSchemaAttribute xa, SchemaAttDef decl);
    private void CompileIdentityConstraint(XmlSchemaIdentityConstraint xi);
    private void CompileElement(XmlSchemaElement xe);
    private ContentValidator CompileComplexContent(XmlSchemaComplexType complexType);
    private bool BuildParticleContentModel(ParticleContentValidator contentValidator, XmlSchemaParticle particle);
    private void CompileParticleElements(XmlSchemaComplexType complexType, XmlSchemaParticle particle);
    private void CompileParticleElements(XmlSchemaParticle particle);
    private void CompileComplexTypeElements(XmlSchemaComplexType complexType);
    private XmlSchemaSimpleType GetSimpleType(XmlQualifiedName name);
    private XmlSchemaComplexType GetComplexType(XmlQualifiedName name);
    private XmlSchemaType GetAnySchemaType(XmlQualifiedName name);
    private void CopyPosition(XmlSchemaAnnotated to, XmlSchemaAnnotated from, bool copyParent);
    private bool IsFixedEqual(SchemaDeclBase baseDecl, SchemaDeclBase derivedDecl);
}
internal enum System.Xml.Schema.Compositor : Enum {
    public int value__;
    public static Compositor Root;
    public static Compositor Include;
    public static Compositor Import;
    public static Compositor Redefine;
}
internal class System.Xml.Schema.ConstraintStruct : object {
    internal CompiledIdentityConstraint constraint;
    internal SelectorActiveAxis axisSelector;
    internal ArrayList axisFields;
    internal Hashtable qualifiedTable;
    internal Hashtable keyrefTable;
    private int _tableDim;
    internal int TableDim { get; }
    internal ConstraintStruct(CompiledIdentityConstraint constraint);
    internal int get_TableDim();
}
internal class System.Xml.Schema.ContentValidator : object {
    private XmlSchemaContentType _contentType;
    private bool _isOpen;
    private bool _isEmptiable;
    public static ContentValidator Empty;
    public static ContentValidator TextOnly;
    public static ContentValidator Mixed;
    public static ContentValidator Any;
    public XmlSchemaContentType ContentType { get; }
    public bool PreserveWhitespace { get; }
    public bool IsEmptiable { get; }
    public bool IsOpen { get; public set; }
    public ContentValidator(XmlSchemaContentType contentType);
    protected ContentValidator(XmlSchemaContentType contentType, bool isOpen, bool isEmptiable);
    private static ContentValidator();
    public XmlSchemaContentType get_ContentType();
    public bool get_PreserveWhitespace();
    public virtual bool get_IsEmptiable();
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
    public static void AddParticleToExpected(XmlSchemaParticle p, XmlSchemaSet schemaSet, ArrayList particles);
    public static void AddParticleToExpected(XmlSchemaParticle p, XmlSchemaSet schemaSet, ArrayList particles, bool global);
}
internal class System.Xml.Schema.Datatype_anyAtomicType : Datatype_anySimpleType {
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    public XmlTypeCode TypeCode { get; }
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_anySimpleType : DatatypeImplementation {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public Type ValueType { get; }
    public XmlTypeCode TypeCode { get; }
    internal Type ListValueType { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static Datatype_anySimpleType();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual Type get_ValueType();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual Type get_ListValueType();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_anyURI : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal bool HasValueFacets { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_anyURI();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual bool get_HasValueFacets();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_base64Binary : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_base64Binary();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_boolean : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_boolean();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_byte : Datatype_short {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_byte();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_char : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_char();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_date : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_dateTime : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_dateTimeBase : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private XsdDateTimeFlags _dateTimeFlags;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal Datatype_dateTimeBase(XsdDateTimeFlags dateTimeFlags);
    private static Datatype_dateTimeBase();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_dateTimeNoTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_dateTimeTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_day : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_dayTimeDuration : Datatype_duration {
    public XmlTypeCode TypeCode { get; }
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_decimal : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_decimal();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_double : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_double();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_doubleXdr : Datatype_double {
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
}
internal class System.Xml.Schema.Datatype_duration : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_duration();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_ENTITY : Datatype_NCName {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_ENUMERATION : Datatype_NMTOKEN {
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_fixed : Datatype_decimal {
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_float : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_float();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_floatXdr : Datatype_float {
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
}
internal class System.Xml.Schema.Datatype_hexBinary : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_hexBinary();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_ID : Datatype_NCName {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_IDREF : Datatype_NCName {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_int : Datatype_long {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_int();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_integer : Datatype_decimal {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_language : Datatype_token {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_List : Datatype_anySimpleType {
    private DatatypeImplementation _itemType;
    private int _minListSize;
    public Type ValueType { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal Type ListValueType { get; }
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal DatatypeImplementation ItemType { get; }
    internal Datatype_List(DatatypeImplementation type, int minListSize);
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual Type get_ListValueType();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal DatatypeImplementation get_ItemType();
    internal virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_long : Datatype_integer {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    internal bool HasValueFacets { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_long();
    internal virtual FacetsChecker get_FacetsChecker();
    internal virtual bool get_HasValueFacets();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_month : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_monthDay : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_Name : Datatype_token {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_NCName : Datatype_Name {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_negativeInteger : Datatype_nonPositiveInteger {
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    private static Datatype_negativeInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_NMTOKEN : Datatype_token {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_nonNegativeInteger : Datatype_integer {
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    internal bool HasValueFacets { get; }
    private static Datatype_nonNegativeInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_nonPositiveInteger : Datatype_integer {
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    internal bool HasValueFacets { get; }
    private static Datatype_nonPositiveInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_normalizedString : Datatype_string {
    public XmlTypeCode TypeCode { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal bool HasValueFacets { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_normalizedStringV1Compat : Datatype_string {
    public XmlTypeCode TypeCode { get; }
    internal bool HasValueFacets { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_NOTATION : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static Datatype_NOTATION();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    internal virtual void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller);
}
internal class System.Xml.Schema.Datatype_positiveInteger : Datatype_nonNegativeInteger {
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    private static Datatype_positiveInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_QName : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static Datatype_QName();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_QNameXdr : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    public XmlTokenizedType TokenizedType { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_QNameXdr();
    public virtual XmlTokenizedType get_TokenizedType();
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
}
internal class System.Xml.Schema.Datatype_short : Datatype_int {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_short();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_string : Datatype_anySimpleType {
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_time : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_timeNoTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_timeTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_token : Datatype_normalizedString {
    public XmlTypeCode TypeCode { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
}
internal class System.Xml.Schema.Datatype_tokenV1Compat : Datatype_normalizedStringV1Compat {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_union : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private XmlSchemaSimpleType[] _types;
    public Type ValueType { get; }
    public XmlTypeCode TypeCode { get; }
    internal FacetsChecker FacetsChecker { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal XmlSchemaSimpleType[] BaseMemberTypes { get; }
    internal Datatype_union(XmlSchemaSimpleType[] types);
    private static Datatype_union();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual FacetsChecker get_FacetsChecker();
    internal virtual Type get_ListValueType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal XmlSchemaSimpleType[] get_BaseMemberTypes();
    internal bool HasAtomicMembers();
    internal bool IsUnionBaseOf(DatatypeImplementation derivedType);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    internal virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedByte : Datatype_unsignedShort {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedByte();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedInt : Datatype_unsignedLong {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedInt();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedLong : Datatype_nonNegativeInteger {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedLong();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedShort : Datatype_unsignedInt {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    private static FacetsChecker s_numeric10FacetsChecker;
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedShort();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_untypedAtomicType : Datatype_anyAtomicType {
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    public XmlTypeCode TypeCode { get; }
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_uuid : Datatype_anySimpleType {
    private static Type s_atomicValueType;
    private static Type s_listValueType;
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_uuid();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_year : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_yearMonth : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_yearMonthDuration : Datatype_duration {
    public XmlTypeCode TypeCode { get; }
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    public virtual XmlTypeCode get_TypeCode();
}
internal abstract class System.Xml.Schema.DatatypeImplementation : XmlSchemaDatatype {
    private XmlSchemaDatatypeVariety _variety;
    private RestrictionFacets _restriction;
    private DatatypeImplementation _baseType;
    private XmlValueConverter _valueConverter;
    private XmlSchemaType _parentSchemaType;
    private static Hashtable s_builtinTypes;
    private static XmlSchemaSimpleType[] s_enumToTypeCode;
    private static XmlSchemaSimpleType s__anySimpleType;
    private static XmlSchemaSimpleType s__anyAtomicType;
    private static XmlSchemaSimpleType s__untypedAtomicType;
    private static XmlSchemaSimpleType s_yearMonthDurationType;
    private static XmlSchemaSimpleType s_dayTimeDurationType;
    private static XmlSchemaSimpleType modreq(System.Runtime.CompilerServices.IsVolatile) s_normalizedStringTypeV1Compat;
    private static XmlSchemaSimpleType modreq(System.Runtime.CompilerServices.IsVolatile) s_tokenTypeV1Compat;
    private static int anySimpleTypeIndex;
    internal static XmlQualifiedName QnAnySimpleType;
    internal static XmlQualifiedName QnAnyType;
    internal static FacetsChecker stringFacetsChecker;
    internal static FacetsChecker miscFacetsChecker;
    internal static FacetsChecker numeric2FacetsChecker;
    internal static FacetsChecker binaryFacetsChecker;
    internal static FacetsChecker dateTimeFacetsChecker;
    internal static FacetsChecker durationFacetsChecker;
    internal static FacetsChecker listFacetsChecker;
    internal static FacetsChecker qnameFacetsChecker;
    internal static FacetsChecker unionFacetsChecker;
    private static DatatypeImplementation s_anySimpleType;
    private static DatatypeImplementation s_anyURI;
    private static DatatypeImplementation s_base64Binary;
    private static DatatypeImplementation s_boolean;
    private static DatatypeImplementation s_byte;
    private static DatatypeImplementation s_char;
    private static DatatypeImplementation s_date;
    private static DatatypeImplementation s_dateTime;
    private static DatatypeImplementation s_dateTimeNoTz;
    private static DatatypeImplementation s_dateTimeTz;
    private static DatatypeImplementation s_day;
    private static DatatypeImplementation s_decimal;
    private static DatatypeImplementation s_double;
    private static DatatypeImplementation s_doubleXdr;
    private static DatatypeImplementation s_duration;
    private static DatatypeImplementation s_ENTITY;
    private static DatatypeImplementation s_ENTITIES;
    private static DatatypeImplementation s_ENUMERATION;
    private static DatatypeImplementation s_fixed;
    private static DatatypeImplementation s_float;
    private static DatatypeImplementation s_floatXdr;
    private static DatatypeImplementation s_hexBinary;
    private static DatatypeImplementation s_ID;
    private static DatatypeImplementation s_IDREF;
    private static DatatypeImplementation s_IDREFS;
    private static DatatypeImplementation s_int;
    private static DatatypeImplementation s_integer;
    private static DatatypeImplementation s_language;
    private static DatatypeImplementation s_long;
    private static DatatypeImplementation s_month;
    private static DatatypeImplementation s_monthDay;
    private static DatatypeImplementation s_name;
    private static DatatypeImplementation s_NCName;
    private static DatatypeImplementation s_negativeInteger;
    private static DatatypeImplementation s_NMTOKEN;
    private static DatatypeImplementation s_NMTOKENS;
    private static DatatypeImplementation s_nonNegativeInteger;
    private static DatatypeImplementation s_nonPositiveInteger;
    private static DatatypeImplementation s_normalizedString;
    private static DatatypeImplementation s_NOTATION;
    private static DatatypeImplementation s_positiveInteger;
    private static DatatypeImplementation s_QName;
    private static DatatypeImplementation s_QNameXdr;
    private static DatatypeImplementation s_short;
    private static DatatypeImplementation s_string;
    private static DatatypeImplementation s_time;
    private static DatatypeImplementation s_timeNoTz;
    private static DatatypeImplementation s_timeTz;
    private static DatatypeImplementation s_token;
    private static DatatypeImplementation s_unsignedByte;
    private static DatatypeImplementation s_unsignedInt;
    private static DatatypeImplementation s_unsignedLong;
    private static DatatypeImplementation s_unsignedShort;
    private static DatatypeImplementation s_uuid;
    private static DatatypeImplementation s_year;
    private static DatatypeImplementation s_yearMonth;
    internal static DatatypeImplementation c_normalizedStringV1Compat;
    internal static DatatypeImplementation c_tokenV1Compat;
    private static DatatypeImplementation s_anyAtomicType;
    private static DatatypeImplementation s_dayTimeDuration;
    private static DatatypeImplementation s_untypedAtomicType;
    private static DatatypeImplementation s_yearMonthDuration;
    private static DatatypeImplementation[] s_tokenizedTypes;
    private static DatatypeImplementation[] s_tokenizedTypesXsd;
    private static SchemaDatatypeMap[] s_xdrTypes;
    private static SchemaDatatypeMap[] s_xsdTypes;
    internal static XmlSchemaSimpleType AnySimpleType { get; }
    internal static XmlSchemaSimpleType AnyAtomicType { get; }
    internal static XmlSchemaSimpleType UntypedAtomicType { get; }
    internal FacetsChecker FacetsChecker { get; }
    internal XmlValueConverter ValueConverter { get; }
    public XmlTokenizedType TokenizedType { get; }
    public Type ValueType { get; }
    public XmlSchemaDatatypeVariety Variety { get; }
    public XmlTypeCode TypeCode { get; }
    internal RestrictionFacets Restriction { get; internal set; }
    internal bool HasLexicalFacets { get; }
    internal bool HasValueFacets { get; }
    protected DatatypeImplementation Base { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static DatatypeImplementation();
    internal static XmlSchemaSimpleType get_AnySimpleType();
    internal static XmlSchemaSimpleType get_AnyAtomicType();
    internal static XmlSchemaSimpleType get_UntypedAtomicType();
    internal static DatatypeImplementation FromXmlTokenizedType(XmlTokenizedType token);
    internal static DatatypeImplementation FromXmlTokenizedTypeXsd(XmlTokenizedType token);
    internal static DatatypeImplementation FromXdrName(string name);
    private static DatatypeImplementation FromTypeName(string name);
    internal static XmlSchemaSimpleType StartBuiltinType(XmlQualifiedName qname, XmlSchemaDatatype dataType);
    internal static void FinishBuiltinType(XmlSchemaSimpleType derivedType, XmlSchemaSimpleType baseType);
    internal static void CreateBuiltinTypes();
    internal static XmlSchemaSimpleType GetSimpleTypeFromTypeCode(XmlTypeCode typeCode);
    internal static XmlSchemaSimpleType GetSimpleTypeFromXsdType(XmlQualifiedName qname);
    internal static XmlSchemaSimpleType GetNormalizedStringTypeV1Compat();
    internal static XmlSchemaSimpleType GetTokenTypeV1Compat();
    internal static XmlSchemaSimpleType[] GetBuiltInTypes();
    internal static XmlTypeCode GetPrimitiveTypeCode(XmlTypeCode typeCode);
    internal virtual XmlSchemaDatatype DeriveByRestriction(XmlSchemaObjectCollection facets, XmlNameTable nameTable, XmlSchemaType schemaType);
    internal virtual XmlSchemaDatatype DeriveByList(XmlSchemaType schemaType);
    internal XmlSchemaDatatype DeriveByList(int minSize, XmlSchemaType schemaType);
    internal static DatatypeImplementation DeriveByUnion(XmlSchemaSimpleType[] types, XmlSchemaType schemaType);
    internal virtual void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller);
    public virtual bool IsDerivedFrom(XmlSchemaDatatype datatype);
    internal virtual bool IsEqual(object o1, object o2);
    internal virtual bool IsComparable(XmlSchemaDatatype dtype);
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    internal virtual XmlValueConverter get_ValueConverter();
    public virtual XmlTokenizedType get_TokenizedType();
    public virtual Type get_ValueType();
    public virtual XmlSchemaDatatypeVariety get_Variety();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual RestrictionFacets get_Restriction();
    internal virtual void set_Restriction(RestrictionFacets value);
    internal virtual bool get_HasLexicalFacets();
    internal virtual bool get_HasValueFacets();
    protected DatatypeImplementation get_Base();
    internal abstract virtual Type get_ListValueType();
    internal abstract virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, bool createAtomicValue);
    internal virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue);
    internal string GetTypeName();
    protected int Compare(Byte[] value1, Byte[] value2);
}
internal class System.Xml.Schema.DateTimeFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(DateTime value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    private bool MatchEnumeration(DateTime value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.DfaContentValidator : ContentValidator {
    private Int32[][] _transitionTable;
    private SymbolsDictionary _symbols;
    internal DfaContentValidator(Int32[][] transitionTable, SymbolsDictionary symbols, XmlSchemaContentType contentType, bool isOpen, bool isEmptiable);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.DoubleLinkAxis : Axis {
    internal Axis next;
    internal Axis Next { get; internal set; }
    internal DoubleLinkAxis(Axis axis, DoubleLinkAxis inputaxis);
    internal Axis get_Next();
    internal void set_Next(Axis value);
    internal static DoubleLinkAxis ConvertTree(Axis axis);
}
internal class System.Xml.Schema.DtdValidator : BaseValidator {
    private static NamespaceManager s_namespaceManager;
    private static int STACK_INCREMENT;
    private HWStack _validationStack;
    private Hashtable _attPresence;
    private XmlQualifiedName _name;
    private Hashtable _IDs;
    private IdRefNode _idRefListHead;
    private bool _processIdentityConstraints;
    public bool PreserveWhitespace { get; }
    internal DtdValidator(XmlValidatingReaderImpl reader, IValidationEventHandling eventHandling, bool processIdentityConstraints);
    private static DtdValidator();
    private void Init();
    public virtual void Validate();
    private bool MeetsStandAloneConstraint();
    private void ValidatePIComment();
    private void ValidateElement();
    private void ValidateChildElement();
    private void ValidateStartElement();
    private void ValidateEndStartElement();
    private void ProcessElement();
    public virtual void CompleteValidation();
    private void ValidateEndElement();
    public virtual bool get_PreserveWhitespace();
    private void ProcessTokenizedType(XmlTokenizedType ttype, string name);
    private void CheckValue(string value, SchemaAttDef attdef);
    internal void AddID(string name, object node);
    public virtual object FindId(string name);
    private bool GenEntity(XmlQualifiedName qname);
    private SchemaEntity GetEntity(XmlQualifiedName qname, bool fParameterEntity);
    private void CheckForwardRefs();
    private void Push(XmlQualifiedName elementName);
    private bool Pop();
    public static void SetDefaultTypedValue(SchemaAttDef attdef, IDtdParserAdapter readerAdapter);
    public static void CheckDefaultValue(SchemaAttDef attdef, SchemaInfo sinfo, IValidationEventHandling eventHandling, string baseUriStr);
}
internal class System.Xml.Schema.DurationFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(TimeSpan value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    private bool MatchEnumeration(TimeSpan value, ArrayList enumeration);
}
internal abstract class System.Xml.Schema.FacetsChecker : object {
    internal virtual Exception CheckLexicalFacets(String& parseString, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(decimal value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(long value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(int value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(short value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(DateTime value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(double value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(float value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(string value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(Byte[] value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(TimeSpan value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(XmlQualifiedName value, XmlSchemaDatatype datatype);
    internal void CheckWhitespaceFacets(String& s, XmlSchemaDatatype datatype);
    internal Exception CheckPatternFacets(RestrictionFacets restriction, string value);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    internal virtual RestrictionFacets ConstructRestriction(DatatypeImplementation datatype, XmlSchemaObjectCollection facets, XmlNameTable nameTable);
    internal static decimal Power(int x, int y);
}
internal enum System.Xml.Schema.FacetType : Enum {
    public int value__;
    public static FacetType None;
    public static FacetType Length;
    public static FacetType MinLength;
    public static FacetType MaxLength;
    public static FacetType Pattern;
    public static FacetType Whitespace;
    public static FacetType Enumeration;
    public static FacetType MinExclusive;
    public static FacetType MinInclusive;
    public static FacetType MaxExclusive;
    public static FacetType MaxInclusive;
    public static FacetType TotalDigits;
    public static FacetType FractionDigits;
}
internal class System.Xml.Schema.ForwardAxis : object {
    private DoubleLinkAxis _topNode;
    private DoubleLinkAxis _rootNode;
    private bool _isAttribute;
    private bool _isDss;
    private bool _isSelfAxis;
    internal DoubleLinkAxis RootNode { get; }
    internal DoubleLinkAxis TopNode { get; }
    internal bool IsAttribute { get; }
    internal bool IsDss { get; }
    internal bool IsSelfAxis { get; }
    public ForwardAxis(DoubleLinkAxis axis, bool isdesorself);
    internal DoubleLinkAxis get_RootNode();
    internal DoubleLinkAxis get_TopNode();
    internal bool get_IsAttribute();
    internal bool get_IsDss();
    internal bool get_IsSelfAxis();
}
internal class System.Xml.Schema.IdRefNode : object {
    internal string Id;
    internal int LineNo;
    internal int LinePos;
    internal IdRefNode Next;
    internal IdRefNode(IdRefNode next, string id, int lineNo, int linePos);
}
internal abstract class System.Xml.Schema.InteriorNode : SyntaxTreeNode {
    private SyntaxTreeNode _leftChild;
    private SyntaxTreeNode _rightChild;
    public SyntaxTreeNode LeftChild { get; public set; }
    public SyntaxTreeNode RightChild { get; public set; }
    public SyntaxTreeNode get_LeftChild();
    public void set_LeftChild(SyntaxTreeNode value);
    public SyntaxTreeNode get_RightChild();
    public void set_RightChild(SyntaxTreeNode value);
    protected void ExpandTreeNoRecursive(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
public interface System.Xml.Schema.IXmlSchemaInfo {
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    public abstract virtual XmlSchemaValidity get_Validity();
    public abstract virtual bool get_IsDefault();
    public abstract virtual bool get_IsNil();
    public abstract virtual XmlSchemaSimpleType get_MemberType();
    public abstract virtual XmlSchemaType get_SchemaType();
    public abstract virtual XmlSchemaElement get_SchemaElement();
    public abstract virtual XmlSchemaAttribute get_SchemaAttribute();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.KeySequence : object {
    private TypedObject[] _ks;
    private int _dim;
    private int _hashcode;
    private int _posline;
    private int _poscol;
    public int PosLine { get; }
    public int PosCol { get; }
    public object Item { get; public set; }
    internal KeySequence(int dim, int line, int col);
    public int get_PosLine();
    public int get_PosCol();
    public object get_Item(int index);
    public void set_Item(int index, object value);
    internal bool IsQualified();
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public virtual string ToString();
}
internal class System.Xml.Schema.KSStruct : object {
    public int depth;
    public KeySequence ks;
    public LocatedActiveAxis[] fields;
    public KSStruct(KeySequence ks, int dim);
}
internal class System.Xml.Schema.LeafNode : SyntaxTreeNode {
    private int _pos;
    public int Pos { get; public set; }
    public bool IsNullable { get; }
    public LeafNode(int pos);
    public int get_Pos();
    public void set_Pos(int value);
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.LeafRangeNode : LeafNode {
    private decimal _min;
    private decimal _max;
    private BitSet _nextIteration;
    public decimal Max { get; }
    public decimal Min { get; }
    public BitSet NextIteration { get; public set; }
    public bool IsRangeNode { get; }
    public LeafRangeNode(decimal min, decimal max);
    public LeafRangeNode(int pos, decimal min, decimal max);
    public decimal get_Max();
    public decimal get_Min();
    public BitSet get_NextIteration();
    public void set_NextIteration(BitSet value);
    public virtual bool get_IsRangeNode();
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
internal class System.Xml.Schema.ListFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.LocatedActiveAxis : ActiveAxis {
    private int _column;
    internal bool isMatched;
    internal KeySequence Ks;
    internal int Column { get; }
    internal LocatedActiveAxis(Asttree astfield, KeySequence ks, int column);
    internal int get_Column();
    internal void Reactivate(KeySequence ks);
}
internal class System.Xml.Schema.MiscFacetsChecker : FacetsChecker {
}
internal class System.Xml.Schema.NamespaceList : object {
    private ListType _type;
    private Hashtable _set;
    private string _targetNamespace;
    public ListType Type { get; }
    public string Excluded { get; }
    public ICollection Enumerate { get; }
    public NamespaceList(string namespaces, string targetNamespace);
    public NamespaceList Clone();
    public ListType get_Type();
    public string get_Excluded();
    public ICollection get_Enumerate();
    public virtual bool Allows(string ns);
    public bool Allows(XmlQualifiedName qname);
    public virtual string ToString();
    public static bool IsSubset(NamespaceList sub, NamespaceList super);
    public static NamespaceList Union(NamespaceList o1, NamespaceList o2, bool v1Compat);
    private NamespaceList CompareSetToOther(NamespaceList other);
    public static NamespaceList Intersection(NamespaceList o1, NamespaceList o2, bool v1Compat);
    private void RemoveNamespace(string tns);
}
internal class System.Xml.Schema.NamespaceListNode : SyntaxTreeNode {
    protected NamespaceList namespaceList;
    protected object particle;
    public bool IsNullable { get; }
    public NamespaceListNode(NamespaceList namespaceList, object particle);
    public virtual ICollection GetResolvedSymbols(SymbolsDictionary symbols);
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.NamespaceListV1Compat : NamespaceList {
    public NamespaceListV1Compat(string namespaces, string targetNamespace);
    public virtual bool Allows(string ns);
}
internal class System.Xml.Schema.NfaContentValidator : ContentValidator {
    private BitSet _firstpos;
    private BitSet[] _followpos;
    private SymbolsDictionary _symbols;
    private Positions _positions;
    private int _endMarkerPos;
    internal NfaContentValidator(BitSet firstpos, BitSet[] followpos, SymbolsDictionary symbols, Positions positions, int endMarkerPos, XmlSchemaContentType contentType, bool isOpen, bool isEmptiable);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.Numeric10FacetsChecker : FacetsChecker {
    private static Char[] s_signs;
    private decimal _maxValue;
    private decimal _minValue;
    internal Numeric10FacetsChecker(decimal minVal, decimal maxVal);
    private static Numeric10FacetsChecker();
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(decimal value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(long value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(int value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(short value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    internal bool MatchEnumeration(decimal value, ArrayList enumeration, XmlValueConverter valueConverter);
    internal Exception CheckTotalAndFractionDigits(decimal value, int totalDigits, int fractionDigits, bool checkTotal, bool checkFraction);
}
internal class System.Xml.Schema.Numeric2FacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(double value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(float value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    private bool MatchEnumeration(double value, ArrayList enumeration, XmlValueConverter valueConverter);
}
internal class System.Xml.Schema.Parser : object {
    private SchemaType _schemaType;
    private XmlNameTable _nameTable;
    private SchemaNames _schemaNames;
    private ValidationEventHandler _eventHandler;
    private XmlNamespaceManager _namespaceManager;
    private XmlReader _reader;
    private PositionInfo _positionInfo;
    private bool _isProcessNamespaces;
    private int _schemaXmlDepth;
    private int _markupDepth;
    private SchemaBuilder _builder;
    private XmlSchema _schema;
    private SchemaInfo _xdrSchema;
    private XmlResolver _xmlResolver;
    private XmlDocument _dummyDocument;
    private bool _processMarkup;
    private XmlNode _parentNode;
    private XmlNamespaceManager _annotationNSManager;
    private string _xmlns;
    private XmlCharType _xmlCharType;
    public XmlSchema XmlSchema { get; }
    unknown XmlResolver XmlResolver {internal set; }
    public SchemaInfo XdrSchema { get; }
    public Parser(SchemaType schemaType, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public SchemaType Parse(XmlReader reader, string targetNamespace);
    public void StartParsing(XmlReader reader, string targetNamespace);
    private bool CheckSchemaRoot(SchemaType rootType, String& code);
    public SchemaType FinishParsing();
    public XmlSchema get_XmlSchema();
    internal void set_XmlResolver(XmlResolver value);
    public SchemaInfo get_XdrSchema();
    public bool ParseReaderNode();
    private void ProcessAppInfoDocMarkup(bool root);
    private XmlElement LoadElementNode(bool root);
    private XmlAttribute CreateXmlNsAttribute(string prefix, string value);
    private XmlAttribute LoadAttributeNode();
    private XmlEntityReference LoadEntityReferenceInAttribute();
    [AsyncStateMachineAttribute("System.Xml.Schema.Parser/<StartParsingAsync>d__37")]
public Task StartParsingAsync(XmlReader reader, string targetNamespace);
}
internal class System.Xml.Schema.ParticleContentValidator : ContentValidator {
    private SymbolsDictionary _symbols;
    private Positions _positions;
    private Stack _stack;
    private SyntaxTreeNode _contentNode;
    private bool _isPartial;
    private int _minMaxNodesCount;
    private bool _enableUpaCheck;
    public ParticleContentValidator(XmlSchemaContentType contentType);
    public ParticleContentValidator(XmlSchemaContentType contentType, bool enableUpaCheck);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public void Start();
    public void OpenGroup();
    public void CloseGroup();
    public bool Exists(XmlQualifiedName name);
    public void AddName(XmlQualifiedName name, object particle);
    public void AddNamespaceList(NamespaceList namespaceList, object particle);
    private void AddLeafNode(SyntaxTreeNode node);
    public void AddChoice();
    public void AddSequence();
    public void AddStar();
    public void AddPlus();
    public void AddQMark();
    public void AddLeafRange(decimal min, decimal max);
    private void Closure(InteriorNode node);
    public ContentValidator Finish(bool useDFA);
    private BitSet[] CalculateTotalFollowposForRangeNodes(BitSet firstpos, BitSet[] followpos, BitSet& posWithRangeTerminals);
    private void CheckCMUPAWithLeafRangeNodes(BitSet curpos);
    private BitSet GetApplicableMinMaxFollowPos(BitSet curpos, BitSet posWithRangeTerminals, BitSet[] minmaxFollowPos);
    private void CheckUniqueParticleAttribution(BitSet firstpos, BitSet[] followpos);
    private void CheckUniqueParticleAttribution(BitSet curpos);
    private Int32[][] BuildTransitionTable(BitSet firstpos, BitSet[] followpos, int endMarkerPos);
}
internal class System.Xml.Schema.PlusNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.Position : ValueType {
    public int symbol;
    public object particle;
    public Position(int symbol, object particle);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.Positions : object {
    private ArrayList _positions;
    public Position Item { get; }
    public int Count { get; }
    public int Add(int symbol, object particle);
    public Position get_Item(int pos);
    public int get_Count();
}
internal class System.Xml.Schema.Preprocessor : BaseProcessor {
    private string _xmlns;
    private string _nsXsi;
    private string _targetNamespace;
    private XmlSchema _rootSchema;
    private XmlSchema _currentSchema;
    private XmlSchemaForm _elementFormDefault;
    private XmlSchemaForm _attributeFormDefault;
    private XmlSchemaDerivationMethod _blockDefault;
    private XmlSchemaDerivationMethod _finalDefault;
    private Hashtable _schemaLocations;
    private Hashtable _chameleonSchemas;
    private Hashtable _referenceNamespaces;
    private Hashtable _processedExternals;
    private SortedList _lockList;
    private XmlReaderSettings _readerSettings;
    private XmlSchema _rootSchemaForRedefine;
    private ArrayList _redefinedList;
    private static XmlSchema s_builtInSchemaForXmlNS;
    private static XmlSchemaDerivationMethod schemaBlockDefaultAllowed;
    private static XmlSchemaDerivationMethod schemaFinalDefaultAllowed;
    private static XmlSchemaDerivationMethod elementBlockAllowed;
    private static XmlSchemaDerivationMethod elementFinalAllowed;
    private static XmlSchemaDerivationMethod simpleTypeFinalAllowed;
    private static XmlSchemaDerivationMethod complexTypeBlockAllowed;
    private static XmlSchemaDerivationMethod complexTypeFinalAllowed;
    private XmlResolver _xmlResolver;
    unknown XmlResolver XmlResolver {internal set; }
    internal XmlReaderSettings ReaderSettings { get; internal set; }
    unknown Hashtable SchemaLocations {internal set; }
    unknown Hashtable ChameleonSchemas {internal set; }
    internal XmlSchema RootSchema { get; }
    public Preprocessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public Preprocessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings);
    public bool Execute(XmlSchema schema, string targetNamespace, bool loadExternals);
    private void Cleanup(XmlSchema schema);
    private void CleanupRedefine(XmlSchemaExternal include);
    internal void set_XmlResolver(XmlResolver value);
    internal XmlReaderSettings get_ReaderSettings();
    internal void set_ReaderSettings(XmlReaderSettings value);
    internal void set_SchemaLocations(Hashtable value);
    internal void set_ChameleonSchemas(Hashtable value);
    internal XmlSchema get_RootSchema();
    private void BuildSchemaList(XmlSchema schema);
    private void LoadExternals(XmlSchema schema);
    internal static XmlSchema GetBuildInSchema();
    private void BuildRefNamespaces(XmlSchema schema);
    private void ParseUri(string uri, string code, XmlSchemaObject sourceSchemaObject);
    private void Preprocess(XmlSchema schema, string targetNamespace, ArrayList imports);
    private void CopyIncludedComponents(XmlSchema includedSchema, XmlSchema schema);
    private void PreprocessRedefine(RedefineEntry redefineEntry);
    private void GetIncludedSet(XmlSchema schema, ArrayList includesList);
    internal static XmlSchema GetParentSchema(XmlSchemaObject currentSchemaObject);
    private void SetSchemaDefaults(XmlSchema schema);
    private int CountGroupSelfReference(XmlSchemaObjectCollection items, XmlQualifiedName name, XmlSchemaGroup redefined);
    private void CheckRefinedGroup(XmlSchemaGroup group);
    private void CheckRefinedAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private void CheckRefinedSimpleType(XmlSchemaSimpleType stype);
    private void CheckRefinedComplexType(XmlSchemaComplexType ctype);
    private void PreprocessAttribute(XmlSchemaAttribute attribute);
    private void PreprocessLocalAttribute(XmlSchemaAttribute attribute);
    private void PreprocessAttributeContent(XmlSchemaAttribute attribute);
    private void PreprocessAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private void PreprocessElement(XmlSchemaElement element);
    private void PreprocessLocalElement(XmlSchemaElement element);
    private void PreprocessElementContent(XmlSchemaElement element);
    private void PreprocessIdentityConstraint(XmlSchemaIdentityConstraint constraint);
    private void PreprocessSimpleType(XmlSchemaSimpleType simpleType, bool local);
    private void PreprocessComplexType(XmlSchemaComplexType complexType, bool local);
    private void PreprocessGroup(XmlSchemaGroup group);
    private void PreprocessNotation(XmlSchemaNotation notation);
    private void PreprocessParticle(XmlSchemaParticle particle);
    private void PreprocessAttributes(XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaObject parent);
    private void ValidateIdAttribute(XmlSchemaObject xso);
    private void ValidateNameAttribute(XmlSchemaObject xso);
    private void ValidateQNameAttribute(XmlSchemaObject xso, string attributeName, XmlQualifiedName value);
    private Uri ResolveSchemaLocationUri(XmlSchema enclosingSchema, string location);
    private object GetSchemaEntity(Uri ruri);
    private XmlSchema GetChameleonSchema(string targetNamespace, XmlSchema schema);
    private void SetParent(XmlSchemaObject child, XmlSchemaObject parent);
    private void PreprocessAnnotation(XmlSchemaObject schemaObject);
    private void PreprocessAnnotation(XmlSchemaAnnotation annotation);
}
internal class System.Xml.Schema.QmarkNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.QNameFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(XmlQualifiedName value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    private bool MatchEnumeration(XmlQualifiedName value, ArrayList enumeration);
}
internal class System.Xml.Schema.RangeContentValidator : ContentValidator {
    private BitSet _firstpos;
    private BitSet[] _followpos;
    private BitSet _positionsWithRangeTerminals;
    private SymbolsDictionary _symbols;
    private Positions _positions;
    private int _minMaxNodesCount;
    private int _endMarkerPos;
    internal RangeContentValidator(BitSet firstpos, BitSet[] followpos, SymbolsDictionary symbols, Positions positions, int endMarkerPos, XmlSchemaContentType contentType, bool isEmptiable, BitSet positionsWithRangeTerminals, int minmaxNodesCount);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.RangePositionInfo : ValueType {
    public BitSet curpos;
    public Decimal[] rangeCounters;
}
internal class System.Xml.Schema.RedefineEntry : object {
    internal XmlSchemaRedefine redefine;
    internal XmlSchema schemaToUpdate;
    public RedefineEntry(XmlSchemaRedefine external, XmlSchema schema);
}
internal class System.Xml.Schema.RestrictionFacets : object {
    internal int Length;
    internal int MinLength;
    internal int MaxLength;
    internal ArrayList Patterns;
    internal ArrayList Enumeration;
    internal XmlSchemaWhiteSpace WhiteSpace;
    internal object MaxInclusive;
    internal object MaxExclusive;
    internal object MinInclusive;
    internal object MinExclusive;
    internal int TotalDigits;
    internal int FractionDigits;
    internal RestrictionFlags Flags;
    internal RestrictionFlags FixedFlags;
}
[FlagsAttribute]
internal enum System.Xml.Schema.RestrictionFlags : Enum {
    public int value__;
    public static RestrictionFlags Length;
    public static RestrictionFlags MinLength;
    public static RestrictionFlags MaxLength;
    public static RestrictionFlags Pattern;
    public static RestrictionFlags Enumeration;
    public static RestrictionFlags WhiteSpace;
    public static RestrictionFlags MaxInclusive;
    public static RestrictionFlags MaxExclusive;
    public static RestrictionFlags MinInclusive;
    public static RestrictionFlags MinExclusive;
    public static RestrictionFlags TotalDigits;
    public static RestrictionFlags FractionDigits;
}
internal class System.Xml.Schema.SchemaAttDef : SchemaDeclBase {
    private string _defExpanded;
    private int _lineNum;
    private int _linePos;
    private int _valueLineNum;
    private int _valueLinePos;
    private Reserve _reserved;
    private bool _defaultValueChecked;
    private XmlSchemaAttribute _schemaAttribute;
    public static SchemaAttDef Empty;
    private string System.Xml.IDtdAttributeInfo.Prefix { get; }
    private string System.Xml.IDtdAttributeInfo.LocalName { get; }
    private int System.Xml.IDtdAttributeInfo.LineNumber { get; }
    private int System.Xml.IDtdAttributeInfo.LinePosition { get; }
    private bool System.Xml.IDtdAttributeInfo.IsNonCDataType { get; }
    private bool System.Xml.IDtdAttributeInfo.IsDeclaredInExternal { get; }
    private bool System.Xml.IDtdAttributeInfo.IsXmlAttribute { get; }
    private string System.Xml.IDtdDefaultAttributeInfo.DefaultValueExpanded { get; }
    private object System.Xml.IDtdDefaultAttributeInfo.DefaultValueTyped { get; }
    private int System.Xml.IDtdDefaultAttributeInfo.ValueLineNumber { get; }
    private int System.Xml.IDtdDefaultAttributeInfo.ValueLinePosition { get; }
    internal int LinePosition { get; internal set; }
    internal int LineNumber { get; internal set; }
    internal int ValueLinePosition { get; internal set; }
    internal int ValueLineNumber { get; internal set; }
    internal string DefaultValueExpanded { get; internal set; }
    internal XmlTokenizedType TokenizedType { get; internal set; }
    internal Reserve Reserved { get; internal set; }
    internal bool DefaultValueChecked { get; }
    internal XmlSchemaAttribute SchemaAttribute { get; internal set; }
    public SchemaAttDef(XmlQualifiedName name, string prefix);
    public SchemaAttDef(XmlQualifiedName name);
    private static SchemaAttDef();
    private sealed virtual override string System.Xml.IDtdAttributeInfo.get_Prefix();
    private sealed virtual override string System.Xml.IDtdAttributeInfo.get_LocalName();
    private sealed virtual override int System.Xml.IDtdAttributeInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IDtdAttributeInfo.get_LinePosition();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsNonCDataType();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsDeclaredInExternal();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsXmlAttribute();
    private sealed virtual override string System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueExpanded();
    private sealed virtual override object System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueTyped();
    private sealed virtual override int System.Xml.IDtdDefaultAttributeInfo.get_ValueLineNumber();
    private sealed virtual override int System.Xml.IDtdDefaultAttributeInfo.get_ValueLinePosition();
    internal int get_LinePosition();
    internal void set_LinePosition(int value);
    internal int get_LineNumber();
    internal void set_LineNumber(int value);
    internal int get_ValueLinePosition();
    internal void set_ValueLinePosition(int value);
    internal int get_ValueLineNumber();
    internal void set_ValueLineNumber(int value);
    internal string get_DefaultValueExpanded();
    internal void set_DefaultValueExpanded(string value);
    internal XmlTokenizedType get_TokenizedType();
    internal void set_TokenizedType(XmlTokenizedType value);
    internal Reserve get_Reserved();
    internal void set_Reserved(Reserve value);
    internal bool get_DefaultValueChecked();
    internal XmlSchemaAttribute get_SchemaAttribute();
    internal void set_SchemaAttribute(XmlSchemaAttribute value);
    internal void CheckXmlSpace(IValidationEventHandling validationEventHandling);
    internal SchemaAttDef Clone();
}
internal abstract class System.Xml.Schema.SchemaBuilder : object {
    internal abstract virtual bool ProcessElement(string prefix, string name, string ns);
    internal abstract virtual void ProcessAttribute(string prefix, string name, string ns, string value);
    internal abstract virtual bool IsContentParsed();
    internal abstract virtual void ProcessMarkup(XmlNode[] markup);
    internal abstract virtual void ProcessCData(string value);
    internal abstract virtual void StartChildren();
    internal abstract virtual void EndChildren();
}
internal class System.Xml.Schema.SchemaCollectionCompiler : BaseProcessor {
    private bool _compileContentModel;
    private XmlSchemaObjectTable _examplars;
    private Stack _complexTypeStack;
    private XmlSchema _schema;
    public SchemaCollectionCompiler(XmlNameTable nameTable, ValidationEventHandler eventHandler);
    public bool Execute(XmlSchema schema, SchemaInfo schemaInfo, bool compileContentModel);
    private void Prepare();
    private void Cleanup();
    internal static void Cleanup(XmlSchema schema);
    private void Compile();
    private void Output(SchemaInfo schemaInfo);
    private static void CleanupAttribute(XmlSchemaAttribute attribute);
    private static void CleanupAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private static void CleanupComplexType(XmlSchemaComplexType complexType);
    private static void CleanupSimpleType(XmlSchemaSimpleType simpleType);
    private static void CleanupElement(XmlSchemaElement element);
    private static void CleanupAttributes(XmlSchemaObjectCollection attributes);
    private static void CleanupGroup(XmlSchemaGroup group);
    private static void CleanupParticle(XmlSchemaParticle particle);
    private void CompileSubstitutionGroup(XmlSchemaSubstitutionGroupV1Compat substitutionGroup);
    private void CheckSubstitutionGroup(XmlSchemaSubstitutionGroup substitutionGroup);
    private void CompileGroup(XmlSchemaGroup group);
    private void CompileSimpleType(XmlSchemaSimpleType simpleType);
    private XmlSchemaSimpleType[] CompileBaseMemberTypes(XmlSchemaSimpleType simpleType);
    private void CheckUnionType(XmlSchemaSimpleType unionMember, ArrayList memberTypeDefinitions, XmlSchemaSimpleType parentType);
    private void CompileComplexType(XmlSchemaComplexType complexType);
    private void CompileSimpleContentExtension(XmlSchemaComplexType complexType, XmlSchemaSimpleContentExtension simpleExtension);
    private void CompileSimpleContentRestriction(XmlSchemaComplexType complexType, XmlSchemaSimpleContentRestriction simpleRestriction);
    private void CompileComplexContentExtension(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentExtension complexExtension);
    private void CompileComplexContentRestriction(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentRestriction complexRestriction);
    private void CheckParticleDerivation(XmlSchemaComplexType complexType);
    private XmlSchemaParticle CompileContentTypeParticle(XmlSchemaParticle particle, bool substitution);
    private XmlSchemaParticle CannonicalizeParticle(XmlSchemaParticle particle, bool root, bool substitution);
    private XmlSchemaParticle CannonicalizeElement(XmlSchemaElement element, bool substitution);
    private XmlSchemaParticle CannonicalizeGroupRef(XmlSchemaGroupRef groupRef, bool root, bool substitution);
    private XmlSchemaParticle CannonicalizeAll(XmlSchemaAll all, bool root, bool substitution);
    private XmlSchemaParticle CannonicalizeChoice(XmlSchemaChoice choice, bool root, bool substitution);
    private XmlSchemaParticle CannonicalizeSequence(XmlSchemaSequence sequence, bool root, bool substitution);
    private bool IsValidRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle);
    private bool IsElementFromElement(XmlSchemaElement derivedElement, XmlSchemaElement baseElement);
    private bool IsElementFromAny(XmlSchemaElement derivedElement, XmlSchemaAny baseAny);
    private bool IsAnyFromAny(XmlSchemaAny derivedAny, XmlSchemaAny baseAny);
    private bool IsGroupBaseFromAny(XmlSchemaGroupBase derivedGroupBase, XmlSchemaAny baseAny);
    private bool IsElementFromGroupBase(XmlSchemaElement derivedElement, XmlSchemaGroupBase baseGroupBase, bool skipEmptableOnly);
    private bool IsGroupBaseFromGroupBase(XmlSchemaGroupBase derivedGroupBase, XmlSchemaGroupBase baseGroupBase, bool skipEmptableOnly);
    private bool IsSequenceFromAll(XmlSchemaSequence derivedSequence, XmlSchemaAll baseAll);
    private bool IsSequenceFromChoice(XmlSchemaSequence derivedSequence, XmlSchemaChoice baseChoice);
    private void CalculateSequenceRange(XmlSchemaSequence sequence, Decimal& minOccurs, Decimal& maxOccurs);
    private bool IsValidOccurrenceRangeRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle);
    private bool IsValidOccurrenceRangeRestriction(decimal minOccurs, decimal maxOccurs, decimal baseMinOccurs, decimal baseMaxOccurs);
    private int GetMappingParticle(XmlSchemaParticle particle, XmlSchemaObjectCollection collection);
    private bool IsParticleEmptiable(XmlSchemaParticle particle);
    private void CalculateEffectiveTotalRange(XmlSchemaParticle particle, Decimal& minOccurs, Decimal& maxOccurs);
    private void PushComplexType(XmlSchemaComplexType complexType);
    private XmlSchemaContentType GetSchemaContentType(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaParticle particle);
    private void CompileAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private void CompileLocalAttributes(XmlSchemaComplexType baseType, XmlSchemaComplexType derivedType, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaDerivationMethod derivedBy);
    private XmlSchemaAnyAttribute CompileAnyAttributeUnion(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b);
    private XmlSchemaAnyAttribute CompileAnyAttributeIntersection(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b);
    private void CompileAttribute(XmlSchemaAttribute xa);
    private void CompileIdentityConstraint(XmlSchemaIdentityConstraint xi);
    private void CompileElement(XmlSchemaElement xe);
    private ContentValidator CompileComplexContent(XmlSchemaComplexType complexType);
    private void BuildParticleContentModel(ParticleContentValidator contentValidator, XmlSchemaParticle particle);
    private void CompileParticleElements(XmlSchemaComplexType complexType, XmlSchemaParticle particle);
    private void CompileCompexTypeElements(XmlSchemaComplexType complexType);
    private XmlSchemaSimpleType GetSimpleType(XmlQualifiedName name);
    private XmlSchemaComplexType GetComplexType(XmlQualifiedName name);
    private XmlSchemaType GetAnySchemaType(XmlQualifiedName name);
}
internal class System.Xml.Schema.SchemaCollectionPreprocessor : BaseProcessor {
    private XmlSchema _schema;
    private string _targetNamespace;
    private bool _buildinIncluded;
    private XmlSchemaForm _elementFormDefault;
    private XmlSchemaForm _attributeFormDefault;
    private XmlSchemaDerivationMethod _blockDefault;
    private XmlSchemaDerivationMethod _finalDefault;
    private Hashtable _schemaLocations;
    private Hashtable _referenceNamespaces;
    private string _xmlns;
    private static XmlSchemaDerivationMethod schemaBlockDefaultAllowed;
    private static XmlSchemaDerivationMethod schemaFinalDefaultAllowed;
    private static XmlSchemaDerivationMethod elementBlockAllowed;
    private static XmlSchemaDerivationMethod elementFinalAllowed;
    private static XmlSchemaDerivationMethod simpleTypeFinalAllowed;
    private static XmlSchemaDerivationMethod complexTypeBlockAllowed;
    private static XmlSchemaDerivationMethod complexTypeFinalAllowed;
    private XmlResolver _xmlResolver;
    unknown XmlResolver XmlResolver {internal set; }
    public SchemaCollectionPreprocessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public bool Execute(XmlSchema schema, string targetNamespace, bool loadExternals, XmlSchemaCollection xsc);
    private void Cleanup(XmlSchema schema);
    internal void set_XmlResolver(XmlResolver value);
    private void LoadExternals(XmlSchema schema, XmlSchemaCollection xsc);
    private void BuildRefNamespaces(XmlSchema schema);
    private void Preprocess(XmlSchema schema, string targetNamespace, Compositor compositor);
    private void PreprocessRedefine(XmlSchemaRedefine redefine);
    private int CountGroupSelfReference(XmlSchemaObjectCollection items, XmlQualifiedName name);
    private void CheckRefinedGroup(XmlSchemaGroup group);
    private void CheckRefinedAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private void CheckRefinedSimpleType(XmlSchemaSimpleType stype);
    private void CheckRefinedComplexType(XmlSchemaComplexType ctype);
    private void PreprocessAttribute(XmlSchemaAttribute attribute);
    private void PreprocessLocalAttribute(XmlSchemaAttribute attribute);
    private void PreprocessAttributeContent(XmlSchemaAttribute attribute);
    private void PreprocessAttributeGroup(XmlSchemaAttributeGroup attributeGroup);
    private void PreprocessElement(XmlSchemaElement element);
    private void PreprocessLocalElement(XmlSchemaElement element);
    private void PreprocessElementContent(XmlSchemaElement element);
    private void PreprocessIdentityConstraint(XmlSchemaIdentityConstraint constraint);
    private void PreprocessSimpleType(XmlSchemaSimpleType simpleType, bool local);
    private void PreprocessComplexType(XmlSchemaComplexType complexType, bool local);
    private void PreprocessGroup(XmlSchemaGroup group);
    private void PreprocessNotation(XmlSchemaNotation notation);
    private void PreprocessParticle(XmlSchemaParticle particle);
    private void PreprocessAttributes(XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaObject parent);
    private void ValidateIdAttribute(XmlSchemaObject xso);
    private void ValidateNameAttribute(XmlSchemaObject xso);
    private void ValidateQNameAttribute(XmlSchemaObject xso, string attributeName, XmlQualifiedName value);
    private void SetParent(XmlSchemaObject child, XmlSchemaObject parent);
    private void PreprocessAnnotation(XmlSchemaObject schemaObject);
    private Uri ResolveSchemaLocationUri(XmlSchema enclosingSchema, string location);
    private Stream GetSchemaEntity(Uri ruri);
}
internal abstract class System.Xml.Schema.SchemaDeclBase : object {
    protected XmlQualifiedName name;
    protected string prefix;
    protected bool isDeclaredInExternal;
    protected Use presence;
    protected XmlSchemaType schemaType;
    protected XmlSchemaDatatype datatype;
    protected string defaultValueRaw;
    protected object defaultValueTyped;
    protected long maxLength;
    protected long minLength;
    protected List`1<string> values;
    internal XmlQualifiedName Name { get; internal set; }
    internal string Prefix { get; internal set; }
    internal bool IsDeclaredInExternal { get; internal set; }
    internal Use Presence { get; internal set; }
    internal long MaxLength { get; internal set; }
    internal long MinLength { get; internal set; }
    internal XmlSchemaType SchemaType { get; internal set; }
    internal XmlSchemaDatatype Datatype { get; internal set; }
    internal List`1<string> Values { get; internal set; }
    internal string DefaultValueRaw { get; internal set; }
    internal object DefaultValueTyped { get; internal set; }
    protected SchemaDeclBase(XmlQualifiedName name, string prefix);
    internal XmlQualifiedName get_Name();
    internal void set_Name(XmlQualifiedName value);
    internal string get_Prefix();
    internal void set_Prefix(string value);
    internal bool get_IsDeclaredInExternal();
    internal void set_IsDeclaredInExternal(bool value);
    internal Use get_Presence();
    internal void set_Presence(Use value);
    internal long get_MaxLength();
    internal void set_MaxLength(long value);
    internal long get_MinLength();
    internal void set_MinLength(long value);
    internal XmlSchemaType get_SchemaType();
    internal void set_SchemaType(XmlSchemaType value);
    internal XmlSchemaDatatype get_Datatype();
    internal void set_Datatype(XmlSchemaDatatype value);
    internal void AddValue(string value);
    internal List`1<string> get_Values();
    internal void set_Values(List`1<string> value);
    internal string get_DefaultValueRaw();
    internal void set_DefaultValueRaw(string value);
    internal object get_DefaultValueTyped();
    internal void set_DefaultValueTyped(object value);
    internal bool CheckEnumeration(object pVal);
    internal bool CheckValue(object pVal);
}
internal class System.Xml.Schema.SchemaElementDecl : SchemaDeclBase {
    private Dictionary`2<XmlQualifiedName, SchemaAttDef> _attdefs;
    private List`1<IDtdDefaultAttributeInfo> _defaultAttdefs;
    private bool _isIdDeclared;
    private bool _hasNonCDataAttribute;
    private bool _isAbstract;
    private bool _isNillable;
    private bool _hasRequiredAttribute;
    private bool _isNotationDeclared;
    private Dictionary`2<XmlQualifiedName, XmlQualifiedName> _prohibitedAttributes;
    private ContentValidator _contentValidator;
    private XmlSchemaAnyAttribute _anyAttribute;
    private XmlSchemaDerivationMethod _block;
    private CompiledIdentityConstraint[] _constraints;
    private XmlSchemaElement _schemaElement;
    internal static SchemaElementDecl Empty;
    private string System.Xml.IDtdAttributeListInfo.Prefix { get; }
    private string System.Xml.IDtdAttributeListInfo.LocalName { get; }
    private bool System.Xml.IDtdAttributeListInfo.HasNonCDataAttributes { get; }
    internal bool IsIdDeclared { get; internal set; }
    internal bool HasNonCDataAttribute { get; internal set; }
    internal bool IsAbstract { get; internal set; }
    internal bool IsNillable { get; internal set; }
    internal XmlSchemaDerivationMethod Block { get; internal set; }
    internal bool IsNotationDeclared { get; internal set; }
    internal bool HasDefaultAttribute { get; }
    internal bool HasRequiredAttribute { get; internal set; }
    internal ContentValidator ContentValidator { get; internal set; }
    internal XmlSchemaAnyAttribute AnyAttribute { get; internal set; }
    internal CompiledIdentityConstraint[] Constraints { get; internal set; }
    internal XmlSchemaElement SchemaElement { get; internal set; }
    internal IList`1<IDtdDefaultAttributeInfo> DefaultAttDefs { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> AttDefs { get; }
    internal Dictionary`2<XmlQualifiedName, XmlQualifiedName> ProhibitedAttributes { get; }
    internal SchemaElementDecl(XmlSchemaDatatype dtype);
    internal SchemaElementDecl(XmlQualifiedName name, string prefix);
    private static SchemaElementDecl();
    internal static SchemaElementDecl CreateAnyTypeElementDecl();
    private sealed virtual override string System.Xml.IDtdAttributeListInfo.get_Prefix();
    private sealed virtual override string System.Xml.IDtdAttributeListInfo.get_LocalName();
    private sealed virtual override bool System.Xml.IDtdAttributeListInfo.get_HasNonCDataAttributes();
    private sealed virtual override IDtdAttributeInfo System.Xml.IDtdAttributeListInfo.LookupAttribute(string prefix, string localName);
    private sealed virtual override IEnumerable`1<IDtdDefaultAttributeInfo> System.Xml.IDtdAttributeListInfo.LookupDefaultAttributes();
    private sealed virtual override IDtdAttributeInfo System.Xml.IDtdAttributeListInfo.LookupIdAttribute();
    internal bool get_IsIdDeclared();
    internal void set_IsIdDeclared(bool value);
    internal bool get_HasNonCDataAttribute();
    internal void set_HasNonCDataAttribute(bool value);
    internal SchemaElementDecl Clone();
    internal bool get_IsAbstract();
    internal void set_IsAbstract(bool value);
    internal bool get_IsNillable();
    internal void set_IsNillable(bool value);
    internal XmlSchemaDerivationMethod get_Block();
    internal void set_Block(XmlSchemaDerivationMethod value);
    internal bool get_IsNotationDeclared();
    internal void set_IsNotationDeclared(bool value);
    internal bool get_HasDefaultAttribute();
    internal bool get_HasRequiredAttribute();
    internal void set_HasRequiredAttribute(bool value);
    internal ContentValidator get_ContentValidator();
    internal void set_ContentValidator(ContentValidator value);
    internal XmlSchemaAnyAttribute get_AnyAttribute();
    internal void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal CompiledIdentityConstraint[] get_Constraints();
    internal void set_Constraints(CompiledIdentityConstraint[] value);
    internal XmlSchemaElement get_SchemaElement();
    internal void set_SchemaElement(XmlSchemaElement value);
    internal void AddAttDef(SchemaAttDef attdef);
    internal SchemaAttDef GetAttDef(XmlQualifiedName qname);
    internal IList`1<IDtdDefaultAttributeInfo> get_DefaultAttDefs();
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> get_AttDefs();
    internal Dictionary`2<XmlQualifiedName, XmlQualifiedName> get_ProhibitedAttributes();
    internal void CheckAttributes(Hashtable presence, bool standalone);
}
internal class System.Xml.Schema.SchemaEntity : object {
    private XmlQualifiedName _qname;
    private string _url;
    private string _pubid;
    private string _text;
    private XmlQualifiedName _ndata;
    private int _lineNumber;
    private int _linePosition;
    private bool _isParameter;
    private bool _isExternal;
    private bool _parsingInProgress;
    private bool _isDeclaredInExternal;
    private string _baseURI;
    private string _declaredURI;
    private string System.Xml.IDtdEntityInfo.Name { get; }
    private bool System.Xml.IDtdEntityInfo.IsExternal { get; }
    private bool System.Xml.IDtdEntityInfo.IsDeclaredInExternal { get; }
    private bool System.Xml.IDtdEntityInfo.IsUnparsedEntity { get; }
    private bool System.Xml.IDtdEntityInfo.IsParameterEntity { get; }
    private string System.Xml.IDtdEntityInfo.BaseUriString { get; }
    private string System.Xml.IDtdEntityInfo.DeclaredUriString { get; }
    private string System.Xml.IDtdEntityInfo.SystemId { get; }
    private string System.Xml.IDtdEntityInfo.PublicId { get; }
    private string System.Xml.IDtdEntityInfo.Text { get; }
    private int System.Xml.IDtdEntityInfo.LineNumber { get; }
    private int System.Xml.IDtdEntityInfo.LinePosition { get; }
    internal XmlQualifiedName Name { get; }
    internal string Url { get; internal set; }
    internal string Pubid { get; internal set; }
    internal bool IsExternal { get; internal set; }
    internal bool DeclaredInExternal { get; internal set; }
    internal XmlQualifiedName NData { get; internal set; }
    internal string Text { get; internal set; }
    internal int Line { get; internal set; }
    internal int Pos { get; internal set; }
    internal string BaseURI { get; internal set; }
    internal bool ParsingInProgress { get; internal set; }
    internal string DeclaredURI { get; internal set; }
    internal SchemaEntity(XmlQualifiedName qname, bool isParameter);
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_Name();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsExternal();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsDeclaredInExternal();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsUnparsedEntity();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsParameterEntity();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_BaseUriString();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_DeclaredUriString();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_SystemId();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_PublicId();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_Text();
    private sealed virtual override int System.Xml.IDtdEntityInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IDtdEntityInfo.get_LinePosition();
    internal static bool IsPredefinedEntity(string n);
    internal XmlQualifiedName get_Name();
    internal string get_Url();
    internal void set_Url(string value);
    internal string get_Pubid();
    internal void set_Pubid(string value);
    internal bool get_IsExternal();
    internal void set_IsExternal(bool value);
    internal bool get_DeclaredInExternal();
    internal void set_DeclaredInExternal(bool value);
    internal XmlQualifiedName get_NData();
    internal void set_NData(XmlQualifiedName value);
    internal string get_Text();
    internal void set_Text(string value);
    internal int get_Line();
    internal void set_Line(int value);
    internal int get_Pos();
    internal void set_Pos(int value);
    internal string get_BaseURI();
    internal void set_BaseURI(string value);
    internal bool get_ParsingInProgress();
    internal void set_ParsingInProgress(bool value);
    internal string get_DeclaredURI();
    internal void set_DeclaredURI(string value);
}
internal class System.Xml.Schema.SchemaInfo : object {
    private Dictionary`2<XmlQualifiedName, SchemaElementDecl> _elementDecls;
    private Dictionary`2<XmlQualifiedName, SchemaElementDecl> _undeclaredElementDecls;
    private Dictionary`2<XmlQualifiedName, SchemaEntity> _generalEntities;
    private Dictionary`2<XmlQualifiedName, SchemaEntity> _parameterEntities;
    private XmlQualifiedName _docTypeName;
    private string _internalDtdSubset;
    private bool _hasNonCDataAttributes;
    private bool _hasDefaultAttributes;
    private Dictionary`2<string, bool> _targetNamespaces;
    private Dictionary`2<XmlQualifiedName, SchemaAttDef> _attributeDecls;
    private int _errorCount;
    private SchemaType _schemaType;
    private Dictionary`2<XmlQualifiedName, SchemaElementDecl> _elementDeclsByType;
    private Dictionary`2<string, SchemaNotation> _notations;
    public XmlQualifiedName DocTypeName { get; public set; }
    internal string InternalDtdSubset { get; internal set; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> ElementDecls { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> UndeclaredElementDecls { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> GeneralEntities { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> ParameterEntities { get; }
    internal SchemaType SchemaType { get; internal set; }
    internal Dictionary`2<string, bool> TargetNamespaces { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> ElementDeclsByType { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> AttributeDecls { get; }
    internal Dictionary`2<string, SchemaNotation> Notations { get; }
    internal int ErrorCount { get; internal set; }
    private bool System.Xml.IDtdInfo.HasDefaultAttributes { get; }
    private bool System.Xml.IDtdInfo.HasNonCDataAttributes { get; }
    private XmlQualifiedName System.Xml.IDtdInfo.Name { get; }
    private string System.Xml.IDtdInfo.InternalDtdSubset { get; }
    public XmlQualifiedName get_DocTypeName();
    public void set_DocTypeName(XmlQualifiedName value);
    internal string get_InternalDtdSubset();
    internal void set_InternalDtdSubset(string value);
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_ElementDecls();
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_UndeclaredElementDecls();
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_GeneralEntities();
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_ParameterEntities();
    internal SchemaType get_SchemaType();
    internal void set_SchemaType(SchemaType value);
    internal Dictionary`2<string, bool> get_TargetNamespaces();
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_ElementDeclsByType();
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> get_AttributeDecls();
    internal Dictionary`2<string, SchemaNotation> get_Notations();
    internal int get_ErrorCount();
    internal void set_ErrorCount(int value);
    internal SchemaElementDecl GetElementDecl(XmlQualifiedName qname);
    internal SchemaElementDecl GetTypeDecl(XmlQualifiedName qname);
    internal XmlSchemaElement GetElement(XmlQualifiedName qname);
    internal bool HasSchema(string ns);
    internal bool Contains(string ns);
    internal SchemaAttDef GetAttributeXdr(SchemaElementDecl ed, XmlQualifiedName qname);
    internal SchemaAttDef GetAttributeXsd(SchemaElementDecl ed, XmlQualifiedName qname, XmlSchemaObject partialValidationType, AttributeMatchState& attributeMatchState);
    internal SchemaAttDef GetAttributeXsd(SchemaElementDecl ed, XmlQualifiedName qname, Boolean& skip);
    internal void Add(SchemaInfo sinfo, ValidationEventHandler eventhandler);
    internal void Finish();
    private sealed virtual override bool System.Xml.IDtdInfo.get_HasDefaultAttributes();
    private sealed virtual override bool System.Xml.IDtdInfo.get_HasNonCDataAttributes();
    private sealed virtual override IDtdAttributeListInfo System.Xml.IDtdInfo.LookupAttributeList(string prefix, string localName);
    [IteratorStateMachineAttribute("System.Xml.Schema.SchemaInfo/<System-Xml-IDtdInfo-GetAttributeLists>d__58")]
private sealed virtual override IEnumerable`1<IDtdAttributeListInfo> System.Xml.IDtdInfo.GetAttributeLists();
    private sealed virtual override IDtdEntityInfo System.Xml.IDtdInfo.LookupEntity(string name);
    private sealed virtual override XmlQualifiedName System.Xml.IDtdInfo.get_Name();
    private sealed virtual override string System.Xml.IDtdInfo.get_InternalDtdSubset();
}
internal class System.Xml.Schema.SchemaNames : object {
    private XmlNameTable _nameTable;
    public string NsDataType;
    public string NsDataTypeAlias;
    public string NsDataTypeOld;
    public string NsXml;
    public string NsXmlNs;
    public string NsXdr;
    public string NsXdrAlias;
    public string NsXs;
    public string NsXsi;
    public string XsiType;
    public string XsiNil;
    public string XsiSchemaLocation;
    public string XsiNoNamespaceSchemaLocation;
    public string XsdSchema;
    public string XdrSchema;
    public XmlQualifiedName QnPCData;
    public XmlQualifiedName QnXml;
    public XmlQualifiedName QnXmlNs;
    public XmlQualifiedName QnDtDt;
    public XmlQualifiedName QnXmlLang;
    public XmlQualifiedName QnName;
    public XmlQualifiedName QnType;
    public XmlQualifiedName QnMaxOccurs;
    public XmlQualifiedName QnMinOccurs;
    public XmlQualifiedName QnInfinite;
    public XmlQualifiedName QnModel;
    public XmlQualifiedName QnOpen;
    public XmlQualifiedName QnClosed;
    public XmlQualifiedName QnContent;
    public XmlQualifiedName QnMixed;
    public XmlQualifiedName QnEmpty;
    public XmlQualifiedName QnEltOnly;
    public XmlQualifiedName QnTextOnly;
    public XmlQualifiedName QnOrder;
    public XmlQualifiedName QnSeq;
    public XmlQualifiedName QnOne;
    public XmlQualifiedName QnMany;
    public XmlQualifiedName QnRequired;
    public XmlQualifiedName QnYes;
    public XmlQualifiedName QnNo;
    public XmlQualifiedName QnString;
    public XmlQualifiedName QnID;
    public XmlQualifiedName QnIDRef;
    public XmlQualifiedName QnIDRefs;
    public XmlQualifiedName QnEntity;
    public XmlQualifiedName QnEntities;
    public XmlQualifiedName QnNmToken;
    public XmlQualifiedName QnNmTokens;
    public XmlQualifiedName QnEnumeration;
    public XmlQualifiedName QnDefault;
    public XmlQualifiedName QnXdrSchema;
    public XmlQualifiedName QnXdrElementType;
    public XmlQualifiedName QnXdrElement;
    public XmlQualifiedName QnXdrGroup;
    public XmlQualifiedName QnXdrAttributeType;
    public XmlQualifiedName QnXdrAttribute;
    public XmlQualifiedName QnXdrDataType;
    public XmlQualifiedName QnXdrDescription;
    public XmlQualifiedName QnXdrExtends;
    public XmlQualifiedName QnXdrAliasSchema;
    public XmlQualifiedName QnDtType;
    public XmlQualifiedName QnDtValues;
    public XmlQualifiedName QnDtMaxLength;
    public XmlQualifiedName QnDtMinLength;
    public XmlQualifiedName QnDtMax;
    public XmlQualifiedName QnDtMin;
    public XmlQualifiedName QnDtMinExclusive;
    public XmlQualifiedName QnDtMaxExclusive;
    public XmlQualifiedName QnTargetNamespace;
    public XmlQualifiedName QnVersion;
    public XmlQualifiedName QnFinalDefault;
    public XmlQualifiedName QnBlockDefault;
    public XmlQualifiedName QnFixed;
    public XmlQualifiedName QnAbstract;
    public XmlQualifiedName QnBlock;
    public XmlQualifiedName QnSubstitutionGroup;
    public XmlQualifiedName QnFinal;
    public XmlQualifiedName QnNillable;
    public XmlQualifiedName QnRef;
    public XmlQualifiedName QnBase;
    public XmlQualifiedName QnDerivedBy;
    public XmlQualifiedName QnNamespace;
    public XmlQualifiedName QnProcessContents;
    public XmlQualifiedName QnRefer;
    public XmlQualifiedName QnPublic;
    public XmlQualifiedName QnSystem;
    public XmlQualifiedName QnSchemaLocation;
    public XmlQualifiedName QnValue;
    public XmlQualifiedName QnUse;
    public XmlQualifiedName QnForm;
    public XmlQualifiedName QnElementFormDefault;
    public XmlQualifiedName QnAttributeFormDefault;
    public XmlQualifiedName QnItemType;
    public XmlQualifiedName QnMemberTypes;
    public XmlQualifiedName QnXPath;
    public XmlQualifiedName QnXsdSchema;
    public XmlQualifiedName QnXsdAnnotation;
    public XmlQualifiedName QnXsdInclude;
    public XmlQualifiedName QnXsdImport;
    public XmlQualifiedName QnXsdElement;
    public XmlQualifiedName QnXsdAttribute;
    public XmlQualifiedName QnXsdAttributeGroup;
    public XmlQualifiedName QnXsdAnyAttribute;
    public XmlQualifiedName QnXsdGroup;
    public XmlQualifiedName QnXsdAll;
    public XmlQualifiedName QnXsdChoice;
    public XmlQualifiedName QnXsdSequence;
    public XmlQualifiedName QnXsdAny;
    public XmlQualifiedName QnXsdNotation;
    public XmlQualifiedName QnXsdSimpleType;
    public XmlQualifiedName QnXsdComplexType;
    public XmlQualifiedName QnXsdUnique;
    public XmlQualifiedName QnXsdKey;
    public XmlQualifiedName QnXsdKeyRef;
    public XmlQualifiedName QnXsdSelector;
    public XmlQualifiedName QnXsdField;
    public XmlQualifiedName QnXsdMinExclusive;
    public XmlQualifiedName QnXsdMinInclusive;
    public XmlQualifiedName QnXsdMaxInclusive;
    public XmlQualifiedName QnXsdMaxExclusive;
    public XmlQualifiedName QnXsdTotalDigits;
    public XmlQualifiedName QnXsdFractionDigits;
    public XmlQualifiedName QnXsdLength;
    public XmlQualifiedName QnXsdMinLength;
    public XmlQualifiedName QnXsdMaxLength;
    public XmlQualifiedName QnXsdEnumeration;
    public XmlQualifiedName QnXsdPattern;
    public XmlQualifiedName QnXsdDocumentation;
    public XmlQualifiedName QnXsdAppinfo;
    public XmlQualifiedName QnSource;
    public XmlQualifiedName QnXsdComplexContent;
    public XmlQualifiedName QnXsdSimpleContent;
    public XmlQualifiedName QnXsdRestriction;
    public XmlQualifiedName QnXsdExtension;
    public XmlQualifiedName QnXsdUnion;
    public XmlQualifiedName QnXsdList;
    public XmlQualifiedName QnXsdWhiteSpace;
    public XmlQualifiedName QnXsdRedefine;
    public XmlQualifiedName QnXsdAnyType;
    internal XmlQualifiedName[] TokenToQName;
    public SchemaNames(XmlNameTable nameTable);
    public void CreateTokenToQNameTable();
    public SchemaType SchemaTypeFromRoot(string localName, string ns);
    public bool IsXSDRoot(string localName, string ns);
    public bool IsXDRRoot(string localName, string ns);
}
internal class System.Xml.Schema.SchemaNamespaceManager : XmlNamespaceManager {
    private XmlSchemaObject _node;
    public SchemaNamespaceManager(XmlSchemaObject node);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string ns);
}
internal class System.Xml.Schema.SchemaNotation : object {
    internal static int SYSTEM;
    internal static int PUBLIC;
    private XmlQualifiedName _name;
    private string _systemLiteral;
    private string _pubid;
    internal XmlQualifiedName Name { get; }
    internal string SystemLiteral { get; internal set; }
    internal string Pubid { get; internal set; }
    internal SchemaNotation(XmlQualifiedName name);
    internal XmlQualifiedName get_Name();
    internal string get_SystemLiteral();
    internal void set_SystemLiteral(string value);
    internal string get_Pubid();
    internal void set_Pubid(string value);
}
internal enum System.Xml.Schema.SchemaType : Enum {
    public int value__;
    public static SchemaType None;
    public static SchemaType DTD;
    public static SchemaType XDR;
    public static SchemaType XSD;
}
internal class System.Xml.Schema.SelectorActiveAxis : ActiveAxis {
    private ConstraintStruct _cs;
    private ArrayList _KSs;
    private int _KSpointer;
    public int lastDepth { get; }
    public SelectorActiveAxis(Asttree axisTree, ConstraintStruct cs);
    public int get_lastDepth();
    public virtual bool EndElement(string localname, string URN);
    public int PushKS(int errline, int errcol);
    public KeySequence PopKS();
}
internal class System.Xml.Schema.SequenceNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
internal class System.Xml.Schema.StarNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.StateUnion : ValueType {
    public int State;
    public int AllElementsRequired;
    public int CurPosIndex;
    public int NumberOfRunningPos;
}
internal class System.Xml.Schema.StringFacetsChecker : FacetsChecker {
    private static Regex s_languagePattern;
    private static Regex LanguagePattern { get; }
    private static Regex get_LanguagePattern();
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(string value, XmlSchemaDatatype datatype);
    internal Exception CheckValueFacets(string value, XmlSchemaDatatype datatype, bool verifyUri);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    private bool MatchEnumeration(string value, ArrayList enumeration, XmlSchemaDatatype datatype);
    private Exception CheckBuiltInFacets(string s, XmlTypeCode typeCode, bool verifyUri);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.SymbolsDictionary : object {
    private int _last;
    private Hashtable _names;
    private Hashtable _wildcards;
    private ArrayList _particles;
    private object _particleLast;
    private bool _isUpaEnforced;
    public int Count { get; }
    public bool IsUpaEnforced { get; public set; }
    public int Item { get; }
    public int get_Count();
    public bool get_IsUpaEnforced();
    public void set_IsUpaEnforced(bool value);
    public int AddName(XmlQualifiedName name, object particle);
    public void AddNamespaceList(NamespaceList list, object particle, bool allowLocal);
    private void AddWildcard(string wildcard, object particle);
    public ICollection GetNamespaceListSymbols(NamespaceList list);
    public int get_Item(XmlQualifiedName name);
    public bool Exists(XmlQualifiedName name);
    public object GetParticle(int symbol);
    public string NameOf(int symbol);
}
internal abstract class System.Xml.Schema.SyntaxTreeNode : object {
    public bool IsNullable { get; }
    public bool IsRangeNode { get; }
    public abstract virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public abstract virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public abstract virtual bool get_IsNullable();
    public virtual bool get_IsRangeNode();
}
internal class System.Xml.Schema.TypedObject : object {
    private DecimalStruct _dstruct;
    private object _ovalue;
    private string _svalue;
    private XmlSchemaDatatype _xsdtype;
    private int _dim;
    private bool _isList;
    public int Dim { get; }
    public bool IsList { get; }
    public bool IsDecimal { get; }
    public Decimal[] Dvalue { get; }
    public object Value { get; public set; }
    public XmlSchemaDatatype Type { get; public set; }
    public TypedObject(object obj, string svalue, XmlSchemaDatatype xsdtype);
    public int get_Dim();
    public bool get_IsList();
    public bool get_IsDecimal();
    public Decimal[] get_Dvalue();
    public object get_Value();
    public void set_Value(object value);
    public XmlSchemaDatatype get_Type();
    public void set_Type(XmlSchemaDatatype value);
    public virtual string ToString();
    public void SetDecimal();
    private bool ListDValueEquals(TypedObject other);
    public bool Equals(TypedObject other);
}
internal class System.Xml.Schema.UnionFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.UpaException : Exception {
    private object _particle1;
    private object _particle2;
    public object Particle1 { get; }
    public object Particle2 { get; }
    public UpaException(object particle1, object particle2);
    public object get_Particle1();
    public object get_Particle2();
}
public class System.Xml.Schema.ValidationEventArgs : EventArgs {
    private XmlSchemaException _ex;
    private XmlSeverityType _severity;
    public XmlSeverityType Severity { get; }
    public XmlSchemaException Exception { get; }
    public string Message { get; }
    internal ValidationEventArgs(XmlSchemaException ex);
    internal ValidationEventArgs(XmlSchemaException ex, XmlSeverityType severity);
    public XmlSeverityType get_Severity();
    public XmlSchemaException get_Exception();
    public string get_Message();
}
public class System.Xml.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.Schema.ValidationState : object {
    public bool IsNill;
    public bool IsDefault;
    public bool NeedValidateChildren;
    public bool CheckRequiredAttribute;
    public bool ValidationSkipped;
    public XmlSchemaContentProcessing ProcessContents;
    public XmlSchemaValidity Validity;
    public SchemaElementDecl ElementDecl;
    public SchemaElementDecl ElementDeclBeforeXsi;
    public string LocalName;
    public string Namespace;
    public ConstraintStruct[] Constr;
    public StateUnion CurrentState;
    public bool HasMatched;
    public BitSet[] CurPos;
    public BitSet AllElementsSet;
    public List`1<RangePositionInfo> RunningPositions;
    public bool TooComplex;
}
internal enum System.Xml.Schema.ValidatorState : Enum {
    public int value__;
    public static ValidatorState None;
    public static ValidatorState Start;
    public static ValidatorState TopLevelAttribute;
    public static ValidatorState TopLevelTextOrWS;
    public static ValidatorState Element;
    public static ValidatorState Attribute;
    public static ValidatorState EndOfAttributes;
    public static ValidatorState Text;
    public static ValidatorState Whitespace;
    public static ValidatorState EndElement;
    public static ValidatorState SkipToEndElement;
    public static ValidatorState Finish;
}
internal class System.Xml.Schema.XdrBuilder : SchemaBuilder {
    private static int XdrSchema;
    private static int XdrElementType;
    private static int XdrAttributeType;
    private static int XdrElement;
    private static int XdrAttribute;
    private static int XdrGroup;
    private static int XdrElementDatatype;
    private static int XdrAttributeDatatype;
    private static int SchemaFlagsNs;
    private static int StackIncrement;
    private static int SchemaOrderNone;
    private static int SchemaOrderMany;
    private static int SchemaOrderSequence;
    private static int SchemaOrderChoice;
    private static int SchemaOrderAll;
    private static int SchemaContentNone;
    private static int SchemaContentEmpty;
    private static int SchemaContentText;
    private static int SchemaContentMixed;
    private static int SchemaContentElement;
    private static Int32[] s_XDR_Root_Element;
    private static Int32[] s_XDR_Root_SubElements;
    private static Int32[] s_XDR_ElementType_SubElements;
    private static Int32[] s_XDR_AttributeType_SubElements;
    private static Int32[] s_XDR_Group_SubElements;
    private static XdrAttributeEntry[] s_XDR_Root_Attributes;
    private static XdrAttributeEntry[] s_XDR_ElementType_Attributes;
    private static XdrAttributeEntry[] s_XDR_AttributeType_Attributes;
    private static XdrAttributeEntry[] s_XDR_Element_Attributes;
    private static XdrAttributeEntry[] s_XDR_Attribute_Attributes;
    private static XdrAttributeEntry[] s_XDR_Group_Attributes;
    private static XdrAttributeEntry[] s_XDR_ElementDataType_Attributes;
    private static XdrAttributeEntry[] s_XDR_AttributeDataType_Attributes;
    private static XdrEntry[] s_schemaEntries;
    private SchemaInfo _SchemaInfo;
    private string _TargetNamespace;
    private XmlReader _reader;
    private PositionInfo _positionInfo;
    private ParticleContentValidator _contentValidator;
    private XdrEntry _CurState;
    private XdrEntry _NextState;
    private HWStack _StateHistory;
    private HWStack _GroupStack;
    private string _XdrName;
    private string _XdrPrefix;
    private ElementContent _ElementDef;
    private GroupContent _GroupDef;
    private AttributeContent _AttributeDef;
    private DeclBaseInfo _UndefinedAttributeTypes;
    private DeclBaseInfo _BaseDecl;
    private XmlNameTable _NameTable;
    private SchemaNames _SchemaNames;
    private XmlNamespaceManager _CurNsMgr;
    private string _Text;
    private ValidationEventHandler _validationEventHandler;
    private Hashtable _UndeclaredElements;
    private static string x_schema;
    private XmlResolver _xmlResolver;
    unknown XmlResolver XmlResolver {internal set; }
    internal XdrBuilder(XmlReader reader, XmlNamespaceManager curmgr, SchemaInfo sinfo, string targetNamspace, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventhandler);
    private static XdrBuilder();
    internal virtual bool ProcessElement(string prefix, string name, string ns);
    internal virtual void ProcessAttribute(string prefix, string name, string ns, string value);
    internal void set_XmlResolver(XmlResolver value);
    private bool LoadSchema(string uri);
    internal static bool IsXdrSchema(string uri);
    internal virtual bool IsContentParsed();
    internal virtual void ProcessMarkup(XmlNode[] markup);
    internal virtual void ProcessCData(string value);
    internal virtual void StartChildren();
    internal virtual void EndChildren();
    private void Push();
    private void Pop();
    private void PushGroupInfo();
    private void PopGroupInfo();
    private static void XDR_InitRoot(XdrBuilder builder, object obj);
    private static void XDR_BuildRoot_Name(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildRoot_ID(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BeginRoot(XdrBuilder builder);
    private static void XDR_EndRoot(XdrBuilder builder);
    private static void XDR_InitElementType(XdrBuilder builder, object obj);
    private static void XDR_BuildElementType_Name(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElementType_Content(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElementType_Model(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElementType_Order(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElementType_DtType(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElementType_DtValues(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElementType_DtMaxLength(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElementType_DtMinLength(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BeginElementType(XdrBuilder builder);
    private static void XDR_EndElementType(XdrBuilder builder);
    private static void XDR_InitAttributeType(XdrBuilder builder, object obj);
    private static void XDR_BuildAttributeType_Name(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttributeType_Required(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttributeType_Default(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttributeType_DtType(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttributeType_DtValues(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttributeType_DtMaxLength(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttributeType_DtMinLength(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BeginAttributeType(XdrBuilder builder);
    private static void XDR_EndAttributeType(XdrBuilder builder);
    private static void XDR_InitElement(XdrBuilder builder, object obj);
    private static void XDR_BuildElement_Type(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElement_MinOccurs(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildElement_MaxOccurs(XdrBuilder builder, object obj, string prefix);
    private static void XDR_EndElement(XdrBuilder builder);
    private static void XDR_InitAttribute(XdrBuilder builder, object obj);
    private static void XDR_BuildAttribute_Type(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttribute_Required(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildAttribute_Default(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BeginAttribute(XdrBuilder builder);
    private static void XDR_EndAttribute(XdrBuilder builder);
    private static void XDR_InitGroup(XdrBuilder builder, object obj);
    private static void XDR_BuildGroup_Order(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildGroup_MinOccurs(XdrBuilder builder, object obj, string prefix);
    private static void XDR_BuildGroup_MaxOccurs(XdrBuilder builder, object obj, string prefix);
    private static void XDR_EndGroup(XdrBuilder builder);
    private static void XDR_InitElementDtType(XdrBuilder builder, object obj);
    private static void XDR_EndElementDtType(XdrBuilder builder);
    private static void XDR_InitAttributeDtType(XdrBuilder builder, object obj);
    private static void XDR_EndAttributeDtType(XdrBuilder builder);
    private bool GetNextState(XmlQualifiedName qname);
    private bool IsSkipableElement(XmlQualifiedName qname);
    private bool IsSkipableAttribute(XmlQualifiedName qname);
    private int GetOrder(XmlQualifiedName qname);
    private void AddOrder();
    private static bool IsYes(object obj, XdrBuilder builder);
    private static UInt32 ParseMinOccurs(object obj, XdrBuilder builder);
    private static UInt32 ParseMaxOccurs(object obj, XdrBuilder builder);
    private static void HandleMinMax(ParticleContentValidator pContent, UInt32 cMin, UInt32 cMax);
    private static void ParseDtMaxLength(UInt32& cVal, object obj, XdrBuilder builder);
    private static void ParseDtMinLength(UInt32& cVal, object obj, XdrBuilder builder);
    private static void CompareMinMaxLength(UInt32 cMin, UInt32 cMax, XdrBuilder builder);
    private static bool ParseInteger(string str, UInt32& n);
    private void XDR_CheckAttributeDefault(DeclBaseInfo decl, SchemaAttDef pAttdef);
    private void SetAttributePresence(SchemaAttDef pAttdef, bool fRequired);
    private int GetContent(XmlQualifiedName qname);
    private bool GetModel(XmlQualifiedName qname);
    private XmlSchemaDatatype CheckDatatype(string str);
    private void CheckDefaultAttValue(SchemaAttDef attDef);
    private bool IsGlobal(int flags);
    private void SendValidationEvent(string code, String[] args, XmlSeverityType severity);
    private void SendValidationEvent(string code);
    private void SendValidationEvent(string code, string msg);
    private void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity);
}
internal class System.Xml.Schema.XdrValidator : BaseValidator {
    private static int STACK_INCREMENT;
    private HWStack _validationStack;
    private Hashtable _attPresence;
    private XmlQualifiedName _name;
    private XmlNamespaceManager _nsManager;
    private bool _isProcessContents;
    private Hashtable _IDs;
    private IdRefNode _idRefListHead;
    private Parser _inlineSchemaParser;
    private static string x_schema;
    private bool IsInlineSchemaStarted { get; }
    private bool HasSchema { get; }
    public bool PreserveWhitespace { get; }
    internal XdrValidator(BaseValidator validator);
    internal XdrValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    private void Init();
    public virtual void Validate();
    private void ValidateElement();
    private void ValidateChildElement();
    private bool get_IsInlineSchemaStarted();
    private void ProcessInlineSchema();
    private void ProcessElement();
    private void ValidateEndElement();
    private SchemaElementDecl ThoroughGetElementDecl();
    private void ValidateStartElement();
    private void ValidateEndStartElement();
    private void LoadSchemaFromLocation(string uri);
    private void LoadSchema(string uri);
    private bool get_HasSchema();
    public virtual bool get_PreserveWhitespace();
    private void ProcessTokenizedType(XmlTokenizedType ttype, string name);
    public virtual void CompleteValidation();
    private void CheckValue(string value, SchemaAttDef attdef);
    public static void CheckDefaultValue(string value, SchemaAttDef attdef, SchemaInfo sinfo, XmlNamespaceManager nsManager, XmlNameTable NameTable, object sender, ValidationEventHandler eventhandler, string baseUri, int lineNo, int linePos);
    internal void AddID(string name, object node);
    public virtual object FindId(string name);
    private void Push(XmlQualifiedName elementName);
    private void Pop();
    private void CheckForwardRefs();
    private XmlQualifiedName QualifiedName(string name, string ns);
}
internal class System.Xml.Schema.XmlAnyConverter : XmlBaseConverter {
    public static XmlValueConverter Item;
    public static XmlValueConverter AnyAtomic;
    protected XmlAnyConverter(XmlTypeCode typeCode);
    private static XmlAnyConverter();
    public virtual bool ToBoolean(object value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual decimal ToDecimal(object value);
    public virtual double ToDouble(object value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(object value);
    public virtual float ToSingle(object value);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private XPathNavigator ToNavigator(XPathNavigator nav);
}
internal class System.Xml.Schema.XmlAnyListConverter : XmlListConverter {
    public static XmlValueConverter ItemList;
    public static XmlValueConverter AnyAtomicList;
    protected XmlAnyListConverter(XmlBaseConverter atomicConverter);
    private static XmlAnyListConverter();
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
public class System.Xml.Schema.XmlAtomicValue : XPathItem {
    private XmlSchemaType _xmlType;
    private object _objVal;
    private TypeCode _clrType;
    private Union _unionVal;
    private NamespacePrefixForQName _nsPrefix;
    public bool IsNode { get; }
    public XmlSchemaType XmlType { get; }
    public Type ValueType { get; }
    public object TypedValue { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public string Value { get; }
    internal XmlAtomicValue(XmlSchemaType xmlType, bool value);
    internal XmlAtomicValue(XmlSchemaType xmlType, DateTime value);
    internal XmlAtomicValue(XmlSchemaType xmlType, double value);
    internal XmlAtomicValue(XmlSchemaType xmlType, int value);
    internal XmlAtomicValue(XmlSchemaType xmlType, long value);
    internal XmlAtomicValue(XmlSchemaType xmlType, string value);
    internal XmlAtomicValue(XmlSchemaType xmlType, string value, IXmlNamespaceResolver nsResolver);
    internal XmlAtomicValue(XmlSchemaType xmlType, object value);
    internal XmlAtomicValue(XmlSchemaType xmlType, object value, IXmlNamespaceResolver nsResolver);
    public XmlAtomicValue Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool get_IsNode();
    public virtual XmlSchemaType get_XmlType();
    public virtual Type get_ValueType();
    public virtual object get_TypedValue();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual object ValueAs(Type type, IXmlNamespaceResolver nsResolver);
    public virtual string get_Value();
    public virtual string ToString();
    private string GetPrefixFromQName(string value);
}
internal abstract class System.Xml.Schema.XmlBaseConverter : XmlValueConverter {
    private XmlSchemaType _schemaType;
    private XmlTypeCode _typeCode;
    private Type _clrTypeDefault;
    protected static Type ICollectionType;
    protected static Type IEnumerableType;
    protected static Type IListType;
    protected static Type ObjectArrayType;
    protected static Type StringArrayType;
    protected static Type XmlAtomicValueArrayType;
    protected static Type DecimalType;
    protected static Type Int32Type;
    protected static Type Int64Type;
    protected static Type StringType;
    protected static Type XmlAtomicValueType;
    protected static Type ObjectType;
    protected static Type ByteType;
    protected static Type Int16Type;
    protected static Type SByteType;
    protected static Type UInt16Type;
    protected static Type UInt32Type;
    protected static Type UInt64Type;
    protected static Type XPathItemType;
    protected static Type DoubleType;
    protected static Type SingleType;
    protected static Type DateTimeType;
    protected static Type DateTimeOffsetType;
    protected static Type BooleanType;
    protected static Type ByteArrayType;
    protected static Type XmlQualifiedNameType;
    protected static Type UriType;
    protected static Type TimeSpanType;
    protected static Type XPathNavigatorType;
    protected XmlSchemaType SchemaType { get; }
    protected XmlTypeCode TypeCode { get; }
    protected string XmlTypeName { get; }
    protected Type DefaultClrType { get; }
    protected XmlBaseConverter(XmlSchemaType schemaType);
    protected XmlBaseConverter(XmlTypeCode typeCode);
    protected XmlBaseConverter(XmlBaseConverter converterAtomic);
    protected XmlBaseConverter(XmlBaseConverter converterAtomic, Type clrTypeDefault);
    private static XmlBaseConverter();
    public virtual bool ToBoolean(DateTime value);
    public virtual bool ToBoolean(double value);
    public virtual bool ToBoolean(int value);
    public virtual bool ToBoolean(long value);
    public virtual bool ToBoolean(string value);
    public virtual bool ToBoolean(object value);
    public virtual DateTime ToDateTime(bool value);
    public virtual DateTime ToDateTime(DateTimeOffset value);
    public virtual DateTime ToDateTime(double value);
    public virtual DateTime ToDateTime(int value);
    public virtual DateTime ToDateTime(long value);
    public virtual DateTime ToDateTime(string value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(DateTime value);
    public virtual DateTimeOffset ToDateTimeOffset(string value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual decimal ToDecimal(string value);
    public virtual decimal ToDecimal(object value);
    public virtual double ToDouble(bool value);
    public virtual double ToDouble(DateTime value);
    public virtual double ToDouble(int value);
    public virtual double ToDouble(long value);
    public virtual double ToDouble(string value);
    public virtual double ToDouble(object value);
    public virtual int ToInt32(bool value);
    public virtual int ToInt32(DateTime value);
    public virtual int ToInt32(double value);
    public virtual int ToInt32(long value);
    public virtual int ToInt32(string value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(bool value);
    public virtual long ToInt64(DateTime value);
    public virtual long ToInt64(double value);
    public virtual long ToInt64(int value);
    public virtual long ToInt64(string value);
    public virtual long ToInt64(object value);
    public virtual float ToSingle(double value);
    public virtual float ToSingle(string value);
    public virtual float ToSingle(object value);
    public virtual string ToString(bool value);
    public virtual string ToString(DateTime value);
    public virtual string ToString(DateTimeOffset value);
    public virtual string ToString(decimal value);
    public virtual string ToString(double value);
    public virtual string ToString(int value);
    public virtual string ToString(long value);
    public virtual string ToString(float value);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType);
    protected XmlSchemaType get_SchemaType();
    protected XmlTypeCode get_TypeCode();
    protected string get_XmlTypeName();
    protected Type get_DefaultClrType();
    protected static bool IsDerivedFrom(Type derivedType, Type baseType);
    protected Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType);
    protected static string QNameToString(XmlQualifiedName name);
    protected virtual object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    protected static Byte[] StringToBase64Binary(string value);
    protected static DateTime StringToDate(string value);
    protected static DateTime StringToDateTime(string value);
    protected static TimeSpan StringToDayTimeDuration(string value);
    protected static TimeSpan StringToDuration(string value);
    protected static DateTime StringToGDay(string value);
    protected static DateTime StringToGMonth(string value);
    protected static DateTime StringToGMonthDay(string value);
    protected static DateTime StringToGYear(string value);
    protected static DateTime StringToGYearMonth(string value);
    protected static DateTimeOffset StringToDateOffset(string value);
    protected static DateTimeOffset StringToDateTimeOffset(string value);
    protected static DateTimeOffset StringToGDayOffset(string value);
    protected static DateTimeOffset StringToGMonthOffset(string value);
    protected static DateTimeOffset StringToGMonthDayOffset(string value);
    protected static DateTimeOffset StringToGYearOffset(string value);
    protected static DateTimeOffset StringToGYearMonthOffset(string value);
    protected static Byte[] StringToHexBinary(string value);
    protected static XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver);
    protected static DateTime StringToTime(string value);
    protected static DateTimeOffset StringToTimeOffset(string value);
    protected static TimeSpan StringToYearMonthDuration(string value);
    protected static string AnyUriToString(Uri value);
    protected static string Base64BinaryToString(Byte[] value);
    protected static string DateToString(DateTime value);
    protected static string DateTimeToString(DateTime value);
    protected static string DayTimeDurationToString(TimeSpan value);
    protected static string DurationToString(TimeSpan value);
    protected static string GDayToString(DateTime value);
    protected static string GMonthToString(DateTime value);
    protected static string GMonthDayToString(DateTime value);
    protected static string GYearToString(DateTime value);
    protected static string GYearMonthToString(DateTime value);
    protected static string DateOffsetToString(DateTimeOffset value);
    protected static string DateTimeOffsetToString(DateTimeOffset value);
    protected static string GDayOffsetToString(DateTimeOffset value);
    protected static string GMonthOffsetToString(DateTimeOffset value);
    protected static string GMonthDayOffsetToString(DateTimeOffset value);
    protected static string GYearOffsetToString(DateTimeOffset value);
    protected static string GYearMonthOffsetToString(DateTimeOffset value);
    protected static string QNameToString(XmlQualifiedName qname, IXmlNamespaceResolver nsResolver);
    protected static string TimeToString(DateTime value);
    protected static string TimeOffsetToString(DateTimeOffset value);
    protected static string YearMonthDurationToString(TimeSpan value);
    internal static DateTime DateTimeOffsetToDateTime(DateTimeOffset value);
    internal static int DecimalToInt32(decimal value);
    protected static long DecimalToInt64(decimal value);
    protected static ulong DecimalToUInt64(decimal value);
    protected static byte Int32ToByte(int value);
    protected static short Int32ToInt16(int value);
    protected static sbyte Int32ToSByte(int value);
    protected static ushort Int32ToUInt16(int value);
    protected static int Int64ToInt32(long value);
    protected static UInt32 Int64ToUInt32(long value);
    protected static DateTime UntypedAtomicToDateTime(string value);
    protected static DateTimeOffset UntypedAtomicToDateTimeOffset(string value);
}
internal class System.Xml.Schema.XmlBooleanConverter : XmlBaseConverter {
    protected XmlBooleanConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual bool ToBoolean(string value);
    public virtual bool ToBoolean(object value);
    public virtual string ToString(bool value);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlDateTimeConverter : XmlBaseConverter {
    protected XmlDateTimeConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual DateTime ToDateTime(DateTimeOffset value);
    public virtual DateTime ToDateTime(string value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(DateTime value);
    public virtual DateTimeOffset ToDateTimeOffset(string value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual string ToString(DateTime value);
    public virtual string ToString(DateTimeOffset value);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlListConverter : XmlBaseConverter {
    protected XmlValueConverter atomicConverter;
    protected XmlListConverter(XmlBaseConverter atomicConverter);
    protected XmlListConverter(XmlBaseConverter atomicConverter, Type clrTypeDefault);
    protected XmlListConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlValueConverter atomicConverter);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    protected virtual object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private bool IsListType(Type type);
    private T[] ToArray(object list, IXmlNamespaceResolver nsResolver);
    private IList ToList(object list, IXmlNamespaceResolver nsResolver);
    private List`1<string> StringAsList(string value);
    private string ListAsString(IEnumerable list, IXmlNamespaceResolver nsResolver);
    private Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType);
}
internal class System.Xml.Schema.XmlMiscConverter : XmlBaseConverter {
    protected XmlMiscConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlNodeConverter : XmlBaseConverter {
    public static XmlValueConverter Node;
    private static XmlNodeConverter();
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlNumeric10Converter : XmlBaseConverter {
    protected XmlNumeric10Converter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual decimal ToDecimal(string value);
    public virtual decimal ToDecimal(object value);
    public virtual int ToInt32(long value);
    public virtual int ToInt32(string value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(int value);
    public virtual long ToInt64(string value);
    public virtual long ToInt64(object value);
    public virtual string ToString(decimal value);
    public virtual string ToString(int value);
    public virtual string ToString(long value);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlNumeric2Converter : XmlBaseConverter {
    protected XmlNumeric2Converter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual double ToDouble(string value);
    public virtual double ToDouble(object value);
    public virtual float ToSingle(double value);
    public virtual float ToSingle(string value);
    public virtual float ToSingle(object value);
    public virtual string ToString(double value);
    public virtual string ToString(float value);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
[XmlRootAttribute("schema")]
public class System.Xml.Schema.XmlSchema : XmlSchemaObject {
    public static string Namespace;
    public static string InstanceNamespace;
    private XmlSchemaForm _attributeFormDefault;
    private XmlSchemaForm _elementFormDefault;
    private XmlSchemaDerivationMethod _blockDefault;
    private XmlSchemaDerivationMethod _finalDefault;
    private string _targetNs;
    private string _version;
    private XmlSchemaObjectCollection _includes;
    private XmlSchemaObjectCollection _items;
    private string _id;
    private XmlAttribute[] _moreAttributes;
    private bool _isCompiled;
    private bool _isCompiledBySet;
    private bool _isPreprocessed;
    private bool _isRedefined;
    private int _errorCount;
    private XmlSchemaObjectTable _attributes;
    private XmlSchemaObjectTable _attributeGroups;
    private XmlSchemaObjectTable _elements;
    private XmlSchemaObjectTable _types;
    private XmlSchemaObjectTable _groups;
    private XmlSchemaObjectTable _notations;
    private XmlSchemaObjectTable _identityConstraints;
    private static int s_globalIdCounter;
    private ArrayList _importedSchemas;
    private ArrayList _importedNamespaces;
    private int _schemaId;
    private Uri _baseUri;
    private bool _isChameleon;
    private Hashtable _ids;
    private XmlDocument _document;
    private XmlNameTable _nameTable;
    [XmlAttributeAttribute("attributeFormDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm AttributeFormDefault { get; public set; }
    [XmlAttributeAttribute("blockDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod BlockDefault { get; public set; }
    [XmlAttributeAttribute("finalDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod FinalDefault { get; public set; }
    [XmlAttributeAttribute("elementFormDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm ElementFormDefault { get; public set; }
    [XmlAttributeAttribute("targetNamespace")]
public string TargetNamespace { get; public set; }
    [XmlAttributeAttribute("version")]
public string Version { get; public set; }
    [XmlElementAttribute("include", "System.Xml.Schema.XmlSchemaInclude")]
[XmlElementAttribute("import", "System.Xml.Schema.XmlSchemaImport")]
[XmlElementAttribute("redefine", "System.Xml.Schema.XmlSchemaRedefine")]
public XmlSchemaObjectCollection Includes { get; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
[XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroup")]
[XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
[XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroup")]
[XmlElementAttribute("notation", "System.Xml.Schema.XmlSchemaNotation")]
public XmlSchemaObjectCollection Items { get; }
    [XmlIgnoreAttribute]
public bool IsCompiled { get; }
    [XmlIgnoreAttribute]
internal bool IsCompiledBySet { get; internal set; }
    [XmlIgnoreAttribute]
internal bool IsPreprocessed { get; internal set; }
    [XmlIgnoreAttribute]
internal bool IsRedefined { get; internal set; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Attributes { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeGroups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable SchemaTypes { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Elements { get; }
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Groups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Notations { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaObjectTable IdentityConstraints { get; }
    [XmlIgnoreAttribute]
internal Uri BaseUri { get; internal set; }
    [XmlIgnoreAttribute]
internal int SchemaId { get; }
    [XmlIgnoreAttribute]
internal bool IsChameleon { get; internal set; }
    [XmlIgnoreAttribute]
internal Hashtable Ids { get; }
    [XmlIgnoreAttribute]
internal XmlDocument Document { get; }
    [XmlIgnoreAttribute]
internal int ErrorCount { get; internal set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    internal XmlNameTable NameTable { get; }
    internal ArrayList ImportedSchemas { get; }
    internal ArrayList ImportedNamespaces { get; }
    private static XmlSchema();
    public static XmlSchema Read(TextReader reader, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(Stream stream, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(XmlReader reader, ValidationEventHandler validationEventHandler);
    public void Write(Stream stream);
    public void Write(Stream stream, XmlNamespaceManager namespaceManager);
    public void Write(TextWriter writer);
    public void Write(TextWriter writer, XmlNamespaceManager namespaceManager);
    public void Write(XmlWriter writer);
    public void Write(XmlWriter writer, XmlNamespaceManager namespaceManager);
    [ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public void Compile(ValidationEventHandler validationEventHandler);
    [ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public void Compile(ValidationEventHandler validationEventHandler, XmlResolver resolver);
    internal bool CompileSchema(XmlSchemaCollection xsc, XmlResolver resolver, SchemaInfo schemaInfo, string ns, ValidationEventHandler validationEventHandler, XmlNameTable nameTable, bool CompileContentModel);
    internal void CompileSchemaInSet(XmlNameTable nameTable, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings);
    public XmlSchemaForm get_AttributeFormDefault();
    public void set_AttributeFormDefault(XmlSchemaForm value);
    public XmlSchemaDerivationMethod get_BlockDefault();
    public void set_BlockDefault(XmlSchemaDerivationMethod value);
    public XmlSchemaDerivationMethod get_FinalDefault();
    public void set_FinalDefault(XmlSchemaDerivationMethod value);
    public XmlSchemaForm get_ElementFormDefault();
    public void set_ElementFormDefault(XmlSchemaForm value);
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public string get_Version();
    public void set_Version(string value);
    public XmlSchemaObjectCollection get_Includes();
    public XmlSchemaObjectCollection get_Items();
    public bool get_IsCompiled();
    internal bool get_IsCompiledBySet();
    internal void set_IsCompiledBySet(bool value);
    internal bool get_IsPreprocessed();
    internal void set_IsPreprocessed(bool value);
    internal bool get_IsRedefined();
    internal void set_IsRedefined(bool value);
    public XmlSchemaObjectTable get_Attributes();
    public XmlSchemaObjectTable get_AttributeGroups();
    public XmlSchemaObjectTable get_SchemaTypes();
    public XmlSchemaObjectTable get_Elements();
    public string get_Id();
    public void set_Id(string value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    public XmlSchemaObjectTable get_Groups();
    public XmlSchemaObjectTable get_Notations();
    internal XmlSchemaObjectTable get_IdentityConstraints();
    internal Uri get_BaseUri();
    internal void set_BaseUri(Uri value);
    internal int get_SchemaId();
    internal bool get_IsChameleon();
    internal void set_IsChameleon(bool value);
    internal Hashtable get_Ids();
    internal XmlDocument get_Document();
    internal int get_ErrorCount();
    internal void set_ErrorCount(int value);
    internal XmlSchema Clone();
    internal XmlSchema DeepClone();
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal void SetIsCompiled(bool isCompiled);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
    internal XmlNameTable get_NameTable();
    internal ArrayList get_ImportedSchemas();
    internal ArrayList get_ImportedNamespaces();
    internal void GetExternalSchemasList(IList extList, XmlSchema schema);
}
public class System.Xml.Schema.XmlSchemaAll : XmlSchemaGroupBase {
    private XmlSchemaObjectCollection _items;
    [XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
public XmlSchemaObjectCollection Items { get; }
    internal bool IsEmpty { get; }
    public virtual XmlSchemaObjectCollection get_Items();
    internal virtual bool get_IsEmpty();
    internal virtual void SetItems(XmlSchemaObjectCollection newItems);
}
public class System.Xml.Schema.XmlSchemaAnnotated : XmlSchemaObject {
    private string _id;
    private XmlSchemaAnnotation _annotation;
    private XmlAttribute[] _moreAttributes;
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    public string get_Id();
    public void set_Id(string value);
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaAnnotation : XmlSchemaObject {
    private string _id;
    private XmlSchemaObjectCollection _items;
    private XmlAttribute[] _moreAttributes;
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlElementAttribute("documentation", "System.Xml.Schema.XmlSchemaDocumentation")]
[XmlElementAttribute("appinfo", "System.Xml.Schema.XmlSchemaAppInfo")]
public XmlSchemaObjectCollection Items { get; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    public string get_Id();
    public void set_Id(string value);
    public XmlSchemaObjectCollection get_Items();
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
}
public class System.Xml.Schema.XmlSchemaAny : XmlSchemaParticle {
    private string _ns;
    private XmlSchemaContentProcessing _processContents;
    private NamespaceList _namespaceList;
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlAttributeAttribute("processContents")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaContentProcessing ProcessContents { get; public set; }
    [XmlIgnoreAttribute]
internal NamespaceList NamespaceList { get; }
    [XmlIgnoreAttribute]
internal string ResolvedNamespace { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaContentProcessing ProcessContentsCorrect { get; }
    internal string NameString { get; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaContentProcessing get_ProcessContents();
    public void set_ProcessContents(XmlSchemaContentProcessing value);
    internal NamespaceList get_NamespaceList();
    internal string get_ResolvedNamespace();
    internal XmlSchemaContentProcessing get_ProcessContentsCorrect();
    internal virtual string get_NameString();
    internal void BuildNamespaceList(string targetNamespace);
    internal void BuildNamespaceListV1Compat(string targetNamespace);
    internal bool Allows(XmlQualifiedName qname);
}
public class System.Xml.Schema.XmlSchemaAnyAttribute : XmlSchemaAnnotated {
    private string _ns;
    private XmlSchemaContentProcessing _processContents;
    private NamespaceList _namespaceList;
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlAttributeAttribute("processContents")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaContentProcessing ProcessContents { get; public set; }
    [XmlIgnoreAttribute]
internal NamespaceList NamespaceList { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaContentProcessing ProcessContentsCorrect { get; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaContentProcessing get_ProcessContents();
    public void set_ProcessContents(XmlSchemaContentProcessing value);
    internal NamespaceList get_NamespaceList();
    internal XmlSchemaContentProcessing get_ProcessContentsCorrect();
    internal void BuildNamespaceList(string targetNamespace);
    internal void BuildNamespaceListV1Compat(string targetNamespace);
    internal bool Allows(XmlQualifiedName qname);
    internal static bool IsSubset(XmlSchemaAnyAttribute sub, XmlSchemaAnyAttribute super);
    internal static XmlSchemaAnyAttribute Intersection(XmlSchemaAnyAttribute o1, XmlSchemaAnyAttribute o2, bool v1Compat);
    internal static XmlSchemaAnyAttribute Union(XmlSchemaAnyAttribute o1, XmlSchemaAnyAttribute o2, bool v1Compat);
}
public class System.Xml.Schema.XmlSchemaAppInfo : XmlSchemaObject {
    private string _source;
    private XmlNode[] _markup;
    [XmlAttributeAttribute("source")]
public string Source { get; public set; }
    [XmlTextAttribute]
[XmlAnyElementAttribute]
public XmlNode[] Markup { get; public set; }
    public string get_Source();
    public void set_Source(string value);
    public XmlNode[] get_Markup();
    public void set_Markup(XmlNode[] value);
}
public class System.Xml.Schema.XmlSchemaAttribute : XmlSchemaAnnotated {
    private string _defaultValue;
    private string _fixedValue;
    private string _name;
    private XmlSchemaForm _form;
    private XmlSchemaUse _use;
    private XmlQualifiedName _refName;
    private XmlQualifiedName _typeName;
    private XmlQualifiedName _qualifiedName;
    private XmlSchemaSimpleType _type;
    private XmlSchemaSimpleType _attributeType;
    private SchemaAttDef _attDef;
    [XmlAttributeAttribute("default")]
[DefaultValueAttribute("")]
public string DefaultValue { get; public set; }
    [XmlAttributeAttribute("fixed")]
[DefaultValueAttribute("")]
public string FixedValue { get; public set; }
    [XmlAttributeAttribute("form")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm Form { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName SchemaTypeName { get; public set; }
    [XmlElementAttribute("simpleType")]
public XmlSchemaSimpleType SchemaType { get; public set; }
    [XmlAttributeAttribute("use")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaUse Use { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
[ObsoleteAttribute("This property has been deprecated. Please use AttributeSchemaType property that returns a strongly typed attribute type. http://go.microsoft.com/fwlink/?linkid=14202")]
public object AttributeType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType AttributeSchemaType { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaDatatype Datatype { get; }
    internal SchemaAttDef AttDef { get; internal set; }
    internal bool HasDefault { get; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public string get_FixedValue();
    public void set_FixedValue(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public string get_Name();
    public void set_Name(string value);
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlQualifiedName get_SchemaTypeName();
    public void set_SchemaTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_SchemaType();
    public void set_SchemaType(XmlSchemaSimpleType value);
    public XmlSchemaUse get_Use();
    public void set_Use(XmlSchemaUse value);
    public XmlQualifiedName get_QualifiedName();
    public object get_AttributeType();
    public XmlSchemaSimpleType get_AttributeSchemaType();
    internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler);
    internal XmlSchemaDatatype get_Datatype();
    internal void SetQualifiedName(XmlQualifiedName value);
    internal void SetAttributeType(XmlSchemaSimpleType value);
    internal SchemaAttDef get_AttDef();
    internal void set_AttDef(SchemaAttDef value);
    internal bool get_HasDefault();
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaAttributeGroup : XmlSchemaAnnotated {
    private string _name;
    private XmlSchemaObjectCollection _attributes;
    private XmlSchemaAnyAttribute _anyAttribute;
    private XmlQualifiedName _qname;
    private XmlSchemaAttributeGroup _redefined;
    private XmlSchemaObjectTable _attributeUses;
    private XmlSchemaAnyAttribute _attributeWildcard;
    private int _selfReferenceCount;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaObjectTable AttributeUses { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaAnyAttribute AttributeWildcard { get; internal set; }
    [XmlIgnoreAttribute]
public XmlSchemaAttributeGroup RedefinedAttributeGroup { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaAttributeGroup Redefined { get; internal set; }
    [XmlIgnoreAttribute]
internal int SelfReferenceCount { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlQualifiedName get_QualifiedName();
    internal XmlSchemaObjectTable get_AttributeUses();
    internal XmlSchemaAnyAttribute get_AttributeWildcard();
    internal void set_AttributeWildcard(XmlSchemaAnyAttribute value);
    public XmlSchemaAttributeGroup get_RedefinedAttributeGroup();
    internal XmlSchemaAttributeGroup get_Redefined();
    internal void set_Redefined(XmlSchemaAttributeGroup value);
    internal int get_SelfReferenceCount();
    internal void set_SelfReferenceCount(int value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal void SetQualifiedName(XmlQualifiedName value);
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaAttributeGroupRef : XmlSchemaAnnotated {
    private XmlQualifiedName _refName;
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaChoice : XmlSchemaGroupBase {
    private XmlSchemaObjectCollection _items;
    [XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
[XmlElementAttribute("any", "System.Xml.Schema.XmlSchemaAny")]
public XmlSchemaObjectCollection Items { get; }
    internal bool IsEmpty { get; }
    public virtual XmlSchemaObjectCollection get_Items();
    internal virtual bool get_IsEmpty();
    internal virtual void SetItems(XmlSchemaObjectCollection newItems);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.Schema.XmlSchemaCollection : object {
    private Hashtable _collection;
    private XmlNameTable _nameTable;
    private SchemaNames _schemaNames;
    private object _wLock;
    private bool _isThreadSafe;
    private ValidationEventHandler _validationEventHandler;
    private XmlResolver _xmlResolver;
    public int Count { get; }
    public XmlNameTable NameTable { get; }
    unknown XmlResolver XmlResolver {internal set; }
    public XmlSchema Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    internal ValidationEventHandler EventHandler { get; internal set; }
    public XmlSchemaCollection(XmlNameTable nametable);
    public int get_Count();
    public XmlNameTable get_NameTable();
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    internal void set_XmlResolver(XmlResolver value);
    public XmlSchema Add(string ns, string uri);
    public XmlSchema Add(string ns, XmlReader reader);
    public XmlSchema Add(string ns, XmlReader reader, XmlResolver resolver);
    public XmlSchema Add(XmlSchema schema);
    public XmlSchema Add(XmlSchema schema, XmlResolver resolver);
    public void Add(XmlSchemaCollection schema);
    public XmlSchema get_Item(string ns);
    public bool Contains(XmlSchema schema);
    public bool Contains(string ns);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public XmlSchemaCollectionEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(XmlSchema[] array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    internal SchemaInfo GetSchemaInfo(string ns);
    internal SchemaNames GetSchemaNames(XmlNameTable nt);
    internal XmlSchema Add(string ns, SchemaInfo schemaInfo, XmlSchema schema, bool compile);
    private XmlSchema Add(string ns, SchemaInfo schemaInfo, XmlSchema schema, bool compile, XmlResolver resolver);
    private void AddNonThreadSafe(string ns, XmlSchemaCollectionNode node);
    private void Add(string ns, XmlSchemaCollectionNode node);
    private void SendValidationEvent(XmlSchemaException e);
    internal ValidationEventHandler get_EventHandler();
    internal void set_EventHandler(ValidationEventHandler value);
}
public class System.Xml.Schema.XmlSchemaCollectionEnumerator : object {
    private IDictionaryEnumerator _enumerator;
    private object System.Collections.IEnumerator.Current { get; }
    public XmlSchema Current { get; }
    internal XmlSchemaCollectionNode CurrentNode { get; }
    internal XmlSchemaCollectionEnumerator(Hashtable collection);
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    public bool MoveNext();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public XmlSchema get_Current();
    internal XmlSchemaCollectionNode get_CurrentNode();
}
internal class System.Xml.Schema.XmlSchemaCollectionNode : object {
    private string _namespaceUri;
    private SchemaInfo _schemaInfo;
    private XmlSchema _schema;
    internal string NamespaceURI { get; internal set; }
    internal SchemaInfo SchemaInfo { get; internal set; }
    internal XmlSchema Schema { get; internal set; }
    internal string get_NamespaceURI();
    internal void set_NamespaceURI(string value);
    internal SchemaInfo get_SchemaInfo();
    internal void set_SchemaInfo(SchemaInfo value);
    internal XmlSchema get_Schema();
    internal void set_Schema(XmlSchema value);
}
public class System.Xml.Schema.XmlSchemaCompilationSettings : object {
    private bool _enableUpaCheck;
    public bool EnableUpaCheck { get; public set; }
    public bool get_EnableUpaCheck();
    public void set_EnableUpaCheck(bool value);
}
public class System.Xml.Schema.XmlSchemaComplexContent : XmlSchemaContentModel {
    private XmlSchemaContent _content;
    private bool _isMixed;
    private bool _hasMixedAttribute;
    [XmlAttributeAttribute("mixed")]
public bool IsMixed { get; public set; }
    [XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaComplexContentRestriction")]
[XmlElementAttribute("extension", "System.Xml.Schema.XmlSchemaComplexContentExtension")]
public XmlSchemaContent Content { get; public set; }
    [XmlIgnoreAttribute]
internal bool HasMixedAttribute { get; }
    public bool get_IsMixed();
    public void set_IsMixed(bool value);
    public virtual XmlSchemaContent get_Content();
    public virtual void set_Content(XmlSchemaContent value);
    internal bool get_HasMixedAttribute();
}
public class System.Xml.Schema.XmlSchemaComplexContentExtension : XmlSchemaContent {
    private XmlSchemaParticle _particle;
    private XmlSchemaObjectCollection _attributes;
    private XmlSchemaAnyAttribute _anyAttribute;
    private XmlQualifiedName _baseTypeName;
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaComplexContentRestriction : XmlSchemaContent {
    private XmlSchemaParticle _particle;
    private XmlSchemaObjectCollection _attributes;
    private XmlSchemaAnyAttribute _anyAttribute;
    private XmlQualifiedName _baseTypeName;
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaComplexType : XmlSchemaType {
    private XmlSchemaDerivationMethod _block;
    private XmlSchemaContentModel _contentModel;
    private XmlSchemaParticle _particle;
    private XmlSchemaObjectCollection _attributes;
    private XmlSchemaAnyAttribute _anyAttribute;
    private XmlSchemaParticle _contentTypeParticle;
    private XmlSchemaDerivationMethod _blockResolved;
    private XmlSchemaObjectTable _localElements;
    private XmlSchemaObjectTable _attributeUses;
    private XmlSchemaAnyAttribute _attributeWildcard;
    private static XmlSchemaComplexType s_anyTypeLax;
    private static XmlSchemaComplexType s_anyTypeSkip;
    private static XmlSchemaComplexType s_untypedAnyType;
    private byte _pvFlags;
    private static byte wildCardMask;
    private static byte isMixedMask;
    private static byte isAbstractMask;
    [XmlIgnoreAttribute]
internal static XmlSchemaComplexType AnyType { get; }
    [XmlIgnoreAttribute]
internal static XmlSchemaComplexType UntypedAnyType { get; }
    [XmlIgnoreAttribute]
internal static XmlSchemaComplexType AnyTypeSkip { get; }
    internal static ContentValidator AnyTypeContentValidator { get; }
    [XmlAttributeAttribute("abstract")]
[DefaultValueAttribute("False")]
public bool IsAbstract { get; public set; }
    [XmlAttributeAttribute("block")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Block { get; public set; }
    [XmlAttributeAttribute("mixed")]
[DefaultValueAttribute("False")]
public bool IsMixed { get; public set; }
    [XmlElementAttribute("simpleContent", "System.Xml.Schema.XmlSchemaSimpleContent")]
[XmlElementAttribute("complexContent", "System.Xml.Schema.XmlSchemaComplexContent")]
public XmlSchemaContentModel ContentModel { get; public set; }
    [XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaContentType ContentType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaParticle ContentTypeParticle { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod BlockResolved { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeUses { get; }
    [XmlIgnoreAttribute]
public XmlSchemaAnyAttribute AttributeWildcard { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaObjectTable LocalElements { get; }
    internal bool HasWildCard { get; internal set; }
    internal XmlQualifiedName DerivedFrom { get; }
    private static XmlSchemaComplexType();
    private static XmlSchemaComplexType CreateAnyType(XmlSchemaContentProcessing processContents);
    internal static XmlSchemaComplexType get_AnyType();
    internal static XmlSchemaComplexType get_UntypedAnyType();
    internal static XmlSchemaComplexType get_AnyTypeSkip();
    internal static ContentValidator get_AnyTypeContentValidator();
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public XmlSchemaDerivationMethod get_Block();
    public void set_Block(XmlSchemaDerivationMethod value);
    public virtual bool get_IsMixed();
    public virtual void set_IsMixed(bool value);
    public XmlSchemaContentModel get_ContentModel();
    public void set_ContentModel(XmlSchemaContentModel value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaContentType get_ContentType();
    public XmlSchemaParticle get_ContentTypeParticle();
    public XmlSchemaDerivationMethod get_BlockResolved();
    public XmlSchemaObjectTable get_AttributeUses();
    public XmlSchemaAnyAttribute get_AttributeWildcard();
    internal XmlSchemaObjectTable get_LocalElements();
    internal void SetContentTypeParticle(XmlSchemaParticle value);
    internal void SetBlockResolved(XmlSchemaDerivationMethod value);
    internal void SetAttributeWildcard(XmlSchemaAnyAttribute value);
    internal bool get_HasWildCard();
    internal void set_HasWildCard(bool value);
    internal virtual XmlQualifiedName get_DerivedFrom();
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
    internal bool ContainsIdAttribute(bool findAll);
    internal virtual XmlSchemaObject Clone();
    internal XmlSchemaObject Clone(XmlSchema parentSchema);
    private void ClearCompiledState();
    internal static XmlSchemaObjectCollection CloneAttributes(XmlSchemaObjectCollection attributes);
    private static XmlSchemaObjectCollection CloneGroupBaseParticles(XmlSchemaObjectCollection groupBaseParticles, XmlSchema parentSchema);
    internal static XmlSchemaParticle CloneParticle(XmlSchemaParticle particle, XmlSchema parentSchema);
    private static XmlSchemaForm GetResolvedElementForm(XmlSchema parentSchema, XmlSchemaElement element);
    internal static bool HasParticleRef(XmlSchemaParticle particle, XmlSchema parentSchema);
    internal static bool HasAttributeQNameRef(XmlSchemaObjectCollection attributes);
}
public abstract class System.Xml.Schema.XmlSchemaContent : XmlSchemaAnnotated {
}
public abstract class System.Xml.Schema.XmlSchemaContentModel : XmlSchemaAnnotated {
    [XmlIgnoreAttribute]
public XmlSchemaContent Content { get; public set; }
    public abstract virtual XmlSchemaContent get_Content();
    public abstract virtual void set_Content(XmlSchemaContent value);
}
public enum System.Xml.Schema.XmlSchemaContentProcessing : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaContentProcessing None;
    [XmlEnumAttribute("skip")]
public static XmlSchemaContentProcessing Skip;
    [XmlEnumAttribute("lax")]
public static XmlSchemaContentProcessing Lax;
    [XmlEnumAttribute("strict")]
public static XmlSchemaContentProcessing Strict;
}
public enum System.Xml.Schema.XmlSchemaContentType : Enum {
    public int value__;
    public static XmlSchemaContentType TextOnly;
    public static XmlSchemaContentType Empty;
    public static XmlSchemaContentType ElementOnly;
    public static XmlSchemaContentType Mixed;
}
public abstract class System.Xml.Schema.XmlSchemaDatatype : object {
    public Type ValueType { get; }
    public XmlTokenizedType TokenizedType { get; }
    public XmlSchemaDatatypeVariety Variety { get; }
    public XmlTypeCode TypeCode { get; }
    internal bool HasLexicalFacets { get; }
    internal bool HasValueFacets { get; }
    internal XmlValueConverter ValueConverter { get; }
    internal RestrictionFacets Restriction { get; internal set; }
    internal FacetsChecker FacetsChecker { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal string TypeCodeString { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual XmlTokenizedType get_TokenizedType();
    public abstract virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    public virtual XmlSchemaDatatypeVariety get_Variety();
    public virtual object ChangeType(object value, Type targetType);
    public virtual object ChangeType(object value, Type targetType, IXmlNamespaceResolver namespaceResolver);
    public virtual XmlTypeCode get_TypeCode();
    public virtual bool IsDerivedFrom(XmlSchemaDatatype datatype);
    internal abstract virtual bool get_HasLexicalFacets();
    internal abstract virtual bool get_HasValueFacets();
    internal abstract virtual XmlValueConverter get_ValueConverter();
    internal abstract virtual RestrictionFacets get_Restriction();
    internal abstract virtual void set_Restriction(RestrictionFacets value);
    internal abstract virtual int Compare(object value1, object value2);
    internal abstract virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, bool createAtomicValue);
    internal abstract virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    internal abstract virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue);
    internal abstract virtual FacetsChecker get_FacetsChecker();
    internal abstract virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal abstract virtual XmlSchemaDatatype DeriveByRestriction(XmlSchemaObjectCollection facets, XmlNameTable nameTable, XmlSchemaType schemaType);
    internal abstract virtual XmlSchemaDatatype DeriveByList(XmlSchemaType schemaType);
    internal abstract virtual void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller);
    internal abstract virtual bool IsEqual(object o1, object o2);
    internal abstract virtual bool IsComparable(XmlSchemaDatatype dtype);
    internal string get_TypeCodeString();
    internal string TypeCodeToString(XmlTypeCode typeCode);
    internal static string ConcatenatedToString(object value);
    internal static XmlSchemaDatatype FromXmlTokenizedType(XmlTokenizedType token);
    internal static XmlSchemaDatatype FromXmlTokenizedTypeXsd(XmlTokenizedType token);
    internal static XmlSchemaDatatype FromXdrName(string name);
    internal static XmlSchemaDatatype DeriveByUnion(XmlSchemaSimpleType[] types, XmlSchemaType schemaType);
    internal static string XdrCanonizeUri(string uri, XmlNameTable nameTable, SchemaNames schemaNames);
}
public enum System.Xml.Schema.XmlSchemaDatatypeVariety : Enum {
    public int value__;
    public static XmlSchemaDatatypeVariety Atomic;
    public static XmlSchemaDatatypeVariety List;
    public static XmlSchemaDatatypeVariety Union;
}
[FlagsAttribute]
public enum System.Xml.Schema.XmlSchemaDerivationMethod : Enum {
    public int value__;
    [XmlEnumAttribute("")]
public static XmlSchemaDerivationMethod Empty;
    [XmlEnumAttribute("substitution")]
public static XmlSchemaDerivationMethod Substitution;
    [XmlEnumAttribute("extension")]
public static XmlSchemaDerivationMethod Extension;
    [XmlEnumAttribute("restriction")]
public static XmlSchemaDerivationMethod Restriction;
    [XmlEnumAttribute("list")]
public static XmlSchemaDerivationMethod List;
    [XmlEnumAttribute("union")]
public static XmlSchemaDerivationMethod Union;
    [XmlEnumAttribute("#all")]
public static XmlSchemaDerivationMethod All;
    [XmlIgnoreAttribute]
public static XmlSchemaDerivationMethod None;
}
public class System.Xml.Schema.XmlSchemaDocumentation : XmlSchemaObject {
    private string _source;
    private string _language;
    private XmlNode[] _markup;
    private static XmlSchemaSimpleType s_languageType;
    [XmlAttributeAttribute("source")]
public string Source { get; public set; }
    [XmlAttributeAttribute("xml:lang")]
public string Language { get; public set; }
    [XmlTextAttribute]
[XmlAnyElementAttribute]
public XmlNode[] Markup { get; public set; }
    private static XmlSchemaDocumentation();
    public string get_Source();
    public void set_Source(string value);
    public string get_Language();
    public void set_Language(string value);
    public XmlNode[] get_Markup();
    public void set_Markup(XmlNode[] value);
}
public class System.Xml.Schema.XmlSchemaElement : XmlSchemaParticle {
    private bool _isAbstract;
    private bool _hasAbstractAttribute;
    private bool _isNillable;
    private bool _hasNillableAttribute;
    private bool _isLocalTypeDerivationChecked;
    private XmlSchemaDerivationMethod _block;
    private XmlSchemaDerivationMethod _final;
    private XmlSchemaForm _form;
    private string _defaultValue;
    private string _fixedValue;
    private string _name;
    private XmlQualifiedName _refName;
    private XmlQualifiedName _substitutionGroup;
    private XmlQualifiedName _typeName;
    private XmlSchemaType _type;
    private XmlQualifiedName _qualifiedName;
    private XmlSchemaType _elementType;
    private XmlSchemaDerivationMethod _blockResolved;
    private XmlSchemaDerivationMethod _finalResolved;
    private XmlSchemaObjectCollection _constraints;
    private SchemaElementDecl _elementDecl;
    [XmlAttributeAttribute("abstract")]
[DefaultValueAttribute("False")]
public bool IsAbstract { get; public set; }
    [XmlAttributeAttribute("block")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Block { get; public set; }
    [XmlAttributeAttribute("default")]
[DefaultValueAttribute("")]
public string DefaultValue { get; public set; }
    [XmlAttributeAttribute("final")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Final { get; public set; }
    [XmlAttributeAttribute("fixed")]
[DefaultValueAttribute("")]
public string FixedValue { get; public set; }
    [XmlAttributeAttribute("form")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm Form { get; public set; }
    [XmlAttributeAttribute("name")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [XmlAttributeAttribute("nillable")]
[DefaultValueAttribute("False")]
public bool IsNillable { get; public set; }
    [XmlIgnoreAttribute]
internal bool HasNillableAttribute { get; }
    [XmlIgnoreAttribute]
internal bool HasAbstractAttribute { get; }
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlAttributeAttribute("substitutionGroup")]
public XmlQualifiedName SubstitutionGroup { get; public set; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName SchemaTypeName { get; public set; }
    [XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaType SchemaType { get; public set; }
    [XmlElementAttribute("key", "System.Xml.Schema.XmlSchemaKey")]
[XmlElementAttribute("keyref", "System.Xml.Schema.XmlSchemaKeyref")]
[XmlElementAttribute("unique", "System.Xml.Schema.XmlSchemaUnique")]
public XmlSchemaObjectCollection Constraints { get; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
[ObsoleteAttribute("This property has been deprecated. Please use ElementSchemaType property that returns a strongly typed element type. http://go.microsoft.com/fwlink/?linkid=14202")]
public object ElementType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaType ElementSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod BlockResolved { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod FinalResolved { get; }
    [XmlIgnoreAttribute]
internal bool HasDefault { get; }
    internal bool HasConstraints { get; }
    internal bool IsLocalTypeDerivationChecked { get; internal set; }
    internal SchemaElementDecl ElementDecl { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameString { get; }
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public XmlSchemaDerivationMethod get_Block();
    public void set_Block(XmlSchemaDerivationMethod value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public XmlSchemaDerivationMethod get_Final();
    public void set_Final(XmlSchemaDerivationMethod value);
    public string get_FixedValue();
    public void set_FixedValue(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsNillable();
    public void set_IsNillable(bool value);
    internal bool get_HasNillableAttribute();
    internal bool get_HasAbstractAttribute();
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlQualifiedName get_SubstitutionGroup();
    public void set_SubstitutionGroup(XmlQualifiedName value);
    public XmlQualifiedName get_SchemaTypeName();
    public void set_SchemaTypeName(XmlQualifiedName value);
    public XmlSchemaType get_SchemaType();
    public void set_SchemaType(XmlSchemaType value);
    public XmlSchemaObjectCollection get_Constraints();
    public XmlQualifiedName get_QualifiedName();
    public object get_ElementType();
    public XmlSchemaType get_ElementSchemaType();
    public XmlSchemaDerivationMethod get_BlockResolved();
    public XmlSchemaDerivationMethod get_FinalResolved();
    internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler);
    internal void SetQualifiedName(XmlQualifiedName value);
    internal void SetElementType(XmlSchemaType value);
    internal void SetBlockResolved(XmlSchemaDerivationMethod value);
    internal void SetFinalResolved(XmlSchemaDerivationMethod value);
    internal bool get_HasDefault();
    internal bool get_HasConstraints();
    internal bool get_IsLocalTypeDerivationChecked();
    internal void set_IsLocalTypeDerivationChecked(bool value);
    internal SchemaElementDecl get_ElementDecl();
    internal void set_ElementDecl(SchemaElementDecl value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal virtual string get_NameString();
    internal virtual XmlSchemaObject Clone();
    internal XmlSchemaObject Clone(XmlSchema parentSchema);
}
public class System.Xml.Schema.XmlSchemaEnumerationFacet : XmlSchemaFacet {
}
[TypeForwardedFromAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Xml.Schema.XmlSchemaException : SystemException {
    private string _res;
    private String[] _args;
    private string _sourceUri;
    private int _lineNumber;
    private int _linePosition;
    private XmlSchemaObject _sourceSchemaObject;
    private string _message;
    internal string GetRes { get; }
    internal String[] Args { get; }
    public string SourceUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlSchemaObject SourceSchemaObject { get; }
    public string Message { get; }
    protected XmlSchemaException(SerializationInfo info, StreamingContext context);
    public XmlSchemaException(string message);
    public XmlSchemaException(string message, Exception innerException);
    public XmlSchemaException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, String[] args);
    internal XmlSchemaException(string res, string arg);
    internal XmlSchemaException(string res, string arg, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, String[] args, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, XmlSchemaObject source);
    internal XmlSchemaException(string res, string arg, XmlSchemaObject source);
    internal XmlSchemaException(string res, String[] args, XmlSchemaObject source);
    internal XmlSchemaException(string res, String[] args, Exception innerException, string sourceUri, int lineNumber, int linePosition, XmlSchemaObject source);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static string CreateMessage(string res, String[] args);
    internal string get_GetRes();
    internal String[] get_Args();
    public string get_SourceUri();
    public int get_LineNumber();
    public int get_LinePosition();
    public XmlSchemaObject get_SourceSchemaObject();
    internal void SetSource(string sourceUri, int lineNumber, int linePosition);
    internal void SetSchemaObject(XmlSchemaObject source);
    internal void SetSource(XmlSchemaObject source);
    public virtual string get_Message();
}
public abstract class System.Xml.Schema.XmlSchemaExternal : XmlSchemaObject {
    private string _location;
    private Uri _baseUri;
    private XmlSchema _schema;
    private string _id;
    private XmlAttribute[] _moreAttributes;
    private Compositor _compositor;
    [XmlAttributeAttribute("schemaLocation")]
public string SchemaLocation { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchema Schema { get; public set; }
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
internal Uri BaseUri { get; internal set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    internal Compositor Compositor { get; internal set; }
    public string get_SchemaLocation();
    public void set_SchemaLocation(string value);
    public XmlSchema get_Schema();
    public void set_Schema(XmlSchema value);
    public string get_Id();
    public void set_Id(string value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    internal Uri get_BaseUri();
    internal void set_BaseUri(Uri value);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal Compositor get_Compositor();
    internal void set_Compositor(Compositor value);
}
public abstract class System.Xml.Schema.XmlSchemaFacet : XmlSchemaAnnotated {
    private string _value;
    private bool _isFixed;
    private FacetType _facetType;
    [XmlAttributeAttribute("value")]
public string Value { get; public set; }
    [XmlAttributeAttribute("fixed")]
[DefaultValueAttribute("False")]
public bool IsFixed { get; public set; }
    internal FacetType FacetType { get; internal set; }
    public string get_Value();
    public void set_Value(string value);
    public virtual bool get_IsFixed();
    public virtual void set_IsFixed(bool value);
    internal FacetType get_FacetType();
    internal void set_FacetType(FacetType value);
}
public enum System.Xml.Schema.XmlSchemaForm : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaForm None;
    [XmlEnumAttribute("qualified")]
public static XmlSchemaForm Qualified;
    [XmlEnumAttribute("unqualified")]
public static XmlSchemaForm Unqualified;
}
public class System.Xml.Schema.XmlSchemaFractionDigitsFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaGroup : XmlSchemaAnnotated {
    private string _name;
    private XmlSchemaGroupBase _particle;
    private XmlSchemaParticle _canonicalParticle;
    private XmlQualifiedName _qname;
    private XmlSchemaGroup _redefined;
    private int _selfReferenceCount;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaGroupBase Particle { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaParticle CanonicalParticle { get; internal set; }
    [XmlIgnoreAttribute]
internal XmlSchemaGroup Redefined { get; internal set; }
    [XmlIgnoreAttribute]
internal int SelfReferenceCount { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaGroupBase get_Particle();
    public void set_Particle(XmlSchemaGroupBase value);
    public XmlQualifiedName get_QualifiedName();
    internal XmlSchemaParticle get_CanonicalParticle();
    internal void set_CanonicalParticle(XmlSchemaParticle value);
    internal XmlSchemaGroup get_Redefined();
    internal void set_Redefined(XmlSchemaGroup value);
    internal int get_SelfReferenceCount();
    internal void set_SelfReferenceCount(int value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal void SetQualifiedName(XmlQualifiedName value);
    internal virtual XmlSchemaObject Clone();
    internal XmlSchemaObject Clone(XmlSchema parentSchema);
}
public abstract class System.Xml.Schema.XmlSchemaGroupBase : XmlSchemaParticle {
    [XmlIgnoreAttribute]
public XmlSchemaObjectCollection Items { get; }
    public abstract virtual XmlSchemaObjectCollection get_Items();
    internal abstract virtual void SetItems(XmlSchemaObjectCollection newItems);
}
public class System.Xml.Schema.XmlSchemaGroupRef : XmlSchemaParticle {
    private XmlQualifiedName _refName;
    private XmlSchemaGroupBase _particle;
    private XmlSchemaGroup _refined;
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaGroupBase Particle { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaGroup Redefined { get; internal set; }
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlSchemaGroupBase get_Particle();
    internal void SetParticle(XmlSchemaGroupBase value);
    internal XmlSchemaGroup get_Redefined();
    internal void set_Redefined(XmlSchemaGroup value);
}
public class System.Xml.Schema.XmlSchemaIdentityConstraint : XmlSchemaAnnotated {
    private string _name;
    private XmlSchemaXPath _selector;
    private XmlSchemaObjectCollection _fields;
    private XmlQualifiedName _qualifiedName;
    private CompiledIdentityConstraint _compiledConstraint;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("selector", "System.Xml.Schema.XmlSchemaXPath")]
public XmlSchemaXPath Selector { get; public set; }
    [XmlElementAttribute("field", "System.Xml.Schema.XmlSchemaXPath")]
public XmlSchemaObjectCollection Fields { get; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
internal CompiledIdentityConstraint CompiledConstraint { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaXPath get_Selector();
    public void set_Selector(XmlSchemaXPath value);
    public XmlSchemaObjectCollection get_Fields();
    public XmlQualifiedName get_QualifiedName();
    internal void SetQualifiedName(XmlQualifiedName value);
    internal CompiledIdentityConstraint get_CompiledConstraint();
    internal void set_CompiledConstraint(CompiledIdentityConstraint value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
}
public class System.Xml.Schema.XmlSchemaImport : XmlSchemaExternal {
    private string _ns;
    private XmlSchemaAnnotation _annotation;
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaInclude : XmlSchemaExternal {
    private XmlSchemaAnnotation _annotation;
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaInference : object {
    internal static XmlQualifiedName ST_boolean;
    internal static XmlQualifiedName ST_byte;
    internal static XmlQualifiedName ST_unsignedByte;
    internal static XmlQualifiedName ST_short;
    internal static XmlQualifiedName ST_unsignedShort;
    internal static XmlQualifiedName ST_int;
    internal static XmlQualifiedName ST_unsignedInt;
    internal static XmlQualifiedName ST_long;
    internal static XmlQualifiedName ST_unsignedLong;
    internal static XmlQualifiedName ST_integer;
    internal static XmlQualifiedName ST_decimal;
    internal static XmlQualifiedName ST_float;
    internal static XmlQualifiedName ST_double;
    internal static XmlQualifiedName ST_duration;
    internal static XmlQualifiedName ST_dateTime;
    internal static XmlQualifiedName ST_time;
    internal static XmlQualifiedName ST_date;
    internal static XmlQualifiedName ST_gYearMonth;
    internal static XmlQualifiedName ST_string;
    internal static XmlQualifiedName ST_anySimpleType;
    internal static XmlQualifiedName[] SimpleTypes;
    internal static short HC_ST_boolean;
    internal static short HC_ST_byte;
    internal static short HC_ST_unsignedByte;
    internal static short HC_ST_short;
    internal static short HC_ST_unsignedShort;
    internal static short HC_ST_int;
    internal static short HC_ST_unsignedInt;
    internal static short HC_ST_long;
    internal static short HC_ST_unsignedLong;
    internal static short HC_ST_integer;
    internal static short HC_ST_decimal;
    internal static short HC_ST_float;
    internal static short HC_ST_double;
    internal static short HC_ST_duration;
    internal static short HC_ST_dateTime;
    internal static short HC_ST_time;
    internal static short HC_ST_date;
    internal static short HC_ST_gYearMonth;
    internal static short HC_ST_string;
    internal static short HC_ST_Count;
    internal static int TF_boolean;
    internal static int TF_byte;
    internal static int TF_unsignedByte;
    internal static int TF_short;
    internal static int TF_unsignedShort;
    internal static int TF_int;
    internal static int TF_unsignedInt;
    internal static int TF_long;
    internal static int TF_unsignedLong;
    internal static int TF_integer;
    internal static int TF_decimal;
    internal static int TF_float;
    internal static int TF_double;
    internal static int TF_duration;
    internal static int TF_dateTime;
    internal static int TF_time;
    internal static int TF_date;
    internal static int TF_gYearMonth;
    internal static int TF_string;
    private XmlSchema _rootSchema;
    private XmlSchemaSet _schemaSet;
    private XmlReader _xtr;
    private NameTable _nametable;
    private string _targetNamespace;
    private XmlNamespaceManager _namespaceManager;
    private ArrayList _schemaList;
    private InferenceOption _occurrence;
    private InferenceOption _typeInference;
    public InferenceOption Occurrence { get; public set; }
    public InferenceOption TypeInference { get; public set; }
    private static XmlSchemaInference();
    public void set_Occurrence(InferenceOption value);
    public InferenceOption get_Occurrence();
    public void set_TypeInference(InferenceOption value);
    public InferenceOption get_TypeInference();
    public XmlSchemaSet InferSchema(XmlReader instanceDocument);
    public XmlSchemaSet InferSchema(XmlReader instanceDocument, XmlSchemaSet schemas);
    internal XmlSchemaSet InferSchema1(XmlReader instanceDocument, XmlSchemaSet schemas);
    private XmlSchemaAttribute AddAttribute(string localName, string prefix, string childURI, string attrValue, bool bCreatingNewType, XmlSchema parentSchema, XmlSchemaObjectCollection addLocation, XmlSchemaObjectTable compiledAttributes);
    private XmlSchema CreateXmlSchema(string targetNS);
    private XmlSchemaElement AddElement(string localName, string prefix, string childURI, XmlSchema parentSchema, XmlSchemaObjectCollection addLocation, int positionWithinCollection);
    internal void InferElement(XmlSchemaElement xse, bool bCreatingNewType, XmlSchema parentSchema);
    private XmlSchemaSimpleContentExtension CheckSimpleContentExtension(XmlSchemaComplexType ct);
    private XmlSchemaType GetEffectiveSchemaType(XmlSchemaElement elem, bool bCreatingNewType);
    internal XmlSchemaElement FindMatchingElement(bool bCreatingNewType, XmlReader xtr, XmlSchemaComplexType ct, Int32& lastUsedSeqItem, Boolean& bParticleChanged, XmlSchema parentSchema, bool setMaxoccurs);
    internal void ProcessAttributes(XmlSchemaElement& xse, XmlSchemaType effectiveSchemaType, bool bCreatingNewType, XmlSchema parentSchema);
    private void MoveAttributes(XmlSchemaSimpleContentExtension scExtension, XmlSchemaComplexType ct);
    private void MoveAttributes(XmlSchemaComplexType ct, XmlSchemaSimpleContentExtension simpleContentExtension, bool bCreatingNewType);
    internal XmlSchemaAttribute FindAttribute(ICollection attributes, string attrName);
    internal XmlSchemaElement FindGlobalElement(string namespaceURI, string localName, XmlSchema& parentSchema);
    internal XmlSchemaElement FindElement(XmlSchemaObjectCollection elements, string elementName);
    internal XmlSchemaAttribute FindAttributeRef(ICollection attributes, string attributeName, string nsURI);
    internal XmlSchemaElement FindElementRef(XmlSchemaObjectCollection elements, string elementName, string nsURI);
    internal void MakeExistingAttributesOptional(XmlSchemaComplexType ct, XmlSchemaObjectCollection attributesInInstance);
    private void SwitchUseToOptional(XmlSchemaObjectCollection attributes, XmlSchemaObjectCollection attributesInInstance);
    internal XmlQualifiedName RefineSimpleType(string s, Int32& iTypeFlags);
    internal static int InferSimpleType(string s, Boolean& bNeedsRangeCheck);
    internal static int DateTime(string s, bool bDate, bool bTime);
    private XmlSchemaElement CreateNewElementforChoice(XmlSchemaElement copyElement);
    private static int GetSchemaType(XmlQualifiedName qname);
    internal void SetMinMaxOccurs(XmlSchemaElement el, bool setMaxOccurs);
}
[TypeForwardedFromAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Xml.Schema.XmlSchemaInferenceException : XmlSchemaException {
    protected XmlSchemaInferenceException(SerializationInfo info, StreamingContext context);
    public XmlSchemaInferenceException(string message);
    public XmlSchemaInferenceException(string message, Exception innerException);
    public XmlSchemaInferenceException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlSchemaInferenceException(string res, string arg);
    internal XmlSchemaInferenceException(string res, int lineNumber, int linePosition);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xml.Schema.XmlSchemaInfo : object {
    private bool _isDefault;
    private bool _isNil;
    private XmlSchemaElement _schemaElement;
    private XmlSchemaAttribute _schemaAttribute;
    private XmlSchemaType _schemaType;
    private XmlSchemaSimpleType _memberType;
    private XmlSchemaValidity _validity;
    private XmlSchemaContentType _contentType;
    public XmlSchemaValidity Validity { get; public set; }
    public bool IsDefault { get; public set; }
    public bool IsNil { get; public set; }
    public XmlSchemaSimpleType MemberType { get; public set; }
    public XmlSchemaType SchemaType { get; public set; }
    public XmlSchemaElement SchemaElement { get; public set; }
    public XmlSchemaAttribute SchemaAttribute { get; public set; }
    public XmlSchemaContentType ContentType { get; public set; }
    internal XmlSchemaType XmlType { get; }
    internal bool HasDefaultValue { get; }
    internal bool IsUnionType { get; }
    internal XmlSchemaInfo(XmlSchemaValidity validity);
    public sealed virtual XmlSchemaValidity get_Validity();
    public void set_Validity(XmlSchemaValidity value);
    public sealed virtual bool get_IsDefault();
    public void set_IsDefault(bool value);
    public sealed virtual bool get_IsNil();
    public void set_IsNil(bool value);
    public sealed virtual XmlSchemaSimpleType get_MemberType();
    public void set_MemberType(XmlSchemaSimpleType value);
    public sealed virtual XmlSchemaType get_SchemaType();
    public void set_SchemaType(XmlSchemaType value);
    public sealed virtual XmlSchemaElement get_SchemaElement();
    public void set_SchemaElement(XmlSchemaElement value);
    public sealed virtual XmlSchemaAttribute get_SchemaAttribute();
    public void set_SchemaAttribute(XmlSchemaAttribute value);
    public XmlSchemaContentType get_ContentType();
    public void set_ContentType(XmlSchemaContentType value);
    internal XmlSchemaType get_XmlType();
    internal bool get_HasDefaultValue();
    internal bool get_IsUnionType();
    internal void Clear();
}
public class System.Xml.Schema.XmlSchemaKey : XmlSchemaIdentityConstraint {
}
public class System.Xml.Schema.XmlSchemaKeyref : XmlSchemaIdentityConstraint {
    private XmlQualifiedName _refer;
    [XmlAttributeAttribute("refer")]
public XmlQualifiedName Refer { get; public set; }
    public XmlQualifiedName get_Refer();
    public void set_Refer(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaMaxExclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMaxInclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMaxLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaMinExclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMinInclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMinLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaNotation : XmlSchemaAnnotated {
    private string _name;
    private string _publicId;
    private string _systemId;
    private XmlQualifiedName _qname;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("public")]
public string Public { get; public set; }
    [XmlAttributeAttribute("system")]
public string System { get; public set; }
    [XmlIgnoreAttribute]
internal XmlQualifiedName QualifiedName { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Public();
    public void set_Public(string value);
    public string get_System();
    public void set_System(string value);
    internal XmlQualifiedName get_QualifiedName();
    internal void set_QualifiedName(XmlQualifiedName value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
}
public abstract class System.Xml.Schema.XmlSchemaNumericFacet : XmlSchemaFacet {
}
public abstract class System.Xml.Schema.XmlSchemaObject : object {
    private int _lineNum;
    private int _linePos;
    private string _sourceUri;
    private XmlSerializerNamespaces _namespaces;
    private XmlSchemaObject _parent;
    private bool _isProcessing;
    [XmlIgnoreAttribute]
public int LineNumber { get; public set; }
    [XmlIgnoreAttribute]
public int LinePosition { get; public set; }
    [XmlIgnoreAttribute]
public string SourceUri { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObject Parent { get; public set; }
    [XmlNamespaceDeclarationsAttribute]
public XmlSerializerNamespaces Namespaces { get; public set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    [XmlIgnoreAttribute]
internal bool IsProcessing { get; internal set; }
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_LinePosition();
    public void set_LinePosition(int value);
    public string get_SourceUri();
    public void set_SourceUri(string value);
    public XmlSchemaObject get_Parent();
    public void set_Parent(XmlSchemaObject value);
    public XmlSerializerNamespaces get_Namespaces();
    public void set_Namespaces(XmlSerializerNamespaces value);
    internal virtual void OnAdd(XmlSchemaObjectCollection container, object item);
    internal virtual void OnRemove(XmlSchemaObjectCollection container, object item);
    internal virtual void OnClear(XmlSchemaObjectCollection container);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal bool get_IsProcessing();
    internal void set_IsProcessing(bool value);
    internal virtual XmlSchemaObject Clone();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Schema.XmlSchemaObjectCollection : CollectionBase {
    private XmlSchemaObject _parent;
    public XmlSchemaObject Item { get; public set; }
    public XmlSchemaObjectCollection(XmlSchemaObject parent);
    public virtual XmlSchemaObject get_Item(int index);
    public virtual void set_Item(int index, XmlSchemaObject value);
    public XmlSchemaObjectEnumerator GetEnumerator();
    public int Add(XmlSchemaObject item);
    public void Insert(int index, XmlSchemaObject item);
    public int IndexOf(XmlSchemaObject item);
    public bool Contains(XmlSchemaObject item);
    public void Remove(XmlSchemaObject item);
    public void CopyTo(XmlSchemaObject[] array, int index);
    protected virtual void OnInsert(int index, object item);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnClear();
    protected virtual void OnRemove(int index, object item);
    internal XmlSchemaObjectCollection Clone();
    private void Add(XmlSchemaObjectCollection collToAdd);
}
public class System.Xml.Schema.XmlSchemaObjectEnumerator : object {
    private IEnumerator _enumerator;
    public XmlSchemaObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal XmlSchemaObjectEnumerator(IEnumerator enumerator);
    public void Reset();
    public bool MoveNext();
    public XmlSchemaObject get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Schema.XmlSchemaObjectTable : object {
    private Dictionary`2<XmlQualifiedName, XmlSchemaObject> _table;
    private List`1<XmlSchemaObjectEntry> _entries;
    public int Count { get; }
    public XmlSchemaObject Item { get; }
    public ICollection Names { get; }
    public ICollection Values { get; }
    internal void Add(XmlQualifiedName name, XmlSchemaObject value);
    internal void Insert(XmlQualifiedName name, XmlSchemaObject value);
    internal void Replace(XmlQualifiedName name, XmlSchemaObject value);
    internal void Clear();
    internal void Remove(XmlQualifiedName name);
    private int FindIndexByValue(XmlSchemaObject xso);
    public int get_Count();
    public bool Contains(XmlQualifiedName name);
    public XmlSchemaObject get_Item(XmlQualifiedName name);
    public ICollection get_Names();
    public ICollection get_Values();
    public IDictionaryEnumerator GetEnumerator();
}
public abstract class System.Xml.Schema.XmlSchemaParticle : XmlSchemaAnnotated {
    private decimal _minOccurs;
    private decimal _maxOccurs;
    private Occurs _flags;
    internal static XmlSchemaParticle Empty;
    [XmlAttributeAttribute("minOccurs")]
public string MinOccursString { get; public set; }
    [XmlAttributeAttribute("maxOccurs")]
public string MaxOccursString { get; public set; }
    [XmlIgnoreAttribute]
public decimal MinOccurs { get; public set; }
    [XmlIgnoreAttribute]
public decimal MaxOccurs { get; public set; }
    internal bool IsEmpty { get; }
    internal bool IsMultipleOccurrence { get; }
    internal string NameString { get; }
    private static XmlSchemaParticle();
    public string get_MinOccursString();
    public void set_MinOccursString(string value);
    public string get_MaxOccursString();
    public void set_MaxOccursString(string value);
    public decimal get_MinOccurs();
    public void set_MinOccurs(decimal value);
    public decimal get_MaxOccurs();
    public void set_MaxOccurs(decimal value);
    internal virtual bool get_IsEmpty();
    internal bool get_IsMultipleOccurrence();
    internal virtual string get_NameString();
    internal XmlQualifiedName GetQualifiedName();
}
public class System.Xml.Schema.XmlSchemaPatternFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaRedefine : XmlSchemaExternal {
    private XmlSchemaObjectCollection _items;
    private XmlSchemaObjectTable _attributeGroups;
    private XmlSchemaObjectTable _types;
    private XmlSchemaObjectTable _groups;
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroup")]
[XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroup")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaObjectCollection Items { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeGroups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable SchemaTypes { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Groups { get; }
    public XmlSchemaObjectCollection get_Items();
    public XmlSchemaObjectTable get_AttributeGroups();
    public XmlSchemaObjectTable get_SchemaTypes();
    public XmlSchemaObjectTable get_Groups();
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaSequence : XmlSchemaGroupBase {
    private XmlSchemaObjectCollection _items;
    [XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
[XmlElementAttribute("any", "System.Xml.Schema.XmlSchemaAny")]
public XmlSchemaObjectCollection Items { get; }
    internal bool IsEmpty { get; }
    public virtual XmlSchemaObjectCollection get_Items();
    internal virtual bool get_IsEmpty();
    internal virtual void SetItems(XmlSchemaObjectCollection newItems);
}
public class System.Xml.Schema.XmlSchemaSet : object {
    private XmlNameTable _nameTable;
    private SchemaNames _schemaNames;
    private SortedList _schemas;
    private ValidationEventHandler _internalEventHandler;
    private ValidationEventHandler _eventHandler;
    private bool _isCompiled;
    private Hashtable _schemaLocations;
    private Hashtable _chameleonSchemas;
    private Hashtable _targetNamespaces;
    private bool _compileAll;
    private SchemaInfo _cachedCompiledInfo;
    private XmlReaderSettings _readerSettings;
    private XmlSchema _schemaForSchema;
    private XmlSchemaCompilationSettings _compilationSettings;
    internal XmlSchemaObjectTable elements;
    internal XmlSchemaObjectTable attributes;
    internal XmlSchemaObjectTable schemaTypes;
    internal XmlSchemaObjectTable substitutionGroups;
    private XmlSchemaObjectTable _typeExtensions;
    private object _internalSyncObject;
    internal object InternalSyncObject { get; }
    public XmlNameTable NameTable { get; }
    public bool IsCompiled { get; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlSchemaCompilationSettings CompilationSettings { get; public set; }
    public int Count { get; }
    public XmlSchemaObjectTable GlobalElements { get; }
    public XmlSchemaObjectTable GlobalAttributes { get; }
    public XmlSchemaObjectTable GlobalTypes { get; }
    internal XmlSchemaObjectTable SubstitutionGroups { get; }
    internal Hashtable SchemaLocations { get; }
    internal XmlSchemaObjectTable TypeExtensions { get; }
    internal SchemaInfo CompiledInfo { get; }
    internal XmlReaderSettings ReaderSettings { get; }
    internal SortedList SortedSchemas { get; }
    public XmlSchemaSet(XmlNameTable nameTable);
    internal object get_InternalSyncObject();
    public XmlNameTable get_NameTable();
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public bool get_IsCompiled();
    public void set_XmlResolver(XmlResolver value);
    public XmlSchemaCompilationSettings get_CompilationSettings();
    public void set_CompilationSettings(XmlSchemaCompilationSettings value);
    public int get_Count();
    public XmlSchemaObjectTable get_GlobalElements();
    public XmlSchemaObjectTable get_GlobalAttributes();
    public XmlSchemaObjectTable get_GlobalTypes();
    internal XmlSchemaObjectTable get_SubstitutionGroups();
    internal Hashtable get_SchemaLocations();
    internal XmlSchemaObjectTable get_TypeExtensions();
    public XmlSchema Add(string targetNamespace, string schemaUri);
    public XmlSchema Add(string targetNamespace, XmlReader schemaDocument);
    public void Add(XmlSchemaSet schemas);
    public XmlSchema Add(XmlSchema schema);
    public XmlSchema Remove(XmlSchema schema);
    public bool RemoveRecursive(XmlSchema schemaToRemove);
    public bool Contains(string targetNamespace);
    public bool Contains(XmlSchema schema);
    public void Compile();
    public XmlSchema Reprocess(XmlSchema schema);
    public void CopyTo(XmlSchema[] schemas, int index);
    public ICollection Schemas();
    public ICollection Schemas(string targetNamespace);
    private XmlSchema Add(string targetNamespace, XmlSchema schema);
    internal void Add(string targetNamespace, XmlReader reader, Hashtable validatedNamespaces);
    internal XmlSchema FindSchemaByNSAndUrl(Uri schemaUri, string ns, DictionaryEntry[] locationsTable);
    private void SetDtdProcessing(XmlReader reader);
    private void AddSchemaToSet(XmlSchema schema);
    private void ProcessNewSubstitutionGroups(XmlSchemaObjectTable substitutionGroupsTable, bool resolve);
    private void ResolveSubstitutionGroup(XmlSchemaSubstitutionGroup substitutionGroup, XmlSchemaObjectTable substTable);
    internal XmlSchema Remove(XmlSchema schema, bool forceCompile);
    private void ClearTables();
    internal bool PreprocessSchema(XmlSchema& schema, string targetNamespace);
    internal XmlSchema ParseSchema(string targetNamespace, XmlReader reader);
    internal void CopyFromCompiledSet(XmlSchemaSet otherSet);
    internal SchemaInfo get_CompiledInfo();
    internal XmlReaderSettings get_ReaderSettings();
    internal XmlResolver GetResolver();
    internal ValidationEventHandler GetEventHandler();
    internal SchemaNames GetSchemaNames(XmlNameTable nt);
    internal bool IsSchemaLoaded(Uri schemaUri, string targetNamespace, XmlSchema& schema);
    internal bool GetSchemaByUri(Uri schemaUri, XmlSchema& schema);
    internal string GetTargetNamespace(XmlSchema schema);
    internal SortedList get_SortedSchemas();
    private void RemoveSchemaFromCaches(XmlSchema schema);
    private void RemoveSchemaFromGlobalTables(XmlSchema schema);
    private bool AddToTable(XmlSchemaObjectTable table, XmlQualifiedName qname, XmlSchemaObject item);
    private void VerifyTables();
    private void InternalValidationCallback(object sender, ValidationEventArgs e);
    private void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity);
}
public class System.Xml.Schema.XmlSchemaSimpleContent : XmlSchemaContentModel {
    private XmlSchemaContent _content;
    [XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaSimpleContentRestriction")]
[XmlElementAttribute("extension", "System.Xml.Schema.XmlSchemaSimpleContentExtension")]
public XmlSchemaContent Content { get; public set; }
    public virtual XmlSchemaContent get_Content();
    public virtual void set_Content(XmlSchemaContent value);
}
public class System.Xml.Schema.XmlSchemaSimpleContentExtension : XmlSchemaContent {
    private XmlSchemaObjectCollection _attributes;
    private XmlSchemaAnyAttribute _anyAttribute;
    private XmlQualifiedName _baseTypeName;
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaSimpleContentRestriction : XmlSchemaContent {
    private XmlQualifiedName _baseTypeName;
    private XmlSchemaSimpleType _baseType;
    private XmlSchemaObjectCollection _facets;
    private XmlSchemaObjectCollection _attributes;
    private XmlSchemaAnyAttribute _anyAttribute;
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType BaseType { get; public set; }
    [XmlElementAttribute("length", "System.Xml.Schema.XmlSchemaLengthFacet")]
[XmlElementAttribute("minLength", "System.Xml.Schema.XmlSchemaMinLengthFacet")]
[XmlElementAttribute("maxLength", "System.Xml.Schema.XmlSchemaMaxLengthFacet")]
[XmlElementAttribute("pattern", "System.Xml.Schema.XmlSchemaPatternFacet")]
[XmlElementAttribute("enumeration", "System.Xml.Schema.XmlSchemaEnumerationFacet")]
[XmlElementAttribute("maxInclusive", "System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]
[XmlElementAttribute("maxExclusive", "System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]
[XmlElementAttribute("minInclusive", "System.Xml.Schema.XmlSchemaMinInclusiveFacet")]
[XmlElementAttribute("minExclusive", "System.Xml.Schema.XmlSchemaMinExclusiveFacet")]
[XmlElementAttribute("totalDigits", "System.Xml.Schema.XmlSchemaTotalDigitsFacet")]
[XmlElementAttribute("fractionDigits", "System.Xml.Schema.XmlSchemaFractionDigitsFacet")]
[XmlElementAttribute("whiteSpace", "System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]
public XmlSchemaObjectCollection Facets { get; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_BaseType();
    public void set_BaseType(XmlSchemaSimpleType value);
    public XmlSchemaObjectCollection get_Facets();
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaSimpleType : XmlSchemaType {
    private XmlSchemaSimpleTypeContent _content;
    [XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaSimpleTypeRestriction")]
[XmlElementAttribute("list", "System.Xml.Schema.XmlSchemaSimpleTypeList")]
[XmlElementAttribute("union", "System.Xml.Schema.XmlSchemaSimpleTypeUnion")]
public XmlSchemaSimpleTypeContent Content { get; public set; }
    internal XmlQualifiedName DerivedFrom { get; }
    public XmlSchemaSimpleTypeContent get_Content();
    public void set_Content(XmlSchemaSimpleTypeContent value);
    internal virtual XmlQualifiedName get_DerivedFrom();
    internal virtual XmlSchemaObject Clone();
}
public abstract class System.Xml.Schema.XmlSchemaSimpleTypeContent : XmlSchemaAnnotated {
}
public class System.Xml.Schema.XmlSchemaSimpleTypeList : XmlSchemaSimpleTypeContent {
    private XmlQualifiedName _itemTypeName;
    private XmlSchemaSimpleType _itemType;
    private XmlSchemaSimpleType _baseItemType;
    [XmlAttributeAttribute("itemType")]
public XmlQualifiedName ItemTypeName { get; public set; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType ItemType { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType BaseItemType { get; public set; }
    public XmlQualifiedName get_ItemTypeName();
    public void set_ItemTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_ItemType();
    public void set_ItemType(XmlSchemaSimpleType value);
    public XmlSchemaSimpleType get_BaseItemType();
    public void set_BaseItemType(XmlSchemaSimpleType value);
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaSimpleTypeRestriction : XmlSchemaSimpleTypeContent {
    private XmlQualifiedName _baseTypeName;
    private XmlSchemaSimpleType _baseType;
    private XmlSchemaObjectCollection _facets;
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType BaseType { get; public set; }
    [XmlElementAttribute("length", "System.Xml.Schema.XmlSchemaLengthFacet")]
[XmlElementAttribute("minLength", "System.Xml.Schema.XmlSchemaMinLengthFacet")]
[XmlElementAttribute("maxLength", "System.Xml.Schema.XmlSchemaMaxLengthFacet")]
[XmlElementAttribute("pattern", "System.Xml.Schema.XmlSchemaPatternFacet")]
[XmlElementAttribute("enumeration", "System.Xml.Schema.XmlSchemaEnumerationFacet")]
[XmlElementAttribute("maxInclusive", "System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]
[XmlElementAttribute("maxExclusive", "System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]
[XmlElementAttribute("minInclusive", "System.Xml.Schema.XmlSchemaMinInclusiveFacet")]
[XmlElementAttribute("minExclusive", "System.Xml.Schema.XmlSchemaMinExclusiveFacet")]
[XmlElementAttribute("totalDigits", "System.Xml.Schema.XmlSchemaTotalDigitsFacet")]
[XmlElementAttribute("fractionDigits", "System.Xml.Schema.XmlSchemaFractionDigitsFacet")]
[XmlElementAttribute("whiteSpace", "System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]
public XmlSchemaObjectCollection Facets { get; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_BaseType();
    public void set_BaseType(XmlSchemaSimpleType value);
    public XmlSchemaObjectCollection get_Facets();
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaSimpleTypeUnion : XmlSchemaSimpleTypeContent {
    private XmlSchemaObjectCollection _baseTypes;
    private XmlQualifiedName[] _memberTypes;
    private XmlSchemaSimpleType[] _baseMemberTypes;
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaObjectCollection BaseTypes { get; }
    [XmlAttributeAttribute("memberTypes")]
public XmlQualifiedName[] MemberTypes { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType[] BaseMemberTypes { get; }
    public XmlSchemaObjectCollection get_BaseTypes();
    public XmlQualifiedName[] get_MemberTypes();
    public void set_MemberTypes(XmlQualifiedName[] value);
    public XmlSchemaSimpleType[] get_BaseMemberTypes();
    internal void SetBaseMemberTypes(XmlSchemaSimpleType[] baseMemberTypes);
    internal virtual XmlSchemaObject Clone();
}
internal class System.Xml.Schema.XmlSchemaSubstitutionGroup : XmlSchemaObject {
    private ArrayList _membersList;
    private XmlQualifiedName _examplar;
    [XmlIgnoreAttribute]
internal ArrayList Members { get; }
    [XmlIgnoreAttribute]
internal XmlQualifiedName Examplar { get; internal set; }
    internal ArrayList get_Members();
    internal XmlQualifiedName get_Examplar();
    internal void set_Examplar(XmlQualifiedName value);
}
internal class System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat : XmlSchemaSubstitutionGroup {
    private XmlSchemaChoice _choice;
    [XmlIgnoreAttribute]
internal XmlSchemaChoice Choice { get; }
    internal XmlSchemaChoice get_Choice();
}
public class System.Xml.Schema.XmlSchemaTotalDigitsFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaType : XmlSchemaAnnotated {
    private string _name;
    private XmlSchemaDerivationMethod _final;
    private XmlSchemaDerivationMethod _derivedBy;
    private XmlSchemaType _baseSchemaType;
    private XmlSchemaDatatype _datatype;
    private XmlSchemaDerivationMethod _finalResolved;
    private SchemaElementDecl modreq(System.Runtime.CompilerServices.IsVolatile) _elementDecl;
    private XmlQualifiedName modreq(System.Runtime.CompilerServices.IsVolatile) _qname;
    private XmlSchemaType _redefined;
    private XmlSchemaContentType _contentType;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("final")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Final { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod FinalResolved { get; }
    [XmlIgnoreAttribute]
[ObsoleteAttribute("This property has been deprecated. Please use BaseXmlSchemaType property that returns a strongly typed base schema type. http://go.microsoft.com/fwlink/?linkid=14202")]
public object BaseSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaType BaseXmlSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod DerivedBy { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDatatype Datatype { get; }
    [XmlIgnoreAttribute]
public bool IsMixed { get; public set; }
    [XmlIgnoreAttribute]
public XmlTypeCode TypeCode { get; }
    [XmlIgnoreAttribute]
internal XmlValueConverter ValueConverter { get; }
    internal XmlSchemaContentType SchemaContentType { get; }
    internal SchemaElementDecl ElementDecl { get; internal set; }
    [XmlIgnoreAttribute]
internal XmlSchemaType Redefined { get; internal set; }
    internal XmlQualifiedName DerivedFrom { get; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlQualifiedName qualifiedName);
    public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlTypeCode typeCode);
    public static XmlSchemaComplexType GetBuiltInComplexType(XmlTypeCode typeCode);
    public static XmlSchemaComplexType GetBuiltInComplexType(XmlQualifiedName qualifiedName);
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaDerivationMethod get_Final();
    public void set_Final(XmlSchemaDerivationMethod value);
    public XmlQualifiedName get_QualifiedName();
    public XmlSchemaDerivationMethod get_FinalResolved();
    public object get_BaseSchemaType();
    public XmlSchemaType get_BaseXmlSchemaType();
    public XmlSchemaDerivationMethod get_DerivedBy();
    public XmlSchemaDatatype get_Datatype();
    public virtual bool get_IsMixed();
    public virtual void set_IsMixed(bool value);
    public XmlTypeCode get_TypeCode();
    internal XmlValueConverter get_ValueConverter();
    internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler);
    internal XmlSchemaContentType get_SchemaContentType();
    internal void SetQualifiedName(XmlQualifiedName value);
    internal void SetFinalResolved(XmlSchemaDerivationMethod value);
    internal void SetBaseSchemaType(XmlSchemaType value);
    internal void SetDerivedBy(XmlSchemaDerivationMethod value);
    internal void SetDatatype(XmlSchemaDatatype value);
    internal SchemaElementDecl get_ElementDecl();
    internal void set_ElementDecl(SchemaElementDecl value);
    internal XmlSchemaType get_Redefined();
    internal void set_Redefined(XmlSchemaType value);
    internal virtual XmlQualifiedName get_DerivedFrom();
    internal void SetContentType(XmlSchemaContentType value);
    public static bool IsDerivedFrom(XmlSchemaType derivedType, XmlSchemaType baseType, XmlSchemaDerivationMethod except);
    internal static bool IsDerivedFromDatatype(XmlSchemaDatatype derivedDataType, XmlSchemaDatatype baseDataType, XmlSchemaDerivationMethod except);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
}
public class System.Xml.Schema.XmlSchemaUnique : XmlSchemaIdentityConstraint {
}
public enum System.Xml.Schema.XmlSchemaUse : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaUse None;
    [XmlEnumAttribute("optional")]
public static XmlSchemaUse Optional;
    [XmlEnumAttribute("prohibited")]
public static XmlSchemaUse Prohibited;
    [XmlEnumAttribute("required")]
public static XmlSchemaUse Required;
}
[TypeForwardedFromAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Xml.Schema.XmlSchemaValidationException : XmlSchemaException {
    private object _sourceNodeObject;
    public object SourceObject { get; }
    protected XmlSchemaValidationException(SerializationInfo info, StreamingContext context);
    public XmlSchemaValidationException(string message);
    public XmlSchemaValidationException(string message, Exception innerException);
    public XmlSchemaValidationException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, string arg, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, String[] args, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, String[] args, Exception innerException, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, String[] args, object sourceNode);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public object get_SourceObject();
    protected internal void SetSourceObject(object sourceObject);
}
[FlagsAttribute]
public enum System.Xml.Schema.XmlSchemaValidationFlags : Enum {
    public int value__;
    public static XmlSchemaValidationFlags None;
    public static XmlSchemaValidationFlags ProcessInlineSchema;
    public static XmlSchemaValidationFlags ProcessSchemaLocation;
    public static XmlSchemaValidationFlags ReportValidationWarnings;
    public static XmlSchemaValidationFlags ProcessIdentityConstraints;
    public static XmlSchemaValidationFlags AllowXmlAttributes;
}
public class System.Xml.Schema.XmlSchemaValidator : object {
    private XmlSchemaSet _schemaSet;
    private XmlSchemaValidationFlags _validationFlags;
    private int _startIDConstraint;
    private static int STACK_INCREMENT;
    private bool _isRoot;
    private bool _rootHasSchema;
    private bool _attrValid;
    private bool _checkEntity;
    private SchemaInfo _compiledSchemaInfo;
    private IDtdInfo _dtdSchemaInfo;
    private Hashtable _validatedNamespaces;
    private HWStack _validationStack;
    private ValidationState _context;
    private ValidatorState _currentState;
    private Hashtable _attPresence;
    private SchemaAttDef _wildID;
    private Hashtable _IDs;
    private IdRefNode _idRefListHead;
    private XmlQualifiedName _contextQName;
    private string _nsXs;
    private string _nsXsi;
    private string _nsXmlNs;
    private string _nsXml;
    private XmlSchemaObject _partialValidationType;
    private StringBuilder _textValue;
    private ValidationEventHandler _eventHandler;
    private object _validationEventSender;
    private XmlNameTable _nameTable;
    private IXmlLineInfo _positionInfo;
    private IXmlLineInfo _dummyPositionInfo;
    private XmlResolver _xmlResolver;
    private Uri _sourceUri;
    private string _sourceUriString;
    private IXmlNamespaceResolver _nsResolver;
    private XmlSchemaContentProcessing _processContents;
    private static XmlSchemaAttribute s_xsiTypeSO;
    private static XmlSchemaAttribute s_xsiNilSO;
    private static XmlSchemaAttribute s_xsiSLSO;
    private static XmlSchemaAttribute s_xsiNoNsSLSO;
    private string _xsiTypeString;
    private string _xsiNilString;
    private string _xsiSchemaLocationString;
    private string _xsiNoNamespaceSchemaLocationString;
    private static XmlSchemaDatatype s_dtQName;
    private static XmlSchemaDatatype s_dtCDATA;
    private static XmlSchemaDatatype s_dtStringArray;
    private static string Quote;
    private static XmlSchemaParticle[] s_emptyParticleArray;
    private static XmlSchemaAttribute[] s_emptyAttributeArray;
    private XmlCharType _xmlCharType;
    internal static Boolean[0...,0...] ValidStates;
    private static String[] s_methodNames;
    unknown XmlResolver XmlResolver {public set; }
    public IXmlLineInfo LineInfoProvider { get; public set; }
    public Uri SourceUri { get; public set; }
    public object ValidationEventSender { get; public set; }
    internal XmlSchemaSet SchemaSet { get; }
    internal XmlSchemaValidationFlags ValidationFlags { get; }
    internal XmlSchemaContentType CurrentContentType { get; }
    internal XmlSchemaContentProcessing CurrentProcessContents { get; }
    private bool StrictlyAssessed { get; }
    private bool HasSchema { get; }
    private bool HasIdentityConstraints { get; }
    internal bool ProcessIdentityConstraints { get; }
    internal bool ReportValidationWarnings { get; }
    internal bool ProcessSchemaHints { get; }
    public XmlSchemaValidator(XmlNameTable nameTable, XmlSchemaSet schemas, IXmlNamespaceResolver namespaceResolver, XmlSchemaValidationFlags validationFlags);
    private static XmlSchemaValidator();
    private void Init();
    private void Reset();
    public void set_XmlResolver(XmlResolver value);
    public IXmlLineInfo get_LineInfoProvider();
    public void set_LineInfoProvider(IXmlLineInfo value);
    public Uri get_SourceUri();
    public void set_SourceUri(Uri value);
    public object get_ValidationEventSender();
    public void set_ValidationEventSender(object value);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public void AddSchema(XmlSchema schema);
    public void Initialize();
    public void Initialize(XmlSchemaObject partialValidationType);
    public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo);
    public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);
    public object ValidateAttribute(string localName, string namespaceUri, string attributeValue, XmlSchemaInfo schemaInfo);
    public object ValidateAttribute(string localName, string namespaceUri, XmlValueGetter attributeValue, XmlSchemaInfo schemaInfo);
    private object ValidateAttribute(string localName, string namespaceUri, XmlValueGetter attributeValueGetter, string attributeStringValue, XmlSchemaInfo schemaInfo);
    public void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributes);
    public void ValidateEndOfAttributes(XmlSchemaInfo schemaInfo);
    public void ValidateText(string elementValue);
    public void ValidateText(XmlValueGetter elementValue);
    private void ValidateText(string elementStringValue, XmlValueGetter elementValueGetter);
    public void ValidateWhitespace(string elementValue);
    public void ValidateWhitespace(XmlValueGetter elementValue);
    private void ValidateWhitespace(string elementStringValue, XmlValueGetter elementValueGetter);
    public object ValidateEndElement(XmlSchemaInfo schemaInfo);
    public object ValidateEndElement(XmlSchemaInfo schemaInfo, object typedValue);
    public void SkipToEndElement(XmlSchemaInfo schemaInfo);
    public void EndValidation();
    public XmlSchemaParticle[] GetExpectedParticles();
    public XmlSchemaAttribute[] GetExpectedAttributes();
    internal void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributes, bool createNodeData);
    internal XmlSchemaSet get_SchemaSet();
    internal XmlSchemaValidationFlags get_ValidationFlags();
    internal XmlSchemaContentType get_CurrentContentType();
    internal XmlSchemaContentProcessing get_CurrentProcessContents();
    internal void SetDtdSchemaInfo(IDtdInfo dtdSchemaInfo);
    private bool get_StrictlyAssessed();
    private bool get_HasSchema();
    internal string GetConcatenatedValue();
    private object InternalValidateEndElement(XmlSchemaInfo schemaInfo, object typedValue);
    private void ProcessSchemaLocations(string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);
    private object ValidateElementContext(XmlQualifiedName elementName, Boolean& invalidElementInContext);
    private XmlSchemaElement GetSubstitutionGroupHead(XmlQualifiedName member);
    private object ValidateAtomicValue(string stringValue, XmlSchemaSimpleType& memberType);
    private object ValidateAtomicValue(object parsedValue, XmlSchemaSimpleType& memberType);
    private string GetTypeName(SchemaDeclBase decl);
    private void SaveTextValue(object value);
    private void Push(XmlQualifiedName elementName);
    private void Pop();
    private void AddXsiAttributes(ArrayList attList);
    private SchemaElementDecl FastGetElementDecl(XmlQualifiedName elementName, object particle);
    private SchemaElementDecl CheckXsiTypeAndNil(SchemaElementDecl elementDecl, string xsiType, string xsiNil, Boolean& declFound);
    private void ThrowDeclNotFoundWarningOrError(bool declFound);
    private void CheckElementProperties();
    private void ValidateStartElementIdentityConstraints();
    private SchemaAttDef CheckIsXmlAttribute(XmlQualifiedName attQName);
    private void AddXmlNamespaceSchema();
    internal object CheckMixedValueConstraint(string elementValue);
    private void LoadSchema(string uri, string url);
    internal void RecompileSchemaSet();
    private void ProcessTokenizedType(XmlTokenizedType ttype, string name, bool attrValue);
    private object CheckAttributeValue(object value, SchemaAttDef attdef);
    private object CheckElementValue(string stringValue);
    private void CheckTokenizedTypes(XmlSchemaDatatype dtype, object typedValue, bool attrValue);
    private object FindId(string name);
    private void CheckForwardRefs();
    private bool get_HasIdentityConstraints();
    internal bool get_ProcessIdentityConstraints();
    internal bool get_ReportValidationWarnings();
    internal bool get_ProcessSchemaHints();
    private void CheckStateTransition(ValidatorState toState, string methodName);
    private void ClearPSVI();
    private void CheckRequiredAttributes(SchemaElementDecl currentElementDecl);
    private XmlSchemaElement GetSchemaElement();
    internal string GetDefaultAttributePrefix(string attributeNS);
    private void AddIdentityConstraints();
    private void ElementIdentityConstraints();
    private void AttributeIdentityConstraints(string name, string ns, object obj, string sobj, XmlSchemaDatatype datatype);
    private void EndElementIdentityConstraints(object typedValue, string stringValue, XmlSchemaDatatype datatype);
    private static void BuildXsiAttributes();
    internal static void ElementValidationError(XmlQualifiedName name, ValidationState context, ValidationEventHandler eventHandler, object sender, string sourceUri, int lineNo, int linePos, XmlSchemaSet schemaSet);
    internal static void CompleteValidationError(ValidationState context, ValidationEventHandler eventHandler, object sender, string sourceUri, int lineNo, int linePos, XmlSchemaSet schemaSet);
    internal static string PrintExpectedElements(ArrayList expected, bool getParticles);
    private static string PrintNames(ArrayList expected);
    private static void PrintNamesWithNS(ArrayList expected, StringBuilder builder);
    private static void EnumerateAny(StringBuilder builder, string namespaces);
    internal static string QNameString(string localName, string ns);
    internal static string BuildElementName(XmlQualifiedName qname);
    internal static string BuildElementName(string localName, string ns);
    private void ProcessEntity(string name);
    private void SendValidationEvent(string code);
    private void SendValidationEvent(string code, String[] args);
    private void SendValidationEvent(string code, string arg);
    private void SendValidationEvent(string code, string arg1, string arg2);
    private void SendValidationEvent(string code, String[] args, Exception innerException, XmlSeverityType severity);
    private void SendValidationEvent(string code, String[] args, Exception innerException);
    private void SendValidationEvent(XmlSchemaValidationException e);
    private void SendValidationEvent(XmlSchemaException e);
    private void SendValidationEvent(string code, string msg, XmlSeverityType severity);
    private void SendValidationEvent(XmlSchemaValidationException e, XmlSeverityType severity);
    internal static void SendValidationEvent(ValidationEventHandler eventHandler, object sender, XmlSchemaValidationException e, XmlSeverityType severity);
}
public enum System.Xml.Schema.XmlSchemaValidity : Enum {
    public int value__;
    public static XmlSchemaValidity NotKnown;
    public static XmlSchemaValidity Valid;
    public static XmlSchemaValidity Invalid;
}
internal enum System.Xml.Schema.XmlSchemaWhiteSpace : Enum {
    public int value__;
    public static XmlSchemaWhiteSpace Preserve;
    public static XmlSchemaWhiteSpace Replace;
    public static XmlSchemaWhiteSpace Collapse;
}
public class System.Xml.Schema.XmlSchemaWhiteSpaceFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaXPath : XmlSchemaAnnotated {
    private string _xpath;
    [XmlAttributeAttribute("xpath")]
[DefaultValueAttribute("")]
public string XPath { get; public set; }
    public string get_XPath();
    public void set_XPath(string value);
}
public enum System.Xml.Schema.XmlSeverityType : Enum {
    public int value__;
    public static XmlSeverityType Error;
    public static XmlSeverityType Warning;
}
internal class System.Xml.Schema.XmlStringConverter : XmlBaseConverter {
    protected XmlStringConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
public enum System.Xml.Schema.XmlTypeCode : Enum {
    public int value__;
    public static XmlTypeCode None;
    public static XmlTypeCode Item;
    public static XmlTypeCode Node;
    public static XmlTypeCode Document;
    public static XmlTypeCode Element;
    public static XmlTypeCode Attribute;
    public static XmlTypeCode Namespace;
    public static XmlTypeCode ProcessingInstruction;
    public static XmlTypeCode Comment;
    public static XmlTypeCode Text;
    public static XmlTypeCode AnyAtomicType;
    public static XmlTypeCode UntypedAtomic;
    public static XmlTypeCode String;
    public static XmlTypeCode Boolean;
    public static XmlTypeCode Decimal;
    public static XmlTypeCode Float;
    public static XmlTypeCode Double;
    public static XmlTypeCode Duration;
    public static XmlTypeCode DateTime;
    public static XmlTypeCode Time;
    public static XmlTypeCode Date;
    public static XmlTypeCode GYearMonth;
    public static XmlTypeCode GYear;
    public static XmlTypeCode GMonthDay;
    public static XmlTypeCode GDay;
    public static XmlTypeCode GMonth;
    public static XmlTypeCode HexBinary;
    public static XmlTypeCode Base64Binary;
    public static XmlTypeCode AnyUri;
    public static XmlTypeCode QName;
    public static XmlTypeCode Notation;
    public static XmlTypeCode NormalizedString;
    public static XmlTypeCode Token;
    public static XmlTypeCode Language;
    public static XmlTypeCode NmToken;
    public static XmlTypeCode Name;
    public static XmlTypeCode NCName;
    public static XmlTypeCode Id;
    public static XmlTypeCode Idref;
    public static XmlTypeCode Entity;
    public static XmlTypeCode Integer;
    public static XmlTypeCode NonPositiveInteger;
    public static XmlTypeCode NegativeInteger;
    public static XmlTypeCode Long;
    public static XmlTypeCode Int;
    public static XmlTypeCode Short;
    public static XmlTypeCode Byte;
    public static XmlTypeCode NonNegativeInteger;
    public static XmlTypeCode UnsignedLong;
    public static XmlTypeCode UnsignedInt;
    public static XmlTypeCode UnsignedShort;
    public static XmlTypeCode UnsignedByte;
    public static XmlTypeCode PositiveInteger;
    public static XmlTypeCode YearMonthDuration;
    public static XmlTypeCode DayTimeDuration;
}
internal class System.Xml.Schema.XmlUnionConverter : XmlBaseConverter {
    private XmlValueConverter[] _converters;
    private bool _hasAtomicMember;
    private bool _hasListMember;
    protected XmlUnionConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlUntypedConverter : XmlListConverter {
    private bool _allowListToList;
    public static XmlValueConverter Untyped;
    public static XmlValueConverter UntypedList;
    protected XmlUntypedConverter(XmlUntypedConverter atomicConverter, bool allowListToList);
    private static XmlUntypedConverter();
    public virtual bool ToBoolean(string value);
    public virtual bool ToBoolean(object value);
    public virtual DateTime ToDateTime(string value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(string value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual decimal ToDecimal(string value);
    public virtual decimal ToDecimal(object value);
    public virtual double ToDouble(string value);
    public virtual double ToDouble(object value);
    public virtual int ToInt32(string value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(string value);
    public virtual long ToInt64(object value);
    public virtual float ToSingle(string value);
    public virtual float ToSingle(object value);
    public virtual string ToString(bool value);
    public virtual string ToString(DateTime value);
    public virtual string ToString(DateTimeOffset value);
    public virtual string ToString(decimal value);
    public virtual string ToString(double value);
    public virtual string ToString(int value);
    public virtual string ToString(long value);
    public virtual string ToString(float value);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    protected virtual object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private bool SupportsType(Type clrType);
}
internal class System.Xml.Schema.XmlUntypedStringConverter : object {
    private bool _listsAllowed;
    private XmlUntypedStringConverter _listItemConverter;
    private static Type s_decimalType;
    private static Type s_int32Type;
    private static Type s_int64Type;
    private static Type s_stringType;
    private static Type s_objectType;
    private static Type s_byteType;
    private static Type s_int16Type;
    private static Type s_SByteType;
    private static Type s_UInt16Type;
    private static Type s_UInt32Type;
    private static Type s_UInt64Type;
    private static Type s_doubleType;
    private static Type s_singleType;
    private static Type s_dateTimeType;
    private static Type s_dateTimeOffsetType;
    private static Type s_booleanType;
    private static Type s_byteArrayType;
    private static Type s_xmlQualifiedNameType;
    private static Type s_uriType;
    private static Type s_timeSpanType;
    private static string s_untypedStringTypeName;
    internal static XmlUntypedStringConverter Instance;
    private XmlUntypedStringConverter(bool listsAllowed);
    private static XmlUntypedStringConverter();
    internal object FromString(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private byte Int32ToByte(int value);
    private short Int32ToInt16(int value);
    private sbyte Int32ToSByte(int value);
    private ushort Int32ToUInt16(int value);
    private UInt32 Int64ToUInt32(long value);
    private ulong DecimalToUInt64(decimal value);
    private Byte[] StringToBase64Binary(string value);
    private static DateTime StringToDateTime(string value);
    private static DateTimeOffset StringToDateTimeOffset(string value);
    private TimeSpan StringToDuration(string value);
    private static XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver);
    private object StringToListType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private T[] ToArray(String[] stringArray, IXmlNamespaceResolver nsResolver);
    private Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType);
}
internal abstract class System.Xml.Schema.XmlValueConverter : object {
    public abstract virtual bool ToBoolean(long value);
    public abstract virtual bool ToBoolean(int value);
    public abstract virtual bool ToBoolean(double value);
    public abstract virtual bool ToBoolean(DateTime value);
    public abstract virtual bool ToBoolean(string value);
    public abstract virtual bool ToBoolean(object value);
    public abstract virtual int ToInt32(bool value);
    public abstract virtual int ToInt32(long value);
    public abstract virtual int ToInt32(double value);
    public abstract virtual int ToInt32(DateTime value);
    public abstract virtual int ToInt32(string value);
    public abstract virtual int ToInt32(object value);
    public abstract virtual long ToInt64(bool value);
    public abstract virtual long ToInt64(int value);
    public abstract virtual long ToInt64(double value);
    public abstract virtual long ToInt64(DateTime value);
    public abstract virtual long ToInt64(string value);
    public abstract virtual long ToInt64(object value);
    public abstract virtual decimal ToDecimal(string value);
    public abstract virtual decimal ToDecimal(object value);
    public abstract virtual double ToDouble(bool value);
    public abstract virtual double ToDouble(int value);
    public abstract virtual double ToDouble(long value);
    public abstract virtual double ToDouble(DateTime value);
    public abstract virtual double ToDouble(string value);
    public abstract virtual double ToDouble(object value);
    public abstract virtual float ToSingle(double value);
    public abstract virtual float ToSingle(string value);
    public abstract virtual float ToSingle(object value);
    public abstract virtual DateTime ToDateTime(bool value);
    public abstract virtual DateTime ToDateTime(int value);
    public abstract virtual DateTime ToDateTime(long value);
    public abstract virtual DateTime ToDateTime(double value);
    public abstract virtual DateTime ToDateTime(DateTimeOffset value);
    public abstract virtual DateTime ToDateTime(string value);
    public abstract virtual DateTime ToDateTime(object value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(DateTime value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(string value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(object value);
    public abstract virtual string ToString(bool value);
    public abstract virtual string ToString(int value);
    public abstract virtual string ToString(long value);
    public abstract virtual string ToString(decimal value);
    public abstract virtual string ToString(float value);
    public abstract virtual string ToString(double value);
    public abstract virtual string ToString(DateTime value);
    public abstract virtual string ToString(DateTimeOffset value);
    public abstract virtual string ToString(object value);
    public abstract virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public abstract virtual object ChangeType(bool value, Type destinationType);
    public abstract virtual object ChangeType(int value, Type destinationType);
    public abstract virtual object ChangeType(long value, Type destinationType);
    public abstract virtual object ChangeType(decimal value, Type destinationType);
    public abstract virtual object ChangeType(double value, Type destinationType);
    public abstract virtual object ChangeType(DateTime value, Type destinationType);
    public abstract virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public abstract virtual object ChangeType(object value, Type destinationType);
    public abstract virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
public class System.Xml.Schema.XmlValueGetter : MulticastDelegate {
    public XmlValueGetter(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class System.Xml.Schema.XsdBuilder : SchemaBuilder {
    private static int STACK_INCREMENT;
    private static State[] s_schemaElement;
    private static State[] s_schemaSubelements;
    private static State[] s_attributeSubelements;
    private static State[] s_elementSubelements;
    private static State[] s_complexTypeSubelements;
    private static State[] s_simpleContentSubelements;
    private static State[] s_simpleContentExtensionSubelements;
    private static State[] s_simpleContentRestrictionSubelements;
    private static State[] s_complexContentSubelements;
    private static State[] s_complexContentExtensionSubelements;
    private static State[] s_complexContentRestrictionSubelements;
    private static State[] s_simpleTypeSubelements;
    private static State[] s_simpleTypeRestrictionSubelements;
    private static State[] s_simpleTypeListSubelements;
    private static State[] s_simpleTypeUnionSubelements;
    private static State[] s_redefineSubelements;
    private static State[] s_attributeGroupSubelements;
    private static State[] s_groupSubelements;
    private static State[] s_allSubelements;
    private static State[] s_choiceSequenceSubelements;
    private static State[] s_identityConstraintSubelements;
    private static State[] s_annotationSubelements;
    private static State[] s_annotatedSubelements;
    private static XsdAttributeEntry[] s_schemaAttributes;
    private static XsdAttributeEntry[] s_attributeAttributes;
    private static XsdAttributeEntry[] s_elementAttributes;
    private static XsdAttributeEntry[] s_complexTypeAttributes;
    private static XsdAttributeEntry[] s_simpleContentAttributes;
    private static XsdAttributeEntry[] s_simpleContentExtensionAttributes;
    private static XsdAttributeEntry[] s_simpleContentRestrictionAttributes;
    private static XsdAttributeEntry[] s_complexContentAttributes;
    private static XsdAttributeEntry[] s_complexContentExtensionAttributes;
    private static XsdAttributeEntry[] s_complexContentRestrictionAttributes;
    private static XsdAttributeEntry[] s_simpleTypeAttributes;
    private static XsdAttributeEntry[] s_simpleTypeRestrictionAttributes;
    private static XsdAttributeEntry[] s_simpleTypeUnionAttributes;
    private static XsdAttributeEntry[] s_simpleTypeListAttributes;
    private static XsdAttributeEntry[] s_attributeGroupAttributes;
    private static XsdAttributeEntry[] s_attributeGroupRefAttributes;
    private static XsdAttributeEntry[] s_groupAttributes;
    private static XsdAttributeEntry[] s_groupRefAttributes;
    private static XsdAttributeEntry[] s_particleAttributes;
    private static XsdAttributeEntry[] s_anyAttributes;
    private static XsdAttributeEntry[] s_identityConstraintAttributes;
    private static XsdAttributeEntry[] s_selectorAttributes;
    private static XsdAttributeEntry[] s_fieldAttributes;
    private static XsdAttributeEntry[] s_notationAttributes;
    private static XsdAttributeEntry[] s_includeAttributes;
    private static XsdAttributeEntry[] s_importAttributes;
    private static XsdAttributeEntry[] s_facetAttributes;
    private static XsdAttributeEntry[] s_anyAttributeAttributes;
    private static XsdAttributeEntry[] s_documentationAttributes;
    private static XsdAttributeEntry[] s_appinfoAttributes;
    private static XsdAttributeEntry[] s_redefineAttributes;
    private static XsdAttributeEntry[] s_annotationAttributes;
    private static XsdEntry[] s_schemaEntries;
    private static Int32[] s_derivationMethodValues;
    private static String[] s_derivationMethodStrings;
    private static String[] s_formStringValues;
    private static String[] s_useStringValues;
    private static String[] s_processContentsStringValues;
    private XmlReader _reader;
    private PositionInfo _positionInfo;
    private XsdEntry _currentEntry;
    private XsdEntry _nextEntry;
    private bool _hasChild;
    private HWStack _stateHistory;
    private Stack _containerStack;
    private XmlNameTable _nameTable;
    private SchemaNames _schemaNames;
    private XmlNamespaceManager _namespaceManager;
    private bool _canIncludeImport;
    private XmlSchema _schema;
    private XmlSchemaObject _xso;
    private XmlSchemaElement _element;
    private XmlSchemaAny _anyElement;
    private XmlSchemaAttribute _attribute;
    private XmlSchemaAnyAttribute _anyAttribute;
    private XmlSchemaComplexType _complexType;
    private XmlSchemaSimpleType _simpleType;
    private XmlSchemaComplexContent _complexContent;
    private XmlSchemaComplexContentExtension _complexContentExtension;
    private XmlSchemaComplexContentRestriction _complexContentRestriction;
    private XmlSchemaSimpleContent _simpleContent;
    private XmlSchemaSimpleContentExtension _simpleContentExtension;
    private XmlSchemaSimpleContentRestriction _simpleContentRestriction;
    private XmlSchemaSimpleTypeUnion _simpleTypeUnion;
    private XmlSchemaSimpleTypeList _simpleTypeList;
    private XmlSchemaSimpleTypeRestriction _simpleTypeRestriction;
    private XmlSchemaGroup _group;
    private XmlSchemaGroupRef _groupRef;
    private XmlSchemaAll _all;
    private XmlSchemaChoice _choice;
    private XmlSchemaSequence _sequence;
    private XmlSchemaParticle _particle;
    private XmlSchemaAttributeGroup _attributeGroup;
    private XmlSchemaAttributeGroupRef _attributeGroupRef;
    private XmlSchemaNotation _notation;
    private XmlSchemaIdentityConstraint _identityConstraint;
    private XmlSchemaXPath _xpath;
    private XmlSchemaInclude _include;
    private XmlSchemaImport _import;
    private XmlSchemaAnnotation _annotation;
    private XmlSchemaAppInfo _appInfo;
    private XmlSchemaDocumentation _documentation;
    private XmlSchemaFacet _facet;
    private XmlNode[] _markup;
    private XmlSchemaRedefine _redefine;
    private ValidationEventHandler _validationEventHandler;
    private ArrayList _unhandledAttributes;
    private Dictionary`2<string, string> _namespaces;
    private Token CurrentElement { get; }
    private Token ParentElement { get; }
    private XmlSchemaObject ParentContainer { get; }
    internal XsdBuilder(XmlReader reader, XmlNamespaceManager curmgr, XmlSchema schema, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventhandler);
    private static XsdBuilder();
    internal virtual bool ProcessElement(string prefix, string name, string ns);
    internal virtual void ProcessAttribute(string prefix, string name, string ns, string value);
    internal virtual bool IsContentParsed();
    internal virtual void ProcessMarkup(XmlNode[] markup);
    internal virtual void ProcessCData(string value);
    internal virtual void StartChildren();
    internal virtual void EndChildren();
    private void Push();
    private void Pop();
    private Token get_CurrentElement();
    private Token get_ParentElement();
    private XmlSchemaObject get_ParentContainer();
    private XmlSchemaObject GetContainer(State state);
    private void SetContainer(State state, object container);
    private static void BuildAnnotated_Id(XsdBuilder builder, string value);
    private static void BuildSchema_AttributeFormDefault(XsdBuilder builder, string value);
    private static void BuildSchema_ElementFormDefault(XsdBuilder builder, string value);
    private static void BuildSchema_TargetNamespace(XsdBuilder builder, string value);
    private static void BuildSchema_Version(XsdBuilder builder, string value);
    private static void BuildSchema_FinalDefault(XsdBuilder builder, string value);
    private static void BuildSchema_BlockDefault(XsdBuilder builder, string value);
    private static void InitSchema(XsdBuilder builder, string value);
    private static void InitInclude(XsdBuilder builder, string value);
    private static void BuildInclude_SchemaLocation(XsdBuilder builder, string value);
    private static void InitImport(XsdBuilder builder, string value);
    private static void BuildImport_Namespace(XsdBuilder builder, string value);
    private static void BuildImport_SchemaLocation(XsdBuilder builder, string value);
    private static void InitRedefine(XsdBuilder builder, string value);
    private static void BuildRedefine_SchemaLocation(XsdBuilder builder, string value);
    private static void EndRedefine(XsdBuilder builder);
    private static void InitAttribute(XsdBuilder builder, string value);
    private static void BuildAttribute_Default(XsdBuilder builder, string value);
    private static void BuildAttribute_Fixed(XsdBuilder builder, string value);
    private static void BuildAttribute_Form(XsdBuilder builder, string value);
    private static void BuildAttribute_Use(XsdBuilder builder, string value);
    private static void BuildAttribute_Ref(XsdBuilder builder, string value);
    private static void BuildAttribute_Name(XsdBuilder builder, string value);
    private static void BuildAttribute_Type(XsdBuilder builder, string value);
    private static void InitElement(XsdBuilder builder, string value);
    private static void BuildElement_Abstract(XsdBuilder builder, string value);
    private static void BuildElement_Block(XsdBuilder builder, string value);
    private static void BuildElement_Default(XsdBuilder builder, string value);
    private static void BuildElement_Form(XsdBuilder builder, string value);
    private static void BuildElement_SubstitutionGroup(XsdBuilder builder, string value);
    private static void BuildElement_Final(XsdBuilder builder, string value);
    private static void BuildElement_Fixed(XsdBuilder builder, string value);
    private static void BuildElement_MaxOccurs(XsdBuilder builder, string value);
    private static void BuildElement_MinOccurs(XsdBuilder builder, string value);
    private static void BuildElement_Name(XsdBuilder builder, string value);
    private static void BuildElement_Nillable(XsdBuilder builder, string value);
    private static void BuildElement_Ref(XsdBuilder builder, string value);
    private static void BuildElement_Type(XsdBuilder builder, string value);
    private static void InitSimpleType(XsdBuilder builder, string value);
    private static void BuildSimpleType_Name(XsdBuilder builder, string value);
    private static void BuildSimpleType_Final(XsdBuilder builder, string value);
    private static void InitSimpleTypeUnion(XsdBuilder builder, string value);
    private static void BuildSimpleTypeUnion_MemberTypes(XsdBuilder builder, string value);
    private static void InitSimpleTypeList(XsdBuilder builder, string value);
    private static void BuildSimpleTypeList_ItemType(XsdBuilder builder, string value);
    private static void InitSimpleTypeRestriction(XsdBuilder builder, string value);
    private static void BuildSimpleTypeRestriction_Base(XsdBuilder builder, string value);
    private static void InitComplexType(XsdBuilder builder, string value);
    private static void BuildComplexType_Abstract(XsdBuilder builder, string value);
    private static void BuildComplexType_Block(XsdBuilder builder, string value);
    private static void BuildComplexType_Final(XsdBuilder builder, string value);
    private static void BuildComplexType_Mixed(XsdBuilder builder, string value);
    private static void BuildComplexType_Name(XsdBuilder builder, string value);
    private static void InitComplexContent(XsdBuilder builder, string value);
    private static void BuildComplexContent_Mixed(XsdBuilder builder, string value);
    private static void InitComplexContentExtension(XsdBuilder builder, string value);
    private static void BuildComplexContentExtension_Base(XsdBuilder builder, string value);
    private static void InitComplexContentRestriction(XsdBuilder builder, string value);
    private static void BuildComplexContentRestriction_Base(XsdBuilder builder, string value);
    private static void InitSimpleContent(XsdBuilder builder, string value);
    private static void InitSimpleContentExtension(XsdBuilder builder, string value);
    private static void BuildSimpleContentExtension_Base(XsdBuilder builder, string value);
    private static void InitSimpleContentRestriction(XsdBuilder builder, string value);
    private static void BuildSimpleContentRestriction_Base(XsdBuilder builder, string value);
    private static void InitAttributeGroup(XsdBuilder builder, string value);
    private static void BuildAttributeGroup_Name(XsdBuilder builder, string value);
    private static void InitAttributeGroupRef(XsdBuilder builder, string value);
    private static void BuildAttributeGroupRef_Ref(XsdBuilder builder, string value);
    private static void InitAnyAttribute(XsdBuilder builder, string value);
    private static void BuildAnyAttribute_Namespace(XsdBuilder builder, string value);
    private static void BuildAnyAttribute_ProcessContents(XsdBuilder builder, string value);
    private static void InitGroup(XsdBuilder builder, string value);
    private static void BuildGroup_Name(XsdBuilder builder, string value);
    private static void InitGroupRef(XsdBuilder builder, string value);
    private static void BuildParticle_MaxOccurs(XsdBuilder builder, string value);
    private static void BuildParticle_MinOccurs(XsdBuilder builder, string value);
    private static void BuildGroupRef_Ref(XsdBuilder builder, string value);
    private static void InitAll(XsdBuilder builder, string value);
    private static void InitChoice(XsdBuilder builder, string value);
    private static void InitSequence(XsdBuilder builder, string value);
    private static void InitAny(XsdBuilder builder, string value);
    private static void BuildAny_Namespace(XsdBuilder builder, string value);
    private static void BuildAny_ProcessContents(XsdBuilder builder, string value);
    private static void InitNotation(XsdBuilder builder, string value);
    private static void BuildNotation_Name(XsdBuilder builder, string value);
    private static void BuildNotation_Public(XsdBuilder builder, string value);
    private static void BuildNotation_System(XsdBuilder builder, string value);
    private static void InitFacet(XsdBuilder builder, string value);
    private static void BuildFacet_Fixed(XsdBuilder builder, string value);
    private static void BuildFacet_Value(XsdBuilder builder, string value);
    private static void InitIdentityConstraint(XsdBuilder builder, string value);
    private static void BuildIdentityConstraint_Name(XsdBuilder builder, string value);
    private static void BuildIdentityConstraint_Refer(XsdBuilder builder, string value);
    private static void InitSelector(XsdBuilder builder, string value);
    private static void BuildSelector_XPath(XsdBuilder builder, string value);
    private static void InitField(XsdBuilder builder, string value);
    private static void BuildField_XPath(XsdBuilder builder, string value);
    private static void InitAnnotation(XsdBuilder builder, string value);
    private static void InitAppinfo(XsdBuilder builder, string value);
    private static void BuildAppinfo_Source(XsdBuilder builder, string value);
    private static void EndAppinfo(XsdBuilder builder);
    private static void InitDocumentation(XsdBuilder builder, string value);
    private static void BuildDocumentation_Source(XsdBuilder builder, string value);
    private static void BuildDocumentation_XmlLang(XsdBuilder builder, string value);
    private static void EndDocumentation(XsdBuilder builder);
    private void AddAttribute(XmlSchemaObject value);
    private void AddParticle(XmlSchemaParticle particle);
    private bool GetNextState(XmlQualifiedName qname);
    private bool IsSkipableElement(XmlQualifiedName qname);
    private void SetMinOccurs(XmlSchemaParticle particle, string value);
    private void SetMaxOccurs(XmlSchemaParticle particle, string value);
    private bool ParseBoolean(string value, string attributeName);
    private int ParseEnum(string value, string attributeName, String[] values);
    private XmlQualifiedName ParseQName(string value, string attributeName);
    private int ParseBlockFinalEnum(string value, string attributeName);
    private static string ParseUriReference(string s);
    private void SendValidationEvent(string code, string arg0, string arg1, string arg2);
    private void SendValidationEvent(string code, string msg);
    private void SendValidationEvent(string code, String[] args, XmlSeverityType severity);
    private void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity);
    private void SendValidationEvent(XmlSchemaException e);
    private void RecordPosition();
}
internal class System.Xml.Schema.XsdDateTime : ValueType {
    private DateTime _dt;
    private UInt32 _extra;
    private static UInt32 TypeMask;
    private static UInt32 KindMask;
    private static UInt32 ZoneHourMask;
    private static UInt32 ZoneMinuteMask;
    private static int TypeShift;
    private static int KindShift;
    private static int ZoneHourShift;
    private static short maxFractionDigits;
    private static int ticksToFractionDivisor;
    private static int s_lzyyyy;
    private static int s_lzyyyy_;
    private static int s_lzyyyy_MM;
    private static int s_lzyyyy_MM_;
    private static int s_lzyyyy_MM_dd;
    private static int s_lzyyyy_MM_ddT;
    private static int s_lzHH;
    private static int s_lzHH_;
    private static int s_lzHH_mm;
    private static int s_lzHH_mm_;
    private static int s_lzHH_mm_ss;
    private static int s_Lz_;
    private static int s_lz_zz;
    private static int s_lz_zz_;
    private static int s_lz_zz_zz;
    private static int s_Lz__;
    private static int s_lz__mm;
    private static int s_lz__mm_;
    private static int s_lz__mm__;
    private static int s_lz__mm_dd;
    private static int s_Lz___;
    private static int s_lz___dd;
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static long TicksPerMinute;
    private static long TicksPerHour;
    private static long TicksPerDay;
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    private static XmlTypeCode[] s_typeCodes;
    private DateTimeTypeCode InternalTypeCode { get; }
    private XsdDateTimeKind InternalKind { get; }
    public XmlTypeCode TypeCode { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Fraction { get; }
    public int ZoneHour { get; }
    public int ZoneMinute { get; }
    public XsdDateTime(string text, XsdDateTimeFlags kinds);
    private XsdDateTime(Parser parser);
    public XsdDateTime(DateTime dateTime, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTimeOffset dateTimeOffset);
    public XsdDateTime(DateTimeOffset dateTimeOffset, XsdDateTimeFlags kinds);
    private static XsdDateTime();
    private void InitiateXsdDateTime(Parser parser);
    internal static bool TryParse(string text, XsdDateTimeFlags kinds, XsdDateTime& result);
    private DateTimeTypeCode get_InternalTypeCode();
    private XsdDateTimeKind get_InternalKind();
    public XmlTypeCode get_TypeCode();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Fraction();
    public int get_ZoneHour();
    public int get_ZoneMinute();
    public DateTime ToZulu();
    public static DateTime op_Implicit(XsdDateTime xdt);
    public static DateTimeOffset op_Implicit(XsdDateTime xdt);
    public virtual string ToString();
    private void PrintDate(StringBuilder sb);
    private void GetYearMonthDay(Int32& year, Int32& month, Int32& day);
    private void PrintTime(StringBuilder sb);
    private void PrintZone(StringBuilder sb);
    private void IntToCharArray(Char[] text, int start, int value, int digits);
    private void ShortToCharArray(Char[] text, int start, int value);
}
[FlagsAttribute]
internal enum System.Xml.Schema.XsdDateTimeFlags : Enum {
    public int value__;
    public static XsdDateTimeFlags DateTime;
    public static XsdDateTimeFlags Time;
    public static XsdDateTimeFlags Date;
    public static XsdDateTimeFlags GYearMonth;
    public static XsdDateTimeFlags GYear;
    public static XsdDateTimeFlags GMonthDay;
    public static XsdDateTimeFlags GDay;
    public static XsdDateTimeFlags GMonth;
    public static XsdDateTimeFlags XdrDateTimeNoTz;
    public static XsdDateTimeFlags XdrDateTime;
    public static XsdDateTimeFlags XdrTimeNoTz;
    public static XsdDateTimeFlags AllXsd;
}
internal class System.Xml.Schema.XsdDuration : ValueType {
    private int _years;
    private int _months;
    private int _days;
    private int _hours;
    private int _minutes;
    private int _seconds;
    private UInt32 _nanoseconds;
    private static UInt32 NegativeBit;
    public bool IsNegative { get; }
    public int Years { get; }
    public int Months { get; }
    public int Days { get; }
    public int Hours { get; }
    public int Minutes { get; }
    public int Seconds { get; }
    public int Nanoseconds { get; }
    public XsdDuration(bool isNegative, int years, int months, int days, int hours, int minutes, int seconds, int nanoseconds);
    public XsdDuration(TimeSpan timeSpan);
    public XsdDuration(TimeSpan timeSpan, DurationType durationType);
    public XsdDuration(string s);
    public XsdDuration(string s, DurationType durationType);
    public bool get_IsNegative();
    public int get_Years();
    public int get_Months();
    public int get_Days();
    public int get_Hours();
    public int get_Minutes();
    public int get_Seconds();
    public int get_Nanoseconds();
    public TimeSpan ToTimeSpan();
    public TimeSpan ToTimeSpan(DurationType durationType);
    internal Exception TryToTimeSpan(TimeSpan& result);
    internal Exception TryToTimeSpan(DurationType durationType, TimeSpan& result);
    public virtual string ToString();
    internal string ToString(DurationType durationType);
    internal static Exception TryParse(string s, XsdDuration& result);
    internal static Exception TryParse(string s, DurationType durationType, XsdDuration& result);
    private static string TryParseDigits(string s, Int32& offset, bool eatDigits, Int32& result, Int32& numDigits);
}
internal class System.Xml.Schema.XsdSimpleValue : object {
    private XmlSchemaSimpleType _xmlType;
    private object _typedValue;
    public XmlSchemaSimpleType XmlType { get; }
    public object TypedValue { get; }
    public XsdSimpleValue(XmlSchemaSimpleType st, object value);
    public XmlSchemaSimpleType get_XmlType();
    public object get_TypedValue();
}
internal class System.Xml.Schema.XsdValidator : BaseValidator {
    private int _startIDConstraint;
    private static int STACK_INCREMENT;
    private HWStack _validationStack;
    private Hashtable _attPresence;
    private XmlNamespaceManager _nsManager;
    private bool _bManageNamespaces;
    private Hashtable _IDs;
    private IdRefNode _idRefListHead;
    private Parser _inlineSchemaParser;
    private XmlSchemaContentProcessing _processContents;
    private static XmlSchemaDatatype s_dtCDATA;
    private static XmlSchemaDatatype s_dtQName;
    private static XmlSchemaDatatype s_dtStringArray;
    private string _nsXmlNs;
    private string _nsXs;
    private string _nsXsi;
    private string _xsiType;
    private string _xsiNil;
    private string _xsiSchemaLocation;
    private string _xsiNoNamespaceSchemaLocation;
    private string _xsdSchema;
    private bool IsInlineSchemaStarted { get; }
    private bool HasSchema { get; }
    public bool PreserveWhitespace { get; }
    private bool HasIdentityConstraints { get; }
    internal XsdValidator(BaseValidator validator);
    internal XsdValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    private static XsdValidator();
    private void Init();
    public virtual void Validate();
    public virtual void CompleteValidation();
    private bool get_IsInlineSchemaStarted();
    private void ProcessInlineSchema();
    private void ValidateElement();
    private object ValidateChildElement();
    private void ProcessElement(object particle);
    private void ProcessXsiAttributes(XmlQualifiedName& xsiType, String& xsiNil);
    private void ValidateEndElement();
    private SchemaElementDecl FastGetElementDecl(object particle);
    private SchemaElementDecl ThoroughGetElementDecl(SchemaElementDecl elementDecl, XmlQualifiedName xsiType, string xsiNil);
    private void ValidateStartElement();
    private void ValidateEndStartElement();
    private void LoadSchemaFromLocation(string uri, string url);
    private void LoadSchema(string uri, string url);
    private bool get_HasSchema();
    public virtual bool get_PreserveWhitespace();
    private void ProcessTokenizedType(XmlTokenizedType ttype, string name);
    private void CheckValue(string value, SchemaAttDef attdef);
    internal void AddID(string name, object node);
    public virtual object FindId(string name);
    public bool IsXSDRoot(string localName, string ns);
    private void Push(XmlQualifiedName elementName);
    private void Pop();
    private void CheckForwardRefs();
    private void ValidateStartElementIdentityConstraints();
    private bool get_HasIdentityConstraints();
    private void AddIdentityConstraints();
    private void ElementIdentityConstraints();
    private void AttributeIdentityConstraints(string name, string ns, object obj, string sobj, SchemaAttDef attdef);
    private object UnWrapUnion(object typedValue);
    private void EndElementIdentityConstraints();
}
internal class System.Xml.SecureStringHasher : object {
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string key);
}
internal abstract class System.Xml.Serialization.Accessor : object {
    private string _name;
    private object _defaultValue;
    private string _ns;
    private TypeMapping _mapping;
    private bool _any;
    private string _anyNs;
    private bool _topLevelInSchema;
    private bool _isFixed;
    private bool _isOptional;
    private XmlSchemaForm _form;
    internal TypeMapping Mapping { get; internal set; }
    internal object Default { get; internal set; }
    internal bool HasDefault { get; }
    internal string Name { get; internal set; }
    internal bool Any { get; internal set; }
    internal string AnyNamespaces { get; internal set; }
    internal string Namespace { get; internal set; }
    internal XmlSchemaForm Form { get; internal set; }
    internal bool IsFixed { get; internal set; }
    internal bool IsOptional { get; internal set; }
    internal bool IsTopLevelInSchema { get; internal set; }
    internal TypeMapping get_Mapping();
    internal void set_Mapping(TypeMapping value);
    internal object get_Default();
    internal void set_Default(object value);
    internal bool get_HasDefault();
    internal virtual string get_Name();
    internal virtual void set_Name(string value);
    internal bool get_Any();
    internal void set_Any(bool value);
    internal string get_AnyNamespaces();
    internal void set_AnyNamespaces(string value);
    internal string get_Namespace();
    internal void set_Namespace(string value);
    internal XmlSchemaForm get_Form();
    internal void set_Form(XmlSchemaForm value);
    internal bool get_IsFixed();
    internal void set_IsFixed(bool value);
    internal bool get_IsOptional();
    internal void set_IsOptional(bool value);
    internal bool get_IsTopLevelInSchema();
    internal void set_IsTopLevelInSchema(bool value);
    internal static string EscapeName(string name);
    internal static string EscapeQName(string name);
    internal static string UnescapeName(string name);
    internal string ToString(string defaultNs);
}
internal abstract class System.Xml.Serialization.AccessorMapping : Mapping {
    private TypeDesc _typeDesc;
    private AttributeAccessor _attribute;
    private ElementAccessor[] _elements;
    private ElementAccessor[] _sortedElements;
    private TextAccessor _text;
    private ChoiceIdentifierAccessor _choiceIdentifier;
    private XmlnsAccessor _xmlns;
    private bool _ignore;
    internal bool IsAttribute { get; }
    internal bool IsText { get; }
    internal bool IsParticle { get; }
    internal TypeDesc TypeDesc { get; internal set; }
    internal AttributeAccessor Attribute { get; internal set; }
    internal ElementAccessor[] Elements { get; internal set; }
    internal ElementAccessor[] ElementsSortedByDerivation { get; }
    internal TextAccessor Text { get; internal set; }
    internal ChoiceIdentifierAccessor ChoiceIdentifier { get; internal set; }
    internal XmlnsAccessor Xmlns { get; internal set; }
    internal bool Ignore { get; internal set; }
    internal Accessor Accessor { get; }
    protected AccessorMapping(AccessorMapping mapping);
    internal bool get_IsAttribute();
    internal bool get_IsText();
    internal bool get_IsParticle();
    internal TypeDesc get_TypeDesc();
    internal void set_TypeDesc(TypeDesc value);
    internal AttributeAccessor get_Attribute();
    internal void set_Attribute(AttributeAccessor value);
    internal ElementAccessor[] get_Elements();
    internal void set_Elements(ElementAccessor[] value);
    internal static void SortMostToLeastDerived(ElementAccessor[] elements);
    internal ElementAccessor[] get_ElementsSortedByDerivation();
    internal TextAccessor get_Text();
    internal void set_Text(TextAccessor value);
    internal ChoiceIdentifierAccessor get_ChoiceIdentifier();
    internal void set_ChoiceIdentifier(ChoiceIdentifierAccessor value);
    internal XmlnsAccessor get_Xmlns();
    internal void set_Xmlns(XmlnsAccessor value);
    internal bool get_Ignore();
    internal void set_Ignore(bool value);
    internal Accessor get_Accessor();
    internal static bool ElementsMatch(ElementAccessor[] a, ElementAccessor[] b);
    internal bool Match(AccessorMapping mapping);
}
internal class System.Xml.Serialization.ArgBuilder : object {
    internal string Name;
    internal int Index;
    internal Type ArgType;
    internal ArgBuilder(string name, int index, Type argType);
}
internal class System.Xml.Serialization.ArrayMapping : TypeMapping {
    private ElementAccessor[] _elements;
    private ElementAccessor[] _sortedElements;
    private ArrayMapping _next;
    private StructMapping _topLevelMapping;
    internal ElementAccessor[] Elements { get; internal set; }
    internal ElementAccessor[] ElementsSortedByDerivation { get; }
    internal ArrayMapping Next { get; internal set; }
    internal StructMapping TopLevelMapping { get; internal set; }
    internal ElementAccessor[] get_Elements();
    internal void set_Elements(ElementAccessor[] value);
    internal ElementAccessor[] get_ElementsSortedByDerivation();
    internal ArrayMapping get_Next();
    internal void set_Next(ArrayMapping value);
    internal StructMapping get_TopLevelMapping();
    internal void set_TopLevelMapping(StructMapping value);
}
internal class System.Xml.Serialization.ArrayModel : TypeModel {
    internal TypeModel Element { get; }
    internal ArrayModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal TypeModel get_Element();
}
internal class System.Xml.Serialization.AttributeAccessor : Accessor {
    private bool _isSpecial;
    private bool _isList;
    internal bool IsSpecialXmlNamespace { get; }
    internal bool IsList { get; internal set; }
    internal bool get_IsSpecialXmlNamespace();
    internal bool get_IsList();
    internal void set_IsList(bool value);
    internal void CheckSpecial();
}
internal class System.Xml.Serialization.CaseInsensitiveKeyComparer : CaseInsensitiveComparer {
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
internal class System.Xml.Serialization.ChoiceIdentifierAccessor : Accessor {
    private string _memberName;
    private String[] _memberIds;
    private MemberInfo _memberInfo;
    internal string MemberName { get; internal set; }
    internal String[] MemberIds { get; internal set; }
    internal MemberInfo MemberInfo { get; internal set; }
    internal string get_MemberName();
    internal void set_MemberName(string value);
    internal String[] get_MemberIds();
    internal void set_MemberIds(String[] value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
}
internal enum System.Xml.Serialization.Cmp : Enum {
    public int value__;
    public static Cmp LessThan;
    public static Cmp EqualTo;
    public static Cmp LessThanOrEqualTo;
    public static Cmp GreaterThan;
    public static Cmp NotEqualTo;
    public static Cmp GreaterThanOrEqualTo;
}
[FlagsAttribute]
public enum System.Xml.Serialization.CodeGenerationOptions : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static CodeGenerationOptions None;
    [XmlEnumAttribute("properties")]
public static CodeGenerationOptions GenerateProperties;
    [XmlEnumAttribute("newAsync")]
public static CodeGenerationOptions GenerateNewAsync;
    [XmlEnumAttribute("oldAsync")]
public static CodeGenerationOptions GenerateOldAsync;
    [XmlEnumAttribute("order")]
public static CodeGenerationOptions GenerateOrder;
    [XmlEnumAttribute("enableDataBinding")]
public static CodeGenerationOptions EnableDataBinding;
}
internal class System.Xml.Serialization.CodeGenerator : object {
    internal static BindingFlags InstancePublicBindingFlags;
    internal static BindingFlags InstanceBindingFlags;
    internal static BindingFlags StaticBindingFlags;
    internal static MethodAttributes PublicMethodAttributes;
    internal static MethodAttributes PublicOverrideMethodAttributes;
    internal static MethodAttributes ProtectedOverrideMethodAttributes;
    internal static MethodAttributes PrivateMethodAttributes;
    internal static Type[] EmptyTypeArray;
    private TypeBuilder _typeBuilder;
    private MethodBuilder _methodBuilder;
    private ILGenerator _ilGen;
    private Dictionary`2<string, ArgBuilder> _argList;
    private LocalScope _currentScope;
    private Dictionary`2<Tuple`2<Type, string>, Queue`1<LocalBuilder>> _freeLocals;
    private Stack _blockStack;
    private Label _methodEndLabel;
    internal LocalBuilder retLocal;
    internal Label retLabel;
    private Dictionary`2<Type, LocalBuilder> _tmpLocals;
    private static OpCode[] s_branchCodes;
    private Stack _leaveLabels;
    private static OpCode[] s_ldindOpCodes;
    private static OpCode[] s_ldelemOpCodes;
    private static OpCode[] s_stelemOpCodes;
    private static OpCode[] s_convOpCodes;
    private int _initElseIfStack;
    private IfState _elseIfState;
    private int _initIfStack;
    private Stack _whileStack;
    internal MethodBuilder MethodBuilder { get; }
    internal LocalBuilder ReturnLocal { get; }
    internal Label ReturnLabel { get; }
    internal CodeGenerator(TypeBuilder typeBuilder);
    private static CodeGenerator();
    internal static bool IsNullableGenericType(Type type);
    internal static void AssertHasInterface(Type type, Type iType);
    internal void BeginMethod(Type returnType, string methodName, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes);
    internal void BeginMethod(Type returnType, MethodBuilderInfo methodBuilderInfo, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes);
    private void InitILGeneration(Type[] argTypes, String[] argNames, bool isStatic);
    internal MethodBuilder EndMethod();
    internal MethodBuilder get_MethodBuilder();
    internal ArgBuilder GetArg(string name);
    internal LocalBuilder GetLocal(string name);
    internal LocalBuilder get_ReturnLocal();
    internal Label get_ReturnLabel();
    internal LocalBuilder GetTempLocal(Type type);
    internal Type GetVariableType(object var);
    internal object GetVariable(string name);
    internal bool TryGetVariable(string name, Object& variable);
    internal void EnterScope();
    internal void ExitScope();
    private bool TryDequeueLocal(Type type, string name, LocalBuilder& local);
    internal LocalBuilder DeclareLocal(Type type, string name);
    internal LocalBuilder DeclareOrGetLocal(Type type, string name);
    internal object For(LocalBuilder local, object start, object end);
    internal void EndFor();
    internal void If();
    internal void IfNot();
    private OpCode GetBranchCode(Cmp cmp);
    internal void If(Cmp cmpOp);
    internal void If(object value1, Cmp cmpOp, object value2);
    internal void Else();
    internal void EndIf();
    internal void BeginExceptionBlock();
    internal void BeginCatchBlock(Type exception);
    internal void EndExceptionBlock();
    internal void Leave();
    internal void Call(MethodInfo methodInfo);
    internal void Call(ConstructorInfo ctor);
    internal void New(ConstructorInfo constructorInfo);
    internal void InitObj(Type valueType);
    internal void NewArray(Type elementType, object len);
    internal void LoadArrayElement(object obj, object arrayIndex);
    internal void StoreArrayElement(object obj, object arrayIndex, object value);
    private static bool IsStruct(Type objType);
    internal Type LoadMember(object obj, MemberInfo memberInfo);
    private static MethodInfo GetPropertyMethodFromBaseType(PropertyInfo propertyInfo, bool isGetter);
    internal Type LoadMember(MemberInfo memberInfo);
    internal Type LoadMemberAddress(MemberInfo memberInfo);
    internal void StoreMember(MemberInfo memberInfo);
    internal void Load(object obj);
    internal void LoadAddress(object obj);
    internal void ConvertAddress(Type source, Type target);
    internal void ConvertValue(Type source, Type target);
    internal void Castclass(Type target);
    internal void Box(Type type);
    internal void Unbox(Type type);
    private OpCode GetLdindOpCode(TypeCode typeCode);
    internal void Ldobj(Type type);
    internal void Stobj(Type type);
    internal void Ceq();
    internal void Clt();
    internal void Cne();
    internal void Ble(Label label);
    internal void Throw();
    internal void Ldtoken(Type t);
    internal void Ldc(object o);
    internal void Ldc(bool boolVar);
    internal void Ldc(int intVar);
    internal void Ldc(long l);
    internal void Ldc(float f);
    internal void Ldc(double d);
    internal void Ldstr(string strVar);
    internal void LdlocAddress(LocalBuilder localBuilder);
    internal void Ldloc(LocalBuilder localBuilder);
    internal void Ldloc(string name);
    internal void Stloc(Type type, string name);
    internal void Stloc(LocalBuilder local);
    internal void Ldloc(Type type, string name);
    internal void Ldloca(LocalBuilder localBuilder);
    internal void LdargAddress(ArgBuilder argBuilder);
    internal void Ldarg(string arg);
    internal void Ldarg(ArgBuilder arg);
    internal void Ldarg(int slot);
    internal void Ldarga(ArgBuilder argBuilder);
    internal void Ldarga(int slot);
    internal void Ldlen();
    private OpCode GetLdelemOpCode(TypeCode typeCode);
    internal void Ldelem(Type arrayElementType);
    internal void Ldelema(Type arrayElementType);
    private OpCode GetStelemOpCode(TypeCode typeCode);
    internal void Stelem(Type arrayElementType);
    internal Label DefineLabel();
    internal void MarkLabel(Label label);
    internal void Nop();
    internal void Add();
    internal void Ret();
    internal void Br(Label label);
    internal void Br_S(Label label);
    internal void Blt(Label label);
    internal void Brfalse(Label label);
    internal void Brtrue(Label label);
    internal void Pop();
    internal void Dup();
    private void InternalIf(bool negate);
    private OpCode GetConvOpCode(TypeCode typeCode);
    private void InternalConvert(Type source, Type target, bool isAddress);
    private IfState PopIfState();
    internal static AssemblyBuilder CreateAssemblyBuilder(string name);
    internal static ModuleBuilder CreateModuleBuilder(AssemblyBuilder assemblyBuilder, string name);
    internal static TypeBuilder CreateTypeBuilder(ModuleBuilder moduleBuilder, string name, TypeAttributes attributes, Type parent, Type[] interfaces);
    internal void InitElseIf();
    internal void InitIf();
    internal void AndIf(Cmp cmpOp);
    internal void AndIf();
    internal void IsInst(Type type);
    internal void Beq(Label label);
    internal void Bne(Label label);
    internal void GotoMethodEnd();
    internal void WhileBegin();
    internal void WhileEnd();
    internal void WhileContinue();
    internal void WhileBeginCondition();
    internal void WhileEndCondition();
}
internal class System.Xml.Serialization.CodeGeneratorConversionException : Exception {
    private Type _sourceType;
    private Type _targetType;
    private bool _isAddress;
    private string _reason;
    public CodeGeneratorConversionException(Type sourceType, Type targetType, bool isAddress, string reason);
}
public class System.Xml.Serialization.CodeIdentifier : object {
    internal static int MaxIdentifierLength;
    public static string MakePascal(string identifier);
    public static string MakeCamel(string identifier);
    public static string MakeValid(string identifier);
    internal static string MakeValidInternal(string identifier);
    private static bool IsValidStart(char c);
    private static bool IsValid(char c);
    internal static void CheckValidIdentifier(string ident);
    internal static string GetCSharpName(string name);
    private static int GetCSharpName(Type t, Type[] parameters, int index, StringBuilder sb);
    internal static string GetCSharpName(Type t);
    private static void EscapeKeywords(string identifier, StringBuilder sb);
    private static string EscapeKeywords(string identifier);
}
public class System.Xml.Serialization.CodeIdentifiers : object {
    private Hashtable _identifiers;
    private Hashtable _reservedIdentifiers;
    private ArrayList _list;
    private bool _camelCase;
    public bool UseCamelCasing { get; public set; }
    public CodeIdentifiers(bool caseSensitive);
    public void Clear();
    public bool get_UseCamelCasing();
    public void set_UseCamelCasing(bool value);
    public string MakeRightCase(string identifier);
    public string MakeUnique(string identifier);
    public void AddReserved(string identifier);
    public void RemoveReserved(string identifier);
    public string AddUnique(string identifier, object value);
    public bool IsInUse(string identifier);
    public void Add(string identifier, object value);
    public void Remove(string identifier);
    public object ToArray(Type type);
    internal CodeIdentifiers Clone();
}
internal class System.Xml.Serialization.Compiler : object {
    private bool _debugEnabled;
    private StringWriter _writer;
    internal TextWriter Source { get; }
    internal void AddImport(Type type, Hashtable types);
    internal void AddImport(Assembly assembly);
    internal void Close();
    internal TextWriter get_Source();
    internal static string GetTempAssemblyName(AssemblyName parent, string ns);
}
internal class System.Xml.Serialization.Configuration.DateTimeSerializationSection : object {
}
internal class System.Xml.Serialization.ConstantMapping : Mapping {
    private string _xmlName;
    private string _name;
    private long _value;
    internal string XmlName { get; internal set; }
    internal string Name { get; internal set; }
    internal long Value { get; internal set; }
    internal string get_XmlName();
    internal void set_XmlName(string value);
    internal string get_Name();
    internal void set_Name(string value);
    internal long get_Value();
    internal void set_Value(long value);
}
internal class System.Xml.Serialization.ConstantModel : object {
    private FieldInfo _fieldInfo;
    private long _value;
    internal string Name { get; }
    internal long Value { get; }
    internal FieldInfo FieldInfo { get; }
    internal ConstantModel(FieldInfo fieldInfo, long value);
    internal string get_Name();
    internal long get_Value();
    internal FieldInfo get_FieldInfo();
}
internal static class System.Xml.Serialization.DynamicAssemblies : object {
    private static ArrayList s_assembliesInConfig;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_nameToAssemblyMap;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_assemblyToNameMap;
    private static Hashtable s_tableIsTypeDynamic;
    private static DynamicAssemblies();
    internal static bool IsTypeDynamic(Type type);
    internal static bool IsTypeDynamic(Type[] arguments);
    internal static void Add(Assembly a);
    internal static Assembly Get(string fullName);
    internal static string GetName(Assembly a);
}
internal class System.Xml.Serialization.ElementAccessor : Accessor {
    private bool _nullable;
    private bool _isSoap;
    private bool _unbounded;
    internal bool IsSoap { get; internal set; }
    internal bool IsNullable { get; internal set; }
    internal bool IsUnbounded { get; internal set; }
    internal bool get_IsSoap();
    internal void set_IsSoap(bool value);
    internal bool get_IsNullable();
    internal void set_IsNullable(bool value);
    internal bool get_IsUnbounded();
    internal void set_IsUnbounded(bool value);
    internal ElementAccessor Clone();
}
internal class System.Xml.Serialization.EnumMapping : PrimitiveMapping {
    private ConstantMapping[] _constants;
    private bool _isFlags;
    internal bool IsFlags { get; internal set; }
    internal ConstantMapping[] Constants { get; internal set; }
    internal bool get_IsFlags();
    internal void set_IsFlags(bool value);
    internal ConstantMapping[] get_Constants();
    internal void set_Constants(ConstantMapping[] value);
}
internal class System.Xml.Serialization.EnumModel : TypeModel {
    private ConstantModel[] _constants;
    internal ConstantModel[] Constants { get; }
    internal EnumModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal ConstantModel[] get_Constants();
    private ConstantModel GetConstantModel(FieldInfo fieldInfo);
}
internal class System.Xml.Serialization.FieldModel : object {
    private SpecifiedAccessor _checkSpecified;
    private MemberInfo _memberInfo;
    private MemberInfo _checkSpecifiedMemberInfo;
    private MethodInfo _checkShouldPersistMethodInfo;
    private bool _checkShouldPersist;
    private bool _readOnly;
    private bool _isProperty;
    private Type _fieldType;
    private string _name;
    private TypeDesc _fieldTypeDesc;
    internal string Name { get; }
    internal Type FieldType { get; }
    internal TypeDesc FieldTypeDesc { get; }
    internal bool CheckShouldPersist { get; }
    internal SpecifiedAccessor CheckSpecified { get; }
    internal MemberInfo MemberInfo { get; }
    internal MemberInfo CheckSpecifiedMemberInfo { get; }
    internal MethodInfo CheckShouldPersistMethodInfo { get; }
    internal bool ReadOnly { get; }
    internal bool IsProperty { get; }
    internal FieldModel(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist);
    internal FieldModel(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist, bool readOnly);
    internal FieldModel(MemberInfo memberInfo, Type fieldType, TypeDesc fieldTypeDesc);
    internal string get_Name();
    internal Type get_FieldType();
    internal TypeDesc get_FieldTypeDesc();
    internal bool get_CheckShouldPersist();
    internal SpecifiedAccessor get_CheckSpecified();
    internal MemberInfo get_MemberInfo();
    internal MemberInfo get_CheckSpecifiedMemberInfo();
    internal MethodInfo get_CheckShouldPersistMethodInfo();
    internal bool get_ReadOnly();
    internal bool get_IsProperty();
}
internal class System.Xml.Serialization.ForState : object {
    private LocalBuilder _indexVar;
    private Label _beginLabel;
    private Label _testLabel;
    private object _end;
    internal LocalBuilder Index { get; }
    internal Label BeginLabel { get; }
    internal Label TestLabel { get; }
    internal object End { get; }
    internal ForState(LocalBuilder indexVar, Label beginLabel, Label testLabel, object end);
    internal LocalBuilder get_Index();
    internal Label get_BeginLabel();
    internal Label get_TestLabel();
    internal object get_End();
}
internal static class System.Xml.Serialization.Globals : object {
    internal static Exception NotSupported(string msg);
}
internal class System.Xml.Serialization.IfState : object {
    private Label _elseBegin;
    private Label _endIf;
    internal Label EndIf { get; internal set; }
    internal Label ElseBegin { get; internal set; }
    internal Label get_EndIf();
    internal void set_EndIf(Label value);
    internal Label get_ElseBegin();
    internal void set_ElseBegin(Label value);
}
public class System.Xml.Serialization.ImportContext : object {
    private bool _shareTypes;
    private SchemaObjectCache _cache;
    private Hashtable _mappings;
    private Hashtable _elements;
    private CodeIdentifiers _typeIdentifiers;
    internal SchemaObjectCache Cache { get; }
    internal Hashtable Elements { get; }
    internal Hashtable Mappings { get; }
    public CodeIdentifiers TypeIdentifiers { get; }
    public bool ShareTypes { get; }
    public StringCollection Warnings { get; }
    public ImportContext(CodeIdentifiers identifiers, bool shareTypes);
    internal SchemaObjectCache get_Cache();
    internal Hashtable get_Elements();
    internal Hashtable get_Mappings();
    public CodeIdentifiers get_TypeIdentifiers();
    public bool get_ShareTypes();
    public StringCollection get_Warnings();
}
internal class System.Xml.Serialization.ImportStructWorkItem : object {
    private StructModel _model;
    private StructMapping _mapping;
    internal StructModel Model { get; }
    internal StructMapping Mapping { get; }
    internal ImportStructWorkItem(StructModel model, StructMapping mapping);
    internal StructModel get_Model();
    internal StructMapping get_Mapping();
}
[DefaultMemberAttribute("Item")]
internal interface System.Xml.Serialization.INameScope {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string name, string ns);
    public abstract virtual void set_Item(string name, string ns, object value);
}
internal class System.Xml.Serialization.IndentedWriter : object {
    private TextWriter _writer;
    private bool _needIndent;
    private int _indentLevel;
    private bool _compact;
    internal int Indent { get; internal set; }
    internal IndentedWriter(TextWriter writer, bool compact);
    internal int get_Indent();
    internal void set_Indent(int value);
    internal void Write(string s);
    internal void Write(char c);
    internal void WriteLine(string s);
    internal void WriteLine();
    internal void WriteIndent();
}
public interface System.Xml.Serialization.IXmlSerializable {
    public abstract virtual XmlSchema GetSchema();
    public abstract virtual void ReadXml(XmlReader reader);
    public abstract virtual void WriteXml(XmlWriter writer);
}
public interface System.Xml.Serialization.IXmlTextParser {
    public bool Normalized { get; public set; }
    public WhitespaceHandling WhitespaceHandling { get; public set; }
    public abstract virtual bool get_Normalized();
    public abstract virtual void set_Normalized(bool value);
    public abstract virtual WhitespaceHandling get_WhitespaceHandling();
    public abstract virtual void set_WhitespaceHandling(WhitespaceHandling value);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.LocalScope : object {
    public LocalScope parent;
    private Dictionary`2<string, LocalBuilder> _locals;
    public LocalBuilder Item { get; public set; }
    public LocalScope(LocalScope parent);
    public bool ContainsKey(string key);
    public bool TryGetValue(string key, LocalBuilder& value);
    public LocalBuilder get_Item(string key);
    public void set_Item(string key, LocalBuilder value);
    public void AddToFreeLocals(Dictionary`2<Tuple`2<Type, string>, Queue`1<LocalBuilder>> freeLocals);
}
internal abstract class System.Xml.Serialization.Mapping : object {
    private bool _isSoap;
    internal bool IsSoap { get; internal set; }
    protected Mapping(Mapping mapping);
    internal bool get_IsSoap();
    internal void set_IsSoap(bool value);
}
internal class System.Xml.Serialization.MemberMapping : AccessorMapping {
    private string _name;
    private bool _checkShouldPersist;
    private SpecifiedAccessor _checkSpecified;
    private bool _isReturnValue;
    private bool _readOnly;
    private int _sequenceId;
    private MemberInfo _memberInfo;
    private MemberInfo _checkSpecifiedMemberInfo;
    private MethodInfo _checkShouldPersistMethodInfo;
    internal bool CheckShouldPersist { get; internal set; }
    internal SpecifiedAccessor CheckSpecified { get; internal set; }
    internal string Name { get; internal set; }
    internal MemberInfo MemberInfo { get; internal set; }
    internal MemberInfo CheckSpecifiedMemberInfo { get; internal set; }
    internal MethodInfo CheckShouldPersistMethodInfo { get; internal set; }
    internal bool IsReturnValue { get; internal set; }
    internal bool ReadOnly { get; internal set; }
    internal bool IsSequence { get; }
    internal int SequenceId { get; internal set; }
    private MemberMapping(MemberMapping mapping);
    internal bool get_CheckShouldPersist();
    internal void set_CheckShouldPersist(bool value);
    internal SpecifiedAccessor get_CheckSpecified();
    internal void set_CheckSpecified(SpecifiedAccessor value);
    internal string get_Name();
    internal void set_Name(string value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
    internal MemberInfo get_CheckSpecifiedMemberInfo();
    internal void set_CheckSpecifiedMemberInfo(MemberInfo value);
    internal MethodInfo get_CheckShouldPersistMethodInfo();
    internal void set_CheckShouldPersistMethodInfo(MethodInfo value);
    internal bool get_IsReturnValue();
    internal void set_IsReturnValue(bool value);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    internal bool get_IsSequence();
    internal int get_SequenceId();
    internal void set_SequenceId(int value);
    private string GetNullableType(TypeDesc td);
    internal MemberMapping Clone();
}
internal class System.Xml.Serialization.MemberMappingComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
internal class System.Xml.Serialization.MembersMapping : TypeMapping {
    private MemberMapping[] _members;
    private bool _hasWrapperElement;
    private bool _validateRpcWrapperElement;
    private bool _writeAccessors;
    private MemberMapping _xmlnsMember;
    internal MemberMapping[] Members { get; internal set; }
    internal MemberMapping XmlnsMember { get; internal set; }
    internal bool HasWrapperElement { get; internal set; }
    internal bool ValidateRpcWrapperElement { get; internal set; }
    internal bool WriteAccessors { get; internal set; }
    internal MemberMapping[] get_Members();
    internal void set_Members(MemberMapping[] value);
    internal MemberMapping get_XmlnsMember();
    internal void set_XmlnsMember(MemberMapping value);
    internal bool get_HasWrapperElement();
    internal void set_HasWrapperElement(bool value);
    internal bool get_ValidateRpcWrapperElement();
    internal void set_ValidateRpcWrapperElement(bool value);
    internal bool get_WriteAccessors();
    internal void set_WriteAccessors(bool value);
}
internal class System.Xml.Serialization.MethodBuilderInfo : object {
    public MethodBuilder MethodBuilder;
    public Type[] ParameterTypes;
    public MethodBuilderInfo(MethodBuilder methodBuilder, Type[] parameterTypes);
    public void Validate(Type returnType, Type[] parameterTypes, MethodAttributes attributes);
}
internal class System.Xml.Serialization.ModelScope : object {
    private TypeScope _typeScope;
    private Dictionary`2<Type, TypeModel> _models;
    private Dictionary`2<Type, TypeModel> _arrayModels;
    internal TypeScope TypeScope { get; }
    internal ModelScope(TypeScope typeScope);
    internal TypeScope get_TypeScope();
    internal TypeModel GetTypeModel(Type type);
    internal TypeModel GetTypeModel(Type type, bool directReference);
    internal ArrayModel GetArrayModel(Type type);
}
internal class System.Xml.Serialization.NameKey : object {
    private string _ns;
    private string _name;
    internal NameKey(string name, string ns);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.NameTable : object {
    private Dictionary`2<NameKey, object> _table;
    internal object Item { get; internal set; }
    internal object Item { get; internal set; }
    private object System.Xml.Serialization.INameScope.Item { get; private set; }
    internal ICollection Values { get; }
    internal void Add(XmlQualifiedName qname, object value);
    internal void Add(string name, string ns, object value);
    internal object get_Item(XmlQualifiedName qname);
    internal void set_Item(XmlQualifiedName qname, object value);
    internal object get_Item(string name, string ns);
    internal void set_Item(string name, string ns, object value);
    private sealed virtual override object System.Xml.Serialization.INameScope.get_Item(string name, string ns);
    private sealed virtual override void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value);
    internal ICollection get_Values();
    internal Array ToArray(Type type);
}
internal class System.Xml.Serialization.NullableMapping : TypeMapping {
    private TypeMapping _baseMapping;
    internal TypeMapping BaseMapping { get; internal set; }
    internal string DefaultElementName { get; }
    internal TypeMapping get_BaseMapping();
    internal void set_BaseMapping(TypeMapping value);
    internal virtual string get_DefaultElementName();
}
internal class System.Xml.Serialization.PrimitiveMapping : TypeMapping {
    private bool _isList;
    internal bool IsList { get; internal set; }
    internal virtual bool get_IsList();
    internal virtual void set_IsList(bool value);
}
internal class System.Xml.Serialization.PrimitiveModel : TypeModel {
    internal PrimitiveModel(Type type, TypeDesc typeDesc, ModelScope scope);
}
internal class System.Xml.Serialization.QNameComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
internal class System.Xml.Serialization.RecursionLimiter : object {
    private int _maxDepth;
    private int _depth;
    private WorkItems _deferredWorkItems;
    internal bool IsExceededLimit { get; }
    internal int Depth { get; internal set; }
    internal WorkItems DeferredWorkItems { get; }
    internal bool get_IsExceededLimit();
    internal int get_Depth();
    internal void set_Depth(int value);
    internal WorkItems get_DeferredWorkItems();
}
internal class System.Xml.Serialization.ReflectionAwareCodeGen : object {
    private static string hexDigits;
    private static string arrayMemberKey;
    private Hashtable _reflectionVariables;
    private int _nextReflectionVariableNumber;
    private IndentedWriter _writer;
    private static string s_helperClassesForUseReflection;
    internal ReflectionAwareCodeGen(IndentedWriter writer);
    private static ReflectionAwareCodeGen();
    internal void WriteReflectionInit(TypeScope scope);
    private string WriteTypeInfo(TypeScope scope, TypeDesc typeDesc, Type type);
    private void InitTheFirstTime();
    private void WriteMappingInfo(TypeMapping mapping, string typeVariable, Type type);
    private void WriteCollectionInfo(string typeVariable, TypeDesc typeDesc, Type type);
    private string WriteAssemblyInfo(Type type);
    private string WriteMemberInfo(Type type, string escapedName, string typeVariable, string memberName);
    private string WriteMethodInfo(string escapedName, string typeVariable, string memberName, bool isNonPublic, String[] paramTypes);
    private string WriteDefaultIndexerInit(Type type, string escapedName, bool collectionUseReflection, bool elementUseReflection);
    private string GenerateVariableName(string prefix, string fullName);
    internal string GetReflectionVariable(string typeFullName, string memberName);
    internal string GetStringForMethodInvoke(string obj, string escapedTypeName, string methodName, bool useReflection, String[] args);
    internal string GetStringForEnumCompare(EnumMapping mapping, string memberName, bool useReflection);
    internal string GetStringForEnumLongValue(string variable, bool useReflection);
    internal string GetStringForTypeof(string typeFullName, bool useReflection);
    internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc);
    internal string GetStringForEnumMember(string typeFullName, string memberName, bool useReflection);
    internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc);
    internal string GetStringForMethod(string obj, string typeFullName, string memberName, bool useReflection);
    internal string GetStringForCreateInstance(string escapedTypeName, bool useReflection, bool ctorInaccessible, bool cast);
    internal string GetStringForCreateInstance(string escapedTypeName, bool useReflection, bool ctorInaccessible, bool cast, string arg);
    internal string GetStringForCreateInstance(string type, string cast, bool nonPublic, string arg);
    internal void WriteLocalDecl(string typeFullName, string variableName, string initValue, bool useReflection);
    internal void WriteCreateInstance(string escapedName, string source, bool useReflection, bool ctorInaccessible);
    internal void WriteInstanceOf(string source, string escapedTypeName, bool useReflection);
    internal void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc);
    internal void WriteEnumCase(string fullTypeName, ConstantMapping c, bool useReflection);
    internal void WriteTypeCompare(string variable, string escapedTypeName, bool useReflection);
    internal void WriteArrayTypeCompare(string variable, string escapedTypeName, string elementTypeName, bool useReflection);
    internal static void WriteQuotedCSharpString(IndentedWriter writer, string value);
    internal void WriteQuotedCSharpString(string value);
}
internal class System.Xml.Serialization.ReflectionAwareILGen : object {
    private static string hexDigits;
    private static string arrayMemberKey;
    internal void WriteReflectionInit(TypeScope scope);
    internal void ILGenForEnumLongValue(CodeGenerator ilg, string variable);
    internal string GetStringForTypeof(string typeFullName);
    internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc);
    internal SourceInfo GetSourceForMember(string obj, MemberMapping member, TypeDesc typeDesc, CodeGenerator ilg);
    internal SourceInfo GetSourceForMember(string obj, MemberMapping member, MemberInfo memberInfo, TypeDesc typeDesc, CodeGenerator ilg);
    internal void ILGenForEnumMember(CodeGenerator ilg, Type type, string memberName);
    internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc);
    internal string GetStringForMethod(string obj, string typeFullName, string memberName);
    internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, bool ctorInaccessible, bool cast);
    internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, Type cast, bool nonPublic);
    internal void WriteLocalDecl(string variableName, SourceInfo initValue);
    internal void WriteCreateInstance(string source, bool ctorInaccessible, Type type, CodeGenerator ilg);
    internal void WriteInstanceOf(SourceInfo source, Type type, CodeGenerator ilg);
    internal void WriteArrayLocalDecl(string typeName, string variableName, SourceInfo initValue, TypeDesc arrayTypeDesc);
    internal void WriteTypeCompare(string variable, Type type, CodeGenerator ilg);
    internal void WriteArrayTypeCompare(string variable, Type arrayType, CodeGenerator ilg);
    internal static string GetQuotedCSharpString(string value);
    internal static string GetCSharpString(string value);
}
internal class System.Xml.Serialization.ReflectionXmlSerializationHelper : object {
    public static MemberInfo GetMember(Type declaringType, string memberName);
}
internal class System.Xml.Serialization.ReflectionXmlSerializationReader : XmlSerializationReader {
    [CompilerGeneratedAttribute]
private static TypeDesc <StringTypeDesc>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeDesc <QnameTypeDesc>k__BackingField;
    private XmlMapping _mapping;
    private static ConcurrentDictionary`2<Tuple`2<Type, string>, SetMemberValueDelegate> s_setMemberValueDelegateCache;
    private static TypeDesc StringTypeDesc { get; private set; }
    private static TypeDesc QnameTypeDesc { get; private set; }
    public ReflectionXmlSerializationReader(XmlMapping mapping, XmlReader xmlReader, XmlDeserializationEvents events, string encodingStyle);
    private static ReflectionXmlSerializationReader();
    [CompilerGeneratedAttribute]
private static TypeDesc get_StringTypeDesc();
    [CompilerGeneratedAttribute]
private static void set_StringTypeDesc(TypeDesc value);
    [CompilerGeneratedAttribute]
private static TypeDesc get_QnameTypeDesc();
    [CompilerGeneratedAttribute]
private static void set_QnameTypeDesc(TypeDesc value);
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
    public object ReadObject();
    private object GenerateMembersElement(XmlMembersMapping xmlMembersMapping);
    private object GenerateLiteralMembersElement(XmlMembersMapping xmlMembersMapping);
    private bool GenerateLiteralMembersElementInternal(MemberMapping[] mappings, bool hasWrapperElement, Object[] p);
    private void InitializeValueTypes(Object[] p, MemberMapping[] mappings);
    private object GenerateEncodedMembersElement(XmlMembersMapping xmlMembersMapping);
    private object GenerateTypeElement(XmlTypeMapping xmlTypeMapping);
    private void WriteMemberElements(Member[] expectedMembers, UnknownNodeAction elementElseAction, UnknownNodeAction elseAction, Member anyElement, Member anyText, Fixup fixup, List`1<CheckTypeSource> checkTypeHrefsSource);
    private void WriteMemberElementsCheckType(List`1<CheckTypeSource> checkTypeHrefsSource);
    private void ProcessUnknownNode(UnknownNodeAction action);
    private void WriteMembers(Object& o, Member[] members, UnknownNodeAction elementElseAction, UnknownNodeAction elseAction, Member anyElement, Member anyText);
    private void SetCollectionObjectWithCollectionMember(Object& collection, CollectionMember collectionMember, Type collectionType);
    private static void AddObjectsIntoTargetCollection(object targetCollection, List`1<object> sourceCollection, Type targetCollectionType);
    private static SetMemberValueDelegate GetSetMemberValueDelegate(object o, string memberName);
    private static void SetMemberValue(object o, object value, MemberInfo memberInfo);
    private object GetMemberValue(object o, MemberInfo memberInfo);
    private bool WriteMemberText(Member anyText);
    private bool IsSequence(Member[] members);
    private void WriteMemberElementsIf(Member[] expectedMembers, Member anyElementMember, UnknownNodeAction elementElseAction, Fixup fixup, CheckTypeSource checkTypeSource);
    private object WriteElement(ElementAccessor element, bool checkSpecified, bool checkForNull, bool readOnly, string defaultNamespace, int fixupIndex, int elementIndex, Fixup fixup, Member member);
    private XmlSerializationReadCallback CreateXmlSerializationReadCallback(TypeMapping mapping);
    private static void NoopAction(object o);
    private object DummyReadArrayMethod();
    private static Type GetMemberType(MemberInfo memberInfo);
    private static bool IsWildcard(SpecialMapping mapping);
    private object WriteArray(ArrayMapping arrayMapping, bool readOnly, bool isNullable, string defaultNamespace, int fixupIndex, Fixup fixup, Member member);
    private object WritePrimitive(TypeMapping mapping, Func`2<object, string> readFunc, object funcState);
    private object WriteStructMethod(StructMapping mapping, bool isNullable, bool checkType, string defaultNamespace);
    private object WriteNullableMethod(NullableMapping nullableMapping, bool checkType, string defaultNamespace);
    private object WriteEnumMethod(EnumMapping mapping, Func`2<object, string> readFunc, object funcState);
    private object WriteEnumMethodSoap(EnumMapping mapping);
    private object WriteEnumMethod(EnumMapping mapping, string source);
    private Hashtable WriteHashtable(EnumMapping mapping, string name);
    private object ReflectionCreateObject(Type type);
    private ConstructorInfo GetDefaultConstructor(Type type);
    private static ConstructorInfo FindDefaultConstructor(TypeInfo ti);
    private object WriteEncodedStructMethod(StructMapping structMapping);
    private Fixup WriteMemberFixupBegin(Member[] members, object o);
    private XmlSerializationFixupCallback CreateWriteFixupMethod(Member[] members);
    private void WriteAddCollectionFixup(object o, Member member, object memberValue);
    private object WriteAddCollectionFixup(Func`1<object> getSource, Action`1<object> setSource, object memberValue, TypeDesc typeDesc, bool readOnly);
    private XmlSerializationCollectionFixupCallback GetCreateCollectionOfObjectsCallback(Type collectionType);
    private object WriteLiteralStructMethod(StructMapping structMapping, bool isNullable, bool checkType, string defaultNamespace);
    private bool WriteEnumAndArrayTypes(Object& o, StructMapping mapping, XmlQualifiedName xsiType, string defaultNamespace);
    private bool WriteDerivedTypes(Object& o, StructMapping mapping, XmlQualifiedName xsiType, string defaultNamespace, bool checkType, bool isNullable);
    private void WriteAttributes(Member[] members, Member anyAttribute, UnknownNodeAction elseCall, Object& o);
    private void WriteAttribute(Member member, object attr);
    private void SetOrAddValueToMember(object o, object value, MemberInfo memberInfo);
    private void AddItemInArrayMember(object o, MemberInfo memberInfo, Type memberType, object item);
    private bool XmlNodeEqual(XmlReader source, string name, string ns);
    private bool QNameEqual(XmlQualifiedName xsiType, string name, string ns, string defaultNamespace);
    private void CreateUnknownNodeException(object o);
}
public static class System.Xml.Serialization.ReflectionXmlSerializationReaderHelper : object {
    public static SetMemberValueDelegate GetSetMemberValueDelegateWithType(MemberInfo memberInfo);
}
internal class System.Xml.Serialization.ReflectionXmlSerializationWriter : XmlSerializationWriter {
    private XmlMapping _mapping;
    [CompilerGeneratedAttribute]
private static TypeDesc <StringTypeDesc>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeDesc <QnameTypeDesc>k__BackingField;
    internal static TypeDesc StringTypeDesc { get; private set; }
    internal static TypeDesc QnameTypeDesc { get; private set; }
    public ReflectionXmlSerializationWriter(XmlMapping xmlMapping, XmlWriter xmlWriter, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
    private static ReflectionXmlSerializationWriter();
    [CompilerGeneratedAttribute]
internal static TypeDesc get_StringTypeDesc();
    [CompilerGeneratedAttribute]
private static void set_StringTypeDesc(TypeDesc value);
    [CompilerGeneratedAttribute]
internal static TypeDesc get_QnameTypeDesc();
    [CompilerGeneratedAttribute]
private static void set_QnameTypeDesc(TypeDesc value);
    protected virtual void InitCallbacks();
    public void WriteObject(object o);
    private void WriteObjectOfTypeElement(object o, XmlTypeMapping mapping);
    private void GenerateTypeElement(object o, XmlTypeMapping xmlMapping);
    private void WriteMember(object o, object choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, bool writeAccessors);
    private void WriteArray(object o, object choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc);
    private void WriteArrayItems(ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc, object o);
    private void WriteElements(object o, object enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, bool writeAccessors, bool isNullable);
    private void WriteText(object o, TextAccessor text);
    private void WriteElement(object o, ElementAccessor element, bool writeAccessor);
    private XmlSerializationWriteCallback CreateXmlSerializationWriteCallback(TypeMapping mapping, string name, string ns, bool isNullable);
    private void WriteQualifiedNameElement(string name, string ns, object defaultValue, XmlQualifiedName o, bool nullable, bool isSoap, PrimitiveMapping mapping);
    private void WriteStructMethod(StructMapping mapping, string n, string ns, object o, bool isNullable, bool needType);
    private object GetMemberValue(object o, string memberName);
    private bool WriteEnumAndArrayTypes(StructMapping structMapping, object o, string n, string ns);
    private string WriteEnumMethod(EnumMapping mapping, object v);
    private object GetMemberValue(object o, MemberInfo memberInfo);
    private void WriteMember(object memberValue, AttributeAccessor attribute, TypeDesc memberTypeDesc, object container);
    private bool CanOptimizeWriteListSequence(TypeDesc listElementTypeDesc);
    private void WriteAttribute(object memberValue, AttributeAccessor attribute, object container);
    private int FindXmlnsIndex(MemberMapping[] members);
    private bool WriteDerivedTypes(StructMapping mapping, string n, string ns, object o, bool isNullable);
    private void WritePrimitive(WritePrimitiveMethodRequirement method, string name, string ns, object defaultValue, object o, TypeMapping mapping, bool writeXsiType, bool isElement, bool isNullable);
    private bool hasRequirement(WritePrimitiveMethodRequirement value, WritePrimitiveMethodRequirement requirement);
    private bool IsDefaultValue(TypeMapping mapping, object o, object value, bool isNullable);
    private bool WritePrimitiveValue(TypeDesc typeDesc, object o, bool isElement, String& stringValue);
    private string ConvertPrimitiveToString(object o, TypeDesc typeDesc);
    private void GenerateMembersElement(object o, XmlMembersMapping xmlMembersMapping);
}
internal class System.Xml.Serialization.SchemaGraph : object {
    private ArrayList _empty;
    private XmlSchemas _schemas;
    private Hashtable _scope;
    private int _items;
    internal SchemaGraph(Hashtable scope, XmlSchemas schemas);
    internal ArrayList GetItems();
    internal void AddRef(ArrayList list, XmlSchemaObject o);
    internal ArrayList Depends(XmlSchemaObject item);
    internal void Depends(XmlSchemaObject item, ArrayList refs);
}
public abstract class System.Xml.Serialization.SchemaImporter : object {
    private XmlSchemas _schemas;
    private StructMapping _root;
    private CodeGenerationOptions _options;
    private TypeScope _scope;
    private ImportContext _context;
    private bool _rootImported;
    private NameTable _typesInUse;
    private NameTable _groupsInUse;
    internal ImportContext Context { get; }
    internal Hashtable ImportedElements { get; }
    internal Hashtable ImportedMappings { get; }
    internal CodeIdentifiers TypeIdentifiers { get; }
    internal XmlSchemas Schemas { get; }
    internal TypeScope Scope { get; }
    internal NameTable GroupsInUse { get; }
    internal NameTable TypesInUse { get; }
    internal CodeGenerationOptions Options { get; }
    internal SchemaImporter(XmlSchemas schemas, CodeGenerationOptions options, ImportContext context);
    internal ImportContext get_Context();
    internal Hashtable get_ImportedElements();
    internal Hashtable get_ImportedMappings();
    internal CodeIdentifiers get_TypeIdentifiers();
    internal XmlSchemas get_Schemas();
    internal TypeScope get_Scope();
    internal NameTable get_GroupsInUse();
    internal NameTable get_TypesInUse();
    internal CodeGenerationOptions get_Options();
    internal void MakeDerived(StructMapping structMapping, Type baseType, bool baseTypeCanBeIndirect);
    internal string GenerateUniqueTypeName(string typeName);
    private StructMapping CreateRootMapping();
    internal StructMapping GetRootMapping();
    internal StructMapping ImportRootMapping();
    internal abstract virtual void ImportDerivedTypes(XmlQualifiedName baseName);
    internal void AddReference(XmlQualifiedName name, NameTable references, string error);
    internal void RemoveReference(XmlQualifiedName name, NameTable references);
    internal void AddReservedIdentifiersForDataBinding(CodeIdentifiers scope);
}
internal class System.Xml.Serialization.SchemaObjectCache : object {
    private Hashtable _graph;
    private Hashtable _hash;
    private Hashtable _objectCache;
    private StringCollection _warnings;
    internal Hashtable looks;
    private Hashtable Graph { get; }
    private Hashtable Hash { get; }
    private Hashtable ObjectCache { get; }
    internal StringCollection Warnings { get; }
    private Hashtable get_Graph();
    private Hashtable get_Hash();
    private Hashtable get_ObjectCache();
    internal StringCollection get_Warnings();
    internal XmlSchemaObject AddItem(XmlSchemaObject item, XmlQualifiedName qname, XmlSchemas schemas);
    internal bool Match(XmlSchemaObject o1, XmlSchemaObject o2, bool shareTypes);
    private ArrayList GetDependencies(XmlSchemaObject o, ArrayList deps, Hashtable refs);
    private int CompositeHash(XmlSchemaObject o, int hash);
    internal void GenerateSchemaGraph(XmlSchemas schemas);
    private int GetHash(XmlSchemaObject o);
    private string ToString(XmlSchemaObject o, SchemaObjectWriter writer);
}
internal class System.Xml.Serialization.SchemaObjectWriter : object {
    private StringBuilder _w;
    private int _indentLevel;
    private void WriteIndent();
    protected void WriteAttribute(string localName, string ns, string value);
    protected void WriteAttribute(string localName, string ns, XmlQualifiedName value);
    protected void WriteStartElement(string name);
    protected void WriteEndElement();
    protected void NewLine();
    protected string GetString();
    private void WriteAttribute(XmlAttribute a);
    private void WriteAttributes(XmlAttribute[] a, XmlSchemaObject o);
    internal static string ToString(NamespaceList list);
    internal string WriteXmlSchemaObject(XmlSchemaObject o);
    private void WriteSortedItems(XmlSchemaObjectCollection items);
    private void Write1_XmlSchemaAttribute(XmlSchemaAttribute o);
    private void Write3_XmlSchemaObject(XmlSchemaObject o);
    private void Write5_XmlSchemaAnnotation(XmlSchemaAnnotation o);
    private void Write6_XmlSchemaDocumentation(XmlSchemaDocumentation o);
    private void Write7_XmlSchemaAppInfo(XmlSchemaAppInfo o);
    private void Write9_XmlSchemaSimpleType(XmlSchemaSimpleType o);
    private string Write11_XmlSchemaDerivationMethod(XmlSchemaDerivationMethod v);
    private void Write12_XmlSchemaSimpleTypeUnion(XmlSchemaSimpleTypeUnion o);
    private void Write14_XmlSchemaSimpleTypeList(XmlSchemaSimpleTypeList o);
    private void Write15_XmlSchemaSimpleTypeRestriction(XmlSchemaSimpleTypeRestriction o);
    private void WriteFacets(XmlSchemaObjectCollection facets);
    private void Write_XmlSchemaFacet(string name, XmlSchemaFacet o);
    private string Write30_XmlSchemaUse(XmlSchemaUse v);
    private void Write31_XmlSchemaAttributeGroup(XmlSchemaAttributeGroup o);
    private void Write32_XmlSchemaAttributeGroupRef(XmlSchemaAttributeGroupRef o);
    private void Write33_XmlSchemaAnyAttribute(XmlSchemaAnyAttribute o);
    private string Write34_XmlSchemaContentProcessing(XmlSchemaContentProcessing v);
    private void Write35_XmlSchemaComplexType(XmlSchemaComplexType o);
    private void Write36_XmlSchemaSimpleContent(XmlSchemaSimpleContent o);
    private void Write38_XmlSchemaSimpleContentExtension(XmlSchemaSimpleContentExtension o);
    private void Write40_XmlSchemaSimpleContentRestriction(XmlSchemaSimpleContentRestriction o);
    private void Write41_XmlSchemaComplexContent(XmlSchemaComplexContent o);
    private void Write42_XmlSchemaComplexContentExtension(XmlSchemaComplexContentExtension o);
    private void Write43_XmlSchemaAll(XmlSchemaAll o);
    private void Write46_XmlSchemaElement(XmlSchemaElement o);
    private void Write47_XmlSchemaKey(XmlSchemaKey o);
    private void Write48_XmlSchemaIdentityConstraint(XmlSchemaIdentityConstraint o);
    private void Write49_XmlSchemaXPath(string name, string ns, XmlSchemaXPath o);
    private void Write50_XmlSchemaKeyref(XmlSchemaKeyref o);
    private void Write51_XmlSchemaUnique(XmlSchemaUnique o);
    private void Write52_XmlSchemaChoice(XmlSchemaChoice o);
    private void Write53_XmlSchemaAny(XmlSchemaAny o);
    private void Write54_XmlSchemaSequence(XmlSchemaSequence o);
    private void Write55_XmlSchemaGroupRef(XmlSchemaGroupRef o);
    private void Write56_XmlSchemaComplexContentRestriction(XmlSchemaComplexContentRestriction o);
    private void Write57_XmlSchemaGroup(XmlSchemaGroup o);
}
internal class System.Xml.Serialization.SerializableMapping : SpecialMapping {
    private XmlSchema _schema;
    private Type _type;
    private bool _needSchema;
    private MethodInfo _getSchemaMethod;
    private XmlQualifiedName _xsiType;
    private XmlSchemaType _xsdType;
    private XmlSchemaSet _schemas;
    private bool _any;
    private string _namespaces;
    private SerializableMapping _baseMapping;
    private SerializableMapping _derivedMappings;
    private SerializableMapping _nextDerivedMapping;
    private SerializableMapping _next;
    internal bool IsAny { get; }
    internal string NamespaceList { get; }
    internal SerializableMapping DerivedMappings { get; }
    internal SerializableMapping NextDerivedMapping { get; }
    internal SerializableMapping Next { get; internal set; }
    internal Type Type { get; internal set; }
    internal XmlSchemaSet Schemas { get; }
    internal XmlSchema Schema { get; }
    internal XmlQualifiedName XsiType { get; }
    internal XmlSchemaType XsdType { get; }
    internal SerializableMapping(MethodInfo getSchemaMethod, bool any, string ns);
    internal SerializableMapping(XmlQualifiedName xsiType, XmlSchemaSet schemas);
    internal void SetBaseMapping(SerializableMapping mapping);
    internal bool get_IsAny();
    internal string get_NamespaceList();
    internal SerializableMapping get_DerivedMappings();
    internal SerializableMapping get_NextDerivedMapping();
    internal SerializableMapping get_Next();
    internal void set_Next(SerializableMapping value);
    internal Type get_Type();
    internal void set_Type(Type value);
    internal XmlSchemaSet get_Schemas();
    internal XmlSchema get_Schema();
    internal XmlQualifiedName get_XsiType();
    internal XmlSchemaType get_XsdType();
    internal static void ValidationCallbackWithErrorCode(object sender, ValidationEventArgs args);
    internal void CheckDuplicateElement(XmlSchemaElement element, string elementNs);
    private bool Match(XmlSchemaElement e1, XmlSchemaElement e2);
    private void RetrieveSerializableSchema();
}
internal enum System.Xml.Serialization.SerializationMode : Enum {
    public int value__;
    public static SerializationMode CodeGenOnly;
    public static SerializationMode ReflectionOnly;
    public static SerializationMode ReflectionAsBackup;
    public static SerializationMode PreGenOnly;
}
internal class System.Xml.Serialization.Soap : object {
    internal static string Encoding;
    internal static string UrType;
    internal static string Array;
    internal static string ArrayType;
}
internal class System.Xml.Serialization.Soap12 : object {
    internal static string Encoding;
    internal static string RpcNamespace;
    internal static string RpcResult;
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapAttributeAttribute : Attribute {
    private string _attributeName;
    private string _ns;
    private string _dataType;
    public string AttributeName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public SoapAttributeAttribute(string attributeName);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
}
internal enum System.Xml.Serialization.SoapAttributeFlags : Enum {
    public int value__;
    public static SoapAttributeFlags Enum;
    public static SoapAttributeFlags Type;
    public static SoapAttributeFlags Element;
    public static SoapAttributeFlags Attribute;
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.SoapAttributeOverrides : object {
    private Hashtable _types;
    public SoapAttributes Item { get; }
    public SoapAttributes Item { get; }
    public void Add(Type type, SoapAttributes attributes);
    public void Add(Type type, string member, SoapAttributes attributes);
    public SoapAttributes get_Item(Type type);
    public SoapAttributes get_Item(Type type, string member);
}
public class System.Xml.Serialization.SoapAttributes : object {
    private bool _soapIgnore;
    private SoapTypeAttribute _soapType;
    private SoapElementAttribute _soapElement;
    private SoapAttributeAttribute _soapAttribute;
    private SoapEnumAttribute _soapEnum;
    private object _soapDefaultValue;
    internal SoapAttributeFlags SoapFlags { get; }
    public SoapTypeAttribute SoapType { get; public set; }
    public SoapEnumAttribute SoapEnum { get; public set; }
    public bool SoapIgnore { get; public set; }
    public SoapElementAttribute SoapElement { get; public set; }
    public SoapAttributeAttribute SoapAttribute { get; public set; }
    public object SoapDefaultValue { get; public set; }
    public SoapAttributes(ICustomAttributeProvider provider);
    internal SoapAttributeFlags get_SoapFlags();
    internal SoapAttributeFlags GetSoapFlags();
    public SoapTypeAttribute get_SoapType();
    public void set_SoapType(SoapTypeAttribute value);
    public SoapEnumAttribute get_SoapEnum();
    public void set_SoapEnum(SoapEnumAttribute value);
    public bool get_SoapIgnore();
    public void set_SoapIgnore(bool value);
    public SoapElementAttribute get_SoapElement();
    public void set_SoapElement(SoapElementAttribute value);
    public SoapAttributeAttribute get_SoapAttribute();
    public void set_SoapAttribute(SoapAttributeAttribute value);
    public object get_SoapDefaultValue();
    public void set_SoapDefaultValue(object value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapElementAttribute : Attribute {
    private string _elementName;
    private string _dataType;
    private bool _nullable;
    public string ElementName { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    public SoapElementAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
}
[AttributeUsageAttribute("256")]
public class System.Xml.Serialization.SoapEnumAttribute : Attribute {
    private string _name;
    public string Name { get; public set; }
    public SoapEnumAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1100")]
public class System.Xml.Serialization.SoapIncludeAttribute : Attribute {
    private Type _type;
    public Type Type { get; public set; }
    public SoapIncludeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
public class System.Xml.Serialization.SoapReflectionImporter : object {
    private TypeScope _typeScope;
    private SoapAttributeOverrides _attributeOverrides;
    private NameTable _types;
    private NameTable _nullables;
    private StructMapping _root;
    private string _defaultNs;
    private ModelScope _modelScope;
    public SoapReflectionImporter(string defaultNamespace);
    public SoapReflectionImporter(SoapAttributeOverrides attributeOverrides);
    public SoapReflectionImporter(SoapAttributeOverrides attributeOverrides, string defaultNamespace);
    public void IncludeTypes(ICustomAttributeProvider provider);
    private void IncludeTypes(ICustomAttributeProvider provider, RecursionLimiter limiter);
    public void IncludeType(Type type);
    private void IncludeType(Type type, RecursionLimiter limiter);
    public XmlTypeMapping ImportTypeMapping(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate, XmlMappingAccess access);
    private Exception ReflectionException(string context, Exception e);
    private SoapAttributes GetAttributes(Type type);
    private SoapAttributes GetAttributes(MemberInfo memberInfo);
    private TypeMapping ImportTypeMapping(TypeModel model, RecursionLimiter limiter);
    private TypeMapping ImportTypeMapping(TypeModel model, string dataType, RecursionLimiter limiter);
    private StructMapping CreateRootMapping();
    private StructMapping GetRootMapping();
    private TypeMapping GetTypeMapping(string typeName, string ns, TypeDesc typeDesc);
    private NullableMapping CreateNullableMapping(TypeMapping baseMapping, Type type);
    private StructMapping ImportStructLikeMapping(StructModel model, RecursionLimiter limiter);
    private bool InitializeStructMembers(StructMapping mapping, StructModel model, RecursionLimiter limiter);
    private ArrayMapping ImportArrayLikeMapping(ArrayModel model, RecursionLimiter limiter);
    private void SetArrayMappingType(ArrayMapping mapping);
    private PrimitiveMapping ImportPrimitiveMapping(PrimitiveModel model, string dataType);
    private EnumMapping ImportEnumMapping(EnumModel model);
    private ConstantMapping ImportConstantMapping(ConstantModel model);
    private MembersMapping ImportMembersMapping(XmlReflectionMember[] xmlReflectionMembers, string ns, bool hasWrapperElement, bool writeAccessors, bool validateWrapperElement, RecursionLimiter limiter);
    private MemberMapping ImportMemberMapping(XmlReflectionMember xmlReflectionMember, string ns, XmlReflectionMember[] xmlReflectionMembers, XmlSchemaForm form, RecursionLimiter limiter);
    private MemberMapping ImportFieldMapping(FieldModel model, SoapAttributes a, string ns, RecursionLimiter limiter);
    private void ImportAccessorMapping(MemberMapping accessor, FieldModel model, SoapAttributes a, string ns, XmlSchemaForm form, RecursionLimiter limiter);
    private static ElementAccessor CreateElementAccessor(TypeMapping mapping, string ns);
    private object GetDefaultValue(TypeDesc fieldTypeDesc, SoapAttributes a);
    internal string XsdTypeName(Type type);
    internal string XsdTypeName(Type type, SoapAttributes a, string name);
}
public class System.Xml.Serialization.SoapSchemaMember : object {
    private string _memberName;
    private XmlQualifiedName _type;
    public XmlQualifiedName MemberType { get; public set; }
    public string MemberName { get; public set; }
    public XmlQualifiedName get_MemberType();
    public void set_MemberType(XmlQualifiedName value);
    public string get_MemberName();
    public void set_MemberName(string value);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.SoapTypeAttribute : Attribute {
    private string _ns;
    private string _typeName;
    private bool _includeInSchema;
    public bool IncludeInSchema { get; public set; }
    public string TypeName { get; public set; }
    public string Namespace { get; public set; }
    public SoapTypeAttribute(string typeName);
    public SoapTypeAttribute(string typeName, string ns);
    public bool get_IncludeInSchema();
    public void set_IncludeInSchema(bool value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
internal class System.Xml.Serialization.SourceInfo : object {
    private static Regex s_regex;
    private static Regex s_regex2;
    private static Lazy`1<MethodInfo> s_iListGetItemMethod;
    public string Source;
    public string Arg;
    public MemberInfo MemberInfo;
    public Type Type;
    public CodeGenerator ILG;
    public SourceInfo(string source, string arg, MemberInfo memberInfo, Type type, CodeGenerator ilg);
    private static SourceInfo();
    public SourceInfo CastTo(TypeDesc td);
    public void LoadAddress(Type elementType);
    public void Load(Type elementType);
    private void InternalLoad(Type elementType, bool asAddress);
    private void Convert(Type sourceType, Type targetType, bool asAddress);
    private void ConvertNullableValue(Type nullableType, Type targetType);
    public static string op_Implicit(SourceInfo source);
    public static bool op_Inequality(SourceInfo a, SourceInfo b);
    public static bool op_Equality(SourceInfo a, SourceInfo b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Xml.Serialization.SpecialMapping : TypeMapping {
    private bool _namedAny;
    internal bool NamedAny { get; internal set; }
    internal bool get_NamedAny();
    internal void set_NamedAny(bool value);
}
internal class System.Xml.Serialization.SpecialModel : TypeModel {
    internal SpecialModel(Type type, TypeDesc typeDesc, ModelScope scope);
}
internal enum System.Xml.Serialization.SpecifiedAccessor : Enum {
    public int value__;
    public static SpecifiedAccessor None;
    public static SpecifiedAccessor ReadOnly;
    public static SpecifiedAccessor ReadWrite;
}
internal class System.Xml.Serialization.StructMapping : TypeMapping {
    private MemberMapping[] _members;
    private StructMapping _baseMapping;
    private StructMapping _derivedMappings;
    private StructMapping _nextDerivedMapping;
    private MemberMapping _xmlnsMember;
    private bool _hasSimpleContent;
    private bool _openModel;
    private bool _isSequence;
    private NameTable _elements;
    private NameTable _attributes;
    private CodeIdentifiers _scope;
    internal StructMapping BaseMapping { get; internal set; }
    internal StructMapping DerivedMappings { get; }
    internal bool IsFullyInitialized { get; }
    internal NameTable LocalElements { get; }
    internal NameTable LocalAttributes { get; }
    private object System.Xml.Serialization.INameScope.Item { get; private set; }
    internal StructMapping NextDerivedMapping { get; }
    internal bool HasSimpleContent { get; }
    internal bool HasXmlnsMember { get; }
    internal MemberMapping[] Members { get; internal set; }
    internal MemberMapping XmlnsMember { get; internal set; }
    internal bool IsOpenModel { get; internal set; }
    internal CodeIdentifiers Scope { get; internal set; }
    internal bool IsSequence { get; internal set; }
    internal StructMapping get_BaseMapping();
    internal void set_BaseMapping(StructMapping value);
    internal StructMapping get_DerivedMappings();
    internal bool get_IsFullyInitialized();
    internal NameTable get_LocalElements();
    internal NameTable get_LocalAttributes();
    private sealed virtual override object System.Xml.Serialization.INameScope.get_Item(string name, string ns);
    private sealed virtual override void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value);
    internal StructMapping get_NextDerivedMapping();
    internal bool get_HasSimpleContent();
    internal bool get_HasXmlnsMember();
    internal MemberMapping[] get_Members();
    internal void set_Members(MemberMapping[] value);
    internal MemberMapping get_XmlnsMember();
    internal void set_XmlnsMember(MemberMapping value);
    internal bool get_IsOpenModel();
    internal void set_IsOpenModel(bool value);
    internal CodeIdentifiers get_Scope();
    internal void set_Scope(CodeIdentifiers value);
    internal MemberMapping FindDeclaringMapping(MemberMapping member, StructMapping& declaringMapping, string parent);
    internal bool Declares(MemberMapping member, string parent);
    internal void SetContentModel(TextAccessor text, bool hasElements);
    internal bool HasExplicitSequence();
    internal void SetSequence();
    internal bool get_IsSequence();
    internal void set_IsSequence(bool value);
}
internal class System.Xml.Serialization.StructModel : TypeModel {
    internal StructModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal MemberInfo[] GetMemberInfos();
    internal FieldModel GetFieldModel(MemberInfo memberInfo);
    private void CheckSupportedMember(TypeDesc typeDesc, MemberInfo member, Type type);
    private FieldModel GetFieldModel(FieldInfo fieldInfo);
    private FieldModel GetPropertyModel(PropertyInfo propertyInfo);
    internal static bool CheckPropertyRead(PropertyInfo propertyInfo);
}
internal class System.Xml.Serialization.TempAssembly : object {
    internal static string GeneratedAssemblyNamespace;
    private Assembly _assembly;
    private XmlSerializerImplementation _contract;
    private IDictionary _writerMethods;
    private IDictionary _readerMethods;
    private TempMethodDictionary _methods;
    private Hashtable _assemblies;
    internal static bool UseLegacySerializerGeneration { get; }
    internal XmlSerializerImplementation Contract { get; }
    internal TempAssembly(XmlMapping[] xmlMappings, Assembly assembly, XmlSerializerImplementation contract);
    internal TempAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, string location);
    internal static bool get_UseLegacySerializerGeneration();
    internal XmlSerializerImplementation get_Contract();
    internal void InitAssemblyMethods(XmlMapping[] xmlMappings);
    internal static Assembly LoadGeneratedAssembly(Type type, string defaultNamespace, XmlSerializerImplementation& contract);
    private static string GenerateAssemblyId(Type type);
    internal static bool GenerateSerializerToStream(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, Assembly assembly, Hashtable assemblies, Stream stream);
    internal static Assembly GenerateRefEmitAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace);
    private static MethodInfo GetMethodFromType(Type type, string methodName);
    internal static Type GetTypeFromAssembly(Assembly assembly, string typeName);
    internal bool CanRead(XmlMapping mapping, XmlReader xmlReader);
    private string ValidateEncodingStyle(string encodingStyle, string methodKey);
    internal object InvokeReader(XmlMapping mapping, XmlReader xmlReader, XmlDeserializationEvents events, string encodingStyle);
    internal void InvokeWriter(XmlMapping mapping, XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.TempAssemblyCache : object {
    private Dictionary`2<TempAssemblyCacheKey, TempAssembly> _cache;
    internal TempAssembly Item { get; }
    internal TempAssembly get_Item(string ns, object o);
    internal void Add(string ns, object o, TempAssembly assembly);
}
internal class System.Xml.Serialization.TempAssemblyCacheKey : object {
    private string _ns;
    private object _type;
    internal TempAssemblyCacheKey(string ns, object type);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class System.Xml.Serialization.TextAccessor : Accessor {
}
internal static class System.Xml.Serialization.ThisAssembly : object {
    internal static string Version;
    internal static string InformationalVersion;
}
internal enum System.Xml.Serialization.TypeCode : Enum {
    public int value__;
    public static TypeCode Empty;
    public static TypeCode Object;
    public static TypeCode DBNull;
    public static TypeCode Boolean;
    public static TypeCode Char;
    public static TypeCode SByte;
    public static TypeCode Byte;
    public static TypeCode Int16;
    public static TypeCode UInt16;
    public static TypeCode Int32;
    public static TypeCode UInt32;
    public static TypeCode Int64;
    public static TypeCode UInt64;
    public static TypeCode Single;
    public static TypeCode Double;
    public static TypeCode Decimal;
    public static TypeCode DateTime;
    public static TypeCode String;
}
internal class System.Xml.Serialization.TypeDesc : object {
    private string _name;
    private string _fullName;
    private string _cSharpName;
    private TypeDesc _arrayElementTypeDesc;
    private TypeDesc _arrayTypeDesc;
    private TypeDesc _nullableTypeDesc;
    private TypeKind _kind;
    private XmlSchemaType _dataType;
    private Type _type;
    private TypeDesc _baseTypeDesc;
    private TypeFlags _flags;
    private string _formatterName;
    private bool _isXsdType;
    private bool _isMixed;
    private int _weight;
    private Exception _exception;
    internal TypeFlags Flags { get; }
    internal bool IsXsdType { get; }
    internal bool IsMappedType { get; }
    internal string Name { get; }
    internal string FullName { get; }
    internal string CSharpName { get; }
    internal XmlSchemaType DataType { get; }
    internal Type Type { get; }
    internal string FormatterName { get; }
    internal TypeKind Kind { get; }
    internal bool IsValueType { get; }
    internal bool CanBeAttributeValue { get; }
    internal bool XmlEncodingNotRequired { get; }
    internal bool CanBeElementValue { get; }
    internal bool CanBeTextValue { get; }
    internal bool IsMixed { get; internal set; }
    internal bool IsSpecial { get; }
    internal bool IsAmbiguousDataType { get; }
    internal bool HasCustomFormatter { get; }
    internal bool HasDefaultSupport { get; }
    internal bool HasIsEmpty { get; }
    internal bool CollapseWhitespace { get; }
    internal bool HasDefaultConstructor { get; }
    internal bool IsUnsupported { get; }
    internal bool IsGenericInterface { get; }
    internal bool IsPrivateImplementation { get; }
    internal bool CannotNew { get; }
    internal bool IsAbstract { get; }
    internal bool IsOptionalValue { get; }
    internal bool UseReflection { get; }
    internal bool IsVoid { get; }
    internal bool IsClass { get; }
    internal bool IsStructLike { get; }
    internal bool IsArrayLike { get; }
    internal bool IsCollection { get; }
    internal bool IsEnumerable { get; }
    internal bool IsArray { get; }
    internal bool IsPrimitive { get; }
    internal bool IsEnum { get; }
    internal bool IsNullable { get; }
    internal bool IsRoot { get; }
    internal bool ConstructorInaccessible { get; }
    internal Exception Exception { get; internal set; }
    internal TypeDesc ArrayElementTypeDesc { get; internal set; }
    internal int Weight { get; }
    internal TypeDesc BaseTypeDesc { get; internal set; }
    internal TypeDesc(string name, string fullName, XmlSchemaType dataType, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, string formatterName);
    internal TypeDesc(string name, string fullName, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags);
    internal TypeDesc(Type type, bool isXsdType, XmlSchemaType dataType, string formatterName, TypeFlags flags);
    internal TypeDesc(Type type, string name, string fullName, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, TypeDesc arrayElementTypeDesc);
    public virtual string ToString();
    internal TypeFlags get_Flags();
    internal bool get_IsXsdType();
    internal bool get_IsMappedType();
    internal string get_Name();
    internal string get_FullName();
    internal string get_CSharpName();
    internal XmlSchemaType get_DataType();
    internal Type get_Type();
    internal string get_FormatterName();
    internal TypeKind get_Kind();
    internal bool get_IsValueType();
    internal bool get_CanBeAttributeValue();
    internal bool get_XmlEncodingNotRequired();
    internal bool get_CanBeElementValue();
    internal bool get_CanBeTextValue();
    internal bool get_IsMixed();
    internal void set_IsMixed(bool value);
    internal bool get_IsSpecial();
    internal bool get_IsAmbiguousDataType();
    internal bool get_HasCustomFormatter();
    internal bool get_HasDefaultSupport();
    internal bool get_HasIsEmpty();
    internal bool get_CollapseWhitespace();
    internal bool get_HasDefaultConstructor();
    internal bool get_IsUnsupported();
    internal bool get_IsGenericInterface();
    internal bool get_IsPrivateImplementation();
    internal bool get_CannotNew();
    internal bool get_IsAbstract();
    internal bool get_IsOptionalValue();
    internal bool get_UseReflection();
    internal bool get_IsVoid();
    internal bool get_IsClass();
    internal bool get_IsStructLike();
    internal bool get_IsArrayLike();
    internal bool get_IsCollection();
    internal bool get_IsEnumerable();
    internal bool get_IsArray();
    internal bool get_IsPrimitive();
    internal bool get_IsEnum();
    internal bool get_IsNullable();
    internal bool get_IsRoot();
    internal bool get_ConstructorInaccessible();
    internal Exception get_Exception();
    internal void set_Exception(Exception value);
    internal TypeDesc GetNullableTypeDesc(Type type);
    internal void CheckSupported();
    internal void CheckNeedConstructor();
    internal TypeDesc get_ArrayElementTypeDesc();
    internal void set_ArrayElementTypeDesc(TypeDesc value);
    internal int get_Weight();
    internal TypeDesc CreateArrayTypeDesc();
    internal TypeDesc get_BaseTypeDesc();
    internal void set_BaseTypeDesc(TypeDesc value);
    internal bool IsDerivedFrom(TypeDesc baseTypeDesc);
    internal static TypeDesc FindCommonBaseTypeDesc(TypeDesc[] typeDescs);
}
[ExtensionAttribute]
internal static class System.Xml.Serialization.TypeExtensionMethods : object {
    [ExtensionAttribute]
public static TypeCode GetTypeCode(Type type);
}
[ExtensionAttribute]
internal static class System.Xml.Serialization.TypeExtensions : object {
    private static string ImplicitCastOperatorName;
    [ExtensionAttribute]
public static bool TryConvertTo(Type targetType, object data, Object& returnValue);
}
internal enum System.Xml.Serialization.TypeFlags : Enum {
    public int value__;
    public static TypeFlags None;
    public static TypeFlags Abstract;
    public static TypeFlags Reference;
    public static TypeFlags Special;
    public static TypeFlags CanBeAttributeValue;
    public static TypeFlags CanBeTextValue;
    public static TypeFlags CanBeElementValue;
    public static TypeFlags HasCustomFormatter;
    public static TypeFlags AmbiguousDataType;
    public static TypeFlags IgnoreDefault;
    public static TypeFlags HasIsEmpty;
    public static TypeFlags HasDefaultConstructor;
    public static TypeFlags XmlEncodingNotRequired;
    public static TypeFlags UseReflection;
    public static TypeFlags CollapseWhitespace;
    public static TypeFlags OptionalValue;
    public static TypeFlags CtorInaccessible;
    public static TypeFlags UsePrivateImplementation;
    public static TypeFlags GenericInterface;
    public static TypeFlags Unsupported;
}
internal enum System.Xml.Serialization.TypeKind : Enum {
    public int value__;
    public static TypeKind Root;
    public static TypeKind Primitive;
    public static TypeKind Enum;
    public static TypeKind Struct;
    public static TypeKind Class;
    public static TypeKind Array;
    public static TypeKind Collection;
    public static TypeKind Enumerable;
    public static TypeKind Void;
    public static TypeKind Node;
    public static TypeKind Attribute;
    public static TypeKind Serializable;
}
internal abstract class System.Xml.Serialization.TypeMapping : Mapping {
    private TypeDesc _typeDesc;
    private string _typeNs;
    private string _typeName;
    private bool _referencedByElement;
    private bool _referencedByTopLevelElement;
    private bool _includeInSchema;
    private bool _reference;
    internal bool ReferencedByTopLevelElement { get; internal set; }
    internal bool ReferencedByElement { get; internal set; }
    internal string Namespace { get; internal set; }
    internal string TypeName { get; internal set; }
    internal TypeDesc TypeDesc { get; internal set; }
    internal bool IncludeInSchema { get; internal set; }
    internal bool IsList { get; internal set; }
    internal bool IsReference { get; internal set; }
    internal bool IsAnonymousType { get; }
    internal string DefaultElementName { get; }
    internal bool get_ReferencedByTopLevelElement();
    internal void set_ReferencedByTopLevelElement(bool value);
    internal bool get_ReferencedByElement();
    internal void set_ReferencedByElement(bool value);
    internal string get_Namespace();
    internal void set_Namespace(string value);
    internal string get_TypeName();
    internal void set_TypeName(string value);
    internal TypeDesc get_TypeDesc();
    internal void set_TypeDesc(TypeDesc value);
    internal bool get_IncludeInSchema();
    internal void set_IncludeInSchema(bool value);
    internal virtual bool get_IsList();
    internal virtual void set_IsList(bool value);
    internal bool get_IsReference();
    internal void set_IsReference(bool value);
    internal bool get_IsAnonymousType();
    internal virtual string get_DefaultElementName();
}
internal abstract class System.Xml.Serialization.TypeModel : object {
    private TypeDesc _typeDesc;
    private Type _type;
    private ModelScope _scope;
    internal Type Type { get; }
    internal ModelScope ModelScope { get; }
    internal TypeDesc TypeDesc { get; }
    protected TypeModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal Type get_Type();
    internal ModelScope get_ModelScope();
    internal TypeDesc get_TypeDesc();
}
internal class System.Xml.Serialization.TypeScope : object {
    private Hashtable _typeDescs;
    private Hashtable _arrayTypeDescs;
    private ArrayList _typeMappings;
    private static Hashtable s_primitiveTypes;
    private static Hashtable s_primitiveDataTypes;
    private static NameTable s_primitiveNames;
    private static String[] s_unsupportedTypes;
    internal ICollection Types { get; }
    internal ICollection TypeMappings { get; }
    internal static Hashtable PrimtiveTypes { get; }
    private static TypeScope();
    internal static bool IsKnownType(Type type);
    private static void AddSoapEncodedTypes(string ns);
    private static void AddPrimitive(Type type, string dataTypeName, string formatterName, TypeFlags flags);
    private static void AddNonXsdPrimitive(Type type, string dataTypeName, string ns, string formatterName, XmlQualifiedName baseTypeName, XmlSchemaFacet[] facets, TypeFlags flags);
    private static void AddSoapEncodedPrimitive(Type type, string dataTypeName, string ns, string formatterName, XmlQualifiedName baseTypeName, TypeFlags flags);
    internal TypeDesc GetTypeDesc(string name, string ns);
    internal TypeDesc GetTypeDesc(string name, string ns, TypeFlags flags);
    internal TypeDesc GetTypeDesc(XmlSchemaSimpleType dataType);
    internal TypeDesc GetTypeDesc(Type type);
    internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference);
    internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference, bool throwOnError);
    internal TypeDesc GetArrayTypeDesc(Type type);
    internal TypeMapping GetTypeMappingFromTypeDesc(TypeDesc typeDesc);
    internal Type GetTypeFromTypeDesc(TypeDesc typeDesc);
    private TypeDesc ImportTypeDesc(Type type, MemberInfo memberInfo, bool directReference);
    private static bool IsArraySegment(Type t);
    internal static bool IsOptionalValue(Type type);
    internal static string TypeName(Type t);
    internal static Type GetArrayElementType(Type type, string memberInfo);
    internal static MemberMapping[] GetAllMembers(StructMapping mapping);
    internal static void GetAllMembers(StructMapping mapping, ArrayList list);
    internal static MemberMapping[] GetAllMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos);
    internal static MemberMapping[] GetSettableMembers(StructMapping structMapping);
    private static void GetSettableMembers(StructMapping mapping, ArrayList list);
    private static bool CanWriteProperty(PropertyInfo propertyInfo, TypeDesc typeDesc);
    internal static MemberMapping[] GetSettableMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos);
    private static void PopulateMemberInfos(StructMapping structMapping, MemberMapping[] mappings, Dictionary`2<string, MemberInfo> memberInfos);
    private static bool ShouldBeReplaced(MemberInfo memberInfoToBeReplaced, Type derivedType, MemberInfo& replacedInfo);
    private static TypeFlags GetConstructorFlags(Type type, Exception& exception);
    private static Type GetEnumeratorElementType(Type type, TypeFlags& flags);
    internal static PropertyInfo GetDefaultIndexer(Type type, string memberInfo);
    private static Type GetCollectionElementType(Type type, string memberInfo);
    internal static XmlQualifiedName ParseWsdlArrayType(string type, String& dims, XmlSchemaObject parent);
    internal ICollection get_Types();
    internal void AddTypeMapping(TypeMapping typeMapping);
    internal ICollection get_TypeMappings();
    internal static Hashtable get_PrimtiveTypes();
}
internal class System.Xml.Serialization.UnknownNodeAction : MulticastDelegate {
    public UnknownNodeAction(object object, IntPtr method);
    public virtual void Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Xml.Serialization.UnreferencedObjectEventArgs : EventArgs {
    private object _o;
    private string _id;
    public object UnreferencedObject { get; }
    public string UnreferencedId { get; }
    public UnreferencedObjectEventArgs(object o, string id);
    public object get_UnreferencedObject();
    public string get_UnreferencedId();
}
public class System.Xml.Serialization.UnreferencedObjectEventHandler : MulticastDelegate {
    public UnreferencedObjectEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UnreferencedObjectEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UnreferencedObjectEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.Serialization.UrtTypes : object {
    internal static string Namespace;
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.WorkItems : object {
    private ArrayList _list;
    internal ImportStructWorkItem Item { get; internal set; }
    internal int Count { get; }
    internal ImportStructWorkItem get_Item(int index);
    internal void set_Item(int index, ImportStructWorkItem value);
    internal int get_Count();
    internal void Add(ImportStructWorkItem item);
    internal bool Contains(StructMapping mapping);
    internal int IndexOf(StructMapping mapping);
    internal void RemoveAt(int index);
}
internal class System.Xml.Serialization.Wsdl : object {
    internal static string Namespace;
    internal static string ArrayType;
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyAttributeAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyElementAttribute : Attribute {
    private string _name;
    private string _ns;
    private int _order;
    private bool _nsSpecified;
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public int Order { get; public set; }
    internal bool NamespaceSpecified { get; }
    public XmlAnyElementAttribute(string name);
    public XmlAnyElementAttribute(string name, string ns);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Order();
    public void set_Order(int value);
    internal bool get_NamespaceSpecified();
    internal bool GetNamespaceSpecified();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAnyElementAttributes : CollectionBase {
    public XmlAnyElementAttribute Item { get; public set; }
    public XmlAnyElementAttribute get_Item(int index);
    public void set_Item(int index, XmlAnyElementAttribute value);
    public int Add(XmlAnyElementAttribute attribute);
    public void Insert(int index, XmlAnyElementAttribute attribute);
    public int IndexOf(XmlAnyElementAttribute attribute);
    public bool Contains(XmlAnyElementAttribute attribute);
    public void Remove(XmlAnyElementAttribute attribute);
    public void CopyTo(XmlAnyElementAttribute[] array, int index);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayAttribute : Attribute {
    private string _elementName;
    private string _ns;
    private bool _nullable;
    private XmlSchemaForm _form;
    private int _order;
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public bool IsNullable { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public int Order { get; public set; }
    public XmlArrayAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public int get_Order();
    public void set_Order(int value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayItemAttribute : Attribute {
    private string _elementName;
    private Type _type;
    private string _ns;
    private string _dataType;
    private bool _nullable;
    private bool _nullableSpecified;
    private XmlSchemaForm _form;
    private int _nestingLevel;
    public Type Type { get; public set; }
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public int NestingLevel { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    public XmlSchemaForm Form { get; public set; }
    public XmlArrayItemAttribute(string elementName);
    public XmlArrayItemAttribute(Type type);
    public XmlArrayItemAttribute(string elementName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_NestingLevel();
    public void set_NestingLevel(int value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    internal bool GetIsNullableSpecified();
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlArrayItemAttributes : CollectionBase {
    public XmlArrayItemAttribute Item { get; public set; }
    public XmlArrayItemAttribute get_Item(int index);
    public void set_Item(int index, XmlArrayItemAttribute value);
    public int Add(XmlArrayItemAttribute attribute);
    public void Insert(int index, XmlArrayItemAttribute attribute);
    public int IndexOf(XmlArrayItemAttribute attribute);
    public bool Contains(XmlArrayItemAttribute attribute);
    public void Remove(XmlArrayItemAttribute attribute);
    public void CopyTo(XmlArrayItemAttribute[] array, int index);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAttributeAttribute : Attribute {
    private string _attributeName;
    private Type _type;
    private string _ns;
    private string _dataType;
    private XmlSchemaForm _form;
    public Type Type { get; public set; }
    public string AttributeName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public XmlAttributeAttribute(string attributeName);
    public XmlAttributeAttribute(Type type);
    public XmlAttributeAttribute(string attributeName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
}
internal class System.Xml.Serialization.XmlAttributeComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
public class System.Xml.Serialization.XmlAttributeEventArgs : EventArgs {
    private object _o;
    private XmlAttribute _attr;
    private string _qnames;
    private int _lineNumber;
    private int _linePosition;
    public object ObjectBeingDeserialized { get; }
    public XmlAttribute Attr { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string ExpectedAttributes { get; }
    internal XmlAttributeEventArgs(XmlAttribute attr, int lineNumber, int linePosition, object o, string qnames);
    public object get_ObjectBeingDeserialized();
    public XmlAttribute get_Attr();
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_ExpectedAttributes();
}
public class System.Xml.Serialization.XmlAttributeEventHandler : MulticastDelegate {
    public XmlAttributeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlAttributeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlAttributeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum System.Xml.Serialization.XmlAttributeFlags : Enum {
    public int value__;
    public static XmlAttributeFlags Enum;
    public static XmlAttributeFlags Array;
    public static XmlAttributeFlags Text;
    public static XmlAttributeFlags ArrayItems;
    public static XmlAttributeFlags Elements;
    public static XmlAttributeFlags Attribute;
    public static XmlAttributeFlags Root;
    public static XmlAttributeFlags Type;
    public static XmlAttributeFlags AnyElements;
    public static XmlAttributeFlags AnyAttribute;
    public static XmlAttributeFlags ChoiceIdentifier;
    public static XmlAttributeFlags XmlnsDeclarations;
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAttributeOverrides : object {
    private Dictionary`2<Type, Dictionary`2<string, XmlAttributes>> _types;
    public XmlAttributes Item { get; }
    public XmlAttributes Item { get; }
    public void Add(Type type, XmlAttributes attributes);
    public void Add(Type type, string member, XmlAttributes attributes);
    public XmlAttributes get_Item(Type type);
    public XmlAttributes get_Item(Type type, string member);
}
public class System.Xml.Serialization.XmlAttributes : object {
    private XmlElementAttributes _xmlElements;
    private XmlArrayItemAttributes _xmlArrayItems;
    private XmlAnyElementAttributes _xmlAnyElements;
    private XmlArrayAttribute _xmlArray;
    private XmlAttributeAttribute _xmlAttribute;
    private XmlTextAttribute _xmlText;
    private XmlEnumAttribute _xmlEnum;
    private bool _xmlIgnore;
    private bool _xmlns;
    private object _xmlDefaultValue;
    private XmlRootAttribute _xmlRoot;
    private XmlTypeAttribute _xmlType;
    private XmlAnyAttributeAttribute _xmlAnyAttribute;
    private XmlChoiceIdentifierAttribute _xmlChoiceIdentifier;
    private static Type modreq(System.Runtime.CompilerServices.IsVolatile) s_ignoreAttributeType;
    internal XmlAttributeFlags XmlFlags { get; }
    private static Type IgnoreAttribute { get; }
    public XmlElementAttributes XmlElements { get; }
    public XmlAttributeAttribute XmlAttribute { get; public set; }
    public XmlEnumAttribute XmlEnum { get; public set; }
    public XmlTextAttribute XmlText { get; public set; }
    public XmlArrayAttribute XmlArray { get; public set; }
    public XmlArrayItemAttributes XmlArrayItems { get; }
    public object XmlDefaultValue { get; public set; }
    public bool XmlIgnore { get; public set; }
    public XmlTypeAttribute XmlType { get; public set; }
    public XmlRootAttribute XmlRoot { get; public set; }
    public XmlAnyElementAttributes XmlAnyElements { get; }
    public XmlAnyAttributeAttribute XmlAnyAttribute { get; public set; }
    public XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }
    public bool Xmlns { get; public set; }
    public XmlAttributes(ICustomAttributeProvider provider);
    internal XmlAttributeFlags get_XmlFlags();
    private static Type get_IgnoreAttribute();
    internal static object GetAttr(MemberInfo memberInfo, Type attrType);
    public XmlElementAttributes get_XmlElements();
    public XmlAttributeAttribute get_XmlAttribute();
    public void set_XmlAttribute(XmlAttributeAttribute value);
    public XmlEnumAttribute get_XmlEnum();
    public void set_XmlEnum(XmlEnumAttribute value);
    public XmlTextAttribute get_XmlText();
    public void set_XmlText(XmlTextAttribute value);
    public XmlArrayAttribute get_XmlArray();
    public void set_XmlArray(XmlArrayAttribute value);
    public XmlArrayItemAttributes get_XmlArrayItems();
    public object get_XmlDefaultValue();
    public void set_XmlDefaultValue(object value);
    public bool get_XmlIgnore();
    public void set_XmlIgnore(bool value);
    public XmlTypeAttribute get_XmlType();
    public void set_XmlType(XmlTypeAttribute value);
    public XmlRootAttribute get_XmlRoot();
    public void set_XmlRoot(XmlRootAttribute value);
    public XmlAnyElementAttributes get_XmlAnyElements();
    public XmlAnyAttributeAttribute get_XmlAnyAttribute();
    public void set_XmlAnyAttribute(XmlAnyAttributeAttribute value);
    public XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier();
    public bool get_Xmlns();
    public void set_Xmlns(bool value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlChoiceIdentifierAttribute : Attribute {
    private string _name;
    private MemberInfo _memberInfo;
    public string MemberName { get; public set; }
    internal MemberInfo MemberInfo { get; internal set; }
    public XmlChoiceIdentifierAttribute(string name);
    public string get_MemberName();
    public void set_MemberName(string value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
    internal MemberInfo GetMemberInfo();
    internal void SetMemberInfo(MemberInfo memberInfo);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.XmlCountingReader : XmlReader {
    private XmlReader _innerReader;
    private int _advanceCount;
    internal int AdvanceCount { get; }
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    private bool System.Xml.Serialization.IXmlTextParser.Normalized { get; private set; }
    private WhitespaceHandling System.Xml.Serialization.IXmlTextParser.WhitespaceHandling { get; private set; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    internal XmlCountingReader(XmlReader xmlReader);
    internal int get_AdvanceCount();
    private void IncrementCount();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_HasAttributes();
    public virtual void Close();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual string LookupNamespace(string prefix);
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual XmlReader ReadSubtree();
    public virtual XmlNodeType MoveToContent();
    public virtual bool Read();
    public virtual void Skip();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual string ReadString();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual string ReadElementString();
    public virtual string ReadElementString(string name);
    public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool System.Xml.Serialization.IXmlTextParser.get_Normalized();
    private sealed virtual override void System.Xml.Serialization.IXmlTextParser.set_Normalized(bool value);
    private sealed virtual override WhitespaceHandling System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling();
    private sealed virtual override void System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling(WhitespaceHandling value);
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
}
internal class System.Xml.Serialization.XmlCustomFormatter : object {
    private static DateTimeSerializationMode s_mode;
    private static String[] s_allDateTimeFormats;
    private static String[] s_allDateFormats;
    private static String[] s_allTimeFormats;
    private static DateTimeSerializationMode Mode { get; }
    private static XmlCustomFormatter();
    private static DateTimeSerializationMode get_Mode();
    internal static string FromDefaultValue(object value, string formatter);
    internal static string FromDate(DateTime value);
    internal static string FromTime(DateTime value);
    internal static string FromDateTime(DateTime value);
    internal static string FromChar(char value);
    internal static string FromXmlName(string name);
    internal static string FromXmlNCName(string ncName);
    internal static string FromXmlNmToken(string nmToken);
    internal static string FromXmlNmTokens(string nmTokens);
    internal static void WriteArrayBase64(XmlWriter writer, Byte[] inData, int start, int count);
    internal static string FromByteArrayHex(Byte[] value);
    internal static string FromEnum(long val, String[] vals, Int64[] ids, string typeName);
    internal static object ToDefaultValue(string value, string formatter);
    internal static DateTime ToDateTime(string value);
    internal static DateTime ToDateTime(string value, String[] formats);
    internal static DateTime ToDate(string value);
    internal static DateTime ToTime(string value);
    internal static char ToChar(string value);
    internal static string ToXmlName(string value);
    internal static string ToXmlNCName(string value);
    internal static string ToXmlNmToken(string value);
    internal static string ToXmlNmTokens(string value);
    internal static Byte[] ToByteArrayBase64(string value);
    internal static Byte[] ToByteArrayHex(string value);
    internal static long ToEnum(string val, Hashtable vals, string typeName, bool validate);
    private static string CollapseWhitespace(string value);
}
public class System.Xml.Serialization.XmlDeserializationEvents : ValueType {
    private XmlNodeEventHandler _onUnknownNode;
    private XmlAttributeEventHandler _onUnknownAttribute;
    private XmlElementEventHandler _onUnknownElement;
    private UnreferencedObjectEventHandler _onUnreferencedObject;
    internal object sender;
    public XmlNodeEventHandler OnUnknownNode { get; public set; }
    public XmlAttributeEventHandler OnUnknownAttribute { get; public set; }
    public XmlElementEventHandler OnUnknownElement { get; public set; }
    public UnreferencedObjectEventHandler OnUnreferencedObject { get; public set; }
    public XmlNodeEventHandler get_OnUnknownNode();
    public void set_OnUnknownNode(XmlNodeEventHandler value);
    public XmlAttributeEventHandler get_OnUnknownAttribute();
    public void set_OnUnknownAttribute(XmlAttributeEventHandler value);
    public XmlElementEventHandler get_OnUnknownElement();
    public void set_OnUnknownElement(XmlElementEventHandler value);
    public UnreferencedObjectEventHandler get_OnUnreferencedObject();
    public void set_OnUnreferencedObject(UnreferencedObjectEventHandler value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlElementAttribute : Attribute {
    private string _elementName;
    private Type _type;
    private string _ns;
    private string _dataType;
    private bool _nullable;
    private bool _nullableSpecified;
    private XmlSchemaForm _form;
    private int _order;
    public Type Type { get; public set; }
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    public XmlSchemaForm Form { get; public set; }
    public int Order { get; public set; }
    public XmlElementAttribute(string elementName);
    public XmlElementAttribute(Type type);
    public XmlElementAttribute(string elementName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    internal bool GetIsNullableSpecified();
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public int get_Order();
    public void set_Order(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlElementAttributes : CollectionBase {
    public XmlElementAttribute Item { get; public set; }
    public XmlElementAttribute get_Item(int index);
    public void set_Item(int index, XmlElementAttribute value);
    public int Add(XmlElementAttribute attribute);
    public void Insert(int index, XmlElementAttribute attribute);
    public int IndexOf(XmlElementAttribute attribute);
    public bool Contains(XmlElementAttribute attribute);
    public void Remove(XmlElementAttribute attribute);
    public void CopyTo(XmlElementAttribute[] array, int index);
}
public class System.Xml.Serialization.XmlElementEventArgs : EventArgs {
    private object _o;
    private XmlElement _elem;
    private string _qnames;
    private int _lineNumber;
    private int _linePosition;
    public object ObjectBeingDeserialized { get; }
    public XmlElement Element { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string ExpectedElements { get; }
    internal XmlElementEventArgs(XmlElement elem, int lineNumber, int linePosition, object o, string qnames);
    public object get_ObjectBeingDeserialized();
    public XmlElement get_Element();
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_ExpectedElements();
}
public class System.Xml.Serialization.XmlElementEventHandler : MulticastDelegate {
    public XmlElementEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlElementEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlElementEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("256")]
public class System.Xml.Serialization.XmlEnumAttribute : Attribute {
    private string _name;
    public string Name { get; public set; }
    public XmlEnumAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
}
internal class System.Xml.Serialization.XmlFacetComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1100")]
public class System.Xml.Serialization.XmlIncludeAttribute : Attribute {
    private Type _type;
    public Type Type { get; public set; }
    public XmlIncludeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
public abstract class System.Xml.Serialization.XmlMapping : object {
    private TypeScope _scope;
    private bool _generateSerializer;
    private bool _isSoap;
    private ElementAccessor _accessor;
    private string _key;
    private bool _shallow;
    private XmlMappingAccess _access;
    internal ElementAccessor Accessor { get; }
    internal TypeScope Scope { get; }
    public string ElementName { get; }
    public string XsdElementName { get; }
    public string Namespace { get; }
    internal bool GenerateSerializer { get; internal set; }
    internal bool IsReadable { get; }
    internal bool IsWriteable { get; }
    internal bool IsSoap { get; internal set; }
    internal string Key { get; }
    internal XmlMapping(TypeScope scope, ElementAccessor accessor);
    internal XmlMapping(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access);
    internal ElementAccessor get_Accessor();
    internal TypeScope get_Scope();
    public string get_ElementName();
    public string get_XsdElementName();
    public string get_Namespace();
    internal bool get_GenerateSerializer();
    internal void set_GenerateSerializer(bool value);
    internal bool get_IsReadable();
    internal bool get_IsWriteable();
    internal bool get_IsSoap();
    internal void set_IsSoap(bool value);
    public void SetKey(string key);
    internal void SetKeyInternal(string key);
    internal static string GenerateKey(Type type, XmlRootAttribute root, string ns);
    internal string get_Key();
    internal void CheckShallow();
    internal static bool IsShallow(XmlMapping[] mappings);
}
[FlagsAttribute]
public enum System.Xml.Serialization.XmlMappingAccess : Enum {
    public int value__;
    public static XmlMappingAccess None;
    public static XmlMappingAccess Read;
    public static XmlMappingAccess Write;
}
public class System.Xml.Serialization.XmlMemberMapping : object {
    private MemberMapping _mapping;
    internal MemberMapping Mapping { get; }
    internal Accessor Accessor { get; }
    public bool Any { get; }
    public string ElementName { get; }
    public string XsdElementName { get; }
    public string Namespace { get; }
    public string MemberName { get; }
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public string TypeFullName { get; }
    public bool CheckSpecified { get; }
    internal XmlMemberMapping(MemberMapping mapping);
    internal MemberMapping get_Mapping();
    internal Accessor get_Accessor();
    public bool get_Any();
    public string get_ElementName();
    public string get_XsdElementName();
    public string get_Namespace();
    public string get_MemberName();
    public string get_TypeName();
    public string get_TypeNamespace();
    public string get_TypeFullName();
    public bool get_CheckSpecified();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlMembersMapping : XmlMapping {
    private XmlMemberMapping[] _mappings;
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public XmlMemberMapping Item { get; }
    public int Count { get; }
    internal XmlMembersMapping(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access);
    public string get_TypeName();
    public string get_TypeNamespace();
    public XmlMemberMapping get_Item(int index);
    public int get_Count();
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlNamespaceDeclarationsAttribute : Attribute {
}
public class System.Xml.Serialization.XmlNodeEventArgs : EventArgs {
    private object _o;
    private XmlNode _xmlNode;
    private int _lineNumber;
    private int _linePosition;
    public object ObjectBeingDeserialized { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Text { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal XmlNodeEventArgs(XmlNode xmlNode, int lineNumber, int linePosition, object o);
    public object get_ObjectBeingDeserialized();
    public XmlNodeType get_NodeType();
    public string get_Name();
    public string get_LocalName();
    public string get_NamespaceURI();
    public string get_Text();
    public int get_LineNumber();
    public int get_LinePosition();
}
public class System.Xml.Serialization.XmlNodeEventHandler : MulticastDelegate {
    public XmlNodeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.Serialization.XmlnsAccessor : Accessor {
}
public class System.Xml.Serialization.XmlReflectionImporter : object {
    private TypeScope _typeScope;
    private XmlAttributeOverrides _attributeOverrides;
    private XmlAttributes _defaultAttributes;
    private NameTable _types;
    private NameTable _nullables;
    private NameTable _elements;
    private NameTable _xsdAttributes;
    private Hashtable _specials;
    private Hashtable _anonymous;
    private NameTable _serializables;
    private StructMapping _root;
    private string _defaultNs;
    private ModelScope _modelScope;
    private int _arrayNestingLevel;
    private XmlArrayItemAttributes _savedArrayItemAttributes;
    private string _savedArrayNamespace;
    private int _choiceNum;
    public XmlReflectionImporter(string defaultNamespace);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides, string defaultNamespace);
    public void IncludeTypes(ICustomAttributeProvider provider);
    private void IncludeTypes(ICustomAttributeProvider provider, RecursionLimiter limiter);
    public void IncludeType(Type type);
    private void IncludeType(Type type, RecursionLimiter limiter);
    public XmlTypeMapping ImportTypeMapping(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root, string defaultNamespace);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel, XmlMappingAccess access);
    private XmlAttributes GetAttributes(Type type, bool canBeSimpleType);
    private XmlAttributes GetAttributes(MemberInfo memberInfo);
    private ElementAccessor ImportElement(TypeModel model, XmlRootAttribute root, string defaultNamespace, RecursionLimiter limiter);
    private static string GetMappingName(Mapping mapping);
    private ElementAccessor ReconcileLocalAccessor(ElementAccessor accessor, string ns);
    private Accessor ReconcileAccessor(Accessor accessor, NameTable accessors);
    private Exception CreateReflectionException(string context, Exception e);
    private Exception CreateTypeReflectionException(string context, Exception e);
    private Exception CreateMemberReflectionException(FieldModel model, Exception e);
    private TypeMapping ImportTypeMapping(TypeModel model, string ns, ImportContext context, string dataType, XmlAttributes a, RecursionLimiter limiter);
    private TypeMapping ImportTypeMapping(TypeModel model, string ns, ImportContext context, string dataType, XmlAttributes a, bool repeats, bool openModel, RecursionLimiter limiter);
    internal static MethodInfo GetMethodFromSchemaProvider(XmlSchemaProviderAttribute provider, Type type);
    private SpecialMapping ImportSpecialMapping(Type type, TypeDesc typeDesc, string ns, ImportContext context, RecursionLimiter limiter);
    internal void SetBase(SerializableMapping mapping, XmlQualifiedName baseQname);
    private static string GetContextName(ImportContext context);
    private static Exception InvalidAttributeUseException(Type type);
    private static Exception UnsupportedException(TypeDesc typeDesc, ImportContext context);
    private StructMapping CreateRootMapping();
    private NullableMapping CreateNullableMapping(TypeMapping baseMapping, Type type);
    private StructMapping GetRootMapping();
    private TypeMapping GetTypeMapping(string typeName, string ns, TypeDesc typeDesc, NameTable typeLib, Type type);
    private StructMapping ImportStructLikeMapping(StructModel model, string ns, bool openModel, XmlAttributes a, RecursionLimiter limiter);
    private bool InitializeStructMembers(StructMapping mapping, StructModel model, bool openModel, string typeName, RecursionLimiter limiter);
    private static bool IsAnonymousType(XmlAttributes a, string contextNs);
    internal string XsdTypeName(Type type);
    internal string XsdTypeName(Type type, XmlAttributes a, string name);
    private static int CountAtLevel(XmlArrayItemAttributes attributes, int level);
    private void SetArrayMappingType(ArrayMapping mapping, string defaultNs, Type type);
    private ArrayMapping ImportArrayLikeMapping(ArrayModel model, string ns, RecursionLimiter limiter);
    private void CheckContext(TypeDesc typeDesc, ImportContext context);
    private PrimitiveMapping ImportPrimitiveMapping(PrimitiveModel model, ImportContext context, string dataType, bool repeats);
    private EnumMapping ImportEnumMapping(EnumModel model, string ns, bool repeats);
    private ConstantMapping ImportConstantMapping(ConstantModel model);
    private MembersMapping ImportMembersMapping(XmlReflectionMember[] xmlReflectionMembers, string ns, bool hasWrapperElement, bool rpc, bool openModel, RecursionLimiter limiter);
    private MemberMapping ImportMemberMapping(XmlReflectionMember xmlReflectionMember, string ns, XmlReflectionMember[] xmlReflectionMembers, bool rpc, bool openModel, RecursionLimiter limiter);
    internal static XmlReflectionMember FindSpecifiedMember(string memberName, XmlReflectionMember[] reflectionMembers);
    private MemberMapping ImportFieldMapping(StructModel parent, FieldModel model, XmlAttributes a, string ns, RecursionLimiter limiter);
    private Type CheckChoiceIdentifierType(Type type, bool isArrayLike, string identifierName, string memberName);
    private Type GetChoiceIdentifierType(XmlChoiceIdentifierAttribute choice, XmlReflectionMember[] xmlReflectionMembers, bool isArrayLike, string accessorName);
    private Type GetChoiceIdentifierType(XmlChoiceIdentifierAttribute choice, StructModel structModel, bool isArrayLike, string accessorName);
    private void CreateArrayElementsFromAttributes(ArrayMapping arrayMapping, XmlArrayItemAttributes attributes, Type arrayElementType, string arrayElementNs, RecursionLimiter limiter);
    private void ImportAccessorMapping(MemberMapping accessor, FieldModel model, XmlAttributes a, string ns, Type choiceIdentifierType, bool rpc, bool openModel, RecursionLimiter limiter);
    private void CheckTopLevelAttributes(XmlAttributes a, string accessorName);
    private void CheckAmbiguousChoice(XmlAttributes a, Type accessorType, string accessorName);
    private void CheckChoiceIdentifierMapping(EnumMapping choiceMapping);
    private object GetDefaultValue(TypeDesc fieldTypeDesc, Type t, XmlAttributes a);
    private static XmlArrayItemAttribute CreateArrayItemAttribute(TypeDesc typeDesc, int nestingLevel);
    private static XmlArrayAttribute CreateArrayAttribute(TypeDesc typeDesc);
    private static XmlElementAttribute CreateElementAttribute(TypeDesc typeDesc);
    private static void AddUniqueAccessor(INameScope scope, Accessor accessor);
    private static void AddUniqueAccessor(MemberMapping member, INameScope elements, INameScope attributes, bool isSequence);
    private static void CheckForm(XmlSchemaForm form, bool isQualified);
    private static void CheckNullable(bool isNullable, TypeDesc typeDesc, TypeMapping mapping);
    private static ElementAccessor CreateElementAccessor(TypeMapping mapping, string ns);
    internal static XmlTypeMapping GetTopLevelMapping(Type type, string defaultNamespace);
}
public class System.Xml.Serialization.XmlReflectionMember : object {
    private string _memberName;
    private Type _type;
    private XmlAttributes _xmlAttributes;
    private SoapAttributes _soapAttributes;
    private bool _isReturnValue;
    private bool _overrideIsNullable;
    public Type MemberType { get; public set; }
    public XmlAttributes XmlAttributes { get; public set; }
    public SoapAttributes SoapAttributes { get; public set; }
    public string MemberName { get; public set; }
    public bool IsReturnValue { get; public set; }
    public bool OverrideIsNullable { get; public set; }
    public Type get_MemberType();
    public void set_MemberType(Type value);
    public XmlAttributes get_XmlAttributes();
    public void set_XmlAttributes(XmlAttributes value);
    public SoapAttributes get_SoapAttributes();
    public void set_SoapAttributes(SoapAttributes value);
    public string get_MemberName();
    public void set_MemberName(string value);
    public bool get_IsReturnValue();
    public void set_IsReturnValue(bool value);
    public bool get_OverrideIsNullable();
    public void set_OverrideIsNullable(bool value);
}
[AttributeUsageAttribute("9244")]
public class System.Xml.Serialization.XmlRootAttribute : Attribute {
    private string _elementName;
    private string _ns;
    private string _dataType;
    private bool _nullable;
    private bool _nullableSpecified;
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    internal string Key { get; }
    public XmlRootAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    internal bool GetIsNullableSpecified();
    internal string get_Key();
    internal string GetKey();
}
public class System.Xml.Serialization.XmlSchemaEnumerator : object {
    private XmlSchemas _list;
    private int _idx;
    private int _end;
    public XmlSchema Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public XmlSchemaEnumerator(XmlSchemas list);
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual XmlSchema get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Xml.Serialization.XmlSchemaExporter : object {
    internal static XmlSchemaForm elementFormDefault;
    internal static XmlSchemaForm attributeFormDefault;
    private XmlSchemas _schemas;
    private Hashtable _elements;
    private Hashtable _attributes;
    private Hashtable _types;
    private Hashtable _references;
    private bool _needToExportRoot;
    private TypeScope _scope;
    public XmlSchemaExporter(XmlSchemas schemas);
    public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping);
    public XmlQualifiedName ExportTypeMapping(XmlMembersMapping xmlMembersMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType);
    private static XmlSchemaType FindSchemaType(string name, XmlSchemaObjectCollection items);
    private static bool IsAnyType(XmlSchemaType schemaType, bool mixed, bool unbounded);
    public string ExportAnyType(string ns);
    public string ExportAnyType(XmlMembersMapping members);
    private void CheckScope(TypeScope scope);
    private XmlSchemaElement ExportElement(ElementAccessor accessor);
    private void CheckForDuplicateType(TypeMapping mapping, string newNamespace);
    private XmlSchema AddSchema(string targetNamespace);
    private void AddSchemaItem(XmlSchemaObject item, string ns, string referencingNs);
    private void AddSchemaImport(string ns, string referencingNs);
    private static bool NamespacesEqual(string ns1, string ns2);
    private bool SchemaContainsItem(XmlSchemaObject item, string ns);
    private XmlSchemaImport FindImport(XmlSchema schema, string ns);
    private void ExportMapping(Mapping mapping, string ns, bool isAny);
    private void ExportElementMapping(XmlSchemaElement element, Mapping mapping, string ns, bool isAny);
    private XmlQualifiedName ExportNonXsdPrimitiveMapping(PrimitiveMapping mapping, string ns);
    private XmlSchemaType ExportSpecialMapping(SpecialMapping mapping, string ns, bool isAny, XmlSchemaElement element);
    private XmlSchemaType ExportMembersMapping(MembersMapping mapping, string ns);
    private XmlSchemaType ExportAnonymousPrimitiveMapping(PrimitiveMapping mapping);
    private XmlQualifiedName ExportPrimitiveMapping(PrimitiveMapping mapping, string ns);
    private void ExportArrayMapping(ArrayMapping mapping, string ns, XmlSchemaElement element);
    private void ExportElementAccessors(XmlSchemaGroupBase group, ElementAccessor[] accessors, bool repeats, bool valueTypeOptional, string ns);
    private void ExportAttributeAccessor(XmlSchemaComplexType type, AttributeAccessor accessor, bool valueTypeOptional, string ns);
    private void ExportElementAccessor(XmlSchemaGroupBase group, ElementAccessor accessor, bool repeats, bool valueTypeOptional, string ns);
    internal static string ExportDefaultValue(TypeMapping mapping, object value);
    private void ExportRootIfNecessary(TypeScope typeScope);
    private XmlQualifiedName ExportStructMapping(StructMapping mapping, string ns, XmlSchemaElement element);
    private void ExportTypeMembers(XmlSchemaComplexType type, MemberMapping[] members, string name, string ns, bool hasSimpleContent, bool openModel);
    private void ExportDerivedMappings(StructMapping mapping);
    private XmlSchemaType ExportEnumMapping(EnumMapping mapping, string ns);
    private void AddXmlnsAnnotation(XmlSchemaComplexType type, string xmlnsMemberName);
}
public class System.Xml.Serialization.XmlSchemaImporter : SchemaImporter {
    internal bool GenerateOrder { get; }
    public XmlSchemaImporter(XmlSchemas schemas);
    public XmlSchemaImporter(XmlSchemas schemas, CodeIdentifiers typeIdentifiers);
    public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType);
    internal bool get_GenerateOrder();
    internal TypeMapping GetDefaultMapping(TypeFlags flags);
    public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType, bool baseTypeCanBeIndirect);
    public XmlTypeMapping ImportTypeMapping(XmlQualifiedName name);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName name);
    public XmlMembersMapping ImportAnyType(XmlQualifiedName typeName, string elementName);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names, Type baseType, bool baseTypeCanBeIndirect);
    public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members);
    private ElementAccessor ImportElement(XmlQualifiedName name, Type desiredMappingType, Type baseType);
    private ElementAccessor ImportElement(XmlSchemaElement element, string identifier, Type desiredMappingType, Type baseType, string ns, bool topLevelElement);
    private TypeMapping ImportElementType(XmlSchemaElement element, string identifier, Type desiredMappingType, Type baseType, string ns);
    private void RunSchemaExtensions(TypeMapping mapping, XmlQualifiedName qname, XmlSchemaType type, XmlSchemaObject context, TypeFlags flags);
    private string GenerateUniqueTypeName(string desiredName, string ns);
    internal virtual void ImportDerivedTypes(XmlQualifiedName baseName);
    private TypeMapping ImportType(XmlQualifiedName name, Type desiredMappingType, Type baseType, TypeFlags flags, bool addref);
    private TypeMapping ImportType(XmlSchemaComplexType type, string typeNs, string identifier, Type desiredMappingType, Type baseType, TypeFlags flags);
    private MembersMapping ImportMembersType(XmlSchemaType type, string typeNs, string identifier);
    private StructMapping ImportStructType(XmlSchemaType type, string typeNs, string identifier, Type baseType, bool arrayLike);
    private bool IsAllGroup(XmlSchemaType type);
    private StructMapping ImportStructDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, Type baseType);
    private MemberMapping[] ImportTypeMembers(XmlSchemaType type, string typeNs, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, Boolean& needExplicitOrder, bool order, bool allowUnboundedElements);
    internal static bool IsMixed(XmlSchemaType type);
    private TypeItems GetTypeItems(XmlSchemaType type);
    private void ImportGroup(XmlSchemaGroupBase group, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool mixed, Boolean& needExplicitOrder, bool allowDuplicates, bool groupRepeats, bool allowUnboundedElements);
    private MemberMapping ImportChoiceGroup(XmlSchemaGroupBase group, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool groupRepeats, Boolean& needExplicitOrder, bool allowDuplicates);
    private bool IsNeedXmlSerializationAttributes(ArrayMapping arrayMapping);
    private bool GatherGroupChoices(XmlSchemaGroup group, NameTable choiceElements, string identifier, string ns, Boolean& needExplicitOrder, bool allowDuplicates);
    private bool GatherGroupChoices(XmlSchemaParticle particle, NameTable choiceElements, string identifier, string ns, Boolean& needExplicitOrder, bool allowDuplicates);
    private void AddScopeElement(INameScope scope, ElementAccessor element, Boolean& duplicateElements, bool allowDuplicates);
    private void AddScopeElements(INameScope scope, ElementAccessor[] elements, Boolean& duplicateElements, bool allowDuplicates);
    private void ImportGroupMembers(XmlSchemaParticle particle, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool groupRepeats, Boolean& mixed, Boolean& needExplicitOrder, bool allowDuplicates, bool allowUnboundedElements);
    private XmlSchemaElement GetTopLevelElement(XmlSchemaElement element);
    private XmlSchemaElement[] GetEquivalentElements(XmlSchemaElement element);
    private bool ImportSubstitutionGroupMember(XmlSchemaElement element, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, string ns, bool repeats, Boolean& needExplicitOrder, bool allowDuplicates);
    private void ImportTextMember(CodeIdentifiers members, CodeIdentifiers membersScope, XmlQualifiedName simpleContentType);
    private MemberMapping ImportAnyMember(XmlSchemaAny any, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, Boolean& mixed, Boolean& needExplicitOrder, bool allowDuplicates);
    private ElementAccessor[] ImportAny(XmlSchemaAny any, bool makeElement, string targetNamespace);
    private ElementAccessor ImportArray(XmlSchemaElement element, string identifier, string ns, bool repeats);
    private ArrayMapping ImportArrayMapping(XmlSchemaType type, string identifier, string ns, bool repeats);
    private bool IsCyclicReferencedType(XmlSchemaElement element, List`1<string> identifiers);
    private SpecialMapping ImportAnyMapping(XmlSchemaType type, string identifier, string ns, bool repeats);
    private void ImportElementMember(XmlSchemaElement element, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool repeats, Boolean& needExplicitOrder, bool allowDuplicates, bool allowUnboundedElements);
    private void ImportAttributeMember(XmlSchemaAttribute attribute, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, string ns);
    private void ImportAnyAttributeMember(XmlSchemaAnyAttribute any, CodeIdentifiers members, CodeIdentifiers membersScope);
    private bool KeepXmlnsDeclarations(XmlSchemaType type, String& xmlnsMemberName);
    private void ImportXmlnsDeclarationsMember(XmlSchemaType type, CodeIdentifiers members, CodeIdentifiers membersScope);
    private void ImportAttributeGroupMembers(XmlSchemaAttributeGroup group, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, string ns);
    private AttributeAccessor ImportSpecialAttribute(XmlQualifiedName name, string identifier);
    private AttributeAccessor ImportAttribute(XmlSchemaAttribute attribute, string identifier, string ns, XmlSchemaAttribute defaultValueProvider);
    private TypeMapping ImportDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, Type baseType, TypeFlags flags, bool isList);
    private TypeMapping ImportEnumeratedDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, TypeFlags flags, bool isList);
    private EnumMapping ImportEnumeratedChoice(ElementAccessor[] choice, string typeNs, string typeName);
    private PrimitiveMapping ImportPrimitiveDataType(XmlSchemaSimpleType dataType, TypeFlags flags);
    private PrimitiveMapping ImportNonXsdPrimitiveDataType(XmlSchemaSimpleType dataType, string ns, TypeFlags flags);
    private XmlSchemaGroup FindGroup(XmlQualifiedName name);
    private XmlSchemaAttributeGroup FindAttributeGroup(XmlQualifiedName name);
    internal static XmlQualifiedName BaseTypeName(XmlSchemaSimpleType dataType);
    private TypeDesc GetDataTypeSource(XmlSchemaSimpleType dataType, TypeFlags flags);
    private XmlSchemaSimpleType FindDataType(XmlQualifiedName name, TypeFlags flags);
    private XmlSchemaType FindType(XmlQualifiedName name, TypeFlags flags);
    private XmlSchemaElement FindElement(XmlQualifiedName name);
    private XmlSchemaAttribute FindAttribute(XmlQualifiedName name);
    private XmlSchemaForm ElementForm(string ns, XmlSchemaElement element);
    private XmlSchemaForm AttributeForm(string ns, XmlSchemaAttribute attribute);
}
internal class System.Xml.Serialization.XmlSchemaObjectComparer : object {
    private QNameComparer _comparer;
    public sealed virtual int Compare(object o1, object o2);
    internal static XmlQualifiedName NameOf(XmlSchemaObject o);
    internal static XmlQualifiedName NameOf(XmlSchemaObjectCollection items);
    internal static string Namespace(XmlSchemaObject o);
}
[AttributeUsageAttribute("1036")]
public class System.Xml.Serialization.XmlSchemaProviderAttribute : Attribute {
    private string _methodName;
    private bool _any;
    public string MethodName { get; }
    public bool IsAny { get; public set; }
    public XmlSchemaProviderAttribute(string methodName);
    public string get_MethodName();
    public bool get_IsAny();
    public void set_IsAny(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlSchemas : CollectionBase {
    private XmlSchemaSet _schemaSet;
    private Hashtable _references;
    private SchemaObjectCache _cache;
    private bool _shareTypes;
    private Hashtable _mergedSchemas;
    internal Hashtable delayedSchemas;
    private bool _isCompiled;
    private static XmlSchema modreq(System.Runtime.CompilerServices.IsVolatile) s_xsd;
    private static XmlSchema modreq(System.Runtime.CompilerServices.IsVolatile) s_xml;
    internal static string xmlSchema;
    public XmlSchema Item { get; public set; }
    public XmlSchema Item { get; }
    internal SchemaObjectCache Cache { get; }
    internal Hashtable MergedSchemas { get; }
    internal Hashtable References { get; }
    internal XmlSchemaSet SchemaSet { get; }
    public bool IsCompiled { get; }
    internal static XmlSchema XsdSchema { get; }
    internal static XmlSchema XmlSchema { get; }
    public XmlSchema get_Item(int index);
    public void set_Item(int index, XmlSchema value);
    public XmlSchema get_Item(string ns);
    public IList GetSchemas(string ns);
    internal SchemaObjectCache get_Cache();
    internal Hashtable get_MergedSchemas();
    internal Hashtable get_References();
    internal XmlSchemaSet get_SchemaSet();
    internal int Add(XmlSchema schema, bool delay);
    public int Add(XmlSchema schema);
    public int Add(XmlSchema schema, Uri baseUri);
    public void Add(XmlSchemas schemas);
    public void AddReference(XmlSchema schema);
    public void Insert(int index, XmlSchema schema);
    public int IndexOf(XmlSchema schema);
    public bool Contains(XmlSchema schema);
    public bool Contains(string targetNamespace);
    public void Remove(XmlSchema schema);
    public void CopyTo(XmlSchema[] array, int index);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnClear();
    protected virtual void OnSet(int index, object oldValue, object newValue);
    private void AddName(XmlSchema schema);
    private void Prepare(XmlSchema schema);
    private void RemoveName(XmlSchema schema);
    public object Find(XmlQualifiedName name, Type type);
    internal object Find(XmlQualifiedName name, Type type, bool checkCache);
    private sealed virtual override IEnumerator`1<XmlSchema> System.Collections.Generic.IEnumerable<System.Xml.Schema.XmlSchema>.GetEnumerator();
    internal static void Preprocess(XmlSchema schema);
    public static bool IsDataSet(XmlSchema schema);
    private void Merge(XmlSchema schema);
    private void AddImport(IList schemas, string ns);
    private void Merge(IList originals, XmlSchema schema);
    private static string ItemName(XmlSchemaObject o);
    internal static XmlQualifiedName GetParentName(XmlSchemaObject item);
    private static string GetSchemaItem(XmlSchemaObject o, string ns, string details);
    private static string Dump(XmlSchemaObject o);
    private static string MergeFailedMessage(XmlSchemaObject src, XmlSchemaObject dest, string ns);
    internal XmlSchemaObject Find(XmlSchemaObject o, IList originals);
    public bool get_IsCompiled();
    public void Compile(ValidationEventHandler handler, bool fullCompile);
    internal static Exception CreateValidationException(XmlSchemaException exception, string message);
    internal static void IgnoreCompileErrors(object sender, ValidationEventArgs args);
    internal static XmlSchema get_XsdSchema();
    internal static XmlSchema get_XmlSchema();
    private static XmlSchema CreateFakeXsdSchema(string ns, string name);
    internal void SetCache(SchemaObjectCache cache, bool shareTypes);
    internal bool IsReference(XmlSchemaObject type);
}
internal class System.Xml.Serialization.XmlSerializationCodeGen : object {
    private IndentedWriter _writer;
    private int _nextMethodNumber;
    private Hashtable _methodNames;
    private ReflectionAwareCodeGen _raCodeGen;
    private TypeScope[] _scopes;
    private TypeDesc _stringTypeDesc;
    private TypeDesc _qnameTypeDesc;
    private string _access;
    private string _className;
    private TypeMapping[] _referencedMethods;
    private int _references;
    private Hashtable _generatedMethods;
    internal IndentedWriter Writer { get; }
    internal int NextMethodNumber { get; internal set; }
    internal ReflectionAwareCodeGen RaCodeGen { get; }
    internal TypeDesc StringTypeDesc { get; }
    internal TypeDesc QnameTypeDesc { get; }
    internal string ClassName { get; }
    internal string Access { get; }
    internal TypeScope[] Scopes { get; }
    internal Hashtable MethodNames { get; }
    internal Hashtable GeneratedMethods { get; }
    internal XmlSerializationCodeGen(IndentedWriter writer, TypeScope[] scopes, string access, string className);
    internal IndentedWriter get_Writer();
    internal int get_NextMethodNumber();
    internal void set_NextMethodNumber(int value);
    internal ReflectionAwareCodeGen get_RaCodeGen();
    internal TypeDesc get_StringTypeDesc();
    internal TypeDesc get_QnameTypeDesc();
    internal string get_ClassName();
    internal string get_Access();
    internal TypeScope[] get_Scopes();
    internal Hashtable get_MethodNames();
    internal Hashtable get_GeneratedMethods();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateReferencedMethods();
    internal string ReferenceMapping(TypeMapping mapping);
    private TypeMapping[] EnsureArrayIndex(TypeMapping[] a, int index);
    internal void WriteQuotedCSharpString(string value);
    internal void GenerateHashtableGetBegin(string privateName, string publicName);
    internal void GenerateHashtableGetEnd(string privateName);
    internal void GeneratePublicMethods(string privateName, string publicName, String[] methods, XmlMapping[] xmlMappings);
    internal void GenerateSupportedTypes(Type[] types);
    internal string GenerateBaseSerializer(string baseSerializer, string readerClass, string writerClass, CodeIdentifiers classes);
    internal string GenerateTypedSerializer(string readMethod, string writeMethod, XmlMapping mapping, CodeIdentifiers classes, string baseSerializer, string readerClass, string writerClass);
    private void GenerateTypedSerializers(Hashtable serializers);
    private void GenerateGetSerializer(Hashtable serializers, XmlMapping[] xmlMappings);
    internal void GenerateSerializerContract(string className, XmlMapping[] xmlMappings, Type[] types, string readerType, String[] readMethods, string writerType, String[] writerMethods, Hashtable serializers);
    internal static bool IsWildcard(SpecialMapping mapping);
}
public class System.Xml.Serialization.XmlSerializationCollectionFixupCallback : MulticastDelegate {
    public XmlSerializationCollectionFixupCallback(object object, IntPtr method);
    public virtual void Invoke(object collection, object collectionItems);
    public virtual IAsyncResult BeginInvoke(object collection, object collectionItems, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Xml.Serialization.XmlSerializationFixupCallback : MulticastDelegate {
    public XmlSerializationFixupCallback(object object, IntPtr method);
    public virtual void Invoke(object fixup);
    public virtual IAsyncResult BeginInvoke(object fixup, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationGeneratedCode : object {
    internal void Init(TempAssembly tempAssembly);
    internal void Dispose();
}
internal class System.Xml.Serialization.XmlSerializationILGen : object {
    private int _nextMethodNumber;
    private Dictionary`2<TypeMapping, string> _methodNames;
    private Dictionary`2<string, MethodBuilderInfo> _methodBuilders;
    internal Dictionary`2<string, Type> CreatedTypes;
    internal Dictionary`2<string, MemberInfo> memberInfos;
    private ReflectionAwareILGen _raCodeGen;
    private TypeScope[] _scopes;
    private TypeDesc _stringTypeDesc;
    private TypeDesc _qnameTypeDesc;
    private string _className;
    private TypeMapping[] _referencedMethods;
    private int _references;
    private HashSet`1<TypeMapping> _generatedMethods;
    private ModuleBuilder _moduleBuilder;
    private TypeAttributes _typeAttributes;
    protected TypeBuilder typeBuilder;
    protected CodeGenerator ilg;
    private static Dictionary`2<string, Regex> s_regexs;
    internal int NextMethodNumber { get; internal set; }
    internal ReflectionAwareILGen RaCodeGen { get; }
    internal TypeDesc StringTypeDesc { get; }
    internal TypeDesc QnameTypeDesc { get; }
    internal string ClassName { get; }
    internal TypeScope[] Scopes { get; }
    internal Dictionary`2<TypeMapping, string> MethodNames { get; }
    internal HashSet`1<TypeMapping> GeneratedMethods { get; }
    internal ModuleBuilder ModuleBuilder { get; internal set; }
    internal TypeAttributes TypeAttributes { get; }
    internal XmlSerializationILGen(TypeScope[] scopes, string access, string className);
    private static XmlSerializationILGen();
    internal int get_NextMethodNumber();
    internal void set_NextMethodNumber(int value);
    internal ReflectionAwareILGen get_RaCodeGen();
    internal TypeDesc get_StringTypeDesc();
    internal TypeDesc get_QnameTypeDesc();
    internal string get_ClassName();
    internal TypeScope[] get_Scopes();
    internal Dictionary`2<TypeMapping, string> get_MethodNames();
    internal HashSet`1<TypeMapping> get_GeneratedMethods();
    internal ModuleBuilder get_ModuleBuilder();
    internal void set_ModuleBuilder(ModuleBuilder value);
    internal TypeAttributes get_TypeAttributes();
    internal static Regex NewRegex(string pattern);
    internal MethodBuilder EnsureMethodBuilder(TypeBuilder typeBuilder, string methodName, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    internal MethodBuilderInfo GetMethodBuilder(string methodName);
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateReferencedMethods();
    internal string ReferenceMapping(TypeMapping mapping);
    private TypeMapping[] EnsureArrayIndex(TypeMapping[] a, int index);
    internal string GetCSharpString(string value);
    internal FieldBuilder GenerateHashtableGetBegin(string privateName, string publicName, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateHashtableGetEnd(FieldBuilder fieldBuilder);
    internal FieldBuilder GeneratePublicMethods(string privateName, string publicName, String[] methods, XmlMapping[] xmlMappings, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateSupportedTypes(Type[] types, TypeBuilder serializerContractTypeBuilder);
    internal string GenerateBaseSerializer(string baseSerializer, string readerClass, string writerClass, CodeIdentifiers classes);
    internal string GenerateTypedSerializer(string readMethod, string writeMethod, XmlMapping mapping, CodeIdentifiers classes, string baseSerializer, string readerClass, string writerClass);
    private FieldBuilder GenerateTypedSerializers(Dictionary`2<string, string> serializers, TypeBuilder serializerContractTypeBuilder);
    private void GenerateGetSerializer(Dictionary`2<string, string> serializers, XmlMapping[] xmlMappings, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateSerializerContract(string className, XmlMapping[] xmlMappings, Type[] types, string readerType, String[] readMethods, string writerType, String[] writerMethods, Dictionary`2<string, string> serializers);
    internal static bool IsWildcard(SpecialMapping mapping);
    internal void ILGenLoad(string source);
    internal void ILGenLoad(string source, Type type);
}
internal class System.Xml.Serialization.XmlSerializationPrimitiveReader : XmlSerializationReader {
    private string _id4_boolean;
    private string _id14_unsignedInt;
    private string _id15_unsignedLong;
    private string _id7_float;
    private string _id10_dateTime;
    private string _id6_long;
    private string _id9_decimal;
    private string _id8_double;
    private string _id17_guid;
    private string _id19_TimeSpan;
    private string _id2_Item;
    private string _id13_unsignedShort;
    private string _id18_char;
    private string _id3_int;
    private string _id12_byte;
    private string _id16_base64Binary;
    private string _id11_unsignedByte;
    private string _id5_short;
    private string _id1_string;
    private string _id1_QName;
    internal object Read_string();
    internal object Read_int();
    internal object Read_boolean();
    internal object Read_short();
    internal object Read_long();
    internal object Read_float();
    internal object Read_double();
    internal object Read_decimal();
    internal object Read_dateTime();
    internal object Read_unsignedByte();
    internal object Read_byte();
    internal object Read_unsignedShort();
    internal object Read_unsignedInt();
    internal object Read_unsignedLong();
    internal object Read_base64Binary();
    internal object Read_guid();
    internal object Read_TimeSpan();
    internal object Read_char();
    internal object Read_QName();
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class System.Xml.Serialization.XmlSerializationPrimitiveWriter : XmlSerializationWriter {
    internal void Write_string(object o);
    internal void Write_int(object o);
    internal void Write_boolean(object o);
    internal void Write_short(object o);
    internal void Write_long(object o);
    internal void Write_float(object o);
    internal void Write_double(object o);
    internal void Write_decimal(object o);
    internal void Write_dateTime(object o);
    internal void Write_unsignedByte(object o);
    internal void Write_byte(object o);
    internal void Write_unsignedShort(object o);
    internal void Write_unsignedInt(object o);
    internal void Write_unsignedLong(object o);
    internal void Write_base64Binary(object o);
    internal void Write_guid(object o);
    internal void Write_TimeSpan(object o);
    internal void Write_char(object o);
    internal void Write_QName(object o);
    protected virtual void InitCallbacks();
}
public class System.Xml.Serialization.XmlSerializationReadCallback : MulticastDelegate {
    public XmlSerializationReadCallback(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationReader : XmlSerializationGeneratedCode {
    private XmlReader _r;
    private XmlCountingReader _countingReader;
    private XmlDocument _d;
    private Hashtable _callbacks;
    private Hashtable _types;
    private Hashtable _typesReverse;
    private XmlDeserializationEvents _events;
    private Hashtable _targets;
    private Hashtable _referencedTargets;
    private ArrayList _targetsWithoutIds;
    private ArrayList _fixups;
    private ArrayList _collectionFixups;
    private bool _soap12;
    private bool _isReturnValue;
    private bool _decodeName;
    private string _schemaNsID;
    private string _schemaNs1999ID;
    private string _schemaNs2000ID;
    private string _schemaNonXsdTypesNsID;
    private string _instanceNsID;
    private string _instanceNs2000ID;
    private string _instanceNs1999ID;
    private string _soapNsID;
    private string _soap12NsID;
    private string _schemaID;
    private string _wsdlNsID;
    private string _wsdlArrayTypeID;
    private string _nullID;
    private string _nilID;
    private string _typeID;
    private string _arrayTypeID;
    private string _itemTypeID;
    private string _arraySizeID;
    private string _arrayID;
    private string _urTypeID;
    private string _stringID;
    private string _intID;
    private string _booleanID;
    private string _shortID;
    private string _longID;
    private string _floatID;
    private string _doubleID;
    private string _decimalID;
    private string _dateTimeID;
    private string _qnameID;
    private string _dateID;
    private string _timeID;
    private string _hexBinaryID;
    private string _base64BinaryID;
    private string _base64ID;
    private string _unsignedByteID;
    private string _byteID;
    private string _unsignedShortID;
    private string _unsignedIntID;
    private string _unsignedLongID;
    private string _oldDecimalID;
    private string _oldTimeInstantID;
    private string _anyURIID;
    private string _durationID;
    private string _ENTITYID;
    private string _ENTITIESID;
    private string _gDayID;
    private string _gMonthID;
    private string _gMonthDayID;
    private string _gYearID;
    private string _gYearMonthID;
    private string _IDID;
    private string _IDREFID;
    private string _IDREFSID;
    private string _integerID;
    private string _languageID;
    private string _nameID;
    private string _NCNameID;
    private string _NMTOKENID;
    private string _NMTOKENSID;
    private string _negativeIntegerID;
    private string _nonPositiveIntegerID;
    private string _nonNegativeIntegerID;
    private string _normalizedStringID;
    private string _NOTATIONID;
    private string _positiveIntegerID;
    private string _tokenID;
    private string _charID;
    private string _guidID;
    private string _timeSpanID;
    private static bool s_checkDeserializeAdvances;
    private static UInt32 s_isTextualNodeBitmap;
    protected bool DecodeName { get; protected set; }
    protected XmlReader Reader { get; }
    protected int ReaderCount { get; }
    protected XmlDocument Document { get; }
    protected bool IsReturnValue { get; protected set; }
    private static XmlSerializationReader();
    protected abstract virtual void InitIDs();
    internal void Init(XmlReader r, XmlDeserializationEvents events, string encodingStyle, TempAssembly tempAssembly);
    protected bool get_DecodeName();
    protected void set_DecodeName(bool value);
    protected XmlReader get_Reader();
    protected int get_ReaderCount();
    protected XmlDocument get_Document();
    protected static Assembly ResolveDynamicAssembly(string assemblyFullName);
    private void InitPrimitiveIDs();
    protected XmlQualifiedName GetXsiType();
    private Type GetPrimitiveType(XmlQualifiedName typeName, bool throwOnUnknown);
    private bool IsPrimitiveNamespace(string ns);
    private string ReadStringValue();
    private XmlQualifiedName ReadXmlQualifiedName();
    private Byte[] ReadByteArray(bool isBase64);
    protected object ReadTypedPrimitive(XmlQualifiedName type);
    private object ReadTypedPrimitive(XmlQualifiedName type, bool elementCanBeType);
    protected object ReadTypedNull(XmlQualifiedName type);
    protected bool IsXmlnsAttribute(string name);
    protected void ParseWsdlArrayType(XmlAttribute attr);
    protected bool get_IsReturnValue();
    protected void set_IsReturnValue(bool value);
    protected bool ReadNull();
    protected bool GetNullAttr();
    protected string ReadNullableString();
    protected XmlQualifiedName ReadNullableQualifiedName();
    protected XmlQualifiedName ReadElementQualifiedName();
    protected XmlDocument ReadXmlDocument(bool wrapped);
    protected string CollapseWhitespace(string value);
    protected XmlNode ReadXmlNode(bool wrapped);
    protected static Byte[] ToByteArrayBase64(string value);
    protected Byte[] ToByteArrayBase64(bool isNull);
    protected static Byte[] ToByteArrayHex(string value);
    protected Byte[] ToByteArrayHex(bool isNull);
    protected int GetArrayLength(string name, string ns);
    private SoapArrayInfo ParseArrayType(string value);
    private SoapArrayInfo ParseSoap12ArrayType(string itemType, string arraySize);
    protected static DateTime ToDateTime(string value);
    protected static DateTime ToDate(string value);
    protected static DateTime ToTime(string value);
    protected static char ToChar(string value);
    protected static long ToEnum(string value, Hashtable h, string typeName);
    protected static string ToXmlName(string value);
    protected static string ToXmlNCName(string value);
    protected static string ToXmlNmToken(string value);
    protected static string ToXmlNmTokens(string value);
    protected XmlQualifiedName ToXmlQualifiedName(string value);
    internal XmlQualifiedName ToXmlQualifiedName(string value, bool decodeName);
    protected void UnknownAttribute(object o, XmlAttribute attr);
    protected void UnknownAttribute(object o, XmlAttribute attr, string qnames);
    protected void UnknownElement(object o, XmlElement elem);
    protected void UnknownElement(object o, XmlElement elem, string qnames);
    protected void UnknownNode(object o);
    protected void UnknownNode(object o, string qnames);
    private void UnknownNode(XmlNode unknownNode, object o, string qnames);
    private void GetCurrentPosition(Int32& lineNumber, Int32& linePosition);
    protected void UnreferencedObject(string id, object o);
    private string CurrentTag();
    protected Exception CreateUnknownTypeException(XmlQualifiedName type);
    protected Exception CreateReadOnlyCollectionException(string name);
    protected Exception CreateAbstractTypeException(string name, string ns);
    protected Exception CreateInaccessibleConstructorException(string typeName);
    protected Exception CreateCtorHasSecurityException(string typeName);
    protected Exception CreateUnknownNodeException();
    protected Exception CreateUnknownConstantException(string value, Type enumType);
    protected Exception CreateInvalidCastException(Type type, object value);
    protected Exception CreateInvalidCastException(Type type, object value, string id);
    protected Exception CreateBadDerivationException(string xsdDerived, string nsDerived, string xsdBase, string nsBase, string clrDerived, string clrBase);
    protected Exception CreateMissingIXmlSerializableType(string name, string ns, string clrType);
    protected Array EnsureArrayIndex(Array a, int index, Type elementType);
    protected Array ShrinkArray(Array a, int length, Type elementType, bool isNullable);
    private static bool IsTextualNode(XmlNodeType nodeType);
    protected string ReadString(string value);
    protected string ReadString(string value, bool trim);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable, bool wrappedAny);
    protected bool ReadReference(String& fixupReference);
    protected void AddTarget(string id, object o);
    protected void AddFixup(Fixup fixup);
    protected void AddFixup(CollectionFixup fixup);
    protected object GetTarget(string id);
    protected void Referenced(object o);
    private void HandleUnreferencedObjects();
    private void DoFixups();
    protected void FixupArrayRefs(object fixup);
    private object ReadArray(string typeName, string typeNs);
    protected abstract virtual void InitCallbacks();
    protected void ReadReferencedElements();
    protected object ReadReferencedElement();
    protected object ReadReferencedElement(string name, string ns);
    protected object ReadReferencingElement(String& fixupReference);
    protected object ReadReferencingElement(string name, string ns, String& fixupReference);
    protected object ReadReferencingElement(string name, string ns, bool elementCanBeType, String& fixupReference);
    internal void EnsureCallbackTables();
    protected void AddReadCallback(string name, string ns, Type type, XmlSerializationReadCallback read);
    protected void ReadEndElement();
    private object ReadXmlNodes(bool elementCanBeType);
    protected void CheckReaderCount(Int32& whileIterations, Int32& readerCount);
}
internal class System.Xml.Serialization.XmlSerializationReaderCodeGen : XmlSerializationCodeGen {
    private Hashtable _idNames;
    private Hashtable _enums;
    private Hashtable _createMethods;
    private int _nextCreateMethodNumber;
    private int _nextIdNumber;
    private int _nextWhileLoopIndex;
    internal Hashtable Enums { get; }
    internal XmlSerializationReaderCodeGen(IndentedWriter writer, TypeScope[] scopes, string access, string className);
    internal Hashtable get_Enums();
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateEnd();
    internal void GenerateEnd(String[] methods, XmlMapping[] xmlMappings, Type[] types);
    internal string GenerateElement(XmlMapping xmlMapping);
    private void WriteIsStartTag(string name, string ns);
    private void WriteUnknownNode(string func, string node, ElementAccessor e, bool anyIfs);
    private void GenerateInitCallbacksMethod();
    private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping);
    private string GetChoiceIdentifierSource(MemberMapping[] mappings, MemberMapping member);
    private string GetChoiceIdentifierSource(MemberMapping mapping, string parent, TypeDesc parentTypeDesc);
    private string GenerateLiteralMembersElement(XmlMembersMapping xmlMembersMapping);
    private void InitializeValueTypes(string arrayName, MemberMapping[] mappings);
    private string GenerateEncodedMembersElement(XmlMembersMapping xmlMembersMapping);
    private void WriteCreateCollection(TypeDesc td, string source);
    private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping);
    private string NextMethodName(string name);
    private string NextIdName(string name);
    private void WritePrimitive(TypeMapping mapping, string source);
    private string MakeUnique(EnumMapping mapping, string name);
    private string WriteHashtable(EnumMapping mapping, string typeName);
    private void WriteEnumMethod(EnumMapping mapping);
    private void WriteDerivedTypes(StructMapping mapping, bool isTypedReturn, string returnTypeName);
    private void WriteEnumAndArrayTypes();
    private void WriteNullableMethod(NullableMapping nullableMapping);
    private void WriteStructMethod(StructMapping structMapping);
    private void WriteLiteralStructMethod(StructMapping structMapping);
    private void WriteEncodedStructMethod(StructMapping structMapping);
    private void WriteFixupMethod(string fixupMethodName, Member[] members, string typeName, bool useReflection, bool typed, string source);
    private void WriteAddCollectionFixup(TypeDesc typeDesc, bool readOnly, string memberSource, string targetSource);
    private void WriteCreateCollectionMethod(CreateCollectionInfo c);
    private void WriteQNameEqual(string source, string name, string ns);
    private void WriteXmlNodeEqual(string source, string name, string ns);
    private void WriteID(string name);
    private void WriteAttributes(Member[] members, Member anyAttribute, string elseCall, string firstParam);
    private void WriteAttribute(Member member);
    private bool WriteMemberFixupBegin(Member[] members, string fixupMethodName, string source);
    private void WriteMemberBegin(Member[] members);
    private string ExpectedElements(Member[] members);
    private void WriteMemberElements(Member[] members, string elementElseString, string elseString, Member anyElement, Member anyText, string checkTypeHrefsSource);
    private void WriteMemberText(Member anyText, string elseString);
    private void WriteText(Member member);
    private void WriteMemberElementsCheckType(string checkTypeHrefsSource);
    private void WriteMemberElementsElse(Member anyElement, string elementElseString);
    private bool IsSequence(Member[] members);
    private void WriteMemberElementsIf(Member[] members, Member anyElement, string elementElseString, string checkTypeSource);
    private string GetArraySource(TypeDesc typeDesc, string arrayName);
    private string GetArraySource(TypeDesc typeDesc, string arrayName, bool multiRef);
    private void WriteMemberEnd(Member[] members);
    private void WriteMemberEnd(Member[] members, bool soapRefs);
    private void WriteSourceBeginTyped(string source, TypeDesc typeDesc);
    private void WriteSourceBegin(string source);
    private void WriteSourceEnd(string source);
    private void WriteArray(string source, string arrayName, ArrayMapping arrayMapping, bool readOnly, bool isNullable, int fixupIndex);
    private void WriteElement(string source, string arrayName, string choiceSource, ElementAccessor element, ChoiceIdentifierAccessor choice, string checkSpecified, bool checkForNull, bool readOnly, int fixupIndex, int elementIndex);
    private void WriteDerivedSerializable(SerializableMapping head, SerializableMapping mapping, string source, bool isWrappedAny);
    private int WriteWhileNotLoopStart();
    private void WriteWhileLoopEnd(int loopIndex);
    private int WriteWhileLoopStartCheck();
    private void WriteWhileLoopEndCheck(int loopIndex);
    private void WriteParamsRead(int length);
    private void WriteReadNonRoots();
    private void WriteBooleanValue(bool value);
    private void WriteInitCheckTypeHrefList(string source);
    private void WriteHandleHrefList(Member[] members, string listSource);
    private void WriteIfNotSoapRoot(string source);
    private void WriteCreateMapping(TypeMapping mapping, string local);
    private void WriteCatchException(Type exceptionType);
    private void WriteCatchCastException(TypeDesc typeDesc, string source, string id);
    private void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc);
    private void WriteCreateInstance(string escapedName, string source, bool useReflection, bool ctorInaccessible);
    private void WriteLocalDecl(string typeFullName, string variableName, string initValue, bool useReflection);
}
internal class System.Xml.Serialization.XmlSerializationReaderILGen : XmlSerializationILGen {
    private Dictionary`2<string, string> _idNames;
    private Dictionary`2<string, FieldBuilder> _idNameFields;
    private Dictionary`2<string, EnumMapping> _enums;
    private int _nextIdNumber;
    private int _nextWhileLoopIndex;
    internal Dictionary`2<string, EnumMapping> Enums { get; }
    internal XmlSerializationReaderILGen(TypeScope[] scopes, string access, string className);
    internal Dictionary`2<string, EnumMapping> get_Enums();
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateEnd(String[] methods, XmlMapping[] xmlMappings, Type[] types);
    internal string GenerateElement(XmlMapping xmlMapping);
    private void WriteIsStartTag(string name, string ns);
    private void WriteUnknownNode(string func, string node, ElementAccessor e, bool anyIfs);
    private void GenerateInitCallbacksMethod();
    private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping);
    private string GetChoiceIdentifierSource(MemberMapping[] mappings, MemberMapping member);
    private string GetChoiceIdentifierSource(MemberMapping mapping, string parent, TypeDesc parentTypeDesc);
    private string GenerateLiteralMembersElement(XmlMembersMapping xmlMembersMapping);
    private void InitializeValueTypes(string arrayName, MemberMapping[] mappings);
    private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping);
    private string NextMethodName(string name);
    private string NextIdName(string name);
    private void WritePrimitive(TypeMapping mapping, string source);
    private string MakeUnique(EnumMapping mapping, string name);
    private string WriteHashtable(EnumMapping mapping, string typeName, MethodBuilder& get_TableName);
    private void WriteEnumMethod(EnumMapping mapping);
    private void WriteDerivedTypes(StructMapping mapping, bool isTypedReturn, string returnTypeName);
    private void WriteEnumAndArrayTypes();
    private void WriteNullableMethod(NullableMapping nullableMapping);
    private void WriteStructMethod(StructMapping structMapping);
    private void WriteLiteralStructMethod(StructMapping structMapping);
    private void WriteQNameEqual(string source, string name, string ns);
    private void WriteXmlNodeEqual(string source, string name, string ns);
    private void WriteXmlNodeEqual(string source, string name, string ns, bool doAndIf);
    private void WriteID(string name);
    private void WriteAttributes(Member[] members, Member anyAttribute, string elseCall, LocalBuilder firstParam);
    private void WriteAttribute(Member member);
    private void WriteMemberBegin(Member[] members);
    private string ExpectedElements(Member[] members);
    private void WriteMemberElements(Member[] members, string elementElseString, string elseString, Member anyElement, Member anyText);
    private void WriteMemberText(Member anyText, string elseString);
    private void WriteText(Member member);
    private void WriteMemberElementsElse(Member anyElement, string elementElseString);
    private bool IsSequence(Member[] members);
    private void WriteMemberElementsIf(Member[] members, Member anyElement, string elementElseString);
    private string GetArraySource(TypeDesc typeDesc, string arrayName);
    private string GetArraySource(TypeDesc typeDesc, string arrayName, bool multiRef);
    private void WriteMemberEnd(Member[] members);
    private void WriteMemberEnd(Member[] members, bool soapRefs);
    private void WriteSourceBeginTyped(string source, TypeDesc typeDesc);
    private void WriteSourceBegin(string source);
    private void WriteSourceEnd(string source, Type elementType);
    private void WriteSourceEnd(string source, Type elementType, Type stackType);
    private void WriteArray(string source, string arrayName, ArrayMapping arrayMapping, bool readOnly, bool isNullable, int fixupIndex, int elementIndex);
    private void WriteElement(string source, string arrayName, string choiceSource, ElementAccessor element, ChoiceIdentifierAccessor choice, string checkSpecified, bool checkForNull, bool readOnly, int fixupIndex, int elementIndex);
    private void WriteDerivedSerializable(SerializableMapping head, SerializableMapping mapping, string source, bool isWrappedAny);
    private int WriteWhileNotLoopStart();
    private void WriteWhileLoopEnd(int loopIndex);
    private int WriteWhileLoopStartCheck();
    private void WriteWhileLoopEndCheck(int loopIndex);
    private void WriteParamsRead(int length);
    private void WriteCreateMapping(TypeMapping mapping, string local);
    private void WriteCatchException(Type exceptionType);
    private void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc);
    private void WriteCreateInstance(string source, bool ctorInaccessible, Type type);
    private void WriteLocalDecl(string variableName, SourceInfo initValue);
    private void ILGenElseString(string elseString);
    private void ILGenParamsReadSource(string paramsReadSource);
    private void ILGenParamsReadSource(string paramsReadSource, bool value);
    private void ILGenElementElseString(string elementElseString);
    private void ILGenSet(string source, object value);
}
public class System.Xml.Serialization.XmlSerializationWriteCallback : MulticastDelegate {
    public XmlSerializationWriteCallback(object object, IntPtr method);
    public virtual void Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationWriter : XmlSerializationGeneratedCode {
    private XmlWriter _w;
    private XmlSerializerNamespaces _namespaces;
    private int _tempNamespacePrefix;
    private HashSet`1<int> _usedPrefixes;
    private Hashtable _references;
    private string _idBase;
    private int _nextId;
    private Hashtable _typeEntries;
    private ArrayList _referencesToWrite;
    private Hashtable _objectsInUse;
    private string _aliasBase;
    private bool _soap12;
    private bool _escapeName;
    protected bool EscapeName { get; protected set; }
    protected XmlWriter Writer { get; protected set; }
    protected ArrayList Namespaces { get; protected set; }
    internal void Init(XmlWriter w, XmlSerializerNamespaces namespaces, string encodingStyle, string idBase, TempAssembly tempAssembly);
    protected bool get_EscapeName();
    protected void set_EscapeName(bool value);
    protected XmlWriter get_Writer();
    protected void set_Writer(XmlWriter value);
    protected ArrayList get_Namespaces();
    protected void set_Namespaces(ArrayList value);
    protected static Byte[] FromByteArrayBase64(Byte[] value);
    protected static Assembly ResolveDynamicAssembly(string assemblyFullName);
    protected static string FromByteArrayHex(Byte[] value);
    protected static string FromDateTime(DateTime value);
    protected static string FromDate(DateTime value);
    protected static string FromTime(DateTime value);
    protected static string FromChar(char value);
    protected static string FromEnum(long value, String[] values, Int64[] ids);
    protected static string FromEnum(long value, String[] values, Int64[] ids, string typeName);
    protected static string FromXmlName(string name);
    protected static string FromXmlNCName(string ncName);
    protected static string FromXmlNmToken(string nmToken);
    protected static string FromXmlNmTokens(string nmTokens);
    protected void WriteXsiType(string name, string ns);
    private XmlQualifiedName GetPrimitiveTypeName(Type type);
    private XmlQualifiedName GetPrimitiveTypeName(Type type, bool throwIfUnknown);
    internal static XmlQualifiedName GetPrimitiveTypeNameInternal(Type type);
    protected void WriteTypedPrimitive(string name, string ns, object o, bool xsiType);
    private string GetQualifiedName(string name, string ns);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName, bool ignoreEmpty);
    protected void WriteStartElement(string name);
    protected void WriteStartElement(string name, string ns);
    protected void WriteStartElement(string name, string ns, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed, XmlSerializerNamespaces xmlns);
    private HashSet`1<int> ListUsedPrefixes(Dictionary`2<string, string> nsList, string prefix);
    protected void WriteNullTagEncoded(string name);
    protected void WriteNullTagEncoded(string name, string ns);
    protected void WriteNullTagLiteral(string name);
    protected void WriteNullTagLiteral(string name, string ns);
    protected void WriteEmptyTag(string name);
    protected void WriteEmptyTag(string name, string ns);
    protected void WriteEndElement();
    protected void WriteEndElement(object o);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable, bool wrapped);
    protected void WriteNullableStringEncoded(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringLiteral(string name, string ns, string value);
    protected void WriteNullableStringEncodedRaw(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringEncodedRaw(string name, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteNullableStringLiteralRaw(string name, string ns, string value);
    protected void WriteNullableStringLiteralRaw(string name, string ns, Byte[] value);
    protected void WriteNullableQualifiedNameEncoded(string name, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteNullableQualifiedNameLiteral(string name, string ns, XmlQualifiedName value);
    protected void WriteElementEncoded(XmlNode node, string name, string ns, bool isNullable, bool any);
    protected void WriteElementLiteral(XmlNode node, string name, string ns, bool isNullable, bool any);
    private void WriteElement(XmlNode node, string name, string ns, bool isNullable, bool any);
    protected Exception CreateUnknownTypeException(object o);
    protected Exception CreateUnknownTypeException(Type type);
    protected Exception CreateMismatchChoiceException(string value, string elementName, string enumValue);
    protected Exception CreateUnknownAnyElementException(string name, string ns);
    protected Exception CreateInvalidChoiceIdentifierValueException(string type, string identifier);
    protected Exception CreateChoiceIdentifierValueException(string value, string identifier, string name, string ns);
    protected Exception CreateInvalidEnumValueException(object value, string typeName);
    protected Exception CreateInvalidAnyTypeException(object o);
    protected Exception CreateInvalidAnyTypeException(Type type);
    protected void WriteReferencingElement(string n, string ns, object o);
    protected void WriteReferencingElement(string n, string ns, object o, bool isNullable);
    private bool IsIdDefined(object o);
    private string GetId(object o, bool addToReferencesList);
    protected void WriteId(object o);
    private void WriteId(object o, bool addToReferencesList);
    protected void WriteXmlAttribute(XmlNode node);
    protected void WriteXmlAttribute(XmlNode node, object container);
    protected void WriteAttribute(string localName, string ns, string value);
    protected void WriteAttribute(string localName, string ns, Byte[] value);
    protected void WriteAttribute(string localName, string value);
    protected void WriteAttribute(string localName, Byte[] value);
    protected void WriteAttribute(string prefix, string localName, string ns, string value);
    protected void WriteValue(string value);
    protected void WriteValue(Byte[] value);
    protected void WriteStartDocument();
    protected void WriteElementString(string localName, string value);
    protected void WriteElementString(string localName, string ns, string value);
    protected void WriteElementString(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteElementString(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string value);
    protected void WriteElementStringRaw(string localName, Byte[] value);
    protected void WriteElementStringRaw(string localName, string ns, string value);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value);
    protected void WriteElementStringRaw(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteRpcResult(string name, string ns);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void AddWriteCallback(Type type, string typeName, string typeNs, XmlSerializationWriteCallback callback);
    private void WriteArray(string name, string ns, object o, Type type);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference, bool isNullable);
    private void WriteReferencedElement(object o, Type ambientType);
    private void WriteReferencedElement(string name, string ns, object o, Type ambientType);
    private TypeEntry GetTypeEntry(Type t);
    protected abstract virtual void InitCallbacks();
    protected void WriteReferencedElements();
    protected void TopLevelElement();
    protected void WriteNamespaceDeclarations(XmlSerializerNamespaces xmlns);
    private string NextPrefix();
}
internal class System.Xml.Serialization.XmlSerializationWriterCodeGen : XmlSerializationCodeGen {
    internal XmlSerializationWriterCodeGen(IndentedWriter writer, TypeScope[] scopes, string access, string className);
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateEnd();
    internal string GenerateElement(XmlMapping xmlMapping);
    private void GenerateInitCallbacksMethod();
    private void WriteQualifiedNameElement(string name, string ns, object defaultValue, string source, bool nullable, bool IsSoap, TypeMapping mapping);
    private void WriteEnumValue(EnumMapping mapping, string source);
    private void WritePrimitiveValue(TypeDesc typeDesc, string source, bool isElement);
    private void WritePrimitive(string method, string name, string ns, object defaultValue, string source, TypeMapping mapping, bool writeXsiType, bool isElement, bool isNullable);
    private void WriteTag(string methodName, string name, string ns);
    private void WriteTag(string methodName, string name, string ns, bool writePrefixed);
    private void WriteStartElement(string name, string ns, bool writePrefixed);
    private void WriteEndElement();
    private void WriteEndElement(string source);
    private void WriteEncodedNullTag(string name, string ns);
    private void WriteLiteralNullTag(string name, string ns);
    private void WriteEmptyTag(string name, string ns);
    private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping);
    private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping);
    private string NextMethodName(string name);
    private void WriteEnumMethod(EnumMapping mapping);
    private void WriteDerivedTypes(StructMapping mapping);
    private void WriteEnumAndArrayTypes();
    private void WriteStructMethod(StructMapping mapping);
    private bool CanOptimizeWriteListSequence(TypeDesc listElementTypeDesc);
    private void WriteMember(string source, AttributeAccessor attribute, TypeDesc memberTypeDesc, string parent);
    private void WriteAttribute(string source, AttributeAccessor attribute, string parent);
    private void WriteMember(string source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, bool writeAccessors);
    private void WriteArray(string source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc);
    private void WriteArrayItems(ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc, string arrayName, string choiceName);
    private void WriteElements(string source, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, string arrayName, bool writeAccessors, bool isNullable);
    private void WriteElements(string source, string enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, string arrayName, bool writeAccessors, bool isNullable);
    private void WriteText(string source, TextAccessor text);
    private void WriteElement(string source, ElementAccessor element, string arrayName, bool writeAccessor);
    private void WriteElementCall(string func, Type cast, string source, string name, string ns, bool isNullable, bool isAny);
    private void WriteCheckDefault(TypeMapping mapping, string source, object value, bool isNullable);
    private void WriteChoiceTypeCheck(string source, string fullTypeName, bool useReflection, ChoiceIdentifierAccessor choice, string enumName, TypeDesc typeDesc);
    private void WriteNullCheckBegin(string source, ElementAccessor element);
    private void WriteValue(object value);
    private void WriteNamespaces(string source);
    private int FindXmlnsIndex(MemberMapping[] members);
    private void WriteExtraMembers(string loopStartSource, string loopEndSource);
    private void WriteLocalDecl(string typeName, string variableName, string initValue, bool useReflection);
    private void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc);
    private void WriteTypeCompare(string variable, string escapedTypeName, bool useReflection);
    private void WriteInstanceOf(string source, string escapedTypeName, bool useReflection);
    private void WriteArrayTypeCompare(string variable, string escapedTypeName, string elementTypeName, bool useReflection);
    private void WriteEnumCase(string fullTypeName, ConstantMapping c, bool useReflection);
    private string FindChoiceEnumValue(ElementAccessor element, EnumMapping choiceMapping, bool useReflection);
}
internal class System.Xml.Serialization.XmlSerializationWriterILGen : XmlSerializationILGen {
    internal XmlSerializationWriterILGen(TypeScope[] scopes, string access, string className);
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal Type GenerateEnd();
    internal string GenerateElement(XmlMapping xmlMapping);
    private void GenerateInitCallbacksMethod();
    private void WriteQualifiedNameElement(string name, string ns, object defaultValue, SourceInfo source, bool nullable, TypeMapping mapping);
    private void WriteEnumValue(EnumMapping mapping, SourceInfo source, Type& returnType);
    private void WritePrimitiveValue(TypeDesc typeDesc, SourceInfo source, Type& returnType);
    private void WritePrimitive(string method, string name, string ns, object defaultValue, SourceInfo source, TypeMapping mapping, bool writeXsiType, bool isElement, bool isNullable);
    private void WriteTag(string methodName, string name, string ns);
    private void WriteTag(string methodName, string name, string ns, bool writePrefixed);
    private void WriteStartElement(string name, string ns, bool writePrefixed);
    private void WriteEndElement();
    private void WriteEndElement(string source);
    private void WriteLiteralNullTag(string name, string ns);
    private void WriteEmptyTag(string name, string ns);
    private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping);
    private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping);
    private string NextMethodName(string name);
    private void WriteEnumMethod(EnumMapping mapping);
    private void WriteDerivedTypes(StructMapping mapping);
    private void WriteEnumAndArrayTypes();
    private void WriteStructMethod(StructMapping mapping);
    private bool CanOptimizeWriteListSequence(TypeDesc listElementTypeDesc);
    private void WriteMember(SourceInfo source, AttributeAccessor attribute, TypeDesc memberTypeDesc, string parent);
    private void WriteAttribute(SourceInfo source, AttributeAccessor attribute, string parent);
    private static object GetConvertedDefaultValue(Type targetType, object rawDefaultValue);
    private void WriteMember(SourceInfo source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, bool writeAccessors);
    private void WriteArray(SourceInfo source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc);
    private void WriteArrayItems(ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc, string arrayName, string choiceName);
    private void WriteElements(SourceInfo source, string enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, string arrayName, bool writeAccessors, bool isNullable);
    private void WriteText(SourceInfo source, TextAccessor text);
    private void WriteElement(SourceInfo source, ElementAccessor element, string arrayName, bool writeAccessor);
    private void WriteElementCall(string func, Type cast, SourceInfo source, string name, string ns, bool isNullable, bool isAny);
    private void WriteCheckDefault(SourceInfo source, object value, bool isNullable);
    private void WriteChoiceTypeCheck(SourceInfo source, string fullTypeName, ChoiceIdentifierAccessor choice, string enumName, TypeDesc typeDesc);
    private void WriteNullCheckBegin(string source, ElementAccessor element);
    private void WriteNamespaces(string source);
    private int FindXmlnsIndex(MemberMapping[] members);
    private void WriteLocalDecl(string variableName, string initValue, Type type);
    private void WriteArrayLocalDecl(string typeName, string variableName, SourceInfo initValue, TypeDesc arrayTypeDesc);
    private void WriteTypeCompare(string variable, Type type);
    private void WriteInstanceOf(SourceInfo source, Type type);
    private void WriteArrayTypeCompare(string variable, Type arrayType);
    private string FindChoiceEnumValue(ElementAccessor element, EnumMapping choiceMapping, Object& eValue);
}
public class System.Xml.Serialization.XmlSerializer : object {
    [CompilerGeneratedAttribute]
private static SerializationMode <Mode>k__BackingField;
    private TempAssembly _tempAssembly;
    private bool _typedSerializer;
    private Type _primitiveType;
    private XmlMapping _mapping;
    private XmlDeserializationEvents _events;
    internal string DefaultNamespace;
    private Type _rootType;
    private bool _isReflectionBasedSerializer;
    private static TempAssemblyCache s_cache;
    private static XmlSerializerNamespaces modreq(System.Runtime.CompilerServices.IsVolatile) s_defaultNamespaces;
    private static Dictionary`2<Type, Dictionary`2<XmlSerializerMappingKey, XmlSerializer>> s_xmlSerializerTable;
    internal static SerializationMode Mode { get; internal set; }
    private static bool ReflectionMethodEnabled { get; }
    private static XmlSerializerNamespaces DefaultNamespaces { get; }
    public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer(Type type, Type[] extraTypes);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer(XmlTypeMapping xmlTypeMapping);
    public XmlSerializer(Type type);
    public XmlSerializer(Type type, string defaultNamespace);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location);
    private static XmlSerializer();
    [CompilerGeneratedAttribute]
internal static SerializationMode get_Mode();
    [CompilerGeneratedAttribute]
internal static void set_Mode(SerializationMode value);
    private static bool get_ReflectionMethodEnabled();
    private static XmlSerializerNamespaces get_DefaultNamespaces();
    private XmlTypeMapping GenerateXmlTypeMapping(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping);
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping, Type type, string defaultNamespace);
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping, Type type, string defaultNamespace, string location);
    public void Serialize(TextWriter textWriter, object o);
    public void Serialize(TextWriter textWriter, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(Stream stream, object o);
    public void Serialize(Stream stream, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(XmlWriter xmlWriter, object o);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
    private void SerializeUsingReflection(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
    private XmlMapping GetMapping();
    public object Deserialize(Stream stream);
    public object Deserialize(TextReader textReader);
    public object Deserialize(XmlReader xmlReader);
    public object Deserialize(XmlReader xmlReader, XmlDeserializationEvents events);
    public object Deserialize(XmlReader xmlReader, string encodingStyle);
    public object Deserialize(XmlReader xmlReader, string encodingStyle, XmlDeserializationEvents events);
    private object DeserializeUsingReflection(XmlReader xmlReader, string encodingStyle, XmlDeserializationEvents events);
    private static bool ShouldUseReflectionBasedSerialization(XmlMapping mapping);
    public virtual bool CanDeserialize(XmlReader xmlReader);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings, Type type);
    private static XmlSerializer[] GetReflectionBasedSerializers(XmlMapping[] mappings, Type type);
    internal static bool GenerateSerializer(Type[] types, XmlMapping[] mappings, Stream stream);
    private static XmlSerializer[] GetSerializersFromCache(XmlMapping[] mappings, Type type);
    public static XmlSerializer[] FromTypes(Type[] types);
    public static string GetXmlSerializerAssemblyName(Type type);
    public static string GetXmlSerializerAssemblyName(Type type, string defaultNamespace);
    public void add_UnknownNode(XmlNodeEventHandler value);
    public void remove_UnknownNode(XmlNodeEventHandler value);
    public void add_UnknownAttribute(XmlAttributeEventHandler value);
    public void remove_UnknownAttribute(XmlAttributeEventHandler value);
    public void add_UnknownElement(XmlElementEventHandler value);
    public void remove_UnknownElement(XmlElementEventHandler value);
    public void add_UnreferencedObject(UnreferencedObjectEventHandler value);
    public void remove_UnreferencedObject(UnreferencedObjectEventHandler value);
    protected virtual XmlSerializationReader CreateReader();
    protected virtual object Deserialize(XmlSerializationReader reader);
    protected virtual XmlSerializationWriter CreateWriter();
    protected virtual void Serialize(object o, XmlSerializationWriter writer);
    internal void SetTempAssembly(TempAssembly tempAssembly, XmlMapping mapping);
    private static XmlTypeMapping GetKnownMapping(Type type, string ns);
    private void SerializePrimitive(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces);
    private object DeserializePrimitive(XmlReader xmlReader, XmlDeserializationEvents events);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.XmlSerializerAssemblyAttribute : Attribute {
    private string _assemblyName;
    private string _codeBase;
    public string CodeBase { get; public set; }
    public string AssemblyName { get; public set; }
    public XmlSerializerAssemblyAttribute(string assemblyName);
    public XmlSerializerAssemblyAttribute(string assemblyName, string codeBase);
    public string get_CodeBase();
    public void set_CodeBase(string value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
}
public class System.Xml.Serialization.XmlSerializerFactory : object {
    private static TempAssemblyCache s_cache;
    private static XmlSerializerFactory();
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer CreateSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer CreateSerializer(Type type, Type[] extraTypes);
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer CreateSerializer(XmlTypeMapping xmlTypeMapping);
    public XmlSerializer CreateSerializer(Type type);
    public XmlSerializer CreateSerializer(Type type, string defaultNamespace);
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location);
}
public abstract class System.Xml.Serialization.XmlSerializerImplementation : object {
    public XmlSerializationReader Reader { get; }
    public XmlSerializationWriter Writer { get; }
    public Hashtable ReadMethods { get; }
    public Hashtable WriteMethods { get; }
    public Hashtable TypedSerializers { get; }
    public virtual XmlSerializationReader get_Reader();
    public virtual XmlSerializationWriter get_Writer();
    public virtual Hashtable get_ReadMethods();
    public virtual Hashtable get_WriteMethods();
    public virtual Hashtable get_TypedSerializers();
    public virtual bool CanSerialize(Type type);
    public virtual XmlSerializer GetSerializer(Type type);
}
public class System.Xml.Serialization.XmlSerializerNamespaces : object {
    private Dictionary`2<string, string> _namespaces;
    public int Count { get; }
    internal ArrayList NamespaceList { get; }
    internal Dictionary`2<string, string> Namespaces { get; internal set; }
    public XmlSerializerNamespaces(XmlSerializerNamespaces namespaces);
    public XmlSerializerNamespaces(XmlQualifiedName[] namespaces);
    public void Add(string prefix, string ns);
    internal void AddInternal(string prefix, string ns);
    public XmlQualifiedName[] ToArray();
    public int get_Count();
    internal ArrayList get_NamespaceList();
    internal Dictionary`2<string, string> get_Namespaces();
    internal void set_Namespaces(Dictionary`2<string, string> value);
    internal string LookupPrefix(string ns);
}
[AttributeUsageAttribute("1")]
public class System.Xml.Serialization.XmlSerializerVersionAttribute : Attribute {
    private string _mvid;
    private string _serializerVersion;
    private string _ns;
    private Type _type;
    public string ParentAssemblyId { get; public set; }
    public string Version { get; public set; }
    public string Namespace { get; public set; }
    public Type Type { get; public set; }
    public XmlSerializerVersionAttribute(Type type);
    public string get_ParentAssemblyId();
    public void set_ParentAssemblyId(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public Type get_Type();
    public void set_Type(Type value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlTextAttribute : Attribute {
    private Type _type;
    private string _dataType;
    public Type Type { get; public set; }
    public string DataType { get; public set; }
    public XmlTextAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_DataType();
    public void set_DataType(string value);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.XmlTypeAttribute : Attribute {
    private bool _includeInSchema;
    private bool _anonymousType;
    private string _ns;
    private string _typeName;
    public bool AnonymousType { get; public set; }
    public bool IncludeInSchema { get; public set; }
    public string TypeName { get; public set; }
    public string Namespace { get; public set; }
    public XmlTypeAttribute(string typeName);
    public bool get_AnonymousType();
    public void set_AnonymousType(bool value);
    public bool get_IncludeInSchema();
    public void set_IncludeInSchema(bool value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class System.Xml.Serialization.XmlTypeMapping : XmlMapping {
    internal TypeMapping Mapping { get; }
    public string TypeName { get; }
    public string TypeFullName { get; }
    public string XsdTypeName { get; }
    public string XsdTypeNamespace { get; }
    internal XmlTypeMapping(TypeScope scope, ElementAccessor accessor);
    internal TypeMapping get_Mapping();
    public string get_TypeName();
    public string get_TypeFullName();
    public string get_XsdTypeName();
    public string get_XsdTypeNamespace();
}
internal enum System.Xml.TernaryTreeByte : Enum {
    public int value__;
    public static TernaryTreeByte characterByte;
    public static TernaryTreeByte leftTree;
    public static TernaryTreeByte rightTree;
    public static TernaryTreeByte data;
}
internal class System.Xml.TernaryTreeReadOnly : object {
    private Byte[] _nodeBuffer;
    public TernaryTreeReadOnly(Byte[] nodeBuffer);
    public byte FindCaseInsensitiveString(string stringToFind);
}
internal class System.Xml.TextEncodedRawTextWriter : XmlEncodedRawTextWriter {
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public TextEncodedRawTextWriter(TextWriter writer, XmlWriterSettings settings);
    public TextEncodedRawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string textBlock);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
}
internal class System.Xml.TextUtf8RawTextWriter : XmlUtf8RawTextWriter {
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public TextUtf8RawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string textBlock);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
}
internal enum System.Xml.TriState : Enum {
    public int value__;
    public static TriState Unknown;
    public static TriState False;
    public static TriState True;
}
internal abstract class System.Xml.Ucs4Decoder : Decoder {
    internal Byte[] lastBytes;
    internal int lastBytesCount;
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    internal abstract virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
    internal void Ucs4ToUTF16(UInt32 code, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder1234 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder2143 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder3412 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder4321 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Encoding : Encoding {
    internal Ucs4Decoder ucs4Decoder;
    public string WebName { get; }
    public int CodePage { get; }
    internal static Encoding UCS4_Littleendian { get; }
    internal static Encoding UCS4_Bigendian { get; }
    internal static Encoding UCS4_2143 { get; }
    internal static Encoding UCS4_3412 { get; }
    public virtual string get_WebName();
    public virtual Decoder GetDecoder();
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(Char[] chars);
    public virtual Byte[] GetBytes(string s);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual int get_CodePage();
    public virtual int GetCharCount(Byte[] bytes);
    public virtual Encoder GetEncoder();
    internal static Encoding get_UCS4_Littleendian();
    internal static Encoding get_UCS4_Bigendian();
    internal static Encoding get_UCS4_2143();
    internal static Encoding get_UCS4_3412();
}
internal class System.Xml.Ucs4Encoding1234 : Ucs4Encoding {
    private static Byte[] s_preamble;
    public string EncodingName { get; }
    public ReadOnlySpan`1<byte> Preamble { get; }
    private static Ucs4Encoding1234();
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
    public virtual ReadOnlySpan`1<byte> get_Preamble();
}
internal class System.Xml.Ucs4Encoding2143 : Ucs4Encoding {
    private static Byte[] s_preamble;
    public string EncodingName { get; }
    public ReadOnlySpan`1<byte> Preamble { get; }
    private static Ucs4Encoding2143();
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
    public virtual ReadOnlySpan`1<byte> get_Preamble();
}
internal class System.Xml.Ucs4Encoding3412 : Ucs4Encoding {
    private static Byte[] s_preamble;
    public string EncodingName { get; }
    public ReadOnlySpan`1<byte> Preamble { get; }
    private static Ucs4Encoding3412();
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
    public virtual ReadOnlySpan`1<byte> get_Preamble();
}
internal class System.Xml.Ucs4Encoding4321 : Ucs4Encoding {
    private static Byte[] s_preamble;
    public string EncodingName { get; }
    public ReadOnlySpan`1<byte> Preamble { get; }
    private static Ucs4Encoding4321();
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
    public virtual ReadOnlySpan`1<byte> get_Preamble();
}
internal class System.Xml.UTF16Decoder : Decoder {
    private bool _bigEndian;
    private int _lastByte;
    private static int CharSize;
    public UTF16Decoder(bool bigEndian);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count, bool flush);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
}
internal static class System.Xml.ValidateNames : object {
    private static XmlCharType s_xmlCharType;
    private static ValidateNames();
    internal static int ParseNmtoken(string s, int offset);
    internal static int ParseNmtokenNoNamespaces(string s, int offset);
    internal static bool IsNmtokenNoNamespaces(string s);
    internal static int ParseNameNoNamespaces(string s, int offset);
    internal static bool IsNameNoNamespaces(string s);
    internal static int ParseNCName(string s, int offset);
    internal static int ParseNCName(string s);
    internal static string ParseNCNameThrow(string s);
    private static bool ParseNCNameInternal(string s, bool throwOnError);
    internal static int ParseQName(string s, int offset, Int32& colonOffset);
    internal static void ParseQNameThrow(string s, String& prefix, String& localName);
    internal static void ParseNameTestThrow(string s, String& prefix, String& localName);
    internal static void ThrowInvalidName(string s, int offsetStartChar, int offsetBadChar);
    internal static Exception GetInvalidNameException(string s, int offsetStartChar, int offsetBadChar);
    internal static bool StartsWithXml(string s);
    internal static bool IsReservedNamespace(string s);
    internal static void ValidateNameThrow(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags);
    internal static bool ValidateName(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags);
    private static bool ValidateNameInternal(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags, bool throwOnError);
    private static string CreateName(string prefix, string localName);
    internal static void SplitQName(string name, String& prefix, String& lname);
}
internal class System.Xml.ValidatingReaderNodeData : object {
    private string _localName;
    private string _namespaceUri;
    private string _prefix;
    private string _nameWPrefix;
    private string _rawValue;
    private string _originalStringValue;
    private int _depth;
    private AttributePSVIInfo _attributePSVIInfo;
    private XmlNodeType _nodeType;
    private int _lineNo;
    private int _linePos;
    public string LocalName { get; public set; }
    public string Namespace { get; public set; }
    public string Prefix { get; public set; }
    public int Depth { get; public set; }
    public string RawValue { get; public set; }
    public string OriginalStringValue { get; public set; }
    public XmlNodeType NodeType { get; public set; }
    public AttributePSVIInfo AttInfo { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ValidatingReaderNodeData(XmlNodeType nodeType);
    public string get_LocalName();
    public void set_LocalName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string GetAtomizedNameWPrefix(XmlNameTable nameTable);
    public int get_Depth();
    public void set_Depth(int value);
    public string get_RawValue();
    public void set_RawValue(string value);
    public string get_OriginalStringValue();
    public void set_OriginalStringValue(string value);
    public XmlNodeType get_NodeType();
    public void set_NodeType(XmlNodeType value);
    public AttributePSVIInfo get_AttInfo();
    public void set_AttInfo(AttributePSVIInfo value);
    public int get_LineNumber();
    public int get_LinePosition();
    internal void Clear(XmlNodeType nodeType);
    internal void SetLineInfo(int lineNo, int linePos);
    internal void SetLineInfo(IXmlLineInfo lineInfo);
    internal void SetItemData(string localName, string prefix, string ns, int depth);
    internal void SetItemData(string value);
    internal void SetItemData(string value, string originalStringValue);
}
public enum System.Xml.ValidationType : Enum {
    public int value__;
    public static ValidationType None;
    [ObsoleteAttribute("Validation type should be specified as DTD or Schema.")]
public static ValidationType Auto;
    public static ValidationType DTD;
    [ObsoleteAttribute("XDR Validation through XmlValidatingReader is obsoleted")]
public static ValidationType XDR;
    public static ValidationType Schema;
}
public enum System.Xml.WhitespaceHandling : Enum {
    public int value__;
    public static WhitespaceHandling All;
    public static WhitespaceHandling Significant;
    public static WhitespaceHandling None;
}
public enum System.Xml.WriteState : Enum {
    public int value__;
    public static WriteState Start;
    public static WriteState Prolog;
    public static WriteState Element;
    public static WriteState Attribute;
    public static WriteState Content;
    public static WriteState Closed;
    public static WriteState Error;
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.XmlAsyncCheckReader : XmlReader {
    private XmlReader _coreReader;
    private Task _lastTask;
    internal XmlReader CoreReader { get; }
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal IDtdInfo DtdInfo { get; }
    public XmlAsyncCheckReader(XmlReader reader);
    internal XmlReader get_CoreReader();
    public static XmlAsyncCheckReader CreateAsyncCheckWrapper(XmlReader reader);
    private void CheckAsync();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual string ReadString();
    public virtual XmlNodeType MoveToContent();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual string ReadElementString();
    public virtual string ReadElementString(string name);
    public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual XmlReader ReadSubtree();
    public virtual bool get_HasAttributes();
    protected virtual void Dispose(bool disposing);
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal virtual IDtdInfo get_DtdInfo();
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual Task`1<string> ReadContentAsStringAsync();
    public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<object> ReadElementContentAsObjectAsync();
    public virtual Task`1<string> ReadElementContentAsStringAsync();
    public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    public virtual Task`1<XmlNodeType> MoveToContentAsync();
    public virtual Task`1<string> ReadInnerXmlAsync();
    public virtual Task`1<string> ReadOuterXmlAsync();
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfo : XmlAsyncCheckReader {
    private IXmlLineInfo _readerAsIXmlLineInfo;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlAsyncCheckReaderWithLineInfo(XmlReader reader);
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfoNS : XmlAsyncCheckReaderWithLineInfo {
    private IXmlNamespaceResolver _readerAsIXmlNamespaceResolver;
    public XmlAsyncCheckReaderWithLineInfoNS(XmlReader reader);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfoNSSchema : XmlAsyncCheckReaderWithLineInfoNS {
    private IXmlSchemaInfo _readerAsIXmlSchemaInfo;
    private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.Validity { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsDefault { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsNil { get; }
    private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.MemberType { get; }
    private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.SchemaType { get; }
    private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.SchemaElement { get; }
    private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute { get; }
    public XmlAsyncCheckReaderWithLineInfoNSSchema(XmlReader reader);
    private sealed virtual override XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.get_Validity();
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsDefault();
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsNil();
    private sealed virtual override XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.get_MemberType();
    private sealed virtual override XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.get_SchemaType();
    private sealed virtual override XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement();
    private sealed virtual override XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute();
}
internal class System.Xml.XmlAsyncCheckReaderWithNS : XmlAsyncCheckReader {
    private IXmlNamespaceResolver _readerAsIXmlNamespaceResolver;
    public XmlAsyncCheckReaderWithNS(XmlReader reader);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlAsyncCheckWriter : XmlWriter {
    private XmlWriter _coreWriter;
    private Task _lastTask;
    internal XmlWriter CoreWriter { get; }
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public XmlAsyncCheckWriter(XmlWriter writer);
    internal XmlWriter get_CoreWriter();
    private void CheckAsync();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    protected virtual void Dispose(bool disposing);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XPathNavigator navigator, bool defattr);
}
public class System.Xml.XmlAttribute : XmlNode {
    private XmlName _name;
    private XmlLinkedNode _lastChild;
    internal int LocalNameHash { get; }
    internal XmlName XmlName { get; internal set; }
    public XmlNode ParentNode { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public string Value { get; public set; }
    public IXmlSchemaInfo SchemaInfo { get; }
    unknown string InnerText {public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public bool Specified { get; }
    public XmlElement OwnerElement { get; }
    unknown string InnerXml {public set; }
    public string BaseURI { get; }
    internal XmlSpace XmlSpace { get; }
    internal string XmlLang { get; }
    internal XPathNodeType XPNodeType { get; }
    internal string XPLocalName { get; }
    internal bool IsNamespace { get; }
    internal XmlAttribute(XmlName name, XmlDocument doc);
    protected internal XmlAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    internal int get_LocalNameHash();
    internal XmlName get_XmlName();
    internal void set_XmlName(XmlName value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNode get_ParentNode();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual void set_InnerText(string value);
    internal bool PrepareOwnerElementInElementIdAttrMap();
    internal void ResetOwnerElementInElementIdAttrMap(string oldInnerText);
    internal virtual bool get_IsContainer();
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual bool get_Specified();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual XmlElement get_OwnerElement();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    internal virtual void SetParent(XmlNode node);
    internal virtual XmlSpace get_XmlSpace();
    internal virtual string get_XmlLang();
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual string get_XPLocalName();
    internal bool get_IsNamespace();
}
[DefaultMemberAttribute("ItemOf")]
public class System.Xml.XmlAttributeCollection : XmlNamedNodeMap {
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    internal XmlAttributeCollection(XmlNode parent);
    public XmlAttribute get_ItemOf(int i);
    public XmlAttribute get_ItemOf(string name);
    public XmlAttribute get_ItemOf(string localName, string namespaceURI);
    internal int FindNodeOffset(XmlAttribute node);
    internal int FindNodeOffsetNS(XmlAttribute node);
    public virtual XmlNode SetNamedItem(XmlNode node);
    public XmlAttribute Prepend(XmlAttribute node);
    public XmlAttribute Append(XmlAttribute node);
    public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute Remove(XmlAttribute node);
    public XmlAttribute RemoveAt(int i);
    public void RemoveAll();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    public void CopyTo(XmlAttribute[] array, int index);
    internal virtual XmlNode AddNode(XmlNode node);
    internal virtual XmlNode InsertNodeAt(int i, XmlNode node);
    internal virtual XmlNode RemoveNodeAt(int i);
    internal void Detach(XmlAttribute attr);
    internal void InsertParentIntoElementIdAttrMap(XmlAttribute attr);
    internal void RemoveParentFromElementIdAttrMap(XmlAttribute attr);
    internal int RemoveDuplicateAttribute(XmlAttribute attr);
    internal bool PrepareParentInElementIdAttrMap(string attrPrefix, string attrLocalName);
    internal void ResetParentInElementIdAttrMap(string oldVal, string newVal);
    internal XmlAttribute InternalAppendAttribute(XmlAttribute node);
}
internal class System.Xml.XmlAutoDetectWriter : XmlRawWriter {
    private XmlRawWriter _wrapped;
    private OnRemoveWriter _onRemove;
    private XmlWriterSettings _writerSettings;
    private XmlEventCache _eventCache;
    private TextWriter _textWriter;
    private Stream _strm;
    public OnRemoveWriter OnRemoveWriterEvent { get; public set; }
    public XmlWriterSettings Settings { get; }
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    private XmlAutoDetectWriter(XmlWriterSettings writerSettings);
    public XmlAutoDetectWriter(TextWriter textWriter, XmlWriterSettings writerSettings);
    public XmlAutoDetectWriter(Stream strm, XmlWriterSettings writerSettings);
    public sealed virtual OnRemoveWriter get_OnRemoveWriterEvent();
    public sealed virtual void set_OnRemoveWriterEvent(OnRemoveWriter value);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    private static bool IsHtmlTag(string tagName);
    private void EnsureWrappedWriter(XmlOutputMethod outMethod);
    private bool TextBlockCreatesWriter(string textBlock);
    private void CreateWrappedWriter(XmlOutputMethod outMethod);
}
public class System.Xml.XmlCDataSection : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlCDataSection(string data, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
public abstract class System.Xml.XmlCharacterData : XmlLinkedNode {
    private string _data;
    public string Value { get; public set; }
    public string InnerText { get; public set; }
    public string Data { get; public set; }
    public int Length { get; }
    protected internal XmlCharacterData(string data, XmlDocument doc);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_Data();
    public virtual void set_Data(string value);
    public virtual int get_Length();
    public virtual string Substring(int offset, int count);
    public virtual void AppendData(string strData);
    public virtual void InsertData(int offset, string strData);
    public virtual void DeleteData(int offset, int count);
    public virtual void ReplaceData(int offset, int count, string strData);
    internal bool CheckOnData(string data);
    internal bool DecideXPNodeTypeForTextNodes(XmlNode node, XPathNodeType& xnt);
}
internal class System.Xml.XmlCharCheckingReader : XmlWrappingReader {
    private State _state;
    private bool _checkCharacters;
    private bool _ignoreWhitespace;
    private bool _ignoreComments;
    private bool _ignorePis;
    private DtdProcessing _dtdProcessing;
    private XmlNodeType _lastNodeType;
    private XmlCharType _xmlCharType;
    private ReadContentAsBinaryHelper _readBinaryHelper;
    public XmlReaderSettings Settings { get; }
    public ReadState ReadState { get; }
    public bool CanReadBinaryContent { get; }
    internal XmlCharCheckingReader(XmlReader reader, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing);
    public virtual XmlReaderSettings get_Settings();
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual ReadState get_ReadState();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    private void Throw(string res, string arg);
    private void Throw(string res, String[] args);
    private void CheckWhitespace(string value);
    private void ValidateQName(string name);
    private void ValidateQName(string prefix, string localName);
    private void CheckCharacters(string value);
    private void FinishReadBinary();
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadAsync>d__36")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadContentAsBase64Async>d__37")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadContentAsBinHexAsync>d__38")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadElementContentAsBase64Async>d__39")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadElementContentAsBinHexAsync>d__40")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<FinishReadBinaryAsync>d__41")]
private Task FinishReadBinaryAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__1(Byte[] buffer, int index, int count);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__2(Byte[] buffer, int index, int count);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__3(Byte[] buffer, int index, int count);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__4(Byte[] buffer, int index, int count);
}
internal class System.Xml.XmlCharCheckingReaderWithNS : XmlCharCheckingReader {
    internal IXmlNamespaceResolver readerAsNSResolver;
    internal XmlCharCheckingReaderWithNS(XmlReader reader, IXmlNamespaceResolver readerAsNSResolver, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlCharCheckingWriter : XmlWrappingWriter {
    private bool _checkValues;
    private bool _checkNames;
    private bool _replaceNewLines;
    private string _newLineChars;
    private XmlCharType _xmlCharType;
    public XmlWriterSettings Settings { get; }
    internal XmlCharCheckingWriter(XmlWriter baseWriter, bool checkValues, bool checkNames, bool replaceNewLines, string newLineChars);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    private void CheckCharacters(string str);
    private void CheckCharacters(Char[] data, int offset, int len);
    private void ValidateNCName(string ncname);
    private void ValidateQName(string name);
    private string ReplaceNewLines(string str);
    private string ReplaceNewLines(Char[] data, int offset, int len);
    private string InterleaveInvalidChars(string text, char invChar1, char invChar2);
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingWriter/<WriteCDataAsync>d__32")]
public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
}
internal class System.Xml.XmlCharType : ValueType {
    internal static int SurHighStart;
    internal static int SurHighEnd;
    internal static int SurLowStart;
    internal static int SurLowEnd;
    internal static int SurMask;
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    private static string s_PublicIdBitmap;
    private static UInt32 CharPropertiesSize;
    private static object s_Lock;
    private static Byte* modreq(System.Runtime.CompilerServices.IsVolatile) s_CharProperties;
    internal Byte* charProperties;
    private static object StaticLock { get; }
    public static XmlCharType Instance { get; }
    private XmlCharType(Byte* charProperties);
    private static object get_StaticLock();
    private static void InitInstance();
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsExtender(char ch);
    public bool IsNCNameSingleChar(char ch);
    public bool IsStartNCNameSingleChar(char ch);
    public bool IsNameSingleChar(char ch);
    public bool IsStartNameSingleChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsLetter(char ch);
    public bool IsNCNameCharXml4e(char ch);
    public bool IsStartNCNameCharXml4e(char ch);
    public bool IsNameCharXml4e(char ch);
    public bool IsStartNameCharXml4e(char ch);
    public static bool IsDigit(char ch);
    public static bool IsHexDigit(char ch);
    internal static bool IsHighSurrogate(int ch);
    internal static bool IsLowSurrogate(int ch);
    internal static bool IsSurrogate(int ch);
    internal static int CombineSurrogateChar(int lowChar, int highChar);
    internal static void SplitSurrogateChar(int combinedChar, Char& lowChar, Char& highChar);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal int IsOnlyCharData(string str);
    internal static bool IsOnlyDigits(string str, int startPos, int len);
    internal static bool IsOnlyDigits(Char[] chars, int startPos, int len);
    internal int IsPublicId(string str);
    private static bool InRange(int value, int start, int end);
}
internal class System.Xml.XmlChildEnumerator : object {
    internal XmlNode container;
    internal XmlNode child;
    internal bool isFirst;
    private object System.Collections.IEnumerator.Current { get; }
    internal XmlNode Current { get; }
    internal XmlChildEnumerator(XmlNode container);
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    internal bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    internal XmlNode get_Current();
}
internal class System.Xml.XmlChildNodes : XmlNodeList {
    private XmlNode _container;
    public int Count { get; }
    public XmlChildNodes(XmlNode container);
    public virtual XmlNode Item(int i);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
}
public class System.Xml.XmlComment : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    internal XPathNodeType XPNodeType { get; }
    protected internal XmlComment(string comment, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
}
internal static class System.Xml.XmlComplianceUtil : object {
    public static string NonCDataNormalize(string value);
    public static string CDataNormalize(string value);
    public static bool IsValidLanguageID(Char[] value, int startPos, int length);
}
public class System.Xml.XmlConvert : object {
    private static XmlCharType s_xmlCharType;
    private static CultureInfo s_invariantCultureInfo;
    internal static Char[] crt;
    private static int s_encodedCharLength;
    private static Regex modreq(System.Runtime.CompilerServices.IsVolatile) s_encodeCharPattern;
    private static Regex modreq(System.Runtime.CompilerServices.IsVolatile) s_decodeCharPattern;
    private static String[] modreq(System.Runtime.CompilerServices.IsVolatile) s_allDateTimeFormats;
    internal static Char[] WhitespaceChars;
    private static String[] AllDateTimeFormats { get; }
    private static XmlConvert();
    public static string EncodeName(string name);
    public static string EncodeNmToken(string name);
    public static string EncodeLocalName(string name);
    public static string DecodeName(string name);
    private static string EncodeName(string name, bool first, bool local);
    private static int FromHex(char digit);
    internal static Byte[] FromBinHexString(string s);
    internal static Byte[] FromBinHexString(string s, bool allowOddCount);
    internal static string ToBinHexString(Byte[] inArray);
    public static string VerifyName(string name);
    internal static Exception TryVerifyName(string name);
    internal static string VerifyQName(string name, ExceptionType exceptionType);
    public static string VerifyNCName(string name);
    internal static string VerifyNCName(string name, ExceptionType exceptionType);
    internal static Exception TryVerifyNCName(string name);
    public static string VerifyTOKEN(string token);
    internal static Exception TryVerifyTOKEN(string token);
    public static string VerifyNMTOKEN(string name);
    internal static string VerifyNMTOKEN(string name, ExceptionType exceptionType);
    internal static Exception TryVerifyNMTOKEN(string name);
    internal static Exception TryVerifyNormalizedString(string str);
    public static string VerifyXmlChars(string content);
    public static string VerifyPublicId(string publicId);
    public static string VerifyWhitespace(string content);
    public static bool IsStartNCNameChar(char ch);
    public static bool IsNCNameChar(char ch);
    public static bool IsXmlChar(char ch);
    public static bool IsXmlSurrogatePair(char lowChar, char highChar);
    public static bool IsPublicIdChar(char ch);
    public static bool IsWhitespaceChar(char ch);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(decimal value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(short value);
    public static string ToString(int value);
    public static string ToString(long value);
    public static string ToString(byte value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    public static string ToString(double value);
    public static string ToString(TimeSpan value);
    [ObsoleteAttribute("Use XmlConvert.ToString() that takes in XmlDateTimeSerializationMode")]
public static string ToString(DateTime value);
    public static string ToString(DateTime value, string format);
    public static string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, string format);
    public static string ToString(Guid value);
    public static bool ToBoolean(string s);
    internal static Exception TryToBoolean(string s, Boolean& result);
    public static char ToChar(string s);
    internal static Exception TryToChar(string s, Char& result);
    public static decimal ToDecimal(string s);
    internal static Exception TryToDecimal(string s, Decimal& result);
    internal static decimal ToInteger(string s);
    internal static Exception TryToInteger(string s, Decimal& result);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string s);
    internal static Exception TryToSByte(string s, SByte& result);
    public static short ToInt16(string s);
    internal static Exception TryToInt16(string s, Int16& result);
    public static int ToInt32(string s);
    internal static Exception TryToInt32(string s, Int32& result);
    public static long ToInt64(string s);
    internal static Exception TryToInt64(string s, Int64& result);
    public static byte ToByte(string s);
    internal static Exception TryToByte(string s, Byte& result);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(string s);
    internal static Exception TryToUInt16(string s, UInt16& result);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(string s);
    internal static Exception TryToUInt32(string s, UInt32& result);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(string s);
    internal static Exception TryToUInt64(string s, UInt64& result);
    public static float ToSingle(string s);
    internal static Exception TryToSingle(string s, Single& result);
    public static double ToDouble(string s);
    internal static Exception TryToDouble(string s, Double& result);
    internal static double ToXPathDouble(object o);
    internal static string ToXPathString(object value);
    internal static double XPathRound(double value);
    public static TimeSpan ToTimeSpan(string s);
    internal static Exception TryToTimeSpan(string s, TimeSpan& result);
    private static String[] get_AllDateTimeFormats();
    private static void CreateAllDateTimeFormats();
    [ObsoleteAttribute("Use XmlConvert.ToDateTime() that takes in XmlDateTimeSerializationMode")]
public static DateTime ToDateTime(string s);
    public static DateTime ToDateTime(string s, string format);
    public static DateTime ToDateTime(string s, String[] formats);
    public static DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption);
    public static DateTimeOffset ToDateTimeOffset(string s);
    public static DateTimeOffset ToDateTimeOffset(string s, string format);
    public static DateTimeOffset ToDateTimeOffset(string s, String[] formats);
    public static Guid ToGuid(string s);
    internal static Exception TryToGuid(string s, Guid& result);
    private static DateTime SwitchToLocalTime(DateTime value);
    private static DateTime SwitchToUtcTime(DateTime value);
    internal static Uri ToUri(string s);
    internal static Exception TryToUri(string s, Uri& result);
    internal static bool StrEqual(Char[] chars, int strPos1, int strLen1, string str2);
    internal static string TrimString(string value);
    internal static string TrimStringStart(string value);
    internal static string TrimStringEnd(string value);
    internal static String[] SplitString(string value);
    internal static String[] SplitString(string value, StringSplitOptions splitStringOptions);
    internal static bool IsNegativeZero(double value);
    private static long DoubleToInt64Bits(double value);
    internal static void VerifyCharData(string data, ExceptionType exceptionType);
    internal static void VerifyCharData(string data, ExceptionType invCharExceptionType, ExceptionType invSurrogateExceptionType);
    internal static void VerifyCharData(Char[] data, int offset, int len, ExceptionType exceptionType);
    internal static string EscapeValueForDebuggerDisplay(string value);
    internal static Exception CreateException(string res, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateException(string res, string arg, ExceptionType exceptionType);
    internal static Exception CreateException(string res, string arg, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateException(string res, String[] args, ExceptionType exceptionType);
    internal static Exception CreateException(string res, String[] args, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidCharException(Char[] data, int length, int invCharPos, ExceptionType exceptionType);
    internal static Exception CreateInvalidCharException(string data, int invCharPos);
    internal static Exception CreateInvalidCharException(string data, int invCharPos, ExceptionType exceptionType);
    internal static Exception CreateInvalidCharException(char invChar, char nextChar);
    internal static Exception CreateInvalidCharException(char invChar, char nextChar, ExceptionType exceptionType);
    internal static Exception CreateInvalidNameCharException(string name, int index, ExceptionType exceptionType);
    internal static ArgumentException CreateInvalidNameArgumentException(string name, string argumentName);
}
public enum System.Xml.XmlDateTimeSerializationMode : Enum {
    public int value__;
    public static XmlDateTimeSerializationMode Local;
    public static XmlDateTimeSerializationMode Utc;
    public static XmlDateTimeSerializationMode Unspecified;
    public static XmlDateTimeSerializationMode RoundtripKind;
}
public class System.Xml.XmlDeclaration : XmlLinkedNode {
    private static string YES;
    private static string NO;
    private string _version;
    private string _encoding;
    private string _standalone;
    public string Version { get; internal set; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public string Value { get; public set; }
    public string InnerText { get; public set; }
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    protected internal XmlDeclaration(string version, string encoding, string standalone, XmlDocument doc);
    public string get_Version();
    internal void set_Version(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Standalone();
    public void set_Standalone(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    private bool IsValidXmlVersion(string ver);
}
public class System.Xml.XmlDocument : XmlNode {
    private XmlImplementation _implementation;
    private DomNameTable _domNameTable;
    private XmlLinkedNode _lastChild;
    private XmlNamedNodeMap _entities;
    private Hashtable _htElementIdMap;
    private Hashtable _htElementIDAttrDecl;
    private SchemaInfo _schemaInfo;
    private XmlSchemaSet _schemas;
    private bool _reportValidity;
    private bool _actualLoadingStatus;
    private XmlNodeChangedEventHandler _onNodeInsertingDelegate;
    private XmlNodeChangedEventHandler _onNodeInsertedDelegate;
    private XmlNodeChangedEventHandler _onNodeRemovingDelegate;
    private XmlNodeChangedEventHandler _onNodeRemovedDelegate;
    private XmlNodeChangedEventHandler _onNodeChangingDelegate;
    private XmlNodeChangedEventHandler _onNodeChangedDelegate;
    internal bool fEntRefNodesPresent;
    internal bool fCDataNodesPresent;
    private bool _preserveWhitespace;
    private bool _isLoading;
    internal string strDocumentName;
    internal string strDocumentFragmentName;
    internal string strCommentName;
    internal string strTextName;
    internal string strCDataSectionName;
    internal string strEntityName;
    internal string strID;
    internal string strXmlns;
    internal string strXml;
    internal string strSpace;
    internal string strLang;
    internal string strEmpty;
    internal string strNonSignificantWhitespaceName;
    internal string strSignificantWhitespaceName;
    internal string strReservedXmlns;
    internal string strReservedXml;
    internal string baseURI;
    private XmlResolver _resolver;
    internal bool bSetResolver;
    internal object objLock;
    private XmlAttribute _namespaceXml;
    internal static EmptyEnumerator EmptyEnumerator;
    internal static IXmlSchemaInfo NotKnownSchemaInfo;
    internal static IXmlSchemaInfo ValidSchemaInfo;
    internal static IXmlSchemaInfo InvalidSchemaInfo;
    internal SchemaInfo DtdSchemaInfo { get; internal set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocumentType DocumentType { get; }
    internal XmlDeclaration Declaration { get; }
    public XmlImplementation Implementation { get; }
    public string Name { get; }
    public string LocalName { get; }
    public XmlElement DocumentElement { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlDocument OwnerDocument { get; }
    public XmlSchemaSet Schemas { get; public set; }
    internal bool CanReportValidity { get; }
    internal bool HasSetResolver { get; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlNameTable NameTable { get; }
    public bool PreserveWhitespace { get; public set; }
    public bool IsReadOnly { get; }
    internal XmlNamedNodeMap Entities { get; internal set; }
    internal bool IsLoading { get; internal set; }
    internal bool ActualLoadingStatus { get; internal set; }
    internal Encoding TextEncoding { get; }
    unknown string InnerText {public set; }
    public string InnerXml { get; public set; }
    internal string Version { get; }
    internal string Encoding { get; }
    internal string Standalone { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string BaseURI { get; }
    internal XPathNodeType XPNodeType { get; }
    internal bool HasEntityReferences { get; }
    internal XmlAttribute NamespaceXml { get; }
    public XmlDocument(XmlNameTable nt);
    protected internal XmlDocument(XmlImplementation imp);
    private static XmlDocument();
    internal SchemaInfo get_DtdSchemaInfo();
    internal void set_DtdSchemaInfo(SchemaInfo value);
    internal static void CheckName(string name);
    internal XmlName AddXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo);
    internal XmlName GetXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo);
    internal XmlName AddAttrXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo);
    internal bool AddIdInfo(XmlName eleName, XmlName attrName);
    private XmlName GetIDInfoByElement_(XmlName eleName);
    internal XmlName GetIDInfoByElement(XmlName eleName);
    private WeakReference GetElement(ArrayList elementList, XmlElement elem);
    internal void AddElementWithId(string id, XmlElement elem);
    internal void RemoveElementWithId(string id, XmlElement elem);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocumentType get_DocumentType();
    internal virtual XmlDeclaration get_Declaration();
    public XmlImplementation get_Implementation();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public XmlElement get_DocumentElement();
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    public virtual XmlDocument get_OwnerDocument();
    public XmlSchemaSet get_Schemas();
    public void set_Schemas(XmlSchemaSet value);
    internal bool get_CanReportValidity();
    internal bool get_HasSetResolver();
    internal XmlResolver GetResolver();
    public virtual void set_XmlResolver(XmlResolver value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    private bool HasNodeTypeInPrevSiblings(XmlNodeType nt, XmlNode refNode);
    private bool HasNodeTypeInNextSiblings(XmlNodeType nt, XmlNode refNode);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    public XmlAttribute CreateAttribute(string name);
    internal void SetDefaultNamespace(string prefix, string localName, String& namespaceURI);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    public virtual XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset);
    public virtual XmlDocumentFragment CreateDocumentFragment();
    public XmlElement CreateElement(string name);
    internal void AddDefaultAttributes(XmlElement elem);
    private SchemaElementDecl GetSchemaElementDecl(XmlElement elem);
    private XmlAttribute PrepareDefaultAttribute(SchemaAttDef attdef, string attrPrefix, string attrLocalname, string attrNamespaceURI);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    public virtual XPathNavigator CreateNavigator();
    protected internal virtual XPathNavigator CreateNavigator(XmlNode node);
    internal static bool IsTextNode(XmlNodeType nt);
    private XmlNode NormalizeText(XmlNode n);
    public virtual XmlWhitespace CreateWhitespace(string text);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI);
    public XmlElement CreateElement(string qualifiedName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual XmlElement GetElementById(string elementId);
    public virtual XmlNode ImportNode(XmlNode node, bool deep);
    private XmlNode ImportNodeInternal(XmlNode node, bool deep);
    private void ImportAttributes(XmlNode fromElem, XmlNode toElem);
    private void ImportChildren(XmlNode fromNode, XmlNode toNode, bool deep);
    public XmlNameTable get_NameTable();
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    protected internal virtual XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public bool get_PreserveWhitespace();
    public void set_PreserveWhitespace(bool value);
    public virtual bool get_IsReadOnly();
    internal XmlNamedNodeMap get_Entities();
    internal void set_Entities(XmlNamedNodeMap value);
    internal bool get_IsLoading();
    internal void set_IsLoading(bool value);
    internal bool get_ActualLoadingStatus();
    internal void set_ActualLoadingStatus(bool value);
    public virtual XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI);
    public virtual XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI);
    public virtual XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI);
    public virtual XmlNode ReadNode(XmlReader reader);
    internal XmlNodeType ConvertToNodeType(string nodeTypeString);
    private XmlTextReader SetupReader(XmlTextReader tr);
    public virtual void Load(string filename);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    public virtual void LoadXml(string xml);
    internal Encoding get_TextEncoding();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void Save(string filename);
    public virtual void Save(Stream outStream);
    public virtual void Save(TextWriter writer);
    public virtual void Save(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter xw);
    public void Validate(ValidationEventHandler validationEventHandler);
    public void Validate(ValidationEventHandler validationEventHandler, XmlNode nodeToValidate);
    public void add_NodeInserting(XmlNodeChangedEventHandler value);
    public void remove_NodeInserting(XmlNodeChangedEventHandler value);
    public void add_NodeInserted(XmlNodeChangedEventHandler value);
    public void remove_NodeInserted(XmlNodeChangedEventHandler value);
    public void add_NodeRemoving(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoving(XmlNodeChangedEventHandler value);
    public void add_NodeRemoved(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoved(XmlNodeChangedEventHandler value);
    public void add_NodeChanging(XmlNodeChangedEventHandler value);
    public void remove_NodeChanging(XmlNodeChangedEventHandler value);
    public void add_NodeChanged(XmlNodeChangedEventHandler value);
    public void remove_NodeChanged(XmlNodeChangedEventHandler value);
    internal virtual XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    internal XmlNodeChangedEventArgs GetInsertEventArgsForLoad(XmlNode node, XmlNode newParent);
    internal virtual void BeforeEvent(XmlNodeChangedEventArgs args);
    internal virtual void AfterEvent(XmlNodeChangedEventArgs args);
    internal XmlAttribute GetDefaultAttribute(XmlElement elem, string attrPrefix, string attrLocalname, string attrNamespaceURI);
    internal string get_Version();
    internal string get_Encoding();
    internal string get_Standalone();
    internal XmlEntity GetEntityNode(string name);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_BaseURI();
    internal void SetBaseURI(string inBaseURI);
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual XPathNodeType get_XPNodeType();
    internal bool get_HasEntityReferences();
    internal XmlAttribute get_NamespaceXml();
}
public class System.Xml.XmlDocumentFragment : XmlNode {
    private XmlLinkedNode _lastChild;
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocument OwnerDocument { get; }
    public string InnerXml { get; public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    internal XPathNodeType XPNodeType { get; }
    protected internal XmlDocumentFragment(XmlDocument ownerDocument);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocument get_OwnerDocument();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual XmlNode CloneNode(bool deep);
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
}
public class System.Xml.XmlDocumentType : XmlLinkedNode {
    private string _name;
    private string _publicId;
    private string _systemId;
    private string _internalSubset;
    private bool _namespaces;
    private XmlNamedNodeMap _entities;
    private XmlNamedNodeMap _notations;
    private SchemaInfo _schemaInfo;
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    public XmlNamedNodeMap Entities { get; }
    public XmlNamedNodeMap Notations { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string InternalSubset { get; }
    internal bool ParseWithNamespaces { get; internal set; }
    internal SchemaInfo DtdSchemaInfo { get; internal set; }
    protected internal XmlDocumentType(string name, string publicId, string systemId, string internalSubset, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public XmlNamedNodeMap get_Entities();
    public XmlNamedNodeMap get_Notations();
    public string get_PublicId();
    public string get_SystemId();
    public string get_InternalSubset();
    internal bool get_ParseWithNamespaces();
    internal void set_ParseWithNamespaces(bool value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal SchemaInfo get_DtdSchemaInfo();
    internal void set_DtdSchemaInfo(SchemaInfo value);
}
internal class System.Xml.XmlDOMTextWriter : XmlTextWriter {
    public XmlDOMTextWriter(Stream w, Encoding encoding);
    public XmlDOMTextWriter(string filename, Encoding encoding);
    public XmlDOMTextWriter(TextWriter w);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
}
internal class System.Xml.XmlDownloadManager : object {
    internal Stream GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy);
    private Stream GetNonFileStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy);
    [RemovableFeatureAttribute("System.Xml.XmlUrlResolver.NonFileUrlSupport")]
private static WebRequest CreateWebRequestOrThrowIfRemoved(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy);
    internal Task`1<Stream> GetStreamAsync(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy);
    [AsyncStateMachineAttribute("System.Xml.XmlDownloadManager/<GetNonFileStreamAsync>d__4")]
private Task`1<Stream> GetNonFileStreamAsync(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy);
}
public class System.Xml.XmlElement : XmlLinkedNode {
    private XmlName _name;
    private XmlAttributeCollection _attributes;
    private XmlLinkedNode _lastChild;
    internal XmlName XmlName { get; internal set; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocument OwnerDocument { get; }
    internal bool IsContainer { get; }
    public bool IsEmpty { get; public set; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlAttributeCollection Attributes { get; }
    public bool HasAttributes { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string InnerXml { get; public set; }
    public string InnerText { get; public set; }
    public XmlNode NextSibling { get; }
    internal XPathNodeType XPNodeType { get; }
    internal string XPLocalName { get; }
    internal XmlElement(XmlName name, bool empty, XmlDocument doc);
    protected internal XmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    internal XmlName get_XmlName();
    internal void set_XmlName(XmlName value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocument get_OwnerDocument();
    internal virtual bool get_IsContainer();
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string name);
    public virtual void SetAttribute(string name, string value);
    public virtual void RemoveAttribute(string name);
    public virtual XmlAttribute GetAttributeNode(string name);
    public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr);
    public virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string SetAttribute(string localName, string namespaceURI, string value);
    public virtual void RemoveAttribute(string localName, string namespaceURI);
    public virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual bool HasAttribute(string name);
    public virtual bool HasAttribute(string localName, string namespaceURI);
    public virtual void WriteTo(XmlWriter w);
    private static void WriteElementTo(XmlWriter writer, XmlElement e);
    private void WriteStartElement(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual XmlNode RemoveAttributeAt(int i);
    public virtual void RemoveAllAttributes();
    public virtual void RemoveAll();
    internal void RemoveAllChildren();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual XmlNode get_NextSibling();
    internal virtual void SetParent(XmlNode node);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual string get_XPLocalName();
    internal virtual string GetXPAttribute(string localName, string ns);
}
internal class System.Xml.XmlElementList : XmlNodeList {
    private string _asterisk;
    private int _changeCount;
    private string _name;
    private string _localName;
    private string _namespaceURI;
    private XmlNode _rootNode;
    private int _curInd;
    private XmlNode _curElem;
    private bool _empty;
    private bool _atomized;
    private int _matchCount;
    private WeakReference _listener;
    internal int ChangeCount { get; }
    public int Count { get; }
    private XmlElementList(XmlNode parent);
    internal XmlElementList(XmlNode parent, string name);
    internal XmlElementList(XmlNode parent, string localName, string namespaceURI);
    protected virtual override void Finalize();
    internal void ConcurrencyCheck(XmlNodeChangedEventArgs args);
    internal int get_ChangeCount();
    private XmlNode NextElemInPreOrder(XmlNode curNode);
    private XmlNode PrevElemInPreOrder(XmlNode curNode);
    private bool IsMatch(XmlNode curNode);
    private XmlNode GetMatchingNode(XmlNode n, bool bNext);
    private XmlNode GetNthMatchingNode(XmlNode n, bool bNext, int nCount);
    public XmlNode GetNextNode(XmlNode n);
    public virtual XmlNode Item(int index);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    protected virtual void PrivateDisposeNodeList();
    protected virtual void Dispose(bool disposing);
}
internal class System.Xml.XmlElementListEnumerator : object {
    private XmlElementList _list;
    private XmlNode _curElem;
    private int _changeCount;
    public object Current { get; }
    public XmlElementListEnumerator(XmlElementList list);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class System.Xml.XmlElementListListener : object {
    private WeakReference _elemList;
    private XmlDocument _doc;
    private XmlNodeChangedEventHandler _nodeChangeHandler;
    internal XmlElementListListener(XmlDocument doc, XmlElementList elemList);
    private void OnListChanged(object sender, XmlNodeChangedEventArgs args);
    internal void Unregister();
}
internal class System.Xml.XmlEmptyElementListEnumerator : object {
    public object Current { get; }
    public XmlEmptyElementListEnumerator(XmlElementList list);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class System.Xml.XmlEncodedRawTextWriter : XmlRawWriter {
    private bool _useAsync;
    protected Byte[] bufBytes;
    protected Stream stream;
    protected Encoding encoding;
    protected XmlCharType xmlCharType;
    protected int bufPos;
    protected int textPos;
    protected int contentPos;
    protected int cdataPos;
    protected int attrEndPos;
    protected int bufLen;
    protected bool writeToNull;
    protected bool hadDoubleBracket;
    protected bool inAttributeValue;
    protected int bufBytesUsed;
    protected Char[] bufChars;
    protected Encoder encoder;
    protected TextWriter writer;
    protected bool trackTextContent;
    protected bool inTextContent;
    private int _lastMarkPos;
    private Int32[] _textContentMarks;
    private CharEntityEncoderFallback _charEntityFallback;
    protected NewLineHandling newLineHandling;
    protected bool closeOutput;
    protected bool omitXmlDeclaration;
    protected string newLineChars;
    protected bool checkCharacters;
    protected XmlStandalone standalone;
    protected XmlOutputMethod outputMethod;
    protected bool autoXmlDeclaration;
    protected bool mergeCDataSections;
    private static int BUFSIZE;
    private static int ASYNCBUFSIZE;
    private static int OVERFLOW;
    private static int INIT_MARKS_COUNT;
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    protected XmlEncodedRawTextWriter(XmlWriterSettings settings);
    public XmlEncodedRawTextWriter(TextWriter writer, XmlWriterSettings settings);
    public XmlEncodedRawTextWriter(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
    protected virtual void FlushBuffer();
    private void EncodeChars(int startOffset, int endOffset, bool writeAllToStream);
    private void FlushEncoder();
    protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void RawText(string s);
    protected void RawText(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteCommentOrPi(string text, int stopChar);
    protected void WriteCDataSection(string text);
    private static Char* EncodeSurrogate(Char* pSrc, Char* pSrcEnd, Char* pDst);
    private Char* InvalidXmlChar(int ch, Char* pDst, bool entitize);
    internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Char*& pDst);
    protected void ChangeTextContentMark(bool value);
    private void GrowTextContentMarks();
    protected Char* WriteNewLine(Char* pDst);
    protected static Char* LtEntity(Char* pDst);
    protected static Char* GtEntity(Char* pDst);
    protected static Char* AmpEntity(Char* pDst);
    protected static Char* QuoteEntity(Char* pDst);
    protected static Char* TabEntity(Char* pDst);
    protected static Char* LineFeedEntity(Char* pDst);
    protected static Char* CarriageReturnEntity(Char* pDst);
    private static Char* CharEntity(Char* pDst, char ch);
    protected static Char* RawStartCData(Char* pDst);
    protected static Char* RawEndCData(Char* pDst);
    protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace);
    protected void CheckAsyncCall();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteXmlDeclarationAsync>d__96")]
internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteDocTypeAsync>d__98")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    private void WriteStartElementAsync_SetAttEndPos();
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    private void WriteStartAttribute_SetInAttribute();
    protected internal virtual Task WriteEndAttributeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteNamespaceDeclarationAsync>d__106")]
internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteStartNamespaceDeclarationAsync>d__107")]
internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCDataAsync>d__109")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCommentAsync>d__110")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteProcessingInstructionAsync>d__111")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteEntityRefAsync>d__112")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCharEntityAsync>d__113")]
public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteSurrogateCharEntityAsync>d__116")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawAsync>d__118")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawAsync>d__119")]
public virtual Task WriteRawAsync(string data);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<FlushAsync>d__120")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<FlushBufferAsync>d__121")]
protected virtual Task FlushBufferAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<EncodeCharsAsync>d__122")]
private Task EncodeCharsAsync(int startOffset, int endOffset, bool writeAllToStream);
    private Task FlushEncoderAsync();
    protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd);
    protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count);
    protected int WriteAttributeTextBlockNoFlush(string text, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteAttributeTextBlockAsync>d__127")]
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteAttributeTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<_WriteAttributeTextBlockAsync>d__129")]
private Task _WriteAttributeTextBlockAsync(string text, int curIndex, int leftCount);
    protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine);
    protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteElementTextBlockAsync>d__133")]
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteElementTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<_WriteElementTextBlockAsync>d__135")]
private Task _WriteElementTextBlockAsync(bool newLine, string text, int curIndex, int leftCount);
    protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd);
    protected int RawTextNoFlush(string text, int index, int count);
    protected Task RawTextAsync(string text);
    protected Task RawTextAsync(string text1, string text2, string text3, string text4);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<_RawTextAsync>d__140")]
private Task _RawTextAsync(string text1, int curIndex1, int leftCount1, string text2, string text3, string text4);
    protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine);
    protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawWithCharCheckingAsync>d__144")]
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawWithCharCheckingAsync>d__145")]
protected Task WriteRawWithCharCheckingAsync(string text);
    protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCommentOrPiAsync>d__147")]
protected Task WriteCommentOrPiAsync(string text, int stopChar);
    protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCDataSectionAsync>d__149")]
protected Task WriteCDataSectionAsync(string text);
}
internal class System.Xml.XmlEncodedRawTextWriterIndent : XmlEncodedRawTextWriter {
    protected int indentLevel;
    protected bool newLineOnAttributes;
    protected string indentChars;
    protected bool mixedContent;
    private BitStack _mixedContentStack;
    protected ConformanceLevel conformanceLevel;
    public XmlWriterSettings Settings { get; }
    public XmlEncodedRawTextWriterIndent(TextWriter writer, XmlWriterSettings settings);
    public XmlEncodedRawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel currentConformanceLevel);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    private void Init(XmlWriterSettings settings);
    private void WriteIndent();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteDocTypeAsync>d__31")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteStartElementAsync>d__32")]
public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteEndElementAsync>d__33")]
internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteFullEndElementAsync>d__34")]
internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteStartAttributeAsync>d__35")]
protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteCommentAsync>d__37")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteProcessingInstructionAsync>d__38")]
public virtual Task WriteProcessingInstructionAsync(string target, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteIndentAsync>d__48")]
private Task WriteIndentAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string name, string pubid, string sysid, string subset);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__5(string text);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(string name, string text);
}
public class System.Xml.XmlEntity : XmlNode {
    private string _publicId;
    private string _systemId;
    private string _notationName;
    private string _name;
    private string _unparsedReplacementStr;
    private string _baseURI;
    private XmlLinkedNode _lastChild;
    private bool _childrenFoliating;
    public bool IsReadOnly { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string InnerText { get; public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlNodeType NodeType { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string NotationName { get; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    public string BaseURI { get; }
    internal XmlEntity(string name, string strdata, string publicId, string systemId, string notationName, XmlDocument doc);
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual XmlNodeType get_NodeType();
    public string get_PublicId();
    public string get_SystemId();
    public string get_NotationName();
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    internal void SetBaseURI(string inBaseURI);
}
public class System.Xml.XmlEntityReference : XmlLinkedNode {
    private string _name;
    private XmlLinkedNode _lastChild;
    public string Name { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public string BaseURI { get; }
    internal string ChildBaseURI { get; }
    protected internal XmlEntityReference(string name, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    internal virtual bool get_IsContainer();
    internal virtual void SetParent(XmlNode node);
    internal virtual void SetParentForLoad(XmlNode node);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    private string ConstructBaseURI(string baseURI, string systemId);
    internal string get_ChildBaseURI();
}
internal class System.Xml.XmlEventCache : XmlRawWriter {
    private List`1<XmlEvent[]> _pages;
    private XmlEvent[] _pageCurr;
    private int _pageSize;
    private bool _hasRootNode;
    private StringConcat _singleText;
    private string _baseUri;
    private static int InitialPageSize;
    public string BaseUri { get; }
    public bool HasRootNode { get; }
    public XmlWriterSettings Settings { get; }
    public XmlEventCache(string baseUri, bool hasRootNode);
    public void EndEvents();
    public string get_BaseUri();
    public bool get_HasRootNode();
    public void EventsToWriter(XmlWriter writer);
    public string EventsToString();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    protected virtual void Dispose(bool disposing);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual void WriteEndBase64();
    private void AddEvent(XmlEventType eventType);
    private void AddEvent(XmlEventType eventType, string s1);
    private void AddEvent(XmlEventType eventType, string s1, string s2);
    private void AddEvent(XmlEventType eventType, string s1, string s2, string s3);
    private void AddEvent(XmlEventType eventType, string s1, string s2, string s3, object o);
    private void AddEvent(XmlEventType eventType, object o);
    private int NewEvent();
    private static Byte[] ToBytes(Byte[] buffer, int index, int count);
}
[TypeForwardedFromAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Xml.XmlException : SystemException {
    private string _res;
    private String[] _args;
    private int _lineNumber;
    private int _linePosition;
    private string _sourceUri;
    private string _message;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string SourceUri { get; }
    public string Message { get; }
    internal string ResString { get; }
    protected XmlException(SerializationInfo info, StreamingContext context);
    public XmlException(string message);
    public XmlException(string message, Exception innerException);
    public XmlException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlException(string message, Exception innerException, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args);
    internal XmlException(string res, string arg);
    internal XmlException(string res, string arg, string sourceUri);
    internal XmlException(string res, string arg, IXmlLineInfo lineInfo);
    internal XmlException(string res, string arg, Exception innerException, IXmlLineInfo lineInfo);
    internal XmlException(string res, String[] args, IXmlLineInfo lineInfo);
    internal XmlException(string res, String[] args, IXmlLineInfo lineInfo, string sourceUri);
    internal XmlException(string res, string arg, int lineNumber, int linePosition);
    internal XmlException(string res, string arg, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args, int lineNumber, int linePosition);
    internal XmlException(string res, String[] args, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args, Exception innerException, int lineNumber, int linePosition);
    internal XmlException(string res, String[] args, Exception innerException, int lineNumber, int linePosition, string sourceUri);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string FormatUserMessage(string message, int lineNumber, int linePosition);
    private static string CreateMessage(string res, String[] args, int lineNumber, int linePosition);
    internal static String[] BuildCharExceptionArgs(string data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int length, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(char invChar, char nextChar);
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_SourceUri();
    public virtual string get_Message();
    internal string get_ResString();
    internal static bool IsCatchableException(Exception e);
}
public class System.Xml.XmlImplementation : object {
    private XmlNameTable _nameTable;
    internal XmlNameTable NameTable { get; }
    public XmlImplementation(XmlNameTable nt);
    public bool HasFeature(string strFeature, string strVersion);
    public virtual XmlDocument CreateDocument();
    internal XmlNameTable get_NameTable();
}
public abstract class System.Xml.XmlLinkedNode : XmlNode {
    internal XmlLinkedNode next;
    public XmlNode PreviousSibling { get; }
    public XmlNode NextSibling { get; }
    internal XmlLinkedNode(XmlDocument doc);
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_NextSibling();
}
internal class System.Xml.XmlLoader : object {
    private XmlDocument _doc;
    private XmlReader _reader;
    private bool _preserveWhitespace;
    internal void Load(XmlDocument doc, XmlReader reader, bool preserveWhitespace);
    private void LoadDocSequence(XmlDocument parentDoc);
    internal XmlNode ReadCurrentNode(XmlDocument doc, XmlReader reader);
    private XmlNode LoadNode(bool skipOverWhitespace);
    private XmlAttribute LoadAttributeNode();
    private XmlAttribute LoadDefaultAttribute();
    private void LoadAttributeValue(XmlNode parent, bool direct);
    private XmlEntityReference LoadEntityReferenceNode(bool direct);
    private XmlDeclaration LoadDeclarationNode();
    private XmlDocumentType LoadDocumentTypeNode();
    private XmlNode LoadNodeDirect();
    private XmlAttribute LoadAttributeNodeDirect();
    internal void ParseDocumentType(XmlDocumentType dtNode);
    private void ParseDocumentType(XmlDocumentType dtNode, bool bUseResolver, XmlResolver resolver);
    private void LoadDocumentType(IDtdInfo dtdInfo, XmlDocumentType dtNode);
    private XmlParserContext GetContext(XmlNode node);
    internal XmlNamespaceManager ParsePartialContent(XmlNode parentNode, string innerxmltext, XmlNodeType nt);
    internal void LoadInnerXmlElement(XmlElement node, string innerxmltext);
    internal void LoadInnerXmlAttribute(XmlAttribute node, string innerxmltext);
    private void RemoveDuplicateNamespace(XmlElement elem, XmlNamespaceManager mgr, bool fCheckElemAttrs);
    private string EntitizeName(string name);
    internal void ExpandEntity(XmlEntity ent);
    internal void ExpandEntityReference(XmlEntityReference eref);
    private XmlReader CreateInnerXmlReader(string xmlFragment, XmlNodeType nt, XmlParserContext context, XmlDocument doc);
    internal static void ParseXmlDeclarationValue(string strValue, String& version, String& encoding, String& standalone);
    internal static Exception UnexpectedNodeType(XmlNodeType nodetype);
}
internal class System.Xml.XmlName : object {
    private string _prefix;
    private string _localName;
    private string _ns;
    private string _name;
    private int _hashCode;
    internal XmlDocument ownerDoc;
    internal XmlName next;
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public int HashCode { get; }
    public XmlDocument OwnerDocument { get; }
    public string Name { get; }
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    internal XmlName(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next);
    public static XmlName Create(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next, IXmlSchemaInfo schemaInfo);
    public string get_LocalName();
    public string get_NamespaceURI();
    public string get_Prefix();
    public int get_HashCode();
    public XmlDocument get_OwnerDocument();
    public string get_Name();
    public virtual XmlSchemaValidity get_Validity();
    public virtual bool get_IsDefault();
    public virtual bool get_IsNil();
    public virtual XmlSchemaSimpleType get_MemberType();
    public virtual XmlSchemaType get_SchemaType();
    public virtual XmlSchemaElement get_SchemaElement();
    public virtual XmlSchemaAttribute get_SchemaAttribute();
    public virtual bool Equals(IXmlSchemaInfo schemaInfo);
    public static int GetHashCode(string name);
}
public class System.Xml.XmlNamedNodeMap : object {
    internal XmlNode parent;
    internal SmallXmlNodeList nodes;
    public int Count { get; }
    internal XmlNamedNodeMap(XmlNode parent);
    public virtual XmlNode GetNamedItem(string name);
    public virtual XmlNode SetNamedItem(XmlNode node);
    public virtual XmlNode RemoveNamedItem(string name);
    public virtual int get_Count();
    public virtual XmlNode Item(int index);
    public virtual XmlNode GetNamedItem(string localName, string namespaceURI);
    public virtual XmlNode RemoveNamedItem(string localName, string namespaceURI);
    public virtual IEnumerator GetEnumerator();
    internal int FindNodeOffset(string name);
    internal int FindNodeOffset(string localName, string namespaceURI);
    internal virtual XmlNode AddNode(XmlNode node);
    internal virtual XmlNode AddNodeForLoad(XmlNode node, XmlDocument doc);
    internal virtual XmlNode RemoveNodeAt(int i);
    internal XmlNode ReplaceNodeAt(int i, XmlNode node);
    internal virtual XmlNode InsertNodeAt(int i, XmlNode node);
}
internal class System.Xml.XmlNameEx : XmlName {
    private byte _flags;
    private XmlSchemaSimpleType _memberType;
    private XmlSchemaType _schemaType;
    private object _decl;
    private static byte ValidityMask;
    private static byte IsDefaultBit;
    private static byte IsNilBit;
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    internal XmlNameEx(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next, IXmlSchemaInfo schemaInfo);
    public virtual XmlSchemaValidity get_Validity();
    public virtual bool get_IsDefault();
    public virtual bool get_IsNil();
    public virtual XmlSchemaSimpleType get_MemberType();
    public virtual XmlSchemaType get_SchemaType();
    public virtual XmlSchemaElement get_SchemaElement();
    public virtual XmlSchemaAttribute get_SchemaAttribute();
    public void SetValidity(XmlSchemaValidity value);
    public void SetIsDefault(bool value);
    public void SetIsNil(bool value);
    public virtual bool Equals(IXmlSchemaInfo schemaInfo);
}
public class System.Xml.XmlNamespaceManager : object {
    private NamespaceDeclaration[] _nsdecls;
    private int _lastDecl;
    private XmlNameTable _nameTable;
    private int _scopeId;
    private Dictionary`2<string, int> _hashTable;
    private bool _useHashtable;
    private string _xml;
    private string _xmlNs;
    private static int MinDeclsCountForHashtable;
    public XmlNameTable NameTable { get; }
    public string DefaultNamespace { get; }
    public XmlNamespaceManager(XmlNameTable nameTable);
    public virtual XmlNameTable get_NameTable();
    public virtual string get_DefaultNamespace();
    public virtual void PushScope();
    public virtual bool PopScope();
    public virtual void AddNamespace(string prefix, string uri);
    public virtual void RemoveNamespace(string prefix, string uri);
    public virtual IEnumerator GetEnumerator();
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual string LookupNamespace(string prefix);
    private int LookupNamespaceDecl(string prefix);
    public virtual string LookupPrefix(string uri);
    public virtual bool HasNamespace(string prefix);
    internal bool GetNamespaceDeclaration(int idx, String& prefix, String& uri);
}
public enum System.Xml.XmlNamespaceScope : Enum {
    public int value__;
    public static XmlNamespaceScope All;
    public static XmlNamespaceScope ExcludeXml;
    public static XmlNamespaceScope Local;
}
public abstract class System.Xml.XmlNameTable : object {
    public abstract virtual string Get(Char[] array, int offset, int length);
    public abstract virtual string Get(string array);
    public abstract virtual string Add(Char[] array, int offset, int length);
    public abstract virtual string Add(string array);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XmlNode : object {
    internal XmlNode parentNode;
    public string Name { get; }
    public string Value { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNodeList ChildNodes { get; }
    public XmlNode PreviousSibling { get; }
    public XmlNode NextSibling { get; }
    public XmlAttributeCollection Attributes { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode FirstChild { get; }
    public XmlNode LastChild { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public bool HasChildNodes { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public string LocalName { get; }
    public bool IsReadOnly { get; }
    public string InnerText { get; public set; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string BaseURI { get; }
    internal XmlDocument Document { get; }
    public XmlElement Item { get; }
    public XmlElement Item { get; }
    internal XmlSpace XmlSpace { get; }
    internal string XmlLang { get; }
    internal XPathNodeType XPNodeType { get; }
    internal string XPLocalName { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    private object debuggerDisplayProxy { get; }
    internal XmlNode(XmlDocument doc);
    public virtual XPathNavigator CreateNavigator();
    public XmlNode SelectSingleNode(string xpath);
    public XmlNode SelectSingleNode(string xpath, XmlNamespaceManager nsmgr);
    public XmlNodeList SelectNodes(string xpath);
    public XmlNodeList SelectNodes(string xpath, XmlNamespaceManager nsmgr);
    public abstract virtual string get_Name();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public abstract virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNodeList get_ChildNodes();
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_NextSibling();
    public virtual XmlAttributeCollection get_Attributes();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_FirstChild();
    public virtual XmlNode get_LastChild();
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal bool AncestorNode(XmlNode node);
    internal bool IsConnected();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual bool IsValidChildType(XmlNodeType type);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual bool get_HasChildNodes();
    public abstract virtual XmlNode CloneNode(bool deep);
    internal virtual void CopyChildren(XmlDocument doc, XmlNode container, bool deep);
    public virtual void Normalize();
    private XmlNode NormalizeWinner(XmlNode firstNode, XmlNode secondNode);
    public virtual bool Supports(string feature, string version);
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public abstract virtual string get_LocalName();
    public virtual bool get_IsReadOnly();
    internal static bool HasReadOnlyParent(XmlNode n);
    public virtual XmlNode Clone();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator GetEnumerator();
    private void AppendChildText(StringBuilder builder);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_BaseURI();
    public abstract virtual void WriteTo(XmlWriter w);
    public abstract virtual void WriteContentTo(XmlWriter w);
    public virtual void RemoveAll();
    internal XmlDocument get_Document();
    public virtual string GetNamespaceOfPrefix(string prefix);
    internal string GetNamespaceOfPrefixStrict(string prefix);
    public virtual string GetPrefixOfNamespace(string namespaceURI);
    internal string GetPrefixOfNamespaceStrict(string namespaceURI);
    public virtual XmlElement get_Item(string name);
    public virtual XmlElement get_Item(string localname, string ns);
    internal virtual void SetParent(XmlNode node);
    internal virtual void SetParentForLoad(XmlNode node);
    internal static void SplitName(string name, String& prefix, String& localName);
    internal virtual XmlNode FindChild(XmlNodeType type);
    internal virtual XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    internal virtual void BeforeEvent(XmlNodeChangedEventArgs args);
    internal virtual void AfterEvent(XmlNodeChangedEventArgs args);
    internal virtual XmlSpace get_XmlSpace();
    internal virtual string get_XmlLang();
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual string get_XPLocalName();
    internal virtual string GetXPAttribute(string localName, string namespaceURI);
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
    internal static void NestTextNodes(XmlNode prevNode, XmlNode nextNode);
    internal static void UnnestTextNodes(XmlNode prevNode, XmlNode nextNode);
    private object get_debuggerDisplayProxy();
}
public enum System.Xml.XmlNodeChangedAction : Enum {
    public int value__;
    public static XmlNodeChangedAction Insert;
    public static XmlNodeChangedAction Remove;
    public static XmlNodeChangedAction Change;
}
public class System.Xml.XmlNodeChangedEventArgs : EventArgs {
    private XmlNodeChangedAction _action;
    private XmlNode _node;
    private XmlNode _oldParent;
    private XmlNode _newParent;
    private string _oldValue;
    private string _newValue;
    public XmlNodeChangedAction Action { get; }
    public XmlNode Node { get; }
    public XmlNode OldParent { get; }
    public XmlNode NewParent { get; }
    public string OldValue { get; }
    public string NewValue { get; }
    public XmlNodeChangedEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    public XmlNodeChangedAction get_Action();
    public XmlNode get_Node();
    public XmlNode get_OldParent();
    public XmlNode get_NewParent();
    public string get_OldValue();
    public string get_NewValue();
}
public class System.Xml.XmlNodeChangedEventHandler : MulticastDelegate {
    public XmlNodeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("ItemOf")]
public abstract class System.Xml.XmlNodeList : object {
    public int Count { get; }
    public XmlNode ItemOf { get; }
    public abstract virtual XmlNode Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
    public virtual XmlNode get_ItemOf(int i);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void PrivateDisposeNodeList();
}
internal class System.Xml.XmlNodeListEnumerator : object {
    private XPathNodeList _list;
    private int _index;
    private bool _valid;
    public object Current { get; }
    public XmlNodeListEnumerator(XPathNodeList list);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
}
public enum System.Xml.XmlNodeOrder : Enum {
    public int value__;
    public static XmlNodeOrder Before;
    public static XmlNodeOrder After;
    public static XmlNodeOrder Same;
    public static XmlNodeOrder Unknown;
}
public class System.Xml.XmlNodeReader : XmlReader {
    private XmlNodeReaderNavigator _readerNav;
    private XmlNodeType _nodeType;
    private int _curDepth;
    private ReadState _readState;
    private bool _fEOF;
    private bool _bResolveEntity;
    private bool _bStartFromDocument;
    private bool _bInReadBinary;
    private ReadContentAsBinaryHelper _readBinaryHelper;
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool CanResolveEntity { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public bool CanReadBinaryContent { get; }
    internal IDtdInfo DtdInfo { get; }
    public XmlNodeReader(XmlNode node);
    internal bool IsInReadingStates();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_CanResolveEntity();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int attributeIndex);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string namespaceURI);
    public virtual void MoveToAttribute(int attributeIndex);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    private bool Read(bool fSkipChildren);
    private bool ReadNextNode(bool fSkipChildren);
    private void SetEndOfFile();
    private bool ReadAtZeroLevel(bool fSkipChildren);
    private bool ReadForward(bool fSkipChildren);
    private void ReSetReadingMarks();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual string ReadString();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    private void FinishReadBinary();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    internal virtual IDtdInfo get_DtdInfo();
}
internal class System.Xml.XmlNodeReaderNavigator : object {
    private XmlNode _curNode;
    private XmlNode _elemNode;
    private XmlNode _logNode;
    private int _attrIndex;
    private int _logAttrIndex;
    private XmlNameTable _nameTable;
    private XmlDocument _doc;
    private int _nAttrInd;
    private static string strPublicID;
    private static string strSystemID;
    private static string strVersion;
    private static string strStandalone;
    private static string strEncoding;
    private int _nDeclarationAttrCount;
    private int _nDocTypeAttrCount;
    private int _nLogLevel;
    private int _nLogAttrInd;
    private bool _bLogOnAttrVal;
    private bool _bCreatedOnAttribute;
    internal VirtualAttribute[] decNodeAttributes;
    internal VirtualAttribute[] docTypeNodeAttributes;
    private bool _bOnAttrVal;
    public XmlNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string LocalName { get; }
    internal bool CreatedOnAttribute { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public string BaseURI { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public XmlNameTable NameTable { get; }
    public int AttributeCount { get; }
    private bool IsOnDeclOrDocType { get; }
    public XmlDocument Document { get; }
    public XmlNodeReaderNavigator(XmlNode node);
    public XmlNodeType get_NodeType();
    public string get_NamespaceURI();
    public string get_Name();
    public string get_LocalName();
    internal bool get_CreatedOnAttribute();
    private bool IsLocalNameEmpty(XmlNodeType nt);
    public string get_Prefix();
    public bool get_HasValue();
    public string get_Value();
    public string get_BaseURI();
    public XmlSpace get_XmlSpace();
    public string get_XmlLang();
    public bool get_IsEmptyElement();
    public bool get_IsDefault();
    public IXmlSchemaInfo get_SchemaInfo();
    public XmlNameTable get_NameTable();
    public int get_AttributeCount();
    private void CheckIndexCondition(int attributeIndex);
    private void InitDecAttr();
    public string GetDeclarationAttr(XmlDeclaration decl, string name);
    public string GetDeclarationAttr(int i);
    public int GetDecAttrInd(string name);
    private void InitDocTypeAttr();
    public string GetDocumentTypeAttr(XmlDocumentType docType, string name);
    public string GetDocumentTypeAttr(int i);
    public int GetDocTypeAttrInd(string name);
    private string GetAttributeFromElement(XmlElement elem, string name);
    public string GetAttribute(string name);
    private string GetAttributeFromElement(XmlElement elem, string name, string ns);
    public string GetAttribute(string name, string ns);
    public string GetAttribute(int attributeIndex);
    public void LogMove(int level);
    public void RollBackMove(Int32& level);
    private bool get_IsOnDeclOrDocType();
    public void ResetToAttribute(Int32& level);
    public void ResetMove(Int32& level, XmlNodeType& nt);
    public bool MoveToAttribute(string name);
    private bool MoveToAttributeFromElement(XmlElement elem, string name, string ns);
    public bool MoveToAttribute(string name, string namespaceURI);
    public void MoveToAttribute(int attributeIndex);
    public bool MoveToNextAttribute(Int32& level);
    public bool MoveToParent();
    public bool MoveToFirstChild();
    private bool MoveToNextSibling(XmlNode node);
    public bool MoveToNext();
    public bool MoveToElement();
    public string LookupNamespace(string prefix);
    internal string DefaultLookupNamespace(string prefix);
    internal string LookupPrefix(string namespaceName);
    internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public bool ReadAttributeValue(Int32& level, Boolean& bResolveEntity, XmlNodeType& nt);
    public XmlDocument get_Document();
}
public enum System.Xml.XmlNodeType : Enum {
    public int value__;
    public static XmlNodeType None;
    public static XmlNodeType Element;
    public static XmlNodeType Attribute;
    public static XmlNodeType Text;
    public static XmlNodeType CDATA;
    public static XmlNodeType EntityReference;
    public static XmlNodeType Entity;
    public static XmlNodeType ProcessingInstruction;
    public static XmlNodeType Comment;
    public static XmlNodeType Document;
    public static XmlNodeType DocumentType;
    public static XmlNodeType DocumentFragment;
    public static XmlNodeType Notation;
    public static XmlNodeType Whitespace;
    public static XmlNodeType SignificantWhitespace;
    public static XmlNodeType EndElement;
    public static XmlNodeType EndEntity;
    public static XmlNodeType XmlDeclaration;
}
public class System.Xml.XmlNotation : XmlNode {
    private string _publicId;
    private string _systemId;
    private string _name;
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    internal XmlNotation(string name, string publicId, string systemId, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public string get_PublicId();
    public string get_SystemId();
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
}
internal class System.Xml.XmlNullResolver : XmlResolver {
    public static XmlNullResolver Singleton;
    unknown ICredentials Credentials {public set; }
    private static XmlNullResolver();
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual void set_Credentials(ICredentials value);
}
public enum System.Xml.XmlOutputMethod : Enum {
    public int value__;
    public static XmlOutputMethod Xml;
    public static XmlOutputMethod Html;
    public static XmlOutputMethod Text;
    public static XmlOutputMethod AutoDetect;
}
public class System.Xml.XmlParserContext : object {
    private XmlNameTable _nt;
    private XmlNamespaceManager _nsMgr;
    private string _docTypeName;
    private string _pubId;
    private string _sysId;
    private string _internalSubset;
    private string _xmlLang;
    private XmlSpace _xmlSpace;
    private string _baseURI;
    private Encoding _encoding;
    public XmlNameTable NameTable { get; public set; }
    public XmlNamespaceManager NamespaceManager { get; public set; }
    public string DocTypeName { get; public set; }
    public string PublicId { get; public set; }
    public string SystemId { get; public set; }
    public string BaseURI { get; public set; }
    public string InternalSubset { get; public set; }
    public string XmlLang { get; public set; }
    public XmlSpace XmlSpace { get; public set; }
    public Encoding Encoding { get; public set; }
    internal bool HasDtdInfo { get; }
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    public XmlNamespaceManager get_NamespaceManager();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public string get_DocTypeName();
    public void set_DocTypeName(string value);
    public string get_PublicId();
    public void set_PublicId(string value);
    public string get_SystemId();
    public void set_SystemId(string value);
    public string get_BaseURI();
    public void set_BaseURI(string value);
    public string get_InternalSubset();
    public void set_InternalSubset(string value);
    public string get_XmlLang();
    public void set_XmlLang(string value);
    public XmlSpace get_XmlSpace();
    public void set_XmlSpace(XmlSpace value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    internal bool get_HasDtdInfo();
}
public class System.Xml.XmlProcessingInstruction : XmlLinkedNode {
    private string _target;
    private string _data;
    public string Name { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    public string Target { get; }
    public string Data { get; public set; }
    public string InnerText { get; public set; }
    public XmlNodeType NodeType { get; }
    internal string XPLocalName { get; }
    internal XPathNodeType XPNodeType { get; }
    protected internal XmlProcessingInstruction(string target, string data, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public string get_Target();
    public string get_Data();
    public void set_Data(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual string get_XPLocalName();
    internal virtual XPathNodeType get_XPNodeType();
}
public class System.Xml.XmlQualifiedName : object {
    private string _name;
    private string _ns;
    private int _hash;
    public static XmlQualifiedName Empty;
    public string Namespace { get; }
    public string Name { get; }
    public bool IsEmpty { get; }
    public XmlQualifiedName(string name);
    public XmlQualifiedName(string name, string ns);
    private static XmlQualifiedName();
    public string get_Namespace();
    public string get_Name();
    public virtual int GetHashCode();
    public bool get_IsEmpty();
    public virtual string ToString();
    public virtual bool Equals(object other);
    public static bool op_Equality(XmlQualifiedName a, XmlQualifiedName b);
    public static bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b);
    public static string ToString(string name, string ns);
    internal void Init(string name, string ns);
    internal void SetNamespace(string ns);
    internal void Verify();
    internal void Atomize(XmlNameTable nameTable);
    internal static XmlQualifiedName Parse(string s, IXmlNamespaceResolver nsmgr, String& prefix);
    internal XmlQualifiedName Clone();
}
internal abstract class System.Xml.XmlRawWriter : XmlWriter {
    protected XmlRawWriterBase64Encoder base64Encoder;
    protected IXmlNamespaceResolver resolver;
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual string LookupPrefix(string ns);
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal abstract virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel conformanceLevel);
    internal abstract virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteQualifiedName(string prefix, string localName, string ns);
    internal abstract virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    internal virtual void WriteEndBase64();
    internal virtual void Close(WriteState currentState);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XPathNavigator navigator, bool defattr);
    internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlRawWriter/<WriteQualifiedNameAsync>d__73")]
internal virtual Task WriteQualifiedNameAsync(string prefix, string localName, string ns);
    internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string ns);
    internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    internal virtual Task WriteEndBase64Async();
}
internal class System.Xml.XmlRawWriterBase64Encoder : Base64Encoder {
    private XmlRawWriter _rawWriter;
    internal XmlRawWriterBase64Encoder(XmlRawWriter rawWriter);
    internal virtual void WriteChars(Char[] chars, int index, int count);
    internal virtual Task WriteCharsAsync(Char[] chars, int index, int count);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XmlReader : object {
    private static UInt32 s_isTextualNodeBitmap;
    private static UInt32 s_canReadContentAsBitmap;
    private static UInt32 s_hasValueBitmap;
    internal static int DefaultBufferSize;
    internal static int BiggerBufferSize;
    internal static int MaxStreamLengthForDefaultBufferSize;
    internal static int AsyncBufferSize;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal bool IsDefaultInternal { get; }
    internal IDtdInfo DtdInfo { get; }
    private object debuggerDisplayProxy { get; }
    private static XmlReader();
    public virtual XmlReaderSettings get_Settings();
    public abstract virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual string get_Prefix();
    public virtual bool get_HasValue();
    public abstract virtual string get_Value();
    public abstract virtual int get_Depth();
    public abstract virtual string get_BaseURI();
    public abstract virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public abstract virtual int get_AttributeCount();
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetAttribute(string name, string namespaceURI);
    public abstract virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public abstract virtual bool MoveToAttribute(string name);
    public abstract virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public abstract virtual bool MoveToElement();
    public abstract virtual bool ReadAttributeValue();
    public abstract virtual bool Read();
    public abstract virtual bool get_EOF();
    public virtual void Close();
    public abstract virtual ReadState get_ReadState();
    public virtual void Skip();
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public abstract virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    [EditorBrowsableAttribute("1")]
public virtual string ReadString();
    public virtual XmlNodeType MoveToContent();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString();
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString(string name);
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public static bool IsName(string str);
    public static bool IsNameToken(string str);
    public virtual string ReadInnerXml();
    private void WriteNode(XmlWriter xtw, bool defattr);
    private void WriteAttributeValue(XmlWriter xtw);
    public virtual string ReadOuterXml();
    private XmlWriter CreateWriterForInnerOuterXml(StringWriter sw);
    private void SetNamespacesFlag(XmlTextWriter xtw);
    public virtual XmlReader ReadSubtree();
    public virtual bool get_HasAttributes();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal static bool IsTextualNode(XmlNodeType nodeType);
    internal static bool CanReadContentAs(XmlNodeType nodeType);
    internal static bool HasValueInternal(XmlNodeType nodeType);
    private bool SkipSubtree();
    internal void CheckElement(string localName, string namespaceURI);
    internal Exception CreateReadContentAsException(string methodName);
    internal Exception CreateReadElementContentAsException(string methodName);
    internal bool CanReadContentAs();
    internal static Exception CreateReadContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo);
    internal static Exception CreateReadElementContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo);
    private static string AddLineInfo(string message, IXmlLineInfo lineInfo);
    internal string InternalReadContentAsString();
    private bool SetupReadElementContentAsXxx(string methodName);
    private void FinishReadElementContentAsXxx();
    internal bool get_IsDefaultInternal();
    internal virtual IDtdInfo get_DtdInfo();
    internal static ConformanceLevel GetV1ConformanceLevel(XmlReader reader);
    private static XmlTextReaderImpl GetXmlTextReaderImpl(XmlReader reader);
    public static XmlReader Create(string inputUri);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(Stream input);
    public static XmlReader Create(Stream input, XmlReaderSettings settings);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(TextReader input);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(XmlReader reader, XmlReaderSettings settings);
    internal static XmlReader CreateSqlReader(Stream input, XmlReaderSettings settings, XmlParserContext inputContext);
    internal static int CalcBufferSize(Stream input);
    private object get_debuggerDisplayProxy();
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadContentAsObjectAsync>d__183")]
public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadContentAsAsync>d__185")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsObjectAsync>d__186")]
public virtual Task`1<object> ReadElementContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsStringAsync>d__187")]
public virtual Task`1<string> ReadElementContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsAsync>d__188")]
public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<MoveToContentAsync>d__196")]
public virtual Task`1<XmlNodeType> MoveToContentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadInnerXmlAsync>d__197")]
public virtual Task`1<string> ReadInnerXmlAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<WriteNodeAsync>d__198")]
private Task WriteNodeAsync(XmlWriter xtw, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadOuterXmlAsync>d__199")]
public virtual Task`1<string> ReadOuterXmlAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<SkipSubtreeAsync>d__200")]
private Task`1<bool> SkipSubtreeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<InternalReadContentAsStringAsync>d__201")]
internal Task`1<string> InternalReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<SetupReadElementContentAsXxxAsync>d__202")]
private Task`1<bool> SetupReadElementContentAsXxxAsync(string methodName);
    private Task FinishReadElementContentAsXxxAsync();
}
public class System.Xml.XmlReaderSettings : object {
    private bool _useAsync;
    private XmlNameTable _nameTable;
    private XmlResolver _xmlResolver;
    private int _lineNumberOffset;
    private int _linePositionOffset;
    private ConformanceLevel _conformanceLevel;
    private bool _checkCharacters;
    private long _maxCharactersInDocument;
    private long _maxCharactersFromEntities;
    private bool _ignoreWhitespace;
    private bool _ignorePIs;
    private bool _ignoreComments;
    private DtdProcessing _dtdProcessing;
    private ValidationType _validationType;
    private XmlSchemaValidationFlags _validationFlags;
    private XmlSchemaSet _schemas;
    private ValidationEventHandler _valEventHandler;
    private bool _closeInput;
    private bool _isReadOnly;
    private AddValidationFunc _addValidationFunc;
    [CompilerGeneratedAttribute]
private bool <IsXmlResolverSet>k__BackingField;
    public bool Async { get; public set; }
    public XmlNameTable NameTable { get; public set; }
    internal bool IsXmlResolverSet { get; internal set; }
    unknown XmlResolver XmlResolver {public set; }
    public int LineNumberOffset { get; public set; }
    public int LinePositionOffset { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool CheckCharacters { get; public set; }
    public long MaxCharactersInDocument { get; public set; }
    public long MaxCharactersFromEntities { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public bool IgnoreProcessingInstructions { get; public set; }
    public bool IgnoreComments { get; public set; }
    [ObsoleteAttribute("Use XmlReaderSettings.DtdProcessing property instead.")]
public bool ProhibitDtd { get; public set; }
    public DtdProcessing DtdProcessing { get; public set; }
    public bool CloseInput { get; public set; }
    public ValidationType ValidationType { get; public set; }
    public XmlSchemaValidationFlags ValidationFlags { get; public set; }
    public XmlSchemaSet Schemas { get; public set; }
    internal bool ReadOnly { get; internal set; }
    public bool get_Async();
    public void set_Async(bool value);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    [CompilerGeneratedAttribute]
internal bool get_IsXmlResolverSet();
    [CompilerGeneratedAttribute]
internal void set_IsXmlResolverSet(bool value);
    public void set_XmlResolver(XmlResolver value);
    internal XmlResolver GetXmlResolver();
    internal XmlResolver GetXmlResolver_CheckConfig();
    public int get_LineNumberOffset();
    public void set_LineNumberOffset(int value);
    public int get_LinePositionOffset();
    public void set_LinePositionOffset(int value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public long get_MaxCharactersInDocument();
    public void set_MaxCharactersInDocument(long value);
    public long get_MaxCharactersFromEntities();
    public void set_MaxCharactersFromEntities(long value);
    public bool get_IgnoreWhitespace();
    public void set_IgnoreWhitespace(bool value);
    public bool get_IgnoreProcessingInstructions();
    public void set_IgnoreProcessingInstructions(bool value);
    public bool get_IgnoreComments();
    public void set_IgnoreComments(bool value);
    public bool get_ProhibitDtd();
    public void set_ProhibitDtd(bool value);
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public bool get_CloseInput();
    public void set_CloseInput(bool value);
    public ValidationType get_ValidationType();
    public void set_ValidationType(ValidationType value);
    public XmlSchemaValidationFlags get_ValidationFlags();
    public void set_ValidationFlags(XmlSchemaValidationFlags value);
    public XmlSchemaSet get_Schemas();
    public void set_Schemas(XmlSchemaSet value);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public void Reset();
    public XmlReaderSettings Clone();
    internal ValidationEventHandler GetEventHandler();
    internal XmlReader CreateReader(string inputUri, XmlParserContext inputContext);
    internal XmlReader CreateReader(Stream input, Uri baseUri, string baseUriString, XmlParserContext inputContext);
    internal XmlReader CreateReader(TextReader input, string baseUriString, XmlParserContext inputContext);
    internal XmlReader CreateReader(XmlReader reader);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    private void CheckReadOnly(string propertyName);
    private void Initialize();
    private void Initialize(XmlResolver resolver);
    private static XmlResolver CreateDefaultResolver();
    internal XmlReader AddValidation(XmlReader reader);
    private XmlReader AddValidationAndConformanceWrapper(XmlReader reader);
    private XmlReader AddValidationAndConformanceInternal(XmlReader reader, XmlResolver resolver, bool addConformanceWrapper);
    private XmlReader AddValidationInternal(XmlReader reader, XmlResolver resolver, bool addConformanceWrapper);
    private XmlValidatingReaderImpl CreateDtdValidatingReader(XmlReader baseReader);
    internal XmlReader AddConformanceWrapper(XmlReader baseReader);
}
internal static class System.Xml.XmlReservedNs : object {
    internal static string NsXml;
    internal static string NsXmlNs;
    internal static string NsDataType;
    internal static string NsDataTypeAlias;
    internal static string NsDataTypeOld;
    internal static string NsMsxsl;
    internal static string NsXdr;
    internal static string NsXslDebug;
    internal static string NsXdrAlias;
    internal static string NsWdXsl;
    internal static string NsXs;
    internal static string NsXsi;
    internal static string NsXslt;
    internal static string NsExsltCommon;
    internal static string NsXQueryDataType;
    internal static string NsCollationBase;
    internal static string NsCollCodePoint;
}
public abstract class System.Xml.XmlResolver : object {
    unknown ICredentials Credentials {public set; }
    public abstract virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual void set_Credentials(ICredentials value);
    public virtual bool SupportsType(Uri absoluteUri, Type type);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
public class System.Xml.XmlSecureResolver : XmlResolver {
    private XmlResolver _resolver;
    unknown ICredentials Credentials {public set; }
    public XmlSecureResolver(XmlResolver resolver, string securityUrl);
    public virtual void set_Credentials(ICredentials value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
public class System.Xml.XmlSignificantWhitespace : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlSignificantWhitespace(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
public enum System.Xml.XmlSpace : Enum {
    public int value__;
    public static XmlSpace None;
    public static XmlSpace Default;
    public static XmlSpace Preserve;
}
internal class System.Xml.XmlSqlBinaryReader : XmlReader {
    internal static Type TypeOfObject;
    internal static Type TypeOfString;
    private static Type[] modreq(System.Runtime.CompilerServices.IsVolatile) s_tokenTypeMap;
    private static Byte[] s_xsdKatmaiTimeScaleToValueLengthMap;
    private static ReadState[] s_scanState2ReadState;
    private Stream _inStrm;
    private Byte[] _data;
    private int _pos;
    private int _mark;
    private int _end;
    private long _offset;
    private bool _eof;
    private bool _sniffed;
    private bool _isEmpty;
    private int _docState;
    private SymbolTables _symbolTables;
    private XmlNameTable _xnt;
    private bool _xntFromSettings;
    private string _xml;
    private string _xmlns;
    private string _nsxmlns;
    private string _baseUri;
    private ScanState _state;
    private XmlNodeType _nodetype;
    private BinXmlToken _token;
    private int _attrIndex;
    private QName _qnameOther;
    private QName _qnameElement;
    private XmlNodeType _parentNodeType;
    private ElemInfo[] _elementStack;
    private int _elemDepth;
    private AttrInfo[] _attributes;
    private Int32[] _attrHashTbl;
    private int _attrCount;
    private int _posAfterAttrs;
    private bool _xmlspacePreserve;
    private int _tokLen;
    private int _tokDataPos;
    private bool _hasTypedValue;
    private Type _valueType;
    private string _stringValue;
    private Dictionary`2<string, NamespaceDecl> _namespaces;
    private NestedBinXml _prevNameInfo;
    private XmlReader _textXmlReader;
    private bool _closeInput;
    private bool _checkCharacters;
    private bool _ignoreWhitespace;
    private bool _ignorePIs;
    private bool _ignoreComments;
    private DtdProcessing _dtdProcessing;
    private SecureStringHasher _hasher;
    private XmlCharType _xmlCharType;
    private Encoding _unicode;
    private byte _version;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public XmlNameTable NameTable { get; }
    public ReadState ReadState { get; }
    public XmlSqlBinaryReader(Stream stream, Byte[] data, int len, string baseUri, bool closeInput, XmlReaderSettings settings);
    private static XmlSqlBinaryReader();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name, string ns);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToAttribute(string name);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool get_EOF();
    public virtual bool ReadAttributeValue();
    public virtual void Close();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual ReadState get_ReadState();
    public virtual bool Read();
    private bool SetupContentAsXXX(string name);
    private int FinishContentAsXXX(int origPos);
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual object ReadContentAsObject();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private void VerifyVersion(int requiredVersion, BinXmlToken token);
    private void AddInitNamespace(string prefix, string uri);
    private void AddName();
    private void AddQName();
    private void NameFlush();
    private void SkipExtn();
    private int ReadQNameRef();
    private int ReadNameRef();
    private bool FillAllowEOF();
    private void Fill_(int require);
    private void Fill(int require);
    private byte ReadByte();
    private ushort ReadUShort();
    private int ParseMB32();
    private int ParseMB32_(byte b);
    private int ParseMB32(int pos);
    private int ParseMB64();
    private BinXmlToken PeekToken();
    private BinXmlToken ReadToken();
    private BinXmlToken NextToken2(BinXmlToken token);
    private BinXmlToken NextToken1();
    private BinXmlToken NextToken();
    private BinXmlToken PeekNextToken();
    private BinXmlToken RescanNextToken();
    private string ParseText();
    private int ScanText(Int32& start);
    private string GetString(int pos, int cch);
    private string GetStringAligned(Byte[] data, int offset, int cch);
    private string GetAttributeText(int i);
    private int LocateAttribute(string name, string ns);
    private int LocateAttribute(string name);
    private void PositionOnAttribute(int i);
    private void GrowElements();
    private void GrowAttributes();
    private void ClearAttributes();
    private void PushNamespace(string prefix, string ns, bool implied);
    private void PopNamespaces(NamespaceDecl firstInScopeChain);
    private void GenerateImpliedXmlnsAttrs();
    private bool ReadInit(bool skipXmlDecl);
    private void ScanAttributes();
    private void SimpleCheckForDuplicateAttributes();
    private void HashCheckForDuplicateAttributes();
    private string XmlDeclValue();
    private string CDATAValue();
    private void FinishCDATA();
    private void FinishEndElement();
    private bool ReadDoc();
    private void ImplReadData(BinXmlToken tokenType);
    private void ImplReadElement();
    private void ImplReadEndElement();
    private void ImplReadDoctype();
    private void ImplReadPI();
    private void ImplReadComment();
    private void ImplReadCDATA();
    private void ImplReadNest();
    private void ImplReadEndNest();
    private void ImplReadXmlText();
    private void UpdateFromTextReader();
    private bool UpdateFromTextReader(bool needUpdate);
    private void CheckAllowContent();
    private void GenerateTokenTypeMap();
    private Type GetValueType(BinXmlToken token);
    private void ReScanOverValue(BinXmlToken token);
    private XmlNodeType ScanOverValue(BinXmlToken token, bool attr, bool checkChars);
    private XmlNodeType ScanOverAnyValue(BinXmlToken token, bool attr, bool checkChars);
    private XmlNodeType CheckText(bool attr);
    private XmlNodeType CheckTextIsWS();
    private void CheckValueTokenBounds();
    private int GetXsdKatmaiTokenLength(BinXmlToken token);
    private int XsdKatmaiTimeScaleToValueLength(byte scale);
    private long ValueAsLong();
    private ulong ValueAsULong();
    private decimal ValueAsDecimal();
    private double ValueAsDouble();
    private DateTime ValueAsDateTime();
    private DateTimeOffset ValueAsDateTimeOffset();
    private string ValueAsDateTimeString();
    private string ValueAsString(BinXmlToken token);
    private object ValueAsObject(BinXmlToken token, bool returnInternalTypes);
    private XmlValueConverter GetValueConverter(XmlTypeCode typeCode);
    private object ValueAs(BinXmlToken token, Type returnType, IXmlNamespaceResolver namespaceResolver);
    private short GetInt16(int pos);
    private ushort GetUInt16(int pos);
    private int GetInt32(int pos);
    private UInt32 GetUInt32(int pos);
    private long GetInt64(int pos);
    private ulong GetUInt64(int pos);
    private float GetSingle(int offset);
    private double GetDouble(int offset);
    private Exception ThrowUnexpectedToken(BinXmlToken token);
    private Exception ThrowXmlException(string res);
    private Exception ThrowXmlException(string res, string arg1, string arg2);
    private Exception ThrowNotSupported(string res);
}
internal enum System.Xml.XmlStandalone : Enum {
    public int value__;
    public static XmlStandalone Omit;
    public static XmlStandalone Yes;
    public static XmlStandalone No;
}
internal class System.Xml.XmlSubtreeReader : XmlWrappingReader {
    private static int AttributeActiveStates;
    private static int NamespaceActiveStates;
    private int _initialDepth;
    private State _state;
    private XmlNamespaceManager _nsManager;
    private NodeData[] _nsAttributes;
    private int _nsAttrCount;
    private int _curNsAttr;
    private string _xmlns;
    private string _xmlnsUri;
    private int _nsIncReadOffset;
    private IncrementalReadDecoder _binDecoder;
    private bool _useCurNode;
    private NodeData _curNode;
    private NodeData _tmpNode;
    internal int InitialNamespaceAttributeCount;
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public int AttributeCount { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    private bool InAttributeActiveState { get; }
    private bool InNamespaceActiveState { get; }
    internal XmlSubtreeReader(XmlReader reader);
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual string LookupNamespace(string prefix);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private void ProcessNamespaces();
    private void AddNamespace(string prefix, string ns);
    private void RemoveNamespace(string prefix, string localName);
    private void MoveToNsAttribute(int index);
    private bool InitReadElementContentAsBinary(State binaryState);
    private bool FinishReadElementContentAsBinary();
    private bool FinishReadContentAsBinary();
    private bool get_InAttributeActiveState();
    private bool get_InNamespaceActiveState();
    private void SetEmptyNode();
    private void SetCurrentNode(NodeData node);
    private void InitReadContentAsType(string methodName);
    private void FinishReadContentAsType();
    private void CheckBuffer(Array buffer, int index, int count);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadAsync>d__104")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<SkipAsync>d__105")]
public virtual Task SkipAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsObjectAsync>d__106")]
public virtual Task`1<object> ReadContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsStringAsync>d__107")]
public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsAsync>d__108")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsBase64Async>d__109")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadElementContentAsBase64Async>d__110")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsBinHexAsync>d__111")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadElementContentAsBinHexAsync>d__112")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<InitReadElementContentAsBinaryAsync>d__114")]
private Task`1<bool> InitReadElementContentAsBinaryAsync(State binaryState);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<FinishReadElementContentAsBinaryAsync>d__115")]
private Task`1<bool> FinishReadElementContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<FinishReadContentAsBinaryAsync>d__116")]
private Task`1<bool> FinishReadContentAsBinaryAsync();
}
internal class System.Xml.XmlSystemPathResolver : XmlResolver {
    public virtual object GetEntity(Uri uri, string role, Type typeOfObjectToReturn);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
public class System.Xml.XmlText : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    internal XmlText(string strData);
    protected internal XmlText(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlText SplitText(int offset);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
internal class System.Xml.XmlTextEncoder : object {
    private TextWriter _textWriter;
    private bool _inAttribute;
    private char _quoteChar;
    private StringBuilder _attrValue;
    private bool _cacheAttrValue;
    private XmlCharType _xmlCharType;
    unknown char QuoteChar {internal set; }
    internal string AttributeValue { get; }
    internal XmlTextEncoder(TextWriter textWriter);
    internal void set_QuoteChar(char value);
    internal void StartAttribute(bool cacheAttrValue);
    internal void EndAttribute();
    internal string get_AttributeValue();
    internal void WriteSurrogateChar(char lowChar, char highChar);
    internal void Write(Char[] array, int offset, int count);
    internal void WriteSurrogateCharEntity(char lowChar, char highChar);
    internal void Write(string text);
    internal void WriteRawWithSurrogateChecking(string text);
    internal void WriteRaw(Char[] array, int offset, int count);
    internal void WriteCharEntity(char ch);
    internal void WriteEntityRef(string name);
    private void WriteStringFragment(string str, int offset, int count, Char[] helperBuffer);
    private void WriteCharEntityImpl(char ch);
    private void WriteCharEntityImpl(string strVal);
    private void WriteEntityRefImpl(string name);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlTextReader : XmlReader {
    private XmlTextReaderImpl _impl;
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public bool Namespaces { get; public set; }
    public bool Normalization { get; public set; }
    public Encoding Encoding { get; }
    public WhitespaceHandling WhitespaceHandling { get; public set; }
    [ObsoleteAttribute("Use DtdProcessing property instead.")]
public bool ProhibitDtd { get; public set; }
    public DtdProcessing DtdProcessing { get; public set; }
    public EntityHandling EntityHandling { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    internal XmlTextReaderImpl Impl { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    unknown bool XmlValidatingReaderCompatibilityMode {internal set; }
    internal IDtdInfo DtdInfo { get; }
    protected XmlTextReader(XmlNameTable nt);
    public XmlTextReader(Stream input);
    public XmlTextReader(string url, Stream input);
    public XmlTextReader(Stream input, XmlNameTable nt);
    public XmlTextReader(string url, Stream input, XmlNameTable nt);
    public XmlTextReader(TextReader input);
    public XmlTextReader(string url, TextReader input);
    public XmlTextReader(TextReader input, XmlNameTable nt);
    public XmlTextReader(string url, TextReader input, XmlNameTable nt);
    public XmlTextReader(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlTextReader(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlTextReader(string url);
    public XmlTextReader(string url, XmlNameTable nt);
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual string ReadString();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public bool get_Normalization();
    public void set_Normalization(bool value);
    public Encoding get_Encoding();
    public WhitespaceHandling get_WhitespaceHandling();
    public void set_WhitespaceHandling(WhitespaceHandling value);
    public bool get_ProhibitDtd();
    public void set_ProhibitDtd(bool value);
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public EntityHandling get_EntityHandling();
    public void set_EntityHandling(EntityHandling value);
    public void set_XmlResolver(XmlResolver value);
    public void ResetState();
    public TextReader GetRemainder();
    public int ReadChars(Char[] buffer, int index, int count);
    public int ReadBase64(Byte[] array, int offset, int len);
    public int ReadBinHex(Byte[] array, int offset, int len);
    internal XmlTextReaderImpl get_Impl();
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal void set_XmlValidatingReaderCompatibilityMode(bool value);
    internal virtual IDtdInfo get_DtdInfo();
}
internal class System.Xml.XmlTextReaderImpl : XmlReader {
    private static UTF8Encoding s_utf8BomThrowing;
    private bool _useAsync;
    private LaterInitParam _laterInitParam;
    private XmlCharType _xmlCharType;
    private ParsingState _ps;
    private ParsingFunction _parsingFunction;
    private ParsingFunction _nextParsingFunction;
    private ParsingFunction _nextNextParsingFunction;
    private NodeData[] _nodes;
    private NodeData _curNode;
    private int _index;
    private int _curAttrIndex;
    private int _attrCount;
    private int _attrHashtable;
    private int _attrDuplWalkCount;
    private bool _attrNeedNamespaceLookup;
    private bool _fullAttrCleanup;
    private NodeData[] _attrDuplSortingArray;
    private XmlNameTable _nameTable;
    private bool _nameTableFromSettings;
    private XmlResolver _xmlResolver;
    private string _url;
    private bool _normalize;
    private bool _supportNamespaces;
    private WhitespaceHandling _whitespaceHandling;
    private DtdProcessing _dtdProcessing;
    private EntityHandling _entityHandling;
    private bool _ignorePIs;
    private bool _ignoreComments;
    private bool _checkCharacters;
    private int _lineNumberOffset;
    private int _linePositionOffset;
    private bool _closeInput;
    private long _maxCharactersInDocument;
    private long _maxCharactersFromEntities;
    private bool _v1Compat;
    private XmlNamespaceManager _namespaceManager;
    private string _lastPrefix;
    private XmlContext _xmlContext;
    private ParsingState[] _parsingStatesStack;
    private int _parsingStatesStackTop;
    private string _reportedBaseUri;
    private Encoding _reportedEncoding;
    private IDtdInfo _dtdInfo;
    private XmlNodeType _fragmentType;
    private XmlParserContext _fragmentParserContext;
    private bool _fragment;
    private IncrementalReadDecoder _incReadDecoder;
    private IncrementalReadState _incReadState;
    private LineInfo _incReadLineInfo;
    private BinHexDecoder _binHexDecoder;
    private Base64Decoder _base64Decoder;
    private int _incReadDepth;
    private int _incReadLeftStartPos;
    private int _incReadLeftEndPos;
    private IncrementalReadCharsDecoder _readCharsDecoder;
    private int _attributeValueBaseEntityId;
    private bool _emptyEntityInAttributeResolved;
    private IValidationEventHandling _validationEventHandling;
    private OnDefaultAttributeUseDelegate _onDefaultAttributeUse;
    private bool _validatingReaderCompatFlag;
    private bool _addDefaultAttributesAndNormalize;
    private StringBuilder _stringBuilder;
    private bool _rootElementParsed;
    private bool _standalone;
    private int _nextEntityId;
    private ParsingMode _parsingMode;
    private ReadState _readState;
    private IDtdEntityInfo _lastEntity;
    private bool _afterResetState;
    private int _documentStartBytePos;
    private int _readValueOffset;
    private long _charactersInDocument;
    private long _charactersFromEntities;
    private Dictionary`2<IDtdEntityInfo, IDtdEntityInfo> _currentEntities;
    private bool _disableUndeclaredEntityCheck;
    private XmlReader _outerReader;
    private bool _xmlResolverIsSet;
    private string _xml;
    private string _xmlNs;
    private static int MaxBytesToMove;
    private static int ApproxXmlDeclLength;
    private static int NodesInitialSize;
    private static int InitialAttributesCount;
    private static int InitialParsingStateStackSize;
    private static int InitialParsingStatesDepth;
    private static int DtdChidrenInitialSize;
    private static int MaxByteSequenceLen;
    private static int MaxAttrDuplWalkCount;
    private static int MinWhitespaceLookahedCount;
    private static string XmlDeclarationBeginning;
    private ParseEndElementParseFunction _parseEndElement_NextFunc;
    private ParseTextFunction _parseText_NextFunction;
    private ParseTextState _lastParseTextState;
    private Task`1<ValueTuple`4<int, int, int, bool>> _parseText_dummyTask;
    private static UTF8Encoding UTF8BomThrowing { get; }
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public ReadState ReadState { get; }
    public bool EOF { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public int AttributeCount { get; }
    internal XmlReader OuterReader { get; internal set; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal bool Namespaces { get; internal set; }
    internal bool Normalization { get; internal set; }
    internal Encoding Encoding { get; }
    internal WhitespaceHandling WhitespaceHandling { get; internal set; }
    internal DtdProcessing DtdProcessing { get; internal set; }
    internal EntityHandling EntityHandling { get; internal set; }
    internal bool IsResolverSet { get; }
    unknown XmlResolver XmlResolver {internal set; }
    internal XmlNameTable DtdParserProxy_NameTable { get; }
    internal IXmlNamespaceResolver DtdParserProxy_NamespaceResolver { get; }
    internal bool DtdParserProxy_DtdValidation { get; }
    internal bool DtdParserProxy_Normalization { get; }
    internal bool DtdParserProxy_Namespaces { get; }
    internal bool DtdParserProxy_V1CompatibilityMode { get; }
    internal Uri DtdParserProxy_BaseUri { get; }
    internal bool DtdParserProxy_IsEof { get; }
    internal Char[] DtdParserProxy_ParsingBuffer { get; }
    internal int DtdParserProxy_ParsingBufferLength { get; }
    internal int DtdParserProxy_CurrentPosition { get; internal set; }
    internal int DtdParserProxy_EntityStackLength { get; }
    internal bool DtdParserProxy_IsEntityEolNormalized { get; }
    internal IValidationEventHandling DtdParserProxy_ValidationEventHandling { get; internal set; }
    internal int DtdParserProxy_LineNo { get; }
    internal int DtdParserProxy_LineStartPosition { get; }
    private bool IsResolverNull { get; }
    private bool InAttributeValueIterator { get; }
    private bool DtdValidation { get; }
    private bool InEntity { get; }
    internal IDtdInfo DtdInfo { get; }
    unknown IValidationEventHandling ValidationEventHandling {internal set; }
    unknown OnDefaultAttributeUseDelegate OnDefaultAttributeUse {internal set; }
    unknown bool XmlValidatingReaderCompatibilityMode {internal set; }
    internal XmlNodeType FragmentType { get; }
    internal object InternalSchemaType { get; internal set; }
    internal object InternalTypedValue { get; internal set; }
    internal bool StandAlone { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal bool V1Compat { get; }
    internal ConformanceLevel V1ComformanceLevel { get; }
    unknown bool DisableUndeclaredEntityCheck {internal set; }
    internal XmlTextReaderImpl(XmlNameTable nt);
    private XmlTextReaderImpl(XmlResolver resolver, XmlReaderSettings settings, XmlParserContext context);
    internal XmlTextReaderImpl(Stream input);
    internal XmlTextReaderImpl(Stream input, XmlNameTable nt);
    internal XmlTextReaderImpl(string url, Stream input);
    internal XmlTextReaderImpl(string url, Stream input, XmlNameTable nt);
    internal XmlTextReaderImpl(TextReader input);
    internal XmlTextReaderImpl(TextReader input, XmlNameTable nt);
    internal XmlTextReaderImpl(string url, TextReader input);
    internal XmlTextReaderImpl(string url, TextReader input, XmlNameTable nt);
    internal XmlTextReaderImpl(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlTextReaderImpl(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlTextReaderImpl(string xmlFragment, XmlParserContext context);
    public XmlTextReaderImpl(string url);
    public XmlTextReaderImpl(string url, XmlNameTable nt);
    internal XmlTextReaderImpl(string uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver);
    internal XmlTextReaderImpl(Stream stream, Byte[] bytes, int byteCount, XmlReaderSettings settings, Uri baseUri, string baseUriStr, XmlParserContext context, bool closeInput);
    internal XmlTextReaderImpl(TextReader input, XmlReaderSettings settings, string baseUriStr, XmlParserContext context);
    internal XmlTextReaderImpl(string xmlFragment, XmlParserContext context, XmlReaderSettings settings);
    private static UTF8Encoding get_UTF8BomThrowing();
    private void FinishInitUriString();
    private void FinishInitStream();
    private void FinishInitTextReader();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual ReadState get_ReadState();
    public virtual bool get_EOF();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    private void FinishInit();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    internal XmlReader get_OuterReader();
    internal void set_OuterReader(XmlReader value);
    internal void MoveOffEntityReference();
    public virtual string ReadString();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    internal string LookupPrefix(string namespaceName);
    internal bool get_Namespaces();
    internal void set_Namespaces(bool value);
    internal bool get_Normalization();
    internal void set_Normalization(bool value);
    internal Encoding get_Encoding();
    internal WhitespaceHandling get_WhitespaceHandling();
    internal void set_WhitespaceHandling(WhitespaceHandling value);
    internal DtdProcessing get_DtdProcessing();
    internal void set_DtdProcessing(DtdProcessing value);
    internal EntityHandling get_EntityHandling();
    internal void set_EntityHandling(EntityHandling value);
    internal bool get_IsResolverSet();
    internal void set_XmlResolver(XmlResolver value);
    internal void ResetState();
    internal TextReader GetRemainder();
    internal int ReadChars(Char[] buffer, int index, int count);
    internal int ReadBase64(Byte[] array, int offset, int len);
    internal int ReadBinHex(Byte[] array, int offset, int len);
    internal XmlNameTable get_DtdParserProxy_NameTable();
    internal IXmlNamespaceResolver get_DtdParserProxy_NamespaceResolver();
    internal bool get_DtdParserProxy_DtdValidation();
    internal bool get_DtdParserProxy_Normalization();
    internal bool get_DtdParserProxy_Namespaces();
    internal bool get_DtdParserProxy_V1CompatibilityMode();
    internal Uri get_DtdParserProxy_BaseUri();
    internal bool get_DtdParserProxy_IsEof();
    internal Char[] get_DtdParserProxy_ParsingBuffer();
    internal int get_DtdParserProxy_ParsingBufferLength();
    internal int get_DtdParserProxy_CurrentPosition();
    internal void set_DtdParserProxy_CurrentPosition(int value);
    internal int get_DtdParserProxy_EntityStackLength();
    internal bool get_DtdParserProxy_IsEntityEolNormalized();
    internal IValidationEventHandling get_DtdParserProxy_ValidationEventHandling();
    internal void set_DtdParserProxy_ValidationEventHandling(IValidationEventHandling value);
    internal void DtdParserProxy_OnNewLine(int pos);
    internal int get_DtdParserProxy_LineNo();
    internal int get_DtdParserProxy_LineStartPosition();
    internal int DtdParserProxy_ReadData();
    internal int DtdParserProxy_ParseNumericCharRef(StringBuilder internalSubsetBuilder);
    internal int DtdParserProxy_ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder);
    internal void DtdParserProxy_ParsePI(StringBuilder sb);
    internal void DtdParserProxy_ParseComment(StringBuilder sb);
    private bool get_IsResolverNull();
    private XmlResolver GetTempResolver();
    internal bool DtdParserProxy_PushEntity(IDtdEntityInfo entity, Int32& entityId);
    internal bool DtdParserProxy_PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId);
    internal bool DtdParserProxy_PushExternalSubset(string systemId, string publicId);
    internal void DtdParserProxy_PushInternalDtd(string baseUri, string internalDtd);
    internal void DtdParserProxy_Throw(Exception e);
    internal void DtdParserProxy_OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo);
    internal void DtdParserProxy_OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo);
    private void Throw(int pos, string res, string arg);
    private void Throw(int pos, string res, String[] args);
    private void Throw(int pos, string res);
    private void Throw(string res);
    private void Throw(string res, int lineNo, int linePos);
    private void Throw(string res, string arg);
    private void Throw(string res, string arg, int lineNo, int linePos);
    private void Throw(string res, String[] args);
    private void Throw(string res, string arg, Exception innerException);
    private void Throw(string res, String[] args, Exception innerException);
    private void Throw(Exception e);
    private void ReThrow(Exception e, int lineNo, int linePos);
    private void ThrowWithoutLineInfo(string res);
    private void ThrowWithoutLineInfo(string res, string arg);
    private void ThrowWithoutLineInfo(string res, String[] args, Exception innerException);
    private void ThrowInvalidChar(Char[] data, int length, int invCharPos);
    private void SetErrorState();
    private void SendValidationEvent(XmlSeverityType severity, string code, string arg, int lineNo, int linePos);
    private void SendValidationEvent(XmlSeverityType severity, XmlSchemaException exception);
    private bool get_InAttributeValueIterator();
    private void FinishAttributeValueIterator();
    private bool get_DtdValidation();
    private void InitStreamInput(Stream stream, Encoding encoding);
    private void InitStreamInput(string baseUriStr, Stream stream, Encoding encoding);
    private void InitStreamInput(Uri baseUri, Stream stream, Encoding encoding);
    private void InitStreamInput(Uri baseUri, string baseUriStr, Stream stream, Encoding encoding);
    private void InitStreamInput(Uri baseUri, string baseUriStr, Stream stream, Byte[] bytes, int byteCount, Encoding encoding);
    private void InitTextReaderInput(string baseUriStr, TextReader input);
    private void InitTextReaderInput(string baseUriStr, Uri baseUri, TextReader input);
    private void InitStringInput(string baseUriStr, Encoding originalEncoding, string str);
    private void InitFragmentReader(XmlNodeType fragmentType, XmlParserContext parserContext, bool allowXmlDeclFragment);
    private void ProcessDtdFromParserContext(XmlParserContext context);
    private void OpenUrl();
    private Encoding DetectEncoding();
    private void SetupEncoding(Encoding encoding);
    private void EatPreamble();
    private void SwitchEncoding(Encoding newEncoding);
    private Encoding CheckEncoding(string newEncodingName);
    private void UnDecodeChars();
    private void SwitchEncodingToUTF8();
    private int ReadData();
    private int GetChars(int maxCharsCount);
    private void InvalidCharRecovery(Int32& bytesCount, Int32& charsCount);
    internal void Close(bool closeInput);
    private void ShiftBuffer(int sourcePos, int destPos, int count);
    private bool ParseXmlDeclaration(bool isTextDecl);
    private bool ParseDocumentContent();
    private bool ParseElementContent();
    private void ThrowUnclosedElements();
    private void ParseElement();
    private void AddDefaultAttributesAndNormalize();
    private void ParseEndElement();
    private void ThrowTagMismatch(NodeData startTag);
    private void ParseAttributes();
    private void ElementNamespaceLookup();
    private void AttributeNamespaceLookup();
    private void AttributeDuplCheck();
    private void OnDefaultNamespaceDecl(NodeData attr);
    private void OnNamespaceDecl(NodeData attr);
    private void OnXmlReservedAttribute(NodeData attr);
    private void ParseAttributeValueSlow(int curPos, char quoteChar, NodeData attr);
    private void AddAttributeChunkToList(NodeData attr, NodeData chunk, NodeData& lastChunk);
    private bool ParseText();
    private bool ParseText(Int32& startPos, Int32& endPos, Int32& outOrChars);
    private void FinishPartialValue();
    private void FinishOtherValueIterator();
    private void SkipPartialTextValue();
    private void FinishReadValueChunk();
    private void FinishReadContentAsBinary();
    private void FinishReadElementContentAsBinary();
    private bool ParseRootLevelWhitespace();
    private void ParseEntityReference();
    private EntityType HandleEntityReference(bool isInAttributeValue, EntityExpandType expandType, Int32& charRefEndPos);
    private EntityType HandleGeneralEntityReference(string name, bool isInAttributeValue, bool pushFakeEntityIfNullResolver, int entityStartLinePos);
    private bool get_InEntity();
    private bool HandleEntityEnd(bool checkEntityNesting);
    private void SetupEndEntityNodeInContent();
    private void SetupEndEntityNodeInAttribute();
    private bool ParsePI();
    private bool ParsePI(StringBuilder piInDtdStringBuilder);
    private bool ParsePIValue(Int32& outStartPos, Int32& outEndPos);
    private bool ParseComment();
    private void ParseCData();
    private void ParseCDataOrComment(XmlNodeType type);
    private bool ParseCDataOrComment(XmlNodeType type, Int32& outStartPos, Int32& outEndPos);
    private bool ParseDoctypeDecl();
    private void ParseDtd();
    private void SkipDtd();
    private void SkipPublicOrSystemIdLiteral();
    private void SkipUntil(char stopChar, bool recognizeLiterals);
    private int EatWhitespaces(StringBuilder sb);
    private int ParseCharRefInline(int startPos, Int32& charCount, EntityType& entityType);
    private int ParseNumericCharRef(bool expand, StringBuilder internalSubsetBuilder, EntityType& entityType);
    private int ParseNumericCharRefInline(int startPos, bool expand, StringBuilder internalSubsetBuilder, Int32& charCount, EntityType& entityType);
    private int ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder);
    private int ParseNamedCharRefInline(int startPos, bool expand, StringBuilder internalSubsetBuilder);
    private int ParseName();
    private int ParseQName(Int32& colonPos);
    private int ParseQName(bool isQName, int startOffset, Int32& colonPos);
    private bool ReadDataInName(Int32& pos);
    private string ParseEntityName();
    private NodeData AddNode(int nodeIndex, int nodeDepth);
    private NodeData AllocNode(int nodeIndex, int nodeDepth);
    private NodeData AddAttributeNoChecks(string name, int attrDepth);
    private NodeData AddAttribute(int endNamePos, int colonPos);
    private NodeData AddAttribute(string localName, string prefix, string nameWPrefix);
    private void PopElementContext();
    private void OnNewLine(int pos);
    private void OnEof();
    private string LookupNamespace(NodeData node);
    private void AddNamespace(string prefix, string uri, NodeData attr);
    private void ResetAttributes();
    private void FullAttributeCleanup();
    private void PushXmlContext();
    private void PopXmlContext();
    private XmlNodeType GetWhitespaceType();
    private XmlNodeType GetTextNodeType(int orChars);
    private void PushExternalEntityOrSubset(string publicId, string systemId, Uri baseUri, string entityName);
    private bool OpenAndPush(Uri uri);
    private bool PushExternalEntity(IDtdEntityInfo entity);
    private void PushInternalEntity(IDtdEntityInfo entity);
    private void PopEntity();
    private void RegisterEntity(IDtdEntityInfo entity);
    private void UnregisterEntity();
    private void PushParsingState();
    private void PopParsingState();
    private void InitIncrementalRead(IncrementalReadDecoder decoder);
    private int IncrementalRead(Array array, int index, int count);
    private int IncrementalRead();
    private void FinishIncrementalRead();
    private bool ParseFragmentAttribute();
    private bool ParseAttributeValueChunk();
    private void ParseXmlDeclarationFragment();
    private void ThrowUnexpectedToken(int pos, string expectedToken);
    private void ThrowUnexpectedToken(string expectedToken1);
    private void ThrowUnexpectedToken(int pos, string expectedToken1, string expectedToken2);
    private void ThrowUnexpectedToken(string expectedToken1, string expectedToken2);
    private string ParseUnexpectedToken(int pos);
    private string ParseUnexpectedToken();
    private void ThrowExpectingWhitespace(int pos);
    private int GetIndexOfAttributeWithoutPrefix(string name);
    private int GetIndexOfAttributeWithPrefix(string name);
    private bool ZeroEndingStream(int pos);
    private void ParseDtdFromParserContext();
    private bool InitReadContentAsBinary();
    private bool InitReadElementContentAsBinary();
    private bool MoveToNextContentNode(bool moveIfOnContentNode);
    private void SetupReadContentAsBinaryState(ParsingFunction inReadBinaryFunction);
    private void SetupFromParserContext(XmlParserContext context, XmlReaderSettings settings);
    internal virtual IDtdInfo get_DtdInfo();
    internal void SetDtdInfo(IDtdInfo newDtdInfo);
    internal void set_ValidationEventHandling(IValidationEventHandling value);
    internal void set_OnDefaultAttributeUse(OnDefaultAttributeUseDelegate value);
    internal void set_XmlValidatingReaderCompatibilityMode(bool value);
    internal XmlNodeType get_FragmentType();
    internal void ChangeCurrentNodeType(XmlNodeType newNodeType);
    internal XmlResolver GetResolver();
    internal object get_InternalSchemaType();
    internal void set_InternalSchemaType(object value);
    internal object get_InternalTypedValue();
    internal void set_InternalTypedValue(object value);
    internal bool get_StandAlone();
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal bool get_V1Compat();
    internal ConformanceLevel get_V1ComformanceLevel();
    private bool AddDefaultAttributeDtd(IDtdDefaultAttributeInfo defAttrInfo, bool definedInDtd, NodeData[] nameSortedNodeData);
    internal bool AddDefaultAttributeNonDtd(SchemaAttDef attrDef);
    private NodeData AddDefaultAttributeInternal(string localName, string ns, string prefix, string value, int lineNo, int linePos, int valueLineNo, int valueLinePos, bool isXmlAttribute);
    internal void set_DisableUndeclaredEntityCheck(bool value);
    private int ReadContentAsBinary(Byte[] buffer, int index, int count);
    private int ReadElementContentAsBinary(Byte[] buffer, int index, int count);
    private void InitBase64Decoder();
    private void InitBinHexDecoder();
    private bool UriEqual(Uri uri1, string uri1Str, string uri2Str, XmlResolver resolver);
    private void RegisterConsumedCharacters(long characters, bool inEntityReference);
    internal static void AdjustLineInfo(Char[] chars, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo);
    internal static void AdjustLineInfo(string str, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo);
    internal static void AdjustLineInfo(Char* pChars, int length, bool isNormalized, LineInfo& lineInfo);
    internal static string StripSpaces(string value);
    internal static void StripSpaces(Char[] value, int index, Int32& len);
    internal static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    internal static void BlockCopy(Byte[] src, int srcOffset, Byte[] dst, int dstOffset, int count);
    private void CheckAsyncCall();
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_GetValueAsync>d__477")]
private Task`1<string> _GetValueAsync();
    private Task FinishInitAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishInitUriStringAsync>d__479")]
private Task FinishInitUriStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishInitStreamAsync>d__480")]
private Task FinishInitStreamAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishInitTextReaderAsync>d__481")]
private Task FinishInitTextReaderAsync();
    public virtual Task`1<bool> ReadAsync();
    private Task`1<bool> ReadAsync_SwitchToInteractiveXmlDecl();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ReadAsync_SwitchToInteractiveXmlDecl>d__484")]
private Task`1<bool> _ReadAsync_SwitchToInteractiveXmlDecl(Task`1<bool> task);
    private Task`1<bool> ReadAsync_SwitchToInteractiveXmlDecl_Helper(bool finish);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipAsync>d__486")]
public virtual Task SkipAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadContentAsBase64_AsyncHelper>d__487")]
private Task`1<int> ReadContentAsBase64_AsyncHelper(Task`1<bool> task, Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadContentAsBinHexAsync>d__489")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadElementContentAsBase64Async_Helper>d__490")]
private Task`1<int> ReadElementContentAsBase64Async_Helper(Task`1<bool> task, Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadElementContentAsBinHexAsync>d__492")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadValueChunkAsync>d__493")]
public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    internal Task`1<int> DtdParserProxy_ReadDataAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParseNumericCharRefAsync>d__495")]
internal Task`1<int> DtdParserProxy_ParseNumericCharRefAsync(StringBuilder internalSubsetBuilder);
    internal Task`1<int> DtdParserProxy_ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParsePIAsync>d__497")]
internal Task DtdParserProxy_ParsePIAsync(StringBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParseCommentAsync>d__498")]
internal Task DtdParserProxy_ParseCommentAsync(StringBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_PushEntityAsync>d__499")]
internal Task`1<Tuple`2<int, bool>> DtdParserProxy_PushEntityAsync(IDtdEntityInfo entity);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_PushExternalSubsetAsync>d__500")]
internal Task`1<bool> DtdParserProxy_PushExternalSubsetAsync(string systemId, string publicId);
    private Task InitStreamInputAsync(Uri baseUri, Stream stream, Encoding encoding);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<InitStreamInputAsync>d__502")]
private Task InitStreamInputAsync(Uri baseUri, string baseUriStr, Stream stream, Byte[] bytes, int byteCount, Encoding encoding);
    private Task InitTextReaderInputAsync(string baseUriStr, TextReader input);
    private Task InitTextReaderInputAsync(string baseUriStr, Uri baseUri, TextReader input);
    private Task ProcessDtdFromParserContextAsync(XmlParserContext context);
    private Task SwitchEncodingAsync(Encoding newEncoding);
    private Task SwitchEncodingToUTF8Async();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadDataAsync>d__508")]
private Task`1<int> ReadDataAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseXmlDeclarationAsync>d__509")]
private Task`1<bool> ParseXmlDeclarationAsync(bool isTextDecl);
    private Task`1<bool> ParseDocumentContentAsync();
    private Task`1<bool> ParseDocumentContentAsync_CData();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDocumentContentAsync_ParseEntity>d__512")]
private Task`1<bool> ParseDocumentContentAsync_ParseEntity();
    private Task`1<bool> ParseDocumentContentAsync_WhiteSpace();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseDocumentContentAsync_WhiteSpace>d__514")]
private Task`1<bool> _ParseDocumentContentAsync_WhiteSpace(Task`1<bool> task);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDocumentContentAsync_ReadData>d__515")]
private Task`1<bool> ParseDocumentContentAsync_ReadData(bool needMoreChars);
    private Task`1<bool> ParseElementContentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseElementContent_ReadData>d__517")]
private Task`1<bool> ParseElementContent_ReadData();
    private Task ParseElementAsync();
    private Task ParseElementAsync_ContinueWithSetElement(Task`1<ValueTuple`2<int, int>> task);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseElementAsync_ContinueWithSetElement>d__520")]
private Task _ParseElementAsync_ContinueWithSetElement(Task`1<ValueTuple`2<int, int>> task);
    private Task ParseElementAsync_SetElement(int colonPos, int pos);
    private Task ParseElementAsync_NoAttributes();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseElementAsync_ReadData>d__523")]
private Task ParseElementAsync_ReadData(int pos);
    private Task ParseEndElementAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseEndElmentAsync>d__525")]
private Task _ParseEndElmentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEndElmentAsync_PrepareData>d__526")]
private Task ParseEndElmentAsync_PrepareData();
    private Task ParseEndElementAsync_CheckNameAndParse();
    private Task ParseEndElementAsync_Finish(int nameLen, NodeData startTagNode, LineInfo endTagLineInfo);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEndElementAsync_Finish>d__531")]
private Task ParseEndElementAsync_Finish(Task task, int nameLen, NodeData startTagNode, LineInfo endTagLineInfo);
    private Task ParseEndElementAsync_CheckEndTag(int nameLen, NodeData startTagNode, LineInfo endTagLineInfo);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEndElementAsync_ReadData>d__533")]
private Task ParseEndElementAsync_ReadData();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ThrowTagMismatchAsync>d__534")]
private Task ThrowTagMismatchAsync(NodeData startTag);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseAttributesAsync>d__535")]
private Task ParseAttributesAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseAttributeValueSlowAsync>d__536")]
private Task ParseAttributeValueSlowAsync(int curPos, char quoteChar, NodeData attr);
    private Task`1<bool> ParseTextAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseTextAsync>d__538")]
private Task`1<bool> _ParseTextAsync(Task`1<ValueTuple`4<int, int, int, bool>> parseTask);
    private Task`1<bool> ParseTextAsync_IgnoreNode();
    private ValueTask`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync(int outOrChars);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_AsyncFunc>d__546")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_AsyncFunc(Task`1<ValueTuple`4<int, int, int, bool>> task);
    private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_ParseEntity>d__548")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_ParseEntity(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_Surrogate>d__549")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_Surrogate(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_ReadData>d__550")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_ReadData(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    private ValueTuple`4<int, int, int, bool> ParseText_NoValue(int outOrChars, int pos);
    private ValueTuple`4<int, int, int, bool> ParseText_PartialValue(int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishPartialValueAsync>d__553")]
private Task FinishPartialValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishOtherValueIteratorAsync>d__554")]
private Task FinishOtherValueIteratorAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipPartialTextValueAsync>d__555")]
private Task SkipPartialTextValueAsync();
    private Task FinishReadValueChunkAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishReadContentAsBinaryAsync>d__557")]
private Task FinishReadContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishReadElementContentAsBinaryAsync>d__558")]
private Task FinishReadElementContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseRootLevelWhitespaceAsync>d__559")]
private Task`1<bool> ParseRootLevelWhitespaceAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEntityReferenceAsync>d__560")]
private Task ParseEntityReferenceAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<HandleEntityReferenceAsync>d__561")]
private Task`1<ValueTuple`2<int, EntityType>> HandleEntityReferenceAsync(bool isInAttributeValue, EntityExpandType expandType);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<HandleGeneralEntityReferenceAsync>d__562")]
private Task`1<EntityType> HandleGeneralEntityReferenceAsync(string name, bool isInAttributeValue, bool pushFakeEntityIfNullResolver, int entityStartLinePos);
    private Task`1<bool> ParsePIAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParsePIAsync>d__564")]
private Task`1<bool> ParsePIAsync(StringBuilder piInDtdStringBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParsePIValueAsync>d__565")]
private Task`1<ValueTuple`3<int, int, bool>> ParsePIValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseCommentAsync>d__566")]
private Task`1<bool> ParseCommentAsync();
    private Task ParseCDataAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseCDataOrCommentAsync>d__568")]
private Task ParseCDataOrCommentAsync(XmlNodeType type);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseCDataOrCommentTupleAsync>d__569")]
private Task`1<ValueTuple`3<int, int, bool>> ParseCDataOrCommentTupleAsync(XmlNodeType type);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDoctypeDeclAsync>d__570")]
private Task`1<bool> ParseDoctypeDeclAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDtdAsync>d__571")]
private Task ParseDtdAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipDtdAsync>d__572")]
private Task SkipDtdAsync();
    private Task SkipPublicOrSystemIdLiteralAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipUntilAsync>d__574")]
private Task SkipUntilAsync(char stopChar, bool recognizeLiterals);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<EatWhitespacesAsync>d__575")]
private Task`1<int> EatWhitespacesAsync(StringBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseNumericCharRefAsync>d__576")]
private Task`1<ValueTuple`2<EntityType, int>> ParseNumericCharRefAsync(bool expand, StringBuilder internalSubsetBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseNamedCharRefAsync>d__577")]
private Task`1<int> ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseNameAsync>d__578")]
private Task`1<int> ParseNameAsync();
    private Task`1<ValueTuple`2<int, int>> ParseQNameAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseQNameAsync>d__580")]
private Task`1<ValueTuple`2<int, int>> ParseQNameAsync(bool isQName, int startOffset);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadDataInNameAsync>d__581")]
private Task`1<ValueTuple`2<int, bool>> ReadDataInNameAsync(int pos);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEntityNameAsync>d__582")]
private Task`1<string> ParseEntityNameAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<PushExternalEntityOrSubsetAsync>d__583")]
private Task PushExternalEntityOrSubsetAsync(string publicId, string systemId, Uri baseUri, string entityName);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<OpenAndPushAsync>d__584")]
private Task`1<bool> OpenAndPushAsync(Uri uri);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<PushExternalEntityAsync>d__585")]
private Task`1<bool> PushExternalEntityAsync(IDtdEntityInfo entity);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ZeroEndingStreamAsync>d__586")]
private Task`1<bool> ZeroEndingStreamAsync(int pos);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDtdFromParserContextAsync>d__587")]
private Task ParseDtdFromParserContextAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<InitReadContentAsBinaryAsync>d__588")]
private Task`1<bool> InitReadContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<InitReadElementContentAsBinaryAsync>d__589")]
private Task`1<bool> InitReadElementContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<MoveToNextContentNodeAsync>d__590")]
private Task`1<bool> MoveToNextContentNodeAsync(bool moveIfOnContentNode);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadContentAsBinaryAsync>d__591")]
private Task`1<int> ReadContentAsBinaryAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadElementContentAsBinaryAsync>d__592")]
private Task`1<int> ReadElementContentAsBinaryAsync(Byte[] buffer, int index, int count);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlTextWriter : XmlWriter {
    private TextWriter _textWriter;
    private XmlTextEncoder _xmlEncoder;
    private Encoding _encoding;
    private Formatting _formatting;
    private bool _indented;
    private int _indentation;
    private Char[] _indentChars;
    private static Char[] s_defaultIndentChars;
    private TagInfo[] _stack;
    private int _top;
    private State[] _stateTable;
    private State _currentState;
    private Token _lastToken;
    private XmlTextWriterBase64Encoder _base64Encoder;
    private char _quoteChar;
    private char _curQuoteChar;
    private bool _namespaces;
    private SpecialAttr _specialAttr;
    private string _prefixForXmlNs;
    private bool _flush;
    private Namespace[] _nsStack;
    private int _nsTop;
    private Dictionary`2<string, int> _nsHashtable;
    private bool _useNsHashtable;
    private XmlCharType _xmlCharType;
    private static int IndentArrayLength;
    private static char DefaultIndentChar;
    private static int NamespaceStackInitialSize;
    private static int MaxNamespacesWalkCount;
    private static String[] s_stateName;
    private static String[] s_tokenName;
    private static State[] s_stateTableDefault;
    private static State[] s_stateTableDocument;
    private static Char[] s_selfClosingTagOpen;
    private static Char[] s_closeTagEnd;
    public Stream BaseStream { get; }
    public bool Namespaces { get; public set; }
    public Formatting Formatting { get; public set; }
    public int Indentation { get; public set; }
    public char IndentChar { get; public set; }
    public char QuoteChar { get; public set; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public XmlTextWriter(Stream w, Encoding encoding);
    public XmlTextWriter(string filename, Encoding encoding);
    public XmlTextWriter(TextWriter w);
    private static XmlTextWriter();
    private static Char[] CreateDefaultIndentChars();
    public Stream get_BaseStream();
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    private void StartDocument(int standalone);
    private void AutoComplete(Token token);
    private void AutoCompleteAll();
    private void InternalWriteEndElement(bool longFormat);
    private void WriteEndStartTag(bool empty);
    private void WriteEndAttributeQuote();
    private void Indent(bool beforeEndElement);
    private void PushNamespace(string prefix, string ns, bool declared);
    private void AddNamespace(string prefix, string ns, bool declared);
    private void AddToNamespaceHashtable(int namespaceIndex);
    private void PopNamespaces(int indexFrom, int indexTo);
    private string GeneratePrefix();
    private void InternalWriteProcessingInstruction(string name, string text);
    private int LookupNamespace(string prefix);
    private int LookupNamespaceInCurrentScope(string prefix);
    private string FindPrefix(string ns);
    private void InternalWriteName(string name, bool isNCName);
    private void ValidateName(string name, bool isNCName);
    private void HandleSpecialAttribute();
    private void VerifyPrefixXml(string prefix, string ns);
    private void PushStack();
    private void FlushEncoders();
}
internal class System.Xml.XmlTextWriterBase64Encoder : Base64Encoder {
    private XmlTextEncoder _xmlTextEncoder;
    internal XmlTextWriterBase64Encoder(XmlTextEncoder xmlTextEncoder);
    internal virtual void WriteChars(Char[] chars, int index, int count);
    internal virtual Task WriteCharsAsync(Char[] chars, int index, int count);
}
public enum System.Xml.XmlTokenizedType : Enum {
    public int value__;
    public static XmlTokenizedType CDATA;
    public static XmlTokenizedType ID;
    public static XmlTokenizedType IDREF;
    public static XmlTokenizedType IDREFS;
    public static XmlTokenizedType ENTITY;
    public static XmlTokenizedType ENTITIES;
    public static XmlTokenizedType NMTOKEN;
    public static XmlTokenizedType NMTOKENS;
    public static XmlTokenizedType NOTATION;
    public static XmlTokenizedType ENUMERATION;
    public static XmlTokenizedType QName;
    public static XmlTokenizedType NCName;
    public static XmlTokenizedType None;
}
internal class System.Xml.XmlUnspecifiedAttribute : XmlAttribute {
    private bool _fSpecified;
    public bool Specified { get; }
    unknown string InnerText {public set; }
    protected internal XmlUnspecifiedAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual bool get_Specified();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void set_InnerText(string value);
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual void WriteTo(XmlWriter w);
    internal void SetSpecified(bool f);
}
public class System.Xml.XmlUrlResolver : XmlResolver {
    private static object s_DownloadManager;
    private ICredentials _credentials;
    private IWebProxy _proxy;
    private RequestCachePolicy _cachePolicy;
    private static XmlDownloadManager DownloadManager { get; }
    unknown ICredentials Credentials {public set; }
    unknown IWebProxy Proxy {public set; }
    unknown RequestCachePolicy CachePolicy {public set; }
    private static XmlDownloadManager get_DownloadManager();
    public virtual void set_Credentials(ICredentials value);
    public void set_Proxy(IWebProxy value);
    public void set_CachePolicy(RequestCachePolicy value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    [AsyncStateMachineAttribute("System.Xml.XmlUrlResolver/<GetEntityAsync>d__15")]
public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
internal class System.Xml.XmlUtf8RawTextWriter : XmlRawWriter {
    private bool _useAsync;
    protected Byte[] bufBytes;
    protected Stream stream;
    protected Encoding encoding;
    protected XmlCharType xmlCharType;
    protected int bufPos;
    protected int textPos;
    protected int contentPos;
    protected int cdataPos;
    protected int attrEndPos;
    protected int bufLen;
    protected bool writeToNull;
    protected bool hadDoubleBracket;
    protected bool inAttributeValue;
    protected NewLineHandling newLineHandling;
    protected bool closeOutput;
    protected bool omitXmlDeclaration;
    protected string newLineChars;
    protected bool checkCharacters;
    protected XmlStandalone standalone;
    protected XmlOutputMethod outputMethod;
    protected bool autoXmlDeclaration;
    protected bool mergeCDataSections;
    private static int BUFSIZE;
    private static int ASYNCBUFSIZE;
    private static int OVERFLOW;
    private static int INIT_MARKS_COUNT;
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    protected XmlUtf8RawTextWriter(XmlWriterSettings settings);
    public XmlUtf8RawTextWriter(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
    protected virtual void FlushBuffer();
    private void FlushEncoder();
    protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void RawText(string s);
    protected void RawText(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteCommentOrPi(string text, int stopChar);
    protected void WriteCDataSection(string text);
    private static bool IsSurrogateByte(byte b);
    private static Byte* EncodeSurrogate(Char* pSrc, Char* pSrcEnd, Byte* pDst);
    private Byte* InvalidXmlChar(int ch, Byte* pDst, bool entitize);
    internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Byte*& pDst);
    internal static Byte* EncodeMultibyteUTF8(int ch, Byte* pDst);
    internal static void CharToUTF8(Char*& pSrc, Char* pSrcEnd, Byte*& pDst);
    protected Byte* WriteNewLine(Byte* pDst);
    protected static Byte* LtEntity(Byte* pDst);
    protected static Byte* GtEntity(Byte* pDst);
    protected static Byte* AmpEntity(Byte* pDst);
    protected static Byte* QuoteEntity(Byte* pDst);
    protected static Byte* TabEntity(Byte* pDst);
    protected static Byte* LineFeedEntity(Byte* pDst);
    protected static Byte* CarriageReturnEntity(Byte* pDst);
    private static Byte* CharEntity(Byte* pDst, char ch);
    protected static Byte* RawStartCData(Byte* pDst);
    protected static Byte* RawEndCData(Byte* pDst);
    protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace);
    protected void CheckAsyncCall();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteXmlDeclarationAsync>d__86")]
internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteDocTypeAsync>d__88")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    private void WriteStartElementAsync_SetAttEndPos();
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    private void WriteStartAttribute_SetInAttribute();
    protected internal virtual Task WriteEndAttributeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteNamespaceDeclarationAsync>d__96")]
internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteStartNamespaceDeclarationAsync>d__97")]
internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCDataAsync>d__99")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCommentAsync>d__100")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteProcessingInstructionAsync>d__101")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteEntityRefAsync>d__102")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCharEntityAsync>d__103")]
public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteSurrogateCharEntityAsync>d__106")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawAsync>d__108")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawAsync>d__109")]
public virtual Task WriteRawAsync(string data);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<FlushAsync>d__110")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<FlushBufferAsync>d__111")]
protected virtual Task FlushBufferAsync();
    private Task FlushEncoderAsync();
    protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd);
    protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count);
    protected int WriteAttributeTextBlockNoFlush(string text, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteAttributeTextBlockAsync>d__116")]
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteAttributeTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<_WriteAttributeTextBlockAsync>d__118")]
private Task _WriteAttributeTextBlockAsync(string text, int curIndex, int leftCount);
    protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine);
    protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteElementTextBlockAsync>d__122")]
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteElementTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<_WriteElementTextBlockAsync>d__124")]
private Task _WriteElementTextBlockAsync(bool newLine, string text, int curIndex, int leftCount);
    protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd);
    protected int RawTextNoFlush(string text, int index, int count);
    protected Task RawTextAsync(string text);
    protected Task RawTextAsync(string text1, string text2, string text3, string text4);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<_RawTextAsync>d__129")]
private Task _RawTextAsync(string text, int curIndex, int leftCount, string text2, string text3, string text4);
    protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine);
    protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawWithCharCheckingAsync>d__133")]
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawWithCharCheckingAsync>d__134")]
protected Task WriteRawWithCharCheckingAsync(string text);
    protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCommentOrPiAsync>d__136")]
protected Task WriteCommentOrPiAsync(string text, int stopChar);
    protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCDataSectionAsync>d__138")]
protected Task WriteCDataSectionAsync(string text);
}
internal class System.Xml.XmlUtf8RawTextWriterIndent : XmlUtf8RawTextWriter {
    protected int indentLevel;
    protected bool newLineOnAttributes;
    protected string indentChars;
    protected bool mixedContent;
    private BitStack _mixedContentStack;
    protected ConformanceLevel conformanceLevel;
    public XmlWriterSettings Settings { get; }
    public XmlUtf8RawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel currentConformanceLevel);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    private void Init(XmlWriterSettings settings);
    private void WriteIndent();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteDocTypeAsync>d__30")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteStartElementAsync>d__31")]
public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteEndElementAsync>d__32")]
internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteFullEndElementAsync>d__33")]
internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteStartAttributeAsync>d__34")]
protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteCommentAsync>d__36")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteProcessingInstructionAsync>d__37")]
public virtual Task WriteProcessingInstructionAsync(string target, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteIndentAsync>d__47")]
private Task WriteIndentAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string name, string pubid, string sysid, string subset);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__5(string text);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(string name, string text);
}
[ObsoleteAttribute("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.XmlValidatingReader : XmlReader {
    private XmlValidatingReaderImpl _impl;
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public object SchemaType { get; }
    public XmlReader Reader { get; }
    public ValidationType ValidationType { get; public set; }
    public XmlSchemaCollection Schemas { get; }
    public EntityHandling EntityHandling { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    public bool Namespaces { get; public set; }
    public Encoding Encoding { get; }
    internal XmlValidatingReaderImpl Impl { get; }
    internal IDtdInfo DtdInfo { get; }
    public XmlValidatingReader(XmlReader reader);
    public XmlValidatingReader(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlValidatingReader(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string ReadString();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public object get_SchemaType();
    public XmlReader get_Reader();
    public ValidationType get_ValidationType();
    public void set_ValidationType(ValidationType value);
    public XmlSchemaCollection get_Schemas();
    public EntityHandling get_EntityHandling();
    public void set_EntityHandling(EntityHandling value);
    public void set_XmlResolver(XmlResolver value);
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public object ReadTypedValue();
    public Encoding get_Encoding();
    internal XmlValidatingReaderImpl get_Impl();
    internal virtual IDtdInfo get_DtdInfo();
}
internal class System.Xml.XmlValidatingReaderImpl : XmlReader {
    private XmlReader _coreReader;
    private XmlTextReaderImpl _coreReaderImpl;
    private IXmlNamespaceResolver _coreReaderNSResolver;
    private ValidationType _validationType;
    private BaseValidator _validator;
    private XmlSchemaCollection _schemaCollection;
    private bool _processIdentityConstraints;
    private ParsingFunction _parsingFunction;
    private ValidationEventHandling _eventHandling;
    private XmlParserContext _parserContext;
    private ReadContentAsBinaryHelper _readBinaryHelper;
    private XmlReader _outerReader;
    private static XmlResolver s_tempResolver;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public ReadState ReadState { get; }
    public bool EOF { get; }
    public XmlNameTable NameTable { get; }
    internal Encoding Encoding { get; }
    public int AttributeCount { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanResolveEntity { get; }
    internal XmlReader OuterReader { get; internal set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal object SchemaType { get; }
    internal XmlReader Reader { get; }
    internal XmlTextReaderImpl ReaderImpl { get; }
    internal ValidationType ValidationType { get; internal set; }
    internal XmlSchemaCollection Schemas { get; }
    internal EntityHandling EntityHandling { get; internal set; }
    unknown XmlResolver XmlResolver {internal set; }
    internal bool Namespaces { get; internal set; }
    internal BaseValidator Validator { get; internal set; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal bool StandAlone { get; }
    unknown object SchemaTypeObject {internal set; }
    internal object TypedValueObject { get; internal set; }
    internal IDtdInfo DtdInfo { get; }
    internal XmlValidatingReaderImpl(XmlReader reader);
    internal XmlValidatingReaderImpl(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlValidatingReaderImpl(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlValidatingReaderImpl(XmlReader reader, ValidationEventHandler settingsEventHandler, bool processIdentityConstraints);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual ReadState get_ReadState();
    public virtual bool get_EOF();
    public virtual XmlNameTable get_NameTable();
    internal Encoding get_Encoding();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Close();
    public virtual string LookupNamespace(string prefix);
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    internal XmlReader get_OuterReader();
    internal void set_OuterReader(XmlReader value);
    internal void MoveOffEntityReference();
    public virtual string ReadString();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    internal string LookupPrefix(string namespaceName);
    internal void add_ValidationEventHandler(ValidationEventHandler value);
    internal void remove_ValidationEventHandler(ValidationEventHandler value);
    internal object get_SchemaType();
    internal XmlReader get_Reader();
    internal XmlTextReaderImpl get_ReaderImpl();
    internal ValidationType get_ValidationType();
    internal void set_ValidationType(ValidationType value);
    internal XmlSchemaCollection get_Schemas();
    internal EntityHandling get_EntityHandling();
    internal void set_EntityHandling(EntityHandling value);
    internal void set_XmlResolver(XmlResolver value);
    internal bool get_Namespaces();
    internal void set_Namespaces(bool value);
    public object ReadTypedValue();
    private void ParseDtdFromParserContext();
    private void ValidateDtd();
    private void ResolveEntityInternally();
    private void SetupValidation(ValidationType valType);
    private XmlResolver GetResolver();
    private void ProcessCoreReaderEvent();
    internal BaseValidator get_Validator();
    internal void set_Validator(BaseValidator value);
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal bool get_StandAlone();
    internal void set_SchemaTypeObject(object value);
    internal object get_TypedValueObject();
    internal void set_TypedValueObject(object value);
    internal bool AddDefaultAttribute(SchemaAttDef attdef);
    internal virtual IDtdInfo get_DtdInfo();
    internal void ValidateDefaultAttributeOnUse(IDtdDefaultAttributeInfo defaultAttribute, XmlTextReaderImpl coreReader);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadAsync>d__142")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadContentAsBase64Async>d__143")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadContentAsBinHexAsync>d__144")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadElementContentAsBase64Async>d__145")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadElementContentAsBinHexAsync>d__146")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ParseDtdFromParserContextAsync>d__147")]
private Task ParseDtdFromParserContextAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ResolveEntityInternallyAsync>d__148")]
private Task ResolveEntityInternallyAsync();
}
internal class System.Xml.XmlWellFormedWriter : XmlWriter {
    private XmlWriter _writer;
    private XmlRawWriter _rawWriter;
    private IXmlNamespaceResolver _predefinedNamespaces;
    private Namespace[] _nsStack;
    private int _nsTop;
    private Dictionary`2<string, int> _nsHashtable;
    private bool _useNsHashtable;
    private ElementScope[] _elemScopeStack;
    private int _elemTop;
    private AttrName[] _attrStack;
    private int _attrCount;
    private Dictionary`2<string, int> _attrHashTable;
    private SpecialAttribute _specAttr;
    private AttributeValueCache _attrValueCache;
    private string _curDeclPrefix;
    private State[] _stateTable;
    private State _currentState;
    private bool _checkCharacters;
    private bool _omitDuplNamespaces;
    private bool _writeEndDocumentOnClose;
    private ConformanceLevel _conformanceLevel;
    private bool _dtdWritten;
    private bool _xmlDeclFollows;
    private XmlCharType _xmlCharType;
    private SecureStringHasher _hasher;
    private static int ElementStackInitialSize;
    private static int NamespaceStackInitialSize;
    private static int AttributeArrayInitialSize;
    private static int MaxAttrDuplWalkCount;
    private static int MaxNamespacesWalkCount;
    internal static String[] stateName;
    internal static String[] tokenName;
    private static WriteState[] s_state2WriteState;
    private static State[] s_stateTableDocument;
    private static State[] s_stateTableAuto;
    public WriteState WriteState { get; }
    public XmlWriterSettings Settings { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal XmlRawWriter RawWriter { get; }
    private bool SaveAttrValue { get; }
    private bool InBase64 { get; }
    private bool IsClosedOrErrorState { get; }
    internal XmlWellFormedWriter(XmlWriter writer, XmlWriterSettings settings);
    private static XmlWellFormedWriter();
    public virtual WriteState get_WriteState();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceName);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(object value);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    internal XmlRawWriter get_RawWriter();
    private bool get_SaveAttrValue();
    private bool get_InBase64();
    private void SetSpecialAttribute(SpecialAttribute special);
    private void WriteStartDocumentImpl(XmlStandalone standalone);
    private void StartFragment();
    private void PushNamespaceImplicit(string prefix, string ns);
    private bool PushNamespaceExplicit(string prefix, string ns);
    private void AddNamespace(string prefix, string ns, NamespaceKind kind);
    private void AddToNamespaceHashtable(int namespaceIndex);
    private int LookupNamespaceIndex(string prefix);
    private void PopNamespaces(int indexFrom, int indexTo);
    private static XmlException DupAttrException(string prefix, string localName);
    private void AdvanceState(Token token);
    private void StartElementContent();
    private static string GetStateName(State state);
    internal string LookupNamespace(string prefix);
    private string LookupLocalNamespace(string prefix);
    private string GeneratePrefix();
    private void CheckNCName(string ncname);
    private static Exception InvalidCharsException(string name, int badCharIndex);
    private void ThrowInvalidStateTransition(Token token, State currentState);
    private bool get_IsClosedOrErrorState();
    private void AddAttribute(string prefix, string localName, string namespaceName);
    private void AddToAttrHashTable(int attributeIndex);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEndDocumentAsync>d__113")]
public virtual Task WriteEndDocumentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteDocTypeAsync>d__114")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    private Task TryReturnTask(Task task);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_TryReturnTask>d__116")]
private Task _TryReturnTask(Task task);
    private Task SequenceRun(Task task, Func`2<TArg, Task> nextTaskFun, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_SequenceRun>d__118`1")]
private Task _SequenceRun(Task task, Func`2<TArg, Task> nextTaskFun, TArg arg);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    private Task WriteStartElementAsync_NoAdvanceState(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartElementAsync_NoAdvanceState>d__121")]
private Task WriteStartElementAsync_NoAdvanceState(Task task, string prefix, string localName, string ns);
    private void WriteStartElementAsync_FinishWrite(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartElementAsync_FinishWrite>d__123")]
private Task WriteStartElementAsync_FinishWrite(Task t, string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    private Task WriteEndElementAsync_NoAdvanceState();
    private Task WriteEndElementAsync_FinishWrite();
    public virtual Task WriteFullEndElementAsync();
    private Task WriteFullEndElementAsync_NoAdvanceState();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string namespaceName);
    private Task WriteStartAttributeAsync_NoAdvanceState(string prefix, string localName, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartAttributeAsync_NoAdvanceState>d__131")]
private Task WriteStartAttributeAsync_NoAdvanceState(Task task, string prefix, string localName, string namespaceName);
    protected internal virtual Task WriteEndAttributeAsync();
    private Task WriteEndAttributeAsync_NoAdvance();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEndAttributeAsync_SepcialAtt>d__134")]
private Task WriteEndAttributeAsync_SepcialAtt();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCDataAsync>d__135")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCommentAsync>d__136")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteProcessingInstructionAsync>d__137")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEntityRefAsync>d__138")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCharEntityAsync>d__139")]
public virtual Task WriteCharEntityAsync(char ch);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteSurrogateCharEntityAsync>d__140")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteWhitespaceAsync>d__141")]
public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    private Task WriteStringAsync_NoAdvanceState(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStringAsync_NoAdvanceState>d__144")]
private Task WriteStringAsync_NoAdvanceState(Task task, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCharsAsync>d__145")]
public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteRawAsync>d__146")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteRawAsync>d__147")]
public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteBase64Async_NoAdvanceState>d__149")]
private Task WriteBase64Async_NoAdvanceState(Task task, Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<FlushAsync>d__150")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteQualifiedNameAsync>d__151")]
public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteBinHexAsync>d__152")]
public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartDocumentImplAsync>d__153")]
private Task WriteStartDocumentImplAsync(XmlStandalone standalone);
    private Task AdvanceStateAsync_ReturnWhenFinish(Task task, State newState);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_AdvanceStateAsync_ReturnWhenFinish>d__155")]
private Task _AdvanceStateAsync_ReturnWhenFinish(Task task, State newState);
    private Task AdvanceStateAsync_ContinueWhenFinish(Task task, State newState, Token token);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_AdvanceStateAsync_ContinueWhenFinish>d__157")]
private Task _AdvanceStateAsync_ContinueWhenFinish(Task task, State newState, Token token);
    private Task AdvanceStateAsync(Token token);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<StartElementContentAsync_WithNS>d__159")]
private Task StartElementContentAsync_WithNS();
    private Task StartElementContentAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(Byte[] buffer, int index, int count);
}
public class System.Xml.XmlWhitespace : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlWhitespace(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
internal class System.Xml.XmlWrappingReader : XmlReader {
    protected XmlReader reader;
    protected IXmlLineInfo readerAsIXmlLineInfo;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public char QuoteChar { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal IDtdInfo DtdInfo { get; }
    internal XmlWrappingReader(XmlReader baseReader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual char get_QuoteChar();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    internal virtual IDtdInfo get_DtdInfo();
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
}
internal class System.Xml.XmlWrappingWriter : XmlWriter {
    protected XmlWriter writer;
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal XmlWrappingWriter(XmlWriter baseWriter);
    public virtual XmlWriterSettings get_Settings();
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    protected virtual void Dispose(bool disposing);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
}
public abstract class System.Xml.XmlWriter : object {
    private Char[] _writeNodeBuffer;
    private static int WriteNodeBufferSize;
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public virtual XmlWriterSettings get_Settings();
    public abstract virtual void WriteStartDocument();
    public abstract virtual void WriteStartDocument(bool standalone);
    public abstract virtual void WriteEndDocument();
    public abstract virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public void WriteStartElement(string localName, string ns);
    public abstract virtual void WriteStartElement(string prefix, string localName, string ns);
    public void WriteStartElement(string localName);
    public abstract virtual void WriteEndElement();
    public abstract virtual void WriteFullEndElement();
    public void WriteAttributeString(string localName, string ns, string value);
    public void WriteAttributeString(string localName, string value);
    public void WriteAttributeString(string prefix, string localName, string ns, string value);
    public void WriteStartAttribute(string localName, string ns);
    public abstract virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public void WriteStartAttribute(string localName);
    public abstract virtual void WriteEndAttribute();
    public abstract virtual void WriteCData(string text);
    public abstract virtual void WriteComment(string text);
    public abstract virtual void WriteProcessingInstruction(string name, string text);
    public abstract virtual void WriteEntityRef(string name);
    public abstract virtual void WriteCharEntity(char ch);
    public abstract virtual void WriteWhitespace(string ws);
    public abstract virtual void WriteString(string text);
    public abstract virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public abstract virtual void WriteChars(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(string data);
    public abstract virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public abstract virtual WriteState get_WriteState();
    public virtual void Close();
    public abstract virtual void Flush();
    public abstract virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    public void WriteElementString(string localName, string value);
    public void WriteElementString(string localName, string ns, string value);
    public void WriteElementString(string prefix, string localName, string ns, string value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void WriteLocalNamespaces(XPathNavigator nsNav);
    public static XmlWriter Create(string outputFileName);
    public static XmlWriter Create(string outputFileName, XmlWriterSettings settings);
    public static XmlWriter Create(Stream output);
    public static XmlWriter Create(Stream output, XmlWriterSettings settings);
    public static XmlWriter Create(TextWriter output);
    public static XmlWriter Create(TextWriter output, XmlWriterSettings settings);
    public static XmlWriter Create(StringBuilder output);
    public static XmlWriter Create(StringBuilder output, XmlWriterSettings settings);
    public static XmlWriter Create(XmlWriter output);
    public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteAttributeStringAsyncHelper>d__82")]
private Task WriteAttributeStringAsyncHelper(Task task, string value);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteQualifiedNameAsync>d__101")]
public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteAttributesAsync>d__102")]
public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync_CallSyncReader>d__104")]
internal Task WriteNodeAsync_CallSyncReader(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync_CallAsyncReader>d__105")]
internal Task WriteNodeAsync_CallAsyncReader(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync>d__106")]
public virtual Task WriteNodeAsync(XPathNavigator navigator, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteElementStringAsync>d__107")]
public Task WriteElementStringAsync(string prefix, string localName, string ns, string value);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteLocalNamespacesAsync>d__108")]
private Task WriteLocalNamespacesAsync(XPathNavigator nsNav);
}
public class System.Xml.XmlWriterSettings : object {
    private bool _useAsync;
    private Encoding _encoding;
    private bool _omitXmlDecl;
    private NewLineHandling _newLineHandling;
    private string _newLineChars;
    private TriState _indent;
    private string _indentChars;
    private bool _newLineOnAttributes;
    private bool _closeOutput;
    private NamespaceHandling _namespaceHandling;
    private ConformanceLevel _conformanceLevel;
    private bool _checkCharacters;
    private bool _writeEndDocumentOnClose;
    private XmlOutputMethod _outputMethod;
    private List`1<XmlQualifiedName> _cdataSections;
    private bool _doNotEscapeUriAttributes;
    private bool _mergeCDataSections;
    private string _mediaType;
    private string _docTypeSystem;
    private string _docTypePublic;
    private XmlStandalone _standalone;
    private bool _autoXmlDecl;
    private bool _isReadOnly;
    public bool Async { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public NewLineHandling NewLineHandling { get; public set; }
    public string NewLineChars { get; public set; }
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public bool NewLineOnAttributes { get; public set; }
    public bool CloseOutput { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool CheckCharacters { get; public set; }
    public NamespaceHandling NamespaceHandling { get; public set; }
    public bool WriteEndDocumentOnClose { get; public set; }
    public XmlOutputMethod OutputMethod { get; internal set; }
    internal List`1<XmlQualifiedName> CDataSectionElements { get; }
    public bool DoNotEscapeUriAttributes { get; public set; }
    internal bool MergeCDataSections { get; internal set; }
    internal string MediaType { get; internal set; }
    internal string DocTypeSystem { get; internal set; }
    internal string DocTypePublic { get; internal set; }
    internal XmlStandalone Standalone { get; internal set; }
    internal bool AutoXmlDeclaration { get; internal set; }
    internal TriState IndentInternal { get; internal set; }
    internal bool IsQuerySpecific { get; }
    internal bool ReadOnly { get; internal set; }
    internal XmlWriterSettings(XmlQueryDataReader reader);
    public bool get_Async();
    public void set_Async(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_OmitXmlDeclaration();
    public void set_OmitXmlDeclaration(bool value);
    public NewLineHandling get_NewLineHandling();
    public void set_NewLineHandling(NewLineHandling value);
    public string get_NewLineChars();
    public void set_NewLineChars(string value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public string get_IndentChars();
    public void set_IndentChars(string value);
    public bool get_NewLineOnAttributes();
    public void set_NewLineOnAttributes(bool value);
    public bool get_CloseOutput();
    public void set_CloseOutput(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public NamespaceHandling get_NamespaceHandling();
    public void set_NamespaceHandling(NamespaceHandling value);
    public bool get_WriteEndDocumentOnClose();
    public void set_WriteEndDocumentOnClose(bool value);
    public XmlOutputMethod get_OutputMethod();
    internal void set_OutputMethod(XmlOutputMethod value);
    public void Reset();
    public XmlWriterSettings Clone();
    internal List`1<XmlQualifiedName> get_CDataSectionElements();
    public bool get_DoNotEscapeUriAttributes();
    public void set_DoNotEscapeUriAttributes(bool value);
    internal bool get_MergeCDataSections();
    internal void set_MergeCDataSections(bool value);
    internal string get_MediaType();
    internal void set_MediaType(string value);
    internal string get_DocTypeSystem();
    internal void set_DocTypeSystem(string value);
    internal string get_DocTypePublic();
    internal void set_DocTypePublic(string value);
    internal XmlStandalone get_Standalone();
    internal void set_Standalone(XmlStandalone value);
    internal bool get_AutoXmlDeclaration();
    internal void set_AutoXmlDeclaration(bool value);
    internal TriState get_IndentInternal();
    internal void set_IndentInternal(TriState value);
    internal bool get_IsQuerySpecific();
    internal XmlWriter CreateWriter(string outputFileName);
    internal XmlWriter CreateWriter(Stream output);
    internal XmlWriter CreateWriter(TextWriter output);
    internal XmlWriter CreateWriter(XmlWriter output);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    private void CheckReadOnly(string propertyName);
    private void Initialize();
    private XmlWriter AddConformanceWrapper(XmlWriter baseWriter);
    internal void GetObjectData(XmlQueryDataWriter writer);
}
public interface System.Xml.XPath.IXPathNavigable {
    public abstract virtual XPathNavigator CreateNavigator();
}
public enum System.Xml.XPath.XmlCaseOrder : Enum {
    public int value__;
    public static XmlCaseOrder None;
    public static XmlCaseOrder UpperFirst;
    public static XmlCaseOrder LowerFirst;
}
public enum System.Xml.XPath.XmlDataType : Enum {
    public int value__;
    public static XmlDataType Text;
    public static XmlDataType Number;
}
internal class System.Xml.XPath.XmlEmptyNavigator : XPathNavigator {
    private static XmlEmptyNavigator modreq(System.Runtime.CompilerServices.IsVolatile) s_singleton;
    public static XmlEmptyNavigator Singleton { get; }
    public XPathNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public string Value { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public XmlNameTable NameTable { get; }
    public static XmlEmptyNavigator get_Singleton();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_NamespaceURI();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual string get_Value();
    public virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual XmlNameTable get_NameTable();
    public virtual bool MoveToFirstChild();
    public virtual void MoveToRoot();
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToId(string id);
    public virtual string GetAttribute(string localName, string namespaceName);
    public virtual bool MoveToAttribute(string localName, string namespaceName);
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string prefix);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToParent();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual XPathNavigator Clone();
}
public enum System.Xml.XPath.XmlSortOrder : Enum {
    public int value__;
    public static XmlSortOrder Ascending;
    public static XmlSortOrder Descending;
}
public class System.Xml.XPath.XPathDocument : object {
    private XPathNode[] _pageText;
    private XPathNode[] _pageRoot;
    private XPathNode[] _pageXmlNmsp;
    private int _idxText;
    private int _idxRoot;
    private int _idxXmlNmsp;
    private XmlNameTable _nameTable;
    private bool _hasLineInfo;
    private Dictionary`2<XPathNodeRef, XPathNodeRef> _mapNmsp;
    private Dictionary`2<string, XPathNodeRef> _idValueMap;
    internal XmlNameTable NameTable { get; }
    internal bool HasLineInfo { get; }
    internal XPathDocument(XmlNameTable nameTable);
    public XPathDocument(XmlReader reader);
    public XPathDocument(XmlReader reader, XmlSpace space);
    public XPathDocument(TextReader textReader);
    public XPathDocument(Stream stream);
    public XPathDocument(string uri);
    public XPathDocument(string uri, XmlSpace space);
    internal XmlRawWriter LoadFromWriter(LoadFlags flags, string baseUri);
    internal void LoadFromReader(XmlReader reader, XmlSpace space);
    public sealed virtual XPathNavigator CreateNavigator();
    internal XmlNameTable get_NameTable();
    internal bool get_HasLineInfo();
    internal int GetCollapsedTextNode(XPathNode[]& pageText);
    internal void SetCollapsedTextNode(XPathNode[] pageText, int idxText);
    internal int GetRootNode(XPathNode[]& pageRoot);
    internal void SetRootNode(XPathNode[] pageRoot, int idxRoot);
    internal int GetXmlNamespaceNode(XPathNode[]& pageXmlNmsp);
    internal void SetXmlNamespaceNode(XPathNode[] pageXmlNmsp, int idxXmlNmsp);
    internal void AddNamespace(XPathNode[] pageElem, int idxElem, XPathNode[] pageNmsp, int idxNmsp);
    internal int LookupNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    internal void AddIdElement(string id, XPathNode[] pageElem, int idxElem);
    internal int LookupIdElement(string id, XPathNode[]& pageElem);
    private XmlTextReaderImpl SetupReader(XmlTextReaderImpl reader);
}
[TypeForwardedFromAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Xml.XPath.XPathException : SystemException {
    private string _res;
    private String[] _args;
    private string _message;
    public string Message { get; }
    protected XPathException(SerializationInfo info, StreamingContext context);
    public XPathException(string message);
    public XPathException(string message, Exception innerException);
    private XPathException(string res, String[] args);
    private XPathException(string res, String[] args, Exception inner);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static XPathException Create(string res);
    internal static XPathException Create(string res, string arg);
    internal static XPathException Create(string res, string arg, string arg2);
    internal static XPathException Create(string res, string arg, Exception innerException);
    private static string CreateMessage(string res, String[] args);
    public virtual string get_Message();
}
public abstract class System.Xml.XPath.XPathExpression : object {
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual string get_Expression();
    public abstract virtual void AddSort(object expr, IComparer comparer);
    public abstract virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public abstract virtual XPathExpression Clone();
    public abstract virtual void SetContext(XmlNamespaceManager nsManager);
    public abstract virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public abstract virtual XPathResultType get_ReturnType();
    public static XPathExpression Compile(string xpath);
    public static XPathExpression Compile(string xpath, IXmlNamespaceResolver nsResolver);
}
public abstract class System.Xml.XPath.XPathItem : object {
    public bool IsNode { get; }
    public XmlSchemaType XmlType { get; }
    public string Value { get; }
    public object TypedValue { get; }
    public Type ValueType { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public abstract virtual bool get_IsNode();
    public abstract virtual XmlSchemaType get_XmlType();
    public abstract virtual string get_Value();
    public abstract virtual object get_TypedValue();
    public abstract virtual Type get_ValueType();
    public abstract virtual bool get_ValueAsBoolean();
    public abstract virtual DateTime get_ValueAsDateTime();
    public abstract virtual double get_ValueAsDouble();
    public abstract virtual int get_ValueAsInt();
    public abstract virtual long get_ValueAsLong();
    public virtual object ValueAs(Type returnType);
    public abstract virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
}
public enum System.Xml.XPath.XPathNamespaceScope : Enum {
    public int value__;
    public static XPathNamespaceScope All;
    public static XPathNamespaceScope ExcludeXml;
    public static XPathNamespaceScope Local;
}
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XPath.XPathNavigator : XPathItem {
    internal static XPathNavigatorKeyComparer comparer;
    internal static Char[] NodeTypeLetter;
    internal static Char[] UniqueIdTbl;
    internal static int AllMask;
    internal static int NoAttrNmspMask;
    internal static int TextMask;
    internal static Int32[] ContentKindMasks;
    public bool IsNode { get; }
    public XmlSchemaType XmlType { get; }
    public object TypedValue { get; }
    public Type ValueType { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public XmlNameTable NameTable { get; }
    public static IEqualityComparer NavigatorComparer { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public object UnderlyingObject { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public bool CanEdit { get; }
    public string OuterXml { get; public set; }
    public string InnerXml { get; public set; }
    internal UInt32 IndexInParent { get; }
    internal string UniqueId { get; }
    private object debuggerDisplayProxy { get; }
    private static XPathNavigator();
    public virtual string ToString();
    public sealed virtual bool get_IsNode();
    public virtual XmlSchemaType get_XmlType();
    public virtual void SetValue(string value);
    public virtual object get_TypedValue();
    public virtual void SetTypedValue(object typedValue);
    public virtual Type get_ValueType();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual XPathNavigator CreateNavigator();
    public abstract virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string namespaceURI);
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public static IEqualityComparer get_NavigatorComparer();
    public abstract virtual XPathNavigator Clone();
    public abstract virtual XPathNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual string get_Prefix();
    public abstract virtual string get_BaseURI();
    public abstract virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual XmlReader ReadSubtree();
    public virtual void WriteSubtree(XmlWriter writer);
    public virtual object get_UnderlyingObject();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public abstract virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public abstract virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public bool MoveToFirstNamespace();
    public bool MoveToNextNamespace();
    public abstract virtual bool MoveToNext();
    public abstract virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public abstract virtual bool MoveToFirstChild();
    public abstract virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public abstract virtual bool MoveTo(XPathNavigator other);
    public abstract virtual bool MoveToId(string id);
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceURI);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool get_HasChildren();
    public abstract virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator nav);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator nav);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    private XmlReader GetValidatingReader(XmlReader reader, XmlSchemaSet schemas, ValidationEventHandler validationEvent, XmlSchemaType schemaType, XmlSchemaElement schemaElement, XmlSchemaAttribute schemaAttribute);
    public virtual XPathExpression Compile(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNavigator SelectSingleNode(XPathExpression expression);
    public virtual XPathNodeIterator Select(string xpath);
    public virtual XPathNodeIterator Select(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNodeIterator Select(XPathExpression expr);
    public virtual object Evaluate(string xpath);
    public virtual object Evaluate(string xpath, IXmlNamespaceResolver resolver);
    public virtual object Evaluate(XPathExpression expr);
    public virtual object Evaluate(XPathExpression expr, XPathNodeIterator context);
    public virtual bool Matches(XPathExpression expr);
    public virtual bool Matches(string xpath);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectAncestors(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual bool get_CanEdit();
    public virtual XmlWriter PrependChild();
    public virtual XmlWriter AppendChild();
    public virtual XmlWriter InsertAfter();
    public virtual XmlWriter InsertBefore();
    public virtual XmlWriter CreateAttributes();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void ReplaceSelf(string newNode);
    public virtual void ReplaceSelf(XmlReader newNode);
    public virtual void ReplaceSelf(XPathNavigator newNode);
    public virtual string get_OuterXml();
    public virtual void set_OuterXml(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void AppendChild(string newChild);
    public virtual void AppendChild(XmlReader newChild);
    public virtual void AppendChild(XPathNavigator newChild);
    public virtual void PrependChild(string newChild);
    public virtual void PrependChild(XmlReader newChild);
    public virtual void PrependChild(XPathNavigator newChild);
    public virtual void InsertBefore(string newSibling);
    public virtual void InsertBefore(XmlReader newSibling);
    public virtual void InsertBefore(XPathNavigator newSibling);
    public virtual void InsertAfter(string newSibling);
    public virtual void InsertAfter(XmlReader newSibling);
    public virtual void InsertAfter(XPathNavigator newSibling);
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    public virtual void PrependChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual void AppendChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementBefore(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementAfter(string prefix, string localName, string namespaceURI, string value);
    public virtual void CreateAttribute(string prefix, string localName, string namespaceURI, string value);
    internal bool MoveToPrevious(string localName, string namespaceURI);
    internal bool MoveToPrevious(XPathNodeType type);
    internal bool MoveToNonDescendant();
    internal UInt32 get_IndexInParent();
    internal virtual string get_UniqueId();
    private static XPathExpression CompileMatchPattern(string xpath);
    private static int GetDepth(XPathNavigator nav);
    private XmlNodeOrder CompareSiblings(XPathNavigator n1, XPathNavigator n2);
    internal static XmlNamespaceManager GetNamespaces(IXmlNamespaceResolver resolver);
    internal static int GetContentKindMask(XPathNodeType type);
    internal static int GetKindMask(XPathNodeType type);
    internal static bool IsText(XPathNodeType type);
    private bool IsValidChildType(XPathNodeType type);
    private bool IsValidSiblingType(XPathNodeType type);
    private XmlReader CreateReader();
    private XmlReader CreateContextReader(string xml, bool fromCurrentNode);
    internal void BuildSubtree(XmlReader reader, XmlWriter writer);
    private object get_debuggerDisplayProxy();
}
internal class System.Xml.XPath.XPathNavigatorKeyComparer : object {
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object obj1, object obj2);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
internal class System.Xml.XPath.XPathNavigatorReader : XmlReader {
    private XPathNavigator _nav;
    private XPathNavigator _navToRead;
    private int _depth;
    private State _state;
    private XmlNodeType _nodeType;
    private int _attrCount;
    private bool _readEntireDocument;
    protected IXmlLineInfo lineInfo;
    protected IXmlSchemaInfo schemaInfo;
    private ReadContentAsBinaryHelper _readBinaryHelper;
    private State _savedState;
    internal static string space;
    internal static XmlNodeType[] convertFromXPathNodeType;
    internal object UnderlyingObject { get; }
    protected bool IsReading { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    public XmlNameTable NameTable { get; }
    public XmlReaderSettings Settings { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public XmlNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool CanReadBinaryContent { get; }
    public int Depth { get; }
    protected XPathNavigatorReader(XPathNavigator navToRead, IXmlLineInfo xli, IXmlSchemaInfo xsi);
    private static XPathNavigatorReader();
    internal static XmlNodeType ToXmlNodeType(XPathNodeType typ);
    internal object get_UnderlyingObject();
    public static XPathNavigatorReader Create(XPathNavigator navToRead);
    protected bool get_IsReading();
    internal virtual XmlNamespaceManager get_NamespaceManager();
    public virtual XmlNameTable get_NameTable();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public virtual XmlReaderSettings get_Settings();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_NamespaceURI();
    public virtual string get_LocalName();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    private XPathNavigator GetElemNav();
    private XPathNavigator GetElemNav(Int32& depth);
    private void MoveToAttr(XPathNavigator nav, int depth);
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    private static string GetNamespaceByIndex(XPathNavigator nav, int index, Int32& count);
    public virtual string GetAttribute(int index);
    public virtual bool MoveToAttribute(string localName, string namespaceName);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToElement();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string LookupNamespace(string prefix);
    public virtual int get_Depth();
    public virtual bool Read();
    public virtual void Close();
    private void SetEOF();
}
internal class System.Xml.XPath.XPathNavigatorReaderWithSI : XPathNavigatorReader {
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    internal XPathNavigatorReaderWithSI(XPathNavigator navToRead, IXmlLineInfo xli, IXmlSchemaInfo xsi);
    public virtual XmlSchemaValidity get_Validity();
    public virtual bool get_IsDefault();
    public virtual bool get_IsNil();
    public virtual XmlSchemaSimpleType get_MemberType();
    public virtual XmlSchemaType get_SchemaType();
    public virtual XmlSchemaElement get_SchemaElement();
    public virtual XmlSchemaAttribute get_SchemaAttribute();
}
[DebuggerDisplayAttribute("Position={CurrentPosition}, Current={debuggerDisplayProxy}")]
public abstract class System.Xml.XPath.XPathNodeIterator : object {
    internal int count;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private object debuggerDisplayProxy { get; }
    private sealed virtual override object System.ICloneable.Clone();
    public abstract virtual XPathNodeIterator Clone();
    public abstract virtual bool MoveNext();
    public abstract virtual XPathNavigator get_Current();
    public abstract virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    private object get_debuggerDisplayProxy();
}
public enum System.Xml.XPath.XPathNodeType : Enum {
    public int value__;
    public static XPathNodeType Root;
    public static XPathNodeType Element;
    public static XPathNodeType Attribute;
    public static XPathNodeType Namespace;
    public static XPathNodeType Text;
    public static XPathNodeType SignificantWhitespace;
    public static XPathNodeType Whitespace;
    public static XPathNodeType ProcessingInstruction;
    public static XPathNodeType Comment;
    public static XPathNodeType All;
}
public enum System.Xml.XPath.XPathResultType : Enum {
    public int value__;
    public static XPathResultType Number;
    public static XPathResultType String;
    public static XPathResultType Boolean;
    public static XPathResultType NodeSet;
    public static XPathResultType Navigator;
    public static XPathResultType Any;
    public static XPathResultType Error;
}
internal class System.Xml.XPathNodeList : XmlNodeList {
    private List`1<XmlNode> _list;
    private XPathNodeIterator _nodeIterator;
    private bool _done;
    private static Object[] s_nullparams;
    public int Count { get; }
    public XPathNodeList(XPathNodeIterator nodeIterator);
    private static XPathNodeList();
    public virtual int get_Count();
    private XmlNode GetNode(XPathNavigator n);
    internal int ReadUntil(int index);
    public virtual XmlNode Item(int index);
    public virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.XsdCachingReader : XmlReader {
    private XmlReader _coreReader;
    private XmlNameTable _coreReaderNameTable;
    private ValidatingReaderNodeData[] _contentEvents;
    private ValidatingReaderNodeData[] _attributeEvents;
    private ValidatingReaderNodeData _cachedNode;
    private CachingReaderState _cacheState;
    private int _contentIndex;
    private int _attributeCount;
    private bool _returnOriginalStringValues;
    private CachingEventHandler _cacheHandler;
    private int _currentAttrIndex;
    private int _currentContentIndex;
    private bool _readAhead;
    private IXmlLineInfo _lineInfo;
    private ValidatingReaderNodeData _textNode;
    private static int InitialAttributeCount;
    private static int InitialContentCount;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    internal XsdCachingReader(XmlReader reader, IXmlLineInfo lineInfo, CachingEventHandler handlerMethod);
    private void Init();
    internal void Reset(XmlReader reader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    internal ValidatingReaderNodeData RecordTextNode(string textValue, string originalStringValue, int depth, int lineNo, int linePos);
    internal void SwitchTextNodeAndEndElement(string textValue, string originalStringValue);
    internal void RecordEndElementNode();
    internal string ReadOriginalContentAsString();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    internal void SetToReplayMode();
    internal XmlReader GetCoreReader();
    internal IXmlLineInfo GetLineInfo();
    private void ClearAttributesInfo();
    private ValidatingReaderNodeData AddAttribute(int attIndex);
    private ValidatingReaderNodeData AddContent(XmlNodeType nodeType);
    private void RecordAttributes();
    private int GetAttributeIndexWithoutPrefix(string name);
    private int GetAttributeIndexWithPrefix(string name);
    private ValidatingReaderNodeData CreateDummyTextNode(string attributeValue, int depth);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdCachingReader/<ReadAsync>d__98")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdCachingReader/<SkipAsync>d__99")]
public virtual Task SkipAsync();
    internal Task SetToReplayModeAsync();
}
internal class System.Xml.XsdValidatingReader : XmlReader {
    private XmlReader _coreReader;
    private IXmlNamespaceResolver _coreReaderNSResolver;
    private IXmlNamespaceResolver _thisNSResolver;
    private XmlSchemaValidator _validator;
    private XmlResolver _xmlResolver;
    private ValidationEventHandler _validationEvent;
    private ValidatingReaderState _validationState;
    private XmlValueGetter _valueGetter;
    private XmlNamespaceManager _nsManager;
    private bool _manageNamespaces;
    private bool _processInlineSchema;
    private bool _replayCache;
    private ValidatingReaderNodeData _cachedNode;
    private AttributePSVIInfo _attributePSVI;
    private int _attributeCount;
    private int _coreReaderAttributeCount;
    private int _currentAttrIndex;
    private AttributePSVIInfo[] _attributePSVINodes;
    private ArrayList _defaultAttributes;
    private Parser _inlineSchemaParser;
    private object _atomicValue;
    private XmlSchemaInfo _xmlSchemaInfo;
    private string _originalAtomicValueString;
    private XmlNameTable _coreReaderNameTable;
    private XsdCachingReader _cachingReader;
    private ValidatingReaderNodeData _textNode;
    private string _nsXmlNs;
    private string _nsXs;
    private string _nsXsi;
    private string _xsiType;
    private string _xsiNil;
    private string _xsdSchema;
    private string _xsiSchemaLocation;
    private string _xsiNoNamespaceSchemaLocation;
    private XmlCharType _xmlCharType;
    private IXmlLineInfo _lineInfo;
    private ReadContentAsBinaryHelper _readBinaryHelper;
    private ValidatingReaderState _savedState;
    private static int InitialAttributeCount;
    private static Type modreq(System.Runtime.CompilerServices.IsVolatile) s_typeOfString;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanReadBinaryContent { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsDefault { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsNil { get; }
    private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.Validity { get; }
    private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.MemberType { get; }
    private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.SchemaType { get; }
    private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.SchemaElement { get; }
    private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    private XmlSchemaType ElementXmlType { get; }
    private XmlSchemaType AttributeXmlType { get; }
    private XmlSchemaInfo AttributeSchemaInfo { get; }
    internal XsdValidatingReader(XmlReader reader, XmlResolver xmlResolver, XmlReaderSettings readerSettings, XmlSchemaObject partialValidationType);
    internal XsdValidatingReader(XmlReader reader, XmlResolver xmlResolver, XmlReaderSettings readerSettings);
    private void Init();
    private void SetupValidator(XmlReaderSettings readerSettings, XmlReader reader, XmlSchemaObject partialValidationType);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual bool ReadElementContentAsBoolean();
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual double ReadElementContentAsDouble();
    public virtual float ReadElementContentAsFloat();
    public virtual decimal ReadElementContentAsDecimal();
    public virtual int ReadElementContentAsInt();
    public virtual long ReadElementContentAsLong();
    public virtual string ReadElementContentAsString();
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsDefault();
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsNil();
    private sealed virtual override XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.get_Validity();
    private sealed virtual override XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.get_MemberType();
    private sealed virtual override XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.get_SchemaType();
    private sealed virtual override XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement();
    private sealed virtual override XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private object GetStringValue();
    private XmlSchemaType get_ElementXmlType();
    private XmlSchemaType get_AttributeXmlType();
    private XmlSchemaInfo get_AttributeSchemaInfo();
    private void ProcessReaderEvent();
    private void ProcessElementEvent();
    private void ProcessEndElementEvent();
    private void ValidateAttributes();
    private void ClearAttributesInfo();
    private AttributePSVIInfo GetAttributePSVI(string name);
    private AttributePSVIInfo GetAttributePSVI(string localName, string ns);
    private ValidatingReaderNodeData GetDefaultAttribute(string name, bool updatePosition);
    private ValidatingReaderNodeData GetDefaultAttribute(string attrLocalName, string ns, bool updatePosition);
    private AttributePSVIInfo AddAttributePSVI(int attIndex);
    private bool IsXSDRoot(string localName, string ns);
    private void ProcessInlineSchema();
    private object InternalReadContentAsObject();
    private object InternalReadContentAsObject(bool unwrapTypedValue);
    private object InternalReadContentAsObject(bool unwrapTypedValue, String& originalStringValue);
    private object InternalReadElementContentAsObject(XmlSchemaType& xmlType);
    private object InternalReadElementContentAsObject(XmlSchemaType& xmlType, bool unwrapTypedValue);
    private object InternalReadElementContentAsObject(XmlSchemaType& xmlType, bool unwrapTypedValue, String& originalString);
    private object ReadTillEndElement();
    private void SwitchReader();
    private void ReadAheadForMemberType();
    private void GetIsDefault();
    private void GetMemberType();
    private object ReturnBoxedValue(object typedValue, XmlSchemaType xmlType, bool unWrap);
    private XsdCachingReader GetCachingReader();
    internal ValidatingReaderNodeData CreateDummyTextNode(string attributeValue, int depth);
    internal void CachingCallBack(XsdCachingReader cachingReader);
    private string GetOriginalAtomicValueStringOfElement();
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<object> ReadContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsStringAsync>d__187")]
public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsAsync>d__188")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsObjectAsync>d__189")]
public virtual Task`1<object> ReadElementContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsStringAsync>d__190")]
public virtual Task`1<string> ReadElementContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsAsync>d__191")]
public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    private Task`1<bool> ReadAsync_Read(Task`1<bool> task);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<_ReadAsync_Read>d__193")]
private Task`1<bool> _ReadAsync_Read(Task`1<bool> task);
    private Task`1<bool> ReadAsync_ReadAhead(Task task);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<_ReadAsync_ReadAhead>d__195")]
private Task`1<bool> _ReadAsync_ReadAhead(Task task);
    public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<SkipAsync>d__197")]
public virtual Task SkipAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsBase64Async>d__198")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsBinHexAsync>d__199")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsBase64Async>d__200")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsBinHexAsync>d__201")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    private Task ProcessReaderEventAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ProcessElementEventAsync>d__203")]
private Task ProcessElementEventAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ProcessEndElementEventAsync>d__204")]
private Task ProcessEndElementEventAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ProcessInlineSchemaAsync>d__205")]
private Task ProcessInlineSchemaAsync();
    private Task`1<object> InternalReadContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<InternalReadContentAsObjectAsync>d__207")]
private Task`1<object> InternalReadContentAsObjectAsync(bool unwrapTypedValue);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<InternalReadContentAsObjectTupleAsync>d__208")]
private Task`1<Tuple`2<string, object>> InternalReadContentAsObjectTupleAsync(bool unwrapTypedValue);
    private Task`1<Tuple`2<XmlSchemaType, object>> InternalReadElementContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<InternalReadElementContentAsObjectAsync>d__210")]
private Task`1<Tuple`2<XmlSchemaType, object>> InternalReadElementContentAsObjectAsync(bool unwrapTypedValue);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<InternalReadElementContentAsObjectTupleAsync>d__211")]
private Task`1<Tuple`3<XmlSchemaType, string, object>> InternalReadElementContentAsObjectTupleAsync(bool unwrapTypedValue);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadTillEndElementAsync>d__212")]
private Task`1<object> ReadTillEndElementAsync();
}
internal interface System.Xml.Xsl.IErrorHelper {
    public abstract virtual void ReportError(string res, String[] args);
    public abstract virtual void ReportWarning(string res, String[] args);
}
internal class System.Xml.Xsl.IListEnumerator`1 : ValueType {
    private IList`1<T> _sequence;
    private int _index;
    private T _current;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public IListEnumerator`1(IList`1<T> sequence);
    public sealed virtual void Dispose();
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
internal class System.Xml.Xsl.Int32Pair : ValueType {
    private int _left;
    private int _right;
    public int Left { get; }
    public int Right { get; }
    public Int32Pair(int left, int right);
    public int get_Left();
    public int get_Right();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal interface System.Xml.Xsl.ISourceLineInfo {
    public string Uri { get; }
    public bool IsNoSource { get; }
    public Location Start { get; }
    public Location End { get; }
    public abstract virtual string get_Uri();
    public abstract virtual bool get_IsNoSource();
    public abstract virtual Location get_Start();
    public abstract virtual Location get_End();
}
public interface System.Xml.Xsl.IXsltContextFunction {
    public int Minargs { get; }
    public int Maxargs { get; }
    public XPathResultType ReturnType { get; }
    public XPathResultType[] ArgTypes { get; }
    public abstract virtual int get_Minargs();
    public abstract virtual int get_Maxargs();
    public abstract virtual XPathResultType get_ReturnType();
    public abstract virtual XPathResultType[] get_ArgTypes();
    public abstract virtual object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext);
}
public interface System.Xml.Xsl.IXsltContextVariable {
    public bool IsLocal { get; }
    public bool IsParam { get; }
    public XPathResultType VariableType { get; }
    public abstract virtual bool get_IsLocal();
    public abstract virtual bool get_IsParam();
    public abstract virtual XPathResultType get_VariableType();
    public abstract virtual object Evaluate(XsltContext xsltContext);
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Xml.Xsl.ListBase`1 : object {
    public int Count { get; }
    public T Item { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(int index);
    public abstract virtual void set_Item(int index, T value);
    public virtual bool Contains(T value);
    public virtual int IndexOf(T value);
    public virtual void CopyTo(T[] array, int index);
    public virtual IListEnumerator`1<T> GetEnumerator();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual void Add(T value);
    public virtual void Insert(int index, T value);
    public virtual bool Remove(T value);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private static bool IsCompatibleType(object value);
}
[DebuggerDisplayAttribute("({Line},{Pos})")]
internal class System.Xml.Xsl.Location : ValueType {
    private ulong _value;
    public int Line { get; }
    public int Pos { get; }
    public Location(int line, int pos);
    public int get_Line();
    public int get_Pos();
    public bool LessOrEqual(Location that);
}
internal interface System.Xml.Xsl.Qil.IQilAnnotation {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilBinary : QilNode {
    private QilNode _left;
    private QilNode _right;
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilNode Left { get; public set; }
    public QilNode Right { get; public set; }
    public QilBinary(QilNodeType nodeType, QilNode left, QilNode right);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public QilNode get_Left();
    public void set_Left(QilNode value);
    public QilNode get_Right();
    public void set_Right(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilChoice : QilBinary {
    public QilNode Expression { get; public set; }
    public QilList Branches { get; public set; }
    public QilChoice(QilNodeType nodeType, QilNode expression, QilNode branches);
    public QilNode get_Expression();
    public void set_Expression(QilNode value);
    public QilList get_Branches();
    public void set_Branches(QilList value);
}
internal class System.Xml.Xsl.Qil.QilCloneVisitor : QilScopedVisitor {
    private QilFactory _fac;
    private SubstitutionList _subs;
    public QilCloneVisitor(QilFactory fac);
    public QilCloneVisitor(QilFactory fac, SubstitutionList subs);
    public QilNode Clone(QilNode node);
    protected virtual QilNode Visit(QilNode oldNode);
    protected virtual QilNode VisitChildren(QilNode parent);
    protected virtual QilNode VisitReference(QilNode oldNode);
    protected virtual void BeginScope(QilNode node);
    protected virtual void EndScope(QilNode node);
    protected QilNode FindClonedReference(QilNode node);
}
internal class System.Xml.Xsl.Qil.QilDataSource : QilBinary {
    public QilNode Name { get; public set; }
    public QilNode BaseUri { get; public set; }
    public QilDataSource(QilNodeType nodeType, QilNode name, QilNode baseUri);
    public QilNode get_Name();
    public void set_Name(QilNode value);
    public QilNode get_BaseUri();
    public void set_BaseUri(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilDepthChecker : object {
    private static int MAX_QIL_DEPTH;
    private Dictionary`2<QilNode, bool> _visitedRef;
    public static void Check(QilNode input);
    private void Check(QilNode input, int depth);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilExpression : QilNode {
    private QilFactory _factory;
    private QilNode _isDebug;
    private QilNode _defWSet;
    private QilNode _wsRules;
    private QilNode _gloVars;
    private QilNode _gloParams;
    private QilNode _earlBnd;
    private QilNode _funList;
    private QilNode _rootNod;
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilFactory Factory { get; public set; }
    public bool IsDebug { get; public set; }
    public XmlWriterSettings DefaultWriterSettings { get; public set; }
    public IList`1<WhitespaceRule> WhitespaceRules { get; public set; }
    public QilList GlobalParameterList { get; public set; }
    public QilList GlobalVariableList { get; public set; }
    public IList`1<EarlyBoundInfo> EarlyBoundTypes { get; public set; }
    public QilList FunctionList { get; public set; }
    public QilNode Root { get; public set; }
    public QilExpression(QilNodeType nodeType, QilNode root, QilFactory factory);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public QilFactory get_Factory();
    public void set_Factory(QilFactory value);
    public bool get_IsDebug();
    public void set_IsDebug(bool value);
    public XmlWriterSettings get_DefaultWriterSettings();
    public void set_DefaultWriterSettings(XmlWriterSettings value);
    public IList`1<WhitespaceRule> get_WhitespaceRules();
    public void set_WhitespaceRules(IList`1<WhitespaceRule> value);
    public QilList get_GlobalParameterList();
    public void set_GlobalParameterList(QilList value);
    public QilList get_GlobalVariableList();
    public void set_GlobalVariableList(QilList value);
    public IList`1<EarlyBoundInfo> get_EarlyBoundTypes();
    public void set_EarlyBoundTypes(IList`1<EarlyBoundInfo> value);
    public QilList get_FunctionList();
    public void set_FunctionList(QilList value);
    public QilNode get_Root();
    public void set_Root(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilFactory : object {
    private QilTypeChecker _typeCheck;
    public QilTypeChecker TypeChecker { get; }
    public QilTypeChecker get_TypeChecker();
    public QilExpression QilExpression(QilNode root, QilFactory factory);
    public QilList ActualParameterList(IList`1<QilNode> values);
    public QilList FormalParameterList(IList`1<QilNode> values);
    public QilList BranchList(IList`1<QilNode> values);
    public QilList Sequence(IList`1<QilNode> values);
    public QilParameter Parameter(XmlQueryType xmlType);
    public QilStrConcat StrConcat(QilNode values);
    public QilName LiteralQName(string local);
    public QilTargetType TypeAssert(QilNode expr, XmlQueryType xmlType);
    public QilTargetType IsType(QilNode expr, XmlQueryType xmlType);
    public QilTargetType XsltConvert(QilNode expr, XmlQueryType xmlType);
    public QilFunction Function(QilNode arguments, QilNode sideEffects, XmlQueryType xmlType);
    public QilList FunctionList();
    public QilList GlobalVariableList();
    public QilList GlobalParameterList();
    public QilList ActualParameterList();
    public QilList FormalParameterList();
    public QilList SortKeyList();
    public QilList BranchList();
    public QilUnary OptimizeBarrier(QilNode child);
    public QilNode Unknown(XmlQueryType xmlType);
    public QilDataSource DataSource(QilNode name, QilNode baseUri);
    public QilUnary Nop(QilNode child);
    public QilUnary Error(QilNode child);
    public QilUnary Warning(QilNode child);
    public QilIterator For(QilNode binding);
    public QilIterator Let(QilNode binding);
    public QilParameter Parameter(QilNode defaultValue, QilNode name, XmlQueryType xmlType);
    public QilUnary PositionOf(QilNode child);
    public QilNode True();
    public QilNode False();
    public QilLiteral LiteralString(string value);
    public QilLiteral LiteralInt32(int value);
    public QilLiteral LiteralInt64(long value);
    public QilLiteral LiteralDouble(double value);
    public QilLiteral LiteralDecimal(decimal value);
    public QilName LiteralQName(string localName, string namespaceUri, string prefix);
    public QilLiteral LiteralType(XmlQueryType value);
    public QilLiteral LiteralObject(object value);
    public QilBinary And(QilNode left, QilNode right);
    public QilBinary Or(QilNode left, QilNode right);
    public QilUnary Not(QilNode child);
    public QilTernary Conditional(QilNode left, QilNode center, QilNode right);
    public QilChoice Choice(QilNode expression, QilNode branches);
    public QilUnary Length(QilNode child);
    public QilList Sequence();
    public QilBinary Union(QilNode left, QilNode right);
    public QilBinary Intersection(QilNode left, QilNode right);
    public QilBinary Difference(QilNode left, QilNode right);
    public QilUnary Sum(QilNode child);
    public QilUnary Negate(QilNode child);
    public QilBinary Add(QilNode left, QilNode right);
    public QilBinary Subtract(QilNode left, QilNode right);
    public QilBinary Multiply(QilNode left, QilNode right);
    public QilBinary Divide(QilNode left, QilNode right);
    public QilBinary Modulo(QilNode left, QilNode right);
    public QilUnary StrLength(QilNode child);
    public QilStrConcat StrConcat(QilNode delimiter, QilNode values);
    public QilBinary StrParseQName(QilNode left, QilNode right);
    public QilBinary Ne(QilNode left, QilNode right);
    public QilBinary Eq(QilNode left, QilNode right);
    public QilBinary Gt(QilNode left, QilNode right);
    public QilBinary Ge(QilNode left, QilNode right);
    public QilBinary Lt(QilNode left, QilNode right);
    public QilBinary Le(QilNode left, QilNode right);
    public QilBinary Is(QilNode left, QilNode right);
    public QilBinary Before(QilNode left, QilNode right);
    public QilLoop Loop(QilNode variable, QilNode body);
    public QilLoop Filter(QilNode variable, QilNode body);
    public QilLoop Sort(QilNode variable, QilNode body);
    public QilSortKey SortKey(QilNode key, QilNode collation);
    public QilUnary DocOrderDistinct(QilNode child);
    public QilFunction Function(QilNode arguments, QilNode definition, QilNode sideEffects, XmlQueryType xmlType);
    public QilInvoke Invoke(QilNode function, QilNode arguments);
    public QilUnary Content(QilNode child);
    public QilBinary Attribute(QilNode left, QilNode right);
    public QilUnary Parent(QilNode child);
    public QilUnary Root(QilNode child);
    public QilNode XmlContext();
    public QilUnary Descendant(QilNode child);
    public QilUnary DescendantOrSelf(QilNode child);
    public QilUnary Ancestor(QilNode child);
    public QilUnary AncestorOrSelf(QilNode child);
    public QilUnary Preceding(QilNode child);
    public QilUnary FollowingSibling(QilNode child);
    public QilUnary PrecedingSibling(QilNode child);
    public QilBinary NodeRange(QilNode left, QilNode right);
    public QilBinary Deref(QilNode left, QilNode right);
    public QilBinary ElementCtor(QilNode left, QilNode right);
    public QilBinary AttributeCtor(QilNode left, QilNode right);
    public QilUnary CommentCtor(QilNode child);
    public QilBinary PICtor(QilNode left, QilNode right);
    public QilUnary TextCtor(QilNode child);
    public QilUnary RawTextCtor(QilNode child);
    public QilUnary DocumentCtor(QilNode child);
    public QilBinary NamespaceDecl(QilNode left, QilNode right);
    public QilBinary RtfCtor(QilNode left, QilNode right);
    public QilUnary NameOf(QilNode child);
    public QilUnary LocalNameOf(QilNode child);
    public QilUnary NamespaceUriOf(QilNode child);
    public QilUnary PrefixOf(QilNode child);
    public QilTargetType TypeAssert(QilNode source, QilNode targetType);
    public QilTargetType IsType(QilNode source, QilNode targetType);
    public QilUnary IsEmpty(QilNode child);
    public QilUnary XPathNodeValue(QilNode child);
    public QilUnary XPathFollowing(QilNode child);
    public QilUnary XPathPreceding(QilNode child);
    public QilUnary XPathNamespace(QilNode child);
    public QilUnary XsltGenerateId(QilNode child);
    public QilInvokeLateBound XsltInvokeLateBound(QilNode name, QilNode arguments);
    public QilInvokeEarlyBound XsltInvokeEarlyBound(QilNode name, QilNode clrMethod, QilNode arguments, XmlQueryType xmlType);
    public QilBinary XsltCopy(QilNode left, QilNode right);
    public QilUnary XsltCopyOf(QilNode child);
    public QilTargetType XsltConvert(QilNode source, QilNode targetType);
    [ConditionalAttribute("QIL_TRACE_NODE_CREATION")]
public void TraceNode(QilNode n);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilFunction : QilReference {
    private QilNode _arguments;
    private QilNode _definition;
    private QilNode _sideEffects;
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilList Arguments { get; public set; }
    public QilNode Definition { get; public set; }
    public bool MaybeSideEffects { get; public set; }
    public QilFunction(QilNodeType nodeType, QilNode arguments, QilNode definition, QilNode sideEffects, XmlQueryType resultType);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public QilList get_Arguments();
    public void set_Arguments(QilList value);
    public QilNode get_Definition();
    public void set_Definition(QilNode value);
    public bool get_MaybeSideEffects();
    public void set_MaybeSideEffects(bool value);
}
internal class System.Xml.Xsl.Qil.QilInvoke : QilBinary {
    public QilFunction Function { get; public set; }
    public QilList Arguments { get; public set; }
    public QilInvoke(QilNodeType nodeType, QilNode function, QilNode arguments);
    public QilFunction get_Function();
    public void set_Function(QilFunction value);
    public QilList get_Arguments();
    public void set_Arguments(QilList value);
}
internal class System.Xml.Xsl.Qil.QilInvokeEarlyBound : QilTernary {
    public QilName Name { get; public set; }
    public MethodInfo ClrMethod { get; public set; }
    public QilList Arguments { get; public set; }
    public QilInvokeEarlyBound(QilNodeType nodeType, QilNode name, QilNode method, QilNode arguments, XmlQueryType resultType);
    public QilName get_Name();
    public void set_Name(QilName value);
    public MethodInfo get_ClrMethod();
    public void set_ClrMethod(MethodInfo value);
    public QilList get_Arguments();
    public void set_Arguments(QilList value);
}
internal class System.Xml.Xsl.Qil.QilInvokeLateBound : QilBinary {
    public QilName Name { get; public set; }
    public QilList Arguments { get; public set; }
    public QilInvokeLateBound(QilNodeType nodeType, QilNode name, QilNode arguments);
    public QilName get_Name();
    public void set_Name(QilName value);
    public QilList get_Arguments();
    public void set_Arguments(QilList value);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilIterator : QilReference {
    private QilNode _binding;
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilNode Binding { get; public set; }
    public QilIterator(QilNodeType nodeType, QilNode binding);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public QilNode get_Binding();
    public void set_Binding(QilNode value);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilList : QilNode {
    private int _count;
    private QilNode[] _members;
    public XmlQueryType XmlType { get; }
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilList(QilNodeType nodeType);
    public virtual XmlQueryType get_XmlType();
    public virtual QilNode ShallowClone(QilFactory f);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public virtual void Insert(int index, QilNode node);
    public virtual void RemoveAt(int index);
}
internal class System.Xml.Xsl.Qil.QilLiteral : QilNode {
    private object _value;
    public object Value { get; public set; }
    public QilLiteral(QilNodeType nodeType, object value);
    public object get_Value();
    public void set_Value(object value);
    public static string op_Implicit(QilLiteral literal);
    public static int op_Implicit(QilLiteral literal);
    public static long op_Implicit(QilLiteral literal);
    public static double op_Implicit(QilLiteral literal);
    public static decimal op_Implicit(QilLiteral literal);
    public static XmlQueryType op_Implicit(QilLiteral literal);
}
internal class System.Xml.Xsl.Qil.QilLoop : QilBinary {
    public QilIterator Variable { get; public set; }
    public QilNode Body { get; public set; }
    public QilLoop(QilNodeType nodeType, QilNode variable, QilNode body);
    public QilIterator get_Variable();
    public void set_Variable(QilIterator value);
    public QilNode get_Body();
    public void set_Body(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilName : QilLiteral {
    private string _local;
    private string _uri;
    private string _prefix;
    public string LocalName { get; public set; }
    public string NamespaceUri { get; public set; }
    public string Prefix { get; public set; }
    public string QualifiedName { get; }
    public QilName(QilNodeType nodeType, string local, string uri, string prefix);
    public string get_LocalName();
    public void set_LocalName(string value);
    public string get_NamespaceUri();
    public void set_NamespaceUri(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string get_QualifiedName();
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public static bool op_Equality(QilName a, QilName b);
    public static bool op_Inequality(QilName a, QilName b);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilNode : object {
    protected QilNodeType nodeType;
    protected XmlQueryType xmlType;
    protected ISourceLineInfo sourceLine;
    protected object annotation;
    public QilNodeType NodeType { get; public set; }
    public XmlQueryType XmlType { get; public set; }
    public ISourceLineInfo SourceLine { get; public set; }
    public object Annotation { get; public set; }
    public int Count { get; }
    public QilNode Item { get; public set; }
    public bool IsReadOnly { get; }
    public QilNode(QilNodeType nodeType);
    public QilNode(QilNodeType nodeType, XmlQueryType xmlType);
    public QilNodeType get_NodeType();
    public void set_NodeType(QilNodeType value);
    public virtual XmlQueryType get_XmlType();
    public virtual void set_XmlType(XmlQueryType value);
    public ISourceLineInfo get_SourceLine();
    public void set_SourceLine(ISourceLineInfo value);
    public object get_Annotation();
    public void set_Annotation(object value);
    public virtual QilNode DeepClone(QilFactory f);
    public virtual QilNode ShallowClone(QilFactory f);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public virtual void Insert(int index, QilNode node);
    public virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<QilNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool get_IsReadOnly();
    public virtual void Add(QilNode node);
    public virtual void Add(IList`1<QilNode> list);
    public virtual void Clear();
    public virtual bool Contains(QilNode node);
    public virtual void CopyTo(QilNode[] array, int index);
    public virtual bool Remove(QilNode node);
    public virtual int IndexOf(QilNode node);
}
internal enum System.Xml.Xsl.Qil.QilNodeType : Enum {
    public int value__;
    public static QilNodeType QilExpression;
    public static QilNodeType FunctionList;
    public static QilNodeType GlobalVariableList;
    public static QilNodeType GlobalParameterList;
    public static QilNodeType ActualParameterList;
    public static QilNodeType FormalParameterList;
    public static QilNodeType SortKeyList;
    public static QilNodeType BranchList;
    public static QilNodeType OptimizeBarrier;
    public static QilNodeType Unknown;
    public static QilNodeType DataSource;
    public static QilNodeType Nop;
    public static QilNodeType Error;
    public static QilNodeType Warning;
    public static QilNodeType For;
    public static QilNodeType Let;
    public static QilNodeType Parameter;
    public static QilNodeType PositionOf;
    public static QilNodeType True;
    public static QilNodeType False;
    public static QilNodeType LiteralString;
    public static QilNodeType LiteralInt32;
    public static QilNodeType LiteralInt64;
    public static QilNodeType LiteralDouble;
    public static QilNodeType LiteralDecimal;
    public static QilNodeType LiteralQName;
    public static QilNodeType LiteralType;
    public static QilNodeType LiteralObject;
    public static QilNodeType And;
    public static QilNodeType Or;
    public static QilNodeType Not;
    public static QilNodeType Conditional;
    public static QilNodeType Choice;
    public static QilNodeType Length;
    public static QilNodeType Sequence;
    public static QilNodeType Union;
    public static QilNodeType Intersection;
    public static QilNodeType Difference;
    public static QilNodeType Average;
    public static QilNodeType Sum;
    public static QilNodeType Minimum;
    public static QilNodeType Maximum;
    public static QilNodeType Negate;
    public static QilNodeType Add;
    public static QilNodeType Subtract;
    public static QilNodeType Multiply;
    public static QilNodeType Divide;
    public static QilNodeType Modulo;
    public static QilNodeType StrLength;
    public static QilNodeType StrConcat;
    public static QilNodeType StrParseQName;
    public static QilNodeType Ne;
    public static QilNodeType Eq;
    public static QilNodeType Gt;
    public static QilNodeType Ge;
    public static QilNodeType Lt;
    public static QilNodeType Le;
    public static QilNodeType Is;
    public static QilNodeType After;
    public static QilNodeType Before;
    public static QilNodeType Loop;
    public static QilNodeType Filter;
    public static QilNodeType Sort;
    public static QilNodeType SortKey;
    public static QilNodeType DocOrderDistinct;
    public static QilNodeType Function;
    public static QilNodeType Invoke;
    public static QilNodeType Content;
    public static QilNodeType Attribute;
    public static QilNodeType Parent;
    public static QilNodeType Root;
    public static QilNodeType XmlContext;
    public static QilNodeType Descendant;
    public static QilNodeType DescendantOrSelf;
    public static QilNodeType Ancestor;
    public static QilNodeType AncestorOrSelf;
    public static QilNodeType Preceding;
    public static QilNodeType FollowingSibling;
    public static QilNodeType PrecedingSibling;
    public static QilNodeType NodeRange;
    public static QilNodeType Deref;
    public static QilNodeType ElementCtor;
    public static QilNodeType AttributeCtor;
    public static QilNodeType CommentCtor;
    public static QilNodeType PICtor;
    public static QilNodeType TextCtor;
    public static QilNodeType RawTextCtor;
    public static QilNodeType DocumentCtor;
    public static QilNodeType NamespaceDecl;
    public static QilNodeType RtfCtor;
    public static QilNodeType NameOf;
    public static QilNodeType LocalNameOf;
    public static QilNodeType NamespaceUriOf;
    public static QilNodeType PrefixOf;
    public static QilNodeType TypeAssert;
    public static QilNodeType IsType;
    public static QilNodeType IsEmpty;
    public static QilNodeType XPathNodeValue;
    public static QilNodeType XPathFollowing;
    public static QilNodeType XPathPreceding;
    public static QilNodeType XPathNamespace;
    public static QilNodeType XsltGenerateId;
    public static QilNodeType XsltInvokeLateBound;
    public static QilNodeType XsltInvokeEarlyBound;
    public static QilNodeType XsltCopy;
    public static QilNodeType XsltCopyOf;
    public static QilNodeType XsltConvert;
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilParameter : QilIterator {
    private QilNode _name;
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilNode DefaultValue { get; public set; }
    public QilName Name { get; public set; }
    public QilParameter(QilNodeType nodeType, QilNode defaultValue, QilNode name, XmlQueryType xmlType);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public QilNode get_DefaultValue();
    public void set_DefaultValue(QilNode value);
    public QilName get_Name();
    public void set_Name(QilName value);
}
internal class System.Xml.Xsl.Qil.QilPatternFactory : object {
    private bool _debug;
    private QilFactory _f;
    public QilFactory BaseFactory { get; }
    public bool IsDebug { get; }
    public QilPatternFactory(QilFactory f, bool debug);
    public QilFactory get_BaseFactory();
    public bool get_IsDebug();
    public QilLiteral String(string val);
    public QilLiteral Int32(int val);
    public QilLiteral Double(double val);
    public QilName QName(string local, string uri, string prefix);
    public QilName QName(string local, string uri);
    public QilName QName(string local);
    public QilNode Unknown(XmlQueryType t);
    public QilExpression QilExpression(QilNode root, QilFactory factory);
    public QilList FunctionList();
    public QilList GlobalVariableList();
    public QilList GlobalParameterList();
    public QilList ActualParameterList();
    public QilList ActualParameterList(QilNode arg1, QilNode arg2);
    public QilList ActualParameterList(QilNode[] args);
    public QilList FormalParameterList();
    public QilList FormalParameterList(QilNode arg1, QilNode arg2);
    public QilList FormalParameterList(QilNode[] args);
    public QilList BranchList(QilNode[] args);
    public QilNode OptimizeBarrier(QilNode child);
    public QilNode DataSource(QilNode name, QilNode baseUri);
    public QilNode Nop(QilNode child);
    public QilNode Error(QilNode text);
    public QilNode Warning(QilNode text);
    public QilIterator For(QilNode binding);
    public QilIterator Let(QilNode binding);
    public QilParameter Parameter(XmlQueryType t);
    public QilParameter Parameter(QilNode defaultValue, QilName name, XmlQueryType t);
    public QilNode PositionOf(QilIterator expr);
    public QilNode True();
    public QilNode False();
    public QilNode Boolean(bool b);
    private static void CheckLogicArg(QilNode arg);
    public QilNode And(QilNode left, QilNode right);
    public QilNode Or(QilNode left, QilNode right);
    public QilNode Not(QilNode child);
    public QilNode Conditional(QilNode condition, QilNode trueBranch, QilNode falseBranch);
    public QilNode Choice(QilNode expr, QilList branches);
    public QilNode Length(QilNode child);
    public QilNode Sequence();
    public QilNode Sequence(QilNode child);
    public QilNode Sequence(QilNode child1, QilNode child2);
    public QilNode Sequence(QilNode[] args);
    public QilNode Union(QilNode left, QilNode right);
    public QilNode Sum(QilNode collection);
    public QilNode Negate(QilNode child);
    public QilNode Add(QilNode left, QilNode right);
    public QilNode Subtract(QilNode left, QilNode right);
    public QilNode Multiply(QilNode left, QilNode right);
    public QilNode Divide(QilNode left, QilNode right);
    public QilNode Modulo(QilNode left, QilNode right);
    public QilNode StrLength(QilNode str);
    public QilNode StrConcat(QilNode values);
    public QilNode StrConcat(QilNode[] args);
    public QilNode StrConcat(IList`1<QilNode> args);
    public QilNode StrParseQName(QilNode str, QilNode ns);
    public QilNode Ne(QilNode left, QilNode right);
    public QilNode Eq(QilNode left, QilNode right);
    public QilNode Gt(QilNode left, QilNode right);
    public QilNode Ge(QilNode left, QilNode right);
    public QilNode Lt(QilNode left, QilNode right);
    public QilNode Le(QilNode left, QilNode right);
    public QilNode Is(QilNode left, QilNode right);
    public QilNode Before(QilNode left, QilNode right);
    public QilNode Loop(QilIterator variable, QilNode body);
    public QilNode Filter(QilIterator variable, QilNode expr);
    public QilNode Sort(QilIterator iter, QilNode keys);
    public QilSortKey SortKey(QilNode key, QilNode collation);
    public QilNode DocOrderDistinct(QilNode collection);
    public QilFunction Function(QilList args, QilNode sideEffects, XmlQueryType resultType);
    public QilFunction Function(QilList args, QilNode defn, QilNode sideEffects);
    public QilNode Invoke(QilFunction func, QilList args);
    public QilNode Content(QilNode context);
    public QilNode Parent(QilNode context);
    public QilNode Root(QilNode context);
    public QilNode XmlContext();
    public QilNode Descendant(QilNode expr);
    public QilNode DescendantOrSelf(QilNode context);
    public QilNode Ancestor(QilNode expr);
    public QilNode AncestorOrSelf(QilNode expr);
    public QilNode Preceding(QilNode expr);
    public QilNode FollowingSibling(QilNode expr);
    public QilNode PrecedingSibling(QilNode expr);
    public QilNode NodeRange(QilNode left, QilNode right);
    public QilBinary Deref(QilNode context, QilNode id);
    public QilNode ElementCtor(QilNode name, QilNode content);
    public QilNode AttributeCtor(QilNode name, QilNode val);
    public QilNode CommentCtor(QilNode content);
    public QilNode PICtor(QilNode name, QilNode content);
    public QilNode TextCtor(QilNode content);
    public QilNode RawTextCtor(QilNode content);
    public QilNode DocumentCtor(QilNode child);
    public QilNode NamespaceDecl(QilNode prefix, QilNode uri);
    public QilNode RtfCtor(QilNode content, QilNode baseUri);
    public QilNode NameOf(QilNode expr);
    public QilNode LocalNameOf(QilNode expr);
    public QilNode NamespaceUriOf(QilNode expr);
    public QilNode PrefixOf(QilNode expr);
    public QilNode TypeAssert(QilNode expr, XmlQueryType t);
    public QilNode IsType(QilNode expr, XmlQueryType t);
    public QilNode IsEmpty(QilNode set);
    public QilNode XPathNodeValue(QilNode expr);
    public QilNode XPathFollowing(QilNode expr);
    public QilNode XPathNamespace(QilNode expr);
    public QilNode XPathPreceding(QilNode expr);
    public QilNode XsltGenerateId(QilNode expr);
    public QilNode XsltInvokeEarlyBound(QilNode name, MethodInfo d, XmlQueryType t, IList`1<QilNode> args);
    public QilNode XsltInvokeLateBound(QilNode name, IList`1<QilNode> args);
    public QilNode XsltCopy(QilNode expr, QilNode content);
    public QilNode XsltCopyOf(QilNode expr);
    public QilNode XsltConvert(QilNode expr, XmlQueryType t);
}
internal abstract class System.Xml.Xsl.Qil.QilPatternVisitor : QilReplaceVisitor {
    private QilPatterns _patterns;
    private int _replacementCnt;
    private int _lastReplacement;
    private int _threshold;
    public QilPatterns Patterns { get; public set; }
    public int Threshold { get; public set; }
    public int ReplacementCount { get; }
    public int LastReplacement { get; }
    public bool Matching { get; }
    public QilPatternVisitor(QilPatterns patterns, QilFactory f);
    public QilPatterns get_Patterns();
    public void set_Patterns(QilPatterns value);
    public int get_Threshold();
    public void set_Threshold(int value);
    public int get_ReplacementCount();
    public int get_LastReplacement();
    public bool get_Matching();
    protected virtual bool AllowReplace(int pattern, QilNode original);
    protected virtual QilNode Replace(int pattern, QilNode original, QilNode replacement);
    protected virtual QilNode NoReplace(QilNode node);
    protected virtual QilNode Visit(QilNode node);
    protected virtual QilNode VisitQilExpression(QilExpression n);
    protected virtual QilNode VisitFunctionList(QilList n);
    protected virtual QilNode VisitGlobalVariableList(QilList n);
    protected virtual QilNode VisitGlobalParameterList(QilList n);
    protected virtual QilNode VisitActualParameterList(QilList n);
    protected virtual QilNode VisitFormalParameterList(QilList n);
    protected virtual QilNode VisitSortKeyList(QilList n);
    protected virtual QilNode VisitBranchList(QilList n);
    protected virtual QilNode VisitOptimizeBarrier(QilUnary n);
    protected virtual QilNode VisitUnknown(QilNode n);
    protected virtual QilNode VisitDataSource(QilDataSource n);
    protected virtual QilNode VisitNop(QilUnary n);
    protected virtual QilNode VisitError(QilUnary n);
    protected virtual QilNode VisitWarning(QilUnary n);
    protected virtual QilNode VisitFor(QilIterator n);
    protected virtual QilNode VisitForReference(QilIterator n);
    protected virtual QilNode VisitLet(QilIterator n);
    protected virtual QilNode VisitLetReference(QilIterator n);
    protected virtual QilNode VisitParameter(QilParameter n);
    protected virtual QilNode VisitParameterReference(QilParameter n);
    protected virtual QilNode VisitPositionOf(QilUnary n);
    protected virtual QilNode VisitTrue(QilNode n);
    protected virtual QilNode VisitFalse(QilNode n);
    protected virtual QilNode VisitLiteralString(QilLiteral n);
    protected virtual QilNode VisitLiteralInt32(QilLiteral n);
    protected virtual QilNode VisitLiteralInt64(QilLiteral n);
    protected virtual QilNode VisitLiteralDouble(QilLiteral n);
    protected virtual QilNode VisitLiteralDecimal(QilLiteral n);
    protected virtual QilNode VisitLiteralQName(QilName n);
    protected virtual QilNode VisitLiteralType(QilLiteral n);
    protected virtual QilNode VisitLiteralObject(QilLiteral n);
    protected virtual QilNode VisitAnd(QilBinary n);
    protected virtual QilNode VisitOr(QilBinary n);
    protected virtual QilNode VisitNot(QilUnary n);
    protected virtual QilNode VisitConditional(QilTernary n);
    protected virtual QilNode VisitChoice(QilChoice n);
    protected virtual QilNode VisitLength(QilUnary n);
    protected virtual QilNode VisitSequence(QilList n);
    protected virtual QilNode VisitUnion(QilBinary n);
    protected virtual QilNode VisitIntersection(QilBinary n);
    protected virtual QilNode VisitDifference(QilBinary n);
    protected virtual QilNode VisitAverage(QilUnary n);
    protected virtual QilNode VisitSum(QilUnary n);
    protected virtual QilNode VisitMinimum(QilUnary n);
    protected virtual QilNode VisitMaximum(QilUnary n);
    protected virtual QilNode VisitNegate(QilUnary n);
    protected virtual QilNode VisitAdd(QilBinary n);
    protected virtual QilNode VisitSubtract(QilBinary n);
    protected virtual QilNode VisitMultiply(QilBinary n);
    protected virtual QilNode VisitDivide(QilBinary n);
    protected virtual QilNode VisitModulo(QilBinary n);
    protected virtual QilNode VisitStrLength(QilUnary n);
    protected virtual QilNode VisitStrConcat(QilStrConcat n);
    protected virtual QilNode VisitStrParseQName(QilBinary n);
    protected virtual QilNode VisitNe(QilBinary n);
    protected virtual QilNode VisitEq(QilBinary n);
    protected virtual QilNode VisitGt(QilBinary n);
    protected virtual QilNode VisitGe(QilBinary n);
    protected virtual QilNode VisitLt(QilBinary n);
    protected virtual QilNode VisitLe(QilBinary n);
    protected virtual QilNode VisitIs(QilBinary n);
    protected virtual QilNode VisitAfter(QilBinary n);
    protected virtual QilNode VisitBefore(QilBinary n);
    protected virtual QilNode VisitLoop(QilLoop n);
    protected virtual QilNode VisitFilter(QilLoop n);
    protected virtual QilNode VisitSort(QilLoop n);
    protected virtual QilNode VisitSortKey(QilSortKey n);
    protected virtual QilNode VisitDocOrderDistinct(QilUnary n);
    protected virtual QilNode VisitFunction(QilFunction n);
    protected virtual QilNode VisitFunctionReference(QilFunction n);
    protected virtual QilNode VisitInvoke(QilInvoke n);
    protected virtual QilNode VisitContent(QilUnary n);
    protected virtual QilNode VisitAttribute(QilBinary n);
    protected virtual QilNode VisitParent(QilUnary n);
    protected virtual QilNode VisitRoot(QilUnary n);
    protected virtual QilNode VisitXmlContext(QilNode n);
    protected virtual QilNode VisitDescendant(QilUnary n);
    protected virtual QilNode VisitDescendantOrSelf(QilUnary n);
    protected virtual QilNode VisitAncestor(QilUnary n);
    protected virtual QilNode VisitAncestorOrSelf(QilUnary n);
    protected virtual QilNode VisitPreceding(QilUnary n);
    protected virtual QilNode VisitFollowingSibling(QilUnary n);
    protected virtual QilNode VisitPrecedingSibling(QilUnary n);
    protected virtual QilNode VisitNodeRange(QilBinary n);
    protected virtual QilNode VisitDeref(QilBinary n);
    protected virtual QilNode VisitElementCtor(QilBinary n);
    protected virtual QilNode VisitAttributeCtor(QilBinary n);
    protected virtual QilNode VisitCommentCtor(QilUnary n);
    protected virtual QilNode VisitPICtor(QilBinary n);
    protected virtual QilNode VisitTextCtor(QilUnary n);
    protected virtual QilNode VisitRawTextCtor(QilUnary n);
    protected virtual QilNode VisitDocumentCtor(QilUnary n);
    protected virtual QilNode VisitNamespaceDecl(QilBinary n);
    protected virtual QilNode VisitRtfCtor(QilBinary n);
    protected virtual QilNode VisitNameOf(QilUnary n);
    protected virtual QilNode VisitLocalNameOf(QilUnary n);
    protected virtual QilNode VisitNamespaceUriOf(QilUnary n);
    protected virtual QilNode VisitPrefixOf(QilUnary n);
    protected virtual QilNode VisitTypeAssert(QilTargetType n);
    protected virtual QilNode VisitIsType(QilTargetType n);
    protected virtual QilNode VisitIsEmpty(QilUnary n);
    protected virtual QilNode VisitXPathNodeValue(QilUnary n);
    protected virtual QilNode VisitXPathFollowing(QilUnary n);
    protected virtual QilNode VisitXPathPreceding(QilUnary n);
    protected virtual QilNode VisitXPathNamespace(QilUnary n);
    protected virtual QilNode VisitXsltGenerateId(QilUnary n);
    protected virtual QilNode VisitXsltInvokeLateBound(QilInvokeLateBound n);
    protected virtual QilNode VisitXsltInvokeEarlyBound(QilInvokeEarlyBound n);
    protected virtual QilNode VisitXsltCopy(QilBinary n);
    protected virtual QilNode VisitXsltCopyOf(QilUnary n);
    protected virtual QilNode VisitXsltConvert(QilTargetType n);
}
internal class System.Xml.Xsl.Qil.QilReference : QilNode {
    private static int MaxDebugNameLength;
    private string _debugName;
    public string DebugName { get; public set; }
    public QilReference(QilNodeType nodeType);
    public string get_DebugName();
    public void set_DebugName(string value);
}
internal abstract class System.Xml.Xsl.Qil.QilReplaceVisitor : QilVisitor {
    protected QilFactory f;
    public QilReplaceVisitor(QilFactory f);
    protected virtual QilNode VisitChildren(QilNode parent);
    protected virtual void RecalculateType(QilNode node, XmlQueryType oldType);
}
internal class System.Xml.Xsl.Qil.QilScopedVisitor : QilVisitor {
    protected virtual void BeginScope(QilNode node);
    protected virtual void EndScope(QilNode node);
    protected virtual void BeforeVisit(QilNode node);
    protected virtual void AfterVisit(QilNode node);
    protected virtual QilNode Visit(QilNode n);
}
internal class System.Xml.Xsl.Qil.QilSortKey : QilBinary {
    public QilNode Key { get; public set; }
    public QilNode Collation { get; public set; }
    public QilSortKey(QilNodeType nodeType, QilNode key, QilNode collation);
    public QilNode get_Key();
    public void set_Key(QilNode value);
    public QilNode get_Collation();
    public void set_Collation(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilStrConcat : QilBinary {
    public QilNode Delimiter { get; public set; }
    public QilNode Values { get; public set; }
    public QilStrConcat(QilNodeType nodeType, QilNode delimiter, QilNode values);
    public QilNode get_Delimiter();
    public void set_Delimiter(QilNode value);
    public QilNode get_Values();
    public void set_Values(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilTargetType : QilBinary {
    public QilNode Source { get; public set; }
    public XmlQueryType TargetType { get; public set; }
    public QilTargetType(QilNodeType nodeType, QilNode expr, QilNode targetType);
    public QilNode get_Source();
    public void set_Source(QilNode value);
    public XmlQueryType get_TargetType();
    public void set_TargetType(XmlQueryType value);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilTernary : QilNode {
    private QilNode _left;
    private QilNode _center;
    private QilNode _right;
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilNode Left { get; public set; }
    public QilNode Center { get; public set; }
    public QilNode Right { get; public set; }
    public QilTernary(QilNodeType nodeType, QilNode left, QilNode center, QilNode right);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public QilNode get_Left();
    public void set_Left(QilNode value);
    public QilNode get_Center();
    public void set_Center(QilNode value);
    public QilNode get_Right();
    public void set_Right(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilTypeChecker : object {
    public XmlQueryType Check(QilNode n);
    public XmlQueryType CheckQilExpression(QilExpression node);
    public XmlQueryType CheckFunctionList(QilList node);
    public XmlQueryType CheckGlobalVariableList(QilList node);
    public XmlQueryType CheckGlobalParameterList(QilList node);
    public XmlQueryType CheckActualParameterList(QilList node);
    public XmlQueryType CheckFormalParameterList(QilList node);
    public XmlQueryType CheckSortKeyList(QilList node);
    public XmlQueryType CheckBranchList(QilList node);
    public XmlQueryType CheckOptimizeBarrier(QilUnary node);
    public XmlQueryType CheckUnknown(QilNode node);
    public XmlQueryType CheckDataSource(QilDataSource node);
    public XmlQueryType CheckNop(QilUnary node);
    public XmlQueryType CheckError(QilUnary node);
    public XmlQueryType CheckWarning(QilUnary node);
    public XmlQueryType CheckFor(QilIterator node);
    public XmlQueryType CheckLet(QilIterator node);
    public XmlQueryType CheckParameter(QilParameter node);
    public XmlQueryType CheckPositionOf(QilUnary node);
    public XmlQueryType CheckTrue(QilNode node);
    public XmlQueryType CheckFalse(QilNode node);
    public XmlQueryType CheckLiteralString(QilLiteral node);
    public XmlQueryType CheckLiteralInt32(QilLiteral node);
    public XmlQueryType CheckLiteralInt64(QilLiteral node);
    public XmlQueryType CheckLiteralDouble(QilLiteral node);
    public XmlQueryType CheckLiteralDecimal(QilLiteral node);
    public XmlQueryType CheckLiteralQName(QilName node);
    public XmlQueryType CheckLiteralType(QilLiteral node);
    public XmlQueryType CheckLiteralObject(QilLiteral node);
    public XmlQueryType CheckAnd(QilBinary node);
    public XmlQueryType CheckOr(QilBinary node);
    public XmlQueryType CheckNot(QilUnary node);
    public XmlQueryType CheckConditional(QilTernary node);
    public XmlQueryType CheckChoice(QilChoice node);
    public XmlQueryType CheckLength(QilUnary node);
    public XmlQueryType CheckSequence(QilList node);
    public XmlQueryType CheckUnion(QilBinary node);
    public XmlQueryType CheckIntersection(QilBinary node);
    public XmlQueryType CheckDifference(QilBinary node);
    public XmlQueryType CheckAverage(QilUnary node);
    public XmlQueryType CheckSum(QilUnary node);
    public XmlQueryType CheckMinimum(QilUnary node);
    public XmlQueryType CheckMaximum(QilUnary node);
    public XmlQueryType CheckNegate(QilUnary node);
    public XmlQueryType CheckAdd(QilBinary node);
    public XmlQueryType CheckSubtract(QilBinary node);
    public XmlQueryType CheckMultiply(QilBinary node);
    public XmlQueryType CheckDivide(QilBinary node);
    public XmlQueryType CheckModulo(QilBinary node);
    public XmlQueryType CheckStrLength(QilUnary node);
    public XmlQueryType CheckStrConcat(QilStrConcat node);
    public XmlQueryType CheckStrParseQName(QilBinary node);
    public XmlQueryType CheckNe(QilBinary node);
    public XmlQueryType CheckEq(QilBinary node);
    public XmlQueryType CheckGt(QilBinary node);
    public XmlQueryType CheckGe(QilBinary node);
    public XmlQueryType CheckLt(QilBinary node);
    public XmlQueryType CheckLe(QilBinary node);
    public XmlQueryType CheckIs(QilBinary node);
    public XmlQueryType CheckAfter(QilBinary node);
    public XmlQueryType CheckBefore(QilBinary node);
    public XmlQueryType CheckLoop(QilLoop node);
    public XmlQueryType CheckFilter(QilLoop node);
    public XmlQueryType CheckSort(QilLoop node);
    public XmlQueryType CheckSortKey(QilSortKey node);
    public XmlQueryType CheckDocOrderDistinct(QilUnary node);
    public XmlQueryType CheckFunction(QilFunction node);
    public XmlQueryType CheckInvoke(QilInvoke node);
    public XmlQueryType CheckContent(QilUnary node);
    public XmlQueryType CheckAttribute(QilBinary node);
    public XmlQueryType CheckParent(QilUnary node);
    public XmlQueryType CheckRoot(QilUnary node);
    public XmlQueryType CheckXmlContext(QilNode node);
    public XmlQueryType CheckDescendant(QilUnary node);
    public XmlQueryType CheckDescendantOrSelf(QilUnary node);
    public XmlQueryType CheckAncestor(QilUnary node);
    public XmlQueryType CheckAncestorOrSelf(QilUnary node);
    public XmlQueryType CheckPreceding(QilUnary node);
    public XmlQueryType CheckFollowingSibling(QilUnary node);
    public XmlQueryType CheckPrecedingSibling(QilUnary node);
    public XmlQueryType CheckNodeRange(QilBinary node);
    public XmlQueryType CheckDeref(QilBinary node);
    public XmlQueryType CheckElementCtor(QilBinary node);
    public XmlQueryType CheckAttributeCtor(QilBinary node);
    public XmlQueryType CheckCommentCtor(QilUnary node);
    public XmlQueryType CheckPICtor(QilBinary node);
    public XmlQueryType CheckTextCtor(QilUnary node);
    public XmlQueryType CheckRawTextCtor(QilUnary node);
    public XmlQueryType CheckDocumentCtor(QilUnary node);
    public XmlQueryType CheckNamespaceDecl(QilBinary node);
    public XmlQueryType CheckRtfCtor(QilBinary node);
    public XmlQueryType CheckNameOf(QilUnary node);
    public XmlQueryType CheckLocalNameOf(QilUnary node);
    public XmlQueryType CheckNamespaceUriOf(QilUnary node);
    public XmlQueryType CheckPrefixOf(QilUnary node);
    public XmlQueryType CheckTypeAssert(QilTargetType node);
    public XmlQueryType CheckIsType(QilTargetType node);
    public XmlQueryType CheckIsEmpty(QilUnary node);
    public XmlQueryType CheckXPathNodeValue(QilUnary node);
    public XmlQueryType CheckXPathFollowing(QilUnary node);
    public XmlQueryType CheckXPathPreceding(QilUnary node);
    public XmlQueryType CheckXPathNamespace(QilUnary node);
    public XmlQueryType CheckXsltGenerateId(QilUnary node);
    public XmlQueryType CheckXsltInvokeLateBound(QilInvokeLateBound node);
    public XmlQueryType CheckXsltInvokeEarlyBound(QilInvokeEarlyBound node);
    public XmlQueryType CheckXsltCopy(QilBinary node);
    public XmlQueryType CheckXsltCopyOf(QilUnary node);
    public XmlQueryType CheckXsltConvert(QilTargetType node);
    [ConditionalAttribute("DEBUG")]
private void Check(bool value, QilNode node, string message);
    [ConditionalAttribute("DEBUG")]
private void CheckLiteralValue(QilNode node, Type clrTypeValue);
    [ConditionalAttribute("DEBUG")]
private void CheckClass(QilNode node, Type clrTypeClass);
    [ConditionalAttribute("DEBUG")]
private void CheckClassAndNodeType(QilNode node, Type clrTypeClass, QilNodeType nodeType);
    [ConditionalAttribute("DEBUG")]
private void CheckXmlType(QilNode node, XmlQueryType xmlType);
    [ConditionalAttribute("DEBUG")]
private void CheckNumericX(QilNode node);
    [ConditionalAttribute("DEBUG")]
private void CheckNumericXS(QilNode node);
    [ConditionalAttribute("DEBUG")]
private void CheckAtomicX(QilNode node);
    [ConditionalAttribute("DEBUG")]
private void CheckNotDisjoint(QilBinary node);
    private XmlQueryType DistinctType(XmlQueryType type);
    private XmlQueryType FindFilterType(QilIterator variable, QilNode body);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.Qil.QilUnary : QilNode {
    private QilNode _child;
    public int Count { get; }
    public QilNode Item { get; public set; }
    public QilNode Child { get; public set; }
    public QilUnary(QilNodeType nodeType, QilNode child);
    public virtual int get_Count();
    public virtual QilNode get_Item(int index);
    public virtual void set_Item(int index, QilNode value);
    public QilNode get_Child();
    public void set_Child(QilNode value);
}
internal class System.Xml.Xsl.Qil.QilValidationVisitor : QilScopedVisitor {
    private SubstitutionList _subs;
    private QilTypeChecker _typeCheck;
    [ConditionalAttribute("DEBUG")]
public static void Validate(QilNode node);
    [ConditionalAttribute("DEBUG")]
internal static void SetError(QilNode n, string message);
}
internal abstract class System.Xml.Xsl.Qil.QilVisitor : object {
    protected virtual QilNode VisitAssumeReference(QilNode expr);
    protected virtual QilNode VisitChildren(QilNode parent);
    protected virtual bool IsReference(QilNode parent, int childNum);
    protected virtual QilNode Visit(QilNode n);
    protected virtual QilNode VisitReference(QilNode n);
    protected virtual QilNode VisitNull();
    protected virtual QilNode VisitQilExpression(QilExpression n);
    protected virtual QilNode VisitFunctionList(QilList n);
    protected virtual QilNode VisitGlobalVariableList(QilList n);
    protected virtual QilNode VisitGlobalParameterList(QilList n);
    protected virtual QilNode VisitActualParameterList(QilList n);
    protected virtual QilNode VisitFormalParameterList(QilList n);
    protected virtual QilNode VisitSortKeyList(QilList n);
    protected virtual QilNode VisitBranchList(QilList n);
    protected virtual QilNode VisitOptimizeBarrier(QilUnary n);
    protected virtual QilNode VisitUnknown(QilNode n);
    protected virtual QilNode VisitDataSource(QilDataSource n);
    protected virtual QilNode VisitNop(QilUnary n);
    protected virtual QilNode VisitError(QilUnary n);
    protected virtual QilNode VisitWarning(QilUnary n);
    protected virtual QilNode VisitFor(QilIterator n);
    protected virtual QilNode VisitForReference(QilIterator n);
    protected virtual QilNode VisitLet(QilIterator n);
    protected virtual QilNode VisitLetReference(QilIterator n);
    protected virtual QilNode VisitParameter(QilParameter n);
    protected virtual QilNode VisitParameterReference(QilParameter n);
    protected virtual QilNode VisitPositionOf(QilUnary n);
    protected virtual QilNode VisitTrue(QilNode n);
    protected virtual QilNode VisitFalse(QilNode n);
    protected virtual QilNode VisitLiteralString(QilLiteral n);
    protected virtual QilNode VisitLiteralInt32(QilLiteral n);
    protected virtual QilNode VisitLiteralInt64(QilLiteral n);
    protected virtual QilNode VisitLiteralDouble(QilLiteral n);
    protected virtual QilNode VisitLiteralDecimal(QilLiteral n);
    protected virtual QilNode VisitLiteralQName(QilName n);
    protected virtual QilNode VisitLiteralType(QilLiteral n);
    protected virtual QilNode VisitLiteralObject(QilLiteral n);
    protected virtual QilNode VisitAnd(QilBinary n);
    protected virtual QilNode VisitOr(QilBinary n);
    protected virtual QilNode VisitNot(QilUnary n);
    protected virtual QilNode VisitConditional(QilTernary n);
    protected virtual QilNode VisitChoice(QilChoice n);
    protected virtual QilNode VisitLength(QilUnary n);
    protected virtual QilNode VisitSequence(QilList n);
    protected virtual QilNode VisitUnion(QilBinary n);
    protected virtual QilNode VisitIntersection(QilBinary n);
    protected virtual QilNode VisitDifference(QilBinary n);
    protected virtual QilNode VisitAverage(QilUnary n);
    protected virtual QilNode VisitSum(QilUnary n);
    protected virtual QilNode VisitMinimum(QilUnary n);
    protected virtual QilNode VisitMaximum(QilUnary n);
    protected virtual QilNode VisitNegate(QilUnary n);
    protected virtual QilNode VisitAdd(QilBinary n);
    protected virtual QilNode VisitSubtract(QilBinary n);
    protected virtual QilNode VisitMultiply(QilBinary n);
    protected virtual QilNode VisitDivide(QilBinary n);
    protected virtual QilNode VisitModulo(QilBinary n);
    protected virtual QilNode VisitStrLength(QilUnary n);
    protected virtual QilNode VisitStrConcat(QilStrConcat n);
    protected virtual QilNode VisitStrParseQName(QilBinary n);
    protected virtual QilNode VisitNe(QilBinary n);
    protected virtual QilNode VisitEq(QilBinary n);
    protected virtual QilNode VisitGt(QilBinary n);
    protected virtual QilNode VisitGe(QilBinary n);
    protected virtual QilNode VisitLt(QilBinary n);
    protected virtual QilNode VisitLe(QilBinary n);
    protected virtual QilNode VisitIs(QilBinary n);
    protected virtual QilNode VisitAfter(QilBinary n);
    protected virtual QilNode VisitBefore(QilBinary n);
    protected virtual QilNode VisitLoop(QilLoop n);
    protected virtual QilNode VisitFilter(QilLoop n);
    protected virtual QilNode VisitSort(QilLoop n);
    protected virtual QilNode VisitSortKey(QilSortKey n);
    protected virtual QilNode VisitDocOrderDistinct(QilUnary n);
    protected virtual QilNode VisitFunction(QilFunction n);
    protected virtual QilNode VisitFunctionReference(QilFunction n);
    protected virtual QilNode VisitInvoke(QilInvoke n);
    protected virtual QilNode VisitContent(QilUnary n);
    protected virtual QilNode VisitAttribute(QilBinary n);
    protected virtual QilNode VisitParent(QilUnary n);
    protected virtual QilNode VisitRoot(QilUnary n);
    protected virtual QilNode VisitXmlContext(QilNode n);
    protected virtual QilNode VisitDescendant(QilUnary n);
    protected virtual QilNode VisitDescendantOrSelf(QilUnary n);
    protected virtual QilNode VisitAncestor(QilUnary n);
    protected virtual QilNode VisitAncestorOrSelf(QilUnary n);
    protected virtual QilNode VisitPreceding(QilUnary n);
    protected virtual QilNode VisitFollowingSibling(QilUnary n);
    protected virtual QilNode VisitPrecedingSibling(QilUnary n);
    protected virtual QilNode VisitNodeRange(QilBinary n);
    protected virtual QilNode VisitDeref(QilBinary n);
    protected virtual QilNode VisitElementCtor(QilBinary n);
    protected virtual QilNode VisitAttributeCtor(QilBinary n);
    protected virtual QilNode VisitCommentCtor(QilUnary n);
    protected virtual QilNode VisitPICtor(QilBinary n);
    protected virtual QilNode VisitTextCtor(QilUnary n);
    protected virtual QilNode VisitRawTextCtor(QilUnary n);
    protected virtual QilNode VisitDocumentCtor(QilUnary n);
    protected virtual QilNode VisitNamespaceDecl(QilBinary n);
    protected virtual QilNode VisitRtfCtor(QilBinary n);
    protected virtual QilNode VisitNameOf(QilUnary n);
    protected virtual QilNode VisitLocalNameOf(QilUnary n);
    protected virtual QilNode VisitNamespaceUriOf(QilUnary n);
    protected virtual QilNode VisitPrefixOf(QilUnary n);
    protected virtual QilNode VisitTypeAssert(QilTargetType n);
    protected virtual QilNode VisitIsType(QilTargetType n);
    protected virtual QilNode VisitIsEmpty(QilUnary n);
    protected virtual QilNode VisitXPathNodeValue(QilUnary n);
    protected virtual QilNode VisitXPathFollowing(QilUnary n);
    protected virtual QilNode VisitXPathPreceding(QilUnary n);
    protected virtual QilNode VisitXPathNamespace(QilUnary n);
    protected virtual QilNode VisitXsltGenerateId(QilUnary n);
    protected virtual QilNode VisitXsltInvokeLateBound(QilInvokeLateBound n);
    protected virtual QilNode VisitXsltInvokeEarlyBound(QilInvokeEarlyBound n);
    protected virtual QilNode VisitXsltCopy(QilBinary n);
    protected virtual QilNode VisitXsltCopyOf(QilUnary n);
    protected virtual QilNode VisitXsltConvert(QilTargetType n);
}
internal class System.Xml.Xsl.Qil.QilXmlWriter : QilScopedVisitor {
    protected XmlWriter writer;
    protected Options options;
    private NameGenerator _ngen;
    public QilXmlWriter(XmlWriter writer);
    public QilXmlWriter(XmlWriter writer, Options options);
    public void ToXml(QilNode node);
    protected virtual void WriteAnnotations(object ann);
    protected virtual void WriteLineInfo(QilNode node);
    protected virtual void WriteXmlType(QilNode node);
    protected virtual QilNode VisitChildren(QilNode node);
    protected virtual QilNode VisitReference(QilNode node);
    protected virtual QilNode VisitQilExpression(QilExpression qil);
    protected virtual QilNode VisitLiteralType(QilLiteral value);
    protected virtual QilNode VisitLiteralQName(QilName value);
    protected virtual void BeginScope(QilNode node);
    protected virtual void EndScope(QilNode node);
    protected virtual void BeforeVisit(QilNode node);
    protected virtual void AfterVisit(QilNode node);
}
internal enum System.Xml.Xsl.Qil.SerializationHints : Enum {
    public int value__;
    public static SerializationHints None;
    public static SerializationHints CData;
    public static SerializationHints DisableOutputEscaping;
}
internal class System.Xml.Xsl.Qil.SubstitutionList : object {
    private ArrayList _s;
    public void AddSubstitutionPair(QilNode find, QilNode replace);
    public void RemoveLastSubstitutionPair();
    public QilNode FindReplacement(QilNode n);
}
internal class System.Xml.Xsl.Qil.WhitespaceRule : object {
    private string _localName;
    private string _namespaceName;
    private bool _preserveSpace;
    public string LocalName { get; public set; }
    public string NamespaceName { get; public set; }
    public bool PreserveSpace { get; }
    public WhitespaceRule(string localName, string namespaceName, bool preserveSpace);
    public WhitespaceRule(XmlQueryDataReader reader);
    protected void Init(string localName, string namespaceName, bool preserveSpace);
    public string get_LocalName();
    public void set_LocalName(string value);
    public string get_NamespaceName();
    public void set_NamespaceName(string value);
    public bool get_PreserveSpace();
    public void GetObjectData(XmlQueryDataWriter writer);
}
internal class System.Xml.Xsl.QueryReaderSettings : object {
    private bool _validatingReader;
    private XmlReaderSettings _xmlReaderSettings;
    private XmlNameTable _xmlNameTable;
    private EntityHandling _entityHandling;
    private bool _namespaces;
    private bool _normalization;
    private bool _prohibitDtd;
    private WhitespaceHandling _whitespaceHandling;
    private XmlResolver _xmlResolver;
    public XmlNameTable NameTable { get; }
    public QueryReaderSettings(XmlNameTable xmlNameTable);
    public QueryReaderSettings(XmlReader reader);
    public XmlReader CreateReader(Stream stream, string baseUri);
    public XmlNameTable get_NameTable();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.AncestorDocOrderIterator : ValueType {
    private XmlNavigatorStack _stack;
    private XPathNavigator _navCurrent;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter, bool orSelf);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.AncestorIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private bool _haveCurrent;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter, bool orSelf);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.AttributeContentIterator : ValueType {
    private XPathNavigator _navCurrent;
    private bool _needFirst;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.AttributeIterator : ValueType {
    private XPathNavigator _navCurrent;
    private bool _needFirst;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
internal static class System.Xml.Xsl.Runtime.CharUtil : object {
    public static bool IsAlphaNumeric(char ch);
    public static bool IsDecimalDigitOne(char ch);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.ContentIterator : ValueType {
    private XPathNavigator _navCurrent;
    private bool _needFirst;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.ContentMergeIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private XPathNavigator _navNext;
    private XmlNavigatorStack _navStack;
    private IteratorState _state;
    public XPathNavigator Current { get; }
    public void Create(XmlNavigatorFilter filter);
    public IteratorResult MoveNext(XPathNavigator input);
    internal IteratorResult MoveNext(XPathNavigator input, bool isContent);
    public XPathNavigator get_Current();
    private IteratorResult DocOrderMerge();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.DecimalAggregator : ValueType {
    private decimal _result;
    private int _cnt;
    public decimal SumResult { get; }
    public decimal AverageResult { get; }
    public decimal MinimumResult { get; }
    public decimal MaximumResult { get; }
    public bool IsEmpty { get; }
    public void Create();
    public void Sum(decimal value);
    public void Average(decimal value);
    public void Minimum(decimal value);
    public void Maximum(decimal value);
    public decimal get_SumResult();
    public decimal get_AverageResult();
    public decimal get_MinimumResult();
    public decimal get_MaximumResult();
    public bool get_IsEmpty();
}
internal class System.Xml.Xsl.Runtime.DecimalFormat : object {
    public NumberFormatInfo info;
    public char digit;
    public char zeroDigit;
    public char patternSeparator;
    internal DecimalFormat(NumberFormatInfo info, char digit, char zeroDigit, char patternSeparator);
}
internal class System.Xml.Xsl.Runtime.DecimalFormatter : object {
    private NumberFormatInfo _posFormatInfo;
    private NumberFormatInfo _negFormatInfo;
    private string _posFormat;
    private string _negFormat;
    private char _zeroDigit;
    private static string ClrSpecialChars;
    private static char EscChar;
    public DecimalFormatter(string formatPicture, DecimalFormat decimalFormat);
    private static int RemoveTrailingComma(StringBuilder builder, int commaIndex, int decimalIndex);
    public string Format(double value);
    public static string Format(double value, string formatPicture, DecimalFormat decimalFormat);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.DescendantIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private XPathNavigator _navEnd;
    private bool _hasFirst;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator input, XmlNavigatorFilter filter, bool orSelf);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.DescendantMergeIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private XPathNavigator _navRoot;
    private XPathNavigator _navEnd;
    private IteratorState _state;
    private bool _orSelf;
    public XPathNavigator Current { get; }
    public void Create(XmlNavigatorFilter filter, bool orSelf);
    public IteratorResult MoveNext(XPathNavigator input);
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.DifferenceIterator : ValueType {
    private XmlQueryRuntime _runtime;
    private XPathNavigator _navLeft;
    private XPathNavigator _navRight;
    private IteratorState _state;
    public XPathNavigator Current { get; }
    public void Create(XmlQueryRuntime runtime);
    public SetIteratorResult MoveNext(XPathNavigator nestedNavigator);
    public XPathNavigator get_Current();
}
internal class System.Xml.Xsl.Runtime.DocumentOrderComparer : object {
    private List`1<XPathNavigator> _roots;
    public sealed virtual int Compare(XPathNavigator navThis, XPathNavigator navThat);
    public int GetDocumentIndex(XPathNavigator nav);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.DodSequenceMerge : ValueType {
    private IList`1<XPathNavigator> _firstSequence;
    private List`1<IEnumerator`1<XPathNavigator>> _sequencesToMerge;
    private int _nodeCount;
    private XmlQueryRuntime _runtime;
    public void Create(XmlQueryRuntime runtime);
    public void AddSequence(IList`1<XPathNavigator> sequence);
    public IList`1<XPathNavigator> MergeSequences();
    private void MoveAndInsertSequence(IEnumerator`1<XPathNavigator> sequence);
    private void InsertSequence(IEnumerator`1<XPathNavigator> sequence);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.DoubleAggregator : ValueType {
    private double _result;
    private int _cnt;
    public double SumResult { get; }
    public double AverageResult { get; }
    public double MinimumResult { get; }
    public double MaximumResult { get; }
    public bool IsEmpty { get; }
    public void Create();
    public void Sum(double value);
    public void Average(double value);
    public void Minimum(double value);
    public void Maximum(double value);
    public double get_SumResult();
    public double get_AverageResult();
    public double get_MinimumResult();
    public double get_MaximumResult();
    public bool get_IsEmpty();
}
internal class System.Xml.Xsl.Runtime.EarlyBoundInfo : object {
    private string _namespaceUri;
    private ConstructorInfo _constrInfo;
    public string NamespaceUri { get; }
    public Type EarlyBoundType { get; }
    public EarlyBoundInfo(string namespaceUri, Type ebType);
    public string get_NamespaceUri();
    public Type get_EarlyBoundType();
    public object CreateObject();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.ElementContentIterator : ValueType {
    private string _localName;
    private string _ns;
    private XPathNavigator _navCurrent;
    private bool _needFirst;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, string localName, string ns);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.FollowingSiblingIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator : ValueType {
    private ContentMergeIterator _wrapped;
    public XPathNavigator Current { get; }
    public void Create(XmlNavigatorFilter filter);
    public IteratorResult MoveNext(XPathNavigator navigator);
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.IdIterator : ValueType {
    private XPathNavigator _navCurrent;
    private String[] _idrefs;
    private int _idx;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, string value);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.Int32Aggregator : ValueType {
    private int _result;
    private int _cnt;
    public int SumResult { get; }
    public int AverageResult { get; }
    public int MinimumResult { get; }
    public int MaximumResult { get; }
    public bool IsEmpty { get; }
    public void Create();
    public void Sum(int value);
    public void Average(int value);
    public void Minimum(int value);
    public void Maximum(int value);
    public int get_SumResult();
    public int get_AverageResult();
    public int get_MinimumResult();
    public int get_MaximumResult();
    public bool get_IsEmpty();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.Int64Aggregator : ValueType {
    private long _result;
    private int _cnt;
    public long SumResult { get; }
    public long AverageResult { get; }
    public long MinimumResult { get; }
    public long MaximumResult { get; }
    public bool IsEmpty { get; }
    public void Create();
    public void Sum(long value);
    public void Average(long value);
    public void Minimum(long value);
    public void Maximum(long value);
    public long get_SumResult();
    public long get_AverageResult();
    public long get_MinimumResult();
    public long get_MaximumResult();
    public bool get_IsEmpty();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.IntersectIterator : ValueType {
    private XmlQueryRuntime _runtime;
    private XPathNavigator _navLeft;
    private XPathNavigator _navRight;
    private IteratorState _state;
    public XPathNavigator Current { get; }
    public void Create(XmlQueryRuntime runtime);
    public SetIteratorResult MoveNext(XPathNavigator nestedNavigator);
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public enum System.Xml.Xsl.Runtime.IteratorResult : Enum {
    public int value__;
    public static IteratorResult NoMoreNodes;
    public static IteratorResult NeedInputNode;
    public static IteratorResult HaveCurrentNode;
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.NamespaceIterator : ValueType {
    private XPathNavigator _navCurrent;
    private XmlNavigatorStack _navStack;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
internal class System.Xml.Xsl.Runtime.NavigatorConstructor : object {
    private object _cache;
    public XPathNavigator GetNavigator(XmlEventCache events, XmlNameTable nameTable);
    public XPathNavigator GetNavigator(string text, string baseUri, XmlNameTable nameTable);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.NodeKindContentIterator : ValueType {
    private XPathNodeType _nodeType;
    private XPathNavigator _navCurrent;
    private bool _needFirst;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XPathNodeType nodeType);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.NodeRangeIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private XPathNavigator _navEnd;
    private IteratorState _state;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator start, XmlNavigatorFilter filter, XPathNavigator end);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
internal class System.Xml.Xsl.Runtime.NumberFormatter : NumberFormatterBase {
    private string _formatString;
    private int _lang;
    private string _letterValue;
    private string _groupingSeparator;
    private int _groupingSize;
    private List`1<TokenInfo> _tokens;
    public static char DefaultStartChar;
    private static TokenInfo s_defaultFormat;
    private static TokenInfo s_defaultSeparator;
    public NumberFormatter(string formatString, int lang, string letterValue, string groupingSeparator, int groupingSize);
    private static NumberFormatter();
    public string FormatSequence(IList`1<XPathItem> val);
    private void FormatItem(StringBuilder sb, XPathItem item, char startChar, int length);
    private static string ConvertToDecimal(double val, int minLen, char zero, string groupSeparator, int groupSize);
}
internal class System.Xml.Xsl.Runtime.NumberFormatterBase : object {
    protected static int MaxAlphabeticValue;
    private static int MaxAlphabeticLength;
    protected static int MaxRomanValue;
    private static string RomanDigitsUC;
    private static string RomanDigitsLC;
    private static Int32[] s_romanDigitValue;
    private static string hiraganaAiueo;
    private static string hiraganaIroha;
    private static string katakanaAiueo;
    private static string katakanaIroha;
    private static string katakanaAiueoHw;
    private static string katakanaIrohaHw;
    private static string cjkIdeographic;
    private static NumberFormatterBase();
    public static void ConvertToAlphabetic(StringBuilder sb, double val, char firstChar, int totalChars);
    public static void ConvertToRoman(StringBuilder sb, double val, bool upperCase);
}
internal enum System.Xml.Xsl.Runtime.NumberingSequence : Enum {
    public int value__;
    public static NumberingSequence Nil;
    public static NumberingSequence FirstDecimal;
    public static NumberingSequence Arabic;
    public static NumberingSequence DArabic;
    public static NumberingSequence Hindi3;
    public static NumberingSequence Thai2;
    public static NumberingSequence FEDecimal;
    public static NumberingSequence KorDbNum1;
    public static NumberingSequence LastNum;
    public static NumberingSequence FirstAlpha;
    public static NumberingSequence UCLetter;
    public static NumberingSequence LCLetter;
    public static NumberingSequence UCRus;
    public static NumberingSequence LCRus;
    public static NumberingSequence Thai1;
    public static NumberingSequence Hindi1;
    public static NumberingSequence Hindi2;
    public static NumberingSequence Aiueo;
    public static NumberingSequence DAiueo;
    public static NumberingSequence Iroha;
    public static NumberingSequence DIroha;
    public static NumberingSequence DChosung;
    public static NumberingSequence Ganada;
    public static NumberingSequence ArabicScript;
    public static NumberingSequence LastAlpha;
    public static NumberingSequence FirstSpecial;
    public static NumberingSequence UCRoman;
    public static NumberingSequence LCRoman;
    public static NumberingSequence Hebrew;
    public static NumberingSequence DbNum3;
    public static NumberingSequence ChnCmplx;
    public static NumberingSequence KorDbNum3;
    public static NumberingSequence Zodiac1;
    public static NumberingSequence Zodiac2;
    public static NumberingSequence Zodiac3;
    public static NumberingSequence LastSpecial;
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.ParentIterator : ValueType {
    private XPathNavigator _navCurrent;
    private bool _haveCurrent;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.PrecedingIterator : ValueType {
    private XmlNavigatorStack _stack;
    private XPathNavigator _navCurrent;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private XPathNavigator _navEnd;
    private bool _needFirst;
    private bool _useCompPos;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.PrecedingSiblingIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
internal abstract class System.Xml.Xsl.Runtime.RtfNavigator : XPathNavigator {
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public bool IsEmptyElement { get; }
    public XmlNameTable NameTable { get; }
    public abstract virtual void CopyToWriter(XmlWriter writer);
    public abstract virtual XPathNavigator ToNavigator();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual bool get_IsEmptyElement();
    public virtual XmlNameTable get_NameTable();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
}
internal class System.Xml.Xsl.Runtime.RtfTextNavigator : RtfNavigator {
    private string _text;
    private string _baseUri;
    private NavigatorConstructor _constr;
    public string Value { get; }
    public string BaseURI { get; }
    public RtfTextNavigator(string text, string baseUri);
    public RtfTextNavigator(RtfTextNavigator that);
    public virtual void CopyToWriter(XmlWriter writer);
    public virtual XPathNavigator ToNavigator();
    public virtual string get_Value();
    public virtual string get_BaseURI();
    public virtual XPathNavigator Clone();
    public virtual bool MoveTo(XPathNavigator other);
}
internal class System.Xml.Xsl.Runtime.RtfTreeNavigator : RtfNavigator {
    private XmlEventCache _events;
    private NavigatorConstructor _constr;
    private XmlNameTable _nameTable;
    public string Value { get; }
    public string BaseURI { get; }
    public RtfTreeNavigator(XmlEventCache events, XmlNameTable nameTable);
    public RtfTreeNavigator(RtfTreeNavigator that);
    public virtual void CopyToWriter(XmlWriter writer);
    public virtual XPathNavigator ToNavigator();
    public virtual string get_Value();
    public virtual string get_BaseURI();
    public virtual XPathNavigator Clone();
    public virtual bool MoveTo(XPathNavigator other);
}
[EditorBrowsableAttribute("1")]
public enum System.Xml.Xsl.Runtime.SetIteratorResult : Enum {
    public int value__;
    public static SetIteratorResult NoMoreNodes;
    public static SetIteratorResult InitRightIterator;
    public static SetIteratorResult NeedLeftNode;
    public static SetIteratorResult NeedRightNode;
    public static SetIteratorResult HaveCurrentNode;
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.StringConcat : ValueType {
    private string _s1;
    private string _s2;
    private string _s3;
    private string _s4;
    private string _delimiter;
    private List`1<string> _strList;
    private int _idxStr;
    public string Delimiter { get; public set; }
    internal int Count { get; }
    public void Clear();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    internal int get_Count();
    public void Concat(string value);
    public string GetResult();
    internal void ConcatNoDelimiter(string s);
}
internal class System.Xml.Xsl.Runtime.TokenInfo : object {
    public char startChar;
    public int startIdx;
    public string formatString;
    public int length;
    [ConditionalAttribute("DEBUG")]
public void AssertSeparator(bool isSeparator);
    public static TokenInfo CreateSeparator(string formatString, int startIdx, int tokLen);
    public static TokenInfo CreateFormat(string formatString, int startIdx, int tokLen);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.UnionIterator : ValueType {
    private XmlQueryRuntime _runtime;
    private XPathNavigator _navCurr;
    private XPathNavigator _navOther;
    private IteratorState _state;
    public XPathNavigator Current { get; }
    public void Create(XmlQueryRuntime runtime);
    public SetIteratorResult MoveNext(XPathNavigator nestedNavigator);
    public XPathNavigator get_Current();
    private void Swap();
}
internal class System.Xml.Xsl.Runtime.WhitespaceRuleLookup : object {
    private Hashtable _qnames;
    private ArrayList _wildcards;
    private InternalWhitespaceRule _ruleTemp;
    private XmlNameTable _nameTable;
    public WhitespaceRuleLookup(IList`1<WhitespaceRule> rules);
    public void Atomize(XmlNameTable nameTable);
    public bool ShouldStripSpace(string localName, string namespaceName);
}
internal class System.Xml.Xsl.Runtime.WhitespaceRuleReader : XmlWrappingReader {
    private WhitespaceRuleLookup _wsRules;
    private BitStack _stkStrip;
    private bool _shouldStrip;
    private bool _preserveAdjacent;
    private string _val;
    private XmlCharType _xmlCharType;
    public string Value { get; }
    private WhitespaceRuleReader(XmlReader baseReader, WhitespaceRuleLookup wsRules);
    public static XmlReader CreateReader(XmlReader baseReader, WhitespaceRuleLookup wsRules);
    public virtual string get_Value();
    public virtual bool Read();
}
internal class System.Xml.Xsl.Runtime.XmlAttributeCache : XmlRawWriter {
    private XmlRawWriter _wrapped;
    private OnRemoveWriter _onRemove;
    private AttrNameVal[] _arrAttrs;
    private int _numEntries;
    private int _idxLastName;
    private int _hashCodeUnion;
    private static int DefaultCacheSize;
    public int Count { get; }
    public OnRemoveWriter OnRemoveWriterEvent { get; public set; }
    public void Init(XmlRawWriter wrapped);
    public int get_Count();
    public sealed virtual OnRemoveWriter get_OnRemoveWriterEvent();
    public sealed virtual void set_OnRemoveWriterEvent(OnRemoveWriter value);
    private void SetWrappedWriter(XmlRawWriter writer);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    public virtual void WriteString(string text);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    internal virtual void StartElementContent();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void Close();
    public virtual void Flush();
    private void FlushAttributes();
    private void EnsureAttributeCache();
}
internal class System.Xml.Xsl.Runtime.XmlCachedSequenceWriter : XmlSequenceWriter {
    private XmlQueryItemSequence _seqTyped;
    private XPathDocument _doc;
    private XmlRawWriter _writer;
    public XmlQueryItemSequence ResultSequence { get; }
    public XmlQueryItemSequence get_ResultSequence();
    public virtual XmlRawWriter StartTree(XPathNodeType rootType, IXmlNamespaceResolver nsResolver, XmlNameTable nameTable);
    public virtual void EndTree();
    public virtual void WriteItem(XPathItem item);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlCollation : object {
    private static string deDE;
    private static string huHU;
    private static string jaJP;
    private static string kaGE;
    private static string koKR;
    private static string zhTW;
    private static string zhCN;
    private static string zhHK;
    private static string zhSG;
    private static string zhMO;
    private static string zhTWbopo;
    private static string deDEphon;
    private static string huHUtech;
    private static string kaGEmode;
    private CultureInfo _cultInfo;
    private Options _options;
    private CompareOptions _compops;
    private static XmlCollation s_cp;
    private static string LOCALE_CURRENT;
    internal static XmlCollation CodePointCollation { get; }
    internal bool UpperFirst { get; }
    internal bool EmptyGreatest { get; }
    internal bool DescendingOrder { get; }
    internal CultureInfo Culture { get; }
    private XmlCollation(CultureInfo cultureInfo, Options options);
    internal XmlCollation(BinaryReader reader);
    private static XmlCollation();
    internal static XmlCollation get_CodePointCollation();
    internal static XmlCollation Create(string collationLiteral);
    internal static XmlCollation Create(string collationLiteral, bool throwOnError);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void GetObjectData(BinaryWriter writer);
    internal bool get_UpperFirst();
    internal bool get_EmptyGreatest();
    internal bool get_DescendingOrder();
    internal CultureInfo get_Culture();
    internal XmlSortKey CreateSortKey(string s);
}
internal class System.Xml.Xsl.Runtime.XmlDateTimeSortKey : XmlIntegerSortKey {
    public XmlDateTimeSortKey(DateTime value, XmlCollation collation);
}
internal class System.Xml.Xsl.Runtime.XmlDecimalSortKey : XmlSortKey {
    private decimal _decVal;
    public XmlDecimalSortKey(decimal value, XmlCollation collation);
    public virtual int CompareTo(object obj);
}
internal class System.Xml.Xsl.Runtime.XmlDoubleSortKey : XmlSortKey {
    private double _dblVal;
    private bool _isNaN;
    public XmlDoubleSortKey(double value, XmlCollation collation);
    public virtual int CompareTo(object obj);
}
internal class System.Xml.Xsl.Runtime.XmlEmptySortKey : XmlSortKey {
    private bool _isEmptyGreatest;
    public bool IsEmptyGreatest { get; }
    public XmlEmptySortKey(XmlCollation collation);
    public bool get_IsEmptyGreatest();
    public virtual int CompareTo(object obj);
}
internal class System.Xml.Xsl.Runtime.XmlExtensionFunction : object {
    private string _namespaceUri;
    private string _name;
    private int _numArgs;
    private Type _objectType;
    private BindingFlags _flags;
    private int _hashCode;
    private MethodInfo _meth;
    private Type[] _argClrTypes;
    private Type _retClrType;
    private XmlQueryType[] _argXmlTypes;
    private XmlQueryType _retXmlType;
    public MethodInfo Method { get; }
    public Type ClrReturnType { get; }
    public XmlQueryType XmlReturnType { get; }
    public XmlExtensionFunction(string name, string namespaceUri, MethodInfo meth);
    public XmlExtensionFunction(string name, string namespaceUri, int numArgs, Type objectType, BindingFlags flags);
    public void Init(string name, string namespaceUri, int numArgs, Type objectType, BindingFlags flags);
    public MethodInfo get_Method();
    public Type GetClrArgumentType(int index);
    public Type get_ClrReturnType();
    public XmlQueryType GetXmlArgumentType(int index);
    public XmlQueryType get_XmlReturnType();
    public bool CanBind();
    public void Bind();
    private void Bind(MethodInfo meth);
    public object Invoke(object extObj, Object[] args);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    private Type GetClrType(Type clrType);
    private XmlQueryType InferXmlType(Type clrType);
}
internal class System.Xml.Xsl.Runtime.XmlExtensionFunctionTable : object {
    private Dictionary`2<XmlExtensionFunction, XmlExtensionFunction> _table;
    private XmlExtensionFunction _funcCached;
    public XmlExtensionFunction Bind(string name, string namespaceUri, int numArgs, Type objectType, BindingFlags flags);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlILIndex : object {
    private Dictionary`2<string, XmlQueryNodeSequence> _table;
    public void Add(string key, XPathNavigator navigator);
    public XmlQueryNodeSequence Lookup(string key);
}
internal class System.Xml.Xsl.Runtime.XmlILQueryEventArgs : XsltMessageEncounteredEventArgs {
    private string _message;
    public string Message { get; }
    public XmlILQueryEventArgs(string message);
    public virtual string get_Message();
}
[EditorBrowsableAttribute("1")]
public static class System.Xml.Xsl.Runtime.XmlILStorageConverter : object {
    public static XmlAtomicValue StringToAtomicValue(string value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue DecimalToAtomicValue(decimal value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue Int64ToAtomicValue(long value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue Int32ToAtomicValue(int value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue BooleanToAtomicValue(bool value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue DoubleToAtomicValue(double value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue SingleToAtomicValue(float value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue DateTimeToAtomicValue(DateTime value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue XmlQualifiedNameToAtomicValue(XmlQualifiedName value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue TimeSpanToAtomicValue(TimeSpan value, int index, XmlQueryRuntime runtime);
    public static XmlAtomicValue BytesToAtomicValue(Byte[] value, int index, XmlQueryRuntime runtime);
    public static IList`1<XPathItem> NavigatorsToItems(IList`1<XPathNavigator> listNavigators);
    public static IList`1<XPathNavigator> ItemsToNavigators(IList`1<XPathItem> listItems);
}
internal class System.Xml.Xsl.Runtime.XmlIntegerSortKey : XmlSortKey {
    private long _longVal;
    public XmlIntegerSortKey(long value, XmlCollation collation);
    public virtual int CompareTo(object obj);
}
internal class System.Xml.Xsl.Runtime.XmlIntSortKey : XmlSortKey {
    private int _intVal;
    public XmlIntSortKey(int value, XmlCollation collation);
    public virtual int CompareTo(object obj);
}
internal class System.Xml.Xsl.Runtime.XmlMergeSequenceWriter : XmlSequenceWriter {
    private XmlRawWriter _xwrt;
    private bool _lastItemWasAtomic;
    public XmlMergeSequenceWriter(XmlRawWriter xwrt);
    public virtual XmlRawWriter StartTree(XPathNodeType rootType, IXmlNamespaceResolver nsResolver, XmlNameTable nameTable);
    public virtual void EndTree();
    public virtual void WriteItem(XPathItem item);
    private void WriteString(string value);
    private void CopyNode(XPathNavigator nav);
    private bool CopyShallowNode(XPathNavigator nav);
    private void CopyNamespaces(XPathNavigator nav, XPathNamespaceScope nsScope);
}
internal class System.Xml.Xsl.Runtime.XmlNavAttrFilter : XmlNavigatorFilter {
    private static XmlNavigatorFilter s_singleton;
    private static XmlNavAttrFilter();
    public static XmlNavigatorFilter Create();
    public virtual bool MoveToContent(XPathNavigator navigator);
    public virtual bool MoveToNextContent(XPathNavigator navigator);
    public virtual bool MoveToFollowingSibling(XPathNavigator navigator);
    public virtual bool MoveToPreviousSibling(XPathNavigator navigator);
    public virtual bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd);
    public virtual bool IsFiltered(XPathNavigator navigator);
}
[EditorBrowsableAttribute("1")]
public abstract class System.Xml.Xsl.Runtime.XmlNavigatorFilter : object {
    public abstract virtual bool MoveToContent(XPathNavigator navigator);
    public abstract virtual bool MoveToNextContent(XPathNavigator navigator);
    public abstract virtual bool MoveToFollowingSibling(XPathNavigator navigator);
    public abstract virtual bool MoveToPreviousSibling(XPathNavigator navigator);
    public abstract virtual bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navigatorEnd);
    public abstract virtual bool IsFiltered(XPathNavigator navigator);
}
internal class System.Xml.Xsl.Runtime.XmlNavigatorStack : ValueType {
    private XPathNavigator[] _stkNav;
    private int _sp;
    private static int InitialStackSize;
    public bool IsEmpty { get; }
    public void Push(XPathNavigator nav);
    public XPathNavigator Pop();
    public XPathNavigator Peek();
    public void Reset();
    public bool get_IsEmpty();
}
internal class System.Xml.Xsl.Runtime.XmlNavNameFilter : XmlNavigatorFilter {
    private string _localName;
    private string _namespaceUri;
    private XmlNavNameFilter(string localName, string namespaceUri);
    public static XmlNavigatorFilter Create(string localName, string namespaceUri);
    public virtual bool MoveToContent(XPathNavigator navigator);
    public virtual bool MoveToNextContent(XPathNavigator navigator);
    public virtual bool MoveToFollowingSibling(XPathNavigator navigator);
    public virtual bool MoveToPreviousSibling(XPathNavigator navigator);
    public virtual bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd);
    public virtual bool IsFiltered(XPathNavigator navigator);
}
internal class System.Xml.Xsl.Runtime.XmlNavNeverFilter : XmlNavigatorFilter {
    private static XmlNavigatorFilter s_singleton;
    private static XmlNavNeverFilter();
    public static XmlNavigatorFilter Create();
    public virtual bool MoveToContent(XPathNavigator navigator);
    public virtual bool MoveToNextContent(XPathNavigator navigator);
    public virtual bool MoveToFollowingSibling(XPathNavigator navigator);
    public virtual bool MoveToPreviousSibling(XPathNavigator navigator);
    public virtual bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd);
    public virtual bool IsFiltered(XPathNavigator navigator);
    public static bool MoveToFirstAttributeContent(XPathNavigator navigator);
    public static bool MoveToNextAttributeContent(XPathNavigator navigator);
}
internal class System.Xml.Xsl.Runtime.XmlNavTypeFilter : XmlNavigatorFilter {
    private static XmlNavigatorFilter[] s_typeFilters;
    private XPathNodeType _nodeType;
    private int _mask;
    private static XmlNavTypeFilter();
    private XmlNavTypeFilter(XPathNodeType nodeType);
    public static XmlNavigatorFilter Create(XPathNodeType nodeType);
    public virtual bool MoveToContent(XPathNavigator navigator);
    public virtual bool MoveToNextContent(XPathNavigator navigator);
    public virtual bool MoveToFollowingSibling(XPathNavigator navigator);
    public virtual bool MoveToPreviousSibling(XPathNavigator navigator);
    public virtual bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd);
    public virtual bool IsFiltered(XPathNavigator navigator);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlQueryContext : object {
    private XmlQueryRuntime _runtime;
    private XPathNavigator _defaultDataSource;
    private XmlResolver _dataSources;
    private Hashtable _dataSourceCache;
    private XsltArgumentList _argList;
    private XmlExtensionFunctionTable _extFuncsLate;
    private WhitespaceRuleLookup _wsRules;
    private QueryReaderSettings _readerSettings;
    public XmlNameTable QueryNameTable { get; }
    public XmlNameTable DefaultNameTable { get; }
    public XPathNavigator DefaultDataSource { get; }
    internal XmlQueryContext(XmlQueryRuntime runtime, object defaultDataSource, XmlResolver dataSources, XsltArgumentList argList, WhitespaceRuleLookup wsRules);
    public XmlNameTable get_QueryNameTable();
    public XmlNameTable get_DefaultNameTable();
    public XPathNavigator get_DefaultDataSource();
    public XPathNavigator GetDataSource(string uriRelative, string uriBase);
    private XPathNavigator ConstructDocument(object dataSource, string uriRelative, Uri uriResolved);
    public object GetParameter(string localName, string namespaceUri);
    public object GetLateBoundObject(string namespaceUri);
    public bool LateBoundFunctionExists(string name, string namespaceUri);
    public IList`1<XPathItem> InvokeXsltLateBoundFunction(string name, string namespaceUri, IList`1[] args);
    public void OnXsltMessageEncountered(string message);
}
internal class System.Xml.Xsl.Runtime.XmlQueryDataReader : BinaryReader {
    public XmlQueryDataReader(Stream input);
    public int ReadInt32Encoded();
    public string ReadStringQ();
    public sbyte ReadSByte(sbyte minValue, sbyte maxValue);
}
internal class System.Xml.Xsl.Runtime.XmlQueryDataWriter : BinaryWriter {
    public XmlQueryDataWriter(Stream output);
    public void WriteInt32Encoded(int value);
    public void WriteStringQ(string value);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlQueryItemSequence : XmlQuerySequence`1<XPathItem> {
    public static XmlQueryItemSequence Empty;
    public XmlQueryItemSequence(int capacity);
    public XmlQueryItemSequence(XPathItem item);
    private static XmlQueryItemSequence();
    public static XmlQueryItemSequence CreateOrReuse(XmlQueryItemSequence seq);
    public static XmlQueryItemSequence CreateOrReuse(XmlQueryItemSequence seq, XPathItem item);
    public void AddClone(XPathItem item);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlQueryNodeSequence : XmlQuerySequence`1<XPathNavigator> {
    public static XmlQueryNodeSequence Empty;
    private XmlQueryNodeSequence _docOrderDistinct;
    public bool IsDocOrderDistinct { get; public set; }
    private bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.IsReadOnly { get; }
    private XPathItem System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.Item { get; private set; }
    public XmlQueryNodeSequence(int capacity);
    public XmlQueryNodeSequence(IList`1<XPathNavigator> list);
    public XmlQueryNodeSequence(XPathNavigator[] array, int size);
    public XmlQueryNodeSequence(XPathNavigator navigator);
    private static XmlQueryNodeSequence();
    public static XmlQueryNodeSequence CreateOrReuse(XmlQueryNodeSequence seq);
    public static XmlQueryNodeSequence CreateOrReuse(XmlQueryNodeSequence seq, XPathNavigator navigator);
    public bool get_IsDocOrderDistinct();
    public void set_IsDocOrderDistinct(bool value);
    public XmlQueryNodeSequence DocOrderDistinct(IComparer`1<XPathNavigator> comparer);
    public void AddClone(XPathNavigator navigator);
    protected virtual void OnItemsChanged();
    private sealed virtual override IEnumerator`1<XPathItem> System.Collections.Generic.IEnumerable<System.Xml.XPath.XPathItem>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Add(XPathItem value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Contains(XPathItem value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.CopyTo(XPathItem[] array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Remove(XPathItem value);
    private sealed virtual override XPathItem System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.set_Item(int index, XPathItem value);
    private sealed virtual override int System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.IndexOf(XPathItem value);
    private sealed virtual override void System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.Insert(int index, XPathItem value);
    private sealed virtual override void System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.RemoveAt(int index);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlQueryOutput : XmlWriter {
    private XmlRawWriter _xwrt;
    private XmlQueryRuntime _runtime;
    private XmlAttributeCache _attrCache;
    private int _depth;
    private XmlState _xstate;
    private XmlSequenceWriter _seqwrt;
    private XmlNamespaceManager _nsmgr;
    private int _cntNmsp;
    private Dictionary`2<string, string> _conflictPrefixes;
    private int _prefixIndex;
    private string _piTarget;
    private StringConcat _nodeText;
    private Stack`1<string> _stkNames;
    private XPathNodeType _rootType;
    private Dictionary`2<string, string> _usedPrefixes;
    internal XmlSequenceWriter SequenceWriter { get; }
    internal XmlRawWriter Writer { get; internal set; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal XmlQueryOutput(XmlQueryRuntime runtime, XmlSequenceWriter seqwrt);
    internal XmlQueryOutput(XmlQueryRuntime runtime, XmlEventCache xwrt);
    internal XmlSequenceWriter get_SequenceWriter();
    internal XmlRawWriter get_Writer();
    internal void set_Writer(XmlRawWriter value);
    private void SetWrappedWriter(XmlRawWriter writer);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteCData(string text);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public void StartTree(XPathNodeType rootType);
    public void EndTree();
    public void WriteStartElementUnchecked(string prefix, string localName, string ns);
    public void WriteStartElementUnchecked(string localName);
    public void StartElementContentUnchecked();
    public void WriteEndElementUnchecked(string prefix, string localName, string ns);
    public void WriteEndElementUnchecked(string localName);
    public void WriteStartAttributeUnchecked(string prefix, string localName, string ns);
    public void WriteStartAttributeUnchecked(string localName);
    public void WriteEndAttributeUnchecked();
    public void WriteNamespaceDeclarationUnchecked(string prefix, string ns);
    public void WriteStringUnchecked(string text);
    public void WriteRawUnchecked(string text);
    public void WriteStartRoot();
    public void WriteEndRoot();
    public void WriteStartElementLocalName(string localName);
    public void WriteStartAttributeLocalName(string localName);
    public void WriteStartElementComputed(string tagName, int prefixMappingsIndex);
    public void WriteStartElementComputed(string tagName, string ns);
    public void WriteStartElementComputed(XPathNavigator navigator);
    public void WriteStartElementComputed(XmlQualifiedName name);
    public void WriteStartAttributeComputed(string tagName, int prefixMappingsIndex);
    public void WriteStartAttributeComputed(string tagName, string ns);
    public void WriteStartAttributeComputed(XPathNavigator navigator);
    public void WriteStartAttributeComputed(XmlQualifiedName name);
    public void WriteNamespaceDeclaration(string prefix, string ns);
    public void WriteStartNamespace(string prefix);
    public void WriteNamespaceString(string text);
    public void WriteEndNamespace();
    public void WriteStartComment();
    public void WriteCommentString(string text);
    public void WriteEndComment();
    public void WriteStartProcessingInstruction(string target);
    public void WriteProcessingInstructionString(string text);
    public void WriteEndProcessingInstruction();
    public void WriteItem(XPathItem item);
    public void XsltCopyOf(XPathNavigator navigator);
    public bool StartCopy(XPathNavigator navigator);
    public void EndCopy(XPathNavigator navigator);
    private void AddNamespace(string prefix, string ns);
    private void WriteString(string text, bool disableOutputEscaping);
    private void CopyNode(XPathNavigator navigator);
    private bool StartCopy(XPathNavigator navigator, bool callChk);
    private void EndCopy(XPathNavigator navigator, bool callChk);
    private void CopyNamespaces(XPathNavigator navigator, XPathNamespaceScope nsScope);
    private void CopyNamespacesHelper(XPathNavigator navigator, XPathNamespaceScope nsScope);
    private void ConstructWithinContent(XPathNodeType rootType);
    private void ConstructInEnumAttrs(XPathNodeType rootType);
    private void WriteCachedNamespaces();
    private XPathNodeType XmlStateToNodeType(XmlState xstate);
    private string CheckAttributePrefix(string prefix, string ns);
    private string RemapPrefix(string prefix, string ns, bool isElemPrefix);
    private void WriteStartComputed(XPathNodeType nodeType, string tagName, int prefixMappingsIndex);
    private void WriteStartComputed(XPathNodeType nodeType, string tagName, string ns);
    private void WriteStartComputed(XPathNodeType nodeType, XPathNavigator navigator);
    private void WriteStartComputed(XPathNodeType nodeType, XmlQualifiedName name);
    private string EnsureValidName(string prefix, string localName, string ns, XPathNodeType nodeType);
    private void PushElementNames(string prefix, string localName, string ns);
    private void PopElementNames(String& prefix, String& localName, String& ns);
    private void ThrowInvalidStateError(XPathNodeType constructorType);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlQueryRuntime : object {
    private XmlQueryContext _ctxt;
    private XsltLibrary _xsltLib;
    private EarlyBoundInfo[] _earlyInfo;
    private Object[] _earlyObjects;
    private String[] _globalNames;
    private Object[] _globalValues;
    private XmlNameTable _nameTableQuery;
    private String[] _atomizedNames;
    private XmlNavigatorFilter[] _filters;
    private StringPair[][] _prefixMappingsList;
    private XmlQueryType[] _types;
    private XmlCollation[] _collations;
    private DocumentOrderComparer _docOrderCmp;
    private ArrayList[] _indexes;
    private XmlQueryOutput _output;
    private Stack`1<XmlQueryOutput> _stkOutput;
    internal static BindingFlags EarlyBoundFlags;
    internal static BindingFlags LateBoundFlags;
    public XmlQueryContext ExternalContext { get; }
    public XsltLibrary XsltFunctions { get; }
    public XmlNameTable NameTable { get; }
    public XmlQueryOutput Output { get; }
    internal XmlQueryRuntime(XmlQueryStaticData data, object defaultDataSource, XmlResolver dataSources, XsltArgumentList argList, XmlSequenceWriter seqWrt);
    public String[] DebugGetGlobalNames();
    public IList DebugGetGlobalValue(string name);
    public void DebugSetGlobalValue(string name, object value);
    public object DebugGetXsltValue(IList seq);
    public XmlQueryContext get_ExternalContext();
    public XsltLibrary get_XsltFunctions();
    public object GetEarlyBoundObject(int index);
    public bool EarlyBoundFunctionExists(string name, string namespaceUri);
    public bool IsGlobalComputed(int index);
    public object GetGlobalValue(int index);
    public void SetGlobalValue(int index, object value);
    public XmlNameTable get_NameTable();
    public string GetAtomizedName(int index);
    public XmlNavigatorFilter GetNameFilter(int index);
    public XmlNavigatorFilter GetTypeFilter(XPathNodeType nodeType);
    public XmlQualifiedName ParseTagName(string tagName, int indexPrefixMappings);
    public XmlQualifiedName ParseTagName(string tagName, string ns);
    internal void ParseTagName(string tagName, int idxPrefixMappings, String& prefix, String& localName, String& ns);
    public bool IsQNameEqual(XPathNavigator n1, XPathNavigator n2);
    public bool IsQNameEqual(XPathNavigator navigator, int indexLocalName, int indexNamespaceUri);
    internal XmlQueryType GetXmlType(int idxType);
    public object ChangeTypeXsltArgument(int indexType, object value, Type destinationType);
    internal object ChangeTypeXsltArgument(XmlQueryType xmlType, object value, Type destinationType);
    public object ChangeTypeXsltResult(int indexType, object value);
    internal object ChangeTypeXsltResult(XmlQueryType xmlType, object value);
    private static XPathNavigator EnsureNavigator(object value);
    public bool MatchesXmlType(IList`1<XPathItem> seq, int indexType);
    public bool MatchesXmlType(XPathItem item, int indexType);
    public bool MatchesXmlType(IList`1<XPathItem> seq, XmlTypeCode code);
    public bool MatchesXmlType(XPathItem item, XmlTypeCode code);
    private XmlQueryType CreateXmlType(XPathItem item);
    public XmlCollation GetCollation(int index);
    public XmlCollation CreateCollation(string collation);
    public int ComparePosition(XPathNavigator navigatorThis, XPathNavigator navigatorThat);
    public IList`1<XPathNavigator> DocOrderDistinct(IList`1<XPathNavigator> seq);
    public string GenerateId(XPathNavigator navigator);
    public bool FindIndex(XPathNavigator context, int indexId, XmlILIndex& index);
    public void AddNewIndex(XPathNavigator context, int indexId, XmlILIndex index);
    public XmlQueryOutput get_Output();
    public void StartSequenceConstruction(XmlQueryOutput& output);
    public IList`1<XPathItem> EndSequenceConstruction(XmlQueryOutput& output);
    public void StartRtfConstruction(string baseUri, XmlQueryOutput& output);
    public XPathNavigator EndRtfConstruction(XmlQueryOutput& output);
    public XPathNavigator TextRtfConstruction(string text, string baseUri);
    public void SendMessage(string message);
    public void ThrowException(string text);
    internal static XPathNavigator SyncToNavigator(XPathNavigator navigatorThis, XPathNavigator navigatorThat);
    public static int OnCurrentNodeChanged(XPathNavigator currentNode);
    private static bool IsInheritedNamespace(XPathNavigator node);
    private static void OnCurrentNodeChanged2(string baseUri, int lineNumber, int linePosition);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlQuerySequence`1 : object {
    public static XmlQuerySequence`1<T> Empty;
    private static Type s_XPathItemType;
    private T[] _items;
    private int _size;
    private static int DefaultCacheSize;
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public T Item { get; public set; }
    public XmlQuerySequence`1(int capacity);
    public XmlQuerySequence`1(T[] array, int size);
    public XmlQuerySequence`1(T value);
    private static XmlQuerySequence`1();
    public static XmlQuerySequence`1<T> CreateOrReuse(XmlQuerySequence`1<T> seq);
    public static XmlQuerySequence`1<T> CreateOrReuse(XmlQuerySequence`1<T> seq, T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    public sealed virtual bool Contains(T value);
    public sealed virtual void CopyTo(T[] array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int IndexOf(T value);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T value);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    public void Clear();
    public void Add(T value);
    public void SortByKeys(Array keys);
    private void EnsureCache();
    protected virtual void OnItemsChanged();
}
internal class System.Xml.Xsl.Runtime.XmlQueryStaticData : object {
    public static string DataFieldName;
    public static string TypesFieldName;
    private static int CurrentFormatVersion;
    private XmlWriterSettings _defaultWriterSettings;
    private IList`1<WhitespaceRule> _whitespaceRules;
    private String[] _names;
    private StringPair[][] _prefixMappingsList;
    private Int32Pair[] _filters;
    private XmlQueryType[] _types;
    private XmlCollation[] _collations;
    private String[] _globalNames;
    private EarlyBoundInfo[] _earlyBound;
    public XmlWriterSettings DefaultWriterSettings { get; }
    public IList`1<WhitespaceRule> WhitespaceRules { get; }
    public String[] Names { get; }
    public StringPair[][] PrefixMappingsList { get; }
    public Int32Pair[] Filters { get; }
    public XmlQueryType[] Types { get; }
    public XmlCollation[] Collations { get; }
    public String[] GlobalNames { get; }
    public EarlyBoundInfo[] EarlyBound { get; }
    public XmlQueryStaticData(Byte[] data, Type[] ebTypes);
    public void GetObjectData(Byte[]& data, Type[]& ebTypes);
    public XmlWriterSettings get_DefaultWriterSettings();
    public IList`1<WhitespaceRule> get_WhitespaceRules();
    public String[] get_Names();
    public StringPair[][] get_PrefixMappingsList();
    public Int32Pair[] get_Filters();
    public XmlQueryType[] get_Types();
    public XmlCollation[] get_Collations();
    public String[] get_GlobalNames();
    public EarlyBoundInfo[] get_EarlyBound();
}
internal class System.Xml.Xsl.Runtime.XmlRawWriterWrapper : XmlRawWriter {
    private XmlWriter _wrapped;
    public XmlWriterSettings Settings { get; }
    public XmlRawWriterWrapper(XmlWriter writer);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    protected virtual void Dispose(bool disposing);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
}
internal abstract class System.Xml.Xsl.Runtime.XmlSequenceWriter : object {
    public abstract virtual XmlRawWriter StartTree(XPathNodeType rootType, IXmlNamespaceResolver nsResolver, XmlNameTable nameTable);
    public abstract virtual void EndTree();
    public abstract virtual void WriteItem(XPathItem item);
}
internal abstract class System.Xml.Xsl.Runtime.XmlSortKey : object {
    private int _priority;
    private XmlSortKey _nextKey;
    unknown int Priority {public set; }
    public void set_Priority(int value);
    public XmlSortKey AddSortKey(XmlSortKey sortKey);
    protected int BreakSortingTie(XmlSortKey that);
    protected int CompareToEmpty(object obj);
    public abstract virtual int CompareTo(object that);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XmlSortKeyAccumulator : ValueType {
    private XmlSortKey[] _keys;
    private int _pos;
    private static int DefaultSortKeyCount;
    public Array Keys { get; }
    public void Create();
    public void AddStringSortKey(XmlCollation collation, string value);
    public void AddDecimalSortKey(XmlCollation collation, decimal value);
    public void AddIntegerSortKey(XmlCollation collation, long value);
    public void AddIntSortKey(XmlCollation collation, int value);
    public void AddDoubleSortKey(XmlCollation collation, double value);
    public void AddDateTimeSortKey(XmlCollation collation, DateTime value);
    public void AddEmptySortKey(XmlCollation collation);
    public void FinishSortKeys();
    private void AppendSortKey(XmlSortKey key);
    public Array get_Keys();
}
internal enum System.Xml.Xsl.Runtime.XmlState : Enum {
    public int value__;
    public static XmlState WithinSequence;
    public static XmlState EnumAttrs;
    public static XmlState WithinContent;
    public static XmlState WithinAttr;
    public static XmlState WithinNmsp;
    public static XmlState WithinComment;
    public static XmlState WithinPI;
}
internal class System.Xml.Xsl.Runtime.XmlStringSortKey : XmlSortKey {
    private SortKey _sortKey;
    private Byte[] _sortKeyBytes;
    private bool _descendingOrder;
    public XmlStringSortKey(SortKey sortKey, bool descendingOrder);
    public XmlStringSortKey(Byte[] sortKey, bool descendingOrder);
    public virtual int CompareTo(object obj);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XPathFollowingIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private bool _needFirst;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator input, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
    internal static bool MoveFirst(XmlNavigatorFilter filter, XPathNavigator nav);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XPathFollowingMergeIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private IteratorState _state;
    private XPathNavigator _navCurrent;
    private XPathNavigator _navNext;
    public XPathNavigator Current { get; }
    public void Create(XmlNavigatorFilter filter);
    public IteratorResult MoveNext(XPathNavigator input);
    public XPathNavigator get_Current();
    private IteratorResult MoveFailed();
    private IteratorResult MoveFirst();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private XPathNavigator _navCurrent;
    private XmlNavigatorStack _navStack;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator input, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
    private void PushAncestors();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XPathPrecedingIterator : ValueType {
    private XmlNavigatorStack _stack;
    private XPathNavigator _navCurrent;
    public XPathNavigator Current { get; }
    public void Create(XPathNavigator context, XmlNavigatorFilter filter);
    public bool MoveNext();
    public XPathNavigator get_Current();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator : ValueType {
    private XmlNavigatorFilter _filter;
    private IteratorState _state;
    private XPathNavigator _navCurrent;
    private XPathNavigator _navNext;
    private XmlNavigatorStack _navStack;
    public XPathNavigator Current { get; }
    public void Create(XmlNavigatorFilter filter);
    public IteratorResult MoveNext(XPathNavigator input);
    public XPathNavigator get_Current();
    private void PushAncestors();
}
[EditorBrowsableAttribute("1")]
public static class System.Xml.Xsl.Runtime.XsltConvert : object {
    internal static Type BooleanType;
    internal static Type ByteArrayType;
    internal static Type ByteType;
    internal static Type DateTimeType;
    internal static Type DecimalType;
    internal static Type DoubleType;
    internal static Type ICollectionType;
    internal static Type IEnumerableType;
    internal static Type IListType;
    internal static Type Int16Type;
    internal static Type Int32Type;
    internal static Type Int64Type;
    internal static Type IXPathNavigableType;
    internal static Type ObjectType;
    internal static Type SByteType;
    internal static Type SingleType;
    internal static Type StringType;
    internal static Type TimeSpanType;
    internal static Type UInt16Type;
    internal static Type UInt32Type;
    internal static Type UInt64Type;
    internal static Type UriType;
    internal static Type VoidType;
    internal static Type XmlAtomicValueType;
    internal static Type XmlQualifiedNameType;
    internal static Type XPathItemType;
    internal static Type XPathNavigatorArrayType;
    internal static Type XPathNavigatorType;
    internal static Type XPathNodeIteratorType;
    private static XsltConvert();
    public static bool ToBoolean(XPathItem item);
    public static bool ToBoolean(IList`1<XPathItem> listItems);
    public static double ToDouble(string value);
    public static double ToDouble(XPathItem item);
    public static double ToDouble(IList`1<XPathItem> listItems);
    public static XPathNavigator ToNode(XPathItem item);
    public static XPathNavigator ToNode(IList`1<XPathItem> listItems);
    public static IList`1<XPathNavigator> ToNodeSet(XPathItem item);
    public static IList`1<XPathNavigator> ToNodeSet(IList`1<XPathItem> listItems);
    public static string ToString(double value);
    public static string ToString(XPathItem item);
    public static string ToString(IList`1<XPathItem> listItems);
    public static string ToString(DateTime value);
    public static double ToDouble(decimal value);
    public static double ToDouble(int value);
    public static double ToDouble(long value);
    public static decimal ToDecimal(double value);
    public static int ToInt(double value);
    public static long ToLong(double value);
    public static DateTime ToDateTime(string value);
    internal static XmlAtomicValue ConvertToType(XmlAtomicValue value, XmlQueryType destinationType);
    public static IList`1<XPathNavigator> EnsureNodeSet(IList`1<XPathItem> listItems);
    internal static XmlQueryType InferXsltType(Type clrType);
}
[EditorBrowsableAttribute("1")]
public static class System.Xml.Xsl.Runtime.XsltFunctions : object {
    private static CompareInfo s_compareInfo;
    private static XsltFunctions();
    public static bool StartsWith(string s1, string s2);
    public static bool Contains(string s1, string s2);
    public static string SubstringBefore(string s1, string s2);
    public static string SubstringAfter(string s1, string s2);
    public static string Substring(string value, double startIndex);
    public static string Substring(string value, double startIndex, double length);
    public static string NormalizeSpace(string value);
    public static string Translate(string arg, string mapString, string transString);
    public static bool Lang(string value, XPathNavigator context);
    public static double Round(double value);
    public static XPathItem SystemProperty(XmlQualifiedName name);
    public static string BaseUri(XPathNavigator navigator);
    public static string OuterXml(XPathNavigator navigator);
    public static string EXslObjectType(IList`1<XPathItem> value);
    public static double MSNumber(IList`1<XPathItem> value);
    public static string MSFormatDateTime(string dateTime, string format, string lang, bool isDate);
    public static double MSStringCompare(string s1, string s2, string lang, string options);
    public static string MSUtc(string dateTime);
    public static string MSLocalName(string name);
    public static string MSNamespaceUri(string name, XPathNavigator currentNode);
    private static CultureInfo GetCultureInfo(string lang);
    private static void PrintDate(Char[] text, DateTime dt);
    private static void PrintTime(Char[] text, DateTime dt);
    private static void PrintYear(Char[] text, int value);
    private static void PrintMsec(Char[] text, int value);
    private static void ShortToCharArray(Char[] text, int start, int value);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Xsl.Runtime.XsltLibrary : object {
    private XmlQueryRuntime _runtime;
    private HybridDictionary _functionsAvail;
    private Dictionary`2<XmlQualifiedName, DecimalFormat> _decimalFormats;
    private List`1<DecimalFormatter> _decimalFormatters;
    internal static int InvariantCultureLcid;
    internal static string InvariantCultureName;
    internal XsltLibrary(XmlQueryRuntime runtime);
    public string FormatMessage(string res, IList`1<string> args);
    public int CheckScriptNamespace(string nsUri);
    public bool ElementAvailable(XmlQualifiedName name);
    public bool FunctionAvailable(XmlQualifiedName name);
    private bool FunctionAvailableHelper(XmlQualifiedName name);
    public int RegisterDecimalFormat(XmlQualifiedName name, string infinitySymbol, string nanSymbol, string characters);
    private DecimalFormat CreateDecimalFormat(string infinitySymbol, string nanSymbol, string characters);
    public double RegisterDecimalFormatter(string formatPicture, string infinitySymbol, string nanSymbol, string characters);
    public string FormatNumberStatic(double value, double decimalFormatterIndex);
    public string FormatNumberDynamic(double value, string formatPicture, XmlQualifiedName decimalFormatName, string errorMessageName);
    public string NumberFormat(IList`1<XPathItem> value, string formatString, double lang, string letterValue, string groupingSeparator, double groupingSize);
    public int LangToLcid(string lang, bool forwardCompatibility);
    internal static int LangToLcidInternal(string lang, bool forwardCompatibility, IErrorHelper errorHelper);
    internal static string LangToNameInternal(string lang, bool forwardCompatibility, IErrorHelper errorHelper);
    private static TypeCode GetTypeCode(XPathItem item);
    private static TypeCode WeakestTypeCode(TypeCode typeCode1, TypeCode typeCode2);
    private static bool CompareNumbers(ComparisonOperator op, double left, double right);
    private static bool CompareValues(ComparisonOperator op, XPathItem left, XPathItem right, TypeCode compType);
    private static bool CompareNodeSetAndValue(ComparisonOperator op, IList`1<XPathNavigator> nodeset, XPathItem val, TypeCode compType);
    private static bool CompareNodeSetAndNodeSet(ComparisonOperator op, IList`1<XPathNavigator> left, IList`1<XPathNavigator> right, TypeCode compType);
    public bool EqualityOperator(double opCode, IList`1<XPathItem> left, IList`1<XPathItem> right);
    private static ComparisonOperator InvertOperator(ComparisonOperator op);
    public bool RelationalOperator(double opCode, IList`1<XPathItem> left, IList`1<XPathItem> right);
    public bool IsSameNodeSort(XPathNavigator nav1, XPathNavigator nav2);
    [ConditionalAttribute("DEBUG")]
internal static void CheckXsltValue(XPathItem item);
    [ConditionalAttribute("DEBUG")]
internal static void CheckXsltValue(IList`1<XPathItem> val);
    private static bool IsNodeSetOrRtf(IList`1<XPathItem> val);
    private static IList`1<XPathNavigator> ToNodeSetOrRtf(IList`1<XPathItem> val);
}
internal static class System.Xml.Xsl.Runtime.XsltMethods : object {
    public static MethodInfo FormatMessage;
    public static MethodInfo EnsureNodeSet;
    public static MethodInfo EqualityOperator;
    public static MethodInfo RelationalOperator;
    public static MethodInfo StartsWith;
    public static MethodInfo Contains;
    public static MethodInfo SubstringBefore;
    public static MethodInfo SubstringAfter;
    public static MethodInfo Substring2;
    public static MethodInfo Substring3;
    public static MethodInfo NormalizeSpace;
    public static MethodInfo Translate;
    public static MethodInfo Lang;
    public static MethodInfo Floor;
    public static MethodInfo Ceiling;
    public static MethodInfo Round;
    public static MethodInfo SystemProperty;
    public static MethodInfo BaseUri;
    public static MethodInfo OuterXml;
    public static MethodInfo OnCurrentNodeChanged;
    public static MethodInfo MSFormatDateTime;
    public static MethodInfo MSStringCompare;
    public static MethodInfo MSUtc;
    public static MethodInfo MSNumber;
    public static MethodInfo MSLocalName;
    public static MethodInfo MSNamespaceUri;
    public static MethodInfo EXslObjectType;
    public static MethodInfo CheckScriptNamespace;
    public static MethodInfo FunctionAvailable;
    public static MethodInfo ElementAvailable;
    public static MethodInfo RegisterDecimalFormat;
    public static MethodInfo RegisterDecimalFormatter;
    public static MethodInfo FormatNumberStatic;
    public static MethodInfo FormatNumberDynamic;
    public static MethodInfo IsSameNodeSort;
    public static MethodInfo LangToLcid;
    public static MethodInfo NumberFormat;
    private static XsltMethods();
    public static MethodInfo GetMethod(Type className, string methName);
    public static MethodInfo GetMethod(Type className, string methName, Type[] args);
}
[DebuggerDisplayAttribute("{Uri} [{StartLine},{StartPos} -- {EndLine},{EndPos}]")]
internal class System.Xml.Xsl.SourceLineInfo : object {
    protected string uriString;
    protected Location start;
    protected Location end;
    protected static int NoSourceMagicNumber;
    public static SourceLineInfo NoSource;
    public string Uri { get; }
    public int StartLine { get; }
    public Location End { get; }
    public Location Start { get; }
    public bool IsNoSource { get; }
    public SourceLineInfo(string uriString, int startLine, int startPos, int endLine, int endPos);
    public SourceLineInfo(string uriString, Location start, Location end);
    private static SourceLineInfo();
    public sealed virtual string get_Uri();
    public int get_StartLine();
    public sealed virtual Location get_End();
    public sealed virtual Location get_Start();
    public sealed virtual bool get_IsNoSource();
    [ConditionalAttribute("DEBUG")]
public static void Validate(ISourceLineInfo lineInfo);
    public static string GetFileName(string uriString);
}
internal class System.Xml.Xsl.StringPair : ValueType {
    private string _left;
    private string _right;
    public string Left { get; }
    public string Right { get; }
    public StringPair(string left, string right);
    public string get_Left();
    public string get_Right();
}
[FlagsAttribute]
internal enum System.Xml.Xsl.XmlNodeKindFlags : Enum {
    public int value__;
    public static XmlNodeKindFlags None;
    public static XmlNodeKindFlags Document;
    public static XmlNodeKindFlags Element;
    public static XmlNodeKindFlags Attribute;
    public static XmlNodeKindFlags Text;
    public static XmlNodeKindFlags Comment;
    public static XmlNodeKindFlags PI;
    public static XmlNodeKindFlags Namespace;
    public static XmlNodeKindFlags Content;
    public static XmlNodeKindFlags Any;
}
internal class System.Xml.Xsl.XmlQualifiedNameTest : XmlQualifiedName {
    private bool _exclude;
    private static string wildcard;
    private static XmlQualifiedNameTest s_wc;
    public static XmlQualifiedNameTest Wildcard { get; }
    public bool IsWildcard { get; }
    public bool IsNameWildcard { get; }
    public bool IsNamespaceWildcard { get; }
    private XmlQualifiedNameTest(string name, string ns, bool exclude);
    private static XmlQualifiedNameTest();
    public static XmlQualifiedNameTest get_Wildcard();
    public static XmlQualifiedNameTest New(string name, string ns);
    public bool get_IsWildcard();
    public bool get_IsNameWildcard();
    public bool get_IsNamespaceWildcard();
    private bool IsNameSubsetOf(XmlQualifiedNameTest other);
    private bool IsNamespaceSubsetOf(XmlQualifiedNameTest other);
    public bool IsSubsetOf(XmlQualifiedNameTest other);
    public bool HasIntersection(XmlQualifiedNameTest other);
    public virtual string ToString();
}
internal class System.Xml.Xsl.XmlQueryCardinality : ValueType {
    private int _value;
    private static XmlQueryCardinality[0...,0...] s_cardinalityProduct;
    private static XmlQueryCardinality[0...,0...] s_cardinalitySum;
    private static String[] s_toString;
    private static String[] s_serialized;
    public static XmlQueryCardinality None { get; }
    public static XmlQueryCardinality Zero { get; }
    public static XmlQueryCardinality One { get; }
    public static XmlQueryCardinality ZeroOrOne { get; }
    public static XmlQueryCardinality More { get; }
    public static XmlQueryCardinality NotOne { get; }
    public static XmlQueryCardinality OneOrMore { get; }
    public static XmlQueryCardinality ZeroOrMore { get; }
    private XmlQueryCardinality(int value);
    public XmlQueryCardinality(BinaryReader reader);
    private static XmlQueryCardinality();
    public static XmlQueryCardinality get_None();
    public static XmlQueryCardinality get_Zero();
    public static XmlQueryCardinality get_One();
    public static XmlQueryCardinality get_ZeroOrOne();
    public static XmlQueryCardinality get_More();
    public static XmlQueryCardinality get_NotOne();
    public static XmlQueryCardinality get_OneOrMore();
    public static XmlQueryCardinality get_ZeroOrMore();
    public bool Equals(XmlQueryCardinality other);
    public static bool op_Equality(XmlQueryCardinality left, XmlQueryCardinality right);
    public static bool op_Inequality(XmlQueryCardinality left, XmlQueryCardinality right);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static XmlQueryCardinality op_BitwiseOr(XmlQueryCardinality left, XmlQueryCardinality right);
    public static XmlQueryCardinality op_Multiply(XmlQueryCardinality left, XmlQueryCardinality right);
    public static XmlQueryCardinality op_Addition(XmlQueryCardinality left, XmlQueryCardinality right);
    public static bool op_LessThanOrEqual(XmlQueryCardinality left, XmlQueryCardinality right);
    public static bool op_GreaterThanOrEqual(XmlQueryCardinality left, XmlQueryCardinality right);
    public XmlQueryCardinality AtMost();
    public bool NeverSubset(XmlQueryCardinality other);
    public string ToString(string format);
    public virtual string ToString();
    public void GetObjectData(BinaryWriter writer);
}
internal abstract class System.Xml.Xsl.XmlQueryType : ListBase`1<XmlQueryType> {
    private static BitMatrix s_typeCodeDerivation;
    private int _hashCode;
    private static TypeFlags[] s_typeCodeToFlags;
    private static XmlTypeCode[] s_baseTypeCodes;
    private static String[] s_typeNames;
    public XmlTypeCode TypeCode { get; }
    public XmlQualifiedNameTest NameTest { get; }
    public XmlSchemaType SchemaType { get; }
    public bool IsNillable { get; }
    public XmlNodeKindFlags NodeKinds { get; }
    public bool IsStrict { get; }
    public XmlQueryCardinality Cardinality { get; }
    public XmlQueryType Prime { get; }
    public bool IsNotRtf { get; }
    public bool IsDod { get; }
    public XmlValueConverter ClrMapping { get; }
    public bool IsEmpty { get; }
    public bool IsSingleton { get; }
    public bool MaybeEmpty { get; }
    public bool MaybeMany { get; }
    public bool IsNode { get; }
    public bool IsAtomicValue { get; }
    public bool IsNumeric { get; }
    private static XmlQueryType();
    public abstract virtual XmlTypeCode get_TypeCode();
    public abstract virtual XmlQualifiedNameTest get_NameTest();
    public abstract virtual XmlSchemaType get_SchemaType();
    public abstract virtual bool get_IsNillable();
    public abstract virtual XmlNodeKindFlags get_NodeKinds();
    public abstract virtual bool get_IsStrict();
    public abstract virtual XmlQueryCardinality get_Cardinality();
    public abstract virtual XmlQueryType get_Prime();
    public abstract virtual bool get_IsNotRtf();
    public abstract virtual bool get_IsDod();
    public abstract virtual XmlValueConverter get_ClrMapping();
    public bool IsSubtypeOf(XmlQueryType baseType);
    public bool NeverSubtypeOf(XmlQueryType baseType);
    public bool Equals(XmlQueryType that);
    public static bool op_Equality(XmlQueryType left, XmlQueryType right);
    public static bool op_Inequality(XmlQueryType left, XmlQueryType right);
    public bool get_IsEmpty();
    public bool get_IsSingleton();
    public bool get_MaybeEmpty();
    public bool get_MaybeMany();
    public bool get_IsNode();
    public bool get_IsAtomicValue();
    public bool get_IsNumeric();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(string format);
    public abstract virtual void GetObjectData(BinaryWriter writer);
    private bool IsSubtypeOfItemType(XmlQueryType baseType);
    private bool HasIntersectionItemType(XmlQueryType other);
    private string ItemTypeToString(bool isXQ);
    private string NameAndType(bool isXQ);
    private static string QNameToString(XmlQualifiedName name);
}
internal static class System.Xml.Xsl.XmlQueryTypeFactory : object {
    public static XmlQueryType None;
    public static XmlQueryType Empty;
    public static XmlQueryType Item;
    public static XmlQueryType ItemS;
    public static XmlQueryType Node;
    public static XmlQueryType NodeS;
    public static XmlQueryType Element;
    public static XmlQueryType ElementS;
    public static XmlQueryType Document;
    public static XmlQueryType DocumentS;
    public static XmlQueryType Attribute;
    public static XmlQueryType AttributeQ;
    public static XmlQueryType AttributeS;
    public static XmlQueryType Namespace;
    public static XmlQueryType NamespaceS;
    public static XmlQueryType Text;
    public static XmlQueryType TextS;
    public static XmlQueryType Comment;
    public static XmlQueryType CommentS;
    public static XmlQueryType PI;
    public static XmlQueryType PIS;
    public static XmlQueryType DocumentOrElement;
    public static XmlQueryType DocumentOrElementQ;
    public static XmlQueryType DocumentOrElementS;
    public static XmlQueryType Content;
    public static XmlQueryType ContentS;
    public static XmlQueryType DocumentOrContent;
    public static XmlQueryType DocumentOrContentS;
    public static XmlQueryType AttributeOrContent;
    public static XmlQueryType AttributeOrContentS;
    public static XmlQueryType AnyAtomicType;
    public static XmlQueryType AnyAtomicTypeS;
    public static XmlQueryType String;
    public static XmlQueryType StringX;
    public static XmlQueryType StringXS;
    public static XmlQueryType Boolean;
    public static XmlQueryType BooleanX;
    public static XmlQueryType Int;
    public static XmlQueryType IntX;
    public static XmlQueryType IntXS;
    public static XmlQueryType IntegerX;
    public static XmlQueryType LongX;
    public static XmlQueryType DecimalX;
    public static XmlQueryType FloatX;
    public static XmlQueryType Double;
    public static XmlQueryType DoubleX;
    public static XmlQueryType DateTimeX;
    public static XmlQueryType QNameX;
    public static XmlQueryType UntypedDocument;
    public static XmlQueryType UntypedElement;
    public static XmlQueryType UntypedAttribute;
    public static XmlQueryType UntypedNode;
    public static XmlQueryType UntypedNodeS;
    public static XmlQueryType NodeNotRtf;
    public static XmlQueryType NodeNotRtfQ;
    public static XmlQueryType NodeNotRtfS;
    public static XmlQueryType NodeSDod;
    private static XmlTypeCode[] s_nodeKindToTypeCode;
    private static XmlQueryTypeFactory();
    public static XmlQueryType Type(XmlTypeCode code, bool isStrict);
    public static XmlQueryType Type(XmlSchemaSimpleType schemaType, bool isStrict);
    public static XmlQueryType Choice(XmlQueryType left, XmlQueryType right);
    public static XmlQueryType Choice(XmlQueryType[] types);
    public static XmlQueryType NodeChoice(XmlNodeKindFlags kinds);
    public static XmlQueryType Sequence(XmlQueryType left, XmlQueryType right);
    public static XmlQueryType PrimeProduct(XmlQueryType t, XmlQueryCardinality c);
    public static XmlQueryType AtMost(XmlQueryType t, XmlQueryCardinality c);
    private static List`1<XmlQueryType> PrimeChoice(List`1<XmlQueryType> accumulator, IList`1<XmlQueryType> types);
    private static void AddItemToChoice(List`1<XmlQueryType> accumulator, XmlQueryType itemType);
    public static XmlQueryType Type(XPathNodeType kind, XmlQualifiedNameTest nameTest, XmlSchemaType contentType, bool isNillable);
    [ConditionalAttribute("DEBUG")]
public static void CheckSerializability(XmlQueryType type);
    public static void Serialize(BinaryWriter writer, XmlQueryType type);
    public static XmlQueryType Deserialize(BinaryReader reader);
}
internal interface System.Xml.Xsl.XPath.IFocus {
    public abstract virtual QilNode GetCurrent();
    public abstract virtual QilNode GetPosition();
    public abstract virtual QilNode GetLast();
}
internal interface System.Xml.Xsl.XPath.IXPathBuilder`1 {
    public abstract virtual void StartBuild();
    public abstract virtual Node EndBuild(Node result);
    public abstract virtual Node String(string value);
    public abstract virtual Node Number(double value);
    public abstract virtual Node Operator(XPathOperator op, Node left, Node right);
    public abstract virtual Node Axis(XPathAxis xpathAxis, XPathNodeType nodeType, string prefix, string name);
    public abstract virtual Node JoinStep(Node left, Node right);
    public abstract virtual Node Predicate(Node node, Node condition, bool reverseStep);
    public abstract virtual Node Variable(string prefix, string name);
    public abstract virtual Node Function(string prefix, string name, IList`1<Node> args);
}
internal interface System.Xml.Xsl.XPath.IXPathEnvironment {
    public XPathQilFactory Factory { get; }
    public abstract virtual XPathQilFactory get_Factory();
    public abstract virtual QilNode ResolveVariable(string prefix, string name);
    public abstract virtual QilNode ResolveFunction(string prefix, string name, IList`1<QilNode> args, IFocus env);
    public abstract virtual string ResolvePrefix(string prefix);
}
internal enum System.Xml.Xsl.XPath.LexKind : Enum {
    public int value__;
    public static LexKind Unknown;
    public static LexKind Or;
    public static LexKind And;
    public static LexKind Eq;
    public static LexKind Ne;
    public static LexKind Lt;
    public static LexKind Le;
    public static LexKind Gt;
    public static LexKind Ge;
    public static LexKind Plus;
    public static LexKind Minus;
    public static LexKind Multiply;
    public static LexKind Divide;
    public static LexKind Modulo;
    public static LexKind UnaryMinus;
    public static LexKind Union;
    public static LexKind LastOperator;
    public static LexKind DotDot;
    public static LexKind ColonColon;
    public static LexKind SlashSlash;
    public static LexKind Number;
    public static LexKind Axis;
    public static LexKind Name;
    public static LexKind String;
    public static LexKind Eof;
    public static LexKind FirstStringable;
    public static LexKind LastNonChar;
    public static LexKind LParens;
    public static LexKind RParens;
    public static LexKind LBracket;
    public static LexKind RBracket;
    public static LexKind Dot;
    public static LexKind At;
    public static LexKind Comma;
    public static LexKind Star;
    public static LexKind Slash;
    public static LexKind Dollar;
    public static LexKind RBrace;
}
internal enum System.Xml.Xsl.XPath.XPathAxis : Enum {
    public int value__;
    public static XPathAxis Unknown;
    public static XPathAxis Ancestor;
    public static XPathAxis AncestorOrSelf;
    public static XPathAxis Attribute;
    public static XPathAxis Child;
    public static XPathAxis Descendant;
    public static XPathAxis DescendantOrSelf;
    public static XPathAxis Following;
    public static XPathAxis FollowingSibling;
    public static XPathAxis Namespace;
    public static XPathAxis Parent;
    public static XPathAxis Preceding;
    public static XPathAxis PrecedingSibling;
    public static XPathAxis Self;
    public static XPathAxis Root;
}
internal class System.Xml.Xsl.XPath.XPathBuilder : object {
    private XPathQilFactory _f;
    private IXPathEnvironment _environment;
    private bool _inTheBuild;
    protected QilNode fixupCurrent;
    protected QilNode fixupPosition;
    protected QilNode fixupLast;
    protected int numFixupCurrent;
    protected int numFixupPosition;
    protected int numFixupLast;
    private FixupVisitor _fixupVisitor;
    private static XmlNodeKindFlags[] s_XPathNodeType2QilXmlNodeKind;
    private static XPathOperatorGroup[] s_operatorGroup;
    private static QilNodeType[] s_qilOperator;
    private static XmlNodeKindFlags[] s_XPathAxisMask;
    public static XmlTypeCode[] argAny;
    public static XmlTypeCode[] argNodeSet;
    public static XmlTypeCode[] argBoolean;
    public static XmlTypeCode[] argDouble;
    public static XmlTypeCode[] argString;
    public static XmlTypeCode[] argString2;
    public static XmlTypeCode[] argString3;
    public static XmlTypeCode[] argFnSubstr;
    public static Dictionary`2<string, FunctionInfo`1<FuncId>> FunctionTable;
    private XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.Factory { get; }
    public XPathBuilder(IXPathEnvironment environment);
    private static XPathBuilder();
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IFocus.GetCurrent();
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IFocus.GetPosition();
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IFocus.GetLast();
    private sealed virtual override XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.get_Factory();
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveVariable(string prefix, string name);
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveFunction(string prefix, string name, IList`1<QilNode> args, IFocus env);
    private sealed virtual override string System.Xml.Xsl.XPath.IXPathEnvironment.ResolvePrefix(string prefix);
    public virtual void StartBuild();
    public virtual QilNode EndBuild(QilNode result);
    private QilNode GetCurrentNode();
    private QilNode GetCurrentPosition();
    private QilNode GetLastPosition();
    public virtual QilNode String(string value);
    public virtual QilNode Number(double value);
    public virtual QilNode Operator(XPathOperator op, QilNode left, QilNode right);
    private QilNode LogicalOperator(XPathOperator op, QilNode left, QilNode right);
    private QilNode CompareValues(XPathOperator op, QilNode left, QilNode right, XmlTypeCode compType);
    private QilNode CompareNodeSetAndValue(XPathOperator op, QilNode nodeset, QilNode val, XmlTypeCode compType);
    private static XPathOperator InvertOp(XPathOperator op);
    private QilNode CompareNodeSetAndNodeSet(XPathOperator op, QilNode left, QilNode right, XmlTypeCode compType);
    private QilNode EqualityOperator(XPathOperator op, QilNode left, QilNode right);
    private QilNode RelationalOperator(XPathOperator op, QilNode left, QilNode right);
    private QilNode NegateOperator(XPathOperator op, QilNode left, QilNode right);
    private QilNode ArithmeticOperator(XPathOperator op, QilNode left, QilNode right);
    private QilNode UnionOperator(XPathOperator op, QilNode left, QilNode right);
    public static XmlNodeKindFlags AxisTypeMask(XmlNodeKindFlags inputTypeMask, XPathNodeType nodeType, XPathAxis xpathAxis);
    private QilNode BuildAxisFilter(QilNode qilAxis, XPathAxis xpathAxis, XPathNodeType nodeType, string name, string nsUri);
    private QilNode BuildAxis(XPathAxis xpathAxis, XPathNodeType nodeType, string nsUri, string name);
    public virtual QilNode Axis(XPathAxis xpathAxis, XPathNodeType nodeType, string prefix, string name);
    public virtual QilNode JoinStep(QilNode left, QilNode right);
    public virtual QilNode Predicate(QilNode nodeset, QilNode predicate, bool isReverseStep);
    public static QilNode PredicateToBoolean(QilNode predicate, XPathQilFactory f, IXPathEnvironment env);
    public static QilNode BuildOnePredicate(QilNode nodeset, QilNode predicate, bool isReverseStep, XPathQilFactory f, FixupVisitor fixupVisitor, Int32& numFixupCurrent, Int32& numFixupPosition, Int32& numFixupLast);
    public virtual QilNode Variable(string prefix, string name);
    public virtual QilNode Function(string prefix, string name, IList`1<QilNode> args);
    private QilNode LocalNameOfFirstNode(QilNode arg);
    private QilNode NamespaceOfFirstNode(QilNode arg);
    private QilNode NameOf(QilNode arg);
    private QilNode NameOfFirstNode(QilNode arg);
    private QilNode Sum(QilNode arg);
    private static Dictionary`2<string, FunctionInfo`1<FuncId>> CreateFunctionTable();
    public static bool IsFunctionAvailable(string localName, string nsUri);
}
internal class System.Xml.Xsl.XPath.XPathCompileException : XslLoadException {
    public string queryString;
    public int startChar;
    public int endChar;
    internal XPathCompileException(string queryString, int startChar, int endChar, string resId, String[] args);
    internal XPathCompileException(string resId, String[] args);
    private static void AppendTrimmed(StringBuilder sb, string value, int startIndex, int count, TrimType trimType);
    internal string MarkOutError();
    internal virtual string FormatDetailedMessage();
}
internal enum System.Xml.Xsl.XPath.XPathOperator : Enum {
    public int value__;
    public static XPathOperator Unknown;
    public static XPathOperator Or;
    public static XPathOperator And;
    public static XPathOperator Eq;
    public static XPathOperator Ne;
    public static XPathOperator Lt;
    public static XPathOperator Le;
    public static XPathOperator Gt;
    public static XPathOperator Ge;
    public static XPathOperator Plus;
    public static XPathOperator Minus;
    public static XPathOperator Multiply;
    public static XPathOperator Divide;
    public static XPathOperator Modulo;
    public static XPathOperator UnaryMinus;
    public static XPathOperator Union;
    public static XPathOperator LastXPath1Operator;
    public static XPathOperator UnaryPlus;
    public static XPathOperator Idiv;
    public static XPathOperator Is;
    public static XPathOperator After;
    public static XPathOperator Before;
    public static XPathOperator Range;
    public static XPathOperator Except;
    public static XPathOperator Intersect;
    public static XPathOperator ValEq;
    public static XPathOperator ValNe;
    public static XPathOperator ValLt;
    public static XPathOperator ValLe;
    public static XPathOperator ValGt;
    public static XPathOperator ValGe;
}
internal class System.Xml.Xsl.XPath.XPathParser`1 : object {
    private XPathScanner _scanner;
    private IXPathBuilder`1<Node> _builder;
    private Stack`1<int> _posInfo;
    private static int MaxParseRelativePathDepth;
    private int _parseRelativePath;
    private static int MaxParseSubExprDepth;
    private int _parseSubExprDepth;
    private static Int32[] s_XPathOperatorPrecedence;
    private static XPathParser`1();
    public Node Parse(XPathScanner scanner, IXPathBuilder`1<Node> builder, LexKind endLex);
    internal static bool IsStep(LexKind lexKind);
    private Node ParseLocationPath();
    private Node ParseRelativeLocationPath();
    private Node ParseStep();
    private static bool IsReverseAxis(XPathAxis axis);
    private Node ParseNodeTest(XPathAxis axis);
    private static bool IsNodeType(XPathScanner scanner);
    private static XPathNodeType PrincipalNodeType(XPathAxis axis);
    internal static void InternalParseNodeTest(XPathScanner scanner, XPathAxis axis, XPathNodeType& nodeType, String& nodePrefix, String& nodeName);
    private Node ParsePredicate();
    private Node ParseExpr();
    private Node ParseSubExpr(int callerPrec);
    private Node ParseUnionExpr();
    private Node ParsePathExpr();
    private Node ParseFilterExpr();
    private bool IsPrimaryExpr();
    private Node ParsePrimaryExpr();
    private Node ParseFunctionCall();
    private void PushPosInfo(int startChar, int endChar);
    private void PopPosInfo();
    private void PopPosInfo(Int32& startChar, Int32& endChar);
}
internal class System.Xml.Xsl.XPath.XPathQilFactory : QilPatternFactory {
    public XPathQilFactory(QilFactory f, bool debug);
    public QilNode Error(string res, QilNode args);
    public QilNode Error(ISourceLineInfo lineInfo, string res, String[] args);
    public QilIterator FirstNode(QilNode n);
    public bool IsAnyType(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckNode(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckNodeSet(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckNodeNotRtf(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckString(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckStringS(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckDouble(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckBool(QilNode n);
    public bool CannotBeNodeSet(QilNode n);
    public QilNode SafeDocOrderDistinct(QilNode n);
    public QilNode InvokeFormatMessage(QilNode res, QilNode args);
    public QilNode InvokeEqualityOperator(QilNodeType op, QilNode left, QilNode right);
    public QilNode InvokeRelationalOperator(QilNodeType op, QilNode left, QilNode right);
    [ConditionalAttribute("DEBUG")]
private void ExpectAny(QilNode n);
    public QilNode ConvertToType(XmlTypeCode requiredType, QilNode n);
    public QilNode ConvertToString(QilNode n);
    public QilNode ConvertToBoolean(QilNode n);
    public QilNode ConvertToNumber(QilNode n);
    public QilNode ConvertToNode(QilNode n);
    public QilNode ConvertToNodeSet(QilNode n);
    public QilNode TryEnsureNodeSet(QilNode n);
    public QilNode EnsureNodeSet(QilNode n);
    public QilNode InvokeEnsureNodeSet(QilNode n);
    public QilNode Id(QilNode context, QilNode id);
    public QilNode InvokeStartsWith(QilNode str1, QilNode str2);
    public QilNode InvokeContains(QilNode str1, QilNode str2);
    public QilNode InvokeSubstringBefore(QilNode str1, QilNode str2);
    public QilNode InvokeSubstringAfter(QilNode str1, QilNode str2);
    public QilNode InvokeSubstring(QilNode str, QilNode start);
    public QilNode InvokeSubstring(QilNode str, QilNode start, QilNode length);
    public QilNode InvokeNormalizeSpace(QilNode str);
    public QilNode InvokeTranslate(QilNode str1, QilNode str2, QilNode str3);
    public QilNode InvokeLang(QilNode lang, QilNode context);
    public QilNode InvokeFloor(QilNode value);
    public QilNode InvokeCeiling(QilNode value);
    public QilNode InvokeRound(QilNode value);
}
internal class System.Xml.Xsl.XPath.XPathScanner : object {
    private string _xpathExpr;
    private int _curIndex;
    private char _curChar;
    private LexKind _kind;
    private string _name;
    private string _prefix;
    private string _stringValue;
    private bool _canBeFunction;
    private int _lexStart;
    private int _prevLexEnd;
    private LexKind _prevKind;
    private XPathAxis _axis;
    private XmlCharType _xmlCharType;
    public string Source { get; }
    public LexKind Kind { get; }
    public int LexStart { get; }
    public int LexSize { get; }
    public int PrevLexEnd { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string RawValue { get; }
    public string StringValue { get; }
    public bool CanBeFunction { get; }
    public XPathAxis Axis { get; }
    public XPathScanner(string xpathExpr);
    public XPathScanner(string xpathExpr, int startFrom);
    public string get_Source();
    public LexKind get_Kind();
    public int get_LexStart();
    public int get_LexSize();
    public int get_PrevLexEnd();
    private void SetSourceIndex(int index);
    private void NextChar();
    public string get_Name();
    public string get_Prefix();
    public string get_RawValue();
    public string get_StringValue();
    public bool get_CanBeFunction();
    public XPathAxis get_Axis();
    private void SkipSpace();
    private static bool IsAsciiDigit(char ch);
    public void NextLex();
    private bool CheckOperator(bool star);
    private XPathAxis CheckAxis();
    private void ScanNumber();
    private void ScanString();
    private string ScanNCName();
    public void PassToken(LexKind t);
    public void CheckToken(LexKind t);
    private string LexKindToString(LexKind t);
    public XPathCompileException CreateException(string resId, String[] args);
}
internal static class System.Xml.Xsl.XPathConvert : object {
    public static Double[] C10toN;
    private static XPathConvert();
    public static UInt32 DblHi(double dbl);
    public static UInt32 DblLo(double dbl);
    public static bool IsSpecial(double dbl);
    public static UInt32 NotZero(UInt32 u);
    public static UInt32 AddU(UInt32& u1, UInt32 u2);
    public static UInt32 MulU(UInt32 u1, UInt32 u2, UInt32& uHi);
    public static int CbitZeroLeft(UInt32 u);
    public static bool IsInteger(double dbl, Int32& value);
    private static string IntToString(int val);
    public static string DoubleToString(double dbl);
    private static bool IsAsciiDigit(char ch);
    private static bool IsWhitespace(char ch);
    private static Char* SkipWhitespace(Char* pch);
    public static double StringToDouble(string s);
}
public class System.Xml.Xsl.XslCompiledTransform : object {
    private static XmlReaderSettings s_readerSettings;
    private static Version s_version;
    private bool _enableDebug;
    private CompilerErrorCollection _compilerErrorColl;
    private XmlWriterSettings _outputSettings;
    private QilExpression _qil;
    public XmlWriterSettings OutputSettings { get; }
    public XslCompiledTransform(bool enableDebug);
    private static XslCompiledTransform();
    private void Reset();
    public XmlWriterSettings get_OutputSettings();
    public void Load(XmlReader stylesheet);
    public void Load(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(IXPathNavigable stylesheet);
    public void Load(IXPathNavigable stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(string stylesheetUri);
    public void Load(string stylesheetUri, XsltSettings settings, XmlResolver stylesheetResolver);
    private CompilerErrorCollection LoadInternal(object stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    private void CompileXsltToQil(object stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    private CompilerError GetFirstError();
    private void CompileQilToMsil(XsltSettings settings);
    public void Load(Type compiledStylesheet);
    public void Load(MethodInfo executeMethod, Byte[] queryData, Type[] earlyBoundTypes);
    public void Transform(IXPathNavigable input, XmlWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, TextWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, Stream results);
    public void Transform(XmlReader input, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, TextWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, Stream results);
    public void Transform(string inputUri, XmlWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, XmlWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, TextWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, Stream results);
    public void Transform(string inputUri, string resultsFile);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver);
    private static void CheckArguments(object input, object results);
    private static void CheckArguments(string inputUri, object results);
    private void CheckCommand();
    private static XmlResolver CreateDefaultResolver();
    private QilExpression TestCompile(object stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    private void TestGenerate(XsltSettings settings);
}
[FlagsAttribute]
internal enum System.Xml.Xsl.XslFlags : Enum {
    public int value__;
    public static XslFlags None;
    public static XslFlags String;
    public static XslFlags Number;
    public static XslFlags Boolean;
    public static XslFlags Node;
    public static XslFlags Nodeset;
    public static XslFlags Rtf;
    public static XslFlags TypeFilter;
    public static XslFlags AnyType;
    public static XslFlags Current;
    public static XslFlags Position;
    public static XslFlags Last;
    public static XslFlags FocusFilter;
    public static XslFlags FullFocus;
    public static XslFlags HasCalls;
    public static XslFlags MayBeDefault;
    public static XslFlags SideEffects;
    public static XslFlags Stop;
}
internal class System.Xml.Xsl.XslLoadException : XslTransformException {
    private ISourceLineInfo _lineInfo;
    public string SourceUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal XslLoadException(string res, String[] args);
    internal XslLoadException(Exception inner, ISourceLineInfo lineInfo);
    internal XslLoadException(CompilerError error);
    internal void SetSourceLineInfo(ISourceLineInfo lineInfo);
    public virtual string get_SourceUri();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    private static string AppendLineInfoMessage(string message, ISourceLineInfo lineInfo);
    internal static string CreateMessage(ISourceLineInfo lineInfo, string res, String[] args);
    internal virtual string FormatDetailedMessage();
}
internal static class System.Xml.Xsl.Xslt.AstFactory : object {
    private static QilFactory s_f;
    private static AstFactory();
    public static XslNode XslNode(XslNodeType nodeType, QilName name, string arg, XslVersion xslVer);
    public static XslNode ApplyImports(QilName mode, Stylesheet sheet, XslVersion xslVer);
    public static XslNodeEx ApplyTemplates(QilName mode, string select, ContextInfo ctxInfo, XslVersion xslVer);
    public static XslNodeEx ApplyTemplates(QilName mode);
    public static NodeCtor Attribute(string nameAvt, string nsAvt, XslVersion xslVer);
    public static AttributeSet AttributeSet(QilName name);
    public static XslNodeEx CallTemplate(QilName name, ContextInfo ctxInfo);
    public static XslNode Choose();
    public static XslNode Comment();
    public static XslNode Copy();
    public static XslNode CopyOf(string select, XslVersion xslVer);
    public static NodeCtor Element(string nameAvt, string nsAvt, XslVersion xslVer);
    public static XslNode Error(string message);
    public static XslNodeEx ForEach(string select, ContextInfo ctxInfo, XslVersion xslVer);
    public static XslNode If(string test, XslVersion xslVer);
    public static Key Key(QilName name, string match, string use, XslVersion xslVer);
    public static XslNode List();
    public static XslNode LiteralAttribute(QilName name, string value, XslVersion xslVer);
    public static XslNode LiteralElement(QilName name);
    public static XslNode Message(bool term);
    public static XslNode Nop();
    public static Number Number(NumberLevel level, string count, string from, string value, string format, string lang, string letterValue, string groupingSeparator, string groupingSize, XslVersion xslVer);
    public static XslNode Otherwise();
    public static XslNode PI(string name, XslVersion xslVer);
    public static Sort Sort(string select, string lang, string dataType, string order, string caseOrder, XslVersion xslVer);
    public static Template Template(QilName name, string match, QilName mode, double priority, XslVersion xslVer);
    public static XslNode Text(string data);
    public static XslNode Text(string data, SerializationHints hints);
    public static XslNode UseAttributeSet(QilName name);
    public static VarPar VarPar(XslNodeType nt, QilName name, string select, XslVersion xslVer);
    public static VarPar WithParam(QilName name);
    public static QilName QName(string local, string uri, string prefix);
    public static QilName QName(string local);
}
internal class System.Xml.Xsl.Xslt.AttributeSet : ProtoTemplate {
    public CycleCheck CycleCheck;
    public AttributeSet(QilName name, XslVersion xslVer);
    public virtual string GetDebugName();
    public void AddContent(XslNode node);
    public void MergeContent(AttributeSet other);
}
internal class System.Xml.Xsl.Xslt.Compiler : object {
    public XsltSettings Settings;
    public bool IsDebug;
    public string ScriptAssemblyPath;
    public int Version;
    public string inputTypeAnnotations;
    public CompilerErrorCollection CompilerErrorColl;
    public int CurrentPrecedence;
    public XslNode StartApplyTemplates;
    public RootLevel Root;
    public Scripts Scripts;
    public Output Output;
    public List`1<VarPar> ExternalPars;
    public List`1<VarPar> GlobalVars;
    public List`1<WhitespaceRule> WhitespaceRules;
    public DecimalFormats DecimalFormats;
    public Keys Keys;
    public List`1<ProtoTemplate> AllTemplates;
    public Dictionary`2<QilName, VarPar> AllGlobalVarPars;
    public Dictionary`2<QilName, Template> NamedTemplates;
    public Dictionary`2<QilName, AttributeSet> AttributeSets;
    public Dictionary`2<string, NsAlias> NsAliases;
    private Dictionary`2<string, int> _moduleOrder;
    public string PhantomNCName;
    private int _phantomNsCounter;
    private int _savedErrorCount;
    private int ErrorCount { get; private set; }
    public Compiler(XsltSettings settings, bool debug, string scriptAssemblyPath);
    public CompilerErrorCollection Compile(object stylesheet, XmlResolver xmlResolver, QilExpression& qil);
    public Stylesheet CreateStylesheet();
    public void AddModule(string baseUri);
    public void ApplyNsAliases(String& prefix, String& nsUri);
    public bool SetNsAlias(string ssheetNsUri, string resultNsUri, string resultPrefix, int importPrecedence);
    private void MergeWhitespaceRules(Stylesheet sheet);
    private void MergeAttributeSets(Stylesheet sheet);
    private void MergeGlobalVarPars(Stylesheet sheet);
    public void MergeWithStylesheet(Stylesheet sheet);
    public static string ConstructQName(string prefix, string localName);
    public bool ParseQName(string qname, String& prefix, String& localName, IErrorHelper errorHelper);
    public bool ParseNameTest(string nameTest, String& prefix, String& localName, IErrorHelper errorHelper);
    public void ValidatePiName(string name, IErrorHelper errorHelper);
    public string CreatePhantomNamespace();
    public bool IsPhantomNamespace(string namespaceName);
    public bool IsPhantomName(QilName qname);
    private int get_ErrorCount();
    private void set_ErrorCount(int value);
    public void EnterForwardsCompatible();
    public bool ExitForwardsCompatible(bool fwdCompat);
    public CompilerError CreateError(ISourceLineInfo lineInfo, string res, String[] args);
    public void ReportError(ISourceLineInfo lineInfo, string res, String[] args);
    public void ReportWarning(ISourceLineInfo lineInfo, string res, String[] args);
    private void SortErrors();
}
internal class System.Xml.Xsl.Xslt.CompilerError : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public int Line { get; public set; }
    public int Column { get; public set; }
    public string ErrorNumber { get; public set; }
    public string ErrorText { get; public set; }
    public bool IsWarning { get; public set; }
    public string FileName { get; public set; }
    public CompilerError(string fileName, int line, int column, string errorNumber, string errorText);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorNumber();
    [CompilerGeneratedAttribute]
public void set_ErrorNumber(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
public void set_IsWarning(bool value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
}
internal class System.Xml.Xsl.Xslt.CompilerErrorCollection : CollectionBase {
    public int Add(CompilerError value);
    public void AddRange(CompilerError[] value);
    public void CopyTo(CompilerError[] array, int index);
}
internal class System.Xml.Xsl.Xslt.CompilerScopeManager`1 : object {
    private static int LastPredefRecord;
    private ScopeRecord[] _records;
    private int _lastRecord;
    private int _lastScopes;
    public bool ForwardCompatibility { get; public set; }
    public bool BackwardCompatibility { get; public set; }
    public bool CanHaveApplyImports { get; public set; }
    public CompilerScopeManager`1(KeywordsTable atoms);
    public void EnterScope();
    public void ExitScope();
    [ConditionalAttribute("DEBUG")]
public void CheckEmpty();
    public bool EnterScope(NsDecl nsDecl);
    private void AddRecord();
    private void AddRecord(ScopeFlags<V> flag, string ncName, string uri, V value);
    private void SetFlag(ScopeFlags<V> flag, bool value);
    public void AddVariable(QilName varName, V value);
    private string LookupNamespace(string prefix, int from, int to);
    public string LookupNamespace(string prefix);
    private static ScopeFlags<V> GetName(ScopeRecord& re, String& prefix, String& nsUri);
    public void AddNsDeclaration(string prefix, string nsUri);
    public void AddExNamespace(string nsUri);
    public bool IsExNamespace(string nsUri);
    private int SearchVariable(string localName, string uri);
    public V LookupVariable(string localName, string uri);
    public bool IsLocalVariable(string localName, string uri);
    public bool get_ForwardCompatibility();
    public void set_ForwardCompatibility(bool value);
    public bool get_BackwardCompatibility();
    public void set_BackwardCompatibility(bool value);
    public bool get_CanHaveApplyImports();
    public void set_CanHaveApplyImports(bool value);
    [IteratorStateMachineAttribute("System.Xml.Xsl.Xslt.CompilerScopeManager`1/<GetActiveRecords>d__34")]
internal IEnumerable`1<ScopeRecord<V>> GetActiveRecords();
    public NamespaceEnumerator<V> GetEnumerator();
}
internal enum System.Xml.Xsl.Xslt.CycleCheck : Enum {
    public int value__;
    public static CycleCheck NotStarted;
    public static CycleCheck Processing;
    public static CycleCheck Completed;
}
internal class System.Xml.Xsl.Xslt.DecimalFormatDecl : object {
    public XmlQualifiedName Name;
    public string InfinitySymbol;
    public string NanSymbol;
    public Char[] Characters;
    public static DecimalFormatDecl Default;
    public DecimalFormatDecl(XmlQualifiedName name, string infinitySymbol, string nanSymbol, string characters);
    private static DecimalFormatDecl();
}
internal class System.Xml.Xsl.Xslt.DecimalFormats : KeyedCollection`2<XmlQualifiedName, DecimalFormatDecl> {
    protected virtual XmlQualifiedName GetKeyForItem(DecimalFormatDecl format);
}
internal class System.Xml.Xsl.Xslt.FunctionFocus : ValueType {
    private bool _isSet;
    private QilParameter _current;
    private QilParameter _position;
    private QilParameter _last;
    public bool IsFocusSet { get; }
    public void StartFocus(IList`1<QilNode> args, XslFlags flags);
    public void StopFocus();
    public bool get_IsFocusSet();
    public sealed virtual QilNode GetCurrent();
    public sealed virtual QilNode GetPosition();
    public sealed virtual QilNode GetLast();
}
internal class System.Xml.Xsl.Xslt.InvokeGenerator : QilCloneVisitor {
    private bool _debug;
    private Stack`1<QilIterator> _iterStack;
    private QilList _formalArgs;
    private QilList _invokeArgs;
    private int _curArg;
    private XsltQilFactory _fac;
    public InvokeGenerator(XsltQilFactory f, bool debug);
    public QilNode GenerateInvoke(QilFunction func, IList`1<XslNode> actualArgs);
    private QilNode FindActualArg(QilParameter formalArg, IList`1<XslNode> actualArgs);
    protected virtual QilNode VisitReference(QilNode n);
    protected virtual QilNode VisitFunction(QilFunction n);
}
internal class System.Xml.Xsl.Xslt.Key : XslNode {
    public string Match;
    public string Use;
    public QilFunction Function;
    public Key(QilName name, string match, string use, XslVersion xslVer);
    public string GetDebugName();
}
internal class System.Xml.Xsl.Xslt.KeyMatchBuilder : XPathBuilder {
    private int _depth;
    private PathConvertor _convertor;
    public KeyMatchBuilder(IXPathEnvironment env);
    public virtual void StartBuild();
    public virtual QilNode EndBuild(QilNode result);
    public virtual IXPathBuilder`1<QilNode> GetPredicateBuilder(QilNode ctx);
}
internal class System.Xml.Xsl.Xslt.Keys : KeyedCollection`2<QilName, List`1<Key>> {
    protected virtual QilName GetKeyForItem(List`1<Key> list);
}
internal class System.Xml.Xsl.Xslt.KeywordsTable : object {
    public XmlNameTable NameTable;
    public string AnalyzeString;
    public string ApplyImports;
    public string ApplyTemplates;
    public string Assembly;
    public string Attribute;
    public string AttributeSet;
    public string CallTemplate;
    public string CaseOrder;
    public string CDataSectionElements;
    public string Character;
    public string CharacterMap;
    public string Choose;
    public string Comment;
    public string Copy;
    public string CopyOf;
    public string Count;
    public string DataType;
    public string DecimalFormat;
    public string DecimalSeparator;
    public string DefaultCollation;
    public string DefaultValidation;
    public string Digit;
    public string DisableOutputEscaping;
    public string DocTypePublic;
    public string DocTypeSystem;
    public string Document;
    public string Element;
    public string Elements;
    public string Encoding;
    public string ExcludeResultPrefixes;
    public string ExtensionElementPrefixes;
    public string Fallback;
    public string ForEach;
    public string ForEachGroup;
    public string Format;
    public string From;
    public string Function;
    public string GroupingSeparator;
    public string GroupingSize;
    public string Href;
    public string Id;
    public string If;
    public string ImplementsPrefix;
    public string Import;
    public string ImportSchema;
    public string Include;
    public string Indent;
    public string Infinity;
    public string Key;
    public string Lang;
    public string Language;
    public string LetterValue;
    public string Level;
    public string Match;
    public string MatchingSubstring;
    public string MediaType;
    public string Message;
    public string Method;
    public string MinusSign;
    public string Mode;
    public string Name;
    public string Namespace;
    public string NamespaceAlias;
    public string NaN;
    public string NextMatch;
    public string NonMatchingSubstring;
    public string Number;
    public string OmitXmlDeclaration;
    public string Order;
    public string Otherwise;
    public string Output;
    public string OutputCharacter;
    public string OutputVersion;
    public string Param;
    public string PatternSeparator;
    public string Percent;
    public string PerformSort;
    public string PerMille;
    public string PreserveSpace;
    public string Priority;
    public string ProcessingInstruction;
    public string Required;
    public string ResultDocument;
    public string ResultPrefix;
    public string Script;
    public string Select;
    public string Separator;
    public string Sequence;
    public string Sort;
    public string Space;
    public string Standalone;
    public string StripSpace;
    public string Stylesheet;
    public string StylesheetPrefix;
    public string Template;
    public string Terminate;
    public string Test;
    public string Text;
    public string Transform;
    public string UrnMsxsl;
    public string UriXml;
    public string UriXsl;
    public string UriWdXsl;
    public string Use;
    public string UseAttributeSets;
    public string UseWhen;
    public string Using;
    public string Value;
    public string ValueOf;
    public string Variable;
    public string Version;
    public string When;
    public string WithParam;
    public string Xml;
    public string Xmlns;
    public string XPathDefaultNamespace;
    public string ZeroDigit;
    public KeywordsTable(XmlNameTable nt);
}
internal class System.Xml.Xsl.Xslt.LoopFocus : ValueType {
    private XPathQilFactory _f;
    private QilIterator _current;
    private QilIterator _cached;
    private QilIterator _last;
    public bool IsFocusSet { get; }
    public LoopFocus(XPathQilFactory f);
    public void SetFocus(QilIterator current);
    public bool get_IsFocusSet();
    public sealed virtual QilNode GetCurrent();
    public sealed virtual QilNode GetPosition();
    public sealed virtual QilNode GetLast();
    public void EnsureCache();
    public void Sort(QilNode sortKeys);
    public QilLoop ConstructLoop(QilNode body);
}
internal class System.Xml.Xsl.Xslt.MatcherBuilder : object {
    private XPathQilFactory _f;
    private ReferenceReplacer _refReplacer;
    private InvokeGenerator _invkGen;
    private static int NoMatch;
    private int _priority;
    private PatternBag _elementPatterns;
    private PatternBag _attributePatterns;
    private List`1<Pattern> _textPatterns;
    private List`1<Pattern> _documentPatterns;
    private List`1<Pattern> _commentPatterns;
    private PatternBag _piPatterns;
    private List`1<Pattern> _heterogenousPatterns;
    private List`1<List`1<TemplateMatch>> _allMatches;
    public MatcherBuilder(XPathQilFactory f, ReferenceReplacer refReplacer, InvokeGenerator invkGen);
    private void Clear();
    private void AddPatterns(List`1<TemplateMatch> matches);
    private void CollectPatternsInternal(Stylesheet sheet, QilName mode);
    public void CollectPatterns(StylesheetLevel sheet, QilName mode);
    private QilNode MatchPattern(QilIterator it, TemplateMatch match);
    private QilNode MatchPatterns(QilIterator it, List`1<Pattern> patternList);
    private QilNode MatchPatterns(QilIterator it, XmlQueryType xt, List`1<Pattern> patternList, QilNode otherwise);
    private bool IsNoMatch(QilNode matcher);
    private QilNode MatchPatternsWhosePriorityGreater(QilIterator it, List`1<Pattern> patternList, QilNode matcher);
    private QilNode MatchPatterns(QilIterator it, XmlQueryType xt, PatternBag patternBag, QilNode otherwise);
    public QilNode BuildMatcher(QilIterator it, IList`1<XslNode> actualArgs, QilNode otherwise);
}
internal class System.Xml.Xsl.Xslt.NodeCtor : XslNode {
    public string NameAvt;
    public string NsAvt;
    public NodeCtor(XslNodeType nt, string nameAvt, string nsAvt, XslVersion xslVer);
}
internal class System.Xml.Xsl.Xslt.NsAlias : object {
    public string ResultNsUri;
    public string ResultPrefix;
    public int ImportPrecedence;
    public NsAlias(string resultNsUri, string resultPrefix, int importPrecedence);
}
internal class System.Xml.Xsl.Xslt.NsDecl : object {
    public NsDecl Prev;
    public string Prefix;
    public string NsUri;
    public NsDecl(NsDecl prev, string prefix, string nsUri);
}
internal class System.Xml.Xsl.Xslt.Number : XslNode {
    public NumberLevel Level;
    public string Count;
    public string From;
    public string Value;
    public string Format;
    public string Lang;
    public string LetterValue;
    public string GroupingSeparator;
    public string GroupingSize;
    public Number(NumberLevel level, string count, string from, string value, string format, string lang, string letterValue, string groupingSeparator, string groupingSize, XslVersion xslVer);
}
internal enum System.Xml.Xsl.Xslt.NumberLevel : Enum {
    public int value__;
    public static NumberLevel Single;
    public static NumberLevel Multiple;
    public static NumberLevel Any;
}
internal class System.Xml.Xsl.Xslt.Output : object {
    public XmlWriterSettings Settings;
    public string Version;
    public string Encoding;
    public XmlQualifiedName Method;
    public static int NeverDeclaredPrec;
    public int MethodPrec;
    public int VersionPrec;
    public int EncodingPrec;
    public int OmitXmlDeclarationPrec;
    public int StandalonePrec;
    public int DocTypePublicPrec;
    public int DocTypeSystemPrec;
    public int IndentPrec;
    public int MediaTypePrec;
}
internal class System.Xml.Xsl.Xslt.OutputScopeManager : object {
    private ScopeReord[] _records;
    private int _lastRecord;
    private int _lastScopes;
    public void Reset();
    public void PushScope();
    public void PopScope();
    public void AddNamespace(string prefix, string uri);
    private void AddRecord(string prefix, string uri);
    public void InvalidateAllPrefixes();
    public void InvalidateNonDefaultPrefixes();
    public string LookupNamespace(string prefix);
}
[IsReadOnlyAttribute]
internal class System.Xml.Xsl.Xslt.Pattern : ValueType {
    public TemplateMatch Match;
    public int Priority;
    public Pattern(TemplateMatch match, int priority);
}
internal class System.Xml.Xsl.Xslt.PatternBag : object {
    public Dictionary`2<QilName, List`1<Pattern>> FixedNamePatterns;
    public List`1<QilName> FixedNamePatternsNames;
    public List`1<Pattern> NonFixedNamePatterns;
    public void Clear();
    public void Add(Pattern pattern);
}
internal abstract class System.Xml.Xsl.Xslt.ProtoTemplate : XslNode {
    public QilFunction Function;
    public ProtoTemplate(XslNodeType nt, QilName name, XslVersion xslVer);
    public abstract virtual string GetDebugName();
}
internal class System.Xml.Xsl.Xslt.QilGenerator : object {
    private CompilerScopeManager`1<QilIterator> _scope;
    private OutputScopeManager _outputScope;
    private HybridDictionary _prefixesInUse;
    private XsltQilFactory _f;
    private XPathBuilder _xpathBuilder;
    private XPathParser`1<QilNode> _xpathParser;
    private XPathPatternBuilder _ptrnBuilder;
    private XPathPatternParser _ptrnParser;
    private ReferenceReplacer _refReplacer;
    private KeyMatchBuilder _keyMatchBuilder;
    private InvokeGenerator _invkGen;
    private MatcherBuilder _matcherBuilder;
    private QilStrConcatenator _strConcat;
    private VariableHelper _varHelper;
    private Compiler _compiler;
    private QilList _functions;
    private QilFunction _generalKey;
    private bool _formatNumberDynamicUsed;
    private QilList _extPars;
    private QilList _gloVars;
    private QilList _nsVars;
    private XmlQueryType _elementOrDocumentType;
    private XmlQueryType _textOrAttributeType;
    private XslNode _lastScope;
    private XslVersion _xslVersion;
    private QilName _nameCurrent;
    private QilName _namePosition;
    private QilName _nameLast;
    private QilName _nameNamespaces;
    private QilName _nameInit;
    private SingletonFocus _singlFocus;
    private FunctionFocus _funcFocus;
    private LoopFocus _curLoop;
    private int _formatterCnt;
    private StringBuilder _unescapedText;
    private static Char[] s_curlyBraces;
    private static XmlNodeKindFlags InvalidatingNodes;
    private bool _allowVariables;
    private bool _allowCurrent;
    private bool _allowKey;
    private static XmlTypeCode[] s_argFnDocument;
    private static XmlTypeCode[] s_argFnKey;
    private static XmlTypeCode[] s_argFnFormatNumber;
    public static Dictionary`2<string, FunctionInfo`1<FuncId>> FunctionTable;
    private bool IsDebug { get; }
    private bool EvaluateFuncCalls { get; }
    private bool InferXPathTypes { get; }
    private XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.Factory { get; }
    private QilGenerator(bool debug);
    private static QilGenerator();
    public static QilExpression CompileStylesheet(Compiler compiler);
    private bool get_IsDebug();
    private bool get_EvaluateFuncCalls();
    private bool get_InferXPathTypes();
    private QilExpression Compile(Compiler compiler);
    private QilNode InvokeOnCurrentNodeChanged();
    [ConditionalAttribute("DEBUG")]
private void CheckSingletonFocus();
    private void CompileInitializationCode();
    private QilNode CompileRootExpression(XslNode applyTmpls);
    private QilList EnterScope(XslNode node);
    private void ExitScope();
    private QilList BuildDebuggerNamespaces();
    private QilNode GetCurrentNode();
    private QilNode GetCurrentPosition();
    private QilNode GetLastPosition();
    private XmlQueryType ChooseBestType(VarPar var);
    private QilIterator GetNsVar(QilList nsList);
    private void PrecompileProtoTemplatesHeaders();
    private QilParameter CreateXslParam(QilName name, XmlQueryType xt);
    private void CompileProtoTemplate(ProtoTemplate tmpl);
    private QilList InstructionList();
    private QilNode CompileInstructions(IList`1<XslNode> instructions);
    private QilNode CompileInstructions(IList`1<XslNode> instructions, int from);
    private QilNode CompileInstructions(IList`1<XslNode> instructions, QilList content);
    private QilNode CompileInstructions(IList`1<XslNode> instructions, int from, QilList content);
    private QilNode CompileList(XslNode node);
    private QilNode CompileNop(XslNode node);
    private void AddNsDecl(QilList content, string prefix, string nsUri);
    private QilNode CompileLiteralElement(XslNode node);
    private QilNode CompileElement(NodeCtor node);
    private QilNode CompileLiteralAttribute(XslNode node);
    private QilNode CompileAttribute(NodeCtor node);
    private QilNode ExtractText(string source, Int32& pos);
    private QilNode CompileAvt(string source);
    private QilNode CompileStringAvt(string avt);
    private QilNode CompileTextAvt(string avt);
    private QilNode CompileText(Text node);
    private QilNode CompilePI(XslNode node);
    private QilNode CompileComment(XslNode node);
    private QilNode CompileError(XslNode node);
    private QilNode WrapLoopBody(ISourceLineInfo before, QilNode expr, ISourceLineInfo after);
    private QilNode CompileForEach(XslNodeEx node);
    private QilNode CompileApplyTemplates(XslNodeEx node);
    private QilNode CompileApplyImports(XslNode node);
    private QilNode CompileCallTemplate(XslNodeEx node);
    private QilNode CompileUseAttributeSet(XslNode node);
    private QilNode CompileCopy(XslNode copy);
    private QilNode CompileCopyOf(XslNode node);
    private QilNode CompileValueOf(XslNode valueOf);
    private QilNode CompileValueOfDoe(XslNode valueOf);
    private QilNode CompileWhen(XslNode whenNode, QilNode otherwise);
    private QilNode CompileIf(XslNode ifNode);
    private QilNode CompileChoose(XslNode node);
    private QilNode CompileMessage(XslNode node);
    private QilNode CompileVariable(XslNode node);
    private QilNode CompileVarParValue(XslNode node);
    private void CompileWithParam(VarPar withParam);
    private QilNode CompileSorts(IList`1<XslNode> content, LoopFocus& parentLoop);
    private QilNode CompileLangAttribute(string attValue, bool fwdCompat);
    private QilNode CompileLangAttributeToLcid(string attValue, bool fwdCompat);
    private QilNode CompileLangToLcid(QilNode lang, bool fwdCompat);
    private void CompileDataTypeAttribute(string attValue, bool fwdCompat, QilNode& select, QilNode& select2);
    private QilNode CompileOrderAttribute(string attName, string attValue, string value0, string value1, bool fwdCompat);
    private void CompileSort(Sort sort, QilList keyList, LoopFocus& parentLoop);
    private QilNode MatchPattern(QilNode pattern, QilIterator testNode);
    private QilNode MatchCountPattern(QilNode countPattern, QilIterator testNode);
    private QilNode PlaceMarker(QilNode countPattern, QilNode fromPattern, bool multiple);
    private QilNode PlaceMarkerAny(QilNode countPattern, QilNode fromPattern);
    private QilNode CompileLetterValueAttribute(string attValue, bool fwdCompat);
    private QilNode CompileGroupingSeparatorAttribute(string attValue, bool fwdCompat);
    private QilNode CompileGroupingSizeAttribute(string attValue, bool fwdCompat);
    private QilNode CompileNumber(Number num);
    private void CompileAndSortMatches(Stylesheet sheet);
    private void CompileKeys();
    private void CreateGlobalVarPars();
    private void CreateGlobalVarPar(VarPar varPar);
    private void CompileGlobalVariables();
    private QilIterator CompileGlobalVarPar(VarPar varPar);
    private void ReportErrorInXPath(XslLoadException e);
    private QilNode PhantomXPathExpression();
    private QilNode PhantomKeyMatch();
    private QilNode CompileXPathExpression(string expr);
    private QilNode CompileNodeSetExpression(string expr);
    private QilNode CompileXPathExpressionWithinAvt(string expr, Int32& pos);
    private QilNode CompileMatchPattern(string pttrn);
    private QilNode CompileNumberPattern(string pttrn);
    private QilNode CompileKeyMatch(string pttrn);
    private QilNode CompileKeyUse(Key key);
    private QilNode ResolveQNameDynamic(bool ignoreDefaultNs, QilNode qilName);
    private QilNode GenerateApply(StylesheetLevel sheet, XslNode node);
    private void SetArg(IList`1<XslNode> args, int pos, QilName name, QilNode value);
    private IList`1<XslNode> AddRemoveImplicitArgs(IList`1<XslNode> args, XslFlags flags);
    private bool FillupInvokeArgs(IList`1<QilNode> formalArgs, IList`1<XslNode> actualArgs, QilList invokeArgs);
    private QilNode InvokeApplyFunction(StylesheetLevel sheet, QilName mode, IList`1<XslNode> actualArgs);
    public sealed virtual void ReportError(string res, String[] args);
    public sealed virtual void ReportWarning(string res, String[] args);
    [ConditionalAttribute("DEBUG")]
private void VerifyXPathQName(QilName qname);
    private string ResolvePrefix(bool ignoreDefaultNs, string prefix);
    private void SetLineInfoCheck(QilNode n, ISourceLineInfo lineInfo);
    private static QilNode SetLineInfo(QilNode n, ISourceLineInfo lineInfo);
    private QilNode AddDebugVariable(QilName name, QilNode value, QilNode content);
    private QilNode SetDebugNs(QilNode n, QilList nsList);
    private QilNode AddCurrentPositionLast(QilNode content);
    private QilName CloneName(QilName name);
    private void SetEnvironmentFlags(bool allowVariables, bool allowCurrent, bool allowKey);
    private sealed virtual override XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.get_Factory();
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IFocus.GetCurrent();
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IFocus.GetPosition();
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IFocus.GetLast();
    private sealed virtual override string System.Xml.Xsl.XPath.IXPathEnvironment.ResolvePrefix(string prefix);
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveVariable(string prefix, string name);
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveFunction(string prefix, string name, IList`1<QilNode> args, IFocus env);
    private QilNode GenerateScriptCall(QilName name, XmlExtensionFunction scrFunc, IList`1<QilNode> args);
    private string ResolvePrefixThrow(bool ignoreDefaultNs, string prefix);
    private static Dictionary`2<string, FunctionInfo`1<FuncId>> CreateFunctionTable();
    public static bool IsFunctionAvailable(string localName, string nsUri);
    public static bool IsElementAvailable(XmlQualifiedName name);
    private QilNode CompileFnKey(QilNode name, QilNode keys, IFocus env);
    private QilNode CompileSingleKey(QilNode name, QilNode key, IFocus env);
    private QilNode CompileSingleKey(List`1<Key> defList, QilNode key, IFocus env);
    private QilNode CompileSingleKey(List`1<Key> defList, QilIterator key, QilIterator context);
    private QilFunction CreateGeneralKeyFunction();
    private QilNode CompileFnDocument(QilNode uris, QilNode baseNode);
    private QilNode CompileSingleDocument(QilNode uri, QilNode baseNode);
    private QilNode CompileFormatNumber(QilNode value, QilNode formatPicture, QilNode formatName);
    private QilNode CompileUnparsedEntityUri(QilNode n);
    private QilNode CompileGenerateId(QilNode n);
    private XmlQualifiedName ResolveQNameThrow(bool ignoreDefaultNs, QilNode qilName);
    private QilNode CompileSystemProperty(QilNode name);
    private QilNode CompileElementAvailable(QilNode name);
    private QilNode CompileFunctionAvailable(QilNode name);
    private QilNode CompileMsNodeSet(QilNode n);
    private QilNode EXslObjectType(QilNode n);
}
internal class System.Xml.Xsl.Xslt.QilStrConcatenator : object {
    private XPathQilFactory _f;
    private StringBuilder _builder;
    private QilList _concat;
    private bool _inUse;
    public QilStrConcatenator(XPathQilFactory f);
    public void Reset();
    private void FlushBuilder();
    public void Append(string value);
    public void Append(char value);
    public void Append(QilNode value);
    public QilNode ToQil();
}
internal class System.Xml.Xsl.Xslt.ReferenceReplacer : QilReplaceVisitor {
    private QilReference _lookFor;
    private QilReference _replaceBy;
    public ReferenceReplacer(QilFactory f);
    public QilNode Replace(QilNode expr, QilReference lookFor, QilReference replaceBy);
    protected virtual QilNode VisitReference(QilNode n);
}
internal class System.Xml.Xsl.Xslt.RootLevel : StylesheetLevel {
    public RootLevel(Stylesheet principal);
}
internal class System.Xml.Xsl.Xslt.Scripts : object {
    private static string ScriptClassesNamespace;
    private Compiler _compiler;
    private Dictionary`2<string, Type> _nsToType;
    private XmlExtensionFunctionTable _extFuncs;
    public Dictionary`2<string, Type> ScriptClasses { get; }
    public Scripts(Compiler compiler);
    public Dictionary`2<string, Type> get_ScriptClasses();
    public XmlExtensionFunction ResolveFunction(string name, string ns, int numArgs, IErrorHelper errorHelper);
}
internal class System.Xml.Xsl.Xslt.SingletonFocus : ValueType {
    private XPathQilFactory _f;
    private SingletonFocusType _focusType;
    private QilIterator _current;
    public SingletonFocus(XPathQilFactory f);
    public void SetFocus(SingletonFocusType focusType);
    public void SetFocus(QilIterator current);
    [ConditionalAttribute("DEBUG")]
private void CheckFocus();
    public sealed virtual QilNode GetCurrent();
    public sealed virtual QilNode GetPosition();
    public sealed virtual QilNode GetLast();
}
internal enum System.Xml.Xsl.Xslt.SingletonFocusType : Enum {
    public int value__;
    public static SingletonFocusType None;
    public static SingletonFocusType InitialDocumentNode;
    public static SingletonFocusType InitialContextNode;
    public static SingletonFocusType Iterator;
}
internal class System.Xml.Xsl.Xslt.Sort : XslNode {
    public string Lang;
    public string DataType;
    public string Order;
    public string CaseOrder;
    public Sort(string select, string lang, string dataType, string order, string caseOrder, XslVersion xslVer);
}
internal class System.Xml.Xsl.Xslt.Stylesheet : StylesheetLevel {
    private Compiler _compiler;
    public List`1<Uri> ImportHrefs;
    public List`1<XslNode> GlobalVarPars;
    public Dictionary`2<QilName, AttributeSet> AttributeSets;
    private int _importPrecedence;
    private int _orderNumber;
    public List`1[] WhitespaceRules;
    public List`1<Template> Templates;
    public Dictionary`2<QilName, List`1<TemplateMatch>> TemplateMatches;
    public int ImportPrecedence { get; }
    public Stylesheet(Compiler compiler, int importPrecedence);
    public void AddTemplateMatch(Template template, QilLoop filter);
    public void SortTemplateMatches();
    public int get_ImportPrecedence();
    public void AddWhitespaceRule(int index, WhitespaceRule rule);
    public bool AddVarPar(VarPar var);
    public bool AddTemplate(Template template);
}
internal class System.Xml.Xsl.Xslt.StylesheetLevel : object {
    public Stylesheet[] Imports;
    public Dictionary`2<QilName, XslFlags> ModeFlags;
    public Dictionary`2<QilName, List`1<QilFunction>> ApplyFunctions;
}
internal class System.Xml.Xsl.Xslt.Template : ProtoTemplate {
    public string Match;
    public QilName Mode;
    public double Priority;
    public int ImportPrecedence;
    public int OrderNumber;
    public Template(QilName name, string match, QilName mode, double priority, XslVersion xslVer);
    public virtual string GetDebugName();
}
internal class System.Xml.Xsl.Xslt.TemplateMatch : object {
    public static TemplateMatchComparer Comparer;
    private Template _template;
    private double _priority;
    private XmlNodeKindFlags _nodeKind;
    private QilName _qname;
    private QilIterator _iterator;
    private QilNode _condition;
    public XmlNodeKindFlags NodeKind { get; }
    public QilName QName { get; }
    public QilIterator Iterator { get; }
    public QilNode Condition { get; }
    public QilFunction TemplateFunction { get; }
    public TemplateMatch(Template template, QilLoop filter);
    private static TemplateMatch();
    public XmlNodeKindFlags get_NodeKind();
    public QilName get_QName();
    public QilIterator get_Iterator();
    public QilNode get_Condition();
    public QilFunction get_TemplateFunction();
    private void NipOffTypeNameCheck();
}
internal class System.Xml.Xsl.Xslt.Text : XslNode {
    public SerializationHints Hints;
    public Text(string data, SerializationHints hints, XslVersion xslVer);
}
internal class System.Xml.Xsl.Xslt.VarPar : XslNode {
    public XslFlags DefValueFlags;
    public QilNode Value;
    public VarPar(XslNodeType nt, QilName name, string select, XslVersion xslVer);
}
internal class System.Xml.Xsl.Xslt.XPathPatternBuilder : object {
    private XPathPredicateEnvironment _predicateEnvironment;
    private XPathBuilder _predicateBuilder;
    private bool _inTheBuild;
    private XPathQilFactory _f;
    private QilNode _fixupNode;
    private IXPathEnvironment _environment;
    public QilNode FixupNode { get; }
    public XPathPatternBuilder(IXPathEnvironment environment);
    public QilNode get_FixupNode();
    public virtual void StartBuild();
    [ConditionalAttribute("DEBUG")]
public void AssertFilter(QilLoop filter);
    private void FixupFilterBinding(QilLoop filter, QilNode newBinding);
    public virtual QilNode EndBuild(QilNode result);
    public sealed virtual QilNode Operator(XPathOperator op, QilNode left, QilNode right);
    private static QilLoop BuildAxisFilter(QilPatternFactory f, QilIterator itr, XPathAxis xpathAxis, XPathNodeType nodeType, string name, string nsUri);
    public sealed virtual QilNode Axis(XPathAxis xpathAxis, XPathNodeType nodeType, string prefix, string name);
    public sealed virtual QilNode JoinStep(QilNode left, QilNode right);
    private sealed virtual override QilNode System.Xml.Xsl.XPath.IXPathBuilder<System.Xml.Xsl.Qil.QilNode>.Predicate(QilNode node, QilNode condition, bool isReverseStep);
    public QilNode BuildPredicates(QilNode nodeset, List`1<QilNode> predicates);
    public sealed virtual QilNode Function(string prefix, string name, IList`1<QilNode> args);
    public sealed virtual QilNode String(string value);
    public sealed virtual QilNode Number(double value);
    public sealed virtual QilNode Variable(string prefix, string name);
    public static void SetPriority(QilNode node, double priority);
    public static double GetPriority(QilNode node);
    private static void SetLastParent(QilNode node, QilLoop parent);
    private static QilLoop GetLastParent(QilNode node);
    public static void CleanAnnotation(QilNode node);
    public sealed virtual IXPathBuilder`1<QilNode> GetPredicateBuilder(QilNode ctx);
}
internal class System.Xml.Xsl.Xslt.XPathPatternParser : object {
    private XPathScanner _scanner;
    private IPatternBuilder _ptrnBuilder;
    private XPathParser`1<QilNode> _predicateParser;
    private static int MaxParseRelativePathDepth;
    private int _parseRelativePath;
    public QilNode Parse(XPathScanner scanner, IPatternBuilder ptrnBuilder);
    private QilNode ParsePattern();
    private QilNode ParseLocationPathPattern();
    private QilNode ParseIdKeyPattern();
    private QilNode ParseRelativePathPattern();
    private QilNode ParseStepPattern();
    private QilNode ParsePredicate(QilNode context);
}
internal class System.Xml.Xsl.Xslt.XslAstAnalyzer : XslVisitor`1<XslFlags> {
    private CompilerScopeManager`1<VarPar> _scope;
    private Compiler _compiler;
    private int _forEachDepth;
    private XPathAnalyzer _xpathAnalyzer;
    private ProtoTemplate _currentTemplate;
    private VarPar _typeDonor;
    private Graph`1<ProtoTemplate> _revCall0Graph;
    private Graph`1<ProtoTemplate> _revCall1Graph;
    private Dictionary`2<Template, Stylesheet> _fwdApplyImportsGraph;
    private Dictionary`2<QilName, List`1<ProtoTemplate>> _revApplyTemplatesGraph;
    private Graph`1<VarPar> _dataFlow;
    private Dictionary`2<ModeName, VarPar> _applyTemplatesParams;
    public XslFlags Analyze(Compiler compiler);
    private void AddImportDependencies(Stylesheet sheet, Template focusDonor);
    private void FillModeFlags(Dictionary`2<QilName, XslFlags> parentModeFlags, Stylesheet sheet);
    private void TraceResults();
    protected virtual XslFlags Visit(XslNode node);
    protected virtual XslFlags VisitChildren(XslNode node);
    protected virtual XslFlags VisitAttributeSet(AttributeSet node);
    protected virtual XslFlags VisitTemplate(Template node);
    protected virtual XslFlags VisitApplyImports(XslNode node);
    protected virtual XslFlags VisitApplyTemplates(XslNode node);
    protected virtual XslFlags VisitAttribute(NodeCtor node);
    protected virtual XslFlags VisitCallTemplate(XslNode node);
    protected virtual XslFlags VisitComment(XslNode node);
    protected virtual XslFlags VisitCopy(XslNode node);
    protected virtual XslFlags VisitCopyOf(XslNode node);
    protected virtual XslFlags VisitElement(NodeCtor node);
    protected virtual XslFlags VisitError(XslNode node);
    protected virtual XslFlags VisitForEach(XslNode node);
    protected virtual XslFlags VisitIf(XslNode node);
    protected virtual XslFlags VisitLiteralAttribute(XslNode node);
    protected virtual XslFlags VisitLiteralElement(XslNode node);
    protected virtual XslFlags VisitMessage(XslNode node);
    protected virtual XslFlags VisitNumber(Number node);
    protected virtual XslFlags VisitPI(XslNode node);
    protected virtual XslFlags VisitSort(Sort node);
    protected virtual XslFlags VisitText(Text node);
    protected virtual XslFlags VisitUseAttributeSet(XslNode node);
    protected virtual XslFlags VisitValueOf(XslNode node);
    protected virtual XslFlags VisitValueOfDoe(XslNode node);
    protected virtual XslFlags VisitParam(VarPar node);
    protected virtual XslFlags VisitVariable(VarPar node);
    protected virtual XslFlags VisitWithParam(VarPar node);
    private XslFlags ProcessVarPar(VarPar node);
    private XslFlags ProcessExpr(string expr);
    private XslFlags ProcessAvt(string avt);
    private XslFlags ProcessPattern(string pattern);
    private void AddApplyTemplatesEdge(QilName mode, ProtoTemplate dependentTemplate);
    private void PropagateSideEffectsFlag();
    private void DepthFirstSearch(ProtoTemplate t);
}
internal class System.Xml.Xsl.Xslt.XslAstRewriter : object {
    private static QilName s_nullMode;
    private CompilerScopeManager`1<VarPar> _scope;
    private Stack`1<Template> _newTemplates;
    private Compiler _compiler;
    private static int FixedNodeCost;
    private static int IteratorNodeCost;
    private static int CallTemplateCost;
    private static int RewriteThreshold;
    private static int NodesWithSelect;
    private static int ParentsOfCallTemplate;
    private static XslAstRewriter();
    public void Rewrite(Compiler compiler);
    private static int NodeCostForXPath(string xpath);
    private static bool NodeTypeTest(XslNodeType nodetype, int flags);
    private int CheckNodeCost(XslNode node);
    private void Refactor(XslNode parent, int split);
}
internal class System.Xml.Xsl.Xslt.XslNode : object {
    public XslNodeType NodeType;
    public ISourceLineInfo SourceLine;
    public NsDecl Namespaces;
    public QilName Name;
    public object Arg;
    public XslVersion XslVersion;
    public XslFlags Flags;
    private List`1<XslNode> _content;
    private static IList`1<XslNode> s_emptyList;
    public string Select { get; }
    public bool ForwardsCompatible { get; }
    public IList`1<XslNode> Content { get; }
    internal string TraceName { get; }
    public XslNode(XslNodeType nodeType, QilName name, object arg, XslVersion xslVer);
    public XslNode(XslNodeType nodeType);
    private static XslNode();
    public string get_Select();
    public bool get_ForwardsCompatible();
    public IList`1<XslNode> get_Content();
    public void SetContent(List`1<XslNode> content);
    public void AddContent(XslNode node);
    public void InsertContent(IEnumerable`1<XslNode> collection);
    internal string get_TraceName();
}
internal class System.Xml.Xsl.Xslt.XslNodeEx : XslNode {
    public ISourceLineInfo ElemNameLi;
    public ISourceLineInfo EndTagLi;
    public XslNodeEx(XslNodeType t, QilName name, object arg, ContextInfo ctxInfo, XslVersion xslVer);
    public XslNodeEx(XslNodeType t, QilName name, object arg, XslVersion xslVer);
}
internal enum System.Xml.Xsl.Xslt.XslNodeType : Enum {
    public int value__;
    public static XslNodeType Unknown;
    public static XslNodeType ApplyImports;
    public static XslNodeType ApplyTemplates;
    public static XslNodeType Attribute;
    public static XslNodeType AttributeSet;
    public static XslNodeType CallTemplate;
    public static XslNodeType Choose;
    public static XslNodeType Comment;
    public static XslNodeType Copy;
    public static XslNodeType CopyOf;
    public static XslNodeType Element;
    public static XslNodeType Error;
    public static XslNodeType ForEach;
    public static XslNodeType If;
    public static XslNodeType Key;
    public static XslNodeType List;
    public static XslNodeType LiteralAttribute;
    public static XslNodeType LiteralElement;
    public static XslNodeType Message;
    public static XslNodeType Nop;
    public static XslNodeType Number;
    public static XslNodeType Otherwise;
    public static XslNodeType Param;
    public static XslNodeType PI;
    public static XslNodeType Sort;
    public static XslNodeType Template;
    public static XslNodeType Text;
    public static XslNodeType UseAttributeSet;
    public static XslNodeType ValueOf;
    public static XslNodeType ValueOfDoe;
    public static XslNodeType Variable;
    public static XslNodeType WithParam;
}
internal class System.Xml.Xsl.Xslt.XsltInput : object {
    private static int InitRecordsSize;
    private XmlReader _reader;
    private IXmlLineInfo _readerLineInfo;
    private bool _topLevelReader;
    private CompilerScopeManager`1<VarPar> _scopeManager;
    private KeywordsTable _atoms;
    private Compiler _compiler;
    private bool _reatomize;
    private XmlNodeType _nodeType;
    private Record[] _records;
    private int _currentRecord;
    private bool _isEmptyElement;
    private int _lastTextNode;
    private int _numAttributes;
    private ContextInfo _ctxInfo;
    private bool _attributesRead;
    private StringConcat _strConcat;
    private XsltAttribute[] _attributes;
    private Int32[] _xsltAttributeNumber;
    private static XsltAttribute[] s_noAttributes;
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public string Prefix { get; }
    public string Value { get; }
    public string BaseUri { get; }
    public string QualifiedName { get; }
    public bool IsEmptyElement { get; }
    public string Uri { get; }
    public Location Start { get; }
    public Location End { get; }
    public DelayedQName ElementName { get; }
    public bool CanHaveApplyImports { get; public set; }
    public bool ForwardCompatibility { get; }
    public bool BackwardCompatibility { get; }
    public XslVersion XslVersion { get; }
    public XsltInput(XmlReader reader, Compiler compiler, KeywordsTable atoms);
    private static XsltInput();
    public XmlNodeType get_NodeType();
    public string get_LocalName();
    public string get_NamespaceUri();
    public string get_Prefix();
    public string get_Value();
    public string get_BaseUri();
    public string get_QualifiedName();
    public bool get_IsEmptyElement();
    public string get_Uri();
    public Location get_Start();
    public Location get_End();
    private static void EnsureExpandEntities(XmlReader reader);
    private void ExtendRecordBuffer(int position);
    public bool FindStylesheetElement();
    public void Finish();
    private void FillupRecord(Record& rec);
    private void SetRecordEnd(Record& rec);
    private void FillupTextRecord(Record& rec);
    private void FillupCharacterEntityRecord(Record& rec);
    private bool ReadAttribute(Record& rec);
    public bool MoveToFirstChild();
    public bool MoveToNextSibling();
    public void SkipNode();
    private int ReadTextNodes();
    private bool ReadNextSibling();
    private int ReadElement();
    public void MoveToElement();
    private bool MoveToAttributeBase(int attNum);
    public bool MoveToLiteralAttribute(int attNum);
    public bool MoveToXsltAttribute(int attNum, string attName);
    public bool IsRequiredAttribute(int attNum);
    public bool AttributeExists(int attNum, string attName);
    public DelayedQName get_ElementName();
    public bool IsNs(string ns);
    public bool IsKeyword(string kwd);
    public bool IsXsltNamespace();
    public bool IsNullNamespace();
    public bool IsXsltKeyword(string kwd);
    public bool get_CanHaveApplyImports();
    public void set_CanHaveApplyImports(bool value);
    public bool IsExtensionNamespace(string uri);
    public bool get_ForwardCompatibility();
    public bool get_BackwardCompatibility();
    public XslVersion get_XslVersion();
    private void SetVersion(int attVersion);
    private void SetVersion(double version);
    public ContextInfo GetAttributes();
    public ContextInfo GetAttributes(XsltAttribute[] attributes);
    public ContextInfo GetLiteralAttributes(bool asStylesheet);
    public void GetVersionAttribute();
    private void InsertExNamespaces(int attExPrefixes, ContextInfo ctxInfo, bool extensions);
    private void SetXPathDefaultNamespace(int attNamespace);
    private void SetDefaultCollation(int attCollation);
    private static int PositionAdjustment(XmlNodeType nt);
    public ISourceLineInfo BuildLineInfo();
    public ISourceLineInfo BuildNameLineInfo();
    public ISourceLineInfo BuildReaderLineInfo();
    public string LookupXmlNamespace(string prefix);
    public sealed virtual void ReportError(string res, String[] args);
    public void ReportErrorFC(string res, String[] args);
    public sealed virtual void ReportWarning(string res, String[] args);
    private void ReportNYI(string arg);
}
internal class System.Xml.Xsl.Xslt.XsltLoader : object {
    private Compiler _compiler;
    private XmlResolver _xmlResolver;
    private QueryReaderSettings _readerSettings;
    private KeywordsTable _atoms;
    private XsltInput _input;
    private Stylesheet _curStylesheet;
    private Template _curTemplate;
    private object _curFunction;
    internal static QilName nullMode;
    public static int V1Opt;
    public static int V1Req;
    public static int V2Opt;
    public static int V2Req;
    private HybridDictionary _documentUriInUse;
    private XsltAttribute[] _stylesheetAttributes;
    private XsltAttribute[] _importIncludeAttributes;
    private XsltAttribute[] _loadStripSpaceAttributes;
    private XsltAttribute[] _outputAttributes;
    private XsltAttribute[] _keyAttributes;
    private XsltAttribute[] _decimalFormatAttributes;
    private XsltAttribute[] _namespaceAliasAttributes;
    private XsltAttribute[] _attributeSetAttributes;
    private XsltAttribute[] _templateAttributes;
    private XsltAttribute[] _scriptAttributes;
    private XsltAttribute[] _assemblyAttributes;
    private XsltAttribute[] _usingAttributes;
    private static int MAX_LOADINSTRUCTIONS_DEPTH;
    private int _loadInstructionsDepth;
    private XsltAttribute[] _applyTemplatesAttributes;
    private XsltAttribute[] _callTemplateAttributes;
    private XsltAttribute[] _copyAttributes;
    private XsltAttribute[] _copyOfAttributes;
    private XsltAttribute[] _ifAttributes;
    private XsltAttribute[] _forEachAttributes;
    private XsltAttribute[] _messageAttributes;
    private XsltAttribute[] _numberAttributes;
    private XsltAttribute[] _valueOfAttributes;
    private XsltAttribute[] _variableAttributes;
    private XsltAttribute[] _paramAttributes;
    private XsltAttribute[] _withParamAttributes;
    private XsltAttribute[] _commentAttributes;
    private XsltAttribute[] _processingInstructionAttributes;
    private XsltAttribute[] _textAttributes;
    private XsltAttribute[] _elementAttributes;
    private XsltAttribute[] _attributeAttributes;
    private XsltAttribute[] _sortAttributes;
    private bool V1 { get; }
    private static XsltLoader();
    public void Load(Compiler compiler, object stylesheet, XmlResolver xmlResolver);
    private void Load(XmlReader reader);
    private void AtomizeAttributes(XsltAttribute[] attributes);
    private void AtomizeAttributes();
    private bool get_V1();
    private Uri ResolveUri(string relativeUri, string baseUri);
    private XmlReader CreateReader(Uri uri, XmlResolver xmlResolver);
    private Stylesheet LoadStylesheet(Uri uri, bool include);
    private Stylesheet LoadStylesheet(XmlReader reader, bool include);
    private void LoadDocument();
    private void LoadSimplifiedStylesheet();
    private void LoadRealStylesheet();
    private void LoadImport();
    private void LoadInclude();
    private void LoadStripSpace(NsDecl stylesheetNsList);
    private void LoadPreserveSpace(NsDecl stylesheetNsList);
    private void LoadOutput();
    private void ProcessOutputSettings();
    private void CheckUseAttrubuteSetInList(IList`1<XslNode> list);
    private void CheckAttributeSetsDfs(AttributeSet attSet);
    private void LoadKey(NsDecl stylesheetNsList);
    private void LoadDecimalFormat(NsDecl stylesheetNsList);
    private void LoadNamespaceAlias(NsDecl stylesheetNsList);
    private void LoadAttributeSet(NsDecl stylesheetNsList);
    private void LoadGlobalVariableOrParameter(NsDecl stylesheetNsList, XslNodeType nodeType);
    private void LoadTemplate(NsDecl stylesheetNsList);
    private void LoadMsScript(NsDecl stylesheetNsList);
    private List`1<XslNode> LoadInstructions();
    private List`1<XslNode> LoadInstructions(InstructionFlags flags);
    private List`1<XslNode> LoadInstructions(List`1<XslNode> content);
    private List`1<XslNode> LoadInstructions(List`1<XslNode> content, InstructionFlags flags);
    private List`1<XslNode> LoadWithParams(InstructionFlags flags);
    private XslNode XslApplyImports();
    private XslNode XslApplyTemplates();
    private XslNode XslCallTemplate();
    private XslNode XslCopy();
    private XslNode XslCopyOf();
    private XslNode XslFallback();
    private XslNode XslIf();
    private XslNode XslChoose();
    private XslNode XslOtherwise();
    private XslNode XslForEach();
    private XslNode XslMessage();
    private XslNode XslNumber();
    private XslNode XslValueOf();
    private VarPar XslVarPar();
    private XslNode XslComment();
    private List`1<XslNode> LoadContent(bool hasSelect);
    private XslNode XslProcessingInstruction();
    private XslNode XslText();
    private XslNode XslElement();
    private XslNode XslAttribute();
    private XslNode XslSort(int sortNumber);
    private XslNode LoadLiteralResultElement(bool asStylesheet);
    private void CheckWithParam(List`1<XslNode> content, XslNode withParam);
    private static void AddInstruction(List`1<XslNode> content, XslNode instruction);
    private List`1<XslNode> LoadEndTag(List`1<XslNode> content);
    private XslNode LoadUnknownXsltInstruction(string parentName);
    private List`1<XslNode> LoadFallbacks(string instrName);
    private QilName ParseModeAttribute(int attNum);
    private QilName ParseModeListAttribute(int attNum);
    private string ParseCollationAttribute(int attNum);
    private bool ResolveQName(bool ignoreDefaultNs, string qname, String& localName, String& namespaceName, String& prefix);
    private QilName ParseQNameAttribute(int attNum);
    private string ParseNCNameAttribute(int attNum);
    private QilName CreateXPathQName(string qname);
    private XmlQualifiedName ResolveQName(bool ignoreDefaultNs, string qname);
    private void ParseWhitespaceRules(string elements, bool preserveSpace);
    private XmlQualifiedName ParseOutputMethod(string attValue, XmlOutputMethod& method);
    private void AddUseAttributeSets(List`1<XslNode> list);
    private List`1<QilName> ParseUseCharacterMaps(int attNum);
    private string ParseStringAttribute(int attNum, string attName);
    private char ParseCharAttribute(int attNum, string attName, char defVal);
    private TriState ParseYesNoAttribute(int attNum, string attName);
    private void ParseTypeAttribute(int attNum);
    private void ParseValidationAttribute(int attNum, bool defVal);
    private void ParseInputTypeAnnotationsAttribute(int attNum);
    private void CheckNoContent();
    private ISourceLineInfo SkipEmptyContent();
    private static XslNode SetLineInfo(XslNode node, ISourceLineInfo lineInfo);
    private static void SetContent(XslNode node, List`1<XslNode> content);
    internal static XslNode SetInfo(XslNode to, List`1<XslNode> content, ContextInfo info);
    private static NsDecl MergeNamespaces(NsDecl thisList, NsDecl parentList);
    public sealed virtual void ReportError(string res, String[] args);
    public sealed virtual void ReportWarning(string res, String[] args);
    private void ReportNYI(string arg);
    public void CheckError(bool cond, string res, String[] args);
}
internal class System.Xml.Xsl.Xslt.XsltQilFactory : XPathQilFactory {
    public XsltQilFactory(QilFactory f, bool debug);
    [ConditionalAttribute("DEBUG")]
public void CheckXsltType(QilNode n);
    [ConditionalAttribute("DEBUG")]
public void CheckQName(QilNode n);
    public QilNode DefaultValueMarker();
    public QilNode InvokeIsSameNodeSort(QilNode n1, QilNode n2);
    public QilNode InvokeSystemProperty(QilNode n);
    public QilNode InvokeElementAvailable(QilNode n);
    public QilNode InvokeCheckScriptNamespace(string nsUri);
    public QilNode InvokeFunctionAvailable(QilNode n);
    public QilNode InvokeBaseUri(QilNode n);
    public QilNode InvokeOnCurrentNodeChanged(QilNode n);
    public QilNode InvokeLangToLcid(QilNode n, bool fwdCompat);
    public QilNode InvokeNumberFormat(QilNode value, QilNode format, QilNode lang, QilNode letterValue, QilNode groupingSeparator, QilNode groupingSize);
    public QilNode InvokeRegisterDecimalFormat(DecimalFormatDecl format);
    public QilNode InvokeRegisterDecimalFormatter(QilNode formatPicture, DecimalFormatDecl format);
    public QilNode InvokeFormatNumberStatic(QilNode value, QilNode decimalFormatIndex);
    public QilNode InvokeFormatNumberDynamic(QilNode value, QilNode formatPicture, QilNode decimalFormatName, QilNode errorMessageName);
    public QilNode InvokeOuterXml(QilNode n);
    public QilNode InvokeMsFormatDateTime(QilNode datetime, QilNode format, QilNode lang, QilNode isDate);
    public QilNode InvokeMsStringCompare(QilNode x, QilNode y, QilNode lang, QilNode options);
    public QilNode InvokeMsUtc(QilNode n);
    public QilNode InvokeMsNumber(QilNode n);
    public QilNode InvokeMsLocalName(QilNode n);
    public QilNode InvokeMsNamespaceUri(QilNode n, QilNode currentNode);
    public QilNode InvokeEXslObjectType(QilNode n);
}
internal enum System.Xml.Xsl.Xslt.XslVersion : Enum {
    public int value__;
    public static XslVersion Version10;
    public static XslVersion ForwardsCompatible;
    public static XslVersion Current;
}
internal abstract class System.Xml.Xsl.Xslt.XslVisitor`1 : object {
    protected virtual T Visit(XslNode node);
    protected virtual T VisitApplyImports(XslNode node);
    protected virtual T VisitApplyTemplates(XslNode node);
    protected virtual T VisitAttribute(NodeCtor node);
    protected virtual T VisitAttributeSet(AttributeSet node);
    protected virtual T VisitCallTemplate(XslNode node);
    protected virtual T VisitChoose(XslNode node);
    protected virtual T VisitComment(XslNode node);
    protected virtual T VisitCopy(XslNode node);
    protected virtual T VisitCopyOf(XslNode node);
    protected virtual T VisitElement(NodeCtor node);
    protected virtual T VisitError(XslNode node);
    protected virtual T VisitForEach(XslNode node);
    protected virtual T VisitIf(XslNode node);
    protected virtual T VisitKey(Key node);
    protected virtual T VisitList(XslNode node);
    protected virtual T VisitLiteralAttribute(XslNode node);
    protected virtual T VisitLiteralElement(XslNode node);
    protected virtual T VisitMessage(XslNode node);
    protected virtual T VisitNop(XslNode node);
    protected virtual T VisitNumber(Number node);
    protected virtual T VisitOtherwise(XslNode node);
    protected virtual T VisitParam(VarPar node);
    protected virtual T VisitPI(XslNode node);
    protected virtual T VisitSort(Sort node);
    protected virtual T VisitTemplate(Template node);
    protected virtual T VisitText(Text node);
    protected virtual T VisitUseAttributeSet(XslNode node);
    protected virtual T VisitValueOf(XslNode node);
    protected virtual T VisitValueOfDoe(XslNode node);
    protected virtual T VisitVariable(VarPar node);
    protected virtual T VisitWithParam(VarPar node);
    protected virtual T VisitUnknown(XslNode node);
    protected virtual T VisitChildren(XslNode node);
}
public class System.Xml.Xsl.XsltArgumentList : object {
    private Hashtable _parameters;
    private Hashtable _extensions;
    internal XsltMessageEncounteredEventHandler xsltMessageEncountered;
    public object GetParam(string name, string namespaceUri);
    public object GetExtensionObject(string namespaceUri);
    public void AddParam(string name, string namespaceUri, object parameter);
    public void AddExtensionObject(string namespaceUri, object extension);
    public object RemoveParam(string name, string namespaceUri);
    public object RemoveExtensionObject(string namespaceUri);
    public void add_XsltMessageEncountered(XsltMessageEncounteredEventHandler value);
    public void remove_XsltMessageEncountered(XsltMessageEncounteredEventHandler value);
    public void Clear();
    private static void CheckArgumentNull(object param, string paramName);
}
[TypeForwardedFromAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Xml.Xsl.XsltCompileException : XsltException {
    protected XsltCompileException(SerializationInfo info, StreamingContext context);
    public XsltCompileException(string message);
    public XsltCompileException(string message, Exception innerException);
    public XsltCompileException(Exception inner, string sourceUri, int lineNumber, int linePosition);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class System.Xml.Xsl.XsltContext : XmlNamespaceManager {
    public bool Whitespace { get; }
    protected XsltContext(NameTable table);
    internal XsltContext(bool dummy);
    public abstract virtual IXsltContextVariable ResolveVariable(string prefix, string name);
    public abstract virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] ArgTypes);
    public abstract virtual bool get_Whitespace();
    public abstract virtual bool PreserveWhitespace(XPathNavigator node);
    public abstract virtual int CompareDocument(string baseUri, string nextbaseUri);
}
[TypeForwardedFromAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Xml.Xsl.XsltException : SystemException {
    private string _res;
    private String[] _args;
    private string _sourceUri;
    private int _lineNumber;
    private int _linePosition;
    private string _message;
    public string SourceUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Message { get; }
    protected XsltException(SerializationInfo info, StreamingContext context);
    public XsltException(string message);
    public XsltException(string message, Exception innerException);
    internal XsltException(string res, String[] args, string sourceUri, int lineNumber, int linePosition, Exception inner);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static XsltException Create(string res, String[] args);
    internal static XsltException Create(string res, String[] args, Exception inner);
    public virtual string get_SourceUri();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    public virtual string get_Message();
    private static string CreateMessage(string res, String[] args, string sourceUri, int lineNumber, int linePosition);
    private static string FormatMessage(string key, String[] args);
}
public abstract class System.Xml.Xsl.XsltMessageEncounteredEventArgs : EventArgs {
    public string Message { get; }
    public abstract virtual string get_Message();
}
public class System.Xml.Xsl.XsltMessageEncounteredEventHandler : MulticastDelegate {
    public XsltMessageEncounteredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XsltMessageEncounteredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XsltMessageEncounteredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Xml.Xsl.XsltOld.Action : object {
    internal static int Initialized;
    internal static int Finished;
    internal abstract virtual void Execute(Processor processor, ActionFrame frame);
    internal virtual void ReplaceNamespaceAlias(Compiler compiler);
    internal virtual DbgData GetDbgData(ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.ActionFrame : object {
    private int _state;
    private int _counter;
    private Object[] _variables;
    private Hashtable _withParams;
    private Action _action;
    private ActionFrame _container;
    private int _currentAction;
    private XPathNodeIterator _nodeSet;
    private XPathNodeIterator _newNodeSet;
    private PrefixQName _calulatedName;
    private string _storedOutput;
    internal PrefixQName CalulatedName { get; internal set; }
    internal string StoredOutput { get; internal set; }
    internal int State { get; internal set; }
    internal int Counter { get; internal set; }
    internal ActionFrame Container { get; }
    internal XPathNavigator Node { get; }
    internal XPathNodeIterator NodeSet { get; }
    internal XPathNodeIterator NewNodeSet { get; }
    private XPathNavigator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.Instruction { get; }
    private XPathNodeIterator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.NodeSet { get; }
    internal PrefixQName get_CalulatedName();
    internal void set_CalulatedName(PrefixQName value);
    internal string get_StoredOutput();
    internal void set_StoredOutput(string value);
    internal int get_State();
    internal void set_State(int value);
    internal int get_Counter();
    internal void set_Counter(int value);
    internal ActionFrame get_Container();
    internal XPathNavigator get_Node();
    internal XPathNodeIterator get_NodeSet();
    internal XPathNodeIterator get_NewNodeSet();
    internal int IncrementCounter();
    internal void AllocateVariables(int count);
    internal object GetVariable(int index);
    internal void SetVariable(int index, object value);
    internal void SetParameter(XmlQualifiedName name, object value);
    internal void ResetParams();
    internal object GetParameter(XmlQualifiedName name);
    internal void InitNodeSet(XPathNodeIterator nodeSet);
    internal void InitNewNodeSet(XPathNodeIterator nodeSet);
    internal void SortNewNodeSet(Processor proc, ArrayList sortarray);
    internal void Finished();
    internal void Inherit(ActionFrame parent);
    private void Init(Action action, ActionFrame container, XPathNodeIterator nodeSet);
    internal void Init(Action action, XPathNodeIterator nodeSet);
    internal void Init(ActionFrame containerFrame, XPathNodeIterator nodeSet);
    internal void SetAction(Action action);
    internal void SetAction(Action action, int state);
    private Action GetAction(int actionIndex);
    internal void Exit();
    internal bool Execute(Processor processor);
    internal bool NextNode(Processor proc);
    internal bool NewNextNode(Processor proc);
    private sealed virtual override XPathNavigator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.get_Instruction();
    private sealed virtual override XPathNodeIterator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.get_NodeSet();
    private sealed virtual override int System.Xml.Xsl.XsltOld.Debugger.IStackFrame.GetVariablesCount();
    private sealed virtual override XPathNavigator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.GetVariable(int varIndex);
    private sealed virtual override object System.Xml.Xsl.XsltOld.Debugger.IStackFrame.GetVariableValue(int varIndex);
}
internal class System.Xml.Xsl.XsltOld.ApplyImportsAction : CompiledAction {
    private XmlQualifiedName _mode;
    private Stylesheet _stylesheet;
    private static int TemplateProcessed;
    internal virtual void Compile(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.ApplyTemplatesAction : ContainerAction {
    private static int ProcessedChildren;
    private static int ProcessNextNode;
    private static int PositionAdvanced;
    private static int TemplateProcessed;
    private int _selectKey;
    private XmlQualifiedName _mode;
    private static ApplyTemplatesAction s_BuiltInRule;
    private ApplyTemplatesAction(XmlQualifiedName mode);
    private static ApplyTemplatesAction();
    internal static ApplyTemplatesAction BuiltInRule();
    internal static ApplyTemplatesAction BuiltInRule(XmlQualifiedName mode);
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    private void CompileContent(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.AttributeAction : ContainerAction {
    private static int NameDone;
    private Avt _nameAvt;
    private Avt _nsAvt;
    private InputScopeManager _manager;
    private string _name;
    private string _nsUri;
    private PrefixQName _qname;
    private static PrefixQName CreateAttributeQName(string name, string nsUri, InputScopeManager manager);
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.AttributeSetAction : ContainerAction {
    internal XmlQualifiedName name;
    internal XmlQualifiedName Name { get; }
    internal XmlQualifiedName get_Name();
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    private void CompileContent(Compiler compiler);
    internal void Merge(AttributeSetAction attributeAction);
}
internal class System.Xml.Xsl.XsltOld.Avt : object {
    private string _constAvt;
    private TextEvent[] _events;
    public bool IsConstant { get; }
    private Avt(string constAvt);
    private Avt(ArrayList eventList);
    public bool get_IsConstant();
    internal string Evaluate(Processor processor, ActionFrame frame);
    internal static Avt CompileAvt(Compiler compiler, string avtText);
}
internal class System.Xml.Xsl.XsltOld.AvtEvent : TextEvent {
    private int _key;
    public AvtEvent(int key);
    public virtual bool Output(Processor processor, ActionFrame frame);
    public virtual string Evaluate(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.BeginEvent : Event {
    private XPathNodeType _nodeType;
    private string _namespaceUri;
    private string _name;
    private string _prefix;
    private bool _empty;
    private object _htmlProps;
    public BeginEvent(Compiler compiler);
    public virtual void ReplaceNamespaceAlias(Compiler compiler);
    public virtual bool Output(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.BuilderInfo : object {
    private string _name;
    private string _localName;
    private string _namespaceURI;
    private string _prefix;
    private XmlNodeType _nodeType;
    private int _depth;
    private bool _isEmptyTag;
    internal String[] TextInfo;
    internal int TextInfoCount;
    internal bool search;
    internal HtmlElementProps htmlProps;
    internal HtmlAttributeProps htmlAttrProps;
    internal string Name { get; }
    internal string LocalName { get; internal set; }
    internal string NamespaceURI { get; internal set; }
    internal string Prefix { get; internal set; }
    internal string Value { get; internal set; }
    internal XmlNodeType NodeType { get; internal set; }
    internal int Depth { get; internal set; }
    internal bool IsEmptyTag { get; internal set; }
    internal void Initialize(string prefix, string name, string nspace);
    internal void Initialize(BuilderInfo src);
    private void EnsureTextInfoSize(int newSize);
    internal BuilderInfo Clone();
    internal string get_Name();
    internal string get_LocalName();
    internal void set_LocalName(string value);
    internal string get_NamespaceURI();
    internal void set_NamespaceURI(string value);
    internal string get_Prefix();
    internal void set_Prefix(string value);
    internal string get_Value();
    internal void set_Value(string value);
    internal void ValueAppend(string s, bool disableEscaping);
    internal XmlNodeType get_NodeType();
    internal void set_NodeType(XmlNodeType value);
    internal int get_Depth();
    internal void set_Depth(int value);
    internal bool get_IsEmptyTag();
    internal void set_IsEmptyTag(bool value);
}
internal class System.Xml.Xsl.XsltOld.BuiltInRuleTextAction : Action {
    private static int ResultStored;
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.CallTemplateAction : ContainerAction {
    private static int ProcessedChildren;
    private static int ProcessedTemplate;
    private XmlQualifiedName _name;
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    private void CompileContent(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.ChooseAction : ContainerAction {
    internal virtual void Compile(Compiler compiler);
    private void CompileConditions(Compiler compiler);
}
internal class System.Xml.Xsl.XsltOld.CommentAction : ContainerAction {
    internal virtual void Compile(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal abstract class System.Xml.Xsl.XsltOld.CompiledAction : Action {
    internal abstract virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    public void CompileAttributes(Compiler compiler);
    internal static string PrecalculateAvt(Avt& avt);
    public void CheckEmpty(Compiler compiler);
    public void CheckRequiredAttribute(Compiler compiler, object attrValue, string attrName);
    public void CheckRequiredAttribute(Compiler compiler, bool attr, string attrName);
}
internal class System.Xml.Xsl.XsltOld.Compiler : object {
    internal static int InvalidQueryKey;
    internal static double RootPriority;
    internal StringBuilder AvtStringBuilder;
    private int _stylesheetid;
    private InputScope _rootScope;
    private XmlResolver _xmlResolver;
    private TemplateBaseAction _currentTemplate;
    private XmlQualifiedName _currentMode;
    private Hashtable _globalNamespaceAliasTable;
    private Stack _stylesheets;
    private HybridDictionary _documentURIs;
    private NavigatorInput _input;
    private KeywordsTable _atoms;
    private InputScopeManager _scopeManager;
    internal Stylesheet stylesheet;
    internal Stylesheet rootStylesheet;
    private RootAction _rootAction;
    private List`1<TheQuery> _queryStore;
    private QueryBuilder _queryBuilder;
    private int _rtfCount;
    public bool AllowBuiltInMode;
    public static XmlQualifiedName BuiltInMode;
    private Hashtable[] _typeDeclsByLang;
    private ArrayList _scriptFiles;
    private static String[] s_defaultNamespaces;
    internal KeywordsTable Atoms { get; }
    internal int Stylesheetid { get; internal set; }
    internal NavigatorInput Document { get; }
    internal NavigatorInput Input { get; }
    internal Stylesheet CompiledStylesheet { get; }
    internal RootAction RootAction { get; internal set; }
    internal List`1<TheQuery> QueryStore { get; }
    public IXsltDebugger Debugger { get; }
    internal bool ForwardCompatibility { get; internal set; }
    internal bool CanHaveApplyImports { get; internal set; }
    protected InputScopeManager ScopeManager { get; }
    internal string DefaultNamespace { get; }
    internal XmlQualifiedName CurrentMode { get; }
    private static Compiler();
    internal KeywordsTable get_Atoms();
    internal int get_Stylesheetid();
    internal void set_Stylesheetid(int value);
    internal NavigatorInput get_Document();
    internal NavigatorInput get_Input();
    internal bool Advance();
    internal bool Recurse();
    internal bool ToParent();
    internal Stylesheet get_CompiledStylesheet();
    internal RootAction get_RootAction();
    internal void set_RootAction(RootAction value);
    internal List`1<TheQuery> get_QueryStore();
    public virtual IXsltDebugger get_Debugger();
    internal string GetUnicRtfId();
    internal void Compile(NavigatorInput input, XmlResolver xmlResolver);
    internal bool get_ForwardCompatibility();
    internal void set_ForwardCompatibility(bool value);
    internal bool get_CanHaveApplyImports();
    internal void set_CanHaveApplyImports(bool value);
    internal void InsertExtensionNamespace(string value);
    internal void InsertExcludedNamespace(string value);
    internal void InsertExtensionNamespace();
    internal void InsertExcludedNamespace();
    internal bool IsExtensionNamespace(string nspace);
    internal bool IsExcludedNamespace(string nspace);
    internal void PushLiteralScope();
    internal void PushNamespaceScope();
    protected InputScopeManager get_ScopeManager();
    internal virtual void PopScope();
    internal InputScopeManager CloneScopeManager();
    internal int InsertVariable(VariableAction variable);
    internal void AddNamespaceAlias(string StylesheetURI, NamespaceInfo AliasInfo);
    internal bool IsNamespaceAlias(string StylesheetURI);
    internal NamespaceInfo FindNamespaceAlias(string StylesheetURI);
    internal string ResolveXmlNamespace(string prefix);
    internal string ResolveXPathNamespace(string prefix);
    internal string get_DefaultNamespace();
    internal void InsertKey(XmlQualifiedName name, int MatchKey, int UseKey);
    internal void AddDecimalFormat(XmlQualifiedName name, DecimalFormat formatinfo);
    private String[] ResolvePrefixes(string tokens);
    internal bool GetYesNo(string value);
    internal string GetSingleAttribute(string attributeAtom);
    internal XmlQualifiedName CreateXPathQName(string qname);
    internal XmlQualifiedName CreateXmlQName(string qname);
    internal static XPathDocument LoadDocument(XmlTextReaderImpl reader);
    private void AddDocumentURI(string href);
    private void RemoveDocumentURI(string href);
    internal bool IsCircularReference(string href);
    internal Uri ResolveUri(string relativeUri);
    internal NavigatorInput ResolveDocument(Uri absoluteUri);
    internal void PushInputDocument(NavigatorInput newInput);
    internal void PopInputDocument();
    internal void PushStylesheet(Stylesheet stylesheet);
    internal Stylesheet PopStylesheet();
    internal void AddAttributeSet(AttributeSetAction attributeSet);
    internal void AddTemplate(TemplateAction template);
    internal void BeginTemplate(TemplateAction template);
    internal void EndTemplate();
    internal XmlQualifiedName get_CurrentMode();
    internal int AddQuery(string xpathQuery);
    internal int AddQuery(string xpathQuery, bool allowVar, bool allowKey, bool isPattern);
    internal int AddStringQuery(string xpathQuery);
    internal int AddBooleanQuery(string xpathQuery);
    internal void AddScript(string source, ScriptingLanguage lang, string ns, string fileName, int lineNumber);
    private static void ValidateExtensionNamespace(string nsUri);
    public string GetNsAlias(String& prefix);
    private static void getTextLex(string avt, Int32& start, StringBuilder lex);
    private static void getXPathLex(string avt, Int32& start, StringBuilder lex);
    private static bool GetNextAvtLex(string avt, Int32& start, StringBuilder lex, Boolean& isAvt);
    internal ArrayList CompileAvt(string avtText, Boolean& constant);
    internal ArrayList CompileAvt(string avtText);
    public virtual ApplyImportsAction CreateApplyImportsAction();
    public virtual ApplyTemplatesAction CreateApplyTemplatesAction();
    public virtual AttributeAction CreateAttributeAction();
    public virtual AttributeSetAction CreateAttributeSetAction();
    public virtual CallTemplateAction CreateCallTemplateAction();
    public virtual ChooseAction CreateChooseAction();
    public virtual CommentAction CreateCommentAction();
    public virtual CopyAction CreateCopyAction();
    public virtual CopyOfAction CreateCopyOfAction();
    public virtual ElementAction CreateElementAction();
    public virtual ForEachAction CreateForEachAction();
    public virtual IfAction CreateIfAction(ConditionType type);
    public virtual MessageAction CreateMessageAction();
    public virtual NewInstructionAction CreateNewInstructionAction();
    public virtual NumberAction CreateNumberAction();
    public virtual ProcessingInstructionAction CreateProcessingInstructionAction();
    public virtual void CreateRootAction();
    public virtual SortAction CreateSortAction();
    public virtual TemplateAction CreateTemplateAction();
    public virtual TemplateAction CreateSingleTemplateAction();
    public virtual TextAction CreateTextAction();
    public virtual UseAttributeSetsAction CreateUseAttributeSetsAction();
    public virtual ValueOfAction CreateValueOfAction();
    public virtual VariableAction CreateVariableAction(VariableType type);
    public virtual WithParamAction CreateWithParamAction();
    public virtual BeginEvent CreateBeginEvent();
    public virtual TextEvent CreateTextEvent();
    public XsltException UnexpectedKeyword();
}
internal class System.Xml.Xsl.XsltOld.ContainerAction : CompiledAction {
    internal ArrayList containedActions;
    internal CopyCodeAction lastCopyCodeAction;
    private int _maxid;
    protected static int ProcessingChildren;
    internal virtual void Compile(Compiler compiler);
    internal void CompileStylesheetAttributes(Compiler compiler);
    internal void CompileSingleTemplate(Compiler compiler);
    protected void CompileDocument(Compiler compiler, bool inInclude);
    internal Stylesheet CompileImport(Compiler compiler, Uri uri, int id);
    private void CompileImports(Compiler compiler);
    private void CompileInclude(Compiler compiler);
    internal void CompileNamespaceAlias(Compiler compiler);
    internal void CompileKey(Compiler compiler);
    protected void CompileDecimalFormat(Compiler compiler);
    internal bool CheckAttribute(bool valid, Compiler compiler);
    protected void CompileSpace(Compiler compiler, bool preserve);
    private double NameTest(string name);
    protected void CompileTopLevelElements(Compiler compiler);
    protected void CompileTemplate(Compiler compiler);
    protected void CompileOnceTemplate(Compiler compiler);
    private void CompileInstruction(Compiler compiler);
    private void CompileLiteral(Compiler compiler);
    private void CompileLiteralAttributesAndNamespaces(Compiler compiler);
    private void CompileOutput(Compiler compiler);
    internal void AddAction(Action action);
    private void EnsureCopyCodeAction();
    protected void AddEvent(Event copyEvent);
    protected void AddEvents(ArrayList copyEvents);
    private void AddScript(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
    internal Action GetAction(int actionIndex);
    internal void CheckDuplicateParams(XmlQualifiedName name);
    internal virtual void ReplaceNamespaceAlias(Compiler compiler);
}
internal class System.Xml.Xsl.XsltOld.CopyAction : ContainerAction {
    private static int CopyText;
    private static int NamespaceCopy;
    private static int ContentsCopy;
    private static int ProcessChildren;
    private static int ChildrenOnly;
    private string _useAttributeSets;
    private bool _empty;
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.CopyAttributesAction : Action {
    private static int BeginEvent;
    private static int TextEvent;
    private static int EndEvent;
    private static int Advance;
    private static CopyAttributesAction s_Action;
    private static CopyAttributesAction();
    internal static CopyAttributesAction GetAction();
    internal virtual void Execute(Processor processor, ActionFrame frame);
    private static bool SendBeginEvent(Processor processor, XPathNavigator node);
    private static bool SendTextEvent(Processor processor, XPathNavigator node);
    private static bool SendEndEvent(Processor processor, XPathNavigator node);
}
internal class System.Xml.Xsl.XsltOld.CopyCodeAction : Action {
    private static int Outputting;
    private ArrayList _copyEvents;
    internal void AddEvent(Event copyEvent);
    internal void AddEvents(ArrayList copyEvents);
    internal virtual void ReplaceNamespaceAlias(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.CopyNamespacesAction : Action {
    private static int BeginEvent;
    private static int TextEvent;
    private static int EndEvent;
    private static int Advance;
    private static CopyNamespacesAction s_Action;
    private static CopyNamespacesAction();
    internal static CopyNamespacesAction GetAction();
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.CopyNodeSetAction : Action {
    private static int BeginEvent;
    private static int Contents;
    private static int Namespaces;
    private static int Attributes;
    private static int Subtree;
    private static int EndEvent;
    private static CopyNodeSetAction s_Action;
    private static CopyNodeSetAction();
    internal static CopyNodeSetAction GetAction();
    internal virtual void Execute(Processor processor, ActionFrame frame);
    private static bool SendBeginEvent(Processor processor, XPathNavigator node);
    private static bool SendTextEvent(Processor processor, XPathNavigator node);
    private static bool SendEndEvent(Processor processor, XPathNavigator node);
}
internal class System.Xml.Xsl.XsltOld.CopyOfAction : CompiledAction {
    private static int ResultStored;
    private static int NodeSetCopied;
    private int _selectKey;
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.DbgCompiler : Compiler {
    private IXsltDebugger _debugger;
    private ArrayList _globalVars;
    private ArrayList _localVars;
    private VariableAction[] _globalVarsCache;
    private VariableAction[] _localVarsCache;
    public IXsltDebugger Debugger { get; }
    public VariableAction[] GlobalVariables { get; }
    public VariableAction[] LocalVariables { get; }
    public DbgCompiler(IXsltDebugger debugger);
    public virtual IXsltDebugger get_Debugger();
    public virtual VariableAction[] get_GlobalVariables();
    public virtual VariableAction[] get_LocalVariables();
    private void DefineVariable(VariableAction variable);
    private void UnDefineVariables(int count);
    internal virtual void PopScope();
    public virtual ApplyImportsAction CreateApplyImportsAction();
    public virtual ApplyTemplatesAction CreateApplyTemplatesAction();
    public virtual AttributeAction CreateAttributeAction();
    public virtual AttributeSetAction CreateAttributeSetAction();
    public virtual CallTemplateAction CreateCallTemplateAction();
    public virtual ChooseAction CreateChooseAction();
    public virtual CommentAction CreateCommentAction();
    public virtual CopyAction CreateCopyAction();
    public virtual CopyOfAction CreateCopyOfAction();
    public virtual ElementAction CreateElementAction();
    public virtual ForEachAction CreateForEachAction();
    public virtual IfAction CreateIfAction(ConditionType type);
    public virtual MessageAction CreateMessageAction();
    public virtual NewInstructionAction CreateNewInstructionAction();
    public virtual NumberAction CreateNumberAction();
    public virtual ProcessingInstructionAction CreateProcessingInstructionAction();
    public virtual void CreateRootAction();
    public virtual SortAction CreateSortAction();
    public virtual TemplateAction CreateTemplateAction();
    public virtual TemplateAction CreateSingleTemplateAction();
    public virtual TextAction CreateTextAction();
    public virtual UseAttributeSetsAction CreateUseAttributeSetsAction();
    public virtual ValueOfAction CreateValueOfAction();
    public virtual VariableAction CreateVariableAction(VariableType type);
    public virtual WithParamAction CreateWithParamAction();
    public virtual BeginEvent CreateBeginEvent();
    public virtual TextEvent CreateTextEvent();
}
internal class System.Xml.Xsl.XsltOld.DbgData : object {
    private XPathNavigator _styleSheet;
    private VariableAction[] _variables;
    private static DbgData s_nullDbgData;
    public XPathNavigator StyleSheet { get; }
    public VariableAction[] Variables { get; }
    public static DbgData Empty { get; }
    public DbgData(Compiler compiler);
    private static DbgData();
    public XPathNavigator get_StyleSheet();
    public VariableAction[] get_Variables();
    internal void ReplaceVariables(VariableAction[] vars);
    public static DbgData get_Empty();
}
internal interface System.Xml.Xsl.XsltOld.Debugger.IStackFrame {
    public XPathNavigator Instruction { get; }
    public XPathNodeIterator NodeSet { get; }
    public abstract virtual XPathNavigator get_Instruction();
    public abstract virtual XPathNodeIterator get_NodeSet();
    public abstract virtual int GetVariablesCount();
    public abstract virtual XPathNavigator GetVariable(int varIndex);
    public abstract virtual object GetVariableValue(int varIndex);
}
internal interface System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger {
    public abstract virtual string GetBuiltInTemplatesUri();
    public abstract virtual void OnInstructionCompile(XPathNavigator styleSheetNavigator);
    public abstract virtual void OnInstructionExecute(IXsltProcessor xsltProcessor);
}
internal interface System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor {
    public int StackDepth { get; }
    public abstract virtual int get_StackDepth();
    public abstract virtual IStackFrame GetStackFrame(int depth);
}
internal class System.Xml.Xsl.XsltOld.DocumentKeyList : ValueType {
    private XPathNavigator _rootNav;
    private Hashtable _keyTable;
    public XPathNavigator RootNav { get; }
    public Hashtable KeyTable { get; }
    public DocumentKeyList(XPathNavigator rootNav, Hashtable keyTable);
    public XPathNavigator get_RootNav();
    public Hashtable get_KeyTable();
}
internal class System.Xml.Xsl.XsltOld.DocumentScope : object {
    protected NamespaceDecl scopes;
    internal NamespaceDecl Scopes { get; }
    internal NamespaceDecl get_Scopes();
    internal NamespaceDecl AddNamespace(string prefix, string uri, string prevDefaultNsUri);
    internal string ResolveAtom(string prefix);
    internal string ResolveNonAtom(string prefix);
}
internal class System.Xml.Xsl.XsltOld.ElementAction : ContainerAction {
    private static int NameDone;
    private Avt _nameAvt;
    private Avt _nsAvt;
    private bool _empty;
    private InputScopeManager _manager;
    private string _name;
    private string _nsUri;
    private PrefixQName _qname;
    private static PrefixQName CreateElementQName(string name, string nsUri, InputScopeManager manager);
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.EndEvent : Event {
    private XPathNodeType _nodeType;
    internal EndEvent(XPathNodeType nodeType);
    public virtual bool Output(Processor processor, ActionFrame frame);
}
internal abstract class System.Xml.Xsl.XsltOld.Event : object {
    internal DbgData DbgData { get; }
    public virtual void ReplaceNamespaceAlias(Compiler compiler);
    public abstract virtual bool Output(Processor processor, ActionFrame frame);
    internal void OnInstructionExecute(Processor processor);
    internal virtual DbgData get_DbgData();
}
internal class System.Xml.Xsl.XsltOld.ForEachAction : ContainerAction {
    private static int ProcessedSort;
    private static int ProcessNextNode;
    private static int PositionAdvanced;
    private static int ContentsProcessed;
    private int _selectKey;
    private ContainerAction _sortContainer;
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
    protected void CompileSortElements(Compiler compiler);
}
internal class System.Xml.Xsl.XsltOld.HtmlAttributeProps : object {
    private bool _abr;
    private bool _uri;
    private bool _name;
    private static Hashtable s_table;
    public bool Abr { get; }
    public bool Uri { get; }
    public bool Name { get; }
    private static HtmlAttributeProps();
    public static HtmlAttributeProps Create(bool abr, bool uri, bool name);
    public bool get_Abr();
    public bool get_Uri();
    public bool get_Name();
    public static HtmlAttributeProps GetProps(string name);
    private static Hashtable CreatePropsTable();
}
internal class System.Xml.Xsl.XsltOld.HtmlElementProps : object {
    private bool _empty;
    private bool _abrParent;
    private bool _uriParent;
    private bool _noEntities;
    private bool _blockWS;
    private bool _head;
    private bool _nameParent;
    private static Hashtable s_table;
    public bool Empty { get; }
    public bool AbrParent { get; }
    public bool UriParent { get; }
    public bool NoEntities { get; }
    public bool Head { get; }
    public bool NameParent { get; }
    private static HtmlElementProps();
    public static HtmlElementProps Create(bool empty, bool abrParent, bool uriParent, bool noEntities, bool blockWS, bool head, bool nameParent);
    public bool get_Empty();
    public bool get_AbrParent();
    public bool get_UriParent();
    public bool get_NoEntities();
    public bool get_Head();
    public bool get_NameParent();
    public static HtmlElementProps GetProps(string name);
    private static Hashtable CreatePropsTable();
}
internal class System.Xml.Xsl.XsltOld.IfAction : ContainerAction {
    private ConditionType _type;
    private int _testKey;
    internal IfAction(ConditionType type);
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.InputScope : DocumentScope {
    private InputScope _parent;
    private bool _forwardCompatibility;
    private bool _canHaveApplyImports;
    private Hashtable _variables;
    private Hashtable _extensionNamespaces;
    private Hashtable _excludedNamespaces;
    internal InputScope Parent { get; }
    internal Hashtable Variables { get; }
    internal bool ForwardCompatibility { get; internal set; }
    internal bool CanHaveApplyImports { get; internal set; }
    internal InputScope(InputScope parent);
    internal InputScope get_Parent();
    internal Hashtable get_Variables();
    internal bool get_ForwardCompatibility();
    internal void set_ForwardCompatibility(bool value);
    internal bool get_CanHaveApplyImports();
    internal void set_CanHaveApplyImports(bool value);
    internal void Init(InputScope parent);
    internal void InsertExtensionNamespace(string nspace);
    internal bool IsExtensionNamespace(string nspace);
    internal void InsertExcludedNamespace(string nspace);
    internal bool IsExcludedNamespace(string nspace);
    internal void InsertVariable(VariableAction variable);
    internal int GetVeriablesCount();
    public VariableAction ResolveVariable(XmlQualifiedName qname);
    public VariableAction ResolveGlobalVariable(XmlQualifiedName qname);
}
internal class System.Xml.Xsl.XsltOld.InputScopeManager : object {
    private InputScope _scopeStack;
    private string _defaultNS;
    private XPathNavigator _navigator;
    internal InputScope CurrentScope { get; }
    internal InputScope VariableScope { get; }
    public XPathNavigator Navigator { get; }
    public string DefaultNamespace { get; }
    public InputScopeManager(XPathNavigator navigator, InputScope rootScope);
    internal InputScope get_CurrentScope();
    internal InputScope get_VariableScope();
    internal InputScopeManager Clone();
    public XPathNavigator get_Navigator();
    internal InputScope PushScope();
    internal void PopScope();
    internal void PushNamespace(string prefix, string nspace);
    public string get_DefaultNamespace();
    private string ResolveNonEmptyPrefix(string prefix);
    public string ResolveXmlNamespace(string prefix);
    public string ResolveXPathNamespace(string prefix);
    internal void InsertExtensionNamespaces(String[] nsList);
    internal bool IsExtensionNamespace(string nspace);
    internal void InsertExcludedNamespaces(String[] nsList);
    internal bool IsExcludedNamespace(string nspace);
}
internal class System.Xml.Xsl.XsltOld.Key : object {
    private XmlQualifiedName _name;
    private int _matchKey;
    private int _useKey;
    private ArrayList _keyNodes;
    public XmlQualifiedName Name { get; }
    public int MatchKey { get; }
    public int UseKey { get; }
    public Key(XmlQualifiedName name, int matchkey, int usekey);
    public XmlQualifiedName get_Name();
    public int get_MatchKey();
    public int get_UseKey();
    public void AddKey(XPathNavigator root, Hashtable table);
    public Hashtable GetKeys(XPathNavigator root);
    public Key Clone();
}
internal class System.Xml.Xsl.XsltOld.MessageAction : ContainerAction {
    private bool _Terminate;
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.NamespaceDecl : object {
    private string _prefix;
    private string _nsUri;
    private string _prevDefaultNsUri;
    private NamespaceDecl _next;
    internal string Prefix { get; }
    internal string Uri { get; }
    internal string PrevDefaultNsUri { get; }
    internal NamespaceDecl Next { get; }
    internal NamespaceDecl(string prefix, string nsUri, string prevDefaultNsUri, NamespaceDecl next);
    internal string get_Prefix();
    internal string get_Uri();
    internal string get_PrevDefaultNsUri();
    internal NamespaceDecl get_Next();
    internal void Init(string prefix, string nsUri, string prevDefaultNsUri, NamespaceDecl next);
}
internal class System.Xml.Xsl.XsltOld.NamespaceEvent : Event {
    private string _namespaceUri;
    private string _name;
    public NamespaceEvent(NavigatorInput input);
    public virtual void ReplaceNamespaceAlias(Compiler compiler);
    public virtual bool Output(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.NamespaceInfo : object {
    internal string prefix;
    internal string nameSpace;
    internal int stylesheetId;
    internal NamespaceInfo(string prefix, string nameSpace, int stylesheetId);
}
internal class System.Xml.Xsl.XsltOld.NavigatorInput : object {
    private XPathNavigator _Navigator;
    private PositionInfo _PositionInfo;
    private InputScopeManager _Manager;
    private NavigatorInput _Next;
    private string _Href;
    private KeywordsTable _Atoms;
    internal NavigatorInput Next { get; internal set; }
    internal string Href { get; }
    internal KeywordsTable Atoms { get; }
    internal XPathNavigator Navigator { get; }
    internal InputScopeManager InputScopeManager { get; }
    internal int LineNumber { get; }
    internal int LinePosition { get; }
    internal XPathNodeType NodeType { get; }
    internal string Name { get; }
    internal string LocalName { get; }
    internal string NamespaceURI { get; }
    internal string Prefix { get; }
    internal string Value { get; }
    internal bool IsEmptyTag { get; }
    internal string BaseURI { get; }
    internal NavigatorInput(XPathNavigator navigator, string baseUri, InputScope rootScope);
    internal NavigatorInput(XPathNavigator navigator);
    internal NavigatorInput get_Next();
    internal void set_Next(NavigatorInput value);
    internal string get_Href();
    internal KeywordsTable get_Atoms();
    internal XPathNavigator get_Navigator();
    internal InputScopeManager get_InputScopeManager();
    internal bool Advance();
    internal bool Recurse();
    internal bool ToParent();
    internal void Close();
    internal int get_LineNumber();
    internal int get_LinePosition();
    internal XPathNodeType get_NodeType();
    internal string get_Name();
    internal string get_LocalName();
    internal string get_NamespaceURI();
    internal string get_Prefix();
    internal string get_Value();
    internal bool get_IsEmptyTag();
    internal string get_BaseURI();
    internal bool MoveToFirstAttribute();
    internal bool MoveToNextAttribute();
    internal bool MoveToFirstNamespace();
    internal bool MoveToNextNamespace();
    [ConditionalAttribute("DEBUG")]
internal void AssertInput();
}
internal class System.Xml.Xsl.XsltOld.NavigatorOutput : object {
    private XPathDocument _doc;
    private int _documentIndex;
    private XmlRawWriter _wr;
    internal XPathNavigator Navigator { get; }
    internal NavigatorOutput(string baseUri);
    internal XPathNavigator get_Navigator();
    public sealed virtual OutputResult RecordDone(RecordBuilder record);
    public sealed virtual void TheEnd();
}
internal class System.Xml.Xsl.XsltOld.NewInstructionAction : ContainerAction {
    private string _name;
    private string _parent;
    private bool _fallback;
    internal virtual void Compile(Compiler compiler);
    internal void CompileSelectiveTemplate(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.NumberAction : ContainerAction {
    private static long msofnfcNil;
    private static long msofnfcTraditional;
    private static long msofnfcAlwaysFormat;
    private static int cchMaxFormat;
    private static int cchMaxFormatDecimal;
    private static FormatInfo s_defaultFormat;
    private static FormatInfo s_defaultSeparator;
    private static int OutputNumber;
    private string _level;
    private string _countPattern;
    private int _countKey;
    private string _from;
    private int _fromKey;
    private string _value;
    private int _valueKey;
    private Avt _formatAvt;
    private Avt _langAvt;
    private Avt _letterAvt;
    private Avt _groupingSepAvt;
    private Avt _groupingSizeAvt;
    private List`1<FormatInfo> _formatTokens;
    private string _lang;
    private string _letter;
    private string _groupingSep;
    private string _groupingSize;
    private bool _forwardCompatibility;
    private static NumberAction();
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Compile(Compiler compiler);
    private int numberAny(Processor processor, ActionFrame frame);
    private bool checkFrom(Processor processor, XPathNavigator nav);
    private bool moveToCount(XPathNavigator nav, Processor processor, XPathNavigator contextNode);
    private int numberCount(XPathNavigator nav, Processor processor, XPathNavigator contextNode);
    private static object SimplifyValue(object value);
    internal virtual void Execute(Processor processor, ActionFrame frame);
    private bool MatchCountKey(Processor processor, XPathNavigator contextNode, XPathNavigator nav);
    private XPathNodeType BasicNodeType(XPathNodeType type);
    private static string Format(ArrayList numberlist, List`1<FormatInfo> tokens, string lang, string letter, string groupingSep, string groupingSize);
    private static void mapFormatToken(string wsToken, int startLen, int tokLen, NumberingSequence& seq, Int32& pminlen);
    private static List`1<FormatInfo> ParseFormat(string formatString);
    private string ParseLetter(string letter);
}
internal class System.Xml.Xsl.XsltOld.OutKeywords : object {
    private string _AtomEmpty;
    private string _AtomLang;
    private string _AtomSpace;
    private string _AtomXmlns;
    private string _AtomXml;
    private string _AtomXmlNamespace;
    private string _AtomXmlnsNamespace;
    internal string Empty { get; }
    internal string Lang { get; }
    internal string Space { get; }
    internal string Xmlns { get; }
    internal string Xml { get; }
    internal string XmlNamespace { get; }
    internal string XmlnsNamespace { get; }
    internal OutKeywords(XmlNameTable nameTable);
    internal string get_Empty();
    internal string get_Lang();
    internal string get_Space();
    internal string get_Xmlns();
    internal string get_Xml();
    internal string get_XmlNamespace();
    internal string get_XmlnsNamespace();
    [ConditionalAttribute("DEBUG")]
private void CheckKeyword(string keyword);
}
internal class System.Xml.Xsl.XsltOld.OutputScope : DocumentScope {
    private string _name;
    private string _nsUri;
    private string _prefix;
    private XmlSpace _space;
    private string _lang;
    private bool _mixed;
    private bool _toCData;
    private HtmlElementProps _htmlElementProps;
    internal string Name { get; }
    internal string Namespace { get; }
    internal string Prefix { get; internal set; }
    internal XmlSpace Space { get; internal set; }
    internal string Lang { get; internal set; }
    internal bool Mixed { get; internal set; }
    internal bool ToCData { get; internal set; }
    internal HtmlElementProps HtmlElementProps { get; internal set; }
    internal string get_Name();
    internal string get_Namespace();
    internal string get_Prefix();
    internal void set_Prefix(string value);
    internal XmlSpace get_Space();
    internal void set_Space(XmlSpace value);
    internal string get_Lang();
    internal void set_Lang(string value);
    internal bool get_Mixed();
    internal void set_Mixed(bool value);
    internal bool get_ToCData();
    internal void set_ToCData(bool value);
    internal HtmlElementProps get_HtmlElementProps();
    internal void set_HtmlElementProps(HtmlElementProps value);
    internal void Init(string name, string nspace, string prefix, XmlSpace space, string lang, bool mixed);
    internal bool FindPrefix(string urn, String& prefix);
}
internal class System.Xml.Xsl.XsltOld.OutputScopeManager : object {
    private static int STACK_INCREMENT;
    private HWStack _elementScopesStack;
    private string _defaultNS;
    private OutKeywords _atoms;
    private XmlNameTable _nameTable;
    private int _prefixIndex;
    internal string DefaultNamespace { get; }
    internal OutputScope CurrentElementScope { get; }
    internal XmlSpace XmlSpace { get; }
    internal string XmlLang { get; }
    internal OutputScopeManager(XmlNameTable nameTable, OutKeywords atoms);
    internal string get_DefaultNamespace();
    internal OutputScope get_CurrentElementScope();
    internal XmlSpace get_XmlSpace();
    internal string get_XmlLang();
    internal void PushNamespace(string prefix, string nspace);
    internal void PushScope(string name, string nspace, string prefix);
    internal void PopScope();
    internal string ResolveNamespace(string prefix);
    internal string ResolveNamespace(string prefix, Boolean& thisScope);
    internal bool FindPrefix(string nspace, String& prefix);
    internal string GeneratePrefix(string format);
}
internal class System.Xml.Xsl.XsltOld.PrefixQName : object {
    public string Prefix;
    public string Name;
    public string Namespace;
    internal void ClearPrefix();
    internal void SetQName(string qname);
    public static void ParseQualifiedName(string qname, String& prefix, String& local);
    public static bool ValidatePrefix(string prefix);
}
internal class System.Xml.Xsl.XsltOld.ProcessingInstructionAction : ContainerAction {
    private static int NameEvaluated;
    private static int NameReady;
    private Avt _nameAvt;
    private string _name;
    private static char CharX;
    private static char Charx;
    private static char CharM;
    private static char Charm;
    private static char CharL;
    private static char Charl;
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
    internal static bool IsProcessingInstructionName(string name);
}
internal class System.Xml.Xsl.XsltOld.Processor : object {
    private static int StackIncrement;
    private ExecResult _execResult;
    private Stylesheet _stylesheet;
    private RootAction _rootAction;
    private Key[] _keyList;
    private List`1<TheQuery> _queryStore;
    private XPathNavigator _document;
    private HWStack _actionStack;
    private HWStack _debuggerStack;
    private StringBuilder _sharedStringBuilder;
    private int _ignoreLevel;
    private StateMachine _xsm;
    private RecordBuilder _builder;
    private XsltOutput _output;
    private XmlNameTable _nameTable;
    private XmlResolver _resolver;
    private XsltArgumentList _args;
    private Hashtable _scriptExtensions;
    private ArrayList _numberList;
    private TemplateLookupAction _templateLookup;
    private IXsltDebugger _debugger;
    private Query[] _queryList;
    private ArrayList _sortArray;
    private Hashtable _documentCache;
    private XsltCompileContext _valueOfContext;
    private XsltCompileContext _matchesContext;
    internal XPathNavigator Current { get; }
    internal ExecResult ExecutionResult { get; internal set; }
    internal Stylesheet Stylesheet { get; }
    internal XmlResolver Resolver { get; }
    internal ArrayList SortArray { get; }
    internal Key[] KeyList { get; }
    internal RootAction RootAction { get; }
    internal XPathNavigator Document { get; }
    internal ArrayList NumberList { get; }
    internal IXsltDebugger Debugger { get; }
    internal HWStack ActionStack { get; }
    internal XsltOutput Output { get; }
    internal XmlNameTable NameTable { get; }
    internal bool CanContinue { get; }
    internal bool ExecutionDone { get; }
    private int System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor.StackDepth { get; }
    public Processor(XPathNavigator doc, XsltArgumentList args, XmlResolver resolver, Stylesheet stylesheet, List`1<TheQuery> queryStore, RootAction rootAction, IXsltDebugger debugger);
    internal XPathNavigator get_Current();
    internal ExecResult get_ExecutionResult();
    internal void set_ExecutionResult(ExecResult value);
    internal Stylesheet get_Stylesheet();
    internal XmlResolver get_Resolver();
    internal ArrayList get_SortArray();
    internal Key[] get_KeyList();
    internal XPathNavigator GetNavigator(Uri ruri);
    internal void AddSort(Sort sortinfo);
    internal void InitSortArray();
    internal object GetGlobalParameter(XmlQualifiedName qname);
    internal object GetExtensionObject(string nsUri);
    internal object GetScriptObject(string nsUri);
    internal RootAction get_RootAction();
    internal XPathNavigator get_Document();
    internal StringBuilder GetSharedStringBuilder();
    internal void ReleaseSharedStringBuilder();
    internal ArrayList get_NumberList();
    internal IXsltDebugger get_Debugger();
    internal HWStack get_ActionStack();
    internal XsltOutput get_Output();
    public ReaderOutput StartReader();
    public void Execute(Stream stream);
    public void Execute(TextWriter writer);
    public void Execute(XmlWriter writer);
    internal void Execute();
    internal ActionFrame PushNewFrame();
    internal void PushActionFrame(Action action, XPathNodeIterator nodeSet);
    internal void PushActionFrame(ActionFrame container);
    internal void PushActionFrame(ActionFrame container, XPathNodeIterator nodeSet);
    internal void PushTemplateLookup(XPathNodeIterator nodeSet, XmlQualifiedName mode, Stylesheet importsOf);
    internal string GetQueryExpression(int key);
    internal Query GetCompiledQuery(int key);
    internal Query GetValueQuery(int key);
    internal Query GetValueQuery(int key, XsltCompileContext context);
    private XsltCompileContext GetValueOfContext();
    [ConditionalAttribute("DEBUG")]
private void RecycleValueOfContext();
    private XsltCompileContext GetMatchesContext();
    [ConditionalAttribute("DEBUG")]
private void RecycleMatchesContext();
    internal string ValueOf(ActionFrame context, int key);
    internal string ValueOf(XPathNavigator n);
    private void ElementValueWithoutWS(XPathNavigator nav, StringBuilder builder);
    internal XPathNodeIterator StartQuery(XPathNodeIterator context, int key);
    internal object Evaluate(ActionFrame context, int key);
    internal object RunQuery(ActionFrame context, int key);
    internal string EvaluateString(ActionFrame context, int key);
    internal bool EvaluateBoolean(ActionFrame context, int key);
    internal bool Matches(XPathNavigator context, int key);
    internal XmlNameTable get_NameTable();
    internal bool get_CanContinue();
    internal bool get_ExecutionDone();
    internal void ResetOutput();
    internal bool BeginEvent(XPathNodeType nodeType, string prefix, string name, string nspace, bool empty);
    internal bool BeginEvent(XPathNodeType nodeType, string prefix, string name, string nspace, bool empty, object htmlProps, bool search);
    internal bool TextEvent(string text);
    internal bool TextEvent(string text, bool disableOutputEscaping);
    internal bool EndEvent(XPathNodeType nodeType);
    internal bool CopyBeginEvent(XPathNavigator node, bool emptyflag);
    internal bool CopyTextEvent(XPathNavigator node);
    internal bool CopyEndEvent(XPathNavigator node);
    internal static bool IsRoot(XPathNavigator navigator);
    internal void PushOutput(RecordOutput output);
    internal RecordOutput PopOutput();
    internal bool SetDefaultOutput(OutputMethod method);
    internal object GetVariableValue(VariableAction variable);
    internal void SetParameter(XmlQualifiedName name, object value);
    internal void ResetParams();
    internal object GetParameter(XmlQualifiedName name);
    internal void PushDebuggerStack();
    internal void PopDebuggerStack();
    internal void OnInstructionExecute();
    internal XmlQualifiedName GetPrevioseMode();
    internal void SetCurrentMode(XmlQualifiedName mode);
    private sealed virtual override int System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor.get_StackDepth();
    private sealed virtual override IStackFrame System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor.GetStackFrame(int depth);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Xsl.XsltOld.ReaderOutput : XmlReader {
    private Processor _processor;
    private XmlNameTable _nameTable;
    private RecordBuilder _builder;
    private BuilderInfo _mainNode;
    private ArrayList _attributeList;
    private int _attributeCount;
    private BuilderInfo _attributeValue;
    private OutputScopeManager _manager;
    private int _currentIndex;
    private BuilderInfo _currentInfo;
    private ReadState _state;
    private bool _haveRecord;
    private static BuilderInfo s_DefaultInfo;
    private XmlEncoder _encoder;
    private XmlCharType _xmlCharType;
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public char QuoteChar { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    internal ReaderOutput(Processor processor);
    private static ReaderOutput();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual char get_QuoteChar();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual string ReadString();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public sealed virtual OutputResult RecordDone(RecordBuilder record);
    public sealed virtual void TheEnd();
    private void SetMainNode();
    private void SetAttribute(int attrib);
    private BuilderInfo GetBuilderInfo(int attrib);
    private bool FindAttribute(string localName, string namespaceURI, Int32& attrIndex);
    private bool FindAttribute(string name, Int32& attrIndex);
    private void Reset();
    [ConditionalAttribute("DEBUG")]
private void CheckCurrentInfo();
}
internal class System.Xml.Xsl.XsltOld.RecordBuilder : object {
    private int _outputState;
    private RecordBuilder _next;
    private RecordOutput _output;
    private XmlNameTable _nameTable;
    private OutKeywords _atoms;
    private OutputScopeManager _scopeManager;
    private BuilderInfo _mainNode;
    private ArrayList _attributeList;
    private int _attributeCount;
    private ArrayList _namespaceList;
    private int _namespaceCount;
    private BuilderInfo _dummy;
    private BuilderInfo _currentInfo;
    private bool _popScope;
    private int _recordState;
    private int _recordDepth;
    private static int NoRecord;
    private static int SomeRecord;
    private static int HaveRecord;
    private static char s_Minus;
    private static string s_Space;
    private static string s_SpaceMinus;
    private static char s_Question;
    private static char s_Greater;
    private static string s_SpaceGreater;
    private static string PrefixFormat;
    internal int OutputState { get; internal set; }
    internal RecordBuilder Next { get; internal set; }
    internal RecordOutput Output { get; }
    internal BuilderInfo MainNode { get; }
    internal ArrayList AttributeList { get; }
    internal int AttributeCount { get; }
    internal OutputScopeManager Manager { get; }
    internal RecordBuilder(RecordOutput output, XmlNameTable nameTable);
    internal int get_OutputState();
    internal void set_OutputState(int value);
    internal RecordBuilder get_Next();
    internal void set_Next(RecordBuilder value);
    internal RecordOutput get_Output();
    internal BuilderInfo get_MainNode();
    internal ArrayList get_AttributeList();
    internal int get_AttributeCount();
    internal OutputScopeManager get_Manager();
    private void ValueAppend(string s, bool disableOutputEscaping);
    private bool CanOutput(int state);
    internal OutputResult BeginEvent(int state, XPathNodeType nodeType, string prefix, string name, string nspace, bool empty, object htmlProps, bool search);
    internal OutputResult TextEvent(int state, string text, bool disableOutputEscaping);
    internal OutputResult EndEvent(int state, XPathNodeType nodeType);
    internal void Reset();
    internal void TheEnd();
    private int FindAttribute(string name, string nspace, String& prefix);
    private void BeginElement(string prefix, string name, string nspace, bool empty);
    private void EndElement();
    private int NewAttribute();
    private void BeginAttribute(string prefix, string name, string nspace, object htmlAttrProps, bool search);
    private void BeginNamespace(string name, string nspace);
    private bool BeginProcessingInstruction(string prefix, string name, string nspace);
    private void BeginComment();
    private void AdjustDepth(int state);
    private void ResetRecord(int state);
    private void PopElementScope();
    private OutputResult CheckRecordBegin(int state);
    private OutputResult CheckRecordEnd(int state);
    private void SetEmptyFlag(int state);
    private void AnalyzeSpaceLang();
    private void FixupElement();
    private void FixupAttributes(int attributeCount);
    private void AppendNamespaces();
    private void AnalyzeComment();
    private void AnalyzeProcessingInstruction();
    private void FinalizeRecord();
    private int NewNamespace();
    private void DeclareNamespace(string nspace, string prefix);
    private string DeclareNewNamespace(string nspace);
    internal string GetPrefixForNamespace(string nspace);
    private static XmlSpace TranslateXmlSpace(string space);
}
internal interface System.Xml.Xsl.XsltOld.RecordOutput {
    public abstract virtual OutputResult RecordDone(RecordBuilder record);
    public abstract virtual void TheEnd();
}
internal class System.Xml.Xsl.XsltOld.RootAction : TemplateBaseAction {
    private static int QueryInitialized;
    private static int RootProcessed;
    private Hashtable _attributeSetTable;
    private Hashtable _decimalFormatTable;
    private List`1<Key> _keyList;
    private XsltOutput _output;
    public Stylesheet builtInSheet;
    internal XsltOutput Output { get; }
    internal List`1<Key> KeyList { get; }
    internal XsltOutput get_Output();
    internal virtual void Compile(Compiler compiler);
    internal void InsertKey(XmlQualifiedName name, int MatchKey, int UseKey);
    internal AttributeSetAction GetAttributeSet(XmlQualifiedName name);
    public void PorcessAttributeSets(Stylesheet rootStylesheet);
    private void MirgeAttributeSets(Stylesheet stylesheet);
    private void CheckAttributeSets_RecurceInList(Hashtable markTable, ICollection setQNames);
    private void CheckAttributeSets_RecurceInContainer(Hashtable markTable, ContainerAction container);
    internal void AddDecimalFormat(XmlQualifiedName name, DecimalFormat formatinfo);
    internal DecimalFormat GetDecimalFormat(XmlQualifiedName name);
    internal List`1<Key> get_KeyList();
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal enum System.Xml.Xsl.XsltOld.ScriptingLanguage : Enum {
    public int value__;
    public static ScriptingLanguage JScript;
    public static ScriptingLanguage VisualBasic;
    public static ScriptingLanguage CSharp;
}
internal abstract class System.Xml.Xsl.XsltOld.SequentialOutput : object {
    private static char s_Colon;
    private static char s_GreaterThan;
    private static char s_LessThan;
    private static char s_Space;
    private static char s_Quote;
    private static char s_Semicolon;
    private static char s_NewLine;
    private static char s_Return;
    private static char s_Ampersand;
    private static string s_LessThanQuestion;
    private static string s_QuestionGreaterThan;
    private static string s_LessThanSlash;
    private static string s_SlashGreaterThan;
    private static string s_EqualQuote;
    private static string s_DocType;
    private static string s_CommentBegin;
    private static string s_CommentEnd;
    private static string s_CDataBegin;
    private static string s_CDataEnd;
    private static string s_VersionAll;
    private static string s_Standalone;
    private static string s_EncodingStart;
    private static string s_Public;
    private static string s_System;
    private static string s_Html;
    private static string s_QuoteSpace;
    private static string s_CDataSplit;
    private static string s_EnLessThan;
    private static string s_EnGreaterThan;
    private static string s_EnAmpersand;
    private static string s_EnQuote;
    private static string s_EnNewLine;
    private static string s_EnReturn;
    private static string s_EndOfLine;
    private static Char[] s_TextValueFind;
    private static String[] s_TextValueReplace;
    private static Char[] s_XmlAttributeValueFind;
    private static String[] s_XmlAttributeValueReplace;
    private Processor _processor;
    protected Encoding encoding;
    private ArrayList _outputCache;
    private bool _firstLine;
    private bool _secondRoot;
    private XsltOutput _output;
    private bool _isHtmlOutput;
    private bool _isXmlOutput;
    private Hashtable _cdataElements;
    private bool _indentOutput;
    private bool _outputDoctype;
    private bool _outputXmlDecl;
    private bool _omitXmlDeclCalled;
    private Byte[] _byteBuffer;
    private Encoding _utf8Encoding;
    private XmlCharType _xmlCharType;
    internal SequentialOutput(Processor processor);
    private static SequentialOutput();
    private void CacheOuptutProps(XsltOutput output);
    public void OmitXmlDecl();
    private void WriteStartElement(RecordBuilder record);
    private void WriteTextNode(RecordBuilder record);
    private void WriteTextNode(BuilderInfo node);
    private void WriteCDataSection(string value);
    private void WriteDoctype(BuilderInfo mainNode);
    private void WriteXmlDeclaration();
    private void WriteProcessingInstruction(RecordBuilder record);
    private void WriteProcessingInstruction(BuilderInfo node);
    private void WriteEndElement(RecordBuilder record);
    public sealed virtual OutputResult RecordDone(RecordBuilder record);
    public sealed virtual void TheEnd();
    private bool DecideDefaultOutput(BuilderInfo node);
    private void CacheRecord(RecordBuilder record);
    private void OutputCachedRecords();
    private void OutputRecord(RecordBuilder record);
    private void OutputRecord(BuilderInfo node);
    private void WriteName(string prefix, string name);
    private void WriteXmlAttributeValue(string value);
    private void WriteHtmlAttributeValue(string value);
    private void WriteHtmlUri(string value);
    private void WriteWithReplace(string value, Char[] find, String[] replace);
    private void WriteCData(string value);
    private void WriteAttributes(ArrayList list, int count, HtmlElementProps htmlElementsProps);
    private void Indent(RecordBuilder record);
    private void Indent(int depth);
    internal abstract virtual void Write(char outputChar);
    internal abstract virtual void Write(string outputText);
    internal abstract virtual void Close();
}
internal class System.Xml.Xsl.XsltOld.Sort : object {
    internal int select;
    internal string lang;
    internal XmlDataType dataType;
    internal XmlSortOrder order;
    internal XmlCaseOrder caseOrder;
    public Sort(int sortkey, string xmllang, XmlDataType datatype, XmlSortOrder xmlorder, XmlCaseOrder xmlcaseorder);
}
internal class System.Xml.Xsl.XsltOld.SortAction : CompiledAction {
    private int _selectKey;
    private Avt _langAvt;
    private Avt _dataTypeAvt;
    private Avt _orderAvt;
    private Avt _caseOrderAvt;
    private string _lang;
    private XmlDataType _dataType;
    private XmlSortOrder _order;
    private XmlCaseOrder _caseOrder;
    private Sort _sort;
    private bool _forwardCompatibility;
    private InputScopeManager _manager;
    private string ParseLang(string value);
    private XmlDataType ParseDataType(string value, InputScopeManager manager);
    private XmlSortOrder ParseOrder(string value);
    private XmlCaseOrder ParseCaseOrder(string value);
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.StateMachine : object {
    private static int Init;
    private static int Elem;
    private static int NsN;
    private static int NsV;
    private static int Ns;
    private static int AttrN;
    private static int AttrV;
    private static int Attr;
    private static int InElm;
    private static int EndEm;
    private static int InCmt;
    private static int InPI;
    private static int StateMask;
    internal static int Error;
    private static int Ignor;
    private static int Assrt;
    private static int U;
    private static int D;
    internal static int DepthMask;
    internal static int DepthUp;
    internal static int DepthDown;
    private static int C;
    private static int H;
    private static int M;
    internal static int BeginChild;
    internal static int HadChild;
    internal static int EmptyTag;
    private static int B;
    private static int E;
    internal static int BeginRecord;
    internal static int EndRecord;
    private static int S;
    private static int P;
    internal static int PushScope;
    internal static int PopScope;
    private int _State;
    private static Int32[][] s_BeginTransitions;
    private static Int32[][] s_EndTransitions;
    internal int State { get; internal set; }
    private static StateMachine();
    internal int get_State();
    internal void set_State(int value);
    internal void Reset();
    internal static int StateOnly(int state);
    internal int BeginOutlook(XPathNodeType nodeType);
    internal int Begin(XPathNodeType nodeType);
    internal int EndOutlook(XPathNodeType nodeType);
    internal int End(XPathNodeType nodeType);
}
internal class System.Xml.Xsl.XsltOld.StringOutput : SequentialOutput {
    private StringBuilder _builder;
    private string _result;
    internal string Result { get; }
    internal StringOutput(Processor processor);
    internal string get_Result();
    internal virtual void Write(char outputChar);
    internal virtual void Write(string outputText);
    internal virtual void Close();
}
internal class System.Xml.Xsl.XsltOld.Stylesheet : object {
    private ArrayList _imports;
    private Hashtable _modeManagers;
    private Hashtable _templateNameTable;
    private Hashtable _attributeSetTable;
    private int _templateCount;
    private Hashtable _queryKeyTable;
    private ArrayList _whitespaceList;
    private bool _whitespace;
    private Hashtable _scriptObjectTypes;
    private TemplateManager _templates;
    internal bool Whitespace { get; }
    internal ArrayList Imports { get; }
    internal Hashtable AttributeSetTable { get; }
    internal Hashtable ScriptObjectTypes { get; }
    internal bool get_Whitespace();
    internal ArrayList get_Imports();
    internal Hashtable get_AttributeSetTable();
    internal void AddSpace(Compiler compiler, string query, double Priority, bool PreserveSpace);
    internal void SortWhiteSpace();
    internal bool PreserveWhiteSpace(Processor proc, XPathNavigator node);
    internal void AddAttributeSet(AttributeSetAction attributeSet);
    internal void AddTemplate(TemplateAction template);
    internal void ProcessTemplates();
    internal void ReplaceNamespaceAlias(Compiler compiler);
    internal TemplateAction FindTemplate(Processor processor, XPathNavigator navigator, XmlQualifiedName mode);
    internal TemplateAction FindTemplateImports(Processor processor, XPathNavigator navigator, XmlQualifiedName mode);
    internal TemplateAction FindTemplate(Processor processor, XPathNavigator navigator);
    internal TemplateAction FindTemplate(XmlQualifiedName name);
    internal TemplateAction FindTemplateImports(Processor processor, XPathNavigator navigator);
    internal Hashtable get_ScriptObjectTypes();
}
internal class System.Xml.Xsl.XsltOld.TemplateAction : TemplateBaseAction {
    private int _matchKey;
    private XmlQualifiedName _name;
    private double _priority;
    private XmlQualifiedName _mode;
    private int _templateId;
    private bool _replaceNSAliasesDone;
    internal int MatchKey { get; }
    internal XmlQualifiedName Name { get; }
    internal double Priority { get; }
    internal XmlQualifiedName Mode { get; }
    internal int TemplateId { get; internal set; }
    internal int get_MatchKey();
    internal XmlQualifiedName get_Name();
    internal double get_Priority();
    internal XmlQualifiedName get_Mode();
    internal int get_TemplateId();
    internal void set_TemplateId(int value);
    internal virtual void Compile(Compiler compiler);
    internal virtual void CompileSingle(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    private void AnalyzePriority(Compiler compiler);
    protected void CompileParameters(Compiler compiler);
    private TemplateAction CloneWithoutName();
    internal virtual void ReplaceNamespaceAlias(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal abstract class System.Xml.Xsl.XsltOld.TemplateBaseAction : ContainerAction {
    protected int variableCount;
    private int _variableFreeSlot;
    public int AllocateVariableSlot();
    public void ReleaseVariableSlots(int n);
}
internal class System.Xml.Xsl.XsltOld.TemplateLookupAction : Action {
    protected XmlQualifiedName mode;
    protected Stylesheet importsOf;
    internal void Initialize(XmlQualifiedName mode, Stylesheet importsOf);
    internal virtual void Execute(Processor processor, ActionFrame frame);
    internal Action BuiltInTemplate(XPathNavigator node);
}
internal class System.Xml.Xsl.XsltOld.TemplateLookupActionDbg : TemplateLookupAction {
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.TemplateManager : object {
    private XmlQualifiedName _mode;
    internal ArrayList templates;
    private Stylesheet _stylesheet;
    private static TemplateComparer s_TemplateComparer;
    internal XmlQualifiedName Mode { get; }
    internal TemplateManager(Stylesheet stylesheet, XmlQualifiedName mode);
    private static TemplateManager();
    internal XmlQualifiedName get_Mode();
    internal void AddTemplate(TemplateAction template);
    internal void ProcessTemplates();
    internal TemplateAction FindTemplate(Processor processor, XPathNavigator navigator);
}
internal class System.Xml.Xsl.XsltOld.TextAction : CompiledAction {
    private bool _disableOutputEscaping;
    private string _text;
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    private void CompileContent(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.TextEvent : Event {
    private string _text;
    public TextEvent(string text);
    public TextEvent(Compiler compiler);
    public virtual bool Output(Processor processor, ActionFrame frame);
    public virtual string Evaluate(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.TextOnlyOutput : object {
    private Processor _processor;
    private TextWriter _writer;
    internal XsltOutput Output { get; }
    public TextWriter Writer { get; }
    internal TextOnlyOutput(Processor processor, Stream stream);
    internal TextOnlyOutput(Processor processor, TextWriter writer);
    internal XsltOutput get_Output();
    public TextWriter get_Writer();
    public sealed virtual OutputResult RecordDone(RecordBuilder record);
    public sealed virtual void TheEnd();
}
internal class System.Xml.Xsl.XsltOld.TextOutput : SequentialOutput {
    private TextWriter _writer;
    internal TextOutput(Processor processor, Stream stream);
    internal TextOutput(Processor processor, TextWriter writer);
    internal virtual void Write(char outputChar);
    internal virtual void Write(string outputText);
    internal virtual void Close();
}
internal class System.Xml.Xsl.XsltOld.TheQuery : object {
    internal InputScopeManager _ScopeManager;
    private CompiledXpathExpr _CompiledQuery;
    internal CompiledXpathExpr CompiledQuery { get; }
    internal TheQuery(CompiledXpathExpr compiledQuery, InputScopeManager manager);
    internal CompiledXpathExpr get_CompiledQuery();
}
internal class System.Xml.Xsl.XsltOld.UseAttributeSetsAction : CompiledAction {
    private XmlQualifiedName[] _useAttributeSets;
    private string _useString;
    private static int ProcessingSets;
    internal XmlQualifiedName[] UsedSets { get; }
    internal XmlQualifiedName[] get_UsedSets();
    internal virtual void Compile(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.ValueOfAction : CompiledAction {
    private static int ResultStored;
    private int _selectKey;
    private bool _disableOutputEscaping;
    private static Action s_BuiltInRule;
    private static ValueOfAction();
    internal static Action BuiltInRule();
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.VariableAction : ContainerAction {
    public static object BeingComputedMark;
    private static int ValueCalculated;
    protected XmlQualifiedName name;
    protected string nameStr;
    protected string baseUri;
    protected int selectKey;
    protected int stylesheetid;
    protected VariableType varType;
    private int _varKey;
    internal int Stylesheetid { get; }
    internal XmlQualifiedName Name { get; }
    internal string NameStr { get; }
    internal VariableType VarType { get; }
    internal int VarKey { get; }
    internal bool IsGlobal { get; }
    private XPathResultType System.Xml.Xsl.IXsltContextVariable.VariableType { get; }
    private bool System.Xml.Xsl.IXsltContextVariable.IsLocal { get; }
    private bool System.Xml.Xsl.IXsltContextVariable.IsParam { get; }
    internal VariableAction(VariableType type);
    private static VariableAction();
    internal int get_Stylesheetid();
    internal XmlQualifiedName get_Name();
    internal string get_NameStr();
    internal VariableType get_VarType();
    internal int get_VarKey();
    internal bool get_IsGlobal();
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
    private sealed virtual override XPathResultType System.Xml.Xsl.IXsltContextVariable.get_VariableType();
    private sealed virtual override object System.Xml.Xsl.IXsltContextVariable.Evaluate(XsltContext xsltContext);
    private sealed virtual override bool System.Xml.Xsl.IXsltContextVariable.get_IsLocal();
    private sealed virtual override bool System.Xml.Xsl.IXsltContextVariable.get_IsParam();
}
internal enum System.Xml.Xsl.XsltOld.VariableType : Enum {
    public int value__;
    public static VariableType GlobalVariable;
    public static VariableType GlobalParameter;
    public static VariableType LocalVariable;
    public static VariableType LocalParameter;
    public static VariableType WithParameter;
}
internal class System.Xml.Xsl.XsltOld.WithParamAction : VariableAction {
    internal virtual void Compile(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
}
internal class System.Xml.Xsl.XsltOld.WriterOutput : object {
    private XmlWriter _writer;
    private Processor _processor;
    internal WriterOutput(Processor processor, XmlWriter writer);
    public sealed virtual OutputResult RecordDone(RecordBuilder record);
    public sealed virtual void TheEnd();
    private void WriteAttributes(ArrayList list, int count);
}
internal class System.Xml.Xsl.XsltOld.XsltCompileContext : XsltContext {
    private InputScopeManager _manager;
    private Processor _processor;
    private static Hashtable s_FunctionTable;
    private static IXsltContextFunction s_FuncNodeSet;
    private static string f_NodeSet;
    private static BindingFlags bindingFlags;
    public string DefaultNamespace { get; }
    public bool Whitespace { get; }
    internal XsltCompileContext(InputScopeManager manager, Processor processor);
    private static XsltCompileContext();
    internal void Recycle();
    internal void Reinitialize(InputScopeManager manager, Processor processor);
    public virtual int CompareDocument(string baseUri, string nextbaseUri);
    public virtual string get_DefaultNamespace();
    public virtual string LookupNamespace(string prefix);
    public virtual IXsltContextVariable ResolveVariable(string prefix, string name);
    internal object EvaluateVariable(VariableAction variable);
    public virtual bool get_Whitespace();
    public virtual bool PreserveWhitespace(XPathNavigator node);
    private MethodInfo FindBestMethod(MethodInfo[] methods, bool ignoreCase, bool publicOnly, string name, XPathResultType[] argTypes);
    private IXsltContextFunction GetExtentionMethod(string ns, string name, XPathResultType[] argTypes, Object& extension);
    public virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] argTypes);
    private Uri ComposeUri(string thisUri, string baseUri);
    private XPathNodeIterator Document(object arg0, string baseUri);
    private Hashtable BuildKeyTable(Key key, XPathNavigator root);
    private static void AddKeyValue(Hashtable keyTable, string key, XPathNavigator value, bool checkDuplicates);
    private static void EvaluateKey(XPathNavigator node, Query matchExpr, string matchStr, Query useExpr, Hashtable keyTable);
    private DecimalFormat ResolveFormatName(string formatName);
    private bool ElementAvailable(string qname);
    private bool FunctionAvailable(string qname);
    private XPathNodeIterator Current();
    private string SystemProperty(string qname);
    public static XPathResultType GetXPathType(Type type);
    private static Hashtable CreateFunctionTable();
}
internal class System.Xml.Xsl.XsltOld.XsltOutput : CompiledAction {
    private OutputMethod _method;
    private int _methodSId;
    private Encoding _encoding;
    private int _encodingSId;
    private string _version;
    private int _versionSId;
    private bool _omitXmlDecl;
    private int _omitXmlDeclSId;
    private bool _standalone;
    private int _standaloneSId;
    private string _doctypePublic;
    private int _doctypePublicSId;
    private string _doctypeSystem;
    private int _doctypeSystemSId;
    private bool _indent;
    private int _indentSId;
    private string _mediaType;
    private int _mediaTypeSId;
    private Hashtable _cdataElements;
    internal OutputMethod Method { get; }
    internal bool OmitXmlDeclaration { get; }
    internal bool HasStandalone { get; }
    internal bool Standalone { get; }
    internal string DoctypePublic { get; }
    internal string DoctypeSystem { get; }
    internal Hashtable CDataElements { get; }
    internal bool Indent { get; }
    internal Encoding Encoding { get; }
    internal string MediaType { get; }
    internal OutputMethod get_Method();
    internal bool get_OmitXmlDeclaration();
    internal bool get_HasStandalone();
    internal bool get_Standalone();
    internal string get_DoctypePublic();
    internal string get_DoctypeSystem();
    internal Hashtable get_CDataElements();
    internal bool get_Indent();
    internal Encoding get_Encoding();
    internal string get_MediaType();
    internal XsltOutput CreateDerivedOutput(OutputMethod method);
    internal virtual void Compile(Compiler compiler);
    internal virtual bool CompileAttribute(Compiler compiler);
    internal virtual void Execute(Processor processor, ActionFrame frame);
    private static OutputMethod ParseOutputMethod(string value, Compiler compiler);
}
public class System.Xml.Xsl.XslTransform : object {
    private XmlResolver _documentResolver;
    private bool _isDocumentResolverSet;
    private Stylesheet _CompiledStylesheet;
    private List`1<TheQuery> _QueryStore;
    private RootAction _RootAction;
    private IXsltDebugger _debugger;
    private XmlResolver _DocumentResolver { get; }
    unknown XmlResolver XmlResolver {public set; }
    internal IXsltDebugger Debugger { get; }
    private XmlResolver get__DocumentResolver();
    public void set_XmlResolver(XmlResolver value);
    public void Load(XmlReader stylesheet);
    public void Load(XmlReader stylesheet, XmlResolver resolver);
    public void Load(IXPathNavigable stylesheet);
    public void Load(IXPathNavigable stylesheet, XmlResolver resolver);
    public void Load(XPathNavigator stylesheet);
    public void Load(XPathNavigator stylesheet, XmlResolver resolver);
    public void Load(string url);
    public void Load(string url, XmlResolver resolver);
    private void CheckCommand();
    public XmlReader Transform(XPathNavigator input, XsltArgumentList args, XmlResolver resolver);
    public XmlReader Transform(XPathNavigator input, XsltArgumentList args);
    public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output);
    public void Transform(XPathNavigator input, XsltArgumentList args, Stream output, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, Stream output);
    public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output);
    public XmlReader Transform(IXPathNavigable input, XsltArgumentList args, XmlResolver resolver);
    public XmlReader Transform(IXPathNavigable input, XsltArgumentList args);
    public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output);
    public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output);
    public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output);
    public void Transform(string inputfile, string outputfile, XmlResolver resolver);
    public void Transform(string inputfile, string outputfile);
    private void Compile(XPathNavigator stylesheet, XmlResolver resolver);
    internal IXsltDebugger get_Debugger();
    private static XmlResolver CreateDefaultResolver();
}
internal class System.Xml.Xsl.XslTransformException : XsltException {
    public XslTransformException(Exception inner, string res, String[] args);
    public XslTransformException(string message);
    internal XslTransformException(string res, String[] args);
    internal static string CreateMessage(string res, String[] args);
    internal virtual string FormatDetailedMessage();
    public virtual string ToString();
}
public class System.Xml.Xsl.XsltSettings : object {
    private bool _enableDocumentFunction;
    private bool _enableScript;
    private bool _checkOnly;
    private bool _includeDebugInformation;
    private int _warningLevel;
    private bool _treatWarningsAsErrors;
    public static XsltSettings Default { get; }
    public static XsltSettings TrustedXslt { get; }
    public bool EnableDocumentFunction { get; public set; }
    public bool EnableScript { get; public set; }
    internal bool CheckOnly { get; internal set; }
    internal bool IncludeDebugInformation { get; internal set; }
    internal int WarningLevel { get; internal set; }
    internal bool TreatWarningsAsErrors { get; internal set; }
    public XsltSettings(bool enableDocumentFunction, bool enableScript);
    public static XsltSettings get_Default();
    public static XsltSettings get_TrustedXslt();
    public bool get_EnableDocumentFunction();
    public void set_EnableDocumentFunction(bool value);
    public bool get_EnableScript();
    public void set_EnableScript(bool value);
    internal bool get_CheckOnly();
    internal void set_CheckOnly(bool value);
    internal bool get_IncludeDebugInformation();
    internal void set_IncludeDebugInformation(bool value);
    internal int get_WarningLevel();
    internal void set_WarningLevel(int value);
    internal bool get_TreatWarningsAsErrors();
    internal void set_TreatWarningsAsErrors(bool value);
}
