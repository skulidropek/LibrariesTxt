[ExtensionAttribute]
public static class System.Diagnostics.StackFrameExtensions : object {
    [ExtensionAttribute]
public static bool HasNativeImage(StackFrame stackFrame);
    [ExtensionAttribute]
public static bool HasMethod(StackFrame stackFrame);
    [ExtensionAttribute]
public static bool HasILOffset(StackFrame stackFrame);
    [ExtensionAttribute]
public static bool HasSource(StackFrame stackFrame);
    [ExtensionAttribute]
public static IntPtr GetNativeIP(StackFrame stackFrame);
    [ExtensionAttribute]
public static IntPtr GetNativeImageBase(StackFrame stackFrame);
}
internal class System.Diagnostics.StackTraceSymbols : object {
    private ConcurrentDictionary`2<IntPtr, MetadataReaderProvider> _metadataCache;
    private sealed virtual override void System.IDisposable.Dispose();
    internal void GetSourceLineInfo(string assemblyPath, IntPtr loadedPeAddress, int loadedPeSize, IntPtr inMemoryPdbAddress, int inMemoryPdbSize, int methodToken, int ilOffset, String& sourceFile, Int32& sourceLine, Int32& sourceColumn);
    private MetadataReader TryGetReader(string assemblyPath, IntPtr loadedPeAddress, int loadedPeSize, IntPtr inMemoryPdbAddress, int inMemoryPdbSize);
    private static MetadataReaderProvider TryOpenReaderForInMemoryPdb(IntPtr inMemoryPdbAddress, int inMemoryPdbSize);
    private static PEReader TryGetPEReader(string assemblyPath, IntPtr loadedPeAddress, int loadedPeSize);
    private static MetadataReaderProvider TryOpenReaderFromAssemblyFile(string assemblyPath, IntPtr loadedPeAddress, int loadedPeSize);
    private static Stream TryOpenFile(string path);
}
public interface System.Diagnostics.SymbolStore.ISymbolBinder {
    [ObsoleteAttribute("The recommended alternative is ISymbolBinder1.GetReader. ISymbolBinder1.GetReader takes the importer interface pointer as an IntPtr instead of an Int32, and thus works on both 32-bit and 64-bit architectures. http://go.microsoft.com/fwlink/?linkid=14202=14202")]
public abstract virtual ISymbolReader GetReader(int importer, string filename, string searchPath);
}
public interface System.Diagnostics.SymbolStore.ISymbolBinder1 {
    public abstract virtual ISymbolReader GetReader(IntPtr importer, string filename, string searchPath);
}
public interface System.Diagnostics.SymbolStore.ISymbolDocument {
    public string URL { get; }
    public Guid DocumentType { get; }
    public Guid Language { get; }
    public Guid LanguageVendor { get; }
    public Guid CheckSumAlgorithmId { get; }
    public bool HasEmbeddedSource { get; }
    public int SourceLength { get; }
    public abstract virtual string get_URL();
    public abstract virtual Guid get_DocumentType();
    public abstract virtual Guid get_Language();
    public abstract virtual Guid get_LanguageVendor();
    public abstract virtual Guid get_CheckSumAlgorithmId();
    public abstract virtual Byte[] GetCheckSum();
    public abstract virtual int FindClosestLine(int line);
    public abstract virtual bool get_HasEmbeddedSource();
    public abstract virtual int get_SourceLength();
    public abstract virtual Byte[] GetSourceRange(int startLine, int startColumn, int endLine, int endColumn);
}
public interface System.Diagnostics.SymbolStore.ISymbolMethod {
    public SymbolToken Token { get; }
    public int SequencePointCount { get; }
    public ISymbolScope RootScope { get; }
    public abstract virtual SymbolToken get_Token();
    public abstract virtual int get_SequencePointCount();
    public abstract virtual void GetSequencePoints(Int32[] offsets, ISymbolDocument[] documents, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual ISymbolScope get_RootScope();
    public abstract virtual ISymbolScope GetScope(int offset);
    public abstract virtual int GetOffset(ISymbolDocument document, int line, int column);
    public abstract virtual Int32[] GetRanges(ISymbolDocument document, int line, int column);
    public abstract virtual ISymbolVariable[] GetParameters();
    public abstract virtual ISymbolNamespace GetNamespace();
    public abstract virtual bool GetSourceStartEnd(ISymbolDocument[] docs, Int32[] lines, Int32[] columns);
}
public interface System.Diagnostics.SymbolStore.ISymbolNamespace {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual ISymbolNamespace[] GetNamespaces();
    public abstract virtual ISymbolVariable[] GetVariables();
}
public interface System.Diagnostics.SymbolStore.ISymbolReader {
    public SymbolToken UserEntryPoint { get; }
    public abstract virtual ISymbolDocument GetDocument(string url, Guid language, Guid languageVendor, Guid documentType);
    public abstract virtual ISymbolDocument[] GetDocuments();
    public abstract virtual SymbolToken get_UserEntryPoint();
    public abstract virtual ISymbolMethod GetMethod(SymbolToken method);
    public abstract virtual ISymbolMethod GetMethod(SymbolToken method, int version);
    public abstract virtual ISymbolVariable[] GetVariables(SymbolToken parent);
    public abstract virtual ISymbolVariable[] GetGlobalVariables();
    public abstract virtual ISymbolMethod GetMethodFromDocumentPosition(ISymbolDocument document, int line, int column);
    public abstract virtual Byte[] GetSymAttribute(SymbolToken parent, string name);
    public abstract virtual ISymbolNamespace[] GetNamespaces();
}
public interface System.Diagnostics.SymbolStore.ISymbolScope {
    public ISymbolMethod Method { get; }
    public ISymbolScope Parent { get; }
    public int StartOffset { get; }
    public int EndOffset { get; }
    public abstract virtual ISymbolMethod get_Method();
    public abstract virtual ISymbolScope get_Parent();
    public abstract virtual ISymbolScope[] GetChildren();
    public abstract virtual int get_StartOffset();
    public abstract virtual int get_EndOffset();
    public abstract virtual ISymbolVariable[] GetLocals();
    public abstract virtual ISymbolNamespace[] GetNamespaces();
}
public interface System.Diagnostics.SymbolStore.ISymbolVariable {
    public string Name { get; }
    public object Attributes { get; }
    public SymAddressKind AddressKind { get; }
    public int AddressField1 { get; }
    public int AddressField2 { get; }
    public int AddressField3 { get; }
    public int StartOffset { get; }
    public int EndOffset { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Attributes();
    public abstract virtual Byte[] GetSignature();
    public abstract virtual SymAddressKind get_AddressKind();
    public abstract virtual int get_AddressField1();
    public abstract virtual int get_AddressField2();
    public abstract virtual int get_AddressField3();
    public abstract virtual int get_StartOffset();
    public abstract virtual int get_EndOffset();
}
public interface System.Diagnostics.SymbolStore.ISymbolWriter {
    public abstract virtual void Initialize(IntPtr emitter, string filename, bool fFullBuild);
    public abstract virtual ISymbolDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType);
    public abstract virtual void SetUserEntryPoint(SymbolToken entryMethod);
    public abstract virtual void OpenMethod(SymbolToken method);
    public abstract virtual void CloseMethod();
    public abstract virtual void DefineSequencePoints(ISymbolDocumentWriter document, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual int OpenScope(int startOffset);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void SetScopeRange(int scopeID, int startOffset, int endOffset);
    public abstract virtual void DefineLocalVariable(string name, FieldAttributes attributes, Byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineParameter(string name, ParameterAttributes attributes, int sequence, SymAddressKind addrKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineField(SymbolToken parent, string name, FieldAttributes attributes, Byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineGlobalVariable(string name, FieldAttributes attributes, Byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
    public abstract virtual void Close();
    public abstract virtual void SetSymAttribute(SymbolToken parent, string name, Byte[] data);
    public abstract virtual void OpenNamespace(string name);
    public abstract virtual void CloseNamespace();
    public abstract virtual void UsingNamespace(string fullName);
    public abstract virtual void SetMethodSourceRange(ISymbolDocumentWriter startDoc, int startLine, int startColumn, ISymbolDocumentWriter endDoc, int endLine, int endColumn);
    public abstract virtual void SetUnderlyingWriter(IntPtr underlyingWriter);
}
public enum System.Diagnostics.SymbolStore.SymAddressKind : Enum {
    public int value__;
    public static SymAddressKind ILOffset;
    public static SymAddressKind NativeRVA;
    public static SymAddressKind NativeRegister;
    public static SymAddressKind NativeRegisterRelative;
    public static SymAddressKind NativeOffset;
    public static SymAddressKind NativeRegisterRegister;
    public static SymAddressKind NativeRegisterStack;
    public static SymAddressKind NativeStackRegister;
    public static SymAddressKind BitField;
    public static SymAddressKind NativeSectionOffset;
}
[IsReadOnlyAttribute]
public class System.Diagnostics.SymbolStore.SymbolToken : ValueType {
    private int _token;
    public SymbolToken(int val);
    public int GetToken();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(SymbolToken obj);
    public static bool op_Equality(SymbolToken a, SymbolToken b);
    public static bool op_Inequality(SymbolToken a, SymbolToken b);
}
public class System.Diagnostics.SymbolStore.SymDocumentType : object {
    public static Guid Text;
    private static SymDocumentType();
}
public class System.Diagnostics.SymbolStore.SymLanguageType : object {
    public static Guid C;
    public static Guid CPlusPlus;
    public static Guid CSharp;
    public static Guid Basic;
    public static Guid Java;
    public static Guid Cobol;
    public static Guid Pascal;
    public static Guid ILAssembly;
    public static Guid JScript;
    public static Guid SMC;
    public static Guid MCPlusPlus;
    private static SymLanguageType();
}
public class System.Diagnostics.SymbolStore.SymLanguageVendor : object {
    public static Guid Microsoft;
    private static SymLanguageVendor();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
