internal static class FxResources.System.IO.MemoryMappedFiles.SR : object {
}
internal static class Interop : object {
    public static void CheckForAvailableVirtualMemory(ulong nativeSize);
    public static SafeMemoryMappedFileHandle CreateFileMapping(SafeFileHandle hFile, SECURITY_ATTRIBUTES& securityAttributes, int pageProtection, long maximumSize, string name);
    public static SafeMemoryMappedFileHandle CreateFileMapping(IntPtr hFile, SECURITY_ATTRIBUTES& securityAttributes, int pageProtection, long maximumSize, string name);
    public static SafeMemoryMappedViewHandle MapViewOfFile(SafeMemoryMappedFileHandle hFileMappingObject, int desiredAccess, long fileOffset, UIntPtr numberOfBytesToMap);
    public static SafeMemoryMappedFileHandle OpenFileMapping(int desiredAccess, bool inheritHandle, string name);
    public static IntPtr VirtualAlloc(SafeHandle baseAddress, UIntPtr size, int allocationType, int protection);
}
public class Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle : SafeBuffer {
    protected virtual bool ReleaseHandle();
}
public class System.IO.MemoryMappedFiles.MemoryMappedFile : object {
    private SafeMemoryMappedFileHandle _handle;
    private bool _leaveOpen;
    private FileStream _fileStream;
    internal static int DefaultSize;
    private static IntPtr INVALID_HANDLE_VALUE;
    public SafeMemoryMappedFileHandle SafeMemoryMappedFileHandle { get; }
    private MemoryMappedFile(SafeMemoryMappedFileHandle handle);
    private MemoryMappedFile(SafeMemoryMappedFileHandle handle, FileStream fileStream, bool leaveOpen);
    private static MemoryMappedFile();
    public static MemoryMappedFile OpenExisting(string mapName);
    public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights);
    public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights, HandleInheritability inheritability);
    public static MemoryMappedFile CreateFromFile(string path);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity, MemoryMappedFileAccess access);
    public static MemoryMappedFile CreateFromFile(FileStream fileStream, string mapName, long capacity, MemoryMappedFileAccess access, HandleInheritability inheritability, bool leaveOpen);
    public static MemoryMappedFile CreateNew(string mapName, long capacity);
    public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access);
    public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability);
    public static MemoryMappedFile CreateOrOpen(string mapName, long capacity);
    public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access);
    public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability);
    public MemoryMappedViewStream CreateViewStream();
    public MemoryMappedViewStream CreateViewStream(long offset, long size);
    public MemoryMappedViewStream CreateViewStream(long offset, long size, MemoryMappedFileAccess access);
    public MemoryMappedViewAccessor CreateViewAccessor();
    public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size);
    public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size, MemoryMappedFileAccess access);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public SafeMemoryMappedFileHandle get_SafeMemoryMappedFileHandle();
    internal static FileAccess GetFileAccess(MemoryMappedFileAccess access);
    private static void CleanupFile(FileStream fileStream, bool existed, string path);
    private static SafeMemoryMappedFileHandle CreateCore(FileStream fileStream, string mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, MemoryMappedFileOptions options, long capacity);
    private static SafeMemoryMappedFileHandle OpenCore(string mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, bool createOrOpen);
    private static SafeMemoryMappedFileHandle OpenCore(string mapName, HandleInheritability inheritability, MemoryMappedFileRights rights, bool createOrOpen);
    private static SafeMemoryMappedFileHandle CreateOrOpenCore(string mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, MemoryMappedFileOptions options, long capacity);
    private static int GetFileMapAccess(MemoryMappedFileRights rights);
    internal static int GetFileMapAccess(MemoryMappedFileAccess access);
    internal static int GetPageAccess(MemoryMappedFileAccess access);
    private static SafeMemoryMappedFileHandle OpenCore(string mapName, HandleInheritability inheritability, int desiredAccessRights, bool createOrOpen);
    private static SECURITY_ATTRIBUTES GetSecAttrs(HandleInheritability inheritability);
}
public enum System.IO.MemoryMappedFiles.MemoryMappedFileAccess : Enum {
    public int value__;
    public static MemoryMappedFileAccess ReadWrite;
    public static MemoryMappedFileAccess Read;
    public static MemoryMappedFileAccess Write;
    public static MemoryMappedFileAccess CopyOnWrite;
    public static MemoryMappedFileAccess ReadExecute;
    public static MemoryMappedFileAccess ReadWriteExecute;
}
[FlagsAttribute]
public enum System.IO.MemoryMappedFiles.MemoryMappedFileOptions : Enum {
    public int value__;
    public static MemoryMappedFileOptions None;
    public static MemoryMappedFileOptions DelayAllocatePages;
}
[FlagsAttribute]
public enum System.IO.MemoryMappedFiles.MemoryMappedFileRights : Enum {
    public int value__;
    public static MemoryMappedFileRights CopyOnWrite;
    public static MemoryMappedFileRights Write;
    public static MemoryMappedFileRights Read;
    public static MemoryMappedFileRights Execute;
    public static MemoryMappedFileRights Delete;
    public static MemoryMappedFileRights ReadPermissions;
    public static MemoryMappedFileRights ChangePermissions;
    public static MemoryMappedFileRights TakeOwnership;
    public static MemoryMappedFileRights ReadWrite;
    public static MemoryMappedFileRights ReadExecute;
    public static MemoryMappedFileRights ReadWriteExecute;
    public static MemoryMappedFileRights FullControl;
    public static MemoryMappedFileRights AccessSystemSecurity;
}
internal class System.IO.MemoryMappedFiles.MemoryMappedView : object {
    private SafeMemoryMappedViewHandle _viewHandle;
    private long _pointerOffset;
    private long _size;
    private MemoryMappedFileAccess _access;
    private static int MaxFlushWaits;
    private static int MaxFlushRetriesPerWait;
    public SafeMemoryMappedViewHandle ViewHandle { get; }
    public long PointerOffset { get; }
    public long Size { get; }
    public MemoryMappedFileAccess Access { get; }
    public bool IsClosed { get; }
    private MemoryMappedView(SafeMemoryMappedViewHandle viewHandle, long pointerOffset, long size, MemoryMappedFileAccess access);
    public SafeMemoryMappedViewHandle get_ViewHandle();
    public long get_PointerOffset();
    public long get_Size();
    public MemoryMappedFileAccess get_Access();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public bool get_IsClosed();
    private static void ValidateSizeAndOffset(long size, long offset, long allocationGranularity, UInt64& newSize, Int64& extraMemNeeded, Int64& newOffset);
    public static MemoryMappedView CreateView(SafeMemoryMappedFileHandle memMappedFileHandle, MemoryMappedFileAccess access, long offset, long size);
    public void Flush(UIntPtr capacity);
    private static int GetSystemPageAllocationGranularity();
}
public class System.IO.MemoryMappedFiles.MemoryMappedViewAccessor : UnmanagedMemoryAccessor {
    private MemoryMappedView _view;
    public SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get; }
    public long PointerOffset { get; }
    internal MemoryMappedViewAccessor(MemoryMappedView view);
    public SafeMemoryMappedViewHandle get_SafeMemoryMappedViewHandle();
    public long get_PointerOffset();
    protected virtual void Dispose(bool disposing);
    public void Flush();
}
public class System.IO.MemoryMappedFiles.MemoryMappedViewStream : UnmanagedMemoryStream {
    private MemoryMappedView _view;
    public SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get; }
    public long PointerOffset { get; }
    internal MemoryMappedViewStream(MemoryMappedView view);
    public SafeMemoryMappedViewHandle get_SafeMemoryMappedViewHandle();
    public virtual void SetLength(long value);
    public long get_PointerOffset();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
}
internal static class System.IO.Win32Marshal : object {
    internal static Exception GetExceptionForLastWin32Error(string path);
    internal static Exception GetExceptionForWin32Error(int errorCode, string path);
    internal static int MakeHRFromErrorCode(int errorCode);
    internal static int TryMakeWin32ErrorCodeFromHR(int hr);
    internal static string GetMessage(int errorCode);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathTooLong { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string Argument_MapNameEmptyString { get; }
    internal static string Argument_EmptyFile { get; }
    internal static string Argument_NewMMFWriteAccessNotAllowed { get; }
    internal static string Argument_ReadAccessWithLargeCapacity { get; }
    internal static string Argument_NewMMFAppendModeNotAllowed { get; }
    internal static string Argument_NewMMFTruncateModeNotAllowed { get; }
    internal static string ArgumentNull_MapName { get; }
    internal static string ArgumentNull_FileStream { get; }
    internal static string ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string ArgumentOutOfRange_NeedPositiveNumber { get; }
    internal static string ArgumentOutOfRange_PositiveOrDefaultCapacityRequired { get; }
    internal static string ArgumentOutOfRange_PositiveOrDefaultSizeRequired { get; }
    internal static string ArgumentOutOfRange_CapacityGEFileSizeRequired { get; }
    internal static string IO_NotEnoughMemory { get; }
    internal static string InvalidOperation_CantCreateFileMapping { get; }
    internal static string NotSupported_MMViewStreamsFixedLength { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string ObjectDisposed_ViewAccessorClosed { get; }
    internal static string ObjectDisposed_StreamIsClosed { get; }
    internal static string PlatformNotSupported_NamedMaps { get; }
    internal static string IO_PathTooLong_Path { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathTooLong();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_Argument_MapNameEmptyString();
    internal static string get_Argument_EmptyFile();
    internal static string get_Argument_NewMMFWriteAccessNotAllowed();
    internal static string get_Argument_ReadAccessWithLargeCapacity();
    internal static string get_Argument_NewMMFAppendModeNotAllowed();
    internal static string get_Argument_NewMMFTruncateModeNotAllowed();
    internal static string get_ArgumentNull_MapName();
    internal static string get_ArgumentNull_FileStream();
    internal static string get_ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_ArgumentOutOfRange_NeedPositiveNumber();
    internal static string get_ArgumentOutOfRange_PositiveOrDefaultCapacityRequired();
    internal static string get_ArgumentOutOfRange_PositiveOrDefaultSizeRequired();
    internal static string get_ArgumentOutOfRange_CapacityGEFileSizeRequired();
    internal static string get_IO_NotEnoughMemory();
    internal static string get_InvalidOperation_CantCreateFileMapping();
    internal static string get_NotSupported_MMViewStreamsFixedLength();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_ObjectDisposed_ViewAccessorClosed();
    internal static string get_ObjectDisposed_StreamIsClosed();
    internal static string get_PlatformNotSupported_NamedMaps();
    internal static string get_IO_PathTooLong_Path();
}
