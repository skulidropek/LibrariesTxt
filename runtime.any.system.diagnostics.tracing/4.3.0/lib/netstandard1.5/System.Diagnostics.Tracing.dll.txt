internal static class FxResources.System.Diagnostics.Tracing.SR : object {
}
public class System.Diagnostics.Tracing.EventCounter : object {
    private string _name;
    private static int BufferedSize;
    private static float UnusedBufferSlotValue;
    private static int UnsetIndex;
    private Single[] modreq(System.Runtime.CompilerServices.IsVolatile) _bufferedValues;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _bufferedValuesIndex;
    private int _count;
    private float _sum;
    private float _sumSquared;
    private float _min;
    private float _max;
    public EventCounter(string name, EventSource eventSource);
    public void WriteMetric(float value);
    private void InitializeBuffer();
    private void Enqueue(float value);
    private void Flush();
    private void OnMetricWritten(float value);
    internal EventCounterPayload GetEventCounterPayload();
    private void ResetStatistics();
}
internal class System.Diagnostics.Tracing.EventCounterGroup : object {
    private EventSource _eventSource;
    private int _eventSourceIndex;
    private List`1<EventCounter> _eventCounters;
    private static EventCounterGroup[] s_eventCounterGroups;
    private DateTime _timeStampSinceCollectionStarted;
    private int _pollingIntervalInMilliseconds;
    private Timer _pollingTimer;
    private bool _disposed;
    internal EventCounterGroup(EventSource eventSource, int eventSourceIndex);
    private void Add(EventCounter eventCounter);
    private void RegisterCommandCallback();
    private void OnEventSourceCommand(object sender, EventCommandEventArgs e);
    internal static void AddEventCounter(EventSource eventSource, EventCounter eventCounter);
    private static void EnsureEventSourceIndexAvailable(int eventSourceIndex);
    private static EventCounterGroup GetEventCounterGroup(EventSource eventSource);
    private void EnableTimer(float pollingIntervalInSeconds);
    private void OnTimer(object state);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[EventDataAttribute]
internal class System.Diagnostics.Tracing.EventCounterPayload : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private float <StandardDerivation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private float <IntervalSec>k__BackingField;
    public string Name { get; public set; }
    public float Mean { get; public set; }
    public float StandardDerivation { get; public set; }
    public int Count { get; public set; }
    public float Min { get; public set; }
    public float Max { get; public set; }
    public float IntervalSec { get; internal set; }
    private IEnumerable`1<KeyValuePair`2<string, object>> ForEnumeration { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public float get_Mean();
    [CompilerGeneratedAttribute]
public void set_Mean(float value);
    [CompilerGeneratedAttribute]
public float get_StandardDerivation();
    [CompilerGeneratedAttribute]
public void set_StandardDerivation(float value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public float get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(float value);
    [CompilerGeneratedAttribute]
public float get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(float value);
    [CompilerGeneratedAttribute]
public float get_IntervalSec();
    [CompilerGeneratedAttribute]
internal void set_IntervalSec(float value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("System.Diagnostics.Tracing.EventCounterPayload/<get_ForEnumeration>d__31")]
private IEnumerable`1<KeyValuePair`2<string, object>> get_ForEnumeration();
}
internal class System.Diagnostics.Tracing.EventListenerHelper : EventListener {
    public static int EventSourceIndex(EventSource eventSource);
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string UnknownError_Num { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_MaxArgExceeded { get; }
    internal static string ArgumentOutOfRange_MaxStringsExceeded { get; }
    internal static string ArgumentOutOfRange_NeedValidId { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string EventSource_ListenerNotFound { get; }
    internal static string EventSource_ToString { get; }
    internal static string EventSource_ImplementGetMetadata { get; }
    internal static string EventSource_NeedGuid { get; }
    internal static string EventSource_NeedName { get; }
    internal static string EventSource_NeedDescriptors { get; }
    internal static string EventSource_NeedManifest { get; }
    internal static string EventSource_EventSourceGuidInUse { get; }
    internal static string EventSource_ListenerWriteFailure { get; }
    internal static string EventSource_NoManifest { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_UnknownError_Num();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_MaxArgExceeded();
    internal static string get_ArgumentOutOfRange_MaxStringsExceeded();
    internal static string get_ArgumentOutOfRange_NeedValidId();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_EventSource_ListenerNotFound();
    internal static string get_EventSource_ToString();
    internal static string get_EventSource_ImplementGetMetadata();
    internal static string get_EventSource_NeedGuid();
    internal static string get_EventSource_NeedName();
    internal static string get_EventSource_NeedDescriptors();
    internal static string get_EventSource_NeedManifest();
    internal static string get_EventSource_EventSourceGuidInUse();
    internal static string get_EventSource_ListenerWriteFailure();
    internal static string get_EventSource_NoManifest();
    internal static Type get_ResourceType();
}
