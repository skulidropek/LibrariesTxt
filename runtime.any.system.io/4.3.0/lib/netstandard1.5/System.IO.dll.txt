internal static class FxResources.System.IO.SR : object {
}
public class System.IO.BufferedStream : Stream {
    private static int MaxShadowBufferSize;
    private static int DefaultBufferSize;
    private Stream _stream;
    private Byte[] _buffer;
    private int _bufferSize;
    private int _readPos;
    private int _readLen;
    private int _writePos;
    private Task`1<int> _lastSyncCompletedReadTask;
    private SemaphoreSlim _asyncActiveSemaphore;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BufferedStream(Stream stream);
    public BufferedStream(Stream stream, int bufferSize);
    internal SemaphoreSlim LazyEnsureAsyncActiveSemaphoreInitialized();
    private void EnsureNotClosed();
    private void EnsureCanSeek();
    private void EnsureCanRead();
    private void EnsureCanWrite();
    private void EnsureShadowBufferAllocated();
    private void EnsureBufferAllocated();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<FlushAsyncInternal>d__33")]
private Task FlushAsyncInternal(CancellationToken cancellationToken);
    private void FlushRead();
    private void ClearReadBufferBeforeWrite();
    private void FlushWrite();
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<FlushWriteAsync>d__37")]
private Task FlushWriteAsync(CancellationToken cancellationToken);
    private int ReadFromBuffer(Byte[] array, int offset, int count);
    private int ReadFromBuffer(Byte[] array, int offset, int count, Exception& error);
    public virtual int Read(Byte[] array, int offset, int count);
    private Task`1<int> LastSyncCompletedReadTask(int val);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<ReadFromUnderlyingStreamAsync>d__43")]
private Task`1<int> ReadFromUnderlyingStreamAsync(Byte[] array, int offset, int count, CancellationToken cancellationToken, int bytesAlreadySatisfied, Task semaphoreLockTask);
    public virtual int ReadByte();
    private int ReadByteSlow();
    private void WriteToBuffer(Byte[] array, Int32& offset, Int32& count);
    private void WriteToBuffer(Byte[] array, Int32& offset, Int32& count, Exception& error);
    public virtual void Write(Byte[] array, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<WriteToUnderlyingStreamAsync>d__50")]
private Task WriteToUnderlyingStreamAsync(Byte[] array, int offset, int count, CancellationToken cancellationToken, Task semaphoreLockTask);
    public virtual void WriteByte(byte value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
public class System.IO.InvalidDataException : Exception {
    public InvalidDataException(string message);
    public InvalidDataException(string message, Exception innerException);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string GenericInvalidData { get; }
    internal static string ArgumentNull_Buffer { get; }
    internal static string ArgumentOutOfRange_MustBePositive { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string NotSupported_CannotWriteToBufferedStreamIfReadBufferCannotBeFlushed { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_GenericInvalidData();
    internal static string get_ArgumentNull_Buffer();
    internal static string get_ArgumentOutOfRange_MustBePositive();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_NotSupported_CannotWriteToBufferedStreamIfReadBufferCannotBeFlushed();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static Type get_ResourceType();
}
