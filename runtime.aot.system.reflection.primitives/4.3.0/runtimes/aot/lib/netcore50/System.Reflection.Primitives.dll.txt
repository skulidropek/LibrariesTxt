internal class __DynamicallyInvokableAttribute : Attribute {
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.CallingConventions : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static CallingConventions Standard;
    [__DynamicallyInvokableAttribute]
public static CallingConventions VarArgs;
    [__DynamicallyInvokableAttribute]
public static CallingConventions Any;
    [__DynamicallyInvokableAttribute]
public static CallingConventions HasThis;
    [__DynamicallyInvokableAttribute]
public static CallingConventions ExplicitThis;
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.Emit.FlowControl : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static FlowControl Branch;
    [__DynamicallyInvokableAttribute]
public static FlowControl Break;
    [__DynamicallyInvokableAttribute]
public static FlowControl Call;
    [__DynamicallyInvokableAttribute]
public static FlowControl Cond_Branch;
    [__DynamicallyInvokableAttribute]
public static FlowControl Meta;
    [__DynamicallyInvokableAttribute]
public static FlowControl Next;
    [__DynamicallyInvokableAttribute]
public static FlowControl Return;
    [__DynamicallyInvokableAttribute]
public static FlowControl Throw;
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public class System.Reflection.Emit.OpCode : ValueType {
    internal static int OperandTypeMask;
    internal static int FlowControlShift;
    internal static int FlowControlMask;
    internal static int OpCodeTypeShift;
    internal static int OpCodeTypeMask;
    internal static int StackBehaviourPopShift;
    internal static int StackBehaviourPushShift;
    internal static int StackBehaviourMask;
    internal static int SizeShift;
    internal static int SizeMask;
    internal static int EndsUncondJmpBlkFlag;
    internal static int StackChangeShift;
    private OpCodeValues m_value;
    private int m_flags;
    private static String[] modreq(System.Runtime.CompilerServices.IsVolatile) g_nameCache;
    [__DynamicallyInvokableAttribute]
public OperandType OperandType { get; }
    [__DynamicallyInvokableAttribute]
public FlowControl FlowControl { get; }
    [__DynamicallyInvokableAttribute]
public OpCodeType OpCodeType { get; }
    [__DynamicallyInvokableAttribute]
public StackBehaviour StackBehaviourPop { get; }
    [__DynamicallyInvokableAttribute]
public StackBehaviour StackBehaviourPush { get; }
    [__DynamicallyInvokableAttribute]
public int Size { get; }
    [__DynamicallyInvokableAttribute]
public short Value { get; }
    [__DynamicallyInvokableAttribute]
public string Name { get; }
    internal OpCode(OpCodeValues value, int flags);
    internal bool EndsUncondJmpBlk();
    internal int StackChange();
    [__DynamicallyInvokableAttribute]
public OperandType get_OperandType();
    [__DynamicallyInvokableAttribute]
public FlowControl get_FlowControl();
    [__DynamicallyInvokableAttribute]
public OpCodeType get_OpCodeType();
    [__DynamicallyInvokableAttribute]
public StackBehaviour get_StackBehaviourPop();
    [__DynamicallyInvokableAttribute]
public StackBehaviour get_StackBehaviourPush();
    [__DynamicallyInvokableAttribute]
public int get_Size();
    [__DynamicallyInvokableAttribute]
public short get_Value();
    [__DynamicallyInvokableAttribute]
public string get_Name();
    [__DynamicallyInvokableAttribute]
public virtual bool Equals(object obj);
    [__DynamicallyInvokableAttribute]
public bool Equals(OpCode obj);
    [__DynamicallyInvokableAttribute]
public static bool op_Equality(OpCode a, OpCode b);
    [__DynamicallyInvokableAttribute]
public static bool op_Inequality(OpCode a, OpCode b);
    [__DynamicallyInvokableAttribute]
public virtual int GetHashCode();
    [__DynamicallyInvokableAttribute]
public virtual string ToString();
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public class System.Reflection.Emit.OpCodes : object {
    [__DynamicallyInvokableAttribute]
public static OpCode Nop;
    [__DynamicallyInvokableAttribute]
public static OpCode Break;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarg_0;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarg_1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarg_2;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarg_3;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloc_0;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloc_1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloc_2;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloc_3;
    [__DynamicallyInvokableAttribute]
public static OpCode Stloc_0;
    [__DynamicallyInvokableAttribute]
public static OpCode Stloc_1;
    [__DynamicallyInvokableAttribute]
public static OpCode Stloc_2;
    [__DynamicallyInvokableAttribute]
public static OpCode Stloc_3;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarg_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarga_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Starg_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloc_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloca_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Stloc_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldnull;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_M1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_0;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_2;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_3;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_5;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_6;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_7;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_8;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_I8;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_R4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldc_R8;
    [__DynamicallyInvokableAttribute]
public static OpCode Dup;
    [__DynamicallyInvokableAttribute]
public static OpCode Pop;
    [__DynamicallyInvokableAttribute]
public static OpCode Jmp;
    [__DynamicallyInvokableAttribute]
public static OpCode Call;
    [__DynamicallyInvokableAttribute]
public static OpCode Calli;
    [__DynamicallyInvokableAttribute]
public static OpCode Ret;
    [__DynamicallyInvokableAttribute]
public static OpCode Br_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Brfalse_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Brtrue_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Beq_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Bge_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Bgt_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Ble_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Blt_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Bne_Un_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Bge_Un_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Bgt_Un_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Ble_Un_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Blt_Un_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Br;
    [__DynamicallyInvokableAttribute]
public static OpCode Brfalse;
    [__DynamicallyInvokableAttribute]
public static OpCode Brtrue;
    [__DynamicallyInvokableAttribute]
public static OpCode Beq;
    [__DynamicallyInvokableAttribute]
public static OpCode Bge;
    [__DynamicallyInvokableAttribute]
public static OpCode Bgt;
    [__DynamicallyInvokableAttribute]
public static OpCode Ble;
    [__DynamicallyInvokableAttribute]
public static OpCode Blt;
    [__DynamicallyInvokableAttribute]
public static OpCode Bne_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Bge_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Bgt_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Ble_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Blt_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Switch;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_I1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_U1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_I2;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_U2;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_I4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_U4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_I8;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_I;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_R4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_R8;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldind_Ref;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_Ref;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_I1;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_I2;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_I4;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_I8;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_R4;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_R8;
    [__DynamicallyInvokableAttribute]
public static OpCode Add;
    [__DynamicallyInvokableAttribute]
public static OpCode Sub;
    [__DynamicallyInvokableAttribute]
public static OpCode Mul;
    [__DynamicallyInvokableAttribute]
public static OpCode Div;
    [__DynamicallyInvokableAttribute]
public static OpCode Div_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Rem;
    [__DynamicallyInvokableAttribute]
public static OpCode Rem_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode And;
    [__DynamicallyInvokableAttribute]
public static OpCode Or;
    [__DynamicallyInvokableAttribute]
public static OpCode Xor;
    [__DynamicallyInvokableAttribute]
public static OpCode Shl;
    [__DynamicallyInvokableAttribute]
public static OpCode Shr;
    [__DynamicallyInvokableAttribute]
public static OpCode Shr_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Neg;
    [__DynamicallyInvokableAttribute]
public static OpCode Not;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_I1;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_I2;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_I4;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_I8;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_R4;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_R8;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_U4;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_U8;
    [__DynamicallyInvokableAttribute]
public static OpCode Callvirt;
    [__DynamicallyInvokableAttribute]
public static OpCode Cpobj;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldobj;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldstr;
    [__DynamicallyInvokableAttribute]
public static OpCode Newobj;
    [ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public static OpCode Castclass;
    [__DynamicallyInvokableAttribute]
public static OpCode Isinst;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_R_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Unbox;
    [__DynamicallyInvokableAttribute]
public static OpCode Throw;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldfld;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldflda;
    [__DynamicallyInvokableAttribute]
public static OpCode Stfld;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldsfld;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldsflda;
    [__DynamicallyInvokableAttribute]
public static OpCode Stsfld;
    [__DynamicallyInvokableAttribute]
public static OpCode Stobj;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I1_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I2_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I4_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I8_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U1_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U2_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U4_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U8_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Box;
    [__DynamicallyInvokableAttribute]
public static OpCode Newarr;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldlen;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelema;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_I1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_U1;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_I2;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_U2;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_I4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_U4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_I8;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_I;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_R4;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_R8;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem_Ref;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_I;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_I1;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_I2;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_I4;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_I8;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_R4;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_R8;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem_Ref;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldelem;
    [__DynamicallyInvokableAttribute]
public static OpCode Stelem;
    [__DynamicallyInvokableAttribute]
public static OpCode Unbox_Any;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I1;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U1;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I2;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U2;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I4;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U4;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I8;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U8;
    [__DynamicallyInvokableAttribute]
public static OpCode Refanyval;
    [__DynamicallyInvokableAttribute]
public static OpCode Ckfinite;
    [__DynamicallyInvokableAttribute]
public static OpCode Mkrefany;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldtoken;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_U2;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_U1;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_I;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_I;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_Ovf_U;
    [__DynamicallyInvokableAttribute]
public static OpCode Add_Ovf;
    [__DynamicallyInvokableAttribute]
public static OpCode Add_Ovf_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Mul_Ovf;
    [__DynamicallyInvokableAttribute]
public static OpCode Mul_Ovf_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Sub_Ovf;
    [__DynamicallyInvokableAttribute]
public static OpCode Sub_Ovf_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Endfinally;
    [__DynamicallyInvokableAttribute]
public static OpCode Leave;
    [__DynamicallyInvokableAttribute]
public static OpCode Leave_S;
    [__DynamicallyInvokableAttribute]
public static OpCode Stind_I;
    [__DynamicallyInvokableAttribute]
public static OpCode Conv_U;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefix7;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefix6;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefix5;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefix4;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefix3;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefix2;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefix1;
    [__DynamicallyInvokableAttribute]
public static OpCode Prefixref;
    [__DynamicallyInvokableAttribute]
public static OpCode Arglist;
    [__DynamicallyInvokableAttribute]
public static OpCode Ceq;
    [__DynamicallyInvokableAttribute]
public static OpCode Cgt;
    [__DynamicallyInvokableAttribute]
public static OpCode Cgt_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Clt;
    [__DynamicallyInvokableAttribute]
public static OpCode Clt_Un;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldftn;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldvirtftn;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarg;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldarga;
    [__DynamicallyInvokableAttribute]
public static OpCode Starg;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloc;
    [__DynamicallyInvokableAttribute]
public static OpCode Ldloca;
    [__DynamicallyInvokableAttribute]
public static OpCode Stloc;
    [__DynamicallyInvokableAttribute]
public static OpCode Localloc;
    [__DynamicallyInvokableAttribute]
public static OpCode Endfilter;
    [__DynamicallyInvokableAttribute]
public static OpCode Unaligned;
    [__DynamicallyInvokableAttribute]
public static OpCode Volatile;
    [__DynamicallyInvokableAttribute]
public static OpCode Tailcall;
    [__DynamicallyInvokableAttribute]
public static OpCode Initobj;
    [__DynamicallyInvokableAttribute]
public static OpCode Constrained;
    [__DynamicallyInvokableAttribute]
public static OpCode Cpblk;
    [__DynamicallyInvokableAttribute]
public static OpCode Initblk;
    [__DynamicallyInvokableAttribute]
public static OpCode Rethrow;
    [__DynamicallyInvokableAttribute]
public static OpCode Sizeof;
    [__DynamicallyInvokableAttribute]
public static OpCode Refanytype;
    [__DynamicallyInvokableAttribute]
public static OpCode Readonly;
    private static OpCodes();
    [__DynamicallyInvokableAttribute]
public static bool TakesSingleByteArgument(OpCode inst);
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.Emit.OpCodeType : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static OpCodeType Macro;
    [__DynamicallyInvokableAttribute]
public static OpCodeType Nternal;
    [__DynamicallyInvokableAttribute]
public static OpCodeType Objmodel;
    [__DynamicallyInvokableAttribute]
public static OpCodeType Prefix;
    [__DynamicallyInvokableAttribute]
public static OpCodeType Primitive;
}
internal enum System.Reflection.Emit.OpCodeValues : Enum {
    public int value__;
    public static OpCodeValues Nop;
    public static OpCodeValues Break;
    public static OpCodeValues Ldarg_0;
    public static OpCodeValues Ldarg_1;
    public static OpCodeValues Ldarg_2;
    public static OpCodeValues Ldarg_3;
    public static OpCodeValues Ldloc_0;
    public static OpCodeValues Ldloc_1;
    public static OpCodeValues Ldloc_2;
    public static OpCodeValues Ldloc_3;
    public static OpCodeValues Stloc_0;
    public static OpCodeValues Stloc_1;
    public static OpCodeValues Stloc_2;
    public static OpCodeValues Stloc_3;
    public static OpCodeValues Ldarg_S;
    public static OpCodeValues Ldarga_S;
    public static OpCodeValues Starg_S;
    public static OpCodeValues Ldloc_S;
    public static OpCodeValues Ldloca_S;
    public static OpCodeValues Stloc_S;
    public static OpCodeValues Ldnull;
    public static OpCodeValues Ldc_I4_M1;
    public static OpCodeValues Ldc_I4_0;
    public static OpCodeValues Ldc_I4_1;
    public static OpCodeValues Ldc_I4_2;
    public static OpCodeValues Ldc_I4_3;
    public static OpCodeValues Ldc_I4_4;
    public static OpCodeValues Ldc_I4_5;
    public static OpCodeValues Ldc_I4_6;
    public static OpCodeValues Ldc_I4_7;
    public static OpCodeValues Ldc_I4_8;
    public static OpCodeValues Ldc_I4_S;
    public static OpCodeValues Ldc_I4;
    public static OpCodeValues Ldc_I8;
    public static OpCodeValues Ldc_R4;
    public static OpCodeValues Ldc_R8;
    public static OpCodeValues Dup;
    public static OpCodeValues Pop;
    public static OpCodeValues Jmp;
    public static OpCodeValues Call;
    public static OpCodeValues Calli;
    public static OpCodeValues Ret;
    public static OpCodeValues Br_S;
    public static OpCodeValues Brfalse_S;
    public static OpCodeValues Brtrue_S;
    public static OpCodeValues Beq_S;
    public static OpCodeValues Bge_S;
    public static OpCodeValues Bgt_S;
    public static OpCodeValues Ble_S;
    public static OpCodeValues Blt_S;
    public static OpCodeValues Bne_Un_S;
    public static OpCodeValues Bge_Un_S;
    public static OpCodeValues Bgt_Un_S;
    public static OpCodeValues Ble_Un_S;
    public static OpCodeValues Blt_Un_S;
    public static OpCodeValues Br;
    public static OpCodeValues Brfalse;
    public static OpCodeValues Brtrue;
    public static OpCodeValues Beq;
    public static OpCodeValues Bge;
    public static OpCodeValues Bgt;
    public static OpCodeValues Ble;
    public static OpCodeValues Blt;
    public static OpCodeValues Bne_Un;
    public static OpCodeValues Bge_Un;
    public static OpCodeValues Bgt_Un;
    public static OpCodeValues Ble_Un;
    public static OpCodeValues Blt_Un;
    public static OpCodeValues Switch;
    public static OpCodeValues Ldind_I1;
    public static OpCodeValues Ldind_U1;
    public static OpCodeValues Ldind_I2;
    public static OpCodeValues Ldind_U2;
    public static OpCodeValues Ldind_I4;
    public static OpCodeValues Ldind_U4;
    public static OpCodeValues Ldind_I8;
    public static OpCodeValues Ldind_I;
    public static OpCodeValues Ldind_R4;
    public static OpCodeValues Ldind_R8;
    public static OpCodeValues Ldind_Ref;
    public static OpCodeValues Stind_Ref;
    public static OpCodeValues Stind_I1;
    public static OpCodeValues Stind_I2;
    public static OpCodeValues Stind_I4;
    public static OpCodeValues Stind_I8;
    public static OpCodeValues Stind_R4;
    public static OpCodeValues Stind_R8;
    public static OpCodeValues Add;
    public static OpCodeValues Sub;
    public static OpCodeValues Mul;
    public static OpCodeValues Div;
    public static OpCodeValues Div_Un;
    public static OpCodeValues Rem;
    public static OpCodeValues Rem_Un;
    public static OpCodeValues And;
    public static OpCodeValues Or;
    public static OpCodeValues Xor;
    public static OpCodeValues Shl;
    public static OpCodeValues Shr;
    public static OpCodeValues Shr_Un;
    public static OpCodeValues Neg;
    public static OpCodeValues Not;
    public static OpCodeValues Conv_I1;
    public static OpCodeValues Conv_I2;
    public static OpCodeValues Conv_I4;
    public static OpCodeValues Conv_I8;
    public static OpCodeValues Conv_R4;
    public static OpCodeValues Conv_R8;
    public static OpCodeValues Conv_U4;
    public static OpCodeValues Conv_U8;
    public static OpCodeValues Callvirt;
    public static OpCodeValues Cpobj;
    public static OpCodeValues Ldobj;
    public static OpCodeValues Ldstr;
    public static OpCodeValues Newobj;
    public static OpCodeValues Castclass;
    public static OpCodeValues Isinst;
    public static OpCodeValues Conv_R_Un;
    public static OpCodeValues Unbox;
    public static OpCodeValues Throw;
    public static OpCodeValues Ldfld;
    public static OpCodeValues Ldflda;
    public static OpCodeValues Stfld;
    public static OpCodeValues Ldsfld;
    public static OpCodeValues Ldsflda;
    public static OpCodeValues Stsfld;
    public static OpCodeValues Stobj;
    public static OpCodeValues Conv_Ovf_I1_Un;
    public static OpCodeValues Conv_Ovf_I2_Un;
    public static OpCodeValues Conv_Ovf_I4_Un;
    public static OpCodeValues Conv_Ovf_I8_Un;
    public static OpCodeValues Conv_Ovf_U1_Un;
    public static OpCodeValues Conv_Ovf_U2_Un;
    public static OpCodeValues Conv_Ovf_U4_Un;
    public static OpCodeValues Conv_Ovf_U8_Un;
    public static OpCodeValues Conv_Ovf_I_Un;
    public static OpCodeValues Conv_Ovf_U_Un;
    public static OpCodeValues Box;
    public static OpCodeValues Newarr;
    public static OpCodeValues Ldlen;
    public static OpCodeValues Ldelema;
    public static OpCodeValues Ldelem_I1;
    public static OpCodeValues Ldelem_U1;
    public static OpCodeValues Ldelem_I2;
    public static OpCodeValues Ldelem_U2;
    public static OpCodeValues Ldelem_I4;
    public static OpCodeValues Ldelem_U4;
    public static OpCodeValues Ldelem_I8;
    public static OpCodeValues Ldelem_I;
    public static OpCodeValues Ldelem_R4;
    public static OpCodeValues Ldelem_R8;
    public static OpCodeValues Ldelem_Ref;
    public static OpCodeValues Stelem_I;
    public static OpCodeValues Stelem_I1;
    public static OpCodeValues Stelem_I2;
    public static OpCodeValues Stelem_I4;
    public static OpCodeValues Stelem_I8;
    public static OpCodeValues Stelem_R4;
    public static OpCodeValues Stelem_R8;
    public static OpCodeValues Stelem_Ref;
    public static OpCodeValues Ldelem;
    public static OpCodeValues Stelem;
    public static OpCodeValues Unbox_Any;
    public static OpCodeValues Conv_Ovf_I1;
    public static OpCodeValues Conv_Ovf_U1;
    public static OpCodeValues Conv_Ovf_I2;
    public static OpCodeValues Conv_Ovf_U2;
    public static OpCodeValues Conv_Ovf_I4;
    public static OpCodeValues Conv_Ovf_U4;
    public static OpCodeValues Conv_Ovf_I8;
    public static OpCodeValues Conv_Ovf_U8;
    public static OpCodeValues Refanyval;
    public static OpCodeValues Ckfinite;
    public static OpCodeValues Mkrefany;
    public static OpCodeValues Ldtoken;
    public static OpCodeValues Conv_U2;
    public static OpCodeValues Conv_U1;
    public static OpCodeValues Conv_I;
    public static OpCodeValues Conv_Ovf_I;
    public static OpCodeValues Conv_Ovf_U;
    public static OpCodeValues Add_Ovf;
    public static OpCodeValues Add_Ovf_Un;
    public static OpCodeValues Mul_Ovf;
    public static OpCodeValues Mul_Ovf_Un;
    public static OpCodeValues Sub_Ovf;
    public static OpCodeValues Sub_Ovf_Un;
    public static OpCodeValues Endfinally;
    public static OpCodeValues Leave;
    public static OpCodeValues Leave_S;
    public static OpCodeValues Stind_I;
    public static OpCodeValues Conv_U;
    public static OpCodeValues Prefix7;
    public static OpCodeValues Prefix6;
    public static OpCodeValues Prefix5;
    public static OpCodeValues Prefix4;
    public static OpCodeValues Prefix3;
    public static OpCodeValues Prefix2;
    public static OpCodeValues Prefix1;
    public static OpCodeValues Prefixref;
    public static OpCodeValues Arglist;
    public static OpCodeValues Ceq;
    public static OpCodeValues Cgt;
    public static OpCodeValues Cgt_Un;
    public static OpCodeValues Clt;
    public static OpCodeValues Clt_Un;
    public static OpCodeValues Ldftn;
    public static OpCodeValues Ldvirtftn;
    public static OpCodeValues Ldarg;
    public static OpCodeValues Ldarga;
    public static OpCodeValues Starg;
    public static OpCodeValues Ldloc;
    public static OpCodeValues Ldloca;
    public static OpCodeValues Stloc;
    public static OpCodeValues Localloc;
    public static OpCodeValues Endfilter;
    public static OpCodeValues Unaligned_;
    public static OpCodeValues Volatile_;
    public static OpCodeValues Tail_;
    public static OpCodeValues Initobj;
    public static OpCodeValues Constrained_;
    public static OpCodeValues Cpblk;
    public static OpCodeValues Initblk;
    public static OpCodeValues Rethrow;
    public static OpCodeValues Sizeof;
    public static OpCodeValues Refanytype;
    public static OpCodeValues Readonly_;
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.Emit.OperandType : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineBrTarget;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineField;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineI;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineI8;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineMethod;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineNone;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineR;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineSig;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineString;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineSwitch;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineTok;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineType;
    [__DynamicallyInvokableAttribute]
public static OperandType InlineVar;
    [__DynamicallyInvokableAttribute]
public static OperandType ShortInlineBrTarget;
    [__DynamicallyInvokableAttribute]
public static OperandType ShortInlineI;
    [__DynamicallyInvokableAttribute]
public static OperandType ShortInlineR;
    [__DynamicallyInvokableAttribute]
public static OperandType ShortInlineVar;
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.Emit.PackingSize : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static PackingSize Unspecified;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size1;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size2;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size4;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size8;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size16;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size32;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size64;
    [__DynamicallyInvokableAttribute]
public static PackingSize Size128;
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.Emit.StackBehaviour : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pop0;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pop1;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pop1_pop1;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popi;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popi_pop1;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popi_popi;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popi_popi8;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popi_popi_popi;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popi_popr4;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popi_popr8;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_pop1;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_popi;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_popi_popi;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_popi_popi8;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_popi_popr4;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_popi_popr8;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_popi_popref;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Push0;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Push1;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Push1_push1;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pushi;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pushi8;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pushr4;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pushr8;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Pushref;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Varpop;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Varpush;
    [__DynamicallyInvokableAttribute]
public static StackBehaviour Popref_popi_pop1;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.EventAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static EventAttributes None;
    [__DynamicallyInvokableAttribute]
public static EventAttributes SpecialName;
    [__DynamicallyInvokableAttribute]
public static EventAttributes RTSpecialName;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.FieldAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes FieldAccessMask;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes PrivateScope;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes Private;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes FamANDAssem;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes Assembly;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes Family;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes FamORAssem;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes Public;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes Static;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes InitOnly;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes Literal;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes NotSerialized;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes SpecialName;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes PinvokeImpl;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes RTSpecialName;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes HasFieldMarshal;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes HasDefault;
    [__DynamicallyInvokableAttribute]
public static FieldAttributes HasFieldRVA;
}
[FlagsAttribute]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.GenericParameterAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes None;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes VarianceMask;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes Covariant;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes Contravariant;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes SpecialConstraintMask;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes ReferenceTypeConstraint;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes NotNullableValueTypeConstraint;
    [__DynamicallyInvokableAttribute]
public static GenericParameterAttributes DefaultConstructorConstraint;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.MethodAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes MemberAccessMask;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes PrivateScope;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Private;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes FamANDAssem;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Assembly;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Family;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes FamORAssem;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Public;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Static;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Final;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Virtual;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes HideBySig;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes CheckAccessOnOverride;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes VtableLayoutMask;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes ReuseSlot;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes NewSlot;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes Abstract;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes SpecialName;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes PinvokeImpl;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes UnmanagedExport;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes RTSpecialName;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes HasSecurity;
    [__DynamicallyInvokableAttribute]
public static MethodAttributes RequireSecObject;
}
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.MethodImplAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes CodeTypeMask;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes IL;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes Native;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes OPTIL;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes Runtime;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes ManagedMask;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes Unmanaged;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes Managed;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes ForwardRef;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes PreserveSig;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes InternalCall;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes Synchronized;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes NoInlining;
    [ComVisibleAttribute("False")]
[__DynamicallyInvokableAttribute]
public static MethodImplAttributes AggressiveInlining;
    [__DynamicallyInvokableAttribute]
public static MethodImplAttributes NoOptimization;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.ParameterAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes None;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes In;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes Out;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes Lcid;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes Retval;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes Optional;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes HasDefault;
    [__DynamicallyInvokableAttribute]
public static ParameterAttributes HasFieldMarshal;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.PropertyAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static PropertyAttributes None;
    [__DynamicallyInvokableAttribute]
public static PropertyAttributes SpecialName;
    [__DynamicallyInvokableAttribute]
public static PropertyAttributes RTSpecialName;
    [__DynamicallyInvokableAttribute]
public static PropertyAttributes HasDefault;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.TypeAttributes : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes VisibilityMask;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes NotPublic;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes Public;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes NestedPublic;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes NestedPrivate;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes NestedFamily;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes NestedAssembly;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes NestedFamANDAssem;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes NestedFamORAssem;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes LayoutMask;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes AutoLayout;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes SequentialLayout;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes ExplicitLayout;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes ClassSemanticsMask;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes Class;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes Interface;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes Abstract;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes Sealed;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes SpecialName;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes Import;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes Serializable;
    [ComVisibleAttribute("False")]
[__DynamicallyInvokableAttribute]
public static TypeAttributes WindowsRuntime;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes StringFormatMask;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes AnsiClass;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes UnicodeClass;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes AutoClass;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes CustomFormatClass;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes CustomFormatMask;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes BeforeFieldInit;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes RTSpecialName;
    [__DynamicallyInvokableAttribute]
public static TypeAttributes HasSecurity;
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
