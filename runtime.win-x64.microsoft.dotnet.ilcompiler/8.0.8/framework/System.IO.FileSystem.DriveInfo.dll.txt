internal static class FxResources.System.IO.FileSystem.DriveInfo.SR : object {
}
internal static class Interop : object {
}
internal class System.IO.DisableMediaInsertionPrompt : ValueType {
    private bool _disableSuccess;
    private UInt32 _oldMode;
    public static DisableMediaInsertionPrompt Create();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.DriveInfo : object {
    private string _name;
    public string Name { get; }
    public bool IsReady { get; }
    public DirectoryInfo RootDirectory { get; }
    public DriveType DriveType { get; }
    public string DriveFormat { get; }
    public long AvailableFreeSpace { get; }
    public long TotalFreeSpace { get; }
    public long TotalSize { get; }
    public string VolumeLabel { get; public set; }
    public DriveInfo(string driveName);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_Name();
    public bool get_IsReady();
    public DirectoryInfo get_RootDirectory();
    public virtual string ToString();
    private static string NormalizeDriveName(string driveName);
    public DriveType get_DriveType();
    public string get_DriveFormat();
    public long get_AvailableFreeSpace();
    public long get_TotalFreeSpace();
    public long get_TotalSize();
    public static DriveInfo[] GetDrives();
    public string get_VolumeLabel();
    [SupportedOSPlatformAttribute("windows")]
public void set_VolumeLabel(string value);
}
internal static class System.IO.DriveInfoInternal : object {
    public static String[] GetLogicalDrives();
    public static string NormalizeDriveName(string driveName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.IO.DriveNotFoundException : IOException {
    public DriveNotFoundException(string message);
    public DriveNotFoundException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected DriveNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum System.IO.DriveType : Enum {
    public int value__;
    public static DriveType Unknown;
    public static DriveType NoRootDirectory;
    public static DriveType Removable;
    public static DriveType Fixed;
    public static DriveType Network;
    public static DriveType CDRom;
    public static DriveType Ram;
}
internal static class System.IO.Error : object {
    internal static Exception GetExceptionForLastWin32DriveError(string driveName);
    internal static Exception GetExceptionForWin32DriveError(int errorCode, string driveName);
}
internal static class System.IO.Win32Marshal : object {
    internal static Exception GetExceptionForLastWin32Error(string path);
    internal static Exception GetExceptionForWin32Error(int errorCode, string path);
    internal static int MakeHRFromErrorCode(int errorCode);
    [CompilerGeneratedAttribute]
internal static string <GetExceptionForWin32Error>g__GetPInvokeErrorMessage|1_0(int errorCode);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_MustBeDriveLetterOrRootDir { get; }
    internal static string InvalidOperation_SetVolumeLabelFailed { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_DriveNotFound { get; }
    internal static string IO_DriveNotFound_Drive { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_PathTooLong_Path { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_MustBeDriveLetterOrRootDir();
    internal static string get_InvalidOperation_SetVolumeLabelFailed();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_DriveNotFound();
    internal static string get_IO_DriveNotFound_Drive();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_PathTooLong_Path();
}
