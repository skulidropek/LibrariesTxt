internal static class FxResources.System.Net.NameResolution.SR : object {
}
internal static class Interop : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Net.Dns : object {
    private static Dictionary`2<object, Task> s_tasks;
    private static Dns();
    public static string GetHostName();
    public static IPHostEntry GetHostEntry(IPAddress address);
    public static IPHostEntry GetHostEntry(string hostNameOrAddress);
    public static IPHostEntry GetHostEntry(string hostNameOrAddress, AddressFamily family);
    public static Task`1<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress);
    public static Task`1<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress, CancellationToken cancellationToken);
    public static Task`1<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress, AddressFamily family, CancellationToken cancellationToken);
    public static Task`1<IPHostEntry> GetHostEntryAsync(IPAddress address);
    public static IAsyncResult BeginGetHostEntry(IPAddress address, AsyncCallback requestCallback, object stateObject);
    public static IAsyncResult BeginGetHostEntry(string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);
    public static IPHostEntry EndGetHostEntry(IAsyncResult asyncResult);
    public static IPAddress[] GetHostAddresses(string hostNameOrAddress);
    public static IPAddress[] GetHostAddresses(string hostNameOrAddress, AddressFamily family);
    public static Task`1<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress);
    public static Task`1<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress, CancellationToken cancellationToken);
    public static Task`1<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress, AddressFamily family, CancellationToken cancellationToken);
    public static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object state);
    public static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult);
    [ObsoleteAttribute("GetHostByName has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry GetHostByName(string hostName);
    [ObsoleteAttribute("BeginGetHostByName has been deprecated. Use BeginGetHostEntry instead.")]
public static IAsyncResult BeginGetHostByName(string hostName, AsyncCallback requestCallback, object stateObject);
    [ObsoleteAttribute("EndGetHostByName has been deprecated. Use EndGetHostEntry instead.")]
public static IPHostEntry EndGetHostByName(IAsyncResult asyncResult);
    [ObsoleteAttribute("GetHostByAddress has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry GetHostByAddress(string address);
    [ObsoleteAttribute("GetHostByAddress has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry GetHostByAddress(IPAddress address);
    [ObsoleteAttribute("Resolve has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry Resolve(string hostName);
    [ObsoleteAttribute("BeginResolve has been deprecated. Use BeginGetHostEntry instead.")]
public static IAsyncResult BeginResolve(string hostName, AsyncCallback requestCallback, object stateObject);
    [ObsoleteAttribute("EndResolve has been deprecated. Use EndGetHostEntry instead.")]
public static IPHostEntry EndResolve(IAsyncResult asyncResult);
    private static IPHostEntry GetHostEntryCore(string hostName, AddressFamily addressFamily, Nullable`1<long> startingTimestamp);
    private static IPAddress[] GetHostAddressesCore(string hostName, AddressFamily addressFamily, Nullable`1<long> startingTimestamp);
    private static object GetHostEntryOrAddressesCore(string hostName, bool justAddresses, AddressFamily addressFamily, Nullable`1<long> startingTimestamp);
    private static IPHostEntry GetHostEntryCore(IPAddress address, AddressFamily addressFamily, Nullable`1<long> startingTimestamp);
    private static IPAddress[] GetHostAddressesCore(IPAddress address, AddressFamily addressFamily, Nullable`1<long> startingTimestamp);
    private static object GetHostEntryOrAddressesCore(IPAddress address, bool justAddresses, AddressFamily addressFamily, Nullable`1<long> startingTimestamp);
    private static Task`1<IPHostEntry> GetHostEntryCoreAsync(string hostName, bool justReturnParsedIp, bool throwOnIIPAny, AddressFamily family, CancellationToken cancellationToken);
    private static Task GetHostEntryOrAddressesCoreAsync(string hostName, bool justReturnParsedIp, bool throwOnIIPAny, bool justAddresses, AddressFamily family, CancellationToken cancellationToken);
    private static Task`1<T> GetAddrInfoWithTelemetryAsync(string hostName, bool justAddresses, AddressFamily addressFamily, CancellationToken cancellationToken);
    private static IPHostEntry CreateHostEntryForAddress(IPAddress address);
    private static void ValidateHostName(string hostName);
    private static bool LogFailure(object hostNameOrAddress, Nullable`1<long> startingTimestamp, Exception exception);
    private static Task`1<TResult> RunAsync(Func`3<object, long, TResult> func, object key, CancellationToken cancellationToken);
    private static SocketException CreateException(SocketError error, int nativeError);
    [AsyncStateMachineAttribute("System.Net.Dns/<<GetAddrInfoWithTelemetryAsync>g__CompleteAsync|34_0>d`1")]
[CompilerGeneratedAttribute]
internal static Task`1<T> <GetAddrInfoWithTelemetryAsync>g__CompleteAsync|34_0(Task task, string hostName, long startingTimestamp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.IPHostEntry : object {
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress[] <AddressList>k__BackingField;
    public string HostName { get; public set; }
    public String[] Aliases { get; public set; }
    public IPAddress[] AddressList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    [CompilerGeneratedAttribute]
public String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
    [CompilerGeneratedAttribute]
public IPAddress[] get_AddressList();
    [CompilerGeneratedAttribute]
public void set_AddressList(IPAddress[] value);
}
internal static class System.Net.NameResolutionMetrics : object {
    private static Meter s_meter;
    private static Histogram`1<double> s_lookupDuration;
    private static NameResolutionMetrics();
    public static bool IsEnabled();
    public static void AfterResolution(TimeSpan duration, string hostName, Exception exception);
    private static string GetErrorType(Exception exception);
}
internal static class System.Net.NameResolutionPal : object {
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) s_getAddrInfoExSupported;
    public static bool SupportsGetAddrInfoAsync { get; }
    public static bool get_SupportsGetAddrInfoAsync();
    public static SocketError TryGetAddrInfo(string name, bool justAddresses, AddressFamily addressFamily, String& hostName, String[]& aliases, IPAddress[]& addresses, Int32& nativeErrorCode);
    public static string TryGetNameInfo(IPAddress addr, SocketError& errorCode, Int32& nativeErrorCode);
    public static string GetHostName();
    public static Task GetAddrInfoAsync(string hostName, bool justAddresses, AddressFamily family, CancellationToken cancellationToken);
    [UnmanagedCallersOnlyAttribute]
private static void GetAddressInfoExCallback(int error, int bytes, NativeOverlapped* overlapped);
    private static void ProcessResult(SocketError errorCode, GetAddrInfoExContext* context);
    private static IPAddress[] ParseAddressInfo(AddressInfo* addressInfoPtr, bool justAddresses, String& hostName);
    private static IPAddress[] ParseAddressInfoEx(AddressInfoEx* addressInfoExPtr, bool justAddresses, String& hostName);
    private static IPAddress CreateIPv4Address(ReadOnlySpan`1<byte> socketAddress);
    private static IPAddress CreateIPv6Address(ReadOnlySpan`1<byte> socketAddress);
    [CompilerGeneratedAttribute]
internal static void <get_SupportsGetAddrInfoAsync>g__Initialize|2_0();
}
[EventSourceAttribute]
internal class System.Net.NameResolutionTelemetry : EventSource {
    public static NameResolutionTelemetry Log;
    private PollingCounter _lookupsRequestedCounter;
    private PollingCounter _currentLookupsCounter;
    private EventCounter _lookupsDuration;
    private long _lookupsRequested;
    private long _currentLookups;
    private static NameResolutionTelemetry();
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    [EventAttribute("1")]
private void ResolutionStart(string hostNameOrAddress);
    [EventAttribute("2")]
private void ResolutionStop();
    [EventAttribute("3")]
private void ResolutionFailed();
    [NonEventAttribute]
public long BeforeResolution(object hostNameOrAddress);
    [NonEventAttribute]
public void AfterResolution(object hostNameOrAddress, Nullable`1<long> startingTimestamp, Exception exception);
    private static string GetHostnameFromStateObject(object hostNameOrAddress);
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__9_0();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__9_1();
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    private static NetEventSource();
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("1")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("2")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static string Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
}
internal static class System.Net.SocketAddressPal : object {
    public static UInt32 GetIPv4Address(ReadOnlySpan`1<byte> buffer);
    public static void GetIPv6Address(ReadOnlySpan`1<byte> buffer, Span`1<byte> address, UInt32& scope);
}
internal static class System.Net.SocketProtocolSupportPal : object {
    [CompilerGeneratedAttribute]
private static bool <OSSupportsIPv6>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <OSSupportsIPv4>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <OSSupportsUnixDomainSockets>k__BackingField;
    public static bool OSSupportsIPv6 { get; }
    private static SocketProtocolSupportPal();
    [CompilerGeneratedAttribute]
public static bool get_OSSupportsIPv6();
    private static bool IsIPv6Disabled();
    private static bool IsSupported(AddressFamily af);
}
[FlagsAttribute]
internal enum System.Net.Sockets.AddressInfoHints : Enum {
    public int value__;
    public static AddressInfoHints AI_PASSIVE;
    public static AddressInfoHints AI_CANONNAME;
    public static AddressInfoHints AI_NUMERICHOST;
    public static AddressInfoHints AI_FQDN;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_toolong { get; }
    internal static string net_invalid_ip_addr { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_toolong();
    internal static string get_net_invalid_ip_addr();
}
