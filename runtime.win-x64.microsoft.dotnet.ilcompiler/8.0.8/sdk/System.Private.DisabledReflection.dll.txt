internal static class FxResources.System.Private.DisabledReflection.SR : object {
}
internal class Internal.Reflection.ReflectionCoreCallbacksImplementation : ReflectionCoreCallbacks {
    public virtual EnumInfo GetEnumInfo(Type type, Func`5<Type, String[], Object[], bool, EnumInfo> create);
    public virtual DynamicInvokeInfo GetDelegateDynamicInvokeInfo(Type type);
    public virtual object ActivatorCreateInstance(Type type, bool nonPublic);
    public virtual object ActivatorCreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes);
    public virtual Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure);
    public virtual Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure);
    [RequiresUnreferencedCodeAttribute("The target method might be removed")]
public virtual Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);
    public virtual Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);
    public virtual FieldInfo GetFieldFromHandle(RuntimeFieldHandle runtimeFieldHandle);
    public virtual FieldInfo GetFieldFromHandle(RuntimeFieldHandle runtimeFieldHandle, RuntimeTypeHandle declaringTypeHandle);
    public virtual IntPtr GetFunctionPointer(RuntimeMethodHandle runtimeMethodHandle, RuntimeTypeHandle declaringTypeHandle);
    public virtual EventInfo GetImplicitlyOverriddenBaseClassEvent(EventInfo e);
    public virtual MethodInfo GetImplicitlyOverriddenBaseClassMethod(MethodInfo m);
    public virtual PropertyInfo GetImplicitlyOverriddenBaseClassProperty(PropertyInfo p);
    public virtual Assembly[] GetLoadedAssemblies();
    public virtual MethodBase GetMethodFromHandle(RuntimeMethodHandle runtimeMethodHandle);
    public virtual MethodBase GetMethodFromHandle(RuntimeMethodHandle runtimeMethodHandle, RuntimeTypeHandle declaringTypeHandle);
    public virtual Assembly Load(AssemblyName refName, bool throwOnFileNotFound);
    public virtual Assembly Load(ReadOnlySpan`1<byte> rawAssembly, ReadOnlySpan`1<byte> pdbSymbolStore);
    public virtual Assembly Load(string assemblyPath);
    public virtual void MakeTypedReference(object target, FieldInfo[] flds, Type& type, Int32& offset);
    public virtual void RunModuleConstructor(Module module);
}
internal class Internal.Reflection.ReflectionExecutionDomainCallbacksImplementation : ReflectionExecutionDomainCallbacks {
    public virtual Exception CreateMissingMetadataException(Type typeWithMissingMetadata);
    public virtual Type GetArrayTypeForHandle(RuntimeTypeHandle typeHandle);
    public virtual Assembly GetAssemblyForHandle(RuntimeTypeHandle typeHandle);
    public virtual Type GetByRefTypeForHandle(RuntimeTypeHandle typeHandle);
    public virtual Type GetConstructedGenericTypeForHandle(RuntimeTypeHandle typeHandle);
    public virtual MethodInfo GetDelegateMethod(Delegate del);
    public virtual Exception GetExceptionForHR(int hr);
    public virtual Type GetMdArrayTypeForHandle(RuntimeTypeHandle typeHandle, int rank);
    public virtual MethodBase GetMethodBaseFromStartAddressIfAvailable(IntPtr methodStartAddress);
    public virtual Type GetNamedTypeForHandle(RuntimeTypeHandle typeHandle);
    public virtual Type GetPointerTypeForHandle(RuntimeTypeHandle typeHandle);
    public virtual Type GetFunctionPointerTypeForHandle(RuntimeTypeHandle typeHandle);
    public virtual RuntimeTypeHandle GetTypeHandleIfAvailable(Type type);
    public virtual IntPtr TryGetStaticClassConstructionContext(RuntimeTypeHandle runtimeTypeHandle);
}
internal class Internal.Reflection.RuntimeAssemblyInfo : RuntimeAssembly {
    private RuntimeTypeHandle _moduleType;
    public IEnumerable`1<CustomAttributeData> CustomAttributes { get; }
    public RuntimeAssemblyInfo(RuntimeTypeHandle moduleType);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual IEnumerable`1<CustomAttributeData> get_CustomAttributes();
}
internal class Internal.Reflection.RuntimeTypeInfo : RuntimeType {
    private RuntimeTypeHandle _typeHandle;
    internal static DynamicallyAccessedMemberTypes GetAllMembers;
    private static bool DoNotThrowForNames { get; }
    private static bool DoNotThrowForAssembly { get; }
    private static bool DoNotThrowForAttributes { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public bool IsGenericType { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public string AssemblyQualifiedName { get; }
    public Assembly Assembly { get; }
    public Module Module { get; }
    public Type UnderlyingSystemType { get; }
    public Guid GUID { get; }
    public Type BaseType { get; }
    public bool IsByRefLike { get; }
    public RuntimeTypeInfo(RuntimeTypeHandle typeHandle);
    private static bool get_DoNotThrowForNames();
    private static bool get_DoNotThrowForAssembly();
    private static bool get_DoNotThrowForAttributes();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual bool get_IsGenericType();
    public virtual string get_Name();
    public virtual string get_Namespace();
    public virtual string get_FullName();
    public virtual string get_AssemblyQualifiedName();
    public virtual Assembly get_Assembly();
    public virtual Module get_Module();
    public virtual Type get_UnderlyingSystemType();
    public virtual Guid get_GUID();
    public virtual Type get_BaseType();
    public virtual bool get_IsByRefLike();
    protected virtual bool IsValueTypeImpl();
    protected virtual TypeCode GetTypeCodeImpl();
    public virtual string ToString();
    public virtual int GetHashCode();
    [DynamicallyAccessedMembersAttribute("7")]
public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual IList`1<CustomAttributeData> GetCustomAttributesData();
    public virtual Type GetElementType();
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8192")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2063:UnrecognizedReflectionPattern")]
public virtual Type GetInterface(string name, bool ignoreCase);
    [DynamicallyAccessedMembersAttribute("8192")]
public virtual Type[] GetInterfaces();
    [DynamicallyAccessedMembersAttribute("8191")]
public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("24")]
public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("1536")]
public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("-1")]
public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    [DynamicallyAccessedMembersAttribute("7")]
protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("24")]
protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("1536")]
protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual bool HasElementTypeImpl();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsCOMObjectImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    public virtual bool IsAssignableFrom(Type c);
    internal static RuntimeTypeInfo GetRuntimeTypeInfo(RuntimeTypeHandle typeHandle);
    [RequiresDynamicCodeAttribute("The code for an array of the specified type might not be available.")]
public virtual Type MakeArrayType();
}
public class Internal.Runtime.CompilerHelpers.LibraryInitializer : object {
    public static void InitializeLibrary();
}
internal abstract class System.Collections.Concurrent.ConcurrentUnifierW`2 : object {
    private Container modreq(System.Runtime.CompilerServices.IsVolatile) _container;
    private Lock _lock;
    public V GetOrAdd(K key);
    protected abstract virtual V Factory(K key);
}
internal static class System.Collections.HashHelpers : object {
    public static UInt32 HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    internal static ReadOnlySpan`1<int> Primes { get; }
    internal static ReadOnlySpan`1<int> get_Primes();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
    public static ulong GetFastModMultiplier(UInt32 divisor);
    public static UInt32 FastMod(UInt32 value, UInt32 divisor, ulong multiplier);
}
internal static class System.SR : object {
    private static object _lock;
    private static List`1<string> _currentlyLoading;
    private static int _infinitelyRecursingCount;
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_HTCapacityOverflow { get; }
    internal static string Reflection_Disabled { get; }
    private static SR();
    private static string InternalGetResourceString(string key);
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_HTCapacityOverflow();
    internal static string get_Reflection_Disabled();
}
