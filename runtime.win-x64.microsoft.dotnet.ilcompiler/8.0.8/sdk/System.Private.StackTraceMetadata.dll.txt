internal class Internal.NativeFormat.NativePrimitiveDecoder : ValueType {
    public static byte ReadUInt8(Byte*& stream);
    public static ushort ReadUInt16(Byte*& stream);
    public static UInt32 ReadUInt32(Byte*& stream);
    public static ulong ReadUInt64(Byte*& stream);
    public static float ReadFloat(Byte*& stream);
    public static double ReadDouble(Byte*& stream);
    public static UInt32 GetUnsignedEncodingSize(UInt32 value);
    public static UInt32 DecodeUnsigned(Byte*& stream);
    public static int DecodeSigned(Byte*& stream);
    public static ulong DecodeUnsignedLong(Byte*& stream);
    public static long DecodeSignedLong(Byte*& stream);
}
public class Internal.Runtime.CompilerHelpers.LibraryInitializer : object {
    public static void InitializeLibrary();
}
internal enum Internal.Runtime.ReflectionMapBlob : Enum {
    public int value__;
    public static ReflectionMapBlob TypeMap;
    public static ReflectionMapBlob ArrayMap;
    public static ReflectionMapBlob PointerTypeMap;
    public static ReflectionMapBlob FunctionPointerTypeMap;
    public static ReflectionMapBlob InvokeMap;
    public static ReflectionMapBlob VirtualInvokeMap;
    public static ReflectionMapBlob CommonFixupsTable;
    public static ReflectionMapBlob FieldAccessMap;
    public static ReflectionMapBlob CCtorContextMap;
    public static ReflectionMapBlob ByRefTypeMap;
    public static ReflectionMapBlob EmbeddedMetadata;
    public static ReflectionMapBlob UnboxingAndInstantiatingStubMap;
    public static ReflectionMapBlob StructMarshallingStubMap;
    public static ReflectionMapBlob DelegateMarshallingStubMap;
    public static ReflectionMapBlob GenericVirtualMethodTable;
    public static ReflectionMapBlob InterfaceGenericVirtualMethodTable;
    public static ReflectionMapBlob TypeTemplateMap;
    public static ReflectionMapBlob GenericMethodsTemplateMap;
    public static ReflectionMapBlob BlobIdResourceIndex;
    public static ReflectionMapBlob BlobIdResourceData;
    public static ReflectionMapBlob BlobIdStackTraceEmbeddedMetadata;
    public static ReflectionMapBlob BlobIdStackTraceMethodRvaToTokenMapping;
    public static ReflectionMapBlob NativeLayoutInfo;
    public static ReflectionMapBlob NativeReferences;
    public static ReflectionMapBlob GenericsHashtable;
    public static ReflectionMapBlob NativeStatics;
    public static ReflectionMapBlob StaticsInfoHashtable;
    public static ReflectionMapBlob GenericMethodsHashtable;
    public static ReflectionMapBlob ExactMethodInstantiationsHashtable;
}
internal static class Internal.Runtime.StackTraceDataCommand : object {
    public static byte UpdateOwningType;
    public static byte UpdateName;
    public static byte UpdateSignature;
    public static byte UpdateGenericSignature;
}
internal class Internal.StackTraceMetadata.MethodNameFormatter : object {
    private MetadataReader _metadataReader;
    private StringBuilder _outputBuilder;
    private SigTypeContext _typeContext;
    private MethodNameFormatter(MetadataReader metadataReader, SigTypeContext typeContext);
    public static string FormatMethodName(MetadataReader metadataReader, Handle owningType, ConstantStringValueHandle name, MethodSignatureHandle signature, ConstantStringArrayHandle genericArguments);
    public static string FormatMethodName(MetadataReader metadataReader, TypeDefinitionHandle enclosingTypeHandle, MethodHandle methodHandle);
    private void EmitMethodParameters(MethodSignature methodSignature);
    private void EmitMethodParameters(MethodHandle methodHandle);
    private void EmitTypeVector(HandleCollection typeVector);
    private void EmitTypeName(Handle typeHandle, bool namespaceQualified);
    private void EmitNamespaceReferenceName(NamespaceReferenceHandle namespaceRefHandle);
    private void EmitNamespaceDefinitionName(NamespaceDefinitionHandle namespaceDefHandle);
    private void EmitTypeReferenceName(TypeReferenceHandle typeRefHandle, bool namespaceQualified);
    private void EmitTypeDefinitionName(TypeDefinitionHandle typeDefHandle, bool namespaceQualified);
    private void EmitTypeSpecificationName(TypeSpecificationHandle typeSpecHandle, bool namespaceQualified);
    private void EmitTypeInstantiationName(TypeInstantiationSignatureHandle typeInstHandle, bool namespaceQualified);
    private void EmitSZArrayTypeName(SZArraySignatureHandle szArraySigHandle, bool namespaceQualified);
    private void EmitArrayTypeName(ArraySignatureHandle arraySigHandle, bool namespaceQualified);
    private void EmitPointerTypeName(PointerSignatureHandle pointerSigHandle);
    private void EmitFunctionPointerTypeName();
    private void EmitByRefTypeName(ByReferenceSignatureHandle byRefSigHandle);
    private void EmitGenericArguments(HandleCollection genericArguments);
    private void EmitString(ConstantStringValueHandle stringHandle);
    [CompilerGeneratedAttribute]
private bool <EmitMethodParameters>g__TryGetNextParameter|7_0(Enumerator& enumerator, Parameter& parameter);
}
internal static class Internal.StackTraceMetadata.StackTraceMetadata : object {
    private static PerModuleMethodNameResolverHashtable _perModuleMethodNameResolverHashtable;
    internal static void Initialize();
    public static string GetMethodNameFromStartAddressIfAvailable(IntPtr methodStartAddress);
    private static bool IsReflectionExecutionAvailable();
}
