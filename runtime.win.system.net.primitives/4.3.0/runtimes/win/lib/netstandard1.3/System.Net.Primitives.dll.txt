internal static class FxResources.System.Net.Primitives.SR : object {
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeLocalAllocHandle : SafeBuffer {
    internal static SafeLocalAllocHandle Zero;
    internal static SafeLocalAllocHandle InvalidHandle { get; }
    internal SafeLocalAllocHandle(IntPtr handle);
    private static SafeLocalAllocHandle();
    internal static SafeLocalAllocHandle LocalAlloc(int cb);
    internal static SafeLocalAllocHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal static class System.IO.StringBuilderCache : object {
    private static int MAX_BUILDER_SIZE;
    private static int DEFAULT_CAPACITY;
    [ThreadStaticAttribute]
private static StringBuilder t_cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
[FlagsAttribute]
public enum System.Net.AuthenticationSchemes : Enum {
    public int value__;
    public static AuthenticationSchemes None;
    public static AuthenticationSchemes Digest;
    public static AuthenticationSchemes Negotiate;
    public static AuthenticationSchemes Ntlm;
    public static AuthenticationSchemes Basic;
    public static AuthenticationSchemes Anonymous;
    public static AuthenticationSchemes IntegratedWindowsAuthentication;
}
[ExtensionAttribute]
internal static class System.Net.ByteOrder : object {
    [ExtensionAttribute]
public static ushort HostToNetwork(ushort host);
    [ExtensionAttribute]
public static UInt32 HostToNetwork(UInt32 host);
    [ExtensionAttribute]
public static void HostToNetworkBytes(ushort host, Byte[] bytes, int index);
    [ExtensionAttribute]
public static ushort NetworkToHost(ushort network);
    [ExtensionAttribute]
public static UInt32 NetworkToHost(UInt32 network);
    [ExtensionAttribute]
public static ushort NetworkBytesToHostUInt16(Byte[] bytes, int index);
    [ExtensionAttribute]
public static UInt32 NetworkBytesToNetworkUInt32(Byte[] bytes, int index);
    [ExtensionAttribute]
public static void NetworkToNetworkBytes(UInt32 host, Byte[] bytes, int index);
}
public class System.Net.Cookie : object {
    internal static int MaxSupportedVersion;
    internal static string MaxSupportedVersionString;
    internal static string CommentAttributeName;
    internal static string CommentUrlAttributeName;
    internal static string DiscardAttributeName;
    internal static string DomainAttributeName;
    internal static string ExpiresAttributeName;
    internal static string MaxAgeAttributeName;
    internal static string PathAttributeName;
    internal static string PortAttributeName;
    internal static string SecureAttributeName;
    internal static string VersionAttributeName;
    internal static string HttpOnlyAttributeName;
    internal static string SeparatorLiteral;
    internal static string EqualsLiteral;
    internal static string QuotesLiteral;
    internal static string SpecialAttributeLiteral;
    internal static Char[] PortSplitDelimiters;
    internal static Char[] ReservedToName;
    internal static Char[] ReservedToValue;
    private string _comment;
    private Uri _commentUri;
    private CookieVariant _cookieVariant;
    private bool _discard;
    private string _domain;
    private bool _domainImplicit;
    private DateTime _expires;
    private string _name;
    private string _path;
    private bool _pathImplicit;
    private string _port;
    private bool _portImplicit;
    private Int32[] _portList;
    private bool _secure;
    private bool _httpOnly;
    private DateTime _timeStamp;
    private string _value;
    private int _version;
    private string _domainKey;
    internal bool IsQuotedVersion;
    internal bool IsQuotedDomain;
    public string Comment { get; public set; }
    public Uri CommentUri { get; public set; }
    public bool HttpOnly { get; public set; }
    public bool Discard { get; public set; }
    public string Domain { get; public set; }
    internal bool DomainImplicit { get; internal set; }
    public bool Expired { get; public set; }
    public DateTime Expires { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    internal bool Plain { get; }
    public string Port { get; public set; }
    internal Int32[] PortList { get; }
    public bool Secure { get; public set; }
    public DateTime TimeStamp { get; }
    public string Value { get; public set; }
    internal CookieVariant Variant { get; internal set; }
    internal string DomainKey { get; }
    public int Version { get; public set; }
    public Cookie(string name, string value);
    public Cookie(string name, string value, string path);
    public Cookie(string name, string value, string path, string domain);
    private static Cookie();
    public string get_Comment();
    public void set_Comment(string value);
    public Uri get_CommentUri();
    public void set_CommentUri(Uri value);
    public bool get_HttpOnly();
    public void set_HttpOnly(bool value);
    public bool get_Discard();
    public void set_Discard(bool value);
    public string get_Domain();
    public void set_Domain(string value);
    internal bool get_DomainImplicit();
    internal void set_DomainImplicit(bool value);
    public bool get_Expired();
    public void set_Expired(bool value);
    public DateTime get_Expires();
    public void set_Expires(DateTime value);
    public string get_Name();
    public void set_Name(string value);
    internal bool InternalSetName(string value);
    public string get_Path();
    public void set_Path(string value);
    internal bool get_Plain();
    internal Cookie Clone();
    private static bool IsDomainEqualToHost(string domain, string host);
    internal bool VerifySetDefaults(CookieVariant variant, Uri uri, bool isLocalDomain, string localDomain, bool setDefault, bool shouldThrow);
    private static bool DomainCharsTest(string name);
    public string get_Port();
    public void set_Port(string value);
    internal Int32[] get_PortList();
    public bool get_Secure();
    public void set_Secure(bool value);
    public DateTime get_TimeStamp();
    public string get_Value();
    public void set_Value(string value);
    internal CookieVariant get_Variant();
    internal void set_Variant(CookieVariant value);
    internal string get_DomainKey();
    public int get_Version();
    public void set_Version(int value);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal void ToString(StringBuilder sb);
    internal string ToServerString();
}
[DefaultMemberAttribute("Item")]
public class System.Net.CookieCollection : object {
    private List`1<Cookie> _list;
    private DateTime _timeStamp;
    private bool _hasOtherVersions;
    public Cookie Item { get; }
    public Cookie Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal bool IsOtherVersionSeen { get; }
    public Cookie get_Item(int index);
    public Cookie get_Item(string name);
    public void Add(Cookie cookie);
    public void Add(CookieCollection cookies);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    internal DateTime TimeStamp(Stamp how);
    internal bool get_IsOtherVersionSeen();
    internal int InternalAdd(Cookie cookie, bool isStrict);
    internal int IndexOf(Cookie cookie);
    internal void RemoveAt(int idx);
    public sealed virtual IEnumerator GetEnumerator();
}
internal static class System.Net.CookieComparer : object {
    internal static int Compare(Cookie left, Cookie right);
}
public class System.Net.CookieContainer : object {
    public static int DefaultCookieLimit;
    public static int DefaultPerDomainCookieLimit;
    public static int DefaultCookieLengthLimit;
    private static HeaderVariantInfo[] s_headerInfo;
    private Dictionary`2<string, PathList> _domainTable;
    private int _maxCookieSize;
    private int _maxCookies;
    private int _maxCookiesPerDomain;
    private int _count;
    private string _fqdnMyDomain;
    public int Capacity { get; public set; }
    public int Count { get; }
    public int MaxCookieSize { get; public set; }
    public int PerDomainCapacity { get; public set; }
    internal CookieContainer(int capacity);
    internal CookieContainer(int capacity, int perDomainCapacity, int maxCookieSize);
    private static CookieContainer();
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_Count();
    public int get_MaxCookieSize();
    public void set_MaxCookieSize(int value);
    public int get_PerDomainCapacity();
    public void set_PerDomainCapacity(int value);
    internal void Add(Cookie cookie);
    internal void Add(Cookie cookie, bool throwOnError);
    private bool AgeCookies(string domain);
    private int ExpireCollection(CookieCollection cc);
    internal void Add(CookieCollection cookies);
    internal bool IsLocalDomain(string host);
    public void Add(Uri uri, Cookie cookie);
    public void Add(Uri uri, CookieCollection cookies);
    internal CookieCollection CookieCutter(Uri uri, string headerName, string setCookieHeader, bool isThrow);
    public CookieCollection GetCookies(Uri uri);
    internal CookieCollection InternalGetCookies(Uri uri);
    private void BuildCookieCollectionFromDomainMatches(Uri uri, bool isSecure, int port, CookieCollection& cookies, List`1<string> domainAttribute, bool matchOnlyPlainCookie);
    private void MergeUpdateCollections(CookieCollection& destination, CookieCollection source, int port, bool isSecure, bool isPlainOnly);
    public string GetCookieHeader(Uri uri);
    internal string GetCookieHeader(Uri uri, String& optCookie2);
    public void SetCookies(Uri uri, string cookieHeader);
}
public class System.Net.CookieException : FormatException {
    internal CookieException(string message);
    internal CookieException(string message, Exception inner);
}
internal class System.Net.CookieParser : object {
    private CookieTokenizer _tokenizer;
    private Cookie _savedCookie;
    internal CookieParser(string cookieString);
    internal string GetString();
    internal Cookie Get();
    internal Cookie GetServer();
    internal static string CheckQuoted(string value);
}
internal enum System.Net.CookieToken : Enum {
    public int value__;
    public static CookieToken Nothing;
    public static CookieToken NameValuePair;
    public static CookieToken Attribute;
    public static CookieToken EndToken;
    public static CookieToken EndCookie;
    public static CookieToken End;
    public static CookieToken Equals;
    public static CookieToken Comment;
    public static CookieToken CommentUrl;
    public static CookieToken CookieName;
    public static CookieToken Discard;
    public static CookieToken Domain;
    public static CookieToken Expires;
    public static CookieToken MaxAge;
    public static CookieToken Path;
    public static CookieToken Port;
    public static CookieToken Secure;
    public static CookieToken HttpOnly;
    public static CookieToken Unknown;
    public static CookieToken Version;
}
internal class System.Net.CookieTokenizer : object {
    private bool _eofCookie;
    private int _index;
    private int _length;
    private string _name;
    private bool _quoted;
    private int _start;
    private CookieToken _token;
    private int _tokenLength;
    private string _tokenStream;
    private string _value;
    private int _cookieStartIndex;
    private int _cookieLength;
    private static RecognizedAttribute[] s_recognizedAttributes;
    private static RecognizedAttribute[] s_recognizedServerAttributes;
    internal bool EndOfCookie { get; internal set; }
    internal bool Eof { get; }
    internal string Name { get; internal set; }
    internal bool Quoted { get; internal set; }
    internal CookieToken Token { get; internal set; }
    internal string Value { get; internal set; }
    internal CookieTokenizer(string tokenStream);
    private static CookieTokenizer();
    internal bool get_EndOfCookie();
    internal void set_EndOfCookie(bool value);
    internal bool get_Eof();
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_Quoted();
    internal void set_Quoted(bool value);
    internal CookieToken get_Token();
    internal void set_Token(CookieToken value);
    internal string get_Value();
    internal void set_Value(string value);
    internal string GetCookieString();
    internal string Extract();
    internal CookieToken FindNext(bool ignoreComma, bool ignoreEquals);
    internal CookieToken Next(bool first, bool parseResponseCookies);
    internal void Reset();
    internal CookieToken TokenFromName(bool parseResponseCookies);
}
internal enum System.Net.CookieVariant : Enum {
    public int value__;
    public static CookieVariant Unknown;
    public static CookieVariant Plain;
    public static CookieVariant Rfc2109;
    public static CookieVariant Rfc2965;
    public static CookieVariant Default;
}
public class System.Net.CredentialCache : object {
    private Dictionary`2<CredentialKey, NetworkCredential> _cache;
    private Dictionary`2<CredentialHostKey, NetworkCredential> _cacheForHosts;
    private int _version;
    public static ICredentials DefaultCredentials { get; }
    public static NetworkCredential DefaultNetworkCredentials { get; }
    public void Add(Uri uriPrefix, string authenticationType, NetworkCredential credential);
    public void Add(string host, int port, string authenticationType, NetworkCredential credential);
    public void Remove(Uri uriPrefix, string authenticationType);
    public void Remove(string host, int port, string authenticationType);
    public sealed virtual NetworkCredential GetCredential(Uri uriPrefix, string authenticationType);
    public sealed virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
    public sealed virtual IEnumerator GetEnumerator();
    public static ICredentials get_DefaultCredentials();
    public static NetworkCredential get_DefaultNetworkCredentials();
}
internal class System.Net.CredentialHostKey : ValueType {
    public string Host;
    public string AuthenticationType;
    public int Port;
    internal CredentialHostKey(string host, int port, string authenticationType);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(CredentialHostKey other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class System.Net.CredentialKey : object {
    public Uri UriPrefix;
    public int UriPrefixLength;
    public string AuthenticationType;
    internal CredentialKey(Uri uriPrefix, string authenticationType);
    internal bool Match(Uri uri, string authenticationType);
    private static bool IsPrefix(Uri uri, Uri prefixUri);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(CredentialKey other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Net.DecompressionMethods : Enum {
    public int value__;
    public static DecompressionMethods None;
    public static DecompressionMethods GZip;
    public static DecompressionMethods Deflate;
}
public class System.Net.DnsEndPoint : EndPoint {
    private string _host;
    private int _port;
    private AddressFamily _family;
    public string Host { get; }
    public AddressFamily AddressFamily { get; }
    public int Port { get; }
    public DnsEndPoint(string host, int port);
    public DnsEndPoint(string host, int port, AddressFamily addressFamily);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string get_Host();
    public virtual AddressFamily get_AddressFamily();
    public int get_Port();
}
public abstract class System.Net.EndPoint : object {
    public AddressFamily AddressFamily { get; }
    public virtual AddressFamily get_AddressFamily();
    public virtual SocketAddress Serialize();
    public virtual EndPoint Create(SocketAddress socketAddress);
}
[EventSourceAttribute]
internal class System.Net.EventSourceLogging : EventSource {
    private static EventSourceLogging s_log;
    public static EventSourceLogging Log { get; }
    private static EventSourceLogging();
    public static EventSourceLogging get_Log();
    [EventAttribute("1")]
public void DebugMessage(string message);
    [EventAttribute("2")]
public void DebugDumpArray(Byte[] bufferSegmentArray);
    [EventAttribute("3")]
public void WarningDumpArray(string message);
    [EventAttribute("4")]
public void FunctionStart(string functionName, string parameters);
    [EventAttribute("5")]
public void FunctionStop(string functionName, string result);
    [EventAttribute("6")]
public void WarningMessage(string message);
    [EventAttribute("7")]
public void AssertFailed(string message, string detailMessage);
    [EventAttribute("8")]
public void CriticalMessage(string message, string detailMessage);
}
internal static class System.Net.GlobalLog : object {
    [ThreadStaticAttribute]
private static Stack`1<ThreadKinds> t_threadKindStack;
    private static Stack`1<ThreadKinds> ThreadKindStack { get; }
    internal static ThreadKinds CurrentThreadKind { get; }
    public static bool IsEnabled { get; }
    private static Stack`1<ThreadKinds> get_ThreadKindStack();
    internal static ThreadKinds get_CurrentThreadKind();
    internal static IDisposable SetThreadKind(ThreadKinds kind);
    internal static void SetThreadSource(ThreadKinds source);
    internal static void ThreadContract(ThreadKinds kind, string errorMsg);
    internal static void ThreadContract(ThreadKinds kind, ThreadKinds allowedSources, string errorMsg);
    public static void Print(string msg);
    public static void Enter(string functionName);
    public static void Enter(string functionName, string parameters);
    public static void AssertFormat(string messageFormat, Object[] data);
    public static void Assert(string message);
    public static void Assert(string message, string detailMessage);
    public static void Leave(string functionName);
    public static void Leave(string functionName, string result);
    public static void Leave(string functionName, int returnval);
    public static void Leave(string functionName, bool returnval);
    public static void Dump(Byte[] buffer, int length);
    public static void Dump(Byte[] buffer, int offset, int length);
    public static bool get_IsEnabled();
}
internal class System.Net.HeaderVariantInfo : ValueType {
    private string _name;
    private CookieVariant _variant;
    internal string Name { get; }
    internal CookieVariant Variant { get; }
    internal HeaderVariantInfo(string name, CookieVariant variant);
    internal string get_Name();
    internal CookieVariant get_Variant();
}
internal static class System.Net.HttpKnownHeaderNames : object {
    public static string Accept;
    public static string AcceptCharset;
    public static string AcceptEncoding;
    public static string AcceptLanguage;
    public static string AcceptRanges;
    public static string Age;
    public static string Allow;
    public static string Authorization;
    public static string CacheControl;
    public static string Connection;
    public static string ContentDisposition;
    public static string ContentEncoding;
    public static string ContentLanguage;
    public static string ContentLength;
    public static string ContentLocation;
    public static string ContentMD5;
    public static string ContentRange;
    public static string ContentType;
    public static string Cookie;
    public static string Cookie2;
    public static string Date;
    public static string ETag;
    public static string Expect;
    public static string Expires;
    public static string From;
    public static string Host;
    public static string IfMatch;
    public static string IfModifiedSince;
    public static string IfNoneMatch;
    public static string IfRange;
    public static string IfUnmodifiedSince;
    public static string KeepAlive;
    public static string LastModified;
    public static string Location;
    public static string MaxForwards;
    public static string Origin;
    public static string P3P;
    public static string Pragma;
    public static string ProxyAuthenticate;
    public static string ProxyAuthorization;
    public static string ProxyConnection;
    public static string Range;
    public static string Referer;
    public static string RetryAfter;
    public static string SecWebSocketAccept;
    public static string SecWebSocketExtensions;
    public static string SecWebSocketKey;
    public static string SecWebSocketProtocol;
    public static string SecWebSocketVersion;
    public static string Server;
    public static string SetCookie;
    public static string SetCookie2;
    public static string TE;
    public static string Trailer;
    public static string TransferEncoding;
    public static string Upgrade;
    public static string UserAgent;
    public static string Vary;
    public static string Via;
    public static string WWWAuthenticate;
    public static string Warning;
    public static string XAspNetVersion;
    public static string XPoweredBy;
}
public enum System.Net.HttpStatusCode : Enum {
    public int value__;
    public static HttpStatusCode Continue;
    public static HttpStatusCode SwitchingProtocols;
    public static HttpStatusCode OK;
    public static HttpStatusCode Created;
    public static HttpStatusCode Accepted;
    public static HttpStatusCode NonAuthoritativeInformation;
    public static HttpStatusCode NoContent;
    public static HttpStatusCode ResetContent;
    public static HttpStatusCode PartialContent;
    public static HttpStatusCode MultipleChoices;
    public static HttpStatusCode Ambiguous;
    public static HttpStatusCode MovedPermanently;
    public static HttpStatusCode Moved;
    public static HttpStatusCode Found;
    public static HttpStatusCode Redirect;
    public static HttpStatusCode SeeOther;
    public static HttpStatusCode RedirectMethod;
    public static HttpStatusCode NotModified;
    public static HttpStatusCode UseProxy;
    public static HttpStatusCode Unused;
    public static HttpStatusCode TemporaryRedirect;
    public static HttpStatusCode RedirectKeepVerb;
    public static HttpStatusCode BadRequest;
    public static HttpStatusCode Unauthorized;
    public static HttpStatusCode PaymentRequired;
    public static HttpStatusCode Forbidden;
    public static HttpStatusCode NotFound;
    public static HttpStatusCode MethodNotAllowed;
    public static HttpStatusCode NotAcceptable;
    public static HttpStatusCode ProxyAuthenticationRequired;
    public static HttpStatusCode RequestTimeout;
    public static HttpStatusCode Conflict;
    public static HttpStatusCode Gone;
    public static HttpStatusCode LengthRequired;
    public static HttpStatusCode PreconditionFailed;
    public static HttpStatusCode RequestEntityTooLarge;
    public static HttpStatusCode RequestUriTooLong;
    public static HttpStatusCode UnsupportedMediaType;
    public static HttpStatusCode RequestedRangeNotSatisfiable;
    public static HttpStatusCode ExpectationFailed;
    public static HttpStatusCode UpgradeRequired;
    public static HttpStatusCode InternalServerError;
    public static HttpStatusCode NotImplemented;
    public static HttpStatusCode BadGateway;
    public static HttpStatusCode ServiceUnavailable;
    public static HttpStatusCode GatewayTimeout;
    public static HttpStatusCode HttpVersionNotSupported;
}
public interface System.Net.ICredentials {
    public abstract virtual NetworkCredential GetCredential(Uri uri, string authType);
}
public interface System.Net.ICredentialsByHost {
    public abstract virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
}
internal class System.Net.InternalException : Exception {
}
public class System.Net.IPAddress : object {
    public static IPAddress Any;
    public static IPAddress Loopback;
    public static IPAddress Broadcast;
    public static IPAddress None;
    internal static long LoopbackMask;
    public static IPAddress IPv6Any;
    public static IPAddress IPv6Loopback;
    public static IPAddress IPv6None;
    private UInt32 _addressOrScopeId;
    private UInt16[] _numbers;
    private string _toString;
    private int _hashCode;
    internal static int NumberOfLabels;
    private bool IsIPv4 { get; }
    private bool IsIPv6 { get; }
    private UInt32 PrivateAddress { get; private set; }
    private UInt32 PrivateScopeId { get; private set; }
    public AddressFamily AddressFamily { get; }
    internal long Address { get; }
    public long ScopeId { get; public set; }
    public bool IsIPv6Multicast { get; }
    public bool IsIPv6LinkLocal { get; }
    public bool IsIPv6SiteLocal { get; }
    public bool IsIPv6Teredo { get; }
    public bool IsIPv4MappedToIPv6 { get; }
    public IPAddress(long newAddress);
    public IPAddress(Byte[] address, long scopeid);
    private IPAddress(UInt16[] numbers, UInt32 scopeid);
    public IPAddress(Byte[] address);
    internal IPAddress(int newAddress);
    private static IPAddress();
    private bool get_IsIPv4();
    private bool get_IsIPv6();
    private UInt32 get_PrivateAddress();
    private void set_PrivateAddress(UInt32 value);
    private UInt32 get_PrivateScopeId();
    private void set_PrivateScopeId(UInt32 value);
    public static bool TryParse(string ipString, IPAddress& address);
    public static IPAddress Parse(string ipString);
    public Byte[] GetAddressBytes();
    public AddressFamily get_AddressFamily();
    internal long get_Address();
    public long get_ScopeId();
    public void set_ScopeId(long value);
    public virtual string ToString();
    public static long HostToNetworkOrder(long host);
    public static int HostToNetworkOrder(int host);
    public static short HostToNetworkOrder(short host);
    public static long NetworkToHostOrder(long network);
    public static int NetworkToHostOrder(int network);
    public static short NetworkToHostOrder(short network);
    public static bool IsLoopback(IPAddress address);
    public bool get_IsIPv6Multicast();
    public bool get_IsIPv6LinkLocal();
    public bool get_IsIPv6SiteLocal();
    public bool get_IsIPv6Teredo();
    public bool get_IsIPv4MappedToIPv6();
    internal bool Equals(object comparandObj, bool compareScopeId);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    internal IPAddress Snapshot();
    public IPAddress MapToIPv6();
    public IPAddress MapToIPv4();
}
internal static class System.Net.IPAddressPal : object {
    public static UInt32 SuccessErrorCode;
    public static UInt32 Ipv4AddressToString(Byte[] address, StringBuilder buffer);
    public static UInt32 Ipv6AddressToString(Byte[] address, UInt32 scopeId, StringBuilder buffer);
    public static UInt32 Ipv4StringToAddress(string ipString, Byte[] bytes, UInt16& port);
    public static UInt32 Ipv6StringToAddress(string ipString, Byte[] bytes, UInt32& scope);
    public static SocketError GetSocketErrorForErrorCode(UInt32 status);
}
internal class System.Net.IPAddressParser : object {
    internal static int INET_ADDRSTRLEN;
    internal static int INET6_ADDRSTRLEN;
    internal static IPAddress Parse(string ipString, bool tryParse);
    internal static string IPv4AddressToString(Byte[] numbers);
    internal static string IPv6AddressToString(Byte[] numbers, UInt32 scopeId);
}
internal static class System.Net.IPAddressParserStatics : object {
    public static int IPv4AddressBytes;
    public static int IPv6AddressBytes;
}
public class System.Net.IPEndPoint : EndPoint {
    public static int MinPort;
    public static int MaxPort;
    private IPAddress _address;
    private int _port;
    internal static int AnyPort;
    internal static IPEndPoint Any;
    internal static IPEndPoint IPv6Any;
    public AddressFamily AddressFamily { get; }
    public IPAddress Address { get; public set; }
    public int Port { get; public set; }
    public IPEndPoint(long address, int port);
    public IPEndPoint(IPAddress address, int port);
    private static IPEndPoint();
    public virtual AddressFamily get_AddressFamily();
    public IPAddress get_Address();
    public void set_Address(IPAddress value);
    public int get_Port();
    public void set_Port(int value);
    public virtual string ToString();
    public virtual SocketAddress Serialize();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    internal IPEndPoint Snapshot();
}
public interface System.Net.IWebProxy {
    public ICredentials Credentials { get; public set; }
    public abstract virtual Uri GetProxy(Uri destination);
    public abstract virtual bool IsBypassed(Uri host);
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
}
internal static class System.Net.LoggingHash : object {
    internal static string GetObjectName(object obj);
    internal static int HashInt(object objectValue);
    internal static string ObjectToString(object objectValue);
    private static string ExceptionMessage(Exception exception);
    internal static string HashString(object objectValue);
    internal static Object[] GetObjectLogHash(object obj);
}
public class System.Net.NetworkCredential : object {
    private string _domain;
    private string _userName;
    private string _password;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string Domain { get; public set; }
    public NetworkCredential(string userName, string password);
    public NetworkCredential(string userName, string password, string domain);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Domain();
    public void set_Domain(string value);
    internal string InternalGetUserName();
    internal string InternalGetPassword();
    internal string InternalGetDomain();
    internal string InternalGetDomainUserName();
    public sealed virtual NetworkCredential GetCredential(Uri uri, string authenticationType);
    public sealed virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
}
internal class System.Net.NetworkInformation.HostInformation : object {
    internal static string HostName { get; }
    internal static string DomainName { get; }
    internal static string get_HostName();
    internal static string get_DomainName();
}
internal static class System.Net.NetworkInformation.HostInformationPal : object {
    private static FIXED_INFO s_fixedInfo;
    private static bool s_fixedInfoInitialized;
    private static object s_syncObject;
    private static HostInformationPal();
    public static string GetHostName();
    public static string GetDomainName();
    public static FIXED_INFO GetFixedInfo();
    private static void EnsureFixedInfo();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.IPAddressCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddress Item { get; }
    public virtual void CopyTo(IPAddress[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(IPAddress address);
    public virtual bool Contains(IPAddress address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<IPAddress> GetEnumerator();
    public virtual IPAddress get_Item(int index);
    public virtual bool Remove(IPAddress address);
    public virtual void Clear();
}
[DefaultMemberAttribute("Item")]
internal class System.Net.PathList : ValueType {
    private SortedList`2<string, CookieCollection> _list;
    public int Count { get; }
    public CookieCollection Item { get; public set; }
    public object SyncRoot { get; }
    private PathList(SortedList`2<string, CookieCollection> list);
    public static PathList Create();
    public int get_Count();
    public int GetCookiesCount();
    public CookieCollection get_Item(string s);
    public void set_Item(string s, CookieCollection value);
    public IEnumerator`1<KeyValuePair`2<string, CookieCollection>> GetEnumerator();
    public object get_SyncRoot();
}
public enum System.Net.Security.AuthenticationLevel : Enum {
    public int value__;
    public static AuthenticationLevel None;
    public static AuthenticationLevel MutualAuthRequested;
    public static AuthenticationLevel MutualAuthRequired;
}
[FlagsAttribute]
public enum System.Net.Security.SslPolicyErrors : Enum {
    public int value__;
    public static SslPolicyErrors None;
    public static SslPolicyErrors RemoteCertificateNotAvailable;
    public static SslPolicyErrors RemoteCertificateNameMismatch;
    public static SslPolicyErrors RemoteCertificateChainErrors;
}
[DefaultMemberAttribute("Item")]
public class System.Net.SocketAddress : object {
    internal static int IPv6AddressSize;
    internal static int IPv4AddressSize;
    internal int InternalSize;
    internal Byte[] Buffer;
    private static int MinSize;
    private static int MaxSize;
    private bool _changed;
    private int _hash;
    public AddressFamily Family { get; }
    public int Size { get; }
    public byte Item { get; public set; }
    public SocketAddress(AddressFamily family);
    public SocketAddress(AddressFamily family, int size);
    internal SocketAddress(IPAddress ipAddress);
    internal SocketAddress(IPAddress ipaddress, int port);
    private static SocketAddress();
    public AddressFamily get_Family();
    public int get_Size();
    public byte get_Item(int offset);
    public void set_Item(int offset, byte value);
    internal IPAddress GetIPAddress();
    internal IPEndPoint GetIPEndPoint();
    internal void CopyAddressSizeIntoBuffer();
    internal int GetAddressSizeOffset();
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class System.Net.SocketAddressPal : object {
    public static int IPv6AddressSize;
    public static int IPv4AddressSize;
    public static int DataOffset;
    public static AddressFamily GetAddressFamily(Byte[] buffer);
    public static void SetAddressFamily(Byte[] buffer, AddressFamily family);
    public static ushort GetPort(Byte[] buffer);
    public static void SetPort(Byte[] buffer, ushort port);
    public static UInt32 GetIPv4Address(Byte[] buffer);
    public static void GetIPv6Address(Byte[] buffer, Byte[] address, UInt32& scope);
    public static void SetIPv4Address(Byte[] buffer, UInt32 address);
    public static void SetIPv6Address(Byte[] buffer, Byte[] address, UInt32 scope);
}
public enum System.Net.Sockets.AddressFamily : Enum {
    public int value__;
    public static AddressFamily Unknown;
    public static AddressFamily Unspecified;
    public static AddressFamily Unix;
    public static AddressFamily InterNetwork;
    public static AddressFamily ImpLink;
    public static AddressFamily Pup;
    public static AddressFamily Chaos;
    public static AddressFamily NS;
    public static AddressFamily Ipx;
    public static AddressFamily Iso;
    public static AddressFamily Osi;
    public static AddressFamily Ecma;
    public static AddressFamily DataKit;
    public static AddressFamily Ccitt;
    public static AddressFamily Sna;
    public static AddressFamily DecNet;
    public static AddressFamily DataLink;
    public static AddressFamily Lat;
    public static AddressFamily HyperChannel;
    public static AddressFamily AppleTalk;
    public static AddressFamily NetBios;
    public static AddressFamily VoiceView;
    public static AddressFamily FireFox;
    public static AddressFamily Banyan;
    public static AddressFamily Atm;
    public static AddressFamily InterNetworkV6;
    public static AddressFamily Cluster;
    public static AddressFamily Ieee12844;
    public static AddressFamily Irda;
    public static AddressFamily NetworkDesigners;
    public static AddressFamily Max;
}
public enum System.Net.Sockets.SocketError : Enum {
    public int value__;
    public static SocketError Success;
    public static SocketError SocketError;
    public static SocketError Interrupted;
    public static SocketError AccessDenied;
    public static SocketError Fault;
    public static SocketError InvalidArgument;
    public static SocketError TooManyOpenSockets;
    public static SocketError WouldBlock;
    public static SocketError InProgress;
    public static SocketError AlreadyInProgress;
    public static SocketError NotSocket;
    public static SocketError DestinationAddressRequired;
    public static SocketError MessageSize;
    public static SocketError ProtocolType;
    public static SocketError ProtocolOption;
    public static SocketError ProtocolNotSupported;
    public static SocketError SocketNotSupported;
    public static SocketError OperationNotSupported;
    public static SocketError ProtocolFamilyNotSupported;
    public static SocketError AddressFamilyNotSupported;
    public static SocketError AddressAlreadyInUse;
    public static SocketError AddressNotAvailable;
    public static SocketError NetworkDown;
    public static SocketError NetworkUnreachable;
    public static SocketError NetworkReset;
    public static SocketError ConnectionAborted;
    public static SocketError ConnectionReset;
    public static SocketError NoBufferSpaceAvailable;
    public static SocketError IsConnected;
    public static SocketError NotConnected;
    public static SocketError Shutdown;
    public static SocketError TimedOut;
    public static SocketError ConnectionRefused;
    public static SocketError HostDown;
    public static SocketError HostUnreachable;
    public static SocketError ProcessLimit;
    public static SocketError SystemNotReady;
    public static SocketError VersionNotSupported;
    public static SocketError NotInitialized;
    public static SocketError Disconnecting;
    public static SocketError TypeNotFound;
    public static SocketError HostNotFound;
    public static SocketError TryAgain;
    public static SocketError NoRecovery;
    public static SocketError NoData;
    public static SocketError IOPending;
    public static SocketError OperationAborted;
}
public class System.Net.Sockets.SocketException : Win32Exception {
    private SocketError _errorCode;
    public string Message { get; }
    public SocketError SocketErrorCode { get; }
    public SocketException(int errorCode);
    internal SocketException(SocketError socketError);
    internal SocketException(SocketError errorCode, UInt32 platformError);
    public virtual string get_Message();
    public SocketError get_SocketErrorCode();
    private static int GetNativeErrorForSocketError(SocketError error);
}
[FlagsAttribute]
internal enum System.Net.SourceLevels : Enum {
    public int value__;
    public static SourceLevels Off;
    public static SourceLevels Critical;
    public static SourceLevels Error;
    public static SourceLevels Warning;
    public static SourceLevels Information;
    public static SourceLevels Verbose;
    public static SourceLevels ActivityTracing;
    public static SourceLevels All;
}
internal class System.Net.SourceSwitch : object {
    public bool ShouldTrace(TraceEventType eventType);
}
internal class System.Net.SystemNetworkCredential : NetworkCredential {
    internal static SystemNetworkCredential s_defaultCredential;
    private static SystemNetworkCredential();
}
internal static class System.Net.TcpValidationHelpers : object {
    public static bool ValidatePortNumber(int port);
}
[FlagsAttribute]
internal enum System.Net.ThreadKinds : Enum {
    public int value__;
    public static ThreadKinds Unknown;
    public static ThreadKinds User;
    public static ThreadKinds System;
    public static ThreadKinds Sync;
    public static ThreadKinds Async;
    public static ThreadKinds Timer;
    public static ThreadKinds CompletionPort;
    public static ThreadKinds Worker;
    public static ThreadKinds Finalization;
    public static ThreadKinds Other;
    public static ThreadKinds OwnerMask;
    public static ThreadKinds SyncMask;
    public static ThreadKinds SourceMask;
    public static ThreadKinds SafeSources;
    public static ThreadKinds ThreadPool;
}
internal enum System.Net.TraceEventType : Enum {
    public int value__;
    public static TraceEventType Critical;
    public static TraceEventType Error;
    public static TraceEventType Warning;
    public static TraceEventType Information;
    public static TraceEventType Verbose;
    public static TraceEventType Start;
    public static TraceEventType Stop;
    public static TraceEventType Suspend;
    public static TraceEventType Resume;
    public static TraceEventType Transfer;
}
internal class System.Net.TraceSource : object {
    public SourceSwitch Switch { get; }
    public TraceSource(string name);
    public TraceSource(string name, SourceLevels defaultLevel);
    public void Close();
    public void Flush();
    public void TraceEvent(TraceEventType eventType, int id);
    public void TraceEvent(TraceEventType eventType, int id, string message);
    public void TraceEvent(TraceEventType eventType, int id, string format, Object[] args);
    public void TraceData(TraceEventType eventType, int id, object data);
    public void TraceData(TraceEventType eventType, int id, Object[] data);
    public void TraceInformation(string message);
    public void TraceInformation(string format, Object[] args);
    public void TraceTransfer(int id, string message, Guid relatedActivityId);
    public SourceSwitch get_Switch();
}
public abstract class System.Net.TransportContext : object {
    public abstract virtual ChannelBinding GetChannelBinding(ChannelBindingKind kind);
}
internal class System.Net.UriScheme : object {
    public static string Http;
    public static string Https;
    public static string Ws;
    public static string Wss;
    public static string SchemeDelimiter;
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
public enum System.Security.Authentication.CipherAlgorithmType : Enum {
    public int value__;
    public static CipherAlgorithmType None;
    public static CipherAlgorithmType Rc2;
    public static CipherAlgorithmType Rc4;
    public static CipherAlgorithmType Des;
    public static CipherAlgorithmType TripleDes;
    public static CipherAlgorithmType Aes;
    public static CipherAlgorithmType Aes128;
    public static CipherAlgorithmType Aes192;
    public static CipherAlgorithmType Aes256;
    public static CipherAlgorithmType Null;
}
public enum System.Security.Authentication.ExchangeAlgorithmType : Enum {
    public int value__;
    public static ExchangeAlgorithmType None;
    public static ExchangeAlgorithmType RsaSign;
    public static ExchangeAlgorithmType RsaKeyX;
    public static ExchangeAlgorithmType DiffieHellman;
}
public abstract class System.Security.Authentication.ExtendedProtection.ChannelBinding : SafeHandle {
    public int Size { get; }
    public bool IsInvalid { get; }
    protected ChannelBinding(bool ownsHandle);
    public abstract virtual int get_Size();
    public virtual bool get_IsInvalid();
}
public enum System.Security.Authentication.ExtendedProtection.ChannelBindingKind : Enum {
    public int value__;
    public static ChannelBindingKind Unknown;
    public static ChannelBindingKind Unique;
    public static ChannelBindingKind Endpoint;
}
public enum System.Security.Authentication.HashAlgorithmType : Enum {
    public int value__;
    public static HashAlgorithmType None;
    public static HashAlgorithmType Md5;
    public static HashAlgorithmType Sha1;
}
[FlagsAttribute]
public enum System.Security.Authentication.SslProtocols : Enum {
    public int value__;
    public static SslProtocols None;
    public static SslProtocols Ssl2;
    public static SslProtocols Ssl3;
    public static SslProtocols Tls;
    public static SslProtocols Tls11;
    public static SslProtocols Tls12;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string net_nonClsCompliantException { get; }
    internal static string net_illegalConfigWith { get; }
    internal static string net_illegalConfigWithout { get; }
    internal static string net_baddate { get; }
    internal static string net_writestarted { get; }
    internal static string net_clsmall { get; }
    internal static string net_reqsubmitted { get; }
    internal static string net_rspsubmitted { get; }
    internal static string net_ftp_no_http_cmd { get; }
    internal static string net_ftp_invalid_method_name { get; }
    internal static string net_ftp_invalid_renameto { get; }
    internal static string net_ftp_no_defaultcreds { get; }
    internal static string net_ftpnoresponse { get; }
    internal static string net_ftp_response_invalid_format { get; }
    internal static string net_ftp_no_offsetforhttp { get; }
    internal static string net_ftp_invalid_uri { get; }
    internal static string net_ftp_invalid_status_response { get; }
    internal static string net_ftp_server_failed_passive { get; }
    internal static string net_ftp_active_address_different { get; }
    internal static string net_ftp_proxy_does_not_support_ssl { get; }
    internal static string net_ftp_invalid_response_filename { get; }
    internal static string net_ftp_unsupported_method { get; }
    internal static string net_resubmitcanceled { get; }
    internal static string net_redirect_perm { get; }
    internal static string net_resubmitprotofailed { get; }
    internal static string net_needchunked { get; }
    internal static string net_nochunked { get; }
    internal static string net_nochunkuploadonhttp10 { get; }
    internal static string net_connarg { get; }
    internal static string net_no100 { get; }
    internal static string net_fromto { get; }
    internal static string net_rangetoosmall { get; }
    internal static string net_entitytoobig { get; }
    internal static string net_invalidversion { get; }
    internal static string net_invalidstatus { get; }
    internal static string net_toosmall { get; }
    internal static string net_toolong { get; }
    internal static string net_connclosed { get; }
    internal static string net_noseek { get; }
    internal static string net_servererror { get; }
    internal static string net_nouploadonget { get; }
    internal static string net_mutualauthfailed { get; }
    internal static string net_invasync { get; }
    internal static string net_inasync { get; }
    internal static string net_mustbeuri { get; }
    internal static string net_format_shexp { get; }
    internal static string net_cannot_load_proxy_helper { get; }
    internal static string net_invalid_host { get; }
    internal static string net_repcall { get; }
    internal static string net_wrongversion { get; }
    internal static string net_badmethod { get; }
    internal static string net_io_notenoughbyteswritten { get; }
    internal static string net_io_timeout_use_ge_zero { get; }
    internal static string net_io_timeout_use_gt_zero { get; }
    internal static string net_io_no_0timeouts { get; }
    internal static string net_requestaborted { get; }
    internal static string net_tooManyRedirections { get; }
    internal static string net_authmodulenotregistered { get; }
    internal static string net_authschemenotregistered { get; }
    internal static string net_proxyschemenotsupported { get; }
    internal static string net_maxsrvpoints { get; }
    internal static string net_unknown_prefix { get; }
    internal static string net_notconnected { get; }
    internal static string net_notstream { get; }
    internal static string net_timeout { get; }
    internal static string net_nocontentlengthonget { get; }
    internal static string net_contentlengthmissing { get; }
    internal static string net_nonhttpproxynotallowed { get; }
    internal static string net_nottoken { get; }
    internal static string net_rangetype { get; }
    internal static string net_need_writebuffering { get; }
    internal static string net_securitypackagesupport { get; }
    internal static string net_securityprotocolnotsupported { get; }
    internal static string net_nodefaultcreds { get; }
    internal static string net_stopped { get; }
    internal static string net_udpconnected { get; }
    internal static string net_readonlystream { get; }
    internal static string net_writeonlystream { get; }
    internal static string net_no_concurrent_io_allowed { get; }
    internal static string net_needmorethreads { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_PropertyNotImplementedException { get; }
    internal static string net_MethodNotSupportedException { get; }
    internal static string net_PropertyNotSupportedException { get; }
    internal static string net_ProtocolNotSupportedException { get; }
    internal static string net_SelectModeNotSupportedException { get; }
    internal static string net_InvalidSocketHandle { get; }
    internal static string net_InvalidAddressFamily { get; }
    internal static string net_InvalidEndPointAddressFamily { get; }
    internal static string net_InvalidSocketAddressSize { get; }
    internal static string net_invalidAddressList { get; }
    internal static string net_invalidPingBufferSize { get; }
    internal static string net_cant_perform_during_shutdown { get; }
    internal static string net_cant_create_environment { get; }
    internal static string net_completed_result { get; }
    internal static string net_protocol_invalid_family { get; }
    internal static string net_protocol_invalid_multicast_family { get; }
    internal static string net_empty_osinstalltype { get; }
    internal static string net_unknown_osinstalltype { get; }
    internal static string net_cant_determine_osinstalltype { get; }
    internal static string net_osinstalltype { get; }
    internal static string net_entire_body_not_written { get; }
    internal static string net_must_provide_request_body { get; }
    internal static string net_ssp_dont_support_cbt { get; }
    internal static string net_sockets_zerolist { get; }
    internal static string net_sockets_blocking { get; }
    internal static string net_sockets_useblocking { get; }
    internal static string net_sockets_select { get; }
    internal static string net_sockets_toolarge_select { get; }
    internal static string net_sockets_empty_select { get; }
    internal static string net_sockets_mustbind { get; }
    internal static string net_sockets_mustlisten { get; }
    internal static string net_sockets_mustnotlisten { get; }
    internal static string net_sockets_mustnotbebound { get; }
    internal static string net_sockets_namedmustnotbebound { get; }
    internal static string net_sockets_invalid_socketinformation { get; }
    internal static string net_sockets_invalid_ipaddress_length { get; }
    internal static string net_sockets_invalid_optionValue { get; }
    internal static string net_sockets_invalid_optionValue_all { get; }
    internal static string net_sockets_invalid_dnsendpoint { get; }
    internal static string net_sockets_disconnectedConnect { get; }
    internal static string net_sockets_disconnectedAccept { get; }
    internal static string net_tcplistener_mustbestopped { get; }
    internal static string net_sockets_no_duplicate_async { get; }
    internal static string net_socketopinprogress { get; }
    internal static string net_buffercounttoosmall { get; }
    internal static string net_multibuffernotsupported { get; }
    internal static string net_ambiguousbuffers { get; }
    internal static string net_sockets_ipv6only { get; }
    internal static string net_perfcounter_initialized_success { get; }
    internal static string net_perfcounter_initialized_error { get; }
    internal static string net_perfcounter_nocategory { get; }
    internal static string net_perfcounter_initialization_started { get; }
    internal static string net_perfcounter_cant_queue_workitem { get; }
    internal static string net_config_proxy { get; }
    internal static string net_config_proxy_module_not_public { get; }
    internal static string net_config_authenticationmodules { get; }
    internal static string net_config_webrequestmodules { get; }
    internal static string net_config_requestcaching { get; }
    internal static string net_config_section_permission { get; }
    internal static string net_config_element_permission { get; }
    internal static string net_config_property_permission { get; }
    internal static string net_WebResponseParseError_InvalidHeaderName { get; }
    internal static string net_WebResponseParseError_InvalidContentLength { get; }
    internal static string net_WebResponseParseError_IncompleteHeaderLine { get; }
    internal static string net_WebResponseParseError_CrLfError { get; }
    internal static string net_WebResponseParseError_InvalidChunkFormat { get; }
    internal static string net_WebResponseParseError_UnexpectedServerResponse { get; }
    internal static string net_webstatus_Success { get; }
    internal static string net_webstatus_NameResolutionFailure { get; }
    internal static string net_webstatus_ConnectFailure { get; }
    internal static string net_webstatus_ReceiveFailure { get; }
    internal static string net_webstatus_SendFailure { get; }
    internal static string net_webstatus_PipelineFailure { get; }
    internal static string net_webstatus_RequestCanceled { get; }
    internal static string net_webstatus_ConnectionClosed { get; }
    internal static string net_webstatus_TrustFailure { get; }
    internal static string net_webstatus_SecureChannelFailure { get; }
    internal static string net_webstatus_ServerProtocolViolation { get; }
    internal static string net_webstatus_KeepAliveFailure { get; }
    internal static string net_webstatus_ProxyNameResolutionFailure { get; }
    internal static string net_webstatus_MessageLengthLimitExceeded { get; }
    internal static string net_webstatus_CacheEntryNotFound { get; }
    internal static string net_webstatus_RequestProhibitedByCachePolicy { get; }
    internal static string net_webstatus_Timeout { get; }
    internal static string net_webstatus_RequestProhibitedByProxy { get; }
    internal static string net_InvalidStatusCode { get; }
    internal static string net_ftpstatuscode_ServiceNotAvailable { get; }
    internal static string net_ftpstatuscode_CantOpenData { get; }
    internal static string net_ftpstatuscode_ConnectionClosed { get; }
    internal static string net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy { get; }
    internal static string net_ftpstatuscode_ActionAbortedLocalProcessingError { get; }
    internal static string net_ftpstatuscode_ActionNotTakenInsufficentSpace { get; }
    internal static string net_ftpstatuscode_CommandSyntaxError { get; }
    internal static string net_ftpstatuscode_ArgumentSyntaxError { get; }
    internal static string net_ftpstatuscode_CommandNotImplemented { get; }
    internal static string net_ftpstatuscode_BadCommandSequence { get; }
    internal static string net_ftpstatuscode_NotLoggedIn { get; }
    internal static string net_ftpstatuscode_AccountNeeded { get; }
    internal static string net_ftpstatuscode_ActionNotTakenFileUnavailable { get; }
    internal static string net_ftpstatuscode_ActionAbortedUnknownPageType { get; }
    internal static string net_ftpstatuscode_FileActionAborted { get; }
    internal static string net_ftpstatuscode_ActionNotTakenFilenameNotAllowed { get; }
    internal static string net_httpstatuscode_NoContent { get; }
    internal static string net_httpstatuscode_NonAuthoritativeInformation { get; }
    internal static string net_httpstatuscode_ResetContent { get; }
    internal static string net_httpstatuscode_PartialContent { get; }
    internal static string net_httpstatuscode_MultipleChoices { get; }
    internal static string net_httpstatuscode_Ambiguous { get; }
    internal static string net_httpstatuscode_MovedPermanently { get; }
    internal static string net_httpstatuscode_Moved { get; }
    internal static string net_httpstatuscode_Found { get; }
    internal static string net_httpstatuscode_Redirect { get; }
    internal static string net_httpstatuscode_SeeOther { get; }
    internal static string net_httpstatuscode_RedirectMethod { get; }
    internal static string net_httpstatuscode_NotModified { get; }
    internal static string net_httpstatuscode_UseProxy { get; }
    internal static string net_httpstatuscode_TemporaryRedirect { get; }
    internal static string net_httpstatuscode_RedirectKeepVerb { get; }
    internal static string net_httpstatuscode_BadRequest { get; }
    internal static string net_httpstatuscode_Unauthorized { get; }
    internal static string net_httpstatuscode_PaymentRequired { get; }
    internal static string net_httpstatuscode_Forbidden { get; }
    internal static string net_httpstatuscode_NotFound { get; }
    internal static string net_httpstatuscode_MethodNotAllowed { get; }
    internal static string net_httpstatuscode_NotAcceptable { get; }
    internal static string net_httpstatuscode_ProxyAuthenticationRequired { get; }
    internal static string net_httpstatuscode_RequestTimeout { get; }
    internal static string net_httpstatuscode_Conflict { get; }
    internal static string net_httpstatuscode_Gone { get; }
    internal static string net_httpstatuscode_LengthRequired { get; }
    internal static string net_httpstatuscode_InternalServerError { get; }
    internal static string net_httpstatuscode_NotImplemented { get; }
    internal static string net_httpstatuscode_BadGateway { get; }
    internal static string net_httpstatuscode_ServiceUnavailable { get; }
    internal static string net_httpstatuscode_GatewayTimeout { get; }
    internal static string net_httpstatuscode_HttpVersionNotSupported { get; }
    internal static string net_uri_BadScheme { get; }
    internal static string net_uri_BadFormat { get; }
    internal static string net_uri_BadUserPassword { get; }
    internal static string net_uri_BadHostName { get; }
    internal static string net_uri_BadAuthority { get; }
    internal static string net_uri_BadAuthorityTerminator { get; }
    internal static string net_uri_EmptyUri { get; }
    internal static string net_uri_BadString { get; }
    internal static string net_uri_MustRootedPath { get; }
    internal static string net_uri_BadPort { get; }
    internal static string net_uri_SizeLimit { get; }
    internal static string net_uri_SchemeLimit { get; }
    internal static string net_uri_NotAbsolute { get; }
    internal static string net_uri_PortOutOfRange { get; }
    internal static string net_uri_UserDrivenParsing { get; }
    internal static string net_uri_AlreadyRegistered { get; }
    internal static string net_uri_NeedFreshParser { get; }
    internal static string net_uri_CannotCreateRelative { get; }
    internal static string net_uri_InvalidUriKind { get; }
    internal static string net_uri_BadUnicodeHostForIdn { get; }
    internal static string net_uri_GenericAuthorityNotDnsSafe { get; }
    internal static string net_uri_NotJustSerialization { get; }
    internal static string net_emptystringcall { get; }
    internal static string net_emptystringset { get; }
    internal static string net_headers_req { get; }
    internal static string net_headers_rsp { get; }
    internal static string net_headers_toolong { get; }
    internal static string net_WebHeaderInvalidControlChars { get; }
    internal static string net_WebHeaderInvalidCRLFChars { get; }
    internal static string net_WebHeaderInvalidHeaderChars { get; }
    internal static string net_WebHeaderInvalidNonAsciiChars { get; }
    internal static string net_WebHeaderMissingColon { get; }
    internal static string net_headerrestrict { get; }
    internal static string net_io_completionportwasbound { get; }
    internal static string net_io_writefailure { get; }
    internal static string net_io_readfailure { get; }
    internal static string net_io_connectionclosed { get; }
    internal static string net_io_transportfailure { get; }
    internal static string net_io_internal_bind { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidnestedcall { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_io_must_be_rw_stream { get; }
    internal static string net_io_header_id { get; }
    internal static string net_io_out_range { get; }
    internal static string net_io_encrypt { get; }
    internal static string net_io_decrypt { get; }
    internal static string net_io_read { get; }
    internal static string net_io_write { get; }
    internal static string net_io_eof { get; }
    internal static string net_io_async_result { get; }
    internal static string net_listener_mustcall { get; }
    internal static string net_listener_mustcompletecall { get; }
    internal static string net_listener_callinprogress { get; }
    internal static string net_listener_scheme { get; }
    internal static string net_listener_host { get; }
    internal static string net_listener_slash { get; }
    internal static string net_listener_repcall { get; }
    internal static string net_listener_invalid_cbt_type { get; }
    internal static string net_listener_no_spns { get; }
    internal static string net_listener_cannot_set_custom_cbt { get; }
    internal static string net_listener_cbt_not_supported { get; }
    internal static string net_listener_detach_error { get; }
    internal static string net_listener_close_urlgroup_error { get; }
    internal static string net_tls_version { get; }
    internal static string net_perm_target { get; }
    internal static string net_perm_both_regex { get; }
    internal static string net_perm_none { get; }
    internal static string net_perm_attrib_count { get; }
    internal static string net_perm_invalid_val { get; }
    internal static string net_perm_attrib_multi { get; }
    internal static string net_perm_epname { get; }
    internal static string net_perm_invalid_val_in_element { get; }
    internal static string net_invalid_ip_addr { get; }
    internal static string dns_bad_ip_address { get; }
    internal static string net_bad_mac_address { get; }
    internal static string net_ping { get; }
    internal static string net_bad_ip_address_prefix { get; }
    internal static string net_max_ip_address_list_length_exceeded { get; }
    internal static string net_ipv4_not_installed { get; }
    internal static string net_ipv6_not_installed { get; }
    internal static string net_webclient { get; }
    internal static string net_webclient_ContentType { get; }
    internal static string net_webclient_Multipart { get; }
    internal static string net_webclient_no_concurrent_io_allowed { get; }
    internal static string net_webclient_invalid_baseaddress { get; }
    internal static string net_container_add_cookie { get; }
    internal static string net_cookie_invalid { get; }
    internal static string net_cookie_size { get; }
    internal static string net_cookie_parse_header { get; }
    internal static string net_cookie_attribute { get; }
    internal static string net_cookie_format { get; }
    internal static string net_cookie_exists { get; }
    internal static string net_cookie_capacity_range { get; }
    internal static string net_set_token { get; }
    internal static string net_revert_token { get; }
    internal static string net_ssl_io_async_context { get; }
    internal static string net_ssl_io_encrypt { get; }
    internal static string net_ssl_io_decrypt { get; }
    internal static string net_ssl_io_context_expired { get; }
    internal static string net_ssl_io_handshake_start { get; }
    internal static string net_ssl_io_handshake { get; }
    internal static string net_ssl_io_frame { get; }
    internal static string net_ssl_io_corrupted { get; }
    internal static string net_ssl_io_cert_validation { get; }
    internal static string net_ssl_io_invalid_end_call { get; }
    internal static string net_ssl_io_invalid_begin_call { get; }
    internal static string net_ssl_io_no_server_cert { get; }
    internal static string net_auth_bad_client_creds { get; }
    internal static string net_auth_bad_client_creds_or_target_mismatch { get; }
    internal static string net_auth_context_expectation { get; }
    internal static string net_auth_context_expectation_remote { get; }
    internal static string net_auth_supported_impl_levels { get; }
    internal static string net_auth_no_anonymous_support { get; }
    internal static string net_auth_reauth { get; }
    internal static string net_auth_noauth { get; }
    internal static string net_auth_client_server { get; }
    internal static string net_auth_noencryption { get; }
    internal static string net_auth_SSPI { get; }
    internal static string net_auth_failure { get; }
    internal static string net_auth_eof { get; }
    internal static string net_auth_alert { get; }
    internal static string net_auth_ignored_reauth { get; }
    internal static string net_auth_empty_read { get; }
    internal static string net_auth_message_not_encrypted { get; }
    internal static string net_auth_must_specify_extended_protection_scheme { get; }
    internal static string net_frame_size { get; }
    internal static string net_frame_read_io { get; }
    internal static string net_frame_read_size { get; }
    internal static string net_frame_max_size { get; }
    internal static string net_jscript_load { get; }
    internal static string net_proxy_not_gmt { get; }
    internal static string net_proxy_invalid_dayofweek { get; }
    internal static string net_proxy_invalid_url_format { get; }
    internal static string net_param_not_string { get; }
    internal static string net_value_cannot_be_negative { get; }
    internal static string net_invalid_offset { get; }
    internal static string net_offset_plus_count { get; }
    internal static string net_cannot_be_false { get; }
    internal static string net_invalid_enum { get; }
    internal static string net_listener_already { get; }
    internal static string net_cache_shadowstream_not_writable { get; }
    internal static string net_cache_validator_fail { get; }
    internal static string net_cache_access_denied { get; }
    internal static string net_cache_validator_result { get; }
    internal static string net_cache_retrieve_failure { get; }
    internal static string net_cache_not_supported_body { get; }
    internal static string net_cache_not_supported_command { get; }
    internal static string net_cache_not_accept_response { get; }
    internal static string net_cache_method_failed { get; }
    internal static string net_cache_key_failed { get; }
    internal static string net_cache_no_stream { get; }
    internal static string net_cache_unsupported_partial_stream { get; }
    internal static string net_cache_not_configured { get; }
    internal static string net_cache_non_seekable_stream_not_supported { get; }
    internal static string net_invalid_cast { get; }
    internal static string net_collection_readonly { get; }
    internal static string net_not_ipermission { get; }
    internal static string net_no_classname { get; }
    internal static string net_no_typename { get; }
    internal static string net_array_too_small { get; }
    internal static string net_servicePointAddressNotSupportedInHostMode { get; }
    internal static string net_Websockets_AlreadyOneOutstandingOperation { get; }
    internal static string net_Websockets_WebSocketBaseFaulted { get; }
    internal static string net_WebSockets_NativeSendResponseHeaders { get; }
    internal static string net_WebSockets_Generic { get; }
    internal static string net_WebSockets_NotAWebSocket_Generic { get; }
    internal static string net_WebSockets_UnsupportedWebSocketVersion_Generic { get; }
    internal static string net_WebSockets_HeaderError_Generic { get; }
    internal static string net_WebSockets_UnsupportedProtocol_Generic { get; }
    internal static string net_WebSockets_UnsupportedPlatform { get; }
    internal static string net_WebSockets_AcceptNotAWebSocket { get; }
    internal static string net_WebSockets_AcceptUnsupportedWebSocketVersion { get; }
    internal static string net_WebSockets_AcceptHeaderNotFound { get; }
    internal static string net_WebSockets_AcceptUnsupportedProtocol { get; }
    internal static string net_WebSockets_ClientAcceptingNoProtocols { get; }
    internal static string net_WebSockets_ClientSecWebSocketProtocolsBlank { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_TooSmall { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_InternalBuffer { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_TooBig { get; }
    internal static string net_WebSockets_InvalidState_Generic { get; }
    internal static string net_WebSockets_InvalidState_ClosedOrAborted { get; }
    internal static string net_WebSockets_InvalidState { get; }
    internal static string net_WebSockets_ReceiveAsyncDisallowedAfterCloseAsync { get; }
    internal static string net_WebSockets_InvalidMessageType { get; }
    internal static string net_WebSockets_InvalidBufferType { get; }
    internal static string net_WebSockets_InvalidMessageType_Generic { get; }
    internal static string net_WebSockets_Argument_InvalidMessageType { get; }
    internal static string net_WebSockets_ConnectionClosedPrematurely_Generic { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_InvalidEmptySubProtocol { get; }
    internal static string net_WebSockets_ReasonNotNull { get; }
    internal static string net_WebSockets_InvalidCloseStatusCode { get; }
    internal static string net_WebSockets_InvalidCloseStatusDescription { get; }
    internal static string net_WebSockets_Scheme { get; }
    internal static string net_WebSockets_AlreadyStarted { get; }
    internal static string net_WebSockets_Connect101Expected { get; }
    internal static string net_WebSockets_InvalidResponseHeader { get; }
    internal static string net_WebSockets_NotConnected { get; }
    internal static string net_WebSockets_InvalidRegistration { get; }
    internal static string net_WebSockets_NoDuplicateProtocol { get; }
    internal static string net_log_exception { get; }
    internal static string net_log_listener_delegate_exception { get; }
    internal static string net_log_listener_unsupported_authentication_scheme { get; }
    internal static string net_log_listener_unmatched_authentication_scheme { get; }
    internal static string net_log_listener_create_valid_identity_failed { get; }
    internal static string net_log_listener_httpsys_registry_null { get; }
    internal static string net_log_listener_httpsys_registry_error { get; }
    internal static string net_log_listener_cant_convert_raw_path { get; }
    internal static string net_log_listener_cant_convert_percent_value { get; }
    internal static string net_log_listener_cant_convert_bytes { get; }
    internal static string net_log_listener_cant_convert_to_utf8 { get; }
    internal static string net_log_listener_cant_create_uri { get; }
    internal static string net_log_listener_no_cbt_disabled { get; }
    internal static string net_log_listener_no_cbt_http { get; }
    internal static string net_log_listener_no_cbt_platform { get; }
    internal static string net_log_listener_no_cbt_trustedproxy { get; }
    internal static string net_log_listener_cbt { get; }
    internal static string net_log_listener_no_spn_kerberos { get; }
    internal static string net_log_listener_no_spn_disabled { get; }
    internal static string net_log_listener_no_spn_cbt { get; }
    internal static string net_log_listener_no_spn_platform { get; }
    internal static string net_log_listener_no_spn_whensupported { get; }
    internal static string net_log_listener_no_spn_loopback { get; }
    internal static string net_log_listener_spn { get; }
    internal static string net_log_listener_spn_passed { get; }
    internal static string net_log_listener_spn_failed { get; }
    internal static string net_log_listener_spn_failed_always { get; }
    internal static string net_log_listener_spn_failed_empty { get; }
    internal static string net_log_listener_spn_failed_dump { get; }
    internal static string net_log_listener_spn_add { get; }
    internal static string net_log_listener_spn_not_add { get; }
    internal static string net_log_listener_spn_remove { get; }
    internal static string net_log_listener_spn_not_remove { get; }
    internal static string net_log_sspi_enumerating_security_packages { get; }
    internal static string net_log_sspi_security_package_not_found { get; }
    internal static string net_log_sspi_security_context_input_buffer { get; }
    internal static string net_log_sspi_security_context_input_buffers { get; }
    internal static string net_log_sspi_selected_cipher_suite { get; }
    internal static string net_log_remote_certificate { get; }
    internal static string net_log_locating_private_key_for_certificate { get; }
    internal static string net_log_cert_is_of_type_2 { get; }
    internal static string net_log_found_cert_in_store { get; }
    internal static string net_log_did_not_find_cert_in_store { get; }
    internal static string net_log_open_store_failed { get; }
    internal static string net_log_got_certificate_from_delegate { get; }
    internal static string net_log_no_delegate_and_have_no_client_cert { get; }
    internal static string net_log_no_delegate_but_have_client_cert { get; }
    internal static string net_log_attempting_restart_using_cert { get; }
    internal static string net_log_no_issuers_try_all_certs { get; }
    internal static string net_log_server_issuers_look_for_matching_certs { get; }
    internal static string net_log_selected_cert { get; }
    internal static string net_log_n_certs_after_filtering { get; }
    internal static string net_log_finding_matching_certs { get; }
    internal static string net_log_using_cached_credential { get; }
    internal static string net_log_remote_cert_user_declared_valid { get; }
    internal static string net_log_remote_cert_user_declared_invalid { get; }
    internal static string net_log_remote_cert_has_no_errors { get; }
    internal static string net_log_remote_cert_has_errors { get; }
    internal static string net_log_remote_cert_not_available { get; }
    internal static string net_log_remote_cert_name_mismatch { get; }
    internal static string net_log_proxy_autodetect_script_location_parse_error { get; }
    internal static string net_log_proxy_autodetect_failed { get; }
    internal static string net_log_proxy_script_execution_error { get; }
    internal static string net_log_proxy_script_download_compile_error { get; }
    internal static string net_log_proxy_system_setting_update { get; }
    internal static string net_log_proxy_update_due_to_ip_config_change { get; }
    internal static string net_log_proxy_called_with_null_parameter { get; }
    internal static string net_log_proxy_called_with_invalid_parameter { get; }
    internal static string net_log_proxy_ras_supported { get; }
    internal static string net_log_proxy_ras_notsupported_exception { get; }
    internal static string net_log_proxy_winhttp_cant_open_session { get; }
    internal static string net_log_proxy_winhttp_getproxy_failed { get; }
    internal static string net_log_proxy_winhttp_timeout_error { get; }
    internal static string net_log_cache_validation_failed_resubmit { get; }
    internal static string net_log_cache_refused_server_response { get; }
    internal static string net_log_cache_ftp_proxy_doesnt_support_partial { get; }
    internal static string net_log_cache_ftp_method { get; }
    internal static string net_log_cache_ftp_supports_bin_only { get; }
    internal static string net_log_cache_replacing_entry_with_HTTP_200 { get; }
    internal static string net_log_cache_now_time { get; }
    internal static string net_log_cache_max_age_absolute { get; }
    internal static string net_log_cache_age1 { get; }
    internal static string net_log_cache_age1_date_header { get; }
    internal static string net_log_cache_age1_last_synchronized { get; }
    internal static string net_log_cache_age1_last_synchronized_age_header { get; }
    internal static string net_log_cache_age2 { get; }
    internal static string net_log_cache_max_age_cache_s_max_age { get; }
    internal static string net_log_cache_max_age_expires_date { get; }
    internal static string net_log_cache_max_age_cache_max_age { get; }
    internal static string net_log_cache_no_max_age_use_10_percent { get; }
    internal static string net_log_cache_no_max_age_use_default { get; }
    internal static string net_log_cache_validator_invalid_for_policy { get; }
    internal static string net_log_cache_response_last_modified { get; }
    internal static string net_log_cache_cache_last_modified { get; }
    internal static string net_log_cache_partial_and_non_zero_content_offset { get; }
    internal static string net_log_cache_response_valid_based_on_policy { get; }
    internal static string net_log_cache_null_response_failure { get; }
    internal static string net_log_cache_ftp_response_status { get; }
    internal static string net_log_cache_resp_valid_based_on_retry { get; }
    internal static string net_log_cache_no_update_based_on_method { get; }
    internal static string net_log_cache_removed_existing_invalid_entry { get; }
    internal static string net_log_cache_not_updated_based_on_policy { get; }
    internal static string net_log_cache_not_updated_because_no_response { get; }
    internal static string net_log_cache_removed_existing_based_on_method { get; }
    internal static string net_log_cache_existing_not_removed_because_unexpected_response_status { get; }
    internal static string net_log_cache_removed_existing_based_on_policy { get; }
    internal static string net_log_cache_not_updated_based_on_ftp_response_status { get; }
    internal static string net_log_cache_update_not_supported_for_ftp_restart { get; }
    internal static string net_log_cache_removed_entry_because_ftp_restart_response_changed { get; }
    internal static string net_log_cache_last_synchronized { get; }
    internal static string net_log_cache_suppress_update_because_synched_last_minute { get; }
    internal static string net_log_cache_updating_last_synchronized { get; }
    internal static string net_log_cache_cannot_remove { get; }
    internal static string net_log_cache_key_status { get; }
    internal static string net_log_cache_key_remove_failed_status { get; }
    internal static string net_log_cache_usecount_file { get; }
    internal static string net_log_cache_stream { get; }
    internal static string net_log_cache_filename { get; }
    internal static string net_log_cache_lookup_failed { get; }
    internal static string net_log_cache_exception { get; }
    internal static string net_log_cache_expected_length { get; }
    internal static string net_log_cache_last_modified { get; }
    internal static string net_log_cache_expires { get; }
    internal static string net_log_cache_max_stale { get; }
    internal static string net_log_cache_dumping_metadata { get; }
    internal static string net_log_cache_create_failed { get; }
    internal static string net_log_cache_set_expires { get; }
    internal static string net_log_cache_set_last_modified { get; }
    internal static string net_log_cache_set_last_synchronized { get; }
    internal static string net_log_cache_enable_max_stale { get; }
    internal static string net_log_cache_disable_max_stale { get; }
    internal static string net_log_cache_set_new_metadata { get; }
    internal static string net_log_cache_dumping { get; }
    internal static string net_log_cache_key { get; }
    internal static string net_log_cache_no_commit { get; }
    internal static string net_log_cache_error_deleting_filename { get; }
    internal static string net_log_cache_update_failed { get; }
    internal static string net_log_cache_delete_failed { get; }
    internal static string net_log_cache_commit_failed { get; }
    internal static string net_log_cache_committed_as_partial { get; }
    internal static string net_log_cache_max_stale_and_update_status { get; }
    internal static string net_log_cache_failing_request_with_exception { get; }
    internal static string net_log_cache_request_method { get; }
    internal static string net_log_cache_http_status_parse_failure { get; }
    internal static string net_log_cache_http_status_line { get; }
    internal static string net_log_cache_cache_control { get; }
    internal static string net_log_cache_invalid_http_version { get; }
    internal static string net_log_cache_no_http_response_header { get; }
    internal static string net_log_cache_http_header_parse_error { get; }
    internal static string net_log_cache_metadata_name_value_parse_error { get; }
    internal static string net_log_cache_content_range_error { get; }
    internal static string net_log_cache_cache_control_error { get; }
    internal static string net_log_cache_unexpected_status { get; }
    internal static string net_log_cache_object_and_exception { get; }
    internal static string net_log_cache_revalidation_not_needed { get; }
    internal static string net_log_cache_not_updated_based_on_cache_protocol_status { get; }
    internal static string net_log_cache_closing_cache_stream { get; }
    internal static string net_log_cache_exception_ignored { get; }
    internal static string net_log_cache_no_cache_entry { get; }
    internal static string net_log_cache_null_cached_stream { get; }
    internal static string net_log_cache_requested_combined_but_null_cached_stream { get; }
    internal static string net_log_cache_returned_range_cache { get; }
    internal static string net_log_cache_entry_not_found_freshness_undefined { get; }
    internal static string net_log_cache_dumping_cache_context { get; }
    internal static string net_log_cache_result { get; }
    internal static string net_log_cache_uri_with_query_has_no_expiration { get; }
    internal static string net_log_cache_uri_with_query_and_cached_resp_from_http_10 { get; }
    internal static string net_log_cache_valid_as_fresh_or_because_policy { get; }
    internal static string net_log_cache_accept_based_on_retry_count { get; }
    internal static string net_log_cache_date_header_older_than_cache_entry { get; }
    internal static string net_log_cache_server_didnt_satisfy_range { get; }
    internal static string net_log_cache_304_received_on_unconditional_request { get; }
    internal static string net_log_cache_304_received_on_unconditional_request_expected_200_206 { get; }
    internal static string net_log_cache_last_modified_header_older_than_cache_entry { get; }
    internal static string net_log_cache_freshness_outside_policy_limits { get; }
    internal static string net_log_cache_need_to_remove_invalid_cache_entry_304 { get; }
    internal static string net_log_cache_resp_status { get; }
    internal static string net_log_cache_resp_304_or_request_head { get; }
    internal static string net_log_cache_dont_update_cached_headers { get; }
    internal static string net_log_cache_update_cached_headers { get; }
    internal static string net_log_cache_partial_resp_not_combined_with_existing_entry { get; }
    internal static string net_log_cache_request_contains_conditional_header { get; }
    internal static string net_log_cache_not_a_get_head_post { get; }
    internal static string net_log_cache_cannot_update_cache_if_304 { get; }
    internal static string net_log_cache_cannot_update_cache_with_head_resp { get; }
    internal static string net_log_cache_http_resp_is_null { get; }
    internal static string net_log_cache_resp_cache_control_is_no_store { get; }
    internal static string net_log_cache_resp_cache_control_is_public { get; }
    internal static string net_log_cache_resp_cache_control_is_private { get; }
    internal static string net_log_cache_resp_cache_control_is_private_plus_headers { get; }
    internal static string net_log_cache_resp_older_than_cache { get; }
    internal static string net_log_cache_revalidation_required { get; }
    internal static string net_log_cache_needs_revalidation { get; }
    internal static string net_log_cache_resp_allows_caching { get; }
    internal static string net_log_cache_auth_header_and_no_s_max_age { get; }
    internal static string net_log_cache_post_resp_without_cache_control_or_expires { get; }
    internal static string net_log_cache_valid_based_on_status_code { get; }
    internal static string net_log_cache_resp_no_cache_control { get; }
    internal static string net_log_cache_age { get; }
    internal static string net_log_cache_policy_min_fresh { get; }
    internal static string net_log_cache_policy_max_age { get; }
    internal static string net_log_cache_policy_cache_sync_date { get; }
    internal static string net_log_cache_policy_max_stale { get; }
    internal static string net_log_cache_control_no_cache { get; }
    internal static string net_log_cache_control_no_cache_removing_some_headers { get; }
    internal static string net_log_cache_control_must_revalidate { get; }
    internal static string net_log_cache_cached_auth_header { get; }
    internal static string net_log_cache_cached_auth_header_no_control_directive { get; }
    internal static string net_log_cache_after_validation { get; }
    internal static string net_log_cache_resp_status_304 { get; }
    internal static string net_log_cache_head_resp_has_different_content_length { get; }
    internal static string net_log_cache_head_resp_has_different_content_md5 { get; }
    internal static string net_log_cache_head_resp_has_different_etag { get; }
    internal static string net_log_cache_304_head_resp_has_different_last_modified { get; }
    internal static string net_log_cache_existing_entry_has_to_be_discarded { get; }
    internal static string net_log_cache_existing_entry_should_be_discarded { get; }
    internal static string net_log_cache_206_resp_non_matching_entry { get; }
    internal static string net_log_cache_206_resp_starting_position_not_adjusted { get; }
    internal static string net_log_cache_combined_resp_requested { get; }
    internal static string net_log_cache_updating_headers_on_304 { get; }
    internal static string net_log_cache_suppressing_headers_update_on_304 { get; }
    internal static string net_log_cache_status_code_not_304_206 { get; }
    internal static string net_log_cache_sxx_resp_cache_only { get; }
    internal static string net_log_cache_sxx_resp_can_be_replaced { get; }
    internal static string net_log_cache_vary_header_empty { get; }
    internal static string net_log_cache_vary_header_contains_asterisks { get; }
    internal static string net_log_cache_no_headers_in_metadata { get; }
    internal static string net_log_cache_vary_header_mismatched_count { get; }
    internal static string net_log_cache_vary_header_mismatched_field { get; }
    internal static string net_log_cache_vary_header_match { get; }
    internal static string net_log_cache_range { get; }
    internal static string net_log_cache_range_invalid_format { get; }
    internal static string net_log_cache_range_not_in_cache { get; }
    internal static string net_log_cache_range_in_cache { get; }
    internal static string net_log_cache_partial_resp { get; }
    internal static string net_log_cache_range_request_range { get; }
    internal static string net_log_cache_could_be_partial { get; }
    internal static string net_log_cache_condition_if_none_match { get; }
    internal static string net_log_cache_condition_if_modified_since { get; }
    internal static string net_log_cache_cannot_construct_conditional_request { get; }
    internal static string net_log_cache_cannot_construct_conditional_range_request { get; }
    internal static string net_log_cache_entry_size_too_big { get; }
    internal static string net_log_cache_condition_if_range { get; }
    internal static string net_log_cache_conditional_range_not_implemented_on_http_10 { get; }
    internal static string net_log_cache_saving_request_headers { get; }
    internal static string net_log_cache_only_byte_range_implemented { get; }
    internal static string net_log_cache_multiple_complex_range_not_implemented { get; }
    internal static string net_log_digest_hash_algorithm_not_supported { get; }
    internal static string net_log_digest_qop_not_supported { get; }
    internal static string net_log_digest_requires_nonce { get; }
    internal static string net_log_auth_invalid_challenge { get; }
    internal static string net_log_unknown { get; }
    internal static string net_log_operation_returned_something { get; }
    internal static string net_log_operation_failed_with_error { get; }
    internal static string net_log_buffered_n_bytes { get; }
    internal static string net_log_method_equal { get; }
    internal static string net_log_releasing_connection { get; }
    internal static string net_log_unexpected_exception { get; }
    internal static string net_log_server_response_error_code { get; }
    internal static string net_log_resubmitting_request { get; }
    internal static string net_log_retrieving_localhost_exception { get; }
    internal static string net_log_resolved_servicepoint_may_not_be_remote_server { get; }
    internal static string net_log_closed_idle { get; }
    internal static string net_log_received_status_line { get; }
    internal static string net_log_sending_headers { get; }
    internal static string net_log_received_headers { get; }
    internal static string net_log_shell_expression_pattern_format_warning { get; }
    internal static string net_log_exception_in_callback { get; }
    internal static string net_log_sending_command { get; }
    internal static string net_log_received_response { get; }
    internal static string net_log_socket_connected { get; }
    internal static string net_log_socket_accepted { get; }
    internal static string net_log_socket_not_logged_file { get; }
    internal static string net_log_socket_connect_dnsendpoint { get; }
    internal static string MailAddressInvalidFormat { get; }
    internal static string MailSubjectInvalidFormat { get; }
    internal static string MailBase64InvalidCharacter { get; }
    internal static string MailCollectionIsReadOnly { get; }
    internal static string MailDateInvalidFormat { get; }
    internal static string MailHeaderFieldAlreadyExists { get; }
    internal static string MailHeaderFieldInvalidCharacter { get; }
    internal static string MailHeaderFieldMalformedHeader { get; }
    internal static string MailHeaderFieldMismatchedName { get; }
    internal static string MailHeaderIndexOutOfBounds { get; }
    internal static string MailHeaderItemAccessorOnlySingleton { get; }
    internal static string MailHeaderListHasChanged { get; }
    internal static string MailHeaderResetCalledBeforeEOF { get; }
    internal static string MailHeaderTargetArrayTooSmall { get; }
    internal static string MailHeaderInvalidCID { get; }
    internal static string MailHostNotFound { get; }
    internal static string MailReaderGetContentStreamAlreadyCalled { get; }
    internal static string MailReaderTruncated { get; }
    internal static string MailWriterIsInContent { get; }
    internal static string MailServerDoesNotSupportStartTls { get; }
    internal static string MailServerResponse { get; }
    internal static string SSPIAuthenticationOrSPNNull { get; }
    internal static string SSPIPInvokeError { get; }
    internal static string SSPIInvalidHandleType { get; }
    internal static string SmtpAlreadyConnected { get; }
    internal static string SmtpAuthenticationFailed { get; }
    internal static string SmtpAuthenticationFailedNoCreds { get; }
    internal static string SmtpDataStreamOpen { get; }
    internal static string SmtpDefaultMimePreamble { get; }
    internal static string SmtpDefaultSubject { get; }
    internal static string SmtpInvalidResponse { get; }
    internal static string SmtpNotConnected { get; }
    internal static string SmtpSystemStatus { get; }
    internal static string SmtpHelpMessage { get; }
    internal static string SmtpServiceReady { get; }
    internal static string SmtpServiceClosingTransmissionChannel { get; }
    internal static string SmtpOK { get; }
    internal static string SmtpUserNotLocalWillForward { get; }
    internal static string SmtpStartMailInput { get; }
    internal static string SmtpServiceNotAvailable { get; }
    internal static string SmtpMailboxBusy { get; }
    internal static string SmtpLocalErrorInProcessing { get; }
    internal static string SmtpInsufficientStorage { get; }
    internal static string SmtpPermissionDenied { get; }
    internal static string SmtpCommandUnrecognized { get; }
    internal static string SmtpSyntaxError { get; }
    internal static string SmtpCommandNotImplemented { get; }
    internal static string SmtpBadCommandSequence { get; }
    internal static string SmtpCommandParameterNotImplemented { get; }
    internal static string SmtpMailboxUnavailable { get; }
    internal static string SmtpUserNotLocalTryAlternatePath { get; }
    internal static string SmtpExceededStorageAllocation { get; }
    internal static string SmtpMailboxNameNotAllowed { get; }
    internal static string SmtpTransactionFailed { get; }
    internal static string SmtpSendMailFailure { get; }
    internal static string SmtpRecipientFailed { get; }
    internal static string SmtpRecipientRequired { get; }
    internal static string SmtpFromRequired { get; }
    internal static string SmtpAllRecipientsFailed { get; }
    internal static string SmtpClientNotPermitted { get; }
    internal static string SmtpMustIssueStartTlsFirst { get; }
    internal static string SmtpNeedAbsolutePickupDirectory { get; }
    internal static string SmtpGetIisPickupDirectoryFailed { get; }
    internal static string SmtpPickupDirectoryDoesnotSupportSsl { get; }
    internal static string SmtpOperationInProgress { get; }
    internal static string SmtpAuthResponseInvalid { get; }
    internal static string SmtpEhloResponseInvalid { get; }
    internal static string SmtpNonAsciiUserNotSupported { get; }
    internal static string SmtpInvalidHostName { get; }
    internal static string MimeTransferEncodingNotSupported { get; }
    internal static string SeekNotSupported { get; }
    internal static string WriteNotSupported { get; }
    internal static string InvalidHexDigit { get; }
    internal static string InvalidSSPIContext { get; }
    internal static string InvalidSSPIContextKey { get; }
    internal static string InvalidSSPINegotiationElement { get; }
    internal static string InvalidHeaderName { get; }
    internal static string InvalidHeaderValue { get; }
    internal static string CannotGetEffectiveTimeOfSSPIContext { get; }
    internal static string CannotGetExpiryTimeOfSSPIContext { get; }
    internal static string ReadNotSupported { get; }
    internal static string InvalidAsyncResult { get; }
    internal static string UnspecifiedHost { get; }
    internal static string InvalidPort { get; }
    internal static string SmtpInvalidOperationDuringSend { get; }
    internal static string MimePartCantResetStream { get; }
    internal static string MediaTypeInvalid { get; }
    internal static string ContentTypeInvalid { get; }
    internal static string ContentDispositionInvalid { get; }
    internal static string ArgumentOutOfRange_Bounds_Lower_Upper { get; }
    internal static string InvalidOperation_EnumFailedVersion { get; }
    internal static string InvalidOperation_EnumOpCantHappen { get; }
    internal static string security_ExtendedProtectionPolicy_UseDifferentConstructorForNever { get; }
    internal static string security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection { get; }
    internal static string security_ServiceNameCollection_EmptyServiceName { get; }
    internal static string security_X509Certificate_NotSupported { get; }
    internal static string InvalidOperation_WrongAsyncResultOrEndReadCalledMultiple { get; }
    internal static string InvalidOperation_WrongAsyncResultOrEndWriteCalledMultiple { get; }
    internal static string ObjectDisposed_StreamIsClosed { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_net_nonClsCompliantException();
    internal static string get_net_illegalConfigWith();
    internal static string get_net_illegalConfigWithout();
    internal static string get_net_baddate();
    internal static string get_net_writestarted();
    internal static string get_net_clsmall();
    internal static string get_net_reqsubmitted();
    internal static string get_net_rspsubmitted();
    internal static string get_net_ftp_no_http_cmd();
    internal static string get_net_ftp_invalid_method_name();
    internal static string get_net_ftp_invalid_renameto();
    internal static string get_net_ftp_no_defaultcreds();
    internal static string get_net_ftpnoresponse();
    internal static string get_net_ftp_response_invalid_format();
    internal static string get_net_ftp_no_offsetforhttp();
    internal static string get_net_ftp_invalid_uri();
    internal static string get_net_ftp_invalid_status_response();
    internal static string get_net_ftp_server_failed_passive();
    internal static string get_net_ftp_active_address_different();
    internal static string get_net_ftp_proxy_does_not_support_ssl();
    internal static string get_net_ftp_invalid_response_filename();
    internal static string get_net_ftp_unsupported_method();
    internal static string get_net_resubmitcanceled();
    internal static string get_net_redirect_perm();
    internal static string get_net_resubmitprotofailed();
    internal static string get_net_needchunked();
    internal static string get_net_nochunked();
    internal static string get_net_nochunkuploadonhttp10();
    internal static string get_net_connarg();
    internal static string get_net_no100();
    internal static string get_net_fromto();
    internal static string get_net_rangetoosmall();
    internal static string get_net_entitytoobig();
    internal static string get_net_invalidversion();
    internal static string get_net_invalidstatus();
    internal static string get_net_toosmall();
    internal static string get_net_toolong();
    internal static string get_net_connclosed();
    internal static string get_net_noseek();
    internal static string get_net_servererror();
    internal static string get_net_nouploadonget();
    internal static string get_net_mutualauthfailed();
    internal static string get_net_invasync();
    internal static string get_net_inasync();
    internal static string get_net_mustbeuri();
    internal static string get_net_format_shexp();
    internal static string get_net_cannot_load_proxy_helper();
    internal static string get_net_invalid_host();
    internal static string get_net_repcall();
    internal static string get_net_wrongversion();
    internal static string get_net_badmethod();
    internal static string get_net_io_notenoughbyteswritten();
    internal static string get_net_io_timeout_use_ge_zero();
    internal static string get_net_io_timeout_use_gt_zero();
    internal static string get_net_io_no_0timeouts();
    internal static string get_net_requestaborted();
    internal static string get_net_tooManyRedirections();
    internal static string get_net_authmodulenotregistered();
    internal static string get_net_authschemenotregistered();
    internal static string get_net_proxyschemenotsupported();
    internal static string get_net_maxsrvpoints();
    internal static string get_net_unknown_prefix();
    internal static string get_net_notconnected();
    internal static string get_net_notstream();
    internal static string get_net_timeout();
    internal static string get_net_nocontentlengthonget();
    internal static string get_net_contentlengthmissing();
    internal static string get_net_nonhttpproxynotallowed();
    internal static string get_net_nottoken();
    internal static string get_net_rangetype();
    internal static string get_net_need_writebuffering();
    internal static string get_net_securitypackagesupport();
    internal static string get_net_securityprotocolnotsupported();
    internal static string get_net_nodefaultcreds();
    internal static string get_net_stopped();
    internal static string get_net_udpconnected();
    internal static string get_net_readonlystream();
    internal static string get_net_writeonlystream();
    internal static string get_net_no_concurrent_io_allowed();
    internal static string get_net_needmorethreads();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_PropertyNotImplementedException();
    internal static string get_net_MethodNotSupportedException();
    internal static string get_net_PropertyNotSupportedException();
    internal static string get_net_ProtocolNotSupportedException();
    internal static string get_net_SelectModeNotSupportedException();
    internal static string get_net_InvalidSocketHandle();
    internal static string get_net_InvalidAddressFamily();
    internal static string get_net_InvalidEndPointAddressFamily();
    internal static string get_net_InvalidSocketAddressSize();
    internal static string get_net_invalidAddressList();
    internal static string get_net_invalidPingBufferSize();
    internal static string get_net_cant_perform_during_shutdown();
    internal static string get_net_cant_create_environment();
    internal static string get_net_completed_result();
    internal static string get_net_protocol_invalid_family();
    internal static string get_net_protocol_invalid_multicast_family();
    internal static string get_net_empty_osinstalltype();
    internal static string get_net_unknown_osinstalltype();
    internal static string get_net_cant_determine_osinstalltype();
    internal static string get_net_osinstalltype();
    internal static string get_net_entire_body_not_written();
    internal static string get_net_must_provide_request_body();
    internal static string get_net_ssp_dont_support_cbt();
    internal static string get_net_sockets_zerolist();
    internal static string get_net_sockets_blocking();
    internal static string get_net_sockets_useblocking();
    internal static string get_net_sockets_select();
    internal static string get_net_sockets_toolarge_select();
    internal static string get_net_sockets_empty_select();
    internal static string get_net_sockets_mustbind();
    internal static string get_net_sockets_mustlisten();
    internal static string get_net_sockets_mustnotlisten();
    internal static string get_net_sockets_mustnotbebound();
    internal static string get_net_sockets_namedmustnotbebound();
    internal static string get_net_sockets_invalid_socketinformation();
    internal static string get_net_sockets_invalid_ipaddress_length();
    internal static string get_net_sockets_invalid_optionValue();
    internal static string get_net_sockets_invalid_optionValue_all();
    internal static string get_net_sockets_invalid_dnsendpoint();
    internal static string get_net_sockets_disconnectedConnect();
    internal static string get_net_sockets_disconnectedAccept();
    internal static string get_net_tcplistener_mustbestopped();
    internal static string get_net_sockets_no_duplicate_async();
    internal static string get_net_socketopinprogress();
    internal static string get_net_buffercounttoosmall();
    internal static string get_net_multibuffernotsupported();
    internal static string get_net_ambiguousbuffers();
    internal static string get_net_sockets_ipv6only();
    internal static string get_net_perfcounter_initialized_success();
    internal static string get_net_perfcounter_initialized_error();
    internal static string get_net_perfcounter_nocategory();
    internal static string get_net_perfcounter_initialization_started();
    internal static string get_net_perfcounter_cant_queue_workitem();
    internal static string get_net_config_proxy();
    internal static string get_net_config_proxy_module_not_public();
    internal static string get_net_config_authenticationmodules();
    internal static string get_net_config_webrequestmodules();
    internal static string get_net_config_requestcaching();
    internal static string get_net_config_section_permission();
    internal static string get_net_config_element_permission();
    internal static string get_net_config_property_permission();
    internal static string get_net_WebResponseParseError_InvalidHeaderName();
    internal static string get_net_WebResponseParseError_InvalidContentLength();
    internal static string get_net_WebResponseParseError_IncompleteHeaderLine();
    internal static string get_net_WebResponseParseError_CrLfError();
    internal static string get_net_WebResponseParseError_InvalidChunkFormat();
    internal static string get_net_WebResponseParseError_UnexpectedServerResponse();
    internal static string get_net_webstatus_Success();
    internal static string get_net_webstatus_NameResolutionFailure();
    internal static string get_net_webstatus_ConnectFailure();
    internal static string get_net_webstatus_ReceiveFailure();
    internal static string get_net_webstatus_SendFailure();
    internal static string get_net_webstatus_PipelineFailure();
    internal static string get_net_webstatus_RequestCanceled();
    internal static string get_net_webstatus_ConnectionClosed();
    internal static string get_net_webstatus_TrustFailure();
    internal static string get_net_webstatus_SecureChannelFailure();
    internal static string get_net_webstatus_ServerProtocolViolation();
    internal static string get_net_webstatus_KeepAliveFailure();
    internal static string get_net_webstatus_ProxyNameResolutionFailure();
    internal static string get_net_webstatus_MessageLengthLimitExceeded();
    internal static string get_net_webstatus_CacheEntryNotFound();
    internal static string get_net_webstatus_RequestProhibitedByCachePolicy();
    internal static string get_net_webstatus_Timeout();
    internal static string get_net_webstatus_RequestProhibitedByProxy();
    internal static string get_net_InvalidStatusCode();
    internal static string get_net_ftpstatuscode_ServiceNotAvailable();
    internal static string get_net_ftpstatuscode_CantOpenData();
    internal static string get_net_ftpstatuscode_ConnectionClosed();
    internal static string get_net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy();
    internal static string get_net_ftpstatuscode_ActionAbortedLocalProcessingError();
    internal static string get_net_ftpstatuscode_ActionNotTakenInsufficentSpace();
    internal static string get_net_ftpstatuscode_CommandSyntaxError();
    internal static string get_net_ftpstatuscode_ArgumentSyntaxError();
    internal static string get_net_ftpstatuscode_CommandNotImplemented();
    internal static string get_net_ftpstatuscode_BadCommandSequence();
    internal static string get_net_ftpstatuscode_NotLoggedIn();
    internal static string get_net_ftpstatuscode_AccountNeeded();
    internal static string get_net_ftpstatuscode_ActionNotTakenFileUnavailable();
    internal static string get_net_ftpstatuscode_ActionAbortedUnknownPageType();
    internal static string get_net_ftpstatuscode_FileActionAborted();
    internal static string get_net_ftpstatuscode_ActionNotTakenFilenameNotAllowed();
    internal static string get_net_httpstatuscode_NoContent();
    internal static string get_net_httpstatuscode_NonAuthoritativeInformation();
    internal static string get_net_httpstatuscode_ResetContent();
    internal static string get_net_httpstatuscode_PartialContent();
    internal static string get_net_httpstatuscode_MultipleChoices();
    internal static string get_net_httpstatuscode_Ambiguous();
    internal static string get_net_httpstatuscode_MovedPermanently();
    internal static string get_net_httpstatuscode_Moved();
    internal static string get_net_httpstatuscode_Found();
    internal static string get_net_httpstatuscode_Redirect();
    internal static string get_net_httpstatuscode_SeeOther();
    internal static string get_net_httpstatuscode_RedirectMethod();
    internal static string get_net_httpstatuscode_NotModified();
    internal static string get_net_httpstatuscode_UseProxy();
    internal static string get_net_httpstatuscode_TemporaryRedirect();
    internal static string get_net_httpstatuscode_RedirectKeepVerb();
    internal static string get_net_httpstatuscode_BadRequest();
    internal static string get_net_httpstatuscode_Unauthorized();
    internal static string get_net_httpstatuscode_PaymentRequired();
    internal static string get_net_httpstatuscode_Forbidden();
    internal static string get_net_httpstatuscode_NotFound();
    internal static string get_net_httpstatuscode_MethodNotAllowed();
    internal static string get_net_httpstatuscode_NotAcceptable();
    internal static string get_net_httpstatuscode_ProxyAuthenticationRequired();
    internal static string get_net_httpstatuscode_RequestTimeout();
    internal static string get_net_httpstatuscode_Conflict();
    internal static string get_net_httpstatuscode_Gone();
    internal static string get_net_httpstatuscode_LengthRequired();
    internal static string get_net_httpstatuscode_InternalServerError();
    internal static string get_net_httpstatuscode_NotImplemented();
    internal static string get_net_httpstatuscode_BadGateway();
    internal static string get_net_httpstatuscode_ServiceUnavailable();
    internal static string get_net_httpstatuscode_GatewayTimeout();
    internal static string get_net_httpstatuscode_HttpVersionNotSupported();
    internal static string get_net_uri_BadScheme();
    internal static string get_net_uri_BadFormat();
    internal static string get_net_uri_BadUserPassword();
    internal static string get_net_uri_BadHostName();
    internal static string get_net_uri_BadAuthority();
    internal static string get_net_uri_BadAuthorityTerminator();
    internal static string get_net_uri_EmptyUri();
    internal static string get_net_uri_BadString();
    internal static string get_net_uri_MustRootedPath();
    internal static string get_net_uri_BadPort();
    internal static string get_net_uri_SizeLimit();
    internal static string get_net_uri_SchemeLimit();
    internal static string get_net_uri_NotAbsolute();
    internal static string get_net_uri_PortOutOfRange();
    internal static string get_net_uri_UserDrivenParsing();
    internal static string get_net_uri_AlreadyRegistered();
    internal static string get_net_uri_NeedFreshParser();
    internal static string get_net_uri_CannotCreateRelative();
    internal static string get_net_uri_InvalidUriKind();
    internal static string get_net_uri_BadUnicodeHostForIdn();
    internal static string get_net_uri_GenericAuthorityNotDnsSafe();
    internal static string get_net_uri_NotJustSerialization();
    internal static string get_net_emptystringcall();
    internal static string get_net_emptystringset();
    internal static string get_net_headers_req();
    internal static string get_net_headers_rsp();
    internal static string get_net_headers_toolong();
    internal static string get_net_WebHeaderInvalidControlChars();
    internal static string get_net_WebHeaderInvalidCRLFChars();
    internal static string get_net_WebHeaderInvalidHeaderChars();
    internal static string get_net_WebHeaderInvalidNonAsciiChars();
    internal static string get_net_WebHeaderMissingColon();
    internal static string get_net_headerrestrict();
    internal static string get_net_io_completionportwasbound();
    internal static string get_net_io_writefailure();
    internal static string get_net_io_readfailure();
    internal static string get_net_io_connectionclosed();
    internal static string get_net_io_transportfailure();
    internal static string get_net_io_internal_bind();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidnestedcall();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_io_must_be_rw_stream();
    internal static string get_net_io_header_id();
    internal static string get_net_io_out_range();
    internal static string get_net_io_encrypt();
    internal static string get_net_io_decrypt();
    internal static string get_net_io_read();
    internal static string get_net_io_write();
    internal static string get_net_io_eof();
    internal static string get_net_io_async_result();
    internal static string get_net_listener_mustcall();
    internal static string get_net_listener_mustcompletecall();
    internal static string get_net_listener_callinprogress();
    internal static string get_net_listener_scheme();
    internal static string get_net_listener_host();
    internal static string get_net_listener_slash();
    internal static string get_net_listener_repcall();
    internal static string get_net_listener_invalid_cbt_type();
    internal static string get_net_listener_no_spns();
    internal static string get_net_listener_cannot_set_custom_cbt();
    internal static string get_net_listener_cbt_not_supported();
    internal static string get_net_listener_detach_error();
    internal static string get_net_listener_close_urlgroup_error();
    internal static string get_net_tls_version();
    internal static string get_net_perm_target();
    internal static string get_net_perm_both_regex();
    internal static string get_net_perm_none();
    internal static string get_net_perm_attrib_count();
    internal static string get_net_perm_invalid_val();
    internal static string get_net_perm_attrib_multi();
    internal static string get_net_perm_epname();
    internal static string get_net_perm_invalid_val_in_element();
    internal static string get_net_invalid_ip_addr();
    internal static string get_dns_bad_ip_address();
    internal static string get_net_bad_mac_address();
    internal static string get_net_ping();
    internal static string get_net_bad_ip_address_prefix();
    internal static string get_net_max_ip_address_list_length_exceeded();
    internal static string get_net_ipv4_not_installed();
    internal static string get_net_ipv6_not_installed();
    internal static string get_net_webclient();
    internal static string get_net_webclient_ContentType();
    internal static string get_net_webclient_Multipart();
    internal static string get_net_webclient_no_concurrent_io_allowed();
    internal static string get_net_webclient_invalid_baseaddress();
    internal static string get_net_container_add_cookie();
    internal static string get_net_cookie_invalid();
    internal static string get_net_cookie_size();
    internal static string get_net_cookie_parse_header();
    internal static string get_net_cookie_attribute();
    internal static string get_net_cookie_format();
    internal static string get_net_cookie_exists();
    internal static string get_net_cookie_capacity_range();
    internal static string get_net_set_token();
    internal static string get_net_revert_token();
    internal static string get_net_ssl_io_async_context();
    internal static string get_net_ssl_io_encrypt();
    internal static string get_net_ssl_io_decrypt();
    internal static string get_net_ssl_io_context_expired();
    internal static string get_net_ssl_io_handshake_start();
    internal static string get_net_ssl_io_handshake();
    internal static string get_net_ssl_io_frame();
    internal static string get_net_ssl_io_corrupted();
    internal static string get_net_ssl_io_cert_validation();
    internal static string get_net_ssl_io_invalid_end_call();
    internal static string get_net_ssl_io_invalid_begin_call();
    internal static string get_net_ssl_io_no_server_cert();
    internal static string get_net_auth_bad_client_creds();
    internal static string get_net_auth_bad_client_creds_or_target_mismatch();
    internal static string get_net_auth_context_expectation();
    internal static string get_net_auth_context_expectation_remote();
    internal static string get_net_auth_supported_impl_levels();
    internal static string get_net_auth_no_anonymous_support();
    internal static string get_net_auth_reauth();
    internal static string get_net_auth_noauth();
    internal static string get_net_auth_client_server();
    internal static string get_net_auth_noencryption();
    internal static string get_net_auth_SSPI();
    internal static string get_net_auth_failure();
    internal static string get_net_auth_eof();
    internal static string get_net_auth_alert();
    internal static string get_net_auth_ignored_reauth();
    internal static string get_net_auth_empty_read();
    internal static string get_net_auth_message_not_encrypted();
    internal static string get_net_auth_must_specify_extended_protection_scheme();
    internal static string get_net_frame_size();
    internal static string get_net_frame_read_io();
    internal static string get_net_frame_read_size();
    internal static string get_net_frame_max_size();
    internal static string get_net_jscript_load();
    internal static string get_net_proxy_not_gmt();
    internal static string get_net_proxy_invalid_dayofweek();
    internal static string get_net_proxy_invalid_url_format();
    internal static string get_net_param_not_string();
    internal static string get_net_value_cannot_be_negative();
    internal static string get_net_invalid_offset();
    internal static string get_net_offset_plus_count();
    internal static string get_net_cannot_be_false();
    internal static string get_net_invalid_enum();
    internal static string get_net_listener_already();
    internal static string get_net_cache_shadowstream_not_writable();
    internal static string get_net_cache_validator_fail();
    internal static string get_net_cache_access_denied();
    internal static string get_net_cache_validator_result();
    internal static string get_net_cache_retrieve_failure();
    internal static string get_net_cache_not_supported_body();
    internal static string get_net_cache_not_supported_command();
    internal static string get_net_cache_not_accept_response();
    internal static string get_net_cache_method_failed();
    internal static string get_net_cache_key_failed();
    internal static string get_net_cache_no_stream();
    internal static string get_net_cache_unsupported_partial_stream();
    internal static string get_net_cache_not_configured();
    internal static string get_net_cache_non_seekable_stream_not_supported();
    internal static string get_net_invalid_cast();
    internal static string get_net_collection_readonly();
    internal static string get_net_not_ipermission();
    internal static string get_net_no_classname();
    internal static string get_net_no_typename();
    internal static string get_net_array_too_small();
    internal static string get_net_servicePointAddressNotSupportedInHostMode();
    internal static string get_net_Websockets_AlreadyOneOutstandingOperation();
    internal static string get_net_Websockets_WebSocketBaseFaulted();
    internal static string get_net_WebSockets_NativeSendResponseHeaders();
    internal static string get_net_WebSockets_Generic();
    internal static string get_net_WebSockets_NotAWebSocket_Generic();
    internal static string get_net_WebSockets_UnsupportedWebSocketVersion_Generic();
    internal static string get_net_WebSockets_HeaderError_Generic();
    internal static string get_net_WebSockets_UnsupportedProtocol_Generic();
    internal static string get_net_WebSockets_UnsupportedPlatform();
    internal static string get_net_WebSockets_AcceptNotAWebSocket();
    internal static string get_net_WebSockets_AcceptUnsupportedWebSocketVersion();
    internal static string get_net_WebSockets_AcceptHeaderNotFound();
    internal static string get_net_WebSockets_AcceptUnsupportedProtocol();
    internal static string get_net_WebSockets_ClientAcceptingNoProtocols();
    internal static string get_net_WebSockets_ClientSecWebSocketProtocolsBlank();
    internal static string get_net_WebSockets_ArgumentOutOfRange_TooSmall();
    internal static string get_net_WebSockets_ArgumentOutOfRange_InternalBuffer();
    internal static string get_net_WebSockets_ArgumentOutOfRange_TooBig();
    internal static string get_net_WebSockets_InvalidState_Generic();
    internal static string get_net_WebSockets_InvalidState_ClosedOrAborted();
    internal static string get_net_WebSockets_InvalidState();
    internal static string get_net_WebSockets_ReceiveAsyncDisallowedAfterCloseAsync();
    internal static string get_net_WebSockets_InvalidMessageType();
    internal static string get_net_WebSockets_InvalidBufferType();
    internal static string get_net_WebSockets_InvalidMessageType_Generic();
    internal static string get_net_WebSockets_Argument_InvalidMessageType();
    internal static string get_net_WebSockets_ConnectionClosedPrematurely_Generic();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_InvalidEmptySubProtocol();
    internal static string get_net_WebSockets_ReasonNotNull();
    internal static string get_net_WebSockets_InvalidCloseStatusCode();
    internal static string get_net_WebSockets_InvalidCloseStatusDescription();
    internal static string get_net_WebSockets_Scheme();
    internal static string get_net_WebSockets_AlreadyStarted();
    internal static string get_net_WebSockets_Connect101Expected();
    internal static string get_net_WebSockets_InvalidResponseHeader();
    internal static string get_net_WebSockets_NotConnected();
    internal static string get_net_WebSockets_InvalidRegistration();
    internal static string get_net_WebSockets_NoDuplicateProtocol();
    internal static string get_net_log_exception();
    internal static string get_net_log_listener_delegate_exception();
    internal static string get_net_log_listener_unsupported_authentication_scheme();
    internal static string get_net_log_listener_unmatched_authentication_scheme();
    internal static string get_net_log_listener_create_valid_identity_failed();
    internal static string get_net_log_listener_httpsys_registry_null();
    internal static string get_net_log_listener_httpsys_registry_error();
    internal static string get_net_log_listener_cant_convert_raw_path();
    internal static string get_net_log_listener_cant_convert_percent_value();
    internal static string get_net_log_listener_cant_convert_bytes();
    internal static string get_net_log_listener_cant_convert_to_utf8();
    internal static string get_net_log_listener_cant_create_uri();
    internal static string get_net_log_listener_no_cbt_disabled();
    internal static string get_net_log_listener_no_cbt_http();
    internal static string get_net_log_listener_no_cbt_platform();
    internal static string get_net_log_listener_no_cbt_trustedproxy();
    internal static string get_net_log_listener_cbt();
    internal static string get_net_log_listener_no_spn_kerberos();
    internal static string get_net_log_listener_no_spn_disabled();
    internal static string get_net_log_listener_no_spn_cbt();
    internal static string get_net_log_listener_no_spn_platform();
    internal static string get_net_log_listener_no_spn_whensupported();
    internal static string get_net_log_listener_no_spn_loopback();
    internal static string get_net_log_listener_spn();
    internal static string get_net_log_listener_spn_passed();
    internal static string get_net_log_listener_spn_failed();
    internal static string get_net_log_listener_spn_failed_always();
    internal static string get_net_log_listener_spn_failed_empty();
    internal static string get_net_log_listener_spn_failed_dump();
    internal static string get_net_log_listener_spn_add();
    internal static string get_net_log_listener_spn_not_add();
    internal static string get_net_log_listener_spn_remove();
    internal static string get_net_log_listener_spn_not_remove();
    internal static string get_net_log_sspi_enumerating_security_packages();
    internal static string get_net_log_sspi_security_package_not_found();
    internal static string get_net_log_sspi_security_context_input_buffer();
    internal static string get_net_log_sspi_security_context_input_buffers();
    internal static string get_net_log_sspi_selected_cipher_suite();
    internal static string get_net_log_remote_certificate();
    internal static string get_net_log_locating_private_key_for_certificate();
    internal static string get_net_log_cert_is_of_type_2();
    internal static string get_net_log_found_cert_in_store();
    internal static string get_net_log_did_not_find_cert_in_store();
    internal static string get_net_log_open_store_failed();
    internal static string get_net_log_got_certificate_from_delegate();
    internal static string get_net_log_no_delegate_and_have_no_client_cert();
    internal static string get_net_log_no_delegate_but_have_client_cert();
    internal static string get_net_log_attempting_restart_using_cert();
    internal static string get_net_log_no_issuers_try_all_certs();
    internal static string get_net_log_server_issuers_look_for_matching_certs();
    internal static string get_net_log_selected_cert();
    internal static string get_net_log_n_certs_after_filtering();
    internal static string get_net_log_finding_matching_certs();
    internal static string get_net_log_using_cached_credential();
    internal static string get_net_log_remote_cert_user_declared_valid();
    internal static string get_net_log_remote_cert_user_declared_invalid();
    internal static string get_net_log_remote_cert_has_no_errors();
    internal static string get_net_log_remote_cert_has_errors();
    internal static string get_net_log_remote_cert_not_available();
    internal static string get_net_log_remote_cert_name_mismatch();
    internal static string get_net_log_proxy_autodetect_script_location_parse_error();
    internal static string get_net_log_proxy_autodetect_failed();
    internal static string get_net_log_proxy_script_execution_error();
    internal static string get_net_log_proxy_script_download_compile_error();
    internal static string get_net_log_proxy_system_setting_update();
    internal static string get_net_log_proxy_update_due_to_ip_config_change();
    internal static string get_net_log_proxy_called_with_null_parameter();
    internal static string get_net_log_proxy_called_with_invalid_parameter();
    internal static string get_net_log_proxy_ras_supported();
    internal static string get_net_log_proxy_ras_notsupported_exception();
    internal static string get_net_log_proxy_winhttp_cant_open_session();
    internal static string get_net_log_proxy_winhttp_getproxy_failed();
    internal static string get_net_log_proxy_winhttp_timeout_error();
    internal static string get_net_log_cache_validation_failed_resubmit();
    internal static string get_net_log_cache_refused_server_response();
    internal static string get_net_log_cache_ftp_proxy_doesnt_support_partial();
    internal static string get_net_log_cache_ftp_method();
    internal static string get_net_log_cache_ftp_supports_bin_only();
    internal static string get_net_log_cache_replacing_entry_with_HTTP_200();
    internal static string get_net_log_cache_now_time();
    internal static string get_net_log_cache_max_age_absolute();
    internal static string get_net_log_cache_age1();
    internal static string get_net_log_cache_age1_date_header();
    internal static string get_net_log_cache_age1_last_synchronized();
    internal static string get_net_log_cache_age1_last_synchronized_age_header();
    internal static string get_net_log_cache_age2();
    internal static string get_net_log_cache_max_age_cache_s_max_age();
    internal static string get_net_log_cache_max_age_expires_date();
    internal static string get_net_log_cache_max_age_cache_max_age();
    internal static string get_net_log_cache_no_max_age_use_10_percent();
    internal static string get_net_log_cache_no_max_age_use_default();
    internal static string get_net_log_cache_validator_invalid_for_policy();
    internal static string get_net_log_cache_response_last_modified();
    internal static string get_net_log_cache_cache_last_modified();
    internal static string get_net_log_cache_partial_and_non_zero_content_offset();
    internal static string get_net_log_cache_response_valid_based_on_policy();
    internal static string get_net_log_cache_null_response_failure();
    internal static string get_net_log_cache_ftp_response_status();
    internal static string get_net_log_cache_resp_valid_based_on_retry();
    internal static string get_net_log_cache_no_update_based_on_method();
    internal static string get_net_log_cache_removed_existing_invalid_entry();
    internal static string get_net_log_cache_not_updated_based_on_policy();
    internal static string get_net_log_cache_not_updated_because_no_response();
    internal static string get_net_log_cache_removed_existing_based_on_method();
    internal static string get_net_log_cache_existing_not_removed_because_unexpected_response_status();
    internal static string get_net_log_cache_removed_existing_based_on_policy();
    internal static string get_net_log_cache_not_updated_based_on_ftp_response_status();
    internal static string get_net_log_cache_update_not_supported_for_ftp_restart();
    internal static string get_net_log_cache_removed_entry_because_ftp_restart_response_changed();
    internal static string get_net_log_cache_last_synchronized();
    internal static string get_net_log_cache_suppress_update_because_synched_last_minute();
    internal static string get_net_log_cache_updating_last_synchronized();
    internal static string get_net_log_cache_cannot_remove();
    internal static string get_net_log_cache_key_status();
    internal static string get_net_log_cache_key_remove_failed_status();
    internal static string get_net_log_cache_usecount_file();
    internal static string get_net_log_cache_stream();
    internal static string get_net_log_cache_filename();
    internal static string get_net_log_cache_lookup_failed();
    internal static string get_net_log_cache_exception();
    internal static string get_net_log_cache_expected_length();
    internal static string get_net_log_cache_last_modified();
    internal static string get_net_log_cache_expires();
    internal static string get_net_log_cache_max_stale();
    internal static string get_net_log_cache_dumping_metadata();
    internal static string get_net_log_cache_create_failed();
    internal static string get_net_log_cache_set_expires();
    internal static string get_net_log_cache_set_last_modified();
    internal static string get_net_log_cache_set_last_synchronized();
    internal static string get_net_log_cache_enable_max_stale();
    internal static string get_net_log_cache_disable_max_stale();
    internal static string get_net_log_cache_set_new_metadata();
    internal static string get_net_log_cache_dumping();
    internal static string get_net_log_cache_key();
    internal static string get_net_log_cache_no_commit();
    internal static string get_net_log_cache_error_deleting_filename();
    internal static string get_net_log_cache_update_failed();
    internal static string get_net_log_cache_delete_failed();
    internal static string get_net_log_cache_commit_failed();
    internal static string get_net_log_cache_committed_as_partial();
    internal static string get_net_log_cache_max_stale_and_update_status();
    internal static string get_net_log_cache_failing_request_with_exception();
    internal static string get_net_log_cache_request_method();
    internal static string get_net_log_cache_http_status_parse_failure();
    internal static string get_net_log_cache_http_status_line();
    internal static string get_net_log_cache_cache_control();
    internal static string get_net_log_cache_invalid_http_version();
    internal static string get_net_log_cache_no_http_response_header();
    internal static string get_net_log_cache_http_header_parse_error();
    internal static string get_net_log_cache_metadata_name_value_parse_error();
    internal static string get_net_log_cache_content_range_error();
    internal static string get_net_log_cache_cache_control_error();
    internal static string get_net_log_cache_unexpected_status();
    internal static string get_net_log_cache_object_and_exception();
    internal static string get_net_log_cache_revalidation_not_needed();
    internal static string get_net_log_cache_not_updated_based_on_cache_protocol_status();
    internal static string get_net_log_cache_closing_cache_stream();
    internal static string get_net_log_cache_exception_ignored();
    internal static string get_net_log_cache_no_cache_entry();
    internal static string get_net_log_cache_null_cached_stream();
    internal static string get_net_log_cache_requested_combined_but_null_cached_stream();
    internal static string get_net_log_cache_returned_range_cache();
    internal static string get_net_log_cache_entry_not_found_freshness_undefined();
    internal static string get_net_log_cache_dumping_cache_context();
    internal static string get_net_log_cache_result();
    internal static string get_net_log_cache_uri_with_query_has_no_expiration();
    internal static string get_net_log_cache_uri_with_query_and_cached_resp_from_http_10();
    internal static string get_net_log_cache_valid_as_fresh_or_because_policy();
    internal static string get_net_log_cache_accept_based_on_retry_count();
    internal static string get_net_log_cache_date_header_older_than_cache_entry();
    internal static string get_net_log_cache_server_didnt_satisfy_range();
    internal static string get_net_log_cache_304_received_on_unconditional_request();
    internal static string get_net_log_cache_304_received_on_unconditional_request_expected_200_206();
    internal static string get_net_log_cache_last_modified_header_older_than_cache_entry();
    internal static string get_net_log_cache_freshness_outside_policy_limits();
    internal static string get_net_log_cache_need_to_remove_invalid_cache_entry_304();
    internal static string get_net_log_cache_resp_status();
    internal static string get_net_log_cache_resp_304_or_request_head();
    internal static string get_net_log_cache_dont_update_cached_headers();
    internal static string get_net_log_cache_update_cached_headers();
    internal static string get_net_log_cache_partial_resp_not_combined_with_existing_entry();
    internal static string get_net_log_cache_request_contains_conditional_header();
    internal static string get_net_log_cache_not_a_get_head_post();
    internal static string get_net_log_cache_cannot_update_cache_if_304();
    internal static string get_net_log_cache_cannot_update_cache_with_head_resp();
    internal static string get_net_log_cache_http_resp_is_null();
    internal static string get_net_log_cache_resp_cache_control_is_no_store();
    internal static string get_net_log_cache_resp_cache_control_is_public();
    internal static string get_net_log_cache_resp_cache_control_is_private();
    internal static string get_net_log_cache_resp_cache_control_is_private_plus_headers();
    internal static string get_net_log_cache_resp_older_than_cache();
    internal static string get_net_log_cache_revalidation_required();
    internal static string get_net_log_cache_needs_revalidation();
    internal static string get_net_log_cache_resp_allows_caching();
    internal static string get_net_log_cache_auth_header_and_no_s_max_age();
    internal static string get_net_log_cache_post_resp_without_cache_control_or_expires();
    internal static string get_net_log_cache_valid_based_on_status_code();
    internal static string get_net_log_cache_resp_no_cache_control();
    internal static string get_net_log_cache_age();
    internal static string get_net_log_cache_policy_min_fresh();
    internal static string get_net_log_cache_policy_max_age();
    internal static string get_net_log_cache_policy_cache_sync_date();
    internal static string get_net_log_cache_policy_max_stale();
    internal static string get_net_log_cache_control_no_cache();
    internal static string get_net_log_cache_control_no_cache_removing_some_headers();
    internal static string get_net_log_cache_control_must_revalidate();
    internal static string get_net_log_cache_cached_auth_header();
    internal static string get_net_log_cache_cached_auth_header_no_control_directive();
    internal static string get_net_log_cache_after_validation();
    internal static string get_net_log_cache_resp_status_304();
    internal static string get_net_log_cache_head_resp_has_different_content_length();
    internal static string get_net_log_cache_head_resp_has_different_content_md5();
    internal static string get_net_log_cache_head_resp_has_different_etag();
    internal static string get_net_log_cache_304_head_resp_has_different_last_modified();
    internal static string get_net_log_cache_existing_entry_has_to_be_discarded();
    internal static string get_net_log_cache_existing_entry_should_be_discarded();
    internal static string get_net_log_cache_206_resp_non_matching_entry();
    internal static string get_net_log_cache_206_resp_starting_position_not_adjusted();
    internal static string get_net_log_cache_combined_resp_requested();
    internal static string get_net_log_cache_updating_headers_on_304();
    internal static string get_net_log_cache_suppressing_headers_update_on_304();
    internal static string get_net_log_cache_status_code_not_304_206();
    internal static string get_net_log_cache_sxx_resp_cache_only();
    internal static string get_net_log_cache_sxx_resp_can_be_replaced();
    internal static string get_net_log_cache_vary_header_empty();
    internal static string get_net_log_cache_vary_header_contains_asterisks();
    internal static string get_net_log_cache_no_headers_in_metadata();
    internal static string get_net_log_cache_vary_header_mismatched_count();
    internal static string get_net_log_cache_vary_header_mismatched_field();
    internal static string get_net_log_cache_vary_header_match();
    internal static string get_net_log_cache_range();
    internal static string get_net_log_cache_range_invalid_format();
    internal static string get_net_log_cache_range_not_in_cache();
    internal static string get_net_log_cache_range_in_cache();
    internal static string get_net_log_cache_partial_resp();
    internal static string get_net_log_cache_range_request_range();
    internal static string get_net_log_cache_could_be_partial();
    internal static string get_net_log_cache_condition_if_none_match();
    internal static string get_net_log_cache_condition_if_modified_since();
    internal static string get_net_log_cache_cannot_construct_conditional_request();
    internal static string get_net_log_cache_cannot_construct_conditional_range_request();
    internal static string get_net_log_cache_entry_size_too_big();
    internal static string get_net_log_cache_condition_if_range();
    internal static string get_net_log_cache_conditional_range_not_implemented_on_http_10();
    internal static string get_net_log_cache_saving_request_headers();
    internal static string get_net_log_cache_only_byte_range_implemented();
    internal static string get_net_log_cache_multiple_complex_range_not_implemented();
    internal static string get_net_log_digest_hash_algorithm_not_supported();
    internal static string get_net_log_digest_qop_not_supported();
    internal static string get_net_log_digest_requires_nonce();
    internal static string get_net_log_auth_invalid_challenge();
    internal static string get_net_log_unknown();
    internal static string get_net_log_operation_returned_something();
    internal static string get_net_log_operation_failed_with_error();
    internal static string get_net_log_buffered_n_bytes();
    internal static string get_net_log_method_equal();
    internal static string get_net_log_releasing_connection();
    internal static string get_net_log_unexpected_exception();
    internal static string get_net_log_server_response_error_code();
    internal static string get_net_log_resubmitting_request();
    internal static string get_net_log_retrieving_localhost_exception();
    internal static string get_net_log_resolved_servicepoint_may_not_be_remote_server();
    internal static string get_net_log_closed_idle();
    internal static string get_net_log_received_status_line();
    internal static string get_net_log_sending_headers();
    internal static string get_net_log_received_headers();
    internal static string get_net_log_shell_expression_pattern_format_warning();
    internal static string get_net_log_exception_in_callback();
    internal static string get_net_log_sending_command();
    internal static string get_net_log_received_response();
    internal static string get_net_log_socket_connected();
    internal static string get_net_log_socket_accepted();
    internal static string get_net_log_socket_not_logged_file();
    internal static string get_net_log_socket_connect_dnsendpoint();
    internal static string get_MailAddressInvalidFormat();
    internal static string get_MailSubjectInvalidFormat();
    internal static string get_MailBase64InvalidCharacter();
    internal static string get_MailCollectionIsReadOnly();
    internal static string get_MailDateInvalidFormat();
    internal static string get_MailHeaderFieldAlreadyExists();
    internal static string get_MailHeaderFieldInvalidCharacter();
    internal static string get_MailHeaderFieldMalformedHeader();
    internal static string get_MailHeaderFieldMismatchedName();
    internal static string get_MailHeaderIndexOutOfBounds();
    internal static string get_MailHeaderItemAccessorOnlySingleton();
    internal static string get_MailHeaderListHasChanged();
    internal static string get_MailHeaderResetCalledBeforeEOF();
    internal static string get_MailHeaderTargetArrayTooSmall();
    internal static string get_MailHeaderInvalidCID();
    internal static string get_MailHostNotFound();
    internal static string get_MailReaderGetContentStreamAlreadyCalled();
    internal static string get_MailReaderTruncated();
    internal static string get_MailWriterIsInContent();
    internal static string get_MailServerDoesNotSupportStartTls();
    internal static string get_MailServerResponse();
    internal static string get_SSPIAuthenticationOrSPNNull();
    internal static string get_SSPIPInvokeError();
    internal static string get_SSPIInvalidHandleType();
    internal static string get_SmtpAlreadyConnected();
    internal static string get_SmtpAuthenticationFailed();
    internal static string get_SmtpAuthenticationFailedNoCreds();
    internal static string get_SmtpDataStreamOpen();
    internal static string get_SmtpDefaultMimePreamble();
    internal static string get_SmtpDefaultSubject();
    internal static string get_SmtpInvalidResponse();
    internal static string get_SmtpNotConnected();
    internal static string get_SmtpSystemStatus();
    internal static string get_SmtpHelpMessage();
    internal static string get_SmtpServiceReady();
    internal static string get_SmtpServiceClosingTransmissionChannel();
    internal static string get_SmtpOK();
    internal static string get_SmtpUserNotLocalWillForward();
    internal static string get_SmtpStartMailInput();
    internal static string get_SmtpServiceNotAvailable();
    internal static string get_SmtpMailboxBusy();
    internal static string get_SmtpLocalErrorInProcessing();
    internal static string get_SmtpInsufficientStorage();
    internal static string get_SmtpPermissionDenied();
    internal static string get_SmtpCommandUnrecognized();
    internal static string get_SmtpSyntaxError();
    internal static string get_SmtpCommandNotImplemented();
    internal static string get_SmtpBadCommandSequence();
    internal static string get_SmtpCommandParameterNotImplemented();
    internal static string get_SmtpMailboxUnavailable();
    internal static string get_SmtpUserNotLocalTryAlternatePath();
    internal static string get_SmtpExceededStorageAllocation();
    internal static string get_SmtpMailboxNameNotAllowed();
    internal static string get_SmtpTransactionFailed();
    internal static string get_SmtpSendMailFailure();
    internal static string get_SmtpRecipientFailed();
    internal static string get_SmtpRecipientRequired();
    internal static string get_SmtpFromRequired();
    internal static string get_SmtpAllRecipientsFailed();
    internal static string get_SmtpClientNotPermitted();
    internal static string get_SmtpMustIssueStartTlsFirst();
    internal static string get_SmtpNeedAbsolutePickupDirectory();
    internal static string get_SmtpGetIisPickupDirectoryFailed();
    internal static string get_SmtpPickupDirectoryDoesnotSupportSsl();
    internal static string get_SmtpOperationInProgress();
    internal static string get_SmtpAuthResponseInvalid();
    internal static string get_SmtpEhloResponseInvalid();
    internal static string get_SmtpNonAsciiUserNotSupported();
    internal static string get_SmtpInvalidHostName();
    internal static string get_MimeTransferEncodingNotSupported();
    internal static string get_SeekNotSupported();
    internal static string get_WriteNotSupported();
    internal static string get_InvalidHexDigit();
    internal static string get_InvalidSSPIContext();
    internal static string get_InvalidSSPIContextKey();
    internal static string get_InvalidSSPINegotiationElement();
    internal static string get_InvalidHeaderName();
    internal static string get_InvalidHeaderValue();
    internal static string get_CannotGetEffectiveTimeOfSSPIContext();
    internal static string get_CannotGetExpiryTimeOfSSPIContext();
    internal static string get_ReadNotSupported();
    internal static string get_InvalidAsyncResult();
    internal static string get_UnspecifiedHost();
    internal static string get_InvalidPort();
    internal static string get_SmtpInvalidOperationDuringSend();
    internal static string get_MimePartCantResetStream();
    internal static string get_MediaTypeInvalid();
    internal static string get_ContentTypeInvalid();
    internal static string get_ContentDispositionInvalid();
    internal static string get_ArgumentOutOfRange_Bounds_Lower_Upper();
    internal static string get_InvalidOperation_EnumFailedVersion();
    internal static string get_InvalidOperation_EnumOpCantHappen();
    internal static string get_security_ExtendedProtectionPolicy_UseDifferentConstructorForNever();
    internal static string get_security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection();
    internal static string get_security_ServiceNameCollection_EmptyServiceName();
    internal static string get_security_X509Certificate_NotSupported();
    internal static string get_InvalidOperation_WrongAsyncResultOrEndReadCalledMultiple();
    internal static string get_InvalidOperation_WrongAsyncResultOrEndWriteCalledMultiple();
    internal static string get_ObjectDisposed_StreamIsClosed();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static Type get_ResourceType();
}
[ExtensionAttribute]
internal static class System.StringExtensions : object {
    [ExtensionAttribute]
internal static string SubstringTrim(string value, int startIndex);
    [ExtensionAttribute]
internal static string SubstringTrim(string value, int startIndex, int length);
}
