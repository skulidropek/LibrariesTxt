internal static class FxResources.System.Runtime.Extensions.SR : object {
}
internal static class Interop : object {
    internal static int ERROR_SUCCESS;
    internal static int ERROR_INVALID_FUNCTION;
    internal static int ERROR_FILE_NOT_FOUND;
    internal static int ERROR_PATH_NOT_FOUND;
    internal static int ERROR_ACCESS_DENIED;
    internal static int ERROR_INVALID_HANDLE;
    internal static int ERROR_INVALID_DATA;
    internal static int ERROR_INVALID_DRIVE;
    internal static int ERROR_NO_MORE_FILES;
    internal static int ERROR_NOT_READY;
    internal static int ERROR_SHARING_VIOLATION;
    internal static int ERROR_FILE_EXISTS;
    internal static int ERROR_INVALID_PARAMETER;
    internal static int ERROR_BROKEN_PIPE;
    internal static int ERROR_INVALID_NAME;
    internal static int ERROR_BAD_PATHNAME;
    internal static int ERROR_ALREADY_EXISTS;
    internal static int ERROR_FILENAME_EXCED_RANGE;
    internal static int ERROR_PIPE_NOT_CONNECTED;
    internal static int ERROR_OPERATION_ABORTED;
    internal static int ERROR_NOT_FOUND;
}
internal static class System.ArrayT`1 : object {
    public static void Copy(T[] sourceArray, int sourceIndex, T[] destinationArray, int destinationIndex, int length);
    public static T[] Resize(T[] src, int newLength, int copyCount);
    public static void Clear(T[] array, int index, int length);
}
public static class System.BitConverter : object {
    public static bool IsLittleEndian;
    private static BitConverter();
    public static Byte[] GetBytes(bool value);
    public static Byte[] GetBytes(char value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(short value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(int value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(long value);
    [CLSCompliantAttribute("False")]
public static Byte[] GetBytes(ushort value);
    [CLSCompliantAttribute("False")]
public static Byte[] GetBytes(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Byte[] GetBytes(ulong value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(float value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(double value);
    public static char ToChar(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static short ToInt16(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static int ToInt32(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static long ToInt64(Byte[] value, int startIndex);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Byte[] value, int startIndex);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Byte[] value, int startIndex);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static float ToSingle(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static double ToDouble(Byte[] value, int startIndex);
    private static char GetHexValue(int i);
    public static string ToString(Byte[] value, int startIndex, int length);
    public static string ToString(Byte[] value);
    public static string ToString(Byte[] value, int startIndex);
    public static bool ToBoolean(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static long DoubleToInt64Bits(double value);
    [SecuritySafeCriticalAttribute]
public static double Int64BitsToDouble(long value);
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.LowLevelDictionary`2 : object {
    private static int DefaultSize;
    private Entry[] _buckets;
    private int _numEntries;
    private int _version;
    private IEqualityComparer`1<TKey> _comparer;
    public int Count { get; }
    public TValue Item { get; public set; }
    public LowLevelDictionary`2(int capacity);
    public LowLevelDictionary`2(IEqualityComparer`1<TKey> comparer);
    public LowLevelDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public int get_Count();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& value);
    public void Add(TKey key, TValue value);
    public void Clear(int capacity);
    public bool Remove(TKey key);
    internal TValue LookupOrAdd(TKey key, TValue value);
    private Entry<TKey, TValue> Find(TKey key);
    private Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
    private void ExpandBuckets();
    private int GetBucket(TKey key, int numBuckets);
}
internal class System.Collections.Generic.LowLevelDictionaryWithIEnumerable`2 : LowLevelDictionary`2<TKey, TValue> {
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Diagnostics.Stopwatch : object {
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private long _elapsed;
    private long _startTimeStamp;
    private bool _isRunning;
    public static long Frequency;
    public static bool IsHighResolution;
    private static double s_tickFrequency;
    public bool IsRunning { get; }
    public TimeSpan Elapsed { get; }
    public long ElapsedMilliseconds { get; }
    public long ElapsedTicks { get; }
    private static Stopwatch();
    public void Start();
    public static Stopwatch StartNew();
    public void Stop();
    public void Reset();
    public void Restart();
    public bool get_IsRunning();
    public TimeSpan get_Elapsed();
    public long get_ElapsedMilliseconds();
    public long get_ElapsedTicks();
    public static long GetTimestamp();
    private long GetRawElapsedTicks();
    private long GetElapsedDateTimeTicks();
    private static bool QueryPerformanceFrequency(Int64& value);
    private static bool QueryPerformanceCounter(Int64& value);
}
internal class System.IO.LowLevelStringWriter : LowLevelTextWriter {
    private StringBuilder _sb;
    public virtual void Write(char c);
    public virtual void Write(string s);
    public virtual string ToString();
}
internal abstract class System.IO.LowLevelTextWriter : object {
    public abstract virtual void Write(char c);
    public abstract virtual void Write(string s);
}
[ComVisibleAttribute("True")]
public static class System.IO.Path : object {
    public static char DirectorySeparatorChar;
    private static string DirectorySeparatorCharAsString;
    public static char AltDirectorySeparatorChar;
    public static char VolumeSeparatorChar;
    internal static Char[] TrimEndChars;
    private static Char[] RealInvalidPathChars;
    private static Char[] InvalidPathCharsWithAdditionalChecks;
    private static Char[] InvalidFileNameChars;
    public static char PathSeparator;
    internal static int MaxPath;
    private static int MaxDirectoryLength;
    internal static int MAX_PATH;
    internal static int MAX_DIRECTORY_PATH;
    internal static int MaxLongPath;
    private static string LongPathPrefix;
    private static string UNCPathPrefix;
    private static string UNCLongPathPrefixToInsert;
    private static string UNCLongPathPrefix;
    private static Char[] s_Base32Char;
    private static Path();
    public static string ChangeExtension(string path, string extension);
    public static string GetDirectoryName(string path);
    internal static int GetRootLength(string path);
    internal static bool IsDirectorySeparator(char c);
    public static Char[] GetInvalidPathChars();
    public static Char[] GetInvalidFileNameChars();
    public static string GetExtension(string path);
    [SecuritySafeCriticalAttribute]
public static string GetFullPath(string path);
    private static void EmulateFileIOPermissionChecks(string fullPath);
    [SecurityCriticalAttribute]
internal static string UnsafeGetFullPath(string path);
    internal static string GetFullPathInternal(string path);
    [SecuritySafeCriticalAttribute]
internal static string NormalizePath(string path, bool fullCheck);
    [SecuritySafeCriticalAttribute]
internal static string NormalizePath(string path, bool fullCheck, bool expandShortPaths);
    [SecuritySafeCriticalAttribute]
internal static string NormalizePath(string path, bool fullCheck, int maxPathLength);
    [SecurityCriticalAttribute]
internal static string NormalizePath(string path, bool fullCheck, int maxPathLength, bool expandShortPaths);
    internal static bool HasLongPathPrefix(string path);
    internal static string AddLongPathPrefix(string path);
    internal static string RemoveLongPathPrefix(string path);
    internal static StringBuilder RemoveLongPathPrefix(StringBuilder pathSB);
    public static string GetFileName(string path);
    public static string GetFileNameWithoutExtension(string path);
    public static string GetPathRoot(string path);
    [SecuritySafeCriticalAttribute]
public static string GetTempPath();
    internal static bool IsRelative(string path);
    public static string GetRandomFileName();
    [SecuritySafeCriticalAttribute]
public static string GetTempFileName();
    [SecurityCriticalAttribute]
internal static string UnsafeGetTempFileName();
    [SecurityCriticalAttribute]
private static string InternalGetTempFileName(bool checkHost);
    public static bool HasExtension(string path);
    public static bool IsPathRooted(string path);
    public static string Combine(string path1, string path2);
    public static string Combine(string path1, string path2, string path3);
    public static string Combine(String[] paths);
    private static string CombineNoChecks(string path1, string path2);
    internal static string ToBase32StringSuitableForDirName(Byte[] buff);
    internal static void CheckSearchPattern(string searchPattern);
    internal static bool HasIllegalCharacters(string path, bool checkAdditional);
    internal static void CheckInvalidPathChars(string path, bool checkAdditional);
    internal static string InternalCombine(string path1, string path2);
}
[DefaultMemberAttribute("Item")]
internal class System.IO.PathHelper : object {
    private int m_capacity;
    private int m_length;
    private int m_maxPath;
    [SecurityCriticalAttribute]
private Char* m_arrayPtr;
    private StringBuilder m_sb;
    private bool useStackAlloc;
    private bool doNotTryExpandShortFileName;
    internal int Length { get; internal set; }
    internal int Capacity { get; }
    internal char Item { get; internal set; }
    [SecurityCriticalAttribute]
internal PathHelper(Char* charArrayPtr, int length);
    internal PathHelper(int capacity, int maxPath);
    internal int get_Length();
    internal void set_Length(int value);
    internal int get_Capacity();
    [SecurityCriticalAttribute]
internal char get_Item(int index);
    [SecurityCriticalAttribute]
internal void set_Item(int index, char value);
    [SecurityCriticalAttribute]
internal void Append(char value);
    [SecurityCriticalAttribute]
internal int GetFullPathName();
    [SecurityCriticalAttribute]
internal bool TryExpandShortFileName();
    [SecurityCriticalAttribute]
internal void Fixup(int lenSavedName, int lastSlash);
    [SecurityCriticalAttribute]
internal bool OrdinalStartsWith(string compareTo, bool ignoreCase);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    [SecurityCriticalAttribute]
private Char* UnsafeGetArrayPtr();
    private StringBuilder GetStringBuilder();
    [SecurityCriticalAttribute]
private void NullTerminate();
    private static void Wstrcpy(Char* dmem, Char* smem, int charCount);
}
internal static class System.IO.StringBuilderCache : object {
    private static int MAX_BUILDER_SIZE;
    private static int DEFAULT_CAPACITY;
    [ThreadStaticAttribute]
private static StringBuilder t_cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static StringBuilder Acquire(string value);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
internal static class System.IO.Win32Marshal : object {
    internal static Exception GetExceptionForLastWin32Error();
    internal static Exception GetExceptionForLastWin32Error(string path);
    internal static Exception GetExceptionForWin32Error(int errorCode);
    internal static Exception GetExceptionForWin32Error(int errorCode, string path);
    internal static int MakeHRFromErrorCode(int errorCode);
    internal static int TryMakeWin32ErrorCodeFromHR(int hr);
    internal static string GetMessage(int errorCode);
}
internal enum System.Net.Configuration.UnicodeDecodingConformance : Enum {
    public int value__;
    public static UnicodeDecodingConformance Auto;
    public static UnicodeDecodingConformance Strict;
    public static UnicodeDecodingConformance Compat;
    public static UnicodeDecodingConformance Loose;
}
internal enum System.Net.Configuration.UnicodeEncodingConformance : Enum {
    public int value__;
    public static UnicodeEncodingConformance Auto;
    public static UnicodeEncodingConformance Strict;
    public static UnicodeEncodingConformance Compat;
}
public static class System.Net.WebUtility : object {
    private static char HIGH_SURROGATE_START;
    private static char LOW_SURROGATE_START;
    private static char LOW_SURROGATE_END;
    private static int UNICODE_PLANE00_END;
    private static int UNICODE_PLANE01_START;
    private static int UNICODE_PLANE16_END;
    private static int UnicodeReplacementChar;
    private static UnicodeDecodingConformance s_htmlDecodeConformance;
    private static UnicodeEncodingConformance s_htmlEncodeConformance;
    private static Char[] s_htmlEntityEndingChars;
    private static WebUtility();
    public static string HtmlEncode(string value);
    private static void HtmlEncode(string value, LowLevelTextWriter output);
    public static string HtmlDecode(string value);
    private static void HtmlDecode(string value, LowLevelTextWriter output);
    private static int IndexOfHtmlEncodingChars(string s, int startPos);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count, bool alwaysCreateNewReturnValue);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count);
    public static string UrlEncode(string value);
    public static Byte[] UrlEncodeToBytes(Byte[] value, int offset, int count);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static Byte[] UrlDecodeInternal(Byte[] bytes, int offset, int count);
    public static string UrlDecode(string encodedValue);
    public static Byte[] UrlDecodeToBytes(Byte[] encodedValue, int offset, int count);
    private static void ConvertSmpToUtf16(UInt32 smpChar, Char& leadingSurrogate, Char& trailingSurrogate);
    private static int GetNextUnicodeScalarValueFromUtf16Surrogate(Char*& pch, Int32& charsRemaining);
    private static int HexToInt(char h);
    private static char IntToHex(int n);
    private static bool IsUrlSafeChar(char ch);
    private static bool ValidateUrlEncodingParameters(Byte[] bytes, int offset, int count);
    private static bool StringRequiresHtmlDecoding(string s);
}
[ComVisibleAttribute("True")]
public class System.Random : object {
    private static int MBIG;
    private static int MSEED;
    private static int MZ;
    private int inext;
    private int inextp;
    private Int32[] SeedArray;
    public Random(int Seed);
    protected virtual double Sample();
    private int InternalSample();
    public virtual int Next();
    private double GetSampleForLargeRange();
    public virtual int Next(int minValue, int maxValue);
    public virtual int Next(int maxValue);
    public virtual double NextDouble();
    public virtual void NextBytes(Byte[] buffer);
}
internal static class System.Runtime.InteropServices.Marshal : object {
    public static int GetLastWin32Error();
}
public class System.Runtime.Versioning.FrameworkName : object {
    private string _identifier;
    private Version _version;
    private string _profile;
    private string _fullName;
    private static char c_componentSeparator;
    private static char c_keyValueSeparator;
    private static char c_versionValuePrefix;
    private static string c_versionKey;
    private static string c_profileKey;
    public string Identifier { get; }
    public Version Version { get; }
    public string Profile { get; }
    public string FullName { get; }
    public FrameworkName(string identifier, Version version);
    public FrameworkName(string identifier, Version version, string profile);
    public FrameworkName(string frameworkName);
    public string get_Identifier();
    public Version get_Version();
    public string get_Profile();
    public string get_FullName();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FrameworkName other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(FrameworkName left, FrameworkName right);
    public static bool op_Inequality(FrameworkName left, FrameworkName right);
}
internal static class System.SR : object {
    private static object s_resourceMap;
    private static string s_resourcesName;
    private static object ResourceMap { get; }
    internal static string Argument_AddingDuplicate { get; }
    internal static string Argument_FrameworkNameMissingVersion { get; }
    internal static string Argument_FrameworkNameInvalid { get; }
    internal static string Argument_FrameworkNameInvalidVersion { get; }
    internal static string Argument_FrameworkNameTooShort { get; }
    internal static string net_emptystringcall { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string ArgumentOutOfRange_GenericPositive { get; }
    internal static string ArgumentOutOfRange_StartIndex { get; }
    internal static string ArgumentOutOfRange_LengthTooLarge { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Arg_InvalidSearchPattern { get; }
    internal static string Arg_PathGlobalRoot { get; }
    internal static string Arg_PathIllegal { get; }
    internal static string Arg_PathIllegalUNC { get; }
    internal static string Arg_Path2IsRooted { get; }
    internal static string Argument_InvalidPathChars { get; }
    internal static string Argument_PathEmpty { get; }
    internal static string Argument_MinMaxValue { get; }
    internal static string Argument_PathFormatNotSupported { get; }
    internal static string Argument_PathUriFormatNotSupported { get; }
    internal static string ArgumentOutOfRange_MustBePositive { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_FileNotFound { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string UnknownError_Num { get; }
    internal static Type ResourceType { get; }
    private static object get_ResourceMap();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Argument_AddingDuplicate();
    internal static string get_Argument_FrameworkNameMissingVersion();
    internal static string get_Argument_FrameworkNameInvalid();
    internal static string get_Argument_FrameworkNameInvalidVersion();
    internal static string get_Argument_FrameworkNameTooShort();
    internal static string get_net_emptystringcall();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_ArgumentOutOfRange_GenericPositive();
    internal static string get_ArgumentOutOfRange_StartIndex();
    internal static string get_ArgumentOutOfRange_LengthTooLarge();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Arg_InvalidSearchPattern();
    internal static string get_Arg_PathGlobalRoot();
    internal static string get_Arg_PathIllegal();
    internal static string get_Arg_PathIllegalUNC();
    internal static string get_Arg_Path2IsRooted();
    internal static string get_Argument_InvalidPathChars();
    internal static string get_Argument_PathEmpty();
    internal static string get_Argument_MinMaxValue();
    internal static string get_Argument_PathFormatNotSupported();
    internal static string get_Argument_PathUriFormatNotSupported();
    internal static string get_ArgumentOutOfRange_MustBePositive();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_FileNotFound();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_FileExists_Name();
    internal static string get_UnknownError_Num();
    internal static Type get_ResourceType();
}
