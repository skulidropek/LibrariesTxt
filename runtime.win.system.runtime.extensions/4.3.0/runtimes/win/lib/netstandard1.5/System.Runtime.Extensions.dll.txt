internal static class FxResources.System.Runtime.Extensions.SR : object {
}
internal static class Interop : object {
}
public static class System.BitConverter : object {
    public static bool IsLittleEndian;
    private static BitConverter();
    private static bool GetIsLittleEndian();
    public static Byte[] GetBytes(bool value);
    public static Byte[] GetBytes(char value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(short value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(int value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(long value);
    [CLSCompliantAttribute("False")]
public static Byte[] GetBytes(ushort value);
    [CLSCompliantAttribute("False")]
public static Byte[] GetBytes(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Byte[] GetBytes(ulong value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(float value);
    [SecuritySafeCriticalAttribute]
public static Byte[] GetBytes(double value);
    public static char ToChar(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static short ToInt16(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static int ToInt32(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static long ToInt64(Byte[] value, int startIndex);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Byte[] value, int startIndex);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Byte[] value, int startIndex);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static float ToSingle(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static double ToDouble(Byte[] value, int startIndex);
    private static char GetHexValue(int i);
    public static string ToString(Byte[] value, int startIndex, int length);
    private static string ToString(Byte[] value, int startIndex, int length, Char* chArray, int chArrayLength);
    public static string ToString(Byte[] value);
    public static string ToString(Byte[] value, int startIndex);
    public static bool ToBoolean(Byte[] value, int startIndex);
    [SecuritySafeCriticalAttribute]
public static long DoubleToInt64Bits(double value);
    [SecuritySafeCriticalAttribute]
public static double Int64BitsToDouble(long value);
    private static void ThrowValueArgumentNull();
    private static void ThrowStartIndexArgumentOutOfRange();
    private static void ThrowValueArgumentTooSmall();
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.LowLevelDictionary`2 : object {
    private static int DefaultSize;
    private Entry[] _buckets;
    private int _numEntries;
    private int _version;
    private IEqualityComparer`1<TKey> _comparer;
    public int Count { get; }
    public TValue Item { get; public set; }
    public LowLevelDictionary`2(int capacity);
    public LowLevelDictionary`2(IEqualityComparer`1<TKey> comparer);
    public LowLevelDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public int get_Count();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& value);
    public void Add(TKey key, TValue value);
    public void Clear(int capacity);
    public bool Remove(TKey key);
    internal TValue LookupOrAdd(TKey key, TValue value);
    private Entry<TKey, TValue> Find(TKey key);
    private Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
    private void ExpandBuckets();
    private int GetBucket(TKey key, int numBuckets);
}
public class System.Diagnostics.Stopwatch : object {
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private long _elapsed;
    private long _startTimeStamp;
    private bool _isRunning;
    public static long Frequency;
    public static bool IsHighResolution;
    private static double s_tickFrequency;
    public bool IsRunning { get; }
    public TimeSpan Elapsed { get; }
    public long ElapsedMilliseconds { get; }
    public long ElapsedTicks { get; }
    private static Stopwatch();
    public void Start();
    public static Stopwatch StartNew();
    public void Stop();
    public void Reset();
    public void Restart();
    public bool get_IsRunning();
    public TimeSpan get_Elapsed();
    public long get_ElapsedMilliseconds();
    public long get_ElapsedTicks();
    public static long GetTimestamp();
    private long GetRawElapsedTicks();
    private long GetElapsedDateTimeTicks();
    private static bool QueryPerformanceFrequency(Int64& value);
    private static bool QueryPerformanceCounter(Int64& value);
}
public static class System.IO.Path : object {
    public static char AltDirectorySeparatorChar;
    private static Char[] s_base32Char;
    public static char DirectorySeparatorChar;
    public static char VolumeSeparatorChar;
    public static char PathSeparator;
    private static string DirectorySeparatorCharAsString;
    internal static int MaxPath;
    internal static int MaxLongPath;
    private static Path();
    public static string ChangeExtension(string path, string extension);
    public static string GetDirectoryName(string path);
    public static Char[] GetInvalidPathChars();
    public static string GetExtension(string path);
    public static string GetFileName(string path);
    public static string GetFileNameWithoutExtension(string path);
    public static string GetRandomFileName();
    public static bool HasExtension(string path);
    public static string Combine(string path1, string path2);
    public static string Combine(string path1, string path2, string path3);
    public static string Combine(String[] paths);
    private static string CombineNoChecks(string path1, string path2);
    private static string CombineNoChecks(string path1, string path2, string path3);
    private static void Populate83FileNameFromRandomBytes(Byte* bytes, int byteCount, Char* chars, int charCount);
    public static Char[] GetInvalidFileNameChars();
    public static string GetFullPath(string path);
    public static string GetTempPath();
    public static string GetTempFileName();
    public static bool IsPathRooted(string path);
    public static string GetPathRoot(string path);
    private static void GetCryptoRandomBytes(Byte* bytes, int byteCount);
}
internal class System.IO.PathHelper : object {
    private static int MaxShortName;
    private static char LastAnsi;
    private static char Delete;
    private static Char[] s_trimEndChars;
    [ThreadStaticAttribute]
private static StringBuffer t_fullPathBuffer;
    private static PathHelper();
    internal static string Normalize(string path, bool checkInvalidCharacters, bool expandShortPaths);
    private static bool IsDosUnc(StringBuffer buffer);
    private static void GetFullPathName(string path, StringBuffer fullPath);
    private static UInt32 GetInputBuffer(StringBuffer content, bool isDosUnc, StringBuffer& buffer);
    private static string TryExpandShortFileName(StringBuffer outputBuffer, string originalPath);
}
[ExtensionAttribute]
internal static class System.IO.PathInternal : object {
    internal static string ExtendedPathPrefix;
    internal static string UncPathPrefix;
    internal static string UncExtendedPrefixToInsert;
    internal static string UncExtendedPathPrefix;
    internal static string DevicePathPrefix;
    internal static int MaxShortPath;
    internal static int MaxShortDirectoryPath;
    internal static int MaxLongPath;
    internal static int DevicePrefixLength;
    internal static int UncPrefixLength;
    internal static int UncExtendedPrefixLength;
    internal static int MaxComponentLength;
    private static PathInternal();
    internal static void CheckInvalidPathChars(string path);
    [ExtensionAttribute]
internal static bool StartsWithOrdinal(StringBuilder builder, string value);
    [ExtensionAttribute]
internal static bool StartsWithOrdinal(string source, string value);
    [ExtensionAttribute]
internal static StringBuilder TrimEnd(StringBuilder builder, Char[] trimChars);
    internal static int FindFileNameIndex(string path);
    internal static Char[] GetInvalidPathChars();
    internal static bool IsValidDriveChar(char value);
    internal static bool IsPathTooLong(string fullPath);
    internal static bool IsDirectoryTooLong(string fullPath);
    internal static string EnsureExtendedPrefixOverMaxPath(string path);
    internal static string EnsureExtendedPrefix(string path);
    internal static bool IsDevice(string path);
    internal static bool IsExtended(string path);
    internal static bool HasIllegalCharacters(string path);
    internal static bool HasWildCardCharacters(string path);
    internal static int GetRootLength(string path);
    private static UInt32 GetRootLength(Char* path, UInt32 pathLength);
    private static bool StartsWithOrdinal(Char* source, UInt32 sourceLength, string value);
    internal static bool IsPartiallyQualified(string path);
    internal static int PathStartSkip(string path);
    internal static bool IsDirectorySeparator(char c);
    internal static string NormalizeDirectorySeparators(string path);
    internal static bool IsDirectoryOrVolumeSeparator(char ch);
    internal static bool IsExtended(StringBuffer path);
    internal static UInt32 GetRootLength(StringBuffer path);
    internal static bool IsDevice(StringBuffer path);
    internal static bool IsPartiallyQualified(StringBuffer path);
}
internal static class System.IO.StringBuilderCache : object {
    private static int MAX_BUILDER_SIZE;
    private static int DEFAULT_CAPACITY;
    [ThreadStaticAttribute]
private static StringBuilder t_cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
internal static class System.IO.Win32Marshal : object {
    internal static Exception GetExceptionForLastWin32Error();
    internal static Exception GetExceptionForLastWin32Error(string path);
    internal static Exception GetExceptionForWin32Error(int errorCode);
    internal static Exception GetExceptionForWin32Error(int errorCode, string path);
    internal static int MakeHRFromErrorCode(int errorCode);
    internal static int TryMakeWin32ErrorCodeFromHR(int hr);
    internal static string GetMessage(int errorCode);
}
public static class System.Net.WebUtility : object {
    private static char HIGH_SURROGATE_START;
    private static char LOW_SURROGATE_START;
    private static char LOW_SURROGATE_END;
    private static int UNICODE_PLANE00_END;
    private static int UNICODE_PLANE01_START;
    private static int UNICODE_PLANE16_END;
    private static int UnicodeReplacementChar;
    private static Char[] s_htmlEntityEndingChars;
    private static WebUtility();
    public static string HtmlEncode(string value);
    private static void HtmlEncode(string value, int index, StringBuilder output);
    public static string HtmlDecode(string value);
    private static void HtmlDecode(string value, StringBuilder output);
    private static int IndexOfHtmlEncodingChars(string s, int startPos);
    private static void GetEncodedBytes(Byte[] originalBytes, int offset, int count, Byte[] expandedBytes);
    public static string UrlEncode(string value);
    public static Byte[] UrlEncodeToBytes(Byte[] value, int offset, int count);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static Byte[] UrlDecodeInternal(Byte[] bytes, int offset, int count);
    public static string UrlDecode(string encodedValue);
    public static Byte[] UrlDecodeToBytes(Byte[] encodedValue, int offset, int count);
    private static void ConvertSmpToUtf16(UInt32 smpChar, Char& leadingSurrogate, Char& trailingSurrogate);
    private static int GetNextUnicodeScalarValueFromUtf16Surrogate(Char*& pch, Int32& charsRemaining);
    private static int HexToInt(char h);
    private static char IntToHex(int n);
    private static bool IsUrlSafeChar(char ch);
    private static bool ValidateUrlEncodingParameters(Byte[] bytes, int offset, int count);
    private static bool StringRequiresHtmlDecoding(string s);
}
[DefaultMemberAttribute("Item")]
internal class System.Runtime.InteropServices.NativeBuffer : object {
    private static SafeHeapHandleCache s_handleCache;
    private static SafeHandle s_emptyHandle;
    private SafeHeapHandle _handle;
    private ulong _capacity;
    protected Void* VoidPointer { get; }
    protected Byte* BytePointer { get; }
    public ulong ByteCapacity { get; }
    public byte Item { get; public set; }
    public NativeBuffer(ulong initialMinCapacity);
    private static NativeBuffer();
    protected Void* get_VoidPointer();
    protected Byte* get_BytePointer();
    public SafeHandle GetHandle();
    public ulong get_ByteCapacity();
    public void EnsureByteCapacity(ulong minCapacity);
    public byte get_Item(ulong index);
    public void set_Item(ulong index, byte value);
    private void Resize(ulong byteLength);
    private void ReleaseHandle();
    public virtual void Free();
    public sealed virtual void Dispose();
}
internal class System.Runtime.InteropServices.SafeHeapHandle : SafeBuffer {
    public bool IsInvalid { get; }
    public SafeHeapHandle(ulong byteLength);
    public virtual bool get_IsInvalid();
    public void Resize(ulong byteLength);
    private void RemoveMemoryPressure(ulong removedBytes);
    protected virtual bool ReleaseHandle();
}
internal class System.Runtime.InteropServices.SafeHeapHandleCache : object {
    private ulong _minSize;
    private ulong _maxSize;
    internal SafeHeapHandle[] _handleCache;
    public SafeHeapHandleCache(ulong minSize, ulong maxSize, int maxHandles);
    public SafeHeapHandle Acquire(ulong minSize);
    public void Release(SafeHeapHandle handle);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
internal class System.Runtime.InteropServices.StringBuffer : NativeBuffer {
    private UInt32 _length;
    public char Item { get; public set; }
    public UInt32 CharCapacity { get; }
    public UInt32 Length { get; public set; }
    internal Char* CharPointer { get; }
    public StringBuffer(UInt32 initialCapacity);
    public char get_Item(UInt32 index);
    public void set_Item(UInt32 index, char value);
    public UInt32 get_CharCapacity();
    public void EnsureCharCapacity(UInt32 minCapacity);
    public UInt32 get_Length();
    public void set_Length(UInt32 value);
    public void SetLengthToFirstNull();
    internal Char* get_CharPointer();
    public bool StartsWith(string value);
    public bool SubstringEquals(string value, UInt32 startIndex, int count);
    public void Append(string value, int startIndex, int count);
    public void Append(StringBuffer value, UInt32 startIndex);
    public void Append(StringBuffer value, UInt32 startIndex, UInt32 count);
    public void CopyTo(UInt32 bufferIndex, StringBuffer destination, UInt32 destinationIndex, UInt32 count);
    public void CopyFrom(UInt32 bufferIndex, string source, int sourceIndex, int count);
    public void TrimEnd(Char[] values);
    public virtual string ToString();
    public string Substring(UInt32 startIndex, int count);
    public virtual void Free();
}
public class System.Runtime.Versioning.FrameworkName : object {
    private string _identifier;
    private Version _version;
    private string _profile;
    private string _fullName;
    private static char c_componentSeparator;
    private static char c_keyValueSeparator;
    private static char c_versionValuePrefix;
    private static string c_versionKey;
    private static string c_profileKey;
    public string Identifier { get; }
    public Version Version { get; }
    public string Profile { get; }
    public string FullName { get; }
    public FrameworkName(string identifier, Version version);
    public FrameworkName(string identifier, Version version, string profile);
    public FrameworkName(string frameworkName);
    public string get_Identifier();
    public Version get_Version();
    public string get_Profile();
    public string get_FullName();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FrameworkName other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(FrameworkName left, FrameworkName right);
    public static bool op_Inequality(FrameworkName left, FrameworkName right);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Argument_AddingDuplicate { get; }
    internal static string Argument_FrameworkNameMissingVersion { get; }
    internal static string Argument_FrameworkNameInvalid { get; }
    internal static string Argument_FrameworkNameInvalidVersion { get; }
    internal static string Argument_FrameworkNameTooShort { get; }
    internal static string net_emptystringcall { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string ArgumentOutOfRange_GenericPositive { get; }
    internal static string ArgumentOutOfRange_StartIndex { get; }
    internal static string ArgumentOutOfRange_LengthTooLarge { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string Arg_InvalidSearchPattern { get; }
    internal static string Arg_PathGlobalRoot { get; }
    internal static string Arg_PathIllegal { get; }
    internal static string Arg_PathIllegalUNC { get; }
    internal static string Arg_Path2IsRooted { get; }
    internal static string Argument_InvalidPathChars { get; }
    internal static string Argument_PathEmpty { get; }
    internal static string Argument_MinMaxValue { get; }
    internal static string Argument_PathFormatNotSupported { get; }
    internal static string Argument_PathUriFormatNotSupported { get; }
    internal static string ArgumentOutOfRange_MustBePositive { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_FileNotFound { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string InvalidOperation_Cryptography { get; }
    internal static string UnknownError_Num { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Argument_AddingDuplicate();
    internal static string get_Argument_FrameworkNameMissingVersion();
    internal static string get_Argument_FrameworkNameInvalid();
    internal static string get_Argument_FrameworkNameInvalidVersion();
    internal static string get_Argument_FrameworkNameTooShort();
    internal static string get_net_emptystringcall();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_ArgumentOutOfRange_GenericPositive();
    internal static string get_ArgumentOutOfRange_StartIndex();
    internal static string get_ArgumentOutOfRange_LengthTooLarge();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_Arg_InvalidSearchPattern();
    internal static string get_Arg_PathGlobalRoot();
    internal static string get_Arg_PathIllegal();
    internal static string get_Arg_PathIllegalUNC();
    internal static string get_Arg_Path2IsRooted();
    internal static string get_Argument_InvalidPathChars();
    internal static string get_Argument_PathEmpty();
    internal static string get_Argument_MinMaxValue();
    internal static string get_Argument_PathFormatNotSupported();
    internal static string get_Argument_PathUriFormatNotSupported();
    internal static string get_ArgumentOutOfRange_MustBePositive();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_FileNotFound();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_FileExists_Name();
    internal static string get_InvalidOperation_Cryptography();
    internal static string get_UnknownError_Num();
    internal static Type get_ResourceType();
}
