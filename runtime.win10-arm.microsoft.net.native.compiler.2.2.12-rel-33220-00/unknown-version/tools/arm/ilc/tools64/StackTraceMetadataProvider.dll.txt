[GuidAttribute("f6003315-3cd1-4b44-9805-e3ab0d5f6afe")]
[InterfaceTypeAttribute("1")]
public interface Internal.StackTraceMetadata.Provider.IStackTraceMetadataProvider {
    public abstract virtual void GetTokenForNamespaceType(string namespaceQualifiedTypeName, Int32& typeTempToken);
    public abstract virtual void GetTokenForNestedType(int containingType, string nestedTypeName, Int32& typeTempToken);
    public abstract virtual void GetTokenForGenericTypeParameter(string genericTypeParameterName, Int32& typeTempToken);
    public abstract virtual void GetTokenForSZArrayType(int parameterType, Int32& typeTempToken);
    public abstract virtual void GetTokenForArrayType(int parameterType, int rank, Int32& typeTempToken);
    public abstract virtual void GetTokenForPointerType(int parameterType, Int32& typeTempToken);
    public abstract virtual void GetTokenForByRefType(int parameterType, Int32& typeTempToken);
    public abstract virtual void GetTokenForMethod(string methodName, int containingTypeTempToken, int returnValueTypeTempToken, int parameterCount, Int32* parameterTypeTempTokens, int genericParameterCount, Int32* genericParameterTypeTempTokens, Int32& methodTempToken);
    public abstract virtual void FinalizeOutput();
    public abstract virtual void GetMappingTableSize(Int32& mappingTableCount);
    public abstract virtual void GetMappingTable(int mappingTableCount, StackTraceTokenMapping* table);
    public abstract virtual void GetMetadataBlobSize(Int32& metadataBlobByteCount);
    public abstract virtual void GetMetadataBlob(int metadataBlobByteCount, Byte* metadataBlob);
}
public class Internal.StackTraceMetadata.Provider.MetadataComposer : object {
    private List`1<MetadataRecord> _typeRecords;
    private List`1<MetadataRecord> _methodRecords;
    private Dictionary`2<string, NamespaceReference> _namespaceNameToRecordMap;
    private Dictionary`2<string, int> _genericTypeParameterToTypeRecordIndexMap;
    private Dictionary`2<string, ConstantStringValue> _constantStringMap;
    private ConstantStringValue GetStringRecord(string stringValue);
    private NamespaceReference GetOrCreateContainingNamespaceRecord(string compositeName, String& simpleName);
    public int GetTokenForNamespaceType(string namespaceQualifiedTypeName);
    public int GetTokenForNestedType(int containingTypeTempToken, string nestedTypeName);
    public int GetTokenForGenericTypeParameter(string genericTypeParameterName);
    private int GetTokenForTypeSpecification(MetadataRecord typeSpecSignature);
    public int GetTokenForSZArrayType(int elementType);
    public int GetTokenForArrayType(int elementType, int rank);
    public int GetTokenForPointerType(int dereferenceType);
    public int GetTokenForByRefType(int underlyingType);
    public int GetTokenForMethod(string methodName, int containingTypeTempToken, int returnValueTypeTempToken, int parameterCount, Int32* parameterTypeTempTokens, int genericParameterCount, Int32* genericParameterTypeTempTokens);
    private MethodSignature GetSignature(int returnValueTypeTempToken, int parameterCount, Int32* parameterTypeTempTokens);
    public void FinalizeOutput(Byte[]& metadataBlob, StackTraceTokenMapping[]& mappingTable);
}
public class Internal.StackTraceMetadata.Provider.StackTraceMetadataProvider : object {
    private MetadataComposer _metadataComposer;
    private Byte[] _metadataBlob;
    private StackTraceTokenMapping[] _tokenMapping;
    public static int Initialize(string outputAddressForIUnknown);
    public sealed virtual void GetTokenForNamespaceType(string namespaceQualifiedTypeName, Int32& typeTempToken);
    public sealed virtual void GetTokenForNestedType(int containingTypeTempToken, string nestedTypeName, Int32& typeTempToken);
    public sealed virtual void GetTokenForGenericTypeParameter(string genericTypeParameterName, Int32& typeTempToken);
    public sealed virtual void GetTokenForSZArrayType(int elementType, Int32& typeTempToken);
    public sealed virtual void GetTokenForArrayType(int elementType, int rank, Int32& typeTempToken);
    public sealed virtual void GetTokenForPointerType(int dereferenceType, Int32& typeTempToken);
    public sealed virtual void GetTokenForByRefType(int underlyingType, Int32& typeTempToken);
    public sealed virtual void GetTokenForMethod(string methodName, int containingTypeTempToken, int returnValueTypeTempToken, int parameterCount, Int32* parameterTypeTempTokens, int genericParameterCount, Int32* genericParameterTypeTempTokens, Int32& methodTempToken);
    public sealed virtual void FinalizeOutput();
    public sealed virtual void GetMappingTableSize(Int32& mappingTableCount);
    public sealed virtual void GetMappingTable(int mappingTableCount, StackTraceTokenMapping* table);
    public sealed virtual void GetMetadataBlobSize(Int32& metadataBlobByteCount);
    public sealed virtual void GetMetadataBlob(int metadataBlobByteCount, Byte* metadataBlob);
}
public class Internal.StackTraceMetadata.Provider.StackTraceTokenMapping : ValueType {
    public int TempToken;
    public int PermanentToken;
}
