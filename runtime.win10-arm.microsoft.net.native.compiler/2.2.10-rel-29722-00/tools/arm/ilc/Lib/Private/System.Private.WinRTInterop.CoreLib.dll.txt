internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
[__BlockReflectionAttribute]
public static class Internal.WinRT.Interop.WinRTCallback : object {
    public static void Initialize();
}
[__BlockReflectionAttribute]
public class Internal.WinRT.Interop.WinRTCallbacks : WinRTInteropCallbacks {
    private static object s_lock;
    private static CultureInfo s_currentCulture;
    private static IObservableMap`2<string, string> s_resourceContextQualifierMap;
    private static bool s_dqStaticsInitialized;
    private static IDispatcherQueueStatics s_dispatcherQueueStatics;
    public virtual int GetHijriDateAdjustment();
    public virtual int GetJapaneseEraCount();
    public virtual bool GetJapaneseEraInfo(int era, DateTimeOffset& startDate, String& eraName, String& abbreviatedEraName);
    public virtual string GetLanguageDisplayName(string cultureName);
    public virtual string GetRegionDisplayName(string isoCountryCode);
    private static IObservableMap`2<string, string> GetResourceContextQualifierMap();
    public virtual object GetUserDefaultCulture();
    public virtual void SetGlobalDefaultCulture(object culture);
    private static void GlobalResourceContextChanged(object sender, IMapChangedEventArgs`1<string> e);
    private static CultureInfo GetDefaultCulture();
    private static void TryRoGetActivationFactory(string className, Guid& iid, IntPtr& ppv);
    private static IDispatcherQueueStatics GetDispatcherQueueStatics();
    private static IDispatcherQueue GetCurrentDispatcherQueue();
    private CoreDispatcher GetCurrentCoreDispatcher();
    public virtual object GetCurrentWinRTDispatcher();
    public virtual void PostToWinRTDispatcher(object dispatcher, Action`1<object> action, object state);
    public virtual bool ReportUnhandledError(Exception ex);
    public virtual void SetCOMWeakReferenceTarget(object weakReference, object target);
    public virtual object GetCOMWeakReferenceTarget(object weakReference);
    public bool IsAppxModelIntrinsic();
    public virtual bool IsAppxModel();
    public virtual object ReadFileIntoStream(string name);
    public virtual void InitTracingStatusChanged(Action`1<bool> tracingStatusChanged);
    public virtual void TraceOperationCompletion(CausalityTraceLevel traceLevel, CausalitySource source, Guid platformId, ulong operationId, AsyncStatus status);
    public virtual void TraceOperationCreation(CausalityTraceLevel traceLevel, CausalitySource source, Guid platformId, ulong operationId, string operationName, ulong relatedContext);
    public virtual void TraceOperationRelation(CausalityTraceLevel traceLevel, CausalitySource source, Guid platformId, ulong operationId, CausalityRelation relation);
    public virtual void TraceSynchronousWorkCompletion(CausalityTraceLevel traceLevel, CausalitySource source, CausalitySynchronousWork work);
    public virtual void TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, CausalitySource source, Guid platformId, ulong operationId, CausalitySynchronousWork work);
}
internal class mincore : object {
    private static int MAX_LOCALE_NAME;
    internal static bool IsValidLocaleName(string lpLocaleName);
    internal static string ResolveLocaleName(string lpNameToResolve);
    internal static void RoInitialize(RO_INIT_TYPE initType);
    internal static int WindowsCreateStringReference(Char* sourceString, UInt32 length, HSTRING_HEADER* phstringHeader, Void* hstring);
}
internal static class System.Resources.UriUtility : object {
    public static string UriEncode(string str);
    private static char IntToHex(int n);
    private static bool IsUriUnreservedChar(char ch);
}
[ExplicitScopeAttribute("HiddenScope, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Resources.WindowsRuntimeResourceManager : WindowsRuntimeResourceManagerBase {
    private ResourceMap _resourceMap;
    private ResourceContext _clonedResourceContext;
    private string _clonedResourceContextFallBackList;
    private static Char[] s_charCultureSeparator;
    private static PackageInfo s_currentPackageInfo;
    private static List`1<PackageInfo> s_dependentPackageInfoList;
    private static ResourceContext s_globalResourceContext;
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_globalResourceContextFallBackList;
    private static CultureInfo modreq(System.Runtime.CompilerServices.IsVolatile) s_globalResourceContextBestFitCultureInfo;
    private static ResourceManager modreq(System.Runtime.CompilerServices.IsVolatile) s_globalResourceManager;
    private static object s_objectForLock;
    public CultureInfo GlobalResourceContextBestFitCultureInfo { get; }
    private static WindowsRuntimeResourceManager();
    private static bool InitializeStatics();
    private static void InitializeStaticGlobalResourceContext(ResourceManager resourceManager);
    private static CultureInfo GetBestFitCultureFromLanguageList(List`1<string> languages);
    private static void InitializeStaticsForDependentPackages();
    private static void GlobalResourceContextChanged(object sender, IMapChangedEventArgs`1<string> e);
    private static bool LibpathMatchesPackagepath(string libpath, string packagepath);
    private static string FindPackageSimpleNameForFilename(string libpath);
    [__BlockReflectionAttribute]
public virtual bool Initialize(string reswFilename, PRIExceptionInfo& exceptionInfo);
    private static IReadOnlyList`1<string> StringToReadOnlyList(string s);
    private static string ReadOnlyListToString(IReadOnlyList`1<string> list);
    [__BlockReflectionAttribute]
public virtual CultureInfo get_GlobalResourceContextBestFitCultureInfo();
    [__BlockReflectionAttribute]
public virtual bool SetGlobalResourceContextDefaultCulture(CultureInfo ci);
    [__BlockReflectionAttribute]
public virtual string GetString(string stringName, string startingCulture, string neutralResourcesCulture);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
[AttributeUsageAttribute("5148")]
internal class System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeImportAttribute : Attribute {
}
