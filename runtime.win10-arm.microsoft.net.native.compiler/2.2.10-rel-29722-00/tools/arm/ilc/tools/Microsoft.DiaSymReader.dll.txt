internal class Microsoft.DiaSymReader.ComMemoryStream : object {
    internal static int STREAM_SEEK_SET;
    internal static int STREAM_SEEK_CUR;
    internal static int STREAM_SEEK_END;
    private int _chunkSize;
    private List`1<Byte[]> _chunks;
    private int _position;
    private int _length;
    public ComMemoryStream(int chunkSize);
    public void CopyTo(Stream stream);
    public IEnumerable`1<ArraySegment`1<byte>> GetChunks();
    private static void ZeroMemory(Byte* dest, int count);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.Read(Byte* pv, int cb, Int32* pcbRead);
    private int SetPosition(int newPos);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.Seek(long dlibMove, int origin, Int64* plibNewPosition);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.SetSize(long libNewSize);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.Stat(STATSTG& pstatstg, int grfStatFlag);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.Write(Byte* pv, int cb, Int32* pcbWritten);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.Commit(int grfCommitFlags);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.Clone(IStream& ppstm);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.CopyTo(IStream pstm, long cb, Int32* pcbRead, Int32* pcbWritten);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.LockRegion(long libOffset, long cb, int lockType);
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.Revert();
    private sealed virtual override void Microsoft.DiaSymReader.IUnsafeComStream.UnlockRegion(long libOffset, long cb, int lockType);
}
internal class Microsoft.DiaSymReader.ComStreamWrapper : object {
    private Stream _stream;
    internal ComStreamWrapper(Stream stream);
    public sealed virtual void Commit(int grfCommitFlags);
    private static int TryReadAll(Stream stream, Byte[] buffer, int offset, int count);
    public sealed virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    public sealed virtual void Seek(long dlibMove, int origin, IntPtr plibNewPosition);
    public sealed virtual void SetSize(long libNewSize);
    public sealed virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    public sealed virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
    public sealed virtual void Clone(IStream& ppstm);
    public sealed virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    public sealed virtual void LockRegion(long libOffset, long cb, int lockType);
    public sealed virtual void Revert();
    public sealed virtual void UnlockRegion(long libOffset, long cb, int lockType);
}
internal static class Microsoft.DiaSymReader.EmptyArray`1 : object {
    public static T[] Instance;
    private static EmptyArray`1();
}
internal static class Microsoft.DiaSymReader.HResult : object {
    internal static int S_OK;
    internal static int S_FALSE;
    internal static int E_NOTIMPL;
    internal static int E_FAIL;
    internal static int E_INVALIDARG;
    internal static int E_UNEXPECTED;
}
internal class Microsoft.DiaSymReader.ImageDebugDirectory : ValueType {
    internal int Characteristics;
    internal int TimeDateStamp;
    internal short MajorVersion;
    internal short MinorVersion;
    internal int Type;
    internal int SizeOfData;
    internal int AddressOfRawData;
    internal int PointerToRawData;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BA3FEE4C-ECB9-4e41-83B7-183FA41CD859")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface Microsoft.DiaSymReader.IMetadataEmit {
    public abstract virtual void __SetModuleProps();
    public abstract virtual void __Save();
    public abstract virtual void __SaveToStream();
    public abstract virtual void __GetSaveSize();
    public abstract virtual void __DefineTypeDef();
    public abstract virtual void __DefineNestedType();
    public abstract virtual void __SetHandler();
    public abstract virtual void __DefineMethod();
    public abstract virtual void __DefineMethodImpl();
    public abstract virtual void __DefineTypeRefByName();
    public abstract virtual void __DefineImportType();
    public abstract virtual void __DefineMemberRef();
    public abstract virtual void __DefineImportMember();
    public abstract virtual void __DefineEvent();
    public abstract virtual void __SetClassLayout();
    public abstract virtual void __DeleteClassLayout();
    public abstract virtual void __SetFieldMarshal();
    public abstract virtual void __DeleteFieldMarshal();
    public abstract virtual void __DefinePermissionSet();
    public abstract virtual void __SetRVA();
    public abstract virtual int GetTokenFromSig(Byte* voidPointerSig, int byteCountSig);
    public abstract virtual void __DefineModuleRef();
    public abstract virtual void __SetParent();
    public abstract virtual void __GetTokenFromTypeSpec();
    public abstract virtual void __SaveToMemory();
    public abstract virtual void __DefineUserString();
    public abstract virtual void __DeleteToken();
    public abstract virtual void __SetMethodProps();
    public abstract virtual void __SetTypeDefProps();
    public abstract virtual void __SetEventProps();
    public abstract virtual void __SetPermissionSetProps();
    public abstract virtual void __DefinePinvokeMap();
    public abstract virtual void __SetPinvokeMap();
    public abstract virtual void __DeletePinvokeMap();
    public abstract virtual void __DefineCustomAttribute();
    public abstract virtual void __SetCustomAttributeValue();
    public abstract virtual void __DefineField();
    public abstract virtual void __DefineProperty();
    public abstract virtual void __DefineParam();
    public abstract virtual void __SetFieldProps();
    public abstract virtual void __SetPropertyProps();
    public abstract virtual void __SetParamProps();
    public abstract virtual void __DefineSecurityAttributeSet();
    public abstract virtual void __ApplyEditAndContinue();
    public abstract virtual void __TranslateSigWithScope();
    public abstract virtual void __SetMethodImplFlags();
    public abstract virtual void __SetFieldRVA();
    public abstract virtual void __Merge();
    public abstract virtual void __MergeEnd();
}
[ComVisibleAttribute("False")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("7DAC8207-D3AE-4c75-9B67-92801A497D44")]
internal interface Microsoft.DiaSymReader.IMetadataImport {
    public abstract virtual void CloseEnum(Void* enumHandle);
    public abstract virtual int CountEnum(Void* enumHandle, Int32& count);
    public abstract virtual int ResetEnum(Void* enumHandle, int position);
    public abstract virtual int EnumTypeDefs(Void*& enumHandle, Int32* typeDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumInterfaceImpls(Void*& enumHandle, int typeDef, Int32* interfaceImpls, int bufferLength, Int32* count);
    public abstract virtual int EnumTypeRefs(Void*& enumHandle, Int32* typeRefs, int bufferLength, Int32* count);
    public abstract virtual int FindTypeDefByName(string name, int enclosingClass, Int32& typeDef);
    public abstract virtual int GetScopeProps(Char* name, int bufferLength, Int32* nameLength, Guid* mvid);
    public abstract virtual int GetModuleFromScope(Int32& moduleDef);
    public abstract virtual int GetTypeDefProps(int typeDef, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength, TypeAttributes* attributes, Int32* baseType);
    public abstract virtual int GetInterfaceImplProps(int interfaceImpl, Int32* typeDef, Int32* interfaceDefRefSpec);
    public abstract virtual int GetTypeRefProps(int typeRef, Int32* resolutionScope, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength);
    public abstract virtual int ResolveTypeRef(int typeRef, Guid& scopeInterfaceId, Object& scope, Int32& typeDef);
    public abstract virtual int EnumMembers(Void*& enumHandle, int typeDef, Int32* memberDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumMembersWithName(Void*& enumHandle, int typeDef, string name, Int32* memberDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumMethods(Void*& enumHandle, int typeDef, Int32* methodDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumMethodsWithName(Void*& enumHandle, int typeDef, string name, Int32* methodDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumFields(Void*& enumHandle, int typeDef, Int32* fieldDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumFieldsWithName(Void*& enumHandle, int typeDef, string name, Int32* fieldDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumParams(Void*& enumHandle, int methodDef, Int32* paramDefs, int bufferLength, Int32* count);
    public abstract virtual int EnumMemberRefs(Void*& enumHandle, int parentToken, Int32* memberRefs, int bufferLength, Int32* count);
    public abstract virtual int EnumMethodImpls(Void*& enumHandle, int typeDef, Int32* implementationTokens, Int32* declarationTokens, int bufferLength, Int32* count);
    public abstract virtual int EnumPermissionSets(Void*& enumHandle, int token, UInt32 action, Int32* declSecurityTokens, int bufferLength, Int32* count);
    public abstract virtual int FindMember(int typeDef, string name, Byte* signature, int signatureLength, Int32& memberDef);
    public abstract virtual int FindMethod(int typeDef, string name, Byte* signature, int signatureLength, Int32& methodDef);
    public abstract virtual int FindField(int typeDef, string name, Byte* signature, int signatureLength, Int32& fieldDef);
    public abstract virtual int FindMemberRef(int typeDef, string name, Byte* signature, int signatureLength, Int32& memberRef);
    public abstract virtual int GetMethodProps(int methodDef, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, MethodAttributes* attributes, Byte** signature, Int32* signatureLength, Int32* relativeVirtualAddress, MethodImplAttributes* implAttributes);
    public abstract virtual int GetMemberRefProps(int memberRef, Int32* declaringType, Char* name, int nameBufferLength, Int32* nameLength, Byte** signature, Int32* signatureLength);
    public abstract virtual int EnumProperties(Void*& enumHandle, int typeDef, Int32* properties, int bufferLength, Int32* count);
    public abstract virtual UInt32 EnumEvents(Void*& enumHandle, int typeDef, Int32* events, int bufferLength, Int32* count);
    public abstract virtual int GetEventProps(int event, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Int32* eventType, Int32* adderMethodDef, Int32* removerMethodDef, Int32* raiserMethodDef, Int32* otherMethodDefs, int otherMethodDefBufferLength, Int32* methodMethodDefsLength);
    public abstract virtual int EnumMethodSemantics(Void*& enumHandle, int methodDef, Int32* eventsAndProperties, int bufferLength, Int32* count);
    public abstract virtual int GetMethodSemantics(int methodDef, int eventOrProperty, Int32* semantics);
    public abstract virtual int GetClassLayout(int typeDef, Int32* packSize, MetadataImportFieldOffset* fieldOffsets, int bufferLength, Int32* count, Int32* typeSize);
    public abstract virtual int GetFieldMarshal(int fieldDef, Byte** nativeTypeSignature, Int32* nativeTypeSignatureLengvth);
    public abstract virtual int GetRVA(int methodDef, Int32* relativeVirtualAddress, Int32* implAttributes);
    public abstract virtual int GetPermissionSetProps(int declSecurity, UInt32* action, Byte** permissionBlob, Int32* permissionBlobLength);
    public abstract virtual int GetSigFromToken(int standaloneSignature, Byte** signature, Int32* signatureLength);
    public abstract virtual int GetModuleRefProps(int moduleRef, Char* name, int nameBufferLength, Int32* nameLength);
    public abstract virtual int EnumModuleRefs(Void*& enumHandle, Int32* moduleRefs, int bufferLength, Int32* count);
    public abstract virtual int GetTypeSpecFromToken(int typeSpec, Byte** signature, Int32* signatureLength);
    public abstract virtual int GetNameFromToken(int token, Byte* nameUTF8);
    public abstract virtual int EnumUnresolvedMethods(Void*& enumHandle, Int32* methodDefs, int bufferLength, Int32* count);
    public abstract virtual int GetUserString(int userStringToken, Char* buffer, int bufferLength, Int32* length);
    public abstract virtual int GetPinvokeMap(int memberDef, Int32* attributes, Char* importName, int importNameBufferLength, Int32* importNameLength, Int32* moduleRef);
    public abstract virtual int EnumSignatures(Void*& enumHandle, Int32* signatureTokens, int bufferLength, Int32* count);
    public abstract virtual int EnumTypeSpecs(Void*& enumHandle, Int32* typeSpecs, int bufferLength, Int32* count);
    public abstract virtual int EnumUserStrings(Void*& enumHandle, Int32* userStrings, int bufferLength, Int32* count);
    public abstract virtual int GetParamForMethodIndex(int methodDef, int sequenceNumber, Int32& parameterToken);
    public abstract virtual int EnumCustomAttributes(Void*& enumHandle, int parent, int attributeType, Int32* customAttributes, int bufferLength, Int32* count);
    public abstract virtual int GetCustomAttributeProps(int customAttribute, Int32* parent, Int32* constructor, Byte** value, Int32* valueLength);
    public abstract virtual int FindTypeRef(int resolutionScope, string name, Int32& typeRef);
    public abstract virtual int GetMemberProps(int member, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Byte** signature, Int32* signatureLength, Int32* relativeVirtualAddress, Int32* implAttributes, Int32* constantType, Byte** constantValue, Int32* constantValueLength);
    public abstract virtual int GetFieldProps(int fieldDef, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Byte** signature, Int32* signatureLength, Int32* constantType, Byte** constantValue, Int32* constantValueLength);
    public abstract virtual int GetPropertyProps(int propertyDef, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Byte** signature, Int32* signatureLength, Int32* constantType, Byte** constantValue, Int32* constantValueLength, Int32* setterMethodDef, Int32* getterMethodDef, Int32* outerMethodDefs, int outerMethodDefsBufferLength, Int32* otherMethodDefCount);
    public abstract virtual int GetParamProps(int parameter, Int32* declaringMethodDef, Int32* sequenceNumber, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Int32* constantType, Byte** constantValue, Int32* constantValueLength);
    public abstract virtual int GetCustomAttributeByName(int parent, string name, Byte** value, Int32* valueLength);
    public abstract virtual bool IsValidToken(int token);
    public abstract virtual int GetNestedClassProps(int nestedClass, Int32& enclosingClass);
    public abstract virtual int GetNativeCallConvFromSig(Byte* signature, int signatureLength, Int32* callingConvention);
    public abstract virtual int IsGlobal(int token, bool value);
}
[GuidAttribute("EDF3A293-A10D-4F4A-A609-38D5EDE35F89")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.IMetadataImportProvider {
    public abstract virtual object GetMetadataImport();
}
internal class Microsoft.DiaSymReader.InteropUtilities : object {
    private static IntPtr s_ignoreIErrorInfo;
    private static InteropUtilities();
    internal static T[] NullToEmpty(T[] items);
    internal static void ThrowExceptionForHR(int hr);
    internal static void CopyQualifiedTypeName(Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength, string namespaceStr, string nameStr);
    internal static string BufferToString(Char[] buffer);
    internal static void ValidateItems(int actualCount, int bufferLength);
    internal static TItem[] GetItems(TEntity entity, CountGetter`1<TEntity> countGetter, ItemsGetter`2<TEntity, TItem> itemsGetter);
    internal static TItem[] GetItems(TEntity entity, ItemsGetter`2<TEntity, TItem> getter);
    internal static TItem[] GetItems(TEntity entity, TArg1 arg1, ItemsGetter`3<TEntity, TArg1, TItem> getter);
    internal static TItem[] GetItems(TEntity entity, TArg1 arg1, TArg2 arg2, ItemsGetter`4<TEntity, TArg1, TArg2, TItem> getter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("98ECEE1E-752D-11d3-8D56-00C04F680B2B")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface Microsoft.DiaSymReader.IPdbWriter {
    public abstract virtual int __SetPath();
    public abstract virtual int __OpenMod();
    public abstract virtual int __CloseMod();
    public abstract virtual int __GetPath();
    public abstract virtual void GetSignatureAge(UInt32& sig, Int32& age);
}
[GuidAttribute("85E891DA-A631-4c76-ACA2-A44A39C46B8C")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymEncUnmanagedMethod {
    public abstract virtual int GetFileNameFromOffset(int offset, int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetLineFromOffset(int offset, Int32& startLine, Int32& startColumn, Int32& endLine, Int32& endColumn, Int32& sequencePointOffset);
    public abstract virtual int GetDocumentsForMethodCount(Int32& count);
    public abstract virtual int GetDocumentsForMethod(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public abstract virtual int GetSourceExtentInDocument(ISymUnmanagedDocument document, Int32& startLine, Int32& endLine);
}
public interface Microsoft.DiaSymReader.ISymReaderMetadataProvider {
    public abstract virtual bool TryGetStandaloneSignature(int standaloneSignatureToken, Byte*& signature, Int32& length);
    public abstract virtual bool TryGetTypeDefinitionInfo(int typeDefinitionToken, String& namespaceName, String& typeName, TypeAttributes& attributes);
    public abstract virtual bool TryGetTypeReferenceInfo(int typeReferenceToken, String& namespaceName, String& typeName);
}
[GuidAttribute("B20D55B3-532E-4906-87E7-25BD5734ABD2")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedAsyncMethod {
    public abstract virtual int IsAsyncMethod(Boolean& value);
    public abstract virtual int GetKickoffMethod(Int32& kickoffMethodToken);
    public abstract virtual int HasCatchHandlerILOffset(Boolean& offset);
    public abstract virtual int GetCatchHandlerILOffset(Int32& offset);
    public abstract virtual int GetAsyncStepInfoCount(Int32& count);
    public abstract virtual int GetAsyncStepInfo(int bufferLength, Int32& count, Int32[] yieldOffsets, Int32[] breakpointOffset, Int32[] breakpointMethod);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FC073774-1739-4232-BD56-A027294BEC15")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface Microsoft.DiaSymReader.ISymUnmanagedAsyncMethodPropertiesWriter {
    public abstract virtual void DefineKickoffMethod(int kickoffMethod);
    public abstract virtual void DefineCatchHandlerILOffset(int catchHandlerOffset);
    public abstract virtual void DefineAsyncStepInfo(int count, Int32[] yieldOffsets, Int32[] breakpointOffset, Int32[] breakpointMethod);
}
[GuidAttribute("AA544D42-28CB-11d3-BD22-0000F80849BD")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedBinder {
    public abstract virtual int GetReaderForFile(object metadataImporter, string fileName, string searchPath, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromStream(object metadataImporter, object stream, ISymUnmanagedReader& reader);
}
[GuidAttribute("ACCEE350-89AF-4ccb-8B40-1C2C4C6F9434")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedBinder2 {
    public abstract virtual int GetReaderForFile(object metadataImporter, string fileName, string searchPath, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromStream(object metadataImporter, object stream, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderForFile2(object metadataImporter, string fileName, string searchPath, SymUnmanagedSearchPolicy searchPolicy, ISymUnmanagedReader& reader);
}
[GuidAttribute("28AD3D43-B601-4d26-8A1B-25F9165AF9D7")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedBinder3 {
    public abstract virtual int GetReaderForFile(object metadataImporter, string fileName, string searchPath, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromStream(object metadataImporter, object stream, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderForFile2(object metadataImporter, string fileName, string searchPath, SymUnmanagedSearchPolicy searchPolicy, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromCallback(object metadataImporter, string fileName, string searchPath, SymUnmanagedSearchPolicy searchPolicy, object callback, ISymUnmanagedReader& reader);
}
[GuidAttribute("F1DC5735-F877-48C9-BBE7-2A5486E84D7C")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedBinder4 {
    public abstract virtual int GetReaderForFile(object metadataImporter, string fileName, string searchPath, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromStream(object metadataImporter, object stream, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderForFile2(object metadataImporter, string fileName, string searchPath, SymUnmanagedSearchPolicy searchPolicy, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromCallback(object metadataImporter, string fileName, string searchPath, SymUnmanagedSearchPolicy searchPolicy, object callback, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromPdbFile(IMetadataImportProvider metadataImportProvider, string pdbFilePath, ISymUnmanagedReader& reader);
    public abstract virtual int GetReaderFromPdbStream(IMetadataImportProvider metadataImportProvider, object stream, ISymUnmanagedReader& reader);
}
[GuidAttribute("48B25ED8-5BAD-41bc-9CEE-CD62FABC74E9")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedConstant {
    public abstract virtual int GetName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetValue(Object& value);
    public abstract virtual int GetSignature(int bufferLength, Int32& count, Byte[] signature);
}
[GuidAttribute("969708D2-05E5-4861-A3B0-96E473CDF63F")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedDispose {
    public abstract virtual int Destroy();
}
[ComVisibleAttribute("False")]
[GuidAttribute("40DE4037-7C81-3E1E-B022-AE1ABFF2CA08")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.DiaSymReader.ISymUnmanagedDocument {
    public abstract virtual int GetUrl(int bufferLength, Int32& count, Char[] url);
    public abstract virtual int GetDocumentType(Guid& documentType);
    public abstract virtual int GetLanguage(Guid& language);
    public abstract virtual int GetLanguageVendor(Guid& vendor);
    public abstract virtual int GetChecksumAlgorithmId(Guid& algorithm);
    public abstract virtual int GetChecksum(int bufferLength, Int32& count, Byte[] checksum);
    public abstract virtual int FindClosestLine(int line, Int32& closestLine);
    public abstract virtual int HasEmbeddedSource(Boolean& value);
    public abstract virtual int GetSourceLength(Int32& length);
    public abstract virtual int GetSourceRange(int startLine, int startColumn, int endLine, int endColumn, int bufferLength, Int32& count, Byte[] source);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B01FAFEB-C450-3A4D-BEEC-B4CEEC01E006")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface Microsoft.DiaSymReader.ISymUnmanagedDocumentWriter {
    public abstract virtual void SetSource(UInt32 sourceSize, Byte[] source);
    public abstract virtual void SetCheckSum(Guid algorithmId, UInt32 checkSumSize, Byte[] checkSum);
}
[GuidAttribute("E502D2DD-8671-4338-8F2A-FC08229628C4")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedEncUpdate {
    public abstract virtual int UpdateSymbolStore2(IStream stream, SymUnmanagedLineDelta[] lineDeltas, int lineDeltaCount);
    public abstract virtual int GetLocalVariableCount(int methodToken, Int32& count);
    public abstract virtual int GetLocalVariables(int methodToken, int bufferLength, ISymUnmanagedVariable[] variables, Int32& count);
    public abstract virtual int InitializeForEnc();
    public abstract virtual int UpdateMethodLines(int methodToken, Int32[] deltas, int count);
}
[GuidAttribute("B62B923C-B500-3158-A543-24F307A8B7E1")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedMethod {
    public abstract virtual int GetToken(Int32& methodToken);
    public abstract virtual int GetSequencePointCount(Int32& count);
    public abstract virtual int GetRootScope(ISymUnmanagedScope& scope);
    public abstract virtual int GetScopeFromOffset(int offset, ISymUnmanagedScope& scope);
    public abstract virtual int GetOffset(ISymUnmanagedDocument document, int line, int column, Int32& offset);
    public abstract virtual int GetRanges(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, Int32[] ranges);
    public abstract virtual int GetParameters(int bufferLength, Int32& count, ISymUnmanagedVariable[] parameters);
    public abstract virtual int GetNamespace(ISymUnmanagedNamespace& namespace);
    public abstract virtual int GetSourceStartEnd(ISymUnmanagedDocument[] documents, Int32[] lines, Int32[] columns, Boolean& defined);
    public abstract virtual int GetSequencePoints(int bufferLength, Int32& count, Int32[] offsets, ISymUnmanagedDocument[] documents, Int32[] startLines, Int32[] startColumns, Int32[] endLines, Int32[] endColumns);
}
[GuidAttribute("5da320c8-9c2c-4e5a-b823-027e0677b359")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedMethod2 {
    public abstract virtual int GetToken(Int32& methodToken);
    public abstract virtual int GetSequencePointCount(Int32& count);
    public abstract virtual int GetRootScope(ISymUnmanagedScope& scope);
    public abstract virtual int GetScopeFromOffset(int offset, ISymUnmanagedScope& scope);
    public abstract virtual int GetOffset(ISymUnmanagedDocument document, int line, int column, Int32& offset);
    public abstract virtual int GetRanges(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, Int32[] ranges);
    public abstract virtual int GetParameters(int bufferLength, Int32& count, ISymUnmanagedVariable[] parameters);
    public abstract virtual int GetNamespace(ISymUnmanagedNamespace& namespace);
    public abstract virtual int GetSourceStartEnd(ISymUnmanagedDocument[] documents, Int32[] lines, Int32[] columns, Boolean& defined);
    public abstract virtual int GetSequencePoints(int bufferLength, Int32& count, Int32[] offsets, ISymUnmanagedDocument[] documents, Int32[] startLines, Int32[] startColumns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual int GetLocalSignatureToken(Int32& localSignatureToken);
}
[GuidAttribute("0DFF7289-54F8-11d3-BD28-0000F80849BD")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedNamespace {
    public abstract virtual int GetName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual int GetVariables(int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
}
[GuidAttribute("B4CE6286-2A6B-3712-A3B7-1EE1DAD467B5")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedReader {
    public abstract virtual int GetDocument(string url, Guid language, Guid languageVendor, Guid documentType, ISymUnmanagedDocument& document);
    public abstract virtual int GetDocuments(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public abstract virtual int GetUserEntryPoint(Int32& methodToken);
    public abstract virtual int GetMethod(int methodToken, ISymUnmanagedMethod& method);
    public abstract virtual int GetMethodByVersion(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetVariables(int methodToken, int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetGlobalVariables(int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetMethodFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttribute(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual int Initialize(object metadataImporter, string fileName, string searchPath, IStream stream);
    public abstract virtual int UpdateSymbolStore(string fileName, IStream stream);
    public abstract virtual int ReplaceSymbolStore(string fileName, IStream stream);
    public abstract virtual int GetSymbolStoreFileName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetMethodsFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetDocumentVersion(ISymUnmanagedDocument document, Int32& version, Boolean& isCurrent);
    public abstract virtual int GetMethodVersion(ISymUnmanagedMethod method, Int32& version);
}
[GuidAttribute("A09E53B2-2A57-4cca-8F63-B84F7C35D4AA")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedReader2 {
    public abstract virtual int GetDocument(string url, Guid language, Guid languageVendor, Guid documentType, ISymUnmanagedDocument& document);
    public abstract virtual int GetDocuments(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public abstract virtual int GetUserEntryPoint(Int32& methodToken);
    public abstract virtual int GetMethod(int methodToken, ISymUnmanagedMethod& method);
    public abstract virtual int GetMethodByVersion(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetVariables(int methodToken, int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetGlobalVariables(int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetMethodFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttribute(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual int Initialize(object metadataImporter, string fileName, string searchPath, IStream stream);
    public abstract virtual int UpdateSymbolStore(string fileName, IStream stream);
    public abstract virtual int ReplaceSymbolStore(string fileName, IStream stream);
    public abstract virtual int GetSymbolStoreFileName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetMethodsFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetDocumentVersion(ISymUnmanagedDocument document, Int32& version, Boolean& isCurrent);
    public abstract virtual int GetMethodVersion(ISymUnmanagedMethod method, Int32& version);
    public abstract virtual int GetMethodByVersionPreRemap(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttributePreRemap(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetMethodsInDocument(ISymUnmanagedDocument document, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
}
[GuidAttribute("6151CAD9-E1EE-437A-A808-F64838C0D046")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedReader3 {
    public abstract virtual int GetDocument(string url, Guid language, Guid languageVendor, Guid documentType, ISymUnmanagedDocument& document);
    public abstract virtual int GetDocuments(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public abstract virtual int GetUserEntryPoint(Int32& methodToken);
    public abstract virtual int GetMethod(int methodToken, ISymUnmanagedMethod& method);
    public abstract virtual int GetMethodByVersion(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetVariables(int methodToken, int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetGlobalVariables(int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetMethodFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttribute(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual int Initialize(object metadataImporter, string fileName, string searchPath, IStream stream);
    public abstract virtual int UpdateSymbolStore(string fileName, IStream stream);
    public abstract virtual int ReplaceSymbolStore(string fileName, IStream stream);
    public abstract virtual int GetSymbolStoreFileName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetMethodsFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetDocumentVersion(ISymUnmanagedDocument document, Int32& version, Boolean& isCurrent);
    public abstract virtual int GetMethodVersion(ISymUnmanagedMethod method, Int32& version);
    public abstract virtual int GetMethodByVersionPreRemap(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttributePreRemap(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetMethodsInDocument(ISymUnmanagedDocument document, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetSymAttributeByVersion(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetSymAttributeByVersionPreRemap(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
}
[GuidAttribute("E65C58B7-2948-434D-8A6D-481740A00C16")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedReader4 {
    public abstract virtual int GetDocument(string url, Guid language, Guid languageVendor, Guid documentType, ISymUnmanagedDocument& document);
    public abstract virtual int GetDocuments(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public abstract virtual int GetUserEntryPoint(Int32& methodToken);
    public abstract virtual int GetMethod(int methodToken, ISymUnmanagedMethod& method);
    public abstract virtual int GetMethodByVersion(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetVariables(int methodToken, int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetGlobalVariables(int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetMethodFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttribute(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual int Initialize(object metadataImporter, string fileName, string searchPath, IStream stream);
    public abstract virtual int UpdateSymbolStore(string fileName, IStream stream);
    public abstract virtual int ReplaceSymbolStore(string fileName, IStream stream);
    public abstract virtual int GetSymbolStoreFileName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetMethodsFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetDocumentVersion(ISymUnmanagedDocument document, Int32& version, Boolean& isCurrent);
    public abstract virtual int GetMethodVersion(ISymUnmanagedMethod method, Int32& version);
    public abstract virtual int GetMethodByVersionPreRemap(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttributePreRemap(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetMethodsInDocument(ISymUnmanagedDocument document, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetSymAttributeByVersion(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetSymAttributeByVersionPreRemap(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int MatchesModule(Guid guid, UInt32 stamp, int age, Boolean& result);
    public abstract virtual int GetPortableDebugMetadata(Byte*& metadata, Int32& size);
    public abstract virtual int GetSourceServerData(Byte*& data, Int32& size);
}
[GuidAttribute("6576c987-7e8d-4298-a6e1-6f9783165f07")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedReader5 {
    public abstract virtual int GetDocument(string url, Guid language, Guid languageVendor, Guid documentType, ISymUnmanagedDocument& document);
    public abstract virtual int GetDocuments(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public abstract virtual int GetUserEntryPoint(Int32& methodToken);
    public abstract virtual int GetMethod(int methodToken, ISymUnmanagedMethod& method);
    public abstract virtual int GetMethodByVersion(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetVariables(int methodToken, int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetGlobalVariables(int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public abstract virtual int GetMethodFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttribute(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual int Initialize(object metadataImporter, string fileName, string searchPath, IStream stream);
    public abstract virtual int UpdateSymbolStore(string fileName, IStream stream);
    public abstract virtual int ReplaceSymbolStore(string fileName, IStream stream);
    public abstract virtual int GetSymbolStoreFileName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetMethodsFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetDocumentVersion(ISymUnmanagedDocument document, Int32& version, Boolean& isCurrent);
    public abstract virtual int GetMethodVersion(ISymUnmanagedMethod method, Int32& version);
    public abstract virtual int GetMethodByVersionPreRemap(int methodToken, int version, ISymUnmanagedMethod& method);
    public abstract virtual int GetSymAttributePreRemap(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetMethodsInDocument(ISymUnmanagedDocument document, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public abstract virtual int GetSymAttributeByVersion(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int GetSymAttributeByVersionPreRemap(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public abstract virtual int MatchesModule(Guid guid, UInt32 stamp, int age, Boolean& result);
    public abstract virtual int GetPortableDebugMetadata(Byte*& metadata, Int32& size);
    public abstract virtual int GetSourceServerData(Byte*& data, Int32& size);
    public abstract virtual int GetPortableDebugMetadataByVersion(int version, Byte*& metadata, Int32& size);
}
[GuidAttribute("68005D0F-B8E0-3B01-84D5-A11A94154942")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedScope {
    public abstract virtual int GetMethod(ISymUnmanagedMethod& method);
    public abstract virtual int GetParent(ISymUnmanagedScope& scope);
    public abstract virtual int GetChildren(int bufferLength, Int32& count, ISymUnmanagedScope[] children);
    public abstract virtual int GetStartOffset(Int32& offset);
    public abstract virtual int GetEndOffset(Int32& offset);
    public abstract virtual int GetLocalCount(Int32& count);
    public abstract virtual int GetLocals(int bufferLength, Int32& count, ISymUnmanagedVariable[] locals);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
}
[ComVisibleAttribute("False")]
[GuidAttribute("AE932FBA-3FD8-4dba-8232-30A2309B02DB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.DiaSymReader.ISymUnmanagedScope2 {
    public abstract virtual int GetMethod(ISymUnmanagedMethod& method);
    public abstract virtual int GetParent(ISymUnmanagedScope& scope);
    public abstract virtual int GetChildren(int bufferLength, Int32& count, ISymUnmanagedScope[] children);
    public abstract virtual int GetStartOffset(Int32& offset);
    public abstract virtual int GetEndOffset(Int32& offset);
    public abstract virtual int GetLocalCount(Int32& count);
    public abstract virtual int GetLocals(int bufferLength, Int32& count, ISymUnmanagedVariable[] locals);
    public abstract virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual int GetConstantCount(Int32& count);
    public abstract virtual int GetConstants(int bufferLength, Int32& count, ISymUnmanagedConstant[] constants);
}
[GuidAttribute("997DD0CC-A76F-4c82-8D79-EA87559D27AD")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedSourceServerModule {
    public abstract virtual int GetSourceServerData(Int32& length, Byte*& data);
}
[GuidAttribute("9F60EEBE-2D9A-3F7C-BF58-80BC991C60BB")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface Microsoft.DiaSymReader.ISymUnmanagedVariable {
    public abstract virtual int GetName(int bufferLength, Int32& count, Char[] name);
    public abstract virtual int GetAttributes(Int32& attributes);
    public abstract virtual int GetSignature(int bufferLength, Int32& count, Byte[] signature);
    public abstract virtual int GetAddressKind(Int32& kind);
    public abstract virtual int GetAddressField1(Int32& value);
    public abstract virtual int GetAddressField2(Int32& value);
    public abstract virtual int GetAddressField3(Int32& value);
    public abstract virtual int GetStartOffset(Int32& offset);
    public abstract virtual int GetEndOffset(Int32& offset);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DCF7780D-BDE9-45DF-ACFE-21731A32000C")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface Microsoft.DiaSymReader.ISymUnmanagedWriter5 {
    public abstract virtual ISymUnmanagedDocumentWriter DefineDocument(string url, Guid& language, Guid& languageVendor, Guid& documentType);
    public abstract virtual void SetUserEntryPoint(int entryMethodToken);
    public abstract virtual void OpenMethod(UInt32 methodToken);
    public abstract virtual void CloseMethod();
    public abstract virtual UInt32 OpenScope(int startOffset);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void SetScopeRange(UInt32 scopeID, UInt32 startOffset, UInt32 endOffset);
    public abstract virtual void DefineLocalVariable(string name, UInt32 attributes, UInt32 sig, Byte* signature, UInt32 addrKind, UInt32 addr1, UInt32 addr2, UInt32 startOffset, UInt32 endOffset);
    public abstract virtual void DefineParameter(string name, UInt32 attributes, UInt32 sequence, UInt32 addrKind, UInt32 addr1, UInt32 addr2, UInt32 addr3);
    public abstract virtual void DefineField(UInt32 parent, string name, UInt32 attributes, UInt32 sig, Byte* signature, UInt32 addrKind, UInt32 addr1, UInt32 addr2, UInt32 addr3);
    public abstract virtual void DefineGlobalVariable(string name, UInt32 attributes, UInt32 sig, Byte* signature, UInt32 addrKind, UInt32 addr1, UInt32 addr2, UInt32 addr3);
    public abstract virtual void Close();
    public abstract virtual void SetSymAttribute(UInt32 parent, string name, int length, Byte* data);
    public abstract virtual void OpenNamespace(string name);
    public abstract virtual void CloseNamespace();
    public abstract virtual void UsingNamespace(string fullName);
    public abstract virtual void SetMethodSourceRange(ISymUnmanagedDocumentWriter startDoc, UInt32 startLine, UInt32 startColumn, object endDoc, UInt32 endLine, UInt32 endColumn);
    public abstract virtual void Initialize(object emitter, string filename, object ptrIStream, bool fullBuild);
    public abstract virtual void GetDebugInfo(ImageDebugDirectory& debugDirectory, UInt32 dataCount, UInt32& dataCountPtr, Byte* data);
    public abstract virtual void DefineSequencePoints(ISymUnmanagedDocumentWriter document, int count, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual void RemapToken(UInt32 oldToken, UInt32 newToken);
    public abstract virtual void Initialize2(object emitter, string tempfilename, object ptrIStream, bool fullBuild, string finalfilename);
    public abstract virtual void DefineConstant(string name, object value, UInt32 sig, Byte* signature);
    public abstract virtual void Abort();
    public abstract virtual void DefineLocalVariable2(string name, int attributes, int localSignatureToken, UInt32 addrKind, int index, UInt32 addr2, UInt32 addr3, UInt32 startOffset, UInt32 endOffset);
    public abstract virtual void DefineGlobalVariable2(string name, int attributes, int sigToken, UInt32 addrKind, UInt32 addr1, UInt32 addr2, UInt32 addr3);
    public abstract virtual void DefineConstant2(string name, VariantStructure value, int constantSignatureToken);
    public abstract virtual void OpenMethod2(UInt32 methodToken, int sectionIndex, int offsetRelativeOffset);
    public abstract virtual void Commit();
    public abstract virtual void GetDebugInfoWithPadding(ImageDebugDirectory& debugDirectory, UInt32 dataCount, UInt32& dataCountPtr, Byte* data);
    public abstract virtual void OpenMapTokensToSourceSpans();
    public abstract virtual void CloseMapTokensToSourceSpans();
    public abstract virtual void MapTokenToSourceSpan(int token, ISymUnmanagedDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5ba52f3b-6bf8-40fc-b476-d39c529b331e")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface Microsoft.DiaSymReader.ISymUnmanagedWriter8 {
    public abstract virtual void _VtblGap1_33();
    public abstract virtual void InitializeDeterministic(object emitter, object stream);
    public abstract virtual void UpdateSignatureByHashingContent(Byte* buffer, int size);
    public abstract virtual void UpdateSignature(Guid pdbId, UInt32 stamp, int age);
    public abstract virtual void SetSourceServerData(Byte* data, int size);
    public abstract virtual void SetSourceLinkData(Byte* data, int size);
}
public interface Microsoft.DiaSymReader.ISymWriterMetadataProvider {
    public abstract virtual bool TryGetTypeDefinitionInfo(int typeDefinitionToken, String& namespaceName, String& typeName, TypeAttributes& attributes);
    public abstract virtual bool TryGetEnclosingType(int nestedTypeToken, Int32& enclosingTypeToken);
    public abstract virtual bool TryGetMethodInfo(int methodDefinitionToken, String& methodName, Int32& declaringTypeToken);
}
[GuidAttribute("0000000c-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.DiaSymReader.IUnsafeComStream {
    public abstract virtual void Read(Byte* pv, int cb, Int32* pcbRead);
    public abstract virtual void Write(Byte* pv, int cb, Int32* pcbWritten);
    public abstract virtual void Seek(long dlibMove, int dwOrigin, Int64* plibNewPosition);
    public abstract virtual void SetSize(long libNewSize);
    public abstract virtual void CopyTo(IStream pstm, long cb, Int32* pcbRead, Int32* pcbWritten);
    public abstract virtual void Commit(int grfCommitFlags);
    public abstract virtual void Revert();
    public abstract virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    public abstract virtual void Clone(IStream& ppstm);
}
internal class Microsoft.DiaSymReader.MetadataAdapterBase : object {
    public virtual int GetTokenFromSig(Byte* voidPointerSig, int byteCountSig);
    public virtual int GetSigFromToken(int standaloneSignature, Byte** signature, Int32* signatureLength);
    public virtual int GetTypeDefProps(int typeDef, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength, TypeAttributes* attributes, Int32* baseType);
    public virtual int GetTypeRefProps(int typeRef, Int32* resolutionScope, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength);
    public virtual int GetNestedClassProps(int nestedClass, Int32& enclosingClass);
    public virtual int GetMethodProps(int methodDef, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, MethodAttributes* attributes, Byte** signature, Int32* signatureLength, Int32* relativeVirtualAddress, MethodImplAttributes* implAttributes);
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataImport.CloseEnum(Void* enumHandle);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.CountEnum(Void* enumHandle, Int32& count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.ResetEnum(Void* enumHandle, int position);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumTypeDefs(Void*& enumHandle, Int32* typeDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumInterfaceImpls(Void*& enumHandle, int typeDef, Int32* interfaceImpls, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumTypeRefs(Void*& enumHandle, Int32* typeRefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.FindTypeDefByName(string name, int enclosingClass, Int32& typeDef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetScopeProps(Char* name, int bufferLength, Int32* nameLength, Guid* mvid);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetModuleFromScope(Int32& moduleDef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetInterfaceImplProps(int interfaceImpl, Int32* typeDef, Int32* interfaceDefRefSpec);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.ResolveTypeRef(int typeRef, Guid& scopeInterfaceId, Object& scope, Int32& typeDef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumMembers(Void*& enumHandle, int typeDef, Int32* memberDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumMembersWithName(Void*& enumHandle, int typeDef, string name, Int32* memberDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumMethods(Void*& enumHandle, int typeDef, Int32* methodDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumMethodsWithName(Void*& enumHandle, int typeDef, string name, Int32* methodDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumFields(Void*& enumHandle, int typeDef, Int32* fieldDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumFieldsWithName(Void*& enumHandle, int typeDef, string name, Int32* fieldDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumParams(Void*& enumHandle, int methodDef, Int32* paramDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumMemberRefs(Void*& enumHandle, int parentToken, Int32* memberRefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumMethodImpls(Void*& enumHandle, int typeDef, Int32* implementationTokens, Int32* declarationTokens, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumPermissionSets(Void*& enumHandle, int token, UInt32 action, Int32* declSecurityTokens, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.FindMember(int typeDef, string name, Byte* signature, int signatureLength, Int32& memberDef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.FindMethod(int typeDef, string name, Byte* signature, int signatureLength, Int32& methodDef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.FindField(int typeDef, string name, Byte* signature, int signatureLength, Int32& fieldDef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.FindMemberRef(int typeDef, string name, Byte* signature, int signatureLength, Int32& memberRef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetMemberRefProps(int memberRef, Int32* declaringType, Char* name, int nameBufferLength, Int32* nameLength, Byte** signature, Int32* signatureLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumProperties(Void*& enumHandle, int typeDef, Int32* properties, int bufferLength, Int32* count);
    private sealed virtual override UInt32 Microsoft.DiaSymReader.IMetadataImport.EnumEvents(Void*& enumHandle, int typeDef, Int32* events, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetEventProps(int event, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Int32* eventType, Int32* adderMethodDef, Int32* removerMethodDef, Int32* raiserMethodDef, Int32* otherMethodDefs, int otherMethodDefBufferLength, Int32* methodMethodDefsLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumMethodSemantics(Void*& enumHandle, int methodDef, Int32* eventsAndProperties, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetMethodSemantics(int methodDef, int eventOrProperty, Int32* semantics);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetClassLayout(int typeDef, Int32* packSize, MetadataImportFieldOffset* fieldOffsets, int bufferLength, Int32* count, Int32* typeSize);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetFieldMarshal(int fieldDef, Byte** nativeTypeSignature, Int32* nativeTypeSignatureLengvth);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetRVA(int methodDef, Int32* relativeVirtualAddress, Int32* implAttributes);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetPermissionSetProps(int declSecurity, UInt32* action, Byte** permissionBlob, Int32* permissionBlobLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetModuleRefProps(int moduleRef, Char* name, int nameBufferLength, Int32* nameLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumModuleRefs(Void*& enumHandle, Int32* moduleRefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetTypeSpecFromToken(int typeSpec, Byte** signature, Int32* signatureLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetNameFromToken(int token, Byte* nameUTF8);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumUnresolvedMethods(Void*& enumHandle, Int32* methodDefs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetUserString(int userStringToken, Char* buffer, int bufferLength, Int32* length);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetPinvokeMap(int memberDef, Int32* attributes, Char* importName, int importNameBufferLength, Int32* importNameLength, Int32* moduleRef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumSignatures(Void*& enumHandle, Int32* signatureTokens, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumTypeSpecs(Void*& enumHandle, Int32* typeSpecs, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumUserStrings(Void*& enumHandle, Int32* userStrings, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetParamForMethodIndex(int methodDef, int sequenceNumber, Int32& parameterToken);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.EnumCustomAttributes(Void*& enumHandle, int parent, int attributeType, Int32* customAttributes, int bufferLength, Int32* count);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetCustomAttributeProps(int customAttribute, Int32* parent, Int32* constructor, Byte** value, Int32* valueLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.FindTypeRef(int resolutionScope, string name, Int32& typeRef);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetMemberProps(int member, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Byte** signature, Int32* signatureLength, Int32* relativeVirtualAddress, Int32* implAttributes, Int32* constantType, Byte** constantValue, Int32* constantValueLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetFieldProps(int fieldDef, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Byte** signature, Int32* signatureLength, Int32* constantType, Byte** constantValue, Int32* constantValueLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetPropertyProps(int propertyDef, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Byte** signature, Int32* signatureLength, Int32* constantType, Byte** constantValue, Int32* constantValueLength, Int32* setterMethodDef, Int32* getterMethodDef, Int32* outerMethodDefs, int outerMethodDefsBufferLength, Int32* otherMethodDefCount);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetParamProps(int parameter, Int32* declaringMethodDef, Int32* sequenceNumber, Char* name, int nameBufferLength, Int32* nameLength, Int32* attributes, Int32* constantType, Byte** constantValue, Int32* constantValueLength);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetCustomAttributeByName(int parent, string name, Byte** value, Int32* valueLength);
    private sealed virtual override bool Microsoft.DiaSymReader.IMetadataImport.IsValidToken(int token);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.GetNativeCallConvFromSig(Byte* signature, int signatureLength, Int32* callingConvention);
    private sealed virtual override int Microsoft.DiaSymReader.IMetadataImport.IsGlobal(int token, bool value);
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetModuleProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__Save();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SaveToStream();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__GetSaveSize();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineTypeDef();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineNestedType();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetHandler();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineMethod();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineMethodImpl();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineTypeRefByName();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineImportType();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineMemberRef();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineImportMember();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineEvent();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetClassLayout();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DeleteClassLayout();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetFieldMarshal();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DeleteFieldMarshal();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefinePermissionSet();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetRVA();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineModuleRef();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetParent();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__GetTokenFromTypeSpec();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SaveToMemory();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineUserString();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DeleteToken();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetMethodProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetTypeDefProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetEventProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetPermissionSetProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefinePinvokeMap();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetPinvokeMap();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DeletePinvokeMap();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineCustomAttribute();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetCustomAttributeValue();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineField();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineProperty();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineParam();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetFieldProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetPropertyProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetParamProps();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__DefineSecurityAttributeSet();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__ApplyEditAndContinue();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__TranslateSigWithScope();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetMethodImplFlags();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__SetFieldRVA();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__Merge();
    private sealed virtual override void Microsoft.DiaSymReader.IMetadataEmit.__MergeEnd();
}
internal class Microsoft.DiaSymReader.MetadataImportFieldOffset : ValueType {
    public int FieldDef;
    public UInt32 Offset;
}
internal class Microsoft.DiaSymReader.SymReaderMetadataAdapter : MetadataAdapterBase {
    private ISymReaderMetadataProvider _metadataProvider;
    public SymReaderMetadataAdapter(ISymReaderMetadataProvider metadataProvider);
    public virtual int GetSigFromToken(int standaloneSignature, Byte** signature, Int32* signatureLength);
    public virtual int GetTypeDefProps(int typeDef, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength, TypeAttributes* attributes, Int32* baseType);
    public virtual int GetTypeRefProps(int typeRef, Int32* resolutionScope, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength);
}
public class Microsoft.DiaSymReader.SymUnmanagedAsyncStepInfo : ValueType {
    [CompilerGeneratedAttribute]
private int <YieldOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResumeOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResumeMethod>k__BackingField;
    public int YieldOffset { get; }
    public int ResumeOffset { get; }
    public int ResumeMethod { get; }
    public SymUnmanagedAsyncStepInfo(int yieldOffset, int resumeOffset, int resumeMethod);
    [CompilerGeneratedAttribute]
public int get_YieldOffset();
    [CompilerGeneratedAttribute]
public int get_ResumeOffset();
    [CompilerGeneratedAttribute]
public int get_ResumeMethod();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SymUnmanagedAsyncStepInfo other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.DiaSymReader.SymUnmanagedExtensions : object {
    private static string CdiAttributeName;
    [ExtensionAttribute]
public static ISymUnmanagedReader GetReaderFromStream(ISymUnmanagedBinder binder, Stream stream, object metadataImporter);
    [ExtensionAttribute]
public static ISymUnmanagedReader GetReaderFromPdbStream(ISymUnmanagedBinder4 binder, Stream stream, IMetadataImportProvider metadataImportProvider);
    [ExtensionAttribute]
public static string GetName(ISymUnmanagedConstant constant);
    [ExtensionAttribute]
public static object GetValue(ISymUnmanagedConstant constant);
    [ExtensionAttribute]
public static Byte[] GetSignature(ISymUnmanagedConstant constant);
    [ExtensionAttribute]
public static string GetName(ISymUnmanagedDocument document);
    [ExtensionAttribute]
public static Byte[] GetChecksum(ISymUnmanagedDocument document);
    [ExtensionAttribute]
public static Guid GetLanguage(ISymUnmanagedDocument document);
    [ExtensionAttribute]
public static Guid GetLanguageVendor(ISymUnmanagedDocument document);
    [ExtensionAttribute]
public static Guid GetDocumentType(ISymUnmanagedDocument document);
    [ExtensionAttribute]
public static Guid GetHashAlgorithm(ISymUnmanagedDocument document);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetEmbeddedSource(ISymUnmanagedDocument document);
    [ExtensionAttribute]
public static ISymUnmanagedDocument[] GetDocumentsForMethod(ISymUnmanagedMethod method);
    [ExtensionAttribute]
public static void GetSourceExtentInDocument(ISymEncUnmanagedMethod method, ISymUnmanagedDocument document, Int32& startLine, Int32& endLine);
    [ExtensionAttribute]
public static int GetToken(ISymUnmanagedMethod method);
    [ExtensionAttribute]
public static int GetLocalSignatureToken(ISymUnmanagedMethod2 method);
    [ExtensionAttribute]
public static ISymUnmanagedScope GetRootScope(ISymUnmanagedMethod method);
    [ExtensionAttribute]
public static IEnumerable`1<SymUnmanagedSequencePoint> GetSequencePoints(ISymUnmanagedMethod method);
    [ExtensionAttribute]
public static ISymUnmanagedAsyncMethod AsAsyncMethod(ISymUnmanagedMethod method);
    [ExtensionAttribute]
public static int GetCatchHandlerILOffset(ISymUnmanagedAsyncMethod method);
    [ExtensionAttribute]
public static int GetKickoffMethod(ISymUnmanagedAsyncMethod method);
    [ExtensionAttribute]
public static IEnumerable`1<SymUnmanagedAsyncStepInfo> GetAsyncStepInfos(ISymUnmanagedAsyncMethod method);
    [ExtensionAttribute]
public static string GetName(ISymUnmanagedNamespace namespace);
    [ExtensionAttribute]
public static void UpdateSymbolStore(ISymUnmanagedReader reader, Stream stream, string fileName);
    [ExtensionAttribute]
public static void Initialize(ISymUnmanagedReader3 reader, Stream stream, object metadataImporter, string fileName, string searchPath);
    [ExtensionAttribute]
public static Byte[] GetCustomDebugInfo(ISymUnmanagedReader3 reader, int methodToken, int methodVersion);
    [ExtensionAttribute]
public static int GetUserEntryPoint(ISymUnmanagedReader reader);
    [ExtensionAttribute]
public static ISymUnmanagedDocument GetDocument(ISymUnmanagedReader reader, string name);
    [ExtensionAttribute]
public static ISymUnmanagedDocument[] GetDocuments(ISymUnmanagedReader reader);
    [ExtensionAttribute]
public static ISymUnmanagedMethod[] GetMethodsInDocument(ISymUnmanagedReader reader, ISymUnmanagedDocument symDocument);
    [ExtensionAttribute]
public static ISymUnmanagedMethod GetMethod(ISymUnmanagedReader reader, int methodToken);
    [ExtensionAttribute]
public static ISymUnmanagedMethod GetMethodByVersion(ISymUnmanagedReader reader, int methodToken, int methodVersion);
    [ExtensionAttribute]
public static int GetMethodVersion(ISymUnmanagedReader reader, ISymUnmanagedMethod method);
    [ExtensionAttribute]
public static int GetStartOffset(ISymUnmanagedScope scope);
    [ExtensionAttribute]
public static int GetEndOffset(ISymUnmanagedScope scope);
    [ExtensionAttribute]
public static ISymUnmanagedNamespace[] GetNamespaces(ISymUnmanagedScope scope);
    [ExtensionAttribute]
public static ISymUnmanagedScope[] GetChildren(ISymUnmanagedScope scope);
    [ExtensionAttribute]
public static ISymUnmanagedVariable[] GetLocals(ISymUnmanagedScope scope);
    [ExtensionAttribute]
public static ISymUnmanagedConstant[] GetConstants(ISymUnmanagedScope scope);
    [ExtensionAttribute]
public static ISymUnmanagedConstant[] GetConstants(ISymUnmanagedScope2 scope);
    [ExtensionAttribute]
public static int GetSlot(ISymUnmanagedVariable local);
    [ExtensionAttribute]
public static int GetAttributes(ISymUnmanagedVariable local);
    [ExtensionAttribute]
public static string GetName(ISymUnmanagedVariable local);
}
internal static class Microsoft.DiaSymReader.SymUnmanagedFactory : object {
    private static string AlternateLoadPathEnvironmentVariableName;
    private static string LegacyDiaSymReaderModuleName;
    private static string DiaSymReaderModuleName32;
    private static string DiaSymReaderModuleName64;
    private static string CreateSymReaderFactoryName;
    private static string CreateSymWriterFactoryName;
    private static string SymWriterClsid;
    private static string SymReaderClsid;
    private static Type s_lazySymReaderComType;
    private static Type s_lazySymWriterComType;
    internal static string DiaSymReaderModuleName { get; }
    internal static string get_DiaSymReaderModuleName();
    [DefaultDllImportSearchPathsAttribute("4098")]
private static void CreateSymReader32(Guid& id, Object& symReader);
    [DefaultDllImportSearchPathsAttribute("4098")]
private static void CreateSymReader64(Guid& id, Object& symReader);
    [DefaultDllImportSearchPathsAttribute("4098")]
private static void CreateSymWriter32(Guid& id, Object& symWriter);
    [DefaultDllImportSearchPathsAttribute("4098")]
private static void CreateSymWriter64(Guid& id, Object& symWriter);
    private static IntPtr LoadLibrary(string path);
    private static bool FreeLibrary(IntPtr hModule);
    private static IntPtr GetProcAddress(IntPtr hModule, string procedureName);
    private static string GetEnvironmentVariable(string name);
    private static object TryLoadFromAlternativePath(Guid clsid, string factoryName);
    private static Type GetComTypeType(Type& lazyType, Guid clsid);
    internal static object CreateObject(bool createReader, bool useAlternativeLoadPath, bool useComRegistry, String& moduleName, Exception& loadException);
}
public class Microsoft.DiaSymReader.SymUnmanagedLineDelta : ValueType {
    public int MethodToken;
    public int Delta;
    public SymUnmanagedLineDelta(int methodToken, int delta);
}
[FlagsAttribute]
public enum Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions : Enum {
    public int value__;
    public static SymUnmanagedReaderCreationOptions Default;
    public static SymUnmanagedReaderCreationOptions UseAlternativeLoadPath;
    public static SymUnmanagedReaderCreationOptions UseComRegistry;
}
public static class Microsoft.DiaSymReader.SymUnmanagedReaderFactory : object {
    public static TSymUnmanagedReader CreateReaderWithMetadataImport(Stream pdbStream, object metadataImport, SymUnmanagedReaderCreationOptions options);
    public static TSymUnmanagedReader CreateReader(Stream pdbStream, ISymReaderMetadataProvider metadataProvider, SymUnmanagedReaderCreationOptions options);
    public static object CreateSymReaderMetadataImport(ISymReaderMetadataProvider metadataProvider);
}
public enum Microsoft.DiaSymReader.SymUnmanagedSearchPolicy : Enum {
    public int value__;
    public static SymUnmanagedSearchPolicy AllowRegistryAccess;
    public static SymUnmanagedSearchPolicy AllowSymbolServerAccess;
    public static SymUnmanagedSearchPolicy AllowOriginalPathAccess;
    public static SymUnmanagedSearchPolicy AllowReferencePathAccess;
}
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
public class Microsoft.DiaSymReader.SymUnmanagedSequencePoint : ValueType {
    public int Offset;
    public ISymUnmanagedDocument Document;
    public int StartLine;
    public int StartColumn;
    public int EndLine;
    public int EndColumn;
    public bool IsHidden { get; }
    public SymUnmanagedSequencePoint(int offset, ISymUnmanagedDocument document, int startLine, int startColumn, int endLine, int endColumn);
    public bool get_IsHidden();
    private string GetDebuggerDisplay();
}
public class Microsoft.DiaSymReader.SymUnmanagedSequencePointsWriter : object {
    private SymUnmanagedWriter _writer;
    private int _currentDocumentIndex;
    private int _count;
    private Int32[] _offsets;
    private Int32[] _startLines;
    private Int32[] _startColumns;
    private Int32[] _endLines;
    private Int32[] _endColumns;
    public SymUnmanagedSequencePointsWriter(SymUnmanagedWriter writer, int capacity);
    private void EnsureCapacity(int length);
    private void Clear();
    public void Add(int documentIndex, int offset, int startLine, int startColumn, int endLine, int endColumn);
    public void Flush();
}
public static class Microsoft.DiaSymReader.SymUnmanagedStreamFactory : object {
    public static IStream CreateStream(Stream stream);
}
public abstract class Microsoft.DiaSymReader.SymUnmanagedWriter : object {
    public int DocumentTableCapacity { get; public set; }
    public abstract virtual void Dispose();
    public abstract virtual IEnumerable`1<ArraySegment`1<byte>> GetUnderlyingData();
    public abstract virtual void WriteTo(Stream stream);
    public abstract virtual int get_DocumentTableCapacity();
    public abstract virtual void set_DocumentTableCapacity(int value);
    public abstract virtual int DefineDocument(string name, Guid language, Guid vendor, Guid type, Guid algorithmId, Byte[] checksum, Byte[] source);
    public abstract virtual void DefineSequencePoints(int documentIndex, int count, Int32[] offsets, Int32[] startLines, Int32[] startColumns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual void OpenMethod(int methodToken);
    public abstract virtual void CloseMethod();
    public abstract virtual void OpenScope(int startOffset);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void DefineLocalVariable(int index, string name, int attributes, int localSignatureToken);
    public abstract virtual bool DefineLocalConstant(string name, object value, int constantSignatureToken);
    public abstract virtual void UsingNamespace(string importString);
    public abstract virtual void SetAsyncInfo(int moveNextMethodToken, int kickoffMethodToken, int catchHandlerOffset, Int32[] yieldOffsets, Int32[] resumeOffsets);
    public abstract virtual void DefineCustomMetadata(Byte[] metadata);
    public abstract virtual void SetEntryPoint(int entryMethodToken);
    public abstract virtual void UpdateSignature(Guid guid, UInt32 stamp, int age);
    public abstract virtual void GetSignature(Guid& guid, UInt32& stamp, Int32& age);
    public abstract virtual void SetSourceServerData(Byte[] data);
    public abstract virtual void SetSourceLinkData(Byte[] data);
    public abstract virtual void OpenTokensToSourceSpansMap();
    public abstract virtual void MapTokenToSourceSpan(int token, int documentIndex, int startLine, int startColumn, int endLine, int endColumn);
    public abstract virtual void CloseTokensToSourceSpansMap();
}
[FlagsAttribute]
public enum Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions : Enum {
    public int value__;
    public static SymUnmanagedWriterCreationOptions Default;
    public static SymUnmanagedWriterCreationOptions UseAlternativeLoadPath;
    public static SymUnmanagedWriterCreationOptions UseComRegistry;
    public static SymUnmanagedWriterCreationOptions Deterministic;
}
public class Microsoft.DiaSymReader.SymUnmanagedWriterException : Exception {
    [CompilerGeneratedAttribute]
private string <ImplementationModuleName>k__BackingField;
    public string ImplementationModuleName { get; }
    public SymUnmanagedWriterException(string message);
    public SymUnmanagedWriterException(string message, Exception innerException);
    public SymUnmanagedWriterException(string message, Exception innerException, string implementationModuleName);
    internal SymUnmanagedWriterException(Exception innerException, string implementationModuleName);
    [CompilerGeneratedAttribute]
public string get_ImplementationModuleName();
}
public static class Microsoft.DiaSymReader.SymUnmanagedWriterFactory : object {
    public static SymUnmanagedWriter CreateWriter(ISymWriterMetadataProvider metadataProvider, SymUnmanagedWriterCreationOptions options);
}
internal class Microsoft.DiaSymReader.SymUnmanagedWriterImpl : SymUnmanagedWriter {
    private static object s_zeroInt32;
    private ISymUnmanagedWriter5 _symWriter;
    private ComMemoryStream _pdbStream;
    private List`1<ISymUnmanagedDocumentWriter> _documentWriters;
    private string _symWriterModuleName;
    private bool _disposed;
    public int DocumentTableCapacity { get; public set; }
    internal SymUnmanagedWriterImpl(ComMemoryStream pdbStream, ISymUnmanagedWriter5 symWriter, string symWriterModuleName);
    private static SymUnmanagedWriterImpl();
    private ISymUnmanagedWriter5 GetSymWriter();
    private ISymUnmanagedWriter8 GetSymWriter8();
    private Exception PdbWritingException(Exception inner);
    public virtual void WriteTo(Stream stream);
    public virtual void Dispose();
    protected virtual override void Finalize();
    private void DisposeImpl();
    private void CloseSymWriter();
    public virtual IEnumerable`1<ArraySegment`1<byte>> GetUnderlyingData();
    public virtual int get_DocumentTableCapacity();
    public virtual void set_DocumentTableCapacity(int value);
    public virtual int DefineDocument(string name, Guid language, Guid vendor, Guid type, Guid algorithmId, Byte[] checksum, Byte[] source);
    public virtual void DefineSequencePoints(int documentIndex, int count, Int32[] offsets, Int32[] startLines, Int32[] startColumns, Int32[] endLines, Int32[] endColumns);
    public virtual void OpenMethod(int methodToken);
    public virtual void CloseMethod();
    public virtual void OpenScope(int startOffset);
    public virtual void CloseScope(int endOffset);
    public virtual void DefineLocalVariable(int index, string name, int attributes, int localSignatureToken);
    public virtual bool DefineLocalConstant(string name, object value, int constantSignatureToken);
    private void DefineLocalConstantImpl(ISymUnmanagedWriter5 symWriter, string name, object value, int constantSignatureToken);
    private bool DefineLocalStringConstant(ISymUnmanagedWriter5 symWriter, string name, string value, int constantSignatureToken);
    private static bool IsValidUnicodeString(string str);
    public virtual void UsingNamespace(string importString);
    public virtual void SetAsyncInfo(int moveNextMethodToken, int kickoffMethodToken, int catchHandlerOffset, Int32[] yieldOffsets, Int32[] resumeOffsets);
    public virtual void DefineCustomMetadata(Byte[] metadata);
    public virtual void SetEntryPoint(int entryMethodToken);
    public virtual void UpdateSignature(Guid guid, UInt32 stamp, int age);
    public virtual void SetSourceServerData(Byte[] data);
    public virtual void SetSourceLinkData(Byte[] data);
    public virtual void OpenTokensToSourceSpansMap();
    public virtual void MapTokenToSourceSpan(int token, int documentIndex, int startLine, int startColumn, int endLine, int endColumn);
    public virtual void CloseTokensToSourceSpansMap();
    public virtual void GetSignature(Guid& guid, UInt32& stamp, Int32& age);
}
internal class Microsoft.DiaSymReader.SymWriterMetadataAdapter : MetadataAdapterBase {
    private ISymWriterMetadataProvider _metadataProvider;
    public SymWriterMetadataAdapter(ISymWriterMetadataProvider metadataProvider);
    public virtual int GetTokenFromSig(Byte* voidPointerSig, int byteCountSig);
    public virtual int GetTypeDefProps(int typeDef, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength, TypeAttributes* attributes, Int32* baseType);
    public virtual int GetTypeRefProps(int typeRef, Int32* resolutionScope, Char* qualifiedName, int qualifiedNameBufferLength, Int32* qualifiedNameLength);
    public virtual int GetNestedClassProps(int nestedClass, Int32& enclosingClass);
    public virtual int GetMethodProps(int methodDef, Int32* declaringTypeDef, Char* name, int nameBufferLength, Int32* nameLength, MethodAttributes* attributes, Byte** signature, Int32* signatureLength, Int32* relativeVirtualAddress, MethodImplAttributes* implAttributes);
}
internal class Microsoft.DiaSymReader.VariantPadding : ValueType {
    public Byte* Data2;
    public Byte* Data3;
}
internal class Microsoft.DiaSymReader.VariantStructure : ValueType {
    private short _type;
    private long _longValue;
    private VariantPadding _padding;
    private decimal _decimalValue;
    private bool _boolValue;
    private long _intValue;
    private double _doubleValue;
    public VariantStructure(DateTime date);
}
[AttributeUsageAttribute("69")]
internal class System.Runtime.CompilerServices.ExtensionAttribute : Attribute {
}
[AttributeUsageAttribute("65")]
internal class System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute : Attribute {
    internal DllImportSearchPath _paths;
    public DllImportSearchPath Paths { get; }
    public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths);
    public DllImportSearchPath get_Paths();
}
[FlagsAttribute]
internal enum System.Runtime.InteropServices.DllImportSearchPath : Enum {
    public int value__;
    public static DllImportSearchPath UseDllDirectoryForDependencies;
    public static DllImportSearchPath ApplicationDirectory;
    public static DllImportSearchPath UserDirectories;
    public static DllImportSearchPath System32;
    public static DllImportSearchPath SafeDirectories;
    public static DllImportSearchPath AssemblyDirectory;
    public static DllImportSearchPath LegacyBehavior;
}
