public class System.Diagnostics.Tracing.EventCounter : object {
    private string _name;
    private EventCounterGroup _group;
    private static int BufferedSize;
    private static float UnusedBufferSlotValue;
    private static int UnsetIndex;
    private Single[] modreq(System.Runtime.CompilerServices.IsVolatile) _bufferedValues;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _bufferedValuesIndex;
    private int _count;
    private float _sum;
    private float _sumSquared;
    private float _min;
    private float _max;
    private object MyLock { get; }
    public EventCounter(string name, EventSource eventSource);
    public void WriteMetric(float value);
    public sealed virtual void Dispose();
    public virtual string ToString();
    private object get_MyLock();
    private void InitializeBuffer();
    private void Enqueue(float value);
    private void Flush();
    private void OnMetricWritten(float value);
    internal EventCounterPayload GetEventCounterPayload();
    private void ResetStatistics();
}
internal class System.Diagnostics.Tracing.EventCounterGroup : object {
    private EventSource _eventSource;
    private List`1<EventCounter> _eventCounters;
    private static WeakReference`1[] s_eventCounterGroups;
    private static object s_eventCounterGroupsLock;
    private DateTime _timeStampSinceCollectionStarted;
    private int _pollingIntervalInMilliseconds;
    private Timer _pollingTimer;
    internal EventCounterGroup(EventSource eventSource);
    private static EventCounterGroup();
    internal void Add(EventCounter eventCounter);
    internal void Remove(EventCounter eventCounter);
    private void RegisterCommandCallback();
    private void OnEventSourceCommand(object sender, EventCommandEventArgs e);
    private static void EnsureEventSourceIndexAvailable(int eventSourceIndex);
    internal static EventCounterGroup GetEventCounterGroup(EventSource eventSource);
    private void DisposeTimer();
    private void EnableTimer(float pollingIntervalInSeconds);
    private void OnTimer(object state);
}
[EventDataAttribute]
internal class System.Diagnostics.Tracing.EventCounterPayload : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private float <StandardDeviation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private float <IntervalSec>k__BackingField;
    public string Name { get; public set; }
    public float Mean { get; public set; }
    public float StandardDeviation { get; public set; }
    public int Count { get; public set; }
    public float Min { get; public set; }
    public float Max { get; public set; }
    public float IntervalSec { get; internal set; }
    private IEnumerable`1<KeyValuePair`2<string, object>> ForEnumeration { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public float get_Mean();
    [CompilerGeneratedAttribute]
public void set_Mean(float value);
    [CompilerGeneratedAttribute]
public float get_StandardDeviation();
    [CompilerGeneratedAttribute]
public void set_StandardDeviation(float value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public float get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(float value);
    [CompilerGeneratedAttribute]
public float get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(float value);
    [CompilerGeneratedAttribute]
public float get_IntervalSec();
    [CompilerGeneratedAttribute]
internal void set_IntervalSec(float value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("System.Diagnostics.Tracing.EventCounterPayload/<get_ForEnumeration>d__31")]
private IEnumerable`1<KeyValuePair`2<string, object>> get_ForEnumeration();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
