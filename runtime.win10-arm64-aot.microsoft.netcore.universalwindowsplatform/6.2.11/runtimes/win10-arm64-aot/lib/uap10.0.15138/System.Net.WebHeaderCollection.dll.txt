internal static class FxResources.System.Net.WebHeaderCollection.SR : object {
}
internal class System.Net.CaseInsensitiveAscii : object {
    internal static CaseInsensitiveAscii StaticInstance;
    internal static Byte[] AsciiToLower;
    private static CaseInsensitiveAscii();
    public sealed virtual int GetHashCode(object myObject);
    public sealed virtual int Compare(object firstObject, object secondObject);
    private int FastGetHashCode(string myString);
    public sealed virtual bool Equals(object firstObject, object secondObject);
}
internal class System.Net.HeaderInfo : object {
    internal bool IsRequestRestricted;
    internal bool IsResponseRestricted;
    internal Func`2<string, String[]> Parser;
    internal string HeaderName;
    internal bool AllowMultiValues;
    internal HeaderInfo(string name, bool requestRestricted, bool responseRestricted, bool multi, Func`2<string, String[]> parser);
}
[DefaultMemberAttribute("Item")]
internal class System.Net.HeaderInfoTable : object {
    private static Func`2<string, String[]> s_singleParser;
    private static Func`2<string, String[]> s_multiParser;
    private static Func`2<string, String[]> s_setCookieParser;
    private static HeaderInfo s_unknownHeaderInfo;
    private static Hashtable s_headerHashTable;
    internal HeaderInfo Item { get; }
    private static HeaderInfoTable();
    private static String[] ParseValueHelper(string value, bool isSetCookie);
    private static bool IsDuringExpiresAttributeParsing(string singleValue);
    internal HeaderInfo get_Item(string name);
}
internal static class System.Net.HttpKnownHeaderNames : object {
    public static string Accept;
    public static string AcceptCharset;
    public static string AcceptEncoding;
    public static string AcceptLanguage;
    public static string AcceptPatch;
    public static string AcceptRanges;
    public static string AccessControlAllowCredentials;
    public static string AccessControlAllowHeaders;
    public static string AccessControlAllowMethods;
    public static string AccessControlAllowOrigin;
    public static string AccessControlExposeHeaders;
    public static string AccessControlMaxAge;
    public static string Age;
    public static string Allow;
    public static string AltSvc;
    public static string Authorization;
    public static string CacheControl;
    public static string Connection;
    public static string ContentDisposition;
    public static string ContentEncoding;
    public static string ContentLanguage;
    public static string ContentLength;
    public static string ContentLocation;
    public static string ContentMD5;
    public static string ContentRange;
    public static string ContentSecurityPolicy;
    public static string ContentType;
    public static string Cookie;
    public static string Cookie2;
    public static string Date;
    public static string ETag;
    public static string Expect;
    public static string Expires;
    public static string From;
    public static string Host;
    public static string IfMatch;
    public static string IfModifiedSince;
    public static string IfNoneMatch;
    public static string IfRange;
    public static string IfUnmodifiedSince;
    public static string KeepAlive;
    public static string LastModified;
    public static string Link;
    public static string Location;
    public static string MaxForwards;
    public static string Origin;
    public static string P3P;
    public static string Pragma;
    public static string ProxyAuthenticate;
    public static string ProxyAuthorization;
    public static string ProxyConnection;
    public static string PublicKeyPins;
    public static string Range;
    public static string Referer;
    public static string RetryAfter;
    public static string SecWebSocketAccept;
    public static string SecWebSocketExtensions;
    public static string SecWebSocketKey;
    public static string SecWebSocketProtocol;
    public static string SecWebSocketVersion;
    public static string Server;
    public static string SetCookie;
    public static string SetCookie2;
    public static string StrictTransportSecurity;
    public static string TE;
    public static string TSV;
    public static string Trailer;
    public static string TransferEncoding;
    public static string Upgrade;
    public static string UpgradeInsecureRequests;
    public static string UserAgent;
    public static string Vary;
    public static string Via;
    public static string WWWAuthenticate;
    public static string Warning;
    public static string XAspNetVersion;
    public static string XContentDuration;
    public static string XContentTypeOptions;
    public static string XFrameOptions;
    public static string XMSEdgeRef;
    public static string XPoweredBy;
    public static string XRequestID;
    public static string XUACompatible;
}
public enum System.Net.HttpRequestHeader : Enum {
    public int value__;
    public static HttpRequestHeader CacheControl;
    public static HttpRequestHeader Connection;
    public static HttpRequestHeader Date;
    public static HttpRequestHeader KeepAlive;
    public static HttpRequestHeader Pragma;
    public static HttpRequestHeader Trailer;
    public static HttpRequestHeader TransferEncoding;
    public static HttpRequestHeader Upgrade;
    public static HttpRequestHeader Via;
    public static HttpRequestHeader Warning;
    public static HttpRequestHeader Allow;
    public static HttpRequestHeader ContentLength;
    public static HttpRequestHeader ContentType;
    public static HttpRequestHeader ContentEncoding;
    public static HttpRequestHeader ContentLanguage;
    public static HttpRequestHeader ContentLocation;
    public static HttpRequestHeader ContentMd5;
    public static HttpRequestHeader ContentRange;
    public static HttpRequestHeader Expires;
    public static HttpRequestHeader LastModified;
    public static HttpRequestHeader Accept;
    public static HttpRequestHeader AcceptCharset;
    public static HttpRequestHeader AcceptEncoding;
    public static HttpRequestHeader AcceptLanguage;
    public static HttpRequestHeader Authorization;
    public static HttpRequestHeader Cookie;
    public static HttpRequestHeader Expect;
    public static HttpRequestHeader From;
    public static HttpRequestHeader Host;
    public static HttpRequestHeader IfMatch;
    public static HttpRequestHeader IfModifiedSince;
    public static HttpRequestHeader IfNoneMatch;
    public static HttpRequestHeader IfRange;
    public static HttpRequestHeader IfUnmodifiedSince;
    public static HttpRequestHeader MaxForwards;
    public static HttpRequestHeader ProxyAuthorization;
    public static HttpRequestHeader Referer;
    public static HttpRequestHeader Range;
    public static HttpRequestHeader Te;
    public static HttpRequestHeader Translate;
    public static HttpRequestHeader UserAgent;
}
[ExtensionAttribute]
internal static class System.Net.HttpRequestHeaderExtensions : object {
    private static String[] s_names;
    private static HttpRequestHeaderExtensions();
    [ExtensionAttribute]
public static string GetName(HttpRequestHeader header);
}
public enum System.Net.HttpResponseHeader : Enum {
    public int value__;
    public static HttpResponseHeader CacheControl;
    public static HttpResponseHeader Connection;
    public static HttpResponseHeader Date;
    public static HttpResponseHeader KeepAlive;
    public static HttpResponseHeader Pragma;
    public static HttpResponseHeader Trailer;
    public static HttpResponseHeader TransferEncoding;
    public static HttpResponseHeader Upgrade;
    public static HttpResponseHeader Via;
    public static HttpResponseHeader Warning;
    public static HttpResponseHeader Allow;
    public static HttpResponseHeader ContentLength;
    public static HttpResponseHeader ContentType;
    public static HttpResponseHeader ContentEncoding;
    public static HttpResponseHeader ContentLanguage;
    public static HttpResponseHeader ContentLocation;
    public static HttpResponseHeader ContentMd5;
    public static HttpResponseHeader ContentRange;
    public static HttpResponseHeader Expires;
    public static HttpResponseHeader LastModified;
    public static HttpResponseHeader AcceptRanges;
    public static HttpResponseHeader Age;
    public static HttpResponseHeader ETag;
    public static HttpResponseHeader Location;
    public static HttpResponseHeader ProxyAuthenticate;
    public static HttpResponseHeader RetryAfter;
    public static HttpResponseHeader Server;
    public static HttpResponseHeader SetCookie;
    public static HttpResponseHeader Vary;
    public static HttpResponseHeader WwwAuthenticate;
}
[ExtensionAttribute]
internal static class System.Net.HttpResponseHeaderExtensions : object {
    private static String[] s_names;
    private static HttpResponseHeaderExtensions();
    [ExtensionAttribute]
public static string GetName(HttpResponseHeader header);
}
internal static class System.Net.HttpValidationHelpers : object {
    private static Char[] s_httpTrimCharacters;
    private static HttpValidationHelpers();
    internal static string CheckBadHeaderNameChars(string name);
    internal static bool ContainsNonAsciiChars(string token);
    internal static bool IsValidToken(string token);
    public static string CheckBadHeaderValueChars(string value);
    public static bool IsInvalidMethodOrHeaderString(string stringValue);
}
internal class System.Net.InternalException : Exception {
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    private static string MissingMember;
    private static string NullInstance;
    private static string StaticMethodObject;
    private static string NoParameters;
    private static int MaxDumpSize;
    private static int EnterEventId;
    private static int ExitEventId;
    private static int AssociateEventId;
    private static int InfoEventId;
    private static int ErrorEventId;
    private static int CriticalFailureEventId;
    private static int DumpArrayEventId;
    private static int EnumerateSecurityPackagesId;
    private static int SspiPackageNotFoundId;
    private static int AcquireDefaultCredentialId;
    private static int AcquireCredentialsHandleId;
    private static int InitializeSecurityContextId;
    private static int SecurityContextInputBufferId;
    private static int SecurityContextInputBuffersId;
    private static int AcceptSecuritContextId;
    private static int OperationReturnedSomethingId;
    private static int NextAvailableEventId;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(object arg);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
}
[DefaultMemberAttribute("Item")]
public class System.Net.WebHeaderCollection : NameValueCollection {
    private static int ApproxAveHeaderLineSize;
    private static int ApproxHighAvgNumHeaders;
    private WebHeaderCollectionType _type;
    private NameValueCollection _innerCollection;
    private static HeaderInfoTable _headerInfo;
    private bool AllowHttpRequestHeader { get; }
    private static HeaderInfoTable HeaderInfo { get; }
    private NameValueCollection InnerCollection { get; }
    private bool AllowHttpResponseHeader { get; }
    public string Item { get; public set; }
    public string Item { get; public set; }
    public int Count { get; }
    public KeysCollection Keys { get; }
    public String[] AllKeys { get; }
    protected WebHeaderCollection(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private bool get_AllowHttpRequestHeader();
    private static HeaderInfoTable get_HeaderInfo();
    private NameValueCollection get_InnerCollection();
    private bool get_AllowHttpResponseHeader();
    public string get_Item(HttpRequestHeader header);
    public void set_Item(HttpRequestHeader header, string value);
    public string get_Item(HttpResponseHeader header);
    public void set_Item(HttpResponseHeader header, string value);
    public virtual void Set(string name, string value);
    public void Set(HttpRequestHeader header, string value);
    public void Set(HttpResponseHeader header, string value);
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public void Remove(HttpRequestHeader header);
    public void Remove(HttpResponseHeader header);
    public virtual void OnDeserialization(object sender);
    public static bool IsRestricted(string headerName);
    public static bool IsRestricted(string headerName, bool response);
    public virtual String[] GetValues(int index);
    public virtual String[] GetValues(string header);
    public virtual string GetKey(int index);
    public virtual void Clear();
    public virtual string Get(int index);
    public virtual string Get(string name);
    public void Add(HttpRequestHeader header, string value);
    public void Add(HttpResponseHeader header, string value);
    public void Add(string header);
    public virtual void Add(string name, string value);
    protected void AddWithoutValidate(string headerName, string headerValue);
    internal void ThrowOnRestrictedHeader(string headerName);
    public virtual void Remove(string name);
    public virtual string ToString();
    public Byte[] ToByteArray();
    public virtual int get_Count();
    public virtual KeysCollection get_Keys();
    public virtual String[] get_AllKeys();
    public virtual IEnumerator GetEnumerator();
}
internal enum System.Net.WebHeaderCollectionType : Enum {
    public byte value__;
    public static WebHeaderCollectionType Unknown;
    public static WebHeaderCollectionType WebRequest;
    public static WebHeaderCollectionType WebResponse;
    public static WebHeaderCollectionType HttpWebRequest;
    public static WebHeaderCollectionType HttpWebResponse;
    public static WebHeaderCollectionType HttpListenerRequest;
    public static WebHeaderCollectionType HttpListenerResponse;
    public static WebHeaderCollectionType FtpWebRequest;
    public static WebHeaderCollectionType FtpWebResponse;
    public static WebHeaderCollectionType FileWebRequest;
    public static WebHeaderCollectionType FileWebResponse;
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_headers_req { get; }
    internal static string net_headers_rsp { get; }
    internal static string net_emptyStringCall { get; }
    internal static string net_WebHeaderInvalidControlChars { get; }
    internal static string net_WebHeaderInvalidCRLFChars { get; }
    internal static string net_WebHeaderInvalidHeaderChars { get; }
    internal static string net_headers_toolong { get; }
    internal static string net_WebHeaderMissingColon { get; }
    internal static string net_headerrestrict { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_headers_req();
    internal static string get_net_headers_rsp();
    internal static string get_net_emptyStringCall();
    internal static string get_net_WebHeaderInvalidControlChars();
    internal static string get_net_WebHeaderInvalidCRLFChars();
    internal static string get_net_WebHeaderInvalidHeaderChars();
    internal static string get_net_headers_toolong();
    internal static string get_net_WebHeaderMissingColon();
    internal static string get_net_headerrestrict();
}
[ExtensionAttribute]
internal static class System.StringExtensions : object {
    [ExtensionAttribute]
internal static string SubstringTrim(string value, int startIndex);
    [ExtensionAttribute]
internal static string SubstringTrim(string value, int startIndex, int length);
}
