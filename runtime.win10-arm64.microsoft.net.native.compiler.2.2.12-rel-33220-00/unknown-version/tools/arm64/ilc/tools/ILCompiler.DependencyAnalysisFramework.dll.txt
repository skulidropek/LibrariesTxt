public abstract class ILCompiler.DependencyAnalysisFramework.ComputedStaticDependencyNode`1 : DependencyNodeCore`1<DependencyContextType> {
    private IEnumerable`1<DependencyListEntry<DependencyContextType>> _dependencies;
    private IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> _conditionalDependencies;
    public bool HasConditionalStaticDependencies { get; }
    public bool HasDynamicDependencies { get; }
    public bool InterestingForDynamicDependencyAnalysis { get; }
    public bool StaticDependenciesAreComputed { get; }
    public void SetStaticDependencies(IEnumerable`1<DependencyListEntry<DependencyContextType>> dependencies, IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> conditionalDependencies);
    public virtual bool get_HasConditionalStaticDependencies();
    public virtual bool get_HasDynamicDependencies();
    public virtual bool get_InterestingForDynamicDependencyAnalysis();
    public virtual bool get_StaticDependenciesAreComputed();
    public virtual IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> GetConditionalStaticDependencies(DependencyContextType context);
    public virtual IEnumerable`1<DependencyListEntry<DependencyContextType>> GetStaticDependencies(DependencyContextType context);
    public virtual IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> SearchDynamicDependencies(List`1<DependencyNodeCore`1<DependencyContextType>> markedNodes, int firstNode, DependencyContextType context);
}
public class ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2 : DependencyAnalyzerBase`1<DependencyContextType> {
    private MarkStrategy _marker;
    private DependencyContextType _dependencyContext;
    private IComparer`1<DependencyNodeCore`1<DependencyContextType>> _resultSorter;
    private Stack`1<DependencyNodeCore`1<DependencyContextType>> _markStack;
    private List`1<DependencyNodeCore`1<DependencyContextType>> _markedNodes;
    private ImmutableArray`1<DependencyNodeCore`1<DependencyContextType>> _markedNodesFinal;
    private List`1<DependencyNodeCore`1<DependencyContextType>> _rootNodes;
    private List`1<DependencyNodeCore`1<DependencyContextType>> _deferredStaticDependencies;
    private List`1<DependencyNodeCore`1<DependencyContextType>> _dynamicDependencyInterestingList;
    private List`1<DynamicDependencyNode<MarkStrategy, DependencyContextType>> _markedNodesWithDynamicDependencies;
    private bool _newDynamicDependenciesMayHaveAppeared;
    private Dictionary`2<DependencyNodeCore`1<DependencyContextType>, HashSet`1<CombinedDependencyListEntry<DependencyContextType>>> _conditional_dependency_store;
    private bool _markingCompleted;
    private Random _stackPopRandomizer;
    [CompilerGeneratedAttribute]
private Action`1<DependencyNodeCore`1<DependencyContextType>> NewMarkedNode;
    [CompilerGeneratedAttribute]
private Action`1<List`1<DependencyNodeCore`1<DependencyContextType>>> ComputeDependencyRoutine;
    public ImmutableArray`1<DependencyNodeCore`1<DependencyContextType>> MarkedNodeList { get; }
    public DependencyAnalyzer`2(DependencyContextType dependencyContext, IComparer`1<DependencyNodeCore`1<DependencyContextType>> resultSorter);
    public sealed virtual void AddRoot(DependencyNodeCore`1<DependencyContextType> rootNode, string reason);
    public sealed virtual ImmutableArray`1<DependencyNodeCore`1<DependencyContextType>> get_MarkedNodeList();
    [CompilerGeneratedAttribute]
public sealed virtual void add_NewMarkedNode(Action`1<DependencyNodeCore`1<DependencyContextType>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NewMarkedNode(Action`1<DependencyNodeCore`1<DependencyContextType>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComputeDependencyRoutine(Action`1<List`1<DependencyNodeCore`1<DependencyContextType>>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComputeDependencyRoutine(Action`1<List`1<DependencyNodeCore`1<DependencyContextType>>> value);
    private IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> MarkedNodesEnumerable();
    public sealed virtual void VisitLogNodes(IDependencyAnalyzerLogNodeVisitor`1<DependencyContextType> logNodeVisitor);
    public sealed virtual void VisitLogEdges(IDependencyAnalyzerLogEdgeVisitor`1<DependencyContextType> logEdgeVisitor);
    private void ComputeDependencies(List`1<DependencyNodeCore`1<DependencyContextType>> deferredStaticDependencies);
    private void GetStaticDependenciesImpl(DependencyNodeCore`1<DependencyContextType> node);
    private void GetStaticDependencies(DependencyNodeCore`1<DependencyContextType> node);
    private void ProcessMarkStack();
    public virtual void ComputeMarkedNodes();
    private bool AddToMarkStack(DependencyNodeCore`1<DependencyContextType> node, string reason, DependencyNodeCore`1<DependencyContextType> reason1, DependencyNodeCore`1<DependencyContextType> reason2);
}
public abstract class ILCompiler.DependencyAnalysisFramework.DependencyAnalyzerBase`1 : object {
    public ImmutableArray`1<DependencyNodeCore`1<DependencyContextType>> MarkedNodeList { get; }
    public abstract virtual void AddRoot(DependencyNodeCore`1<DependencyContextType> rootNode, string reason);
    public void AddRoot(object rootNode, string reason);
    public abstract virtual ImmutableArray`1<DependencyNodeCore`1<DependencyContextType>> get_MarkedNodeList();
    public abstract virtual void ComputeMarkedNodes();
    [CompilerGeneratedAttribute]
public abstract virtual void add_NewMarkedNode(Action`1<DependencyNodeCore`1<DependencyContextType>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NewMarkedNode(Action`1<DependencyNodeCore`1<DependencyContextType>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComputeDependencyRoutine(Action`1<List`1<DependencyNodeCore`1<DependencyContextType>>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComputeDependencyRoutine(Action`1<List`1<DependencyNodeCore`1<DependencyContextType>>> value);
    public abstract virtual void VisitLogNodes(IDependencyAnalyzerLogNodeVisitor`1<DependencyContextType> logNodeVisitor);
    public abstract virtual void VisitLogEdges(IDependencyAnalyzerLogEdgeVisitor`1<DependencyContextType> logEdgeVisitor);
}
public abstract class ILCompiler.DependencyAnalysisFramework.DependencyNode : object {
    private object _mark;
    public bool Marked { get; }
    internal void SetMark(object mark);
    internal object GetMark();
    public sealed virtual bool get_Marked();
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
}
public abstract class ILCompiler.DependencyAnalysisFramework.DependencyNodeCore`1 : DependencyNode {
    public bool InterestingForDynamicDependencyAnalysis { get; }
    public bool HasDynamicDependencies { get; }
    public bool HasConditionalStaticDependencies { get; }
    public bool StaticDependenciesAreComputed { get; }
    public abstract virtual bool get_InterestingForDynamicDependencyAnalysis();
    public abstract virtual bool get_HasDynamicDependencies();
    public abstract virtual bool get_HasConditionalStaticDependencies();
    public abstract virtual bool get_StaticDependenciesAreComputed();
    public abstract virtual IEnumerable`1<DependencyListEntry<DependencyContextType>> GetStaticDependencies(DependencyContextType context);
    public abstract virtual IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> GetConditionalStaticDependencies(DependencyContextType context);
    public abstract virtual IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> SearchDynamicDependencies(List`1<DependencyNodeCore`1<DependencyContextType>> markedNodes, int firstNode, DependencyContextType context);
    internal void CallOnMarked(DependencyContextType context);
    protected virtual void OnMarked(DependencyContextType context);
    protected abstract virtual string GetName(DependencyContextType context);
    internal string GetNameInternal(DependencyContextType context);
}
public class ILCompiler.DependencyAnalysisFramework.DgmlWriter : object {
    public static void WriteDependencyGraphToStream(Stream stream, DependencyAnalyzerBase`1<DependencyContextType> analysis, DependencyContextType context);
}
internal class ILCompiler.DependencyAnalysisFramework.DgmlWriter`1 : object {
    private XmlWriter _xmlWrite;
    private bool _done;
    private DependencyContextType _context;
    private Dictionary`2<object, int> _nodeMappings;
    private int _nodeNextId;
    private HashSet`1<Tuple`2<DependencyNodeCore`1<DependencyContextType>, DependencyNodeCore`1<DependencyContextType>>> _combinedNodesEdgeVisited;
    public DgmlWriter`1(XmlWriter xmlWrite, DependencyContextType context);
    public void WriteNodesAndEdges(Action nodeWriter, Action edgeWriter);
    public static void WriteDependencyGraphToStream(Stream stream, DependencyAnalyzerBase`1<DependencyContextType> analysis, DependencyContextType context);
    public void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    private void AddNode(DependencyNodeCore`1<DependencyContextType> node);
    private void AddNode(object node, string label);
    private void AddReason(object nodeA, object nodeB, string reason);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogEdgeVisitor<DependencyContextType>.VisitEdge(DependencyNodeCore`1<DependencyContextType> nodeDepender, DependencyNodeCore`1<DependencyContextType> nodeDependedOn, string reason);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogEdgeVisitor<DependencyContextType>.VisitEdge(string root, DependencyNodeCore`1<DependencyContextType> dependedOn);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogNodeVisitor<DependencyContextType>.VisitCombinedNode(Tuple`2<DependencyNodeCore`1<DependencyContextType>, DependencyNodeCore`1<DependencyContextType>> node);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogEdgeVisitor<DependencyContextType>.VisitEdge(DependencyNodeCore`1<DependencyContextType> nodeDepender, DependencyNodeCore`1<DependencyContextType> nodeDependerOther, DependencyNodeCore`1<DependencyContextType> nodeDependedOn, string reason);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogNodeVisitor<DependencyContextType>.VisitNode(DependencyNodeCore`1<DependencyContextType> node);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogNodeVisitor<DependencyContextType>.VisitRootNode(string rootName);
}
public class ILCompiler.DependencyAnalysisFramework.EventSourceLogStrategy`1 : ValueType {
    private static int s_GraphIds;
    private int GraphId;
    private int RootIndex;
    private int ObjectIndex;
    private DependencyContextType _context;
    public static bool IsEventSourceEnabled { get; }
    private static EventSourceLogStrategy`1();
    public static bool get_IsEventSourceEnabled();
    private sealed virtual override bool ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.MarkNode(DependencyNodeCore`1<DependencyContextType> node, DependencyNodeCore`1<DependencyContextType> reasonNode, DependencyNodeCore`1<DependencyContextType> reasonNode2, string reason);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogEdges(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogEdgeVisitor`1<DependencyContextType> logEdgeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogNodes(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogNodeVisitor`1<DependencyContextType> logNodeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.AttachContext(DependencyContextType context);
}
public class ILCompiler.DependencyAnalysisFramework.FirstMarkLogStrategy`1 : ValueType {
    private HashSet`1<string> _reasonStringOnlyNodes;
    private sealed virtual override bool ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.MarkNode(DependencyNodeCore`1<DependencyContextType> node, DependencyNodeCore`1<DependencyContextType> reasonNode, DependencyNodeCore`1<DependencyContextType> reasonNode2, string reason);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogNodes(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogNodeVisitor`1<DependencyContextType> logNodeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogEdges(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogEdgeVisitor`1<DependencyContextType> logEdgeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.AttachContext(DependencyContextType context);
}
public class ILCompiler.DependencyAnalysisFramework.FullGraphLogStrategy`1 : ValueType {
    private HashSet`1<string> _reasonStringOnlyNodes;
    private sealed virtual override bool ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.MarkNode(DependencyNodeCore`1<DependencyContextType> node, DependencyNodeCore`1<DependencyContextType> reasonNode, DependencyNodeCore`1<DependencyContextType> reasonNode2, string reason);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogNodes(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogNodeVisitor`1<DependencyContextType> logNodeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogEdges(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogEdgeVisitor`1<DependencyContextType> logEdgeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.AttachContext(DependencyContextType context);
}
[EventSourceAttribute]
internal class ILCompiler.DependencyAnalysisFramework.GraphEventSource : EventSource {
    public static GraphEventSource Log;
    private static GraphEventSource();
    [EventAttribute("1")]
public void Graph(int id, string name);
    [EventAttribute("2")]
public void Node(int id, int index, string name);
    [EventAttribute("3")]
public void Edge(int id, int dependentIndex, int dependencyIndex, string reason);
    [EventAttribute("4")]
public void ConditionalEdge(int id, int dependentIndex1, int dependentIndex2, int dependencyIndex, string reason);
}
public interface ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy`1 {
    public abstract virtual bool MarkNode(DependencyNodeCore`1<DependencyContextType> node, DependencyNodeCore`1<DependencyContextType> reasonNode, DependencyNodeCore`1<DependencyContextType> reasonNode2, string reason);
    public abstract virtual void VisitLogNodes(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogNodeVisitor`1<DependencyContextType> logNodeVisitor);
    public abstract virtual void VisitLogEdges(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogEdgeVisitor`1<DependencyContextType> logEdgeVisitor);
    public abstract virtual void AttachContext(DependencyContextType context);
}
public interface ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogEdgeVisitor`1 {
    public abstract virtual void VisitEdge(DependencyNodeCore`1<DependencyContextType> nodeDepender, DependencyNodeCore`1<DependencyContextType> nodeDependedOn, string reason);
    public abstract virtual void VisitEdge(string root, DependencyNodeCore`1<DependencyContextType> dependedOn);
    public abstract virtual void VisitEdge(DependencyNodeCore`1<DependencyContextType> nodeDepender, DependencyNodeCore`1<DependencyContextType> nodeDependerOther, DependencyNodeCore`1<DependencyContextType> nodeDependedOn, string reason);
}
public interface ILCompiler.DependencyAnalysisFramework.IDependencyAnalyzerLogNodeVisitor`1 {
    public abstract virtual void VisitCombinedNode(Tuple`2<DependencyNodeCore`1<DependencyContextType>, DependencyNodeCore`1<DependencyContextType>> node);
    public abstract virtual void VisitNode(DependencyNodeCore`1<DependencyContextType> node);
    public abstract virtual void VisitRootNode(string rootName);
}
public interface ILCompiler.DependencyAnalysisFramework.IDependencyNode {
    public bool Marked { get; }
    public abstract virtual bool get_Marked();
}
public interface ILCompiler.DependencyAnalysisFramework.IDependencyNode`1 {
    public bool InterestingForDynamicDependencyAnalysis { get; }
    public bool HasDynamicDependencies { get; }
    public bool HasConditionalStaticDependencies { get; }
    public bool StaticDependenciesAreComputed { get; }
    public abstract virtual bool get_InterestingForDynamicDependencyAnalysis();
    public abstract virtual bool get_HasDynamicDependencies();
    public abstract virtual bool get_HasConditionalStaticDependencies();
    public abstract virtual bool get_StaticDependenciesAreComputed();
    public abstract virtual IEnumerable`1<DependencyListEntry<DependencyContextType>> GetStaticDependencies(DependencyContextType context);
    public abstract virtual IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> GetConditionalStaticDependencies(DependencyContextType context);
    public abstract virtual IEnumerable`1<CombinedDependencyListEntry<DependencyContextType>> SearchDynamicDependencies(List`1<DependencyNodeCore`1<DependencyContextType>> markedNodes, int firstNode, DependencyContextType context);
}
public class ILCompiler.DependencyAnalysisFramework.NoLogStrategy`1 : ValueType {
    private static object s_singleton;
    private static NoLogStrategy`1();
    private sealed virtual override bool ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.MarkNode(DependencyNodeCore`1<DependencyContextType> node, DependencyNodeCore`1<DependencyContextType> reasonNode, DependencyNodeCore`1<DependencyContextType> reasonNode2, string reason);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogEdges(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogEdgeVisitor`1<DependencyContextType> logEdgeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.VisitLogNodes(IEnumerable`1<DependencyNodeCore`1<DependencyContextType>> nodeList, IDependencyAnalyzerLogNodeVisitor`1<DependencyContextType> logNodeVisitor);
    private sealed virtual override void ILCompiler.DependencyAnalysisFramework.IDependencyAnalysisMarkStrategy<DependencyContextType>.AttachContext(DependencyContextType context);
}
