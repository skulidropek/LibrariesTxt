public enum Microsoft.Samples.Debugging.CorDebug.NativeApi.CorDebugPlatform : Enum {
    public int value__;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_X86;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_AMD64;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_IA64;
    public static CorDebugPlatform CORDB_PLATFORM_MAC_PPC;
    public static CorDebugPlatform CORDB_PLATFORM_MAC_X86;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_ARM;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_ARM64;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FE06DC28-49FB-4636-A4A3-E80DB4AE116C")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugDataTarget {
    public abstract virtual CorDebugPlatform GetPlatform();
    public abstract virtual UInt32 ReadVirtual(ulong address, IntPtr buffer, UInt32 bytesRequested);
    public abstract virtual void GetThreadContext(UInt32 threadId, UInt32 contextFlags, UInt32 contextSize, IntPtr context);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A074096B-3ADC-4485-81DA-68C7A4EA52DB")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugInstanceFieldSymbol {
    public abstract virtual void GetName(UInt32 cchName, UInt32& pcchName, StringBuilder szName);
    public abstract virtual void GetSize(UInt32& pcbSize);
    public abstract virtual void GetOffset(UInt32& pOffset);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("677888B3-D160-4B8C-A73B-D79E6AAA1D13")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugMemoryBuffer {
    public abstract virtual void GetStartAddress(IntPtr& address);
    public abstract virtual void GetSize(Int32& bufferSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FAA8637B-3BBE-4671-8E26-3B59875B922A")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugMergedAssemblyRecord {
    public abstract virtual void GetSimpleName(UInt32 cchName, UInt32& pcchName, StringBuilder szName);
    public abstract virtual void GetVersion(UInt16& pMajor, UInt16& pMinor, UInt16& pBuild, UInt16& pRevision);
    public abstract virtual void GetCulture(UInt32 cchCulture, UInt32& pcchCulture, StringBuilder szCulture);
    public abstract virtual void GetPublicKey(UInt32 cbPublicKey, UInt32& pcbPublicKey, Byte[] pbPublicKey);
    public abstract virtual void GetPublicKeyToken(UInt32 cbPublicKeyToken, UInt32& pcbPublicKeyToken, Byte[] pbPublicKeyToken);
    public abstract virtual void GetIndex(Int32& index);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CBF9DA63-F68D-4BBB-A21C-15A45EAADF5B")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugStaticFieldSymbol {
    public abstract virtual void GetName(UInt32 cchName, UInt32& pcchName, StringBuilder szName);
    public abstract virtual void GetSize(UInt32& pcbSize);
    public abstract virtual void GetAddress(UInt64& pRVA);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3948A999-FD8A-4C38-A708-8A71E9B04DBB")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugSymbolProvider {
    public abstract virtual int GetStaticFieldSymbols(UInt32 cbSignature, Byte[] typeSignature, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugStaticFieldSymbol[] pSymbols);
    public abstract virtual int GetInstanceFieldSymbols(UInt32 cbSignature, Byte[] typeSignature, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugInstanceFieldSymbol[] pSymbols);
    public abstract virtual void GetMethodLocalSymbols(UInt32 nativeRVA, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugVariableSymbol[] pSymbols);
    public abstract virtual void GetMethodParameterSymbols(UInt32 nativeRVA, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugVariableSymbol[] pSymbols);
    public abstract virtual void GetMergedAssemblyRecords(UInt32 cRequestedRecords, UInt32& pcFetchedRecords, ICorDebugMergedAssemblyRecord[] pRecords);
    public abstract virtual int GetMethodProps(UInt32 codeRva, UInt32& methodToken, UInt32& cGenericParams, UInt32 cbSignature, UInt32& pcbSignature, Byte[] signature);
    public abstract virtual int GetTypeProps(UInt32 vtableRva, UInt32 cbSignature, UInt32& pcbSignature, Byte[] signature);
    public abstract virtual void GetCodeRange(UInt32 codeRva, UInt32& codeStartAddress, UInt32& codeSize);
    public abstract virtual int GetAssemblyImageBytes(long rva, int length, ICorDebugMemoryBuffer& ppMemoryBuffer);
    public abstract virtual int GetObjectSize(UInt32 cbSignature, Byte[] typeSignature, Int32& size);
    public abstract virtual int GetAssemblyImageMetadata(ICorDebugMemoryBuffer& ppMemoryBuffer);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F9801807-4764-4330-9E67-4F685094165E")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugSymbolProvider2 {
    public abstract virtual int GetGenericDictionaryInfo(ICorDebugMemoryBuffer& ppMemoryBuffer);
    public abstract virtual int GetFrameProps(UInt32 codeRva, UInt32& codeStartRva, UInt32& parentFrameStartRva);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2C74E17C-1034-4065-858A-CCC85B5DFF32")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugSymbolProvider3 {
    public abstract virtual int GetAssemblyImageCount(UInt32& cImages);
    public abstract virtual int GetAssemblyImageMetadata(UInt32 index, ICorDebugMemoryBuffer& ppMemoryBuffer);
    public abstract virtual int GetAssemblyImageBytes(UInt32 index, long rva, int length, ICorDebugMemoryBuffer& ppMemoryBuffer);
    public abstract virtual int GetMappingMetadata(ICorDebugMemoryBuffer& ppMemoryBuffer);
    public abstract virtual int GetAssemblyImageIndexes(UInt32 cEntries, UInt32& pcEntries, UInt32[] pIndexBuffer);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9FEAECCC-5041-4B5D-93EB-F3C6AED315DE")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugSymbolProvider4 {
    public abstract virtual int GetThreadStaticFieldSymbols(UInt32 cbSignature, Byte[] typeSignature, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugThreadStaticFieldSymbol[] pSymbols);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("33d6f22e-85a1-4548-a417-eb0a6873c544")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugSymbolProvider5 {
    public abstract virtual int GetNativeTokenToPseudoMap(UInt32[] nativeTokenToPseudoMap, UInt32 mapItemCount, UInt32& requiredItemCount);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6C65E2CB-3D23-4A6C-99AB-234DE718482D")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugThreadStaticFieldSymbol {
    public abstract virtual void GetName(UInt32 cchName, UInt32& pcchName, StringBuilder szName);
    public abstract virtual void GetSize(UInt32& pcbSize);
    public abstract virtual void GetOffset(UInt64& pOffset);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("707E8932-1163-48D9-8A93-F5B1F480FBB7")]
public interface Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugVariableSymbol {
    public abstract virtual void GetName(UInt32 cchName, UInt32& pcchName, StringBuilder szName);
    public abstract virtual void GetSize(UInt32& pcbSize);
    public abstract virtual void GetValue(int offsetInVariable, int cbContext, IntPtr context, int cbValue, Int32& pcbValue, Byte[] pValue);
    public abstract virtual void SetValue(int offsetInVariable, int threadID, int cbContext, IntPtr context, int cbValue, Byte[] pValue);
    public abstract virtual int GetSlotIndex(Int32& slotIndex);
}
public class Microsoft.Samples.Debugging.MdbgEngine.AMD64ImageRuntimeFunctionEntry : RuntimeFunctionEntry {
    public int Size { get; }
    public static AMD64ImageRuntimeFunctionEntry ReadFrom(BinaryReader r);
    public static int GetSize();
    public virtual int get_Size();
    public virtual void WriteTo(BinaryWriter writer);
}
public class Microsoft.Samples.Debugging.MdbgEngine.ARMImageRuntimeFunctionEntry : RuntimeFunctionEntry {
    public int Size { get; }
    public static ARMImageRuntimeFunctionEntry ReadFrom(BinaryReader r);
    public static int GetSize();
    public virtual int get_Size();
    public virtual void WriteTo(BinaryWriter writer);
}
[ExtensionAttribute]
internal static class Microsoft.Samples.Debugging.MdbgEngine.BinaryReaderExtensions : object {
    [ExtensionAttribute]
public static string ReadNullTerminatedString(BinaryReader reader, Encoding encoding);
}
public class Microsoft.Samples.Debugging.MdbgEngine.CodeViewDebugData : object {
    public Guid Signature;
    public int Age;
    public string PdbPath;
}
public class Microsoft.Samples.Debugging.MdbgEngine.COFFFileHeader : ValueType {
    public ushort Machine;
    public short NumberOfSections;
    public int TimeDateStamp;
    public int PointerToSymbolTable;
    public int NumberOfSymbols;
    public short SizeOfOptionalHeader;
    public ushort Characteristics;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.COR20Flags : Enum {
    public UInt32 value__;
    public static COR20Flags ILOnly;
    public static COR20Flags Bit32Required;
    public static COR20Flags ILLibrary;
    public static COR20Flags StrongNameSigned;
    public static COR20Flags NativeEntryPoint;
    public static COR20Flags TrackDebugData;
}
public class Microsoft.Samples.Debugging.MdbgEngine.COR20Header : ValueType {
    public int CountBytes;
    public ushort MajorRuntimeVersion;
    public ushort MinorRuntimeVersion;
    public DirectoryEntry MetaDataDirectory;
    public COR20Flags COR20Flags;
    public UInt32 EntryPointTokenOrRVA;
    public DirectoryEntry ResourcesDirectory;
    public DirectoryEntry StrongNameSignatureDirectory;
    public DirectoryEntry CodeManagerTableDirectory;
    public DirectoryEntry VtableFixupsDirectory;
    public DirectoryEntry ExportAddressTableJumpsDirectory;
    public DirectoryEntry ManagedNativeHeaderDirectory;
}
internal class Microsoft.Samples.Debugging.MdbgEngine.DebugDirectory : ValueType {
    public UInt32 Characteristics;
    public UInt32 TimeDateStamp;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public ImageDebugType Type;
    public UInt32 SizeOfData;
    public UInt32 AddressOfRawData;
    public UInt32 PointerToRawData;
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaArrayType : DiaType {
    [CompilerGeneratedAttribute]
private DiaType <ElementType>k__BackingField;
    public DiaType ElementType { get; private set; }
    public int Count { get; }
    public int Size { get; }
    public string Name { get; }
    internal DiaArrayType(IDiaSymbol typeSymbol, DiaModule module);
    [CompilerGeneratedAttribute]
public DiaType get_ElementType();
    [CompilerGeneratedAttribute]
private void set_ElementType(DiaType value);
    public int get_Count();
    public virtual int get_Size();
    public virtual string get_Name();
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaBaseClass : object {
    [CompilerGeneratedAttribute]
private bool <IsVirtualBaseClass>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BaseClassOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private DiaUDTType <Type>k__BackingField;
    public bool IsVirtualBaseClass { get; private set; }
    public int BaseClassOffset { get; private set; }
    public DiaUDTType Type { get; private set; }
    public DiaBaseClass(IDiaSymbol symbol, DiaModule module);
    [CompilerGeneratedAttribute]
public bool get_IsVirtualBaseClass();
    [CompilerGeneratedAttribute]
private void set_IsVirtualBaseClass(bool value);
    [CompilerGeneratedAttribute]
public int get_BaseClassOffset();
    [CompilerGeneratedAttribute]
private void set_BaseClassOffset(int value);
    [CompilerGeneratedAttribute]
public DiaUDTType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(DiaUDTType value);
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaEnumType : DiaScopedType {
    private Dictionary`2<string, object> _enumValues;
    public IDictionary`2<string, object> EnumValues { get; }
    public int Size { get; }
    public string PrimitiveName { get; }
    public BasicType BasicType { get; }
    internal DiaEnumType(IDiaSymbol typeSymbol, DiaModule module);
    public IDictionary`2<string, object> get_EnumValues();
    public virtual int get_Size();
    public string get_PrimitiveName();
    public BasicType get_BasicType();
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaField : object {
    public string name;
    public DiaType type;
    public Category category;
    public object constantValue;
    public int offset;
    internal static DiaField Create(IDiaSymbol fieldSymbol, DiaModule module);
    private void Initialize(IDiaSymbol fieldSymbol, DiaModule module);
    public virtual string ToString();
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaFunctionType : DiaType {
    public int Size { get; }
    public string Name { get; }
    internal DiaFunctionType(IDiaSymbol typeSymbol, DiaModule module);
    public virtual int get_Size();
    public virtual string get_Name();
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaModule : object {
    private IDiaSession m_session;
    private IDiaDataSource m_source;
    private IDiaEnumFrameData m_enumFrameData;
    internal Dictionary`2<string, DiaType> types;
    private int unnamedTypeNumber;
    public IDiaSession Session { get; }
    public IDiaDataSource Source { get; }
    public IDiaEnumFrameData EnumFrameData { get; }
    public DiaModule(IDiaSession session, IDiaDataSource source);
    public IDiaSession get_Session();
    public IDiaDataSource get_Source();
    public IDiaEnumFrameData get_EnumFrameData();
    private IDiaEnumFrameData GetEnumFrameData();
    internal DiaType GetType(IDiaSymbol typeSymbol);
    internal DiaType GetType(IDiaSymbol typeSymbol, DiaType enclosingType);
    public DiaType LoadType(string name);
    internal string CreateUnnamedTypeName(DiaType type);
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaParsedName : object {
    private DiaParsedName _container;
    private string _name;
    private DiaParsedName[] _templateArgs;
    public string SimpleName { get; }
    public DiaParsedName Container { get; }
    public DiaParsedName[] TemplateArguments { get; }
    private DiaParsedName(DiaParsedName container, string name, DiaParsedName[] templateArgs);
    public static DiaParsedName Parse(string name);
    private static DiaParsedName ParseFrom(string input, Int32& startIndex);
    public string get_SimpleName();
    public string GetFormattedName(ContainerOptions containerOptions, TemplateOptions templateOptions);
    public DiaParsedName get_Container();
    public DiaParsedName[] get_TemplateArguments();
    public virtual string ToString();
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaPointerType : DiaType {
    [CompilerGeneratedAttribute]
private DiaType <ElementType>k__BackingField;
    public DiaType ElementType { get; private set; }
    public int Size { get; }
    public string Name { get; }
    internal DiaPointerType(IDiaSymbol typeSymbol, DiaModule module);
    [CompilerGeneratedAttribute]
public DiaType get_ElementType();
    [CompilerGeneratedAttribute]
private void set_ElementType(DiaType value);
    public virtual int get_Size();
    public virtual string get_Name();
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaPrimitiveType : DiaType {
    [CompilerGeneratedAttribute]
private BasicType <BasicType>k__BackingField;
    public BasicType BasicType { get; private set; }
    public int Size { get; }
    public string Name { get; }
    internal DiaPrimitiveType(IDiaSymbol typeSymbol, DiaModule module);
    [CompilerGeneratedAttribute]
public BasicType get_BasicType();
    [CompilerGeneratedAttribute]
private void set_BasicType(BasicType value);
    public virtual int get_Size();
    public virtual string get_Name();
}
public abstract class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaScopedType : DiaType {
    private DiaParsedName _parsedName;
    private DiaScopedType _enclosingType;
    public DiaScopedType EnclosingType { get; }
    public string Namespace { get; }
    public DiaParsedName ParsedName { get; }
    protected DiaScopedType(IDiaSymbol typeSymbol, DiaModule module);
    public DiaScopedType get_EnclosingType();
    public string get_Namespace();
    public DiaParsedName get_ParsedName();
}
[ExtensionAttribute]
public static class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaSymbol : object {
    [IteratorStateMachineAttribute("Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaSymbol/<GetChildren>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IDiaSymbol> GetChildren(IDiaSymbol symbol, SymTagEnum symTag, string name);
    [ExtensionAttribute]
public static IEnumerable`1<IDiaSymbol> GetChildren(IDiaSymbol symbol, SymTagEnum symTag);
    [ExtensionAttribute]
public static IEnumerable`1<IDiaSymbol> GetChildren(IDiaSymbol symbol);
}
public abstract class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaType : object {
    protected IDiaSymbol _symbol;
    [CompilerGeneratedAttribute]
private DiaModule <Module>k__BackingField;
    public DiaModule Module { get; private set; }
    public int Size { get; }
    public string Name { get; }
    protected DiaType(IDiaSymbol typeSymbol, DiaModule module);
    internal static DiaType Create(IDiaSymbol typeSymbol, DiaModule module);
    [CompilerGeneratedAttribute]
public DiaModule get_Module();
    [CompilerGeneratedAttribute]
private void set_Module(DiaModule value);
    public abstract virtual int get_Size();
    public virtual string get_Name();
    public virtual string ToString();
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaTypeScan : Enum {
    public int value__;
    public static DiaTypeScan AllBaseClasses;
    public static DiaTypeScan ThisTypeOnly;
}
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.DiaUDTType : DiaScopedType {
    private List`1<DiaField> _constantFields;
    private List`1<DiaField> _instanceFields;
    private List`1<DiaField> _staticFields;
    private Dictionary`2<string, DiaField> _fieldsByName;
    private List`1<DiaBaseClass> _baseClasses;
    private int _size;
    public Nullable`1<int> VtableOffset { get; }
    public int Size { get; }
    public IEnumerable`1<DiaBaseClass> BaseClasses { get; }
    private Dictionary`2<string, DiaField> FieldsByName { get; }
    internal DiaUDTType(IDiaSymbol typeSymbol, DiaModule module);
    public Nullable`1<int> get_VtableOffset();
    public virtual int get_Size();
    public IEnumerable`1<DiaField> GetInstanceFields(DiaTypeScan typesToScan);
    public DiaField GetField(string name);
    public DiaField GetField(string name, DiaTypeScan typesToScan);
    public IEnumerable`1<DiaBaseClass> get_BaseClasses();
    private void EnsureBaseClassesLoaded();
    private void EnsureSizeLoaded();
    private Dictionary`2<string, DiaField> get_FieldsByName();
    private void EnsureFieldsLoaded();
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.BasicType : Enum {
    public int value__;
    public static BasicType btNoType;
    public static BasicType btVoid;
    public static BasicType btChar;
    public static BasicType btWChar;
    public static BasicType btInt;
    public static BasicType btUInt;
    public static BasicType btFloat;
    public static BasicType btBCD;
    public static BasicType btBool;
    public static BasicType btLong;
    public static BasicType btULong;
    public static BasicType btCurrency;
    public static BasicType btDate;
    public static BasicType btVariant;
    public static BasicType btComplex;
    public static BasicType btBit;
    public static BasicType btBSTR;
    public static BasicType btHresult;
    public static BasicType btMAX;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.CvCpuType : Enum {
    public int value__;
    public static CvCpuType CV_CFL_8080;
    public static CvCpuType CV_CFL_8086;
    public static CvCpuType CV_CFL_80286;
    public static CvCpuType CV_CFL_80386;
    public static CvCpuType CV_CFL_80486;
    public static CvCpuType CV_CFL_PENTIUM;
    public static CvCpuType CV_CFL_PENTIUMII;
    public static CvCpuType CV_CFL_PENTIUMPRO;
    public static CvCpuType CV_CFL_PENTIUMIII;
    public static CvCpuType CV_CFL_MIPS;
    public static CvCpuType CV_CFL_MIPSR4000;
    public static CvCpuType CV_CFL_MIPS16;
    public static CvCpuType CV_CFL_MIPS32;
    public static CvCpuType CV_CFL_MIPS64;
    public static CvCpuType CV_CFL_MIPSI;
    public static CvCpuType CV_CFL_MIPSII;
    public static CvCpuType CV_CFL_MIPSIII;
    public static CvCpuType CV_CFL_MIPSIV;
    public static CvCpuType CV_CFL_MIPSV;
    public static CvCpuType CV_CFL_M68000;
    public static CvCpuType CV_CFL_M68010;
    public static CvCpuType CV_CFL_M68020;
    public static CvCpuType CV_CFL_M68030;
    public static CvCpuType CV_CFL_M68040;
    public static CvCpuType CV_CFL_ALPHA;
    public static CvCpuType CV_CFL_ALPHA_21064;
    public static CvCpuType CV_CFL_ALPHA_21164;
    public static CvCpuType CV_CFL_ALPHA_21164A;
    public static CvCpuType CV_CFL_ALPHA_21264;
    public static CvCpuType CV_CFL_ALPHA_21364;
    public static CvCpuType CV_CFL_PPC601;
    public static CvCpuType CV_CFL_PPC603;
    public static CvCpuType CV_CFL_PPC604;
    public static CvCpuType CV_CFL_PPC620;
    public static CvCpuType CV_CFL_PPCFP;
    public static CvCpuType CV_CFL_SH3;
    public static CvCpuType CV_CFL_SH3E;
    public static CvCpuType CV_CFL_SH3DSP;
    public static CvCpuType CV_CFL_SH4;
    public static CvCpuType CV_CFL_SHMEDIA;
    public static CvCpuType CV_CFL_ARM3;
    public static CvCpuType CV_CFL_ARM4;
    public static CvCpuType CV_CFL_ARM4T;
    public static CvCpuType CV_CFL_ARM5;
    public static CvCpuType CV_CFL_ARM5T;
    public static CvCpuType CV_CFL_ARM6;
    public static CvCpuType CV_CFL_ARM_XMAC;
    public static CvCpuType CV_CFL_ARM_WMMX;
    public static CvCpuType CV_CFL_OMNI;
    public static CvCpuType CV_CFL_IA64;
    public static CvCpuType CV_CFL_IA64_1;
    public static CvCpuType CV_CFL_IA64_2;
    public static CvCpuType CV_CFL_CEE;
    public static CvCpuType CV_CFL_AM33;
    public static CvCpuType CV_CFL_M32R;
    public static CvCpuType CV_CFL_TRICORE;
    public static CvCpuType CV_CFL_X64;
    public static CvCpuType CV_CFL_AMD64;
    public static CvCpuType CV_CFL_EBC;
    public static CvCpuType CV_CFL_THUMB;
    public static CvCpuType CV_CFL_ARMNT;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.CvHreg : Enum {
    public int value__;
    public static CvHreg CV_ALLREG_ERR;
    public static CvHreg CV_ALLREG_TEB;
    public static CvHreg CV_ALLREG_TIMER;
    public static CvHreg CV_ALLREG_EFAD1;
    public static CvHreg CV_ALLREG_EFAD2;
    public static CvHreg CV_ALLREG_EFAD3;
    public static CvHreg CV_ALLREG_VFRAME;
    public static CvHreg CV_ALLREG_HANDLE;
    public static CvHreg CV_ALLREG_PARAMS;
    public static CvHreg CV_ALLREG_LOCALS;
    public static CvHreg CV_ALLREG_TID;
    public static CvHreg CV_ALLREG_ENV;
    public static CvHreg CV_ALLREG_CMDLN;
    public static CvHreg CV_REG_NONE;
    public static CvHreg CV_REG_AL;
    public static CvHreg CV_REG_CL;
    public static CvHreg CV_REG_DL;
    public static CvHreg CV_REG_BL;
    public static CvHreg CV_REG_AH;
    public static CvHreg CV_REG_CH;
    public static CvHreg CV_REG_DH;
    public static CvHreg CV_REG_BH;
    public static CvHreg CV_REG_AX;
    public static CvHreg CV_REG_CX;
    public static CvHreg CV_REG_DX;
    public static CvHreg CV_REG_BX;
    public static CvHreg CV_REG_SP;
    public static CvHreg CV_REG_BP;
    public static CvHreg CV_REG_SI;
    public static CvHreg CV_REG_DI;
    public static CvHreg CV_REG_EAX;
    public static CvHreg CV_REG_ECX;
    public static CvHreg CV_REG_EDX;
    public static CvHreg CV_REG_EBX;
    public static CvHreg CV_REG_ESP;
    public static CvHreg CV_REG_EBP;
    public static CvHreg CV_REG_ESI;
    public static CvHreg CV_REG_EDI;
    public static CvHreg CV_REG_ES;
    public static CvHreg CV_REG_CS;
    public static CvHreg CV_REG_SS;
    public static CvHreg CV_REG_DS;
    public static CvHreg CV_REG_FS;
    public static CvHreg CV_REG_GS;
    public static CvHreg CV_REG_IP;
    public static CvHreg CV_REG_FLAGS;
    public static CvHreg CV_REG_EIP;
    public static CvHreg CV_REG_EFLAGS;
    public static CvHreg CV_REG_TEMP;
    public static CvHreg CV_REG_TEMPH;
    public static CvHreg CV_REG_QUOTE;
    public static CvHreg CV_REG_PCDR3;
    public static CvHreg CV_REG_CR0;
    public static CvHreg CV_REG_DR0;
    public static CvHreg CV_REG_GDTR;
    public static CvHreg CV_REG_GDTL;
    public static CvHreg CV_REG_IDTR;
    public static CvHreg CV_REG_IDTL;
    public static CvHreg CV_REG_LDTR;
    public static CvHreg CV_REG_TR;
    public static CvHreg CV_REG_PSEUDO1;
    public static CvHreg CV_REG_ST0;
    public static CvHreg CV_REG_CTRL;
    public static CvHreg CV_REG_STAT;
    public static CvHreg CV_REG_TAG;
    public static CvHreg CV_REG_FPIP;
    public static CvHreg CV_REG_FPCS;
    public static CvHreg CV_REG_FPDO;
    public static CvHreg CV_REG_FPDS;
    public static CvHreg CV_REG_ISEM;
    public static CvHreg CV_REG_FPEIP;
    public static CvHreg CV_REG_FPEDO;
    public static CvHreg CV_REG_MM0;
    public static CvHreg CV_REG_XMM0;
    public static CvHreg CV_REG_XMM00;
    public static CvHreg CV_REG_XMM0L;
    public static CvHreg CV_REG_XMM0H;
    public static CvHreg CV_REG_MXCSR;
    public static CvHreg CV_REG_EDXEAX;
    public static CvHreg CV_REG_EMM0L;
    public static CvHreg CV_REG_EMM0H;
    public static CvHreg CV_REG_MM00;
    public static CvHreg CV_REG_MM01;
    public static CvHreg CV_REG_MM10;
    public static CvHreg CV_REG_MM11;
    public static CvHreg CV_REG_MM20;
    public static CvHreg CV_REG_MM21;
    public static CvHreg CV_REG_MM30;
    public static CvHreg CV_REG_MM31;
    public static CvHreg CV_REG_MM40;
    public static CvHreg CV_REG_MM41;
    public static CvHreg CV_REG_MM50;
    public static CvHreg CV_REG_MM51;
    public static CvHreg CV_REG_MM60;
    public static CvHreg CV_REG_MM61;
    public static CvHreg CV_REG_MM70;
    public static CvHreg CV_REG_MM71;
    public static CvHreg CV_R68_D0;
    public static CvHreg CV_R68_A0;
    public static CvHreg CV_R68_CCR;
    public static CvHreg CV_R68_SR;
    public static CvHreg CV_R68_USP;
    public static CvHreg CV_R68_MSP;
    public static CvHreg CV_R68_SFC;
    public static CvHreg CV_R68_DFC;
    public static CvHreg CV_R68_CACR;
    public static CvHreg CV_R68_VBR;
    public static CvHreg CV_R68_CAAR;
    public static CvHreg CV_R68_ISP;
    public static CvHreg CV_R68_PC;
    public static CvHreg CV_R68_FPCR;
    public static CvHreg CV_R68_FPSR;
    public static CvHreg CV_R68_FPIAR;
    public static CvHreg CV_R68_FP0;
    public static CvHreg CV_R68_MMUSR030;
    public static CvHreg CV_R68_MMUSR;
    public static CvHreg CV_R68_URP;
    public static CvHreg CV_R68_DTT0;
    public static CvHreg CV_R68_DTT1;
    public static CvHreg CV_R68_ITT0;
    public static CvHreg CV_R68_ITT1;
    public static CvHreg CV_R68_PSR;
    public static CvHreg CV_R68_PCSR;
    public static CvHreg CV_R68_VAL;
    public static CvHreg CV_R68_CRP;
    public static CvHreg CV_R68_SRP;
    public static CvHreg CV_R68_DRP;
    public static CvHreg CV_R68_TC;
    public static CvHreg CV_R68_AC;
    public static CvHreg CV_R68_SCC;
    public static CvHreg CV_R68_CAL;
    public static CvHreg CV_R68_TT0;
    public static CvHreg CV_R68_TT1;
    public static CvHreg CV_R68_BAD0;
    public static CvHreg CV_R68_BAC0;
    public static CvHreg CV_M4_NOREG;
    public static CvHreg CV_M4_IntZERO;
    public static CvHreg CV_M4_IntAT;
    public static CvHreg CV_M4_IntV0;
    public static CvHreg CV_M4_IntV1;
    public static CvHreg CV_M4_IntA0;
    public static CvHreg CV_M4_IntT0;
    public static CvHreg CV_M4_IntS0;
    public static CvHreg CV_M4_IntT8;
    public static CvHreg CV_M4_IntT9;
    public static CvHreg CV_M4_IntKT0;
    public static CvHreg CV_M4_IntKT1;
    public static CvHreg CV_M4_IntGP;
    public static CvHreg CV_M4_IntSP;
    public static CvHreg CV_M4_IntS8;
    public static CvHreg CV_M4_IntRA;
    public static CvHreg CV_M4_IntLO;
    public static CvHreg CV_M4_IntHI;
    public static CvHreg CV_M4_Fir;
    public static CvHreg CV_M4_Psr;
    public static CvHreg CV_M4_FltF0;
    public static CvHreg CV_M4_FltFsr;
    public static CvHreg CV_ALPHA_NOREG;
    public static CvHreg CV_ALPHA_FltF0;
    public static CvHreg CV_ALPHA_IntV0;
    public static CvHreg CV_ALPHA_IntT0;
    public static CvHreg CV_ALPHA_IntS0;
    public static CvHreg CV_ALPHA_IntFP;
    public static CvHreg CV_ALPHA_IntA0;
    public static CvHreg CV_ALPHA_IntT8;
    public static CvHreg CV_ALPHA_IntT9;
    public static CvHreg CV_ALPHA_IntT10;
    public static CvHreg CV_ALPHA_IntT11;
    public static CvHreg CV_ALPHA_IntRA;
    public static CvHreg CV_ALPHA_IntT12;
    public static CvHreg CV_ALPHA_IntAT;
    public static CvHreg CV_ALPHA_IntGP;
    public static CvHreg CV_ALPHA_IntSP;
    public static CvHreg CV_ALPHA_IntZERO;
    public static CvHreg CV_ALPHA_Fpcr;
    public static CvHreg CV_ALPHA_Fir;
    public static CvHreg CV_ALPHA_Psr;
    public static CvHreg CV_ALPHA_FltFsr;
    public static CvHreg CV_ALPHA_SoftFpcr;
    public static CvHreg CV_PPC_GPR0;
    public static CvHreg CV_PPC_CR;
    public static CvHreg CV_PPC_CR0;
    public static CvHreg CV_PPC_FPR0;
    public static CvHreg CV_PPC_FPSCR;
    public static CvHreg CV_PPC_MSR;
    public static CvHreg CV_PPC_SR0;
    public static CvHreg CV_SH3_NOREG;
    public static CvHreg CV_SH3_IntR0;
    public static CvHreg CV_SH3_IntFp;
    public static CvHreg CV_SH3_IntSp;
    public static CvHreg CV_SH3_Gbr;
    public static CvHreg CV_SH3_Pr;
    public static CvHreg CV_SH3_Mach;
    public static CvHreg CV_SH3_Macl;
    public static CvHreg CV_SH3_Pc;
    public static CvHreg CV_SH3_Sr;
    public static CvHreg CV_SH3_BarA;
    public static CvHreg CV_SH3_BasrA;
    public static CvHreg CV_SH3_BamrA;
    public static CvHreg CV_SH3_BbrA;
    public static CvHreg CV_SH3_BarB;
    public static CvHreg CV_SH3_BasrB;
    public static CvHreg CV_SH3_BamrB;
    public static CvHreg CV_SH3_BbrB;
    public static CvHreg CV_SH3_BdrB;
    public static CvHreg CV_SH3_BdmrB;
    public static CvHreg CV_SH3_Brcr;
    public static CvHreg CV_SH_Fpscr;
    public static CvHreg CV_SH_Fpul;
    public static CvHreg CV_SH_FpR0;
    public static CvHreg CV_SH_XFpR0;
    public static CvHreg CV_ARM_NOREG;
    public static CvHreg CV_ARM_R0;
    public static CvHreg CV_ARM_R1;
    public static CvHreg CV_ARM_R2;
    public static CvHreg CV_ARM_R3;
    public static CvHreg CV_ARM_R4;
    public static CvHreg CV_ARM_R5;
    public static CvHreg CV_ARM_R6;
    public static CvHreg CV_ARM_R7;
    public static CvHreg CV_ARM_R8;
    public static CvHreg CV_ARM_R9;
    public static CvHreg CV_ARM_R10;
    public static CvHreg CV_ARM_R11;
    public static CvHreg CV_ARM_R12;
    public static CvHreg CV_ARM_SP;
    public static CvHreg CV_ARM_LR;
    public static CvHreg CV_ARM_PC;
    public static CvHreg CV_ARM_CPSR;
    public static CvHreg CV_IA64_NOREG;
    public static CvHreg CV_IA64_Br0;
    public static CvHreg CV_IA64_P0;
    public static CvHreg CV_IA64_Preds;
    public static CvHreg CV_IA64_IntH0;
    public static CvHreg CV_IA64_Ip;
    public static CvHreg CV_IA64_Umask;
    public static CvHreg CV_IA64_Cfm;
    public static CvHreg CV_IA64_Psr;
    public static CvHreg CV_IA64_Nats;
    public static CvHreg CV_IA64_Nats2;
    public static CvHreg CV_IA64_Nats3;
    public static CvHreg CV_IA64_IntR0;
    public static CvHreg CV_IA64_FltF0;
    public static CvHreg CV_TRI_NOREG;
    public static CvHreg CV_TRI_D0;
    public static CvHreg CV_TRI_A0;
    public static CvHreg CV_TRI_E0;
    public static CvHreg CV_TRI_E2;
    public static CvHreg CV_TRI_E4;
    public static CvHreg CV_TRI_E6;
    public static CvHreg CV_TRI_E8;
    public static CvHreg CV_TRI_E10;
    public static CvHreg CV_TRI_E12;
    public static CvHreg CV_TRI_E14;
    public static CvHreg CV_TRI_EA0;
    public static CvHreg CV_TRI_EA2;
    public static CvHreg CV_TRI_EA4;
    public static CvHreg CV_TRI_EA6;
    public static CvHreg CV_TRI_EA8;
    public static CvHreg CV_TRI_EA10;
    public static CvHreg CV_TRI_EA12;
    public static CvHreg CV_TRI_EA14;
    public static CvHreg CV_AM33_NOREG;
    public static CvHreg CV_AM33_E0;
    public static CvHreg CV_AM33_A0;
    public static CvHreg CV_AM33_D0;
    public static CvHreg CV_AM33_FS0;
    public static CvHreg CV_M32R_NOREG;
    public static CvHreg CV_M32R_R0;
    public static CvHreg CV_M32R_R12;
    public static CvHreg CV_M32R_R13;
    public static CvHreg CV_M32R_R14;
    public static CvHreg CV_M32R_R15;
    public static CvHreg CV_M32R_PSW;
    public static CvHreg CV_M32R_CBR;
    public static CvHreg CV_M32R_SPI;
    public static CvHreg CV_M32R_SPU;
    public static CvHreg CV_M32R_SPO;
    public static CvHreg CV_M32R_BPC;
    public static CvHreg CV_M32R_ACHI;
    public static CvHreg CV_M32R_ACLO;
    public static CvHreg CV_M32R_PC;
    public static CvHreg CV_AMD64_AL;
    public static CvHreg CV_AMD64_CL;
    public static CvHreg CV_AMD64_DL;
    public static CvHreg CV_AMD64_BL;
    public static CvHreg CV_AMD64_AH;
    public static CvHreg CV_AMD64_CH;
    public static CvHreg CV_AMD64_DH;
    public static CvHreg CV_AMD64_BH;
    public static CvHreg CV_AMD64_AX;
    public static CvHreg CV_AMD64_CX;
    public static CvHreg CV_AMD64_DX;
    public static CvHreg CV_AMD64_BX;
    public static CvHreg CV_AMD64_SP;
    public static CvHreg CV_AMD64_BP;
    public static CvHreg CV_AMD64_SI;
    public static CvHreg CV_AMD64_DI;
    public static CvHreg CV_AMD64_EAX;
    public static CvHreg CV_AMD64_ECX;
    public static CvHreg CV_AMD64_EDX;
    public static CvHreg CV_AMD64_EBX;
    public static CvHreg CV_AMD64_ESP;
    public static CvHreg CV_AMD64_EBP;
    public static CvHreg CV_AMD64_ESI;
    public static CvHreg CV_AMD64_EDI;
    public static CvHreg CV_AMD64_ES;
    public static CvHreg CV_AMD64_CS;
    public static CvHreg CV_AMD64_SS;
    public static CvHreg CV_AMD64_DS;
    public static CvHreg CV_AMD64_FS;
    public static CvHreg CV_AMD64_GS;
    public static CvHreg CV_AMD64_FLAGS;
    public static CvHreg CV_AMD64_RIP;
    public static CvHreg CV_AMD64_EFLAGS;
    public static CvHreg CV_AMD64_RAX;
    public static CvHreg CV_AMD64_RBX;
    public static CvHreg CV_AMD64_RCX;
    public static CvHreg CV_AMD64_RDX;
    public static CvHreg CV_AMD64_RSI;
    public static CvHreg CV_AMD64_RDI;
    public static CvHreg CV_AMD64_RBP;
    public static CvHreg CV_AMD64_RSP;
    public static CvHreg CV_AMD64_R8;
    public static CvHreg CV_AMD64_R9;
    public static CvHreg CV_AMD64_R10;
    public static CvHreg CV_AMD64_R11;
    public static CvHreg CV_AMD64_R12;
    public static CvHreg CV_AMD64_R13;
    public static CvHreg CV_AMD64_R14;
    public static CvHreg CV_AMD64_R15;
    public static CvHreg CV_AMD64_R8B;
    public static CvHreg CV_AMD64_R9B;
    public static CvHreg CV_AMD64_R10B;
    public static CvHreg CV_AMD64_R11B;
    public static CvHreg CV_AMD64_R12B;
    public static CvHreg CV_AMD64_R13B;
    public static CvHreg CV_AMD64_R14B;
    public static CvHreg CV_AMD64_R15B;
    public static CvHreg CV_AMD64_R8W;
    public static CvHreg CV_AMD64_R9W;
    public static CvHreg CV_AMD64_R10W;
    public static CvHreg CV_AMD64_R11W;
    public static CvHreg CV_AMD64_R12W;
    public static CvHreg CV_AMD64_R13W;
    public static CvHreg CV_AMD64_R14W;
    public static CvHreg CV_AMD64_R15W;
    public static CvHreg CV_AMD64_R8D;
    public static CvHreg CV_AMD64_R9D;
    public static CvHreg CV_AMD64_R10D;
    public static CvHreg CV_AMD64_R11D;
    public static CvHreg CV_AMD64_R12D;
    public static CvHreg CV_AMD64_R13D;
    public static CvHreg CV_AMD64_R14D;
    public static CvHreg CV_AMD64_R15D;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.DataKind : Enum {
    public int value__;
    public static DataKind DataIsUnknown;
    public static DataKind DataIsLocal;
    public static DataKind DataIsStaticLocal;
    public static DataKind DataIsParam;
    public static DataKind DataIsObjectPtr;
    public static DataKind DataIsFileStatic;
    public static DataKind DataIsGlobal;
    public static DataKind DataIsMember;
    public static DataKind DataIsStaticMember;
    public static DataKind DataIsConstant;
}
[CoClassAttribute("Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.DiaSourceClass")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.DiaSource {
}
[GuidAttribute("3BFCEA48-620F-4B6B-81F7-B9AF75454C7D")]
[TypeLibTypeAttribute("2")]
[ClassInterfaceAttribute("0")]
public class Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.DiaSourceClass : object {
    [DispIdAttribute("1")]
public string lastError { get; }
    public virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public virtual void loadDataFromIStream(IStream pIStream);
    public virtual void loadDataFromPdb(string pdbPath);
    public virtual void openSession(IDiaSession& ppSession);
    public virtual void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte[] pbCvInfo, object pCallback);
    public virtual void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte[] pbMiscInfo, object pCallback);
    public sealed virtual string get_lastError();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaDataSource {
    public string lastError { get; }
    public abstract virtual string get_lastError();
    public abstract virtual void loadDataFromPdb(string pdbPath);
    public abstract virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public abstract virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public abstract virtual void loadDataFromIStream(IStream pIStream);
    public abstract virtual void openSession(IDiaSession& ppSession);
    public abstract virtual void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte[] pbCvInfo, object pCallback);
    public abstract virtual void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte[] pbMiscInfo, object pCallback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6d31cb3b-edd4-4c3e-ab44-12b9f7a3828e")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaDataSource2 {
    public string lastError { get; }
    public abstract virtual string get_lastError();
    public abstract virtual void loadDataFromPdb(string pdbPath);
    public abstract virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public abstract virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public abstract virtual void loadDataFromIStream(IStream pIStream);
    public abstract virtual void openSession(IDiaSession& ppSession);
    public abstract virtual void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte[] pbCvInfo, object pCallback);
    public abstract virtual void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte[] pbMiscInfo, object pCallback);
    public abstract virtual IntPtr GetRawPDBPtr();
    public abstract virtual void LoadDataFromRawPDBPtr(IntPtr ppdb);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("65a23c15-bab3-45da-8639-f06de86b9ea8")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaDataSource3 {
    public string lastError { get; }
    public abstract virtual string get_lastError();
    public abstract virtual void loadDataFromPdb(string pdbPath);
    public abstract virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public abstract virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public abstract virtual void loadDataFromIStream(IStream pIStream);
    public abstract virtual void openSession(IDiaSession& ppSession);
    public abstract virtual void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte[] pbCvInfo, object pCallback);
    public abstract virtual void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte[] pbMiscInfo, object pCallback);
    public abstract virtual IntPtr GetRawPDBPtr();
    public abstract virtual void LoadDataFromRawPDBPtr(IntPtr ppdb);
    public abstract virtual int GetStreamSize(string stream);
    public abstract virtual void GetStreamRawData(string stream, int cbRead, Byte[] pbData);
}
[GuidAttribute("9FC77A4B-3C1C-44ed-A798-6C1DEEA53E1F")]
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaEnumFrameData {
    public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaFrameData Item(object index);
    public abstract virtual void Next(UInt32 celt, IDiaFrameData& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumFrameData& ppenum);
    public abstract virtual IDiaFrameData FrameByRVA(int rva);
    public abstract virtual IDiaFrameData FrameByVA(long va);
}
[InterfaceTypeAttribute("1")]
[DefaultMemberAttribute("Item")]
[GuidAttribute("1C7FF653-51F7-457E-8419-B20F57EF7E4D")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaEnumInputAssemblyFiles {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaInputAssemblyFile Item(UInt32 index);
    public abstract virtual void Next(UInt32 celt, IDiaInputAssemblyFile& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual IDiaEnumInputAssemblyFiles Clone();
}
[GuidAttribute("FE30E878-54AC-44F1-81BA-39DE940F6052")]
[InterfaceTypeAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaEnumLineNumbers {
    public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaLineNumber Item(int index);
    public abstract virtual void Next(UInt32 celt, IDiaLineNumber& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumLineNumbers& ppenum);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("10F3DBD9-664F-4469-B808-9471C7A50538")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaEnumSourceFiles {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaSourceFile Item(int index);
    public abstract virtual void Next(UInt32 celt, IDiaSourceFile& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumSourceFiles& ppenum);
}
[GuidAttribute("ec9d461d-ce74-4711-a020-7d8f9a1dd255")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaEnumStackFrames {
    public abstract virtual int Next(int celt, IDiaStackFrame[] rgelt, Int32& pceltFetched);
    public abstract virtual void Reset();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CAB72C48-443B-48F5-9B0B-42F0820AB29A")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaEnumSymbols {
    public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaSymbol Item(int index);
    public abstract virtual void Next(UInt32 celt, IDiaSymbol& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumSymbols& ppenum);
}
[GuidAttribute("C65C2B0A-1150-4D7A-AFCC-E05BF3DEE81E")]
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaEnumTables {
    public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaTable Item(object index);
    public abstract virtual void Next(UInt32 celt, IDiaTable& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumTables& ppenum);
}
[GuidAttribute("A39184B7-6A36-42DE-8EEC-7DF9F3F59F33")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaFrameData {
    [DispIdAttribute("2")]
public UInt32 addressSection { get; }
    [DispIdAttribute("3")]
public UInt32 addressOffset { get; }
    [DispIdAttribute("4")]
public UInt32 relativeVirtualAddress { get; }
    [DispIdAttribute("5")]
public ulong virtualAddress { get; }
    [DispIdAttribute("6")]
public UInt32 lengthBlock { get; }
    [DispIdAttribute("7")]
public UInt32 lengthLocals { get; }
    [DispIdAttribute("8")]
public UInt32 lengthParams { get; }
    [DispIdAttribute("9")]
public UInt32 maxStack { get; }
    [DispIdAttribute("10")]
public UInt32 lengthProlog { get; }
    [DispIdAttribute("11")]
public UInt32 lengthSavedRegisters { get; }
    [DispIdAttribute("12")]
public string program { get; }
    [DispIdAttribute("13")]
public int systemExceptionHandling { get; }
    [DispIdAttribute("14")]
public int cplusplusExceptionHandling { get; }
    [DispIdAttribute("15")]
public int functionStart { get; }
    [DispIdAttribute("16")]
public int allocatesBasePointer { get; }
    [DispIdAttribute("17")]
public UInt32 type { get; }
    [DispIdAttribute("18")]
public IDiaFrameData functionParent { get; }
    public abstract virtual UInt32 get_addressSection();
    public abstract virtual UInt32 get_addressOffset();
    public abstract virtual UInt32 get_relativeVirtualAddress();
    public abstract virtual ulong get_virtualAddress();
    public abstract virtual UInt32 get_lengthBlock();
    public abstract virtual UInt32 get_lengthLocals();
    public abstract virtual UInt32 get_lengthParams();
    public abstract virtual UInt32 get_maxStack();
    public abstract virtual UInt32 get_lengthProlog();
    public abstract virtual UInt32 get_lengthSavedRegisters();
    public abstract virtual string get_program();
    public abstract virtual int get_systemExceptionHandling();
    public abstract virtual int get_cplusplusExceptionHandling();
    public abstract virtual int get_functionStart();
    public abstract virtual int get_allocatesBasePointer();
    public abstract virtual UInt32 get_type();
    public abstract virtual IDiaFrameData get_functionParent();
    public abstract virtual void execute(IDiaStackWalkFrame frame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3BFE56B0-390C-4863-9430-1F3D083B7684")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaInputAssemblyFile {
    [DispIdAttribute("1")]
public abstract virtual UInt32 GetUniqueId();
    [DispIdAttribute("2")]
public abstract virtual UInt32 GetIndex();
    [DispIdAttribute("3")]
public abstract virtual UInt32 GetTimeStamp();
    [DispIdAttribute("4")]
public abstract virtual int GetPdbAvailableAtILMerge();
    [DispIdAttribute("5")]
public abstract virtual string GetFileName();
    public abstract virtual void GetVersion(UInt32 cbData, UInt32& pcbData, Byte[] pbData);
}
[GuidAttribute("B388EB14-BE4D-421D-A8A1-6CF7AB057086")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaLineNumber {
    public IDiaSymbol Compiland { get; }
    public IDiaSourceFile SourceFile { get; }
    public int LineNumber { get; }
    public int LineNumberEnd { get; }
    public int ColumnNumber { get; }
    public int ColumnNumberEnd { get; }
    public int AddressSection { get; }
    public int AddressOffset { get; }
    public int RelativeVirtualAddress { get; }
    public long VirtualAddress { get; }
    public int Length { get; }
    public int SourceFileId { get; }
    public int Statement { get; }
    public int CompilandId { get; }
    public abstract virtual IDiaSymbol get_Compiland();
    public abstract virtual IDiaSourceFile get_SourceFile();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LineNumberEnd();
    public abstract virtual int get_ColumnNumber();
    public abstract virtual int get_ColumnNumberEnd();
    public abstract virtual int get_AddressSection();
    public abstract virtual int get_AddressOffset();
    public abstract virtual int get_RelativeVirtualAddress();
    public abstract virtual long get_VirtualAddress();
    public abstract virtual int get_Length();
    public abstract virtual int get_SourceFileId();
    public abstract virtual int get_Statement();
    public abstract virtual int get_CompilandId();
}
[GuidAttribute("C32ADB82-73F4-421b-95D5-A4706EDF5DBE")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaLoadCallback {
    public abstract virtual int NotifyDebugDir(bool fExecutable, int cbData, IntPtr pbData);
    public abstract virtual int NotifyOpenDBG(string dbgPath, int resultCode);
    public abstract virtual int NotifyOpenPDB(string pdbPath, int resultCode);
    public abstract virtual int RestrictRegistryAccess();
    public abstract virtual int RestrictSymbolServerAccess();
}
[GuidAttribute("6FC5D63F-011E-40C2-8DD2-E6486E9D6B68")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaSession {
    public ulong loadAddress { get; public set; }
    public IDiaSymbol globalScope { get; }
    public abstract virtual ulong get_loadAddress();
    public abstract virtual void set_loadAddress(ulong value);
    public abstract virtual IDiaSymbol get_globalScope();
    public abstract virtual void getEnumTables(IDiaEnumTables& ppEnumTables);
    public abstract virtual void getSymbolsByAddr(IntPtr& ppEnumbyAddr);
    public abstract virtual void findChildren(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenEx(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByAddr(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 isect, UInt32 offset, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByVA(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, ulong va, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByRVA(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void findSymbolByAddr(UInt32 isect, UInt32 offset, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void findSymbolByRVA(UInt32 rva, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void findSymbolByVA(long va, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void findSymbolByToken(UInt32 token, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void symsAreEquiv(IDiaSymbol symbolA, IDiaSymbol symbolB);
    public abstract virtual IDiaSymbol symbolById(UInt32 id);
    public abstract virtual void findSymbolByRVAEx(UInt32 rva, SymTagEnum symTag, IDiaSymbol& ppSymbol, Int32& displacement);
    public abstract virtual void findSymbolByVAEx(long va, SymTagEnum symTag, IDiaSymbol& ppSymbol, Int32& displacement);
    public abstract virtual void findFile(IDiaSymbol pCompiland, string name, NameSearchOptions compareFlags, IDiaEnumSourceFiles& ppResult);
    public abstract virtual void findFileById(UInt32 uniqueId, IDiaSourceFile& ppResult);
    public abstract virtual void findLines(IDiaSymbol compiland, IDiaSourceFile file, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByAddr(UInt32 seg, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByRVA(UInt32 rva, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByVA(long va, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByLinenum(IDiaSymbol compiland, IDiaSourceFile file, int linenum, int column, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInjectedSource(string srcFile, IntPtr& ppResult);
    public abstract virtual void getEnumDebugStreams(IntPtr& ppEnumDebugStreams);
    public abstract virtual void findInlineFramesByAddr(IDiaSymbol parent, UInt32 isect, UInt32 offset, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineFramesByRVA(IDiaSymbol parent, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineFramesByVA(IDiaSymbol parent, long va, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineeLines(IDiaSymbol parent, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByAddr(IDiaSymbol parent, UInt32 isect, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByRVA(IDiaSymbol parent, UInt32 rva, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByVA(IDiaSymbol parent, long va, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByLinenum(IDiaSymbol compiland, IDiaSourceFile file, UInt32 linenum, UInt32 column, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineesByName(string name, UInt32 option, IDiaEnumSymbols& ppResult);
    public abstract virtual void findAcceleratorInlineeLinesByLinenum(IDiaSymbol parent, IDiaSourceFile file, UInt32 linenum, UInt32 column, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findSymbolsForAcceleratorPointerTag(IDiaSymbol parent, UInt32 tagValue, IDiaEnumSymbols& ppResult);
    public abstract virtual void findSymbolsByRVAForAcceleratorPointerTag(IDiaSymbol parent, UInt32 tagValue, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void findAcceleratorInlineesByName(string name, UInt32 option, IDiaEnumSymbols& ppResult);
    public abstract virtual void addressForVA(long va, UInt32& pISect, UInt32& pOffset);
    public abstract virtual void addressForRVA(UInt32 rva, UInt32& pISect, UInt32& pOffset);
    public abstract virtual void findILOffsetsByAddr(UInt32 isect, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findILOffsetsByRVA(UInt32 rva, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findILOffsetsByVA(ulong va, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInputAssemblyFiles(IDiaEnumInputAssemblyFiles& ppResult);
    public abstract virtual void findInputAssembly(UInt32 index, IDiaInputAssemblyFile& ppResult);
    public abstract virtual void findInputAssemblyById(UInt32 uniqueId, IDiaInputAssemblyFile& ppResult);
    public abstract virtual void getFuncMDTokenMapSize(UInt32& pcb);
    public abstract virtual void getFuncMDTokenMap(UInt32 cb, UInt32& pcb, Byte[] pb);
    public abstract virtual void getTypeMDTokenMapSize(UInt32& pcb);
    public abstract virtual void getTypeMDTokenMap(UInt32 cb, UInt32& pcb, Byte[] pb);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A2EF5353-F5A8-4EB3-90D2-CB526ACB3CDD")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaSourceFile {
    public int UniqueId { get; }
    public string FileName { get; }
    public int ChecksumType { get; }
    public IDiaEnumSymbols Compilands { get; }
    public abstract virtual int get_UniqueId();
    public abstract virtual string get_FileName();
    public abstract virtual int get_ChecksumType();
    public abstract virtual IDiaEnumSymbols get_Compilands();
    public abstract virtual void GetChecksum(int cbData, Int32& pcbData, Byte[] pbData);
}
[GuidAttribute("5edbc96d-cdd6-4792-afbe-cc89007d9610")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaStackFrame {
    public abstract virtual int GetType();
    public abstract virtual long GetBase();
    public abstract virtual int GetSize();
    public abstract virtual long GetReturnAddress();
    public abstract virtual long GetLocalsBase();
    public abstract virtual int GetLengthLocals();
    public abstract virtual int GetLengthParams();
    public abstract virtual int GetLengthProlog();
    public abstract virtual int GetLengthSavedRegisters();
    public abstract virtual bool HasSystemExceptionHandling();
    public abstract virtual bool HasCPlusPlusExceptionHandling();
    public abstract virtual bool IsFunctionStart();
    public abstract virtual bool AllocatesBasePointer();
    public abstract virtual int GetMaxStack();
}
[GuidAttribute("5485216b-a54c-469f-9670-52b24d5229bb")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaStackWalker {
    public abstract virtual IDiaEnumStackFrames GetEnumFrames(IDiaStackWalkHelper helper);
    public abstract virtual IDiaEnumStackFrames GetEnumFrames2(CvCpuType cpuid, IDiaStackWalkHelper helper);
}
[GuidAttribute("7c185885-a015-4cac-9411-0f4fb39b1f3a")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaStackWalker2 {
}
[GuidAttribute("97F0F1A6-E04E-4EA4-B4F9-B0D0E8D90F5D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaStackWalkFrame {
    public abstract virtual ulong GetRegisterValue(CvHreg register);
    public abstract virtual int PutRegisterValue(CvHreg register, long newValue);
    public abstract virtual int ReadMemory(ulong va, UInt32 cbData, UInt32& pcbData, Byte[] pbData);
    public abstract virtual int SearchForReturnAddress(IDiaFrameData frame, UInt64& returnAddress);
    public abstract virtual int searchForReturnAddressStart(IDiaFrameData frame, ulong startAddress, UInt64& returnAddress);
}
[GuidAttribute("21F81B1B-C5BB-42A3-BC4F-CCBAA75B9F19")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaStackWalkHelper {
    public abstract virtual int GetRegisterValue(CvHreg register, Int64& registerValue);
    public abstract virtual int PutRegisterValue(CvHreg register, long registerValue);
    public abstract virtual int ReadMemory(MemoryTypeEnum type, long va, int cbData, Int32& pcbData, Byte[] pbData);
    public abstract virtual int SearchForReturnAddress(IDiaFrameData frame, Int64& address);
    public abstract virtual int SearchForReturnAddress(IDiaFrameData frame, long startAddress, Int64& returnAddress);
    public abstract virtual int FrameForVA(long va, IDiaFrameData& frame);
    public abstract virtual int SymbolForVA(long va, IDiaSymbol& symbol);
    public abstract virtual int PDataForVA(long va, int cbData, Int32& pcbData, Byte[] data);
    public abstract virtual int ImageForVA(long va, Int64& imageStart);
    public abstract virtual int AddressForVA(long va, UInt32& pISect, UInt32& pOffset);
    public abstract virtual int numberOfFunctionFragmentsForVA(ulong vaFunc, int cbFunc, Int32& pNumFragments);
    public abstract virtual int functionFragmentsForVA(ulong vaFunc, int cbFunc, int cFragments, UInt64& pVaFragment, Int32& pLenFragment);
}
[GuidAttribute("CB787B2F-BD6C-4635-BA52-933126BD2DCD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaSymbol {
    [DispIdAttribute("0")]
public abstract virtual UInt32 GetSymIndexId();
    [DispIdAttribute("1")]
public abstract virtual SymTagEnum GetSymTag();
    [DispIdAttribute("2")]
public abstract virtual string GetName();
    [DispIdAttribute("3")]
public abstract virtual IDiaSymbol GetLexicalParent();
    [DispIdAttribute("4")]
public abstract virtual IDiaSymbol GetClassParent();
    [DispIdAttribute("5")]
public abstract virtual IDiaSymbol GetType();
    [DispIdAttribute("6")]
public abstract virtual DataKind GetDataKind();
    [DispIdAttribute("7")]
public abstract virtual LocationType GetLocationType();
    [DispIdAttribute("8")]
public abstract virtual UInt32 GetAddressSection();
    [DispIdAttribute("9")]
public abstract virtual UInt32 GetAddressOffset();
    [DispIdAttribute("10")]
public abstract virtual UInt32 GetRelativeVirtualAddress();
    [DispIdAttribute("11")]
public abstract virtual long GetVirtualAddress();
    [DispIdAttribute("12")]
public abstract virtual CvHreg GetRegisterId();
    [DispIdAttribute("13")]
public abstract virtual int GetOffset();
    [DispIdAttribute("14")]
public abstract virtual ulong GetLength();
    [DispIdAttribute("15")]
public abstract virtual HResult GetSlot(Int32& slotIndex);
    [DispIdAttribute("16")]
public abstract virtual bool GetVolatileType();
    [DispIdAttribute("17")]
public abstract virtual bool GetConstType();
    [DispIdAttribute("18")]
public abstract virtual bool GetUnalignedType();
    [DispIdAttribute("19")]
public abstract virtual UInt32 GetAccess();
    [DispIdAttribute("20")]
public abstract virtual string GetLibraryName();
    [DispIdAttribute("21")]
public abstract virtual UInt32 GetPlatform();
    [DispIdAttribute("22")]
public abstract virtual UInt32 GetLanguage();
    [DispIdAttribute("23")]
public abstract virtual bool GetEditAndContinueEnabled();
    [DispIdAttribute("24")]
public abstract virtual UInt32 GetFrontEndMajor();
    [DispIdAttribute("25")]
public abstract virtual UInt32 GetFrontEndMinor();
    [DispIdAttribute("26")]
public abstract virtual UInt32 GetFrontEndBuild();
    [DispIdAttribute("27")]
public abstract virtual UInt32 GetBackEndMajor();
    [DispIdAttribute("28")]
public abstract virtual UInt32 GetBackEndMinor();
    [DispIdAttribute("29")]
public abstract virtual UInt32 GetBackEndBuild();
    [DispIdAttribute("30")]
public abstract virtual string GetSourceFileName();
    [DispIdAttribute("31")]
public abstract virtual string GetUnused();
    [DispIdAttribute("32")]
public abstract virtual UInt32 GetThunkOrdinal();
    [DispIdAttribute("33")]
public abstract virtual int GetThisAdjust();
    [DispIdAttribute("34")]
public abstract virtual UInt32 GetVirtualBaseOffset();
    [DispIdAttribute("35")]
public abstract virtual bool GetVirtual();
    [DispIdAttribute("36")]
public abstract virtual bool GetIntro();
    [DispIdAttribute("37")]
public abstract virtual bool GetPure();
    [DispIdAttribute("38")]
public abstract virtual UInt32 GetCallingConvention();
    [DispIdAttribute("39")]
public abstract virtual object GetValue();
    [DispIdAttribute("40")]
public abstract virtual BasicType GetBaseType();
    [DispIdAttribute("41")]
public abstract virtual UInt32 GetToken();
    [DispIdAttribute("42")]
public abstract virtual UInt32 GetTimeStamp();
    [DispIdAttribute("43")]
public abstract virtual Guid GetGuid();
    [DispIdAttribute("44")]
public abstract virtual string GetSymbolsFileName();
    [DispIdAttribute("46")]
public abstract virtual bool GetReference();
    [DispIdAttribute("47")]
public abstract virtual int GetCount();
    [DispIdAttribute("49")]
public abstract virtual int GetBitPosition();
    [DispIdAttribute("50")]
public abstract virtual IDiaSymbol GetArrayIndexType();
    [DispIdAttribute("51")]
public abstract virtual bool GetPacked();
    [DispIdAttribute("52")]
public abstract virtual bool GetConstructor();
    [DispIdAttribute("53")]
public abstract virtual bool GetOverloadedOperator();
    [DispIdAttribute("54")]
public abstract virtual bool GetNested();
    [DispIdAttribute("55")]
public abstract virtual bool GetHasNestedTypes();
    [DispIdAttribute("56")]
public abstract virtual bool GetHasAssignmentOperator();
    [DispIdAttribute("57")]
public abstract virtual bool GetHasCastOperator();
    [DispIdAttribute("58")]
public abstract virtual bool GetScoped();
    [DispIdAttribute("59")]
public abstract virtual bool GetVirtualBaseClass();
    [DispIdAttribute("60")]
public abstract virtual bool GetIndirectVirtualBaseClass();
    [DispIdAttribute("61")]
public abstract virtual int GetVirtualBasePointerOffset();
    [DispIdAttribute("62")]
public abstract virtual IDiaSymbol GetVirtualTableShape();
    [DispIdAttribute("64")]
public abstract virtual UInt32 GetLexicalParentId();
    [DispIdAttribute("65")]
public abstract virtual UInt32 GetClassParentId();
    [DispIdAttribute("66")]
public abstract virtual UInt32 GetTypeId();
    [DispIdAttribute("67")]
public abstract virtual UInt32 GetArrayIndexTypeId();
    [DispIdAttribute("68")]
public abstract virtual UInt32 GetVirtualTableShapeId();
    [DispIdAttribute("69")]
public abstract virtual bool GetCode();
    [DispIdAttribute("70")]
public abstract virtual bool GetFunction();
    [DispIdAttribute("71")]
public abstract virtual bool GetManaged();
    [DispIdAttribute("72")]
public abstract virtual bool GetMsil();
    [DispIdAttribute("73")]
public abstract virtual UInt32 GetVirtualBaseDispIndex();
    [DispIdAttribute("74")]
public abstract virtual string GetUndecoratedName();
    [DispIdAttribute("75")]
public abstract virtual UInt32 GetAge();
    [DispIdAttribute("76")]
public abstract virtual UInt32 GetSignature();
    [DispIdAttribute("77")]
public abstract virtual bool GetCompilerGenerated();
    [DispIdAttribute("78")]
public abstract virtual bool GetAddressTaken();
    [DispIdAttribute("79")]
public abstract virtual UInt32 GetRank();
    [DispIdAttribute("80")]
public abstract virtual IDiaSymbol GetLowerBound();
    [DispIdAttribute("81")]
public abstract virtual IDiaSymbol GetUpperBound();
    [DispIdAttribute("82")]
public abstract virtual UInt32 GetLowerBoundId();
    [DispIdAttribute("83")]
public abstract virtual UInt32 GetUpperBoundId();
    public abstract virtual int GetDataBytes(int cbData, Int32& pcbData, Byte[] data);
    public abstract virtual IDiaEnumSymbols FindChildren(SymTagEnum symTag, string name, UInt32 compareFlags);
    public abstract virtual IDiaEnumSymbols FindChildrenEx(SymTagEnum symTag, string name, UInt32 compareFlags);
    public abstract virtual IDiaEnumSymbols FindChildrenExByAddr(SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 isect, UInt32 offset);
    public abstract virtual IDiaEnumSymbols FindChildrenExByVA(SymTagEnum symTag, string name, UInt32 compareFlags, ulong va);
    public abstract virtual IDiaEnumSymbols FindChildrenExByRVA(SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 rva);
    [DispIdAttribute("84")]
public abstract virtual UInt32 GetTargetSection();
    [DispIdAttribute("85")]
public abstract virtual UInt32 GetTargetOffset();
    [DispIdAttribute("86")]
public abstract virtual UInt32 GetTargetRelativeVirtualAddress();
    [DispIdAttribute("87")]
public abstract virtual ulong GetTargetVirtualAddress();
    [DispIdAttribute("88")]
public abstract virtual UInt32 GetMachineType();
    [DispIdAttribute("89")]
public abstract virtual UInt32 GetOemId();
    [DispIdAttribute("90")]
public abstract virtual UInt32 GetOemSymbolId();
    public abstract virtual void GetTypes(int cTypes, Int32& pcTypes, IDiaSymbol[] pTypes);
    public abstract virtual void GetTypeIds(int cTypeIds, Int32& pcTypeIds, Int32[] pdwTypeIds);
    [DispIdAttribute("91")]
public abstract virtual IDiaSymbol GetObjectPointerType();
    [DispIdAttribute("92")]
public abstract virtual int GetUdtKind();
    public abstract virtual string GetUndecoratedNameEx(UndName undecorateOptions);
    [DispIdAttribute("93")]
public abstract virtual bool GetNoReturn();
    [DispIdAttribute("94")]
public abstract virtual bool GetCustomCallingConvention();
    [DispIdAttribute("95")]
public abstract virtual bool GetNoInline();
    [DispIdAttribute("96")]
public abstract virtual bool GetOptimizedCodeDebugInfo();
    [DispIdAttribute("97")]
public abstract virtual bool GetNotReached();
    [DispIdAttribute("98")]
public abstract virtual bool GetInterruptReturn();
    [DispIdAttribute("99")]
public abstract virtual bool GetFarReturn();
    [DispIdAttribute("100")]
public abstract virtual bool GetIsStatic();
    [DispIdAttribute("101")]
public abstract virtual bool GetHasDebugInfo();
    [DispIdAttribute("102")]
public abstract virtual bool GetIsLTCG();
    [DispIdAttribute("103")]
public abstract virtual bool GetIsDataAligned();
    [DispIdAttribute("104")]
public abstract virtual bool GetHasSecurityChecks();
    [DispIdAttribute("105")]
public abstract virtual string GetCompilerName();
    [DispIdAttribute("106")]
public abstract virtual bool GetHasAlloca();
    [DispIdAttribute("107")]
public abstract virtual bool GetHasSetJump();
    [DispIdAttribute("108")]
public abstract virtual bool GetHasLongJump();
    [DispIdAttribute("109")]
public abstract virtual bool GetHasInlAsm();
    [DispIdAttribute("110")]
public abstract virtual bool GetHasEH();
    [DispIdAttribute("111")]
public abstract virtual bool GetHasSEH();
    [DispIdAttribute("112")]
public abstract virtual bool GetHasEHa();
    [DispIdAttribute("113")]
public abstract virtual bool GetIsNaked();
    [DispIdAttribute("114")]
public abstract virtual bool GetIsAggregated();
    [DispIdAttribute("115")]
public abstract virtual bool GetIsSplitted();
    [DispIdAttribute("116")]
public abstract virtual IDiaSymbol GetContainer();
    [DispIdAttribute("117")]
public abstract virtual bool GetInlSpec();
    [DispIdAttribute("118")]
public abstract virtual bool GetNoStackOrdering();
    [DispIdAttribute("119")]
public abstract virtual IDiaSymbol GetVirtualBaseTableType();
    [DispIdAttribute("120")]
public abstract virtual bool GetHasManagedCode();
    [DispIdAttribute("289")]
public abstract virtual bool GetIsHotpatchable();
    [DispIdAttribute("122")]
public abstract virtual bool GetIsCVTCIL();
    [DispIdAttribute("123")]
public abstract virtual bool GetIsMSILNetmodule();
    [DispIdAttribute("124")]
public abstract virtual bool GetIsCTypes();
    [DispIdAttribute("125")]
public abstract virtual bool GetIsStripped();
    [DispIdAttribute("126")]
public abstract virtual UInt32 GetFrontEndQFE();
    [DispIdAttribute("127")]
public abstract virtual UInt32 GetBackEndQFE();
    [DispIdAttribute("128")]
public abstract virtual bool GetWasInlined();
    [DispIdAttribute("129")]
public abstract virtual bool GetStrictGSCheck();
    [DispIdAttribute("130")]
public abstract virtual bool GetIsCxxReturnUdt();
    [DispIdAttribute("131")]
public abstract virtual bool GetIsConstructorVirtualBase();
    [DispIdAttribute("132")]
public abstract virtual bool GetRValueReference();
    [DispIdAttribute("133")]
public abstract virtual IDiaSymbol GetUnmodifiedType();
    [DispIdAttribute("134")]
public abstract virtual bool GetFramePointerPresent();
    [DispIdAttribute("135")]
public abstract virtual bool GetHasEnhancedSecurityChecks();
    [DispIdAttribute("136")]
public abstract virtual bool GetIsSafeBuffers();
    [DispIdAttribute("137")]
public abstract virtual bool GetIntrinsic();
    [DispIdAttribute("138")]
public abstract virtual bool GetSealed();
    [DispIdAttribute("139")]
public abstract virtual bool GetHfaFloat();
    [DispIdAttribute("140")]
public abstract virtual bool GetHfaDouble();
    [DispIdAttribute("141")]
public abstract virtual UInt32 GetLiveRangeStartAddressSection();
    [DispIdAttribute("142")]
public abstract virtual UInt32 GetLiveRangeStartAddressOffset();
    [DispIdAttribute("143")]
public abstract virtual UInt32 GetLiveRangeStartRelativeVirtualAddress();
    [DispIdAttribute("144")]
public abstract virtual UInt32 GetCountLiveRanges();
    [DispIdAttribute("145")]
public abstract virtual ulong GetLiveRangeLength();
    [DispIdAttribute("146")]
public abstract virtual int GetOffsetInUdt();
    [DispIdAttribute("147")]
public abstract virtual UInt32 GetParamBasePointerRegisterId();
    [DispIdAttribute("148")]
public abstract virtual UInt32 GetLocalBasePointerRegisterId();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("4A59FB77-ABAC-469B-A30B-9ECC85BFEF14")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IDiaTable {
    [DispIdAttribute("1")]
public string name { get; }
    [DispIdAttribute("2")]
public int count { get; }
    public abstract virtual void RemoteNext(UInt32 celt, Object& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumUnknown& ppenum);
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual string get_name();
    public abstract virtual int get_count();
    public abstract virtual object Item(UInt32 index);
}
[GuidAttribute("00000100-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.IEnumUnknown {
    public abstract virtual void RemoteNext(UInt32 celt, Object& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumUnknown& ppenum);
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.LocationType : Enum {
    public int value__;
    public static LocationType LocIsNull;
    public static LocationType LocIsStatic;
    public static LocationType LocIsTLS;
    public static LocationType LocIsRegRel;
    public static LocationType LocIsThisRel;
    public static LocationType LocIsEnregistered;
    public static LocationType LocIsBitField;
    public static LocationType LocIsSlot;
    public static LocationType LocIsIlRel;
    public static LocationType LocInMetaData;
    public static LocationType LocIsConstant;
    public static LocationType LocTypeMax;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.MemoryTypeEnum : Enum {
    public int value__;
    public static MemoryTypeEnum MemTypeCode;
    public static MemoryTypeEnum MemTypeData;
    public static MemoryTypeEnum MemTypeStack;
    public static MemoryTypeEnum MemTypeCodeOnHeap;
    public static MemoryTypeEnum MemTypeJittedCodePriv;
    public static MemoryTypeEnum MemTypeAny;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.NameSearchOptions : Enum {
    public int value__;
    public static NameSearchOptions nsNone;
    public static NameSearchOptions nsfCaseSensitive;
    public static NameSearchOptions nsfCaseInsensitive;
    public static NameSearchOptions nsfFNameExt;
    public static NameSearchOptions nsfRegularExpression;
    public static NameSearchOptions nsfUndecoratedName;
    public static NameSearchOptions nsCaseSensitive;
    public static NameSearchOptions nsCaseInsensitive;
    public static NameSearchOptions nsFNameExt;
    public static NameSearchOptions nsRegularExpression;
    public static NameSearchOptions nsCaseInRegularExpression;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.SymTagEnum : Enum {
    public int value__;
    public static SymTagEnum SymTagNull;
    public static SymTagEnum SymTagExe;
    public static SymTagEnum SymTagCompiland;
    public static SymTagEnum SymTagCompilandDetails;
    public static SymTagEnum SymTagCompilandEnv;
    public static SymTagEnum SymTagFunction;
    public static SymTagEnum SymTagBlock;
    public static SymTagEnum SymTagData;
    public static SymTagEnum SymTagAnnotation;
    public static SymTagEnum SymTagLabel;
    public static SymTagEnum SymTagPublicSymbol;
    public static SymTagEnum SymTagUDT;
    public static SymTagEnum SymTagEnum;
    public static SymTagEnum SymTagFunctionType;
    public static SymTagEnum SymTagPointerType;
    public static SymTagEnum SymTagArrayType;
    public static SymTagEnum SymTagBaseType;
    public static SymTagEnum SymTagTypedef;
    public static SymTagEnum SymTagBaseClass;
    public static SymTagEnum SymTagFriend;
    public static SymTagEnum SymTagFunctionArgType;
    public static SymTagEnum SymTagFuncDebugStart;
    public static SymTagEnum SymTagFuncDebugEnd;
    public static SymTagEnum SymTagUsingNamespace;
    public static SymTagEnum SymTagVTableShape;
    public static SymTagEnum SymTagVTable;
    public static SymTagEnum SymTagCustom;
    public static SymTagEnum SymTagThunk;
    public static SymTagEnum SymTagCustomType;
    public static SymTagEnum SymTagManagedType;
    public static SymTagEnum SymTagDimension;
    public static SymTagEnum SymTagCallSite;
    public static SymTagEnum SymTagInlineSite;
    public static SymTagEnum SymTagBaseInterface;
    public static SymTagEnum SymTagVectorType;
    public static SymTagEnum SymTagMatrixType;
    public static SymTagEnum SymTagHLSLType;
    public static SymTagEnum SymTagMax;
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.MdbgEngine.DIA.NativeApi.UndName : Enum {
    public int value__;
    public static UndName Complete;
    public static UndName NoLeadingUnderscores;
    public static UndName NoMsKeywords;
    public static UndName NoFunctionReturns;
    public static UndName NoAllocationModel;
    public static UndName NoAllocationLanguage;
    public static UndName NoMsThisType;
    public static UndName NoCvThisType;
    public static UndName NoThisType;
    public static UndName NoAccessSpecifiers;
    public static UndName NoThrowSignatures;
    public static UndName NoMemberType;
    public static UndName NoReturnUdtModel;
    public static UndName Decode32Bit;
    public static UndName NameOnly;
    public static UndName NoArguments;
    public static UndName NoSpecialSyms;
    public static UndName NoEcsu;
    public static UndName NoIdentCharCheck;
    public static UndName NoPtr64;
    public static UndName NoEllipsis;
}
[ExtensionAttribute]
public static class Microsoft.Samples.Debugging.MdbgEngine.DIA.PrettyPrintEnums : object {
    private static String[] X86Registers;
    private static String[] ARMRegisters;
    private static String[] AMD64Registers;
    private static String[] AMD64RegistersHigh;
    private static PrettyPrintEnums();
    [ExtensionAttribute]
public static string GetFriendlyName(CvHreg registerId, ProcessorArchitecture arch);
    [ExtensionAttribute]
public static string GetFriendlyName(LocationType lt);
}
internal static class Microsoft.Samples.Debugging.MdbgEngine.DIA.PrimitiveHelpers : object {
    public static string GetBasicTypeName(BasicType basicType);
    public static int GetBasicTypeSize(BasicType basicType);
}
public class Microsoft.Samples.Debugging.MdbgEngine.DirectoryEntry : ValueType {
    public int RelativeVirtualAddress;
    public UInt32 Size;
}
internal class Microsoft.Samples.Debugging.MdbgEngine.ExportDirectory : ValueType {
    public UInt32 ExportFlags;
    public UInt32 DateTimeStamp;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public UInt32 NameRva;
    public UInt32 OrdinalBase;
    public UInt32 AddressTablesEntries;
    public UInt32 NumberNamePointers;
    public UInt32 ExportAddressTableRva;
    public UInt32 NamePointerRva;
    public UInt32 OrdinalTableRva;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.GetRuntimeFunctionEntryResult : Enum {
    public int value__;
    public static GetRuntimeFunctionEntryResult Found;
    public static GetRuntimeFunctionEntryResult DoesNotExist;
    public static GetRuntimeFunctionEntryResult MissingMemory;
}
internal enum Microsoft.Samples.Debugging.MdbgEngine.ImageDebugType : Enum {
    public UInt32 value__;
    public static ImageDebugType Unknown;
    public static ImageDebugType Coff;
    public static ImageDebugType CodeView;
    public static ImageDebugType Fpo;
    public static ImageDebugType Misc;
    public static ImageDebugType Exception;
    public static ImageDebugType Fixup;
    public static ImageDebugType Borland;
}
public class Microsoft.Samples.Debugging.MdbgEngine.ImageImportDescriptor : object {
    public static UInt32 Size;
    [CompilerGeneratedAttribute]
private UInt32 <Characteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginalFirstThunk>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TimeDateStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ForwarderChain>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FirstThunk>k__BackingField;
    public UInt32 Characteristics { get; private set; }
    public UInt32 OriginalFirstThunk { get; private set; }
    public UInt32 TimeDateStamp { get; private set; }
    public UInt32 ForwarderChain { get; private set; }
    public UInt32 Name { get; private set; }
    public UInt32 FirstThunk { get; private set; }
    public ImageImportDescriptor(BinaryReader br);
    [CompilerGeneratedAttribute]
public UInt32 get_Characteristics();
    [CompilerGeneratedAttribute]
private void set_Characteristics(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginalFirstThunk();
    [CompilerGeneratedAttribute]
private void set_OriginalFirstThunk(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TimeDateStamp();
    [CompilerGeneratedAttribute]
private void set_TimeDateStamp(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ForwarderChain();
    [CompilerGeneratedAttribute]
private void set_ForwarderChain(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_FirstThunk();
    [CompilerGeneratedAttribute]
private void set_FirstThunk(UInt32 value);
}
public interface Microsoft.Samples.Debugging.MdbgEngine.IModuleReader {
    public PEStreamFormat Format { get; }
    public int Size { get; }
    public abstract virtual int ReadAtOffset(Byte[] fileBytes, int offset);
    public abstract virtual PEStreamFormat get_Format();
    public abstract virtual int get_Size();
}
public class Microsoft.Samples.Debugging.MdbgEngine.OptionalHeaderDirectoryEntries : ValueType {
    public DirectoryEntry ExportTableDirectory;
    public DirectoryEntry ImportTableDirectory;
    public DirectoryEntry ResourceTableDirectory;
    public DirectoryEntry ExceptionTableDirectory;
    public DirectoryEntry CertificateTableDirectory;
    public DirectoryEntry BaseRelocationTableDirectory;
    public DirectoryEntry DebugTableDirectory;
    public DirectoryEntry CopyrightTableDirectory;
    public DirectoryEntry GlobalPointerTableDirectory;
    public DirectoryEntry ThreadLocalStorageTableDirectory;
    public DirectoryEntry LoadConfigTableDirectory;
    public DirectoryEntry BoundImportTableDirectory;
    public DirectoryEntry ImportAddressTableDirectory;
    public DirectoryEntry DelayImportTableDirectory;
    public DirectoryEntry COR20HeaderTableDirectory;
    public DirectoryEntry ReservedDirectory;
}
public class Microsoft.Samples.Debugging.MdbgEngine.OptionalHeaderStandardFields : ValueType {
    public PEMagic PEMagic;
    public byte MajorLinkerVersion;
    public byte MinorLinkerVersion;
    public int SizeOfCode;
    public int SizeOfInitializedData;
    public int SizeOfUninitializedData;
    public int RVAOfEntryPoint;
    public int BaseOfCode;
    public int BaseOfData;
}
public class Microsoft.Samples.Debugging.MdbgEngine.PEExport : ValueType {
    public string Name;
    public int Ordinal;
    public int Rva;
}
internal static class Microsoft.Samples.Debugging.MdbgEngine.PEFileConstants : object {
    internal static ushort DosSignature;
    internal static int PESignatureOffsetLocation;
    internal static UInt32 PESignature;
    internal static int BasicPEHeaderSize;
    internal static int SizeofCOFFFileHeader;
    internal static int SizeofOptionalHeaderStandardFields32;
    internal static int SizeofOptionalHeaderStandardFields64;
    internal static int SizeofOptionalHeaderNTAdditionalFields32;
    internal static int SizeofOptionalHeaderNTAdditionalFields64;
    internal static int NumberofOptionalHeaderDirectoryEntries;
    internal static int SizeofOptionalHeaderDirectoriesEntries;
    internal static int SizeofSectionHeader;
    internal static int SizeofSectionName;
    internal static int SizeofResourceDirectory;
    internal static int SizeofResourceDirectoryEntry;
    internal static int SizeofDebugDirectory;
    internal static int CodeViewSignature;
}
public enum Microsoft.Samples.Debugging.MdbgEngine.PEMagic : Enum {
    public ushort value__;
    public static PEMagic PEMagic32;
    public static PEMagic PEMagic64;
}
public class Microsoft.Samples.Debugging.MdbgEngine.PEReader : object {
    private IModuleReader m_peReader;
    private int peHeaderOffset;
    private int optionalHeaderDirectoryEntriesOffset;
    private Nullable`1<COFFFileHeader> coffHeader;
    private Nullable`1<OptionalHeaderDirectoryEntries> optionalHeaderDirectoryEntries;
    private SectionHeader[] sectionHeaders;
    private Nullable`1<COR20Header> cor20header;
    private CodeViewDebugData codeViewDebugData;
    private RuntimeFunctionEntry[] m_pData;
    public int TimeStamp { get; }
    public int SizeOfImage { get; }
    private int PEHeaderOffset { get; }
    private int OptionalHeaderDirectoryEntriesOffset { get; }
    private int SectionHeadersOffset { get; }
    public COFFFileHeader COFFFileHeader { get; }
    public OptionalHeaderDirectoryEntries OptionalHeaderDirectoryEntries { get; }
    public SectionHeader[] SectionHeaders { get; }
    public COR20Header Cor20Header { get; }
    public CodeViewDebugData CodeViewDebugData { get; }
    private RuntimeFunctionEntry[] PData { get; }
    public bool IsManagedBinary { get; }
    public PEReader(IModuleReader peReader);
    public PEReader(Stream peFileStream);
    public int get_TimeStamp();
    public int get_SizeOfImage();
    private int get_PEHeaderOffset();
    private int get_OptionalHeaderDirectoryEntriesOffset();
    private int get_SectionHeadersOffset();
    public COFFFileHeader get_COFFFileHeader();
    public OptionalHeaderDirectoryEntries get_OptionalHeaderDirectoryEntries();
    public SectionHeader[] get_SectionHeaders();
    public COR20Header get_Cor20Header();
    private COFFFileHeader ReadCOFFFileHeader();
    private OptionalHeaderStandardFields ReadOptionalHeaderStandardFields32();
    private OptionalHeaderStandardFields ReadOptionalHeaderStandardFields64();
    private OptionalHeaderDirectoryEntries ReadOptionalHeaderDirectoryEntries();
    private List`1<DebugDirectory> ReadDebugDirectories();
    private CodeViewDebugData ReadCodeViewDebugData(DebugDirectory debugDir);
    public CodeViewDebugData get_CodeViewDebugData();
    private RuntimeFunctionEntry[] get_PData();
    public GetRuntimeFunctionEntryResult GetRuntimeFunctionEntry(int functionRVA, RuntimeFunctionEntry& entry);
    private COR20Header ReadCOR20Header();
    public PEExport[] ReadExports();
    private SectionHeader[] ReadSectionHeaders();
    private bool TryDirectoryToReader(DirectoryEntry directory, BinaryReader& reader);
    public bool TryReadAtRVA(int rva, int size, Byte[]& data);
    public bool TryReadAtRVA(int rva, int size, BinaryReader& reader);
    public bool get_IsManagedBinary();
    private int ReadDwordAtFileOffset(int fileOffset);
    private ushort ReadWordAtFileOffset(int fileOffset);
    private bool TryReadBytesAtFileOffset(Byte[] bytes, int fileOffset);
    private void ReadBytesAtFileOffset(Byte[] bytes, int fileOffset);
}
public class Microsoft.Samples.Debugging.MdbgEngine.PEReaderException : Exception {
    public PEReaderException(string message);
}
public enum Microsoft.Samples.Debugging.MdbgEngine.PEStreamFormat : Enum {
    public int value__;
    public static PEStreamFormat DiskFormat;
    public static PEStreamFormat MemoryLayoutFormat;
}
public class Microsoft.Samples.Debugging.MdbgEngine.RuntimeFunctionEntry : object {
    public int BeginAddress;
    public int EndAddress;
    public int UnwindData;
    public int Size { get; }
    public virtual int get_Size();
    public virtual int CompareTo(RuntimeFunctionEntry other);
    public virtual void WriteTo(BinaryWriter writer);
    public static int GetSize(ImageFileMachine arch);
    public static RuntimeFunctionEntry ReadFrom(BinaryReader r, ImageFileMachine arch);
}
public class Microsoft.Samples.Debugging.MdbgEngine.SectionHeader : ValueType {
    public string Name;
    public int VirtualSize;
    public int VirtualAddress;
    public int SizeOfRawData;
    public int OffsetToRawData;
    public int RVAToRelocations;
    public int PointerToLineNumbers;
    public ushort NumberOfRelocations;
    public ushort NumberOfLineNumbers;
    public UInt32 SectionCharacteristics;
}
public class Microsoft.Samples.Debugging.MdbgEngine.StreamModuleReader : object {
    private Stream m_peStream;
    public PEStreamFormat Format { get; }
    public int Size { get; }
    public StreamModuleReader(Stream peStream);
    public sealed virtual int ReadAtOffset(Byte[] fileBytes, int offset);
    public sealed virtual PEStreamFormat get_Format();
    public sealed virtual int get_Size();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.AgnosticContextFlags : Enum {
    public int value__;
    public static AgnosticContextFlags ContextControl;
    public static AgnosticContextFlags ContextInteger;
    public static AgnosticContextFlags ContextFloatingPoint;
    public static AgnosticContextFlags ContextDebugRegisters;
    public static AgnosticContextFlags ContextAll;
    public static AgnosticContextFlags None;
}
public class Microsoft.Samples.Debugging.Native.AMD64Context : object {
    public long P1Home;
    public long P2Home;
    public long P3Home;
    public long P4Home;
    public long P5Home;
    public long P6Home;
    public ContextFlags m_contextFlags;
    public int MxCsr;
    public short SegCs;
    public short SegDs;
    public short SegEs;
    public short SegFs;
    public short SegGs;
    public short SegSs;
    public int EFlags;
    public long Dr0;
    public long Dr1;
    public long Dr2;
    public long Dr3;
    public long Dr6;
    public long Dr7;
    public long Rax;
    public long Rcx;
    public long Rdx;
    public long Rbx;
    public long Rsp;
    public long Rbp;
    public long Rsi;
    public long Rdi;
    public long R8;
    public long R9;
    public long R10;
    public long R11;
    public long R12;
    public long R13;
    public long R14;
    public long R15;
    public long Rip;
    public XmmSaveArea FltSave;
    public VectorRegisterArea VectorRegisters;
    public long DebugControl;
    public long LastBranchToRip;
    public long LastBranchFromRip;
    public long LastExceptionToRip;
    public long LastExceptionFromRip;
    public int Size { get; }
    public ContextFlags Flags { get; public set; }
    public IntPtr StackPointer { get; }
    public Platform Platform { get; }
    public IntPtr InstructionPointer { get; public set; }
    public ImageFileMachine ImageFileMachine { get; }
    public bool IsSingleStepFlagEnabled { get; }
    private AMD64Context(INativeOSContext ctx);
    public AMD64Context(AgnosticContextFlags aFlags);
    public AMD64Context(ContextFlags flags);
    private void InitContext();
    public sealed virtual void ClearContext();
    public sealed virtual IContextDirectAccessor OpenForDirectAccess();
    public sealed virtual ContextFlags GetPSFlags(AgnosticContextFlags flags);
    public static ContextFlags GetPSFlagsStatic(AgnosticContextFlags flags);
    public sealed virtual int get_Size();
    public sealed virtual ContextFlags get_Flags();
    public sealed virtual void set_Flags(ContextFlags value);
    public sealed virtual IntPtr get_StackPointer();
    public sealed virtual Platform get_Platform();
    public sealed virtual IntPtr get_InstructionPointer();
    public sealed virtual void set_InstructionPointer(IntPtr value);
    public sealed virtual ImageFileMachine get_ImageFileMachine();
    public sealed virtual void SetSingleStepFlag(bool fEnable);
    public sealed virtual bool get_IsSingleStepFlagEnabled();
    public sealed virtual INativeOSContext Clone();
    public sealed virtual bool Equals(INativeOSContext other);
    public bool CheckContexts(INativeOSContext a1, INativeOSContext a2);
    private bool CheckAMD64Contexts(AMD64Context a1, AMD64Context a2);
    private bool HasFlags(ContextFlags flags);
    public sealed virtual IEnumerable`1<string> EnumerateRegisters();
    private IEnumerable`1<string> EnumerateAMD64Registers();
    public sealed virtual object FindRegisterByName(string name);
    private object AMD64FindRegisterByName(string name);
    public sealed virtual void SetRegisterByName(string name, object value);
    private void AMD64SetRegisterByName(string name, object value);
    private sealed virtual override void System.IDisposable.Dispose();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.AMD64Flags : Enum {
    public int value__;
    public static AMD64Flags SINGLE_STEP_FLAG;
}
public static class Microsoft.Samples.Debugging.Native.ArchitectureHelper : object {
    public static ProcessorArchitecture GetArchitectureFromCurrentProcess();
    public static bool IsCurrentProcessWow64();
    public static bool IsProcessWow64(int pid);
    public static ProcessorArchitecture GetArchitectureFromProcessHandle(SafeWin32Handle procHandle);
    public static ProcessorArchitecture GetArchitectureFromPid(int pid);
}
public class Microsoft.Samples.Debugging.Native.ARMContext : object {
    private static int PaddingFillPattern;
    private ContextFlags m_contextFlags;
    public int R0;
    public int R1;
    public int R2;
    public int R3;
    public int R4;
    public int R5;
    public int R6;
    public int R7;
    public int R8;
    public int R9;
    public int R10;
    public int R11;
    public int R12;
    public int Sp;
    public int Lr;
    public int Pc;
    public int Cpsr;
    public int Fpscr;
    private int Padding;
    public FloatingPointRegisters FPRegisters;
    public DebugRegisters DbgRegisters;
    private int Padding2;
    private int Padding3;
    public int Size { get; }
    public ContextFlags Flags { get; public set; }
    public IntPtr StackPointer { get; }
    public Platform Platform { get; }
    public IntPtr InstructionPointer { get; public set; }
    public ImageFileMachine ImageFileMachine { get; }
    public bool IsSingleStepFlagEnabled { get; }
    private ARMContext(INativeOSContext ctx);
    public ARMContext(AgnosticContextFlags aFlags);
    public ARMContext(ContextFlags flags);
    private void InitContext();
    public sealed virtual void ClearContext();
    public sealed virtual IContextDirectAccessor OpenForDirectAccess();
    public sealed virtual ContextFlags GetPSFlags(AgnosticContextFlags flags);
    public static ContextFlags GetPSFlagsStatic(AgnosticContextFlags flags);
    public sealed virtual int get_Size();
    public sealed virtual ContextFlags get_Flags();
    public sealed virtual void set_Flags(ContextFlags value);
    public sealed virtual IntPtr get_StackPointer();
    public sealed virtual Platform get_Platform();
    public sealed virtual IntPtr get_InstructionPointer();
    public sealed virtual void set_InstructionPointer(IntPtr value);
    public sealed virtual ImageFileMachine get_ImageFileMachine();
    public sealed virtual void SetSingleStepFlag(bool fEnable);
    public sealed virtual bool get_IsSingleStepFlagEnabled();
    public sealed virtual INativeOSContext Clone();
    public sealed virtual bool Equals(INativeOSContext other);
    public bool CheckContexts(INativeOSContext a1, INativeOSContext a2);
    private bool CheckARMContexts(ARMContext a1, ARMContext a2);
    private bool HasFlags(ContextFlags flags);
    public sealed virtual IEnumerable`1<string> EnumerateRegisters();
    private IEnumerable`1<string> EnumerateARMRegisters();
    public sealed virtual object FindRegisterByName(string name);
    private object ARMFindRegisterByName(string name);
    public sealed virtual void SetRegisterByName(string name, object value);
    private void ARMSetRegisterByName(string name, object value);
    private sealed virtual override void System.IDisposable.Dispose();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.ARMFlags : Enum {
    public int value__;
    public static ARMFlags SINGLE_STEP_FLAG;
}
public class Microsoft.Samples.Debugging.Native.ContextAccessor : object {
    private INativeOSContext m_context;
    private IntPtr m_rawBuffer;
    private int m_size;
    public int Size { get; }
    public IntPtr RawBuffer { get; }
    public ContextAccessor(INativeOSContext context);
    public sealed virtual int get_Size();
    public sealed virtual IntPtr get_RawBuffer();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool supressPendingFinalizer);
}
public static class Microsoft.Samples.Debugging.Native.ContextAllocator : object {
    public static NativeContext GenerateContext();
    public static NativeContext GenerateContext(ProcessorArchitecture architecture);
    private static INativeOSContext CreateX86Context();
    private static INativeOSContext CreateAMD64Context();
    private static INativeOSContext CreateARMContext();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.ContextFlags : Enum {
    public int value__;
    public static ContextFlags None;
    public static ContextFlags X86Context;
    public static ContextFlags X86ContextControl;
    public static ContextFlags X86ContextInteger;
    public static ContextFlags X86ContextSegments;
    public static ContextFlags X86ContextFloatingPoint;
    public static ContextFlags X86ContextDebugRegisters;
    public static ContextFlags X86ContextExtendedRegisters;
    public static ContextFlags X86ContextFull;
    public static ContextFlags X86ContextAll;
    public static ContextFlags AMD64Context;
    public static ContextFlags AMD64ContextControl;
    public static ContextFlags AMD64ContextInteger;
    public static ContextFlags AMD64ContextSegments;
    public static ContextFlags AMD64ContextFloatingPoint;
    public static ContextFlags AMD64ContextDebugRegisters;
    public static ContextFlags AMD64ContextFull;
    public static ContextFlags AMD64ContextAll;
    public static ContextFlags IA64Context;
    public static ContextFlags IA64ContextControl;
    public static ContextFlags IA64ContextLowerFloatingPoint;
    public static ContextFlags IA64ContextHigherFloatingPoint;
    public static ContextFlags IA64ContextInteger;
    public static ContextFlags IA64ContextDebug;
    public static ContextFlags IA64ContextIA32Control;
    public static ContextFlags IA64ContextFloatingPoint;
    public static ContextFlags IA64ContextFull;
    public static ContextFlags IA64ContextAll;
    public static ContextFlags ARMContext;
    public static ContextFlags ARMContextControl;
    public static ContextFlags ARMContextInteger;
    public static ContextFlags ARMContextFloatingPoint;
    public static ContextFlags ARMContextDebugRegisters;
    public static ContextFlags ARMContextFull;
    public static ContextFlags ARMContextAll;
}
public class Microsoft.Samples.Debugging.Native.CREATE_PROCESS_DEBUG_INFO : ValueType {
    public IntPtr hFile;
    public IntPtr hProcess;
    public IntPtr hThread;
    public IntPtr lpBaseOfImage;
    public UInt32 dwDebugInfoFileOffset;
    public UInt32 nDebugInfoSize;
    public IntPtr lpThreadLocalBase;
    public IntPtr lpStartAddress;
    public IntPtr lpImageName;
    public ushort fUnicode;
}
public class Microsoft.Samples.Debugging.Native.CREATE_THREAD_DEBUG_INFO : ValueType {
    public IntPtr hThread;
    public IntPtr lpThreadLocalBase;
    public IntPtr lpStartAddress;
}
public class Microsoft.Samples.Debugging.Native.DebugEventHeader : ValueType {
    public NativeDebugEventCode dwDebugEventCode;
    public UInt32 dwProcessId;
    public UInt32 dwThreadId;
}
public class Microsoft.Samples.Debugging.Native.DebugRegisters : object {
    public static int MaxBreakPoints;
    public static int MaxWatchPoints;
    public Int32[] Bvr;
    public Int32[] Bcr;
    public Int32[] Wvr;
    public Int32[] Wcr;
    public DebugRegisters(DebugRegisters other);
    public void Clear();
}
public class Microsoft.Samples.Debugging.Native.EXCEPTION_DEBUG_INFO : ValueType {
    public EXCEPTION_RECORD ExceptionRecord;
    public UInt32 dwFirstChance;
}
public class Microsoft.Samples.Debugging.Native.EXCEPTION_RECORD : ValueType {
    public ExceptionCode ExceptionCode;
    public ExceptionRecordFlags ExceptionFlags;
    public IntPtr ExceptionRecord;
    public IntPtr ExceptionAddress;
    public UInt32 NumberParameters;
    private static int EXCEPTION_MAXIMUM_PARAMETERS;
    public IntPtr ExceptionInformation0;
    public IntPtr ExceptionInformation1;
    public IntPtr ExceptionInformation2;
    public IntPtr ExceptionInformation3;
    public IntPtr ExceptionInformation4;
    public IntPtr ExceptionInformation5;
    public IntPtr ExceptionInformation6;
    public IntPtr ExceptionInformation7;
    public IntPtr ExceptionInformation8;
    public IntPtr ExceptionInformation9;
    public IntPtr ExceptionInformation10;
    public IntPtr ExceptionInformation11;
    public IntPtr ExceptionInformation12;
    public IntPtr ExceptionInformation13;
    public IntPtr ExceptionInformation14;
    public bool IsNotContinuable { get; }
    public bool get_IsNotContinuable();
}
public enum Microsoft.Samples.Debugging.Native.ExceptionCode : Enum {
    public UInt32 value__;
    public static ExceptionCode None;
    public static ExceptionCode STATUS_BREAKPOINT;
    public static ExceptionCode STATUS_SINGLESTEP;
    public static ExceptionCode EXCEPTION_INT_DIVIDE_BY_ZERO;
    public static ExceptionCode DBG_CONTROL_C;
    public static ExceptionCode EXCEPTION_STACK_OVERFLOW;
    public static ExceptionCode EXCEPTION_NONCONTINUABLE_EXCEPTION;
    public static ExceptionCode EXCEPTION_ACCESS_VIOLATION;
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.ExceptionRecordFlags : Enum {
    public UInt32 value__;
    public static ExceptionRecordFlags None;
    public static ExceptionRecordFlags EXCEPTION_NONCONTINUABLE;
}
public class Microsoft.Samples.Debugging.Native.EXIT_PROCESS_DEBUG_INFO : ValueType {
    public UInt32 dwExitCode;
}
public class Microsoft.Samples.Debugging.Native.EXIT_THREAD_DEBUG_INFO : ValueType {
    public UInt32 dwExitCode;
}
public class Microsoft.Samples.Debugging.Native.FloatingPointRegisters : object {
    public static int FloatingPointSizeInBytes;
    private Byte[] m_fpBytes;
    public FloatingPointRegisters(FloatingPointRegisters other);
    public void Clear();
    public static bool op_Equality(FloatingPointRegisters lhs, FloatingPointRegisters rhs);
    public static bool op_Inequality(FloatingPointRegisters lhs, FloatingPointRegisters rhs);
    public virtual bool Equals(object obj);
    public Neon128 GetAsQ(int index);
    public ulong GetAsD(int index);
    public UInt32 GetAsS(int index);
    public virtual int GetHashCode();
}
public class Microsoft.Samples.Debugging.Native.FloatSaveArea : object {
    private static int SizeOf80387Registers;
    public int ControlWord;
    public int StatusWord;
    public int TagWord;
    public int ErrorOffset;
    public int ErrorSelector;
    public int DataOffset;
    public int DataSelector;
    private Byte[] RegisterArea;
    public int Cr0NpxState;
    public FloatSaveArea(FloatSaveArea other);
    public void Clear();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.IA64Flags : Enum {
    public long value__;
    public static IA64Flags PSR_RI;
    public static IA64Flags IA64_BUNDLE_SIZE;
    public static IA64Flags SINGLE_STEP_FLAG;
}
public interface Microsoft.Samples.Debugging.Native.IContextDirectAccessor {
    public int Size { get; }
    public IntPtr RawBuffer { get; }
    public abstract virtual int get_Size();
    public abstract virtual IntPtr get_RawBuffer();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.ImageFileMachine : Enum {
    public int value__;
    public static ImageFileMachine X86;
    public static ImageFileMachine AMD64;
    public static ImageFileMachine IA64;
    public static ImageFileMachine ARM;
}
public interface Microsoft.Samples.Debugging.Native.INativeOSContext {
    public int Size { get; }
    public ContextFlags Flags { get; public set; }
    public IntPtr InstructionPointer { get; public set; }
    public IntPtr StackPointer { get; }
    public bool IsSingleStepFlagEnabled { get; }
    public Platform Platform { get; }
    public ImageFileMachine ImageFileMachine { get; }
    public abstract virtual IContextDirectAccessor OpenForDirectAccess();
    public abstract virtual int get_Size();
    public abstract virtual ContextFlags get_Flags();
    public abstract virtual void set_Flags(ContextFlags value);
    public abstract virtual ContextFlags GetPSFlags(AgnosticContextFlags flags);
    public abstract virtual void ClearContext();
    public abstract virtual IntPtr get_InstructionPointer();
    public abstract virtual void set_InstructionPointer(IntPtr value);
    public abstract virtual IntPtr get_StackPointer();
    public abstract virtual void SetSingleStepFlag(bool enable);
    public abstract virtual bool get_IsSingleStepFlagEnabled();
    public abstract virtual INativeOSContext Clone();
    public abstract virtual Platform get_Platform();
    public abstract virtual ImageFileMachine get_ImageFileMachine();
    public abstract virtual IEnumerable`1<string> EnumerateRegisters();
    public abstract virtual object FindRegisterByName(string name);
    public abstract virtual void SetRegisterByName(string name, object value);
}
public class Microsoft.Samples.Debugging.Native.M128A : ValueType {
    public long Low;
    public long High;
    public void Clear();
    public static bool op_Equality(M128A lhs, M128A rhs);
    public static bool op_Inequality(M128A lhs, M128A rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.Samples.Debugging.Native.ModuleEntry32 : ValueType {
    public UInt32 dwSize;
    public UInt32 th32ModuleID;
    public UInt32 th32ProcessID;
    public UInt32 GlblcntUsage;
    public UInt32 ProccntUsage;
    public IntPtr modBaseAddr;
    public UInt32 modBaseSize;
    public IntPtr hModule;
    public string szModule;
    public string szExePath;
}
public class Microsoft.Samples.Debugging.Native.ModuleInfo : ValueType {
    public IntPtr lpBaseOfDll;
    public UInt32 SizeOfImage;
    public IntPtr EntryPoint;
}
public class Microsoft.Samples.Debugging.Native.NativeContext : object {
    public int VFrame;
    private INativeOSContext m_osContext;
    public AMD64Context AMD64 { get; }
    public ARMContext ARM { get; }
    public X86Context X86 { get; }
    public int Size { get; }
    public ContextFlags Flags { get; public set; }
    public long StackPointer { get; }
    public Platform Platform { get; }
    public long InstructionPointer { get; public set; }
    public ImageFileMachine ImageFileMachine { get; }
    public bool IsSingleStepFlagEnabled { get; }
    private NativeContext(NativeContext ctx);
    public NativeContext(INativeOSContext osContext);
    public AMD64Context get_AMD64();
    public ARMContext get_ARM();
    public X86Context get_X86();
    public void ClearContext();
    public IContextDirectAccessor OpenForDirectAccess();
    public void CopyToOSContext(IntPtr rawBuffer, int bufferSize);
    public void CopyFromOSContext(IntPtr rawBuffer, int bufferSize);
    public ContextFlags GetPSFlags(AgnosticContextFlags flags);
    public int get_Size();
    public ContextFlags get_Flags();
    public void set_Flags(ContextFlags value);
    public long get_StackPointer();
    public Platform get_Platform();
    public long get_InstructionPointer();
    public void set_InstructionPointer(long value);
    public ImageFileMachine get_ImageFileMachine();
    public void SetSingleStepFlag(bool fEnable);
    public bool get_IsSingleStepFlagEnabled();
    public NativeContext Clone();
    public sealed virtual bool Equals(NativeContext other);
    [IteratorStateMachineAttribute("Microsoft.Samples.Debugging.Native.NativeContext/<EnumerateRegisters>d__34")]
public IEnumerable`1<string> EnumerateRegisters();
    public object FindRegisterByName(string name);
    public void SetRegisterByName(string name, object value);
}
public enum Microsoft.Samples.Debugging.Native.NativeDebugEventCode : Enum {
    public int value__;
    public static NativeDebugEventCode None;
    public static NativeDebugEventCode EXCEPTION_DEBUG_EVENT;
    public static NativeDebugEventCode CREATE_THREAD_DEBUG_EVENT;
    public static NativeDebugEventCode CREATE_PROCESS_DEBUG_EVENT;
    public static NativeDebugEventCode EXIT_THREAD_DEBUG_EVENT;
    public static NativeDebugEventCode EXIT_PROCESS_DEBUG_EVENT;
    public static NativeDebugEventCode LOAD_DLL_DEBUG_EVENT;
    public static NativeDebugEventCode UNLOAD_DLL_DEBUG_EVENT;
    public static NativeDebugEventCode OUTPUT_DEBUG_STRING_EVENT;
    public static NativeDebugEventCode RIP_EVENT;
}
public static class Microsoft.Samples.Debugging.Native.NativeMethods : object {
    private static string Kernel32LibraryName;
    private static string CoreSystemCom;
    private static string CoreSystemDebug;
    private static string CoreSystemFile;
    private static string CoreSystemHandle;
    private static string CoreSystemKernel32Legacy;
    private static string CoreSystemLibraryLoader;
    private static string CoreSystemMemory;
    private static string CoreSystemProcessThreads;
    private static string CoreSystemSynch;
    private static string CoreSystemSysInfo;
    private static string CoreSystemToolHelp;
    private static string CoreSystemWow64;
    private static string CoreSystemObsoletePsApi;
    private static string CoreSystemObsoletePsApi2;
    private static string ntdll;
    private static string DbgHelpLibraryName;
    public static UInt32 FILE_MAP_READ;
    public static int MAX_PATH;
    public static void RtlMoveMemory(IntPtr destination, IntPtr source, IntPtr numberBytes);
    public static bool CloseHandle(IntPtr handle);
    public static int WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
    public static bool GetThreadContext(IntPtr hThread, IntPtr lpContext);
    public static IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, UInt32 dwThreadId);
    public static SafeWin32Handle OpenProcess(ProcessAccessOptions dwDesiredAccess, bool bInheritHandle, int dwProcessId);
    public static bool SetThreadContext(IntPtr hThread, IntPtr lpContext);
    public static int GetCurrentThreadId();
    public static bool IsWow64Process(SafeWin32Handle hProcess, Boolean& isWow);
    public static SafeWin32Handle CreateFileMapping(SafeFileHandle hFile, IntPtr lpFileMappingAttributes, PageProtection flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    public static bool UnmapViewOfFile(IntPtr baseAddress);
    public static SafeMapViewHandle MapViewOfFile(SafeWin32Handle hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);
    public static IntPtr GetProcAddress(IntPtr hModule, string procName);
    internal static bool FreeLibrary(IntPtr hModule);
    public static IntPtr LoadLibrary(string lpFileName);
    public static IntPtr LoadLibraryEx(string fileName, int hFile, LoadLibraryFlags dwFlags);
    public static bool GetFileSizeEx(IntPtr hFile, Int64& lpFileSize);
    public static bool GetModuleInformation(IntPtr hProcess, IntPtr hModule, ModuleInfo& lpmodinfo, UInt32 countBytes);
    public static int K32GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule, StringBuilder lpFilename, int nSize);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, UIntPtr nSize, IntPtr& lpNumberOfBytesRead);
    public static bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, UIntPtr nSize, UIntPtr& lpNumberOfBytesWritten);
    public static bool DebugSetProcessKillOnExit(bool KillOnExit);
    public static bool DebugBreakProcess(IntPtr hProcess);
    public static bool SetEvent(SafeWin32Handle eventHandle);
    public static IntPtr CreateToolhelp32Snapshot(SnapshotFlags flags, int pid);
    public static bool Process32First(IntPtr hSnapshot, ProcessEntry32& pe32);
    public static bool Process32Next(IntPtr hSnapshot, ProcessEntry32& pe32);
    public static bool Thread32First(IntPtr hSnapshot, ThreadEntry32& te32);
    public static bool Thread32Next(IntPtr hSnapshot, ThreadEntry32& te32);
    public static bool Module32First(IntPtr hSnapshot, ModuleEntry32& me32);
    public static bool Module32Next(IntPtr hSnapshot, ModuleEntry32& me32);
    public static bool DebugActiveProcess(UInt32 dwProcessId);
    public static bool DebugActiveProcessStop(UInt32 dwProcessId);
    public static bool TerminateProcess(IntPtr hProcess, UInt32 uExitCode);
    public static bool ContinueDebugEvent(UInt32 dwProcessId, UInt32 dwThreadId, ContinueStatus dwContinueStatus);
    public static void GetSystemInfo(SYSTEM_INFO& lpSystemInfo);
    public static SafeWin32Handle GetCurrentProcess();
    public static bool QueryFullProcessImageName(SafeWin32Handle hProcess, int dwFlags, StringBuilder lpExeName, Int32& lpdwSize);
    public static IntPtr VirtualQueryEx(IntPtr hProcess, IntPtr lpAddress, IntPtr lpBuffer, IntPtr length);
    public static int CoCreateInstance(Guid& rclsid, IntPtr pUnkOuter, int dwClsContext, Guid& riid, IntPtr& comObj);
    public static int GetFinalPathNameByHandle(IntPtr handle, StringBuilder path, int bufLen, int flags);
    public static bool MiniDumpWriteDump(IntPtr hProcess, UInt32 ProcessId, SafeFileHandle hFile, MinidumpType DumpType, MinidumpExceptionInformation& ExceptionParam, IntPtr UserStreamParam, IntPtr CallbackParam);
}
public enum Microsoft.Samples.Debugging.Native.Platform : Enum {
    public int value__;
    public static Platform None;
    public static Platform X86;
    public static Platform AMD64;
    public static Platform IA64;
    public static Platform ARM;
}
public class Microsoft.Samples.Debugging.Native.ProcessEntry32 : ValueType {
    public UInt32 dwSize;
    public UInt32 cntUsage;
    public UInt32 th32ProcessID;
    public IntPtr th32DefaultHeapID;
    public UInt32 th32ModuleID;
    public UInt32 cntThreads;
    public UInt32 th32ParentProcessID;
    public int pcPriClassBase;
    public UInt32 dwFlags;
    public string szExeFile;
}
public enum Microsoft.Samples.Debugging.Native.ProcessorArchitecture : Enum {
    public ushort value__;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_INTEL;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_MIPS;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_ALPHA;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_PPC;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_SHX;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_ARM;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_IA64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_ALPHA64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_MSIL;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_AMD64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_IA32_ON_WIN64;
}
[SecuritySafeCriticalAttribute]
public class Microsoft.Samples.Debugging.Native.SafeWin32Handle : SafeHandleZeroOrMinusOneIsInvalid {
    [SecuritySafeCriticalAttribute]
public SafeWin32Handle(IntPtr handle);
    [SecuritySafeCriticalAttribute]
public SafeWin32Handle(IntPtr handle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.SnapshotFlags : Enum {
    public UInt32 value__;
    public static SnapshotFlags HeapList;
    public static SnapshotFlags Process;
    public static SnapshotFlags Thread;
    public static SnapshotFlags Module;
    public static SnapshotFlags Module32;
    public static SnapshotFlags All;
    public static SnapshotFlags Inherit;
}
public enum Microsoft.Samples.Debugging.Native.ThreadAccess : Enum {
    public int value__;
    public static ThreadAccess None;
    public static ThreadAccess THREAD_ALL_ACCESS;
    public static ThreadAccess THREAD_DIRECT_IMPERSONATION;
    public static ThreadAccess THREAD_GET_CONTEXT;
    public static ThreadAccess THREAD_IMPERSONATE;
    public static ThreadAccess THREAD_QUERY_INFORMATION;
    public static ThreadAccess THREAD_QUERY_LIMITED_INFORMATION;
    public static ThreadAccess THREAD_SET_CONTEXT;
    public static ThreadAccess THREAD_SET_INFORMATION;
    public static ThreadAccess THREAD_SET_LIMITED_INFORMATION;
    public static ThreadAccess THREAD_SET_THREAD_TOKEN;
    public static ThreadAccess THREAD_SUSPEND_RESUME;
    public static ThreadAccess THREAD_TERMINATE;
}
public class Microsoft.Samples.Debugging.Native.ThreadEntry32 : ValueType {
    public UInt32 dwSize;
    public UInt32 cntUsage;
    public UInt32 th32ThreadID;
    public UInt32 th32OwnerProcessID;
    public int tpBasePri;
    public int tpDeltaPri;
    public UInt32 dwFlags;
}
public class Microsoft.Samples.Debugging.Native.VectorRegisterArea : object {
    public static int VectorRegisterSize;
    public M128A[] VectorRegister;
    public long VectorControl;
    public VectorRegisterArea(VectorRegisterArea other);
    public void Clear();
}
public class Microsoft.Samples.Debugging.Native.X86Context : object {
    private ContextFlags m_contextFlags;
    public int Dr0;
    public int Dr1;
    public int Dr2;
    public int Dr3;
    public int Dr6;
    public int Dr7;
    public FloatSaveArea FloatSave;
    public int SegGs;
    public int SegFs;
    public int SegEs;
    public int SegDs;
    public int Edi;
    public int Esi;
    public int Ebx;
    public int Edx;
    public int Ecx;
    public int Eax;
    public int Ebp;
    public int Eip;
    public int SegCs;
    public int EFlags;
    public int Esp;
    public int SegSs;
    public Byte[] ExtendedRegisters;
    public int Size { get; }
    public ContextFlags Flags { get; public set; }
    public IntPtr StackPointer { get; }
    public Platform Platform { get; }
    public IntPtr InstructionPointer { get; public set; }
    public ImageFileMachine ImageFileMachine { get; }
    public bool IsSingleStepFlagEnabled { get; }
    private X86Context(INativeOSContext ctx);
    public X86Context(AgnosticContextFlags aFlags);
    public X86Context(ContextFlags flags);
    private void InitContext();
    public sealed virtual void ClearContext();
    public sealed virtual IContextDirectAccessor OpenForDirectAccess();
    public sealed virtual ContextFlags GetPSFlags(AgnosticContextFlags flags);
    public static ContextFlags GetPSFlagsStatic(AgnosticContextFlags flags);
    public sealed virtual int get_Size();
    public sealed virtual ContextFlags get_Flags();
    public sealed virtual void set_Flags(ContextFlags value);
    public sealed virtual IntPtr get_StackPointer();
    public sealed virtual Platform get_Platform();
    public sealed virtual IntPtr get_InstructionPointer();
    public sealed virtual void set_InstructionPointer(IntPtr value);
    public sealed virtual ImageFileMachine get_ImageFileMachine();
    public sealed virtual void SetSingleStepFlag(bool fEnable);
    public sealed virtual bool get_IsSingleStepFlagEnabled();
    public sealed virtual INativeOSContext Clone();
    public sealed virtual bool Equals(INativeOSContext other);
    public bool CheckContexts(INativeOSContext a1, INativeOSContext a2);
    private bool CheckX86Contexts(X86Context c1, X86Context c2);
    private bool HasFlags(ContextFlags flags);
    public sealed virtual IEnumerable`1<string> EnumerateRegisters();
    private IEnumerable`1<string> EnumerateX86Registers();
    public sealed virtual object FindRegisterByName(string name);
    private object X86FindRegisterByName(string name);
    public sealed virtual void SetRegisterByName(string name, object value);
    private void X86SetRegisterByName(string name, object value);
    private sealed virtual override void System.IDisposable.Dispose();
}
[FlagsAttribute]
public enum Microsoft.Samples.Debugging.Native.X86Flags : Enum {
    public int value__;
    public static X86Flags SINGLE_STEP_FLAG;
}
public class Microsoft.Samples.Debugging.Native.XmmSaveArea : object {
    public static int HeaderSize;
    public static int LegacySize;
    public M128A[] Header;
    public M128A[] Legacy;
    public M128A Xmm0;
    public M128A Xmm1;
    public M128A Xmm2;
    public M128A Xmm3;
    public M128A Xmm4;
    public M128A Xmm5;
    public M128A Xmm6;
    public M128A Xmm7;
    public M128A Xmm8;
    public M128A Xmm9;
    public M128A Xmm10;
    public M128A Xmm11;
    public M128A Xmm12;
    public M128A Xmm13;
    public M128A Xmm14;
    public M128A Xmm15;
    public XmmSaveArea(XmmSaveArea other);
    public void Clear();
    public static bool op_Equality(XmmSaveArea lhs, XmmSaveArea rhs);
    public static bool op_Inequality(XmmSaveArea lhs, XmmSaveArea rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class NetNativeSymbolProvider.ArrayTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private TypeSignature <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Sizes>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <LowBounds>k__BackingField;
    public TypeSignature ComponentType { get; public set; }
    public int Rank { get; public set; }
    public Int32[] Sizes { get; public set; }
    public Int32[] LowBounds { get; public set; }
    [CompilerGeneratedAttribute]
public TypeSignature get_ComponentType();
    [CompilerGeneratedAttribute]
public void set_ComponentType(TypeSignature value);
    [CompilerGeneratedAttribute]
public int get_Rank();
    [CompilerGeneratedAttribute]
public void set_Rank(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_Sizes();
    [CompilerGeneratedAttribute]
public void set_Sizes(Int32[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_LowBounds();
    [CompilerGeneratedAttribute]
public void set_LowBounds(Int32[] value);
}
public class NetNativeSymbolProvider.ByRefTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private TypeSignature <Type>k__BackingField;
    public TypeSignature Type { get; public set; }
    [CompilerGeneratedAttribute]
public TypeSignature get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeSignature value);
}
public class NetNativeSymbolProvider.ClassTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private int <TypeDefOrRef>k__BackingField;
    public int TypeDefOrRef { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TypeDefOrRef();
    [CompilerGeneratedAttribute]
public void set_TypeDefOrRef(int value);
}
public enum NetNativeSymbolProvider.CorCallingConvention : Enum {
    public int value__;
    public static CorCallingConvention Default;
    public static CorCallingConvention VarArg;
    public static CorCallingConvention Field;
    public static CorCallingConvention LocalSig;
    public static CorCallingConvention Property;
    public static CorCallingConvention Unmanaged;
    public static CorCallingConvention GenericInst;
    public static CorCallingConvention NativeVarArg;
    public static CorCallingConvention Mask;
    public static CorCallingConvention HasThis;
    public static CorCallingConvention ExplicitThis;
    public static CorCallingConvention Generic;
}
internal class NetNativeSymbolProvider.CorDebugSymbolProviderFactory : object {
    public static IntPtr Create();
    public sealed virtual ICorDebugSymbolProvider CreateSymbolProvider(IDiaDataSource pDiaDataSource, IDiaSession pDiaSession, ICorDebugDataTarget pCorDebugDataTarget);
}
[FlagsAttribute]
public enum NetNativeSymbolProvider.CorElementType : Enum {
    public int value__;
    public static CorElementType ELEMENT_TYPE_PINNED;
    public static CorElementType ELEMENT_TYPE_SENTINEL;
    public static CorElementType ELEMENT_TYPE_MODIFIER;
    public static CorElementType ELEMENT_TYPE_MAX;
    public static CorElementType ELEMENT_TYPE_INTERNAL;
    public static CorElementType ELEMENT_TYPE_CMOD_OPT;
    public static CorElementType ELEMENT_TYPE_CMOD_REQD;
    public static CorElementType ELEMENT_TYPE_MVAR;
    public static CorElementType ELEMENT_TYPE_SZARRAY;
    public static CorElementType ELEMENT_TYPE_OBJECT;
    public static CorElementType ELEMENT_TYPE_FNPTR;
    public static CorElementType ELEMENT_TYPE_U;
    public static CorElementType ELEMENT_TYPE_I;
    public static CorElementType ELEMENT_TYPE_TYPEDBYREF;
    public static CorElementType ELEMENT_TYPE_GENERICINST;
    public static CorElementType ELEMENT_TYPE_ARRAY;
    public static CorElementType ELEMENT_TYPE_VAR;
    public static CorElementType ELEMENT_TYPE_CLASS;
    public static CorElementType ELEMENT_TYPE_VALUETYPE;
    public static CorElementType ELEMENT_TYPE_BYREF;
    public static CorElementType ELEMENT_TYPE_PTR;
    public static CorElementType ELEMENT_TYPE_STRING;
    public static CorElementType ELEMENT_TYPE_R8;
    public static CorElementType ELEMENT_TYPE_R4;
    public static CorElementType ELEMENT_TYPE_U8;
    public static CorElementType ELEMENT_TYPE_I8;
    public static CorElementType ELEMENT_TYPE_U4;
    public static CorElementType ELEMENT_TYPE_I4;
    public static CorElementType ELEMENT_TYPE_U2;
    public static CorElementType ELEMENT_TYPE_I2;
    public static CorElementType ELEMENT_TYPE_U1;
    public static CorElementType ELEMENT_TYPE_I1;
    public static CorElementType ELEMENT_TYPE_CHAR;
    public static CorElementType ELEMENT_TYPE_BOOLEAN;
    public static CorElementType ELEMENT_TYPE_VOID;
    public static CorElementType ELEMENT_TYPE_END;
}
public enum NetNativeSymbolProvider.CorTokenType : Enum {
    public int value__;
    public static CorTokenType mdtModule;
    public static CorTokenType mdtTypeRef;
    public static CorTokenType mdtTypeDef;
    public static CorTokenType mdtFieldDef;
    public static CorTokenType mdtMethodDef;
    public static CorTokenType mdtParamDef;
    public static CorTokenType mdtInterfaceImpl;
    public static CorTokenType mdtMemberRef;
    public static CorTokenType mdtCustomAttribute;
    public static CorTokenType mdtPermission;
    public static CorTokenType mdtSignature;
    public static CorTokenType mdtEvent;
    public static CorTokenType mdtProperty;
    public static CorTokenType mdtModuleRef;
    public static CorTokenType mdtTypeSpec;
    public static CorTokenType mdtAssembly;
    public static CorTokenType mdtAssemblyRef;
    public static CorTokenType mdtFile;
    public static CorTokenType mdtExportedType;
    public static CorTokenType mdtManifestResource;
    public static CorTokenType mdtGenericParam;
    public static CorTokenType mdtMethodSpec;
    public static CorTokenType mdtGenericParamConstraint;
    public static CorTokenType mdtString;
    public static CorTokenType mdtName;
    public static CorTokenType mdtBaseType;
}
public class NetNativeSymbolProvider.CustomModSignature : object {
    [CompilerGeneratedAttribute]
private bool <IsModOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeDefOrRef>k__BackingField;
    public bool IsModOpt { get; public set; }
    public int TypeDefOrRef { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsModOpt();
    [CompilerGeneratedAttribute]
public void set_IsModOpt(bool value);
    [CompilerGeneratedAttribute]
public int get_TypeDefOrRef();
    [CompilerGeneratedAttribute]
public void set_TypeDefOrRef(int value);
}
public class NetNativeSymbolProvider.DiaStackWalkHelper : object {
    public static int GetRegisterValue(NativeContext Context, CvHreg register, Int64& registerValue);
}
public class NetNativeSymbolProvider.FieldSignature : Signature {
    [CompilerGeneratedAttribute]
private CustomModSignature[] <CustomMods>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSignature <Type>k__BackingField;
    public CustomModSignature[] CustomMods { get; public set; }
    public TypeSignature Type { get; public set; }
    [CompilerGeneratedAttribute]
public CustomModSignature[] get_CustomMods();
    [CompilerGeneratedAttribute]
public void set_CustomMods(CustomModSignature[] value);
    [CompilerGeneratedAttribute]
public TypeSignature get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeSignature value);
}
public class NetNativeSymbolProvider.FunctionPointerTypeSignature : TypeSignature {
    public MethodRefSignature MethodDefOrRefSignature;
}
public class NetNativeSymbolProvider.GenericInstTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private bool <IsValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeDefOrRef>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSignature[] <Types>k__BackingField;
    public bool IsValueType { get; public set; }
    public int TypeDefOrRef { get; public set; }
    public TypeSignature[] Types { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsValueType();
    [CompilerGeneratedAttribute]
public void set_IsValueType(bool value);
    [CompilerGeneratedAttribute]
public int get_TypeDefOrRef();
    [CompilerGeneratedAttribute]
public void set_TypeDefOrRef(int value);
    [CompilerGeneratedAttribute]
public TypeSignature[] get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(TypeSignature[] value);
}
public enum NetNativeSymbolProvider.HResult : Enum {
    public int value__;
    public static HResult E_UNEXPECTED;
    public static HResult E_NOTIMPL;
    public static HResult E_OUTOFMEMORY;
    public static HResult E_INVALIDARG;
    public static HResult E_NOINTERFACE;
    public static HResult E_POINTER;
    public static HResult E_HANDLE;
    public static HResult E_ABORT;
    public static HResult E_FAIL;
    public static HResult E_ACCESSDENIED;
    public static HResult E_PENDING;
    public static HResult E_PDB_NOT_FOUND;
    public static HResult E_PDB_CORRUPT;
    public static HResult E_PARTIAL_COPY;
    public static HResult E_BAD_LENGTH;
    public static HResult CO_E_INIT_TLS;
    public static HResult CO_E_INIT_SHARED_ALLOCATOR;
    public static HResult CO_E_INIT_MEMORY_ALLOCATOR;
    public static HResult CO_E_INIT_CLASS_CACHE;
    public static HResult CO_E_INIT_RPC_CHANNEL;
    public static HResult CO_E_INIT_TLS_SET_CHANNEL_CONTROL;
    public static HResult CO_E_INIT_TLS_CHANNEL_CONTROL;
    public static HResult CO_E_INIT_UNACCEPTED_USER_ALLOCATOR;
    public static HResult CO_E_INIT_SCM_MUTEX_EXISTS;
    public static HResult CO_E_INIT_SCM_FILE_MAPPING_EXISTS;
    public static HResult CO_E_INIT_SCM_MAP_VIEW_OF_FILE;
    public static HResult CO_E_INIT_SCM_EXEC_FAILURE;
    public static HResult CO_E_INIT_ONLY_SINGLE_THREADED;
    public static HResult CO_E_CANT_REMOTE;
    public static HResult CO_E_BAD_SERVER_NAME;
    public static HResult CO_E_WRONG_SERVER_IDENTITY;
    public static HResult CO_E_OLE1DDE_DISABLED;
    public static HResult CO_E_RUNAS_SYNTAX;
    public static HResult CO_E_CREATEPROCESS_FAILURE;
    public static HResult CO_E_RUNAS_CREATEPROCESS_FAILURE;
    public static HResult CO_E_RUNAS_LOGON_FAILURE;
    public static HResult CO_E_LAUNCH_PERMSSION_DENIED;
    public static HResult CO_E_START_SERVICE_FAILURE;
    public static HResult CO_E_REMOTE_COMMUNICATION_FAILURE;
    public static HResult CO_E_SERVER_START_TIMEOUT;
    public static HResult CO_E_CLSREG_INCONSISTENT;
    public static HResult CO_E_IIDREG_INCONSISTENT;
    public static HResult CO_E_NOT_SUPPORTED;
    public static HResult CO_E_RELOAD_DLL;
    public static HResult CO_E_MSI_ERROR;
    public static HResult CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT;
    public static HResult CO_E_SERVER_PAUSED;
    public static HResult CO_E_SERVER_NOT_PAUSED;
    public static HResult CO_E_CLASS_DISABLED;
    public static HResult CO_E_CLRNOTAVAILABLE;
    public static HResult CO_E_ASYNC_WORK_REJECTED;
    public static HResult CO_E_SERVER_INIT_TIMEOUT;
    public static HResult CO_E_NO_SECCTX_IN_ACTIVATE;
    public static HResult CO_E_TRACKER_CONFIG;
    public static HResult CO_E_THREADPOOL_CONFIG;
    public static HResult CO_E_SXS_CONFIG;
    public static HResult CO_E_MALFORMED_SPN;
    public static HResult S_OK;
    public static HResult S_FALSE;
    public static HResult OLE_E_FIRST;
    public static HResult OLE_E_LAST;
    public static HResult OLE_S_FIRST;
    public static HResult OLE_S_LAST;
    public static HResult OLE_E_OLEVERB;
    public static HResult OLE_E_ADVF;
    public static HResult OLE_E_ENUM_NOMORE;
    public static HResult OLE_E_ADVISENOTSUPPORTED;
    public static HResult OLE_E_NOCONNECTION;
    public static HResult OLE_E_NOTRUNNING;
    public static HResult OLE_E_NOCACHE;
    public static HResult OLE_E_BLANK;
    public static HResult OLE_E_CLASSDIFF;
    public static HResult OLE_E_CANT_GETMONIKER;
    public static HResult OLE_E_CANT_BINDTOSOURCE;
    public static HResult OLE_E_STATIC;
    public static HResult OLE_E_PROMPTSAVECANCELLED;
    public static HResult OLE_E_INVALIDRECT;
    public static HResult OLE_E_WRONGCOMPOBJ;
    public static HResult OLE_E_INVALIDHWND;
    public static HResult OLE_E_NOT_INPLACEACTIVE;
    public static HResult OLE_E_CANTCONVERT;
    public static HResult OLE_E_NOSTORAGE;
    public static HResult DV_E_FORMATETC;
    public static HResult DV_E_DVTARGETDEVICE;
    public static HResult DV_E_STGMEDIUM;
    public static HResult DV_E_STATDATA;
    public static HResult DV_E_LINDEX;
    public static HResult DV_E_TYMED;
    public static HResult DV_E_CLIPFORMAT;
    public static HResult DV_E_DVASPECT;
    public static HResult DV_E_DVTARGETDEVICE_SIZE;
    public static HResult DV_E_NOIVIEWOBJECT;
    public static HResult DRAGDROP_E_FIRST;
    public static HResult DRAGDROP_E_LAST;
    public static HResult DRAGDROP_S_FIRST;
    public static HResult DRAGDROP_S_LAST;
    public static HResult DRAGDROP_E_NOTREGISTERED;
    public static HResult DRAGDROP_E_ALREADYREGISTERED;
    public static HResult DRAGDROP_E_INVALIDHWND;
    public static HResult CLASSFACTORY_E_FIRST;
    public static HResult CLASSFACTORY_E_LAST;
    public static HResult CLASSFACTORY_S_FIRST;
    public static HResult CLASSFACTORY_S_LAST;
    public static HResult CLASS_E_NOAGGREGATION;
    public static HResult CLASS_E_CLASSNOTAVAILABLE;
    public static HResult CLASS_E_NOTLICENSED;
    public static HResult MARSHAL_E_FIRST;
    public static HResult MARSHAL_E_LAST;
    public static HResult MARSHAL_S_FIRST;
    public static HResult MARSHAL_S_LAST;
    public static HResult DATA_E_FIRST;
    public static HResult DATA_E_LAST;
    public static HResult DATA_S_FIRST;
    public static HResult DATA_S_LAST;
    public static HResult VIEW_E_FIRST;
    public static HResult VIEW_E_LAST;
    public static HResult VIEW_S_FIRST;
    public static HResult VIEW_S_LAST;
    public static HResult VIEW_E_DRAW;
    public static HResult REGDB_E_FIRST;
    public static HResult REGDB_E_LAST;
    public static HResult REGDB_S_FIRST;
    public static HResult REGDB_S_LAST;
    public static HResult REGDB_E_READREGDB;
    public static HResult REGDB_E_WRITEREGDB;
    public static HResult REGDB_E_KEYMISSING;
    public static HResult REGDB_E_INVALIDVALUE;
    public static HResult REGDB_E_CLASSNOTREG;
    public static HResult REGDB_E_IIDNOTREG;
    public static HResult REGDB_E_BADTHREADINGMODEL;
    public static HResult CAT_E_FIRST;
    public static HResult CAT_E_LAST;
    public static HResult CAT_E_CATIDNOEXIST;
    public static HResult CAT_E_NODESCRIPTION;
    public static HResult CS_E_FIRST;
    public static HResult CS_E_LAST;
    public static HResult CS_E_PACKAGE_NOTFOUND;
    public static HResult CS_E_NOT_DELETABLE;
    public static HResult CS_E_CLASS_NOTFOUND;
    public static HResult CS_E_INVALID_VERSION;
    public static HResult CS_E_NO_CLASSSTORE;
    public static HResult CS_E_OBJECT_NOTFOUND;
    public static HResult CS_E_OBJECT_ALREADY_EXISTS;
    public static HResult CS_E_INVALID_PATH;
    public static HResult CS_E_NETWORK_ERROR;
    public static HResult CS_E_ADMIN_LIMIT_EXCEEDED;
    public static HResult CS_E_SCHEMA_MISMATCH;
    public static HResult CS_E_INTERNAL_ERROR;
    public static HResult CACHE_E_FIRST;
    public static HResult CACHE_E_LAST;
    public static HResult CACHE_S_FIRST;
    public static HResult CACHE_S_LAST;
    public static HResult CACHE_E_NOCACHE_UPDATED;
    public static HResult OLEOBJ_E_FIRST;
    public static HResult OLEOBJ_E_LAST;
    public static HResult OLEOBJ_S_FIRST;
    public static HResult OLEOBJ_S_LAST;
    public static HResult OLEOBJ_E_NOVERBS;
    public static HResult OLEOBJ_E_INVALIDVERB;
    public static HResult CLIENTSITE_E_FIRST;
    public static HResult CLIENTSITE_E_LAST;
    public static HResult CLIENTSITE_S_FIRST;
    public static HResult CLIENTSITE_S_LAST;
    public static HResult INPLACE_E_NOTUNDOABLE;
    public static HResult INPLACE_E_NOTOOLSPACE;
    public static HResult INPLACE_E_FIRST;
    public static HResult INPLACE_E_LAST;
    public static HResult INPLACE_S_FIRST;
    public static HResult INPLACE_S_LAST;
    public static HResult ENUM_E_FIRST;
    public static HResult ENUM_E_LAST;
    public static HResult ENUM_S_FIRST;
    public static HResult ENUM_S_LAST;
    public static HResult CONVERT10_E_FIRST;
    public static HResult CONVERT10_E_LAST;
    public static HResult CONVERT10_S_FIRST;
    public static HResult CONVERT10_S_LAST;
    public static HResult CONVERT10_E_OLESTREAM_GET;
    public static HResult CONVERT10_E_OLESTREAM_PUT;
    public static HResult CONVERT10_E_OLESTREAM_FMT;
    public static HResult CONVERT10_E_OLESTREAM_BITMAP_TO_DIB;
    public static HResult CONVERT10_E_STG_FMT;
    public static HResult CONVERT10_E_STG_NO_STD_STREAM;
    public static HResult CONVERT10_E_STG_DIB_TO_BITMAP;
    public static HResult CLIPBRD_E_FIRST;
    public static HResult CLIPBRD_E_LAST;
    public static HResult CLIPBRD_S_FIRST;
    public static HResult CLIPBRD_S_LAST;
    public static HResult CLIPBRD_E_CANT_OPEN;
    public static HResult CLIPBRD_E_CANT_EMPTY;
    public static HResult CLIPBRD_E_CANT_SET;
    public static HResult CLIPBRD_E_BAD_DATA;
    public static HResult CLIPBRD_E_CANT_CLOSE;
    public static HResult MK_E_FIRST;
    public static HResult MK_E_LAST;
    public static HResult MK_S_FIRST;
    public static HResult MK_S_LAST;
    public static HResult MK_E_CONNECTMANUALLY;
    public static HResult MK_E_EXCEEDEDDEADLINE;
    public static HResult MK_E_NEEDGENERIC;
    public static HResult MK_E_UNAVAILABLE;
    public static HResult MK_E_SYNTAX;
    public static HResult MK_E_NOOBJECT;
    public static HResult MK_E_INVALIDEXTENSION;
    public static HResult MK_E_INTERMEDIATEINTERFACENOTSUPPORTED;
    public static HResult MK_E_NOTBINDABLE;
    public static HResult MK_E_NOTBOUND;
    public static HResult MK_E_CANTOPENFILE;
    public static HResult MK_E_MUSTBOTHERUSER;
    public static HResult MK_E_NOINVERSE;
    public static HResult MK_E_NOSTORAGE;
    public static HResult MK_E_NOPREFIX;
    public static HResult MK_E_ENUMERATION_FAILED;
    public static HResult CO_E_FIRST;
    public static HResult CO_E_LAST;
    public static HResult CO_S_FIRST;
    public static HResult CO_S_LAST;
    public static HResult CO_E_NOTINITIALIZED;
    public static HResult CO_E_ALREADYINITIALIZED;
    public static HResult CO_E_CANTDETERMINECLASS;
    public static HResult CO_E_CLASSSTRING;
    public static HResult CO_E_IIDSTRING;
    public static HResult CO_E_APPNOTFOUND;
    public static HResult CO_E_APPSINGLEUSE;
    public static HResult CO_E_ERRORINAPP;
    public static HResult CO_E_DLLNOTFOUND;
    public static HResult CO_E_ERRORINDLL;
    public static HResult CO_E_WRONGOSFORAPP;
    public static HResult CO_E_OBJNOTREG;
    public static HResult CO_E_OBJISREG;
    public static HResult CO_E_OBJNOTCONNECTED;
    public static HResult CO_E_APPDIDNTREG;
    public static HResult CO_E_RELEASED;
    public static HResult EVENT_E_FIRST;
    public static HResult EVENT_E_LAST;
    public static HResult EVENT_S_FIRST;
    public static HResult EVENT_S_LAST;
    public static HResult EVENT_S_SOME_SUBSCRIBERS_FAILED;
    public static HResult EVENT_E_ALL_SUBSCRIBERS_FAILED;
    public static HResult EVENT_S_NOSUBSCRIBERS;
    public static HResult EVENT_E_QUERYSYNTAX;
    public static HResult EVENT_E_QUERYFIELD;
    public static HResult EVENT_E_INTERNALEXCEPTION;
    public static HResult EVENT_E_INTERNALERROR;
    public static HResult EVENT_E_INVALID_PER_USER_SID;
    public static HResult EVENT_E_USER_EXCEPTION;
    public static HResult EVENT_E_TOO_MANY_METHODS;
    public static HResult EVENT_E_MISSING_EVENTCLASS;
    public static HResult EVENT_E_NOT_ALL_REMOVED;
    public static HResult EVENT_E_COMPLUS_NOT_INSTALLED;
    public static HResult EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT;
    public static HResult EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT;
    public static HResult EVENT_E_INVALID_EVENT_CLASS_PARTITION;
    public static HResult EVENT_E_PER_USER_SID_NOT_LOGGED_ON;
    public static HResult XACT_E_FIRST;
    public static HResult XACT_E_LAST;
    public static HResult XACT_S_FIRST;
    public static HResult XACT_S_LAST;
    public static HResult XACT_E_ALREADYOTHERSINGLEPHASE;
    public static HResult XACT_E_CANTRETAIN;
    public static HResult XACT_E_COMMITFAILED;
    public static HResult XACT_E_COMMITPREVENTED;
    public static HResult XACT_E_HEURISTICABORT;
    public static HResult XACT_E_HEURISTICCOMMIT;
    public static HResult XACT_E_HEURISTICDAMAGE;
    public static HResult XACT_E_HEURISTICDANGER;
    public static HResult XACT_E_ISOLATIONLEVEL;
    public static HResult XACT_E_NOASYNC;
    public static HResult XACT_E_NOENLIST;
    public static HResult XACT_E_NOISORETAIN;
    public static HResult XACT_E_NORESOURCE;
    public static HResult XACT_E_NOTCURRENT;
    public static HResult XACT_E_NOTRANSACTION;
    public static HResult XACT_E_NOTSUPPORTED;
    public static HResult XACT_E_UNKNOWNRMGRID;
    public static HResult XACT_E_WRONGSTATE;
    public static HResult XACT_E_WRONGUOW;
    public static HResult XACT_E_XTIONEXISTS;
    public static HResult XACT_E_NOIMPORTOBJECT;
    public static HResult XACT_E_INVALIDCOOKIE;
    public static HResult XACT_E_INDOUBT;
    public static HResult XACT_E_NOTIMEOUT;
    public static HResult XACT_E_ALREADYINPROGRESS;
    public static HResult XACT_E_ABORTED;
    public static HResult XACT_E_LOGFULL;
    public static HResult XACT_E_TMNOTAVAILABLE;
    public static HResult XACT_E_CONNECTION_DOWN;
    public static HResult XACT_E_CONNECTION_DENIED;
    public static HResult XACT_E_REENLISTTIMEOUT;
    public static HResult XACT_E_TIP_CONNECT_FAILED;
    public static HResult XACT_E_TIP_PROTOCOL_ERROR;
    public static HResult XACT_E_TIP_PULL_FAILED;
    public static HResult XACT_E_DEST_TMNOTAVAILABLE;
    public static HResult XACT_E_TIP_DISABLED;
    public static HResult XACT_E_NETWORK_TX_DISABLED;
    public static HResult XACT_E_PARTNER_NETWORK_TX_DISABLED;
    public static HResult XACT_E_XA_TX_DISABLED;
    public static HResult XACT_E_UNABLE_TO_READ_DTC_CONFIG;
    public static HResult XACT_E_UNABLE_TO_LOAD_DTC_PROXY;
    public static HResult XACT_E_ABORTING;
    public static HResult XACT_E_CLERKNOTFOUND;
    public static HResult XACT_E_CLERKEXISTS;
    public static HResult XACT_E_RECOVERYINPROGRESS;
    public static HResult XACT_E_TRANSACTIONCLOSED;
    public static HResult XACT_E_INVALIDLSN;
    public static HResult XACT_E_REPLAYREQUEST;
    public static HResult XACT_S_ASYNC;
    public static HResult XACT_S_DEFECT;
    public static HResult XACT_S_READONLY;
    public static HResult XACT_S_SOMENORETAIN;
    public static HResult XACT_S_OKINFORM;
    public static HResult XACT_S_MADECHANGESCONTENT;
    public static HResult XACT_S_MADECHANGESINFORM;
    public static HResult XACT_S_ALLNORETAIN;
    public static HResult XACT_S_ABORTING;
    public static HResult XACT_S_SINGLEPHASE;
    public static HResult XACT_S_LOCALLY_OK;
    public static HResult XACT_S_LASTRESOURCEMANAGER;
    public static HResult CONTEXT_E_FIRST;
    public static HResult CONTEXT_E_LAST;
    public static HResult CONTEXT_S_FIRST;
    public static HResult CONTEXT_S_LAST;
    public static HResult CONTEXT_E_ABORTED;
    public static HResult CONTEXT_E_ABORTING;
    public static HResult CONTEXT_E_NOCONTEXT;
    public static HResult CONTEXT_E_WOULD_DEADLOCK;
    public static HResult CONTEXT_E_SYNCH_TIMEOUT;
    public static HResult CONTEXT_E_OLDREF;
    public static HResult CONTEXT_E_ROLENOTFOUND;
    public static HResult CONTEXT_E_TMNOTAVAILABLE;
    public static HResult CO_E_ACTIVATIONFAILED;
    public static HResult CO_E_ACTIVATIONFAILED_EVENTLOGGED;
    public static HResult CO_E_ACTIVATIONFAILED_CATALOGERROR;
    public static HResult CO_E_ACTIVATIONFAILED_TIMEOUT;
    public static HResult CO_E_INITIALIZATIONFAILED;
    public static HResult CONTEXT_E_NOJIT;
    public static HResult CONTEXT_E_NOTRANSACTION;
    public static HResult CO_E_THREADINGMODEL_CHANGED;
    public static HResult CO_E_NOIISINTRINSICS;
    public static HResult CO_E_NOCOOKIES;
    public static HResult CO_E_DBERROR;
    public static HResult CO_E_NOTPOOLED;
    public static HResult CO_E_NOTCONSTRUCTED;
    public static HResult CO_E_NOSYNCHRONIZATION;
    public static HResult CO_E_ISOLEVELMISMATCH;
    public static HResult OLE_S_USEREG;
    public static HResult OLE_S_STATIC;
    public static HResult OLE_S_MAC_CLIPFORMAT;
    public static HResult DRAGDROP_S_DROP;
    public static HResult DRAGDROP_S_CANCEL;
    public static HResult DRAGDROP_S_USEDEFAULTCURSORS;
    public static HResult DATA_S_SAMEFORMATETC;
    public static HResult VIEW_S_ALREADY_FROZEN;
    public static HResult CACHE_S_FORMATETC_NOTSUPPORTED;
    public static HResult CACHE_S_SAMECACHE;
    public static HResult CACHE_S_SOMECACHES_NOTUPDATED;
    public static HResult OLEOBJ_S_INVALIDVERB;
    public static HResult OLEOBJ_S_CANNOT_DOVERB_NOW;
    public static HResult OLEOBJ_S_INVALIDHWND;
    public static HResult INPLACE_S_TRUNCATED;
    public static HResult CONVERT10_S_NO_PRESENTATION;
    public static HResult MK_S_REDUCED_TO_SELF;
    public static HResult MK_S_ME;
    public static HResult MK_S_HIM;
    public static HResult MK_S_US;
    public static HResult MK_S_MONIKERALREADYREGISTERED;
    public static HResult SCHED_S_TASK_READY;
    public static HResult SCHED_S_TASK_RUNNING;
    public static HResult SCHED_S_TASK_DISABLED;
    public static HResult SCHED_S_TASK_HAS_NOT_RUN;
    public static HResult SCHED_S_TASK_NO_MORE_RUNS;
    public static HResult SCHED_S_TASK_NOT_SCHEDULED;
    public static HResult SCHED_S_TASK_TERMINATED;
    public static HResult SCHED_S_TASK_NO_VALID_TRIGGERS;
    public static HResult SCHED_S_EVENT_TRIGGER;
    public static HResult SCHED_E_TRIGGER_NOT_FOUND;
    public static HResult SCHED_E_TASK_NOT_READY;
    public static HResult SCHED_E_TASK_NOT_RUNNING;
    public static HResult SCHED_E_SERVICE_NOT_INSTALLED;
    public static HResult SCHED_E_CANNOT_OPEN_TASK;
    public static HResult SCHED_E_INVALID_TASK;
    public static HResult SCHED_E_ACCOUNT_INFORMATION_NOT_SET;
    public static HResult SCHED_E_ACCOUNT_NAME_NOT_FOUND;
    public static HResult SCHED_E_ACCOUNT_DBASE_CORRUPT;
    public static HResult SCHED_E_NO_SECURITY_SERVICES;
    public static HResult SCHED_E_UNKNOWN_OBJECT_VERSION;
    public static HResult SCHED_E_UNSUPPORTED_ACCOUNT_OPTION;
    public static HResult SCHED_E_SERVICE_NOT_RUNNING;
    public static HResult CO_E_CLASS_CREATE_FAILED;
    public static HResult CO_E_SCM_ERROR;
    public static HResult CO_E_SCM_RPC_FAILURE;
    public static HResult CO_E_BAD_PATH;
    public static HResult CO_E_SERVER_EXEC_FAILURE;
    public static HResult CO_E_OBJSRV_RPC_FAILURE;
    public static HResult MK_E_NO_NORMALIZED;
    public static HResult CO_E_SERVER_STOPPING;
    public static HResult MEM_E_INVALID_ROOT;
    public static HResult MEM_E_INVALID_LINK;
    public static HResult MEM_E_INVALID_SIZE;
    public static HResult CO_S_NOTALLINTERFACES;
    public static HResult CO_S_MACHINENAMENOTFOUND;
    public static HResult DISP_E_UNKNOWNINTERFACE;
    public static HResult DISP_E_MEMBERNOTFOUND;
    public static HResult DISP_E_PARAMNOTFOUND;
    public static HResult DISP_E_TYPEMISMATCH;
    public static HResult DISP_E_UNKNOWNNAME;
    public static HResult DISP_E_NONAMEDARGS;
    public static HResult DISP_E_BADVARTYPE;
    public static HResult DISP_E_EXCEPTION;
    public static HResult DISP_E_OVERFLOW;
    public static HResult DISP_E_BADINDEX;
    public static HResult DISP_E_UNKNOWNLCID;
    public static HResult DISP_E_ARRAYISLOCKED;
    public static HResult DISP_E_BADPARAMCOUNT;
    public static HResult DISP_E_PARAMNOTOPTIONAL;
    public static HResult DISP_E_BADCALLEE;
    public static HResult DISP_E_NOTACOLLECTION;
    public static HResult DISP_E_DIVBYZERO;
    public static HResult DISP_E_BUFFERTOOSMALL;
    public static HResult TYPE_E_BUFFERTOOSMALL;
    public static HResult TYPE_E_FIELDNOTFOUND;
    public static HResult TYPE_E_INVDATAREAD;
    public static HResult TYPE_E_UNSUPFORMAT;
    public static HResult TYPE_E_REGISTRYACCESS;
    public static HResult TYPE_E_LIBNOTREGISTERED;
    public static HResult TYPE_E_UNDEFINEDTYPE;
    public static HResult TYPE_E_QUALIFIEDNAMEDISALLOWED;
    public static HResult TYPE_E_INVALIDSTATE;
    public static HResult TYPE_E_WRONGTYPEKIND;
    public static HResult TYPE_E_ELEMENTNOTFOUND;
    public static HResult TYPE_E_AMBIGUOUSNAME;
    public static HResult TYPE_E_NAMECONFLICT;
    public static HResult TYPE_E_UNKNOWNLCID;
    public static HResult TYPE_E_DLLFUNCTIONNOTFOUND;
    public static HResult TYPE_E_BADMODULEKIND;
    public static HResult TYPE_E_SIZETOOBIG;
    public static HResult TYPE_E_DUPLICATEID;
    public static HResult TYPE_E_INVALIDID;
    public static HResult TYPE_E_TYPEMISMATCH;
    public static HResult TYPE_E_OUTOFBOUNDS;
    public static HResult TYPE_E_IOERROR;
    public static HResult TYPE_E_CANTCREATETMPFILE;
    public static HResult TYPE_E_CANTLOADLIBRARY;
    public static HResult TYPE_E_INCONSISTENTPROPFUNCS;
    public static HResult TYPE_E_CIRCULARTYPE;
    public static HResult STG_E_INVALIDFUNCTION;
    public static HResult STG_E_FILENOTFOUND;
    public static HResult STG_E_PATHNOTFOUND;
    public static HResult STG_E_TOOMANYOPENFILES;
    public static HResult STG_E_ACCESSDENIED;
    public static HResult STG_E_INVALIDHANDLE;
    public static HResult STG_E_INSUFFICIENTMEMORY;
    public static HResult STG_E_INVALIDPOINTER;
    public static HResult STG_E_NOMOREFILES;
    public static HResult STG_E_DISKISWRITEPROTECTED;
    public static HResult STG_E_SEEKERROR;
    public static HResult STG_E_WRITEFAULT;
    public static HResult STG_E_READFAULT;
    public static HResult STG_E_SHAREVIOLATION;
    public static HResult STG_E_LOCKVIOLATION;
    public static HResult STG_E_FILEALREADYEXISTS;
    public static HResult STG_E_INVALIDPARAMETER;
    public static HResult STG_E_MEDIUMFULL;
    public static HResult STG_E_PROPSETMISMATCHED;
    public static HResult STG_E_ABNORMALAPIEXIT;
    public static HResult STG_E_INVALIDHEADER;
    public static HResult STG_E_INVALIDNAME;
    public static HResult STG_E_UNKNOWN;
    public static HResult STG_E_UNIMPLEMENTEDFUNCTION;
    public static HResult STG_E_INVALIDFLAG;
    public static HResult STG_E_INUSE;
    public static HResult STG_E_NOTCURRENT;
    public static HResult STG_E_REVERTED;
    public static HResult STG_E_CANTSAVE;
    public static HResult STG_E_OLDFORMAT;
    public static HResult STG_E_OLDDLL;
    public static HResult STG_E_SHAREREQUIRED;
    public static HResult STG_E_NOTFILEBASEDSTORAGE;
    public static HResult STG_E_EXTANTMARSHALLINGS;
    public static HResult STG_E_DOCFILECORRUPT;
    public static HResult STG_E_BADBASEADDRESS;
    public static HResult STG_E_DOCFILETOOLARGE;
    public static HResult STG_E_NOTSIMPLEFORMAT;
    public static HResult STG_E_INCOMPLETE;
    public static HResult STG_E_TERMINATED;
    public static HResult STG_S_CONVERTED;
    public static HResult STG_S_BLOCK;
    public static HResult STG_S_RETRYNOW;
    public static HResult STG_S_MONITORING;
    public static HResult STG_S_MULTIPLEOPENS;
    public static HResult STG_S_CONSOLIDATIONFAILED;
    public static HResult STG_S_CANNOTCONSOLIDATE;
    public static HResult STG_E_STATUS_COPY_PROTECTION_FAILURE;
    public static HResult STG_E_CSS_AUTHENTICATION_FAILURE;
    public static HResult STG_E_CSS_KEY_NOT_PRESENT;
    public static HResult STG_E_CSS_KEY_NOT_ESTABLISHED;
    public static HResult STG_E_CSS_SCRAMBLED_SECTOR;
    public static HResult STG_E_CSS_REGION_MISMATCH;
    public static HResult STG_E_RESETS_EXHAUSTED;
    public static HResult RPC_E_CALL_REJECTED;
    public static HResult RPC_E_CALL_CANCELED;
    public static HResult RPC_E_CANTPOST_INSENDCALL;
    public static HResult RPC_E_CANTCALLOUT_INASYNCCALL;
    public static HResult RPC_E_CANTCALLOUT_INEXTERNALCALL;
    public static HResult RPC_E_CONNECTION_TERMINATED;
    public static HResult RPC_E_SERVER_DIED;
    public static HResult RPC_E_CLIENT_DIED;
    public static HResult RPC_E_INVALID_DATAPACKET;
    public static HResult RPC_E_CANTTRANSMIT_CALL;
    public static HResult RPC_E_CLIENT_CANTMARSHAL_DATA;
    public static HResult RPC_E_CLIENT_CANTUNMARSHAL_DATA;
    public static HResult RPC_E_SERVER_CANTMARSHAL_DATA;
    public static HResult RPC_E_SERVER_CANTUNMARSHAL_DATA;
    public static HResult RPC_E_INVALID_DATA;
    public static HResult RPC_E_INVALID_PARAMETER;
    public static HResult RPC_E_CANTCALLOUT_AGAIN;
    public static HResult RPC_E_SERVER_DIED_DNE;
    public static HResult RPC_E_SYS_CALL_FAILED;
    public static HResult RPC_E_OUT_OF_RESOURCES;
    public static HResult RPC_E_ATTEMPTED_MULTITHREAD;
    public static HResult RPC_E_NOT_REGISTERED;
    public static HResult RPC_E_FAULT;
    public static HResult RPC_E_SERVERFAULT;
    public static HResult RPC_E_CHANGED_MODE;
    public static HResult RPC_E_INVALIDMETHOD;
    public static HResult RPC_E_DISCONNECTED;
    public static HResult RPC_E_RETRY;
    public static HResult RPC_E_SERVERCALL_RETRYLATER;
    public static HResult RPC_E_SERVERCALL_REJECTED;
    public static HResult RPC_E_INVALID_CALLDATA;
    public static HResult RPC_E_CANTCALLOUT_ININPUTSYNCCALL;
    public static HResult RPC_E_WRONG_THREAD;
    public static HResult RPC_E_THREAD_NOT_INIT;
    public static HResult RPC_E_VERSION_MISMATCH;
    public static HResult RPC_E_INVALID_HEADER;
    public static HResult RPC_E_INVALID_EXTENSION;
    public static HResult RPC_E_INVALID_IPID;
    public static HResult RPC_E_INVALID_OBJECT;
    public static HResult RPC_S_CALLPENDING;
    public static HResult RPC_S_WAITONTIMER;
    public static HResult RPC_E_CALL_COMPLETE;
    public static HResult RPC_E_UNSECURE_CALL;
    public static HResult RPC_E_TOO_LATE;
    public static HResult RPC_E_NO_GOOD_SECURITY_PACKAGES;
    public static HResult RPC_E_ACCESS_DENIED;
    public static HResult RPC_E_REMOTE_DISABLED;
    public static HResult RPC_E_INVALID_OBJREF;
    public static HResult RPC_E_NO_CONTEXT;
    public static HResult RPC_E_TIMEOUT;
    public static HResult RPC_E_NO_SYNC;
    public static HResult RPC_E_FULLSIC_REQUIRED;
    public static HResult RPC_E_INVALID_STD_NAME;
    public static HResult CO_E_FAILEDTOIMPERSONATE;
    public static HResult CO_E_FAILEDTOGETSECCTX;
    public static HResult CO_E_FAILEDTOOPENTHREADTOKEN;
    public static HResult CO_E_FAILEDTOGETTOKENINFO;
    public static HResult CO_E_TRUSTEEDOESNTMATCHCLIENT;
    public static HResult CO_E_FAILEDTOQUERYCLIENTBLANKET;
    public static HResult CO_E_FAILEDTOSETDACL;
    public static HResult CO_E_ACCESSCHECKFAILED;
    public static HResult CO_E_NETACCESSAPIFAILED;
    public static HResult CO_E_WRONGTRUSTEENAMESYNTAX;
    public static HResult CO_E_INVALIDSID;
    public static HResult CO_E_CONVERSIONFAILED;
    public static HResult CO_E_NOMATCHINGSIDFOUND;
    public static HResult CO_E_LOOKUPACCSIDFAILED;
    public static HResult CO_E_NOMATCHINGNAMEFOUND;
    public static HResult CO_E_LOOKUPACCNAMEFAILED;
    public static HResult CO_E_SETSERLHNDLFAILED;
    public static HResult CO_E_FAILEDTOGETWINDIR;
    public static HResult CO_E_PATHTOOLONG;
    public static HResult CO_E_FAILEDTOGENUUID;
    public static HResult CO_E_FAILEDTOCREATEFILE;
    public static HResult CO_E_FAILEDTOCLOSEHANDLE;
    public static HResult CO_E_EXCEEDSYSACLLIMIT;
    public static HResult CO_E_ACESINWRONGORDER;
    public static HResult CO_E_INCOMPATIBLESTREAMVERSION;
    public static HResult CO_E_FAILEDTOOPENPROCESSTOKEN;
    public static HResult CO_E_DECODEFAILED;
    public static HResult CO_E_ACNOTINITIALIZED;
    public static HResult CO_E_CANCEL_DISABLED;
    public static HResult RPC_E_UNEXPECTED;
    public static HResult ERROR_AUDITING_DISABLED;
    public static HResult ERROR_ALL_SIDS_FILTERED;
    public static HResult NTE_BAD_UID;
    public static HResult NTE_BAD_HASH;
    public static HResult NTE_BAD_KEY;
    public static HResult NTE_BAD_LEN;
    public static HResult NTE_BAD_DATA;
    public static HResult NTE_BAD_SIGNATURE;
    public static HResult NTE_BAD_VER;
    public static HResult NTE_BAD_ALGID;
    public static HResult NTE_BAD_FLAGS;
    public static HResult NTE_BAD_TYPE;
    public static HResult NTE_BAD_KEY_STATE;
    public static HResult NTE_BAD_HASH_STATE;
    public static HResult NTE_NO_KEY;
    public static HResult NTE_NO_MEMORY;
    public static HResult NTE_EXISTS;
    public static HResult NTE_PERM;
    public static HResult NTE_NOT_FOUND;
    public static HResult NTE_DOUBLE_ENCRYPT;
    public static HResult NTE_BAD_PROVIDER;
    public static HResult NTE_BAD_PROV_TYPE;
    public static HResult NTE_BAD_PUBLIC_KEY;
    public static HResult NTE_BAD_KEYSET;
    public static HResult NTE_PROV_TYPE_NOT_DEF;
    public static HResult NTE_PROV_TYPE_ENTRY_BAD;
    public static HResult NTE_KEYSET_NOT_DEF;
    public static HResult NTE_KEYSET_ENTRY_BAD;
    public static HResult NTE_PROV_TYPE_NO_MATCH;
    public static HResult NTE_SIGNATURE_FILE_BAD;
    public static HResult NTE_PROVIDER_DLL_FAIL;
    public static HResult NTE_PROV_DLL_NOT_FOUND;
    public static HResult NTE_BAD_KEYSET_PARAM;
    public static HResult NTE_FAIL;
    public static HResult NTE_SYS_ERR;
    public static HResult NTE_SILENT_CONTEXT;
    public static HResult NTE_TOKEN_KEYSET_STORAGE_FULL;
    public static HResult NTE_TEMPORARY_PROFILE;
    public static HResult NTE_FIXEDPARAMETER;
    public static HResult SEC_E_INSUFFICIENT_MEMORY;
    public static HResult SEC_E_INVALID_HANDLE;
    public static HResult SEC_E_UNSUPPORTED_FUNCTION;
    public static HResult SEC_E_TARGET_UNKNOWN;
    public static HResult SEC_E_INTERNAL_ERROR;
    public static HResult SEC_E_SECPKG_NOT_FOUND;
    public static HResult SEC_E_NOT_OWNER;
    public static HResult SEC_E_CANNOT_INSTALL;
    public static HResult SEC_E_INVALID_TOKEN;
    public static HResult SEC_E_CANNOT_PACK;
    public static HResult SEC_E_QOP_NOT_SUPPORTED;
    public static HResult SEC_E_NO_IMPERSONATION;
    public static HResult SEC_E_LOGON_DENIED;
    public static HResult SEC_E_UNKNOWN_CREDENTIALS;
    public static HResult SEC_E_NO_CREDENTIALS;
    public static HResult SEC_E_MESSAGE_ALTERED;
    public static HResult SEC_E_OUT_OF_SEQUENCE;
    public static HResult SEC_E_NO_AUTHENTICATING_AUTHORITY;
    public static HResult SEC_I_CONTINUE_NEEDED;
    public static HResult SEC_I_COMPLETE_NEEDED;
    public static HResult SEC_I_COMPLETE_AND_CONTINUE;
    public static HResult SEC_I_LOCAL_LOGON;
    public static HResult SEC_E_BAD_PKGID;
    public static HResult SEC_E_CONTEXT_EXPIRED;
    public static HResult SEC_I_CONTEXT_EXPIRED;
    public static HResult SEC_E_INCOMPLETE_MESSAGE;
    public static HResult SEC_E_INCOMPLETE_CREDENTIALS;
    public static HResult SEC_E_BUFFER_TOO_SMALL;
    public static HResult SEC_I_INCOMPLETE_CREDENTIALS;
    public static HResult SEC_I_RENEGOTIATE;
    public static HResult SEC_E_WRONG_PRINCIPAL;
    public static HResult SEC_I_NO_LSA_CONTEXT;
    public static HResult SEC_E_TIME_SKEW;
    public static HResult SEC_E_UNTRUSTED_ROOT;
    public static HResult SEC_E_ILLEGAL_MESSAGE;
    public static HResult SEC_E_CERT_UNKNOWN;
    public static HResult SEC_E_CERT_EXPIRED;
    public static HResult SEC_E_ENCRYPT_FAILURE;
    public static HResult SEC_E_DECRYPT_FAILURE;
    public static HResult SEC_E_ALGORITHM_MISMATCH;
    public static HResult SEC_E_SECURITY_QOS_FAILED;
    public static HResult SEC_E_UNFINISHED_CONTEXT_DELETED;
    public static HResult SEC_E_NO_TGT_REPLY;
    public static HResult SEC_E_NO_IP_ADDRESSES;
    public static HResult SEC_E_WRONG_CREDENTIAL_HANDLE;
    public static HResult SEC_E_CRYPTO_SYSTEM_INVALID;
    public static HResult SEC_E_MAX_REFERRALS_EXCEEDED;
    public static HResult SEC_E_MUST_BE_KDC;
    public static HResult SEC_E_STRONG_CRYPTO_NOT_SUPPORTED;
    public static HResult SEC_E_TOO_MANY_PRINCIPALS;
    public static HResult SEC_E_NO_PA_DATA;
    public static HResult SEC_E_PKINIT_NAME_MISMATCH;
    public static HResult SEC_E_SMARTCARD_LOGON_REQUIRED;
    public static HResult SEC_E_SHUTDOWN_IN_PROGRESS;
    public static HResult SEC_E_KDC_INVALID_REQUEST;
    public static HResult SEC_E_KDC_UNABLE_TO_REFER;
    public static HResult SEC_E_KDC_UNKNOWN_ETYPE;
    public static HResult SEC_E_UNSUPPORTED_PREAUTH;
    public static HResult SEC_E_DELEGATION_REQUIRED;
    public static HResult SEC_E_BAD_BINDINGS;
    public static HResult SEC_E_MULTIPLE_ACCOUNTS;
    public static HResult SEC_E_NO_KERB_KEY;
    public static HResult SEC_E_CERT_WRONG_USAGE;
    public static HResult SEC_E_DOWNGRADE_DETECTED;
    public static HResult SEC_E_SMARTCARD_CERT_REVOKED;
    public static HResult SEC_E_ISSUING_CA_UNTRUSTED;
    public static HResult SEC_E_REVOCATION_OFFLINE_C;
    public static HResult SEC_E_PKINIT_CLIENT_FAILURE;
    public static HResult SEC_E_SMARTCARD_CERT_EXPIRED;
    public static HResult SEC_E_NO_S4U_PROT_SUPPORT;
    public static HResult SEC_E_CROSSREALM_DELEGATION_FAILURE;
    public static HResult SEC_E_REVOCATION_OFFLINE_KDC;
    public static HResult SEC_E_ISSUING_CA_UNTRUSTED_KDC;
    public static HResult SEC_E_KDC_CERT_EXPIRED;
    public static HResult SEC_E_KDC_CERT_REVOKED;
    public static HResult CRYPT_E_MSG_ERROR;
    public static HResult CRYPT_E_UNKNOWN_ALGO;
    public static HResult CRYPT_E_OID_FORMAT;
    public static HResult CRYPT_E_INVALID_MSG_TYPE;
    public static HResult CRYPT_E_UNEXPECTED_ENCODING;
    public static HResult CRYPT_E_AUTH_ATTR_MISSING;
    public static HResult CRYPT_E_HASH_VALUE;
    public static HResult CRYPT_E_INVALID_INDEX;
    public static HResult CRYPT_E_ALREADY_DECRYPTED;
    public static HResult CRYPT_E_NOT_DECRYPTED;
    public static HResult CRYPT_E_RECIPIENT_NOT_FOUND;
    public static HResult CRYPT_E_CONTROL_TYPE;
    public static HResult CRYPT_E_ISSUER_SERIALNUMBER;
    public static HResult CRYPT_E_SIGNER_NOT_FOUND;
    public static HResult CRYPT_E_ATTRIBUTES_MISSING;
    public static HResult CRYPT_E_STREAM_MSG_NOT_READY;
    public static HResult CRYPT_E_STREAM_INSUFFICIENT_DATA;
    public static HResult CRYPT_I_NEW_PROTECTION_REQUIRED;
    public static HResult CRYPT_E_BAD_LEN;
    public static HResult CRYPT_E_BAD_ENCODE;
    public static HResult CRYPT_E_FILE_ERROR;
    public static HResult CRYPT_E_NOT_FOUND;
    public static HResult CRYPT_E_EXISTS;
    public static HResult CRYPT_E_NO_PROVIDER;
    public static HResult CRYPT_E_SELF_SIGNED;
    public static HResult CRYPT_E_DELETED_PREV;
    public static HResult CRYPT_E_NO_MATCH;
    public static HResult CRYPT_E_UNEXPECTED_MSG_TYPE;
    public static HResult CRYPT_E_NO_KEY_PROPERTY;
    public static HResult CRYPT_E_NO_DECRYPT_CERT;
    public static HResult CRYPT_E_BAD_MSG;
    public static HResult CRYPT_E_NO_SIGNER;
    public static HResult CRYPT_E_PENDING_CLOSE;
    public static HResult CRYPT_E_REVOKED;
    public static HResult CRYPT_E_NO_REVOCATION_DLL;
    public static HResult CRYPT_E_NO_REVOCATION_CHECK;
    public static HResult CRYPT_E_REVOCATION_OFFLINE;
    public static HResult CRYPT_E_NOT_IN_REVOCATION_DATABASE;
    public static HResult CRYPT_E_INVALID_NUMERIC_STRING;
    public static HResult CRYPT_E_INVALID_PRINTABLE_STRING;
    public static HResult CRYPT_E_INVALID_IA5_STRING;
    public static HResult CRYPT_E_INVALID_X500_STRING;
    public static HResult CRYPT_E_NOT_CHAR_STRING;
    public static HResult CRYPT_E_FILERESIZED;
    public static HResult CRYPT_E_SECURITY_SETTINGS;
    public static HResult CRYPT_E_NO_VERIFY_USAGE_DLL;
    public static HResult CRYPT_E_NO_VERIFY_USAGE_CHECK;
    public static HResult CRYPT_E_VERIFY_USAGE_OFFLINE;
    public static HResult CRYPT_E_NOT_IN_CTL;
    public static HResult CRYPT_E_NO_TRUSTED_SIGNER;
    public static HResult CRYPT_E_MISSING_PUBKEY_PARA;
    public static HResult CRYPT_E_OSS_ERROR;
    public static HResult OSS_MORE_BUF;
    public static HResult OSS_NEGATIVE_UINTEGER;
    public static HResult OSS_PDU_RANGE;
    public static HResult OSS_MORE_INPUT;
    public static HResult OSS_DATA_ERROR;
    public static HResult OSS_BAD_ARG;
    public static HResult OSS_BAD_VERSION;
    public static HResult OSS_OUT_MEMORY;
    public static HResult OSS_PDU_MISMATCH;
    public static HResult OSS_LIMITED;
    public static HResult OSS_BAD_PTR;
    public static HResult OSS_BAD_TIME;
    public static HResult OSS_INDEFINITE_NOT_SUPPORTED;
    public static HResult OSS_MEM_ERROR;
    public static HResult OSS_BAD_TABLE;
    public static HResult OSS_TOO_LONG;
    public static HResult OSS_CONSTRAINT_VIOLATED;
    public static HResult OSS_FATAL_ERROR;
    public static HResult OSS_ACCESS_SERIALIZATION_ERROR;
    public static HResult OSS_NULL_TBL;
    public static HResult OSS_NULL_FCN;
    public static HResult OSS_BAD_ENCRULES;
    public static HResult OSS_UNAVAIL_ENCRULES;
    public static HResult OSS_CANT_OPEN_TRACE_WINDOW;
    public static HResult OSS_UNIMPLEMENTED;
    public static HResult OSS_OID_DLL_NOT_LINKED;
    public static HResult OSS_CANT_OPEN_TRACE_FILE;
    public static HResult OSS_TRACE_FILE_ALREADY_OPEN;
    public static HResult OSS_TABLE_MISMATCH;
    public static HResult OSS_TYPE_NOT_SUPPORTED;
    public static HResult OSS_REAL_DLL_NOT_LINKED;
    public static HResult OSS_REAL_CODE_NOT_LINKED;
    public static HResult OSS_OUT_OF_RANGE;
    public static HResult OSS_COPIER_DLL_NOT_LINKED;
    public static HResult OSS_CONSTRAINT_DLL_NOT_LINKED;
    public static HResult OSS_COMPARATOR_DLL_NOT_LINKED;
    public static HResult OSS_COMPARATOR_CODE_NOT_LINKED;
    public static HResult OSS_MEM_MGR_DLL_NOT_LINKED;
    public static HResult OSS_PDV_DLL_NOT_LINKED;
    public static HResult OSS_PDV_CODE_NOT_LINKED;
    public static HResult OSS_API_DLL_NOT_LINKED;
    public static HResult OSS_BERDER_DLL_NOT_LINKED;
    public static HResult OSS_PER_DLL_NOT_LINKED;
    public static HResult OSS_OPEN_TYPE_ERROR;
    public static HResult OSS_MUTEX_NOT_CREATED;
    public static HResult OSS_CANT_CLOSE_TRACE_FILE;
    public static HResult CRYPT_E_ASN1_ERROR;
    public static HResult CRYPT_E_ASN1_INTERNAL;
    public static HResult CRYPT_E_ASN1_EOD;
    public static HResult CRYPT_E_ASN1_CORRUPT;
    public static HResult CRYPT_E_ASN1_LARGE;
    public static HResult CRYPT_E_ASN1_CONSTRAINT;
    public static HResult CRYPT_E_ASN1_MEMORY;
    public static HResult CRYPT_E_ASN1_OVERFLOW;
    public static HResult CRYPT_E_ASN1_BADPDU;
    public static HResult CRYPT_E_ASN1_BADARGS;
    public static HResult CRYPT_E_ASN1_BADREAL;
    public static HResult CRYPT_E_ASN1_BADTAG;
    public static HResult CRYPT_E_ASN1_CHOICE;
    public static HResult CRYPT_E_ASN1_RULE;
    public static HResult CRYPT_E_ASN1_UTF8;
    public static HResult CRYPT_E_ASN1_PDU_TYPE;
    public static HResult CRYPT_E_ASN1_NYI;
    public static HResult CRYPT_E_ASN1_EXTENDED;
    public static HResult CRYPT_E_ASN1_NOEOD;
    public static HResult CERTSRV_E_BAD_REQUESTSUBJECT;
    public static HResult CERTSRV_E_NO_REQUEST;
    public static HResult CERTSRV_E_BAD_REQUESTSTATUS;
    public static HResult CERTSRV_E_PROPERTY_EMPTY;
    public static HResult CERTSRV_E_INVALID_CA_CERTIFICATE;
    public static HResult CERTSRV_E_SERVER_SUSPENDED;
    public static HResult CERTSRV_E_ENCODING_LENGTH;
    public static HResult CERTSRV_E_ROLECONFLICT;
    public static HResult CERTSRV_E_RESTRICTEDOFFICER;
    public static HResult CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED;
    public static HResult CERTSRV_E_NO_VALID_KRA;
    public static HResult CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL;
    public static HResult CERTSRV_E_NO_CAADMIN_DEFINED;
    public static HResult CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE;
    public static HResult CERTSRV_E_NO_DB_SESSIONS;
    public static HResult CERTSRV_E_ALIGNMENT_FAULT;
    public static HResult CERTSRV_E_ENROLL_DENIED;
    public static HResult CERTSRV_E_TEMPLATE_DENIED;
    public static HResult CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE;
    public static HResult CERTSRV_E_UNSUPPORTED_CERT_TYPE;
    public static HResult CERTSRV_E_NO_CERT_TYPE;
    public static HResult CERTSRV_E_TEMPLATE_CONFLICT;
    public static HResult CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED;
    public static HResult CERTSRV_E_ARCHIVED_KEY_REQUIRED;
    public static HResult CERTSRV_E_SMIME_REQUIRED;
    public static HResult CERTSRV_E_BAD_RENEWAL_SUBJECT;
    public static HResult CERTSRV_E_BAD_TEMPLATE_VERSION;
    public static HResult CERTSRV_E_TEMPLATE_POLICY_REQUIRED;
    public static HResult CERTSRV_E_SIGNATURE_POLICY_REQUIRED;
    public static HResult CERTSRV_E_SIGNATURE_COUNT;
    public static HResult CERTSRV_E_SIGNATURE_REJECTED;
    public static HResult CERTSRV_E_ISSUANCE_POLICY_REQUIRED;
    public static HResult CERTSRV_E_SUBJECT_UPN_REQUIRED;
    public static HResult CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED;
    public static HResult CERTSRV_E_SUBJECT_DNS_REQUIRED;
    public static HResult CERTSRV_E_ARCHIVED_KEY_UNEXPECTED;
    public static HResult CERTSRV_E_KEY_LENGTH;
    public static HResult CERTSRV_E_SUBJECT_EMAIL_REQUIRED;
    public static HResult CERTSRV_E_UNKNOWN_CERT_TYPE;
    public static HResult CERTSRV_E_CERT_TYPE_OVERLAP;
    public static HResult XENROLL_E_KEY_NOT_EXPORTABLE;
    public static HResult XENROLL_E_CANNOT_ADD_ROOT_CERT;
    public static HResult XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND;
    public static HResult XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH;
    public static HResult XENROLL_E_RESPONSE_KA_HASH_MISMATCH;
    public static HResult XENROLL_E_KEYSPEC_SMIME_MISMATCH;
    public static HResult TRUST_E_SYSTEM_ERROR;
    public static HResult TRUST_E_NO_SIGNER_CERT;
    public static HResult TRUST_E_COUNTER_SIGNER;
    public static HResult TRUST_E_CERT_SIGNATURE;
    public static HResult TRUST_E_TIME_STAMP;
    public static HResult TRUST_E_BAD_DIGEST;
    public static HResult TRUST_E_BASIC_CONSTRAINTS;
    public static HResult TRUST_E_FINANCIAL_CRITERIA;
    public static HResult MSSIPOTF_E_OUTOFMEMRANGE;
    public static HResult MSSIPOTF_E_CANTGETOBJECT;
    public static HResult MSSIPOTF_E_NOHEADTABLE;
    public static HResult MSSIPOTF_E_BAD_MAGICNUMBER;
    public static HResult MSSIPOTF_E_BAD_OFFSET_TABLE;
    public static HResult MSSIPOTF_E_TABLE_TAGORDER;
    public static HResult MSSIPOTF_E_TABLE_LONGWORD;
    public static HResult MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT;
    public static HResult MSSIPOTF_E_TABLES_OVERLAP;
    public static HResult MSSIPOTF_E_TABLE_PADBYTES;
    public static HResult MSSIPOTF_E_FILETOOSMALL;
    public static HResult MSSIPOTF_E_TABLE_CHECKSUM;
    public static HResult MSSIPOTF_E_FILE_CHECKSUM;
    public static HResult MSSIPOTF_E_FAILED_POLICY;
    public static HResult MSSIPOTF_E_FAILED_HINTS_CHECK;
    public static HResult MSSIPOTF_E_NOT_OPENTYPE;
    public static HResult MSSIPOTF_E_FILE;
    public static HResult MSSIPOTF_E_CRYPT;
    public static HResult MSSIPOTF_E_BADVERSION;
    public static HResult MSSIPOTF_E_DSIG_STRUCTURE;
    public static HResult MSSIPOTF_E_PCONST_CHECK;
    public static HResult MSSIPOTF_E_STRUCTURE;
    public static HResult TRUST_E_PROVIDER_UNKNOWN;
    public static HResult TRUST_E_ACTION_UNKNOWN;
    public static HResult TRUST_E_SUBJECT_FORM_UNKNOWN;
    public static HResult TRUST_E_SUBJECT_NOT_TRUSTED;
    public static HResult DIGSIG_E_ENCODE;
    public static HResult DIGSIG_E_DECODE;
    public static HResult DIGSIG_E_EXTENSIBILITY;
    public static HResult DIGSIG_E_CRYPTO;
    public static HResult PERSIST_E_SIZEDEFINITE;
    public static HResult PERSIST_E_SIZEINDEFINITE;
    public static HResult PERSIST_E_NOTSELFSIZING;
    public static HResult TRUST_E_NOSIGNATURE;
    public static HResult CERT_E_EXPIRED;
    public static HResult CERT_E_VALIDITYPERIODNESTING;
    public static HResult CERT_E_ROLE;
    public static HResult CERT_E_PATHLENCONST;
    public static HResult CERT_E_CRITICAL;
    public static HResult CERT_E_PURPOSE;
    public static HResult CERT_E_ISSUERCHAINING;
    public static HResult CERT_E_MALFORMED;
    public static HResult CERT_E_UNTRUSTEDROOT;
    public static HResult CERT_E_CHAINING;
    public static HResult TRUST_E_FAIL;
    public static HResult CERT_E_REVOKED;
    public static HResult CERT_E_UNTRUSTEDTESTROOT;
    public static HResult CERT_E_REVOCATION_FAILURE;
    public static HResult CERT_E_CN_NO_MATCH;
    public static HResult CERT_E_WRONG_USAGE;
    public static HResult TRUST_E_EXPLICIT_DISTRUST;
    public static HResult CERT_E_UNTRUSTEDCA;
    public static HResult CERT_E_INVALID_POLICY;
    public static HResult CERT_E_INVALID_NAME;
    public static HResult SPAPI_E_EXPECTED_SECTION_NAME;
    public static HResult SPAPI_E_BAD_SECTION_NAME_LINE;
    public static HResult SPAPI_E_SECTION_NAME_TOO_LONG;
    public static HResult SPAPI_E_GENERAL_SYNTAX;
    public static HResult SPAPI_E_WRONG_INF_STYLE;
    public static HResult SPAPI_E_SECTION_NOT_FOUND;
    public static HResult SPAPI_E_LINE_NOT_FOUND;
    public static HResult SPAPI_E_NO_BACKUP;
    public static HResult SPAPI_E_NO_ASSOCIATED_CLASS;
    public static HResult SPAPI_E_CLASS_MISMATCH;
    public static HResult SPAPI_E_DUPLICATE_FOUND;
    public static HResult SPAPI_E_NO_DRIVER_SELECTED;
    public static HResult SPAPI_E_KEY_DOES_NOT_EXIST;
    public static HResult SPAPI_E_INVALID_DEVINST_NAME;
    public static HResult SPAPI_E_INVALID_CLASS;
    public static HResult SPAPI_E_DEVINST_ALREADY_EXISTS;
    public static HResult SPAPI_E_DEVINFO_NOT_REGISTERED;
    public static HResult SPAPI_E_INVALID_REG_PROPERTY;
    public static HResult SPAPI_E_NO_INF;
    public static HResult SPAPI_E_NO_SUCH_DEVINST;
    public static HResult SPAPI_E_CANT_LOAD_CLASS_ICON;
    public static HResult SPAPI_E_INVALID_CLASS_INSTALLER;
    public static HResult SPAPI_E_DI_DO_DEFAULT;
    public static HResult SPAPI_E_DI_NOFILECOPY;
    public static HResult SPAPI_E_INVALID_HWPROFILE;
    public static HResult SPAPI_E_NO_DEVICE_SELECTED;
    public static HResult SPAPI_E_DEVINFO_LIST_LOCKED;
    public static HResult SPAPI_E_DEVINFO_DATA_LOCKED;
    public static HResult SPAPI_E_DI_BAD_PATH;
    public static HResult SPAPI_E_NO_CLASSINSTALL_PARAMS;
    public static HResult SPAPI_E_FILEQUEUE_LOCKED;
    public static HResult SPAPI_E_BAD_SERVICE_INSTALLSECT;
    public static HResult SPAPI_E_NO_CLASS_DRIVER_LIST;
    public static HResult SPAPI_E_NO_ASSOCIATED_SERVICE;
    public static HResult SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE;
    public static HResult SPAPI_E_DEVICE_INTERFACE_ACTIVE;
    public static HResult SPAPI_E_DEVICE_INTERFACE_REMOVED;
    public static HResult SPAPI_E_BAD_INTERFACE_INSTALLSECT;
    public static HResult SPAPI_E_NO_SUCH_INTERFACE_CLASS;
    public static HResult SPAPI_E_INVALID_REFERENCE_STRING;
    public static HResult SPAPI_E_INVALID_MACHINENAME;
    public static HResult SPAPI_E_REMOTE_COMM_FAILURE;
    public static HResult SPAPI_E_MACHINE_UNAVAILABLE;
    public static HResult SPAPI_E_NO_CONFIGMGR_SERVICES;
    public static HResult SPAPI_E_INVALID_PROPPAGE_PROVIDER;
    public static HResult SPAPI_E_NO_SUCH_DEVICE_INTERFACE;
    public static HResult SPAPI_E_DI_POSTPROCESSING_REQUIRED;
    public static HResult SPAPI_E_INVALID_COINSTALLER;
    public static HResult SPAPI_E_NO_COMPAT_DRIVERS;
    public static HResult SPAPI_E_NO_DEVICE_ICON;
    public static HResult SPAPI_E_INVALID_INF_LOGCONFIG;
    public static HResult SPAPI_E_DI_DONT_INSTALL;
    public static HResult SPAPI_E_INVALID_FILTER_DRIVER;
    public static HResult SPAPI_E_NON_WINDOWS_NT_DRIVER;
    public static HResult SPAPI_E_NON_WINDOWS_DRIVER;
    public static HResult SPAPI_E_NO_CATALOG_FOR_OEM_INF;
    public static HResult SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE;
    public static HResult SPAPI_E_NOT_DISABLEABLE;
    public static HResult SPAPI_E_CANT_REMOVE_DEVINST;
    public static HResult SPAPI_E_INVALID_TARGET;
    public static HResult SPAPI_E_DRIVER_NONNATIVE;
    public static HResult SPAPI_E_IN_WOW64;
    public static HResult SPAPI_E_SET_SYSTEM_RESTORE_POINT;
    public static HResult SPAPI_E_INCORRECTLY_COPIED_INF;
    public static HResult SPAPI_E_SCE_DISABLED;
    public static HResult SPAPI_E_UNKNOWN_EXCEPTION;
    public static HResult SPAPI_E_PNP_REGISTRY_ERROR;
    public static HResult SPAPI_E_REMOTE_REQUEST_UNSUPPORTED;
    public static HResult SPAPI_E_NOT_AN_INSTALLED_OEM_INF;
    public static HResult SPAPI_E_INF_IN_USE_BY_DEVICES;
    public static HResult SPAPI_E_DI_FUNCTION_OBSOLETE;
    public static HResult SPAPI_E_NO_AUTHENTICODE_CATALOG;
    public static HResult SPAPI_E_AUTHENTICODE_DISALLOWED;
    public static HResult SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER;
    public static HResult SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED;
    public static HResult SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED;
    public static HResult SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH;
    public static HResult SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE;
    public static HResult SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW;
    public static HResult SPAPI_E_ERROR_NOT_INSTALLED;
    public static HResult SCARD_F_INTERNAL_ERROR;
    public static HResult SCARD_E_CANCELLED;
    public static HResult SCARD_E_INVALID_HANDLE;
    public static HResult SCARD_E_INVALID_PARAMETER;
    public static HResult SCARD_E_INVALID_TARGET;
    public static HResult SCARD_E_NO_MEMORY;
    public static HResult SCARD_F_WAITED_TOO_LONG;
    public static HResult SCARD_E_INSUFFICIENT_BUFFER;
    public static HResult SCARD_E_UNKNOWN_READER;
    public static HResult SCARD_E_TIMEOUT;
    public static HResult SCARD_E_SHARING_VIOLATION;
    public static HResult SCARD_E_NO_SMARTCARD;
    public static HResult SCARD_E_UNKNOWN_CARD;
    public static HResult SCARD_E_CANT_DISPOSE;
    public static HResult SCARD_E_PROTO_MISMATCH;
    public static HResult SCARD_E_NOT_READY;
    public static HResult SCARD_E_INVALID_VALUE;
    public static HResult SCARD_E_SYSTEM_CANCELLED;
    public static HResult SCARD_F_COMM_ERROR;
    public static HResult SCARD_F_UNKNOWN_ERROR;
    public static HResult SCARD_E_INVALID_ATR;
    public static HResult SCARD_E_NOT_TRANSACTED;
    public static HResult SCARD_E_READER_UNAVAILABLE;
    public static HResult SCARD_P_SHUTDOWN;
    public static HResult SCARD_E_PCI_TOO_SMALL;
    public static HResult SCARD_E_READER_UNSUPPORTED;
    public static HResult SCARD_E_DUPLICATE_READER;
    public static HResult SCARD_E_CARD_UNSUPPORTED;
    public static HResult SCARD_E_NO_SERVICE;
    public static HResult SCARD_E_SERVICE_STOPPED;
    public static HResult SCARD_E_UNEXPECTED;
    public static HResult SCARD_E_ICC_INSTALLATION;
    public static HResult SCARD_E_ICC_CREATEORDER;
    public static HResult SCARD_E_UNSUPPORTED_FEATURE;
    public static HResult SCARD_E_DIR_NOT_FOUND;
    public static HResult SCARD_E_FILE_NOT_FOUND;
    public static HResult SCARD_E_NO_DIR;
    public static HResult SCARD_E_NO_FILE;
    public static HResult SCARD_E_NO_ACCESS;
    public static HResult SCARD_E_WRITE_TOO_MANY;
    public static HResult SCARD_E_BAD_SEEK;
    public static HResult SCARD_E_INVALID_CHV;
    public static HResult SCARD_E_UNKNOWN_RES_MNG;
    public static HResult SCARD_E_NO_SUCH_CERTIFICATE;
    public static HResult SCARD_E_CERTIFICATE_UNAVAILABLE;
    public static HResult SCARD_E_NO_READERS_AVAILABLE;
    public static HResult SCARD_E_COMM_DATA_LOST;
    public static HResult SCARD_E_NO_KEY_CONTAINER;
    public static HResult SCARD_E_SERVER_TOO_BUSY;
    public static HResult SCARD_W_UNSUPPORTED_CARD;
    public static HResult SCARD_W_UNRESPONSIVE_CARD;
    public static HResult SCARD_W_UNPOWERED_CARD;
    public static HResult SCARD_W_RESET_CARD;
    public static HResult SCARD_W_REMOVED_CARD;
    public static HResult SCARD_W_SECURITY_VIOLATION;
    public static HResult SCARD_W_WRONG_CHV;
    public static HResult SCARD_W_CHV_BLOCKED;
    public static HResult SCARD_W_EOF;
    public static HResult SCARD_W_CANCELLED_BY_USER;
    public static HResult SCARD_W_CARD_NOT_AUTHENTICATED;
    public static HResult COMADMIN_E_OBJECTERRORS;
    public static HResult COMADMIN_E_OBJECTINVALID;
    public static HResult COMADMIN_E_KEYMISSING;
    public static HResult COMADMIN_E_ALREADYINSTALLED;
    public static HResult COMADMIN_E_APP_FILE_WRITEFAIL;
    public static HResult COMADMIN_E_APP_FILE_READFAIL;
    public static HResult COMADMIN_E_APP_FILE_VERSION;
    public static HResult COMADMIN_E_BADPATH;
    public static HResult COMADMIN_E_APPLICATIONEXISTS;
    public static HResult COMADMIN_E_ROLEEXISTS;
    public static HResult COMADMIN_E_CANTCOPYFILE;
    public static HResult COMADMIN_E_NOUSER;
    public static HResult COMADMIN_E_INVALIDUSERIDS;
    public static HResult COMADMIN_E_NOREGISTRYCLSID;
    public static HResult COMADMIN_E_BADREGISTRYPROGID;
    public static HResult COMADMIN_E_AUTHENTICATIONLEVEL;
    public static HResult COMADMIN_E_USERPASSWDNOTVALID;
    public static HResult COMADMIN_E_CLSIDORIIDMISMATCH;
    public static HResult COMADMIN_E_REMOTEINTERFACE;
    public static HResult COMADMIN_E_DLLREGISTERSERVER;
    public static HResult COMADMIN_E_NOSERVERSHARE;
    public static HResult COMADMIN_E_DLLLOADFAILED;
    public static HResult COMADMIN_E_BADREGISTRYLIBID;
    public static HResult COMADMIN_E_APPDIRNOTFOUND;
    public static HResult COMADMIN_E_REGISTRARFAILED;
    public static HResult COMADMIN_E_COMPFILE_DOESNOTEXIST;
    public static HResult COMADMIN_E_COMPFILE_LOADDLLFAIL;
    public static HResult COMADMIN_E_COMPFILE_GETCLASSOBJ;
    public static HResult COMADMIN_E_COMPFILE_CLASSNOTAVAIL;
    public static HResult COMADMIN_E_COMPFILE_BADTLB;
    public static HResult COMADMIN_E_COMPFILE_NOTINSTALLABLE;
    public static HResult COMADMIN_E_NOTCHANGEABLE;
    public static HResult COMADMIN_E_NOTDELETEABLE;
    public static HResult COMADMIN_E_SESSION;
    public static HResult COMADMIN_E_COMP_MOVE_LOCKED;
    public static HResult COMADMIN_E_COMP_MOVE_BAD_DEST;
    public static HResult COMADMIN_E_REGISTERTLB;
    public static HResult COMADMIN_E_SYSTEMAPP;
    public static HResult COMADMIN_E_COMPFILE_NOREGISTRAR;
    public static HResult COMADMIN_E_COREQCOMPINSTALLED;
    public static HResult COMADMIN_E_SERVICENOTINSTALLED;
    public static HResult COMADMIN_E_PROPERTYSAVEFAILED;
    public static HResult COMADMIN_E_OBJECTEXISTS;
    public static HResult COMADMIN_E_COMPONENTEXISTS;
    public static HResult COMADMIN_E_REGFILE_CORRUPT;
    public static HResult COMADMIN_E_PROPERTY_OVERFLOW;
    public static HResult COMADMIN_E_NOTINREGISTRY;
    public static HResult COMADMIN_E_OBJECTNOTPOOLABLE;
    public static HResult COMADMIN_E_APPLID_MATCHES_CLSID;
    public static HResult COMADMIN_E_ROLE_DOES_NOT_EXIST;
    public static HResult COMADMIN_E_START_APP_NEEDS_COMPONENTS;
    public static HResult COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM;
    public static HResult COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY;
    public static HResult COMADMIN_E_CAN_NOT_START_APP;
    public static HResult COMADMIN_E_CAN_NOT_EXPORT_SYS_APP;
    public static HResult COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT;
    public static HResult COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER;
    public static HResult COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE;
    public static HResult COMADMIN_E_BASE_PARTITION_ONLY;
    public static HResult COMADMIN_E_START_APP_DISABLED;
    public static HResult COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME;
    public static HResult COMADMIN_E_CAT_INVALID_PARTITION_NAME;
    public static HResult COMADMIN_E_CAT_PARTITION_IN_USE;
    public static HResult COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES;
    public static HResult COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED;
    public static HResult COMADMIN_E_AMBIGUOUS_APPLICATION_NAME;
    public static HResult COMADMIN_E_AMBIGUOUS_PARTITION_NAME;
    public static HResult COMADMIN_E_REGDB_NOTINITIALIZED;
    public static HResult COMADMIN_E_REGDB_NOTOPEN;
    public static HResult COMADMIN_E_REGDB_SYSTEMERR;
    public static HResult COMADMIN_E_REGDB_ALREADYRUNNING;
    public static HResult COMADMIN_E_MIG_VERSIONNOTSUPPORTED;
    public static HResult COMADMIN_E_MIG_SCHEMANOTFOUND;
    public static HResult COMADMIN_E_CAT_BITNESSMISMATCH;
    public static HResult COMADMIN_E_CAT_UNACCEPTABLEBITNESS;
    public static HResult COMADMIN_E_CAT_WRONGAPPBITNESS;
    public static HResult COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED;
    public static HResult COMADMIN_E_CAT_SERVERFAULT;
    public static HResult COMQC_E_APPLICATION_NOT_QUEUED;
    public static HResult COMQC_E_NO_QUEUEABLE_INTERFACES;
    public static HResult COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE;
    public static HResult COMQC_E_NO_IPERSISTSTREAM;
    public static HResult COMQC_E_BAD_MESSAGE;
    public static HResult COMQC_E_UNAUTHENTICATED;
    public static HResult COMQC_E_UNTRUSTED_ENQUEUER;
    public static HResult MSDTC_E_DUPLICATE_RESOURCE;
    public static HResult COMADMIN_E_OBJECT_PARENT_MISSING;
    public static HResult COMADMIN_E_OBJECT_DOES_NOT_EXIST;
    public static HResult COMADMIN_E_APP_NOT_RUNNING;
    public static HResult COMADMIN_E_INVALID_PARTITION;
    public static HResult COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE;
    public static HResult COMADMIN_E_USER_IN_SET;
    public static HResult COMADMIN_E_CANTRECYCLELIBRARYAPPS;
    public static HResult COMADMIN_E_CANTRECYCLESERVICEAPPS;
    public static HResult COMADMIN_E_PROCESSALREADYRECYCLED;
    public static HResult COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED;
    public static HResult COMADMIN_E_CANTMAKEINPROCSERVICE;
    public static HResult COMADMIN_E_PROGIDINUSEBYCLSID;
    public static HResult COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET;
    public static HResult COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED;
    public static HResult COMADMIN_E_PARTITION_ACCESSDENIED;
    public static HResult COMADMIN_E_PARTITION_MSI_ONLY;
    public static HResult COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT;
    public static HResult COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS;
    public static HResult COMADMIN_E_COMP_MOVE_SOURCE;
    public static HResult COMADMIN_E_COMP_MOVE_DEST;
    public static HResult COMADMIN_E_COMP_MOVE_PRIVATE;
    public static HResult COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET;
    public static HResult COMADMIN_E_CANNOT_ALIAS_EVENTCLASS;
    public static HResult COMADMIN_E_PRIVATE_ACCESSDENIED;
    public static HResult COMADMIN_E_SAFERINVALID;
    public static HResult COMADMIN_E_REGISTRY_ACCESSDENIED;
    public static HResult COMADMIN_E_PARTITIONS_DISABLED;
    public static HResult CEE_E_ENTRYPOINT;
    public static HResult CEE_E_CVTRES_NOT_FOUND;
    public static HResult MSEE_E_LOADLIBFAILED;
    public static HResult MSEE_E_GETPROCFAILED;
    public static HResult MSEE_E_MULTCOPIESLOADED;
    public static HResult COR_E_APPDOMAINUNLOADED;
    public static HResult COR_E_CANNOTUNLOADAPPDOMAIN;
    public static HResult MSEE_E_ASSEMBLYLOADINPROGRESS;
    public static HResult MSEE_E_CANNOTCREATEAPPDOMAIN;
    public static HResult COR_E_FIXUPSINEXE;
    public static HResult COR_E_NO_LOADLIBRARY_ALLOWED;
    public static HResult COR_E_NEWER_RUNTIME;
    public static HResult HOST_E_DEADLOCK;
    public static HResult HOST_E_INTERRUPTED;
    public static HResult HOST_E_INVALIDOPERATION;
    public static HResult HOST_E_CLRNOTAVAILABLE;
    public static HResult HOST_E_TIMEOUT;
    public static HResult HOST_E_NOT_OWNER;
    public static HResult HOST_E_ABANDONED;
    public static HResult HOST_E_EXITPROCESS_THREADABORT;
    public static HResult HOST_E_EXITPROCESS_ADUNLOAD;
    public static HResult HOST_E_EXITPROCESS_TIMEOUT;
    public static HResult HOST_E_EXITPROCESS_OUTOFMEMORY;
    public static HResult HOST_E_EXITPROCESS_STACKOVERFLOW;
    public static HResult COR_E_MODULE_HASH_CHECK_FAILED;
    public static HResult FUSION_E_REF_DEF_MISMATCH;
    public static HResult FUSION_E_INVALID_PRIVATE_ASM_LOCATION;
    public static HResult FUSION_E_ASM_MODULE_MISSING;
    public static HResult FUSION_E_UNEXPECTED_MODULE_FOUND;
    public static HResult FUSION_E_PRIVATE_ASM_DISALLOWED;
    public static HResult FUSION_E_SIGNATURE_CHECK_FAILED;
    public static HResult FUSION_E_DATABASE_ERROR;
    public static HResult FUSION_E_INVALID_NAME;
    public static HResult FUSION_E_CODE_DOWNLOAD_DISABLED;
    public static HResult FUSION_E_UNINSTALL_DISALLOWED;
    public static HResult FUSION_E_HOST_GAC_ASM_MISMATCH;
    public static HResult CLDB_E_FILE_BADREAD;
    public static HResult CLDB_E_FILE_BADWRITE;
    public static HResult CLDB_E_FILE_READONLY;
    public static HResult CLDB_E_NAME_ERROR;
    public static HResult CLDB_S_TRUNCATION;
    public static HResult CLDB_E_TRUNCATION;
    public static HResult CLDB_E_FILE_OLDVER;
    public static HResult CLDB_E_RELOCATED;
    public static HResult CLDB_S_NULL;
    public static HResult CLDB_E_SMDUPLICATE;
    public static HResult CLDB_E_NO_DATA;
    public static HResult CLDB_E_READONLY;
    public static HResult CLDB_E_INCOMPATIBLE;
    public static HResult CLDB_E_FILE_CORRUPT;
    public static HResult CLDB_E_SCHEMA_VERNOTFOUND;
    public static HResult CLDB_E_BADUPDATEMODE;
    public static HResult CLDB_E_INDEX_NONULLKEYS;
    public static HResult CLDB_E_INDEX_DUPLICATE;
    public static HResult CLDB_E_INDEX_BADTYPE;
    public static HResult CLDB_E_INDEX_NOTFOUND;
    public static HResult CLDB_S_INDEX_TABLESCANREQUIRED;
    public static HResult CLDB_E_RECORD_NOTFOUND;
    public static HResult CLDB_E_RECORD_OVERFLOW;
    public static HResult CLDB_E_RECORD_DUPLICATE;
    public static HResult CLDB_E_RECORD_PKREQUIRED;
    public static HResult CLDB_E_RECORD_DELETED;
    public static HResult CLDB_E_RECORD_OUTOFORDER;
    public static HResult CLDB_E_COLUMN_OVERFLOW;
    public static HResult CLDB_E_COLUMN_READONLY;
    public static HResult CLDB_E_COLUMN_SPECIALCOL;
    public static HResult CLDB_E_COLUMN_PKNONULLS;
    public static HResult CLDB_E_TABLE_CANTDROP;
    public static HResult CLDB_E_OBJECT_NOTFOUND;
    public static HResult CLDB_E_OBJECT_COLNOTFOUND;
    public static HResult CLDB_E_VECTOR_BADINDEX;
    public static HResult CLDB_E_TOO_BIG;
    public static HResult META_E_INVALID_TOKEN_TYPE;
    public static HResult TLBX_E_INVALID_TYPEINFO;
    public static HResult TLBX_E_INVALID_TYPEINFO_UNNAMED;
    public static HResult TLBX_E_CTX_NESTED;
    public static HResult TLBX_E_ERROR_MESSAGE;
    public static HResult TLBX_E_CANT_SAVE;
    public static HResult TLBX_W_LIBNOTREGISTERED;
    public static HResult TLBX_E_CANTLOADLIBRARY;
    public static HResult TLBX_E_BAD_VT_TYPE;
    public static HResult TLBX_E_NO_MSCOREE_TLB;
    public static HResult TLBX_E_BAD_MSCOREE_TLB;
    public static HResult TLBX_E_TLB_EXCEPTION;
    public static HResult TLBX_E_MULTIPLE_LCIDS;
    public static HResult TLBX_I_TYPEINFO_IMPORTED;
    public static HResult TLBX_E_AMBIGUOUS_RETURN;
    public static HResult TLBX_E_DUPLICATE_TYPE_NAME;
    public static HResult TLBX_I_USEIUNKNOWN;
    public static HResult TLBX_I_UNCONVERTABLE_ARGS;
    public static HResult TLBX_I_UNCONVERTABLE_FIELD;
    public static HResult TLBX_I_NONSEQUENTIALSTRUCT;
    public static HResult TLBX_W_WARNING_MESSAGE;
    public static HResult TLBX_I_RESOLVEREFFAILED;
    public static HResult TLBX_E_ASANY;
    public static HResult TLBX_E_INVALIDLCIDPARAM;
    public static HResult TLBX_E_LCIDONDISPONLYITF;
    public static HResult TLBX_E_NONPUBLIC_FIELD;
    public static HResult TLBX_I_TYPE_EXPORTED;
    public static HResult TLBX_I_DUPLICATE_DISPID;
    public static HResult TLBX_E_BAD_NAMES;
    public static HResult TLBX_I_REF_TYPE_AS_STRUCT;
    public static HResult TLBX_E_GENERICINST_SIGNATURE;
    public static HResult TLBX_E_GENERICPAR_SIGNATURE;
    public static HResult TLBX_I_GENERIC_TYPE;
    public static HResult META_E_DUPLICATE;
    public static HResult META_E_GUID_REQUIRED;
    public static HResult META_E_TYPEDEF_MISMATCH;
    public static HResult META_E_MERGE_COLLISION;
    public static HResult TLBX_W_NON_INTEGRAL_CA_TYPE;
    public static HResult TLBX_W_IENUM_CA_ON_IUNK;
    public static HResult TLBX_E_NO_SAFEHANDLE_ARRAYS;
    public static HResult META_E_METHD_NOT_FOUND;
    public static HResult META_E_FIELD_NOT_FOUND;
    public static HResult META_S_PARAM_MISMATCH;
    public static HResult META_E_PARAM_MISMATCH;
    public static HResult META_E_BADMETADATA;
    public static HResult META_E_INTFCEIMPL_NOT_FOUND;
    public static HResult TLBX_E_NO_CRITICALHANDLE_ARRAYS;
    public static HResult META_E_CLASS_LAYOUT_INCONSISTENT;
    public static HResult META_E_FIELD_MARSHAL_NOT_FOUND;
    public static HResult META_E_METHODSEM_NOT_FOUND;
    public static HResult META_E_EVENT_NOT_FOUND;
    public static HResult META_E_PROP_NOT_FOUND;
    public static HResult META_E_BAD_SIGNATURE;
    public static HResult META_E_BAD_INPUT_PARAMETER;
    public static HResult META_E_METHDIMPL_INCONSISTENT;
    public static HResult META_E_MD_INCONSISTENCY;
    public static HResult META_E_CANNOTRESOLVETYPEREF;
    public static HResult META_S_DUPLICATE;
    public static HResult META_E_STRINGSPACE_FULL;
    public static HResult META_E_UNEXPECTED_REMAP;
    public static HResult META_E_HAS_UNMARKALL;
    public static HResult META_E_MUST_CALL_UNMARKALL;
    public static HResult META_E_GENERICPARAM_INCONSISTENT;
    public static HResult META_E_EVENT_COUNTS;
    public static HResult META_E_PROPERTY_COUNTS;
    public static HResult META_E_TYPEDEF_MISSING;
    public static HResult TLBX_E_CANT_LOAD_MODULE;
    public static HResult TLBX_E_CANT_LOAD_CLASS;
    public static HResult TLBX_E_NULL_MODULE;
    public static HResult TLBX_E_NO_CLSID_KEY;
    public static HResult TLBX_E_CIRCULAR_EXPORT;
    public static HResult TLBX_E_CIRCULAR_IMPORT;
    public static HResult TLBX_E_BAD_NATIVETYPE;
    public static HResult TLBX_E_BAD_VTABLE;
    public static HResult TLBX_E_CRM_NON_STATIC;
    public static HResult TLBX_E_CRM_INVALID_SIG;
    public static HResult TLBX_E_CLASS_LOAD_EXCEPTION;
    public static HResult TLBX_E_UNKNOWN_SIGNATURE;
    public static HResult TLBX_E_REFERENCED_TYPELIB;
    public static HResult TLBX_S_REFERENCED_TYPELIB;
    public static HResult TLBX_E_INVALID_NAMESPACE;
    public static HResult TLBX_E_LAYOUT_ERROR;
    public static HResult TLBX_E_NOTIUNKNOWN;
    public static HResult TLBX_E_NONVISIBLEVALUECLASS;
    public static HResult TLBX_E_LPTSTR_NOT_ALLOWED;
    public static HResult TLBX_E_AUTO_CS_NOT_ALLOWED;
    public static HResult TLBX_S_NOSTDINTERFACE;
    public static HResult TLBX_S_DUPLICATE_DISPID;
    public static HResult TLBX_E_ENUM_VALUE_INVALID;
    public static HResult TLBX_E_DUPLICATE_IID;
    public static HResult TLBX_E_NO_NESTED_ARRAYS;
    public static HResult TLBX_E_PARAM_ERROR_NAMED;
    public static HResult TLBX_E_PARAM_ERROR_UNNAMED;
    public static HResult TLBX_E_AGNOST_SIGNATURE;
    public static HResult TLBX_E_CONVERT_FAIL;
    public static HResult TLBX_W_DUAL_NOT_DISPATCH;
    public static HResult TLBX_E_BAD_SIGNATURE;
    public static HResult TLBX_E_ARRAY_NEEDS_NT_FIXED;
    public static HResult TLBX_E_CLASS_NEEDS_NT_INTF;
    public static HResult META_E_CA_INVALID_TARGET;
    public static HResult META_E_CA_INVALID_VALUE;
    public static HResult META_E_CA_INVALID_BLOB;
    public static HResult META_E_CA_REPEATED_ARG;
    public static HResult META_E_CA_UNKNOWN_ARGUMENT;
    public static HResult META_E_CA_VARIANT_NYI;
    public static HResult META_E_CA_ARRAY_NYI;
    public static HResult META_E_CA_UNEXPECTED_TYPE;
    public static HResult META_E_CA_INVALID_ARGTYPE;
    public static HResult META_E_CA_INVALID_ARG_FOR_TYPE;
    public static HResult META_E_CA_INVALID_UUID;
    public static HResult META_E_CA_INVALID_MARSHALAS_FIELDS;
    public static HResult META_E_CA_NT_FIELDONLY;
    public static HResult META_E_CA_NEGATIVE_PARAMINDEX;
    public static HResult META_E_CA_NEGATIVE_MULTIPLIER;
    public static HResult META_E_CA_NEGATIVE_CONSTSIZE;
    public static HResult META_E_CA_FIXEDSTR_SIZE_REQUIRED;
    public static HResult META_E_CA_CUSTMARSH_TYPE_REQUIRED;
    public static HResult META_E_CA_FILENAME_REQUIRED;
    public static HResult TLBX_W_NO_PROPS_IN_EVENTS;
    public static HResult META_E_NOT_IN_ENC_MODE;
    public static HResult TLBX_W_ENUM_VALUE_TOOBIG;
    public static HResult META_E_METHOD_COUNTS;
    public static HResult META_E_FIELD_COUNTS;
    public static HResult META_E_PARAM_COUNTS;
    public static HResult TLBX_W_EXPORTING_AUTO_LAYOUT;
    public static HResult TLBX_E_TYPED_REF;
    public static HResult TLBX_W_DEFAULT_INTF_NOT_VISIBLE;
    public static HResult TLBX_W_BAD_SAFEARRAYFIELD_NO_ELEMENTVT;
    public static HResult TLBX_W_LAYOUTCLASS_AS_INTERFACE;
    public static HResult TLBX_I_GENERIC_BASE_TYPE;
    public static HResult TLBX_E_BITNESS_MISMATCH;
    public static HResult VLDTR_S_WRN;
    public static HResult VLDTR_S_ERR;
    public static HResult VLDTR_S_WRNERR;
    public static HResult VLDTR_E_RID_OUTOFRANGE;
    public static HResult VLDTR_E_CDTKN_OUTOFRANGE;
    public static HResult VLDTR_E_CDRID_OUTOFRANGE;
    public static HResult VLDTR_E_STRING_INVALID;
    public static HResult VLDTR_E_GUID_INVALID;
    public static HResult VLDTR_E_BLOB_INVALID;
    public static HResult VLDTR_E_MOD_MULTI;
    public static HResult VLDTR_E_MOD_NULLMVID;
    public static HResult VLDTR_E_TR_NAMENULL;
    public static HResult VLDTR_E_TR_DUP;
    public static HResult VLDTR_E_TD_NAMENULL;
    public static HResult VLDTR_E_TD_DUPNAME;
    public static HResult VLDTR_E_TD_DUPGUID;
    public static HResult VLDTR_E_TD_NOTIFACEOBJEXTNULL;
    public static HResult VLDTR_E_TD_OBJEXTENDSNONNULL;
    public static HResult VLDTR_E_TD_EXTENDSSEALED;
    public static HResult VLDTR_E_TD_DLTNORTSPCL;
    public static HResult VLDTR_E_TD_RTSPCLNOTDLT;
    public static HResult VLDTR_E_MI_DECLPRIV;
    public static HResult VLDTR_E_AS_BADNAME;
    public static HResult VLDTR_E_FILE_SYSNAME;
    public static HResult VLDTR_E_MI_BODYSTATIC;
    public static HResult VLDTR_E_TD_IFACENOTABS;
    public static HResult VLDTR_E_TD_IFACEPARNOTNIL;
    public static HResult VLDTR_E_TD_IFACEGUIDNULL;
    public static HResult VLDTR_E_MI_DECLFINAL;
    public static HResult VLDTR_E_TD_VTNOTSEAL;
    public static HResult VLDTR_E_PD_BADFLAGS;
    public static HResult VLDTR_E_IFACE_DUP;
    public static HResult VLDTR_E_MR_NAMENULL;
    public static HResult VLDTR_E_MR_VTBLNAME;
    public static HResult VLDTR_E_MR_DELNAME;
    public static HResult VLDTR_E_MR_PARNIL;
    public static HResult VLDTR_E_MR_BADCALLINGCONV;
    public static HResult VLDTR_E_MR_NOTVARARG;
    public static HResult VLDTR_E_MR_NAMEDIFF;
    public static HResult VLDTR_E_MR_SIGDIFF;
    public static HResult VLDTR_E_MR_DUP;
    public static HResult VLDTR_E_CL_TDAUTO;
    public static HResult VLDTR_E_CL_BADPCKSZ;
    public static HResult VLDTR_E_CL_DUP;
    public static HResult VLDTR_E_FL_BADOFFSET;
    public static HResult VLDTR_E_FL_TDNIL;
    public static HResult VLDTR_E_FL_NOCL;
    public static HResult VLDTR_E_FL_TDNOTEXPLCT;
    public static HResult VLDTR_E_FL_FLDSTATIC;
    public static HResult VLDTR_E_FL_DUP;
    public static HResult VLDTR_E_MODREF_NAMENULL;
    public static HResult VLDTR_E_MODREF_DUP;
    public static HResult VLDTR_E_TR_BADSCOPE;
    public static HResult VLDTR_E_TD_NESTEDNOENCL;
    public static HResult VLDTR_E_TD_EXTTRRES;
    public static HResult VLDTR_E_SIGNULL;
    public static HResult VLDTR_E_SIGNODATA;
    public static HResult VLDTR_E_MD_BADCALLINGCONV;
    public static HResult VLDTR_E_MD_THISSTATIC;
    public static HResult VLDTR_E_MD_NOTTHISNOTSTATIC;
    public static HResult VLDTR_E_MD_NOARGCNT;
    public static HResult VLDTR_E_SIG_MISSELTYPE;
    public static HResult VLDTR_E_SIG_MISSTKN;
    public static HResult VLDTR_E_SIG_TKNBAD;
    public static HResult VLDTR_E_SIG_MISSFPTR;
    public static HResult VLDTR_E_SIG_MISSFPTRARGCNT;
    public static HResult VLDTR_E_SIG_MISSRANK;
    public static HResult VLDTR_E_SIG_MISSNSIZE;
    public static HResult VLDTR_E_SIG_MISSSIZE;
    public static HResult VLDTR_E_SIG_MISSNLBND;
    public static HResult VLDTR_E_SIG_MISSLBND;
    public static HResult VLDTR_E_SIG_BADELTYPE;
    public static HResult VLDTR_E_SIG_MISSVASIZE;
    public static HResult VLDTR_E_FD_BADCALLINGCONV;
    public static HResult VLDTR_E_MD_NAMENULL;
    public static HResult VLDTR_E_MD_PARNIL;
    public static HResult VLDTR_E_MD_DUP;
    public static HResult VLDTR_E_FD_NAMENULL;
    public static HResult VLDTR_E_FD_PARNIL;
    public static HResult VLDTR_E_FD_DUP;
    public static HResult VLDTR_E_AS_MULTI;
    public static HResult VLDTR_E_AS_NAMENULL;
    public static HResult VLDTR_E_SIG_TOKTYPEMISMATCH;
    public static HResult VLDTR_E_CL_TDINTF;
    public static HResult VLDTR_E_ASOS_OSPLTFRMIDINVAL;
    public static HResult VLDTR_E_AR_NAMENULL;
    public static HResult VLDTR_E_TD_ENCLNOTNESTED;
    public static HResult VLDTR_E_AROS_OSPLTFRMIDINVAL;
    public static HResult VLDTR_E_FILE_NAMENULL;
    public static HResult VLDTR_E_CT_NAMENULL;
    public static HResult VLDTR_E_TD_EXTENDSCHILD;
    public static HResult VLDTR_E_MAR_NAMENULL;
    public static HResult VLDTR_E_FILE_DUP;
    public static HResult VLDTR_E_FILE_NAMEFULLQLFD;
    public static HResult VLDTR_E_CT_DUP;
    public static HResult VLDTR_E_MAR_DUP;
    public static HResult VLDTR_E_MAR_NOTPUBPRIV;
    public static HResult VLDTR_E_TD_ENUMNOVALUE;
    public static HResult VLDTR_E_TD_ENUMVALSTATIC;
    public static HResult VLDTR_E_TD_ENUMVALNOTSN;
    public static HResult VLDTR_E_TD_ENUMFLDNOTST;
    public static HResult VLDTR_E_TD_ENUMFLDNOTLIT;
    public static HResult VLDTR_E_TD_ENUMNOLITFLDS;
    public static HResult VLDTR_E_TD_ENUMFLDSIGMISMATCH;
    public static HResult VLDTR_E_TD_ENUMVALNOT1ST;
    public static HResult VLDTR_E_FD_NOTVALUERTSN;
    public static HResult VLDTR_E_FD_VALUEPARNOTENUM;
    public static HResult VLDTR_E_FD_INSTINIFACE;
    public static HResult VLDTR_E_FD_NOTPUBINIFACE;
    public static HResult VLDTR_E_FMD_GLOBALNOTPUBPRIVSC;
    public static HResult VLDTR_E_FMD_GLOBALNOTSTATIC;
    public static HResult VLDTR_E_FD_GLOBALNORVA;
    public static HResult VLDTR_E_MD_CTORZERORVA;
    public static HResult VLDTR_E_FD_MARKEDNOMARSHAL;
    public static HResult VLDTR_E_FD_MARSHALNOTMARKED;
    public static HResult VLDTR_E_FD_MARKEDNODEFLT;
    public static HResult VLDTR_E_FD_DEFLTNOTMARKED;
    public static HResult VLDTR_E_FMD_MARKEDNOSECUR;
    public static HResult VLDTR_E_FMD_SECURNOTMARKED;
    public static HResult VLDTR_E_FMD_PINVOKENOTSTATIC;
    public static HResult VLDTR_E_FMD_MARKEDNOPINVOKE;
    public static HResult VLDTR_E_FMD_PINVOKENOTMARKED;
    public static HResult VLDTR_E_FMD_BADIMPLMAP;
    public static HResult VLDTR_E_IMAP_BADMODREF;
    public static HResult VLDTR_E_IMAP_BADMEMBER;
    public static HResult VLDTR_E_IMAP_BADIMPORTNAME;
    public static HResult VLDTR_E_IMAP_BADCALLCONV;
    public static HResult VLDTR_E_FMD_BADACCESSFLAG;
    public static HResult VLDTR_E_FD_INITONLYANDLITERAL;
    public static HResult VLDTR_E_FD_LITERALNOTSTATIC;
    public static HResult VLDTR_E_FMD_RTSNNOTSN;
    public static HResult VLDTR_E_MD_ABSTPARNOTABST;
    public static HResult VLDTR_E_MD_NOTSTATABSTININTF;
    public static HResult VLDTR_E_MD_NOTPUBININTF;
    public static HResult VLDTR_E_MD_CTORININTF;
    public static HResult VLDTR_E_MD_GLOBALCTORCCTOR;
    public static HResult VLDTR_E_MD_CTORSTATIC;
    public static HResult VLDTR_E_MD_CTORNOTSNRTSN;
    public static HResult VLDTR_E_MD_CTORVIRT;
    public static HResult VLDTR_E_MD_CTORABST;
    public static HResult VLDTR_E_MD_CCTORNOTSTATIC;
    public static HResult VLDTR_E_MD_ZERORVA;
    public static HResult VLDTR_E_MD_FINNOTVIRT;
    public static HResult VLDTR_E_MD_STATANDFINORVIRT;
    public static HResult VLDTR_E_MD_ABSTANDFINAL;
    public static HResult VLDTR_E_MD_ABSTANDIMPL;
    public static HResult VLDTR_E_MD_ABSTANDPINVOKE;
    public static HResult VLDTR_E_MD_ABSTNOTVIRT;
    public static HResult VLDTR_E_MD_NOTABSTNOTIMPL;
    public static HResult VLDTR_E_MD_NOTABSTBADFLAGSRVA;
    public static HResult VLDTR_E_MD_PRIVSCOPENORVA;
    public static HResult VLDTR_E_MD_GLOBALABSTORVIRT;
    public static HResult VLDTR_E_SIG_LONGFORM;
    public static HResult VLDTR_E_MD_MULTIPLESEMANTICS;
    public static HResult VLDTR_E_MD_INVALIDSEMANTICS;
    public static HResult VLDTR_E_MD_SEMANTICSNOTEXIST;
    public static HResult VLDTR_E_MI_DECLNOTVIRT;
    public static HResult VLDTR_E_FMD_GLOBALITEM;
    public static HResult VLDTR_E_MD_MULTSEMANTICFLAGS;
    public static HResult VLDTR_E_MD_NOSEMANTICFLAGS;
    public static HResult VLDTR_E_FD_FLDINIFACE;
    public static HResult VLDTR_E_AS_HASHALGID;
    public static HResult VLDTR_E_AS_PROCID;
    public static HResult VLDTR_E_AR_PROCID;
    public static HResult VLDTR_E_CN_PARENTRANGE;
    public static HResult VLDTR_E_AS_BADFLAGS;
    public static HResult VLDTR_E_TR_HASTYPEDEF;
    public static HResult VLDTR_E_IFACE_BADIMPL;
    public static HResult VLDTR_E_IFACE_BADIFACE;
    public static HResult VLDTR_E_TD_SECURNOTMARKED;
    public static HResult VLDTR_E_TD_MARKEDNOSECUR;
    public static HResult VLDTR_E_MD_CCTORHASARGS;
    public static HResult VLDTR_E_CT_BADIMPL;
    public static HResult VLDTR_E_MI_ALIENBODY;
    public static HResult VLDTR_E_MD_CCTORCALLCONV;
    public static HResult VLDTR_E_MI_BADCLASS;
    public static HResult VLDTR_E_MI_CLASSISINTF;
    public static HResult VLDTR_E_MI_BADDECL;
    public static HResult VLDTR_E_MI_BADBODY;
    public static HResult VLDTR_E_MI_DUP;
    public static HResult VLDTR_E_FD_BADPARENT;
    public static HResult VLDTR_E_MD_PARAMOUTOFSEQ;
    public static HResult VLDTR_E_MD_PARASEQTOOBIG;
    public static HResult VLDTR_E_MD_PARMMARKEDNOMARSHAL;
    public static HResult VLDTR_E_MD_PARMMARSHALNOTMARKED;
    public static HResult VLDTR_E_MD_PARMMARKEDNODEFLT;
    public static HResult VLDTR_E_MD_PARMDEFLTNOTMARKED;
    public static HResult VLDTR_E_PR_BADSCOPE;
    public static HResult VLDTR_E_PR_NONAME;
    public static HResult VLDTR_E_PR_NOSIG;
    public static HResult VLDTR_E_PR_DUP;
    public static HResult VLDTR_E_PR_BADCALLINGCONV;
    public static HResult VLDTR_E_PR_MARKEDNODEFLT;
    public static HResult VLDTR_E_PR_DEFLTNOTMARKED;
    public static HResult VLDTR_E_PR_BADSEMANTICS;
    public static HResult VLDTR_E_PR_BADMETHOD;
    public static HResult VLDTR_E_PR_ALIENMETHOD;
    public static HResult VLDTR_E_CN_BLOBNOTNULL;
    public static HResult VLDTR_E_CN_BLOBNULL;
    public static HResult VLDTR_E_EV_BADSCOPE;
    public static HResult VLDTR_E_EV_NONAME;
    public static HResult VLDTR_E_EV_DUP;
    public static HResult VLDTR_E_EV_BADEVTYPE;
    public static HResult VLDTR_E_EV_EVTYPENOTCLASS;
    public static HResult VLDTR_E_EV_BADSEMANTICS;
    public static HResult VLDTR_E_EV_BADMETHOD;
    public static HResult VLDTR_E_EV_ALIENMETHOD;
    public static HResult VLDTR_E_EV_NOADDON;
    public static HResult VLDTR_E_EV_NOREMOVEON;
    public static HResult VLDTR_E_CT_DUPTDNAME;
    public static HResult VLDTR_E_MAR_BADOFFSET;
    public static HResult VLDTR_E_DS_BADOWNER;
    public static HResult VLDTR_E_DS_BADFLAGS;
    public static HResult VLDTR_E_DS_NOBLOB;
    public static HResult VLDTR_E_MAR_BADIMPL;
    public static HResult VLDTR_E_MR_VARARGCALLINGCONV;
    public static HResult VLDTR_E_MD_CTORNOTVOID;
    public static HResult VLDTR_E_EV_FIRENOTVOID;
    public static HResult VLDTR_E_AS_BADLOCALE;
    public static HResult VLDTR_E_CN_PARENTTYPE;
    public static HResult VLDTR_E_SIG_SENTINMETHODDEF;
    public static HResult VLDTR_E_SIG_SENTMUSTVARARG;
    public static HResult VLDTR_E_SIG_MULTSENTINELS;
    public static HResult VLDTR_E_SIG_LASTSENTINEL;
    public static HResult VLDTR_E_SIG_MISSARG;
    public static HResult VLDTR_E_SIG_BYREFINFIELD;
    public static HResult VLDTR_E_MD_SYNCMETHODINVTYPE;
    public static HResult VLDTR_E_TD_NAMETOOLONG;
    public static HResult VLDTR_E_AS_PROCDUP;
    public static HResult VLDTR_E_ASOS_DUP;
    public static HResult VLDTR_E_MAR_BADFLAGS;
    public static HResult VLDTR_E_CT_NOTYPEDEFID;
    public static HResult VLDTR_E_FILE_BADFLAGS;
    public static HResult VLDTR_E_FILE_NULLHASH;
    public static HResult VLDTR_E_MOD_NONAME;
    public static HResult VLDTR_E_MOD_NAMEFULLQLFD;
    public static HResult VLDTR_E_TD_RTSPCLNOTSPCL;
    public static HResult VLDTR_E_TD_EXTENDSIFACE;
    public static HResult VLDTR_E_MD_CTORPINVOKE;
    public static HResult VLDTR_E_TD_SYSENUMNOTCLASS;
    public static HResult VLDTR_E_TD_SYSENUMNOTEXTVTYPE;
    public static HResult VLDTR_E_MI_SIGMISMATCH;
    public static HResult VLDTR_E_TD_ENUMHASMETHODS;
    public static HResult VLDTR_E_TD_ENUMIMPLIFACE;
    public static HResult VLDTR_E_TD_ENUMHASPROP;
    public static HResult VLDTR_E_TD_ENUMHASEVENT;
    public static HResult VLDTR_E_TD_BADMETHODLST;
    public static HResult VLDTR_E_TD_BADFIELDLST;
    public static HResult VLDTR_E_CN_BADTYPE;
    public static HResult VLDTR_E_TD_ENUMNOINSTFLD;
    public static HResult VLDTR_E_TD_ENUMMULINSTFLD;
    public static HResult VLDTR_E_INTERRUPTED;
    public static HResult VLDTR_E_NOTINIT;
    public static HResult VLDTR_E_IFACE_NOTIFACE;
    public static HResult VLDTR_E_FD_RVAHASNORVA;
    public static HResult VLDTR_E_FD_RVAHASZERORVA;
    public static HResult VLDTR_E_MD_RVAANDIMPLMAP;
    public static HResult VLDTR_E_TD_EXTRAFLAGS;
    public static HResult VLDTR_E_TD_EXTENDSITSELF;
    public static HResult VLDTR_E_TD_SYSVTNOTEXTOBJ;
    public static HResult VLDTR_E_TD_EXTTYPESPEC;
    public static HResult VLDTR_E_TD_VTNOSIZE;
    public static HResult VLDTR_E_TD_IFACESEALED;
    public static HResult VLDTR_E_NC_BADNESTED;
    public static HResult VLDTR_E_NC_BADENCLOSER;
    public static HResult VLDTR_E_NC_DUP;
    public static HResult VLDTR_E_NC_DUPENCLOSER;
    public static HResult VLDTR_E_FRVA_ZERORVA;
    public static HResult VLDTR_E_FRVA_BADFIELD;
    public static HResult VLDTR_E_FRVA_DUPRVA;
    public static HResult VLDTR_E_FRVA_DUPFIELD;
    public static HResult VLDTR_E_EP_BADTOKEN;
    public static HResult VLDTR_E_EP_INSTANCE;
    public static HResult VLDTR_E_TD_ENUMFLDBADTYPE;
    public static HResult VLDTR_E_MD_BADRVA;
    public static HResult VLDTR_E_FD_LITERALNODEFAULT;
    public static HResult VLDTR_E_IFACE_METHNOTIMPL;
    public static HResult VLDTR_E_CA_BADPARENT;
    public static HResult VLDTR_E_CA_BADTYPE;
    public static HResult VLDTR_E_CA_NOTCTOR;
    public static HResult VLDTR_E_CA_BADSIG;
    public static HResult VLDTR_E_CA_NOSIG;
    public static HResult VLDTR_E_CA_BADPROLOG;
    public static HResult VLDTR_E_MD_BADLOCALSIGTOK;
    public static HResult VLDTR_E_MD_BADHEADER;
    public static HResult VLDTR_E_EP_TOOMANYARGS;
    public static HResult VLDTR_E_EP_BADRET;
    public static HResult VLDTR_E_EP_BADARG;
    public static HResult VLDTR_E_SIG_BADVOID;
    public static HResult VLDTR_E_IFACE_METHMULTIMPL;
    public static HResult VLDTR_E_GP_NAMENULL;
    public static HResult VLDTR_E_GP_OWNERNIL;
    public static HResult VLDTR_E_GP_DUPNAME;
    public static HResult VLDTR_E_GP_DUPNUMBER;
    public static HResult VLDTR_E_GP_NONSEQ_BY_OWNER;
    public static HResult VLDTR_E_GP_NONSEQ_BY_NUMBER;
    public static HResult VLDTR_E_GP_UNEXPECTED_OWNER_FOR_VARIANT_VAR;
    public static HResult VLDTR_E_GP_ILLEGAL_VARIANT_MVAR;
    public static HResult VLDTR_E_GP_ILLEGAL_VARIANCE_FLAGS;
    public static HResult VLDTR_E_GP_REFANDVALUETYPE;
    public static HResult VLDTR_E_GPC_OWNERNIL;
    public static HResult VLDTR_E_GPC_DUP;
    public static HResult VLDTR_E_GPC_NONCONTIGUOUS;
    public static HResult VLDTR_E_MS_METHODNIL;
    public static HResult VLDTR_E_MS_DUP;
    public static HResult VLDTR_E_MS_BADCALLINGCONV;
    public static HResult VLDTR_E_MS_MISSARITY;
    public static HResult VLDTR_E_MS_MISSARG;
    public static HResult VLDTR_E_MS_ARITYMISMATCH;
    public static HResult VLDTR_E_MS_METHODNOTGENERIC;
    public static HResult VLDTR_E_SIG_MISSARITY;
    public static HResult VLDTR_E_SIG_ARITYMISMATCH;
    public static HResult VLDTR_E_MD_GENERIC_CCTOR;
    public static HResult VLDTR_E_MD_GENERIC_CTOR;
    public static HResult VLDTR_E_MD_GENERIC_IMPORT;
    public static HResult VLDTR_E_MD_GENERIC_BADCALLCONV;
    public static HResult VLDTR_E_MD_GENERIC_GLOBAL;
    public static HResult VLDTR_E_EP_GENERIC_METHOD;
    public static HResult VLDTR_E_MD_MISSARITY;
    public static HResult VLDTR_E_MD_ARITYZERO;
    public static HResult VLDTR_E_SIG_ARITYZERO;
    public static HResult VLDTR_E_MS_ARITYZERO;
    public static HResult VLDTR_E_MD_GPMISMATCH;
    public static HResult VLDTR_E_EP_GENERIC_TYPE;
    public static HResult VLDTR_E_MI_DECLNOTGENERIC;
    public static HResult VLDTR_E_MI_IMPLNOTGENERIC;
    public static HResult VLDTR_E_MI_ARITYMISMATCH;
    public static HResult VLDTR_E_TD_EXTBADTYPESPEC;
    public static HResult VLDTR_E_SIG_BYREFINST;
    public static HResult VLDTR_E_MS_BYREFINST;
    public static HResult VLDTR_E_TS_EMPTY;
    public static HResult VLDTR_E_TS_HASSENTINALS;
    public static HResult VLDTR_E_TD_GENERICHASEXPLAYOUT;
    public static HResult VLDTR_E_SIG_BADTOKTYPE;
    public static HResult VLDTR_E_IFACE_METHNOTIMPLTHISMOD;
    public static HResult CORDBG_E_UNRECOVERABLE_ERROR;
    public static HResult CORDBG_E_PROCESS_TERMINATED;
    public static HResult CORDBG_E_PROCESS_NOT_SYNCHRONIZED;
    public static HResult CORDBG_E_CLASS_NOT_LOADED;
    public static HResult CORDBG_E_IL_VAR_NOT_AVAILABLE;
    public static HResult CORDBG_E_BAD_REFERENCE_VALUE;
    public static HResult CORDBG_E_FIELD_NOT_AVAILABLE;
    public static HResult CORDBG_E_NON_NATIVE_FRAME;
    public static HResult CORDBG_E_NONCONTINUABLE_EXCEPTION;
    public static HResult CORDBG_E_CODE_NOT_AVAILABLE;
    public static HResult CORDBG_E_FUNCTION_NOT_IL;
    public static HResult CORDBG_S_BAD_START_SEQUENCE_POINT;
    public static HResult CORDBG_S_BAD_END_SEQUENCE_POINT;
    public static HResult CORDBG_S_INSUFFICIENT_INFO_FOR_SET_IP;
    public static HResult CORDBG_E_CANT_SET_IP_INTO_FINALLY;
    public static HResult CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY;
    public static HResult CORDBG_E_CANT_SET_IP_INTO_CATCH;
    public static HResult CORDBG_E_SET_IP_NOT_ALLOWED_ON_NONLEAF_FRAME;
    public static HResult CORDBG_E_SET_IP_IMPOSSIBLE;
    public static HResult CORDBG_E_FUNC_EVAL_BAD_START_POINT;
    public static HResult CORDBG_E_INVALID_OBJECT;
    public static HResult CORDBG_E_FUNC_EVAL_NOT_COMPLETE;
    public static HResult CORDBG_S_FUNC_EVAL_HAS_NO_RESULT;
    public static HResult CORDBG_S_VALUE_POINTS_TO_VOID;
    public static HResult CORDBG_E_INPROC_NOT_IMPL;
    public static HResult CORDBG_S_FUNC_EVAL_ABORTED;
    public static HResult CORDBG_E_STATIC_VAR_NOT_AVAILABLE;
    public static HResult CORDBG_E_OBJECT_IS_NOT_COPYABLE_VALUE_CLASS;
    public static HResult CORDBG_E_CANT_SETIP_INTO_OR_OUT_OF_FILTER;
    public static HResult CORDBG_E_CANT_CHANGE_JIT_SETTING_FOR_ZAP_MODULE;
    public static HResult CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY_ON_WIN64;
    public static HResult CORDBG_E_CANT_SET_IP_OUT_OF_CATCH_ON_WIN64;
    public static HResult CORDBG_E_REMOTE_CONNECTION_CONN_RESET;
    public static HResult CORDBG_E_REMOTE_CONNECTION_KEEP_ALIVE;
    public static HResult CORDBG_E_REMOTE_CONNECTION_FATAL_ERROR;
    public static HResult CORDBG_E_CANT_SET_TO_JMC;
    public static HResult CORDBG_S_AT_END_OF_STACK;
    public static HResult CORDBG_E_NO_CONTEXT_FOR_INTERNAL_FRAME;
    public static HResult CORDBG_E_NOT_CHILD_FRAME;
    public static HResult CORDBG_E_NON_MATCHING_CONTEXT;
    public static HResult CORDBG_E_PAST_END_OF_STACK;
    public static HResult CORDBG_E_BAD_THREAD_STATE;
    public static HResult CORDBG_E_DEBUGGER_ALREADY_ATTACHED;
    public static HResult CORDBG_E_SUPERFLOUS_CONTINUE;
    public static HResult CORDBG_E_SET_VALUE_NOT_ALLOWED_ON_NONLEAF_FRAME;
    public static HResult CORDBG_E_ENC_EH_MAX_NESTING_LEVEL_CANT_INCREASE;
    public static HResult CORDBG_E_ENC_MODULE_NOT_ENC_ENABLED;
    public static HResult CORDBG_E_SET_IP_NOT_ALLOWED_ON_EXCEPTION;
    public static HResult CORDBG_E_VARIABLE_IS_ACTUALLY_LITERAL;
    public static HResult CORDBG_E_PROCESS_DETACHED;
    public static HResult CORDBG_E_ENC_METHOD_SIG_CHANGED;
    public static HResult CORDBG_E_ENC_METHOD_NO_LOCAL_SIG;
    public static HResult CORDBG_E_ENC_CANT_ADD_FIELD_TO_VALUE_OR_LAYOUT_CLASS;
    public static HResult CORDBG_E_ENC_CANT_CHANGE_FIELD;
    public static HResult CORDBG_E_ENC_CANT_ADD_NON_PRIVATE_MEMBER;
    public static HResult CORDBG_E_FIELD_NOT_STATIC;
    public static HResult CORDBG_E_FIELD_NOT_INSTANCE;
    public static HResult CORDBG_E_ENC_ZAPPED_WITHOUT_ENC;
    public static HResult CORDBG_E_ENC_BAD_METHOD_INFO;
    public static HResult CORDBG_E_ENC_JIT_CANT_UPDATE;
    public static HResult CORDBG_E_ENC_MISSING_CLASS;
    public static HResult CORDBG_E_ENC_INTERNAL_ERROR;
    public static HResult CORDBG_E_ENC_HANGING_FIELD;
    public static HResult CORDBG_E_MODULE_NOT_LOADED;
    public static HResult CORDBG_E_ENC_CANT_CHANGE_SUPERCLASS;
    public static HResult CORDBG_E_UNABLE_TO_SET_BREAKPOINT;
    public static HResult CORDBG_E_DEBUGGING_NOT_POSSIBLE;
    public static HResult CORDBG_E_KERNEL_DEBUGGER_ENABLED;
    public static HResult CORDBG_E_KERNEL_DEBUGGER_PRESENT;
    public static HResult CORDBG_E_HELPER_THREAD_DEAD;
    public static HResult CORDBG_E_INTERFACE_INHERITANCE_CANT_CHANGE;
    public static HResult CORDBG_E_INCOMPATIBLE_PROTOCOL;
    public static HResult CORDBG_E_TOO_MANY_PROCESSES;
    public static HResult CORDBG_E_INTEROP_NOT_SUPPORTED;
    public static HResult CORDBG_E_NO_REMAP_BREAKPIONT;
    public static HResult CORDBG_E_OBJECT_NEUTERED;
    public static HResult CORDBG_E_LIBRARY_PROVIDER_ERROR;
    public static HResult CORDBG_E_NOT_CLR;
    public static HResult CORDBG_E_MISSING_DATA_TARGET_INTERFACE;
    public static HResult CORDBG_E_UNSUPPORTED_DEBUGGING_MODEL;
    public static HResult CORDBG_E_UNSUPPORTED_FORWARD_COMPAT;
    public static HResult CORDBG_E_UNSUPPORTED_VERSION_STRUCT;
    public static HResult CORDBG_E_READVIRTUAL_FAILURE;
    public static HResult CORDBG_E_INVALID_OPCODE;
    public static HResult CORDBG_E_UNSUPPORTED;
    public static HResult CORDBG_E_DATA_TARGET_ERROR;
    public static HResult CORDBG_E_CODE_HAS_NO_METADATA;
    public static HResult CORDBG_E_CODE_UNRECOGNIZED;
    public static HResult CORDBG_E_NO_IMAGE_AVAILABLE;
    public static HResult CORDBG_E_TYPE_NOT_FOUND;
    public static HResult CORDBG_E_VTABLE_HAS_NO_METADATA;
    public static HResult CORPROF_E_FUNCTION_NOT_COMPILED;
    public static HResult CORPROF_E_DATAINCOMPLETE;
    public static HResult CORPROF_E_NOT_REJITABLE_METHODS;
    public static HResult CORPROF_E_CANNOT_UPDATE_METHOD;
    public static HResult CORPROF_E_FUNCTION_NOT_IL;
    public static HResult CORPROF_E_NOT_MANAGED_THREAD;
    public static HResult CORPROF_E_CALL_ONLY_FROM_INIT;
    public static HResult CORPROF_E_INPROC_NOT_ENABLED;
    public static HResult CORPROF_E_JITMAPS_NOT_ENABLED;
    public static HResult CORPROF_E_INPROC_ALREADY_BEGUN;
    public static HResult CORPROF_E_INPROC_NOT_AVAILABLE;
    public static HResult CORPROF_E_NOT_YET_AVAILABLE;
    public static HResult CORPROF_E_TYPE_IS_PARAMETERIZED;
    public static HResult CORPROF_E_FUNCTION_IS_PARAMETERIZED;
    public static HResult SECURITY_E_XML_TO_ASN_ENCODING;
    public static HResult SECURITY_E_INCOMPATIBLE_SHARE;
    public static HResult SECURITY_E_UNVERIFIABLE;
    public static HResult SECURITY_E_INCOMPATIBLE_EVIDENCE;
    public static HResult CLDB_E_INTERNALERROR;
    public static HResult CORSEC_E_DECODE_SET;
    public static HResult CORSEC_E_ENCODE_SET;
    public static HResult CORSEC_E_UNSUPPORTED_FORMAT;
    public static HResult SN_CRYPTOAPI_CALL_FAILED;
    public static HResult CORSEC_E_CRYPTOAPI_CALL_FAILED;
    public static HResult SN_NO_SUITABLE_CSP;
    public static HResult CORSEC_E_NO_SUITABLE_CSP;
    public static HResult CORSEC_E_INVALID_ATTR;
    public static HResult CORSEC_E_POLICY_EXCEPTION;
    public static HResult CORSEC_E_MIN_GRANT_FAIL;
    public static HResult CORSEC_E_NO_EXEC_PERM;
    public static HResult CORSEC_E_XMLSYNTAX;
    public static HResult CORSEC_E_INVALID_STRONGNAME;
    public static HResult CORSEC_E_MISSING_STRONGNAME;
    public static HResult CORSEC_E_CONTAINER_NOT_FOUND;
    public static HResult CORSEC_E_INVALID_IMAGE_FORMAT;
    public static HResult CORSEC_E_INVALID_PUBLICKEY;
    public static HResult CORSEC_E_SIGNATURE_MISMATCH;
    public static HResult CORSEC_E_CRYPTO;
    public static HResult CORSEC_E_CRYPTO_UNEX_OPER;
    public static HResult CORSECATTR_E_BAD_ATTRIBUTE;
    public static HResult CORSECATTR_E_MISSING_CONSTRUCTOR;
    public static HResult CORSECATTR_E_FAILED_TO_CREATE_PERM;
    public static HResult CORSECATTR_E_BAD_ACTION_ASM;
    public static HResult CORSECATTR_E_BAD_ACTION_OTHER;
    public static HResult CORSECATTR_E_BAD_PARENT;
    public static HResult CORSECATTR_E_TRUNCATED;
    public static HResult CORSECATTR_E_BAD_VERSION;
    public static HResult CORSECATTR_E_BAD_ACTION;
    public static HResult CORSECATTR_E_NO_SELF_REF;
    public static HResult CORSECATTR_E_BAD_NONCAS;
    public static HResult CORSECATTR_E_ASSEMBLY_LOAD_FAILED;
    public static HResult CORSECATTR_E_ASSEMBLY_LOAD_FAILED_EX;
    public static HResult CORSECATTR_E_TYPE_LOAD_FAILED;
    public static HResult CORSECATTR_E_TYPE_LOAD_FAILED_EX;
    public static HResult CORSECATTR_E_ABSTRACT;
    public static HResult CORSECATTR_E_UNSUPPORTED_TYPE;
    public static HResult CORSECATTR_E_UNSUPPORTED_ENUM_TYPE;
    public static HResult CORSECATTR_E_NO_FIELD;
    public static HResult CORSECATTR_E_NO_PROPERTY;
    public static HResult CORSECATTR_E_EXCEPTION;
    public static HResult CORSECATTR_E_EXCEPTION_HR;
    public static HResult ISS_E_ISOSTORE;
    public static HResult ISS_E_OPEN_STORE_FILE;
    public static HResult ISS_E_OPEN_FILE_MAPPING;
    public static HResult ISS_E_MAP_VIEW_OF_FILE;
    public static HResult ISS_E_GET_FILE_SIZE;
    public static HResult ISS_E_CREATE_MUTEX;
    public static HResult ISS_E_LOCK_FAILED;
    public static HResult ISS_E_FILE_WRITE;
    public static HResult ISS_E_SET_FILE_POINTER;
    public static HResult ISS_E_CREATE_DIR;
    public static HResult ISS_E_STORE_NOT_OPEN;
    public static HResult ISS_E_CORRUPTED_STORE_FILE;
    public static HResult ISS_E_STORE_VERSION;
    public static HResult ISS_E_FILE_NOT_MAPPED;
    public static HResult ISS_E_BLOCK_SIZE_TOO_SMALL;
    public static HResult ISS_E_ALLOC_TOO_LARGE;
    public static HResult ISS_E_USAGE_WILL_EXCEED_QUOTA;
    public static HResult ISS_E_TABLE_ROW_NOT_FOUND;
    public static HResult ISS_E_DEPRECATE;
    public static HResult ISS_E_CALLER;
    public static HResult ISS_E_PATH_LENGTH;
    public static HResult ISS_E_MACHINE;
    public static HResult ISS_E_MACHINE_DACL;
    public static HResult ISS_E_ISOSTORE_START;
    public static HResult ISS_E_ISOSTORE_END;
    public static HResult COR_E_APPLICATION;
    public static HResult COR_E_ARGUMENT;
    public static HResult COR_E_ARGUMENTOUTOFRANGE;
    public static HResult COR_E_ARITHMETIC;
    public static HResult COR_E_ARRAYTYPEMISMATCH;
    public static HResult COR_E_CONTEXTMARSHAL;
    public static HResult COR_E_TIMEOUT;
    public static HResult COR_E_KEYNOTFOUND;
    public static HResult COR_E_DEVICESNOTSUPPORTED;
    public static HResult COR_E_DIVIDEBYZERO;
    public static HResult COR_E_EXCEPTION;
    public static HResult COR_E_EXECUTIONENGINE;
    public static HResult COR_E_FIELDACCESS;
    public static HResult COR_E_FILE_NOT_FOUND;
    public static HResult COR_E_FORMAT;
    public static HResult COR_E_BADIMAGEFORMAT;
    public static HResult COR_E_ASSEMBLYEXPECTED;
    public static HResult COR_E_TYPEUNLOADED;
    public static HResult COR_E_INDEXOUTOFRANGE;
    public static HResult COR_E_INVALIDCAST;
    public static HResult COR_E_INVALIDOPERATION;
    public static HResult COR_E_INVALIDPROGRAM;
    public static HResult COR_E_MEMBERACCESS;
    public static HResult COR_E_METHODACCESS;
    public static HResult COR_E_MISSINGFIELD;
    public static HResult COR_E_MISSINGMANIFESTRESOURCE;
    public static HResult COR_E_MISSINGMEMBER;
    public static HResult COR_E_MISSINGMETHOD;
    public static HResult COR_E_MISSINGSATELLITEASSEMBLY;
    public static HResult COR_E_MULTICASTNOTSUPPORTED;
    public static HResult COR_E_NOTFINITENUMBER;
    public static HResult COR_E_DUPLICATEWAITOBJECT;
    public static HResult COR_E_PLATFORMNOTSUPPORTED;
    public static HResult COR_E_NOTSUPPORTED;
    public static HResult COR_E_NULLREFERENCE;
    public static HResult COR_E_OUTOFMEMORY;
    public static HResult COR_E_OVERFLOW;
    public static HResult COR_E_RANK;
    public static HResult COR_E_REMOTING;
    public static HResult COR_E_SERVER;
    public static HResult COR_E_SERVICEDCOMPONENT;
    public static HResult COR_E_SECURITY;
    public static HResult COR_E_SERIALIZATION;
    public static HResult COR_E_STACKOVERFLOW;
    public static HResult COR_E_SYNCHRONIZATIONLOCK;
    public static HResult COR_E_SYSTEM;
    public static HResult COR_E_THREADABORTED;
    public static HResult COR_E_OPERATIONCANCELED;
    public static HResult COR_E_NOTCANCELABLE;
    public static HResult COR_E_THREADINTERRUPTED;
    public static HResult COR_E_THREADSTATE;
    public static HResult COR_E_THREADSTOP;
    public static HResult COR_E_TYPEINITIALIZATION;
    public static HResult COR_E_TYPELOAD;
    public static HResult COR_E_ENTRYPOINTNOTFOUND;
    public static HResult COR_E_DLLNOTFOUND;
    public static HResult COR_E_UNAUTHORIZEDACCESS;
    public static HResult COR_E_VERIFICATION;
    public static HResult COR_E_INVALIDCOMOBJECT;
    public static HResult COR_E_COMOBJECTINUSE;
    public static HResult COR_E_SEMAPHOREFULL;
    public static HResult COR_E_WAITHANDLECANNOTBEOPENED;
    public static HResult COR_E_ABANDONEDMUTEX;
    public static HResult COR_E_MARSHALDIRECTIVE;
    public static HResult COR_E_INVALIDOLEVARIANTTYPE;
    public static HResult COR_E_SAFEARRAYTYPEMISMATCH;
    public static HResult COR_E_SAFEARRAYRANKMISMATCH;
    public static HResult COR_E_DATAMISALIGNED;
    public static HResult COR_E_TARGETPARAMCOUNT;
    public static HResult COR_E_AMBIGUOUSMATCH;
    public static HResult COR_E_INVALIDFILTERCRITERIA;
    public static HResult COR_E_REFLECTIONTYPELOAD;
    public static HResult COR_E_TARGET;
    public static HResult COR_E_TARGETINVOCATION;
    public static HResult COR_E_CUSTOMATTRIBUTEFORMAT;
    public static HResult COR_E_FILELOAD;
    public static HResult COR_E_IO;
    public static HResult COR_E_OBJECTDISPOSED;
    public static HResult COR_E_HOSTPROTECTION;
    public static HResult COR_E_FAILFAST;
    public static HResult CLR_E_SHIM_RUNTIMELOAD;
    public static HResult CLR_E_SHIM_RUNTIMEEXPORT;
    public static HResult CLR_E_SHIM_INSTALLROOT;
    public static HResult CLR_E_SHIM_INSTALLCOMP;
    public static HResult VER_E_HRESULT;
    public static HResult VER_E_OFFSET;
    public static HResult VER_E_OPCODE;
    public static HResult VER_E_OPERAND;
    public static HResult VER_E_TOKEN;
    public static HResult VER_E_EXCEPT;
    public static HResult VER_E_STACK_SLOT;
    public static HResult VER_E_LOC;
    public static HResult VER_E_ARG;
    public static HResult VER_E_FOUND;
    public static HResult VER_E_EXPECTED;
    public static HResult VER_E_LOC_BYNAME;
    public static HResult VER_E_UNKNOWN_OPCODE;
    public static HResult VER_E_SIG_CALLCONV;
    public static HResult VER_E_SIG_ELEMTYPE;
    public static HResult VER_E_RET_SIG;
    public static HResult VER_E_FIELD_SIG;
    public static HResult VER_E_INTERNAL;
    public static HResult VER_E_STACK_TOO_LARGE;
    public static HResult VER_E_ARRAY_NAME_LONG;
    public static HResult VER_E_FALLTHRU;
    public static HResult VER_E_TRY_GTEQ_END;
    public static HResult VER_E_TRYEND_GT_CS;
    public static HResult VER_E_HND_GTEQ_END;
    public static HResult VER_E_HNDEND_GT_CS;
    public static HResult VER_E_FLT_GTEQ_CS;
    public static HResult VER_E_TRY_START;
    public static HResult VER_E_HND_START;
    public static HResult VER_E_FLT_START;
    public static HResult VER_E_TRY_OVERLAP;
    public static HResult VER_E_TRY_EQ_HND_FIL;
    public static HResult VER_E_TRY_SHARE_FIN_FAL;
    public static HResult VER_E_HND_OVERLAP;
    public static HResult VER_E_HND_EQ;
    public static HResult VER_E_FIL_OVERLAP;
    public static HResult VER_E_FIL_EQ;
    public static HResult VER_E_FIL_CONT_TRY;
    public static HResult VER_E_FIL_CONT_HND;
    public static HResult VER_E_FIL_CONT_FIL;
    public static HResult VER_E_FIL_GTEQ_CS;
    public static HResult VER_E_FIL_START;
    public static HResult VER_E_FALLTHRU_EXCEP;
    public static HResult VER_E_FALLTHRU_INTO_HND;
    public static HResult VER_E_FALLTHRU_INTO_FIL;
    public static HResult VER_E_LEAVE;
    public static HResult VER_E_RETHROW;
    public static HResult VER_E_ENDFINALLY;
    public static HResult VER_E_ENDFILTER;
    public static HResult VER_E_ENDFILTER_MISSING;
    public static HResult VER_E_BR_INTO_TRY;
    public static HResult VER_E_BR_INTO_HND;
    public static HResult VER_E_BR_INTO_FIL;
    public static HResult VER_E_BR_OUTOF_TRY;
    public static HResult VER_E_BR_OUTOF_HND;
    public static HResult VER_E_BR_OUTOF_FIL;
    public static HResult VER_E_BR_OUTOF_FIN;
    public static HResult VER_E_RET_FROM_TRY;
    public static HResult VER_E_RET_FROM_HND;
    public static HResult VER_E_RET_FROM_FIL;
    public static HResult VER_E_BAD_JMP_TARGET;
    public static HResult VER_E_PATH_LOC;
    public static HResult VER_E_PATH_THIS;
    public static HResult VER_E_PATH_STACK;
    public static HResult VER_E_PATH_STACK_DEPTH;
    public static HResult VER_E_THIS;
    public static HResult VER_E_THIS_UNINIT_EXCEP;
    public static HResult VER_E_THIS_UNINIT_STORE;
    public static HResult VER_E_THIS_UNINIT_RET;
    public static HResult VER_E_THIS_UNINIT_V_RET;
    public static HResult VER_E_THIS_UNINIT_BR;
    public static HResult VER_E_LDFTN_CTOR;
    public static HResult VER_E_STACK_NOT_EQ;
    public static HResult VER_E_STACK_UNEXPECTED;
    public static HResult VER_E_STACK_EXCEPTION;
    public static HResult VER_E_STACK_OVERFLOW;
    public static HResult VER_E_STACK_UNDERFLOW;
    public static HResult VER_E_STACK_EMPTY;
    public static HResult VER_E_STACK_UNINIT;
    public static HResult VER_E_STACK_I_I4_I8;
    public static HResult VER_E_STACK_R_R4_R8;
    public static HResult VER_E_STACK_NO_R_I8;
    public static HResult VER_E_STACK_NUMERIC;
    public static HResult VER_E_STACK_OBJREF;
    public static HResult VER_E_STACK_P_OBJREF;
    public static HResult VER_E_STACK_BYREF;
    public static HResult VER_E_STACK_METHOD;
    public static HResult VER_E_STACK_ARRAY_SD;
    public static HResult VER_E_STACK_VALCLASS;
    public static HResult VER_E_STACK_P_VALCLASS;
    public static HResult VER_E_STACK_NO_VALCLASS;
    public static HResult VER_E_LOC_DEAD;
    public static HResult VER_E_LOC_NUM;
    public static HResult VER_E_ARG_NUM;
    public static HResult VER_E_TOKEN_RESOLVE;
    public static HResult VER_E_TOKEN_TYPE;
    public static HResult VER_E_TOKEN_TYPE_MEMBER;
    public static HResult VER_E_TOKEN_TYPE_FIELD;
    public static HResult VER_E_TOKEN_TYPE_SIG;
    public static HResult VER_E_UNVERIFIABLE;
    public static HResult VER_E_LDSTR_OPERAND;
    public static HResult VER_E_RET_PTR_TO_STACK;
    public static HResult VER_E_RET_VOID;
    public static HResult VER_E_RET_MISSING;
    public static HResult VER_E_RET_EMPTY;
    public static HResult VER_E_RET_UNINIT;
    public static HResult VER_E_ARRAY_ACCESS;
    public static HResult VER_E_ARRAY_V_STORE;
    public static HResult VER_E_ARRAY_SD;
    public static HResult VER_E_ARRAY_SD_PTR;
    public static HResult VER_E_ARRAY_FIELD;
    public static HResult VER_E_ARGLIST;
    public static HResult VER_E_VALCLASS;
    public static HResult VER_E_METHOD_ACCESS;
    public static HResult VER_E_FIELD_ACCESS;
    public static HResult VER_E_DEAD;
    public static HResult VER_E_FIELD_STATIC;
    public static HResult VER_E_FIELD_NO_STATIC;
    public static HResult VER_E_ADDR;
    public static HResult VER_E_ADDR_BYREF;
    public static HResult VER_E_ADDR_LITERAL;
    public static HResult VER_E_INITONLY;
    public static HResult VER_E_THROW;
    public static HResult VER_E_CALLVIRT_VALCLASS;
    public static HResult VER_E_CALL_SIG;
    public static HResult VER_E_CALL_STATIC;
    public static HResult VER_E_CTOR;
    public static HResult VER_E_CTOR_VIRT;
    public static HResult VER_E_CTOR_OR_SUPER;
    public static HResult VER_E_CTOR_MUL_INIT;
    public static HResult VER_E_SIG;
    public static HResult VER_E_SIG_ARRAY;
    public static HResult VER_E_SIG_ARRAY_PTR;
    public static HResult VER_E_SIG_ARRAY_BYREF;
    public static HResult VER_E_SIG_ELEM_PTR;
    public static HResult VER_E_SIG_VARARG;
    public static HResult VER_E_SIG_VOID;
    public static HResult VER_E_SIG_BYREF_BYREF;
    public static HResult VER_E_CODE_SIZE_ZERO;
    public static HResult VER_E_BAD_VARARG;
    public static HResult VER_E_TAIL_CALL;
    public static HResult VER_E_TAIL_BYREF;
    public static HResult VER_E_TAIL_RET;
    public static HResult VER_E_TAIL_RET_VOID;
    public static HResult VER_E_TAIL_RET_TYPE;
    public static HResult VER_E_TAIL_STACK_EMPTY;
    public static HResult VER_E_METHOD_END;
    public static HResult VER_E_BAD_BRANCH;
    public static HResult VER_E_FIN_OVERLAP;
    public static HResult VER_E_LEXICAL_NESTING;
    public static HResult VER_E_VOLATILE;
    public static HResult VER_E_UNALIGNED;
    public static HResult VER_E_INNERMOST_FIRST;
    public static HResult VER_E_CALLI_VIRTUAL;
    public static HResult VER_E_CALL_ABSTRACT;
    public static HResult VER_E_STACK_UNEXP_ARRAY;
    public static HResult VER_E_NOT_IN_GC_HEAP;
    public static HResult VER_E_TRY_N_EMPTY_STACK;
    public static HResult VER_E_DLGT_CTOR;
    public static HResult VER_E_DLGT_BB;
    public static HResult VER_E_DLGT_PATTERN;
    public static HResult VER_E_DLGT_LDFTN;
    public static HResult VER_E_FTN_ABSTRACT;
    public static HResult VER_E_SIG_C_VC;
    public static HResult VER_E_SIG_VC_C;
    public static HResult VER_E_BOX_PTR_TO_STACK;
    public static HResult VER_E_SIG_BYREF_TB_AH;
    public static HResult VER_E_SIG_ARRAY_TB_AH;
    public static HResult VER_E_ENDFILTER_STACK;
    public static HResult VER_E_DLGT_SIG_I;
    public static HResult VER_E_DLGT_SIG_O;
    public static HResult VER_E_RA_PTR_TO_STACK;
    public static HResult VER_E_CATCH_VALUE_TYPE;
    public static HResult VER_E_CATCH_BYREF;
    public static HResult VER_E_FIL_PRECEED_HND;
    public static HResult VER_E_LDVIRTFTN_STATIC;
    public static HResult VER_E_CALLVIRT_STATIC;
    public static HResult VER_E_INITLOCALS;
    public static HResult VER_E_BR_TO_EXCEPTION;
    public static HResult VER_E_CALL_CTOR;
    public static HResult VER_E_VALCLASS_OBJREF_VAR;
    public static HResult VER_E_STACK_P_VALCLASS_OBJREF_VAR;
    public static HResult VER_E_SIG_VAR_PARAM;
    public static HResult VER_E_SIG_MVAR_PARAM;
    public static HResult VER_E_SIG_VAR_ARG;
    public static HResult VER_E_SIG_MVAR_ARG;
    public static HResult VER_E_SIG_GENERICINST;
    public static HResult VER_E_SIG_METHOD_INST;
    public static HResult VER_E_SIG_METHOD_PARENT_INST;
    public static HResult VER_E_SIG_FIELD_PARENT_INST;
    public static HResult VER_E_CALLCONV_NOT_GENERICINST;
    public static HResult VER_E_TOKEN_BAD_METHOD_SPEC;
    public static HResult VER_E_BAD_READONLY_PREFIX;
    public static HResult VER_E_BAD_CONSTRAINED_PREFIX;
    public static HResult VER_E_CIRCULAR_VAR_CONSTRAINTS;
    public static HResult VER_E_CIRCULAR_MVAR_CONSTRAINTS;
    public static HResult VER_E_UNSATISFIED_METHOD_INST;
    public static HResult VER_E_UNSATISFIED_METHOD_PARENT_INST;
    public static HResult VER_E_UNSATISFIED_FIELD_PARENT_INST;
    public static HResult VER_E_UNSATISFIED_BOX_OPERAND;
    public static HResult VER_E_CONSTRAINED_CALL_WITH_NON_BYREF_THIS;
    public static HResult VER_E_CONSTRAINED_OF_NON_VARIABLE_TYPE;
    public static HResult VER_E_READONLY_UNEXPECTED_CALLEE;
    public static HResult VER_E_READONLY_ILLEGAL_WRITE;
    public static HResult VER_E_READONLY_IN_MKREFANY;
    public static HResult VER_E_UNALIGNED_ALIGNMENT;
    public static HResult VER_E_TAILCALL_INSIDE_EH;
    public static HResult VER_E_BACKWARD_BRANCH;
    public static HResult VER_E_CALL_TO_VTYPE_BASE;
    public static HResult VER_E_NEWOBJ_OF_ABSTRACT_CLASS;
    public static HResult VER_E_FIELD_OVERLAP;
    public static HResult VER_E_BAD_PE;
    public static HResult VER_E_BAD_MD;
    public static HResult VER_E_BAD_APPDOMAIN;
    public static HResult VER_E_TYPELOAD;
    public static HResult VER_E_PE_LOAD;
    public static HResult VER_E_WRITE_RVA_STATIC;
    public static HResult CORDBG_E_THREAD_NOT_SCHEDULED;
    public static HResult CORDBG_E_HANDLE_HAS_BEEN_DISPOSED;
    public static HResult CORDBG_E_NONINTERCEPTABLE_EXCEPTION;
    public static HResult CORDBG_E_CANT_UNWIND_ABOVE_CALLBACK;
    public static HResult CORDBG_E_INTERCEPT_FRAME_ALREADY_SET;
    public static HResult CORDBG_E_NO_NATIVE_PATCH_AT_ADDR;
    public static HResult CORDBG_E_MUST_BE_INTEROP_DEBUGGING;
    public static HResult CORDBG_E_NATIVE_PATCH_ALREADY_AT_ADDR;
    public static HResult CORDBG_E_TIMEOUT;
    public static HResult CORDBG_E_CANT_CALL_ON_THIS_THREAD;
    public static HResult CORDBG_E_ENC_INFOLESS_METHOD;
    public static HResult CORDBG_E_ENC_NESTED_HANLDERS;
    public static HResult CORDBG_E_ENC_IN_FUNCLET;
    public static HResult CORDBG_E_ENC_LOCALLOC;
    public static HResult CORDBG_E_ENC_EDIT_NOT_SUPPORTED;
    public static HResult CORDBG_E_FEABORT_DELAYED_UNTIL_THREAD_RESUMED;
    public static HResult CORDBG_E_NOTREADY;
    public static HResult CORDBG_E_CANNOT_RESOLVE_ASSEMBLY;
    public static HResult CORDBG_E_MUST_BE_IN_LOAD_MODULE;
    public static HResult CORDBG_E_CANNOT_BE_ON_ATTACH;
    public static HResult CORDBG_S_NOT_ALL_BITS_SET;
    public static HResult CORDBG_E_NGEN_NOT_SUPPORTED;
    public static HResult CORDBG_E_ILLEGAL_SHUTDOWN_ORDER;
    public static HResult CORDBG_E_CANNOT_DEBUG_FIBER_PROCESS;
    public static HResult CORDBG_E_MUST_BE_IN_CREATE_PROCESS;
    public static HResult CORDBG_E_DETACH_FAILED_OUTSTANDING_EVALS;
    public static HResult CORDBG_E_DETACH_FAILED_OUTSTANDING_STEPPERS;
    public static HResult CORDBG_E_CANT_INTEROP_STEP_OUT;
    public static HResult CORDBG_E_DETACH_FAILED_OUTSTANDING_BREAKPOINTS;
    public static HResult CORDBG_E_ILLEGAL_IN_STACK_OVERFLOW;
    public static HResult CORDBG_E_ILLEGAL_AT_GC_UNSAFE_POINT;
    public static HResult CORDBG_E_ILLEGAL_IN_PROLOG;
    public static HResult CORDBG_E_ILLEGAL_IN_NATIVE_CODE;
    public static HResult CORDBG_E_ILLEGAL_IN_OPTIMIZED_CODE;
    public static HResult CORDBG_E_MISSING_METADATA;
    public static HResult CORDBG_E_MODULE_LOADED_FROM_DISK;
    public static HResult CORDBG_E_SYMBOLS_NOT_AVAILABLE;
    public static HResult CORDBG_E_VALUE_POINTS_TO_FUNCTION;
    public static HResult PEFMT_E_NO_CONTENTS;
    public static HResult PEFMT_E_NO_NTHEADERS;
    public static HResult PEFMT_E_64BIT;
    public static HResult PEFMT_E_NO_CORHEADER;
    public static HResult PEFMT_E_NOT_ILONLY;
    public static HResult PEFMT_E_IMPORT_DLLS;
    public static HResult PEFMT_E_EXE_NOENTRYPOINT;
    public static HResult PEFMT_E_BASE_RELOCS;
    public static HResult PEFMT_E_ENTRYPOINT;
    public static HResult PEFMT_E_ZERO_SIZEOFCODE;
    public static HResult PEFMT_E_BAD_CORHEADER;
    public static HResult HR_FOR_ERROR_PARTIAL_COPY;
}
[GuidAttribute("B48AAF7C-8F3F-4DD0-8E99-B695AEBF1CBD")]
[InterfaceTypeAttribute("1")]
public interface NetNativeSymbolProvider.ICorDebugSymbolProviderFactory {
    public abstract virtual ICorDebugSymbolProvider CreateSymbolProvider(IDiaDataSource pDiaDataSource, IDiaSession pDiaSession, ICorDebugDataTarget pCorDebugDataTarget);
}
public class NetNativeSymbolProvider.InstanceFieldSymbol : SymbolDataBase {
    private UInt32 m_offset;
    public InstanceFieldSymbol(string name, UInt32 size, UInt32 offset);
    public sealed virtual void GetOffset(UInt32& pOffset);
}
public interface NetNativeSymbolProvider.ISymbolProviderProcessContext {
    public ProcessorArchitecture ProcessArchitecture { get; }
    public abstract virtual ProcessorArchitecture get_ProcessArchitecture();
    public abstract virtual NativeContext GetThreadContext(int threadID);
    public abstract virtual void SetThreadContext(int threadID, NativeContext nativeContext);
    public abstract virtual void WriteMemory(long address, Byte[] buffer);
    public abstract virtual int ReadPartialMemory(long address, Byte[] buffer);
}
public class NetNativeSymbolProvider.LocalVar : object {
    [CompilerGeneratedAttribute]
private bool <IsTypedByRef>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsByRef>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPinned>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomModSignature[] <CustomMods>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSignature <Type>k__BackingField;
    public bool IsTypedByRef { get; public set; }
    public bool IsByRef { get; public set; }
    public bool IsPinned { get; public set; }
    public CustomModSignature[] CustomMods { get; public set; }
    public TypeSignature Type { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsTypedByRef();
    [CompilerGeneratedAttribute]
public void set_IsTypedByRef(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsByRef();
    [CompilerGeneratedAttribute]
public void set_IsByRef(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPinned();
    [CompilerGeneratedAttribute]
public void set_IsPinned(bool value);
    [CompilerGeneratedAttribute]
public CustomModSignature[] get_CustomMods();
    [CompilerGeneratedAttribute]
public void set_CustomMods(CustomModSignature[] value);
    [CompilerGeneratedAttribute]
public TypeSignature get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeSignature value);
}
public class NetNativeSymbolProvider.LocalVarSignature : Signature {
    [CompilerGeneratedAttribute]
private LocalVar[] <LocalVars>k__BackingField;
    public LocalVar[] LocalVars { get; public set; }
    [CompilerGeneratedAttribute]
public LocalVar[] get_LocalVars();
    [CompilerGeneratedAttribute]
public void set_LocalVars(LocalVar[] value);
}
public class NetNativeSymbolProvider.MethodDefSignature : Signature {
    [CompilerGeneratedAttribute]
private bool <HasThis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExplicitThis>k__BackingField;
    [CompilerGeneratedAttribute]
private CorCallingConvention <CallingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GenericParamCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ParamSignature <RetType>k__BackingField;
    [CompilerGeneratedAttribute]
private ParamSignature[] <Params>k__BackingField;
    public bool HasThis { get; public set; }
    public bool ExplicitThis { get; public set; }
    public CorCallingConvention CallingConvention { get; public set; }
    public int GenericParamCount { get; public set; }
    public ParamSignature RetType { get; public set; }
    public ParamSignature[] Params { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasThis();
    [CompilerGeneratedAttribute]
public void set_HasThis(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExplicitThis();
    [CompilerGeneratedAttribute]
public void set_ExplicitThis(bool value);
    [CompilerGeneratedAttribute]
public CorCallingConvention get_CallingConvention();
    [CompilerGeneratedAttribute]
public void set_CallingConvention(CorCallingConvention value);
    [CompilerGeneratedAttribute]
public int get_GenericParamCount();
    [CompilerGeneratedAttribute]
public void set_GenericParamCount(int value);
    [CompilerGeneratedAttribute]
public ParamSignature get_RetType();
    [CompilerGeneratedAttribute]
public void set_RetType(ParamSignature value);
    [CompilerGeneratedAttribute]
public ParamSignature[] get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(ParamSignature[] value);
}
public class NetNativeSymbolProvider.MethodRefSignature : MethodDefSignature {
    [CompilerGeneratedAttribute]
private int <PostSentinelParamCount>k__BackingField;
    public int PostSentinelParamCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PostSentinelParamCount();
    [CompilerGeneratedAttribute]
public void set_PostSentinelParamCount(int value);
}
public class NetNativeSymbolProvider.MethodSpecSignature : Signature {
    [CompilerGeneratedAttribute]
private TypeSignature[] <GenericArgs>k__BackingField;
    public TypeSignature[] GenericArgs { get; public set; }
    [CompilerGeneratedAttribute]
public TypeSignature[] get_GenericArgs();
    [CompilerGeneratedAttribute]
public void set_GenericArgs(TypeSignature[] value);
}
public class NetNativeSymbolProvider.MvarTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    public int Number { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(int value);
}
public class NetNativeSymbolProvider.ParamSignature : object {
    [CompilerGeneratedAttribute]
private CustomModSignature[] <CustomMods>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSignature <Type>k__BackingField;
    public CustomModSignature[] CustomMods { get; public set; }
    public TypeSignature Type { get; public set; }
    [CompilerGeneratedAttribute]
public CustomModSignature[] get_CustomMods();
    [CompilerGeneratedAttribute]
public void set_CustomMods(CustomModSignature[] value);
    [CompilerGeneratedAttribute]
public TypeSignature get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeSignature value);
}
public class NetNativeSymbolProvider.PropertySignature : Signature {
    [CompilerGeneratedAttribute]
private bool <HasThis>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomModSignature[] <CustomMods>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSignature <RetType>k__BackingField;
    [CompilerGeneratedAttribute]
private ParamSignature[] <Params>k__BackingField;
    public bool HasThis { get; public set; }
    public CustomModSignature[] CustomMods { get; public set; }
    public TypeSignature RetType { get; public set; }
    public ParamSignature[] Params { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasThis();
    [CompilerGeneratedAttribute]
public void set_HasThis(bool value);
    [CompilerGeneratedAttribute]
public CustomModSignature[] get_CustomMods();
    [CompilerGeneratedAttribute]
public void set_CustomMods(CustomModSignature[] value);
    [CompilerGeneratedAttribute]
public TypeSignature get_RetType();
    [CompilerGeneratedAttribute]
public void set_RetType(TypeSignature value);
    [CompilerGeneratedAttribute]
public ParamSignature[] get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(ParamSignature[] value);
}
public class NetNativeSymbolProvider.PtrTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private TypeSignature <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomModSignature[] <CustomMods>k__BackingField;
    public TypeSignature Type { get; public set; }
    public CustomModSignature[] CustomMods { get; public set; }
    [CompilerGeneratedAttribute]
public TypeSignature get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeSignature value);
    [CompilerGeneratedAttribute]
public CustomModSignature[] get_CustomMods();
    [CompilerGeneratedAttribute]
public void set_CustomMods(CustomModSignature[] value);
}
internal class NetNativeSymbolProvider.ReadMemoryFailureException : Exception {
}
public abstract class NetNativeSymbolProvider.Signature : object {
    [CompilerGeneratedAttribute]
private SignatureKind <Kind>k__BackingField;
    public SignatureKind Kind { get; public set; }
    [CompilerGeneratedAttribute]
public SignatureKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(SignatureKind value);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual string ToString();
}
public enum NetNativeSymbolProvider.SignatureKind : Enum {
    public int value__;
    public static SignatureKind MethodRef;
    public static SignatureKind MethodDef;
    public static SignatureKind Field;
    public static SignatureKind LocalVar;
    public static SignatureKind Property;
    public static SignatureKind MethodSpec;
    public static SignatureKind TypeSpec;
}
public class NetNativeSymbolProvider.SignatureParser : object {
    public static int UncompressData(Byte[] sigBytes, Int32& position);
    public static int ReadTypeDefOrRef(Byte[] sigBytes, Int32& position);
    public static Signature ReadSig(Byte[] sigBytes);
    public static MethodRefSignature ReadMethodRefSig(Byte[] sigBytes);
    public static MethodDefSignature ReadMethodDefSig(Byte[] sigBytes);
    public static FieldSignature ReadFieldSig(Byte[] sigBytes);
    public static PropertySignature ReadPropertySig(Byte[] sigBytes);
    public static Signature ReadMemberRefSig(Byte[] sigBytes);
    public static MethodSpecSignature ReadMethodSpecSig(Byte[] sigBytes);
    public static LocalVarSignature ReadLocalVarSig(Byte[] sigBytes);
    private static FieldSignature ReadFieldSigHelper(Byte[] sigBytes, Int32& position);
    private static Signature ReadRootSigHelper(Byte[] sigBytes, Int32& position, SignatureKind sigsAllowed);
    public static TypeSpecSignature ReadTypeSpecSig(Byte[] sigBytes);
    private static PropertySignature ReadPropertySig(Byte[] sigBytes, Int32& position, CorCallingConvention callingConvention);
    private static LocalVarSignature ReadLocalVarSig(Byte[] sigBytes, Int32& position);
    private static MethodDefSignature ReadMethodDefOrRefSig(Byte[] sigBytes, Int32& position, CorCallingConvention callingConvention, bool methodRefAllowed);
    private static ParamSignature ReadRetTypeSignature(Byte[] sigBytes, Int32& position);
    private static ParamSignature ReadParamSignature(Byte[] sigBytes, Int32& position);
    public static TypeSignature ReadTypeSig(Byte[] sigBytes, Int32& position);
    private static TypeSignature ReadTypeSig(Byte[] sigBytes, Int32& position, ElementTypesAllowed allowed);
    private static ArrayTypeSignature ReadArrayTypeSig(Byte[] sigBytes, Int32& position);
    private static ClassTypeSignature ReadClassTypeSig(Byte[] sigBytes, Int32& position);
    private static ValueTypeTypeSignature ReadValueTypeTypeSig(Byte[] sigBytes, Int32& position);
    private static FunctionPointerTypeSignature ReadFnPtrTypeSig(Byte[] sigBytes, Int32& position);
    private static GenericInstTypeSignature ReadGenericInstTypeSig(Byte[] sigBytes, Int32& position);
    private static MvarTypeSignature ReadMvarTypeSig(Byte[] sigBytes, Int32& position);
    private static VarTypeSignature ReadVarTypeSig(Byte[] sigBytes, Int32& position);
    private static CustomModSignature ReadCustomModSig(Byte[] sigBytes, Int32& position);
    private static PtrTypeSignature ReadPtrTypeSig(Byte[] sigBytes, Int32& position);
    private static CustomModSignature[] ReadOptionalCustomModList(Byte[] sigBytes, Int32& position);
    private static SzArrayTypeSignature ReadSzArraySig(Byte[] sigBytes, Int32& position);
    private static ByRefTypeSignature ReadByRefTypeSig(Byte[] sigBytes, Int32& position);
    private static Int32[] ReadLengthPrefixedIntArray(Byte[] sigBytes, Int32& position);
}
public class NetNativeSymbolProvider.StaticFieldSymbol : SymbolDataBase {
    private ulong m_rva;
    public StaticFieldSymbol(string name, UInt32 size, ulong rva);
    public sealed virtual void GetAddress(UInt64& pRVA);
}
public class NetNativeSymbolProvider.SymbolDataBase : object {
    private string m_name;
    private UInt32 m_size;
    public SymbolDataBase(string name, UInt32 size);
    public virtual void GetName(UInt32 cchName, UInt32& pcchName, StringBuilder szName);
    public virtual void GetSize(UInt32& pcbSize);
}
public class NetNativeSymbolProvider.SymbolProvider : object {
    private static string NativeTokenToPseudoMapStreamName;
    private Dictionary`2<UInt32, List`1<ICorDebugStaticFieldSymbol>> m_staticFieldMap;
    private Dictionary`2<UInt32, List`1<ICorDebugThreadStaticFieldSymbol>> m_threadStaticFieldMap;
    private Dictionary`2<UInt32, List`1<ICorDebugInstanceFieldSymbol>> m_instanceFieldMap;
    private DiaModule m_diaModule;
    private ISymbolProviderProcessContext m_symbolProviderProcessContext;
    private PEReader[] m_imagePeReader;
    private IDiaSymbol m_globalScope;
    private UInt32[] m_nativeTokenToPseudoMap;
    private UInt32 m_cAssemblies;
    private bool m_multiFile;
    private UInt32[] m_assemblyIndexes;
    private Dictionary`2<UInt32, TypeSpecSignatureHolder> codeRvaSignatureMap;
    private Dictionary`2<UInt32, UInt32> framePropMap;
    private Dictionary`2<UInt32, TypeSpecSignatureHolder> symbolIDSignatureMap;
    private Dictionary`2<TypeSpecSignatureHolder, UInt32> signatureSymbolIDMap;
    public SymbolProvider(DiaModule moduleSymbols, ISymbolProviderProcessContext symbolProviderProcessContext);
    private bool TryLoadILImage();
    private static void GetSymbols(UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, T[] pSymbols, List`1<T> availableSymbols);
    public sealed virtual int GetStaticFieldSymbols(UInt32 cbSignature, Byte[] typeSignature, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugStaticFieldSymbol[] pSymbols);
    public sealed virtual int GetThreadStaticFieldSymbols(UInt32 cbSignature, Byte[] typeSignature, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugThreadStaticFieldSymbol[] pSymbols);
    public sealed virtual int GetInstanceFieldSymbols(UInt32 cbSignature, Byte[] typeSignature, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugInstanceFieldSymbol[] pSymbols);
    private VariableSymbol GetVariableSymbol(IDiaSymbol dataSymbol, int slotIndex);
    private void ReadVariables(bool findParams, IDiaSymbol scopeSym, List`1<ICorDebugVariableSymbol> variableSymbols);
    private void GetMethodVariableSymbols(UInt32 nativeRVA, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugVariableSymbol[] pSymbols, bool findParams);
    public sealed virtual void GetMethodLocalSymbols(UInt32 nativeRVA, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugVariableSymbol[] pSymbols);
    public sealed virtual void GetMethodParameterSymbols(UInt32 nativeRVA, UInt32 cRequestedSymbols, UInt32& pcFetchedSymbols, ICorDebugVariableSymbol[] pSymbols);
    public sealed virtual void GetMergedAssemblyRecords(UInt32 cRequestedRecords, UInt32& pcFetchedRecords, ICorDebugMergedAssemblyRecord[] pRecords);
    private void LoadMethodTokenMap();
    public sealed virtual int GetMethodProps(UInt32 codeRva, UInt32& methodToken, UInt32& cGenericParams, UInt32 cbSignature, UInt32& pcbSignature, Byte[] signature);
    public sealed virtual int GetFrameProps(UInt32 codeRva, UInt32& codeStartRva, UInt32& parentFrameStartRva);
    private void LoadTypeTokenMap();
    public sealed virtual int GetTypeProps(UInt32 vtableRva, UInt32 cbSignature, UInt32& pcbSignature, Byte[] signature);
    private int GetTypeSymbolID(UInt32 vtableRva, UInt32& symbolID);
    private UInt32 GetTypeSymbolID(Byte[] typeSignature);
    public sealed virtual void GetCodeRange(UInt32 codeRva, UInt32& codeStartAddress, UInt32& codeSize);
    public sealed virtual int GetObjectSize(UInt32 cbSignature, Byte[] typeSignature, Int32& size);
    public sealed virtual int GetAssemblyImageBytes(long rva, int length, ICorDebugMemoryBuffer& ppMemoryBuffer);
    public sealed virtual int GetAssemblyImageMetadata(ICorDebugMemoryBuffer& ppMemoryBuffer);
    public sealed virtual int GetAssemblyImageCount(UInt32& cImages);
    public sealed virtual int GetAssemblyImageIndexes(UInt32 cEntries, UInt32& pcEntries, UInt32[] pIndexBuffer);
    public sealed virtual int GetAssemblyImageBytes(UInt32 index, long rva, int length, ICorDebugMemoryBuffer& ppMemoryBuffer);
    private int GetAssemblyImageBytesInternal(UInt32 index, long rva, int length, ICorDebugMemoryBuffer& ppMemoryBuffer);
    public sealed virtual int GetAssemblyImageMetadata(UInt32 index, ICorDebugMemoryBuffer& ppMemoryBuffer);
    public int GetAssemblyImageMetadataInternal(UInt32 index, ICorDebugMemoryBuffer& ppMemoryBuffer);
    public sealed virtual int GetMappingMetadata(ICorDebugMemoryBuffer& ppMemoryBuffer);
    public sealed virtual int GetGenericDictionaryInfo(ICorDebugMemoryBuffer& ppMemoryBuffer);
    public sealed virtual int GetNativeTokenToPseudoMap(UInt32[] nativeTokenToPseudoMap, UInt32 mapItemCount, UInt32& itemCount);
}
public class NetNativeSymbolProvider.SzArrayTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private TypeSignature <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomModSignature[] <CustomMods>k__BackingField;
    public TypeSignature ComponentType { get; public set; }
    public CustomModSignature[] CustomMods { get; public set; }
    [CompilerGeneratedAttribute]
public TypeSignature get_ComponentType();
    [CompilerGeneratedAttribute]
public void set_ComponentType(TypeSignature value);
    [CompilerGeneratedAttribute]
public CustomModSignature[] get_CustomMods();
    [CompilerGeneratedAttribute]
public void set_CustomMods(CustomModSignature[] value);
}
public class NetNativeSymbolProvider.ThreadStaticFieldSymbol : SymbolDataBase {
    private ulong m_offset;
    public ThreadStaticFieldSymbol(string name, UInt32 size, ulong offset);
    public sealed virtual void GetOffset(UInt64& pOffset);
}
public class NetNativeSymbolProvider.TypeSignature : object {
    [CompilerGeneratedAttribute]
private CorElementType <ElementType>k__BackingField;
    public CorElementType ElementType { get; public set; }
    public TypeSignature(CorElementType elem);
    [CompilerGeneratedAttribute]
public CorElementType get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(CorElementType value);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual string ToString();
}
public class NetNativeSymbolProvider.TypeSpecSignature : Signature {
    [CompilerGeneratedAttribute]
private TypeSignature <Type>k__BackingField;
    public TypeSignature Type { get; public set; }
    [CompilerGeneratedAttribute]
public TypeSignature get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeSignature value);
}
public static class NetNativeSymbolProvider.UnmanagedExports : object {
    public static int CreateCorDebugSymbolProviderFactory(string parameter);
}
public class NetNativeSymbolProvider.ValueTypeTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private int <TypeDefOrRef>k__BackingField;
    public int TypeDefOrRef { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TypeDefOrRef();
    [CompilerGeneratedAttribute]
public void set_TypeDefOrRef(int value);
}
public class NetNativeSymbolProvider.VariableSymbol : SymbolDataBase {
    private int m_offset;
    private int m_slotIndex;
    private CvHreg m_register;
    private int m_offsetInUDT;
    private bool m_isEnregistered;
    private ISymbolProviderProcessContext m_symbolProviderProcessContext;
    public VariableSymbol(string name, int slotIndex, UInt32 size, CvHreg register, int offset, bool isEnRegistered, ISymbolProviderProcessContext symbolProviderProcessContext);
    public sealed virtual int GetSlotIndex(Int32& slotIndex);
    public sealed virtual void GetValue(int offsetInVariable, int cbContext, IntPtr context, int cbValue, Int32& pcbValue, Byte[] pValue);
    public sealed virtual void SetValue(int offsetInVariable, int threadID, int cbContext, IntPtr context, int cbValue, Byte[] pValue);
    private long GetRegisterValue(int cbContext, IntPtr osContext);
}
public class NetNativeSymbolProvider.VarTypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    public int Number { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(int value);
}
