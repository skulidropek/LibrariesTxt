internal class Internal.NativeFormat.NativeWriter : object {
    private List`1<Section> _sections;
    private Byte[] _buffer;
    private int _size;
    private int _iteration;
    private SavePhase _phase;
    private int _offsetAdjustment;
    private int _paddingSize;
    private Dictionary`2<Vertex, Vertex> _unifier;
    private static Encoding _stringEncoding;
    private static NativeWriter();
    public Section NewSection();
    public void WriteByte(byte b);
    public void WriteUInt8(byte value);
    public void WriteUInt16(ushort value);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt64(ulong value);
    public void WritePad(int size);
    public bool IsGrowing();
    public void UpdateOffsetAdjustment(int offsetDelta);
    public void RollbackTo(int offset);
    public void RollbackTo(int offset, int offsetAdjustment);
    public void PatchByteAt(int offset, byte value);
    public void WriteUnsigned(UInt32 d);
    public static int GetUnsignedEncodingSize(UInt32 d);
    public void WriteSigned(int i);
    public void WriteUnsignedLong(ulong i);
    public void WriteSignedLong(long i);
    public void WriteString(string s);
    public void WriteRelativeOffset(Vertex val);
    public void WriteFloat(float value);
    public void WriteDouble(double value);
    public int GetCurrentOffset();
    public int GetNumberOfIterations();
    public int GetPaddingSize();
    public void Save(Stream stream);
    private T Unify(T vertex);
    public Vertex GetUnsignedConstant(UInt32 value);
}
internal class Internal.NativeFormat.PlacedVertex : Vertex {
    private Vertex _unified;
    public PlacedVertex(Vertex unified);
    internal virtual void Save(NativeWriter writer);
}
internal class Internal.NativeFormat.Section : object {
    internal List`1<Vertex> _items;
    internal Dictionary`2<Vertex, Vertex> _placedMap;
    public Vertex Place(Vertex vertex);
}
internal class Internal.NativeFormat.UnsignedConstant : Vertex {
    private UInt32 _value;
    public UnsignedConstant(UInt32 value);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
}
internal abstract class Internal.NativeFormat.Vertex : object {
    internal int _offset;
    internal int _iteration;
    internal static int NotPlaced;
    internal static int Placed;
    internal static int Unified;
    public int VertexOffset { get; }
    internal abstract virtual void Save(NativeWriter writer);
    public int get_VertexOffset();
}
internal class Internal.NativeFormat.VertexHashtable : Vertex {
    private List`1<Entry> _Entries;
    private int _nFillFactor;
    private UInt32 _nBuckets;
    private int _entryIndexSize;
    public static int DefaultFillFactor;
    public VertexHashtable(int fillFactor);
    public void Append(UInt32 hashcode, Vertex element);
    private static int HighestBit(UInt32 x);
    private static void PatchEntryIndex(NativeWriter writer, int patchOffset, int entryIndexSize, int entryIndex);
    private void ComputeLayout();
    internal virtual void Save(NativeWriter writer);
}
[DefaultMemberAttribute("Item")]
internal class Mcg.CodeDom.ArraySlice`1 : ValueType {
    private T[] m_data;
    private int m_length;
    private int m_offset;
    public int Length { get; }
    public T Item { get; }
    public ArraySlice`1(T[] data, int offset, int length);
    public int get_Length();
    public T get_Item(int index);
}
internal class Mcg.CodeDom.AssemblyScope : Scope {
    private string m_assemblyName;
    public string AssemblyName { get; }
    public AssemblyScope(string assemblyName);
    public string get_AssemblyName();
}
[ExtensionAttribute]
public static class Mcg.CodeDom.CodeDomCache : object {
    private static Dictionary`2<string, McgCodeTypeReference> s_TypeReferences;
    private static Dictionary`2<McgCodeTypeReference, McgCodeTypeReferenceExpression> s_TypeReferenceExpressions;
    public static void ClearStatics();
    [ExtensionAttribute]
public static McgCodeTypeReference ToCodeTypeReference(string type);
    [ExtensionAttribute]
public static McgCodeTypeReferenceExpression ToMcgCodeTypeReferenceExpression(string type);
    [ExtensionAttribute]
public static McgCodeTypeReferenceExpression ToExpression(McgCodeTypeReference type);
}
[ExtensionAttribute]
public static class Mcg.CodeDom.CodeDomHelpers : object {
    private static CSharpCodeProvider s_csharpProvider;
    public static McgCodeSnippetTypeMember EmptyTypeMember;
    private static CodeDomHelpers();
    [ExtensionAttribute]
public static bool IsValidIdentifier(string name);
    [ExtensionAttribute]
public static string CreateValidIdentifier(string name, bool containsNamespace);
    public static McgCodeMemberField AddConst(McgCodeTypeMemberCollection scope, McgCodeTypeReference typ, string name, object value);
}
public class Mcg.CodeDom.CodeDomRewriter : object {
    public McgCodeExpression Rewrite(McgCodeExpression expr);
    public virtual McgCodeExpression RewriteCodePrimitiveExpression(McgCodePrimitiveExpression expr);
    public virtual McgCodeExpression RewriteMcgCodeConditionalExpression(McgCodeConditionalExpression expr);
    public virtual McgCodeExpression RewriteCodeMethodReferenceExpression(McgCodeMethodReferenceExpression expr);
    public virtual void RewriteCodeTypeReferenceCollection(McgCodeTypeReferenceCollection col);
    public virtual McgCodeTypeReference RewriteCodeTypeReference(McgCodeTypeReference typeRef);
    public virtual McgCodeExpression RewriteCodeTypeReferenceExpression(McgCodeTypeReferenceExpression e);
    public virtual McgCodeExpression RewriteCodeTypeOfExpression(McgCodeTypeOfExpression e);
    public virtual McgCodeExpression RewriteCodePropertyReferenceExpression(McgCodePropertyReferenceExpression e);
    public virtual McgCodeExpression RewriteMcgCodeDerefExpression(McgCodeDerefExpression e);
    public virtual McgCodeExpression RewriteMcgCodeAddressOfExpression(McgCodeAddressOfExpression e);
    public virtual McgCodeExpression RewriteMcgCodeUnaryOperatorExpression(McgCodeUnaryOperatorExpression e);
    public virtual McgCodeExpression RewriteCodeBinaryOperatorExpression(McgCodeBinaryOperatorExpression e);
    public virtual McgCodeExpression RewriteCodeIndexerExpression(McgCodeIndexerExpression e);
    public virtual void RewriteCodeExpressionCollection(McgCodeExpressionCollection col);
    public virtual McgCodeExpression RewriteCodeCastExpression(McgCodeCastExpression e);
    public virtual McgCodeExpression RewriteCodeVariableReferenceExpression(McgCodeVariableReferenceExpression e);
}
public static class Mcg.CodeDom.CodeDomUtil : object {
    private static Stack`1<Location> s_locationStack;
    private static CodeDomUtil();
    public static void Verify(bool result, string reason);
    public static void Verify(bool result, string reason, Object[] paras);
    public static void AssertFail(string reason);
    private static string GetLocation();
    [ConditionalAttribute("DEVTRACE")]
internal static void TraceLine(string message, Object[] paras);
}
[DefaultMemberAttribute("Item")]
public class Mcg.CodeDom.CodeGeneratorOptions : object {
    private Options options;
    public object Item { get; public set; }
    public string IndentString { get; public set; }
    public string BracingStyle { get; public set; }
    public bool ElseOnClosing { get; public set; }
    public bool BlankLinesBetweenMembers { get; public set; }
    [ComVisibleAttribute("False")]
public bool VerbatimOrder { get; public set; }
    public string AnnotationKey { get; public set; }
    public bool SuppressDebuggerStepInto { get; public set; }
    public String[] UnresolvedNames { get; public set; }
    public object get_Item(string index);
    public void set_Item(string index, object value);
    public string get_IndentString();
    public void set_IndentString(string value);
    public string get_BracingStyle();
    public void set_BracingStyle(string value);
    public bool get_ElseOnClosing();
    public void set_ElseOnClosing(bool value);
    public bool get_BlankLinesBetweenMembers();
    public void set_BlankLinesBetweenMembers(bool value);
    public bool get_VerbatimOrder();
    public void set_VerbatimOrder(bool value);
    public string get_AnnotationKey();
    public void set_AnnotationKey(string value);
    public bool get_SuppressDebuggerStepInto();
    public void set_SuppressDebuggerStepInto(bool value);
    public String[] get_UnresolvedNames();
    public void set_UnresolvedNames(String[] value);
}
[ExtensionAttribute]
internal static class Mcg.CodeDom.CodeProviderExtensions : object {
    [ExtensionAttribute]
public static void AppendEscapedIdentifier(StringBuilder sb, string fullString, int startIndex, int charCount);
}
internal class Mcg.CodeDom.CSharpCodeGenerator : object {
    private IndentedTextWriter output;
    private CodeGeneratorOptions options;
    private McgCodeTypeDeclaration currentClass;
    private McgCodeTypeMember currentMember;
    private bool inNestedBinary;
    private IDictionary`2<string, string> provOptions;
    private CSharpTypeReferenceFormatter _typeRefFormatter;
    private SymbolTable _symbolTable;
    private bool UseReducedTypeName;
    private static int ParameterMultilineThreshold;
    private static int MaxLineLength;
    private static String[][] keywords;
    private bool generatingForLoop;
    private Scope m_currentDeclarationScope;
    private bool m_currentNamespaceIsWindows;
    private Dictionary`2<McgCodeTypeReference, string> _typeStringMap;
    private string FileExtension { get; }
    private string CompilerName { get; }
    private string CurrentTypeName { get; }
    private int Indent { get; private set; }
    private bool IsCurrentInterface { get; }
    private bool IsCurrentClass { get; }
    private bool IsCurrentStruct { get; }
    private bool IsCurrentEnum { get; }
    private bool IsCurrentDelegate { get; }
    private string NullToken { get; }
    private CodeGeneratorOptions Options { get; }
    private IndentedTextWriter Output { get; }
    internal CSharpCodeGenerator(SymbolTable symTable);
    internal CSharpCodeGenerator(SymbolTable symTable, IDictionary`2<string, string> providerOptions);
    private static CSharpCodeGenerator();
    private string get_FileExtension();
    private string get_CompilerName();
    private string get_CurrentTypeName();
    private int get_Indent();
    private void set_Indent(int value);
    private bool get_IsCurrentInterface();
    private bool get_IsCurrentClass();
    private bool get_IsCurrentStruct();
    private bool get_IsCurrentEnum();
    private bool get_IsCurrentDelegate();
    private string get_NullToken();
    private CodeGeneratorOptions get_Options();
    private IndentedTextWriter get_Output();
    private string QuoteSnippetStringCStyle(string value);
    private string QuoteSnippetStringVerbatimStyle(string value);
    private string QuoteSnippetString(string value);
    private void ContinueOnNewLine(string st);
    private void OutputIdentifier(string ident);
    private void OutputType(McgCodeTypeReference typeRef);
    private void GenerateArrayCreateExpression(McgCodeArrayCreateExpression e);
    private void GenerateBaseReferenceExpression(McgCodeBaseReferenceExpression e);
    private void GenerateBinaryOperatorExpression(McgCodeBinaryOperatorExpression e, Precedence order);
    private static Precedence GetBinaryOperatorPrecedence(McgCodeBinaryOperatorType op);
    private static Precedence GetUnaryOperatorPrecedence(McgCodeUnaryOperatorType op);
    private void GenerateCastExpression(McgCodeCastExpression e, Precedence order);
    public void GenerateCodeFromMember(McgCodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    private void GenerateDefaultValueExpression(McgCodeDefaultValueExpression e);
    private void GenerateUncheckedExpression(McgCodeUncheckedExpression e);
    private void GenerateCheckedExpression(McgCodeCheckedExpression e);
    private void GenerateAddressOfExpression(McgCodeAddressOfExpression e);
    private void GenerateDerefExpression(McgCodeDerefExpression e);
    private void GenerateRefExpression(McgCodeRefExpression e);
    private void GenerateConditionalExpression(McgCodeConditionalExpression e);
    private void GenerateUnaryOperatorExpression(McgCodeUnaryOperatorExpression e, Precedence order);
    private void GenerateStackAllocExpression(McgCodeStackAllocExpression e);
    private void GenerateObjectInitializerExpression(McgCodeObjectInitializerExpression e);
    private void GenerateCommentedExpression(McgCodeCommentedExpression e);
    private void GenerateSegmentedStringPrimitiveExpression(McgCodeSegmentedStringPrimitiveExpression e);
    private void GenerateDelegateCreateExpression(McgCodeDelegateCreateExpression e);
    private void GenerateEvents(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateFields(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateFieldReferenceExpression(McgCodeFieldReferenceExpression e);
    private void GenerateArgumentReferenceExpression(McgCodeArgumentReferenceExpression e);
    private void GenerateVariableReferenceExpression(McgCodeVariableReferenceExpression e);
    private void GenerateIndexerExpression(McgCodeIndexerExpression e);
    private void GenerateArrayIndexerExpression(McgCodeArrayIndexerExpression e);
    private void GenerateSnippetCompileUnit(McgCodeSnippetCompileUnit e);
    private void GenerateSnippetExpression(McgCodeSnippetExpression e);
    private void GenerateMethodInvokeExpression(McgCodeMethodInvokeExpression e);
    private void GenerateMethodReferenceExpression(McgCodeMethodReferenceExpression e);
    private bool GetUserData(McgCodeObject e, string property, bool defaultValue);
    private void SetScope(Scope scope);
    private Scope PushScope(string name, ScopeKind kind);
    private void PopScope(Scope prevScope);
    private void GenerateNamespace(McgCodeNamespace e);
    private void GenerateNamespacePragmas(McgCodeNamespace e);
    private void GenerateStatement(McgCodeStatement e);
    private void GenerateStatements(McgCodeStatementCollection stms);
    private void GenerateNamespaceImports(McgCodeNamespace e);
    private void GenerateEventReferenceExpression(McgCodeEventReferenceExpression e);
    private void GenerateDelegateInvokeExpression(McgCodeDelegateInvokeExpression e);
    private void GenerateObjectCreateExpression(McgCodeObjectCreateExpression e);
    private void GeneratePrimitiveExpression(McgCodePrimitiveExpression e);
    private void GenerateIntArray(string typeName, List`1<T> list);
    private void GenerateCharArray(List`1<char> list);
    private void GeneratePrimitiveExpressionBase(McgCodePrimitiveExpression e);
    private void GeneratePrimitiveChar(char c);
    private void AppendEscapedChar(StringBuilder b, char value);
    private void GeneratePropertySetValueReferenceExpression(McgCodePropertySetValueReferenceExpression e);
    private void GenerateThisReferenceExpression(McgCodeThisReferenceExpression e);
    private void GenerateExpressionStatement(McgCodeExpressionStatement e);
    private void GenerateIterationStatement(McgCodeIterationStatement e);
    private void GenerateThrowExceptionStatement(McgCodeThrowExceptionStatement e);
    private void GenerateComment(McgCodeComment e);
    private void GenerateCommentStatement(McgCodeCommentStatement e);
    private void GenerateCommentStatements(McgCodeCommentStatementCollection e);
    private void GenerateMethodReturnStatement(McgCodeMethodReturnStatement e);
    private void GenerateConditionStatement(McgCodeConditionStatement e);
    private void GenerateTryCatchFinallyStatement(McgCodeTryCatchFinallyStatement e);
    private void GenerateLineComment(McgCodeComment c);
    private void GenerateStatementEndOfLine(McgCodeStatement e);
    private void GenerateStatementEndOfLine(McgCodeStatement e, bool isLineComplete);
    private void GenerateAssignStatement(McgCodeAssignStatement e);
    private void GenerateAttachEventStatement(McgCodeAttachEventStatement e);
    private void GenerateRemoveEventStatement(McgCodeRemoveEventStatement e);
    private void GenerateSnippetStatement(McgCodeSnippetStatement e);
    private void GenerateGotoStatement(McgCodeGotoStatement e);
    private void GenerateLabeledStatement(McgCodeLabeledStatement e);
    private void GenerateVariableDeclarationStatement(McgCodeVariableDeclarationStatement e);
    private void GenerateLinePragmaStart(McgCodeLinePragma e);
    private void GenerateLinePragmaEnd(McgCodeLinePragma e);
    private void GenerateEvent(McgCodeMemberEvent e, McgCodeTypeDeclaration c);
    private void GenerateExpression(McgCodeExpression e, Precedence order);
    private void GenerateField(McgCodeMemberField e, bool newline);
    private void GenerateSnippetMember(McgCodeSnippetTypeMember e);
    private void GenerateParameterDeclarationExpression(McgCodeParameterDeclarationExpression e);
    private void GenerateEntryPointMethod(McgCodeEntryPointMethod e, McgCodeTypeDeclaration c);
    private void GenerateMethods(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateMethod(McgCodeMemberMethod e, McgCodeTypeDeclaration c);
    private void GenerateProperties(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateProperty(McgCodeMemberProperty e, McgCodeTypeDeclaration c);
    private void GenerateSingleFloatValue(float s);
    private void GenerateDoubleValue(double d);
    private void GenerateDecimalValue(decimal d);
    private void OutputVTableModifier(McgMemberAttributes attributes);
    private void OutputMemberAccessModifier(McgMemberAttributes attributes);
    private bool IsExternMember(McgCodeTypeMember e);
    private bool IsUnsafeType(McgCodeTypeDeclaration e);
    private bool IsUnsafeMethod(McgCodeMemberMethod m);
    private bool IsStaticType(McgCodeTypeDeclaration e);
    private bool IsFixedField(McgCodeMemberField f);
    private bool IsVolatileField(McgCodeMemberField f);
    private bool IsReadonlyField(McgCodeMemberField f);
    private void OutputMemberExternModifier(McgCodeTypeMember e);
    private bool ForceSingleLineExpression(McgCodeExpression e);
    private void OutputMemberScopeModifier(McgMemberAttributes attributes, bool isClassSealed);
    private void OutputOperator(McgCodeBinaryOperatorType op);
    private void OutputFieldScopeModifier(McgMemberAttributes attributes);
    private void GeneratePropertyReferenceExpression(McgCodePropertyReferenceExpression e);
    private void GenerateConstructors(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateConstructor(McgCodeConstructor e, McgCodeTypeDeclaration c);
    private void GenerateTypeConstructor(McgCodeTypeConstructor e);
    private void GenerateTypeReferenceExpression(McgCodeTypeReferenceExpression e);
    private void GenerateTypeOfExpression(McgCodeTypeOfExpression e);
    private void GenerateType(McgCodeTypeDeclaration e);
    private void GenerateTypes(McgCodeNamespace e);
    private void GenerateTypeStart(McgCodeTypeDeclaration e);
    private void GenerateTypeMember(McgCodeTypeMember member, McgCodeTypeDeclaration declaredType, Boolean& first);
    private void GenerateTypeConstructors(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateSnippetMembers(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateNestedTypes(McgCodeTypeDeclaration e, Boolean& first);
    private void GenerateNamespaces(McgCodeCompileUnit e);
    private void OutputAttributeArgument(McgCodeAttributeArgument arg);
    private void OutputDirection(McgFieldDirection dir);
    private void OutputExpressionList(McgCodeExpressionCollection expressions);
    private void OutputExpressionList(McgCodeExpressionCollection expressions, bool newlineBetweenItems);
    private void OutputParameters(McgCodeParameterDeclarationExpressionCollection parameters);
    private void OutputTypeNamePair(McgCodeTypeReference typeRef, string name);
    private void OutputTypeParameters(McgCodeTypeParameterCollection typeParameters);
    private void OutputTypeParameterConstraints(McgCodeTypeParameterCollection typeParameters);
    private void OutputTypeAttributes(McgCodeTypeDeclaration e);
    private void GenerateTypeEnd(McgCodeTypeDeclaration e);
    private void GenerateNamespaceStart(McgCodeNamespace e);
    private void GenerateCompileUnit(McgCodeCompileUnit e);
    private void GenerateCompileUnitStart(McgCodeCompileUnit e);
    private void GenerateCompileUnitEnd(McgCodeCompileUnit e);
    private void GenerateDirectionExpression(McgCodeDirectionExpression e);
    private void GenerateDirectives(McgCodeDirectiveCollection directives);
    private void GenerateChecksumPragma(McgCodeChecksumPragma checksumPragma);
    private void GenerateCodeRegionDirective(McgCodeRegionDirective regionDirective);
    private void GenerateCodeDefineDirective(McgCodeDefineDirective defineDirective);
    private void GenerateNamespaceEnd(McgCodeNamespace e);
    private void GenerateNamespaceImport(McgCodeNamespaceImport e);
    private void GenerateAttributeDeclarationsStart(McgCodeAttributeDeclarationCollection attributes);
    private void GenerateAttributeDeclarationsEnd(McgCodeAttributeDeclarationCollection attributes);
    private void GenerateAttributes(McgCodeAttributeDeclarationCollection attributes);
    private void GenerateAttributes(McgCodeAttributeDeclarationCollection attributes, string prefix);
    private void GenerateAttributes(McgCodeAttributeDeclarationCollection attributes, string prefix, bool inLine);
    private void GenerateFixedStatement(McgCodeFixedStatement e);
    private void GenerateUncheckedStatement(McgCodeUncheckedStatement e);
    private void GenerateCheckedStatement(McgCodeCheckedStatement e);
    private void GenerateSwitchStatement(McgCodeSwitchStatement e);
    private void GenerateDebuggerStepIntoMethodInvokeStatement(McgCodeDebuggerStepIntoMethodInvokeStatementBase e);
    public static bool IsKeyword(string value);
    public static bool IsKeyword(StringSlice value);
    public bool IsValidIdentifier(string value);
    internal static bool IsValidLanguageIndependentIdentifier(string value);
    internal static bool IsValidLanguageIndependentTypeName(string value);
    private static bool IsValidTypeNameOrIdentifier(string value, bool isTypeName);
    private static bool IsSpecialTypeChar(char ch, Boolean& nextMustBeStartChar);
    public void ValidateIdentifier(string value);
    public string CreateEscapedIdentifier(string name);
    private string RemoveStars(string s, Int32& indirectionLevel);
    private string GetBaseTypeOutput(McgCodeTypeReference typeRef);
    private string GetTypeArgumentsOutput(McgCodeTypeReferenceCollection typeArguments);
    private void GetTypeArgumentsOutput(McgCodeTypeReferenceCollection typeArguments, int start, int length, StringBuilder sb);
    private bool ReduceTypeName(String& name);
    private void ClearTypeStringMap();
    public string GetTypeOutput(McgCodeTypeReference typeRef);
    private void OutputStartingBrace();
    private void OutputStartingBrace(bool useBraces);
    internal void GenerateCodeFromType(McgCodeTypeDeclaration e, TextWriter w, CodeGeneratorOptions o);
    internal void GenerateCodeFromExpression(McgCodeExpression e, TextWriter w, CodeGeneratorOptions o);
    internal void GenerateCodeFromCompileUnit(McgCodeCompileUnit e, TextWriter w, CodeGeneratorOptions o);
    internal void GenerateCodeFromNamespace(McgCodeNamespace e, TextWriter w, CodeGeneratorOptions o);
    public void GenerateCodeFromStatement(McgCodeStatement e, TextWriter w, CodeGeneratorOptions o);
}
public class Mcg.CodeDom.CSharpCodeProvider : object {
    private CSharpCodeGenerator generator;
    internal CSharpCodeGenerator Generator { get; }
    public CSharpCodeProvider(SymbolTable symTable);
    public CSharpCodeProvider(IDictionary`2<string, string> providerOptions);
    internal CSharpCodeGenerator get_Generator();
    public void GenerateCodeFromCompileUnit(McgCodeCompileUnit e, TextWriter w, CodeGeneratorOptions o);
    internal bool IsValidIdentifier(string name);
}
[ExtensionAttribute]
public static class Mcg.CodeDom.ExtensionMethods : object {
    private static SimpleTypeReferenceFormatter s_simpleTypeRefFormatter;
    private static SimpleTypeReferenceFormatter s_simpleTypeRefFormatterWithGlobalQualifier;
    private static MangledTypeReferenceFormatter s_mangledTypeRefFormatter;
    private static Dictionary`2<string, string> s_ClassNameToKeywordMap;
    private static ExtensionMethods();
    [ExtensionAttribute]
public static bool HasRealCode(McgCodeStatementCollection stmts);
    [ExtensionAttribute]
public static McgCodeStatementCollection AdderStatements(McgCodeMemberEvent evnt);
    [ExtensionAttribute]
public static McgCodeStatementCollection RemoverStatements(McgCodeMemberEvent evnt);
    [ExtensionAttribute]
public static bool HasUserData(McgCodeTypeDeclaration type, string name);
    [ExtensionAttribute]
public static void SetUserData(McgCodeTypeDeclaration type, string name);
    [ExtensionAttribute]
public static int GetIndirectionLevel(McgCodeTypeReference thisType, McgCodeTypeReference& directType);
    [ExtensionAttribute]
public static McgCodeTypeReference GetPointerTarget(McgCodeTypeReference thisType);
    [ExtensionAttribute]
public static bool IsBaseType(McgCodeTypeReference typeRef);
    [ExtensionAttribute]
public static string ToTypeString(McgCodeTypeReference typeRef);
    [ExtensionAttribute]
public static string ToGloballyQualifiedTypeString(McgCodeTypeReference typeRef);
    [ExtensionAttribute]
public static string ToMangledTypeString(McgCodeTypeReference typeRef);
    [ExtensionAttribute]
public static bool IsSameAs(McgCodeTypeReference typeRefA, McgCodeTypeReference typeRefB);
    public static string MapPrimitiveClassNameToKeyword(string s);
}
internal static class Mcg.CodeDom.FixedStringLookup : object {
    internal static bool Contains(String[][] lookupTable, string value, bool ignoreCase);
    internal static bool Contains(String[][] lookupTable, StringSlice value, bool ignoreCase);
    private static bool Contains(String[] array, StringSlice value, bool ignoreCase);
    private static bool FindCharacter(String[] array, char value, int pos, Int32& min, Int32& max);
}
public class Mcg.CodeDom.FlagsExpresionBuilder : object {
    private McgCodeExpression m_result;
    public McgCodeExpression Result { get; }
    public bool HasResult { get; }
    public McgCodeExpression get_Result();
    public bool get_HasResult();
    public void AddFlag(McgCodeExpression expression);
    public void AddFlag(McgCodeTypeReference enumName, string enumValue);
}
public interface Mcg.CodeDom.IMcgTypeHashGenerator {
    public abstract virtual int GetHashCodeForTypeHandleExpression(McgCodeExpression expression);
}
[ExtensionAttribute]
internal static class Mcg.CodeDom.Indentation : object {
    [ExtensionAttribute]
internal static void AppendIndent(StringBuilder sb, string tabString, int indent);
}
public class Mcg.CodeDom.IndentedTextWriter : object {
    private TextWriter writer;
    private int indentLevel;
    private bool tabsPending;
    private string tabString;
    public static string DefaultTabString;
    public Encoding Encoding { get; }
    public string NewLine { get; public set; }
    public int Indent { get; public set; }
    public TextWriter InnerWriter { get; }
    internal string TabString { get; }
    public IndentedTextWriter(TextWriter writer);
    public IndentedTextWriter(TextWriter writer, string tabString);
    public Encoding get_Encoding();
    public string get_NewLine();
    public void set_NewLine(string value);
    public int get_Indent();
    public void set_Indent(int value);
    public TextWriter get_InnerWriter();
    internal string get_TabString();
    public void Close();
    public void Flush();
    protected virtual void OutputTabs();
    public void Write(string s);
    public void Write(string s, int start, int length);
    public void Write(bool value);
    public void Write(char value);
    public void Write(Char[] buffer);
    public void Write(Char[] buffer, int index, int count);
    public void Write(double value);
    public void Write(float value);
    public void Write(int value);
    public void Write(long value);
    public void Write(object value);
    public void Write(string format, object arg0);
    public void Write(string format, object arg0, object arg1);
    public void Write(string format, Object[] arg);
    public void WriteLineNoTabs(string s);
    public void WriteLine(string s);
    public void WriteLine();
    public void WriteLine(bool value);
    public void WriteLine(char value);
    public void WriteLine(Char[] buffer);
    public void WriteLine(Char[] buffer, int index, int count);
    public void WriteLine(double value);
    public void WriteLine(float value);
    public void WriteLine(int value);
    public void WriteLine(long value);
    public void WriteLine(object value);
    public void WriteLine(string format, object arg0);
    public void WriteLine(string format, object arg0, object arg1);
    public void WriteLine(string format, Object[] arg);
    public void WriteLine(UInt32 value);
    internal void InternalOutputTabs();
}
public class Mcg.CodeDom.InternalCodeDomException : Exception {
    public InternalCodeDomException(string message);
}
public class Mcg.CodeDom.Location : ValueType {
    private string format;
    private object p1;
    private object p2;
    public Location(string format, object p1, object p2);
    public string GetString();
}
public class Mcg.CodeDom.MangledTypeReferenceFormatter : TypeReferenceFormatter {
    protected virtual void FormatPrimitiveTypeReference(McgCodeTypeReference typeRef, StringBuilder s);
    protected virtual void FormatCodeTypeReference(McgCodeTypeReference typeRef, StringBuilder s);
    protected virtual void FormatPointerTypeReference(McgCodePointerTypeReference pointerTypeRef, StringBuilder s);
    protected virtual void FormatRefTypeReference(McgCodeRefTypeReference refTypeRef, StringBuilder s);
}
public class Mcg.CodeDom.McgCodeAddressOfExpression : McgCodeExpression {
    [CompilerGeneratedAttribute]
private McgCodeExpression <Target>k__BackingField;
    public McgCodeExpression Target { get; public set; }
    public McgCodeAddressOfExpression(McgCodeExpression target);
    [CompilerGeneratedAttribute]
public McgCodeExpression get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeArgumentReferenceExpression : McgCodeExpression {
    private string parameterName;
    public string ParameterName { get; public set; }
    public McgCodeArgumentReferenceExpression(string parameterName);
    public string get_ParameterName();
    public void set_ParameterName(string value);
}
public class Mcg.CodeDom.McgCodeArrayCreateExpression : McgCodeExpression {
    private McgCodeTypeReference createType;
    private McgCodeExpressionCollection initializers;
    private McgCodeExpressionCollection sizeExpressions;
    private int size;
    public McgCodeTypeReference CreateType { get; public set; }
    public McgCodeExpressionCollection Initializers { get; }
    public int Size { get; public set; }
    public McgCodeExpressionCollection SizeExpressions { get; }
    public McgCodeArrayCreateExpression(McgCodeTypeReference createType, McgCodeExpression[] initializers);
    public McgCodeArrayCreateExpression(string createType, McgCodeExpression[] initializers);
    public McgCodeArrayCreateExpression(Type createType, McgCodeExpression[] initializers);
    public McgCodeArrayCreateExpression(McgCodeTypeReference createType, int size);
    public McgCodeArrayCreateExpression(string createType, int size);
    public McgCodeArrayCreateExpression(Type createType, int size);
    public McgCodeArrayCreateExpression(McgCodeTypeReference createType, McgCodeExpression size);
    public McgCodeArrayCreateExpression(string createType, McgCodeExpression size);
    public McgCodeArrayCreateExpression(Type createType, McgCodeExpression size);
    public McgCodeArrayCreateExpression(McgCodeTypeReference createType, McgCodeExpressionCollection sizes);
    public McgCodeTypeReference get_CreateType();
    public void set_CreateType(McgCodeTypeReference value);
    public McgCodeExpressionCollection get_Initializers();
    public int get_Size();
    public void set_Size(int value);
    public McgCodeExpressionCollection get_SizeExpressions();
}
public class Mcg.CodeDom.McgCodeArrayIndexerExpression : McgCodeExpression {
    private McgCodeExpression targetObject;
    private McgCodeExpressionCollection indices;
    public McgCodeExpression TargetObject { get; public set; }
    public McgCodeExpressionCollection Indices { get; }
    public McgCodeArrayIndexerExpression(McgCodeExpression targetObject, McgCodeExpression[] indices);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public McgCodeExpressionCollection get_Indices();
}
public class Mcg.CodeDom.McgCodeAssignStatement : McgCodeStatement {
    private McgCodeExpression left;
    private McgCodeExpression right;
    public McgCodeExpression Left { get; public set; }
    public McgCodeExpression Right { get; public set; }
    public McgCodeAssignStatement(McgCodeExpression left, McgCodeExpression right);
    public McgCodeExpression get_Left();
    public void set_Left(McgCodeExpression value);
    public McgCodeExpression get_Right();
    public void set_Right(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeAttachEventStatement : McgCodeStatement {
    private McgCodeEventReferenceExpression eventRef;
    private McgCodeExpression listener;
    public McgCodeEventReferenceExpression Event { get; public set; }
    public McgCodeExpression Listener { get; public set; }
    public McgCodeAttachEventStatement(McgCodeEventReferenceExpression eventRef, McgCodeExpression listener);
    public McgCodeAttachEventStatement(McgCodeExpression targetObject, string eventName, McgCodeExpression listener);
    public McgCodeEventReferenceExpression get_Event();
    public void set_Event(McgCodeEventReferenceExpression value);
    public McgCodeExpression get_Listener();
    public void set_Listener(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeAttributeArgument : object {
    private string name;
    private McgCodeExpression value;
    public string Name { get; public set; }
    public McgCodeExpression Value { get; public set; }
    public McgCodeAttributeArgument(McgCodeExpression value);
    public McgCodeAttributeArgument(string name, McgCodeExpression value);
    public string get_Name();
    public void set_Name(string value);
    public McgCodeExpression get_Value();
    public void set_Value(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeAttributeArgumentCollection : List`1<McgCodeAttributeArgument> {
    public McgCodeAttributeArgumentCollection(IEnumerable`1<McgCodeAttributeArgument> value);
}
public class Mcg.CodeDom.McgCodeAttributeDeclaration : object {
    private string name;
    private McgCodeAttributeArgumentCollection arguments;
    private McgCodeTypeReference attributeType;
    public string Name { get; public set; }
    public McgCodeAttributeArgumentCollection Arguments { get; }
    public McgCodeTypeReference AttributeType { get; }
    public McgCodeAttributeDeclaration(string name);
    public McgCodeAttributeDeclaration(string name, McgCodeAttributeArgument[] arguments);
    public McgCodeAttributeDeclaration(McgCodeTypeReference attributeType);
    public McgCodeAttributeDeclaration(McgCodeTypeReference attributeType, McgCodeAttributeArgument[] arguments);
    public string get_Name();
    public void set_Name(string value);
    public McgCodeAttributeArgumentCollection get_Arguments();
    public McgCodeTypeReference get_AttributeType();
}
public class Mcg.CodeDom.McgCodeAttributeDeclarationCollection : List`1<McgCodeAttributeDeclaration> {
    public McgCodeAttributeDeclarationCollection(IEnumerable`1<McgCodeAttributeDeclaration> value);
}
public class Mcg.CodeDom.McgCodeBaseReferenceExpression : McgCodeExpression {
}
public class Mcg.CodeDom.McgCodeBinaryOperatorExpression : McgCodeExpression {
    private McgCodeBinaryOperatorType op;
    private McgCodeExpression left;
    private McgCodeExpression right;
    public McgCodeExpression Right { get; public set; }
    public McgCodeExpression Left { get; public set; }
    public McgCodeBinaryOperatorType Operator { get; public set; }
    public McgCodeBinaryOperatorExpression(McgCodeExpression left, McgCodeBinaryOperatorType op, McgCodeExpression right);
    public McgCodeExpression get_Right();
    public void set_Right(McgCodeExpression value);
    public McgCodeExpression get_Left();
    public void set_Left(McgCodeExpression value);
    public McgCodeBinaryOperatorType get_Operator();
    public void set_Operator(McgCodeBinaryOperatorType value);
}
public enum Mcg.CodeDom.McgCodeBinaryOperatorType : Enum {
    public int value__;
    public static McgCodeBinaryOperatorType Add;
    public static McgCodeBinaryOperatorType Subtract;
    public static McgCodeBinaryOperatorType Multiply;
    public static McgCodeBinaryOperatorType Divide;
    public static McgCodeBinaryOperatorType Modulus;
    public static McgCodeBinaryOperatorType Assign;
    public static McgCodeBinaryOperatorType IdentityInequality;
    public static McgCodeBinaryOperatorType IdentityEquality;
    public static McgCodeBinaryOperatorType ValueEquality;
    public static McgCodeBinaryOperatorType BitwiseOr;
    public static McgCodeBinaryOperatorType BitwiseAnd;
    public static McgCodeBinaryOperatorType BooleanOr;
    public static McgCodeBinaryOperatorType BooleanAnd;
    public static McgCodeBinaryOperatorType LessThan;
    public static McgCodeBinaryOperatorType LessThanOrEqual;
    public static McgCodeBinaryOperatorType GreaterThan;
    public static McgCodeBinaryOperatorType GreaterThanOrEqual;
    public static McgCodeBinaryOperatorType Is;
    public static McgCodeBinaryOperatorType As;
    public static McgCodeBinaryOperatorType BitwiseXor;
    public static McgCodeBinaryOperatorType LeftShift;
    public static McgCodeBinaryOperatorType RightShift;
}
public class Mcg.CodeDom.McgCodeCaseStatement : McgCodeStatement {
    public McgCodeExpression CaseLabel;
    public McgCodeStatementCollection CaseBody;
    public bool Default;
    public McgCodeCaseStatement(McgCodeExpression caseLabel, McgCodeStatement[] caseBodyStmts);
}
public class Mcg.CodeDom.McgCodeCastExpression : McgCodeExpression {
    private McgCodeTypeReference targetType;
    private McgCodeExpression expression;
    public McgCodeTypeReference TargetType { get; public set; }
    public McgCodeExpression Expression { get; public set; }
    public McgCodeCastExpression(McgCodeTypeReference targetType, McgCodeExpression expression);
    public McgCodeCastExpression(string targetType, McgCodeExpression expression);
    public McgCodeCastExpression(Type targetType, McgCodeExpression expression);
    public McgCodeTypeReference get_TargetType();
    public void set_TargetType(McgCodeTypeReference value);
    public McgCodeExpression get_Expression();
    public void set_Expression(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeCatchClause : object {
    private McgCodeStatementCollection statements;
    private McgCodeTypeReference catchExceptionType;
    private McgCodeExpression filter;
    private string localName;
    public string LocalName { get; public set; }
    public McgCodeTypeReference CatchExceptionType { get; public set; }
    public McgCodeExpression Filter { get; public set; }
    public McgCodeStatementCollection Statements { get; }
    public McgCodeCatchClause(string localName);
    public McgCodeCatchClause(string localName, McgCodeTypeReference catchExceptionType);
    public McgCodeCatchClause(string localName, McgCodeTypeReference catchExceptionType, McgCodeStatement[] statements);
    public McgCodeCatchClause(string localName, McgCodeTypeReference catchExceptionType, McgCodeStatementCollection statements);
    public McgCodeCatchClause(string localName, McgCodeTypeReference catchExceptionType, McgCodeStatementCollection statements, McgCodeExpression filter);
    public string get_LocalName();
    public void set_LocalName(string value);
    public McgCodeTypeReference get_CatchExceptionType();
    public void set_CatchExceptionType(McgCodeTypeReference value);
    public McgCodeExpression get_Filter();
    public void set_Filter(McgCodeExpression value);
    public McgCodeStatementCollection get_Statements();
}
public class Mcg.CodeDom.McgCodeCatchClauseCollection : List`1<McgCodeCatchClause> {
    public McgCodeCatchClauseCollection(IEnumerable`1<McgCodeCatchClause> value);
}
public class Mcg.CodeDom.McgCodeCheckedExpression : McgCodeExpression {
    [CompilerGeneratedAttribute]
private McgCodeExpression <CastExpr>k__BackingField;
    public McgCodeExpression CastExpr { get; public set; }
    public McgCodeCheckedExpression(McgCodeExpression castexpr);
    [CompilerGeneratedAttribute]
public McgCodeExpression get_CastExpr();
    [CompilerGeneratedAttribute]
public void set_CastExpr(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeCheckedStatement : McgCodeStatement {
    [CompilerGeneratedAttribute]
private McgCodeStatementCollection <Statements>k__BackingField;
    public McgCodeStatementCollection Statements { get; private set; }
    public McgCodeCheckedStatement(McgCodeStatement[] statements);
    [CompilerGeneratedAttribute]
public McgCodeStatementCollection get_Statements();
    [CompilerGeneratedAttribute]
private void set_Statements(McgCodeStatementCollection value);
}
public class Mcg.CodeDom.McgCodeChecksumPragma : McgCodeDirective {
    private string fileName;
    private Byte[] checksumData;
    private Guid checksumAlgorithmId;
    public string FileName { get; public set; }
    public Guid ChecksumAlgorithmId { get; public set; }
    public Byte[] ChecksumData { get; public set; }
    public McgCodeChecksumPragma(string fileName, Guid checksumAlgorithmId, Byte[] checksumData);
    public string get_FileName();
    public void set_FileName(string value);
    public Guid get_ChecksumAlgorithmId();
    public void set_ChecksumAlgorithmId(Guid value);
    public Byte[] get_ChecksumData();
    public void set_ChecksumData(Byte[] value);
}
public class Mcg.CodeDom.McgCodeComment : McgCodeObject {
    private string text;
    private bool docComment;
    public bool DocComment { get; public set; }
    public string Text { get; public set; }
    public McgCodeComment(string text);
    public McgCodeComment(string text, bool docComment);
    public bool get_DocComment();
    public void set_DocComment(bool value);
    public string get_Text();
    public void set_Text(string value);
}
public class Mcg.CodeDom.McgCodeCommentedExpression : McgCodeExpression {
    public McgCodeExpression Expression;
    public string Comment;
    public McgCodeCommentedExpression(McgCodeExpression expression, string comment);
}
public class Mcg.CodeDom.McgCodeCommentStatement : McgCodeStatement {
    private McgCodeComment comment;
    public McgCodeComment Comment { get; public set; }
    public McgCodeCommentStatement(McgCodeComment comment);
    public McgCodeCommentStatement(string text);
    public McgCodeCommentStatement(string text, bool docComment);
    public McgCodeComment get_Comment();
    public void set_Comment(McgCodeComment value);
}
public class Mcg.CodeDom.McgCodeCommentStatementCollection : List`1<McgCodeCommentStatement> {
    public McgCodeCommentStatementCollection(IEnumerable`1<McgCodeCommentStatement> value);
}
public class Mcg.CodeDom.McgCodeCompileUnit : McgCodeObject {
    private McgCodeNamespaceCollection namespaces;
    private List`1<string> assemblies;
    private McgCodeAttributeDeclarationCollection attributes;
    private McgCodeDirectiveCollection startDirectives;
    private McgCodeDirectiveCollection endDirectives;
    public McgCodeNamespaceCollection Namespaces { get; }
    public IList`1<string> ReferencedAssemblies { get; }
    public McgCodeAttributeDeclarationCollection AssemblyCustomAttributes { get; }
    public McgCodeDirectiveCollection StartDirectives { get; }
    public McgCodeDirectiveCollection EndDirectives { get; }
    public McgCodeNamespaceCollection get_Namespaces();
    public IList`1<string> get_ReferencedAssemblies();
    public McgCodeAttributeDeclarationCollection get_AssemblyCustomAttributes();
    public McgCodeDirectiveCollection get_StartDirectives();
    public McgCodeDirectiveCollection get_EndDirectives();
}
public class Mcg.CodeDom.McgCodeConditionalExpression : McgCodeExpression {
    public McgCodeExpression ConditionExpression;
    public McgCodeExpression TrueExpression;
    public McgCodeExpression FalseExpression;
    public McgCodeConditionalExpression(McgCodeExpression conditionExpression, McgCodeExpression trueExpression, McgCodeExpression falseExpression);
}
public class Mcg.CodeDom.McgCodeConditionStatement : McgCodeStatement {
    private McgCodeExpression condition;
    private McgCodeStatementCollection trueStatments;
    private McgCodeStatementCollection falseStatments;
    public McgCodeExpression Condition { get; public set; }
    public McgCodeStatementCollection TrueStatements { get; }
    public McgCodeStatementCollection FalseStatements { get; }
    public McgCodeConditionStatement(McgCodeExpression condition, McgCodeStatement[] trueStatements);
    public McgCodeConditionStatement(McgCodeExpression condition, McgCodeStatement[] trueStatements, McgCodeStatement[] falseStatements);
    public McgCodeExpression get_Condition();
    public void set_Condition(McgCodeExpression value);
    public McgCodeStatementCollection get_TrueStatements();
    public McgCodeStatementCollection get_FalseStatements();
}
public class Mcg.CodeDom.McgCodeConstructor : McgCodeMemberMethod {
    private McgCodeExpressionCollection baseConstructorArgs;
    private McgCodeExpressionCollection chainedConstructorArgs;
    public McgCodeExpressionCollection BaseConstructorArgs { get; }
    public McgCodeExpressionCollection ChainedConstructorArgs { get; }
    public McgCodeExpressionCollection get_BaseConstructorArgs();
    public McgCodeExpressionCollection get_ChainedConstructorArgs();
}
public abstract class Mcg.CodeDom.McgCodeDebuggerStepIntoMethodInvokeStatementBase : McgCodeStatement {
    [CompilerGeneratedAttribute]
private McgCodeStatement <MarkedStatement>k__BackingField;
    [CompilerGeneratedAttribute]
private McgCodeStatement <ReturnStatement>k__BackingField;
    public McgCodeStatement MarkedStatement { get; protected set; }
    public McgCodeStatement ReturnStatement { get; protected set; }
    public McgCodeStatement DebuggerStepIntoStatement { get; }
    [CompilerGeneratedAttribute]
public McgCodeStatement get_MarkedStatement();
    [CompilerGeneratedAttribute]
protected void set_MarkedStatement(McgCodeStatement value);
    [CompilerGeneratedAttribute]
public McgCodeStatement get_ReturnStatement();
    [CompilerGeneratedAttribute]
protected void set_ReturnStatement(McgCodeStatement value);
    public abstract virtual McgCodeStatement get_DebuggerStepIntoStatement();
}
public class Mcg.CodeDom.McgCodeDefaultValueExpression : McgCodeExpression {
    private McgCodeTypeReference type;
    public McgCodeTypeReference Type { get; public set; }
    public McgCodeDefaultValueExpression(McgCodeTypeReference type);
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
}
public class Mcg.CodeDom.McgCodeDefineDirective : McgCodeDirective {
    public string Name;
    public McgCodeDefineDirective(string name);
}
public class Mcg.CodeDom.McgCodeDelegateCreateExpression : McgCodeExpression {
    private McgCodeTypeReference delegateType;
    private McgCodeExpression targetObject;
    private string methodName;
    public McgCodeTypeReference DelegateType { get; public set; }
    public McgCodeExpression TargetObject { get; public set; }
    public string MethodName { get; public set; }
    public McgCodeDelegateCreateExpression(McgCodeTypeReference delegateType, McgCodeExpression targetObject, string methodName);
    public McgCodeTypeReference get_DelegateType();
    public void set_DelegateType(McgCodeTypeReference value);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public string get_MethodName();
    public void set_MethodName(string value);
}
public class Mcg.CodeDom.McgCodeDelegateInvokeExpression : McgCodeExpression {
    private McgCodeExpression targetObject;
    private McgCodeExpressionCollection parameters;
    public McgCodeExpression TargetObject { get; public set; }
    public McgCodeExpressionCollection Parameters { get; }
    public McgCodeDelegateInvokeExpression(McgCodeExpression targetObject);
    public McgCodeDelegateInvokeExpression(McgCodeExpression targetObject, McgCodeExpression[] parameters);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public McgCodeExpressionCollection get_Parameters();
}
public class Mcg.CodeDom.McgCodeDerefExpression : McgCodeExpression {
    [CompilerGeneratedAttribute]
private McgCodeExpression <Derefee>k__BackingField;
    public McgCodeExpression Derefee { get; public set; }
    public McgCodeDerefExpression(McgCodeExpression derefee);
    [CompilerGeneratedAttribute]
public McgCodeExpression get_Derefee();
    [CompilerGeneratedAttribute]
public void set_Derefee(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeDirectionExpression : McgCodeExpression {
    private McgCodeExpression expression;
    private McgFieldDirection direction;
    public McgCodeExpression Expression { get; public set; }
    public McgFieldDirection Direction { get; public set; }
    public McgCodeDirectionExpression(McgFieldDirection direction, McgCodeExpression expression);
    public McgCodeExpression get_Expression();
    public void set_Expression(McgCodeExpression value);
    public McgFieldDirection get_Direction();
    public void set_Direction(McgFieldDirection value);
}
public class Mcg.CodeDom.McgCodeDirective : McgCodeObject {
}
public class Mcg.CodeDom.McgCodeDirectiveCollection : List`1<McgCodeDirective> {
    public McgCodeDirectiveCollection(IEnumerable`1<McgCodeDirective> value);
}
public class Mcg.CodeDom.McgCodeEntryPointMethod : McgCodeMemberMethod {
}
public class Mcg.CodeDom.McgCodeEventReferenceExpression : McgCodeExpression {
    private McgCodeExpression targetObject;
    private string eventName;
    public McgCodeExpression TargetObject { get; public set; }
    public string EventName { get; public set; }
    public McgCodeEventReferenceExpression(McgCodeExpression targetObject, string eventName);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public string get_EventName();
    public void set_EventName(string value);
}
public class Mcg.CodeDom.McgCodeExpression : McgCodeObject {
}
public class Mcg.CodeDom.McgCodeExpressionCollection : List`1<McgCodeExpression> {
    public McgCodeExpressionCollection(IEnumerable`1<McgCodeExpression> value);
}
public class Mcg.CodeDom.McgCodeExpressionStatement : McgCodeStatement {
    private McgCodeExpression expression;
    public McgCodeExpression Expression { get; public set; }
    public McgCodeExpressionStatement(McgCodeExpression expression);
    public McgCodeExpression get_Expression();
    public void set_Expression(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeFieldReferenceExpression : McgCodeExpression {
    private McgCodeExpression targetObject;
    private string fieldName;
    public McgCodeExpression TargetObject { get; public set; }
    public string FieldName { get; public set; }
    public McgCodeFieldReferenceExpression(McgCodeExpression targetObject, string fieldName);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public string get_FieldName();
    public void set_FieldName(string value);
}
public class Mcg.CodeDom.McgCodeFinalizer : McgCodeMemberMethod {
    public McgCodeFinalizer(string className);
}
public class Mcg.CodeDom.McgCodeFixedStatement : McgCodeStatement {
    [CompilerGeneratedAttribute]
private McgCodeVariableDeclarationStatement <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private McgCodeStatementCollection <Statements>k__BackingField;
    public McgCodeVariableDeclarationStatement Variable { get; public set; }
    public McgCodeStatementCollection Statements { get; private set; }
    public McgCodeFixedStatement(McgCodeVariableDeclarationStatement variable, McgCodeStatement[] statements);
    [CompilerGeneratedAttribute]
public McgCodeVariableDeclarationStatement get_Variable();
    [CompilerGeneratedAttribute]
public void set_Variable(McgCodeVariableDeclarationStatement value);
    [CompilerGeneratedAttribute]
public McgCodeStatementCollection get_Statements();
    [CompilerGeneratedAttribute]
private void set_Statements(McgCodeStatementCollection value);
}
public class Mcg.CodeDom.McgCodeGotoStatement : McgCodeStatement {
    private string label;
    public string Label { get; public set; }
    public McgCodeGotoStatement(string label);
    public string get_Label();
    public void set_Label(string value);
}
public class Mcg.CodeDom.McgCodeIndexerExpression : McgCodeExpression {
    private McgCodeExpression targetObject;
    private McgCodeExpressionCollection indices;
    public McgCodeExpression TargetObject { get; public set; }
    public McgCodeExpressionCollection Indices { get; }
    public McgCodeIndexerExpression(McgCodeExpression targetObject, McgCodeExpression[] indices);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public McgCodeExpressionCollection get_Indices();
}
public class Mcg.CodeDom.McgCodeIterationStatement : McgCodeStatement {
    private McgCodeStatement initStatement;
    private McgCodeExpression testExpression;
    private McgCodeStatement incrementStatement;
    private McgCodeStatementCollection statements;
    public McgCodeStatement InitStatement { get; public set; }
    public McgCodeExpression TestExpression { get; public set; }
    public McgCodeStatement IncrementStatement { get; public set; }
    public McgCodeStatementCollection Statements { get; }
    public McgCodeIterationStatement(McgCodeStatement initStatement, McgCodeExpression testExpression, McgCodeStatement incrementStatement, McgCodeStatement[] statements);
    public McgCodeStatement get_InitStatement();
    public void set_InitStatement(McgCodeStatement value);
    public McgCodeExpression get_TestExpression();
    public void set_TestExpression(McgCodeExpression value);
    public McgCodeStatement get_IncrementStatement();
    public void set_IncrementStatement(McgCodeStatement value);
    public McgCodeStatementCollection get_Statements();
}
public class Mcg.CodeDom.McgCodeLabeledStatement : McgCodeStatement {
    private string label;
    private McgCodeStatement statement;
    public string Label { get; public set; }
    public McgCodeStatement Statement { get; public set; }
    public McgCodeLabeledStatement(string label);
    public McgCodeLabeledStatement(string label, McgCodeStatement statement);
    public string get_Label();
    public void set_Label(string value);
    public McgCodeStatement get_Statement();
    public void set_Statement(McgCodeStatement value);
}
public class Mcg.CodeDom.McgCodeLinePragma : object {
    private string fileName;
    private int lineNumber;
    public string FileName { get; public set; }
    public int LineNumber { get; public set; }
    public McgCodeLinePragma(string fileName, int lineNumber);
    public string get_FileName();
    public void set_FileName(string value);
    public int get_LineNumber();
    public void set_LineNumber(int value);
}
public class Mcg.CodeDom.McgCodeMemberEvent : McgCodeTypeMember {
    private McgCodeTypeReference type;
    private McgCodeTypeReference privateImplements;
    private McgCodeTypeReferenceCollection implementationTypes;
    public McgCodeTypeReference Type { get; public set; }
    public McgCodeTypeReference PrivateImplementationType { get; public set; }
    public McgCodeTypeReferenceCollection ImplementationTypes { get; }
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
    public McgCodeTypeReference get_PrivateImplementationType();
    public void set_PrivateImplementationType(McgCodeTypeReference value);
    public McgCodeTypeReferenceCollection get_ImplementationTypes();
}
public class Mcg.CodeDom.McgCodeMemberField : McgCodeTypeMember {
    private McgCodeTypeReference type;
    private McgCodeExpression initExpression;
    public McgCodeTypeReference Type { get; public set; }
    public McgCodeExpression InitExpression { get; public set; }
    public McgCodeMemberField(McgCodeTypeReference type, string name);
    public McgCodeMemberField(string type, string name);
    public McgCodeMemberField(Type type, string name);
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
    public McgCodeExpression get_InitExpression();
    public void set_InitExpression(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeMemberMethod : McgCodeTypeMember {
    private McgCodeParameterDeclarationExpressionCollection parameters;
    private McgCodeStatementCollection statements;
    private McgCodeTypeReference returnType;
    private McgCodeTypeReference privateImplements;
    private McgCodeTypeReferenceCollection implementationTypes;
    private McgCodeAttributeDeclarationCollection returnAttributes;
    private McgCodeTypeParameterCollection typeParameters;
    private int populated;
    private static int ParametersCollection;
    private static int StatementsCollection;
    private static int ImplTypesCollection;
    [CompilerGeneratedAttribute]
private EventHandler PopulateParameters;
    [CompilerGeneratedAttribute]
private EventHandler PopulateStatements;
    [CompilerGeneratedAttribute]
private EventHandler PopulateImplementationTypes;
    public McgCodeTypeReference ReturnType { get; public set; }
    public McgCodeStatementCollection Statements { get; }
    public McgCodeParameterDeclarationExpressionCollection Parameters { get; }
    public McgCodeTypeReference PrivateImplementationType { get; public set; }
    public McgCodeTypeReferenceCollection ImplementationTypes { get; }
    public McgCodeAttributeDeclarationCollection ReturnTypeCustomAttributes { get; }
    [ComVisibleAttribute("False")]
public McgCodeTypeParameterCollection TypeParameters { get; }
    [CompilerGeneratedAttribute]
public void add_PopulateParameters(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateParameters(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateStatements(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateStatements(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateImplementationTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateImplementationTypes(EventHandler value);
    public McgCodeTypeReference get_ReturnType();
    public void set_ReturnType(McgCodeTypeReference value);
    public McgCodeStatementCollection get_Statements();
    public McgCodeParameterDeclarationExpressionCollection get_Parameters();
    public McgCodeTypeReference get_PrivateImplementationType();
    public void set_PrivateImplementationType(McgCodeTypeReference value);
    public McgCodeTypeReferenceCollection get_ImplementationTypes();
    public McgCodeAttributeDeclarationCollection get_ReturnTypeCustomAttributes();
    public McgCodeTypeParameterCollection get_TypeParameters();
}
public class Mcg.CodeDom.McgCodeMemberProperty : McgCodeTypeMember {
    private McgCodeTypeReference type;
    private McgCodeParameterDeclarationExpressionCollection parameters;
    private bool hasGet;
    private bool hasSet;
    private McgCodeStatementCollection getStatements;
    private McgCodeStatementCollection setStatements;
    private McgCodeTypeReference privateImplements;
    private McgCodeTypeReferenceCollection implementationTypes;
    public McgCodeTypeReference PrivateImplementationType { get; public set; }
    public McgCodeTypeReferenceCollection ImplementationTypes { get; }
    public McgCodeTypeReference Type { get; public set; }
    public bool HasGet { get; public set; }
    public bool HasSet { get; public set; }
    public McgCodeStatementCollection GetStatements { get; }
    public McgCodeStatementCollection SetStatements { get; }
    public McgCodeParameterDeclarationExpressionCollection Parameters { get; }
    public McgCodeTypeReference get_PrivateImplementationType();
    public void set_PrivateImplementationType(McgCodeTypeReference value);
    public McgCodeTypeReferenceCollection get_ImplementationTypes();
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
    public bool get_HasGet();
    public void set_HasGet(bool value);
    public bool get_HasSet();
    public void set_HasSet(bool value);
    public McgCodeStatementCollection get_GetStatements();
    public McgCodeStatementCollection get_SetStatements();
    public McgCodeParameterDeclarationExpressionCollection get_Parameters();
}
public class Mcg.CodeDom.McgCodeMethodInvokeExpression : McgCodeExpression {
    private McgCodeMethodReferenceExpression method;
    private McgCodeExpressionCollection parameters;
    public McgCodeMethodReferenceExpression Method { get; public set; }
    public McgCodeExpressionCollection Parameters { get; }
    public McgCodeMethodInvokeExpression(McgCodeMethodReferenceExpression method, McgCodeExpression[] parameters);
    public McgCodeMethodInvokeExpression(McgCodeExpression targetObject, string methodName, McgCodeExpression[] parameters);
    public McgCodeMethodReferenceExpression get_Method();
    public void set_Method(McgCodeMethodReferenceExpression value);
    public McgCodeExpressionCollection get_Parameters();
}
public class Mcg.CodeDom.McgCodeMethodReferenceExpression : McgCodeExpression {
    private McgCodeExpression targetObject;
    private string methodName;
    private McgCodeTypeReferenceCollection typeArguments;
    public McgCodeExpression TargetObject { get; public set; }
    public string MethodName { get; public set; }
    [ComVisibleAttribute("False")]
public McgCodeTypeReferenceCollection TypeArguments { get; }
    public McgCodeMethodReferenceExpression(McgCodeExpression targetObject, string methodName);
    public McgCodeMethodReferenceExpression(McgCodeExpression targetObject, string methodName, McgCodeTypeReference[] typeParameters);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public McgCodeTypeReferenceCollection get_TypeArguments();
}
public class Mcg.CodeDom.McgCodeMethodReturnStatement : McgCodeStatement {
    private McgCodeExpression expression;
    public McgCodeExpression Expression { get; public set; }
    public McgCodeMethodReturnStatement(McgCodeExpression expression);
    public McgCodeExpression get_Expression();
    public void set_Expression(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeNamespace : McgCodeObject {
    private string name;
    private McgCodeNamespaceImportCollection imports;
    private McgCodeCommentStatementCollection comments;
    private McgCodeTypeDeclarationCollection classes;
    private McgCodeNamespaceCollection namespaces;
    private int populated;
    private static int ImportsCollection;
    private static int CommentsCollection;
    private static int TypesCollection;
    [CompilerGeneratedAttribute]
private EventHandler PopulateComments;
    [CompilerGeneratedAttribute]
private EventHandler PopulateImports;
    [CompilerGeneratedAttribute]
private EventHandler PopulateTypes;
    public McgCodeTypeDeclarationCollection Types { get; }
    public McgCodeNamespaceImportCollection Imports { get; }
    public string Name { get; public set; }
    public McgCodeCommentStatementCollection Comments { get; }
    public McgCodeNamespace(string name);
    [CompilerGeneratedAttribute]
public void add_PopulateComments(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateComments(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateImports(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateImports(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateTypes(EventHandler value);
    public McgCodeTypeDeclarationCollection get_Types();
    public McgCodeNamespaceImportCollection get_Imports();
    public string get_Name();
    public void set_Name(string value);
    public McgCodeCommentStatementCollection get_Comments();
}
public class Mcg.CodeDom.McgCodeNamespaceCollection : List`1<McgCodeNamespace> {
    public McgCodeNamespaceCollection(IEnumerable`1<McgCodeNamespace> value);
}
public class Mcg.CodeDom.McgCodeNamespaceImport : McgCodeObject {
    private string nameSpace;
    private McgCodeLinePragma linePragma;
    public McgCodeLinePragma LinePragma { get; public set; }
    public string Namespace { get; public set; }
    public McgCodeNamespaceImport(string nameSpace);
    public McgCodeLinePragma get_LinePragma();
    public void set_LinePragma(McgCodeLinePragma value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class Mcg.CodeDom.McgCodeNamespaceImportCollection : object {
    private Dictionary`2<string, McgCodeNamespaceImport> data;
    public int Count { get; }
    public int get_Count();
    public void Add(McgCodeNamespaceImport value);
    public void AddRange(McgCodeNamespaceImport[] value);
    public void Clear();
    public IEnumerator GetEnumerator();
}
public class Mcg.CodeDom.McgCodeNestedTypeReference : McgCodeTypeReference {
    public McgCodeTypeReference ContainingTypeReference;
    public McgCodeNestedTypeReference(McgCodeTypeReference containingType, string name);
}
public class Mcg.CodeDom.McgCodeNopStatement : McgCodeStatement {
}
public class Mcg.CodeDom.McgCodeObject : object {
    private UserData userData;
    public UserData UserData { get; }
    public UserData get_UserData();
    public object GetUserData(string key);
}
public class Mcg.CodeDom.McgCodeObjectCreateExpression : McgCodeExpression {
    private McgCodeTypeReference createType;
    private McgCodeExpressionCollection parameters;
    public McgCodeTypeReference CreateType { get; public set; }
    public McgCodeExpressionCollection Parameters { get; }
    public McgCodeObjectCreateExpression(McgCodeTypeReference createType, McgCodeExpression[] parameters);
    public McgCodeObjectCreateExpression(string createType, McgCodeExpression[] parameters);
    public McgCodeObjectCreateExpression(Type createType, McgCodeExpression[] parameters);
    public McgCodeTypeReference get_CreateType();
    public void set_CreateType(McgCodeTypeReference value);
    public McgCodeExpressionCollection get_Parameters();
}
public class Mcg.CodeDom.McgCodeObjectInitializerExpression : McgCodeExpression {
    public McgCodeTypeReferenceExpression ObjectType;
    public List`1<InitializerEntry> Initializers;
    public string Comment;
    public string Name;
    public McgCodeObjectInitializerExpression(McgCodeTypeReferenceExpression objectType);
    public McgCodeObjectInitializerExpression(McgCodeTypeReferenceExpression objectType, string comment);
    public void AddInitializer(string fieldName, McgCodeExpression initExpr);
    public void AddInitializer(string fieldName, McgCodeExpression initExpr, string comment);
}
public class Mcg.CodeDom.McgCodeParameterDeclarationExpression : McgCodeExpression {
    private McgCodeTypeReference type;
    private string name;
    private McgCodeAttributeDeclarationCollection customAttributes;
    private McgFieldDirection dir;
    public McgCodeAttributeDeclarationCollection CustomAttributes { get; public set; }
    public McgFieldDirection Direction { get; public set; }
    public McgCodeTypeReference Type { get; public set; }
    public string Name { get; public set; }
    public McgCodeParameterDeclarationExpression(McgCodeTypeReference type, string name);
    public McgCodeParameterDeclarationExpression(string type, string name);
    public McgCodeParameterDeclarationExpression(Type type, string name);
    public McgCodeAttributeDeclarationCollection get_CustomAttributes();
    public void set_CustomAttributes(McgCodeAttributeDeclarationCollection value);
    public McgFieldDirection get_Direction();
    public void set_Direction(McgFieldDirection value);
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
    public string get_Name();
    public void set_Name(string value);
}
public class Mcg.CodeDom.McgCodeParameterDeclarationExpressionCollection : List`1<McgCodeParameterDeclarationExpression> {
    public McgCodeParameterDeclarationExpressionCollection(IEnumerable`1<McgCodeParameterDeclarationExpression> value);
}
public class Mcg.CodeDom.McgCodePointerTypeReference : McgCodeTypeReference {
    public McgCodeTypeReference TypeReference;
    public int IndirectionLevel;
    public McgCodePointerTypeReference(McgCodeTypeReference typeRef, int level);
    public virtual string ToString();
}
public class Mcg.CodeDom.McgCodePrimitiveExpression : McgCodeExpression {
    private object value;
    public object Value { get; public set; }
    public McgCodePrimitiveExpression(object value);
    public object get_Value();
    public void set_Value(object value);
}
public class Mcg.CodeDom.McgCodePrimitiveTypeReference : McgCodeTypeReference {
    public McgCodePrimitiveTypeReference(string name);
}
public class Mcg.CodeDom.McgCodePropertyReferenceExpression : McgCodeExpression {
    private McgCodeExpression targetObject;
    private string propertyName;
    private McgCodeExpressionCollection parameters;
    public McgCodeExpression TargetObject { get; public set; }
    public string PropertyName { get; public set; }
    public McgCodePropertyReferenceExpression(McgCodeExpression targetObject, string propertyName);
    public McgCodeExpression get_TargetObject();
    public void set_TargetObject(McgCodeExpression value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
}
public class Mcg.CodeDom.McgCodePropertySetValueReferenceExpression : McgCodeExpression {
}
public class Mcg.CodeDom.McgCodeRefExpression : McgCodeExpression {
    [CompilerGeneratedAttribute]
private McgCodeExpression <Refee>k__BackingField;
    public McgCodeExpression Refee { get; public set; }
    public McgCodeRefExpression(McgCodeExpression refee);
    [CompilerGeneratedAttribute]
public McgCodeExpression get_Refee();
    [CompilerGeneratedAttribute]
public void set_Refee(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeRefTypeReference : McgCodeTypeReference {
    public McgCodeTypeReference TypeReference;
    public McgCodeRefTypeReference(McgCodeTypeReference typeRef);
    public virtual string ToString();
}
public class Mcg.CodeDom.McgCodeRegionDirective : McgCodeDirective {
    private string regionText;
    private McgCodeRegionMode regionMode;
    public string RegionText { get; public set; }
    public McgCodeRegionMode RegionMode { get; public set; }
    public McgCodeRegionDirective(McgCodeRegionMode regionMode, string regionText);
    public string get_RegionText();
    public void set_RegionText(string value);
    public McgCodeRegionMode get_RegionMode();
    public void set_RegionMode(McgCodeRegionMode value);
}
[ComVisibleAttribute("True")]
public enum Mcg.CodeDom.McgCodeRegionMode : Enum {
    public int value__;
    public static McgCodeRegionMode None;
    public static McgCodeRegionMode Start;
    public static McgCodeRegionMode End;
}
public class Mcg.CodeDom.McgCodeRemoveEventStatement : McgCodeStatement {
    private McgCodeEventReferenceExpression eventRef;
    private McgCodeExpression listener;
    public McgCodeEventReferenceExpression Event { get; public set; }
    public McgCodeExpression Listener { get; public set; }
    public McgCodeRemoveEventStatement(McgCodeEventReferenceExpression eventRef, McgCodeExpression listener);
    public McgCodeRemoveEventStatement(McgCodeExpression targetObject, string eventName, McgCodeExpression listener);
    public McgCodeEventReferenceExpression get_Event();
    public void set_Event(McgCodeEventReferenceExpression value);
    public McgCodeExpression get_Listener();
    public void set_Listener(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeSegmentedStringPrimitiveExpression : McgCodeExpression {
    public List`1<string> Strings;
    public void Add(string str);
}
public class Mcg.CodeDom.McgCodeSingleLineMethodReferenceExpression : McgCodeMethodReferenceExpression {
    public McgCodeSingleLineMethodReferenceExpression(McgCodeTypeReference typeRef, string name);
}
public class Mcg.CodeDom.McgCodeSnippetCompileUnit : McgCodeCompileUnit {
    private string value;
    private McgCodeLinePragma linePragma;
    public string Value { get; public set; }
    public McgCodeLinePragma LinePragma { get; public set; }
    public McgCodeSnippetCompileUnit(string value);
    public string get_Value();
    public void set_Value(string value);
    public McgCodeLinePragma get_LinePragma();
    public void set_LinePragma(McgCodeLinePragma value);
}
public class Mcg.CodeDom.McgCodeSnippetExpression : McgCodeExpression {
    private string value;
    public string Value { get; public set; }
    public McgCodeSnippetExpression(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class Mcg.CodeDom.McgCodeSnippetStatement : McgCodeStatement {
    private string value;
    public string Value { get; public set; }
    public McgCodeSnippetStatement(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class Mcg.CodeDom.McgCodeSnippetTypeMember : McgCodeTypeMember {
    private string text;
    public string Text { get; public set; }
    public McgCodeSnippetTypeMember(string text);
    public string get_Text();
    public void set_Text(string value);
}
public class Mcg.CodeDom.McgCodeStackAllocExpression : McgCodeExpression {
    public McgCodeTypeReferenceExpression TypeExpression;
    public List`1<McgCodeExpression> InitExpressions;
    public McgCodeStackAllocExpression(McgCodeTypeReferenceExpression type, McgCodeExpression[] initExpr);
}
public class Mcg.CodeDom.McgCodeStatement : McgCodeObject {
    private McgCodeLinePragma linePragma;
    private McgCodeDirectiveCollection startDirectives;
    private McgCodeDirectiveCollection endDirectives;
    public McgCodeLinePragma LinePragma { get; public set; }
    public McgCodeDirectiveCollection StartDirectives { get; }
    public bool HasStartDirectives { get; }
    public McgCodeDirectiveCollection EndDirectives { get; }
    public bool HasEndDirectives { get; }
    public McgCodeLinePragma get_LinePragma();
    public void set_LinePragma(McgCodeLinePragma value);
    public McgCodeDirectiveCollection get_StartDirectives();
    public bool get_HasStartDirectives();
    public McgCodeDirectiveCollection get_EndDirectives();
    public bool get_HasEndDirectives();
}
public class Mcg.CodeDom.McgCodeStatementCollection : List`1<McgCodeStatement> {
    public McgCodeStatementCollection(IEnumerable`1<McgCodeStatement> value);
    public void Add(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeStringSpoolExpression : McgCodeExpression {
    private NameInterner m_interner;
    private StringBuilder m_data;
    public McgCodeStringSpoolExpression(NameInterner interner, StringBuilder data);
    public void Write(IndentedTextWriter output);
}
public class Mcg.CodeDom.McgCodeSwitchStatement : McgCodeStatement {
    public McgCodeExpression SwitchExpression;
    public List`1<McgCodeCaseStatement> Cases;
    public McgCodeSwitchStatement(McgCodeExpression switchExpression);
}
public class Mcg.CodeDom.McgCodeTemplateTypeDeclarationBase : McgCodeTypeDeclaration {
    [CompilerGeneratedAttribute]
private String[] <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TypeNames>k__BackingField;
    public String[] Lines { get; protected set; }
    public String[] TypeNames { get; protected set; }
    [CompilerGeneratedAttribute]
public String[] get_Lines();
    [CompilerGeneratedAttribute]
protected void set_Lines(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TypeNames();
    [CompilerGeneratedAttribute]
protected void set_TypeNames(String[] value);
}
public class Mcg.CodeDom.McgCodeThisReferenceExpression : McgCodeExpression {
}
public class Mcg.CodeDom.McgCodeThrowExceptionStatement : McgCodeStatement {
    private McgCodeExpression toThrow;
    public McgCodeExpression ToThrow { get; public set; }
    public McgCodeThrowExceptionStatement(McgCodeExpression toThrow);
    public McgCodeExpression get_ToThrow();
    public void set_ToThrow(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeTryCatchFinallyStatement : McgCodeStatement {
    private McgCodeStatementCollection tryStatments;
    private McgCodeStatementCollection finallyStatments;
    private McgCodeCatchClauseCollection catchClauses;
    public McgCodeStatementCollection TryStatements { get; }
    public McgCodeCatchClauseCollection CatchClauses { get; }
    public McgCodeStatementCollection FinallyStatements { get; }
    public McgCodeTryCatchFinallyStatement(McgCodeStatement[] tryStatements, McgCodeCatchClause[] catchClauses);
    public McgCodeTryCatchFinallyStatement(McgCodeStatement[] tryStatements, McgCodeCatchClause[] catchClauses, McgCodeStatement[] finallyStatements);
    public McgCodeStatementCollection get_TryStatements();
    public McgCodeCatchClauseCollection get_CatchClauses();
    public McgCodeStatementCollection get_FinallyStatements();
}
public class Mcg.CodeDom.McgCodeTypeConstructor : McgCodeMemberMethod {
}
public class Mcg.CodeDom.McgCodeTypeDeclaration : McgCodeTypeMember {
    private TypeAttributes attributes;
    private McgCodeTypeReferenceCollection baseTypes;
    private McgCodeTypeMemberCollection members;
    private bool isEnum;
    private bool isStruct;
    private int populated;
    private static int BaseTypesCollection;
    private static int MembersCollection;
    private McgCodeTypeParameterCollection typeParameters;
    private bool isPartial;
    [CompilerGeneratedAttribute]
private EventHandler PopulateBaseTypes;
    [CompilerGeneratedAttribute]
private EventHandler PopulateMembers;
    public TypeAttributes TypeAttributes { get; public set; }
    public McgCodeTypeReferenceCollection BaseTypes { get; }
    public bool IsClass { get; public set; }
    public bool IsStruct { get; public set; }
    public bool IsEnum { get; public set; }
    public bool IsInterface { get; public set; }
    public bool IsPartial { get; public set; }
    public bool IsSealed { get; public set; }
    public McgCodeTypeMemberCollection Members { get; }
    [ComVisibleAttribute("False")]
public McgCodeTypeParameterCollection TypeParameters { get; }
    public McgCodeTypeDeclaration(string name);
    [CompilerGeneratedAttribute]
public void add_PopulateBaseTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateBaseTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateMembers(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateMembers(EventHandler value);
    public TypeAttributes get_TypeAttributes();
    public void set_TypeAttributes(TypeAttributes value);
    public McgCodeTypeReferenceCollection get_BaseTypes();
    public bool get_IsClass();
    public void set_IsClass(bool value);
    public bool get_IsStruct();
    public void set_IsStruct(bool value);
    public bool get_IsEnum();
    public void set_IsEnum(bool value);
    public bool get_IsInterface();
    public void set_IsInterface(bool value);
    public bool get_IsPartial();
    public void set_IsPartial(bool value);
    public bool get_IsSealed();
    public void set_IsSealed(bool value);
    public McgCodeTypeMemberCollection get_Members();
    public McgCodeTypeParameterCollection get_TypeParameters();
}
public class Mcg.CodeDom.McgCodeTypeDeclarationCollection : List`1<McgCodeTypeDeclaration> {
    public McgCodeTypeDeclarationCollection(IEnumerable`1<McgCodeTypeDeclaration> value);
}
public class Mcg.CodeDom.McgCodeTypeDelegate : McgCodeTypeDeclaration {
    private McgCodeParameterDeclarationExpressionCollection parameters;
    private McgCodeTypeReference returnType;
    public McgCodeTypeReference ReturnType { get; public set; }
    public McgCodeParameterDeclarationExpressionCollection Parameters { get; }
    public McgCodeTypeDelegate(string name);
    public McgCodeTypeReference get_ReturnType();
    public void set_ReturnType(McgCodeTypeReference value);
    public McgCodeParameterDeclarationExpressionCollection get_Parameters();
}
public class Mcg.CodeDom.McgCodeTypeMember : McgCodeObject {
    private McgMemberAttributes attributes;
    private string name;
    private McgCodeCommentStatementCollection comments;
    private McgCodeAttributeDeclarationCollection customAttributes;
    private McgCodeLinePragma linePragma;
    private McgCodeDirectiveCollection startDirectives;
    private McgCodeDirectiveCollection endDirectives;
    public string Name { get; public set; }
    public McgMemberAttributes Attributes { get; public set; }
    public McgCodeAttributeDeclarationCollection CustomAttributes { get; public set; }
    public McgCodeLinePragma LinePragma { get; public set; }
    public McgCodeCommentStatementCollection Comments { get; }
    public McgCodeDirectiveCollection StartDirectives { get; }
    public bool HasStartDirectives { get; }
    public McgCodeDirectiveCollection EndDirectives { get; }
    public bool HasEndDirectives { get; }
    public string get_Name();
    public void set_Name(string value);
    public McgMemberAttributes get_Attributes();
    public void set_Attributes(McgMemberAttributes value);
    public McgCodeAttributeDeclarationCollection get_CustomAttributes();
    public void set_CustomAttributes(McgCodeAttributeDeclarationCollection value);
    public McgCodeLinePragma get_LinePragma();
    public void set_LinePragma(McgCodeLinePragma value);
    public McgCodeCommentStatementCollection get_Comments();
    public McgCodeDirectiveCollection get_StartDirectives();
    public bool get_HasStartDirectives();
    public McgCodeDirectiveCollection get_EndDirectives();
    public bool get_HasEndDirectives();
}
public class Mcg.CodeDom.McgCodeTypeMemberCollection : List`1<McgCodeTypeMember> {
    public McgCodeTypeMemberCollection(IEnumerable`1<McgCodeTypeMember> value);
}
public class Mcg.CodeDom.McgCodeTypeOfExpression : McgCodeExpression {
    private McgCodeTypeReference type;
    public McgCodeTypeReference Type { get; public set; }
    public McgCodeTypeOfExpression(McgCodeTypeReference type);
    public McgCodeTypeOfExpression(string type);
    public McgCodeTypeOfExpression(Type type);
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
}
public class Mcg.CodeDom.McgCodeTypeParameter : McgCodeObject {
    private string name;
    private McgCodeAttributeDeclarationCollection customAttributes;
    private McgCodeTypeReferenceCollection constraints;
    private bool hasConstructorConstraint;
    public string Name { get; public set; }
    public McgCodeTypeReferenceCollection Constraints { get; }
    public McgCodeAttributeDeclarationCollection CustomAttributes { get; }
    public bool HasConstructorConstraint { get; public set; }
    public McgCodeTypeParameter(string name);
    public string get_Name();
    public void set_Name(string value);
    public McgCodeTypeReferenceCollection get_Constraints();
    public McgCodeAttributeDeclarationCollection get_CustomAttributes();
    public bool get_HasConstructorConstraint();
    public void set_HasConstructorConstraint(bool value);
}
public class Mcg.CodeDom.McgCodeTypeParameterCollection : List`1<McgCodeTypeParameter> {
    public McgCodeTypeParameterCollection(IEnumerable`1<McgCodeTypeParameter> value);
    public void Add(string value);
}
public class Mcg.CodeDom.McgCodeTypeReference : McgCodeObject {
    private string baseType;
    private bool isInterface;
    private int arrayRank;
    private McgCodeTypeReference arrayElementType;
    private McgCodeTypeReferenceCollection typeArguments;
    private McgCodeTypeReferenceOptions referenceOptions;
    private bool needsFixup;
    public McgCodeTypeReference ArrayElementType { get; public set; }
    public int ArrayRank { get; public set; }
    public int NestedArrayDepth { get; }
    public string BaseType { get; public set; }
    [ComVisibleAttribute("False")]
public McgCodeTypeReferenceOptions Options { get; public set; }
    [ComVisibleAttribute("False")]
public McgCodeTypeReferenceCollection TypeArguments { get; }
    public bool IsInterface { get; }
    public McgCodeTypeReference(Type type);
    public McgCodeTypeReference(Type type, McgCodeTypeReferenceOptions codeTypeReferenceOption);
    public McgCodeTypeReference(string typeName, McgCodeTypeReferenceOptions codeTypeReferenceOption);
    public McgCodeTypeReference(string typeName);
    public McgCodeTypeReference(string typeName, McgCodeTypeReference[] typeArguments);
    public McgCodeTypeReference(McgCodeTypeReference typeRef, McgCodeTypeReference[] typeArguments);
    public McgCodeTypeReference(string baseType, int rank);
    public McgCodeTypeReference(McgCodeTypeReference arrayType, int rank);
    private void InitializeFromType(Type type);
    private void Initialize(string typeName);
    private void Initialize(string typeName, McgCodeTypeReferenceOptions options);
    public McgCodeTypeReference get_ArrayElementType();
    public void set_ArrayElementType(McgCodeTypeReference value);
    public int get_ArrayRank();
    public void set_ArrayRank(int value);
    public int get_NestedArrayDepth();
    public string get_BaseType();
    public void set_BaseType(string value);
    public void SetBaseTypeWithoutInit(string type);
    public McgCodeTypeReferenceOptions get_Options();
    public void set_Options(McgCodeTypeReferenceOptions value);
    public McgCodeTypeReferenceCollection get_TypeArguments();
    public bool get_IsInterface();
    private string RipOffAssemblyInformationFromTypeName(string typeName);
}
public class Mcg.CodeDom.McgCodeTypeReferenceCollection : List`1<McgCodeTypeReference> {
    public McgCodeTypeReferenceCollection(IEnumerable`1<McgCodeTypeReference> value);
    public void Add(string value);
    public void Add(Type value);
}
public class Mcg.CodeDom.McgCodeTypeReferenceExpression : McgCodeExpression {
    private McgCodeTypeReference type;
    public McgCodeTypeReference Type { get; public set; }
    public McgCodeTypeReferenceExpression(McgCodeTypeReference type);
    public McgCodeTypeReferenceExpression(string type);
    public McgCodeTypeReferenceExpression(Type type);
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
}
[FlagsAttribute]
public enum Mcg.CodeDom.McgCodeTypeReferenceOptions : Enum {
    public int value__;
    public static McgCodeTypeReferenceOptions GlobalReference;
}
public class Mcg.CodeDom.McgCodeUnaryOperatorExpression : McgCodeExpression {
    public McgCodeExpression Expression;
    public McgCodeUnaryOperatorType Operator;
    public McgCodeUnaryOperatorExpression(McgCodeUnaryOperatorType operatorType, McgCodeExpression expr);
}
public enum Mcg.CodeDom.McgCodeUnaryOperatorType : Enum {
    public int value__;
    public static McgCodeUnaryOperatorType Not;
    public static McgCodeUnaryOperatorType BitwiseNot;
    public static McgCodeUnaryOperatorType Inc;
    public static McgCodeUnaryOperatorType Dec;
    public static McgCodeUnaryOperatorType PostInc;
    public static McgCodeUnaryOperatorType PostDec;
    public static McgCodeUnaryOperatorType Positive;
    public static McgCodeUnaryOperatorType Negative;
    public static McgCodeUnaryOperatorType SizeOf;
}
public class Mcg.CodeDom.McgCodeUncheckedExpression : McgCodeExpression {
    [CompilerGeneratedAttribute]
private McgCodeExpression <CastExpr>k__BackingField;
    public McgCodeExpression CastExpr { get; public set; }
    public McgCodeUncheckedExpression(McgCodeExpression castexpr);
    [CompilerGeneratedAttribute]
public McgCodeExpression get_CastExpr();
    [CompilerGeneratedAttribute]
public void set_CastExpr(McgCodeExpression value);
}
public class Mcg.CodeDom.McgCodeUncheckedStatement : McgCodeStatement {
    [CompilerGeneratedAttribute]
private McgCodeStatementCollection <Statements>k__BackingField;
    public McgCodeStatementCollection Statements { get; private set; }
    public McgCodeUncheckedStatement(McgCodeStatement[] statements);
    [CompilerGeneratedAttribute]
public McgCodeStatementCollection get_Statements();
    [CompilerGeneratedAttribute]
private void set_Statements(McgCodeStatementCollection value);
}
public class Mcg.CodeDom.McgCodeVariableDeclarationStatement : McgCodeStatement {
    private McgCodeTypeReference type;
    private string name;
    private McgCodeExpression initExpression;
    public McgCodeExpression InitExpression { get; public set; }
    public string Name { get; public set; }
    public McgCodeTypeReference Type { get; public set; }
    public McgCodeVariableDeclarationStatement(McgCodeTypeReference type, string name);
    public McgCodeVariableDeclarationStatement(string type, string name);
    public McgCodeVariableDeclarationStatement(Type type, string name);
    public McgCodeVariableDeclarationStatement(McgCodeTypeReference type, string name, McgCodeExpression initExpression);
    public McgCodeVariableDeclarationStatement(string type, string name, McgCodeExpression initExpression);
    public McgCodeVariableDeclarationStatement(Type type, string name, McgCodeExpression initExpression);
    public McgCodeExpression get_InitExpression();
    public void set_InitExpression(McgCodeExpression value);
    public string get_Name();
    public void set_Name(string value);
    public McgCodeTypeReference get_Type();
    public void set_Type(McgCodeTypeReference value);
}
public class Mcg.CodeDom.McgCodeVariableReferenceExpression : McgCodeExpression {
    private string variableName;
    public string VariableName { get; public set; }
    public McgCodeVariableReferenceExpression(string variableName);
    public string get_VariableName();
    public void set_VariableName(string value);
}
[ComVisibleAttribute("True")]
public enum Mcg.CodeDom.McgFieldDirection : Enum {
    public int value__;
    public static McgFieldDirection In;
    public static McgFieldDirection Out;
    public static McgFieldDirection Ref;
}
[ComVisibleAttribute("True")]
public enum Mcg.CodeDom.McgMemberAttributes : Enum {
    public int value__;
    public static McgMemberAttributes Abstract;
    public static McgMemberAttributes Final;
    public static McgMemberAttributes Static;
    public static McgMemberAttributes Override;
    public static McgMemberAttributes Const;
    public static McgMemberAttributes New;
    public static McgMemberAttributes Overloaded;
    public static McgMemberAttributes Assembly;
    public static McgMemberAttributes FamilyAndAssembly;
    public static McgMemberAttributes Family;
    public static McgMemberAttributes FamilyOrAssembly;
    public static McgMemberAttributes Private;
    public static McgMemberAttributes Public;
    public static McgMemberAttributes AccessMask;
    public static McgMemberAttributes ScopeMask;
    public static McgMemberAttributes VTableMask;
}
internal abstract class Mcg.CodeDom.Member : object {
    protected string m_name;
    protected Scope m_containingScope;
    public string Name { get; }
    public Scope ContainingScope { get; }
    public string get_Name();
    public Scope get_ContainingScope();
    public int GetDepth();
    internal ArraySlice`1<Member> ToArray(Member[]& storage);
    public virtual string ToString();
    public void Dump();
    public virtual void Dump(int indent, TextWriter writer);
}
public class Mcg.CodeDom.NameInterner : object {
    internal static int Escape_Start;
    internal static int Escape_Count;
    private StringBuilder _namespaces;
    private StringBuilder _names;
    private Dictionary`2<string, int> _namespaceToIndex;
    private Dictionary`2<string, int> _nameToIndex;
    private List`1<ushort> _namespaceIndices;
    private int _namespaceCount;
    private int _nameCount;
    private McgCodeConstructor _ctor;
    private bool _firstNameMap;
    private static Char[] nameSeps;
    private static char Unicode_Mark;
    public NameInterner(McgCodeConstructor ctor);
    private static NameInterner();
    public void SetNameMap(string tableName);
    private string CompressName(string fullName);
    private int GetNamespaceIndex(string nspace);
    public int GetNameIndex(string fullName);
    private McgCodeMemberField GenerateField(string fieldName, string fieldType, McgCodeExpression data, int count, int length);
    public void GenerateStringPool(McgCodeTypeMemberCollection scope);
}
internal class Mcg.CodeDom.NameWalker : ValueType {
    private string _fullName;
    private int _idxNextPart;
    public bool WalkedFullName { get; }
    public int IdxNextPart { get; }
    public NameWalker(string fullName);
    public bool get_WalkedFullName();
    public int get_IdxNextPart();
    public bool GetNextPart(StringSlice& namePart);
    private static bool GetNamePart(string name, int idxStart, StringSlice& namePart, Int32& idxNextPart);
}
public class Mcg.CodeDom.PreInitArrayGenerator : object {
    private List`1<McgCodeObjectInitializerExpression> m_entries;
    private List`1<McgCodeExpression> m_references;
    private string m_typeHandleFieldName;
    private IMcgTypeHashGenerator m_hashGenerator;
    public int Count { get; }
    public PreInitArrayGenerator(IMcgTypeHashGenerator hashGenerator, string fieldNameOfTypeHandleExpression);
    public void Add(McgCodeObjectInitializerExpression entry);
    public void Add(McgCodeObjectInitializerExpression entry, McgCodeExpression reference);
    public int get_Count();
    private static int StableStringHash(string str);
    public void GenerateArray(McgCodeTypeDeclaration containerType, string arrayFieldName, McgCodeTypeReference elementType, string nameField, NameInterner nameInterner, bool preInit);
}
internal static class Mcg.CodeDom.PrivateWellKnown : object {
}
internal class Mcg.CodeDom.Scope : Member {
    private ScopeKind m_kind;
    private Dictionary`2<StringSlice, Member> m_nameToMemberMap;
    private Dictionary`2<StringSlice, Scope> m_nameToNestedScopeMap;
    private Dictionary`2<string, Scope> m_activeUsings;
    private Dictionary`2<string, string> m_cachedNameShortenings;
    public Dictionary`2<string, string> CachedNameShortenings { get; }
    public ScopeKind Kind { get; }
    public IDictionary`2<string, Scope> ActiveUsings { get; }
    public Scope(Scope containingScope, ScopeKind kind, string name);
    public Dictionary`2<string, string> get_CachedNameShortenings();
    public ScopeKind get_Kind();
    internal ArraySlice`1<Scope> ToScopeArray(Scope[]& storage);
    public void AddNestedScope(Scope nestedScope);
    public void AddUsingStatement(string usingNs, Scope usingScope);
    public IDictionary`2<string, Scope> get_ActiveUsings();
    public virtual void Dump(int indent, TextWriter writer);
    public Scope LookupScope(string name, ScopeKind expectedKind);
    public Scope FindNestedScope(string scopeName);
    public Scope FindNestedScope(string scopeName, ScopeKind kind, bool createIfNotFound);
    internal bool TryGetMember(StringSlice name, Member& result);
    internal bool TryGetNestedScope(StringSlice name, Scope& result);
    public void AddTypeMember(string name);
    public bool IsEquivalentTo(Scope otherScope);
    internal Scope FindScopeByScope(Scope scopeToFind);
    public Scope GetNthParent(int n);
}
internal enum Mcg.CodeDom.ScopeKind : Enum {
    public int value__;
    public static ScopeKind Namespace;
    public static ScopeKind Type;
}
public class Mcg.CodeDom.SimpleTypeReferenceFormatter : TypeReferenceFormatter {
    private bool _appendGlobalQualifier;
    public SimpleTypeReferenceFormatter(bool appendGlobalQualifier);
    protected virtual void FormatPointerTypeReference(McgCodePointerTypeReference pointerTypeRef, StringBuilder s);
    protected virtual void FormatRefTypeReference(McgCodeRefTypeReference refTypeRef, StringBuilder s);
    protected virtual void FormatCodeTypeReference(McgCodeTypeReference typeRef, StringBuilder s);
    protected virtual void FormatPrimitiveTypeReference(McgCodeTypeReference typeRef, StringBuilder s);
}
public static class Mcg.CodeDom.StringBuilderCache : object {
    [ThreadStaticAttribute]
private static StringBuilder[] ts_CachedInstances;
    private static int s_Capacity;
    private static StringBuilderCache();
    private static StringBuilder[] GetList();
    public static StringBuilder Acquire(int len);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
[DefaultMemberAttribute("Item")]
internal class Mcg.CodeDom.StringSlice : ValueType {
    private ushort m_idxStart;
    private ushort m_cchLength;
    private string m_fullString;
    private int m_hashcode;
    public int Length { get; }
    public char Item { get; }
    public StringSlice(string fullString, int idxStart, int cchLength);
    public StringSlice(string str);
    public virtual int GetHashCode();
    private static int CalculateHashCode(string fullString, int idxStart, int cchLength);
    public virtual bool Equals(object obj);
    public bool Equals(StringSlice& slice);
    public virtual string ToString();
    public bool Equals(string str);
    public int get_Length();
    public char get_Item(int idx);
    public static bool op_Equality(StringSlice left, string right);
    public static bool op_Equality(string left, StringSlice right);
    public static bool op_Inequality(StringSlice left, string right);
    public static bool op_Inequality(string left, StringSlice right);
}
internal class Mcg.CodeDom.StringSliceComparer : object {
    public static StringSliceComparer Instance;
    private static StringSliceComparer();
    public sealed virtual int GetHashCode(StringSlice slice);
    public sealed virtual bool Equals(StringSlice x, StringSlice y);
}
public class Mcg.CodeDom.SymbolTable : object {
    private static string McgGeneratedCodeAssemblyName;
    private bool m_importedReferenceAssemblies;
    private List`1<AssemblyScope> m_globalNamespaces;
    private Scope m_currentDeclarationScope;
    private Stack`1<McgCodeObject> m_pathToRoot;
    private HashSet`1<string> m_unresolvedNames;
    private Scope[] m_declScopes;
    private Member[] m_nameScopes;
    private Stack`1<INamedTypeDefinition> m_containerTypes;
    private Stack`1<INamespaceDefinition> m_containerNamespaces;
    private static Char[] s_invalidChars;
    internal Scope CompilationGlobalNS { get; }
    private static SymbolTable();
    public void ClearGlobalActiveUsings();
    internal Scope get_CompilationGlobalNS();
    private Scope FindNestedScope(McgCodeNamespace ns);
    private Scope FindNestedScope(McgCodeTypeDeclaration type);
    private Scope FindNestedScope(string scopeName, ScopeKind kind, bool createIfNotFound);
    public void InsertNewCompilationAssembly();
    public void ImportCodeDom(McgCodeObject obj);
    private void Visit(McgCodeCompileUnit cu);
    private void Visit(McgCodeNamespace ns);
    private void Visit(McgCodeTypeDeclaration type);
    private Member FindMemberByFQN(string name);
    private Member FindHelper(Scope scope, NameWalker nameWalker);
    internal Scope FindScope(Scope currentScope, string name);
    private bool IsAmbiguousShortening(Scope declarationScope, Member reducedMember);
    public String[] GetUnresolvedNames();
    internal bool ReduceTypeName(Scope currentDeclScope, String& name);
    public void ImportReferenceAssemblies(IEnumerable`1<IAssembly> assemblies);
    private void PopulateOneType(AssemblyScope assemblyGlobalNS, INamedTypeDefinition typeDef);
}
internal class Mcg.CodeDom.TypeMember : Member {
    public TypeMember(Scope containingType, string name);
}
public abstract class Mcg.CodeDom.TypeReferenceFormatter : object {
    protected abstract virtual void FormatPointerTypeReference(McgCodePointerTypeReference pointerTypeRef, StringBuilder s);
    protected abstract virtual void FormatRefTypeReference(McgCodeRefTypeReference refTypeRef, StringBuilder s);
    protected abstract virtual void FormatCodeTypeReference(McgCodeTypeReference typeRef, StringBuilder s);
    protected abstract virtual void FormatPrimitiveTypeReference(McgCodeTypeReference primTypeRef, StringBuilder s);
    public string Format(McgCodeTypeReference typeRef);
    protected void Format(McgCodeTypeReference typeRef, StringBuilder s);
}
public class Mcg.CodeDom.UniqueName : object {
    private string m_name;
    private McgCodeExpression m_varExpr;
    public string Name { get; }
    public McgCodeExpression VariableReferenceExpression { get; }
    public UniqueName(string root, McgCodeMemberMethod scope);
    public static string GetUniqueName(string root, McgCodeMemberMethod scope);
    public string get_Name();
    public McgCodeVariableDeclarationStatement GetVariableDeclarationStatement(McgCodeTypeReference typeRef, McgCodeExpression expr);
    public McgCodeVariableDeclarationStatement GetVariableDeclarationStatement(string typeRef, McgCodeExpression expr);
    public McgCodeParameterDeclarationExpression GetParameterDeclarationExpression(McgCodeTypeReference typeRef);
    public McgCodeExpression get_VariableReferenceExpression();
}
[DefaultMemberAttribute("Item")]
public class Mcg.CodeDom.UserData : object {
    private Dictionary`2<string, object> userData;
    public object Item { get; public set; }
    public object get_Item(string key);
    public void set_Item(string key, object value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Mcg.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_NameConflict { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_NameConflict();
}
