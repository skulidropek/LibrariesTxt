internal static class FxResources.System.Net.WebSockets.Client.SR : object {
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    private static string MissingMember;
    private static string NullInstance;
    private static string StaticMethodObject;
    private static string NoParameters;
    private static int MaxDumpSize;
    private static int EnterEventId;
    private static int ExitEventId;
    private static int AssociateEventId;
    private static int InfoEventId;
    private static int ErrorEventId;
    private static int CriticalFailureEventId;
    private static int DumpArrayEventId;
    private static int EnumerateSecurityPackagesId;
    private static int SspiPackageNotFoundId;
    private static int AcquireDefaultCredentialId;
    private static int AcquireCredentialsHandleId;
    private static int InitializeSecurityContextId;
    private static int SecurityContextInputBufferId;
    private static int SecurityContextInputBuffersId;
    private static int AcceptSecuritContextId;
    private static int OperationReturnedSomethingId;
    private static int NextAvailableEventId;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(object arg);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
}
internal static class System.Net.Security.CertificateHelper : object {
    private static string ClientAuthenticationOID;
    internal static X509Certificate2 GetEligibleClientCertificate(X509CertificateCollection candidateCerts);
    internal static X509Certificate2 GetEligibleClientCertificate(X509Certificate2Collection candidateCerts);
    [AsyncStateMachineAttribute("System.Net.Security.CertificateHelper/<ConvertDotNetClientCertToWinRtClientCertAsync>d__3")]
internal static Task`1<Certificate> ConvertDotNetClientCertToWinRtClientCertAsync(X509Certificate2 dotNetCertificate);
    internal static X509Certificate2 ConvertPublicKeyCertificate(Certificate cert);
}
internal static class System.Net.UriScheme : object {
    public static string File;
    public static string Ftp;
    public static string Gopher;
    public static string Http;
    public static string Https;
    public static string News;
    public static string NetPipe;
    public static string NetTcp;
    public static string Nntp;
    public static string Mailto;
    public static string Ws;
    public static string Wss;
    public static string SchemeDelimiter;
}
public class System.Net.WebSockets.ClientWebSocket : WebSocket {
    private ClientWebSocketOptions _options;
    private WebSocketHandle _innerWebSocket;
    private int _state;
    public ClientWebSocketOptions Options { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public string SubProtocol { get; }
    public WebSocketState State { get; }
    public ClientWebSocketOptions get_Options();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual string get_SubProtocol();
    public virtual WebSocketState get_State();
    public Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ClientWebSocket/<ConnectAsyncCore>d__16")]
private Task ConnectAsyncCore(Uri uri, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Abort();
    public virtual void Dispose();
    private void ThrowIfNotConnected();
}
public class System.Net.WebSockets.ClientWebSocketOptions : object {
    private bool _isReadOnly;
    private TimeSpan _keepAliveInterval;
    private bool _useDefaultCredentials;
    private ICredentials _credentials;
    private IWebProxy _proxy;
    private CookieContainer _cookies;
    private int _receiveBufferSize;
    private int _sendBufferSize;
    private Nullable`1<ArraySegment`1<byte>> _buffer;
    private RemoteCertificateValidationCallback _remoteCertificateValidationCallback;
    internal X509CertificateCollection _clientCertificates;
    internal WebHeaderCollection _requestHeaders;
    internal List`1<string> _requestedSubProtocols;
    internal WebHeaderCollection RequestHeaders { get; }
    internal List`1<string> RequestedSubProtocols { get; }
    public bool UseDefaultCredentials { get; public set; }
    public ICredentials Credentials { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public CookieContainer Cookies { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    internal int ReceiveBufferSize { get; }
    internal int SendBufferSize { get; }
    internal Nullable`1<ArraySegment`1<byte>> Buffer { get; }
    public void SetRequestHeader(string headerName, string headerValue);
    internal WebHeaderCollection get_RequestHeaders();
    internal List`1<string> get_RequestedSubProtocols();
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public CookieContainer get_Cookies();
    public void set_Cookies(CookieContainer value);
    public void AddSubProtocol(string subProtocol);
    public TimeSpan get_KeepAliveInterval();
    public void set_KeepAliveInterval(TimeSpan value);
    internal int get_ReceiveBufferSize();
    internal int get_SendBufferSize();
    internal Nullable`1<ArraySegment`1<byte>> get_Buffer();
    public void SetBuffer(int receiveBufferSize, int sendBufferSize);
    public void SetBuffer(int receiveBufferSize, int sendBufferSize, ArraySegment`1<byte> buffer);
    internal void SetToReadOnly();
    private void ThrowIfReadOnly();
}
[IsReadOnlyAttribute]
internal class System.Net.WebSockets.WebSocketHandle : ValueType {
    private WinRTWebSocket _webSocket;
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    private WebSocketHandle(WinRTWebSocket webSocket);
    public static bool IsValid(WebSocketHandle handle);
    public Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public string get_CloseStatusDescription();
    public WebSocketState get_State();
    public string get_SubProtocol();
    public Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public void Dispose();
    public void Abort();
    public static WebSocketHandle Create();
    public static void CheckPlatformSupport();
    [AsyncStateMachineAttribute("System.Net.WebSockets.WebSocketHandle/<ConnectAsyncCore>d__21")]
public Task ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options);
}
internal static class System.Net.WebSockets.WebSocketValidate : object {
    internal static int MaxControlFramePayloadLength;
    private static int CloseStatusCodeAbort;
    private static int CloseStatusCodeFailedTLSHandshake;
    private static int InvalidCloseStatusCodesFrom;
    private static int InvalidCloseStatusCodesTo;
    private static string Separators;
    internal static void ThrowIfInvalidState(WebSocketState currentState, bool isDisposed, WebSocketState[] validStates);
    internal static void ValidateSubprotocol(string subProtocol);
    internal static void ValidateCloseStatus(WebSocketCloseStatus closeStatus, string statusDescription);
    internal static void ThrowPlatformNotSupportedException();
    internal static void ValidateArraySegment(ArraySegment`1<byte> arraySegment, string parameterName);
    internal static void ValidateBuffer(Byte[] buffer, int offset, int count);
}
internal class System.Net.WebSockets.WinRTWebSocket : WebSocket {
    private static string HeaderNameCookie;
    private static string ClientAuthenticationOID;
    private static Lazy`1<bool> s_MessageWebSocketClientCertificateSupported;
    private static Lazy`1<bool> s_MessageWebSocketReceiveModeSupported;
    private Nullable`1<WebSocketCloseStatus> _closeStatus;
    private string _closeStatusDescription;
    private string _subProtocol;
    private bool _disposed;
    private object _stateLock;
    private int _pendingWriteOperation;
    private MessageWebSocket _messageWebSocket;
    private DataWriter _messageWriter;
    private WebSocketState _state;
    private TaskCompletionSource`1<ArraySegment`1<byte>> _receiveAsyncBufferTcs;
    private TaskCompletionSource`1<WebSocketReceiveResult> _webSocketReceiveResultTcs;
    private TaskCompletionSource`1<WebSocketReceiveResult> _closeWebSocketReceiveResultTcs;
    private static WebSocketState[] s_validConnectStates;
    private static WebSocketState[] s_validConnectingStates;
    private static WebSocketState[] s_validCloseStates;
    private static WebSocketState[] s_validCloseOutputStates;
    private static WebSocketState[] s_validReceiveStates;
    private static WebSocketState[] s_validSendStates;
    private static bool MessageWebSocketClientCertificateSupported { get; }
    private static bool MessageWebSocketReceiveModeSupported { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    private static WinRTWebSocket();
    private static bool get_MessageWebSocketClientCertificateSupported();
    private static bool get_MessageWebSocketReceiveModeSupported();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    [AsyncStateMachineAttribute("System.Net.WebSockets.WinRTWebSocket/<ConnectAsync>d__31")]
public Task ConnectAsync(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options);
    public virtual void Abort();
    private void AbortInternal(Exception customException);
    private void CancelAllOperations(Exception customException);
    [AsyncStateMachineAttribute("System.Net.WebSockets.WinRTWebSocket/<CloseAsync>d__36")]
public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    private void OnCloseReceived(IWebSocket sender, WebSocketClosedEventArgs args);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("System.Net.WebSockets.WinRTWebSocket/<ReceiveAsync>d__42")]
public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    private void OnMessageReceived(MessageWebSocket sender, MessageWebSocketMessageReceivedEventArgs args);
    [AsyncStateMachineAttribute("System.Net.WebSockets.WinRTWebSocket/<SendAsync>d__45")]
public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    private CancellationTokenRegistration ThrowOrRegisterCancellation(CancellationToken cancellationToken);
    public void InterlockedCheckValidStates(WebSocketState[] validStates);
    private void InterlockedCheckAndUpdateState(WebSocketState newState, WebSocketState[] validStates);
    private void InterlockedCheckAndUpdateCloseState(WebSocketState newState, WebSocketState[] validStates);
    private void CheckValidState(WebSocketState[] validStates);
    private void UpdateState(WebSocketState value);
    private static bool InitMessageWebSocketClientCertificateSupported();
    private static bool InitMessageWebSocketReceiveModeSupported();
    private bool IsPartialMessageEvent(MessageWebSocketMessageReceivedEventArgs eventArgs);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_webstatus_ConnectFailure { get; }
    internal static string net_uri_NotAbsolute { get; }
    internal static string net_Websockets_AlreadyOneOutstandingOperation { get; }
    internal static string net_WebSockets_UnsupportedPlatform { get; }
    internal static string net_WebSockets_AcceptUnsupportedProtocol { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_TooSmall { get; }
    internal static string net_WebSockets_InvalidState_ClosedOrAborted { get; }
    internal static string net_WebSockets_InvalidState { get; }
    internal static string net_WebSockets_Argument_InvalidMessageType { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_InvalidEmptySubProtocol { get; }
    internal static string net_WebSockets_ReasonNotNull { get; }
    internal static string net_WebSockets_InvalidCloseStatusCode { get; }
    internal static string net_WebSockets_InvalidCloseStatusDescription { get; }
    internal static string net_WebSockets_Scheme { get; }
    internal static string net_WebSockets_AlreadyStarted { get; }
    internal static string net_WebSockets_InvalidResponseHeader { get; }
    internal static string net_WebSockets_NotConnected { get; }
    internal static string net_WebSockets_NoDuplicateProtocol { get; }
    internal static string net_securityprotocolnotsupported { get; }
    internal static string net_WebSockets_UWPClientCertSupportRequiresWindows10GreaterThan1703 { get; }
    internal static string net_WebSockets_UWPClientCertSupportRequiresCertInPersonalCertificateStore { get; }
    internal static string net_WebSockets_RemoteValidationCallbackNotSupported { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_webstatus_ConnectFailure();
    internal static string get_net_uri_NotAbsolute();
    internal static string get_net_Websockets_AlreadyOneOutstandingOperation();
    internal static string get_net_WebSockets_UnsupportedPlatform();
    internal static string get_net_WebSockets_AcceptUnsupportedProtocol();
    internal static string get_net_WebSockets_ArgumentOutOfRange_TooSmall();
    internal static string get_net_WebSockets_InvalidState_ClosedOrAborted();
    internal static string get_net_WebSockets_InvalidState();
    internal static string get_net_WebSockets_Argument_InvalidMessageType();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_InvalidEmptySubProtocol();
    internal static string get_net_WebSockets_ReasonNotNull();
    internal static string get_net_WebSockets_InvalidCloseStatusCode();
    internal static string get_net_WebSockets_InvalidCloseStatusDescription();
    internal static string get_net_WebSockets_Scheme();
    internal static string get_net_WebSockets_AlreadyStarted();
    internal static string get_net_WebSockets_InvalidResponseHeader();
    internal static string get_net_WebSockets_NotConnected();
    internal static string get_net_WebSockets_NoDuplicateProtocol();
    internal static string get_net_securityprotocolnotsupported();
    internal static string get_net_WebSockets_UWPClientCertSupportRequiresWindows10GreaterThan1703();
    internal static string get_net_WebSockets_UWPClientCertSupportRequiresCertInPersonalCertificateStore();
    internal static string get_net_WebSockets_RemoteValidationCallbackNotSupported();
}
