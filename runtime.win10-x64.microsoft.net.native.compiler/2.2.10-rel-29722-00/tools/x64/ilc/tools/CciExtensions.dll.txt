[ExtensionAttribute]
public static class Microsoft.Cci.Extensions.AssemblyIdentityHelper : object {
    private static Byte[] _systemRuntimeBclPkt;
    private static Byte[] _mscorlibBclPkt;
    private static AssemblyIdentityHelper();
    public static AssemblyIdentity GetAssemblyIdentity(string assemblyName, IMetadataHost host);
    [ExtensionAttribute]
public static bool IsSystemRuntimeIdentity(AssemblyIdentity assemblyIdentity);
    [ExtensionAttribute]
public static bool IsMscorlibIdentity(AssemblyIdentity assemblyIdentity);
    [ExtensionAttribute]
private static bool IsMatchingIdentity(AssemblyIdentity assemblyIdentity, string name, Version version, Byte[] pkt);
}
public class Microsoft.Cci.Extensions.AssemblyReferenceOnlyComparer : object {
    public static AssemblyReferenceOnlyComparer Instance;
    private static AssemblyReferenceOnlyComparer();
    public sealed virtual bool Equals(IAssemblyReference x, IAssemblyReference y);
    public sealed virtual int GetHashCode(IAssemblyReference assemblyRef);
}
[ExtensionAttribute]
public static class Microsoft.Cci.Extensions.CciExtensions : object {
    public static string ModuleTypeName;
    private static String[] MicrosoftPublicKeyTokens;
    public static string GeneratedCodePseudoDocumentLocation;
    private static UInt32 GeneratedCodeMethodToken;
    private static int GeneratedCodeILStackSizeLimit;
    private static bool GeneratedCodeLocalsAreZeroed;
    private static CciExtensions();
    [ExtensionAttribute]
public static bool IsEquivalent(ITypeReference _this, ITypeReference other);
    [ExtensionAttribute]
public static bool IsEquivalent(IMethodReference _this, IMethodReference other);
    [ExtensionAttribute]
public static bool IsModuleType(ITypeReference typeReference);
    [ExtensionAttribute]
public static bool IsFacade(IModule module);
    [ExtensionAttribute]
public static bool HasOverride(INamedTypeDefinition namedValueType, IMethodReference methodToOverride);
    [ExtensionAttribute]
public static bool IsInstantiable(IMethodReference methodReference);
    [ExtensionAttribute]
public static bool IsSafeToMoveToHelperMethod(IMethodReference methodReference);
    [ExtensionAttribute]
public static bool IsNonConstructedTypeDefinition(ITypeDefinition typeDefinition);
    [ExtensionAttribute]
public static bool IsParameterlessCtor(IMethodDefinition method);
    [ExtensionAttribute]
public static IMethodDefinition GetDefaultConstructor(ITypeDefinition typeDefinition);
    [ExtensionAttribute]
public static bool IsMemberOfNamespace(ITypeDefinition type, String[] namespaceParts);
    [ExtensionAttribute]
public static INamespaceTypeReference GetContainingNonNestedType(ITypeReference typeRef);
    [ExtensionAttribute]
public static bool IsMemberOfNamespace(INamespaceTypeDefinition type, String[] namespaceParts);
    [ExtensionAttribute]
public static bool IsPublic(ITypeDefinition type);
    [ExtensionAttribute]
public static ITYPEDEFINITION ConfirmedResolvedType(ITypeReference type);
    [ExtensionAttribute]
public static IMethodDefinition ConfirmedResolvedMethod(IMethodReference method);
    [ExtensionAttribute]
public static IFieldDefinition ConfirmedResolvedField(IFieldReference field);
    [ExtensionAttribute]
public static IAssembly ConfirmedResolvedAssembly(IAssemblyReference assembly);
    [ExtensionAttribute]
public static IResource ConfirmedResolvedResource(IResourceReference resource);
    [ExtensionAttribute]
public static IAssembly ConfirmedLoadAssembly(AssemblyIdentity assemblyIdentity, IMetadataHost host, IAssembly referringAssembly);
    [ExtensionAttribute]
public static INamedTypeDefinition ConfirmedFindType(IAssembly assembly, string typeName, IMetadataHost host);
    [ExtensionAttribute]
public static bool IsSameDebugInformationVersionAsPdb(IModule module, PdbReader pdbReader);
    [ExtensionAttribute]
public static IMethodDefinition ConfirmedGetMethod(ITypeDefinition type, IMetadataHost host, string methodName, ITypeReference[] parameterTypes);
    [ExtensionAttribute]
public static IMethodDefinition ConfirmedGetMethodBySimpleName(ITypeDefinition type, IMetadataHost host, string methodName);
    [ExtensionAttribute]
public static IFieldDefinition ConfirmedGetField(ITypeDefinition type, IMetadataHost host, string fieldName);
    [ExtensionAttribute]
public static string GuaranteeNoncollision(string preferredName, IEnumerable`1<string> existingNames);
    [ExtensionAttribute]
public static ITypeReference BaseType(INamedTypeDefinition type);
    [ExtensionAttribute]
public static bool IsSubclassOf(INamedTypeDefinition namedType, INamedTypeReference type);
    [ExtensionAttribute]
public static IAssemblyReference AssemblyReference(ITypeReference typeReference);
    [ExtensionAttribute]
public static void Traverse(IAssembly assembly, IMetadataVisitor visitor);
    [ExtensionAttribute]
public static PrimitiveTypeCode GetEnumUnderlyingTypeCode(ITypeReference type);
    [ExtensionAttribute]
public static string GetPublicKeyToken(IAssemblyReference assembly);
    [ExtensionAttribute]
public static string GetPublicKeyToken(AssemblyIdentity identity);
    [IteratorStateMachineAttribute("Microsoft.Cci.Extensions.CciExtensions/<FindAttributes>d__34")]
[ExtensionAttribute]
public static IEnumerable`1<ICustomAttribute> FindAttributes(IEnumerable`1<ICustomAttribute> attributes, ITypeReference attributeType);
    [ExtensionAttribute]
public static ICustomAttribute FindAttribute(IEnumerable`1<ICustomAttribute> attributes, ITypeReference attributeType);
    [ExtensionAttribute]
public static bool HasExplicitOrImplicitPublicDefaultConstructor(ITypeDefinition type);
    [ExtensionAttribute]
public static T Value(ILocation location);
    [ExtensionAttribute]
public static bool IsDummy(ITypeReference typeRef);
    [ExtensionAttribute]
public static string DisplayString(AssemblyIdentity assemblyIdentity);
    [ExtensionAttribute]
public static string DisplayString(ITypeReference type, bool brief);
    [ExtensionAttribute]
public static string DisplayString(IFieldReference field, bool brief);
    [ExtensionAttribute]
public static string DisplayString(IMethodReference method, bool brief);
    [ExtensionAttribute]
public static string DisplayString(ITypeMemberReference member);
    [ExtensionAttribute]
public static bool IsFullyPublic(INamedTypeDefinition _this);
    [ExtensionAttribute]
public static bool IsVisibleOutsideAssembly(INamedTypeDefinition _this);
    [ExtensionAttribute]
public static T ListElementAt(IEnumerable`1<T> enumerable, int index);
    [ExtensionAttribute]
public static HashSet`1<ITypeDefinition> GetConstituentTypes(ITypeDefinition typeDefinition);
    private static void GetConstituentTypesInternal(ITypeDefinition type, HashSet`1<ITypeDefinition> constituentTypes);
    [ExtensionAttribute]
private static bool SatisfiesConstraints(IGenericParameter genericVariable, IMetadataHost host, SigTypeContext typeContextOfConstraintDeclarer, ITypeReference typeArg);
    private static bool SatisfiesConstraints(IMetadataHost host, IEnumerable`1<IGenericParameter> typeParameters, IEnumerable`1<ITypeReference> typeArguments);
    [ExtensionAttribute]
public static bool SatisfiesConstraints(ITypeReference genericTypeReference, IMetadataHost host);
    [ExtensionAttribute]
public static bool SatisfiesConstraintsRecursive(ITypeReference type, IMetadataHost host);
    [ExtensionAttribute]
public static bool SatisfiesConstraints(IGenericMethodInstanceReference genericMethodReference, IMetadataHost host);
    [ExtensionAttribute]
public static bool HasCustomAttribute(IEnumerable`1<ICustomAttribute> attributes, IMethodReference ctor);
    [ExtensionAttribute]
public static ICustomAttribute GetCustomAttributeOrNull(IEnumerable`1<ICustomAttribute> attributes, IMethodReference ctor);
    [ExtensionAttribute]
public static bool TryGetCustomAttribute(IEnumerable`1<ICustomAttribute> attributes, IMethodReference ctor, T& value);
    [ExtensionAttribute]
public static bool TryGetCustomAttribute(IEnumerable`1<ICustomAttribute> attributes, IMethodReference ctor, T& value1, U& value2);
    [ExtensionAttribute]
public static bool TryGetCustomAttribute(IEnumerable`1<ICustomAttribute> attributes, IMethodReference ctor, T& value1, U& value2, V& value3);
    [ExtensionAttribute]
public static T As(IMetadataExpression metadataExpression);
    [ExtensionAttribute]
public static bool Is(IMetadataExpression metadataExpression);
    [ExtensionAttribute]
public static ICustomAttribute AddCustomAttribute(IDefinition definition, IMethodReference customAttributeCtor, IMetadataExpression[] constructorArguments);
    [ExtensionAttribute]
public static bool HasMicrosoftPublicKeyToken(IAssembly assembly);
    [ExtensionAttribute]
public static bool IsFrameworkAssembly(IAssembly assembly);
    [ExtensionAttribute]
public static bool HasFrameworkAssemblyAttribute(IAssembly assembly);
    [ExtensionAttribute]
public static bool IsMcgGeneratedAssembly(IAssembly assembly);
    [ExtensionAttribute]
public static bool HasAttribute(IDefinition definition, INamedTypeDefinition attributeToTest);
    [ExtensionAttribute]
public static NamespaceTypeReference CopyToHost(INamespaceTypeReference typeRef, IMetadataHost host);
    [ExtensionAttribute]
public static NestedTypeReference CopyToHost(INestedTypeReference typeRef, IMetadataHost host);
    [ExtensionAttribute]
public static ITypeReference DeepCopySimpleTypeRef(INamedTypeReference typeRef, IMetadataHost host);
    private static IUnitNamespaceReference CopyNamespaceRef(IUnitNamespaceReference namespaceRef, IMetadataHost host);
    private static IUnitReference CopyUnitRef(IUnitReference unitRef, IMetadataHost host);
    [ExtensionAttribute]
public static INamedTypeReference CreateTypeReference(IAssemblyReference assemblyReference, IMetadataHost host, string fullName, bool isValueType);
    [ExtensionAttribute]
public static INamedTypeReference CreateTypeReferenceNoThrowIfNotFound(IAssemblyReference assemblyReference, IMetadataHost host, string fullName, bool isValueType);
    [ExtensionAttribute]
private static INamedTypeReference CreateTypeReferenceInternal(IAssemblyReference assemblyReference, IMetadataHost host, string fullName, bool isValueType);
    [ExtensionAttribute]
public static IArrayTypeReference CreateArrayType(ITypeReference typeReference, IMetadataHost host);
    [ExtensionAttribute]
public static IArrayTypeReference CreateMultidimensionalArrayType(ITypeReference typeReference, IMetadataHost host, UInt32 rank);
    [ExtensionAttribute]
public static IManagedPointerTypeReference CreateByRefType(ITypeReference typeReference, IMetadataHost host);
    [ExtensionAttribute]
public static IPointerTypeReference CreatePointerType(ITypeReference typeReference, IMetadataHost host);
    [ExtensionAttribute]
public static IMethodReference CreateStaticMethodReference(ITypeReference containingType, IMetadataHost host, string name, ITypeReference returnType, ITypeReference[] parameterTypes);
    [ExtensionAttribute]
public static IMethodReference CreateInstanceMethodReference(ITypeReference containingType, IMetadataHost host, string name, ITypeReference returnType, ITypeReference[] parameterTypes);
    [ExtensionAttribute]
public static IMethodReference CreateConstructorReference(ITypeReference containingType, IMetadataHost host, ITypeReference[] parameterTypes);
    [ExtensionAttribute]
public static NamespaceTypeDefinition CreateNamespaceType(Assembly assembly, IMetadataHost host, string fullName, ITypeReference baseType, bool isValueType);
    [ExtensionAttribute]
public static FieldDefinition CreateStaticField(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference fieldType, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static FieldDefinition CreateInstanceField(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference fieldType, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static FieldDefinition CreateField(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference fieldType, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static MethodDefinition CreateStaticMethod(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference returnType, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static MethodDefinition CreateVirtualMethod(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference returnType, TypeMemberVisibility visibility, bool newSlot);
    [ExtensionAttribute]
public static MethodDefinition CreateInstanceMethod(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference returnType, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static MethodDefinition CreateExplicitImplementationMethod(NamedTypeDefinition containingType, IMetadataHost host, string name, IMethodReference methodToImplement);
    [ExtensionAttribute]
private static MethodDefinition CreateMethod(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference returnType, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static MethodDefinition CreateInstanceConstructor(NamedTypeDefinition containingType, IMetadataHost host, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static PropertyDefinition CreateProperty(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference type, TypeMemberVisibility visibility, CallingConvention callingConvention);
    [ExtensionAttribute]
public static EventDefinition CreateEvent(NamedTypeDefinition containingType, IMetadataHost host, string name, ITypeReference type, TypeMemberVisibility visibility);
    [ExtensionAttribute]
public static ParameterDefinition CreateParameter(MethodDefinition containingMethod, IMetadataHost host, string name, ITypeReference parameterType);
    [ExtensionAttribute]
public static GenericMethodParameter CreateGenericMethodParameter(MethodDefinition definingMethod, IMetadataHost host);
    [ExtensionAttribute]
public static FunctionPointerTypeReference CreateFunctionPointerTypeReference(IMetadataHost host, CallingConvention callingConvention, ITypeReference returnType);
    [ExtensionAttribute]
public static IMethodReference CreateBasicCustomAttributeConstructor(Assembly assembly, IMetadataHost host, string fullName, ITypeReference[] parameterTypes);
    [ExtensionAttribute]
public static INamedTypeReference CreateTypeReference(ITypeDefinition typeDef, IMetadataHost host);
    [ExtensionAttribute]
public static ILGenerator CreateILGenerator(MethodDefinition method, IMetadataHost host);
    [ExtensionAttribute]
public static LocalDefinition CreateLocal(ILGenerator ilg, ITypeReference localType, List`1& locals);
    [ExtensionAttribute]
public static ILocation GetStepInSequencePointLocation(IMethodDefinition methodDef, UInt32 ilOffset);
    [ExtensionAttribute]
public static void InjectStepInSequencePoint(ILGenerator ilg);
    [ExtensionAttribute]
public static void Done(ILGenerator ilg, IEnumerable`1<ILocalDefinition> locals);
    [ExtensionAttribute]
public static bool IsControlFlowInstruction(OperationCode opCode);
    public static OperationCode GetLdlocOpcodeForIndex(int idx);
    public static OperationCode GetStlocOpcodeForIndex(int idx);
    public static void SetLocalVarOpcodeBasedOnLocalDefinitionIndex(MethodBody methodBody, Operation mutableOp);
    [ExtensionAttribute]
public static HashSet`1<UInt32> ComputeBranchTargets(IMethodBody methodBody);
    [ExtensionAttribute]
public static bool IsLdloc(OperationCode code);
    [ExtensionAttribute]
public static bool IsStloc(OperationCode code);
    [ExtensionAttribute]
public static UInt32 GetLdlocNum(IOperation operation);
    [ExtensionAttribute]
public static void ConvertToHavingStandardMethodBody(MethodDefinition methodDefinition, IInternFactory internFactory);
    public static UInt32 GetOperationSize(OperationCode opcode);
}
[ExtensionAttribute]
public static class Microsoft.Cci.Extensions.CciGenericsExtensions : object {
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(ITypeReference typeReference);
    [ExtensionAttribute]
public static IEnumerable`1<IGenericTypeParameter> GenericTypeParameters(ITypeReference typeReference);
    [ExtensionAttribute]
public static bool IsConstructedGenericType(ITypeReference typeReference);
    [ExtensionAttribute]
public static INamedTypeReference GetGenericTypeDefinition(ITypeReference typeReference);
    [ExtensionAttribute]
public static IEnumerable`1<ITypeReference> GenericTypeArguments(ITypeReference typeReference);
    [ExtensionAttribute]
public static bool VerifyTypeParameterAndArgumentCountsIfGeneric(ITypeReference typeReference);
    [ExtensionAttribute]
public static ushort GenericParameterPosition(IGenericTypeParameter typeParameter);
    [ExtensionAttribute]
public static ITypeReference CreateConstructedGenericType(INamedTypeReference genericTypeDefinition, IMetadataHost host, ITypeReference[] genericTypeArguments);
    private static ITypeReference ConstructGenericMethodParameters(ITypeReference type, IMetadataHost host, ITypeReference[] genericMethodArguments);
    [ExtensionAttribute]
public static IMethodReference CreateConstructedGenericMethod(IMethodReference genericMethodRef, IMetadataHost host, ITypeReference[] genericMethodArguments);
    [ExtensionAttribute]
public static IMethodReference MakeCallableMethod(IMethodReference method, IMetadataHost host);
    [ExtensionAttribute]
public static bool IsOpenOrRepresentsUninstantiatedDefinition(ITypeReference typeReference);
    [ExtensionAttribute]
public static bool IsOpenMethod(IMethodReference method);
    [ExtensionAttribute]
public static bool IsOpenInstantiation(IGenericMethodInstanceReference instantiation);
    [ExtensionAttribute]
public static bool AnyOpen(IEnumerable`1<ITypeReference> typeReferences);
    [ExtensionAttribute]
public static ITypeDefinition Unspecialized(ITypeDefinition typeDefinition);
    [ExtensionAttribute]
public static ITypeDefinition UnspecializedStructural(ITypeDefinition typeDefinition, IMetadataHost host);
    [ExtensionAttribute]
public static ITypeDefinition GetInstanceType(ITypeDefinition typeDefinition);
    private static ITypeDefinition GetSpecializedNestedInstanceType(ISpecializedNestedTypeDefinition specializedNestedTypeDefinition);
}
internal class Microsoft.Cci.Extensions.ConstructedTypeRewriter : object {
    protected IMetadataHost _host;
    public ConstructedTypeRewriter(IMetadataHost host);
    public ITypeReference Rewrite(ITypeReference typeRef);
    protected virtual ITypeReference Rewrite(IArrayTypeReference arrayTypeRef);
    protected virtual ITypeReference Rewrite(IManagedPointerTypeReference managedPointerTypeRef);
    protected virtual ITypeReference Rewrite(IPointerTypeReference pointerTypeRef);
    protected virtual ITypeReference Rewrite(IModifiedTypeReference modifiedTypeRef);
    private List`1<ICustomModifier> RewriteCustomModifiers(IEnumerable`1<ICustomModifier> customModifiers, Boolean& wasRewritten);
    protected virtual ITypeReference RewriteConstructedGenericType(ITypeReference genericTypeInstRef);
    protected virtual ITypeReference Rewrite(INamedTypeReference namedTypeRef);
    protected virtual ITypeReference Rewrite(IGenericTypeParameterReference genericParamRef);
    protected virtual ITypeReference Rewrite(IGenericMethodParameterReference genericParamRef);
}
internal class Microsoft.Cci.Extensions.ConstructedTypeVisitor : object {
    public bool Visit(ITypeReference typeRef);
    protected virtual bool Visit(IArrayTypeReference arrayTypeRef);
    protected virtual bool Visit(IManagedPointerTypeReference managedPointerTypeRef);
    protected virtual bool Visit(IPointerTypeReference pointerTypeRef);
    protected virtual bool Visit(IModifiedTypeReference modifiedTypeRef);
    private bool VisitCustomModifiers(IEnumerable`1<ICustomModifier> customModifiers);
    protected virtual bool VisitConstructedGenericType(ITypeReference genericTypeInstRef);
    protected virtual bool Visit(INamedTypeReference namedTypeRef);
    protected virtual bool Visit(IGenericTypeParameterReference genericParamRef);
    protected virtual bool Visit(IGenericMethodParameterReference genericParamRef);
}
[ExtensionAttribute]
public static class Microsoft.Cci.Extensions.DebuggingHelpers : object {
    [ExtensionAttribute]
[DebuggerHiddenAttribute]
public static bool BreakIfTypeNameContains(ITypeReference typeRef, String[] searchStrings);
    [ExtensionAttribute]
[DebuggerHiddenAttribute]
public static bool BreakIfMemberSignatureContains(ITypeMemberReference memberRef, String[] searchStrings);
}
public class Microsoft.Cci.Extensions.FieldEqualityComparer : object {
    public sealed virtual bool Equals(IFieldDefinition x, IFieldDefinition y);
    public sealed virtual int GetHashCode(IFieldDefinition obj);
}
public class Microsoft.Cci.Extensions.FieldReferenceOnlyComparer : object {
    public static FieldReferenceOnlyComparer Instance;
    private static FieldReferenceOnlyComparer();
    public sealed virtual bool Equals(IFieldReference x, IFieldReference y);
    public sealed virtual int GetHashCode(IFieldReference obj);
}
public class Microsoft.Cci.Extensions.HostEnvironment : WindowsRuntimeMetadataReaderHost {
    private PeReader _reader;
    private HashSet`1<UnresolvedReference`2<IUnit, AssemblyIdentity>> _unresolvedIdentities;
    private AssemblyIdentity _coreAssemblyIdentity;
    [CompilerGeneratedAttribute]
private bool <UnifyToLibPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveInReferringUnitLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveAgainstRunningFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnresolvedReference`2<IUnit, AssemblyIdentity>> UnableToResolve;
    private Dictionary`2<AssemblyIdentity, AssemblyIdentity> m_AssemblyIdentityMap;
    private String[] _probingExtensions;
    private static Byte[] _ecmaKey;
    private static Version _winmdBclVersion;
    public bool UnifyToLibPath { get; public set; }
    public ICollection`1<UnresolvedReference`2<IUnit, AssemblyIdentity>> UnresolvedIdentities { get; }
    public bool ResolveInReferringUnitLocation { get; public set; }
    public bool ResolveAgainstRunningFramework { get; public set; }
    public HostEnvironment(bool projectToCLRTypes);
    public HostEnvironment(INameTable nameTable);
    public HostEnvironment(INameTable nameTable, bool projectToCLRTypes);
    public HostEnvironment(IInternFactory internFactory);
    public HostEnvironment(IInternFactory internFactory, bool projectToCLRTypes);
    public HostEnvironment(INameTable nameTable, IInternFactory internFactory);
    public HostEnvironment(INameTable nameTable, IInternFactory internFactory, bool projectToCLRTypes);
    private static HostEnvironment();
    [CompilerGeneratedAttribute]
public bool get_UnifyToLibPath();
    [CompilerGeneratedAttribute]
public void set_UnifyToLibPath(bool value);
    public ICollection`1<UnresolvedReference`2<IUnit, AssemblyIdentity>> get_UnresolvedIdentities();
    [CompilerGeneratedAttribute]
public bool get_ResolveInReferringUnitLocation();
    [CompilerGeneratedAttribute]
public void set_ResolveInReferringUnitLocation(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResolveAgainstRunningFramework();
    [CompilerGeneratedAttribute]
public void set_ResolveAgainstRunningFramework(bool value);
    [CompilerGeneratedAttribute]
public void add_UnableToResolve(EventHandler`1<UnresolvedReference`2<IUnit, AssemblyIdentity>> value);
    [CompilerGeneratedAttribute]
public void remove_UnableToResolve(EventHandler`1<UnresolvedReference`2<IUnit, AssemblyIdentity>> value);
    public void AddLibPaths(IEnumerable`1<string> paths);
    public void Cleanup();
    public void ResetPlatformType();
    public virtual IUnit LoadUnitFrom(string location);
    public IAssembly LoadAssemblyFrom(string location);
    public IAssembly LoadAssembly(string assemblyNameOrPath);
    private AssemblyIdentity ProbeLibPaths(AssemblyIdentity identity);
    private string ProbeLibPaths(string assemblyPath);
    protected virtual AssemblyIdentity Probe(string probeDir, AssemblyIdentity referencedAssembly);
    private AssemblyIdentity Probe(string probeDir, AssemblyIdentity referencedAssembly, string extension);
    protected virtual AssemblyIdentity GetCoreAssemblySymbolicIdentity();
    public void SetCoreAssembly(AssemblyIdentity coreAssembly);
    private AssemblyIdentity FindUnifiedAssemblyIdentity(AssemblyIdentity identity);
    public virtual AssemblyIdentity UnifyAssembly(AssemblyIdentity assemblyIdentity);
    public virtual bool ShouldUnifyToCoreAssembly(AssemblyIdentity assemblyIdentity);
    public virtual AssemblyIdentity ProbeAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    protected virtual void OnUnableToResolve(UnresolvedReference`2<IUnit, AssemblyIdentity> unresolved);
    public virtual IBinaryDocumentMemoryBlock OpenBinaryDocument(IBinaryDocument sourceDocument);
    public static String[] SplitPaths(string pathSet);
    public static IEnumerable`1<IAssembly> LoadAssemblySet(String[] paths);
    private string GetCoreAssemblyFile(string coreAssemblySimpleName, IEnumerable`1<string> contractSet);
    public ReadOnlyCollection`1<IAssembly> LoadAssemblies(string unsplitContractSet);
    public ReadOnlyCollection`1<IAssembly> LoadAssemblies(string unsplitContractSet, string coreAssemblySimpleName);
    public ReadOnlyCollection`1<IAssembly> LoadAssemblies(IEnumerable`1<string> paths);
    public ReadOnlyCollection`1<IAssembly> LoadAssemblies(IEnumerable`1<string> paths, string coreAssemblySimpleName);
    public IEnumerable`1<IAssembly> LoadAssemblies(IEnumerable`1<AssemblyIdentity> identities);
    public IEnumerable`1<IAssembly> LoadAssemblies(IEnumerable`1<AssemblyIdentity> identities, bool warnOnVersionMismatch);
    public IEnumerable`1<IAssembly> LoadAssemblies(IEnumerable`1<AssemblyIdentity> identities, bool warnOnVersionMismatch, string coreAssemblySimpleName);
    [IteratorStateMachineAttribute("Microsoft.Cci.Extensions.HostEnvironment/<GetFilePaths>d__60")]
private IEnumerable`1<string> GetFilePaths(IEnumerable`1<string> paths);
}
public class Microsoft.Cci.Extensions.MethodEqualityComparer : object {
    public sealed virtual bool Equals(IMethodDefinition x, IMethodDefinition y);
    public sealed virtual int GetHashCode(IMethodDefinition obj);
}
public class Microsoft.Cci.Extensions.MethodReferenceOnlyComparer : object {
    public static MethodReferenceOnlyComparer Instance;
    private static MethodReferenceOnlyComparer();
    public sealed virtual bool Equals(IMethodReference x, IMethodReference y);
    public sealed virtual int GetHashCode(IMethodReference methodRef);
}
public class Microsoft.Cci.Extensions.ModuleReferenceOnlyComparer : object {
    public static ModuleReferenceOnlyComparer Instance;
    private static ModuleReferenceOnlyComparer();
    public sealed virtual bool Equals(IModuleReference x, IModuleReference y);
    public sealed virtual int GetHashCode(IModuleReference moduleRef);
}
public class Microsoft.Cci.Extensions.ResolutionException : Exception {
    public ResolutionException(string message);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Cci.Extensions.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_CouldNotFindFieldOnType { get; }
    internal static string Error_CouldNotFindMethodOnType { get; }
    internal static string Error_CouldNotFindTypeInAssembly { get; }
    internal static string Error_CouldNotResolveAssembly { get; }
    internal static string Error_CouldNotResolveField { get; }
    internal static string Error_CouldNotResolveMethod { get; }
    internal static string Error_CouldNotResolveResource { get; }
    internal static string Error_CouldNotResolveType { get; }
    internal static string Error_DuplicateMethodOnType { get; }
    internal static string Error_MultiModuleAssemblies { get; }
    internal static string Error_MultipleInheritance { get; }
    internal static string Error_MultipleTypesMatchingName { get; }
    internal static string Error_CouldNotFindAssembly { get; }
    internal static string Error_CouldNotLoadAssembly { get; }
    internal static string Host_SetCoreAssemblyMultipleTimes { get; }
    internal static string Host_CoreAssemblyNotInContracts { get; }
    internal static string Host_NoAssembliesLoaded { get; }
    internal static string Host_FailedToFindOrLoadIdentity { get; }
    internal static string Host_MismatchedVersion { get; }
    internal static string Host_MismatchedPublicKey { get; }
    internal static string Host_CoreAssemblyNotInLoadIdentities { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_CouldNotFindFieldOnType();
    internal static string get_Error_CouldNotFindMethodOnType();
    internal static string get_Error_CouldNotFindTypeInAssembly();
    internal static string get_Error_CouldNotResolveAssembly();
    internal static string get_Error_CouldNotResolveField();
    internal static string get_Error_CouldNotResolveMethod();
    internal static string get_Error_CouldNotResolveResource();
    internal static string get_Error_CouldNotResolveType();
    internal static string get_Error_DuplicateMethodOnType();
    internal static string get_Error_MultiModuleAssemblies();
    internal static string get_Error_MultipleInheritance();
    internal static string get_Error_MultipleTypesMatchingName();
    internal static string get_Error_CouldNotFindAssembly();
    internal static string get_Error_CouldNotLoadAssembly();
    internal static string get_Host_SetCoreAssemblyMultipleTimes();
    internal static string get_Host_CoreAssemblyNotInContracts();
    internal static string get_Host_NoAssembliesLoaded();
    internal static string get_Host_FailedToFindOrLoadIdentity();
    internal static string get_Host_MismatchedVersion();
    internal static string get_Host_MismatchedPublicKey();
    internal static string get_Host_CoreAssemblyNotInLoadIdentities();
}
public class Microsoft.Cci.Extensions.TypeDefinitionComparer : object {
    public static TypeDefinitionComparer Instance;
    private static TypeDefinitionComparer();
    public sealed virtual bool Equals(ITypeDefinition x, ITypeDefinition y);
    public sealed virtual int GetHashCode(ITypeDefinition obj);
}
public class Microsoft.Cci.Extensions.TypeReferenceEqualityComparer`1 : object {
    public static TypeReferenceEqualityComparer`1<T> Instance;
    private static TypeReferenceEqualityComparer`1();
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
public class Microsoft.Cci.Extensions.TypeReferenceOnlyComparer : object {
    public static TypeReferenceOnlyComparer Instance;
    private static TypeReferenceOnlyComparer();
    public sealed virtual bool Equals(ITypeReference x, ITypeReference y);
    public sealed virtual int GetHashCode(ITypeReference obj);
}
public class Microsoft.Cci.Extensions.UnresolvedReference`2 : EventArgs {
    [CompilerGeneratedAttribute]
private TReferrer <Referrer>k__BackingField;
    [CompilerGeneratedAttribute]
private TUnresolved <Unresolved>k__BackingField;
    public TReferrer Referrer { get; private set; }
    public TUnresolved Unresolved { get; private set; }
    public UnresolvedReference`2(TReferrer referrer, TUnresolved unresolvedReference);
    [CompilerGeneratedAttribute]
public TReferrer get_Referrer();
    [CompilerGeneratedAttribute]
private void set_Referrer(TReferrer value);
    [CompilerGeneratedAttribute]
public TUnresolved get_Unresolved();
    [CompilerGeneratedAttribute]
private void set_Unresolved(TUnresolved value);
}
[ExtensionAttribute]
public static class Microsoft.Cci.Extensions.WinMDHelpers : object {
    [ExtensionAttribute]
public static bool IsWinMD(IAssemblyReference assemblyRef);
    [ExtensionAttribute]
public static bool IsManagedWinMD(IAssemblyReference assemblyRef);
    [ExtensionAttribute]
public static bool IsManagedWinMDType(ITypeReference typeRef);
    [ExtensionAttribute]
public static bool IsManagedWinMDMethod(IMethodReference methodRef);
    [ExtensionAttribute]
public static bool IsManagedWinMDField(IFieldReference fieldRef);
    [ExtensionAttribute]
private static bool TryGetNamespaceTypeDefinition(ITypeReference typeRef, INamespaceTypeDefinition& namespaceTypeDef);
    [ExtensionAttribute]
public static bool IsManagedWinMDClassOrEnumInCLRView(ITypeReference typeRef);
    [ExtensionAttribute]
public static bool IsManagedWinMDClassOrEnumInWinRTView(ITypeReference typeRef);
    [ExtensionAttribute]
public static bool IsNativeWinMD(IAssemblyReference assemblyRef);
    [ExtensionAttribute]
public static bool IsNativeWinMDType(ITypeReference typeRef);
    [ExtensionAttribute]
public static bool IsNativeWinMDMethod(IMethodReference methodRef);
    [ExtensionAttribute]
public static bool IsNativeWinMDField(IFieldReference fieldRef);
}
