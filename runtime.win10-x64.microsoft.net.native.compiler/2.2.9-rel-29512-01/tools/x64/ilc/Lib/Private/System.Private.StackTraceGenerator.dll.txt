internal abstract class Internal.LightweightInterop.ComInterface : object {
    public static int S_OK;
    [CompilerGeneratedAttribute]
private IntPtr <Punk>k__BackingField;
    public IntPtr Punk { get; private set; }
    protected ComInterface(IntPtr punk);
    [CompilerGeneratedAttribute]
public IntPtr get_Punk();
    [CompilerGeneratedAttribute]
private void set_Punk(IntPtr value);
    protected IntPtr GetVTableMember(int index);
    private void Release();
    protected virtual override void Finalize();
}
[ExtensionAttribute]
internal static class Internal.LightweightInterop.MarshalExtensions : object {
    [ExtensionAttribute]
public static string MarshalBstr(IntPtr bstr);
    private static void SysFreeString(IntPtr bstr);
}
[McgIntrinsicsAttribute]
internal static class Internal.LightweightInterop.S : object {
    public static T StdCall(IntPtr pMethod, IntPtr pThis);
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
internal enum Internal.StackGenerator.Dia.BasicType : Enum {
    public int value__;
    public static BasicType btNoType;
    public static BasicType btVoid;
    public static BasicType btChar;
    public static BasicType btWChar;
    public static BasicType btInt;
    public static BasicType btUInt;
    public static BasicType btFloat;
    public static BasicType btBCD;
    public static BasicType btBool;
    public static BasicType btLong;
    public static BasicType btULong;
    public static BasicType btCurrency;
    public static BasicType btDate;
    public static BasicType btVariant;
    public static BasicType btComplex;
    public static BasicType btBit;
    public static BasicType btBSTR;
    public static BasicType btHresult;
    public static BasicType btMAX;
}
internal enum Internal.StackGenerator.Dia.DataKind : Enum {
    public int value__;
    public static DataKind DataIsUnknown;
    public static DataKind DataIsLocal;
    public static DataKind DataIsStaticLocal;
    public static DataKind DataIsParam;
    public static DataKind DataIsObjectPtr;
    public static DataKind DataIsFileStatic;
    public static DataKind DataIsGlobal;
    public static DataKind DataIsMember;
    public static DataKind DataIsStaticMember;
    public static DataKind DataIsConstant;
}
internal static class Internal.StackGenerator.Dia.Guids : object {
    public static IEnumerable`1<Guid> DiaSource_CLSIDs;
    public static Guid IID_IDiaDataSource;
    private static Guids();
}
internal class Internal.StackGenerator.Dia.IDiaDataSource : ComInterface {
    public IDiaDataSource(IntPtr punk);
    public int LoadDataFromPdb(string pdbPath);
    public int OpenSession(IDiaSession& session);
}
internal class Internal.StackGenerator.Dia.IDiaEnumLineNumbers : ComInterface {
    public IDiaEnumLineNumbers(IntPtr punk);
    public int Count(Int32& count);
    public int Item(int index, IDiaLineNumber& lineNumber);
}
internal class Internal.StackGenerator.Dia.IDiaEnumSymbols : ComInterface {
    public IDiaEnumSymbols(IntPtr punk);
    public int Count(Int32& count);
    public int Item(int index, IDiaSymbol& symbol);
}
internal class Internal.StackGenerator.Dia.IDiaLineNumber : ComInterface {
    public IDiaLineNumber(IntPtr punk);
    public int SourceFile(IDiaSourceFile& sourceFile);
    public int LineNumber(Int32& lineNumber);
    public int ColumnNumber(Int32& columnNumber);
}
internal class Internal.StackGenerator.Dia.IDiaSession : ComInterface {
    public IDiaSession(IntPtr punk);
    public int FindChildren(IDiaSymbol parent, SymTagEnum symTag, string name, NameSearchOptions compareFlags, IDiaEnumSymbols& enumSymbols);
    public int FindSymbolByRVA(int rva, SymTagEnum symTag, IDiaSymbol& symbol);
    public int FindLinesByRVA(int rva, int length, IDiaEnumLineNumbers& enumLineNumbers);
    public int FindILOffsetsByRVA(int rva, int length, IDiaEnumLineNumbers& enumLineNumbers);
}
internal class Internal.StackGenerator.Dia.IDiaSourceFile : ComInterface {
    public IDiaSourceFile(IntPtr punk);
    public int FileName(String& fileName);
}
internal class Internal.StackGenerator.Dia.IDiaSymbol : ComInterface {
    public IDiaSymbol(IntPtr punk);
    public int GetSymTag(SymTagEnum& symTagEnum);
    public int GetName(String& name);
    public int GetType(IDiaSymbol& symbol);
    public int GetDataKind(DataKind& dataKind);
    public int GetReference(Boolean& isReference);
    public int GetBaseType(BasicType& baseType);
    public int GetLength(Int64& length);
}
internal enum Internal.StackGenerator.Dia.NameSearchOptions : Enum {
    public int value__;
    public static NameSearchOptions nsNone;
    public static NameSearchOptions nsfCaseSensitive;
    public static NameSearchOptions nsfCaseInsensitive;
    public static NameSearchOptions nsfFNameExt;
    public static NameSearchOptions nsfRegularExpression;
    public static NameSearchOptions nsfUndecoratedName;
    public static NameSearchOptions nsCaseSensitive;
    public static NameSearchOptions nsCaseInsensitive;
    public static NameSearchOptions nsFNameExt;
    public static NameSearchOptions nsRegularExpression;
    public static NameSearchOptions nsCaseInRegularExpression;
}
[McgIntrinsicsAttribute]
internal static class Internal.StackGenerator.Dia.S : object {
    public static T StdCall(IntPtr pMethod, IntPtr pThis);
    public static T StdCall(IntPtr pMethod, IntPtr pThis, Char* pc);
    public static T StdCall(IntPtr pMethod, IntPtr pThis, IntPtr& ppOut);
    public static T StdCall(IntPtr pMethod, IntPtr pThis, Int64& ppOut);
    public static T StdCall(IntPtr pMethod, IntPtr pThis, Int32& pOut);
    public static T StdCall(IntPtr pMethod, IntPtr pThis, int i, IntPtr& ppOut);
    public static T StdCall(IntPtr pMethod, IntPtr pThis, int i, int j, IntPtr& ppOut);
    public static T StdCall(IntPtr pMethod, IntPtr pThis, IntPtr parent, int symTag, Char* name, int compareFlags, IntPtr& ppResult);
}
internal enum Internal.StackGenerator.Dia.SymTagEnum : Enum {
    public int value__;
    public static SymTagEnum SymTagNull;
    public static SymTagEnum SymTagExe;
    public static SymTagEnum SymTagCompiland;
    public static SymTagEnum SymTagCompilandDetails;
    public static SymTagEnum SymTagCompilandEnv;
    public static SymTagEnum SymTagFunction;
    public static SymTagEnum SymTagBlock;
    public static SymTagEnum SymTagData;
    public static SymTagEnum SymTagAnnotation;
    public static SymTagEnum SymTagLabel;
    public static SymTagEnum SymTagPublicSymbol;
    public static SymTagEnum SymTagUDT;
    public static SymTagEnum SymTagEnum;
    public static SymTagEnum SymTagFunctionType;
    public static SymTagEnum SymTagPointerType;
    public static SymTagEnum SymTagArrayType;
    public static SymTagEnum SymTagBaseType;
    public static SymTagEnum SymTagTypedef;
    public static SymTagEnum SymTagBaseClass;
    public static SymTagEnum SymTagFriend;
    public static SymTagEnum SymTagFunctionArgType;
    public static SymTagEnum SymTagFuncDebugStart;
    public static SymTagEnum SymTagFuncDebugEnd;
    public static SymTagEnum SymTagUsingNamespace;
    public static SymTagEnum SymTagVTableShape;
    public static SymTagEnum SymTagVTable;
    public static SymTagEnum SymTagCustom;
    public static SymTagEnum SymTagThunk;
    public static SymTagEnum SymTagCustomType;
    public static SymTagEnum SymTagManagedType;
    public static SymTagEnum SymTagDimension;
    public static SymTagEnum SymTagCallSite;
    public static SymTagEnum SymTagInlineSite;
    public static SymTagEnum SymTagBaseInterface;
    public static SymTagEnum SymTagVectorType;
    public static SymTagEnum SymTagMatrixType;
    public static SymTagEnum SymTagHLSLType;
    public static SymTagEnum SymTagMax;
}
[ExtensionAttribute]
[__BlockReflectionAttribute]
public static class Internal.StackTraceGenerator.StackTraceGenerator : object {
    private static int S_OK;
    private static int CLSCTX_INPROC;
    [ThreadStaticAttribute]
private static Dictionary`2<IntPtr, IDiaSession> s_loadedModules;
    private static bool IsDiaStackTraceResolutionDisabled();
    public static string CreateStackTraceString(IntPtr ip, bool includeFileInfo);
    public static void TryGetSourceLineInfo(IntPtr ip, String& fileName, Int32& lineNumber, Int32& columnNumber);
    public static void TryGetILOffsetWithinMethod(IntPtr ip, Int32& ilOffset);
    private static IDiaDataSource GetDiaDataSource();
    private static string CreateParameterListString(IDiaSession session, IDiaSymbol symbol);
    private static void TryGetSourceLineInfo(IDiaSession session, int rva, String& fileName, Int32& lineNumber, Int32& columnNumber);
    private static void TryGetILOffsetInfo(IDiaSession session, int rva, Int32& ilOffset);
    private static string CreateSourceInfoString(IDiaSession session, int rva);
    [ExtensionAttribute]
private static string Demanglify(string s);
    [ExtensionAttribute]
private static string ToTypeString(IDiaSymbol parameterType, IDiaSession session);
    [ExtensionAttribute]
private static string ToTypeStringWorker(IDiaSymbol parameterType, IDiaSession session, int recursionLevel, Boolean& isValueTypeOrByRef);
    private static string ConvertBasicTypeToTypeString(BasicType basicType, long length, Boolean& isValueTypeOrByRef);
    [ExtensionAttribute]
private static string RemoveNamespaces(string s);
    private static IDiaSession GetDiaSession(IntPtr ip, Int32& rva);
    private static int CoCreateInstance(Byte* rclsid, IntPtr pUnkOuter, int dwClsContext, Byte* riid, IntPtr& ppv);
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
    internal static Exception ActiveIssue(string issue);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
[AttributeUsageAttribute("68")]
internal class System.Runtime.InteropServices.McgIntrinsicsAttribute : Attribute {
}
