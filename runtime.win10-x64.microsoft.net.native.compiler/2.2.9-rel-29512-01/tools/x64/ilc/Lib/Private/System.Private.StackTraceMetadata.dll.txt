internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
[__BlockReflectionAttribute]
public class Internal.Runtime.CompilerHelpers.LibraryInitializer : object {
    public static void InitializeLibrary();
}
internal enum Internal.Runtime.ReflectionMapBlob : Enum {
    public int value__;
    public static ReflectionMapBlob TypeMap;
    public static ReflectionMapBlob ArrayMap;
    public static ReflectionMapBlob GenericInstanceMap;
    public static ReflectionMapBlob GenericParameterMap;
    public static ReflectionMapBlob BlockReflectionTypeMap;
    public static ReflectionMapBlob InvokeMap;
    public static ReflectionMapBlob VirtualInvokeMap;
    public static ReflectionMapBlob CommonFixupsTable;
    public static ReflectionMapBlob FieldAccessMap;
    public static ReflectionMapBlob CCtorContextMap;
    public static ReflectionMapBlob DiagGenericInstanceMap;
    public static ReflectionMapBlob DiagGenericParameterMap;
    public static ReflectionMapBlob EmbeddedMetadata;
    public static ReflectionMapBlob DefaultConstructorMap;
    public static ReflectionMapBlob UnboxingAndInstantiatingStubMap;
    public static ReflectionMapBlob StructMarshallingStubMap;
    public static ReflectionMapBlob DelegateMarshallingStubMap;
    public static ReflectionMapBlob GenericVirtualMethodTable;
    public static ReflectionMapBlob InterfaceGenericVirtualMethodTable;
    public static ReflectionMapBlob TypeTemplateMap;
    public static ReflectionMapBlob GenericMethodsTemplateMap;
    public static ReflectionMapBlob DynamicInvokeTemplateData;
    public static ReflectionMapBlob BlobIdResourceIndex;
    public static ReflectionMapBlob BlobIdResourceData;
    public static ReflectionMapBlob BlobIdStackTraceEmbeddedMetadata;
    public static ReflectionMapBlob BlobIdStackTraceMethodRvaToTokenMapping;
    public static ReflectionMapBlob NativeLayoutInfo;
    public static ReflectionMapBlob NativeReferences;
    public static ReflectionMapBlob GenericsHashtable;
    public static ReflectionMapBlob NativeStatics;
    public static ReflectionMapBlob StaticsInfoHashtable;
    public static ReflectionMapBlob GenericMethodsHashtable;
    public static ReflectionMapBlob ExactMethodInstantiationsHashtable;
}
internal class Internal.StackTraceMetadata.MethodNameFormatter : object {
    private MetadataReader _metadataReader;
    private StringBuilder _outputBuilder;
    private SigTypeContext _typeContext;
    private MethodNameFormatter(MetadataReader metadataReader, SigTypeContext typeContext);
    public static string FormatMethodName(MetadataReader metadataReader, Handle methodHandle);
    public static string FormatMethodName(MetadataReader metadataReader, TypeDefinitionHandle enclosingTypeHandle, MethodHandle methodHandle);
    private void EmitMethodName(Handle methodHandle);
    private void EmitMethodReferenceName(MemberReferenceHandle memberRefHandle);
    private void EmitMethodInstantiationName(MethodInstantiationHandle methodInstHandle);
    private void EmitMethodDefinitionName(QualifiedMethodHandle qualifiedMethodHandle);
    private void EmitContainingTypeAndMethodName(MemberReference methodRef, MethodSignature& methodSignature);
    private void EmitMethodParameters(MethodSignature methodSignature);
    private void EmitTypeVector(HandleCollection typeVector);
    private void EmitTypeName(Handle typeHandle, bool namespaceQualified);
    private void EmitNamespaceReferenceName(NamespaceReferenceHandle namespaceRefHandle);
    private void EmitNamespaceDefinitionName(NamespaceDefinitionHandle namespaceDefHandle);
    private void EmitTypeReferenceName(TypeReferenceHandle typeRefHandle, bool namespaceQualified);
    private void EmitTypeDefinitionName(TypeDefinitionHandle typeDefHandle, bool namespaceQualified);
    private void EmitTypeSpecificationName(TypeSpecificationHandle typeSpecHandle, bool namespaceQualified);
    private void EmitTypeInstantiationName(TypeInstantiationSignatureHandle typeInstHandle, bool namespaceQualified);
    private void EmitSZArrayTypeName(SZArraySignatureHandle szArraySigHandle, bool namespaceQualified);
    private void EmitArrayTypeName(ArraySignatureHandle arraySigHandle, bool namespaceQualified);
    private void EmitPointerTypeName(PointerSignatureHandle pointerSigHandle);
    private void EmitByRefTypeName(ByReferenceSignatureHandle byRefSigHandle);
    private void EmitGenericArguments(HandleCollection genericArguments);
    private void EmitString(ConstantStringValueHandle stringHandle);
}
internal static class Internal.StackTraceMetadata.StackTraceMetadata : object {
    private static PerModuleMethodNameResolverHashtable _perModuleMethodNameResolverHashtable;
    internal static void Initialize();
    public static string GetMethodNameFromStartAddressIfAvailable(IntPtr methodStartAddress);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
