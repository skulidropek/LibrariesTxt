internal enum ErrorCodes : Enum {
    public int value__;
    public static ErrorCodes Success;
    public static ErrorCodes EmptyFileList;
    public static ErrorCodes IncorrectInputFolder;
    public static ErrorCodes IncorrectOutputFolder;
    public static ErrorCodes InvalidArgument;
    public static ErrorCodes MultipleMcgGeneratedDlls;
    public static ErrorCodes MultipleBaseSharedLibraries;
    public static ErrorCodes IncorrectNumberOfPGDs;
    public static ErrorCodes UnspecifiedTargetPlatform;
    public static ErrorCodes FileListNameInvalid;
    public static ErrorCodes SpecifiedFileOrPathDoesNotExist;
    public static ErrorCodes InvalidTimeoutValue;
    public static ErrorCodes UnknownCompilerError;
    public static ErrorCodes BuildFailed;
    public static ErrorCodes InputFileReadError;
    public static ErrorCodes InputPackageFolderStructureTooComplex;
    public static ErrorCodes SecurityException;
    public static ErrorCodes UnauthorizedAccessException;
    public static ErrorCodes PathTooLongException;
    public static ErrorCodes MultipleExecutablesPresent;
    public static ErrorCodes ZeroExecutablesPresent;
    public static ErrorCodes ConflictingAssemblyReferences;
    public static ErrorCodes ConflictingAssemblyVersions;
    public static ErrorCodes IncompatibleWithSharedAssembly;
    public static ErrorCodes ConsumedManagedBinariesFromASubDirectory;
    public static ErrorCodes FailedCreatingJobObject;
    public static ErrorCodes CompilationFailedBadInputIL;
    public static ErrorCodes BadManifestFile;
    public static ErrorCodes CompilerTimeout;
    public static ErrorCodes InsufficientMemory;
    public static ErrorCodes InsufficientDiskSpace;
    public static ErrorCodes SharingViolation;
    public static ErrorCodes BadTempPath;
    public static ErrorCodes CorEExecutionEngine;
    public static ErrorCodes CorESecurity;
    public static ErrorCodes CldbEInternalError;
    public static ErrorCodes AccessViolation;
    public static ErrorCodes CompilerInternalFailure;
    public static ErrorCodes NativeAssembly;
}
public class ilc.AllowedInAppxManifest : Attribute {
}
internal static class ilc.AppxManifestParsing : object {
    private static IDictionary`2<string, ArgType> s_allowedArgTypes;
    private static IDictionary`2<string, ArgType> AllowedArgTypes { get; }
    private static XmlDocument LoadXmlDocument(string documentPath);
    internal static List`1<string> GetPackageDependenciesFromManifest(string appxManifestFilePath);
    internal static string GetProjectGUIDFromManifest(string appxManifestFilePath);
    internal static string GetAppNameFromManifest(string appxManifestFilePath);
    internal static string GetExecutableNameForHybridApplication(string inPath);
    internal static List`1<Argument> GetIlcOptionsFromInPath(string inPath);
    private static IDictionary`2<string, ArgType> get_AllowedArgTypes();
    internal static List`1<Argument> GetIlcOptionsFromManifest(string appxManifestFilePath);
}
internal enum ilc.ArgType : Enum {
    public int value__;
    [HasValue]
public static ArgType In;
    [HasValue]
public static ArgType Log;
    [HasValue]
public static ArgType Out;
    [HasValue]
public static ArgType IntermediatesPath;
    public static ArgType KeepIntermediates;
    [HasValue]
public static ArgType MakePriPath;
    [HasValue]
public static ArgType AppPriProjectRoot;
    [HasValue]
public static ArgType RCPath;
    [HasValue]
public static ArgType CscPath;
    [HasValue]
public static ArgType TargetPlatformSdkLibPath;
    [HasValue]
public static ArgType TargetPlatformSdkMetadataPath;
    [HasValue]
public static ArgType FrameworkPath;
    [HasValue]
public static ArgType SharedAssemblyPath;
    [HasValue]
public static ArgType InSharedAssemblyPath;
    [HasValue]
public static ArgType OutSharedAssemblyPath;
    [HasValue]
public static ArgType SharedAssemblyRdXmlPath;
    [HasValue]
public static ArgType InSharedLibraryNames;
    [HasValue]
public static ArgType OutSharedLibraryName;
    [HasValue]
public static ArgType BaselineSharedAssemblyPath;
    [HasValue]
public static ArgType XamlRootsLog;
    public static ArgType DumpIlcLogs;
    [HasValue]
public static ArgType Verbosity;
    [HasValue]
public static ArgType V;
    [HasValue]
public static ArgType Logger;
    [HasValue]
public static ArgType BuildType;
    [HasValue]
public static ArgType TargetPlatform;
    public static ArgType ToolChainPerfRun;
    public static ArgType GcStress;
    [HasValue]
public static ArgType ExeName;
    public static ArgType StampLogoImages;
    public static ArgType NoNativeCodeGen;
    public static ArgType DeveloperExperience;
    [HasValue]
public static ArgType ExternalReferencePath;
    [HasValue]
public static ArgType VSTelemetrySessionSettings;
    public static ArgType DisableVSTel;
    [HasValue]
public static ArgType RDXmlPath;
    public static ArgType EnableUnsupportedTestBehaviors;
    [HasValue]
public static ArgType AppLocalCrtPath;
    public static ArgType NoMdilCodeGen;
    public static ArgType TocGeneration;
    public static ArgType McgMultiFile;
    public static ArgType BuildSharedAssemblies;
    public static ArgType UseSharedAssemblies;
    public static ArgType BuildAndUseSharedAssemblies;
    public static ArgType SeparateSharedAssemblies;
    public static ArgType SeparateAppAssemblies;
    public static ArgType Merge;
    public static ArgType Runtime;
    public static ArgType Pgi;
    public static ArgType Pgu;
    [HasValue]
public static ArgType Pgd;
    [HasValue]
public static ArgType DegreeOfParallelization;
    [HasValue]
[AllowedInAppxManifest]
public static ArgType SharedGenericsMode;
    [HasValue]
public static ArgType DynamicInteropMode;
    [HasValue]
public static ArgType ExtraNutcArguments;
    [HasValue]
public static ArgType ExtraRhBindArguments;
    public static ArgType SuppressPDBWarnings;
    public static ArgType SuppressWarnings;
    public static ArgType ShowBuildSummary;
    public static ArgType ShowPerfInfo;
    [HasValue]
public static ArgType PdbPath;
    public static ArgType SuppressAppLocalCrt;
    public static ArgType AllowNoManagedCode;
    [HasValue]
[AllowedInAppxManifest]
public static ArgType AppContextSwitches;
    [AllowedInAppxManifest]
[HasValue]
public static ArgType RemovableFeatures;
    public static ArgType PackRepro;
    public static ArgType SkipILCompilation;
    [HasValue]
public static ArgType InternalFeatureSwitches;
    public static ArgType IFS;
    public static ArgType UseDefaultPInvoke;
    public static ArgType UseInteropAnalysisResultsFile;
    public static ArgType CompleteWinRTInterop;
    [HasValue]
public static ArgType FrameworkDependency;
    public static ArgType EnableGatekeeperAnalysis;
    public static ArgType DisableGatekeeper;
    public static ArgType PureNative;
    public static ArgType Win32;
    public static ArgType Jit;
    [AllowedInAppxManifest]
public static ArgType ShortcutGenericAnalysis;
    [HasValue]
public static ArgType LinkPath;
    [HasValue]
public static ArgType NativeLibPath;
    public static ArgType Incremental;
    public static ArgType ForceNoShimExe;
    [AllowedInAppxManifest]
public static ArgType DisableStackTraceMetadata;
    [AllowedInAppxManifest]
public static ArgType DisableExceptionMessages;
    [AllowedInAppxManifest]
public static ArgType Use64BitCompiler;
    [HasValue]
public static ArgType WindowsSdkApiXml;
    public static ArgType SkipPgoDataMerge;
    public static ArgType BuildWinRTComponent;
    public static ArgType OutputWinRTComponentName;
    [AllowedInAppxManifest]
public static ArgType UniversalGenericsOptOut;
    [AllowedInAppxManifest]
public static ArgType DisableMetadataStackTraceResolution;
    [AllowedInAppxManifest]
public static ArgType SingleThreadNUTC;
    [AllowedInAppxManifest]
public static ArgType DisableReflectionInvokeThunks;
    public static ArgType Force32BitCompiler;
    [AllowedInAppxManifest]
public static ArgType OptimizeForSize;
    [AllowedInAppxManifest]
public static ArgType AlignMethodsAtMinimalBoundaries;
    [AllowedInAppxManifest]
public static ArgType LargeAddressAware;
    [AllowedInAppxManifest]
public static ArgType NoLinkerSymbols;
    [AllowedInAppxManifest]
public static ArgType OutOfProcPDB;
    [AllowedInAppxManifest]
public static ArgType LargePdbPages;
    [AllowedInAppxManifest]
public static ArgType Use64BitRhbind;
    [AllowedInAppxManifest]
public static ArgType Use64BitIlc;
}
internal static class ilc.ArgumentExtensions : object {
    private static HashSet`1<ArgType> s_argTypesAllowedInManifest;
    private static ArgumentExtensions();
    public static bool IsAllowedInAppxManifest(ArgType argType);
}
public class ilc.ComputeManagedBinaries : Task {
    [CompilerGeneratedAttribute]
private ITaskItem <AppxManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManagedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OutputDotNetNativeFiles>k__BackingField;
    [RequiredAttribute]
public ITaskItem AppxManifest { get; public set; }
    [RequiredAttribute]
public ITaskItem OutputPath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] InputFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] ManagedFiles { get; public set; }
    [OutputAttribute]
public String[] OutputDotNetNativeFiles { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem get_AppxManifest();
    [CompilerGeneratedAttribute]
public void set_AppxManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputFiles();
    [CompilerGeneratedAttribute]
public void set_InputFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManagedFiles();
    [CompilerGeneratedAttribute]
public void set_ManagedFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_OutputDotNetNativeFiles();
    [CompilerGeneratedAttribute]
public void set_OutputDotNetNativeFiles(String[] value);
    public sealed virtual bool Execute();
}
public class ilc.HasValue : Attribute {
}
internal class ilc.IlcCommonOptions : object {
    public static int USE_LARGE_PDB_SIZE;
    public static int USE_DEFAULT_PDB_SIZE;
    public static string CoreSharedLibraryName;
    public static string FixedCoreAssemblyName;
    public static string DependentLibraryListFileName;
    public bool BuildSharedAssemblies;
    public string OutSharedLibraryName;
    public bool UseSharedAssemblies;
    public bool InjectSharedAssemblyIntoAppPackage;
    public List`1<InputSharedLibrarySpecification> InputSharedLibrarySpecifications;
    public bool BuildAndUseSharedAssemblies;
    public string ManagedRuntimeName;
    public string OutPath;
    public bool EnableUnsupportedTestBehaviors;
    public bool KeepIntermediates;
    public string CustomIntermediatesPath;
    public LoggerVerbosity Verbosity;
    public string TargetPlatformSdkLibPath;
    public string TargetPlatformSdkMetadataPath;
    public string FrameworkPath;
    public string SharedAssemblyPath;
    public string OutSharedAssemblyPath;
    public string InSharedAssemblyPath;
    public string BaselineSharedAssemblyPath;
    public bool DumpIlcLogs;
    public string BuildType;
    public string TargetPlatform;
    public ILogger CustomLogger;
    public bool GcStress;
    public bool NoNativeCodeGen;
    public Nullable`1<bool> DeveloperExperience;
    public int DegreeOfParallelization;
    public bool McgMultiFile;
    public bool Pgi;
    public bool Pgu;
    public string PgdPath;
    public string ExtraNutcArguments;
    public string ExtraRhBindArguments;
    public List`1<string> SuppressWarnings;
    public bool SuppressPDBWarnings;
    public string SharedGenericsMode;
    public string DynamicInteropMode;
    public bool ShowBuildSummary;
    public bool ShowPerfInfo;
    public bool NoTocGeneration;
    public bool NoMdilCodeGen;
    public HashSet`1<string> AppContextSwitches;
    public HashSet`1<string> RemovableFeatures;
    public bool PackRepro;
    public string PackReproDirectoryPath;
    public bool SeparateSharedAssemblies;
    public bool SeparateAppAssemblies;
    public List`1<string> MergeSpecifications;
    public string SharedAssemblyRdXmlPath;
    public bool UseDefaultPInvoke;
    public InternalFeatureSwitches InternalFeatureSwitches;
    public bool UseInteropAnalysisResultsFile;
    public bool CompleteWinRTInterop;
    public bool EnableGatekeeperAnalysis;
    public bool DisableGatekeeper;
    public string CscPath;
    public bool TargetWin32;
    public bool TargetWin32Jit;
    public bool ShortcutGenericAnalysis;
    public bool PureNative;
    public string LinkPath;
    public string NativeLibPath;
    public bool IncrementalBuild;
    public bool ForceNoShimExe;
    public bool DisableStackTraceMetadata;
    public bool DisableExceptionMessages;
    public string WindowsSdkApiXml;
    public bool Use64BitCompiler;
    public bool Force32BitCompiler;
    public bool SkipPgoDataMerge;
    public bool SingleThreadNUTC;
    public bool OptimizeForSize;
    public bool DisableReflectionInvokeThunks;
    public bool AlignMethodsAtMinimalBoundaries;
    public bool LargeAddressAware;
    public bool UseLinkerSymbols;
    public bool OutOfProcPDB;
    public int LargePdbPages;
    public bool Use64BitRhbind;
    public bool Use64BitIlc;
    public List`1<Argument> Arguments;
}
internal class ilc.IlcException : Exception {
    [CompilerGeneratedAttribute]
private ErrorCodes <ErrorCode>k__BackingField;
    public ErrorCodes ErrorCode { get; private set; }
    public string ErrorCodeString { get; }
    public IlcException(ErrorCodes errorCode, string message, Object[] formatParameters);
    [CompilerGeneratedAttribute]
public ErrorCodes get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(ErrorCodes value);
    public string get_ErrorCodeString();
}
public class ilc.InjectFrameworkDependenciesTask : TransformAppxManifestInternalTask {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ilc.Resources : object {
    internal static string Error_NoAppxManifest { get; }
    internal static string Error_MultipleAppxIdentities { get; }
    internal static string Error_AppxIdentityMissingName { get; }
    internal static string Error_VCLibsVersion { get; }
    internal static string Error_MultipleVCLibDependencies { get; }
    internal static string Error_MultiplePGDFiles { get; }
    internal static CultureInfo Culture { get; }
    internal static string get_Error_NoAppxManifest();
    internal static string get_Error_MultipleAppxIdentities();
    internal static string get_Error_AppxIdentityMissingName();
    internal static string get_Error_VCLibsVersion();
    internal static string get_Error_MultipleVCLibDependencies();
    internal static string get_Error_MultiplePGDFiles();
    internal static CultureInfo get_Culture();
}
public class ilc.TransformAppxManifestInternalTask : InternalTask {
    [CompilerGeneratedAttribute]
private string <InputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultiFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsingDebugAppLocalRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowAppLocalCrt>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixupFrameworkDependenciesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyCrtIntoApp>k__BackingField;
    protected XmlReaderSettings m_settings;
    protected XmlNamespaceManager m_namespaceManager;
    protected XmlDocument m_manifest;
    protected XmlNode m_root;
    protected string m_defaultNamespace;
    protected XmlNode m_insertAfterNode;
    public string InputFile { get; public set; }
    public string OutputFile { get; public set; }
    public string ManifestArchitecture { get; public set; }
    public string MultiFile { get; public set; }
    public string AssemblyName { get; public set; }
    public string UsingDebugAppLocalRuntime { get; public set; }
    public string AllowAppLocalCrt { get; public set; }
    public ITaskItem[] FrameworkDependencies { get; public set; }
    public bool FixupFrameworkDependenciesOnly { get; public set; }
    public bool CopyCrtIntoApp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InputFile();
    [CompilerGeneratedAttribute]
public void set_InputFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_ManifestArchitecture();
    [CompilerGeneratedAttribute]
public void set_ManifestArchitecture(string value);
    [CompilerGeneratedAttribute]
public string get_MultiFile();
    [CompilerGeneratedAttribute]
public void set_MultiFile(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_UsingDebugAppLocalRuntime();
    [CompilerGeneratedAttribute]
public void set_UsingDebugAppLocalRuntime(string value);
    [CompilerGeneratedAttribute]
public string get_AllowAppLocalCrt();
    [CompilerGeneratedAttribute]
public void set_AllowAppLocalCrt(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkDependencies();
    [CompilerGeneratedAttribute]
public void set_FrameworkDependencies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_FixupFrameworkDependenciesOnly();
    [CompilerGeneratedAttribute]
public void set_FixupFrameworkDependenciesOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyCrtIntoApp();
    [CompilerGeneratedAttribute]
public void set_CopyCrtIntoApp(bool value);
    protected sealed virtual void InternalExecute(ILTransformLogger logger);
    private void ApplyFixups();
    protected void FixupInprocServerEntries();
    protected void FixupManifestArchitecture();
    protected void FixupFrameworkDependencies();
    protected void AddPackage(string name, string version, string publisher);
}
public class Microsoft.Build.ILTasks.IlcErrorTask : Task {
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Parameters>k__BackingField;
    [RequiredAttribute]
public string ResourceName { get; public set; }
    public ITaskItem[] Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ITaskItem[] value);
    public sealed virtual bool Execute();
}
public class Microsoft.Build.ILTasks.IlcMessageTask : Task {
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Importance>k__BackingField;
    [RequiredAttribute]
public string ResourceName { get; public set; }
    public ITaskItem[] Parameters { get; public set; }
    public string Importance { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Importance();
    [CompilerGeneratedAttribute]
public void set_Importance(string value);
    public sealed virtual bool Execute();
}
public interface Microsoft.Build.ILTasks.ILTransformLogger {
    public bool HasLoggedErrors { get; }
    public abstract virtual bool get_HasLoggedErrors();
}
public class Microsoft.Build.ILTasks.InternalFeatureSwitches : object {
    private HashSet`1<string> _enabledFeatureSwitches;
    public bool ExpandedILTocEnabled { get; }
    public bool IncrementalEnabled { get; }
    public bool CleanEnabled { get; }
    public bool R2REnabled { get; }
    public bool R2RLauncherEnabled { get; }
    public bool SimpleReleaseEnabled { get; }
    public bool NotJustMyCodeStepping { get; }
    public bool ForwardRelocatedTypes { get; }
    public bool NetNativeDebugging { get; }
    public bool UseLoadLibraryForPInvoke { get; }
    public bool IncrementalInteropPatchingEnabled { get; }
    public bool LogVSTelemetryEnabled { get; }
    public bool DisableOnlineVSTelemetry { get; }
    public bool ConfidenceAnalysis { get; }
    public bool CoreRTAnalysis { get; }
    public bool STSAnalysis { get; }
    public bool CheckBinaryDeterminism { get; }
    public IEnumerable`1<string> FeatureSwitches { get; }
    public InternalFeatureSwitches(IEnumerable`1<string> enabledFeatureSwitches);
    public bool get_ExpandedILTocEnabled();
    public bool get_IncrementalEnabled();
    public bool get_CleanEnabled();
    public bool get_R2REnabled();
    public bool get_R2RLauncherEnabled();
    public bool get_SimpleReleaseEnabled();
    public bool get_NotJustMyCodeStepping();
    public bool get_ForwardRelocatedTypes();
    public bool get_NetNativeDebugging();
    public bool get_UseLoadLibraryForPInvoke();
    public bool get_IncrementalInteropPatchingEnabled();
    public bool get_LogVSTelemetryEnabled();
    public bool get_DisableOnlineVSTelemetry();
    public bool get_ConfidenceAnalysis();
    public bool get_CoreRTAnalysis();
    public bool get_STSAnalysis();
    public bool get_CheckBinaryDeterminism();
    public bool IsEnabled(string featureSwitchName);
    public IEnumerable`1<string> get_FeatureSwitches();
}
public abstract class Microsoft.Build.ILTasks.InternalTask : Task {
    public virtual bool Execute();
    protected abstract virtual void InternalExecute(ILTransformLogger logger);
}
public class Microsoft.Build.ILTasks.JSONEscapeStringTask : Task {
    [CompilerGeneratedAttribute]
private string <EscapedString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputString>k__BackingField;
    [OutputAttribute]
public string EscapedString { get; public set; }
    [RequiredAttribute]
public string InputString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EscapedString();
    [CompilerGeneratedAttribute]
public void set_EscapedString(string value);
    [CompilerGeneratedAttribute]
public string get_InputString();
    [CompilerGeneratedAttribute]
public void set_InputString(string value);
    public virtual bool Execute();
}
public class Microsoft.Build.ILTasks.LoggerBasedExecTask : ToolTask {
    private LogListener _logListener;
    [CompilerGeneratedAttribute]
private string <MessageLog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Application>k__BackingField;
    [RequiredAttribute]
public string MessageLog { get; public set; }
    [RequiredAttribute]
public string Parameters { get; public set; }
    [RequiredAttribute]
public string Application { get; public set; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public string get_MessageLog();
    [CompilerGeneratedAttribute]
public void set_MessageLog(string value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
    [CompilerGeneratedAttribute]
public string get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(string value);
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
}
public class Microsoft.Build.ILTasks.ParseILMergeInfoTask : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <SharedAssemblyComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAssemblyILMergeInfoFilePath>k__BackingField;
    [OutputAttribute]
public ITaskItem[] SharedAssemblyComponents { get; public set; }
    [RequiredAttribute]
public string SharedAssemblyILMergeInfoFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SharedAssemblyComponents();
    [CompilerGeneratedAttribute]
public void set_SharedAssemblyComponents(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_SharedAssemblyILMergeInfoFilePath();
    [CompilerGeneratedAttribute]
public void set_SharedAssemblyILMergeInfoFilePath(string value);
    public sealed virtual bool Execute();
}
public class Microsoft.Build.ILTasks.ReducerEngine.MetadataDirectiveReaderSchema : object {
    private static XmlSchema m_directivesSchema;
    public static XmlSchema DirectivesSchema { get; }
    public static string TargetNamespace { get; }
    private static MetadataDirectiveReaderSchema();
    private static XmlSchema LoadDirectiveSchema();
    public static XmlSchema get_DirectivesSchema();
    public static string get_TargetNamespace();
}
public static class Microsoft.Build.ILTasks.ReducerEngine.RdXmlValidator : object {
    public static bool ValidateFiles(String[] files, Action`4<string, int, int, string> errorLogger, Action`4<string, int, int, string> warningLogger);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Build.ILTasks.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_AnyCPU { get; }
    internal static string Error_AppxIdentityMissingName { get; }
    internal static string Error_IlcBehavioralDifferences { get; }
    internal static string Error_InternalCompilerError { get; }
    internal static string Error_InvalidFileFormat { get; }
    internal static string Error_InvalidPathShort { get; }
    internal static string Error_MissingFile { get; }
    internal static string Error_MultipleAppxIdentities { get; }
    internal static string Error_MultiplePGDFiles { get; }
    internal static string Error_MultipleVCLibDependencies { get; }
    internal static string Error_NoAppxManifest { get; }
    internal static string Error_VCLibsVersion { get; }
    internal static string Message_IlcResponseFileContents { get; }
    internal static string Message_SharedAssemblyNotApplicable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_AnyCPU();
    internal static string get_Error_AppxIdentityMissingName();
    internal static string get_Error_IlcBehavioralDifferences();
    internal static string get_Error_InternalCompilerError();
    internal static string get_Error_InvalidFileFormat();
    internal static string get_Error_InvalidPathShort();
    internal static string get_Error_MissingFile();
    internal static string get_Error_MultipleAppxIdentities();
    internal static string get_Error_MultiplePGDFiles();
    internal static string get_Error_MultipleVCLibDependencies();
    internal static string get_Error_NoAppxManifest();
    internal static string get_Error_VCLibsVersion();
    internal static string get_Message_IlcResponseFileContents();
    internal static string get_Message_SharedAssemblyNotApplicable();
}
public class Microsoft.Build.ILTasks.SharedAssemblyApplicabilityVerifierTask : Task {
    [CompilerGeneratedAttribute]
private bool <IsSharedAssemblyValid>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SharedAssemblyContracts>k__BackingField;
    [OutputAttribute]
public bool IsSharedAssemblyValid { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProjectDependencies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SharedAssemblyContracts { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSharedAssemblyValid();
    [CompilerGeneratedAttribute]
public void set_IsSharedAssemblyValid(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectDependencies();
    [CompilerGeneratedAttribute]
public void set_ProjectDependencies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SharedAssemblyContracts();
    [CompilerGeneratedAttribute]
public void set_SharedAssemblyContracts(ITaskItem[] value);
    public sealed virtual bool Execute();
}
public class Microsoft.Build.ILTasks.ValidateRdXmlTask : Task {
    private String[] files;
    [RequiredAttribute]
public String[] Files { get; public set; }
    public String[] get_Files();
    public void set_Files(String[] value);
    public virtual bool Execute();
    [CompilerGeneratedAttribute]
private void <Execute>b__4_0(string file, int lineNumber, int linePosition, string message);
    [CompilerGeneratedAttribute]
private void <Execute>b__4_1(string file, int lineNumber, int linePosition, string message);
}
internal class RuntimeRequiredFrameworkPackage : object {
    public static string Name;
    public static string Version;
}
