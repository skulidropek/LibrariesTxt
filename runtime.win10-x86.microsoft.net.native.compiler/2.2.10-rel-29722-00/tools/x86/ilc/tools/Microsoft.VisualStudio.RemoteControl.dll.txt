public enum Microsoft.VisualStudio.RemoteControl.BehaviorOnStale : Enum {
    public int value__;
    public static BehaviorOnStale ReturnStale;
    public static BehaviorOnStale ReturnNull;
    public static BehaviorOnStale ForceDownload;
}
internal class Microsoft.VisualStudio.RemoteControl.FileReader : object {
    private string filePath;
    private string fileDirectory;
    private static int MaxCharFilePath;
    public FileReader(string filePath);
    public sealed virtual Stream ReadFile();
}
internal class Microsoft.VisualStudio.RemoteControl.GetFileResult : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <RespStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AgeSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    internal HttpStatusCode Code { get; internal set; }
    internal Stream RespStream { get; internal set; }
    internal bool IsFromCache { get; internal set; }
    internal Nullable`1<int> AgeSeconds { get; internal set; }
    internal string ErrorMessage { get; internal set; }
    internal bool IsSuccessStatusCode { get; }
    [CompilerGeneratedAttribute]
internal HttpStatusCode get_Code();
    [CompilerGeneratedAttribute]
internal void set_Code(HttpStatusCode value);
    [CompilerGeneratedAttribute]
internal Stream get_RespStream();
    [CompilerGeneratedAttribute]
internal void set_RespStream(Stream value);
    [CompilerGeneratedAttribute]
internal bool get_IsFromCache();
    [CompilerGeneratedAttribute]
internal void set_IsFromCache(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_AgeSeconds();
    [CompilerGeneratedAttribute]
internal void set_AgeSeconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal string get_ErrorMessage();
    [CompilerGeneratedAttribute]
internal void set_ErrorMessage(string value);
    internal bool get_IsSuccessStatusCode();
    public sealed virtual void Dispose();
}
internal interface Microsoft.VisualStudio.RemoteControl.IFileReader {
    public abstract virtual Stream ReadFile();
}
public interface Microsoft.VisualStudio.RemoteControl.IRemoteControlClient {
    public string FullUrl { get; }
    public int PollingIntervalMins { get; }
    public abstract virtual string get_FullUrl();
    public abstract virtual int get_PollingIntervalMins();
    public abstract virtual Stream ReadFile(BehaviorOnStale staleBehavior);
    public abstract virtual Task`1<Stream> ReadFileAsync(BehaviorOnStale staleBehavior);
}
internal interface Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor {
    public abstract virtual Task`1<GetFileResult> GetFileFromServerAsync();
    public abstract virtual Task`1<GetFileResult> GetFileFromCacheAsync();
    public abstract virtual Task`1<int> LastServerRequestErrorSecondsAgoAsync();
    public abstract virtual void Cancel();
}
public class Microsoft.VisualStudio.RemoteControl.RemoteControlClient : object {
    private static Action`2<string, IDictionary`2<string, object>> telemetryLogger;
    private static Action`3<string, IDictionary`2<string, object>, IDictionary`2<string, object>> telemetryLogger2;
    private static int DefaultHTTPRequestTimeoutSeconds;
    private static int DefaultPollingIntervalMins;
    private static int DefaultReadFileTelemetry;
    private static int MinPollingIntervalMins;
    private static int MaxHTTPRequestTimeoutSeconds;
    private static int RemoteControlExplicitlyDisabled;
    private int maxRandomDownloadDelaySeconds;
    private int httpRequestTimeoutSeconds;
    private Timer cacheUpdateTimer;
    private Random rand;
    private IRemoteControlHTTPRequestor requestor;
    private SemaphoreSlim updateMutex;
    private CancellationTokenSource cancellationToken;
    private IFileReader fileReader;
    private bool isDisabled;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private int <PollingIntervalMins>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteControlUri <Uri>k__BackingField;
    public static Action`2<string, IDictionary`2<string, object>> TelemetryLogger { get; public set; }
    public static Action`3<string, IDictionary`2<string, object>, IDictionary`2<string, object>> TelemetryLogger2 { get; public set; }
    public string FullUrl { get; }
    public int PollingIntervalMins { get; }
    internal RemoteControlUri Uri { get; }
    public RemoteControlClient(string hostId, string baseUrl, string relativePath, int pollingIntervalMins, int theHttpRequestTimeoutSeconds, int overrideReadFileTelemetryFrequency);
    internal RemoteControlClient(IRemoteControlHTTPRequestor requestor, IRegistryTools theRegistryTools, string hostId, string baseUrl, string relativePath, int pollingIntervalMins, int httpRequestTimeoutSeconds, int maxRandomDownloadDelaySeconds);
    internal RemoteControlClient(IRegistryTools theRegistryTools, IFileReader theFileReader, string hostId, string baseUrl, string relativePath);
    private RemoteControlClient(IRegistryTools registryTools, string hostId, string baseUrl, string relativePath, int pollingIntervalMins);
    private static RemoteControlClient();
    public static Action`2<string, IDictionary`2<string, object>> get_TelemetryLogger();
    public static void set_TelemetryLogger(Action`2<string, IDictionary`2<string, object>> value);
    public static Action`3<string, IDictionary`2<string, object>, IDictionary`2<string, object>> get_TelemetryLogger2();
    public static void set_TelemetryLogger2(Action`3<string, IDictionary`2<string, object>, IDictionary`2<string, object>> value);
    public sealed virtual string get_FullUrl();
    [CompilerGeneratedAttribute]
public sealed virtual int get_PollingIntervalMins();
    [CompilerGeneratedAttribute]
internal RemoteControlUri get_Uri();
    public sealed virtual Stream ReadFile(BehaviorOnStale staleBehavior);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlClient/<ReadFileAsync>d__37")]
public sealed virtual Task`1<Stream> ReadFileAsync(BehaviorOnStale staleBehavior);
    public sealed virtual void Dispose();
    internal bool RunUpdateFileMethod();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlClient/<ReadFileFromLocalAsync>d__40")]
private Task`1<GetFileResult> ReadFileFromLocalAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlClient/<CacheUpdateTimerCallback>d__41")]
private Task CacheUpdateTimerCallback(object stateInfo, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlClient/<EnsureFileIsUpToDateAsync>d__42")]
private Task`1<bool> EnsureFileIsUpToDateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlClient/<GetFileAndInstrumentAsync>d__43")]
private Task`1<GetFileResult> GetFileAndInstrumentAsync(bool fromServer);
    private void InstrumentGetFile(GetFileResult fileResult);
    private bool IsStale(GetFileResult fileResult);
    [CompilerGeneratedAttribute]
private void <.ctor>b__18_0(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_0(object o);
    [CompilerGeneratedAttribute]
private GetFileResult <ReadFileFromLocalAsync>b__40_0();
}
internal class Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor : object {
    private static string ErrorMarkerFileExtension;
    private static string AgeHeaderName;
    private static string CancelledMessage;
    private static string WebExceptionMessage;
    private static int MinRetryIntervalSeconds;
    private static int MaxRetryIntervalSeconds;
    private static int ConvertMilliToSeconds;
    private static string TempFileDir;
    private static Semaphore TempFileCleanupSem;
    private static HttpRequestCachePolicy CacheOnlyPolicy;
    private static HttpRequestCachePolicy ServerRevalidatePolicy;
    private string url;
    private string errorMarkerFileUrl;
    private int httpRequestTimeoutMillis;
    private CancellationTokenSource cancellationTokenSource;
    internal RemoteControlHTTPRequestor(string url, int httpRequestTimeoutMillis);
    private static RemoteControlHTTPRequestor();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor/<Microsoft-VisualStudio-RemoteControl-IRemoteControlHTTPRequestor-GetFileFromServerAsync>d__17")]
private sealed virtual override Task`1<GetFileResult> Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.GetFileFromServerAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor/<Microsoft-VisualStudio-RemoteControl-IRemoteControlHTTPRequestor-GetFileFromCacheAsync>d__18")]
private sealed virtual override Task`1<GetFileResult> Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.GetFileFromCacheAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor/<Microsoft-VisualStudio-RemoteControl-IRemoteControlHTTPRequestor-LastServerRequestErrorSecondsAgoAsync>d__19")]
private sealed virtual override Task`1<int> Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.LastServerRequestErrorSecondsAgoAsync();
    private sealed virtual override void Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.Cancel();
    private static Nullable`1<int> ExtractAgeHeaderValue(HttpWebResponse resp);
    private static void StartTempFileCleanup();
    [HandleProcessCorruptedStateExceptionsAttribute]
[SecurityCriticalAttribute]
private static HttpWebRequest CreateHttpRequest(string requestUrl);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor/<GetFile>d__24")]
private Task`1<GetFileResult> GetFile(string requestUrl, int requestTimeoutMillis, HttpRequestCachePolicy cachePolicy);
    private FileStream CopyToFileStream(Stream s);
}
internal class Microsoft.VisualStudio.RemoteControl.RemoteControlUri : object {
    private Uri uri;
    [CompilerGeneratedAttribute]
private bool <IsLocalFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostId>k__BackingField;
    public bool IsLocalFile { get; }
    public string FullUrl { get; }
    public string HostId { get; }
    private RemoteControlUri(Uri uri, string hostId);
    [CompilerGeneratedAttribute]
public bool get_IsLocalFile();
    [CompilerGeneratedAttribute]
public string get_FullUrl();
    [CompilerGeneratedAttribute]
public string get_HostId();
    public static RemoteControlUri Create(IRegistryTools registryTools, string hostId, string baseUrl, string relativePath);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.RemoteControl.UriEx : object {
    [ExtensionAttribute]
public static Tuple`2<Uri, string> SplitLastSegment(Uri uri);
    [ExtensionAttribute]
public static Uri AddSegment(Uri uri, string segment);
}
internal static class Microsoft.VisualStudio.RemoteControl.WinINetHelper : object {
    private static string CacheWriteTimestampHeaderName;
    private static int MAX_PATH;
    private static UInt32 NORMAL_CACHE_ENTRY;
    internal static bool WriteErrorResponseToCache(string url, HttpStatusCode status);
    private static bool CreateUrlCacheEntry(string lpszUrlName, UInt32 dwExpectedFileSize, string lpszFileExtension, StringBuilder lpszFileName, UInt32 dwReserved);
    private static bool CommitUrlCacheEntry(string url, string fileName, FILETIME ftExpiryTime, FILETIME ftModifiedTime, UInt32 cacheEntryType, string header, UInt32 headerSize, string fileExt, string originalUrl);
    private static bool WriteErrorResponseToCache(string url, int statusCode, string statusCodeDescription);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "2.3.183.18942")]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
