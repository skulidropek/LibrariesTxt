internal static class FxResources.System.Private.Threading.SR : object {
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
[__BlockReflectionAttribute]
public static class Internal.Runtime.CompilerHelpers.LibraryInitializer : object {
    public static void InitializeLibrary();
}
internal class Internal.Threading.SpinLockTraceCallbacksImplementation : SpinLockTraceCallbacks {
    public bool Enabled { get; }
    public sealed virtual bool get_Enabled();
    public sealed virtual void SpinLock_FastPathFailed(int ownerID);
}
internal class Internal.Threading.TaskTraceCallbacksImplementation : TaskTraceCallbacks {
    public bool Enabled { get; }
    public sealed virtual bool get_Enabled();
    public sealed virtual void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    public sealed virtual void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    public sealed virtual void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    public sealed virtual void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
    public sealed virtual void TaskStarted(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    public sealed virtual void TaskCompleted(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, bool IsExceptional);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static object _lock;
    private static List`1<string> _currentlyLoading;
    private static int _infinitelyRecursingCount;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string BarrierPostPhaseException { get; }
    internal static Type ResourceType { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    private static string InternalGetResourceString(string key);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_BarrierPostPhaseException();
    internal static Type get_ResourceType();
}
[EventSourceAttribute]
internal class System.Threading.CdsSyncEtwBCLProvider : EventSource {
    public static CdsSyncEtwBCLProvider Log;
    private static EventKeywords ALL_KEYWORDS;
    private static int SPINLOCK_FASTPATHFAILED_ID;
    private static int SPINWAIT_NEXTSPINWILLYIELD_ID;
    private static int BARRIER_PHASEFINISHED_ID;
    private static CdsSyncEtwBCLProvider();
    [EventAttribute("1")]
public void SpinLock_FastPathFailed(int ownerID);
    [EventAttribute("2")]
public void SpinWait_NextSpinWillYield();
    [EventAttribute("3")]
public void Barrier_PhaseFinished(bool currentSense, long phaseNum);
}
[EventSourceAttribute]
internal class System.Threading.Tasks.TplEtwProvider : EventSource {
    public static TplEtwProvider Log;
    private static EventKeywords ALL_KEYWORDS;
    private static int TASKSCHEDULED_ID;
    private static int TASKSTARTED_ID;
    private static int TASKCOMPLETED_ID;
    private static int TASKWAITBEGIN_ID;
    private static int TASKWAITEND_ID;
    private static TplEtwProvider();
    [EventAttribute("7")]
public void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
    [EventAttribute("8")]
public void TaskStarted(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    [EventAttribute("9")]
public void TaskCompleted(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, bool IsExceptional);
    [EventAttribute("10")]
public void TaskWaitBegin(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, TaskWaitBehavior Behavior);
    [EventAttribute("11")]
public void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
}
