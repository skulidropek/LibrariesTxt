[ExtensionAttribute]
internal static class Internal.LowLevelLinq.LowLevelEnumerable : object {
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<T> values, Func`2<T, bool> predicate);
    [IteratorStateMachineAttribute("Internal.LowLevelLinq.LowLevelEnumerable/<Select>d__2`2")]
[ExtensionAttribute]
public static IEnumerable`1<U> Select(IEnumerable`1<T> values, Func`2<T, U> func);
    [IteratorStateMachineAttribute("Internal.LowLevelLinq.LowLevelEnumerable/<Select>d__3`2")]
[ExtensionAttribute]
public static IEnumerable`1<U> Select(T[] values, Func`2<T, U> func);
    [IteratorStateMachineAttribute("Internal.LowLevelLinq.LowLevelEnumerable/<Where>d__4`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Where(IEnumerable`1<T> source, Func`2<T, bool> filter);
    [ExtensionAttribute]
public static IEnumerable`1<T> AsEnumerable(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static int Count(IEnumerable`1<T> enumeration);
    [ExtensionAttribute]
public static List`1<T> ToList(IEnumerable`1<T> source);
}
public class Internal.Metadata.NativeFormat.ArraySignature : ValueType {
    internal MetadataReader _reader;
    internal ArraySignatureHandle _handle;
    internal Handle _elementType;
    internal int _rank;
    internal Int32Collection _sizes;
    internal Int32Collection _lowerBounds;
    public ArraySignatureHandle Handle { get; }
    public Handle ElementType { get; }
    public int Rank { get; }
    public Int32Collection Sizes { get; }
    public Int32Collection LowerBounds { get; }
    public ArraySignatureHandle get_Handle();
    public Handle get_ElementType();
    public int get_Rank();
    public Int32Collection get_Sizes();
    public Int32Collection get_LowerBounds();
}
public class Internal.Metadata.NativeFormat.ArraySignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ArraySignatureHandle(Handle handle);
    internal ArraySignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ArraySignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ArraySignatureHandle handle);
    internal int get_Offset();
    public ArraySignature GetArraySignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
[FlagsAttribute]
public enum Internal.Metadata.NativeFormat.AssemblyFlags : Enum {
    public UInt32 value__;
    public static AssemblyFlags PublicKey;
    public static AssemblyFlags Retargetable;
    public static AssemblyFlags DisableJITcompileOptimizer;
    public static AssemblyFlags EnableJITcompileTracking;
}
public enum Internal.Metadata.NativeFormat.AssemblyHashAlgorithm : Enum {
    public UInt32 value__;
    public static AssemblyHashAlgorithm None;
    public static AssemblyHashAlgorithm Reserved;
    public static AssemblyHashAlgorithm SHA1;
}
public class Internal.Metadata.NativeFormat.BooleanCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal BooleanCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.ByReferenceSignature : ValueType {
    internal MetadataReader _reader;
    internal ByReferenceSignatureHandle _handle;
    internal Handle _type;
    public ByReferenceSignatureHandle Handle { get; }
    public Handle Type { get; }
    public ByReferenceSignatureHandle get_Handle();
    public Handle get_Type();
}
public class Internal.Metadata.NativeFormat.ByReferenceSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ByReferenceSignatureHandle(Handle handle);
    internal ByReferenceSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ByReferenceSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ByReferenceSignatureHandle handle);
    internal int get_Offset();
    public ByReferenceSignature GetByReferenceSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ByteCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal ByteCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.CharCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal CharCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.ConstantBooleanArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantBooleanArrayHandle _handle;
    internal BooleanCollection _value;
    public ConstantBooleanArrayHandle Handle { get; }
    public BooleanCollection Value { get; }
    public ConstantBooleanArrayHandle get_Handle();
    public BooleanCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantBooleanArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantBooleanArrayHandle(Handle handle);
    internal ConstantBooleanArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantBooleanArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantBooleanArrayHandle handle);
    internal int get_Offset();
    public ConstantBooleanArray GetConstantBooleanArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantBooleanValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantBooleanValueHandle _handle;
    internal bool _value;
    public ConstantBooleanValueHandle Handle { get; }
    public bool Value { get; }
    public ConstantBooleanValueHandle get_Handle();
    public bool get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantBooleanValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantBooleanValueHandle(Handle handle);
    internal ConstantBooleanValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantBooleanValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantBooleanValueHandle handle);
    internal int get_Offset();
    public ConstantBooleanValue GetConstantBooleanValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantBoxedEnumValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantBoxedEnumValueHandle _handle;
    internal Handle _value;
    internal Handle _type;
    public ConstantBoxedEnumValueHandle Handle { get; }
    public Handle Value { get; }
    public Handle Type { get; }
    public ConstantBoxedEnumValueHandle get_Handle();
    public Handle get_Value();
    public Handle get_Type();
}
public class Internal.Metadata.NativeFormat.ConstantBoxedEnumValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantBoxedEnumValueHandle(Handle handle);
    internal ConstantBoxedEnumValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantBoxedEnumValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantBoxedEnumValueHandle handle);
    internal int get_Offset();
    public ConstantBoxedEnumValue GetConstantBoxedEnumValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantByteArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantByteArrayHandle _handle;
    internal ByteCollection _value;
    public ConstantByteArrayHandle Handle { get; }
    public ByteCollection Value { get; }
    public ConstantByteArrayHandle get_Handle();
    public ByteCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantByteArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantByteArrayHandle(Handle handle);
    internal ConstantByteArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantByteArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantByteArrayHandle handle);
    internal int get_Offset();
    public ConstantByteArray GetConstantByteArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantByteValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantByteValueHandle _handle;
    internal byte _value;
    public ConstantByteValueHandle Handle { get; }
    public byte Value { get; }
    public ConstantByteValueHandle get_Handle();
    public byte get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantByteValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantByteValueHandle(Handle handle);
    internal ConstantByteValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantByteValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantByteValueHandle handle);
    internal int get_Offset();
    public ConstantByteValue GetConstantByteValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantCharArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantCharArrayHandle _handle;
    internal CharCollection _value;
    public ConstantCharArrayHandle Handle { get; }
    public CharCollection Value { get; }
    public ConstantCharArrayHandle get_Handle();
    public CharCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantCharArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantCharArrayHandle(Handle handle);
    internal ConstantCharArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantCharArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantCharArrayHandle handle);
    internal int get_Offset();
    public ConstantCharArray GetConstantCharArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantCharValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantCharValueHandle _handle;
    internal char _value;
    public ConstantCharValueHandle Handle { get; }
    public char Value { get; }
    public ConstantCharValueHandle get_Handle();
    public char get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantCharValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantCharValueHandle(Handle handle);
    internal ConstantCharValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantCharValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantCharValueHandle handle);
    internal int get_Offset();
    public ConstantCharValue GetConstantCharValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantDoubleArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantDoubleArrayHandle _handle;
    internal DoubleCollection _value;
    public ConstantDoubleArrayHandle Handle { get; }
    public DoubleCollection Value { get; }
    public ConstantDoubleArrayHandle get_Handle();
    public DoubleCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantDoubleArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantDoubleArrayHandle(Handle handle);
    internal ConstantDoubleArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantDoubleArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantDoubleArrayHandle handle);
    internal int get_Offset();
    public ConstantDoubleArray GetConstantDoubleArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantDoubleValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantDoubleValueHandle _handle;
    internal double _value;
    public ConstantDoubleValueHandle Handle { get; }
    public double Value { get; }
    public ConstantDoubleValueHandle get_Handle();
    public double get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantDoubleValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantDoubleValueHandle(Handle handle);
    internal ConstantDoubleValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantDoubleValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantDoubleValueHandle handle);
    internal int get_Offset();
    public ConstantDoubleValue GetConstantDoubleValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantEnumArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantEnumArrayHandle _handle;
    internal Handle _elementType;
    internal Handle _value;
    public ConstantEnumArrayHandle Handle { get; }
    public Handle ElementType { get; }
    public Handle Value { get; }
    public ConstantEnumArrayHandle get_Handle();
    public Handle get_ElementType();
    public Handle get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantEnumArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantEnumArrayHandle(Handle handle);
    internal ConstantEnumArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantEnumArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantEnumArrayHandle handle);
    internal int get_Offset();
    public ConstantEnumArray GetConstantEnumArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantHandleArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantHandleArrayHandle _handle;
    internal HandleCollection _value;
    public ConstantHandleArrayHandle Handle { get; }
    public HandleCollection Value { get; }
    public ConstantHandleArrayHandle get_Handle();
    public HandleCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantHandleArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantHandleArrayHandle(Handle handle);
    internal ConstantHandleArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantHandleArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantHandleArrayHandle handle);
    internal int get_Offset();
    public ConstantHandleArray GetConstantHandleArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantInt16Array : ValueType {
    internal MetadataReader _reader;
    internal ConstantInt16ArrayHandle _handle;
    internal Int16Collection _value;
    public ConstantInt16ArrayHandle Handle { get; }
    public Int16Collection Value { get; }
    public ConstantInt16ArrayHandle get_Handle();
    public Int16Collection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantInt16ArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantInt16ArrayHandle(Handle handle);
    internal ConstantInt16ArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantInt16ArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantInt16ArrayHandle handle);
    internal int get_Offset();
    public ConstantInt16Array GetConstantInt16Array(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantInt16Value : ValueType {
    internal MetadataReader _reader;
    internal ConstantInt16ValueHandle _handle;
    internal short _value;
    public ConstantInt16ValueHandle Handle { get; }
    public short Value { get; }
    public ConstantInt16ValueHandle get_Handle();
    public short get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantInt16ValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantInt16ValueHandle(Handle handle);
    internal ConstantInt16ValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantInt16ValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantInt16ValueHandle handle);
    internal int get_Offset();
    public ConstantInt16Value GetConstantInt16Value(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantInt32Array : ValueType {
    internal MetadataReader _reader;
    internal ConstantInt32ArrayHandle _handle;
    internal Int32Collection _value;
    public ConstantInt32ArrayHandle Handle { get; }
    public Int32Collection Value { get; }
    public ConstantInt32ArrayHandle get_Handle();
    public Int32Collection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantInt32ArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantInt32ArrayHandle(Handle handle);
    internal ConstantInt32ArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantInt32ArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantInt32ArrayHandle handle);
    internal int get_Offset();
    public ConstantInt32Array GetConstantInt32Array(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantInt32Value : ValueType {
    internal MetadataReader _reader;
    internal ConstantInt32ValueHandle _handle;
    internal int _value;
    public ConstantInt32ValueHandle Handle { get; }
    public int Value { get; }
    public ConstantInt32ValueHandle get_Handle();
    public int get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantInt32ValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantInt32ValueHandle(Handle handle);
    internal ConstantInt32ValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantInt32ValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantInt32ValueHandle handle);
    internal int get_Offset();
    public ConstantInt32Value GetConstantInt32Value(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantInt64Array : ValueType {
    internal MetadataReader _reader;
    internal ConstantInt64ArrayHandle _handle;
    internal Int64Collection _value;
    public ConstantInt64ArrayHandle Handle { get; }
    public Int64Collection Value { get; }
    public ConstantInt64ArrayHandle get_Handle();
    public Int64Collection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantInt64ArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantInt64ArrayHandle(Handle handle);
    internal ConstantInt64ArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantInt64ArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantInt64ArrayHandle handle);
    internal int get_Offset();
    public ConstantInt64Array GetConstantInt64Array(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantInt64Value : ValueType {
    internal MetadataReader _reader;
    internal ConstantInt64ValueHandle _handle;
    internal long _value;
    public ConstantInt64ValueHandle Handle { get; }
    public long Value { get; }
    public ConstantInt64ValueHandle get_Handle();
    public long get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantInt64ValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantInt64ValueHandle(Handle handle);
    internal ConstantInt64ValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantInt64ValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantInt64ValueHandle handle);
    internal int get_Offset();
    public ConstantInt64Value GetConstantInt64Value(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantReferenceValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantReferenceValueHandle _handle;
    public object Value { get; }
    public ConstantReferenceValueHandle Handle { get; }
    public object get_Value();
    public ConstantReferenceValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.ConstantReferenceValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantReferenceValueHandle(Handle handle);
    internal ConstantReferenceValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantReferenceValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantReferenceValueHandle handle);
    internal int get_Offset();
    public ConstantReferenceValue GetConstantReferenceValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantSByteArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantSByteArrayHandle _handle;
    internal SByteCollection _value;
    public ConstantSByteArrayHandle Handle { get; }
    public SByteCollection Value { get; }
    public ConstantSByteArrayHandle get_Handle();
    public SByteCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantSByteArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantSByteArrayHandle(Handle handle);
    internal ConstantSByteArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantSByteArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantSByteArrayHandle handle);
    internal int get_Offset();
    public ConstantSByteArray GetConstantSByteArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantSByteValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantSByteValueHandle _handle;
    internal sbyte _value;
    public ConstantSByteValueHandle Handle { get; }
    public sbyte Value { get; }
    public ConstantSByteValueHandle get_Handle();
    public sbyte get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantSByteValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantSByteValueHandle(Handle handle);
    internal ConstantSByteValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantSByteValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantSByteValueHandle handle);
    internal int get_Offset();
    public ConstantSByteValue GetConstantSByteValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantSingleArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantSingleArrayHandle _handle;
    internal SingleCollection _value;
    public ConstantSingleArrayHandle Handle { get; }
    public SingleCollection Value { get; }
    public ConstantSingleArrayHandle get_Handle();
    public SingleCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantSingleArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantSingleArrayHandle(Handle handle);
    internal ConstantSingleArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantSingleArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantSingleArrayHandle handle);
    internal int get_Offset();
    public ConstantSingleArray GetConstantSingleArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantSingleValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantSingleValueHandle _handle;
    internal float _value;
    public ConstantSingleValueHandle Handle { get; }
    public float Value { get; }
    public ConstantSingleValueHandle get_Handle();
    public float get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantSingleValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantSingleValueHandle(Handle handle);
    internal ConstantSingleValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantSingleValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantSingleValueHandle handle);
    internal int get_Offset();
    public ConstantSingleValue GetConstantSingleValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantStringArray : ValueType {
    internal MetadataReader _reader;
    internal ConstantStringArrayHandle _handle;
    internal HandleCollection _value;
    public ConstantStringArrayHandle Handle { get; }
    public HandleCollection Value { get; }
    public ConstantStringArrayHandle get_Handle();
    public HandleCollection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantStringArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantStringArrayHandle(Handle handle);
    internal ConstantStringArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantStringArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantStringArrayHandle handle);
    internal int get_Offset();
    public ConstantStringArray GetConstantStringArray(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantStringValue : ValueType {
    internal MetadataReader _reader;
    internal ConstantStringValueHandle _handle;
    internal string _value;
    public ConstantStringValueHandle Handle { get; }
    public string Value { get; }
    public ConstantStringValueHandle get_Handle();
    public string get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantStringValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantStringValueHandle(Handle handle);
    internal ConstantStringValueHandle(int value);
    public bool StringEquals(string value, MetadataReader reader);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantStringValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantStringValueHandle handle);
    internal int get_Offset();
    public ConstantStringValue GetConstantStringValue(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantUInt16Array : ValueType {
    internal MetadataReader _reader;
    internal ConstantUInt16ArrayHandle _handle;
    internal UInt16Collection _value;
    public ConstantUInt16ArrayHandle Handle { get; }
    public UInt16Collection Value { get; }
    public ConstantUInt16ArrayHandle get_Handle();
    public UInt16Collection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantUInt16ArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantUInt16ArrayHandle(Handle handle);
    internal ConstantUInt16ArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantUInt16ArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantUInt16ArrayHandle handle);
    internal int get_Offset();
    public ConstantUInt16Array GetConstantUInt16Array(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantUInt16Value : ValueType {
    internal MetadataReader _reader;
    internal ConstantUInt16ValueHandle _handle;
    internal ushort _value;
    public ConstantUInt16ValueHandle Handle { get; }
    public ushort Value { get; }
    public ConstantUInt16ValueHandle get_Handle();
    public ushort get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantUInt16ValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantUInt16ValueHandle(Handle handle);
    internal ConstantUInt16ValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantUInt16ValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantUInt16ValueHandle handle);
    internal int get_Offset();
    public ConstantUInt16Value GetConstantUInt16Value(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantUInt32Array : ValueType {
    internal MetadataReader _reader;
    internal ConstantUInt32ArrayHandle _handle;
    internal UInt32Collection _value;
    public ConstantUInt32ArrayHandle Handle { get; }
    public UInt32Collection Value { get; }
    public ConstantUInt32ArrayHandle get_Handle();
    public UInt32Collection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantUInt32ArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantUInt32ArrayHandle(Handle handle);
    internal ConstantUInt32ArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantUInt32ArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantUInt32ArrayHandle handle);
    internal int get_Offset();
    public ConstantUInt32Array GetConstantUInt32Array(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantUInt32Value : ValueType {
    internal MetadataReader _reader;
    internal ConstantUInt32ValueHandle _handle;
    internal UInt32 _value;
    public ConstantUInt32ValueHandle Handle { get; }
    public UInt32 Value { get; }
    public ConstantUInt32ValueHandle get_Handle();
    public UInt32 get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantUInt32ValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantUInt32ValueHandle(Handle handle);
    internal ConstantUInt32ValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantUInt32ValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantUInt32ValueHandle handle);
    internal int get_Offset();
    public ConstantUInt32Value GetConstantUInt32Value(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantUInt64Array : ValueType {
    internal MetadataReader _reader;
    internal ConstantUInt64ArrayHandle _handle;
    internal UInt64Collection _value;
    public ConstantUInt64ArrayHandle Handle { get; }
    public UInt64Collection Value { get; }
    public ConstantUInt64ArrayHandle get_Handle();
    public UInt64Collection get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantUInt64ArrayHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantUInt64ArrayHandle(Handle handle);
    internal ConstantUInt64ArrayHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantUInt64ArrayHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantUInt64ArrayHandle handle);
    internal int get_Offset();
    public ConstantUInt64Array GetConstantUInt64Array(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ConstantUInt64Value : ValueType {
    internal MetadataReader _reader;
    internal ConstantUInt64ValueHandle _handle;
    internal ulong _value;
    public ConstantUInt64ValueHandle Handle { get; }
    public ulong Value { get; }
    public ConstantUInt64ValueHandle get_Handle();
    public ulong get_Value();
}
public class Internal.Metadata.NativeFormat.ConstantUInt64ValueHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ConstantUInt64ValueHandle(Handle handle);
    internal ConstantUInt64ValueHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ConstantUInt64ValueHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ConstantUInt64ValueHandle handle);
    internal int get_Offset();
    public ConstantUInt64Value GetConstantUInt64Value(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.CustomAttribute : ValueType {
    internal MetadataReader _reader;
    internal CustomAttributeHandle _handle;
    internal Handle _constructor;
    internal FixedArgumentHandleCollection _fixedArguments;
    internal NamedArgumentHandleCollection _namedArguments;
    public CustomAttributeHandle Handle { get; }
    public Handle Constructor { get; }
    public FixedArgumentHandleCollection FixedArguments { get; }
    public NamedArgumentHandleCollection NamedArguments { get; }
    public CustomAttributeHandle get_Handle();
    public Handle get_Constructor();
    public FixedArgumentHandleCollection get_FixedArguments();
    public NamedArgumentHandleCollection get_NamedArguments();
}
public class Internal.Metadata.NativeFormat.CustomAttributeHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal CustomAttributeHandle(Handle handle);
    internal CustomAttributeHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(CustomAttributeHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(CustomAttributeHandle handle);
    internal int get_Offset();
    public CustomAttribute GetCustomAttribute(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.CustomAttributeHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal CustomAttributeHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.DoubleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal DoubleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.Event : ValueType {
    internal MetadataReader _reader;
    internal EventHandle _handle;
    internal EventAttributes _flags;
    internal ConstantStringValueHandle _name;
    internal Handle _type;
    internal MethodSemanticsHandleCollection _methodSemantics;
    internal CustomAttributeHandleCollection _customAttributes;
    public EventHandle Handle { get; }
    public EventAttributes Flags { get; }
    public ConstantStringValueHandle Name { get; }
    public Handle Type { get; }
    public MethodSemanticsHandleCollection MethodSemantics { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public EventHandle get_Handle();
    public EventAttributes get_Flags();
    public ConstantStringValueHandle get_Name();
    public Handle get_Type();
    public MethodSemanticsHandleCollection get_MethodSemantics();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.EventHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal EventHandle(Handle handle);
    internal EventHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(EventHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(EventHandle handle);
    internal int get_Offset();
    public Event GetEvent(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.EventHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal EventHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.Field : ValueType {
    internal MetadataReader _reader;
    internal FieldHandle _handle;
    internal FieldAttributes _flags;
    internal ConstantStringValueHandle _name;
    internal FieldSignatureHandle _signature;
    internal Handle _defaultValue;
    internal UInt32 _offset;
    internal CustomAttributeHandleCollection _customAttributes;
    public FieldHandle Handle { get; }
    public FieldAttributes Flags { get; }
    public ConstantStringValueHandle Name { get; }
    public FieldSignatureHandle Signature { get; }
    public Handle DefaultValue { get; }
    public UInt32 Offset { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public FieldHandle get_Handle();
    public FieldAttributes get_Flags();
    public ConstantStringValueHandle get_Name();
    public FieldSignatureHandle get_Signature();
    public Handle get_DefaultValue();
    public UInt32 get_Offset();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.FieldHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal FieldHandle(Handle handle);
    internal FieldHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(FieldHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(FieldHandle handle);
    internal int get_Offset();
    public Field GetField(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.FieldHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal FieldHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.FieldSignature : ValueType {
    internal MetadataReader _reader;
    internal FieldSignatureHandle _handle;
    internal Handle _type;
    public FieldSignatureHandle Handle { get; }
    public Handle Type { get; }
    public FieldSignatureHandle get_Handle();
    public Handle get_Type();
}
public class Internal.Metadata.NativeFormat.FieldSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal FieldSignatureHandle(Handle handle);
    internal FieldSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(FieldSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(FieldSignatureHandle handle);
    internal int get_Offset();
    public FieldSignature GetFieldSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.FixedArgument : ValueType {
    internal MetadataReader _reader;
    internal FixedArgumentHandle _handle;
    internal FixedArgumentAttributes _flags;
    internal Handle _type;
    internal Handle _value;
    public FixedArgumentHandle Handle { get; }
    public FixedArgumentAttributes Flags { get; }
    public Handle Type { get; }
    public Handle Value { get; }
    public FixedArgumentHandle get_Handle();
    public FixedArgumentAttributes get_Flags();
    public Handle get_Type();
    public Handle get_Value();
}
[FlagsAttribute]
public enum Internal.Metadata.NativeFormat.FixedArgumentAttributes : Enum {
    public byte value__;
    public static FixedArgumentAttributes None;
    public static FixedArgumentAttributes Boxed;
}
public class Internal.Metadata.NativeFormat.FixedArgumentHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal FixedArgumentHandle(Handle handle);
    internal FixedArgumentHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(FixedArgumentHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(FixedArgumentHandle handle);
    internal int get_Offset();
    public FixedArgument GetFixedArgument(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.FixedArgumentHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal FixedArgumentHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.FunctionPointerSignature : ValueType {
    internal MetadataReader _reader;
    internal FunctionPointerSignatureHandle _handle;
    internal MethodSignatureHandle _signature;
    public FunctionPointerSignatureHandle Handle { get; }
    public MethodSignatureHandle Signature { get; }
    public FunctionPointerSignatureHandle get_Handle();
    public MethodSignatureHandle get_Signature();
}
public class Internal.Metadata.NativeFormat.FunctionPointerSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal FunctionPointerSignatureHandle(Handle handle);
    internal FunctionPointerSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(FunctionPointerSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(FunctionPointerSignatureHandle handle);
    internal int get_Offset();
    public FunctionPointerSignature GetFunctionPointerSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.GenericParameter : ValueType {
    internal MetadataReader _reader;
    internal GenericParameterHandle _handle;
    internal ushort _number;
    internal GenericParameterAttributes _flags;
    internal GenericParameterKind _kind;
    internal ConstantStringValueHandle _name;
    internal HandleCollection _constraints;
    internal CustomAttributeHandleCollection _customAttributes;
    public GenericParameterHandle Handle { get; }
    public ushort Number { get; }
    public GenericParameterAttributes Flags { get; }
    public GenericParameterKind Kind { get; }
    public ConstantStringValueHandle Name { get; }
    public HandleCollection Constraints { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public GenericParameterHandle get_Handle();
    public ushort get_Number();
    public GenericParameterAttributes get_Flags();
    public GenericParameterKind get_Kind();
    public ConstantStringValueHandle get_Name();
    public HandleCollection get_Constraints();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.GenericParameterHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal GenericParameterHandle(Handle handle);
    internal GenericParameterHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(GenericParameterHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(GenericParameterHandle handle);
    internal int get_Offset();
    public GenericParameter GetGenericParameter(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.GenericParameterHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal GenericParameterHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public enum Internal.Metadata.NativeFormat.GenericParameterKind : Enum {
    public byte value__;
    public static GenericParameterKind GenericTypeParameter;
    public static GenericParameterKind GenericMethodParameter;
}
public class Internal.Metadata.NativeFormat.Handle : ValueType {
    internal int _value;
    public HandleType HandleType { get; }
    internal int Offset { get; }
    internal Handle(int value);
    public Handle(HandleType type, int offset);
    public virtual bool Equals(object obj);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    internal void Validate(HandleType[] permittedTypes);
    public HandleType get_HandleType();
    internal int get_Offset();
    public bool IsNull(MetadataReader reader);
    public int ToIntToken();
    public static Handle FromIntToken(int value);
    public ArraySignatureHandle ToArraySignatureHandle(MetadataReader reader);
    public ByReferenceSignatureHandle ToByReferenceSignatureHandle(MetadataReader reader);
    public ConstantBooleanArrayHandle ToConstantBooleanArrayHandle(MetadataReader reader);
    public ConstantBooleanValueHandle ToConstantBooleanValueHandle(MetadataReader reader);
    public ConstantBoxedEnumValueHandle ToConstantBoxedEnumValueHandle(MetadataReader reader);
    public ConstantByteArrayHandle ToConstantByteArrayHandle(MetadataReader reader);
    public ConstantByteValueHandle ToConstantByteValueHandle(MetadataReader reader);
    public ConstantCharArrayHandle ToConstantCharArrayHandle(MetadataReader reader);
    public ConstantCharValueHandle ToConstantCharValueHandle(MetadataReader reader);
    public ConstantDoubleArrayHandle ToConstantDoubleArrayHandle(MetadataReader reader);
    public ConstantDoubleValueHandle ToConstantDoubleValueHandle(MetadataReader reader);
    public ConstantEnumArrayHandle ToConstantEnumArrayHandle(MetadataReader reader);
    public ConstantHandleArrayHandle ToConstantHandleArrayHandle(MetadataReader reader);
    public ConstantInt16ArrayHandle ToConstantInt16ArrayHandle(MetadataReader reader);
    public ConstantInt16ValueHandle ToConstantInt16ValueHandle(MetadataReader reader);
    public ConstantInt32ArrayHandle ToConstantInt32ArrayHandle(MetadataReader reader);
    public ConstantInt32ValueHandle ToConstantInt32ValueHandle(MetadataReader reader);
    public ConstantInt64ArrayHandle ToConstantInt64ArrayHandle(MetadataReader reader);
    public ConstantInt64ValueHandle ToConstantInt64ValueHandle(MetadataReader reader);
    public ConstantReferenceValueHandle ToConstantReferenceValueHandle(MetadataReader reader);
    public ConstantSByteArrayHandle ToConstantSByteArrayHandle(MetadataReader reader);
    public ConstantSByteValueHandle ToConstantSByteValueHandle(MetadataReader reader);
    public ConstantSingleArrayHandle ToConstantSingleArrayHandle(MetadataReader reader);
    public ConstantSingleValueHandle ToConstantSingleValueHandle(MetadataReader reader);
    public ConstantStringArrayHandle ToConstantStringArrayHandle(MetadataReader reader);
    public ConstantStringValueHandle ToConstantStringValueHandle(MetadataReader reader);
    public ConstantUInt16ArrayHandle ToConstantUInt16ArrayHandle(MetadataReader reader);
    public ConstantUInt16ValueHandle ToConstantUInt16ValueHandle(MetadataReader reader);
    public ConstantUInt32ArrayHandle ToConstantUInt32ArrayHandle(MetadataReader reader);
    public ConstantUInt32ValueHandle ToConstantUInt32ValueHandle(MetadataReader reader);
    public ConstantUInt64ArrayHandle ToConstantUInt64ArrayHandle(MetadataReader reader);
    public ConstantUInt64ValueHandle ToConstantUInt64ValueHandle(MetadataReader reader);
    public CustomAttributeHandle ToCustomAttributeHandle(MetadataReader reader);
    public EventHandle ToEventHandle(MetadataReader reader);
    public FieldHandle ToFieldHandle(MetadataReader reader);
    public FieldSignatureHandle ToFieldSignatureHandle(MetadataReader reader);
    public FixedArgumentHandle ToFixedArgumentHandle(MetadataReader reader);
    public FunctionPointerSignatureHandle ToFunctionPointerSignatureHandle(MetadataReader reader);
    public GenericParameterHandle ToGenericParameterHandle(MetadataReader reader);
    public MemberReferenceHandle ToMemberReferenceHandle(MetadataReader reader);
    public MethodHandle ToMethodHandle(MetadataReader reader);
    public MethodImplHandle ToMethodImplHandle(MetadataReader reader);
    public MethodInstantiationHandle ToMethodInstantiationHandle(MetadataReader reader);
    public MethodSemanticsHandle ToMethodSemanticsHandle(MetadataReader reader);
    public MethodSignatureHandle ToMethodSignatureHandle(MetadataReader reader);
    public MethodTypeVariableSignatureHandle ToMethodTypeVariableSignatureHandle(MetadataReader reader);
    public ModifiedTypeHandle ToModifiedTypeHandle(MetadataReader reader);
    public NamedArgumentHandle ToNamedArgumentHandle(MetadataReader reader);
    public NamespaceDefinitionHandle ToNamespaceDefinitionHandle(MetadataReader reader);
    public NamespaceReferenceHandle ToNamespaceReferenceHandle(MetadataReader reader);
    public ParameterHandle ToParameterHandle(MetadataReader reader);
    public PointerSignatureHandle ToPointerSignatureHandle(MetadataReader reader);
    public PropertyHandle ToPropertyHandle(MetadataReader reader);
    public PropertySignatureHandle ToPropertySignatureHandle(MetadataReader reader);
    public QualifiedFieldHandle ToQualifiedFieldHandle(MetadataReader reader);
    public QualifiedMethodHandle ToQualifiedMethodHandle(MetadataReader reader);
    public SZArraySignatureHandle ToSZArraySignatureHandle(MetadataReader reader);
    public ScopeDefinitionHandle ToScopeDefinitionHandle(MetadataReader reader);
    public ScopeReferenceHandle ToScopeReferenceHandle(MetadataReader reader);
    public TypeDefinitionHandle ToTypeDefinitionHandle(MetadataReader reader);
    public TypeForwarderHandle ToTypeForwarderHandle(MetadataReader reader);
    public TypeInstantiationSignatureHandle ToTypeInstantiationSignatureHandle(MetadataReader reader);
    public TypeReferenceHandle ToTypeReferenceHandle(MetadataReader reader);
    public TypeSpecificationHandle ToTypeSpecificationHandle(MetadataReader reader);
    public TypeVariableSignatureHandle ToTypeVariableSignatureHandle(MetadataReader reader);
}
public class Internal.Metadata.NativeFormat.HandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal HandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public enum Internal.Metadata.NativeFormat.HandleType : Enum {
    public byte value__;
    public static HandleType Null;
    public static HandleType ArraySignature;
    public static HandleType ByReferenceSignature;
    public static HandleType ConstantBooleanArray;
    public static HandleType ConstantBooleanValue;
    public static HandleType ConstantBoxedEnumValue;
    public static HandleType ConstantByteArray;
    public static HandleType ConstantByteValue;
    public static HandleType ConstantCharArray;
    public static HandleType ConstantCharValue;
    public static HandleType ConstantDoubleArray;
    public static HandleType ConstantDoubleValue;
    public static HandleType ConstantEnumArray;
    public static HandleType ConstantHandleArray;
    public static HandleType ConstantInt16Array;
    public static HandleType ConstantInt16Value;
    public static HandleType ConstantInt32Array;
    public static HandleType ConstantInt32Value;
    public static HandleType ConstantInt64Array;
    public static HandleType ConstantInt64Value;
    public static HandleType ConstantReferenceValue;
    public static HandleType ConstantSByteArray;
    public static HandleType ConstantSByteValue;
    public static HandleType ConstantSingleArray;
    public static HandleType ConstantSingleValue;
    public static HandleType ConstantStringArray;
    public static HandleType ConstantStringValue;
    public static HandleType ConstantUInt16Array;
    public static HandleType ConstantUInt16Value;
    public static HandleType ConstantUInt32Array;
    public static HandleType ConstantUInt32Value;
    public static HandleType ConstantUInt64Array;
    public static HandleType ConstantUInt64Value;
    public static HandleType CustomAttribute;
    public static HandleType Event;
    public static HandleType Field;
    public static HandleType FieldSignature;
    public static HandleType FixedArgument;
    public static HandleType FunctionPointerSignature;
    public static HandleType GenericParameter;
    public static HandleType MemberReference;
    public static HandleType Method;
    public static HandleType MethodImpl;
    public static HandleType MethodInstantiation;
    public static HandleType MethodSemantics;
    public static HandleType MethodSignature;
    public static HandleType MethodTypeVariableSignature;
    public static HandleType ModifiedType;
    public static HandleType NamedArgument;
    public static HandleType NamespaceDefinition;
    public static HandleType NamespaceReference;
    public static HandleType Parameter;
    public static HandleType PointerSignature;
    public static HandleType Property;
    public static HandleType PropertySignature;
    public static HandleType QualifiedField;
    public static HandleType QualifiedMethod;
    public static HandleType SZArraySignature;
    public static HandleType ScopeDefinition;
    public static HandleType ScopeReference;
    public static HandleType TypeDefinition;
    public static HandleType TypeForwarder;
    public static HandleType TypeInstantiationSignature;
    public static HandleType TypeReference;
    public static HandleType TypeSpecification;
    public static HandleType TypeVariableSignature;
}
public class Internal.Metadata.NativeFormat.Int16Collection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal Int16Collection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.Int32Collection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal Int32Collection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.Int64Collection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal Int64Collection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
[ExtensionAttribute]
internal static class Internal.Metadata.NativeFormat.MdBinaryReader : object {
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Boolean& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, String& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Char& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Int16& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, SByte& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, UInt64& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Int32& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, UInt32& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Byte& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, UInt16& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Int64& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Handle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Single& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Double& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, BooleanCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, CharCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ByteCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, SByteCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Int16Collection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, UInt16Collection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Int32Collection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, UInt32Collection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, Int64Collection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, UInt64Collection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, SingleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, DoubleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, AssemblyFlags& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, AssemblyHashAlgorithm& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, CallingConventions& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, EventAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FieldAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FixedArgumentAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, GenericParameterAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, GenericParameterKind& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodImplAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodSemanticsAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, NamedArgumentMemberKind& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ParameterAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, PInvokeAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, PropertyAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeAttributes& value);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, HandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ArraySignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ByReferenceSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantBooleanArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantBooleanValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantBoxedEnumValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantByteArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantByteValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantCharArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantCharValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantDoubleArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantDoubleValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantEnumArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantHandleArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantInt16ArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantInt16ValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantInt32ArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantInt32ValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantInt64ArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantInt64ValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantReferenceValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantSByteArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantSByteValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantSingleArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantSingleValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantStringArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantStringValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantUInt16ArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantUInt16ValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantUInt32ArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantUInt32ValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantUInt64ArrayHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ConstantUInt64ValueHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, CustomAttributeHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, EventHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FieldHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FieldSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FixedArgumentHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FunctionPointerSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, GenericParameterHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MemberReferenceHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodImplHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodInstantiationHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodSemanticsHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodTypeVariableSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ModifiedTypeHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, NamedArgumentHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, NamespaceDefinitionHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, NamespaceReferenceHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ParameterHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, PointerSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, PropertyHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, PropertySignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, QualifiedFieldHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, QualifiedMethodHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, SZArraySignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ScopeDefinitionHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ScopeReferenceHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeDefinitionHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeForwarderHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeInstantiationSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeReferenceHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeSpecificationHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeVariableSignatureHandle& handle);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FixedArgumentHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, NamedArgumentHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodSemanticsHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, CustomAttributeHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ParameterHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, GenericParameterHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeDefinitionHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, TypeForwarderHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, NamespaceDefinitionHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, FieldHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, PropertyHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, EventHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, MethodImplHandleCollection& values);
    [ExtensionAttribute]
public static UInt32 Read(NativeReader reader, UInt32 offset, ScopeDefinitionHandleCollection& values);
}
public class Internal.Metadata.NativeFormat.MemberReference : ValueType {
    internal MetadataReader _reader;
    internal MemberReferenceHandle _handle;
    internal Handle _parent;
    internal ConstantStringValueHandle _name;
    internal Handle _signature;
    internal CustomAttributeHandleCollection _customAttributes;
    public MemberReferenceHandle Handle { get; }
    public Handle Parent { get; }
    public ConstantStringValueHandle Name { get; }
    public Handle Signature { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public MemberReferenceHandle get_Handle();
    public Handle get_Parent();
    public ConstantStringValueHandle get_Name();
    public Handle get_Signature();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.MemberReferenceHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal MemberReferenceHandle(Handle handle);
    internal MemberReferenceHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(MemberReferenceHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(MemberReferenceHandle handle);
    internal int get_Offset();
    public MemberReference GetMemberReference(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
internal class Internal.Metadata.NativeFormat.MetadataHeader : object {
    public static UInt32 Signature;
    public ScopeDefinitionHandleCollection ScopeDefinitions;
    public void Decode(NativeReader reader);
}
public class Internal.Metadata.NativeFormat.MetadataReader : object {
    private MetadataHeader _header;
    internal NativeReader _streamReader;
    public ScopeDefinitionHandleCollection ScopeDefinitions { get; }
    public Handle NullHandle { get; }
    public MetadataReader(IntPtr pBuffer, int cbBuffer);
    public ScopeDefinitionHandleCollection get_ScopeDefinitions();
    public Handle get_NullHandle();
    public bool IsNull(Handle handle);
    public Handle ToHandle(Handle handle);
    internal bool StringEquals(ConstantStringValueHandle handle, string value);
    public ArraySignature GetArraySignature(ArraySignatureHandle handle);
    public ByReferenceSignature GetByReferenceSignature(ByReferenceSignatureHandle handle);
    public ConstantBooleanArray GetConstantBooleanArray(ConstantBooleanArrayHandle handle);
    public ConstantBooleanValue GetConstantBooleanValue(ConstantBooleanValueHandle handle);
    public ConstantBoxedEnumValue GetConstantBoxedEnumValue(ConstantBoxedEnumValueHandle handle);
    public ConstantByteArray GetConstantByteArray(ConstantByteArrayHandle handle);
    public ConstantByteValue GetConstantByteValue(ConstantByteValueHandle handle);
    public ConstantCharArray GetConstantCharArray(ConstantCharArrayHandle handle);
    public ConstantCharValue GetConstantCharValue(ConstantCharValueHandle handle);
    public ConstantDoubleArray GetConstantDoubleArray(ConstantDoubleArrayHandle handle);
    public ConstantDoubleValue GetConstantDoubleValue(ConstantDoubleValueHandle handle);
    public ConstantEnumArray GetConstantEnumArray(ConstantEnumArrayHandle handle);
    public ConstantHandleArray GetConstantHandleArray(ConstantHandleArrayHandle handle);
    public ConstantInt16Array GetConstantInt16Array(ConstantInt16ArrayHandle handle);
    public ConstantInt16Value GetConstantInt16Value(ConstantInt16ValueHandle handle);
    public ConstantInt32Array GetConstantInt32Array(ConstantInt32ArrayHandle handle);
    public ConstantInt32Value GetConstantInt32Value(ConstantInt32ValueHandle handle);
    public ConstantInt64Array GetConstantInt64Array(ConstantInt64ArrayHandle handle);
    public ConstantInt64Value GetConstantInt64Value(ConstantInt64ValueHandle handle);
    public ConstantReferenceValue GetConstantReferenceValue(ConstantReferenceValueHandle handle);
    public ConstantSByteArray GetConstantSByteArray(ConstantSByteArrayHandle handle);
    public ConstantSByteValue GetConstantSByteValue(ConstantSByteValueHandle handle);
    public ConstantSingleArray GetConstantSingleArray(ConstantSingleArrayHandle handle);
    public ConstantSingleValue GetConstantSingleValue(ConstantSingleValueHandle handle);
    public ConstantStringArray GetConstantStringArray(ConstantStringArrayHandle handle);
    public ConstantStringValue GetConstantStringValue(ConstantStringValueHandle handle);
    public ConstantUInt16Array GetConstantUInt16Array(ConstantUInt16ArrayHandle handle);
    public ConstantUInt16Value GetConstantUInt16Value(ConstantUInt16ValueHandle handle);
    public ConstantUInt32Array GetConstantUInt32Array(ConstantUInt32ArrayHandle handle);
    public ConstantUInt32Value GetConstantUInt32Value(ConstantUInt32ValueHandle handle);
    public ConstantUInt64Array GetConstantUInt64Array(ConstantUInt64ArrayHandle handle);
    public ConstantUInt64Value GetConstantUInt64Value(ConstantUInt64ValueHandle handle);
    public CustomAttribute GetCustomAttribute(CustomAttributeHandle handle);
    public Event GetEvent(EventHandle handle);
    public Field GetField(FieldHandle handle);
    public FieldSignature GetFieldSignature(FieldSignatureHandle handle);
    public FixedArgument GetFixedArgument(FixedArgumentHandle handle);
    public FunctionPointerSignature GetFunctionPointerSignature(FunctionPointerSignatureHandle handle);
    public GenericParameter GetGenericParameter(GenericParameterHandle handle);
    public MemberReference GetMemberReference(MemberReferenceHandle handle);
    public Method GetMethod(MethodHandle handle);
    public MethodImpl GetMethodImpl(MethodImplHandle handle);
    public MethodInstantiation GetMethodInstantiation(MethodInstantiationHandle handle);
    public MethodSemantics GetMethodSemantics(MethodSemanticsHandle handle);
    public MethodSignature GetMethodSignature(MethodSignatureHandle handle);
    public MethodTypeVariableSignature GetMethodTypeVariableSignature(MethodTypeVariableSignatureHandle handle);
    public ModifiedType GetModifiedType(ModifiedTypeHandle handle);
    public NamedArgument GetNamedArgument(NamedArgumentHandle handle);
    public NamespaceDefinition GetNamespaceDefinition(NamespaceDefinitionHandle handle);
    public NamespaceReference GetNamespaceReference(NamespaceReferenceHandle handle);
    public Parameter GetParameter(ParameterHandle handle);
    public PointerSignature GetPointerSignature(PointerSignatureHandle handle);
    public Property GetProperty(PropertyHandle handle);
    public PropertySignature GetPropertySignature(PropertySignatureHandle handle);
    public QualifiedField GetQualifiedField(QualifiedFieldHandle handle);
    public QualifiedMethod GetQualifiedMethod(QualifiedMethodHandle handle);
    public SZArraySignature GetSZArraySignature(SZArraySignatureHandle handle);
    public ScopeDefinition GetScopeDefinition(ScopeDefinitionHandle handle);
    public ScopeReference GetScopeReference(ScopeReferenceHandle handle);
    public TypeDefinition GetTypeDefinition(TypeDefinitionHandle handle);
    public TypeForwarder GetTypeForwarder(TypeForwarderHandle handle);
    public TypeInstantiationSignature GetTypeInstantiationSignature(TypeInstantiationSignatureHandle handle);
    public TypeReference GetTypeReference(TypeReferenceHandle handle);
    public TypeSpecification GetTypeSpecification(TypeSpecificationHandle handle);
    public TypeVariableSignature GetTypeVariableSignature(TypeVariableSignatureHandle handle);
    internal Handle ToHandle(ArraySignatureHandle handle);
    internal Handle ToHandle(ByReferenceSignatureHandle handle);
    internal Handle ToHandle(ConstantBooleanArrayHandle handle);
    internal Handle ToHandle(ConstantBooleanValueHandle handle);
    internal Handle ToHandle(ConstantBoxedEnumValueHandle handle);
    internal Handle ToHandle(ConstantByteArrayHandle handle);
    internal Handle ToHandle(ConstantByteValueHandle handle);
    internal Handle ToHandle(ConstantCharArrayHandle handle);
    internal Handle ToHandle(ConstantCharValueHandle handle);
    internal Handle ToHandle(ConstantDoubleArrayHandle handle);
    internal Handle ToHandle(ConstantDoubleValueHandle handle);
    internal Handle ToHandle(ConstantEnumArrayHandle handle);
    internal Handle ToHandle(ConstantHandleArrayHandle handle);
    internal Handle ToHandle(ConstantInt16ArrayHandle handle);
    internal Handle ToHandle(ConstantInt16ValueHandle handle);
    internal Handle ToHandle(ConstantInt32ArrayHandle handle);
    internal Handle ToHandle(ConstantInt32ValueHandle handle);
    internal Handle ToHandle(ConstantInt64ArrayHandle handle);
    internal Handle ToHandle(ConstantInt64ValueHandle handle);
    internal Handle ToHandle(ConstantReferenceValueHandle handle);
    internal Handle ToHandle(ConstantSByteArrayHandle handle);
    internal Handle ToHandle(ConstantSByteValueHandle handle);
    internal Handle ToHandle(ConstantSingleArrayHandle handle);
    internal Handle ToHandle(ConstantSingleValueHandle handle);
    internal Handle ToHandle(ConstantStringArrayHandle handle);
    internal Handle ToHandle(ConstantStringValueHandle handle);
    internal Handle ToHandle(ConstantUInt16ArrayHandle handle);
    internal Handle ToHandle(ConstantUInt16ValueHandle handle);
    internal Handle ToHandle(ConstantUInt32ArrayHandle handle);
    internal Handle ToHandle(ConstantUInt32ValueHandle handle);
    internal Handle ToHandle(ConstantUInt64ArrayHandle handle);
    internal Handle ToHandle(ConstantUInt64ValueHandle handle);
    internal Handle ToHandle(CustomAttributeHandle handle);
    internal Handle ToHandle(EventHandle handle);
    internal Handle ToHandle(FieldHandle handle);
    internal Handle ToHandle(FieldSignatureHandle handle);
    internal Handle ToHandle(FixedArgumentHandle handle);
    internal Handle ToHandle(FunctionPointerSignatureHandle handle);
    internal Handle ToHandle(GenericParameterHandle handle);
    internal Handle ToHandle(MemberReferenceHandle handle);
    internal Handle ToHandle(MethodHandle handle);
    internal Handle ToHandle(MethodImplHandle handle);
    internal Handle ToHandle(MethodInstantiationHandle handle);
    internal Handle ToHandle(MethodSemanticsHandle handle);
    internal Handle ToHandle(MethodSignatureHandle handle);
    internal Handle ToHandle(MethodTypeVariableSignatureHandle handle);
    internal Handle ToHandle(ModifiedTypeHandle handle);
    internal Handle ToHandle(NamedArgumentHandle handle);
    internal Handle ToHandle(NamespaceDefinitionHandle handle);
    internal Handle ToHandle(NamespaceReferenceHandle handle);
    internal Handle ToHandle(ParameterHandle handle);
    internal Handle ToHandle(PointerSignatureHandle handle);
    internal Handle ToHandle(PropertyHandle handle);
    internal Handle ToHandle(PropertySignatureHandle handle);
    internal Handle ToHandle(QualifiedFieldHandle handle);
    internal Handle ToHandle(QualifiedMethodHandle handle);
    internal Handle ToHandle(SZArraySignatureHandle handle);
    internal Handle ToHandle(ScopeDefinitionHandle handle);
    internal Handle ToHandle(ScopeReferenceHandle handle);
    internal Handle ToHandle(TypeDefinitionHandle handle);
    internal Handle ToHandle(TypeForwarderHandle handle);
    internal Handle ToHandle(TypeInstantiationSignatureHandle handle);
    internal Handle ToHandle(TypeReferenceHandle handle);
    internal Handle ToHandle(TypeSpecificationHandle handle);
    internal Handle ToHandle(TypeVariableSignatureHandle handle);
    internal ArraySignatureHandle ToArraySignatureHandle(Handle handle);
    internal ByReferenceSignatureHandle ToByReferenceSignatureHandle(Handle handle);
    internal ConstantBooleanArrayHandle ToConstantBooleanArrayHandle(Handle handle);
    internal ConstantBooleanValueHandle ToConstantBooleanValueHandle(Handle handle);
    internal ConstantBoxedEnumValueHandle ToConstantBoxedEnumValueHandle(Handle handle);
    internal ConstantByteArrayHandle ToConstantByteArrayHandle(Handle handle);
    internal ConstantByteValueHandle ToConstantByteValueHandle(Handle handle);
    internal ConstantCharArrayHandle ToConstantCharArrayHandle(Handle handle);
    internal ConstantCharValueHandle ToConstantCharValueHandle(Handle handle);
    internal ConstantDoubleArrayHandle ToConstantDoubleArrayHandle(Handle handle);
    internal ConstantDoubleValueHandle ToConstantDoubleValueHandle(Handle handle);
    internal ConstantEnumArrayHandle ToConstantEnumArrayHandle(Handle handle);
    internal ConstantHandleArrayHandle ToConstantHandleArrayHandle(Handle handle);
    internal ConstantInt16ArrayHandle ToConstantInt16ArrayHandle(Handle handle);
    internal ConstantInt16ValueHandle ToConstantInt16ValueHandle(Handle handle);
    internal ConstantInt32ArrayHandle ToConstantInt32ArrayHandle(Handle handle);
    internal ConstantInt32ValueHandle ToConstantInt32ValueHandle(Handle handle);
    internal ConstantInt64ArrayHandle ToConstantInt64ArrayHandle(Handle handle);
    internal ConstantInt64ValueHandle ToConstantInt64ValueHandle(Handle handle);
    internal ConstantReferenceValueHandle ToConstantReferenceValueHandle(Handle handle);
    internal ConstantSByteArrayHandle ToConstantSByteArrayHandle(Handle handle);
    internal ConstantSByteValueHandle ToConstantSByteValueHandle(Handle handle);
    internal ConstantSingleArrayHandle ToConstantSingleArrayHandle(Handle handle);
    internal ConstantSingleValueHandle ToConstantSingleValueHandle(Handle handle);
    internal ConstantStringArrayHandle ToConstantStringArrayHandle(Handle handle);
    internal ConstantStringValueHandle ToConstantStringValueHandle(Handle handle);
    internal ConstantUInt16ArrayHandle ToConstantUInt16ArrayHandle(Handle handle);
    internal ConstantUInt16ValueHandle ToConstantUInt16ValueHandle(Handle handle);
    internal ConstantUInt32ArrayHandle ToConstantUInt32ArrayHandle(Handle handle);
    internal ConstantUInt32ValueHandle ToConstantUInt32ValueHandle(Handle handle);
    internal ConstantUInt64ArrayHandle ToConstantUInt64ArrayHandle(Handle handle);
    internal ConstantUInt64ValueHandle ToConstantUInt64ValueHandle(Handle handle);
    internal CustomAttributeHandle ToCustomAttributeHandle(Handle handle);
    internal EventHandle ToEventHandle(Handle handle);
    internal FieldHandle ToFieldHandle(Handle handle);
    internal FieldSignatureHandle ToFieldSignatureHandle(Handle handle);
    internal FixedArgumentHandle ToFixedArgumentHandle(Handle handle);
    internal FunctionPointerSignatureHandle ToFunctionPointerSignatureHandle(Handle handle);
    internal GenericParameterHandle ToGenericParameterHandle(Handle handle);
    internal MemberReferenceHandle ToMemberReferenceHandle(Handle handle);
    internal MethodHandle ToMethodHandle(Handle handle);
    internal MethodImplHandle ToMethodImplHandle(Handle handle);
    internal MethodInstantiationHandle ToMethodInstantiationHandle(Handle handle);
    internal MethodSemanticsHandle ToMethodSemanticsHandle(Handle handle);
    internal MethodSignatureHandle ToMethodSignatureHandle(Handle handle);
    internal MethodTypeVariableSignatureHandle ToMethodTypeVariableSignatureHandle(Handle handle);
    internal ModifiedTypeHandle ToModifiedTypeHandle(Handle handle);
    internal NamedArgumentHandle ToNamedArgumentHandle(Handle handle);
    internal NamespaceDefinitionHandle ToNamespaceDefinitionHandle(Handle handle);
    internal NamespaceReferenceHandle ToNamespaceReferenceHandle(Handle handle);
    internal ParameterHandle ToParameterHandle(Handle handle);
    internal PointerSignatureHandle ToPointerSignatureHandle(Handle handle);
    internal PropertyHandle ToPropertyHandle(Handle handle);
    internal PropertySignatureHandle ToPropertySignatureHandle(Handle handle);
    internal QualifiedFieldHandle ToQualifiedFieldHandle(Handle handle);
    internal QualifiedMethodHandle ToQualifiedMethodHandle(Handle handle);
    internal SZArraySignatureHandle ToSZArraySignatureHandle(Handle handle);
    internal ScopeDefinitionHandle ToScopeDefinitionHandle(Handle handle);
    internal ScopeReferenceHandle ToScopeReferenceHandle(Handle handle);
    internal TypeDefinitionHandle ToTypeDefinitionHandle(Handle handle);
    internal TypeForwarderHandle ToTypeForwarderHandle(Handle handle);
    internal TypeInstantiationSignatureHandle ToTypeInstantiationSignatureHandle(Handle handle);
    internal TypeReferenceHandle ToTypeReferenceHandle(Handle handle);
    internal TypeSpecificationHandle ToTypeSpecificationHandle(Handle handle);
    internal TypeVariableSignatureHandle ToTypeVariableSignatureHandle(Handle handle);
    internal bool IsNull(ArraySignatureHandle handle);
    internal bool IsNull(ByReferenceSignatureHandle handle);
    internal bool IsNull(ConstantBooleanArrayHandle handle);
    internal bool IsNull(ConstantBooleanValueHandle handle);
    internal bool IsNull(ConstantBoxedEnumValueHandle handle);
    internal bool IsNull(ConstantByteArrayHandle handle);
    internal bool IsNull(ConstantByteValueHandle handle);
    internal bool IsNull(ConstantCharArrayHandle handle);
    internal bool IsNull(ConstantCharValueHandle handle);
    internal bool IsNull(ConstantDoubleArrayHandle handle);
    internal bool IsNull(ConstantDoubleValueHandle handle);
    internal bool IsNull(ConstantEnumArrayHandle handle);
    internal bool IsNull(ConstantHandleArrayHandle handle);
    internal bool IsNull(ConstantInt16ArrayHandle handle);
    internal bool IsNull(ConstantInt16ValueHandle handle);
    internal bool IsNull(ConstantInt32ArrayHandle handle);
    internal bool IsNull(ConstantInt32ValueHandle handle);
    internal bool IsNull(ConstantInt64ArrayHandle handle);
    internal bool IsNull(ConstantInt64ValueHandle handle);
    internal bool IsNull(ConstantReferenceValueHandle handle);
    internal bool IsNull(ConstantSByteArrayHandle handle);
    internal bool IsNull(ConstantSByteValueHandle handle);
    internal bool IsNull(ConstantSingleArrayHandle handle);
    internal bool IsNull(ConstantSingleValueHandle handle);
    internal bool IsNull(ConstantStringArrayHandle handle);
    internal bool IsNull(ConstantStringValueHandle handle);
    internal bool IsNull(ConstantUInt16ArrayHandle handle);
    internal bool IsNull(ConstantUInt16ValueHandle handle);
    internal bool IsNull(ConstantUInt32ArrayHandle handle);
    internal bool IsNull(ConstantUInt32ValueHandle handle);
    internal bool IsNull(ConstantUInt64ArrayHandle handle);
    internal bool IsNull(ConstantUInt64ValueHandle handle);
    internal bool IsNull(CustomAttributeHandle handle);
    internal bool IsNull(EventHandle handle);
    internal bool IsNull(FieldHandle handle);
    internal bool IsNull(FieldSignatureHandle handle);
    internal bool IsNull(FixedArgumentHandle handle);
    internal bool IsNull(FunctionPointerSignatureHandle handle);
    internal bool IsNull(GenericParameterHandle handle);
    internal bool IsNull(MemberReferenceHandle handle);
    internal bool IsNull(MethodHandle handle);
    internal bool IsNull(MethodImplHandle handle);
    internal bool IsNull(MethodInstantiationHandle handle);
    internal bool IsNull(MethodSemanticsHandle handle);
    internal bool IsNull(MethodSignatureHandle handle);
    internal bool IsNull(MethodTypeVariableSignatureHandle handle);
    internal bool IsNull(ModifiedTypeHandle handle);
    internal bool IsNull(NamedArgumentHandle handle);
    internal bool IsNull(NamespaceDefinitionHandle handle);
    internal bool IsNull(NamespaceReferenceHandle handle);
    internal bool IsNull(ParameterHandle handle);
    internal bool IsNull(PointerSignatureHandle handle);
    internal bool IsNull(PropertyHandle handle);
    internal bool IsNull(PropertySignatureHandle handle);
    internal bool IsNull(QualifiedFieldHandle handle);
    internal bool IsNull(QualifiedMethodHandle handle);
    internal bool IsNull(SZArraySignatureHandle handle);
    internal bool IsNull(ScopeDefinitionHandle handle);
    internal bool IsNull(ScopeReferenceHandle handle);
    internal bool IsNull(TypeDefinitionHandle handle);
    internal bool IsNull(TypeForwarderHandle handle);
    internal bool IsNull(TypeInstantiationSignatureHandle handle);
    internal bool IsNull(TypeReferenceHandle handle);
    internal bool IsNull(TypeSpecificationHandle handle);
    internal bool IsNull(TypeVariableSignatureHandle handle);
}
public class Internal.Metadata.NativeFormat.Method : ValueType {
    internal MetadataReader _reader;
    internal MethodHandle _handle;
    internal MethodAttributes _flags;
    internal MethodImplAttributes _implFlags;
    internal ConstantStringValueHandle _name;
    internal MethodSignatureHandle _signature;
    internal ParameterHandleCollection _parameters;
    internal GenericParameterHandleCollection _genericParameters;
    internal CustomAttributeHandleCollection _customAttributes;
    public MethodHandle Handle { get; }
    public MethodAttributes Flags { get; }
    public MethodImplAttributes ImplFlags { get; }
    public ConstantStringValueHandle Name { get; }
    public MethodSignatureHandle Signature { get; }
    public ParameterHandleCollection Parameters { get; }
    public GenericParameterHandleCollection GenericParameters { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public MethodHandle get_Handle();
    public MethodAttributes get_Flags();
    public MethodImplAttributes get_ImplFlags();
    public ConstantStringValueHandle get_Name();
    public MethodSignatureHandle get_Signature();
    public ParameterHandleCollection get_Parameters();
    public GenericParameterHandleCollection get_GenericParameters();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.MethodHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal MethodHandle(Handle handle);
    internal MethodHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(MethodHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(MethodHandle handle);
    internal int get_Offset();
    public Method GetMethod(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.MethodHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal MethodHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.MethodImpl : ValueType {
    internal MetadataReader _reader;
    internal MethodImplHandle _handle;
    internal Handle _methodBody;
    internal Handle _methodDeclaration;
    public MethodImplHandle Handle { get; }
    public Handle MethodBody { get; }
    public Handle MethodDeclaration { get; }
    public MethodImplHandle get_Handle();
    public Handle get_MethodBody();
    public Handle get_MethodDeclaration();
}
public class Internal.Metadata.NativeFormat.MethodImplHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal MethodImplHandle(Handle handle);
    internal MethodImplHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(MethodImplHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(MethodImplHandle handle);
    internal int get_Offset();
    public MethodImpl GetMethodImpl(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.MethodImplHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal MethodImplHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.MethodInstantiation : ValueType {
    internal MetadataReader _reader;
    internal MethodInstantiationHandle _handle;
    internal Handle _method;
    internal HandleCollection _genericTypeArguments;
    internal CustomAttributeHandleCollection _customAttributes;
    public MethodInstantiationHandle Handle { get; }
    public Handle Method { get; }
    public HandleCollection GenericTypeArguments { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public MethodInstantiationHandle get_Handle();
    public Handle get_Method();
    public HandleCollection get_GenericTypeArguments();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.MethodInstantiationHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal MethodInstantiationHandle(Handle handle);
    internal MethodInstantiationHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(MethodInstantiationHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(MethodInstantiationHandle handle);
    internal int get_Offset();
    public MethodInstantiation GetMethodInstantiation(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.MethodSemantics : ValueType {
    internal MetadataReader _reader;
    internal MethodSemanticsHandle _handle;
    internal MethodSemanticsAttributes _attributes;
    internal MethodHandle _method;
    public MethodSemanticsHandle Handle { get; }
    public MethodSemanticsAttributes Attributes { get; }
    public MethodHandle Method { get; }
    public MethodSemanticsHandle get_Handle();
    public MethodSemanticsAttributes get_Attributes();
    public MethodHandle get_Method();
}
[FlagsAttribute]
public enum Internal.Metadata.NativeFormat.MethodSemanticsAttributes : Enum {
    public int value__;
    public static MethodSemanticsAttributes Setter;
    public static MethodSemanticsAttributes Getter;
    public static MethodSemanticsAttributes Other;
    public static MethodSemanticsAttributes AddOn;
    public static MethodSemanticsAttributes RemoveOn;
    public static MethodSemanticsAttributes Fire;
}
public class Internal.Metadata.NativeFormat.MethodSemanticsHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal MethodSemanticsHandle(Handle handle);
    internal MethodSemanticsHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(MethodSemanticsHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(MethodSemanticsHandle handle);
    internal int get_Offset();
    public MethodSemantics GetMethodSemantics(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.MethodSemanticsHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal MethodSemanticsHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.MethodSignature : ValueType {
    internal MetadataReader _reader;
    internal MethodSignatureHandle _handle;
    internal CallingConventions _callingConvention;
    internal int _genericParameterCount;
    internal Handle _returnType;
    internal HandleCollection _parameters;
    internal HandleCollection _varArgParameters;
    public MethodSignatureHandle Handle { get; }
    public CallingConventions CallingConvention { get; }
    public int GenericParameterCount { get; }
    public Handle ReturnType { get; }
    public HandleCollection Parameters { get; }
    public HandleCollection VarArgParameters { get; }
    public MethodSignatureHandle get_Handle();
    public CallingConventions get_CallingConvention();
    public int get_GenericParameterCount();
    public Handle get_ReturnType();
    public HandleCollection get_Parameters();
    public HandleCollection get_VarArgParameters();
}
public class Internal.Metadata.NativeFormat.MethodSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal MethodSignatureHandle(Handle handle);
    internal MethodSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(MethodSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(MethodSignatureHandle handle);
    internal int get_Offset();
    public MethodSignature GetMethodSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.MethodTypeVariableSignature : ValueType {
    internal MetadataReader _reader;
    internal MethodTypeVariableSignatureHandle _handle;
    internal int _number;
    public MethodTypeVariableSignatureHandle Handle { get; }
    public int Number { get; }
    public MethodTypeVariableSignatureHandle get_Handle();
    public int get_Number();
}
public class Internal.Metadata.NativeFormat.MethodTypeVariableSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal MethodTypeVariableSignatureHandle(Handle handle);
    internal MethodTypeVariableSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(MethodTypeVariableSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(MethodTypeVariableSignatureHandle handle);
    internal int get_Offset();
    public MethodTypeVariableSignature GetMethodTypeVariableSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ModifiedType : ValueType {
    internal MetadataReader _reader;
    internal ModifiedTypeHandle _handle;
    internal bool _isOptional;
    internal Handle _modifierType;
    internal Handle _type;
    public ModifiedTypeHandle Handle { get; }
    public bool IsOptional { get; }
    public Handle ModifierType { get; }
    public Handle Type { get; }
    public ModifiedTypeHandle get_Handle();
    public bool get_IsOptional();
    public Handle get_ModifierType();
    public Handle get_Type();
}
public class Internal.Metadata.NativeFormat.ModifiedTypeHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ModifiedTypeHandle(Handle handle);
    internal ModifiedTypeHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ModifiedTypeHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ModifiedTypeHandle handle);
    internal int get_Offset();
    public ModifiedType GetModifiedType(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.NamedArgument : ValueType {
    internal MetadataReader _reader;
    internal NamedArgumentHandle _handle;
    internal NamedArgumentMemberKind _flags;
    internal ConstantStringValueHandle _name;
    internal FixedArgumentHandle _value;
    public NamedArgumentHandle Handle { get; }
    public NamedArgumentMemberKind Flags { get; }
    public ConstantStringValueHandle Name { get; }
    public FixedArgumentHandle Value { get; }
    public NamedArgumentHandle get_Handle();
    public NamedArgumentMemberKind get_Flags();
    public ConstantStringValueHandle get_Name();
    public FixedArgumentHandle get_Value();
}
public class Internal.Metadata.NativeFormat.NamedArgumentHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal NamedArgumentHandle(Handle handle);
    internal NamedArgumentHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(NamedArgumentHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(NamedArgumentHandle handle);
    internal int get_Offset();
    public NamedArgument GetNamedArgument(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.NamedArgumentHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal NamedArgumentHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public enum Internal.Metadata.NativeFormat.NamedArgumentMemberKind : Enum {
    public byte value__;
    public static NamedArgumentMemberKind Property;
    public static NamedArgumentMemberKind Field;
}
public class Internal.Metadata.NativeFormat.NamespaceDefinition : ValueType {
    internal MetadataReader _reader;
    internal NamespaceDefinitionHandle _handle;
    internal Handle _parentScopeOrNamespace;
    internal ConstantStringValueHandle _name;
    internal TypeDefinitionHandleCollection _typeDefinitions;
    internal TypeForwarderHandleCollection _typeForwarders;
    internal NamespaceDefinitionHandleCollection _namespaceDefinitions;
    public NamespaceDefinitionHandle Handle { get; }
    public Handle ParentScopeOrNamespace { get; }
    public ConstantStringValueHandle Name { get; }
    public TypeDefinitionHandleCollection TypeDefinitions { get; }
    public TypeForwarderHandleCollection TypeForwarders { get; }
    public NamespaceDefinitionHandleCollection NamespaceDefinitions { get; }
    public NamespaceDefinitionHandle get_Handle();
    public Handle get_ParentScopeOrNamespace();
    public ConstantStringValueHandle get_Name();
    public TypeDefinitionHandleCollection get_TypeDefinitions();
    public TypeForwarderHandleCollection get_TypeForwarders();
    public NamespaceDefinitionHandleCollection get_NamespaceDefinitions();
}
public class Internal.Metadata.NativeFormat.NamespaceDefinitionHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal NamespaceDefinitionHandle(Handle handle);
    internal NamespaceDefinitionHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(NamespaceDefinitionHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(NamespaceDefinitionHandle handle);
    internal int get_Offset();
    public NamespaceDefinition GetNamespaceDefinition(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.NamespaceDefinitionHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal NamespaceDefinitionHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.NamespaceReference : ValueType {
    internal MetadataReader _reader;
    internal NamespaceReferenceHandle _handle;
    internal Handle _parentScopeOrNamespace;
    internal ConstantStringValueHandle _name;
    public NamespaceReferenceHandle Handle { get; }
    public Handle ParentScopeOrNamespace { get; }
    public ConstantStringValueHandle Name { get; }
    public NamespaceReferenceHandle get_Handle();
    public Handle get_ParentScopeOrNamespace();
    public ConstantStringValueHandle get_Name();
}
public class Internal.Metadata.NativeFormat.NamespaceReferenceHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal NamespaceReferenceHandle(Handle handle);
    internal NamespaceReferenceHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(NamespaceReferenceHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(NamespaceReferenceHandle handle);
    internal int get_Offset();
    public NamespaceReference GetNamespaceReference(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Internal.Metadata.NativeFormat.NativeFormatReaderExtensions : object {
    [ExtensionAttribute]
public static string GetString(MetadataReader reader, ConstantStringValueHandle handle);
}
public class Internal.Metadata.NativeFormat.Parameter : ValueType {
    internal MetadataReader _reader;
    internal ParameterHandle _handle;
    internal ParameterAttributes _flags;
    internal ushort _sequence;
    internal ConstantStringValueHandle _name;
    internal Handle _defaultValue;
    internal CustomAttributeHandleCollection _customAttributes;
    public ParameterHandle Handle { get; }
    public ParameterAttributes Flags { get; }
    public ushort Sequence { get; }
    public ConstantStringValueHandle Name { get; }
    public Handle DefaultValue { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public ParameterHandle get_Handle();
    public ParameterAttributes get_Flags();
    public ushort get_Sequence();
    public ConstantStringValueHandle get_Name();
    public Handle get_DefaultValue();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.ParameterHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ParameterHandle(Handle handle);
    internal ParameterHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ParameterHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ParameterHandle handle);
    internal int get_Offset();
    public Parameter GetParameter(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ParameterHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal ParameterHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
[FlagsAttribute]
public enum Internal.Metadata.NativeFormat.PInvokeAttributes : Enum {
    public int value__;
    public static PInvokeAttributes NoMangle;
    public static PInvokeAttributes CharSetMask;
    public static PInvokeAttributes CharSetNotSpec;
    public static PInvokeAttributes CharSetAnsi;
    public static PInvokeAttributes CharSetUnicode;
    public static PInvokeAttributes CharSetAuto;
    public static PInvokeAttributes BestFitUseAssem;
    public static PInvokeAttributes BestFitEnabled;
    public static PInvokeAttributes BestFitDisabled;
    public static PInvokeAttributes BestFitMask;
    public static PInvokeAttributes ThrowOnUnmappableCharUseAssem;
    public static PInvokeAttributes ThrowOnUnmappableCharEnabled;
    public static PInvokeAttributes ThrowOnUnmappableCharDisabled;
    public static PInvokeAttributes ThrowOnUnmappableCharMask;
    public static PInvokeAttributes SupportsLastError;
    public static PInvokeAttributes CallConvMask;
    public static PInvokeAttributes CallConvWinapi;
    public static PInvokeAttributes CallConvCdecl;
    public static PInvokeAttributes CallConvStdcall;
    public static PInvokeAttributes CallConvThiscall;
    public static PInvokeAttributes CallConvFastcall;
    public static PInvokeAttributes MaxValue;
}
public class Internal.Metadata.NativeFormat.PointerSignature : ValueType {
    internal MetadataReader _reader;
    internal PointerSignatureHandle _handle;
    internal Handle _type;
    public PointerSignatureHandle Handle { get; }
    public Handle Type { get; }
    public PointerSignatureHandle get_Handle();
    public Handle get_Type();
}
public class Internal.Metadata.NativeFormat.PointerSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal PointerSignatureHandle(Handle handle);
    internal PointerSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(PointerSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(PointerSignatureHandle handle);
    internal int get_Offset();
    public PointerSignature GetPointerSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Property : ValueType {
    internal MetadataReader _reader;
    internal PropertyHandle _handle;
    internal PropertyAttributes _flags;
    internal ConstantStringValueHandle _name;
    internal PropertySignatureHandle _signature;
    internal MethodSemanticsHandleCollection _methodSemantics;
    internal Handle _defaultValue;
    internal CustomAttributeHandleCollection _customAttributes;
    public PropertyHandle Handle { get; }
    public PropertyAttributes Flags { get; }
    public ConstantStringValueHandle Name { get; }
    public PropertySignatureHandle Signature { get; }
    public MethodSemanticsHandleCollection MethodSemantics { get; }
    public Handle DefaultValue { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public PropertyHandle get_Handle();
    public PropertyAttributes get_Flags();
    public ConstantStringValueHandle get_Name();
    public PropertySignatureHandle get_Signature();
    public MethodSemanticsHandleCollection get_MethodSemantics();
    public Handle get_DefaultValue();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.PropertyHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal PropertyHandle(Handle handle);
    internal PropertyHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(PropertyHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(PropertyHandle handle);
    internal int get_Offset();
    public Property GetProperty(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.PropertyHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal PropertyHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.PropertySignature : ValueType {
    internal MetadataReader _reader;
    internal PropertySignatureHandle _handle;
    internal CallingConventions _callingConvention;
    internal Handle _type;
    internal HandleCollection _parameters;
    public PropertySignatureHandle Handle { get; }
    public CallingConventions CallingConvention { get; }
    public Handle Type { get; }
    public HandleCollection Parameters { get; }
    public PropertySignatureHandle get_Handle();
    public CallingConventions get_CallingConvention();
    public Handle get_Type();
    public HandleCollection get_Parameters();
}
public class Internal.Metadata.NativeFormat.PropertySignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal PropertySignatureHandle(Handle handle);
    internal PropertySignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(PropertySignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(PropertySignatureHandle handle);
    internal int get_Offset();
    public PropertySignature GetPropertySignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.QualifiedField : ValueType {
    internal MetadataReader _reader;
    internal QualifiedFieldHandle _handle;
    internal FieldHandle _field;
    internal TypeDefinitionHandle _enclosingType;
    public QualifiedFieldHandle Handle { get; }
    public FieldHandle Field { get; }
    public TypeDefinitionHandle EnclosingType { get; }
    public QualifiedFieldHandle get_Handle();
    public FieldHandle get_Field();
    public TypeDefinitionHandle get_EnclosingType();
}
public class Internal.Metadata.NativeFormat.QualifiedFieldHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal QualifiedFieldHandle(Handle handle);
    internal QualifiedFieldHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(QualifiedFieldHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(QualifiedFieldHandle handle);
    internal int get_Offset();
    public QualifiedField GetQualifiedField(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.QualifiedMethod : ValueType {
    internal MetadataReader _reader;
    internal QualifiedMethodHandle _handle;
    internal MethodHandle _method;
    internal TypeDefinitionHandle _enclosingType;
    public QualifiedMethodHandle Handle { get; }
    public MethodHandle Method { get; }
    public TypeDefinitionHandle EnclosingType { get; }
    public QualifiedMethodHandle get_Handle();
    public MethodHandle get_Method();
    public TypeDefinitionHandle get_EnclosingType();
}
public class Internal.Metadata.NativeFormat.QualifiedMethodHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal QualifiedMethodHandle(Handle handle);
    internal QualifiedMethodHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(QualifiedMethodHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(QualifiedMethodHandle handle);
    internal int get_Offset();
    public QualifiedMethod GetQualifiedMethod(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.SByteCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal SByteCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.ScopeDefinition : ValueType {
    internal MetadataReader _reader;
    internal ScopeDefinitionHandle _handle;
    internal AssemblyFlags _flags;
    internal ConstantStringValueHandle _name;
    internal AssemblyHashAlgorithm _hashAlgorithm;
    internal ushort _majorVersion;
    internal ushort _minorVersion;
    internal ushort _buildNumber;
    internal ushort _revisionNumber;
    internal ByteCollection _publicKey;
    internal ConstantStringValueHandle _culture;
    internal NamespaceDefinitionHandle _rootNamespaceDefinition;
    internal QualifiedMethodHandle _entryPoint;
    internal TypeDefinitionHandle _globalModuleType;
    internal CustomAttributeHandleCollection _customAttributes;
    internal ConstantStringValueHandle _moduleName;
    internal ByteCollection _mvid;
    internal CustomAttributeHandleCollection _moduleCustomAttributes;
    public ScopeDefinitionHandle Handle { get; }
    public AssemblyFlags Flags { get; }
    public ConstantStringValueHandle Name { get; }
    public AssemblyHashAlgorithm HashAlgorithm { get; }
    public ushort MajorVersion { get; }
    public ushort MinorVersion { get; }
    public ushort BuildNumber { get; }
    public ushort RevisionNumber { get; }
    public ByteCollection PublicKey { get; }
    public ConstantStringValueHandle Culture { get; }
    public NamespaceDefinitionHandle RootNamespaceDefinition { get; }
    public QualifiedMethodHandle EntryPoint { get; }
    public TypeDefinitionHandle GlobalModuleType { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public ConstantStringValueHandle ModuleName { get; }
    public ByteCollection Mvid { get; }
    public CustomAttributeHandleCollection ModuleCustomAttributes { get; }
    public ScopeDefinitionHandle get_Handle();
    public AssemblyFlags get_Flags();
    public ConstantStringValueHandle get_Name();
    public AssemblyHashAlgorithm get_HashAlgorithm();
    public ushort get_MajorVersion();
    public ushort get_MinorVersion();
    public ushort get_BuildNumber();
    public ushort get_RevisionNumber();
    public ByteCollection get_PublicKey();
    public ConstantStringValueHandle get_Culture();
    public NamespaceDefinitionHandle get_RootNamespaceDefinition();
    public QualifiedMethodHandle get_EntryPoint();
    public TypeDefinitionHandle get_GlobalModuleType();
    public CustomAttributeHandleCollection get_CustomAttributes();
    public ConstantStringValueHandle get_ModuleName();
    public ByteCollection get_Mvid();
    public CustomAttributeHandleCollection get_ModuleCustomAttributes();
}
public class Internal.Metadata.NativeFormat.ScopeDefinitionHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ScopeDefinitionHandle(Handle handle);
    internal ScopeDefinitionHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ScopeDefinitionHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ScopeDefinitionHandle handle);
    internal int get_Offset();
    public ScopeDefinition GetScopeDefinition(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.ScopeDefinitionHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal ScopeDefinitionHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.ScopeReference : ValueType {
    internal MetadataReader _reader;
    internal ScopeReferenceHandle _handle;
    internal AssemblyFlags _flags;
    internal ConstantStringValueHandle _name;
    internal ushort _majorVersion;
    internal ushort _minorVersion;
    internal ushort _buildNumber;
    internal ushort _revisionNumber;
    internal ByteCollection _publicKeyOrToken;
    internal ConstantStringValueHandle _culture;
    internal CustomAttributeHandleCollection _customAttributes;
    public ScopeReferenceHandle Handle { get; }
    public AssemblyFlags Flags { get; }
    public ConstantStringValueHandle Name { get; }
    public ushort MajorVersion { get; }
    public ushort MinorVersion { get; }
    public ushort BuildNumber { get; }
    public ushort RevisionNumber { get; }
    public ByteCollection PublicKeyOrToken { get; }
    public ConstantStringValueHandle Culture { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public ScopeReferenceHandle get_Handle();
    public AssemblyFlags get_Flags();
    public ConstantStringValueHandle get_Name();
    public ushort get_MajorVersion();
    public ushort get_MinorVersion();
    public ushort get_BuildNumber();
    public ushort get_RevisionNumber();
    public ByteCollection get_PublicKeyOrToken();
    public ConstantStringValueHandle get_Culture();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.ScopeReferenceHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal ScopeReferenceHandle(Handle handle);
    internal ScopeReferenceHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(ScopeReferenceHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(ScopeReferenceHandle handle);
    internal int get_Offset();
    public ScopeReference GetScopeReference(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.SingleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal SingleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.SZArraySignature : ValueType {
    internal MetadataReader _reader;
    internal SZArraySignatureHandle _handle;
    internal Handle _elementType;
    public SZArraySignatureHandle Handle { get; }
    public Handle ElementType { get; }
    public SZArraySignatureHandle get_Handle();
    public Handle get_ElementType();
}
public class Internal.Metadata.NativeFormat.SZArraySignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal SZArraySignatureHandle(Handle handle);
    internal SZArraySignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(SZArraySignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(SZArraySignatureHandle handle);
    internal int get_Offset();
    public SZArraySignature GetSZArraySignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.TypeDefinition : ValueType {
    internal MetadataReader _reader;
    internal TypeDefinitionHandle _handle;
    internal TypeAttributes _flags;
    internal Handle _baseType;
    internal NamespaceDefinitionHandle _namespaceDefinition;
    internal ConstantStringValueHandle _name;
    internal UInt32 _size;
    internal ushort _packingSize;
    internal TypeDefinitionHandle _enclosingType;
    internal TypeDefinitionHandleCollection _nestedTypes;
    internal MethodHandleCollection _methods;
    internal FieldHandleCollection _fields;
    internal PropertyHandleCollection _properties;
    internal EventHandleCollection _events;
    internal GenericParameterHandleCollection _genericParameters;
    internal HandleCollection _interfaces;
    internal MethodImplHandleCollection _methodImpls;
    internal CustomAttributeHandleCollection _customAttributes;
    public TypeDefinitionHandle Handle { get; }
    public TypeAttributes Flags { get; }
    public Handle BaseType { get; }
    public NamespaceDefinitionHandle NamespaceDefinition { get; }
    public ConstantStringValueHandle Name { get; }
    public UInt32 Size { get; }
    public ushort PackingSize { get; }
    public TypeDefinitionHandle EnclosingType { get; }
    public TypeDefinitionHandleCollection NestedTypes { get; }
    public MethodHandleCollection Methods { get; }
    public FieldHandleCollection Fields { get; }
    public PropertyHandleCollection Properties { get; }
    public EventHandleCollection Events { get; }
    public GenericParameterHandleCollection GenericParameters { get; }
    public HandleCollection Interfaces { get; }
    public MethodImplHandleCollection MethodImpls { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public TypeDefinitionHandle get_Handle();
    public TypeAttributes get_Flags();
    public Handle get_BaseType();
    public NamespaceDefinitionHandle get_NamespaceDefinition();
    public ConstantStringValueHandle get_Name();
    public UInt32 get_Size();
    public ushort get_PackingSize();
    public TypeDefinitionHandle get_EnclosingType();
    public TypeDefinitionHandleCollection get_NestedTypes();
    public MethodHandleCollection get_Methods();
    public FieldHandleCollection get_Fields();
    public PropertyHandleCollection get_Properties();
    public EventHandleCollection get_Events();
    public GenericParameterHandleCollection get_GenericParameters();
    public HandleCollection get_Interfaces();
    public MethodImplHandleCollection get_MethodImpls();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.TypeDefinitionHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal TypeDefinitionHandle(Handle handle);
    internal TypeDefinitionHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(TypeDefinitionHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(TypeDefinitionHandle handle);
    internal int get_Offset();
    public TypeDefinition GetTypeDefinition(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.TypeDefinitionHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal TypeDefinitionHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.TypeForwarder : ValueType {
    internal MetadataReader _reader;
    internal TypeForwarderHandle _handle;
    internal ScopeReferenceHandle _scope;
    internal ConstantStringValueHandle _name;
    internal TypeForwarderHandleCollection _nestedTypes;
    internal CustomAttributeHandleCollection _customAttributes;
    public TypeForwarderHandle Handle { get; }
    public ScopeReferenceHandle Scope { get; }
    public ConstantStringValueHandle Name { get; }
    public TypeForwarderHandleCollection NestedTypes { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public TypeForwarderHandle get_Handle();
    public ScopeReferenceHandle get_Scope();
    public ConstantStringValueHandle get_Name();
    public TypeForwarderHandleCollection get_NestedTypes();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.TypeForwarderHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal TypeForwarderHandle(Handle handle);
    internal TypeForwarderHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(TypeForwarderHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(TypeForwarderHandle handle);
    internal int get_Offset();
    public TypeForwarder GetTypeForwarder(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.TypeForwarderHandleCollection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal TypeForwarderHandleCollection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.TypeInstantiationSignature : ValueType {
    internal MetadataReader _reader;
    internal TypeInstantiationSignatureHandle _handle;
    internal Handle _genericType;
    internal HandleCollection _genericTypeArguments;
    public TypeInstantiationSignatureHandle Handle { get; }
    public Handle GenericType { get; }
    public HandleCollection GenericTypeArguments { get; }
    public TypeInstantiationSignatureHandle get_Handle();
    public Handle get_GenericType();
    public HandleCollection get_GenericTypeArguments();
}
public class Internal.Metadata.NativeFormat.TypeInstantiationSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal TypeInstantiationSignatureHandle(Handle handle);
    internal TypeInstantiationSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(TypeInstantiationSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(TypeInstantiationSignatureHandle handle);
    internal int get_Offset();
    public TypeInstantiationSignature GetTypeInstantiationSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.TypeReference : ValueType {
    internal MetadataReader _reader;
    internal TypeReferenceHandle _handle;
    internal Handle _parentNamespaceOrType;
    internal ConstantStringValueHandle _typeName;
    internal CustomAttributeHandleCollection _customAttributes;
    public TypeReferenceHandle Handle { get; }
    public Handle ParentNamespaceOrType { get; }
    public ConstantStringValueHandle TypeName { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public TypeReferenceHandle get_Handle();
    public Handle get_ParentNamespaceOrType();
    public ConstantStringValueHandle get_TypeName();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.TypeReferenceHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal TypeReferenceHandle(Handle handle);
    internal TypeReferenceHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(TypeReferenceHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(TypeReferenceHandle handle);
    internal int get_Offset();
    public TypeReference GetTypeReference(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.TypeSpecification : ValueType {
    internal MetadataReader _reader;
    internal TypeSpecificationHandle _handle;
    internal Handle _signature;
    internal CustomAttributeHandleCollection _customAttributes;
    public TypeSpecificationHandle Handle { get; }
    public Handle Signature { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public TypeSpecificationHandle get_Handle();
    public Handle get_Signature();
    public CustomAttributeHandleCollection get_CustomAttributes();
}
public class Internal.Metadata.NativeFormat.TypeSpecificationHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal TypeSpecificationHandle(Handle handle);
    internal TypeSpecificationHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(TypeSpecificationHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(TypeSpecificationHandle handle);
    internal int get_Offset();
    public TypeSpecification GetTypeSpecification(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.TypeVariableSignature : ValueType {
    internal MetadataReader _reader;
    internal TypeVariableSignatureHandle _handle;
    internal int _number;
    public TypeVariableSignatureHandle Handle { get; }
    public int Number { get; }
    public TypeVariableSignatureHandle get_Handle();
    public int get_Number();
}
public class Internal.Metadata.NativeFormat.TypeVariableSignatureHandle : ValueType {
    internal int _value;
    internal int Offset { get; }
    internal TypeVariableSignatureHandle(Handle handle);
    internal TypeVariableSignatureHandle(int value);
    public virtual bool Equals(object obj);
    public bool Equals(TypeVariableSignatureHandle handle);
    public bool Equals(Handle handle);
    public virtual int GetHashCode();
    public static Handle op_Implicit(TypeVariableSignatureHandle handle);
    internal int get_Offset();
    public TypeVariableSignature GetTypeVariableSignature(MetadataReader reader);
    public bool IsNull(MetadataReader reader);
    public Handle ToHandle(MetadataReader reader);
    [ConditionalAttribute("DEBUG")]
internal void _Validate();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.UInt16Collection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal UInt16Collection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.UInt32Collection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal UInt32Collection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
public class Internal.Metadata.NativeFormat.UInt64Collection : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public int Count { get; }
    internal UInt64Collection(NativeReader reader, UInt32 offset);
    public int get_Count();
    public Enumerator GetEnumerator();
}
internal class Internal.Metadata.NativeFormat.Writer.AdjacencyGraph : object {
    private HashSet`1<MetadataRecord> _vertices;
    public IEnumerable`1<MetadataRecord> Vertices { get; }
    public void AddVertex(MetadataRecord v);
    public bool ContainsVertex(MetadataRecord v);
    public IEnumerable`1<MetadataRecord> get_Vertices();
}
public class Internal.Metadata.NativeFormat.Writer.ArraySignature : MetadataRecord {
    public MetadataRecord ElementType;
    public int Rank;
    public Int32[] Sizes;
    public Int32[] LowerBounds;
    public HandleType HandleType { get; }
    internal ArraySignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ArraySignatureHandle AsHandle(ArraySignature record);
    internal ArraySignatureHandle get_Handle();
    public virtual string ToString();
}
public abstract class Internal.Metadata.NativeFormat.Writer.Blob : MetadataRecord {
}
public class Internal.Metadata.NativeFormat.Writer.ByReferenceSignature : MetadataRecord {
    public MetadataRecord Type;
    public HandleType HandleType { get; }
    internal ByReferenceSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ByReferenceSignatureHandle AsHandle(ByReferenceSignature record);
    internal ByReferenceSignatureHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantBooleanArray : MetadataRecord {
    public Boolean[] Value;
    public HandleType HandleType { get; }
    internal ConstantBooleanArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantBooleanArrayHandle AsHandle(ConstantBooleanArray record);
    internal ConstantBooleanArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantBooleanValue : MetadataRecord {
    public bool Value;
    public HandleType HandleType { get; }
    internal ConstantBooleanValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantBooleanValueHandle AsHandle(ConstantBooleanValue record);
    internal ConstantBooleanValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantBoxedEnumValue : MetadataRecord {
    public MetadataRecord Value;
    public MetadataRecord Type;
    public HandleType HandleType { get; }
    internal ConstantBoxedEnumValueHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantBoxedEnumValueHandle AsHandle(ConstantBoxedEnumValue record);
    internal ConstantBoxedEnumValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantByteArray : MetadataRecord {
    public Byte[] Value;
    public HandleType HandleType { get; }
    internal ConstantByteArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantByteArrayHandle AsHandle(ConstantByteArray record);
    internal ConstantByteArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantByteValue : MetadataRecord {
    public byte Value;
    public HandleType HandleType { get; }
    internal ConstantByteValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantByteValueHandle AsHandle(ConstantByteValue record);
    internal ConstantByteValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantCharArray : MetadataRecord {
    public Char[] Value;
    public HandleType HandleType { get; }
    internal ConstantCharArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantCharArrayHandle AsHandle(ConstantCharArray record);
    internal ConstantCharArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantCharValue : MetadataRecord {
    public char Value;
    public HandleType HandleType { get; }
    internal ConstantCharValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantCharValueHandle AsHandle(ConstantCharValue record);
    internal ConstantCharValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantDoubleArray : MetadataRecord {
    public Double[] Value;
    public HandleType HandleType { get; }
    internal ConstantDoubleArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantDoubleArrayHandle AsHandle(ConstantDoubleArray record);
    internal ConstantDoubleArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantDoubleValue : MetadataRecord {
    public double Value;
    public HandleType HandleType { get; }
    internal ConstantDoubleValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantDoubleValueHandle AsHandle(ConstantDoubleValue record);
    internal ConstantDoubleValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantEnumArray : MetadataRecord {
    public MetadataRecord ElementType;
    public MetadataRecord Value;
    public HandleType HandleType { get; }
    internal ConstantEnumArrayHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantEnumArrayHandle AsHandle(ConstantEnumArray record);
    internal ConstantEnumArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantHandleArray : MetadataRecord {
    public List`1<MetadataRecord> Value;
    public HandleType HandleType { get; }
    internal ConstantHandleArrayHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantHandleArrayHandle AsHandle(ConstantHandleArray record);
    internal ConstantHandleArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantInt16Array : MetadataRecord {
    public Int16[] Value;
    public HandleType HandleType { get; }
    internal ConstantInt16ArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantInt16ArrayHandle AsHandle(ConstantInt16Array record);
    internal ConstantInt16ArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantInt16Value : MetadataRecord {
    public short Value;
    public HandleType HandleType { get; }
    internal ConstantInt16ValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantInt16ValueHandle AsHandle(ConstantInt16Value record);
    internal ConstantInt16ValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantInt32Array : MetadataRecord {
    public Int32[] Value;
    public HandleType HandleType { get; }
    internal ConstantInt32ArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantInt32ArrayHandle AsHandle(ConstantInt32Array record);
    internal ConstantInt32ArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantInt32Value : MetadataRecord {
    public int Value;
    public HandleType HandleType { get; }
    internal ConstantInt32ValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantInt32ValueHandle AsHandle(ConstantInt32Value record);
    internal ConstantInt32ValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantInt64Array : MetadataRecord {
    public Int64[] Value;
    public HandleType HandleType { get; }
    internal ConstantInt64ArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantInt64ArrayHandle AsHandle(ConstantInt64Array record);
    internal ConstantInt64ArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantInt64Value : MetadataRecord {
    public long Value;
    public HandleType HandleType { get; }
    internal ConstantInt64ValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantInt64ValueHandle AsHandle(ConstantInt64Value record);
    internal ConstantInt64ValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantReferenceValue : MetadataRecord {
    public HandleType HandleType { get; }
    internal ConstantReferenceValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantReferenceValueHandle AsHandle(ConstantReferenceValue record);
    internal ConstantReferenceValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantSByteArray : MetadataRecord {
    public SByte[] Value;
    public HandleType HandleType { get; }
    internal ConstantSByteArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantSByteArrayHandle AsHandle(ConstantSByteArray record);
    internal ConstantSByteArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantSByteValue : MetadataRecord {
    public sbyte Value;
    public HandleType HandleType { get; }
    internal ConstantSByteValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantSByteValueHandle AsHandle(ConstantSByteValue record);
    internal ConstantSByteValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantSingleArray : MetadataRecord {
    public Single[] Value;
    public HandleType HandleType { get; }
    internal ConstantSingleArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantSingleArrayHandle AsHandle(ConstantSingleArray record);
    internal ConstantSingleArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantSingleValue : MetadataRecord {
    public float Value;
    public HandleType HandleType { get; }
    internal ConstantSingleValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantSingleValueHandle AsHandle(ConstantSingleValue record);
    internal ConstantSingleValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantStringArray : MetadataRecord {
    public List`1<MetadataRecord> Value;
    public HandleType HandleType { get; }
    internal ConstantStringArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantStringArrayHandle AsHandle(ConstantStringArray record);
    internal ConstantStringArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantStringValue : MetadataRecord {
    public string Value;
    public HandleType HandleType { get; }
    internal ConstantStringValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantStringValueHandle AsHandle(ConstantStringValue record);
    internal ConstantStringValueHandle get_Handle();
    public static string op_Explicit(ConstantStringValue value);
    public static ConstantStringValue op_Explicit(string value);
}
public class Internal.Metadata.NativeFormat.Writer.ConstantUInt16Array : MetadataRecord {
    public UInt16[] Value;
    public HandleType HandleType { get; }
    internal ConstantUInt16ArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantUInt16ArrayHandle AsHandle(ConstantUInt16Array record);
    internal ConstantUInt16ArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantUInt16Value : MetadataRecord {
    public ushort Value;
    public HandleType HandleType { get; }
    internal ConstantUInt16ValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantUInt16ValueHandle AsHandle(ConstantUInt16Value record);
    internal ConstantUInt16ValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantUInt32Array : MetadataRecord {
    public UInt32[] Value;
    public HandleType HandleType { get; }
    internal ConstantUInt32ArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantUInt32ArrayHandle AsHandle(ConstantUInt32Array record);
    internal ConstantUInt32ArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantUInt32Value : MetadataRecord {
    public UInt32 Value;
    public HandleType HandleType { get; }
    internal ConstantUInt32ValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantUInt32ValueHandle AsHandle(ConstantUInt32Value record);
    internal ConstantUInt32ValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantUInt64Array : MetadataRecord {
    public UInt64[] Value;
    public HandleType HandleType { get; }
    internal ConstantUInt64ArrayHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantUInt64ArrayHandle AsHandle(ConstantUInt64Array record);
    internal ConstantUInt64ArrayHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.ConstantUInt64Value : MetadataRecord {
    public ulong Value;
    public HandleType HandleType { get; }
    internal ConstantUInt64ValueHandle Handle { get; }
    public virtual string ToString();
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ConstantUInt64ValueHandle AsHandle(ConstantUInt64Value record);
    internal ConstantUInt64ValueHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.CustomAttribute : MetadataRecord {
    private ThreadLocal`1<ReentrancyGuardStack> _equalsReentrancyGuard;
    public MetadataRecord Constructor;
    public List`1<FixedArgument> FixedArguments;
    public List`1<NamedArgument> NamedArguments;
    public HandleType HandleType { get; }
    internal CustomAttributeHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static CustomAttributeHandle AsHandle(CustomAttribute record);
    internal CustomAttributeHandle get_Handle();
    public virtual string ToString();
}
public static class Internal.Metadata.NativeFormat.Writer.CustomComparer : object {
    public static bool Equals(float x, float y);
    public static bool Equals(double x, double y);
}
[ExtensionAttribute]
public static class Internal.Metadata.NativeFormat.Writer.DictionaryExtensions : object {
    [ExtensionAttribute]
internal static T FirstOrDefault(Dictionary`2<string, T> dict);
    [ExtensionAttribute]
internal static T First(Dictionary`2<string, T> dict);
    [IteratorStateMachineAttribute("Internal.Metadata.NativeFormat.Writer.DictionaryExtensions/<AsSingleEnumerable>d__2`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> AsSingleEnumerable(T value);
}
public class Internal.Metadata.NativeFormat.Writer.DoubleComparer : object {
    public static DoubleComparer Instance;
    private static DoubleComparer();
    public sealed virtual bool Equals(double x, double y);
    public sealed virtual int GetHashCode(double obj);
}
internal class Internal.Metadata.NativeFormat.Writer.Edge : object {
    public MetadataRecord Source;
    public MetadataRecord Target;
    public Edge(MetadataRecord source, MetadataRecord target);
}
[ExtensionAttribute]
public static class Internal.Metadata.NativeFormat.Writer.EnumHelpers : object {
    [ExtensionAttribute]
public static string FlagsToString(T value);
}
public class Internal.Metadata.NativeFormat.Writer.Event : MetadataRecord {
    public EventAttributes Flags;
    public ConstantStringValue Name;
    public MetadataRecord Type;
    public List`1<MethodSemantics> MethodSemantics;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal EventHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static EventHandle AsHandle(Event record);
    internal EventHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.Field : MetadataRecord {
    public FieldAttributes Flags;
    public ConstantStringValue Name;
    public FieldSignature Signature;
    public MetadataRecord DefaultValue;
    public UInt32 Offset;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal FieldHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static FieldHandle AsHandle(Field record);
    internal FieldHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.FieldSignature : MetadataRecord {
    public MetadataRecord Type;
    public HandleType HandleType { get; }
    internal FieldSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static FieldSignatureHandle AsHandle(FieldSignature record);
    internal FieldSignatureHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.FixedArgument : MetadataRecord {
    public FixedArgumentAttributes Flags;
    public MetadataRecord Type;
    public MetadataRecord Value;
    public HandleType HandleType { get; }
    internal FixedArgumentHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static FixedArgumentHandle AsHandle(FixedArgument record);
    internal FixedArgumentHandle get_Handle();
    private static bool IsConstantArray(MetadataRecord rec);
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.FunctionPointerSignature : MetadataRecord {
    public MethodSignature Signature;
    public HandleType HandleType { get; }
    internal FunctionPointerSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static FunctionPointerSignatureHandle AsHandle(FunctionPointerSignature record);
    internal FunctionPointerSignatureHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.GenericParameter : MetadataRecord {
    public ushort Number;
    public GenericParameterAttributes Flags;
    public GenericParameterKind Kind;
    public ConstantStringValue Name;
    public List`1<MetadataRecord> Constraints;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal GenericParameterHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static GenericParameterHandle AsHandle(GenericParameter record);
    internal GenericParameterHandle get_Handle();
    public virtual string ToString();
}
public interface Internal.Metadata.NativeFormat.Writer.ICustomAttributeMetadataRecord {
    public abstract virtual IList`1<CustomAttribute> GetCustomAttributes();
}
internal interface Internal.Metadata.NativeFormat.Writer.IRecordVisitor {
    public abstract virtual DstT Visit(SrcT src, DstT dst);
    public abstract virtual Dictionary`2<string, DstT> Visit(SrcT src, IEnumerable`1<KeyValuePair`2<string, DstT>> dst);
    public abstract virtual List`1<DstT> Visit(SrcT src, List`1<DstT> dst);
}
[ExtensionAttribute]
public static class Internal.Metadata.NativeFormat.Writer.ListExtensions : object {
    [ExtensionAttribute]
public static T FirstOrDefault(List`1<T> list);
    [ExtensionAttribute]
public static T First(List`1<T> list);
}
[ExtensionAttribute]
internal static class Internal.Metadata.NativeFormat.Writer.MdBinaryWriter : object {
    [ExtensionAttribute]
public static void Write(NativeWriter writer, bool value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, byte value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, sbyte value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, short value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ushort value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, int value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, UInt32 value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ulong value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, long value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, string value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, char value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, float value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, double value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MetadataRecord record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Boolean[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Char[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Byte[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, SByte[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Int16[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, UInt16[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Int32[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, UInt32[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Int64[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, UInt64[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Single[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Double[] values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, AssemblyFlags value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, AssemblyHashAlgorithm value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, CallingConventions value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, EventAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, FieldAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, FixedArgumentAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, GenericParameterAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, GenericParameterKind value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodImplAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodSemanticsAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, NamedArgumentMemberKind value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ParameterAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, PInvokeAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, PropertyAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, TypeAttributes value);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<MetadataRecord> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ArraySignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ArraySignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ByReferenceSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ByReferenceSignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantBooleanArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantBooleanArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantBooleanValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantBooleanValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantBoxedEnumValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantBoxedEnumValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantByteArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantByteArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantByteValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantByteValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantCharArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantCharArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantCharValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantCharValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantDoubleArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantDoubleArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantDoubleValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantDoubleValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantEnumArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantEnumArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantHandleArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantHandleArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantInt16Array record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantInt16Array> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantInt16Value record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantInt16Value> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantInt32Array record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantInt32Array> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantInt32Value record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantInt32Value> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantInt64Array record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantInt64Array> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantInt64Value record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantInt64Value> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantReferenceValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantReferenceValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantSByteArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantSByteArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantSByteValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantSByteValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantSingleArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantSingleArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantSingleValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantSingleValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantStringArray record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantStringArray> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantStringValue record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantStringValue> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantUInt16Array record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantUInt16Array> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantUInt16Value record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantUInt16Value> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantUInt32Array record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantUInt32Array> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantUInt32Value record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantUInt32Value> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantUInt64Array record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantUInt64Array> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ConstantUInt64Value record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ConstantUInt64Value> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, CustomAttribute record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<CustomAttribute> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Event record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<Event> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Field record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<Field> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, FieldSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<FieldSignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, FixedArgument record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<FixedArgument> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, FunctionPointerSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<FunctionPointerSignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, GenericParameter record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<GenericParameter> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MemberReference record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<MemberReference> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Method record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<Method> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodImpl record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<MethodImpl> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodInstantiation record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<MethodInstantiation> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodSemantics record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<MethodSemantics> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<MethodSignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, MethodTypeVariableSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<MethodTypeVariableSignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ModifiedType record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ModifiedType> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, NamedArgument record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<NamedArgument> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, NamespaceDefinition record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<NamespaceDefinition> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, NamespaceReference record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<NamespaceReference> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Parameter record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<Parameter> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, PointerSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<PointerSignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, Property record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<Property> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, PropertySignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<PropertySignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, QualifiedField record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<QualifiedField> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, QualifiedMethod record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<QualifiedMethod> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, SZArraySignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<SZArraySignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ScopeDefinition record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ScopeDefinition> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, ScopeReference record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<ScopeReference> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, TypeDefinition record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<TypeDefinition> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, TypeForwarder record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<TypeForwarder> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, TypeInstantiationSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<TypeInstantiationSignature> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, TypeReference record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<TypeReference> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, TypeSpecification record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<TypeSpecification> values);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, TypeVariableSignature record);
    [ExtensionAttribute]
public static void Write(NativeWriter writer, List`1<TypeVariableSignature> values);
}
public class Internal.Metadata.NativeFormat.Writer.MemberReference : MetadataRecord {
    public MetadataRecord Parent;
    public ConstantStringValue Name;
    public MetadataRecord Signature;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal MemberReferenceHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static MemberReferenceHandle AsHandle(MemberReference record);
    internal MemberReferenceHandle get_Handle();
    public virtual string ToString();
}
internal class Internal.Metadata.NativeFormat.Writer.MetadataHeader : MetadataRecord {
    public static UInt32 Signature;
    public List`1<ScopeDefinition> ScopeDefinitions;
    public HandleType HandleType { get; }
    internal virtual void Save(NativeWriter writer);
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
}
public abstract class Internal.Metadata.NativeFormat.Writer.MetadataRecord : Vertex {
    protected int _hash;
    private bool _gettingHashCode;
    public HandleType HandleType { get; }
    internal int HandleOffset { get; }
    internal Handle Handle { get; }
    [ConditionalAttribute("DEBUG")]
protected void EnterGetHashCode();
    [ConditionalAttribute("DEBUG")]
protected void LeaveGetHashCode();
    public abstract virtual HandleType get_HandleType();
    internal int get_HandleOffset();
    internal Handle get_Handle();
    internal abstract virtual void Visit(IRecordVisitor visitor);
    public virtual string ToString();
    public virtual string ToString(bool includeHandleValue);
    protected static string ToString(IEnumerable`1<T> arr, string sep, bool includeHandleValue);
}
public class Internal.Metadata.NativeFormat.Writer.MetadataWriter : object {
    internal MetadataHeader _metadataHeader;
    [CompilerGeneratedAttribute]
private List`1<MetadataRecord> <AdditionalRootRecords>k__BackingField;
    private RecordVisitor _visitor;
    public TextWriter LogWriter;
    public List`1<MetadataRecord> AdditionalRootRecords { get; private set; }
    public List`1<ScopeDefinition> ScopeDefinitions { get; }
    [CompilerGeneratedAttribute]
public List`1<MetadataRecord> get_AdditionalRootRecords();
    [CompilerGeneratedAttribute]
private void set_AdditionalRootRecords(List`1<MetadataRecord> value);
    public List`1<ScopeDefinition> get_ScopeDefinitions();
    public int GetRecordHandle(MetadataRecord rec);
    public void Write(Stream stream);
    [CompilerGeneratedAttribute]
private bool <Write>b__10_0(MetadataRecord v);
}
public class Internal.Metadata.NativeFormat.Writer.Method : MetadataRecord {
    public MethodAttributes Flags;
    public MethodImplAttributes ImplFlags;
    public ConstantStringValue Name;
    public MethodSignature Signature;
    public List`1<Parameter> Parameters;
    public List`1<GenericParameter> GenericParameters;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal MethodHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static MethodHandle AsHandle(Method record);
    internal MethodHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.MethodImpl : MetadataRecord {
    public MetadataRecord MethodBody;
    public MetadataRecord MethodDeclaration;
    public HandleType HandleType { get; }
    internal MethodImplHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static MethodImplHandle AsHandle(MethodImpl record);
    internal MethodImplHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.MethodInstantiation : MetadataRecord {
    public MetadataRecord Method;
    public List`1<MetadataRecord> GenericTypeArguments;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal MethodInstantiationHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static MethodInstantiationHandle AsHandle(MethodInstantiation record);
    internal MethodInstantiationHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.MethodSemantics : MetadataRecord {
    public MethodSemanticsAttributes Attributes;
    public Method Method;
    public HandleType HandleType { get; }
    internal MethodSemanticsHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static MethodSemanticsHandle AsHandle(MethodSemantics record);
    internal MethodSemanticsHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.MethodSignature : MetadataRecord {
    public CallingConventions CallingConvention;
    public int GenericParameterCount;
    public MetadataRecord ReturnType;
    public List`1<MetadataRecord> Parameters;
    public List`1<MetadataRecord> VarArgParameters;
    public HandleType HandleType { get; }
    internal MethodSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static MethodSignatureHandle AsHandle(MethodSignature record);
    internal MethodSignatureHandle get_Handle();
    public virtual string ToString();
    public string ToString(string name);
}
public class Internal.Metadata.NativeFormat.Writer.MethodTypeVariableSignature : MetadataRecord {
    public int Number;
    public HandleType HandleType { get; }
    internal MethodTypeVariableSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static MethodTypeVariableSignatureHandle AsHandle(MethodTypeVariableSignature record);
    internal MethodTypeVariableSignatureHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.ModifiedType : MetadataRecord {
    public bool IsOptional;
    public MetadataRecord ModifierType;
    public MetadataRecord Type;
    public HandleType HandleType { get; }
    internal ModifiedTypeHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ModifiedTypeHandle AsHandle(ModifiedType record);
    internal ModifiedTypeHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.NamedArgument : MetadataRecord {
    public NamedArgumentMemberKind Flags;
    public ConstantStringValue Name;
    public FixedArgument Value;
    public HandleType HandleType { get; }
    internal NamedArgumentHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static NamedArgumentHandle AsHandle(NamedArgument record);
    internal NamedArgumentHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.NamespaceDefinition : MetadataRecord {
    public MetadataRecord ParentScopeOrNamespace;
    public ConstantStringValue Name;
    public List`1<TypeDefinition> TypeDefinitions;
    public List`1<TypeForwarder> TypeForwarders;
    public List`1<NamespaceDefinition> NamespaceDefinitions;
    public HandleType HandleType { get; }
    internal NamespaceDefinitionHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static NamespaceDefinitionHandle AsHandle(NamespaceDefinition record);
    internal NamespaceDefinitionHandle get_Handle();
    public virtual string ToString();
    public virtual string ToString(bool includeHandleValue);
}
public class Internal.Metadata.NativeFormat.Writer.NamespaceReference : MetadataRecord {
    public MetadataRecord ParentScopeOrNamespace;
    public ConstantStringValue Name;
    public HandleType HandleType { get; }
    internal NamespaceReferenceHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static NamespaceReferenceHandle AsHandle(NamespaceReference record);
    internal NamespaceReferenceHandle get_Handle();
    public virtual string ToString();
    public virtual string ToString(bool includeHandleValue);
}
public class Internal.Metadata.NativeFormat.Writer.Parameter : MetadataRecord {
    public ParameterAttributes Flags;
    public ushort Sequence;
    public ConstantStringValue Name;
    public MetadataRecord DefaultValue;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal ParameterHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ParameterHandle AsHandle(Parameter record);
    internal ParameterHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.PointerSignature : MetadataRecord {
    public MetadataRecord Type;
    public HandleType HandleType { get; }
    internal PointerSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static PointerSignatureHandle AsHandle(PointerSignature record);
    internal PointerSignatureHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.Property : MetadataRecord {
    public PropertyAttributes Flags;
    public ConstantStringValue Name;
    public PropertySignature Signature;
    public List`1<MethodSemantics> MethodSemantics;
    public MetadataRecord DefaultValue;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal PropertyHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static PropertyHandle AsHandle(Property record);
    internal PropertyHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.PropertySignature : MetadataRecord {
    public CallingConventions CallingConvention;
    public MetadataRecord Type;
    public List`1<MetadataRecord> Parameters;
    public HandleType HandleType { get; }
    internal PropertySignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static PropertySignatureHandle AsHandle(PropertySignature record);
    internal PropertySignatureHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.QualifiedField : MetadataRecord {
    public Field Field;
    public TypeDefinition EnclosingType;
    public HandleType HandleType { get; }
    internal QualifiedFieldHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static QualifiedFieldHandle AsHandle(QualifiedField record);
    internal QualifiedFieldHandle get_Handle();
}
public class Internal.Metadata.NativeFormat.Writer.QualifiedMethod : MetadataRecord {
    public Method Method;
    public TypeDefinition EnclosingType;
    public HandleType HandleType { get; }
    internal QualifiedMethodHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static QualifiedMethodHandle AsHandle(QualifiedMethod record);
    internal QualifiedMethodHandle get_Handle();
    public virtual string ToString();
}
internal class Internal.Metadata.NativeFormat.Writer.RecordVisitor : RecordVisitorBase {
}
internal abstract class Internal.Metadata.NativeFormat.Writer.RecordVisitorBase : object {
    private Dictionary`2<MetadataRecord, MetadataRecord> _recordPool;
    protected Queue`1<MetadataRecord> _queue;
    protected AdjacencyGraph _graph;
    public MetadataRecord MetaSourceVertex;
    public AdjacencyGraph Graph { get; }
    internal T MapToPooledRecord(T rec);
    private T GetPooledRecord(T rec);
    public T Visit(T rec);
    public sealed virtual Dictionary`2<string, DstT> Visit(SrcT src, IEnumerable`1<KeyValuePair`2<string, DstT>> dst);
    public void Run(IEnumerable`1<MetadataRecord> records);
    public sealed virtual List`1<DstT> Visit(SrcT src, List`1<DstT> dst);
    public sealed virtual DstT Visit(SrcT src, DstT dst);
    internal DstT Visit(SrcT src, DstT dst, bool isChild);
    public AdjacencyGraph get_Graph();
}
internal class Internal.Metadata.NativeFormat.Writer.ReentrancyGuardStack : object {
    private MetadataRecord[] _array;
    private int _size;
    public bool Contains(MetadataRecord item);
    public MetadataRecord Pop();
    public void Push(MetadataRecord item);
}
public class Internal.Metadata.NativeFormat.Writer.ScopeDefinition : MetadataRecord {
    public AssemblyFlags Flags;
    public ConstantStringValue Name;
    public AssemblyHashAlgorithm HashAlgorithm;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public ushort BuildNumber;
    public ushort RevisionNumber;
    public Byte[] PublicKey;
    public ConstantStringValue Culture;
    public NamespaceDefinition RootNamespaceDefinition;
    public QualifiedMethod EntryPoint;
    public TypeDefinition GlobalModuleType;
    public List`1<CustomAttribute> CustomAttributes;
    public ConstantStringValue ModuleName;
    public Byte[] Mvid;
    public List`1<CustomAttribute> ModuleCustomAttributes;
    public HandleType HandleType { get; }
    internal ScopeDefinitionHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ScopeDefinitionHandle AsHandle(ScopeDefinition record);
    internal ScopeDefinitionHandle get_Handle();
    public virtual string ToString();
    public virtual string ToString(bool includeHandleValue);
}
public class Internal.Metadata.NativeFormat.Writer.ScopeReference : MetadataRecord {
    public AssemblyFlags Flags;
    public ConstantStringValue Name;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public ushort BuildNumber;
    public ushort RevisionNumber;
    public Byte[] PublicKeyOrToken;
    public ConstantStringValue Culture;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal ScopeReferenceHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static ScopeReferenceHandle AsHandle(ScopeReference record);
    internal ScopeReferenceHandle get_Handle();
    public virtual string ToString();
    public virtual string ToString(bool includeHandleValue);
}
[ExtensionAttribute]
public static class Internal.Metadata.NativeFormat.Writer.SequenceExtensions : object {
    [ExtensionAttribute]
public static bool SequenceEqual(List`1<T> first, List`1<T> second);
    [ExtensionAttribute]
public static bool SequenceEqual(List`1<T> first, List`1<T> second, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool SequenceEqual(T[] first, T[] second);
    [ExtensionAttribute]
public static bool SequenceEqual(T[] first, T[] second, IEqualityComparer`1<T> comparer);
}
[ExtensionAttribute]
public static class Internal.Metadata.NativeFormat.Writer.SignatureHelpers : object {
    [ExtensionAttribute]
public static SZArraySignature AsSZArray(MetadataRecord record);
}
public class Internal.Metadata.NativeFormat.Writer.SingleComparer : object {
    public static SingleComparer Instance;
    private static SingleComparer();
    public sealed virtual bool Equals(float x, float y);
    public sealed virtual int GetHashCode(float obj);
}
internal class Internal.Metadata.NativeFormat.Writer.SourceVertex : MetadataRecord {
    public HandleType HandleType { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Save(NativeWriter writer);
    internal virtual void Visit(IRecordVisitor visitor);
}
public class Internal.Metadata.NativeFormat.Writer.SZArraySignature : MetadataRecord {
    public MetadataRecord ElementType;
    public HandleType HandleType { get; }
    internal SZArraySignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static SZArraySignatureHandle AsHandle(SZArraySignature record);
    internal SZArraySignatureHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.TypeDefinition : MetadataRecord {
    public TypeAttributes Flags;
    public MetadataRecord BaseType;
    public NamespaceDefinition NamespaceDefinition;
    public ConstantStringValue Name;
    public UInt32 Size;
    public ushort PackingSize;
    public TypeDefinition EnclosingType;
    public List`1<TypeDefinition> NestedTypes;
    public List`1<Method> Methods;
    public List`1<Field> Fields;
    public List`1<Property> Properties;
    public List`1<Event> Events;
    public List`1<GenericParameter> GenericParameters;
    public List`1<MetadataRecord> Interfaces;
    public List`1<MethodImpl> MethodImpls;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal TypeDefinitionHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static TypeDefinitionHandle AsHandle(TypeDefinition record);
    internal TypeDefinitionHandle get_Handle();
    public virtual string ToString();
    public virtual string ToString(bool includeHandleValue);
}
public class Internal.Metadata.NativeFormat.Writer.TypeForwarder : MetadataRecord {
    public ScopeReference Scope;
    public ConstantStringValue Name;
    public List`1<TypeForwarder> NestedTypes;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal TypeForwarderHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static TypeForwarderHandle AsHandle(TypeForwarder record);
    internal TypeForwarderHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.TypeInstantiationSignature : MetadataRecord {
    public MetadataRecord GenericType;
    public List`1<MetadataRecord> GenericTypeArguments;
    public HandleType HandleType { get; }
    internal TypeInstantiationSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static TypeInstantiationSignatureHandle AsHandle(TypeInstantiationSignature record);
    internal TypeInstantiationSignatureHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.TypeReference : MetadataRecord {
    public MetadataRecord ParentNamespaceOrType;
    public ConstantStringValue TypeName;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal TypeReferenceHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static TypeReferenceHandle AsHandle(TypeReference record);
    internal TypeReferenceHandle get_Handle();
    public virtual string ToString();
    public virtual string ToString(bool includeHandleValue);
}
public class Internal.Metadata.NativeFormat.Writer.TypeSpecification : MetadataRecord {
    public MetadataRecord Signature;
    public List`1<CustomAttribute> CustomAttributes;
    public HandleType HandleType { get; }
    internal TypeSpecificationHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static TypeSpecificationHandle AsHandle(TypeSpecification record);
    internal TypeSpecificationHandle get_Handle();
    public virtual string ToString();
}
public class Internal.Metadata.NativeFormat.Writer.TypeVariableSignature : MetadataRecord {
    public int Number;
    public HandleType HandleType { get; }
    internal TypeVariableSignatureHandle Handle { get; }
    public virtual HandleType get_HandleType();
    internal virtual void Visit(IRecordVisitor visitor);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    internal virtual void Save(NativeWriter writer);
    internal static TypeVariableSignatureHandle AsHandle(TypeVariableSignature record);
    internal TypeVariableSignatureHandle get_Handle();
    public virtual string ToString();
}
public enum Internal.NativeFormat.BagElementKind : Enum {
    public UInt32 value__;
    public static BagElementKind End;
    public static BagElementKind BaseType;
    public static BagElementKind ImplementedInterfaces;
    public static BagElementKind DictionaryLayout;
    public static BagElementKind TypeFlags;
    public static BagElementKind NonGcStaticData;
    public static BagElementKind GcStaticData;
    public static BagElementKind NonGcStaticDataSize;
    public static BagElementKind GcStaticDataSize;
    public static BagElementKind GcStaticDesc;
    public static BagElementKind ThreadStaticDataSize;
    public static BagElementKind ThreadStaticDesc;
    public static BagElementKind ThreadStaticIndex;
    public static BagElementKind ThreadStaticOffset;
    public static BagElementKind FieldLayout;
    public static BagElementKind VTableMethodSignatures;
    public static BagElementKind SealedVTableEntries;
    public static BagElementKind ClassConstructorPointer;
    public static BagElementKind BaseTypeSize;
    public static BagElementKind GenericVarianceInfo;
    public static BagElementKind DelegateInvokeSignature;
    public static BagElementKind GcStaticEEType;
}
public enum Internal.NativeFormat.CallingConventionConverterKind : Enum {
    public UInt32 value__;
    public static CallingConventionConverterKind NoInstantiatingParam;
    public static CallingConventionConverterKind HasInstantiatingParam;
    public static CallingConventionConverterKind MaybeInstantiatingParam;
}
public class Internal.NativeFormat.CallingConventionConverterSignature : Vertex {
    private UInt32 _flags;
    private Vertex _signature;
    public CallingConventionConverterSignature(UInt32 flags, Vertex signature);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.ExternalTypeSignature : Vertex {
    private UInt32 _externalTypeId;
    public ExternalTypeSignature(UInt32 externalTypeId);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.FieldSignature : Vertex {
    private Vertex _containingType;
    private string _name;
    public FieldSignature(Vertex containingType, string name);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public enum Internal.NativeFormat.FieldStorage : Enum {
    public UInt32 value__;
    public static FieldStorage Instance;
    public static FieldStorage NonGCStatic;
    public static FieldStorage GCStatic;
    public static FieldStorage TLSStatic;
}
public class Internal.NativeFormat.FixupSignature : Vertex {
    private FixupSignatureKind _kind;
    private Vertex _signature;
    public FixupSignature(FixupSignatureKind kind, Vertex signature);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public enum Internal.NativeFormat.FixupSignatureKind : Enum {
    public UInt32 value__;
    public static FixupSignatureKind Null;
    public static FixupSignatureKind TypeHandle;
    public static FixupSignatureKind InterfaceCall;
    public static FixupSignatureKind MethodDictionary;
    public static FixupSignatureKind StaticData;
    public static FixupSignatureKind UnwrapNullableType;
    public static FixupSignatureKind FieldLdToken;
    public static FixupSignatureKind MethodLdToken;
    public static FixupSignatureKind AllocateObject;
    public static FixupSignatureKind DefaultConstructor;
    public static FixupSignatureKind TlsIndex;
    public static FixupSignatureKind TlsOffset;
    public static FixupSignatureKind Method;
    public static FixupSignatureKind IsInst;
    public static FixupSignatureKind CastClass;
    public static FixupSignatureKind AllocateArray;
    public static FixupSignatureKind CheckArrayElementType;
    public static FixupSignatureKind TypeSize;
    public static FixupSignatureKind FieldOffset;
    public static FixupSignatureKind CallingConventionConverter;
    public static FixupSignatureKind VTableOffset;
    public static FixupSignatureKind NonGenericConstrainedMethod;
    public static FixupSignatureKind GenericConstrainedMethod;
    public static FixupSignatureKind NonGenericDirectConstrainedMethod;
    public static FixupSignatureKind PointerToOtherSlot;
    public static FixupSignatureKind IntValue;
    public static FixupSignatureKind NotYetSupported;
}
public enum Internal.NativeFormat.GenericContextKind : Enum {
    public UInt32 value__;
    public static GenericContextKind FromThis;
    public static GenericContextKind FromHiddenArg;
    public static GenericContextKind FromMethodHiddenArg;
    public static GenericContextKind HasDeclaringType;
    public static GenericContextKind NeedsUSGContext;
}
public class Internal.NativeFormat.InstantiationTypeSignature : Vertex {
    private Vertex _typeDef;
    private Vertex[] _args;
    public InstantiationTypeSignature(Vertex typeDef, Vertex[] args);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.MDArrayTypeSignature : Vertex {
    private Vertex _arrayElementType;
    private UInt32 _rank;
    private UInt32[] _bounds;
    private UInt32[] _lowerBounds;
    public MDArrayTypeSignature(Vertex arrayElementType, UInt32 rank, UInt32[] bounds, UInt32[] lowerBounds);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[FlagsAttribute]
public enum Internal.NativeFormat.MethodCallingConvention : Enum {
    public UInt32 value__;
    public static MethodCallingConvention Generic;
    public static MethodCallingConvention Static;
}
[FlagsAttribute]
public enum Internal.NativeFormat.MethodFlags : Enum {
    public UInt32 value__;
    public static MethodFlags HasInstantiation;
    public static MethodFlags IsUnboxingStub;
    public static MethodFlags HasFunctionPointer;
    public static MethodFlags FunctionPointerIsUSG;
}
public class Internal.NativeFormat.MethodNameAndSigSignature : Vertex {
    private Vertex _methodName;
    private Vertex _signature;
    public MethodNameAndSigSignature(Vertex methodName, Vertex signature);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.MethodSignature : Vertex {
    private UInt32 _flags;
    private UInt32 _fptrReferenceId;
    private Vertex _containingType;
    private Vertex _methodNameAndSig;
    private Vertex[] _args;
    public MethodSignature(UInt32 flags, UInt32 fptrReferenceId, Vertex containingType, Vertex methodNameAndSig, Vertex[] args);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.MethodSigSignature : Vertex {
    private UInt32 _callingConvention;
    private UInt32 _genericArgCount;
    private Vertex _returnType;
    private Vertex[] _parameters;
    public MethodSigSignature(UInt32 callingConvention, UInt32 genericArgCount, Vertex returnType, Vertex[] parameters);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.MethodSlotSignature : Vertex {
    private Vertex _type;
    private UInt32 _slot;
    public MethodSlotSignature(Vertex type, UInt32 slot);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.ModifierTypeSignature : Vertex {
    private TypeModifierKind _modifier;
    private Vertex _param;
    public ModifierTypeSignature(TypeModifierKind modifier, Vertex param);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ExtensionAttribute]
public static class Internal.NativeFormat.NativeFormatWriterExtensions : object {
    [ExtensionAttribute]
public static Byte[] Save(NativeWriter writer);
}
internal class Internal.NativeFormat.NativeHashtable : ValueType {
    private NativeReader _reader;
    private UInt32 _baseOffset;
    private UInt32 _bucketMask;
    private byte _entryIndexSize;
    public bool IsNull { get; }
    public NativeHashtable(NativeParser parser);
    public bool get_IsNull();
    private NativeParser GetParserForBucket(UInt32 bucket, UInt32& endOffset);
    public Enumerator Lookup(int hashcode);
    public AllEntriesEnumerator EnumerateAllEntries();
}
internal class Internal.NativeFormat.NativeParser : ValueType {
    private NativeReader _reader;
    private UInt32 _offset;
    public bool IsNull { get; }
    public NativeReader Reader { get; }
    public UInt32 Offset { get; public set; }
    public NativeParser(NativeReader reader, UInt32 offset);
    public bool get_IsNull();
    public NativeReader get_Reader();
    public UInt32 get_Offset();
    public void set_Offset(UInt32 value);
    public void ThrowBadImageFormatException();
    public byte GetUInt8();
    public UInt32 GetUnsigned();
    public ulong GetUnsignedLong();
    public int GetSigned();
    public UInt32 GetRelativeOffset();
    public void SkipInteger();
    public NativeParser GetParserFromRelativeOffset();
    public UInt32 GetSequenceCount();
    public string GetString();
    public void SkipString();
}
internal class Internal.NativeFormat.NativePrimitiveDecoder : ValueType {
    public static void ThrowBadImageFormatException();
    public static UInt32 DecodeUnsigned(Byte*& stream, Byte* streamEnd);
    public static int DecodeSigned(Byte*& stream, Byte* streamEnd);
    public static ulong DecodeUnsignedLong(Byte*& stream, Byte* streamEnd);
    public static long DecodeSignedLong(Byte*& stream, Byte* streamEnd);
    public static void SkipInteger(Byte*& stream);
    public static byte ReadUInt8(Byte*& stream);
    public static ushort ReadUInt16(Byte*& stream);
    public static UInt32 ReadUInt32(Byte*& stream);
    public static ulong ReadUInt64(Byte*& stream);
    public static float ReadFloat(Byte*& stream);
    public static double ReadDouble(Byte*& stream);
    public static UInt32 GetUnsignedEncodingSize(UInt32 value);
    public static UInt32 DecodeUnsigned(Byte*& stream);
    public static int DecodeSigned(Byte*& stream);
    public static ulong DecodeUnsignedLong(Byte*& stream);
    public static long DecodeSignedLong(Byte*& stream);
}
internal class Internal.NativeFormat.NativePrimitiveEncoder : ValueType {
    private Byte[] _buffer;
    private int _size;
    public int Size { get; }
    public void Init();
    public int get_Size();
    public void Clear();
    public void RollbackTo(int offset);
    public void WriteByte(byte b);
    public void WriteUInt8(byte value);
    public void WriteUInt16(ushort value);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt64(ulong value);
    public void WriteFloat(float value);
    public void WriteDouble(double value);
    public void WriteUnsigned(UInt32 d);
    public static int GetUnsignedEncodingSize(UInt32 d);
    public void WriteSigned(int i);
    public void WriteUnsignedLong(ulong i);
    public void WriteSignedLong(long i);
    public void PatchByteAt(int offset, byte value);
    public void Save(Stream stream);
    public bool Save(Byte* stream, int streamLength);
    public Byte[] GetBytes();
}
internal class Internal.NativeFormat.NativeReader : object {
    private Byte* _base;
    private UInt32 _size;
    public UInt32 Size { get; }
    public NativeReader(Byte* base_, UInt32 size);
    public UInt32 get_Size();
    public UInt32 AddressToOffset(IntPtr address);
    public IntPtr OffsetToAddress(UInt32 offset);
    public void ThrowBadImageFormatException();
    private UInt32 EnsureOffsetInRange(UInt32 offset, UInt32 lookAhead);
    public byte ReadUInt8(UInt32 offset);
    public ushort ReadUInt16(UInt32 offset);
    public UInt32 ReadUInt32(UInt32 offset);
    public ulong ReadUInt64(UInt32 offset);
    public float ReadFloat(UInt32 offset);
    public double ReadDouble(UInt32 offset);
    public UInt32 DecodeUnsigned(UInt32 offset, UInt32& value);
    public UInt32 DecodeSigned(UInt32 offset, Int32& value);
    public UInt32 DecodeUnsignedLong(UInt32 offset, UInt64& value);
    public UInt32 DecodeSignedLong(UInt32 offset, Int64& value);
    public UInt32 SkipInteger(UInt32 offset);
    public string ReadString(UInt32 offset);
    public UInt32 DecodeString(UInt32 offset, String& value);
    public UInt32 SkipString(UInt32 offset);
    public bool StringEquals(UInt32 offset, string value);
}
public class Internal.NativeFormat.NativeWriter : object {
    private List`1<Section> _sections;
    private int _iteration;
    private SavePhase _phase;
    private int _offsetAdjustment;
    private int _paddingSize;
    private Dictionary`2<Vertex, Vertex> _unifier;
    private NativePrimitiveEncoder _encoder;
    private static Encoding _stringEncoding;
    private static NativeWriter();
    public Section NewSection();
    public void WriteByte(byte b);
    public void WriteUInt8(byte value);
    public void WriteUInt16(ushort value);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt64(ulong value);
    public void WriteUnsigned(UInt32 d);
    public void WriteSigned(int i);
    public void WriteUnsignedLong(ulong i);
    public void WriteSignedLong(long i);
    public void WriteFloat(float value);
    public void WriteDouble(double value);
    public void WritePad(int size);
    public bool IsGrowing();
    public void UpdateOffsetAdjustment(int offsetDelta);
    public void RollbackTo(int offset);
    public void RollbackTo(int offset, int offsetAdjustment);
    public void PatchByteAt(int offset, byte value);
    public void WriteString(string s);
    public void WriteRelativeOffset(Vertex val);
    public int GetCurrentOffset();
    public int GetNumberOfIterations();
    public int GetPaddingSize();
    public void Save(Stream stream);
    private T Unify(T vertex);
    public Vertex GetUnsignedConstant(UInt32 value);
    public Vertex GetTuple(Vertex item1, Vertex item2);
    public Vertex GetTuple(Vertex item1, Vertex item2, Vertex item3);
    public Vertex GetMethodNameAndSigSignature(string name, Vertex signature);
    public Vertex GetStringConstant(string value);
    public Vertex GetRelativeOffsetSignature(Vertex item);
    public Vertex GetOffsetSignature(Vertex item);
    public Vertex GetExternalTypeSignature(UInt32 externalTypeId);
    public Vertex GetMethodSignature(UInt32 flags, UInt32 fptrReferenceId, Vertex containingType, Vertex methodNameAndSig, Vertex[] args);
    public Vertex GetFieldSignature(Vertex containingType, string name);
    public Vertex GetFixupSignature(FixupSignatureKind kind, Vertex signature);
    public Vertex GetStaticDataSignature(Vertex type, StaticDataKind staticDataKind);
    public Vertex GetMethodSlotSignature(Vertex type, UInt32 slot);
    public Vertex GetMethodSigSignature(UInt32 callingConvention, UInt32 genericArgCount, Vertex returnType, Vertex[] parameters);
    public Vertex GetModifierTypeSignature(TypeModifierKind modifier, Vertex param);
    public Vertex GetVariableTypeSignature(UInt32 index, bool method);
    public Vertex GetInstantiationTypeSignature(Vertex typeDef, Vertex[] arguments);
    public Vertex GetMDArrayTypeSignature(Vertex elementType, UInt32 rank, UInt32[] bounds, UInt32[] lowerBounds);
    public Vertex GetCallingConventionConverterSignature(UInt32 flags, Vertex signature);
}
public class Internal.NativeFormat.OffsetSignature : Vertex {
    private Vertex _item;
    public OffsetSignature(Vertex item);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Internal.NativeFormat.PlacedVertex : Vertex {
    private Vertex _unified;
    public PlacedVertex(Vertex unified);
    internal virtual void Save(NativeWriter writer);
}
public class Internal.NativeFormat.RelativeOffsetSignature : Vertex {
    private Vertex _item;
    public RelativeOffsetSignature(Vertex item);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.Section : object {
    internal List`1<Vertex> _items;
    internal Dictionary`2<Vertex, Vertex> _placedMap;
    public Vertex Place(Vertex vertex);
}
public enum Internal.NativeFormat.StaticDataKind : Enum {
    public UInt32 value__;
    public static StaticDataKind Gc;
    public static StaticDataKind NonGc;
}
public class Internal.NativeFormat.StaticDataSignature : Vertex {
    private Vertex _type;
    private StaticDataKind _staticDataKind;
    public StaticDataSignature(Vertex type, StaticDataKind staticDataKind);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Internal.NativeFormat.StringConstant : Vertex {
    private string _value;
    public StringConstant(string value);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Internal.NativeFormat.Tuple : Vertex {
    private Vertex _item1;
    private Vertex _item2;
    private Vertex _item3;
    public Tuple(Vertex item1, Vertex item2, Vertex item3);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[FlagsAttribute]
public enum Internal.NativeFormat.TypeFlags : Enum {
    public UInt32 value__;
    public static TypeFlags HasClassConstructor;
    public static TypeFlags HasInstantiationDeterminedSize;
}
public enum Internal.NativeFormat.TypeModifierKind : Enum {
    public UInt32 value__;
    public static TypeModifierKind Array;
    public static TypeModifierKind ByRef;
    public static TypeModifierKind Pointer;
}
public enum Internal.NativeFormat.TypeSignatureKind : Enum {
    public UInt32 value__;
    public static TypeSignatureKind Null;
    public static TypeSignatureKind Lookback;
    public static TypeSignatureKind Modifier;
    public static TypeSignatureKind Instantiation;
    public static TypeSignatureKind Variable;
    public static TypeSignatureKind BuiltIn;
    public static TypeSignatureKind External;
    public static TypeSignatureKind MultiDimArray;
    public static TypeSignatureKind FunctionPointer;
}
internal class Internal.NativeFormat.UnsignedConstant : Vertex {
    private UInt32 _value;
    public UnsignedConstant(UInt32 value);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
}
public class Internal.NativeFormat.VariableTypeSignature : Vertex {
    private UInt32 _variableId;
    public VariableTypeSignature(UInt32 index, bool method);
    internal virtual void Save(NativeWriter writer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public abstract class Internal.NativeFormat.Vertex : object {
    internal int _offset;
    internal int _iteration;
    internal static int NotPlaced;
    internal static int Placed;
    internal static int Unified;
    public int VertexOffset { get; }
    internal abstract virtual void Save(NativeWriter writer);
    public int get_VertexOffset();
}
public class Internal.NativeFormat.VertexBag : Vertex {
    private List`1<Entry> _elements;
    public int ElementsCount { get; }
    public void Append(BagElementKind id, Vertex value);
    public void AppendUnsigned(BagElementKind id, UInt32 value);
    public void AppendSigned(BagElementKind id, int value);
    internal virtual void Save(NativeWriter writer);
    public int get_ElementsCount();
}
public class Internal.NativeFormat.VertexHashtable : Vertex {
    private List`1<Entry> _Entries;
    private int _nFillFactor;
    private UInt32 _nBuckets;
    private int _entryIndexSize;
    public static int DefaultFillFactor;
    public VertexHashtable(int fillFactor);
    public void Append(UInt32 hashcode, Vertex element);
    private static int HighestBit(UInt32 x);
    private static void PatchEntryIndex(NativeWriter writer, int patchOffset, int entryIndexSize, int entryIndex);
    private void ComputeLayout();
    internal virtual void Save(NativeWriter writer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Internal.NativeFormat.VertexSequence : Vertex {
    private List`1<Vertex> _elements;
    public void Append(Vertex vertex);
    internal virtual void Save(NativeWriter writer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
