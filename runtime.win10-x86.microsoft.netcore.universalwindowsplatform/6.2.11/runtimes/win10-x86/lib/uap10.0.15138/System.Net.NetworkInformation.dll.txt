internal static class FxResources.System.Net.NetworkInformation.SR : object {
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeLocalAllocHandle : SafeBuffer {
    internal static SafeLocalAllocHandle Zero;
    internal static SafeLocalAllocHandle InvalidHandle { get; }
    internal SafeLocalAllocHandle(IntPtr handle);
    private static SafeLocalAllocHandle();
    internal static SafeLocalAllocHandle LocalAlloc(int cb);
    internal static SafeLocalAllocHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
[ExtensionAttribute]
internal static class System.Net.ByteOrder : object {
    [ExtensionAttribute]
public static void HostToNetworkBytes(ushort host, Byte[] bytes, int index);
    [ExtensionAttribute]
public static ushort NetworkBytesToHostUInt16(Byte[] bytes, int index);
}
internal class System.Net.CallbackClosure : object {
    private AsyncCallback _savedCallback;
    private ExecutionContext _savedContext;
    internal AsyncCallback AsyncCallback { get; }
    internal ExecutionContext Context { get; }
    internal CallbackClosure(ExecutionContext context, AsyncCallback callback);
    internal bool IsCompatible(AsyncCallback callback);
    internal AsyncCallback get_AsyncCallback();
    internal ExecutionContext get_Context();
}
internal class System.Net.ContextAwareResult : LazyAsyncResult {
    private ExecutionContext modreq(System.Runtime.CompilerServices.IsVolatile) _context;
    private object _lock;
    private StateFlags _flags;
    private WindowsIdentity _windowsIdentity;
    internal ExecutionContext ContextCopy { get; }
    internal EndPoint RemoteEndPoint { get; }
    internal WindowsIdentity Identity { get; }
    internal ContextAwareResult(object myObject, object myState, AsyncCallback myCallBack);
    internal ContextAwareResult(bool captureIdentity, bool forceCaptureContext, object myObject, object myState, AsyncCallback myCallBack);
    internal ContextAwareResult(bool captureIdentity, bool forceCaptureContext, bool threadSafeContextCopy, object myObject, object myState, AsyncCallback myCallBack);
    internal ExecutionContext get_ContextCopy();
    internal object StartPostingAsyncOp();
    internal object StartPostingAsyncOp(bool lockCapture);
    internal bool FinishPostingAsyncOp();
    internal bool FinishPostingAsyncOp(CallbackClosure& closure);
    protected virtual void Cleanup();
    private bool CaptureOrComplete(ExecutionContext& cachedContext, bool returnContext);
    protected virtual void Complete(IntPtr userToken);
    private void CompleteCallback();
    internal virtual EndPoint get_RemoteEndPoint();
    private void SafeCaptureIdentity();
    internal WindowsIdentity get_Identity();
    private void CleanupInternal();
}
internal static class System.Net.DebugThreadTracking : object {
    [ThreadStaticAttribute]
private static Stack`1<ThreadKinds> t_threadKindStack;
    private static Stack`1<ThreadKinds> ThreadKindStack { get; }
    internal static ThreadKinds CurrentThreadKind { get; }
    private static Stack`1<ThreadKinds> get_ThreadKindStack();
    internal static ThreadKinds get_CurrentThreadKind();
    internal static IDisposable SetThreadKind(ThreadKinds kind);
    internal static void SetThreadSource(ThreadKinds source);
}
internal static class System.Net.ExceptionCheck : object {
    internal static bool IsFatal(Exception exception);
}
internal class System.Net.InternalException : Exception {
}
[DefaultMemberAttribute("Item")]
internal class System.Net.Internals.SocketAddress : object {
    internal static int IPv6AddressSize;
    internal static int IPv4AddressSize;
    internal int InternalSize;
    internal Byte[] Buffer;
    private static int MinSize;
    private static int MaxSize;
    private bool _changed;
    private int _hash;
    public AddressFamily Family { get; }
    public int Size { get; }
    public byte Item { get; public set; }
    public SocketAddress(AddressFamily family);
    public SocketAddress(AddressFamily family, int size);
    internal SocketAddress(IPAddress ipAddress);
    internal SocketAddress(IPAddress ipaddress, int port);
    private static SocketAddress();
    public AddressFamily get_Family();
    public int get_Size();
    public byte get_Item(int offset);
    public void set_Item(int offset, byte value);
    internal IPAddress GetIPAddress();
    internal IPEndPoint GetIPEndPoint();
    internal void CopyAddressSizeIntoBuffer();
    internal int GetAddressSizeOffset();
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal enum System.Net.Internals.SocketType : Enum {
    public int value__;
    public static SocketType Stream;
    public static SocketType Dgram;
    public static SocketType Raw;
    public static SocketType Rdm;
    public static SocketType Seqpacket;
    public static SocketType Unknown;
}
internal static class System.Net.IPAddressParserStatics : object {
    public static int IPv4AddressBytes;
    public static int IPv6AddressBytes;
    public static int IPv6AddressShorts;
}
internal class System.Net.LazyAsyncResult : object {
    private static int HighBit;
    private static int ForceAsyncCount;
    [ThreadStaticAttribute]
private static ThreadContext t_threadContext;
    private object _asyncObject;
    private object _asyncState;
    private AsyncCallback _asyncCallback;
    private object _result;
    private int _errorCode;
    private int _intCompleted;
    private bool _endCalled;
    private bool _userEvent;
    private object _event;
    private static ThreadContext CurrentThreadContext { get; }
    internal object AsyncObject { get; }
    public object AsyncState { get; }
    protected AsyncCallback AsyncCallback { get; protected set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    internal bool InternalPeekCompleted { get; }
    internal object Result { get; internal set; }
    internal bool EndCalled { get; internal set; }
    internal int ErrorCode { get; internal set; }
    internal LazyAsyncResult(object myObject, object myState, AsyncCallback myCallBack);
    internal LazyAsyncResult(object myObject, object myState, AsyncCallback myCallBack, object result);
    private static ThreadContext get_CurrentThreadContext();
    internal object get_AsyncObject();
    public sealed virtual object get_AsyncState();
    protected AsyncCallback get_AsyncCallback();
    protected void set_AsyncCallback(AsyncCallback value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    private bool LazilyCreateEvent(ManualResetEvent& waitHandle);
    [ConditionalAttribute("DEBUG")]
protected void DebugProtectState(bool protect);
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    internal bool get_InternalPeekCompleted();
    internal object get_Result();
    internal void set_Result(object value);
    internal bool get_EndCalled();
    internal void set_EndCalled(bool value);
    internal int get_ErrorCode();
    internal void set_ErrorCode(int value);
    protected void ProtectedInvokeCallback(object result, IntPtr userToken);
    internal void InvokeCallback(object result);
    internal void InvokeCallback();
    protected virtual void Complete(IntPtr userToken);
    private static void WorkerThreadComplete(object state);
    protected virtual void Cleanup();
    internal object InternalWaitForCompletion();
    private object WaitForCompletion(bool snap);
    internal void InternalCleanup();
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    private static string MissingMember;
    private static string NullInstance;
    private static string StaticMethodObject;
    private static string NoParameters;
    private static int MaxDumpSize;
    private static int EnterEventId;
    private static int ExitEventId;
    private static int AssociateEventId;
    private static int InfoEventId;
    private static int ErrorEventId;
    private static int CriticalFailureEventId;
    private static int DumpArrayEventId;
    private static int EnumerateSecurityPackagesId;
    private static int SspiPackageNotFoundId;
    private static int AcquireDefaultCredentialId;
    private static int AcquireCredentialsHandleId;
    private static int InitializeSecurityContextId;
    private static int SecurityContextInputBufferId;
    private static int SecurityContextInputBuffersId;
    private static int AcceptSecuritContextId;
    private static int OperationReturnedSomethingId;
    private static int NextAvailableEventId;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(object arg);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
}
public enum System.Net.NetworkInformation.DuplicateAddressDetectionState : Enum {
    public int value__;
    public static DuplicateAddressDetectionState Invalid;
    public static DuplicateAddressDetectionState Tentative;
    public static DuplicateAddressDetectionState Duplicate;
    public static DuplicateAddressDetectionState Deprecated;
    public static DuplicateAddressDetectionState Preferred;
}
public abstract class System.Net.NetworkInformation.GatewayIPAddressInformation : object {
    public IPAddress Address { get; }
    public abstract virtual IPAddress get_Address();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.GatewayIPAddressInformationCollection : object {
    private List`1<GatewayIPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public GatewayIPAddressInformation Item { get; }
    internal GatewayIPAddressInformationCollection(List`1<GatewayIPAddressInformation> addresses);
    public virtual void CopyTo(GatewayIPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual GatewayIPAddressInformation get_Item(int index);
    public virtual void Add(GatewayIPAddressInformation address);
    internal void InternalAdd(GatewayIPAddressInformation address);
    public virtual bool Contains(GatewayIPAddressInformation address);
    public virtual IEnumerator`1<GatewayIPAddressInformation> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Remove(GatewayIPAddressInformation address);
    public virtual void Clear();
}
internal class System.Net.NetworkInformation.HostInformation : object {
    internal static string HostName { get; }
    internal static string DomainName { get; }
    internal static string get_HostName();
    internal static string get_DomainName();
}
internal static class System.Net.NetworkInformation.HostInformationPal : object {
    private static FIXED_INFO s_fixedInfo;
    private static bool s_fixedInfoInitialized;
    private static object s_syncObject;
    private static HostInformationPal();
    public static string GetHostName();
    public static string GetDomainName();
    public static FIXED_INFO GetFixedInfo();
    private static void EnsureFixedInfo();
}
public abstract class System.Net.NetworkInformation.IcmpV4Statistics : object {
    public long AddressMaskRepliesReceived { get; }
    public long AddressMaskRepliesSent { get; }
    public long AddressMaskRequestsReceived { get; }
    public long AddressMaskRequestsSent { get; }
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    public long ErrorsReceived { get; }
    public long ErrorsSent { get; }
    public long MessagesReceived { get; }
    public long MessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long SourceQuenchesReceived { get; }
    public long SourceQuenchesSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public long TimestampRepliesReceived { get; }
    public long TimestampRepliesSent { get; }
    public long TimestampRequestsReceived { get; }
    public long TimestampRequestsSent { get; }
    public abstract virtual long get_AddressMaskRepliesReceived();
    public abstract virtual long get_AddressMaskRepliesSent();
    public abstract virtual long get_AddressMaskRequestsReceived();
    public abstract virtual long get_AddressMaskRequestsSent();
    public abstract virtual long get_DestinationUnreachableMessagesReceived();
    public abstract virtual long get_DestinationUnreachableMessagesSent();
    public abstract virtual long get_EchoRepliesReceived();
    public abstract virtual long get_EchoRepliesSent();
    public abstract virtual long get_EchoRequestsReceived();
    public abstract virtual long get_EchoRequestsSent();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_ErrorsSent();
    public abstract virtual long get_MessagesReceived();
    public abstract virtual long get_MessagesSent();
    public abstract virtual long get_ParameterProblemsReceived();
    public abstract virtual long get_ParameterProblemsSent();
    public abstract virtual long get_RedirectsReceived();
    public abstract virtual long get_RedirectsSent();
    public abstract virtual long get_SourceQuenchesReceived();
    public abstract virtual long get_SourceQuenchesSent();
    public abstract virtual long get_TimeExceededMessagesReceived();
    public abstract virtual long get_TimeExceededMessagesSent();
    public abstract virtual long get_TimestampRepliesReceived();
    public abstract virtual long get_TimestampRepliesSent();
    public abstract virtual long get_TimestampRequestsReceived();
    public abstract virtual long get_TimestampRequestsSent();
}
public abstract class System.Net.NetworkInformation.IcmpV6Statistics : object {
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    public long ErrorsReceived { get; }
    public long ErrorsSent { get; }
    public long MembershipQueriesReceived { get; }
    public long MembershipQueriesSent { get; }
    public long MembershipReductionsReceived { get; }
    public long MembershipReductionsSent { get; }
    public long MembershipReportsReceived { get; }
    public long MembershipReportsSent { get; }
    public long MessagesReceived { get; }
    public long MessagesSent { get; }
    public long NeighborAdvertisementsReceived { get; }
    public long NeighborAdvertisementsSent { get; }
    public long NeighborSolicitsReceived { get; }
    public long NeighborSolicitsSent { get; }
    public long PacketTooBigMessagesReceived { get; }
    public long PacketTooBigMessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long RouterAdvertisementsReceived { get; }
    public long RouterAdvertisementsSent { get; }
    public long RouterSolicitsReceived { get; }
    public long RouterSolicitsSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public abstract virtual long get_DestinationUnreachableMessagesReceived();
    public abstract virtual long get_DestinationUnreachableMessagesSent();
    public abstract virtual long get_EchoRepliesReceived();
    public abstract virtual long get_EchoRepliesSent();
    public abstract virtual long get_EchoRequestsReceived();
    public abstract virtual long get_EchoRequestsSent();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_ErrorsSent();
    public abstract virtual long get_MembershipQueriesReceived();
    public abstract virtual long get_MembershipQueriesSent();
    public abstract virtual long get_MembershipReductionsReceived();
    public abstract virtual long get_MembershipReductionsSent();
    public abstract virtual long get_MembershipReportsReceived();
    public abstract virtual long get_MembershipReportsSent();
    public abstract virtual long get_MessagesReceived();
    public abstract virtual long get_MessagesSent();
    public abstract virtual long get_NeighborAdvertisementsReceived();
    public abstract virtual long get_NeighborAdvertisementsSent();
    public abstract virtual long get_NeighborSolicitsReceived();
    public abstract virtual long get_NeighborSolicitsSent();
    public abstract virtual long get_PacketTooBigMessagesReceived();
    public abstract virtual long get_PacketTooBigMessagesSent();
    public abstract virtual long get_ParameterProblemsReceived();
    public abstract virtual long get_ParameterProblemsSent();
    public abstract virtual long get_RedirectsReceived();
    public abstract virtual long get_RedirectsSent();
    public abstract virtual long get_RouterAdvertisementsReceived();
    public abstract virtual long get_RouterAdvertisementsSent();
    public abstract virtual long get_RouterSolicitsReceived();
    public abstract virtual long get_RouterSolicitsSent();
    public abstract virtual long get_TimeExceededMessagesReceived();
    public abstract virtual long get_TimeExceededMessagesSent();
}
internal enum System.Net.NetworkInformation.IcmpV6StatType : Enum {
    public int value__;
    public static IcmpV6StatType DestinationUnreachable;
    public static IcmpV6StatType PacketTooBig;
    public static IcmpV6StatType TimeExceeded;
    public static IcmpV6StatType ParameterProblem;
    public static IcmpV6StatType EchoRequest;
    public static IcmpV6StatType EchoReply;
    public static IcmpV6StatType MembershipQuery;
    public static IcmpV6StatType MembershipReport;
    public static IcmpV6StatType MembershipReduction;
    public static IcmpV6StatType RouterSolicit;
    public static IcmpV6StatType RouterAdvertisement;
    public static IcmpV6StatType NeighborSolict;
    public static IcmpV6StatType NeighborAdvertisement;
    public static IcmpV6StatType Redirect;
}
[DefaultMemberAttribute("Item")]
internal class System.Net.NetworkInformation.InternalIPAddressCollection : IPAddressCollection {
    private List`1<IPAddress> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddress Item { get; }
    internal InternalIPAddressCollection(List`1<IPAddress> addresses);
    public virtual void CopyTo(IPAddress[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(IPAddress address);
    internal void InternalAdd(IPAddress address);
    public virtual bool Contains(IPAddress address);
    public virtual IPAddress get_Item(int index);
    public virtual IEnumerator`1<IPAddress> GetEnumerator();
}
public abstract class System.Net.NetworkInformation.IPAddressInformation : object {
    public IPAddress Address { get; }
    public bool IsDnsEligible { get; }
    public bool IsTransient { get; }
    public abstract virtual IPAddress get_Address();
    public abstract virtual bool get_IsDnsEligible();
    public abstract virtual bool get_IsTransient();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.IPAddressInformationCollection : object {
    private List`1<IPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddressInformation Item { get; }
    public virtual void CopyTo(IPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(IPAddressInformation address);
    internal void InternalAdd(IPAddressInformation address);
    public virtual bool Contains(IPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<IPAddressInformation> GetEnumerator();
    public virtual IPAddressInformation get_Item(int index);
    public virtual bool Remove(IPAddressInformation address);
    public virtual void Clear();
}
public abstract class System.Net.NetworkInformation.IPGlobalProperties : object {
    public string DhcpScopeName { get; }
    public string DomainName { get; }
    public string HostName { get; }
    public bool IsWinsProxy { get; }
    public NetBiosNodeType NodeType { get; }
    public static IPGlobalProperties GetIPGlobalProperties();
    public abstract virtual IPEndPoint[] GetActiveUdpListeners();
    public abstract virtual IPEndPoint[] GetActiveTcpListeners();
    public abstract virtual TcpConnectionInformation[] GetActiveTcpConnections();
    public abstract virtual string get_DhcpScopeName();
    public abstract virtual string get_DomainName();
    public abstract virtual string get_HostName();
    public abstract virtual bool get_IsWinsProxy();
    public abstract virtual NetBiosNodeType get_NodeType();
    public virtual IAsyncResult BeginGetUnicastAddresses(AsyncCallback callback, object state);
    public virtual UnicastIPAddressInformationCollection EndGetUnicastAddresses(IAsyncResult asyncResult);
    public abstract virtual TcpStatistics GetTcpIPv4Statistics();
    public abstract virtual TcpStatistics GetTcpIPv6Statistics();
    public abstract virtual UdpStatistics GetUdpIPv4Statistics();
    public abstract virtual UdpStatistics GetUdpIPv6Statistics();
    public abstract virtual IcmpV4Statistics GetIcmpV4Statistics();
    public abstract virtual IcmpV6Statistics GetIcmpV6Statistics();
    public abstract virtual IPGlobalStatistics GetIPv4GlobalStatistics();
    public abstract virtual IPGlobalStatistics GetIPv6GlobalStatistics();
    public virtual UnicastIPAddressInformationCollection GetUnicastAddresses();
    public virtual Task`1<UnicastIPAddressInformationCollection> GetUnicastAddressesAsync();
}
internal static class System.Net.NetworkInformation.IPGlobalPropertiesPal : object {
    public static IPGlobalProperties GetIPGlobalProperties();
}
public abstract class System.Net.NetworkInformation.IPGlobalStatistics : object {
    public int DefaultTtl { get; }
    public bool ForwardingEnabled { get; }
    public int NumberOfInterfaces { get; }
    public int NumberOfIPAddresses { get; }
    public long OutputPacketRequests { get; }
    public long OutputPacketRoutingDiscards { get; }
    public long OutputPacketsDiscarded { get; }
    public long OutputPacketsWithNoRoute { get; }
    public long PacketFragmentFailures { get; }
    public long PacketReassembliesRequired { get; }
    public long PacketReassemblyFailures { get; }
    public long PacketReassemblyTimeout { get; }
    public long PacketsFragmented { get; }
    public long PacketsReassembled { get; }
    public long ReceivedPackets { get; }
    public long ReceivedPacketsDelivered { get; }
    public long ReceivedPacketsDiscarded { get; }
    public long ReceivedPacketsForwarded { get; }
    public long ReceivedPacketsWithAddressErrors { get; }
    public long ReceivedPacketsWithHeadersErrors { get; }
    public long ReceivedPacketsWithUnknownProtocol { get; }
    public int NumberOfRoutes { get; }
    public abstract virtual int get_DefaultTtl();
    public abstract virtual bool get_ForwardingEnabled();
    public abstract virtual int get_NumberOfInterfaces();
    public abstract virtual int get_NumberOfIPAddresses();
    public abstract virtual long get_OutputPacketRequests();
    public abstract virtual long get_OutputPacketRoutingDiscards();
    public abstract virtual long get_OutputPacketsDiscarded();
    public abstract virtual long get_OutputPacketsWithNoRoute();
    public abstract virtual long get_PacketFragmentFailures();
    public abstract virtual long get_PacketReassembliesRequired();
    public abstract virtual long get_PacketReassemblyFailures();
    public abstract virtual long get_PacketReassemblyTimeout();
    public abstract virtual long get_PacketsFragmented();
    public abstract virtual long get_PacketsReassembled();
    public abstract virtual long get_ReceivedPackets();
    public abstract virtual long get_ReceivedPacketsDelivered();
    public abstract virtual long get_ReceivedPacketsDiscarded();
    public abstract virtual long get_ReceivedPacketsForwarded();
    public abstract virtual long get_ReceivedPacketsWithAddressErrors();
    public abstract virtual long get_ReceivedPacketsWithHeadersErrors();
    public abstract virtual long get_ReceivedPacketsWithUnknownProtocol();
    public abstract virtual int get_NumberOfRoutes();
}
public abstract class System.Net.NetworkInformation.IPInterfaceProperties : object {
    public bool IsDnsEnabled { get; }
    public string DnsSuffix { get; }
    public bool IsDynamicDnsEnabled { get; }
    public UnicastIPAddressInformationCollection UnicastAddresses { get; }
    public MulticastIPAddressInformationCollection MulticastAddresses { get; }
    public IPAddressInformationCollection AnycastAddresses { get; }
    public IPAddressCollection DnsAddresses { get; }
    public GatewayIPAddressInformationCollection GatewayAddresses { get; }
    public IPAddressCollection DhcpServerAddresses { get; }
    public IPAddressCollection WinsServersAddresses { get; }
    public abstract virtual bool get_IsDnsEnabled();
    public abstract virtual string get_DnsSuffix();
    public abstract virtual bool get_IsDynamicDnsEnabled();
    public abstract virtual UnicastIPAddressInformationCollection get_UnicastAddresses();
    public abstract virtual MulticastIPAddressInformationCollection get_MulticastAddresses();
    public abstract virtual IPAddressInformationCollection get_AnycastAddresses();
    public abstract virtual IPAddressCollection get_DnsAddresses();
    public abstract virtual GatewayIPAddressInformationCollection get_GatewayAddresses();
    public abstract virtual IPAddressCollection get_DhcpServerAddresses();
    public abstract virtual IPAddressCollection get_WinsServersAddresses();
    public abstract virtual IPv4InterfaceProperties GetIPv4Properties();
    public abstract virtual IPv6InterfaceProperties GetIPv6Properties();
}
public abstract class System.Net.NetworkInformation.IPInterfaceStatistics : object {
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public long IncomingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    public long IncomingUnknownProtocolPackets { get; }
    public long NonUnicastPacketsReceived { get; }
    public long NonUnicastPacketsSent { get; }
    public long OutgoingPacketsDiscarded { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long OutputQueueLength { get; }
    public long UnicastPacketsReceived { get; }
    public long UnicastPacketsSent { get; }
    public abstract virtual long get_BytesReceived();
    public abstract virtual long get_BytesSent();
    public abstract virtual long get_IncomingPacketsDiscarded();
    public abstract virtual long get_IncomingPacketsWithErrors();
    public abstract virtual long get_IncomingUnknownProtocolPackets();
    public abstract virtual long get_NonUnicastPacketsReceived();
    public abstract virtual long get_NonUnicastPacketsSent();
    public abstract virtual long get_OutgoingPacketsDiscarded();
    public abstract virtual long get_OutgoingPacketsWithErrors();
    public abstract virtual long get_OutputQueueLength();
    public abstract virtual long get_UnicastPacketsReceived();
    public abstract virtual long get_UnicastPacketsSent();
}
public abstract class System.Net.NetworkInformation.IPv4InterfaceProperties : object {
    public bool UsesWins { get; }
    public bool IsDhcpEnabled { get; }
    public bool IsAutomaticPrivateAddressingActive { get; }
    public bool IsAutomaticPrivateAddressingEnabled { get; }
    public int Index { get; }
    public bool IsForwardingEnabled { get; }
    public int Mtu { get; }
    public abstract virtual bool get_UsesWins();
    public abstract virtual bool get_IsDhcpEnabled();
    public abstract virtual bool get_IsAutomaticPrivateAddressingActive();
    public abstract virtual bool get_IsAutomaticPrivateAddressingEnabled();
    public abstract virtual int get_Index();
    public abstract virtual bool get_IsForwardingEnabled();
    public abstract virtual int get_Mtu();
}
public abstract class System.Net.NetworkInformation.IPv4InterfaceStatistics : object {
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public long IncomingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    public long IncomingUnknownProtocolPackets { get; }
    public long NonUnicastPacketsReceived { get; }
    public long NonUnicastPacketsSent { get; }
    public long OutgoingPacketsDiscarded { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long OutputQueueLength { get; }
    public long UnicastPacketsReceived { get; }
    public long UnicastPacketsSent { get; }
    public abstract virtual long get_BytesReceived();
    public abstract virtual long get_BytesSent();
    public abstract virtual long get_IncomingPacketsDiscarded();
    public abstract virtual long get_IncomingPacketsWithErrors();
    public abstract virtual long get_IncomingUnknownProtocolPackets();
    public abstract virtual long get_NonUnicastPacketsReceived();
    public abstract virtual long get_NonUnicastPacketsSent();
    public abstract virtual long get_OutgoingPacketsDiscarded();
    public abstract virtual long get_OutgoingPacketsWithErrors();
    public abstract virtual long get_OutputQueueLength();
    public abstract virtual long get_UnicastPacketsReceived();
    public abstract virtual long get_UnicastPacketsSent();
}
public abstract class System.Net.NetworkInformation.IPv6InterfaceProperties : object {
    public int Index { get; }
    public int Mtu { get; }
    public abstract virtual int get_Index();
    public abstract virtual int get_Mtu();
    public virtual long GetScopeId(ScopeLevel scopeLevel);
}
public abstract class System.Net.NetworkInformation.MulticastIPAddressInformation : IPAddressInformation {
    public long AddressPreferredLifetime { get; }
    public long AddressValidLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public abstract virtual long get_AddressPreferredLifetime();
    public abstract virtual long get_AddressValidLifetime();
    public abstract virtual long get_DhcpLeaseLifetime();
    public abstract virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public abstract virtual PrefixOrigin get_PrefixOrigin();
    public abstract virtual SuffixOrigin get_SuffixOrigin();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.MulticastIPAddressInformationCollection : object {
    private List`1<MulticastIPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MulticastIPAddressInformation Item { get; }
    public virtual void CopyTo(MulticastIPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(MulticastIPAddressInformation address);
    internal void InternalAdd(MulticastIPAddressInformation address);
    public virtual bool Contains(MulticastIPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<MulticastIPAddressInformation> GetEnumerator();
    public virtual MulticastIPAddressInformation get_Item(int index);
    public virtual bool Remove(MulticastIPAddressInformation address);
    public virtual void Clear();
}
public enum System.Net.NetworkInformation.NetBiosNodeType : Enum {
    public int value__;
    public static NetBiosNodeType Unknown;
    public static NetBiosNodeType Broadcast;
    public static NetBiosNodeType Peer2Peer;
    public static NetBiosNodeType Mixed;
    public static NetBiosNodeType Hybrid;
}
public class System.Net.NetworkInformation.NetworkAddressChangedEventHandler : MulticastDelegate {
    public NetworkAddressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler : MulticastDelegate {
    public NetworkAvailabilityChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NetworkAvailabilityEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NetworkAvailabilityEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.NetworkInformation.NetworkAvailabilityEventArgs : EventArgs {
    private bool _isAvailable;
    public bool IsAvailable { get; }
    internal NetworkAvailabilityEventArgs(bool isAvailable);
    public bool get_IsAvailable();
}
public class System.Net.NetworkInformation.NetworkChange : object {
    private static Dictionary`2<NetworkAddressChangedEventHandler, ExecutionContext> s_addressChangedSubscribers;
    private static Dictionary`2<NetworkAvailabilityChangedEventHandler, ExecutionContext> s_availabilityChangedSubscribers;
    private static NetworkAvailabilityEventArgs s_availableEventArgs;
    private static NetworkAvailabilityEventArgs s_notAvailableEventArgs;
    private static ContextCallback s_runHandlerAvailable;
    private static ContextCallback s_runHandlerNotAvailable;
    private static ContextCallback s_runAddressChangedHandler;
    private static object s_globalLock;
    private static NetworkChange();
    private static void RunAddressChangedHandler(object state);
    private static void RunAvailabilityHandlerAvailable(object state);
    private static void RunAvailabilityHandlerNotAvailable(object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
public static void RegisterNetworkChange(NetworkChange nc);
    public static void add_NetworkAvailabilityChanged(NetworkAvailabilityChangedEventHandler value);
    public static void remove_NetworkAvailabilityChanged(NetworkAvailabilityChangedEventHandler value);
    public static void add_NetworkAddressChanged(NetworkAddressChangedEventHandler value);
    public static void remove_NetworkAddressChanged(NetworkAddressChangedEventHandler value);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Net.NetworkInformation.NetworkInformationException : Win32Exception {
    public int ErrorCode { get; }
    public NetworkInformationException(int errorCode);
    protected NetworkInformationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    internal NetworkInformationException(SocketError socketError);
    internal NetworkInformationException(string message);
    internal NetworkInformationException(string message, Exception innerException);
    public virtual int get_ErrorCode();
}
public abstract class System.Net.NetworkInformation.NetworkInterface : object {
    public static int IPv6LoopbackInterfaceIndex { get; }
    public static int LoopbackInterfaceIndex { get; }
    public string Id { get; }
    public string Name { get; }
    public string Description { get; }
    public OperationalStatus OperationalStatus { get; }
    public long Speed { get; }
    public bool IsReceiveOnly { get; }
    public bool SupportsMulticast { get; }
    public NetworkInterfaceType NetworkInterfaceType { get; }
    public static NetworkInterface[] GetAllNetworkInterfaces();
    public static bool GetIsNetworkAvailable();
    public static int get_IPv6LoopbackInterfaceIndex();
    public static int get_LoopbackInterfaceIndex();
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual IPInterfaceProperties GetIPProperties();
    public virtual IPInterfaceStatistics GetIPStatistics();
    public virtual IPv4InterfaceStatistics GetIPv4Statistics();
    public virtual OperationalStatus get_OperationalStatus();
    public virtual long get_Speed();
    public virtual bool get_IsReceiveOnly();
    public virtual bool get_SupportsMulticast();
    public virtual PhysicalAddress GetPhysicalAddress();
    public virtual NetworkInterfaceType get_NetworkInterfaceType();
    public virtual bool Supports(NetworkInterfaceComponent networkInterfaceComponent);
}
public enum System.Net.NetworkInformation.NetworkInterfaceComponent : Enum {
    public int value__;
    public static NetworkInterfaceComponent IPv4;
    public static NetworkInterfaceComponent IPv6;
}
internal static class System.Net.NetworkInformation.NetworkInterfacePal : object {
    public static int LoopbackInterfaceIndex { get; }
    public static int IPv6LoopbackInterfaceIndex { get; }
    public static NetworkInterface[] GetAllNetworkInterfaces();
    public static bool GetIsNetworkAvailable();
    public static int get_LoopbackInterfaceIndex();
    public static int get_IPv6LoopbackInterfaceIndex();
}
public enum System.Net.NetworkInformation.NetworkInterfaceType : Enum {
    public int value__;
    public static NetworkInterfaceType Unknown;
    public static NetworkInterfaceType Ethernet;
    public static NetworkInterfaceType TokenRing;
    public static NetworkInterfaceType Fddi;
    public static NetworkInterfaceType BasicIsdn;
    public static NetworkInterfaceType PrimaryIsdn;
    public static NetworkInterfaceType Ppp;
    public static NetworkInterfaceType Loopback;
    public static NetworkInterfaceType Ethernet3Megabit;
    public static NetworkInterfaceType Slip;
    public static NetworkInterfaceType Atm;
    public static NetworkInterfaceType GenericModem;
    public static NetworkInterfaceType FastEthernetT;
    public static NetworkInterfaceType Isdn;
    public static NetworkInterfaceType FastEthernetFx;
    public static NetworkInterfaceType Wireless80211;
    public static NetworkInterfaceType AsymmetricDsl;
    public static NetworkInterfaceType RateAdaptDsl;
    public static NetworkInterfaceType SymmetricDsl;
    public static NetworkInterfaceType VeryHighSpeedDsl;
    public static NetworkInterfaceType IPOverAtm;
    public static NetworkInterfaceType GigabitEthernet;
    public static NetworkInterfaceType Tunnel;
    public static NetworkInterfaceType MultiRateSymmetricDsl;
    public static NetworkInterfaceType HighPerformanceSerialBus;
    public static NetworkInterfaceType Wman;
    public static NetworkInterfaceType Wwanpp;
    public static NetworkInterfaceType Wwanpp2;
}
public enum System.Net.NetworkInformation.OperationalStatus : Enum {
    public int value__;
    public static OperationalStatus Up;
    public static OperationalStatus Down;
    public static OperationalStatus Testing;
    public static OperationalStatus Unknown;
    public static OperationalStatus Dormant;
    public static OperationalStatus NotPresent;
    public static OperationalStatus LowerLayerDown;
}
public class System.Net.NetworkInformation.PhysicalAddress : object {
    private Byte[] _address;
    private bool _hashNotComputed;
    private int _hash;
    public static PhysicalAddress None;
    public PhysicalAddress(Byte[] address);
    private static PhysicalAddress();
    public virtual int GetHashCode();
    public virtual bool Equals(object comparand);
    public virtual string ToString();
    public Byte[] GetAddressBytes();
    public static PhysicalAddress Parse(string address);
}
public enum System.Net.NetworkInformation.PrefixOrigin : Enum {
    public int value__;
    public static PrefixOrigin Other;
    public static PrefixOrigin Manual;
    public static PrefixOrigin WellKnown;
    public static PrefixOrigin Dhcp;
    public static PrefixOrigin RouterAdvertisement;
}
internal class System.Net.NetworkInformation.SafeCancelMibChangeNotify : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class System.Net.NetworkInformation.SafeFreeMibTable : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public enum System.Net.NetworkInformation.ScopeLevel : Enum {
    public int value__;
    public static ScopeLevel None;
    public static ScopeLevel Interface;
    public static ScopeLevel Link;
    public static ScopeLevel Subnet;
    public static ScopeLevel Admin;
    public static ScopeLevel Site;
    public static ScopeLevel Organization;
    public static ScopeLevel Global;
}
[FlagsAttribute]
internal enum System.Net.NetworkInformation.StartIPOptions : Enum {
    public int value__;
    public static StartIPOptions None;
    public static StartIPOptions StartIPv4;
    public static StartIPOptions StartIPv6;
    public static StartIPOptions Both;
}
public enum System.Net.NetworkInformation.SuffixOrigin : Enum {
    public int value__;
    public static SuffixOrigin Other;
    public static SuffixOrigin Manual;
    public static SuffixOrigin WellKnown;
    public static SuffixOrigin OriginDhcp;
    public static SuffixOrigin LinkLayerAddress;
    public static SuffixOrigin Random;
}
internal class System.Net.NetworkInformation.SystemGatewayIPAddressInformation : GatewayIPAddressInformation {
    private IPAddress _address;
    public IPAddress Address { get; }
    private SystemGatewayIPAddressInformation(IPAddress address);
    public virtual IPAddress get_Address();
    internal static GatewayIPAddressInformationCollection ToGatewayIpAddressInformationCollection(IPAddressCollection addresses);
}
internal class System.Net.NetworkInformation.SystemIcmpV4Statistics : IcmpV4Statistics {
    private MibIcmpInfo _stats;
    public long MessagesSent { get; }
    public long MessagesReceived { get; }
    public long ErrorsSent { get; }
    public long ErrorsReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long DestinationUnreachableMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long ParameterProblemsSent { get; }
    public long ParameterProblemsReceived { get; }
    public long SourceQuenchesSent { get; }
    public long SourceQuenchesReceived { get; }
    public long RedirectsSent { get; }
    public long RedirectsReceived { get; }
    public long EchoRequestsSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRepliesReceived { get; }
    public long TimestampRequestsSent { get; }
    public long TimestampRequestsReceived { get; }
    public long TimestampRepliesSent { get; }
    public long TimestampRepliesReceived { get; }
    public long AddressMaskRequestsSent { get; }
    public long AddressMaskRequestsReceived { get; }
    public long AddressMaskRepliesSent { get; }
    public long AddressMaskRepliesReceived { get; }
    public virtual long get_MessagesSent();
    public virtual long get_MessagesReceived();
    public virtual long get_ErrorsSent();
    public virtual long get_ErrorsReceived();
    public virtual long get_DestinationUnreachableMessagesSent();
    public virtual long get_DestinationUnreachableMessagesReceived();
    public virtual long get_TimeExceededMessagesSent();
    public virtual long get_TimeExceededMessagesReceived();
    public virtual long get_ParameterProblemsSent();
    public virtual long get_ParameterProblemsReceived();
    public virtual long get_SourceQuenchesSent();
    public virtual long get_SourceQuenchesReceived();
    public virtual long get_RedirectsSent();
    public virtual long get_RedirectsReceived();
    public virtual long get_EchoRequestsSent();
    public virtual long get_EchoRequestsReceived();
    public virtual long get_EchoRepliesSent();
    public virtual long get_EchoRepliesReceived();
    public virtual long get_TimestampRequestsSent();
    public virtual long get_TimestampRequestsReceived();
    public virtual long get_TimestampRepliesSent();
    public virtual long get_TimestampRepliesReceived();
    public virtual long get_AddressMaskRequestsSent();
    public virtual long get_AddressMaskRequestsReceived();
    public virtual long get_AddressMaskRepliesSent();
    public virtual long get_AddressMaskRepliesReceived();
}
internal class System.Net.NetworkInformation.SystemIcmpV6Statistics : IcmpV6Statistics {
    private MibIcmpInfoEx _stats;
    public long MessagesSent { get; }
    public long MessagesReceived { get; }
    public long ErrorsSent { get; }
    public long ErrorsReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long DestinationUnreachableMessagesReceived { get; }
    public long PacketTooBigMessagesSent { get; }
    public long PacketTooBigMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long ParameterProblemsSent { get; }
    public long ParameterProblemsReceived { get; }
    public long EchoRequestsSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRepliesReceived { get; }
    public long MembershipQueriesSent { get; }
    public long MembershipQueriesReceived { get; }
    public long MembershipReportsSent { get; }
    public long MembershipReportsReceived { get; }
    public long MembershipReductionsSent { get; }
    public long MembershipReductionsReceived { get; }
    public long RouterAdvertisementsSent { get; }
    public long RouterAdvertisementsReceived { get; }
    public long RouterSolicitsSent { get; }
    public long RouterSolicitsReceived { get; }
    public long NeighborAdvertisementsSent { get; }
    public long NeighborAdvertisementsReceived { get; }
    public long NeighborSolicitsSent { get; }
    public long NeighborSolicitsReceived { get; }
    public long RedirectsSent { get; }
    public long RedirectsReceived { get; }
    public virtual long get_MessagesSent();
    public virtual long get_MessagesReceived();
    public virtual long get_ErrorsSent();
    public virtual long get_ErrorsReceived();
    public virtual long get_DestinationUnreachableMessagesSent();
    public virtual long get_DestinationUnreachableMessagesReceived();
    public virtual long get_PacketTooBigMessagesSent();
    public virtual long get_PacketTooBigMessagesReceived();
    public virtual long get_TimeExceededMessagesSent();
    public virtual long get_TimeExceededMessagesReceived();
    public virtual long get_ParameterProblemsSent();
    public virtual long get_ParameterProblemsReceived();
    public virtual long get_EchoRequestsSent();
    public virtual long get_EchoRequestsReceived();
    public virtual long get_EchoRepliesSent();
    public virtual long get_EchoRepliesReceived();
    public virtual long get_MembershipQueriesSent();
    public virtual long get_MembershipQueriesReceived();
    public virtual long get_MembershipReportsSent();
    public virtual long get_MembershipReportsReceived();
    public virtual long get_MembershipReductionsSent();
    public virtual long get_MembershipReductionsReceived();
    public virtual long get_RouterAdvertisementsSent();
    public virtual long get_RouterAdvertisementsReceived();
    public virtual long get_RouterSolicitsSent();
    public virtual long get_RouterSolicitsReceived();
    public virtual long get_NeighborAdvertisementsSent();
    public virtual long get_NeighborAdvertisementsReceived();
    public virtual long get_NeighborSolicitsSent();
    public virtual long get_NeighborSolicitsReceived();
    public virtual long get_RedirectsSent();
    public virtual long get_RedirectsReceived();
}
internal class System.Net.NetworkInformation.SystemIPAddressInformation : IPAddressInformation {
    private IPAddress _address;
    internal bool Transient;
    internal bool DnsEligible;
    public IPAddress Address { get; }
    public bool IsTransient { get; }
    public bool IsDnsEligible { get; }
    internal SystemIPAddressInformation(IPAddress address, AdapterAddressFlags flags);
    public virtual IPAddress get_Address();
    public virtual bool get_IsTransient();
    public virtual bool get_IsDnsEligible();
}
internal class System.Net.NetworkInformation.SystemIPGlobalProperties : IPGlobalProperties {
    internal FIXED_INFO FixedInfo { get; }
    public string HostName { get; }
    public string DomainName { get; }
    public NetBiosNodeType NodeType { get; }
    public string DhcpScopeName { get; }
    public bool IsWinsProxy { get; }
    internal FIXED_INFO get_FixedInfo();
    public virtual string get_HostName();
    public virtual string get_DomainName();
    public virtual NetBiosNodeType get_NodeType();
    public virtual string get_DhcpScopeName();
    public virtual bool get_IsWinsProxy();
    public virtual TcpConnectionInformation[] GetActiveTcpConnections();
    public virtual IPEndPoint[] GetActiveTcpListeners();
    private List`1<SystemTcpConnectionInformation> GetAllTcpConnections();
    public virtual IPEndPoint[] GetActiveUdpListeners();
    public virtual IPGlobalStatistics GetIPv4GlobalStatistics();
    public virtual IPGlobalStatistics GetIPv6GlobalStatistics();
    public virtual TcpStatistics GetTcpIPv4Statistics();
    public virtual TcpStatistics GetTcpIPv6Statistics();
    public virtual UdpStatistics GetUdpIPv4Statistics();
    public virtual UdpStatistics GetUdpIPv6Statistics();
    public virtual IcmpV4Statistics GetIcmpV4Statistics();
    public virtual IcmpV6Statistics GetIcmpV6Statistics();
    public virtual IAsyncResult BeginGetUnicastAddresses(AsyncCallback callback, object state);
    public virtual UnicastIPAddressInformationCollection EndGetUnicastAddresses(IAsyncResult asyncResult);
    public virtual UnicastIPAddressInformationCollection GetUnicastAddresses();
    public virtual Task`1<UnicastIPAddressInformationCollection> GetUnicastAddressesAsync();
    private static void StableUnicastAddressTableCallback(object param);
    private static UnicastIPAddressInformationCollection GetUnicastAddressTable();
}
internal class System.Net.NetworkInformation.SystemIPGlobalStatistics : IPGlobalStatistics {
    private MibIpStats _stats;
    public bool ForwardingEnabled { get; }
    public int DefaultTtl { get; }
    public long ReceivedPackets { get; }
    public long ReceivedPacketsWithHeadersErrors { get; }
    public long ReceivedPacketsWithAddressErrors { get; }
    public long ReceivedPacketsForwarded { get; }
    public long ReceivedPacketsWithUnknownProtocol { get; }
    public long ReceivedPacketsDiscarded { get; }
    public long ReceivedPacketsDelivered { get; }
    public long OutputPacketRequests { get; }
    public long OutputPacketRoutingDiscards { get; }
    public long OutputPacketsDiscarded { get; }
    public long OutputPacketsWithNoRoute { get; }
    public long PacketReassemblyTimeout { get; }
    public long PacketReassembliesRequired { get; }
    public long PacketsReassembled { get; }
    public long PacketReassemblyFailures { get; }
    public long PacketsFragmented { get; }
    public long PacketFragmentFailures { get; }
    public int NumberOfInterfaces { get; }
    public int NumberOfIPAddresses { get; }
    public int NumberOfRoutes { get; }
    internal SystemIPGlobalStatistics(AddressFamily family);
    public virtual bool get_ForwardingEnabled();
    public virtual int get_DefaultTtl();
    public virtual long get_ReceivedPackets();
    public virtual long get_ReceivedPacketsWithHeadersErrors();
    public virtual long get_ReceivedPacketsWithAddressErrors();
    public virtual long get_ReceivedPacketsForwarded();
    public virtual long get_ReceivedPacketsWithUnknownProtocol();
    public virtual long get_ReceivedPacketsDiscarded();
    public virtual long get_ReceivedPacketsDelivered();
    public virtual long get_OutputPacketRequests();
    public virtual long get_OutputPacketRoutingDiscards();
    public virtual long get_OutputPacketsDiscarded();
    public virtual long get_OutputPacketsWithNoRoute();
    public virtual long get_PacketReassemblyTimeout();
    public virtual long get_PacketReassembliesRequired();
    public virtual long get_PacketsReassembled();
    public virtual long get_PacketReassemblyFailures();
    public virtual long get_PacketsFragmented();
    public virtual long get_PacketFragmentFailures();
    public virtual int get_NumberOfInterfaces();
    public virtual int get_NumberOfIPAddresses();
    public virtual int get_NumberOfRoutes();
}
internal class System.Net.NetworkInformation.SystemIPInterfaceProperties : IPInterfaceProperties {
    private bool _dnsEnabled;
    private bool _dynamicDnsEnabled;
    private InternalIPAddressCollection _dnsAddresses;
    private UnicastIPAddressInformationCollection _unicastAddresses;
    private MulticastIPAddressInformationCollection _multicastAddresses;
    private IPAddressInformationCollection _anycastAddresses;
    private AdapterFlags _adapterFlags;
    private string _dnsSuffix;
    private SystemIPv4InterfaceProperties _ipv4Properties;
    private SystemIPv6InterfaceProperties _ipv6Properties;
    private InternalIPAddressCollection _winsServersAddresses;
    private GatewayIPAddressInformationCollection _gatewayAddresses;
    private InternalIPAddressCollection _dhcpServers;
    public bool IsDnsEnabled { get; }
    public bool IsDynamicDnsEnabled { get; }
    public string DnsSuffix { get; }
    public IPAddressInformationCollection AnycastAddresses { get; }
    public UnicastIPAddressInformationCollection UnicastAddresses { get; }
    public MulticastIPAddressInformationCollection MulticastAddresses { get; }
    public IPAddressCollection DnsAddresses { get; }
    public GatewayIPAddressInformationCollection GatewayAddresses { get; }
    public IPAddressCollection DhcpServerAddresses { get; }
    public IPAddressCollection WinsServersAddresses { get; }
    internal SystemIPInterfaceProperties(FIXED_INFO fixedInfo, IpAdapterAddresses ipAdapterAddresses);
    public virtual bool get_IsDnsEnabled();
    public virtual bool get_IsDynamicDnsEnabled();
    public virtual IPv4InterfaceProperties GetIPv4Properties();
    public virtual IPv6InterfaceProperties GetIPv6Properties();
    public virtual string get_DnsSuffix();
    public virtual IPAddressInformationCollection get_AnycastAddresses();
    public virtual UnicastIPAddressInformationCollection get_UnicastAddresses();
    public virtual MulticastIPAddressInformationCollection get_MulticastAddresses();
    public virtual IPAddressCollection get_DnsAddresses();
    public virtual GatewayIPAddressInformationCollection get_GatewayAddresses();
    public virtual IPAddressCollection get_DhcpServerAddresses();
    public virtual IPAddressCollection get_WinsServersAddresses();
}
internal class System.Net.NetworkInformation.SystemIPInterfaceStatistics : IPInterfaceStatistics {
    private MibIfRow2 _ifRow;
    public long OutputQueueLength { get; }
    public long BytesSent { get; }
    public long BytesReceived { get; }
    public long UnicastPacketsSent { get; }
    public long UnicastPacketsReceived { get; }
    public long NonUnicastPacketsSent { get; }
    public long NonUnicastPacketsReceived { get; }
    public long IncomingPacketsDiscarded { get; }
    public long OutgoingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long IncomingUnknownProtocolPackets { get; }
    internal SystemIPInterfaceStatistics(long index);
    public virtual long get_OutputQueueLength();
    public virtual long get_BytesSent();
    public virtual long get_BytesReceived();
    public virtual long get_UnicastPacketsSent();
    public virtual long get_UnicastPacketsReceived();
    public virtual long get_NonUnicastPacketsSent();
    public virtual long get_NonUnicastPacketsReceived();
    public virtual long get_IncomingPacketsDiscarded();
    public virtual long get_OutgoingPacketsDiscarded();
    public virtual long get_IncomingPacketsWithErrors();
    public virtual long get_OutgoingPacketsWithErrors();
    public virtual long get_IncomingUnknownProtocolPackets();
    internal static MibIfRow2 GetIfEntry2(long index);
}
internal class System.Net.NetworkInformation.SystemIPv4InterfaceProperties : IPv4InterfaceProperties {
    private bool _haveWins;
    private bool _dhcpEnabled;
    private bool _routingEnabled;
    private UInt32 _index;
    private UInt32 _mtu;
    private bool _autoConfigEnabled;
    private bool _autoConfigActive;
    public bool UsesWins { get; }
    public bool IsDhcpEnabled { get; }
    public bool IsForwardingEnabled { get; }
    public bool IsAutomaticPrivateAddressingEnabled { get; }
    public bool IsAutomaticPrivateAddressingActive { get; }
    public int Mtu { get; }
    public int Index { get; }
    internal SystemIPv4InterfaceProperties(FIXED_INFO fixedInfo, IpAdapterAddresses ipAdapterAddresses);
    public virtual bool get_UsesWins();
    public virtual bool get_IsDhcpEnabled();
    public virtual bool get_IsForwardingEnabled();
    public virtual bool get_IsAutomaticPrivateAddressingEnabled();
    public virtual bool get_IsAutomaticPrivateAddressingActive();
    public virtual int get_Mtu();
    public virtual int get_Index();
    private void GetPerAdapterInfo(UInt32 index);
}
internal class System.Net.NetworkInformation.SystemIPv4InterfaceStatistics : IPv4InterfaceStatistics {
    private MibIfRow2 _ifRow;
    public long OutputQueueLength { get; }
    public long BytesSent { get; }
    public long BytesReceived { get; }
    public long UnicastPacketsSent { get; }
    public long UnicastPacketsReceived { get; }
    public long NonUnicastPacketsSent { get; }
    public long NonUnicastPacketsReceived { get; }
    public long IncomingPacketsDiscarded { get; }
    public long OutgoingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long IncomingUnknownProtocolPackets { get; }
    internal SystemIPv4InterfaceStatistics(long index);
    public virtual long get_OutputQueueLength();
    public virtual long get_BytesSent();
    public virtual long get_BytesReceived();
    public virtual long get_UnicastPacketsSent();
    public virtual long get_UnicastPacketsReceived();
    public virtual long get_NonUnicastPacketsSent();
    public virtual long get_NonUnicastPacketsReceived();
    public virtual long get_IncomingPacketsDiscarded();
    public virtual long get_OutgoingPacketsDiscarded();
    public virtual long get_IncomingPacketsWithErrors();
    public virtual long get_OutgoingPacketsWithErrors();
    public virtual long get_IncomingUnknownProtocolPackets();
}
internal class System.Net.NetworkInformation.SystemIPv6InterfaceProperties : IPv6InterfaceProperties {
    private UInt32 _index;
    private UInt32 _mtu;
    private UInt32[] _zoneIndices;
    public int Index { get; }
    public int Mtu { get; }
    internal SystemIPv6InterfaceProperties(UInt32 index, UInt32 mtu, UInt32[] zoneIndices);
    public virtual int get_Index();
    public virtual int get_Mtu();
    public virtual long GetScopeId(ScopeLevel scopeLevel);
}
internal class System.Net.NetworkInformation.SystemMulticastIPAddressInformation : MulticastIPAddressInformation {
    private SystemIPAddressInformation _innerInfo;
    public IPAddress Address { get; }
    public bool IsTransient { get; }
    public bool IsDnsEligible { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public long AddressValidLifetime { get; }
    public long AddressPreferredLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    public SystemMulticastIPAddressInformation(SystemIPAddressInformation addressInfo);
    public virtual IPAddress get_Address();
    public virtual bool get_IsTransient();
    public virtual bool get_IsDnsEligible();
    public virtual PrefixOrigin get_PrefixOrigin();
    public virtual SuffixOrigin get_SuffixOrigin();
    public virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public virtual long get_AddressValidLifetime();
    public virtual long get_AddressPreferredLifetime();
    public virtual long get_DhcpLeaseLifetime();
    internal static MulticastIPAddressInformationCollection ToMulticastIpAddressInformationCollection(IPAddressInformationCollection addresses);
}
internal class System.Net.NetworkInformation.SystemNetworkInterface : NetworkInterface {
    private string _name;
    private string _id;
    private string _description;
    private Byte[] _physicalAddress;
    private UInt32 _addressLength;
    private NetworkInterfaceType _type;
    private OperationalStatus _operStatus;
    private long _speed;
    private UInt32 _index;
    private UInt32 _ipv6Index;
    private AdapterFlags _adapterFlags;
    private SystemIPInterfaceProperties _interfaceProperties;
    internal static int InternalLoopbackInterfaceIndex { get; }
    internal static int InternalIPv6LoopbackInterfaceIndex { get; }
    public string Id { get; }
    public string Name { get; }
    public string Description { get; }
    public NetworkInterfaceType NetworkInterfaceType { get; }
    public OperationalStatus OperationalStatus { get; }
    public long Speed { get; }
    public bool IsReceiveOnly { get; }
    public bool SupportsMulticast { get; }
    internal SystemNetworkInterface(FIXED_INFO fixedInfo, IpAdapterAddresses ipAdapterAddresses);
    internal static int get_InternalLoopbackInterfaceIndex();
    internal static int get_InternalIPv6LoopbackInterfaceIndex();
    private static int GetBestInterfaceForAddress(IPAddress addr);
    internal static bool InternalGetIsNetworkAvailable();
    internal static NetworkInterface[] GetNetworkInterfaces();
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual PhysicalAddress GetPhysicalAddress();
    public virtual NetworkInterfaceType get_NetworkInterfaceType();
    public virtual IPInterfaceProperties GetIPProperties();
    public virtual IPv4InterfaceStatistics GetIPv4Statistics();
    public virtual IPInterfaceStatistics GetIPStatistics();
    public virtual bool Supports(NetworkInterfaceComponent networkInterfaceComponent);
    public virtual OperationalStatus get_OperationalStatus();
    public virtual long get_Speed();
    public virtual bool get_IsReceiveOnly();
    public virtual bool get_SupportsMulticast();
}
internal class System.Net.NetworkInformation.SystemTcpConnectionInformation : TcpConnectionInformation {
    private IPEndPoint _localEndPoint;
    private IPEndPoint _remoteEndPoint;
    private TcpState _state;
    public TcpState State { get; }
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    internal SystemTcpConnectionInformation(MibTcpRow row);
    internal SystemTcpConnectionInformation(MibTcp6RowOwnerPid row);
    public virtual TcpState get_State();
    public virtual IPEndPoint get_LocalEndPoint();
    public virtual IPEndPoint get_RemoteEndPoint();
}
internal class System.Net.NetworkInformation.SystemTcpStatistics : TcpStatistics {
    private MibTcpStats _stats;
    public long MinimumTransmissionTimeout { get; }
    public long MaximumTransmissionTimeout { get; }
    public long MaximumConnections { get; }
    public long ConnectionsInitiated { get; }
    public long ConnectionsAccepted { get; }
    public long FailedConnectionAttempts { get; }
    public long ResetConnections { get; }
    public long CurrentConnections { get; }
    public long SegmentsReceived { get; }
    public long SegmentsSent { get; }
    public long SegmentsResent { get; }
    public long ErrorsReceived { get; }
    public long ResetsSent { get; }
    public long CumulativeConnections { get; }
    internal SystemTcpStatistics(AddressFamily family);
    public virtual long get_MinimumTransmissionTimeout();
    public virtual long get_MaximumTransmissionTimeout();
    public virtual long get_MaximumConnections();
    public virtual long get_ConnectionsInitiated();
    public virtual long get_ConnectionsAccepted();
    public virtual long get_FailedConnectionAttempts();
    public virtual long get_ResetConnections();
    public virtual long get_CurrentConnections();
    public virtual long get_SegmentsReceived();
    public virtual long get_SegmentsSent();
    public virtual long get_SegmentsResent();
    public virtual long get_ErrorsReceived();
    public virtual long get_ResetsSent();
    public virtual long get_CumulativeConnections();
}
internal class System.Net.NetworkInformation.SystemUdpStatistics : UdpStatistics {
    private MibUdpStats _stats;
    public long DatagramsReceived { get; }
    public long IncomingDatagramsDiscarded { get; }
    public long IncomingDatagramsWithErrors { get; }
    public long DatagramsSent { get; }
    public int UdpListeners { get; }
    internal SystemUdpStatistics(AddressFamily family);
    public virtual long get_DatagramsReceived();
    public virtual long get_IncomingDatagramsDiscarded();
    public virtual long get_IncomingDatagramsWithErrors();
    public virtual long get_DatagramsSent();
    public virtual int get_UdpListeners();
}
internal class System.Net.NetworkInformation.SystemUnicastIPAddressInformation : UnicastIPAddressInformation {
    private long _dhcpLeaseLifetime;
    private SystemIPAddressInformation _innerInfo;
    private IPAddress _ipv4Mask;
    private PrefixOrigin _prefixOrigin;
    private SuffixOrigin _suffixOrigin;
    private DuplicateAddressDetectionState _dadState;
    private UInt32 _validLifetime;
    private UInt32 _preferredLifetime;
    private byte _prefixLength;
    public IPAddress Address { get; }
    public IPAddress IPv4Mask { get; }
    public int PrefixLength { get; }
    public bool IsTransient { get; }
    public bool IsDnsEligible { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public long AddressValidLifetime { get; }
    public long AddressPreferredLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    internal SystemUnicastIPAddressInformation(IpAdapterUnicastAddress adapterAddress);
    public virtual IPAddress get_Address();
    public virtual IPAddress get_IPv4Mask();
    public virtual int get_PrefixLength();
    public virtual bool get_IsTransient();
    public virtual bool get_IsDnsEligible();
    public virtual PrefixOrigin get_PrefixOrigin();
    public virtual SuffixOrigin get_SuffixOrigin();
    public virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public virtual long get_AddressValidLifetime();
    public virtual long get_AddressPreferredLifetime();
    public virtual long get_DhcpLeaseLifetime();
    internal static UnicastIPAddressInformationCollection MarshalUnicastIpAddressInformationCollection(IntPtr ptr);
    private static IPAddress PrefixLengthToSubnetMask(byte prefixLength, AddressFamily family);
}
public abstract class System.Net.NetworkInformation.TcpConnectionInformation : object {
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public TcpState State { get; }
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual IPEndPoint get_RemoteEndPoint();
    public abstract virtual TcpState get_State();
}
public enum System.Net.NetworkInformation.TcpState : Enum {
    public int value__;
    public static TcpState Unknown;
    public static TcpState Closed;
    public static TcpState Listen;
    public static TcpState SynSent;
    public static TcpState SynReceived;
    public static TcpState Established;
    public static TcpState FinWait1;
    public static TcpState FinWait2;
    public static TcpState CloseWait;
    public static TcpState Closing;
    public static TcpState LastAck;
    public static TcpState TimeWait;
    public static TcpState DeleteTcb;
}
public abstract class System.Net.NetworkInformation.TcpStatistics : object {
    public long ConnectionsAccepted { get; }
    public long ConnectionsInitiated { get; }
    public long CumulativeConnections { get; }
    public long CurrentConnections { get; }
    public long ErrorsReceived { get; }
    public long FailedConnectionAttempts { get; }
    public long MaximumConnections { get; }
    public long MaximumTransmissionTimeout { get; }
    public long MinimumTransmissionTimeout { get; }
    public long ResetConnections { get; }
    public long SegmentsReceived { get; }
    public long SegmentsResent { get; }
    public long SegmentsSent { get; }
    public long ResetsSent { get; }
    public abstract virtual long get_ConnectionsAccepted();
    public abstract virtual long get_ConnectionsInitiated();
    public abstract virtual long get_CumulativeConnections();
    public abstract virtual long get_CurrentConnections();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_FailedConnectionAttempts();
    public abstract virtual long get_MaximumConnections();
    public abstract virtual long get_MaximumTransmissionTimeout();
    public abstract virtual long get_MinimumTransmissionTimeout();
    public abstract virtual long get_ResetConnections();
    public abstract virtual long get_SegmentsReceived();
    public abstract virtual long get_SegmentsResent();
    public abstract virtual long get_SegmentsSent();
    public abstract virtual long get_ResetsSent();
}
internal class System.Net.NetworkInformation.TeredoHelper : object {
    private static List`1<TeredoHelper> s_pendingNotifications;
    private Action`1<object> _callback;
    private object _state;
    private bool _runCallbackCalled;
    private StableUnicastIpAddressTableDelegate _onStabilizedDelegate;
    private SafeCancelMibChangeNotify _cancelHandle;
    private TeredoHelper(Action`1<object> callback, object state);
    private static TeredoHelper();
    public static bool UnsafeNotifyStableUnicastIpAddressTable(Action`1<object> callback, object state);
    private void RunCallback(object o);
    private void OnStabilized(IntPtr context, IntPtr table);
}
public abstract class System.Net.NetworkInformation.UdpStatistics : object {
    public long DatagramsReceived { get; }
    public long DatagramsSent { get; }
    public long IncomingDatagramsDiscarded { get; }
    public long IncomingDatagramsWithErrors { get; }
    public int UdpListeners { get; }
    public abstract virtual long get_DatagramsReceived();
    public abstract virtual long get_DatagramsSent();
    public abstract virtual long get_IncomingDatagramsDiscarded();
    public abstract virtual long get_IncomingDatagramsWithErrors();
    public abstract virtual int get_UdpListeners();
}
public abstract class System.Net.NetworkInformation.UnicastIPAddressInformation : IPAddressInformation {
    public long AddressPreferredLifetime { get; }
    public long AddressValidLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public IPAddress IPv4Mask { get; }
    public int PrefixLength { get; }
    public abstract virtual long get_AddressPreferredLifetime();
    public abstract virtual long get_AddressValidLifetime();
    public abstract virtual long get_DhcpLeaseLifetime();
    public abstract virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public abstract virtual PrefixOrigin get_PrefixOrigin();
    public abstract virtual SuffixOrigin get_SuffixOrigin();
    public abstract virtual IPAddress get_IPv4Mask();
    public virtual int get_PrefixLength();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.UnicastIPAddressInformationCollection : object {
    private List`1<UnicastIPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public UnicastIPAddressInformation Item { get; }
    public virtual void CopyTo(UnicastIPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(UnicastIPAddressInformation address);
    internal void InternalAdd(UnicastIPAddressInformation address);
    public virtual bool Contains(UnicastIPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<UnicastIPAddressInformation> GetEnumerator();
    public virtual UnicastIPAddressInformation get_Item(int index);
    public virtual bool Remove(UnicastIPAddressInformation address);
    public virtual void Clear();
}
internal static class System.Net.SocketAddressPal : object {
    public static int IPv6AddressSize;
    public static int IPv4AddressSize;
    public static int DataOffset;
    public static AddressFamily GetAddressFamily(Byte[] buffer);
    public static void SetAddressFamily(Byte[] buffer, AddressFamily family);
    public static ushort GetPort(Byte[] buffer);
    public static void SetPort(Byte[] buffer, ushort port);
    public static UInt32 GetIPv4Address(ReadOnlySpan`1<byte> buffer);
    public static void GetIPv6Address(ReadOnlySpan`1<byte> buffer, Span`1<byte> address, UInt32& scope);
    public static void SetIPv4Address(Byte[] buffer, UInt32 address);
    public static void SetIPv6Address(Byte[] buffer, Span`1<byte> address, UInt32 scope);
}
internal static class System.Net.Sockets.CompletionPortHelper : object {
    internal static bool PlatformHasUdpIssue;
    private static CompletionPortHelper();
    internal static bool SkipCompletionPortOnSuccess(SafeHandle handle);
    private static bool CheckIfPlatformHasUdpIssue();
}
internal class System.Net.Sockets.SafeCloseSocket : SafeHandleMinusOneIsInvalid {
    private InnerSafeCloseSocket _innerSocket;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _released;
    private ThreadPoolBoundHandle _iocpBoundHandle;
    private bool _skipCompletionPortOnSuccess;
    private object _iocpBindingLock;
    public bool IsInvalid { get; }
    public ThreadPoolBoundHandle IOCPBoundHandle { get; }
    public bool SkipCompletionPortOnSuccess { get; }
    public virtual bool get_IsInvalid();
    private void SetInnerSocket(InnerSafeCloseSocket socket);
    private static SafeCloseSocket CreateSocket(InnerSafeCloseSocket socket);
    protected static void CreateSocket(InnerSafeCloseSocket socket, SafeCloseSocket target);
    protected virtual bool ReleaseHandle();
    internal void CloseAsIs();
    public void SetExposed();
    public ThreadPoolBoundHandle get_IOCPBoundHandle();
    public ThreadPoolBoundHandle GetThreadPoolBoundHandle();
    public ThreadPoolBoundHandle GetOrAllocateThreadPoolBoundHandle(bool trySkipCompletionPortOnSuccess);
    public bool get_SkipCompletionPortOnSuccess();
    internal static SafeCloseSocket CreateWSASocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType);
    internal static SafeCloseSocket Accept(SafeCloseSocket socketHandle, Byte[] socketAddress, Int32& socketAddressSize);
    private void InnerReleaseHandle();
}
internal class System.Net.Sockets.SafeCloseSocketAndEvent : SafeCloseSocket {
    private AutoResetEvent _waitHandle;
    internal static SafeCloseSocketAndEvent CreateWSASocketWithEvent(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType, bool autoReset, bool signaled);
    internal static void CompleteInitialization(SafeCloseSocketAndEvent socketAndEventHandle);
    internal WaitHandle GetEventHandle();
    protected virtual bool ReleaseHandle();
    private void DeleteEvent();
}
internal class System.Net.Sockets.SafeOverlappedFree : SafeHandleZeroOrMinusOneIsInvalid {
    private static SafeOverlappedFree s_zero;
    private SafeCloseSocket _socketHandle;
    internal static SafeOverlappedFree Zero { get; }
    private SafeOverlappedFree(bool ownsHandle);
    private static SafeOverlappedFree();
    internal static SafeOverlappedFree get_Zero();
    public static SafeOverlappedFree Alloc();
    public static SafeOverlappedFree Alloc(SafeCloseSocket socketHandle);
    public void Close(bool resetOwner);
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Sockets.WSABuffer : ValueType {
    internal int Length;
    internal IntPtr Pointer;
}
[FlagsAttribute]
internal enum System.Net.ThreadKinds : Enum {
    public int value__;
    public static ThreadKinds Unknown;
    public static ThreadKinds User;
    public static ThreadKinds System;
    public static ThreadKinds Sync;
    public static ThreadKinds Async;
    public static ThreadKinds Timer;
    public static ThreadKinds CompletionPort;
    public static ThreadKinds Worker;
    public static ThreadKinds Finalization;
    public static ThreadKinds Other;
    public static ThreadKinds OwnerMask;
    public static ThreadKinds SyncMask;
    public static ThreadKinds SourceMask;
    public static ThreadKinds SafeSources;
    public static ThreadKinds ThreadPool;
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
    internal static Exception ActiveIssue(string issue);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_PropertyNotImplementedException { get; }
    internal static string net_completed_result { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_bad_mac_address { get; }
    internal static string net_collection_readonly { get; }
    internal static string net_FailedToParseNetworkFile { get; }
    internal static string net_NoLoopback { get; }
    internal static string net_InformationUnavailableOnPlatform { get; }
    internal static string net_PInvokeError { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_PropertyNotImplementedException();
    internal static string get_net_completed_result();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_bad_mac_address();
    internal static string get_net_collection_readonly();
    internal static string get_net_FailedToParseNetworkFile();
    internal static string get_net_NoLoopback();
    internal static string get_net_InformationUnavailableOnPlatform();
    internal static string get_net_PInvokeError();
}
