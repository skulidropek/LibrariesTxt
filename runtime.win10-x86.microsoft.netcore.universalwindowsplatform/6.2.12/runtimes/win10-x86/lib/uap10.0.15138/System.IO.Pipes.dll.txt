internal static class FxResources.System.IO.Pipes.SR : object {
}
internal static class Interop : object {
}
public class Microsoft.Win32.SafeHandles.SafePipeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private static int DefaultInvalidHandle;
    public SafePipeHandle(IntPtr preexistingHandle, bool ownsHandle);
    internal void SetHandle(int descriptor);
    protected virtual bool ReleaseHandle();
}
internal static class System.IO.Error : object {
    internal static Exception GetEndOfFile();
    internal static Exception GetPipeNotOpen();
    internal static Exception GetReadNotSupported();
    internal static Exception GetSeekNotSupported();
    internal static Exception GetWriteNotSupported();
    internal static Exception GetOperationAborted();
}
public class System.IO.Pipes.AnonymousPipeClientStream : PipeStream {
    public PipeTransmissionMode TransmissionMode { get; }
    unknown PipeTransmissionMode ReadMode {public set; }
    public AnonymousPipeClientStream(string pipeHandleAsString);
    public AnonymousPipeClientStream(PipeDirection direction, string pipeHandleAsString);
    public AnonymousPipeClientStream(PipeDirection direction, SafePipeHandle safePipeHandle);
    private void Init(PipeDirection direction, SafePipeHandle safePipeHandle);
    protected virtual override void Finalize();
    public virtual PipeTransmissionMode get_TransmissionMode();
    public virtual void set_ReadMode(PipeTransmissionMode value);
}
public class System.IO.Pipes.AnonymousPipeServerStream : PipeStream {
    private SafePipeHandle _clientHandle;
    private bool _clientHandleExposed;
    public SafePipeHandle ClientSafePipeHandle { get; }
    public PipeTransmissionMode TransmissionMode { get; }
    unknown PipeTransmissionMode ReadMode {public set; }
    public AnonymousPipeServerStream(PipeDirection direction);
    public AnonymousPipeServerStream(PipeDirection direction, HandleInheritability inheritability);
    public AnonymousPipeServerStream(PipeDirection direction, SafePipeHandle serverSafePipeHandle, SafePipeHandle clientSafePipeHandle);
    public AnonymousPipeServerStream(PipeDirection direction, HandleInheritability inheritability, int bufferSize);
    protected virtual override void Finalize();
    public string GetClientHandleAsString();
    public SafePipeHandle get_ClientSafePipeHandle();
    public void DisposeLocalCopyOfClientHandle();
    protected virtual void Dispose(bool disposing);
    public virtual PipeTransmissionMode get_TransmissionMode();
    public virtual void set_ReadMode(PipeTransmissionMode value);
    private void Create(PipeDirection direction, HandleInheritability inheritability, int bufferSize);
}
internal class System.IO.Pipes.ConnectionCompletionSource : PipeCompletionSource`1<VoidResult> {
    private NamedPipeServerStream _serverStream;
    internal ConnectionCompletionSource(NamedPipeServerStream server);
    internal virtual void SetCompletedSynchronously();
    protected virtual void AsyncCallback(UInt32 errorCode, UInt32 numBytes);
    protected virtual void HandleError(int errorCode);
    protected virtual void HandleUnexpectedCancellation();
}
public class System.IO.Pipes.NamedPipeClientStream : PipeStream {
    private static int CancellationCheckInterval;
    private string _normalizedPipePath;
    private TokenImpersonationLevel _impersonationLevel;
    private PipeOptions _pipeOptions;
    private HandleInheritability _inheritability;
    private PipeDirection _direction;
    public int NumberOfServerInstances { get; }
    public NamedPipeClientStream(string pipeName);
    public NamedPipeClientStream(string serverName, string pipeName);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel, HandleInheritability inheritability);
    public NamedPipeClientStream(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle);
    protected virtual override void Finalize();
    public void Connect();
    public void Connect(int timeout);
    private void ConnectInternal(int timeout, CancellationToken cancellationToken, int startTime);
    public Task ConnectAsync();
    public Task ConnectAsync(int timeout);
    public Task ConnectAsync(CancellationToken cancellationToken);
    public Task ConnectAsync(int timeout, CancellationToken cancellationToken);
    protected internal virtual void CheckPipePropertyOperations();
    private void CheckConnectOperationsClient();
    private bool TryConnect(int timeout, CancellationToken cancellationToken);
    public int get_NumberOfServerInstances();
    private void ValidateRemotePipeUser();
}
public class System.IO.Pipes.NamedPipeServerStream : PipeStream {
    public static int MaxAllowedServerInstances;
    private static TryCode tryCode;
    private static CleanupCode cleanupCode;
    public NamedPipeServerStream(string pipeName);
    public NamedPipeServerStream(string pipeName, PipeDirection direction);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize);
    private NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, HandleInheritability inheritability);
    public NamedPipeServerStream(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle);
    private static NamedPipeServerStream();
    protected virtual override void Finalize();
    public Task WaitForConnectionAsync();
    public IAsyncResult BeginWaitForConnection(AsyncCallback callback, object state);
    public void EndWaitForConnection(IAsyncResult asyncResult);
    private void CheckConnectOperationsServer();
    private void CheckDisconnectOperations();
    private void Create(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, HandleInheritability inheritability);
    public void WaitForConnection();
    public Task WaitForConnectionAsync(CancellationToken cancellationToken);
    public void Disconnect();
    public string GetImpersonationUserName();
    public void RunAsClient(PipeStreamImpersonationWorker impersonationWorker);
    private static void ImpersonateAndTryCode(object helper);
    private static void RevertImpersonationOnBackout(object helper, bool exceptionThrown);
    private Task WaitForConnectionCoreAsync(CancellationToken cancellationToken);
    private void CheckConnectOperationsServerWithHandle();
}
[FlagsAttribute]
public enum System.IO.Pipes.PipeAccessRights : Enum {
    public int value__;
    public static PipeAccessRights ReadData;
    public static PipeAccessRights WriteData;
    public static PipeAccessRights ReadAttributes;
    public static PipeAccessRights WriteAttributes;
    public static PipeAccessRights ReadExtendedAttributes;
    public static PipeAccessRights WriteExtendedAttributes;
    public static PipeAccessRights CreateNewInstance;
    public static PipeAccessRights Delete;
    public static PipeAccessRights ReadPermissions;
    public static PipeAccessRights ChangePermissions;
    public static PipeAccessRights TakeOwnership;
    public static PipeAccessRights Synchronize;
    public static PipeAccessRights FullControl;
    public static PipeAccessRights Read;
    public static PipeAccessRights Write;
    public static PipeAccessRights ReadWrite;
    public static PipeAccessRights AccessSystemSecurity;
}
public class System.IO.Pipes.PipeAccessRule : AccessRule {
    public PipeAccessRights PipeAccessRights { get; }
    public PipeAccessRule(string identity, PipeAccessRights rights, AccessControlType type);
    public PipeAccessRule(IdentityReference identity, PipeAccessRights rights, AccessControlType type);
    internal PipeAccessRule(IdentityReference identity, int accessMask, bool isInherited, AccessControlType type);
    public PipeAccessRights get_PipeAccessRights();
    internal static int AccessMaskFromRights(PipeAccessRights rights, AccessControlType controlType);
    internal static PipeAccessRights RightsFromAccessMask(int accessMask);
}
public class System.IO.Pipes.PipeAuditRule : AuditRule {
    public PipeAccessRights PipeAccessRights { get; }
    public PipeAuditRule(IdentityReference identity, PipeAccessRights rights, AuditFlags flags);
    public PipeAuditRule(string identity, PipeAccessRights rights, AuditFlags flags);
    internal PipeAuditRule(IdentityReference identity, int accessMask, bool isInherited, AuditFlags flags);
    private static int AccessMaskFromRights(PipeAccessRights rights);
    public PipeAccessRights get_PipeAccessRights();
}
internal abstract class System.IO.Pipes.PipeCompletionSource`1 : TaskCompletionSource`1<TResult> {
    private static int NoResult;
    private static int ResultSuccess;
    private static int ResultError;
    private static int RegisteringCancellation;
    private static int CompletedCallback;
    private ThreadPoolBoundHandle _threadPoolBinding;
    private CancellationTokenRegistration _cancellationRegistration;
    private int _errorCode;
    private NativeOverlapped* _overlapped;
    private MemoryHandle _pinnedMemory;
    private int _state;
    internal NativeOverlapped* Overlapped { get; }
    protected PipeCompletionSource`1(ThreadPoolBoundHandle handle, ReadOnlyMemory`1<byte> bufferToPin);
    internal NativeOverlapped* get_Overlapped();
    internal void RegisterForCancellation(CancellationToken cancellationToken);
    internal void ReleaseResources();
    internal abstract virtual void SetCompletedSynchronously();
    protected virtual void AsyncCallback(UInt32 errorCode, UInt32 numBytes);
    protected abstract virtual void HandleError(int errorCode);
    private void Cancel();
    protected virtual void HandleUnexpectedCancellation();
    private void CompleteCallback(int resultState);
}
public enum System.IO.Pipes.PipeDirection : Enum {
    public int value__;
    public static PipeDirection In;
    public static PipeDirection Out;
    public static PipeDirection InOut;
}
[FlagsAttribute]
public enum System.IO.Pipes.PipeOptions : Enum {
    public int value__;
    public static PipeOptions None;
    public static PipeOptions WriteThrough;
    public static PipeOptions Asynchronous;
    public static PipeOptions CurrentUserOnly;
}
[ExtensionAttribute]
public static class System.IO.Pipes.PipesAclExtensions : object {
    [ExtensionAttribute]
public static PipeSecurity GetAccessControl(PipeStream stream);
    [ExtensionAttribute]
public static void SetAccessControl(PipeStream stream, PipeSecurity pipeSecurity);
}
public class System.IO.Pipes.PipeSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    internal PipeSecurity(SafePipeHandle safeHandle, AccessControlSections includeSections);
    public void AddAccessRule(PipeAccessRule rule);
    public void SetAccessRule(PipeAccessRule rule);
    public void ResetAccessRule(PipeAccessRule rule);
    public bool RemoveAccessRule(PipeAccessRule rule);
    public void RemoveAccessRuleSpecific(PipeAccessRule rule);
    public void AddAuditRule(PipeAuditRule rule);
    public void SetAuditRule(PipeAuditRule rule);
    public bool RemoveAuditRule(PipeAuditRule rule);
    public void RemoveAuditRuleAll(PipeAuditRule rule);
    public void RemoveAuditRuleSpecific(PipeAuditRule rule);
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    private AccessControlSections GetAccessControlSectionsFromChanges();
    protected internal void Persist(SafeHandle handle);
    protected internal void Persist(string name);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
internal enum System.IO.Pipes.PipeState : Enum {
    public int value__;
    public static PipeState WaitingToConnect;
    public static PipeState Connected;
    public static PipeState Broken;
    public static PipeState Disconnected;
    public static PipeState Closed;
}
public abstract class System.IO.Pipes.PipeStream : Stream {
    internal static string AnonymousPipeName;
    private static Task`1<int> s_zeroTask;
    private SafePipeHandle _handle;
    private bool _canRead;
    private bool _canWrite;
    private bool _isAsync;
    private bool _isCurrentUserOnly;
    private bool _isMessageComplete;
    private bool _isFromExistingHandle;
    private bool _isHandleExposed;
    private PipeTransmissionMode _readMode;
    private PipeTransmissionMode _transmissionMode;
    private PipeDirection _pipeDirection;
    private int _outBufferSize;
    private PipeState _state;
    internal static bool CheckOperationsRequiresSetHandle;
    internal ThreadPoolBoundHandle _threadPoolBinding;
    public bool IsConnected { get; protected set; }
    public bool IsAsync { get; }
    public bool IsMessageComplete { get; }
    public SafePipeHandle SafePipeHandle { get; }
    internal SafePipeHandle InternalHandle { get; }
    protected bool IsHandleExposed { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal PipeState State { get; internal set; }
    internal bool IsCurrentUserOnly { get; internal set; }
    public PipeTransmissionMode TransmissionMode { get; }
    public int InBufferSize { get; }
    public int OutBufferSize { get; }
    public PipeTransmissionMode ReadMode { get; public set; }
    protected PipeStream(PipeDirection direction, int bufferSize);
    protected PipeStream(PipeDirection direction, PipeTransmissionMode transmissionMode, int outBufferSize);
    private static PipeStream();
    private void Init(PipeDirection direction, PipeTransmissionMode transmissionMode, int outBufferSize);
    protected void InitializeHandle(SafePipeHandle handle, bool isExposed, bool isAsync);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    private void CheckReadWriteArgs(Byte[] buffer, int offset, int count);
    [ConditionalAttribute("DEBUG")]
private static void DebugAssertHandleValid(SafePipeHandle handle);
    [ConditionalAttribute("DEBUG")]
private static void DebugAssertReadWriteArgs(Byte[] buffer, int offset, int count, SafePipeHandle handle);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    public bool get_IsConnected();
    protected void set_IsConnected(bool value);
    public bool get_IsAsync();
    public bool get_IsMessageComplete();
    internal void UpdateMessageCompletion(bool completion);
    public SafePipeHandle get_SafePipeHandle();
    internal SafePipeHandle get_InternalHandle();
    protected bool get_IsHandleExposed();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    protected internal virtual void CheckPipePropertyOperations();
    protected internal void CheckReadOperations();
    protected internal void CheckWriteOperations();
    internal PipeState get_State();
    internal void set_State(PipeState value);
    internal bool get_IsCurrentUserOnly();
    internal void set_IsCurrentUserOnly(bool value);
    internal static string GetPipePath(string serverName, string pipeName);
    internal void ValidateHandleIsPipe(SafePipeHandle safePipeHandle);
    private void InitializeAsyncHandle(SafePipeHandle handle);
    private void DisposeCore(bool disposing);
    private int ReadCore(Span`1<byte> buffer);
    private Task`1<int> ReadAsyncCore(Memory`1<byte> buffer, CancellationToken cancellationToken);
    private void WriteCore(ReadOnlySpan`1<byte> buffer);
    private Task WriteAsyncCore(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public void WaitForPipeDrain();
    public virtual PipeTransmissionMode get_TransmissionMode();
    public virtual int get_InBufferSize();
    public virtual int get_OutBufferSize();
    public virtual PipeTransmissionMode get_ReadMode();
    public virtual void set_ReadMode(PipeTransmissionMode value);
    private int ReadFileNative(SafePipeHandle handle, Span`1<byte> buffer, NativeOverlapped* overlapped, Int32& errorCode);
    private int WriteFileNative(SafePipeHandle handle, ReadOnlySpan`1<byte> buffer, NativeOverlapped* overlapped, Int32& errorCode);
    internal static SECURITY_ATTRIBUTES GetSecAttrs(HandleInheritability inheritability);
    internal static SECURITY_ATTRIBUTES GetSecAttrs(HandleInheritability inheritability, PipeSecurity pipeSecurity, GCHandle& pinningHandle);
    private void UpdateReadMode();
    internal Exception WinIOError(int errorCode);
}
public class System.IO.Pipes.PipeStreamImpersonationWorker : MulticastDelegate {
    public PipeStreamImpersonationWorker(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Pipes.PipeTransmissionMode : Enum {
    public int value__;
    public static PipeTransmissionMode Byte;
    public static PipeTransmissionMode Message;
}
internal class System.IO.Pipes.ReadWriteCompletionSource : PipeCompletionSource`1<int> {
    private bool _isWrite;
    private PipeStream _pipeStream;
    private bool _isMessageComplete;
    private int _numBytes;
    internal ReadWriteCompletionSource(PipeStream stream, ReadOnlyMemory`1<byte> bufferToPin, bool isWrite);
    internal virtual void SetCompletedSynchronously();
    protected virtual void AsyncCallback(UInt32 errorCode, UInt32 numBytes);
    protected virtual void HandleError(int errorCode);
}
internal class System.IO.Pipes.VoidResult : ValueType {
}
internal static class System.IO.StreamHelpers : object {
    public static void ValidateCopyToArgs(Stream source, Stream destination, int bufferSize);
}
internal static class System.IO.Win32Marshal : object {
    internal static Exception GetExceptionForLastWin32Error(string path);
    internal static Exception GetExceptionForWin32Error(int errorCode, string path);
    internal static int MakeHRFromErrorCode(int errorCode);
    internal static int TryMakeWin32ErrorCodeFromHR(int hr);
    internal static string GetMessage(int errorCode);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_NeedValidPipeAccessRights { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string Argument_NeedNonemptyPipeName { get; }
    internal static string Argument_NonContainerInvalidAnyFlag { get; }
    internal static string Argument_EmptyServerName { get; }
    internal static string Argument_InvalidHandle { get; }
    internal static string ArgumentNull_Buffer { get; }
    internal static string ArgumentNull_ServerName { get; }
    internal static string ArgumentOutOfRange_AnonymousReserved { get; }
    internal static string ArgumentOutOfRange_TransmissionModeByteOrMsg { get; }
    internal static string ArgumentOutOfRange_DirectionModeInOutOrInOut { get; }
    internal static string ArgumentOutOfRange_ImpersonationInvalid { get; }
    internal static string ArgumentOutOfRange_OptionsInvalid { get; }
    internal static string ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable { get; }
    internal static string ArgumentOutOfRange_InvalidTimeout { get; }
    internal static string ArgumentOutOfRange_MaxNumServerInstances { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string InvalidOperation_PipeNotYetConnected { get; }
    internal static string InvalidOperation_PipeDisconnected { get; }
    internal static string InvalidOperation_PipeHandleNotSet { get; }
    internal static string InvalidOperation_PipeNotAsync { get; }
    internal static string InvalidOperation_PipeReadModeNotMessage { get; }
    internal static string InvalidOperation_PipeAlreadyConnected { get; }
    internal static string InvalidOperation_PipeAlreadyDisconnected { get; }
    internal static string IO_EOF_ReadBeyondEOF { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_IO_PipeBroken { get; }
    internal static string IO_OperationAborted { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IO_PipeBroken { get; }
    internal static string IO_InvalidPipeHandle { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathTooLong { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string NotSupported_AnonymousPipeUnidirectional { get; }
    internal static string NotSupported_AnonymousPipeMessagesNotSupported { get; }
    internal static string ObjectDisposed_PipeClosed { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string PlatformNotSupported_MessageTransmissionMode { get; }
    internal static string PlatformNotSupported_RemotePipes { get; }
    internal static string PlatformNotSupported_InvalidPipeNameChars { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static string PlatformNotSupported_OperatingSystemError { get; }
    internal static string IO_AllPipeInstancesAreBusy { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string UnauthorizedAccess_NotOwnedByCurrentUser { get; }
    internal static string UnauthorizedAccess_ClientIsNotCurrentUser { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_NeedValidPipeAccessRights();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_Argument_NeedNonemptyPipeName();
    internal static string get_Argument_NonContainerInvalidAnyFlag();
    internal static string get_Argument_EmptyServerName();
    internal static string get_Argument_InvalidHandle();
    internal static string get_ArgumentNull_Buffer();
    internal static string get_ArgumentNull_ServerName();
    internal static string get_ArgumentOutOfRange_AnonymousReserved();
    internal static string get_ArgumentOutOfRange_TransmissionModeByteOrMsg();
    internal static string get_ArgumentOutOfRange_DirectionModeInOutOrInOut();
    internal static string get_ArgumentOutOfRange_ImpersonationInvalid();
    internal static string get_ArgumentOutOfRange_OptionsInvalid();
    internal static string get_ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable();
    internal static string get_ArgumentOutOfRange_InvalidTimeout();
    internal static string get_ArgumentOutOfRange_MaxNumServerInstances();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_InvalidOperation_PipeNotYetConnected();
    internal static string get_InvalidOperation_PipeDisconnected();
    internal static string get_InvalidOperation_PipeHandleNotSet();
    internal static string get_InvalidOperation_PipeNotAsync();
    internal static string get_InvalidOperation_PipeReadModeNotMessage();
    internal static string get_InvalidOperation_PipeAlreadyConnected();
    internal static string get_InvalidOperation_PipeAlreadyDisconnected();
    internal static string get_IO_EOF_ReadBeyondEOF();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_IO_PipeBroken();
    internal static string get_IO_OperationAborted();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IO_PipeBroken();
    internal static string get_IO_InvalidPipeHandle();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathTooLong();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_NotSupported_AnonymousPipeUnidirectional();
    internal static string get_NotSupported_AnonymousPipeMessagesNotSupported();
    internal static string get_ObjectDisposed_PipeClosed();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_PlatformNotSupported_MessageTransmissionMode();
    internal static string get_PlatformNotSupported_RemotePipes();
    internal static string get_PlatformNotSupported_InvalidPipeNameChars();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static string get_PlatformNotSupported_OperatingSystemError();
    internal static string get_IO_AllPipeInstancesAreBusy();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_UnauthorizedAccess_NotOwnedByCurrentUser();
    internal static string get_UnauthorizedAccess_ClientIsNotCurrentUser();
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
