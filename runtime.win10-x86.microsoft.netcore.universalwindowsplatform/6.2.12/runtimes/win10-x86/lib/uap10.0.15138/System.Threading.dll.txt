internal static class FxResources.System.Threading.SR : object {
}
internal static class System.HResults : object {
    internal static int APPMODEL_ERROR_NO_PACKAGE;
    internal static int CLDB_E_FILE_CORRUPT;
    internal static int CLDB_E_FILE_OLDVER;
    internal static int CLDB_E_INDEX_NOTFOUND;
    internal static int CLR_E_BIND_ASSEMBLY_NOT_FOUND;
    internal static int CLR_E_BIND_ASSEMBLY_PUBLIC_KEY_MISMATCH;
    internal static int CLR_E_BIND_ASSEMBLY_VERSION_TOO_LOW;
    internal static int CLR_E_BIND_TYPE_NOT_FOUND;
    internal static int CLR_E_BIND_UNRECOGNIZED_IDENTITY_FORMAT;
    internal static int COR_E_ABANDONEDMUTEX;
    internal static int COR_E_AMBIGUOUSMATCH;
    internal static int COR_E_APPDOMAINUNLOADED;
    internal static int COR_E_APPLICATION;
    internal static int COR_E_ARGUMENT;
    internal static int COR_E_ARGUMENTOUTOFRANGE;
    internal static int COR_E_ARITHMETIC;
    internal static int COR_E_ARRAYTYPEMISMATCH;
    internal static int COR_E_ASSEMBLYEXPECTED;
    internal static int COR_E_BADIMAGEFORMAT;
    internal static int COR_E_CANNOTUNLOADAPPDOMAIN;
    internal static int COR_E_CODECONTRACTFAILED;
    internal static int COR_E_CONTEXTMARSHAL;
    internal static int COR_E_CUSTOMATTRIBUTEFORMAT;
    internal static int COR_E_DATAMISALIGNED;
    internal static int COR_E_DIVIDEBYZERO;
    internal static int COR_E_DLLNOTFOUND;
    internal static int COR_E_DUPLICATEWAITOBJECT;
    internal static int COR_E_ENTRYPOINTNOTFOUND;
    internal static int COR_E_EXCEPTION;
    internal static int COR_E_EXECUTIONENGINE;
    internal static int COR_E_FIELDACCESS;
    internal static int COR_E_FIXUPSINEXE;
    internal static int COR_E_FORMAT;
    internal static int COR_E_INDEXOUTOFRANGE;
    internal static int COR_E_INSUFFICIENTEXECUTIONSTACK;
    internal static int COR_E_INVALIDCAST;
    internal static int COR_E_INVALIDCOMOBJECT;
    internal static int COR_E_INVALIDFILTERCRITERIA;
    internal static int COR_E_INVALIDOLEVARIANTTYPE;
    internal static int COR_E_INVALIDOPERATION;
    internal static int COR_E_INVALIDPROGRAM;
    internal static int COR_E_KEYNOTFOUND;
    internal static int COR_E_LOADING_REFERENCE_ASSEMBLY;
    internal static int COR_E_MARSHALDIRECTIVE;
    internal static int COR_E_MEMBERACCESS;
    internal static int COR_E_METHODACCESS;
    internal static int COR_E_MISSINGFIELD;
    internal static int COR_E_MISSINGMANIFESTRESOURCE;
    internal static int COR_E_MISSINGMEMBER;
    internal static int COR_E_MISSINGMETHOD;
    internal static int COR_E_MISSINGSATELLITEASSEMBLY;
    internal static int COR_E_MODULE_HASH_CHECK_FAILED;
    internal static int COR_E_MULTICASTNOTSUPPORTED;
    internal static int COR_E_NEWER_RUNTIME;
    internal static int COR_E_NOTFINITENUMBER;
    internal static int COR_E_NOTSUPPORTED;
    internal static int COR_E_NULLREFERENCE;
    internal static int COR_E_OBJECTDISPOSED;
    internal static int COR_E_OPERATIONCANCELED;
    internal static int COR_E_OUTOFMEMORY;
    internal static int COR_E_OVERFLOW;
    internal static int COR_E_PLATFORMNOTSUPPORTED;
    internal static int COR_E_RANK;
    internal static int COR_E_REFLECTIONTYPELOAD;
    internal static int COR_E_REMOTING;
    internal static int COR_E_RUNTIMEWRAPPED;
    internal static int COR_E_SAFEARRAYRANKMISMATCH;
    internal static int COR_E_SAFEARRAYTYPEMISMATCH;
    internal static int COR_E_SECURITY;
    internal static int COR_E_SERIALIZATION;
    internal static int COR_E_SERVER;
    internal static int COR_E_STACKOVERFLOW;
    internal static int COR_E_SYNCHRONIZATIONLOCK;
    internal static int COR_E_SYSTEM;
    internal static int COR_E_TARGET;
    internal static int COR_E_TARGETINVOCATION;
    internal static int COR_E_TARGETPARAMCOUNT;
    internal static int COR_E_THREADABORTED;
    internal static int COR_E_THREADINTERRUPTED;
    internal static int COR_E_THREADSTART;
    internal static int COR_E_THREADSTATE;
    internal static int COR_E_TIMEOUT;
    internal static int COR_E_TYPEACCESS;
    internal static int COR_E_TYPEINITIALIZATION;
    internal static int COR_E_TYPELOAD;
    internal static int COR_E_TYPEUNLOADED;
    internal static int COR_E_UNAUTHORIZEDACCESS;
    internal static int COR_E_VERIFICATION;
    internal static int COR_E_WAITHANDLECANNOTBEOPENED;
    internal static int CORSEC_E_CRYPTO;
    internal static int CORSEC_E_CRYPTO_UNEX_OPER;
    internal static int CORSEC_E_INVALID_IMAGE_FORMAT;
    internal static int CORSEC_E_INVALID_PUBLICKEY;
    internal static int CORSEC_E_INVALID_STRONGNAME;
    internal static int CORSEC_E_MIN_GRANT_FAIL;
    internal static int CORSEC_E_MISSING_STRONGNAME;
    internal static int CORSEC_E_NO_EXEC_PERM;
    internal static int CORSEC_E_POLICY_EXCEPTION;
    internal static int CORSEC_E_SIGNATURE_MISMATCH;
    internal static int CORSEC_E_XMLSYNTAX;
    internal static int CTL_E_DEVICEIOERROR;
    internal static int CTL_E_DIVISIONBYZERO;
    internal static int CTL_E_FILENOTFOUND;
    internal static int CTL_E_OUTOFMEMORY;
    internal static int CTL_E_OUTOFSTACKSPACE;
    internal static int CTL_E_OVERFLOW;
    internal static int CTL_E_PATHFILEACCESSERROR;
    internal static int CTL_E_PATHNOTFOUND;
    internal static int CTL_E_PERMISSIONDENIED;
    internal static int E_ELEMENTNOTAVAILABLE;
    internal static int E_ELEMENTNOTENABLED;
    internal static int E_FAIL;
    internal static int E_HANDLE;
    internal static int E_ILLEGAL_DELEGATE_ASSIGNMENT;
    internal static int E_ILLEGAL_METHOD_CALL;
    internal static int E_ILLEGAL_STATE_CHANGE;
    internal static int E_INVALIDARG;
    internal static int E_LAYOUTCYCLE;
    internal static int E_NOTIMPL;
    internal static int E_OUTOFMEMORY;
    internal static int E_POINTER;
    internal static int E_XAMLPARSEFAILED;
    internal static int ERROR_BAD_EXE_FORMAT;
    internal static int ERROR_BAD_NET_NAME;
    internal static int ERROR_BAD_NETPATH;
    internal static int ERROR_DISK_CORRUPT;
    internal static int ERROR_DLL_INIT_FAILED;
    internal static int ERROR_DLL_NOT_FOUND;
    internal static int ERROR_EXE_MARKED_INVALID;
    internal static int ERROR_FILE_CORRUPT;
    internal static int ERROR_FILE_INVALID;
    internal static int ERROR_FILE_NOT_FOUND;
    internal static int ERROR_INVALID_DLL;
    internal static int ERROR_INVALID_NAME;
    internal static int ERROR_INVALID_ORDINAL;
    internal static int ERROR_INVALID_PARAMETER;
    internal static int ERROR_LOCK_VIOLATION;
    internal static int ERROR_MOD_NOT_FOUND;
    internal static int ERROR_NO_UNICODE_TRANSLATION;
    internal static int ERROR_NOACCESS;
    internal static int ERROR_NOT_OWNER;
    internal static int ERROR_NOT_READY;
    internal static int ERROR_OPEN_FAILED;
    internal static int ERROR_PATH_NOT_FOUND;
    internal static int ERROR_SHARING_VIOLATION;
    internal static int ERROR_TIMEOUT;
    internal static int ERROR_TOO_MANY_OPEN_FILES;
    internal static int ERROR_UNRECOGNIZED_VOLUME;
    internal static int ERROR_WRONG_TARGET_NAME;
    internal static int FUSION_E_ASM_MODULE_MISSING;
    internal static int FUSION_E_CACHEFILE_FAILED;
    internal static int FUSION_E_CODE_DOWNLOAD_DISABLED;
    internal static int FUSION_E_HOST_GAC_ASM_MISMATCH;
    internal static int FUSION_E_INVALID_NAME;
    internal static int FUSION_E_INVALID_PRIVATE_ASM_LOCATION;
    internal static int FUSION_E_LOADFROM_BLOCKED;
    internal static int FUSION_E_PRIVATE_ASM_DISALLOWED;
    internal static int FUSION_E_REF_DEF_MISMATCH;
    internal static int FUSION_E_SIGNATURE_CHECK_FAILED;
    internal static int INET_E_CANNOT_CONNECT;
    internal static int INET_E_CONNECTION_TIMEOUT;
    internal static int INET_E_DATA_NOT_AVAILABLE;
    internal static int INET_E_DOWNLOAD_FAILURE;
    internal static int INET_E_OBJECT_NOT_FOUND;
    internal static int INET_E_RESOURCE_NOT_FOUND;
    internal static int INET_E_UNKNOWN_PROTOCOL;
    internal static int ISS_E_ALLOC_TOO_LARGE;
    internal static int ISS_E_BLOCK_SIZE_TOO_SMALL;
    internal static int ISS_E_CALLER;
    internal static int ISS_E_CORRUPTED_STORE_FILE;
    internal static int ISS_E_CREATE_DIR;
    internal static int ISS_E_CREATE_MUTEX;
    internal static int ISS_E_DEPRECATE;
    internal static int ISS_E_FILE_NOT_MAPPED;
    internal static int ISS_E_FILE_WRITE;
    internal static int ISS_E_GET_FILE_SIZE;
    internal static int ISS_E_ISOSTORE;
    internal static int ISS_E_LOCK_FAILED;
    internal static int ISS_E_MACHINE;
    internal static int ISS_E_MACHINE_DACL;
    internal static int ISS_E_MAP_VIEW_OF_FILE;
    internal static int ISS_E_OPEN_FILE_MAPPING;
    internal static int ISS_E_OPEN_STORE_FILE;
    internal static int ISS_E_PATH_LENGTH;
    internal static int ISS_E_SET_FILE_POINTER;
    internal static int ISS_E_STORE_NOT_OPEN;
    internal static int ISS_E_STORE_VERSION;
    internal static int ISS_E_TABLE_ROW_NOT_FOUND;
    internal static int ISS_E_USAGE_WILL_EXCEED_QUOTA;
    internal static int META_E_BAD_SIGNATURE;
    internal static int META_E_CA_FRIENDS_SN_REQUIRED;
    internal static int MSEE_E_ASSEMBLYLOADINPROGRESS;
    internal static int RO_E_CLOSED;
    internal static int E_BOUNDS;
    internal static int RO_E_METADATA_NAME_NOT_FOUND;
    internal static int SECURITY_E_INCOMPATIBLE_EVIDENCE;
    internal static int SECURITY_E_INCOMPATIBLE_SHARE;
    internal static int SECURITY_E_UNVERIFIABLE;
    internal static int STG_E_PATHNOTFOUND;
    public static int COR_E_DIRECTORYNOTFOUND;
    public static int COR_E_ENDOFSTREAM;
    public static int COR_E_FILELOAD;
    public static int COR_E_FILENOTFOUND;
    public static int COR_E_IO;
    public static int COR_E_PATHTOOLONG;
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string CountdownEvent_Increment_AlreadyZero { get; }
    internal static string CountdownEvent_Increment_AlreadyMax { get; }
    internal static string CountdownEvent_Decrement_BelowZero { get; }
    internal static string Common_OperationCanceled { get; }
    internal static string Barrier_Dispose { get; }
    internal static string Barrier_SignalAndWait_InvalidOperation_ZeroTotal { get; }
    internal static string Barrier_SignalAndWait_ArgumentOutOfRange { get; }
    internal static string Barrier_RemoveParticipants_InvalidOperation { get; }
    internal static string Barrier_RemoveParticipants_ArgumentOutOfRange { get; }
    internal static string Barrier_RemoveParticipants_NonPositive_ArgumentOutOfRange { get; }
    internal static string Barrier_InvalidOperation_CalledFromPHA { get; }
    internal static string Barrier_AddParticipants_NonPositive_ArgumentOutOfRange { get; }
    internal static string Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded { get; }
    internal static string BarrierPostPhaseException { get; }
    internal static string Barrier_ctor_ArgumentOutOfRange { get; }
    internal static string Barrier_AddParticipants_Overflow_ArgumentOutOfRange { get; }
    internal static string SynchronizationLockException_IncorrectDispose { get; }
    internal static string SynchronizationLockException_MisMatchedWrite { get; }
    internal static string LockRecursionException_UpgradeAfterReadNotAllowed { get; }
    internal static string LockRecursionException_UpgradeAfterWriteNotAllowed { get; }
    internal static string SynchronizationLockException_MisMatchedUpgrade { get; }
    internal static string SynchronizationLockException_MisMatchedRead { get; }
    internal static string LockRecursionException_WriteAfterReadNotAllowed { get; }
    internal static string LockRecursionException_RecursiveWriteNotAllowed { get; }
    internal static string LockRecursionException_ReadAfterWriteNotAllowed { get; }
    internal static string LockRecursionException_RecursiveUpgradeNotAllowed { get; }
    internal static string LockRecursionException_RecursiveReadNotAllowed { get; }
    internal static string Overflow_UInt16 { get; }
    internal static string ReaderWriterLock_Timeout { get; }
    internal static string ArgumentOutOfRange_TimeoutMilliseconds { get; }
    internal static string ReaderWriterLock_NotOwner { get; }
    internal static string ExceptionFromHResult { get; }
    internal static string ReaderWriterLock_InvalidLockCookie { get; }
    internal static string ReaderWriterLock_RestoreLockWithOwnedLocks { get; }
    internal static string HostExecutionContextManager_InvalidOperation_NotNewCaptureContext { get; }
    internal static string HostExecutionContextManager_InvalidOperation_CannotOverrideSetWithoutRevert { get; }
    internal static string HostExecutionContextManager_InvalidOperation_CannotUseSwitcherOtherThread { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_CountdownEvent_Increment_AlreadyZero();
    internal static string get_CountdownEvent_Increment_AlreadyMax();
    internal static string get_CountdownEvent_Decrement_BelowZero();
    internal static string get_Common_OperationCanceled();
    internal static string get_Barrier_Dispose();
    internal static string get_Barrier_SignalAndWait_InvalidOperation_ZeroTotal();
    internal static string get_Barrier_SignalAndWait_ArgumentOutOfRange();
    internal static string get_Barrier_RemoveParticipants_InvalidOperation();
    internal static string get_Barrier_RemoveParticipants_ArgumentOutOfRange();
    internal static string get_Barrier_RemoveParticipants_NonPositive_ArgumentOutOfRange();
    internal static string get_Barrier_InvalidOperation_CalledFromPHA();
    internal static string get_Barrier_AddParticipants_NonPositive_ArgumentOutOfRange();
    internal static string get_Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded();
    internal static string get_BarrierPostPhaseException();
    internal static string get_Barrier_ctor_ArgumentOutOfRange();
    internal static string get_Barrier_AddParticipants_Overflow_ArgumentOutOfRange();
    internal static string get_SynchronizationLockException_IncorrectDispose();
    internal static string get_SynchronizationLockException_MisMatchedWrite();
    internal static string get_LockRecursionException_UpgradeAfterReadNotAllowed();
    internal static string get_LockRecursionException_UpgradeAfterWriteNotAllowed();
    internal static string get_SynchronizationLockException_MisMatchedUpgrade();
    internal static string get_SynchronizationLockException_MisMatchedRead();
    internal static string get_LockRecursionException_WriteAfterReadNotAllowed();
    internal static string get_LockRecursionException_RecursiveWriteNotAllowed();
    internal static string get_LockRecursionException_ReadAfterWriteNotAllowed();
    internal static string get_LockRecursionException_RecursiveUpgradeNotAllowed();
    internal static string get_LockRecursionException_RecursiveReadNotAllowed();
    internal static string get_Overflow_UInt16();
    internal static string get_ReaderWriterLock_Timeout();
    internal static string get_ArgumentOutOfRange_TimeoutMilliseconds();
    internal static string get_ReaderWriterLock_NotOwner();
    internal static string get_ExceptionFromHResult();
    internal static string get_ReaderWriterLock_InvalidLockCookie();
    internal static string get_ReaderWriterLock_RestoreLockWithOwnedLocks();
    internal static string get_HostExecutionContextManager_InvalidOperation_NotNewCaptureContext();
    internal static string get_HostExecutionContextManager_InvalidOperation_CannotOverrideSetWithoutRevert();
    internal static string get_HostExecutionContextManager_InvalidOperation_CannotUseSwitcherOtherThread();
}
[DebuggerDisplayAttribute("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")]
public class System.Threading.Barrier : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _currentTotalCount;
    private static int CURRENT_MASK;
    private static int TOTAL_MASK;
    private static int SENSE_MASK;
    private static int MAX_PARTICIPANTS;
    private long _currentPhase;
    private bool _disposed;
    private ManualResetEventSlim _oddEvent;
    private ManualResetEventSlim _evenEvent;
    private ExecutionContext _ownerThreadContext;
    private static ContextCallback s_invokePostPhaseAction;
    private Action`1<Barrier> _postPhaseAction;
    private Exception _exception;
    private int _actionCallerID;
    public int ParticipantsRemaining { get; }
    public int ParticipantCount { get; }
    public long CurrentPhaseNumber { get; internal set; }
    public Barrier(int participantCount);
    public Barrier(int participantCount, Action`1<Barrier> postPhaseAction);
    public int get_ParticipantsRemaining();
    public int get_ParticipantCount();
    public long get_CurrentPhaseNumber();
    internal void set_CurrentPhaseNumber(long value);
    private void GetCurrentTotal(int currentTotal, Int32& current, Int32& total, Boolean& sense);
    private bool SetCurrentTotal(int currentTotal, int current, int total, bool sense);
    public long AddParticipant();
    public long AddParticipants(int participantCount);
    public void RemoveParticipant();
    public void RemoveParticipants(int participantCount);
    public void SignalAndWait();
    public void SignalAndWait(CancellationToken cancellationToken);
    public bool SignalAndWait(TimeSpan timeout);
    public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken);
    public bool SignalAndWait(int millisecondsTimeout);
    public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken);
    private void FinishPhase(bool observedSense);
    private static void InvokePostPhaseAction(object obj);
    private void SetResetEvents(bool observedSense);
    private void WaitCurrentPhase(ManualResetEventSlim currentPhaseEvent, long observedPhase);
    private bool DiscontinuousWait(ManualResetEventSlim currentPhaseEvent, int totalTimeout, CancellationToken token, long observedPhase);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Threading.BarrierPostPhaseException : Exception {
    public BarrierPostPhaseException(Exception innerException);
    public BarrierPostPhaseException(string message);
    public BarrierPostPhaseException(string message, Exception innerException);
    protected BarrierPostPhaseException(SerializationInfo info, StreamingContext context);
}
[EventSourceAttribute]
internal class System.Threading.CdsSyncEtwBCLProvider : EventSource {
    public static CdsSyncEtwBCLProvider Log;
    private static EventKeywords ALL_KEYWORDS;
    private static int SPINLOCK_FASTPATHFAILED_ID;
    private static int SPINWAIT_NEXTSPINWILLYIELD_ID;
    private static int BARRIER_PHASEFINISHED_ID;
    private static CdsSyncEtwBCLProvider();
    [EventAttribute("3")]
public void Barrier_PhaseFinished(bool currentSense, long phaseNum);
}
[DebuggerDisplayAttribute("Initial Count={InitialCount}, Current Count={CurrentCount}")]
public class System.Threading.CountdownEvent : object {
    private int _initialCount;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _currentCount;
    private ManualResetEventSlim _event;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    public int CurrentCount { get; }
    public int InitialCount { get; }
    public bool IsSet { get; }
    public WaitHandle WaitHandle { get; }
    public CountdownEvent(int initialCount);
    public int get_CurrentCount();
    public int get_InitialCount();
    public bool get_IsSet();
    public WaitHandle get_WaitHandle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool Signal();
    public bool Signal(int signalCount);
    public void AddCount();
    public bool TryAddCount();
    public void AddCount(int signalCount);
    public bool TryAddCount(int signalCount);
    public void Reset();
    public void Reset(int count);
    public void Wait();
    public void Wait(CancellationToken cancellationToken);
    public bool Wait(TimeSpan timeout);
    public bool Wait(TimeSpan timeout, CancellationToken cancellationToken);
    public bool Wait(int millisecondsTimeout);
    public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken);
    private void ThrowIfDisposed();
}
public class System.Threading.HostExecutionContext : object {
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    protected internal object State { get; protected internal set; }
    public HostExecutionContext(object state);
    [CompilerGeneratedAttribute]
protected internal object get_State();
    [CompilerGeneratedAttribute]
protected internal void set_State(object value);
    public virtual HostExecutionContext CreateCopy();
    public sealed virtual void Dispose();
    public virtual void Dispose(bool disposing);
}
public class System.Threading.HostExecutionContextManager : object {
    [ThreadStaticAttribute]
private static HostExecutionContext t_currentContext;
    public virtual HostExecutionContext Capture();
    public virtual object SetHostExecutionContext(HostExecutionContext hostExecutionContext);
    public virtual void Revert(object previousState);
}
public class System.Threading.LockCookie : ValueType {
    internal LockCookieFlags _flags;
    internal ushort _readerLevel;
    internal ushort _writerLevel;
    internal int _threadID;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(LockCookie obj);
    public static bool op_Equality(LockCookie a, LockCookie b);
    public static bool op_Inequality(LockCookie a, LockCookie b);
}
[FlagsAttribute]
internal enum System.Threading.LockCookieFlags : Enum {
    public int value__;
    public static LockCookieFlags Upgrade;
    public static LockCookieFlags Release;
    public static LockCookieFlags OwnedNone;
    public static LockCookieFlags OwnedWriter;
    public static LockCookieFlags OwnedReader;
    public static LockCookieFlags Invalid;
}
public class System.Threading.ReaderWriterLock : CriticalFinalizerObject {
    private static int InvalidThreadID;
    private static ushort MaxAcquireCount;
    private static int DefaultSpinCount;
    private static int IncorrectButCompatibleNotOwnerExceptionHResult;
    private static long s_mostRecentLockID;
    private ManualResetEventSlim _readerEvent;
    private AutoResetEvent _writerEvent;
    private long _lockID;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _state;
    private int _writerID;
    private int _writerSeqNum;
    private ushort _writerLevel;
    public bool IsReaderLockHeld { get; }
    public bool IsWriterLockHeld { get; }
    public int WriterSeqNum { get; }
    private static ReaderWriterLock();
    public bool get_IsReaderLockHeld();
    public bool get_IsWriterLockHeld();
    public int get_WriterSeqNum();
    public bool AnyWritersSince(int seqNum);
    public void AcquireReaderLock(int millisecondsTimeout);
    public void AcquireReaderLock(TimeSpan timeout);
    public void AcquireWriterLock(int millisecondsTimeout);
    public void AcquireWriterLock(TimeSpan timeout);
    public void ReleaseReaderLock();
    public void ReleaseWriterLock();
    public LockCookie UpgradeToWriterLock(int millisecondsTimeout);
    public LockCookie UpgradeToWriterLock(TimeSpan timeout);
    public void DowngradeFromWriterLock(LockCookie& lockCookie);
    public LockCookie ReleaseLock();
    public void RestoreLock(LockCookie& lockCookie);
    private void RecoverLock(LockCookie& lockCookie, LockCookieFlags flags);
    private static int GetCurrentThreadID();
    private static bool YieldProcessor();
    private ManualResetEventSlim GetOrCreateReaderEvent();
    private AutoResetEvent GetOrCreateWriterEvent();
    private ManualResetEventSlim TryGetOrCreateReaderEvent();
    private AutoResetEvent TryGetOrCreateWriterEvent();
    private void ReleaseEvents();
    private static ArgumentOutOfRangeException GetInvalidTimeoutException(string parameterName);
    private static int ToTimeoutMilliseconds(TimeSpan timeout);
    private static ApplicationException GetTimeoutException();
    private static ApplicationException GetNotOwnerException();
    private static ApplicationException GetInvalidLockCookieException();
}
