internal static class FxResources.System.Private.Uri.SR : object {
}
internal static class Interop : object {
    internal static int ERROR_SUCCESS;
    internal static int ERROR_NOT_ENOUGH_MEMORY;
    internal static int ERROR_INVALID_PARAMETER;
    internal static int ERROR_INSUFFICIENT_BUFFER;
    internal static int ERROR_INVALID_NAME;
    internal static int ERROR_NO_UNICODE_TRANSLATION;
    internal static int LAST_ERROR_TRASH_VALUE;
}
internal static class System.ArrayT`1 : object {
    public static void Copy(T[] sourceArray, int sourceIndex, T[] destinationArray, int destinationIndex, int length);
    public static T[] Resize(T[] src, int newLength, int copyCount);
    public static void Clear(T[] array, int index, int length);
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.LowLevelDictionary`2 : object {
    private static int DefaultSize;
    private Entry[] _buckets;
    private int _numEntries;
    private int _version;
    private IEqualityComparer`1<TKey> _comparer;
    public int Count { get; }
    public TValue Item { get; public set; }
    public LowLevelDictionary`2(int capacity);
    public LowLevelDictionary`2(IEqualityComparer`1<TKey> comparer);
    public LowLevelDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public int get_Count();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& value);
    public void Add(TKey key, TValue value);
    public void Clear(int capacity);
    public bool Remove(TKey key);
    internal TValue LookupOrAdd(TKey key, TValue value);
    private Entry<TKey, TValue> Find(TKey key);
    private Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
    private void ExpandBuckets();
    private int GetBucket(TKey key, int numBuckets);
}
internal class System.Collections.Generic.LowLevelDictionaryWithIEnumerable`2 : LowLevelDictionary`2<TKey, TValue> {
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class System.Collections.Generic.LowLevelList`1 : object {
    private static int _defaultCapacity;
    protected T[] _items;
    protected int _size;
    protected int _version;
    public int Capacity { get; public set; }
    public int Count { get; }
    public T Item { get; public set; }
    public LowLevelList`1(int capacity);
    public LowLevelList`1(IEnumerable`1<T> collection);
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    private void EnsureCapacity(int min);
    public void AddRange(IEnumerable`1<T> collection);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public void CopyTo(int index, T[] array, int arrayIndex, int count);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int IndexOf(T item);
    public int IndexOf(T item, int index);
    public sealed virtual void Insert(int index, T item);
    public void InsertRange(int index, IEnumerable`1<T> collection);
    public sealed virtual bool Remove(T item);
    public int RemoveAll(Predicate`1<T> match);
    public sealed virtual void RemoveAt(int index);
    public T[] ToArray();
}
internal class System.Collections.Generic.LowLevelListWithIList`1 : LowLevelList`1<T> {
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Diagnostics.Debug : object {
    private static object s_ForLock;
    internal static IDebugLogger s_logger;
    private static Debug();
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition);
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
[SecuritySafeCriticalAttribute]
public static void Assert(bool condition, string message, string detailMessage);
    [ConditionalAttribute("DEBUG")]
public static void Fail(string message);
    [ConditionalAttribute("DEBUG")]
public static void Fail(string message, string detailMessage);
    private static string FormatAssert(string stackTrace, string message, string detailMessage);
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message, string detailMessageFormat, Object[] args);
    [ConditionalAttribute("DEBUG")]
public static void WriteLine(string message);
    [ConditionalAttribute("DEBUG")]
public static void Write(string message);
    [ConditionalAttribute("DEBUG")]
public static void WriteLine(object value);
    [ConditionalAttribute("DEBUG")]
public static void WriteLine(object value, string category);
    [ConditionalAttribute("DEBUG")]
public static void WriteLine(string format, Object[] args);
    [ConditionalAttribute("DEBUG")]
public static void WriteLine(string message, string category);
    [ConditionalAttribute("DEBUG")]
public static void Write(object value);
    [ConditionalAttribute("DEBUG")]
public static void Write(string message, string category);
    [ConditionalAttribute("DEBUG")]
public static void Write(object value, string category);
    [ConditionalAttribute("DEBUG")]
public static void WriteIf(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void WriteIf(bool condition, object value);
    [ConditionalAttribute("DEBUG")]
public static void WriteIf(bool condition, string message, string category);
    [ConditionalAttribute("DEBUG")]
public static void WriteIf(bool condition, object value, string category);
    [ConditionalAttribute("DEBUG")]
public static void WriteLineIf(bool condition, object value);
    [ConditionalAttribute("DEBUG")]
public static void WriteLineIf(bool condition, object value, string category);
    [ConditionalAttribute("DEBUG")]
public static void WriteLineIf(bool condition, string value);
    [ConditionalAttribute("DEBUG")]
public static void WriteLineIf(bool condition, string value, string category);
}
internal class System.DomainNameHelper : object {
    private static char c_DummyChar;
    internal static string Localhost;
    internal static string Loopback;
    internal static string ParseCanonicalName(string str, int start, int end, Boolean& loopback);
    internal static bool IsValid(Char* name, ushort pos, Int32& returnedEnd, Boolean& notCanonical, bool notImplicitFile);
    internal static bool IsValidByIri(Char* name, ushort pos, Int32& returnedEnd, Boolean& notCanonical, bool notImplicitFile);
    internal static string IdnEquivalent(string hostname);
    internal static string IdnEquivalent(Char* hostname, int start, int end, Boolean& allAscii, Boolean& atLeastOneValidIdn);
    internal static string IdnEquivalent(Char* hostname, int start, int end, Boolean& allAscii, String& bidiStrippedHost);
    private static bool IsIdnAce(string input, int index);
    private static bool IsIdnAce(Char* input, int index);
    internal static string UnicodeEquivalent(string idnHost, Char* hostname, int start, int end);
    internal static string UnicodeEquivalent(Char* hostname, int start, int end, Boolean& allAscii, Boolean& atLeastOneValidIdn);
    private static bool IsASCIILetterOrDigit(char character, Boolean& notCanonical);
    private static bool IsValidDomainLabelCharacter(char character, Boolean& notCanonical);
}
internal class System.Globalization.IdnMapping : object {
    private bool _allowUnassigned;
    private bool _useStd3AsciiRules;
    public bool AllowUnassigned { get; public set; }
    public bool UseStd3AsciiRules { get; public set; }
    private UInt32 Flags { get; }
    public bool get_AllowUnassigned();
    public void set_AllowUnassigned(bool value);
    public bool get_UseStd3AsciiRules();
    public void set_UseStd3AsciiRules(bool value);
    public string GetAscii(string unicode);
    public string GetAscii(string unicode, int index);
    public string GetAscii(string unicode, int index, int count);
    public string GetUnicode(string ascii);
    public string GetUnicode(string ascii, int index);
    public string GetUnicode(string ascii, int index, int count);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private string GetAsciiCore(string unicode);
    private string GetUnicodeCore(string ascii);
    private UInt32 get_Flags();
    private static void ThrowForZeroLength(string paramName, string invalidNameString, string otherString);
}
internal static class System.IPv4AddressHelper : object {
    internal static long Invalid;
    private static long MaxIPv4Value;
    private static int Octal;
    private static int Decimal;
    private static int Hex;
    private static int NumberOfLabels;
    internal static string ParseCanonicalName(string str, int start, int end, Boolean& isLoopback);
    internal static int ParseHostNumber(string str, int start, int end);
    internal static bool IsValid(Char* name, int start, Int32& end, bool allowIPv6, bool notImplicitFile, bool unknownScheme);
    internal static bool IsValidCanonical(Char* name, int start, Int32& end, bool allowIPv6, bool notImplicitFile);
    internal static long ParseNonCanonical(Char* name, int start, Int32& end, bool notImplicitFile);
    private static bool Parse(string name, Byte* numbers, int start, int end);
    private static bool ParseCanonical(string name, Byte* numbers, int start, int end);
}
internal static class System.IPv6AddressHelper : object {
    private static int NumberOfLabels;
    private static string LegacyFormat;
    private static string CanonicalNumberFormat;
    private static string EmbeddedIPv4Format;
    private static char Separator;
    internal static string ParseCanonicalName(string str, int start, Boolean& isLoopback, String& scopeId);
    internal static string CreateCanonicalName(UInt16* numbers);
    private static KeyValuePair`2<int, int> FindCompressionRange(UInt16* numbers);
    private static bool ShouldHaveIpv4Embedded(UInt16* numbers);
    private static bool InternalIsValid(Char* name, int start, Int32& end, bool validateStrictAddress);
    internal static bool IsValid(Char* name, int start, Int32& end);
    internal static bool IsValidStrict(Char* name, int start, Int32& end);
    internal static bool Parse(string address, UInt16* numbers, int start, String& scopeId);
}
internal static class System.IriHelper : object {
    internal static bool CheckIriUnicodeRange(char unicode, bool isQuery);
    internal static bool CheckIriUnicodeRange(char highSurr, char lowSurr, Boolean& surrogatePair, bool isQuery);
    internal static bool CheckIsReserved(char ch, UriComponents component);
    internal static string EscapeUnescapeIri(Char* pInput, int start, int end, UriComponents component);
}
internal enum System.ParsingError : Enum {
    public int value__;
    public static ParsingError None;
    public static ParsingError BadFormat;
    public static ParsingError BadScheme;
    public static ParsingError BadAuthority;
    public static ParsingError EmptyUriString;
    public static ParsingError LastRelativeUriOkErrIndex;
    public static ParsingError SchemeLimit;
    public static ParsingError SizeLimit;
    public static ParsingError MustRootedPath;
    public static ParsingError BadHostName;
    public static ParsingError NonEmptyHost;
    public static ParsingError BadPort;
    public static ParsingError BadAuthorityTerminator;
    public static ParsingError CannotCreateRelative;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string ArgumentOutOfRange_IndexCountBuffer { get; }
    internal static string Argument_AddingDuplicate { get; }
    internal static string Argument_IdnBadLabelSize { get; }
    internal static string Argument_IdnBadPunycode { get; }
    internal static string Argument_IdnIllegalName { get; }
    internal static string Argument_InvalidCharSequence { get; }
    internal static string Argument_InvalidCharSequenceNoIndex { get; }
    internal static string Arg_OutOfMemoryException { get; }
    internal static string UnknownError_Num { get; }
    internal static string net_uri_AlreadyRegistered { get; }
    internal static string net_uri_BadAuthority { get; }
    internal static string net_uri_BadAuthorityTerminator { get; }
    internal static string net_uri_BadFormat { get; }
    internal static string net_uri_BadHostName { get; }
    internal static string net_uri_BadPort { get; }
    internal static string net_uri_BadScheme { get; }
    internal static string net_uri_BadString { get; }
    internal static string net_uri_BadUserPassword { get; }
    internal static string net_uri_CannotCreateRelative { get; }
    internal static string net_uri_SchemeLimit { get; }
    internal static string net_uri_EmptyUri { get; }
    internal static string net_uri_InvalidUriKind { get; }
    internal static string net_uri_MustRootedPath { get; }
    internal static string net_uri_NeedFreshParser { get; }
    internal static string net_uri_NotAbsolute { get; }
    internal static string net_uri_PortOutOfRange { get; }
    internal static string net_uri_SizeLimit { get; }
    internal static string net_uri_UserDrivenParsing { get; }
    internal static string net_uri_NotJustSerialization { get; }
    internal static string net_uri_BadUnicodeHostForIdn { get; }
    internal static string AssertionFailed { get; }
    internal static string Debug_Fail { get; }
    internal static string DebugAssertBanner { get; }
    internal static string DebugAssertLongMessage { get; }
    internal static string DebugAssertShortMessage { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_PathTooLong { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_ArgumentOutOfRange_IndexCountBuffer();
    internal static string get_Argument_AddingDuplicate();
    internal static string get_Argument_IdnBadLabelSize();
    internal static string get_Argument_IdnBadPunycode();
    internal static string get_Argument_IdnIllegalName();
    internal static string get_Argument_InvalidCharSequence();
    internal static string get_Argument_InvalidCharSequenceNoIndex();
    internal static string get_Arg_OutOfMemoryException();
    internal static string get_UnknownError_Num();
    internal static string get_net_uri_AlreadyRegistered();
    internal static string get_net_uri_BadAuthority();
    internal static string get_net_uri_BadAuthorityTerminator();
    internal static string get_net_uri_BadFormat();
    internal static string get_net_uri_BadHostName();
    internal static string get_net_uri_BadPort();
    internal static string get_net_uri_BadScheme();
    internal static string get_net_uri_BadString();
    internal static string get_net_uri_BadUserPassword();
    internal static string get_net_uri_CannotCreateRelative();
    internal static string get_net_uri_SchemeLimit();
    internal static string get_net_uri_EmptyUri();
    internal static string get_net_uri_InvalidUriKind();
    internal static string get_net_uri_MustRootedPath();
    internal static string get_net_uri_NeedFreshParser();
    internal static string get_net_uri_NotAbsolute();
    internal static string get_net_uri_PortOutOfRange();
    internal static string get_net_uri_SizeLimit();
    internal static string get_net_uri_UserDrivenParsing();
    internal static string get_net_uri_NotJustSerialization();
    internal static string get_net_uri_BadUnicodeHostForIdn();
    internal static string get_AssertionFailed();
    internal static string get_Debug_Fail();
    internal static string get_DebugAssertBanner();
    internal static string get_DebugAssertLongMessage();
    internal static string get_DebugAssertShortMessage();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_PathTooLong();
    internal static Type get_ResourceType();
}
[ExtensionAttribute]
internal static class System.StringNormalizationExtensions : object {
    [ExtensionAttribute]
public static bool IsNormalized(string value);
    [ExtensionAttribute]
public static string Normalize(string value);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
public static bool IsNormalized(string value, NormalizationForm normalizationForm);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
public static string Normalize(string value, NormalizationForm normalizationForm);
}
internal enum System.Text.NormalizationForm : Enum {
    public int value__;
    public static NormalizationForm FormC;
    public static NormalizationForm FormD;
    public static NormalizationForm FormKC;
    public static NormalizationForm FormKD;
}
internal class System.UncNameHelper : object {
    internal static int MaximumInternetNameLength;
    internal static string ParseCanonicalName(string str, int start, int end, Boolean& loopback);
    internal static bool IsValid(Char* name, ushort start, Int32& returnedEnd, bool notImplicitFile);
}
[FlagsAttribute]
internal enum System.UnescapeMode : Enum {
    public int value__;
    public static UnescapeMode CopyOnly;
    public static UnescapeMode Escape;
    public static UnescapeMode Unescape;
    public static UnescapeMode EscapeUnescape;
    public static UnescapeMode V1ToStringFlag;
    public static UnescapeMode UnescapeAll;
    public static UnescapeMode UnescapeAllOrThrow;
}
public class System.Uri : object {
    internal static string UriSchemeFile;
    internal static string UriSchemeFtp;
    internal static string UriSchemeGopher;
    internal static string UriSchemeHttp;
    internal static string UriSchemeHttps;
    internal static string UriSchemeWs;
    internal static string UriSchemeWss;
    internal static string UriSchemeMailto;
    internal static string UriSchemeNews;
    internal static string UriSchemeNntp;
    internal static string UriSchemeNetTcp;
    internal static string UriSchemeNetPipe;
    internal static string SchemeDelimiter;
    private static int c_Max16BitUtf8SequenceLength;
    internal static int c_MaxUriBufferSize;
    private static int c_MaxUriSchemeName;
    private string _string;
    private string _originalUnicodeString;
    private UriParser _syntax;
    private string _dnsSafeHost;
    private Flags _flags;
    private UriInfo _info;
    private bool _iriParsing;
    private static UriIdnScope modreq(System.Runtime.CompilerServices.IsVolatile) s_IdnScope;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_IriParsing;
    private static object s_initLock;
    private static UriFormat V1ToStringUnescape;
    internal static char c_DummyChar;
    internal static char c_EOL;
    internal static Char[] HexLowerChars;
    private static Char[] s_WSchars;
    private bool IsImplicitFile { get; }
    private bool IsUncOrDosPath { get; }
    private bool IsDosPath { get; }
    private bool IsUncPath { get; }
    private Flags HostType { get; }
    private UriParser Syntax { get; }
    private bool IsNotAbsoluteUri { get; }
    private bool AllowIdn { get; }
    internal bool UserDrivenParsing { get; }
    private ushort SecuredPathIndex { get; }
    public string AbsolutePath { get; }
    private string PrivateAbsolutePath { get; }
    public string AbsoluteUri { get; }
    public string LocalPath { get; }
    public string Authority { get; }
    public UriHostNameType HostNameType { get; }
    public bool IsDefaultPort { get; }
    public bool IsFile { get; }
    public bool IsLoopback { get; }
    public string PathAndQuery { get; }
    public String[] Segments { get; }
    public bool IsUnc { get; }
    public string Host { get; }
    private static object InitializeLock { get; }
    public int Port { get; }
    public string Query { get; }
    public string Fragment { get; }
    public string Scheme { get; }
    private bool OriginalStringSwitched { get; }
    public string OriginalString { get; }
    public string DnsSafeHost { get; }
    public string IdnHost { get; }
    public bool IsAbsoluteUri { get; }
    public bool UserEscaped { get; }
    public string UserInfo { get; }
    internal bool HasAuthority { get; }
    public Uri(string uriString);
    public Uri(string uriString, UriKind uriKind);
    public Uri(Uri baseUri, string relativeUri);
    public Uri(Uri baseUri, Uri relativeUri);
    private Uri(Flags flags, UriParser uriParser, string uri);
    private static Uri();
    private bool get_IsImplicitFile();
    private bool get_IsUncOrDosPath();
    private bool get_IsDosPath();
    private bool get_IsUncPath();
    private Flags get_HostType();
    private UriParser get_Syntax();
    private bool get_IsNotAbsoluteUri();
    internal static bool IriParsingStatic(UriParser syntax);
    private bool get_AllowIdn();
    private bool AllowIdnStatic(UriParser syntax, Flags flags);
    private bool IsIntranet(string schemeHost);
    internal bool get_UserDrivenParsing();
    private void SetUserDrivenParsing();
    private ushort get_SecuredPathIndex();
    private bool NotAny(Flags flags);
    private bool InFact(Flags flags);
    private static bool StaticNotAny(Flags allFlags, Flags checkFlags);
    private static bool StaticInFact(Flags allFlags, Flags checkFlags);
    private UriInfo EnsureUriInfo();
    private void EnsureParseRemaining();
    private void EnsureHostString(bool allowDnsOptimization);
    private void CreateUri(Uri baseUri, string relativeUri, bool dontEscape);
    private static ParsingError GetCombinedString(Uri baseUri, string relativeStr, bool dontEscape, String& result);
    private static UriFormatException GetException(ParsingError err);
    public string get_AbsolutePath();
    private string get_PrivateAbsolutePath();
    public string get_AbsoluteUri();
    public string get_LocalPath();
    public string get_Authority();
    public UriHostNameType get_HostNameType();
    public bool get_IsDefaultPort();
    public bool get_IsFile();
    public bool get_IsLoopback();
    public string get_PathAndQuery();
    public String[] get_Segments();
    public bool get_IsUnc();
    public string get_Host();
    private static bool StaticIsFile(UriParser syntax);
    private static object get_InitializeLock();
    private string GetLocalPath();
    public int get_Port();
    public string get_Query();
    public string get_Fragment();
    public string get_Scheme();
    private bool get_OriginalStringSwitched();
    public string get_OriginalString();
    public string get_DnsSafeHost();
    public string get_IdnHost();
    public bool get_IsAbsoluteUri();
    public bool get_UserEscaped();
    public string get_UserInfo();
    public static UriHostNameType CheckHostName(string name);
    internal string GetLeftPart(UriPartial part);
    internal static bool IsGenDelim(char ch);
    public static bool CheckSchemeName(string schemeName);
    internal static bool IsHexDigit(char character);
    internal static int FromHex(char digit);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(Uri uri1, Uri uri2);
    public static bool op_Inequality(Uri uri1, Uri uri2);
    public virtual bool Equals(object comparand);
    public Uri MakeRelativeUri(Uri uri);
    private static bool CheckForColonInFirstPathSegment(string uriString);
    internal static string InternalEscapeString(string rawString);
    private static ParsingError ParseScheme(string uriString, Flags& flags, UriParser& syntax);
    internal UriFormatException ParseMinimal();
    private ParsingError PrivateParseMinimal();
    private void PrivateParseMinimalIri(string newHost, ushort idx);
    private void CreateUriInfo(Flags cF);
    private void CreateHostString();
    private static string CreateHostStringHelper(string str, ushort idx, ushort end, Flags& flags, String& scopeId);
    private void GetHostViaCustomSyntax();
    internal string GetParts(UriComponents uriParts, UriFormat formatAs);
    private string GetEscapedParts(UriComponents uriParts);
    private string GetUnescapedParts(UriComponents uriParts, UriFormat formatAs);
    private string ReCreateParts(UriComponents parts, ushort nonCanonical, UriFormat formatAs);
    private string GetUriPartsFromUserString(UriComponents uriParts);
    private void ParseRemaining();
    private static ushort ParseSchemeCheckImplicitFile(Char* uriString, ushort length, ParsingError& err, Flags& flags, UriParser& syntax);
    private static bool CheckKnownSchemes(Int64* lptr, ushort nChars, UriParser& syntax);
    private static ParsingError CheckSchemeSyntax(Char* ptr, ushort length, UriParser& syntax);
    private ushort CheckAuthorityHelper(Char* pString, ushort idx, ushort length, ParsingError& err, Flags& flags, UriParser syntax, String& newHost);
    private void CheckAuthorityHelperHandleDnsIri(Char* pString, ushort start, int end, int startInput, bool iriParsing, bool hasUnicode, UriParser syntax, string userInfoString, Flags& flags, Boolean& justNormalized, String& newHost, ParsingError& err);
    private void CheckAuthorityHelperHandleAnyHostIri(Char* pString, int startInput, int end, bool iriParsing, bool hasUnicode, UriParser syntax, Flags& flags, String& newHost, ParsingError& err);
    private void FindEndOfComponent(string input, UInt16& idx, ushort end, char delim);
    private void FindEndOfComponent(Char* str, UInt16& idx, ushort end, char delim);
    private Check CheckCanonical(Char* str, UInt16& idx, ushort end, char delim);
    private Char[] GetCanonicalPath(Char[] dest, Int32& pos, UriFormat formatAs);
    private static void UnescapeOnly(Char* pch, int start, Int32& end, char ch1, char ch2, char ch3);
    private static Char[] Compress(Char[] dest, ushort start, Int32& destLength, UriParser syntax);
    internal static int CalculateCaseInsensitiveHashCode(string text);
    private static string CombineUri(Uri basePart, string relativePart, UriFormat uriFormat);
    private static string PathDifference(string path1, string path2, bool compareCase);
    internal bool get_HasAuthority();
    private static bool IsLWS(char ch);
    private static bool IsAsciiLetter(char character);
    internal static bool IsAsciiLetterOrDigit(char character);
    internal static bool IsBidiControlCharacter(char ch);
    internal static string StripBidiControlCharacter(Char* strToClean, int start, int length);
    private void CreateThis(string uri, bool dontEscape, UriKind uriKind);
    private void InitializeUri(ParsingError err, UriKind uriKind, UriFormatException& e);
    private bool CheckForUnicode(string data);
    private bool CheckForEscapedUnreserved(string data);
    public static bool TryCreate(string uriString, UriKind uriKind, Uri& result);
    public static bool TryCreate(Uri baseUri, string relativeUri, Uri& result);
    public static bool TryCreate(Uri baseUri, Uri relativeUri, Uri& result);
    public string GetComponents(UriComponents components, UriFormat format);
    public static int Compare(Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType);
    public bool IsWellFormedOriginalString();
    public static bool IsWellFormedUriString(string uriString, UriKind uriKind);
    internal bool InternalIsWellFormedOriginalString();
    public static string UnescapeDataString(string stringToUnescape);
    public static string EscapeUriString(string stringToEscape);
    public static string EscapeDataString(string stringToEscape);
    internal string EscapeUnescapeIri(string input, int start, int end, UriComponents component);
    internal static Uri CreateHelper(string uriString, bool dontEscape, UriKind uriKind, UriFormatException& e);
    internal static Uri ResolveHelper(Uri baseUri, Uri relativeUri, String& newUriString, Boolean& userEscaped, UriFormatException& e);
    private string GetRelativeSerializationString(UriFormat format);
    internal string GetComponentsHelper(UriComponents uriComponents, UriFormat uriFormat);
    public bool IsBaseOf(Uri uri);
    internal bool IsBaseOfHelper(Uri uriLink);
    private void CreateThisFromUri(Uri otherUri);
}
public class System.UriBuilder : object {
    private bool _changed;
    private string _fragment;
    private string _host;
    private string _password;
    private string _path;
    private int _port;
    private string _query;
    private string _scheme;
    private string _schemeDelimiter;
    private Uri _uri;
    private string _username;
    unknown string Extra {private set; }
    public string Fragment { get; public set; }
    public string Host { get; public set; }
    public string Password { get; public set; }
    public string Path { get; public set; }
    public int Port { get; public set; }
    public string Query { get; public set; }
    public string Scheme { get; public set; }
    public Uri Uri { get; }
    public string UserName { get; public set; }
    public UriBuilder(string uri);
    public UriBuilder(Uri uri);
    public UriBuilder(string schemeName, string hostName);
    public UriBuilder(string scheme, string host, int portNumber);
    public UriBuilder(string scheme, string host, int port, string pathValue);
    public UriBuilder(string scheme, string host, int port, string path, string extraValue);
    private void Init(Uri uri);
    private void set_Extra(string value);
    public string get_Fragment();
    public void set_Fragment(string value);
    public string get_Host();
    public void set_Host(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Path();
    public void set_Path(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_Query();
    public void set_Query(string value);
    public string get_Scheme();
    public void set_Scheme(string value);
    public Uri get_Uri();
    public string get_UserName();
    public void set_UserName(string value);
    private string ConvertSlashes(string path);
    public virtual bool Equals(object rparam);
    public virtual int GetHashCode();
    private void SetFieldsFromUri(Uri uri);
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.UriComponents : Enum {
    public int value__;
    public static UriComponents Scheme;
    public static UriComponents UserInfo;
    public static UriComponents Host;
    public static UriComponents Port;
    public static UriComponents Path;
    public static UriComponents Query;
    public static UriComponents Fragment;
    public static UriComponents StrongPort;
    public static UriComponents NormalizedHost;
    public static UriComponents KeepDelimiter;
    public static UriComponents SerializationInfoString;
    public static UriComponents AbsoluteUri;
    public static UriComponents HostAndPort;
    public static UriComponents StrongAuthority;
    public static UriComponents SchemeAndServer;
    public static UriComponents HttpRequestUrl;
    public static UriComponents PathAndQuery;
}
public enum System.UriFormat : Enum {
    public int value__;
    public static UriFormat UriEscaped;
    public static UriFormat Unescaped;
    public static UriFormat SafeUnescaped;
}
public class System.UriFormatException : FormatException {
    public UriFormatException(string textString);
    public UriFormatException(string textString, Exception e);
}
internal static class System.UriHelper : object {
    private static Char[] s_hexUpperChars;
    private static short c_MaxAsciiCharsReallocate;
    private static short c_MaxUnicodeCharsReallocate;
    private static short c_MaxUTF_8BytesPerUnicodeChar;
    private static short c_EncodedCharsPerByte;
    private static string RFC2396ReservedMarks;
    private static string RFC3986ReservedMarks;
    private static string RFC2396UnreservedMarks;
    private static string RFC3986UnreservedMarks;
    private static UriHelper();
    internal static bool TestForSubPath(Char* selfPtr, ushort selfLength, Char* otherPtr, ushort otherLength, bool ignoreCase);
    internal static Char[] EscapeString(string input, int start, int end, Char[] dest, Int32& destPos, bool isUriString, char force1, char force2, char rsvd);
    private static Char[] EnsureDestinationSize(Char* pStr, Char[] dest, int currentInputPos, short charsToAdd, short minReallocateChars, Int32& destPos, int prevInputPos);
    internal static Char[] UnescapeString(string input, int start, int end, Char[] dest, Int32& destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery);
    internal static Char[] UnescapeString(Char* pStr, int start, int end, Char[] dest, Int32& destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery);
    internal static void MatchUTF8Sequence(Char* pDest, Char[] dest, Int32& destOffset, Char[] unescapedChars, int charCount, Byte[] bytes, int byteCount, bool isQuery, bool iriParsing);
    internal static void EscapeAsciiChar(char ch, Char[] to, Int32& pos);
    internal static char EscapedAscii(char digit, char next);
    internal static bool IsNotSafeForUnescape(char ch);
    private static bool IsReservedUnreservedOrHash(char c);
    internal static bool IsUnreserved(char c);
    internal static bool Is3986Unreserved(char c);
}
public enum System.UriHostNameType : Enum {
    public int value__;
    public static UriHostNameType Unknown;
    public static UriHostNameType Basic;
    public static UriHostNameType Dns;
    public static UriHostNameType IPv4;
    public static UriHostNameType IPv6;
}
internal enum System.UriIdnScope : Enum {
    public int value__;
    public static UriIdnScope None;
    public static UriIdnScope AllExceptIntranet;
    public static UriIdnScope All;
}
public enum System.UriKind : Enum {
    public int value__;
    public static UriKind RelativeOrAbsolute;
    public static UriKind Absolute;
    public static UriKind Relative;
}
internal abstract class System.UriParser : object {
    private static UriSyntaxFlags SchemeOnlyFlags;
    private static LowLevelDictionary`2<string, UriParser> s_table;
    private static LowLevelDictionary`2<string, UriParser> s_tempTable;
    private UriSyntaxFlags _flags;
    private UriSyntaxFlags modreq(System.Runtime.CompilerServices.IsVolatile) _updatableFlags;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _updatableFlagsUsed;
    private static UriSyntaxFlags c_UpdatableFlags;
    private int _port;
    private string _scheme;
    internal static int NoDefaultPort;
    private static int c_InitialTableSize;
    internal static UriParser HttpUri;
    internal static UriParser HttpsUri;
    internal static UriParser WsUri;
    internal static UriParser WssUri;
    internal static UriParser FtpUri;
    internal static UriParser FileUri;
    internal static UriParser GopherUri;
    internal static UriParser NntpUri;
    internal static UriParser NewsUri;
    internal static UriParser MailToUri;
    internal static UriParser UuidUri;
    internal static UriParser TelnetUri;
    internal static UriParser LdapUri;
    internal static UriParser NetTcpUri;
    internal static UriParser NetPipeUri;
    internal static UriParser VsMacrosUri;
    private static int c_MaxCapacity;
    private static UriSyntaxFlags UnknownV1SyntaxFlags;
    private static UriSyntaxFlags HttpSyntaxFlags;
    private static UriSyntaxFlags FtpSyntaxFlags;
    private static UriSyntaxFlags s_fileSyntaxFlags;
    private static UriSyntaxFlags VsmacrosSyntaxFlags;
    private static UriSyntaxFlags GopherSyntaxFlags;
    private static UriSyntaxFlags NewsSyntaxFlags;
    private static UriSyntaxFlags NntpSyntaxFlags;
    private static UriSyntaxFlags TelnetSyntaxFlags;
    private static UriSyntaxFlags LdapSyntaxFlags;
    private static UriSyntaxFlags MailtoSyntaxFlags;
    private static UriSyntaxFlags NetPipeSyntaxFlags;
    private static UriSyntaxFlags NetTcpSyntaxFlags;
    internal string SchemeName { get; }
    internal int DefaultPort { get; }
    internal UriSyntaxFlags Flags { get; }
    internal bool IsSimple { get; }
    private static UriParser();
    internal UriParser(UriSyntaxFlags flags);
    internal string get_SchemeName();
    internal int get_DefaultPort();
    protected virtual UriParser OnNewUri();
    protected virtual void OnRegister(string schemeName, int defaultPort);
    protected virtual void InitializeAndValidate(Uri uri, UriFormatException& parsingError);
    protected virtual string Resolve(Uri baseUri, Uri relativeUri, UriFormatException& parsingError);
    protected virtual bool IsBaseOf(Uri baseUri, Uri relativeUri);
    protected virtual string GetComponents(Uri uri, UriComponents components, UriFormat format);
    protected virtual bool IsWellFormedOriginalString(Uri uri);
    public static bool IsKnownScheme(string schemeName);
    internal UriSyntaxFlags get_Flags();
    internal bool NotAny(UriSyntaxFlags flags);
    internal bool InFact(UriSyntaxFlags flags);
    internal bool IsAllSet(UriSyntaxFlags flags);
    private bool IsFullMatch(UriSyntaxFlags flags, UriSyntaxFlags expected);
    private static void FetchSyntax(UriParser syntax, string lwrCaseSchemeName, int defaultPort);
    internal static UriParser FindOrFetchAsUnknownV1Syntax(string lwrCaseScheme);
    internal static UriParser GetSyntax(string lwrCaseScheme);
    internal bool get_IsSimple();
    internal void SetUpdatableFlags(UriSyntaxFlags flags);
    internal UriParser InternalOnNewUri();
    internal void InternalValidate(Uri thisUri, UriFormatException& parsingError);
    internal string InternalResolve(Uri thisBaseUri, Uri uriLink, UriFormatException& parsingError);
    internal bool InternalIsBaseOf(Uri thisBaseUri, Uri uriLink);
    internal string InternalGetComponents(Uri thisUri, UriComponents uriComponents, UriFormat uriFormat);
    internal bool InternalIsWellFormedOriginalString(Uri thisUri);
}
internal enum System.UriPartial : Enum {
    public int value__;
    public static UriPartial Scheme;
    public static UriPartial Authority;
    public static UriPartial Path;
    public static UriPartial Query;
}
[FlagsAttribute]
internal enum System.UriSyntaxFlags : Enum {
    public int value__;
    public static UriSyntaxFlags None;
    public static UriSyntaxFlags MustHaveAuthority;
    public static UriSyntaxFlags OptionalAuthority;
    public static UriSyntaxFlags MayHaveUserInfo;
    public static UriSyntaxFlags MayHavePort;
    public static UriSyntaxFlags MayHavePath;
    public static UriSyntaxFlags MayHaveQuery;
    public static UriSyntaxFlags MayHaveFragment;
    public static UriSyntaxFlags AllowEmptyHost;
    public static UriSyntaxFlags AllowUncHost;
    public static UriSyntaxFlags AllowDnsHost;
    public static UriSyntaxFlags AllowIPv4Host;
    public static UriSyntaxFlags AllowIPv6Host;
    public static UriSyntaxFlags AllowAnInternetHost;
    public static UriSyntaxFlags AllowAnyOtherHost;
    public static UriSyntaxFlags FileLikeUri;
    public static UriSyntaxFlags MailToLikeUri;
    public static UriSyntaxFlags V1_UnknownUri;
    public static UriSyntaxFlags SimpleUserSyntax;
    public static UriSyntaxFlags BuiltInSyntax;
    public static UriSyntaxFlags ParserSchemeOnly;
    public static UriSyntaxFlags AllowDOSPath;
    public static UriSyntaxFlags PathIsRooted;
    public static UriSyntaxFlags ConvertPathSlashes;
    public static UriSyntaxFlags CompressPath;
    public static UriSyntaxFlags CanonicalizeAsFilePath;
    public static UriSyntaxFlags UnEscapeDotsAndSlashes;
    public static UriSyntaxFlags AllowIdn;
    public static UriSyntaxFlags AllowIriParsing;
}
