[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class Microsoft.Extensions.DependencyInjection.ActionFallback`1 : object {
    private IServiceProvider _serviceProvider;
    [CompilerGeneratedAttribute]
private Func`2<FallbackBuilderForServiceProvider, T> <BuilderWithServiceProvider>k__BackingField;
    [RequiredMemberAttribute]
public Func`2<FallbackBuilderForServiceProvider, T> BuilderWithServiceProvider { get; public set; }
    [ObsoleteAttribute("Constructors of types with required members are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RequiredMembers")]
public ActionFallback`1(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public Func`2<FallbackBuilderForServiceProvider, T> get_BuilderWithServiceProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BuilderWithServiceProvider(Func`2<FallbackBuilderForServiceProvider, T> value);
    public sealed virtual T Create(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.DecoratedService`1 : object {
    [CompilerGeneratedAttribute]
private TService <Service>k__BackingField;
    public TService Service { get; }
    public DecoratedService`1(TService service);
    [CompilerGeneratedAttribute]
public sealed virtual TService get_Service();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.Factory`1 : object {
    private IServiceProvider _serviceProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IFactoryFallback`1<TService> _fallback;
    public Factory`1(IServiceProvider serviceProvider, IFactoryFallback`1<TService> fallback);
    [NullableContextAttribute("2")]
public sealed virtual TService Create(string name);
    [NullableContextAttribute("2")]
public sealed virtual TService CreateWithoutDecoration(string name);
    public sealed virtual IEnumerable`1<TService> CreateAll(string name);
    public sealed virtual IEnumerable`1<TService> CreateAllWithoutDecoration(string name);
    [IteratorStateMachineAttribute("Microsoft.Extensions.DependencyInjection.Factory`1/<Create>d__7")]
private IEnumerable`1<TService> Create(string name, int decoration, bool enumerate);
    [NullableContextAttribute("2")]
public sealed virtual bool Exists(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.DependencyInjection.FallbackBuilderForServiceProvider : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IServiceProvider Services { get; internal set; }
    [NullableAttribute("2")]
public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Services(IServiceProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
}
[NullableContextAttribute("2")]
public interface Microsoft.Extensions.DependencyInjection.IDecoratedService`1 {
    public TService Service { get; }
    public abstract virtual TService get_Service();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IDecoratorService`1 {
    public abstract virtual void SetDecoratedServices(IEnumerable`1<TService> services);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IFactory`1 {
    [NullableContextAttribute("2")]
public abstract virtual TService Create(string name);
    [NullableContextAttribute("2")]
public abstract virtual TService CreateWithoutDecoration(string name);
    public abstract virtual IEnumerable`1<TService> CreateAll(string name);
    public abstract virtual IEnumerable`1<TService> CreateAllWithoutDecoration(string name);
    [NullableContextAttribute("2")]
public abstract virtual bool Exists(string name);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IFactoryFallback`1 {
    public abstract virtual TService Create(string name);
}
public interface Microsoft.Extensions.DependencyInjection.IFactoryOptions {
}
public interface Microsoft.Extensions.DependencyInjection.IOptionsBuilder {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IOptionsBuilder`1 {
    public abstract virtual Func`2<IServiceProvider, TService> Build();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IOptionsBuilderAsync`1 {
    public abstract virtual Task`1<Func`2<IServiceProvider, TService>> BuildAsync();
}
public interface Microsoft.Extensions.DependencyInjection.IScannable {
}
public interface Microsoft.Extensions.DependencyInjection.IScannable`1 {
}
public interface Microsoft.Extensions.DependencyInjection.IScopedScannable {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceForFactory {
    public abstract virtual void SetFactoryName(string name);
}
public interface Microsoft.Extensions.DependencyInjection.IServiceWithFactoryWithOptions {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceWithFactoryWithOptions`1 {
    public abstract virtual void SetOptions(TOptions options);
}
public interface Microsoft.Extensions.DependencyInjection.ISingletonScannable {
}
public interface Microsoft.Extensions.DependencyInjection.ITransientScannable {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ProxyService : object {
    private static ModuleBuilder s_builder;
    private static ProxyService();
    [ExtensionAttribute]
public static ValueTuple`2<Type, Type> AddProxy(IServiceCollection services, Type interfaceType, Type implementationType, string interfaceName, string className, ServiceLifetime lifetime, Type[] furtherInterfaces);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.DependencyInjection.ProxyService`1 : object {
    protected T _proxy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Object[] _parameters;
    protected Type _proxyType;
    [NullableAttribute("1")]
public T Proxy { get; }
    [NullableContextAttribute("1")]
public T get_Proxy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.Extensions.DependencyInjection.ScanResult : object {
    [CompilerGeneratedAttribute]
private List`1<Type> <Implementations>k__BackingField;
    public int Count { get; }
    [RequiredMemberAttribute]
public List`1<Type> Implementations { get; public set; }
    public int get_Count();
    [CompilerGeneratedAttribute]
public List`1<Type> get_Implementations();
    [CompilerGeneratedAttribute]
public void set_Implementations(List`1<Type> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, Dictionary`2<Type, bool>> <ScannedTypes>k__BackingField;
    private static Type s_objectType;
    internal static Dictionary`2<Type, Dictionary`2<Type, bool>> ScannedTypes { get; }
    private static ServiceCollectionExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddFactoryFallback(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddActionAsFallbackWithServiceProvider(IServiceCollection services, Func`2<FallbackBuilderForServiceProvider, TService> fallbackBuilder);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, TService implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddFactoryAsync(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, TService implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddNewFactoryAsync(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, TService implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddOrOverrideFactoryAsync>d__13`3")]
[ExtensionAttribute]
public static Task`1<bool> AddOrOverrideFactoryAsync(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, TService implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<TryAddFactoryAsync>d__17`3")]
[ExtensionAttribute]
public static Task`1<bool> TryAddFactoryAsync(IServiceCollection services, TService implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddNewFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddOrOverrideFactoryAsync>d__29`3")]
[ExtensionAttribute]
public static Task`1<bool> AddOrOverrideFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<TryAddFactoryAsync>d__33`3")]
[ExtensionAttribute]
public static Task`1<bool> TryAddFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddNewFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddOrOverrideFactoryAsync>d__45`3")]
[ExtensionAttribute]
public static Task`1<bool> AddOrOverrideFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<TryAddFactoryAsync>d__49`3")]
[ExtensionAttribute]
public static Task`1<bool> TryAddFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, TImplementation implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddFactoryAsync(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, TImplementation implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddNewFactoryAsync(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, TImplementation implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddOrOverrideFactoryAsync>d__61`4")]
[ExtensionAttribute]
public static Task`1<bool> AddOrOverrideFactoryAsync(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, TImplementation implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<TryAddFactoryAsync>d__65`4")]
[ExtensionAttribute]
public static Task`1<bool> TryAddFactoryAsync(IServiceCollection services, TImplementation implementationInstance, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddNewFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddOrOverrideFactoryAsync>d__77`4")]
[ExtensionAttribute]
public static Task`1<bool> AddOrOverrideFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<TryAddFactoryAsync>d__81`4")]
[ExtensionAttribute]
public static Task`1<bool> TryAddFactoryAsync(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Type serviceType, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Type serviceType, Type implementationType, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Type serviceType, Type implementationType, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddNewFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<IServiceCollection> AddNewFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool AddOrOverrideFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddOrOverrideFactoryAsync>d__96`4")]
[ExtensionAttribute]
public static Task`1<bool> AddOrOverrideFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool TryAddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<TryAddFactoryAsync>d__100`4")]
[ExtensionAttribute]
public static Task`1<bool> TryAddFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
private static void SendInError(IServiceCollection services, string name);
    private static void InformThatItsAlreadyInstalled(Boolean& check);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static string GetFactoryName(string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static string GetOptionsName(string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static IServiceCollection AddEngineFactoryWithoutGenerics(IServiceCollection services, Type serviceType, Type implementationType, string name, bool canOverrideConfiguration, ServiceLifetime lifetime, object implementationInstance, Func`3<IServiceProvider, object, object> implementationFactory, Action whenExists, bool fromDecoration, bool doNotRemoveExisting);
    [ExtensionAttribute]
public static IServiceCollection AddEngineFactory(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddEngineFactory(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
private static IServiceCollection AddEngineFactory(IServiceCollection services, string name, bool canOverrideConfiguration, ServiceLifetime lifetime, TImplementation implementationInstance, Func`3<IServiceProvider, object, object> implementationFactory, Action whenExists, bool fromDecoration, bool doNotRemoveExisting);
    [ExtensionAttribute]
public static bool HasFactory(IServiceCollection services, string name);
    [ExtensionAttribute]
public static bool HasFactory(IServiceCollection services, Type serviceType, string name);
    [ExtensionAttribute]
private static IServiceCollection AddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, bool canOverrideConfiguration, ServiceLifetime lifetime, TImplementation implementationInstance, Func`3<IServiceProvider, object, TService> implementationFactory, Action whenExists, bool fromDecoration, bool doNotRemoveExisting);
    [ExtensionAttribute]
private static IServiceCollection AddFactory(IServiceCollection services, Action`1<TOptions> createOptions, string name, bool canOverrideConfiguration, ServiceLifetime lifetime, TImplementation implementationInstance, Func`3<IServiceProvider, object, TService> implementationFactory, Action whenExists, bool fromDecoration, bool doNotRemoveExisting);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddFactoryAsync>d__113`4")]
[ExtensionAttribute]
private static Task`1<IServiceCollection> AddFactoryAsync(IServiceCollection services, Action`1<TOptions> createOptions, string name, bool canOverrideConfiguration, ServiceLifetime lifetime, TImplementation implementationInstance, Func`3<IServiceProvider, object, TService> implementationFactory, Action whenExists, bool fromDecoration, bool doNotRemoveExisting);
    [ExtensionAttribute]
public static IServiceCollection AddDecoration(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDecoration(IServiceCollection services, TService implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDecoration(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDecoration(IServiceCollection services, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDecoration(IServiceCollection services, TImplementation implementationInstance, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDecoration(IServiceCollection services, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static string GetDecoratorName(string name, int index);
    [ExtensionAttribute]
private static IServiceCollection AddDecorationEngine(IServiceCollection services, TService implementationInstance, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
private static IServiceCollection AddDecorationEngine(IServiceCollection services, TImplementation implementationInstance, Func`3<IServiceProvider, object, TService> implementationFactory, string name, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static Task`1<TResponse> ExecuteUntilNowAsync(IServiceCollection services, Func`2<TService, Task`1<TResponse>> actionToDo);
    [ExtensionAttribute]
public static Task`1<TResponse> ExecuteUntilNowAsync(IServiceCollection services, Func`2<IServiceProvider, Task`1<TResponse>> actionToDo);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<ExecuteUntilNowWithWarmUpAsync>d__125`2")]
[ExtensionAttribute]
public static Task`1<TResponse> ExecuteUntilNowWithWarmUpAsync(IServiceCollection services, Func`2<TService, Task`1<TResponse>> actionToDo);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<ExecuteUntilNowWithWarmUpAsync>d__126`1")]
[ExtensionAttribute]
public static Task`1<TResponse> ExecuteUntilNowWithWarmUpAsync(IServiceCollection services, Func`2<IServiceProvider, Task`1<TResponse>> actionToDo);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedService(IServiceCollection services, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedService(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedService(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedService(IServiceCollection services, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedService(IServiceCollection services, Type serviceType, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedService(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedSingleton(IServiceCollection services, object serviceKey, TImplementation implementation);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideKeyedSingleton(IServiceCollection services, object serviceKey, TService implementation);
    [ExtensionAttribute]
private static IServiceCollection AddKeyedServiceEngine(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType, object instance, Func`3<IServiceProvider, object, object> instanceFactory, ServiceLifetime lifetime, Nullable`1<bool> canOverride, Nullable`1<bool> doNotRemoveExisting);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedService(IServiceCollection services, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedService(IServiceCollection services, Type serviceType, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedService(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedService(IServiceCollection services, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedService(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedService(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool HasKeyedService(IServiceCollection services, object serviceKey, ServiceDescriptor& serviceDescriptor);
    [ExtensionAttribute]
public static bool HasKeyedService(IServiceCollection services, object serviceKey, ServiceDescriptor& serviceDescriptor);
    [ExtensionAttribute]
public static bool HasKeyedService(IServiceCollection services, Type serviceType, object serviceKey, ServiceDescriptor& serviceDescriptor);
    [ExtensionAttribute]
public static bool HasKeyedService(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType, ServiceDescriptor& serviceDescriptor);
    [ExtensionAttribute]
public static IServiceCollection RemoveKeyedService(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection RemoveKeyedService(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static TService TryAddKeyedSingletonAndGetService(IServiceCollection services, TService implementationInstance, object serviceKey);
    [ExtensionAttribute]
public static TService TryAddKeyedSingletonAndGetService(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static TService TryAddKeyedSingletonAndGetService(IServiceCollection services, TImplementation implementationInstance, object serviceKey);
    [ExtensionAttribute]
public static TService TryAddKeyedSingletonAndGetService(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static TService GetSingletonKeyedService(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection TryAddKeyedService(IServiceCollection services, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddKeyedService(IServiceCollection services, Type serviceType, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddKeyedService(IServiceCollection services, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddKeyedService(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddKeyedService(IServiceCollection services, object serviceKey, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddKeyedService(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddKeyedService(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory, ServiceLifetime lifetime);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<Type, Dictionary`2<Type, bool>> get_ScannedTypes();
    [ExtensionAttribute]
public static ScanResult Scan(IServiceCollection services, ServiceLifetime lifetime, Assembly[] assemblies);
    [ExtensionAttribute]
public static ScanResult Scan(IServiceCollection services, Type serviceType, ServiceLifetime lifetime, Assembly[] assemblies);
    [ExtensionAttribute]
public static ScanResult Scan(IServiceCollection services, ServiceLifetime lifetime, Assembly[] assemblies);
    [ExtensionAttribute]
private static bool AddScannedType(IServiceCollection services, Type serviceType, Type implementationType, ServiceLifetime lifetime);
    [NullableContextAttribute("2")]
private static Type GetScannableInterfaceImplementation(Type type);
    [ExtensionAttribute]
public static ScanResult ScanCallingAssembly(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanCallingAssembly(IServiceCollection services, Type serviceType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanCallingAssembly(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanCurrentDomain(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanCurrentDomain(IServiceCollection services, Type serviceType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanCurrentDomain(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanDependencyContext(IServiceCollection services, ServiceLifetime lifetime, Func`2<Assembly, bool> predicate);
    [ExtensionAttribute]
public static ScanResult ScanDependencyContext(IServiceCollection services, Type serviceType, ServiceLifetime lifetime, Func`2<Assembly, bool> predicate);
    [ExtensionAttribute]
public static ScanResult ScanDependencyContext(IServiceCollection services, ServiceLifetime lifetime, Func`2<Assembly, bool> predicate);
    private static Assembly[] GetFromDependencyContext(Func`2<Assembly, bool> predicate);
    [ExtensionAttribute]
public static ScanResult ScanEntryAssembly(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanEntryAssembly(IServiceCollection services, Type serviceType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanEntryAssembly(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanExecutingAssembly(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanExecutingAssembly(IServiceCollection services, Type serviceType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanExecutingAssembly(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanFromType(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanFromType(IServiceCollection services, Type serviceType, Type scanAssemblyRetriever, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanFromType(IServiceCollection services, ServiceLifetime lifetime);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ScanResult ScanFromTypes(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanFromTypes(IServiceCollection services, Type serviceType, Type scanAssemblyRetriever, Type scanAssemblyRetriever2, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanFromTypes(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static ScanResult ScanWithReferences(IServiceCollection services, ServiceLifetime lifetime, Assembly[] assemblies);
    [ExtensionAttribute]
public static ScanResult ScanWithReferences(IServiceCollection services, Type serviceType, ServiceLifetime lifetime, Assembly[] assemblies);
    [ExtensionAttribute]
public static ScanResult ScanWithReferences(IServiceCollection services, ServiceLifetime lifetime, Assembly[] assemblies);
    private static Assembly[] AddReferencedAssemblies(Assembly[] assemblies);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideService(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideService(IServiceCollection services, Type serviceType, Type implementationType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideService(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideService(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideService(IServiceCollection services, Type serviceType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideService(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideSingleton(IServiceCollection services, TImplementation implementation);
    [ExtensionAttribute]
public static IServiceCollection AddOrOverrideSingleton(IServiceCollection services, TService implementation);
    [ExtensionAttribute]
public static IServiceCollection AddService(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddService(IServiceCollection services, Type serviceType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddService(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddService(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddService(IServiceCollection services, Type serviceType, Type implementationType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddService(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory, ServiceLifetime lifetime);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ServiceDescriptor GetDescriptor(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static ServiceDescriptor GetDescriptor(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static ServiceDescriptor GetDescriptor(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static ServiceDescriptor GetDescriptor(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static ServiceDescriptor GetDrescriptorEngine(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static bool HasService(IServiceCollection services, ServiceDescriptor& serviceDescriptor);
    [ExtensionAttribute]
public static bool HasService(IServiceCollection services, ServiceDescriptor& serviceDescriptor);
    [ExtensionAttribute]
public static IServiceCollection RemoveService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection RemoveService(IServiceCollection services, Type typeToRemove);
    [ExtensionAttribute]
public static TService TryAddSingletonAndGetService(IServiceCollection services, TService implementationInstance);
    [ExtensionAttribute]
public static TService TryAddSingletonAndGetService(IServiceCollection services);
    [ExtensionAttribute]
public static TService TryAddSingletonAndGetService(IServiceCollection services, TImplementation implementationInstance);
    [ExtensionAttribute]
public static TService TryAddSingletonAndGetService(IServiceCollection services);
    [ExtensionAttribute]
public static TService GetSingletonService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, TService implementationInstance, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, object implementationInstance, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, Type serviceType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, TImplementation implementationInstance, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, Type serviceType, Type implementationType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection TryAddService(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddPopulationService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddPopulationService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddPopulationService(IServiceCollection services);
    [ExtensionAttribute]
public static IPopulationBuilder`1<T> AddPopulationSettings(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddPopulationStrategyService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddRegexService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddRandomPopulationService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddWaitingTheSameThreadThatStartedTheTaskWhenUseNoContext(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddWarmUp(IServiceCollection services, Func`2<IServiceProvider, Task> actionAfterBuild);
    [ExtensionAttribute]
public static IServiceCollection AddWarmUp(IServiceCollection services, Action`1<IServiceProvider> actionAfterBuild);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<WarmUpAsync>d__243`1")]
[ExtensionAttribute]
public static Task`1<TServiceProvider> WarmUpAsync(TServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.DependencyInjection.ServiceFactoryMap : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<object, List`1<ServiceDescriptor>> <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Action`2<object, object>> <OptionsSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <DecorationCount>k__BackingField;
    public Dictionary`2<object, List`1<ServiceDescriptor>> Services { get; }
    public Dictionary`2<string, Action`2<object, object>> OptionsSetter { get; }
    public Dictionary`2<string, int> DecorationCount { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<object, List`1<ServiceDescriptor>> get_Services();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Action`2<object, object>> get_OptionsSetter();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_DecorationCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Rystem.ServiceProviderUtility : object {
    [CompilerGeneratedAttribute]
private static ServiceProviderUtility <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<IServiceProvider, Task>> <AfterBuildEvents>k__BackingField;
    public static ServiceProviderUtility Instance { get; public set; }
    public List`1<Func`2<IServiceProvider, Task>> AfterBuildEvents { get; }
    private static ServiceProviderUtility();
    [CompilerGeneratedAttribute]
public static ServiceProviderUtility get_Instance();
    [CompilerGeneratedAttribute]
public static void set_Instance(ServiceProviderUtility value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<IServiceProvider, Task>> get_AfterBuildEvents();
    [AsyncStateMachineAttribute("Rystem.ServiceProviderUtility/<AfterBuildAsync>d__8")]
public Task AfterBuildAsync(IServiceProvider providers);
}
internal class System.Population.Random.AbstractPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.ArrayPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Population.Random.AsyncEnumerablePopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.BoolPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.BytePopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.CharPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.DictionaryPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.EnumerablePopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.GuidPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
[NullableContextAttribute("1")]
public interface System.Population.Random.IPopulation`1 {
    public abstract virtual IPopulationBuilder`1<T> Setup(PopulationSettings`1<T> settings);
    public abstract virtual List`1<T> Populate(int numberOfElements, int numberOfElementsWhenEnumerableIsFound);
}
[NullableContextAttribute("1")]
public interface System.Population.Random.IPopulationBuilder`1 {
    public abstract virtual IPopulationBuilder`1<T> WithPattern(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, String[] regex);
    public abstract virtual IPopulationBuilder`1<T> WithSpecificNumberOfElements(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, int numberOfElements);
    public abstract virtual IPopulationBuilder`1<T> WithValue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Func`1<TProperty> creator);
    public abstract virtual IPopulationBuilder`1<T> WithValue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Func`2<IServiceProvider, Task`1<TProperty>> valueRetriever);
    public abstract virtual IPopulationBuilder`1<T> WithRandomValue(Expression`1<Func`2<T, IEnumerable`1<TProperty>>> navigationPropertyPath, Func`2<IServiceProvider, Task`1<IEnumerable`1<TProperty>>> valuesRetriever);
    public abstract virtual IPopulationBuilder`1<T> WithRandomValue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Func`2<IServiceProvider, Task`1<IEnumerable`1<TProperty>>> valuesRetriever);
    public abstract virtual IPopulationBuilder`1<T> WithAutoIncrement(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, TProperty start);
    public abstract virtual IPopulationBuilder`1<T> WithRandomValueFromRystem(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, bool useTheSameRandomValuesForTheSameType, Func`1<TProperty> valueCreator);
    public abstract virtual IPopulationBuilder`1<T> WithRandomValueFromRystemWithSpecificQueue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, string forcedValuesKey, Func`1<TProperty> valueCreator);
    public abstract virtual IPopulationBuilder`1<T> WithImplementation(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Type implementationType);
    public abstract virtual IPopulationBuilder`1<T> WithImplementation(Expression`1<Func`2<T, TProperty>> navigationPropertyPath);
    public abstract virtual List`1<T> Populate(int numberOfElements, int numberOfElementsWhenEnumerableIsFound);
}
[NullableContextAttribute("1")]
public interface System.Population.Random.IPopulationService {
    public abstract virtual object Construct(PopulationSettings settings, Type type, int numberOfEntities, string treeName, string name, List`1<Type> alreadyConstructedNonPrimitiveTypes);
}
[NullableContextAttribute("1")]
public interface System.Population.Random.IPopulationStrategy`1 {
    public abstract virtual List`1<T> Populate(PopulationSettings`1<T> _settings, int numberOfElements, int numberOfElementsWhenEnumerableIsFound);
}
[NullableContextAttribute("1")]
public interface System.Population.Random.IRandomPopulationService {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual bool IsValid(Type type);
    public abstract virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
}
[NullableContextAttribute("1")]
public interface System.Population.Random.IRegexService {
    public abstract virtual object GetRandomValue(Type type, String[] pattern);
}
internal class System.Population.Random.NumberPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.ObjectPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Population.Random.PopulationBuilder`1 : object {
    private IPopulationStrategy`1<T> _populationStrategy;
    private PopulationSettings`1<T> _settings;
    private static string LinqFirst;
    public PopulationBuilder`1(IPopulationStrategy`1<T> populationStrategy, PopulationSettings`1<T> settings);
    private static string GetNameOfProperty(Expression`1<Func`2<T, TProperty>> navigationPropertyPath);
    public sealed virtual IPopulationBuilder`1<T> WithPattern(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, String[] regex);
    public sealed virtual IPopulationBuilder`1<T> WithSpecificNumberOfElements(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, int numberOfElements);
    public sealed virtual IPopulationBuilder`1<T> WithValue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Func`1<TProperty> creator);
    public sealed virtual IPopulationBuilder`1<T> WithValue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Func`2<IServiceProvider, Task`1<TProperty>> valueRetriever);
    public sealed virtual IPopulationBuilder`1<T> WithRandomValue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Func`2<IServiceProvider, Task`1<IEnumerable`1<TProperty>>> valuesRetriever);
    public sealed virtual IPopulationBuilder`1<T> WithRandomValue(Expression`1<Func`2<T, IEnumerable`1<TProperty>>> navigationPropertyPath, Func`2<IServiceProvider, Task`1<IEnumerable`1<TProperty>>> valuesRetriever);
    public sealed virtual IPopulationBuilder`1<T> WithAutoIncrement(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, TProperty start);
    public sealed virtual IPopulationBuilder`1<T> WithRandomValueFromRystem(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, bool useTheSameRandomValuesForTheSameType, Func`1<TProperty> valueCreator);
    public sealed virtual IPopulationBuilder`1<T> WithRandomValueFromRystemWithSpecificQueue(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, string forcedValuesKey, Func`1<TProperty> valueCreator);
    private IPopulationBuilder`1<T> WithRandomValueFromRystem(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, bool useTheSameRandomValuesForTheSameType, Func`1<TProperty> valueCreator, string forcedKey);
    public sealed virtual IPopulationBuilder`1<T> WithImplementation(Expression`1<Func`2<T, TProperty>> navigationPropertyPath, Type implementationType);
    public sealed virtual IPopulationBuilder`1<T> WithImplementation(Expression`1<Func`2<T, TProperty>> navigationPropertyPath);
    public sealed virtual List`1<T> Populate(int numberOfElements, int numberOfElementsWhenEnumerableIsFound);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Population.Random.PopulationService : object {
    private IServiceProvider _serviceProvider;
    private IEnumerable`1<IRandomPopulationService> _randomPopulationServices;
    private IRegexService _regexService;
    private static Dictionary`2<string, int> s_indexes;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, List`1<object>> s_randomValuesFromRystem;
    public PopulationService(IServiceProvider serviceProvider, IEnumerable`1<IRandomPopulationService> randomPopulationServices, IRegexService regexService);
    private static PopulationService();
    private string GetRandomValueFromRystem(RandomPopulationFromRystemSettings randomSettings, PopulationSettings settings, Type type, string treeName);
    public sealed virtual object Construct(PopulationSettings settings, Type type, int numberOfEntities, string treeName, string name, List`1<Type> notCompletelyConstructedNonPrimitiveTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Population.Random.PopulationSettings : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, String[]> <RegexForValueCreation>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, Func`1<object>> <DelegatedMethodForValueCreation>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, Func`2<IServiceProvider, Task`1<object>>> <DelegatedMethodForValueRetrieving>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, Func`2<IServiceProvider, Task`1<IEnumerable`1<object>>>> <DelegatedMethodWithRandomForValueRetrieving>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <AutoIncrementations>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RandomPopulationFromRystemSettings> <RandomValueFromRystem>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <ImplementationForValueCreation>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <ForcedNumberOfElementsForEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfElements>k__BackingField;
    public Dictionary`2<string, String[]> RegexForValueCreation { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, Func`1<object>> DelegatedMethodForValueCreation { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, Func`2<IServiceProvider, Task`1<object>>> DelegatedMethodForValueRetrieving { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, Func`2<IServiceProvider, Task`1<IEnumerable`1<object>>>> DelegatedMethodWithRandomForValueRetrieving { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> AutoIncrementations { get; public set; }
    public Dictionary`2<string, RandomPopulationFromRystemSettings> RandomValueFromRystem { get; public set; }
    public Dictionary`2<string, Type> ImplementationForValueCreation { get; public set; }
    public Dictionary`2<string, int> ForcedNumberOfElementsForEnumerable { get; public set; }
    public int NumberOfElements { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, String[]> get_RegexForValueCreation();
    [CompilerGeneratedAttribute]
public void set_RegexForValueCreation(Dictionary`2<string, String[]> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`1<object>> get_DelegatedMethodForValueCreation();
    [CompilerGeneratedAttribute]
public void set_DelegatedMethodForValueCreation(Dictionary`2<string, Func`1<object>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`2<IServiceProvider, Task`1<object>>> get_DelegatedMethodForValueRetrieving();
    [CompilerGeneratedAttribute]
public void set_DelegatedMethodForValueRetrieving(Dictionary`2<string, Func`2<IServiceProvider, Task`1<object>>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`2<IServiceProvider, Task`1<IEnumerable`1<object>>>> get_DelegatedMethodWithRandomForValueRetrieving();
    [CompilerGeneratedAttribute]
public void set_DelegatedMethodWithRandomForValueRetrieving(Dictionary`2<string, Func`2<IServiceProvider, Task`1<IEnumerable`1<object>>>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_AutoIncrementations();
    [CompilerGeneratedAttribute]
public void set_AutoIncrementations(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, RandomPopulationFromRystemSettings> get_RandomValueFromRystem();
    [CompilerGeneratedAttribute]
public void set_RandomValueFromRystem(Dictionary`2<string, RandomPopulationFromRystemSettings> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Type> get_ImplementationForValueCreation();
    [CompilerGeneratedAttribute]
public void set_ImplementationForValueCreation(Dictionary`2<string, Type> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_ForcedNumberOfElementsForEnumerable();
    [CompilerGeneratedAttribute]
public void set_ForcedNumberOfElementsForEnumerable(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public int get_NumberOfElements();
    [CompilerGeneratedAttribute]
public void set_NumberOfElements(int value);
}
public class System.Population.Random.PopulationSettings`1 : PopulationSettings {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Population.Random.RandomPopulation`1 : object {
    private IPopulationStrategy`1<T> _strategy;
    private PopulationSettings`1<T> _settings;
    public RandomPopulation`1(IPopulationStrategy`1<T> strategy, PopulationSettings`1<T> settings);
    public sealed virtual IPopulationBuilder`1<T> Setup(PopulationSettings`1<T> settings);
    public sealed virtual List`1<T> Populate(int numberOfElements, int numberOfElementsWhenEnumerableIsFound);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class System.Population.Random.RandomPopulationFromRystemSettings : object {
    [CompilerGeneratedAttribute]
private bool <UseTheSameRandomValuesForTheSameType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StartingType>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<object> <Creator>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ForcedKey>k__BackingField;
    public bool UseTheSameRandomValuesForTheSameType { get; public set; }
    [RequiredMemberAttribute]
public Type StartingType { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> Creator { get; public set; }
    [NullableAttribute("2")]
public string ForcedKey { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseTheSameRandomValuesForTheSameType();
    [CompilerGeneratedAttribute]
public void set_UseTheSameRandomValuesForTheSameType(bool value);
    [CompilerGeneratedAttribute]
public Type get_StartingType();
    [CompilerGeneratedAttribute]
public void set_StartingType(Type value);
    [CompilerGeneratedAttribute]
public Func`1<object> get_Creator();
    [CompilerGeneratedAttribute]
public void set_Creator(Func`1<object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ForcedKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ForcedKey(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Population.Random.RandomPopulationOptions : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IPopulationService <PopulationService>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <NotAlreadyConstructedNonPrimitiveTypes>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Type Type { get; public set; }
    public IPopulationService PopulationService { get; public set; }
    public int NumberOfEntities { get; public set; }
    public string TreeName { get; public set; }
    public List`1<Type> NotAlreadyConstructedNonPrimitiveTypes { get; public set; }
    public RandomPopulationOptions(Type Type, IPopulationService PopulationService, int NumberOfEntities, string TreeName, List`1<Type> NotAlreadyConstructedNonPrimitiveTypes);
    [CompilerGeneratedAttribute]
protected RandomPopulationOptions(RandomPopulationOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(Type value);
    [CompilerGeneratedAttribute]
public IPopulationService get_PopulationService();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PopulationService(IPopulationService value);
    [CompilerGeneratedAttribute]
public int get_NumberOfEntities();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NumberOfEntities(int value);
    [CompilerGeneratedAttribute]
public string get_TreeName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TreeName(string value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_NotAlreadyConstructedNonPrimitiveTypes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NotAlreadyConstructedNonPrimitiveTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RandomPopulationOptions left, RandomPopulationOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RandomPopulationOptions left, RandomPopulationOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RandomPopulationOptions other);
    [CompilerGeneratedAttribute]
public virtual RandomPopulationOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Type& Type, IPopulationService& PopulationService, Int32& NumberOfEntities, String& TreeName, List`1& NotAlreadyConstructedNonPrimitiveTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Population.Random.RandomPopulationStrategy`1 : object {
    private IPopulationService _populationService;
    public RandomPopulationStrategy`1(IPopulationService populationService);
    public sealed virtual List`1<T> Populate(PopulationSettings`1<T> settings, int numberOfElements, int numberOfElementsWhenEnumerableIsFound);
}
internal class System.Population.Random.RangePopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.RegexService : object {
    [NullableContextAttribute("1")]
public sealed virtual object GetRandomValue(Type type, String[] pattern);
}
internal class System.Population.Random.StringPopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
internal class System.Population.Random.TimePopulationService : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    [NullableContextAttribute("1")]
public sealed virtual object GetValue(PopulationSettings settings, RandomPopulationOptions options);
    [NullableContextAttribute("1")]
public sealed virtual bool IsValid(Type type);
}
