[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDefaultSeparatorForDefaultKeyInterface(IServiceCollection services, string separator);
    [ExtensionAttribute]
public static IServiceCollection AddRepository(IServiceCollection services, Action`1<IRepositoryBuilder`2<T, TKey>> builder);
    [ExtensionAttribute]
public static IServiceCollection AddCommand(IServiceCollection services, Action`1<ICommandBuilder`2<T, TKey>> builder);
    [ExtensionAttribute]
public static IServiceCollection AddQuery(IServiceCollection services, Action`1<IQueryBuilder`2<T, TKey>> builder);
    [ExtensionAttribute]
public static RepositoryBusinessBuilder`2<T, TKey> AddBusinessForRepository(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection ScanBusinessForRepositoryFramework(IServiceCollection services, Assembly[] assemblies);
    [ExtensionAttribute]
public static IServiceCollection ScanBusinessForRepositoryFramework(IServiceCollection services);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddRepositoryAsync>d__7`2")]
[ExtensionAttribute]
public static Task`1<IServiceCollection> AddRepositoryAsync(IServiceCollection services, Func`2<IRepositoryBuilder`2<T, TKey>, ValueTask> builder);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddCommandAsync>d__8`2")]
[ExtensionAttribute]
public static Task`1<IServiceCollection> AddCommandAsync(IServiceCollection services, Func`2<ICommandBuilder`2<T, TKey>, ValueTask> builder);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions/<AddQueryAsync>d__9`2")]
[ExtensionAttribute]
public static Task`1<IServiceCollection> AddQueryAsync(IServiceCollection services, Func`2<IQueryBuilder`2<T, TKey>, ValueTask> builder);
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.Abstractions.IRepositoryExamples`2 {
    public T Entity { get; }
    public TKey Key { get; }
    public abstract virtual T get_Entity();
    public abstract virtual TKey get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.Abstractions.RepositoryExamples`2 : object {
    [CompilerGeneratedAttribute]
private T <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public T Entity { get; }
    public TKey Key { get; }
    public RepositoryExamples`2(T entity, TKey key);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Entity();
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.BatchOperation`2 : object {
    [CompilerGeneratedAttribute]
private CommandType <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [JsonPropertyNameAttribute("c")]
public CommandType Command { get; }
    [JsonPropertyNameAttribute("k")]
public TKey Key { get; }
    [NullableAttribute("2")]
[JsonPropertyNameAttribute("v")]
public T Value { get; }
    public BatchOperation`2(CommandType command, TKey key, T value);
    [CompilerGeneratedAttribute]
public CommandType get_Command();
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.BatchOperations`2 : object {
    [CompilerGeneratedAttribute]
private List`1<BatchOperation`2<T, TKey>> <Values>k__BackingField;
    [JsonPropertyNameAttribute("v")]
public List`1<BatchOperation`2<T, TKey>> Values { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<BatchOperation`2<T, TKey>> get_Values();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Values(List`1<BatchOperation`2<T, TKey>> value);
    public BatchOperations`2<T, TKey> AddInsert(TKey key, T value);
    public BatchOperations`2<T, TKey> AddUpdate(TKey key, T value);
    public BatchOperations`2<T, TKey> AddDelete(TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.BatchOperationsBuilder`2 : object {
    private BatchOperations`2<T, TKey> _batchOperations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICommandPattern`2<T, TKey> _command;
    internal BatchOperationsBuilder`2(ICommandPattern`2<T, TKey> command);
    public BatchOperationsBuilder`2<T, TKey> AddInsert(TKey key, T value);
    public BatchOperationsBuilder`2<T, TKey> AddUpdate(TKey key, T value);
    public BatchOperationsBuilder`2<T, TKey> AddDelete(TKey key);
    public IAsyncEnumerable`1<BatchResult`2<T, TKey>> ExecuteAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.BatchResult`2 : object {
    [CompilerGeneratedAttribute]
private CommandType <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private State`2<T, TKey> <State>k__BackingField;
    [JsonPropertyNameAttribute("c")]
public CommandType Command { get; }
    [JsonPropertyNameAttribute("k")]
public TKey Key { get; }
    [JsonPropertyNameAttribute("s")]
public State`2<T, TKey> State { get; }
    public BatchResult`2(CommandType command, TKey key, State`2<T, TKey> state);
    [CompilerGeneratedAttribute]
public CommandType get_Command();
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public State`2<T, TKey> get_State();
    public static BatchResult`2<T, TKey> CreateInsert(TKey key, State`2<T, TKey> state);
    public static BatchResult`2<T, TKey> CreateUpdate(TKey key, State`2<T, TKey> state);
    public static BatchResult`2<T, TKey> CreateDelete(TKey key, State`2<T, TKey> state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.Command`2 : object {
    private ICommandPattern`2<T, TKey> _command;
    private IFactory`1<ICommandPattern`2<T, TKey>> _commandFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IRepositoryBusinessManager`2<T, TKey> _businessManager;
    public Command`2(IFactory`1<ICommandPattern`2<T, TKey>> commandFactory, IRepositoryBusinessManager`2<T, TKey> businessManager);
    public void SetFactoryName(string name);
    internal Command`2<T, TKey> SetCommand(ICommandPattern`2<T, TKey> command);
    public sealed virtual Task`1<State`2<T, TKey>> InsertAsync(TKey key, T value, CancellationToken cancellationToken);
    public sealed virtual Task`1<State`2<T, TKey>> UpdateAsync(TKey key, T value, CancellationToken cancellationToken);
    public sealed virtual Task`1<State`2<T, TKey>> DeleteAsync(TKey key, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<BatchResult`2<T, TKey>> BatchAsync(BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class RepositoryFramework.CommandExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static BatchOperationsBuilder`2<T, TKey> CreateBatchOperation(ICommandPattern`2<T, TKey> command);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class RepositoryFramework.CommandFrameworkBuilder`2 : RepositoryBaseBuilder`6<T, TKey, ICommand`2<T, TKey>, Command`2<T, TKey>, ICommandPattern`2<T, TKey>, ICommandBuilder`2<T, TKey>> {
    public CommandFrameworkBuilder`2(IServiceCollection services);
}
public enum RepositoryFramework.CommandType : Enum {
    public int value__;
    public static CommandType Insert;
    public static CommandType Update;
    public static CommandType Delete;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RepositoryFramework.DefaultKeyExtensions : object {
    [ExtensionAttribute]
public static string AsString(T key);
    public static T Parse(string keyAsString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RepositoryFramework.DefaultOperations : object {
    public static string Count;
    public static string Sum;
    public static string Max;
    public static string Min;
    public static string Average;
}
public static class RepositoryFramework.Entity : object {
    [NullableContextAttribute("1")]
public static Entity`2<T, TKey> Default(T value, TKey key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class RepositoryFramework.Entity`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public TKey Key { get; public set; }
    public T Value { get; public set; }
    [JsonIgnoreAttribute]
public bool HasValue { get; }
    [JsonIgnoreAttribute]
public bool HasKey { get; }
    public Entity`2(T value, TKey key);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    public bool get_HasValue();
    public bool get_HasKey();
    [NullableContextAttribute("1")]
public static Entity`2<T, TKey> Default(T value, TKey key);
    [NullableContextAttribute("1")]
public State`2<T, TKey> ToOkState();
    [NullableContextAttribute("1")]
public State`2<T, TKey> ToNotOkState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.FilterExpression : object {
    [CompilerGeneratedAttribute]
private List`1<FilteringOperation> <Operations>k__BackingField;
    public static FilterExpression Empty { get; }
    public List`1<FilteringOperation> Operations { get; }
    [NullableAttribute("2")]
public LambdaExpression DefaultSelect { get; }
    [NullableAttribute("2")]
public LambdaExpression DefaultGroupBy { get; }
    public static FilterExpression get_Empty();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<FilteringOperation> get_Operations();
    private SerializableFilter ToSerializableQuery();
    public sealed virtual SerializableFilter Serialize();
    public sealed virtual string ToKey();
    public sealed virtual IFilterExpression Translate(IRepositoryFilterTranslator translator);
    internal IFilterExpression Where(LambdaExpression expression);
    internal IFilterExpression Take(int top);
    internal IFilterExpression Skip(int skip);
    internal IFilterExpression OrderBy(LambdaExpression expression);
    internal IFilterExpression OrderByDescending(LambdaExpression expression);
    internal IFilterExpression ThenBy(LambdaExpression expression);
    internal IFilterExpression ThenByDescending(LambdaExpression expression);
    internal IFilterExpression GroupBy(LambdaExpression expression);
    internal IFilterExpression Select(LambdaExpression expression);
    public sealed virtual IQueryable`1<T> Apply(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual IQueryable`1<TValue> Apply(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public sealed virtual IQueryable`1<T> Apply(IQueryable`1<T> queryable, FilterOperations operations);
    public sealed virtual IAsyncEnumerable`1<T> ApplyAsAsyncEnumerable(IEnumerable`1<T> enumerable, FilterOperations operations);
    public sealed virtual IAsyncEnumerable`1<T> ApplyAsAsyncEnumerable(IQueryable`1<T> queryable, FilterOperations operations);
    public sealed virtual IQueryable`1<object> ApplyAsSelect(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual IQueryable`1<object> ApplyAsSelect(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public sealed virtual IQueryable`1<object> ApplyAsSelect(IQueryable`1<T> queryable, FilterOperations operations);
    public sealed virtual IQueryable`1<IGrouping`2<object, T>> ApplyAsGroupBy(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual IQueryable`1<IGrouping`2<object, TValue>> ApplyAsGroupBy(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public sealed virtual IQueryable`1<IGrouping`2<object, T>> ApplyAsGroupBy(IQueryable`1<T> queryable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression GetFirstSelect();
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression get_DefaultSelect();
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression GetFirstGroupBy();
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression get_DefaultGroupBy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class RepositoryFramework.FilteringOperation : object {
    [CompilerGeneratedAttribute]
private FilterOperations <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FilterOperations Operation { get; public set; }
    protected FilteringOperation(FilterOperations Operation);
    [CompilerGeneratedAttribute]
protected FilteringOperation(FilteringOperation original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FilterOperations get_Operation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Operation(FilterOperations value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FilteringOperation left, FilteringOperation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FilteringOperation left, FilteringOperation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FilteringOperation other);
    [CompilerGeneratedAttribute]
public abstract virtual FilteringOperation <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FilterOperations& Operation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class RepositoryFramework.FilterOperationAsString : object {
    [CompilerGeneratedAttribute]
private FilterOperations <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [JsonPropertyNameAttribute("q")]
public FilterOperations Operation { get; public set; }
    [JsonPropertyNameAttribute("v")]
public string Value { get; public set; }
    public FilterOperationAsString(FilterOperations Operation, string Value);
    [CompilerGeneratedAttribute]
private FilterOperationAsString(FilterOperationAsString original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FilterOperations get_Operation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Operation(FilterOperations value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FilterOperationAsString left, FilterOperationAsString right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FilterOperationAsString left, FilterOperationAsString right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FilterOperationAsString other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public FilterOperationAsString <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FilterOperations& Operation, String& Value);
}
[FlagsAttribute]
public enum RepositoryFramework.FilterOperations : Enum {
    public int value__;
    public static FilterOperations Select;
    public static FilterOperations Where;
    public static FilterOperations Top;
    public static FilterOperations Skip;
    public static FilterOperations OrderBy;
    public static FilterOperations OrderByDescending;
    public static FilterOperations ThenBy;
    public static FilterOperations ThenByDescending;
    public static FilterOperations GroupBy;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.FilterTranslation`2 : object {
    [CompilerGeneratedAttribute]
private static FilterTranslation`2<T, TKey> <Instance>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, TranslationWrapper<T, TKey>> _translations;
    private static string First;
    private static string FirstReplacer;
    private static string FirstReplacerWithDot;
    public static FilterTranslation`2<T, TKey> Instance { get; }
    private static FilterTranslation`2();
    [CompilerGeneratedAttribute]
public static FilterTranslation`2<T, TKey> get_Instance();
    private static string VariableName(string prefix);
    private static string VariableForEnumerableName(string prefix);
    [NullableContextAttribute("2")]
public void With(Expression`1<Func`2<T, TProperty>> property, Expression`1<Func`2<TTranslated, TTranslatedProperty>> translatedProperty);
    [NullableContextAttribute("2")]
public void Setup();
    public sealed virtual IFilterExpression Transform(SerializableFilter serializableFilter);
}
public interface RepositoryFramework.ICommand`2 {
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.ICommandBuilder`2 {
}
public interface RepositoryFramework.ICommandPattern {
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.ICommandPattern`2 {
    public abstract virtual Task`1<State`2<T, TKey>> InsertAsync(TKey key, T value, CancellationToken cancellationToken);
    public abstract virtual Task`1<State`2<T, TKey>> UpdateAsync(TKey key, T value, CancellationToken cancellationToken);
    public abstract virtual Task`1<State`2<T, TKey>> DeleteAsync(TKey key, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<BatchResult`2<T, TKey>> BatchAsync(BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IDefaultKey {
    internal static string DefaultSeparator;
    private static IDefaultKey();
    public static void SetDefaultSeparator(string separator);
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IFilterExpression {
    public static FilterOperations DefaultOperations;
    public static IFilterExpression Empty { get; }
    public List`1<FilteringOperation> Operations { get; }
    [NullableAttribute("2")]
public LambdaExpression DefaultSelect { get; }
    [NullableAttribute("2")]
public LambdaExpression DefaultGroupBy { get; }
    public static IFilterExpression get_Empty();
    public abstract virtual List`1<FilteringOperation> get_Operations();
    public abstract virtual SerializableFilter Serialize();
    public abstract virtual string ToKey();
    public abstract virtual IFilterExpression Translate(IRepositoryFilterTranslator translator);
    public abstract virtual IQueryable`1<T> Apply(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public abstract virtual IQueryable`1<TValue> Apply(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public abstract virtual IQueryable`1<T> Apply(IQueryable`1<T> queryable, FilterOperations operations);
    public abstract virtual IAsyncEnumerable`1<T> ApplyAsAsyncEnumerable(IEnumerable`1<T> enumerable, FilterOperations operations);
    public abstract virtual IAsyncEnumerable`1<T> ApplyAsAsyncEnumerable(IQueryable`1<T> queryable, FilterOperations operations);
    public abstract virtual IQueryable`1<object> ApplyAsSelect(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public abstract virtual IQueryable`1<object> ApplyAsSelect(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public abstract virtual IQueryable`1<object> ApplyAsSelect(IQueryable`1<T> queryable, FilterOperations operations);
    public abstract virtual IQueryable`1<IGrouping`2<object, T>> ApplyAsGroupBy(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public abstract virtual IQueryable`1<IGrouping`2<object, TValue>> ApplyAsGroupBy(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public abstract virtual IQueryable`1<IGrouping`2<object, T>> ApplyAsGroupBy(IQueryable`1<T> queryable, FilterOperations operations);
    [NullableContextAttribute("2")]
public abstract virtual LambdaExpression GetFirstSelect();
    [NullableContextAttribute("2")]
public abstract virtual LambdaExpression get_DefaultSelect();
    [NullableContextAttribute("2")]
public abstract virtual LambdaExpression get_DefaultGroupBy();
    [NullableContextAttribute("2")]
public abstract virtual LambdaExpression GetFirstGroupBy();
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IKey {
    public abstract virtual string AsString();
    public static abstract virtual IKey Parse(string keyAsString);
    internal static string GetStringedValues(Object[] inputs);
}
public interface RepositoryFramework.IQuery`2 {
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IQueryBuilder`2 {
}
public interface RepositoryFramework.IQueryPattern {
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IQueryPattern`2 {
    public abstract virtual Task`1<State`2<T, TKey>> ExistAsync(TKey key, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetAsync(TKey key, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(IFilterExpression filter, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TProperty> OperationAsync(OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepository`2 {
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IRepositoryBaseBuilder`3 {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual QueryTranslationBuilder`4<T, TKey, TTranslated, TRepositoryBuilder> Translate();
    public abstract virtual RepositoryBusinessBuilder`2<T, TKey> AddBusiness(Nullable`1<ServiceLifetime> serviceLifetime);
    public abstract virtual void SetNotExposable();
    public abstract virtual void SetExposable(RepositoryMethods methods);
    public abstract virtual void SetOnlyQueryExposable();
    public abstract virtual void SetOnlyCommandExposable();
    public abstract virtual void SetExamples(T entity, TKey key);
    public abstract virtual RepositoryFrameworkService SetService();
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IRepositoryBaseBuilder`4 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task> AfterBuildAsync { get; public set; }
    [NullableAttribute("2")]
public Action AfterBuild { get; public set; }
    public abstract virtual TRepositoryBuilder SetStorageAndBuildOptions(Action`1<TStorageOptions> options, string name, ServiceLifetime serviceLifetime);
    public abstract virtual TRepositoryBuilder SetStorageWithOptions(Action`1<TStorageOptions> options, string name, ServiceLifetime serviceLifetime);
    public abstract virtual Task`1<TRepositoryBuilder> SetStorageAndBuildOptionsAsync(Action`1<TStorageOptions> options, string name, ServiceLifetime serviceLifetime);
    public abstract virtual TRepositoryBuilder SetStorage(string name, ServiceLifetime serviceLifetime);
    public abstract virtual Func`1<Task> get_AfterBuildAsync();
    public abstract virtual void set_AfterBuildAsync(Func`1<Task> value);
    [NullableContextAttribute("2")]
public abstract virtual Action get_AfterBuild();
    [NullableContextAttribute("2")]
public abstract virtual void set_AfterBuild(Action value);
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IRepositoryBuilder`2 {
}
public interface RepositoryFramework.IRepositoryBusiness {
    public int Priority { get; }
    public abstract virtual int get_Priority();
}
public interface RepositoryFramework.IRepositoryBusinessAfterBatch`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<BatchResult`2<T, TKey>> AfterBatchAsync(BatchResult`2<T, TKey> result, BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessAfterDelete`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> AfterDeleteAsync(State`2<T, TKey> state, TKey key, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessAfterExist`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> AfterExistAsync(State`2<T, TKey> response, TKey key, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessAfterGet`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<T> AfterGetAsync(T value, TKey key, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessAfterInsert`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> AfterInsertAsync(State`2<T, TKey> state, Entity`2<T, TKey> entity, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessAfterOperation`2 {
    [NullableContextAttribute("1")]
public abstract virtual ValueTask`1<TProperty> AfterOperationAsync(TProperty result, OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessAfterQuery`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<Entity`2<T, TKey>> AfterQueryAsync(Entity`2<T, TKey> entity, IFilterExpression filter, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessAfterUpdate`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> AfterUpdateAsync(State`2<T, TKey> state, Entity`2<T, TKey> entity, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeBatch`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<BatchOperations`2<T, TKey>> BeforeBatchAsync(BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeDelete`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> BeforeDeleteAsync(TKey key, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeExist`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> BeforeExistAsync(TKey key, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeGet`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> BeforeGetAsync(TKey key, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeInsert`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> BeforeInsertAsync(Entity`2<T, TKey> entity, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeOperation`2 {
    [NullableContextAttribute("1")]
public abstract virtual ValueTask`1<ValueTuple`2<OperationType`1<TProperty>, IFilterExpression>> BeforeOperationAsync(OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeQuery`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<IFilterExpression> BeforeQueryAsync(IFilterExpression filter, CancellationToken cancellationToken);
}
public interface RepositoryFramework.IRepositoryBusinessBeforeUpdate`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<State`2<T, TKey>> BeforeUpdateAsync(Entity`2<T, TKey> entity, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IRepositoryBusinessManager`2 {
    public bool HasBusinessBeforeInsert { get; }
    public bool HasBusinessAfterInsert { get; }
    public bool HasBusinessBeforeUpdate { get; }
    public bool HasBusinessAfterUpdate { get; }
    public bool HasBusinessBeforeDelete { get; }
    public bool HasBusinessAfterDelete { get; }
    public bool HasBusinessBeforeBatch { get; }
    public bool HasBusinessAfterBatch { get; }
    public bool HasBusinessBeforeGet { get; }
    public bool HasBusinessAfterGet { get; }
    public bool HasBusinessBeforeExist { get; }
    public bool HasBusinessAfterExist { get; }
    public bool HasBusinessBeforeQuery { get; }
    public bool HasBusinessAfterQuery { get; }
    public bool HasBusinessBeforeOperation { get; }
    public bool HasBusinessAfterOperation { get; }
    public abstract virtual bool get_HasBusinessBeforeInsert();
    public abstract virtual bool get_HasBusinessAfterInsert();
    public abstract virtual bool get_HasBusinessBeforeUpdate();
    public abstract virtual bool get_HasBusinessAfterUpdate();
    public abstract virtual bool get_HasBusinessBeforeDelete();
    public abstract virtual bool get_HasBusinessAfterDelete();
    public abstract virtual bool get_HasBusinessBeforeBatch();
    public abstract virtual bool get_HasBusinessAfterBatch();
    public abstract virtual bool get_HasBusinessBeforeGet();
    public abstract virtual bool get_HasBusinessAfterGet();
    public abstract virtual bool get_HasBusinessBeforeExist();
    public abstract virtual bool get_HasBusinessAfterExist();
    public abstract virtual bool get_HasBusinessBeforeQuery();
    public abstract virtual bool get_HasBusinessAfterQuery();
    public abstract virtual bool get_HasBusinessBeforeOperation();
    public abstract virtual bool get_HasBusinessAfterOperation();
    public abstract virtual Task`1<State`2<T, TKey>> InsertAsync(ICommandPattern`2<T, TKey> command, TKey key, T value, CancellationToken cancellationToken);
    public abstract virtual Task`1<State`2<T, TKey>> UpdateAsync(ICommandPattern`2<T, TKey> command, TKey key, T value, CancellationToken cancellationToken);
    public abstract virtual Task`1<State`2<T, TKey>> DeleteAsync(ICommandPattern`2<T, TKey> command, TKey key, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<BatchResult`2<T, TKey>> BatchAsync(ICommandPattern`2<T, TKey> command, BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
    public abstract virtual Task`1<State`2<T, TKey>> ExistAsync(IQueryPattern`2<T, TKey> query, TKey key, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetAsync(IQueryPattern`2<T, TKey> query, TKey key, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(IQueryPattern`2<T, TKey> queryPattern, IFilterExpression filter, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TProperty> OperationAsync(IQueryPattern`2<T, TKey> queryPattern, OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IRepositoryFilterTranslator {
    public abstract virtual IFilterExpression Transform(SerializableFilter serializableFilter);
}
public interface RepositoryFramework.IRepositoryFilterTranslator`2 {
}
[NullableContextAttribute("2")]
public interface RepositoryFramework.IRepositoryMapper`3 {
    public abstract virtual T Map(TEntityModel entity);
    public abstract virtual TEntityModel Map(T entity, TKey key);
    public abstract virtual TKey RetrieveKey(TEntityModel entity);
    [NullableContextAttribute("1")]
public abstract virtual Expression`1<Func`2<TEntityModel, bool>> FindById(TKey key);
}
public interface RepositoryFramework.IRepositoryPattern {
}
public interface RepositoryFramework.IRepositoryPattern`2 {
}
public class RepositoryFramework.Key`1 : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private T1 <Primary>k__BackingField;
    [NullableAttribute("1")]
public T1 Primary { get; public set; }
    [NullableContextAttribute("1")]
public Key`1(T1 Primary);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public T1 get_Primary();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Primary(T1 value);
    [NullableContextAttribute("1")]
public static override IKey Parse(string keyAsString);
    [NullableContextAttribute("1")]
public sealed virtual string AsString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Key`1<T1> left, Key`1<T1> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Key`1<T1> left, Key`1<T1> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Key`1<T1> other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(T1& Primary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.Key`2 : ValueType {
    [CompilerGeneratedAttribute]
private T1 <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Secondary>k__BackingField;
    public T1 Primary { get; public set; }
    public T2 Secondary { get; public set; }
    public Key`2(T1 Primary, T2 Secondary);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T1 get_Primary();
    [CompilerGeneratedAttribute]
public void set_Primary(T1 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T2 get_Secondary();
    [CompilerGeneratedAttribute]
public void set_Secondary(T2 value);
    public static override IKey Parse(string keyAsString);
    public sealed virtual string AsString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Key`2<T1, T2> left, Key`2<T1, T2> right);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Key`2<T1, T2> left, Key`2<T1, T2> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Key`2<T1, T2> other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(T1& Primary, T2& Secondary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.Key`3 : ValueType {
    [CompilerGeneratedAttribute]
private T1 <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Secondary>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Tertiary>k__BackingField;
    public T1 Primary { get; public set; }
    public T2 Secondary { get; public set; }
    public T3 Tertiary { get; public set; }
    public Key`3(T1 Primary, T2 Secondary, T3 Tertiary);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T1 get_Primary();
    [CompilerGeneratedAttribute]
public void set_Primary(T1 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T2 get_Secondary();
    [CompilerGeneratedAttribute]
public void set_Secondary(T2 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T3 get_Tertiary();
    [CompilerGeneratedAttribute]
public void set_Tertiary(T3 value);
    public static override IKey Parse(string keyAsString);
    public sealed virtual string AsString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Key`3<T1, T2, T3> left, Key`3<T1, T2, T3> right);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Key`3<T1, T2, T3> left, Key`3<T1, T2, T3> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Key`3<T1, T2, T3> other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(T1& Primary, T2& Secondary, T3& Tertiary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.Key`4 : ValueType {
    [CompilerGeneratedAttribute]
private T1 <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Secondary>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Tertiary>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Quaternary>k__BackingField;
    public T1 Primary { get; public set; }
    public T2 Secondary { get; public set; }
    public T3 Tertiary { get; public set; }
    public T4 Quaternary { get; public set; }
    public Key`4(T1 Primary, T2 Secondary, T3 Tertiary, T4 Quaternary);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T1 get_Primary();
    [CompilerGeneratedAttribute]
public void set_Primary(T1 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T2 get_Secondary();
    [CompilerGeneratedAttribute]
public void set_Secondary(T2 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T3 get_Tertiary();
    [CompilerGeneratedAttribute]
public void set_Tertiary(T3 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T4 get_Quaternary();
    [CompilerGeneratedAttribute]
public void set_Quaternary(T4 value);
    public static override IKey Parse(string keyAsString);
    public sealed virtual string AsString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Key`4<T1, T2, T3, T4> left, Key`4<T1, T2, T3, T4> right);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Key`4<T1, T2, T3, T4> left, Key`4<T1, T2, T3, T4> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Key`4<T1, T2, T3, T4> other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(T1& Primary, T2& Secondary, T3& Tertiary, T4& Quaternary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.Key`5 : ValueType {
    [CompilerGeneratedAttribute]
private T1 <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Secondary>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Tertiary>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Quaternary>k__BackingField;
    [CompilerGeneratedAttribute]
private T5 <Quinary>k__BackingField;
    public T1 Primary { get; public set; }
    public T2 Secondary { get; public set; }
    public T3 Tertiary { get; public set; }
    public T4 Quaternary { get; public set; }
    public T5 Quinary { get; public set; }
    public Key`5(T1 Primary, T2 Secondary, T3 Tertiary, T4 Quaternary, T5 Quinary);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T1 get_Primary();
    [CompilerGeneratedAttribute]
public void set_Primary(T1 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T2 get_Secondary();
    [CompilerGeneratedAttribute]
public void set_Secondary(T2 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T3 get_Tertiary();
    [CompilerGeneratedAttribute]
public void set_Tertiary(T3 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T4 get_Quaternary();
    [CompilerGeneratedAttribute]
public void set_Quaternary(T4 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T5 get_Quinary();
    [CompilerGeneratedAttribute]
public void set_Quinary(T5 value);
    public static override IKey Parse(string keyAsString);
    public sealed virtual string AsString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Key`5<T1, T2, T3, T4, T5> left, Key`5<T1, T2, T3, T4, T5> right);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Key`5<T1, T2, T3, T4, T5> left, Key`5<T1, T2, T3, T4, T5> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Key`5<T1, T2, T3, T4, T5> other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(T1& Primary, T2& Secondary, T3& Tertiary, T4& Quaternary, T5& Quinary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.KeySettings`1 : object {
    [CompilerGeneratedAttribute]
private static KeySettings`1<TKey> <Instance>k__BackingField;
    [NullableAttribute("0")]
private CurrentType<TKey> _type;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<string, TKey> s_iKeyParser;
    public static KeySettings`1<TKey> Instance { get; }
    public bool IsJsonable { get; }
    private static KeySettings`1();
    [CompilerGeneratedAttribute]
public static KeySettings`1<TKey> get_Instance();
    public bool get_IsJsonable();
    [NullableContextAttribute("0")]
private static CurrentType<TKey> Calculate();
    public string AsString(TKey key);
    public TKey Parse(string key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class RepositoryFramework.LambdaFilterOperation : FilteringOperation {
    [CompilerGeneratedAttribute]
private LambdaExpression <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public LambdaExpression Expression { get; public set; }
    public LambdaFilterOperation(FilterOperations Operation, LambdaExpression Expression);
    [CompilerGeneratedAttribute]
protected LambdaFilterOperation(LambdaFilterOperation original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public LambdaExpression get_Expression();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Expression(LambdaExpression value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(LambdaFilterOperation left, LambdaFilterOperation right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(LambdaFilterOperation left, LambdaFilterOperation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FilteringOperation other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(LambdaFilterOperation other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override LambdaFilterOperation <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FilterOperations& Operation, LambdaExpression& Expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.MultipleFilterExpression : object {
    [CompilerGeneratedAttribute]
private List`1<FilteringOperation> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, FilterExpression> <Filters>k__BackingField;
    public List`1<FilteringOperation> Operations { get; }
    public Dictionary`2<string, FilterExpression> Filters { get; }
    [NullableAttribute("2")]
public LambdaExpression DefaultSelect { get; }
    [NullableAttribute("2")]
public LambdaExpression DefaultGroupBy { get; }
    public IFilterExpression FilterByType();
    public IFilterExpression FilterByDefault();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<FilteringOperation> get_Operations();
    public sealed virtual SerializableFilter Serialize();
    public sealed virtual string ToKey();
    public sealed virtual IFilterExpression Translate(IRepositoryFilterTranslator translator);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, FilterExpression> get_Filters();
    public sealed virtual IQueryable`1<T> Apply(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual IQueryable`1<TValue> Apply(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public sealed virtual IQueryable`1<T> Apply(IQueryable`1<T> queryable, FilterOperations operations);
    public sealed virtual IAsyncEnumerable`1<T> ApplyAsAsyncEnumerable(IEnumerable`1<T> enumerable, FilterOperations operations);
    public sealed virtual IAsyncEnumerable`1<T> ApplyAsAsyncEnumerable(IQueryable`1<T> queryable, FilterOperations operations);
    public sealed virtual IQueryable`1<object> ApplyAsSelect(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual IQueryable`1<object> ApplyAsSelect(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public sealed virtual IQueryable`1<object> ApplyAsSelect(IQueryable`1<T> queryable, FilterOperations operations);
    public sealed virtual IQueryable`1<IGrouping`2<object, T>> ApplyAsGroupBy(IEnumerable`1<T> enumerable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual IQueryable`1<IGrouping`2<object, TValue>> ApplyAsGroupBy(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary, FilterOperations operations);
    public sealed virtual IQueryable`1<IGrouping`2<object, T>> ApplyAsGroupBy(IQueryable`1<T> queryable, FilterOperations operations);
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression GetFirstSelect();
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression get_DefaultSelect();
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression GetFirstGroupBy();
    [NullableContextAttribute("2")]
public sealed virtual LambdaExpression get_DefaultGroupBy();
}
[ExtensionAttribute]
public static class RepositoryFramework.NavigationKeyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static PropertyInfo GetPropertyBasedOnKey(Expression`1<Func`2<T, TKey>> navigationKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.OperationType`1 : object {
    [CompilerGeneratedAttribute]
private static OperationType`1<TProperty> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private static OperationType`1<TProperty> <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private static OperationType`1<TProperty> <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private static OperationType`1<TProperty> <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private static OperationType`1<TProperty> <Average>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static Type s_type;
    public static OperationType`1<TProperty> Count { get; }
    public static OperationType`1<TProperty> Sum { get; }
    public static OperationType`1<TProperty> Max { get; }
    public static OperationType`1<TProperty> Min { get; }
    public static OperationType`1<TProperty> Average { get; }
    public string Name { get; }
    public Type Type { get; }
    public OperationType`1(string operationName);
    private static OperationType`1();
    [CompilerGeneratedAttribute]
public static OperationType`1<TProperty> get_Count();
    [CompilerGeneratedAttribute]
public static OperationType`1<TProperty> get_Sum();
    [CompilerGeneratedAttribute]
public static OperationType`1<TProperty> get_Max();
    [CompilerGeneratedAttribute]
public static OperationType`1<TProperty> get_Min();
    [CompilerGeneratedAttribute]
public static OperationType`1<TProperty> get_Average();
    [CompilerGeneratedAttribute]
public string get_Name();
    public Type get_Type();
    public ValueTask`1<TProperty> ExecuteDefaultOperationAsync(Delegate count, Delegate sum, Delegate max, Delegate min, Delegate average);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.Page`2 : object {
    [CompilerGeneratedAttribute]
private List`1<Entity`2<T, TKey>> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public List`1<Entity`2<T, TKey>> Items { get; public set; }
    public long TotalCount { get; public set; }
    public long Pages { get; public set; }
    public Page`2(List`1<Entity`2<T, TKey>> Items, long TotalCount, long Pages);
    [CompilerGeneratedAttribute]
protected Page`2(Page`2<T, TKey> original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public List`1<Entity`2<T, TKey>> get_Items();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Items(List`1<Entity`2<T, TKey>> value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalCount(long value);
    [CompilerGeneratedAttribute]
public long get_Pages();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Pages(long value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Page`2<T, TKey> left, Page`2<T, TKey> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Page`2<T, TKey> left, Page`2<T, TKey> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(Page`2<T, TKey> other);
    [CompilerGeneratedAttribute]
public virtual Page`2<T, TKey> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(List`1& Items, Int64& TotalCount, Int64& Pages);
}
public enum RepositoryFramework.PatternType : Enum {
    public int value__;
    public static PatternType Repository;
    public static PatternType Query;
    public static PatternType Command;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.PrimitiveMapper : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <FromNameToAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <FromAssemblyQualifiedNameToName>k__BackingField;
    [CompilerGeneratedAttribute]
private static PrimitiveMapper <Instance>k__BackingField;
    public Dictionary`2<string, string> FromNameToAssemblyQualifiedName { get; }
    public Dictionary`2<string, string> FromAssemblyQualifiedNameToName { get; }
    public static PrimitiveMapper Instance { get; }
    private static PrimitiveMapper();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_FromNameToAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_FromAssemblyQualifiedNameToName();
    [CompilerGeneratedAttribute]
public static PrimitiveMapper get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.Query`2 : object {
    private IQueryPattern`2<T, TKey> _query;
    private IFactory`1<IQueryPattern`2<T, TKey>> _queryFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IRepositoryBusinessManager`2<T, TKey> _businessManager;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IRepositoryFilterTranslator`2<T, TKey> _translator;
    public Query`2(IFactory`1<IQueryPattern`2<T, TKey>> queryFactory, IRepositoryBusinessManager`2<T, TKey> businessManager, IRepositoryFilterTranslator`2<T, TKey> translator);
    public sealed virtual void SetFactoryName(string name);
    internal Query`2<T, TKey> SetQuery(IQueryPattern`2<T, TKey> query);
    public sealed virtual Task`1<State`2<T, TKey>> ExistAsync(TKey key, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> GetAsync(TKey key, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(IFilterExpression filter, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<TProperty> OperationAsync(OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.QueryBuilder`2 : object {
    private IQueryPattern`2<T, TKey> _query;
    private FilterExpression _operations;
    internal QueryBuilder`2(IQueryPattern`2<T, TKey> query);
    public QueryBuilder`2<T, TKey> Where(Expression`1<Func`2<T, bool>> predicate);
    public QueryBuilder`2<T, TKey> Take(int top);
    public QueryBuilder`2<T, TKey> Skip(int skip);
    public QueryBuilder`2<T, TKey> OrderBy(Expression`1<Func`2<T, object>> predicate);
    public QueryBuilder`2<T, TKey> OrderBy(Expression`1<Func`2<T, TProperty>> predicate);
    public QueryBuilder`2<T, TKey> OrderByDescending(Expression`1<Func`2<T, object>> predicate);
    public QueryBuilder`2<T, TKey> OrderByDescending(Expression`1<Func`2<T, TProperty>> predicate);
    public QueryBuilder`2<T, TKey> ThenBy(Expression`1<Func`2<T, object>> predicate);
    public QueryBuilder`2<T, TKey> ThenBy(Expression`1<Func`2<T, TProperty>> predicate);
    public QueryBuilder`2<T, TKey> ThenByDescending(Expression`1<Func`2<T, object>> predicate);
    public QueryBuilder`2<T, TKey> ThenByDescending(Expression`1<Func`2<T, TProperty>> predicate);
    public IAsyncEnumerable`1<IAsyncGrouping`2<TProperty, Entity`2<T, TKey>>> GroupByAsync(Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public ValueTask`1<Entity`2<T, TKey>> FirstOrDefaultAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public ValueTask`1<Entity`2<T, TKey>> FirstAsync(Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public Task`1<Page`2<T, TKey>> PageAsync(int page, int pageSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.QueryBuilder`2/<PageInternalAsync>d__19")]
private Task`1<Page`2<T, TKey>> PageInternalAsync(int page, int pageSize, CancellationToken cancellationToken);
    public ValueTask`1<List`1<Entity`2<T, TKey>>> ToListAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.QueryBuilder`2/<ToListAsEntityAsync>d__21")]
public ValueTask`1<List`1<T>> ToListAsEntityAsync(CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("RepositoryFramework.QueryBuilder`2/<QueryAsEntityAsync>d__22")]
public IAsyncEnumerable`1<T> QueryAsEntityAsync(CancellationToken cancellationToken);
    public IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(CancellationToken cancellationToken);
    public ValueTask`1<TProperty> OperationAsync(OperationType`1<TProperty> operation, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<long> CountAsync(CancellationToken cancellationToken);
    public ValueTask`1<TProperty> SumAsync(Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    public ValueTask`1<TProperty> AverageAsync(Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    public ValueTask`1<TProperty> MaxAsync(Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    public ValueTask`1<TProperty> MinAsync(Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class RepositoryFramework.QueryFrameworkBuilder`2 : RepositoryBaseBuilder`6<T, TKey, IQuery`2<T, TKey>, Query`2<T, TKey>, IQueryPattern`2<T, TKey>, IQueryBuilder`2<T, TKey>> {
    public QueryFrameworkBuilder`2(IServiceCollection services);
}
public class RepositoryFramework.QueryResponse`1 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IAsyncEnumerable`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTask`1<decimal> <NumericResponse>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("1")]
public IAsyncEnumerable`1<T> Items { get; public set; }
    public ValueTask`1<decimal> NumericResponse { get; public set; }
    public QueryResponse`1(IAsyncEnumerable`1<T> Items, ValueTask`1<decimal> NumericResponse);
    [NullableContextAttribute("1")]
public QueryResponse`1(IAsyncEnumerable`1<T> items);
    public QueryResponse`1(ValueTask`1<decimal> numericResponse);
    [CompilerGeneratedAttribute]
private QueryResponse`1(QueryResponse`1<T> original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IAsyncEnumerable`1<T> get_Items();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Items(IAsyncEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public ValueTask`1<decimal> get_NumericResponse();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NumericResponse(ValueTask`1<decimal> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(QueryResponse`1<T> left, QueryResponse`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(QueryResponse`1<T> left, QueryResponse`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(QueryResponse`1<T> other);
    [CompilerGeneratedAttribute]
public QueryResponse`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IAsyncEnumerable`1& Items, ValueTask`1& NumericResponse);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.QueryTranslationBuilder`4 : object {
    [CompilerGeneratedAttribute]
private TBuilder <Builder>k__BackingField;
    public TBuilder Builder { get; }
    public IServiceCollection Services { get; }
    public QueryTranslationBuilder`4(TBuilder builder);
    [CompilerGeneratedAttribute]
public TBuilder get_Builder();
    public IServiceCollection get_Services();
    public QueryTranslationBuilder`4<T, TKey, TTranslated, TBuilder> WithKey(Expression`1<Func`2<TKey, TProperty>> property, Expression`1<Func`2<TTranslated, TTranslatedProperty>> translatedProperty);
    public QueryTranslationBuilder`4<T, TKey, TTranslated, TBuilder> With(Expression`1<Func`2<T, TProperty>> property, Expression`1<Func`2<TTranslated, TTranslatedProperty>> translatedProperty);
    public QueryTranslationBuilder`4<T, TKey, TTranslated, TBuilder> WithSamePorpertiesName();
    public QueryTranslationBuilder`4<T, TKey, TFurtherTranslated, TBuilder> AndTranslate();
}
public enum RepositoryFramework.QueryType : Enum {
    public int value__;
    public static QueryType Exist;
    public static QueryType Get;
    public static QueryType Query;
    public static QueryType Operation;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.Repository`2 : object {
    private Lazy`1<Query`2<T, TKey>> _query;
    private Lazy`1<Command`2<T, TKey>> _command;
    private IFactory`1<IRepositoryPattern`2<T, TKey>> _repositoryFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IRepositoryBusinessManager`2<T, TKey> _businessManager;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IRepositoryFilterTranslator`2<T, TKey> _translator;
    public Repository`2(IFactory`1<IRepositoryPattern`2<T, TKey>> repositoryFactory, IRepositoryBusinessManager`2<T, TKey> businessManager, IRepositoryFilterTranslator`2<T, TKey> translator);
    public sealed virtual void SetFactoryName(string name);
    public sealed virtual Task`1<State`2<T, TKey>> ExistAsync(TKey key, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> GetAsync(TKey key, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(IFilterExpression filter, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<TProperty> OperationAsync(OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
    public sealed virtual Task`1<State`2<T, TKey>> InsertAsync(TKey key, T value, CancellationToken cancellationToken);
    public sealed virtual Task`1<State`2<T, TKey>> UpdateAsync(TKey key, T value, CancellationToken cancellationToken);
    public sealed virtual Task`1<State`2<T, TKey>> DeleteAsync(TKey key, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<BatchResult`2<T, TKey>> BatchAsync(BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class RepositoryFramework.RepositoryBaseBuilder`6 : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    private string _currentName;
    private PatternType _currentPatternType;
    private ServiceLifetime _serviceLifetime;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<Task> <AfterBuildAsync>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action <AfterBuild>k__BackingField;
    public IServiceCollection Services { get; }
    private TRepositoryBuilder Builder { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task> AfterBuildAsync { get; public set; }
    [NullableAttribute("2")]
public Action AfterBuild { get; public set; }
    private protected RepositoryBaseBuilder`6(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    private TRepositoryBuilder get_Builder();
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<Task> get_AfterBuildAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AfterBuildAsync(Func`1<Task> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Action get_AfterBuild();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_AfterBuild(Action value);
    private void SetDefaultFrameworkBeforeStorage(string name, ServiceLifetime serviceLifetime);
    [AsyncStateMachineAttribute("RepositoryFramework.RepositoryBaseBuilder`6/<SetStorageAndBuildOptionsAsync>d__18`3")]
public sealed virtual Task`1<TRepositoryBuilder> SetStorageAndBuildOptionsAsync(Action`1<TStorageOptions> options, string name, ServiceLifetime serviceLifetime);
    public sealed virtual TRepositoryBuilder SetStorageAndBuildOptions(Action`1<TStorageOptions> options, string name, ServiceLifetime serviceLifetime);
    public sealed virtual TRepositoryBuilder SetStorageWithOptions(Action`1<TStorageOptions> options, string name, ServiceLifetime serviceLifetime);
    public sealed virtual TRepositoryBuilder SetStorage(string name, ServiceLifetime serviceLifetime);
    public sealed virtual RepositoryFrameworkService SetService();
    public sealed virtual RepositoryBusinessBuilder`2<T, TKey> AddBusiness(Nullable`1<ServiceLifetime> serviceLifetime);
    public sealed virtual QueryTranslationBuilder`4<T, TKey, TTranslated, TRepositoryBuilder> Translate();
    public sealed virtual void SetNotExposable();
    public sealed virtual void SetExposable(RepositoryMethods methods);
    public sealed virtual void SetOnlyQueryExposable();
    public sealed virtual void SetOnlyCommandExposable();
    public sealed virtual void SetExamples(T entity, TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.RepositoryBusinessBuilder`2 : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceLifetime <ServiceLifetime>k__BackingField;
    public IServiceCollection Services { get; }
    public ServiceLifetime ServiceLifetime { get; }
    public RepositoryBusinessBuilder`2(IServiceCollection services, Nullable`1<ServiceLifetime> serviceLifetime);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public ServiceLifetime get_ServiceLifetime();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeInsert();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterInsert();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeUpdate();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterUpdate();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeDelete();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterDelete();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeBatch();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterBatch();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeGet();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterGet();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeExist();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterExist();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeQuery();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterQuery();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessBeforeOperation();
    public RepositoryBusinessBuilder`2<T, TKey> AddBusinessAfterOperation();
    private RepositoryBusinessBuilder`2<T, TKey> AddBusiness();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.RepositoryBusinessManager`2 : object {
    private static List`1<IRepositoryBusinessBeforeInsert`2<T, TKey>> s_defaultBeforeInserted;
    private static List`1<IRepositoryBusinessAfterInsert`2<T, TKey>> s_defaultAfterInserted;
    private static List`1<IRepositoryBusinessBeforeUpdate`2<T, TKey>> s_defaultBeforeUpdated;
    private static List`1<IRepositoryBusinessAfterUpdate`2<T, TKey>> s_defaultAfterUpdated;
    private static List`1<IRepositoryBusinessBeforeDelete`2<T, TKey>> s_defaultBeforeDeleted;
    private static List`1<IRepositoryBusinessAfterDelete`2<T, TKey>> s_defaultAfterDeleted;
    private static List`1<IRepositoryBusinessBeforeBatch`2<T, TKey>> s_defaultBeforeBatched;
    private static List`1<IRepositoryBusinessAfterBatch`2<T, TKey>> s_defaultAfterBatched;
    private static List`1<IRepositoryBusinessBeforeGet`2<T, TKey>> s_defaultBeforeGotten;
    private static List`1<IRepositoryBusinessAfterGet`2<T, TKey>> s_defaultAfterGotten;
    private static List`1<IRepositoryBusinessBeforeExist`2<T, TKey>> s_defaultBeforeExisted;
    private static List`1<IRepositoryBusinessAfterExist`2<T, TKey>> s_defaultAfterExisted;
    private static List`1<IRepositoryBusinessBeforeQuery`2<T, TKey>> s_defaultBeforeQueried;
    private static List`1<IRepositoryBusinessAfterQuery`2<T, TKey>> s_defaultAfterQueried;
    private static List`1<IRepositoryBusinessBeforeOperation`2<T, TKey>> s_defaultBeforeOperation;
    private static List`1<IRepositoryBusinessAfterOperation`2<T, TKey>> s_defaultAfterOperation;
    private IEnumerable`1<IRepositoryBusinessBeforeInsert`2<T, TKey>> _beforeInserted;
    private IEnumerable`1<IRepositoryBusinessAfterInsert`2<T, TKey>> _afterInserted;
    private IEnumerable`1<IRepositoryBusinessBeforeUpdate`2<T, TKey>> _beforeUpdated;
    private IEnumerable`1<IRepositoryBusinessAfterUpdate`2<T, TKey>> _afterUpdated;
    private IEnumerable`1<IRepositoryBusinessBeforeDelete`2<T, TKey>> _beforeDeleted;
    private IEnumerable`1<IRepositoryBusinessAfterDelete`2<T, TKey>> _afterDeleted;
    private IEnumerable`1<IRepositoryBusinessBeforeBatch`2<T, TKey>> _beforeBatched;
    private IEnumerable`1<IRepositoryBusinessAfterBatch`2<T, TKey>> _afterBatched;
    private IEnumerable`1<IRepositoryBusinessBeforeGet`2<T, TKey>> _beforeGotten;
    private IEnumerable`1<IRepositoryBusinessAfterGet`2<T, TKey>> _afterGotten;
    private IEnumerable`1<IRepositoryBusinessBeforeExist`2<T, TKey>> _beforeExisted;
    private IEnumerable`1<IRepositoryBusinessAfterExist`2<T, TKey>> _afterExisted;
    private IEnumerable`1<IRepositoryBusinessBeforeQuery`2<T, TKey>> _beforeQueried;
    private IEnumerable`1<IRepositoryBusinessAfterQuery`2<T, TKey>> _afterQueried;
    private IEnumerable`1<IRepositoryBusinessBeforeOperation`2<T, TKey>> _beforeOperation;
    private IEnumerable`1<IRepositoryBusinessAfterOperation`2<T, TKey>> _afterOperation;
    public bool HasBusinessBeforeInsert { get; }
    public bool HasBusinessAfterInsert { get; }
    public bool HasBusinessBeforeUpdate { get; }
    public bool HasBusinessAfterUpdate { get; }
    public bool HasBusinessBeforeDelete { get; }
    public bool HasBusinessAfterDelete { get; }
    public bool HasBusinessBeforeBatch { get; }
    public bool HasBusinessAfterBatch { get; }
    public bool HasBusinessBeforeGet { get; }
    public bool HasBusinessAfterGet { get; }
    public bool HasBusinessBeforeExist { get; }
    public bool HasBusinessAfterExist { get; }
    public bool HasBusinessBeforeQuery { get; }
    public bool HasBusinessAfterQuery { get; }
    public bool HasBusinessBeforeOperation { get; }
    public bool HasBusinessAfterOperation { get; }
    public RepositoryBusinessManager`2(IEnumerable`1<IRepositoryBusinessBeforeInsert`2<T, TKey>> beforeInserted, IEnumerable`1<IRepositoryBusinessAfterInsert`2<T, TKey>> afterInserted, IEnumerable`1<IRepositoryBusinessBeforeUpdate`2<T, TKey>> beforeUpdated, IEnumerable`1<IRepositoryBusinessAfterUpdate`2<T, TKey>> afterUpdated, IEnumerable`1<IRepositoryBusinessBeforeDelete`2<T, TKey>> beforeDeleted, IEnumerable`1<IRepositoryBusinessAfterDelete`2<T, TKey>> afterDeleted, IEnumerable`1<IRepositoryBusinessBeforeBatch`2<T, TKey>> beforeBatched, IEnumerable`1<IRepositoryBusinessAfterBatch`2<T, TKey>> afterBatched, IEnumerable`1<IRepositoryBusinessBeforeGet`2<T, TKey>> beforeGotten, IEnumerable`1<IRepositoryBusinessAfterGet`2<T, TKey>> afterGotten, IEnumerable`1<IRepositoryBusinessBeforeExist`2<T, TKey>> beforeExisted, IEnumerable`1<IRepositoryBusinessAfterExist`2<T, TKey>> afterExisted, IEnumerable`1<IRepositoryBusinessBeforeQuery`2<T, TKey>> beforeQueried, IEnumerable`1<IRepositoryBusinessAfterQuery`2<T, TKey>> afterQueried, IEnumerable`1<IRepositoryBusinessBeforeOperation`2<T, TKey>> beforeOperation, IEnumerable`1<IRepositoryBusinessAfterOperation`2<T, TKey>> afterOperation);
    private static RepositoryBusinessManager`2();
    public sealed virtual bool get_HasBusinessBeforeInsert();
    public sealed virtual bool get_HasBusinessAfterInsert();
    public sealed virtual bool get_HasBusinessBeforeUpdate();
    public sealed virtual bool get_HasBusinessAfterUpdate();
    public sealed virtual bool get_HasBusinessBeforeDelete();
    public sealed virtual bool get_HasBusinessAfterDelete();
    public sealed virtual bool get_HasBusinessBeforeBatch();
    public sealed virtual bool get_HasBusinessAfterBatch();
    public sealed virtual bool get_HasBusinessBeforeGet();
    public sealed virtual bool get_HasBusinessAfterGet();
    public sealed virtual bool get_HasBusinessBeforeExist();
    public sealed virtual bool get_HasBusinessAfterExist();
    public sealed virtual bool get_HasBusinessBeforeQuery();
    public sealed virtual bool get_HasBusinessAfterQuery();
    public sealed virtual bool get_HasBusinessBeforeOperation();
    public sealed virtual bool get_HasBusinessAfterOperation();
    [AsyncStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<InsertAsync>d__65")]
public sealed virtual Task`1<State`2<T, TKey>> InsertAsync(ICommandPattern`2<T, TKey> command, TKey key, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<UpdateAsync>d__66")]
public sealed virtual Task`1<State`2<T, TKey>> UpdateAsync(ICommandPattern`2<T, TKey> command, TKey key, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<DeleteAsync>d__67")]
public sealed virtual Task`1<State`2<T, TKey>> DeleteAsync(ICommandPattern`2<T, TKey> command, TKey key, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<BatchAsync>d__68")]
public sealed virtual IAsyncEnumerable`1<BatchResult`2<T, TKey>> BatchAsync(ICommandPattern`2<T, TKey> command, BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<ExistAsync>d__69")]
public sealed virtual Task`1<State`2<T, TKey>> ExistAsync(IQueryPattern`2<T, TKey> query, TKey key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<GetAsync>d__70")]
public sealed virtual Task`1<T> GetAsync(IQueryPattern`2<T, TKey> query, TKey key, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<QueryAsync>d__71")]
public sealed virtual IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(IQueryPattern`2<T, TKey> queryPattern, IFilterExpression filter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.RepositoryBusinessManager`2/<OperationAsync>d__72`1")]
public sealed virtual ValueTask`1<TProperty> OperationAsync(IQueryPattern`2<T, TKey> queryPattern, OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class RepositoryFramework.RepositoryFrameworkBuilder`2 : RepositoryBaseBuilder`6<T, TKey, IRepository`2<T, TKey>, Repository`2<T, TKey>, IRepositoryPattern`2<T, TKey>, IRepositoryBuilder`2<T, TKey>> {
    public RepositoryFrameworkBuilder`2(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.RepositoryFrameworkRegistry : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RepositoryFrameworkService> <Services>k__BackingField;
    public Dictionary`2<string, RepositoryFrameworkService> Services { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, RepositoryFrameworkService> get_Services();
    public static string ToServiceKey(Type modelType, PatternType type, string name);
    public IEnumerable`1<RepositoryFrameworkService> GetByModel(Type modelType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.RepositoryFrameworkService : object {
    [CompilerGeneratedAttribute]
private Type <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <InterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryMethods <ExposedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceLifetime <ServiceLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private PatternType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FactoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Policies>k__BackingField;
    public Type KeyType { get; }
    public Type ModelType { get; }
    public Type InterfaceType { get; internal set; }
    public Type ImplementationType { get; internal set; }
    public RepositoryMethods ExposedMethods { get; internal set; }
    public ServiceLifetime ServiceLifetime { get; internal set; }
    public PatternType Type { get; }
    public string FactoryName { get; }
    public List`1<string> Policies { get; }
    public string Key { get; }
    public RepositoryFrameworkService(Type keyType, Type modelType, PatternType type, string name);
    [CompilerGeneratedAttribute]
public Type get_KeyType();
    [CompilerGeneratedAttribute]
public Type get_ModelType();
    [CompilerGeneratedAttribute]
public Type get_InterfaceType();
    [CompilerGeneratedAttribute]
internal void set_InterfaceType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
    [CompilerGeneratedAttribute]
internal void set_ImplementationType(Type value);
    [CompilerGeneratedAttribute]
public RepositoryMethods get_ExposedMethods();
    [CompilerGeneratedAttribute]
internal void set_ExposedMethods(RepositoryMethods value);
    [CompilerGeneratedAttribute]
public ServiceLifetime get_ServiceLifetime();
    [CompilerGeneratedAttribute]
internal void set_ServiceLifetime(ServiceLifetime value);
    [CompilerGeneratedAttribute]
public PatternType get_Type();
    [CompilerGeneratedAttribute]
public string get_FactoryName();
    [CompilerGeneratedAttribute]
public List`1<string> get_Policies();
    public string get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.RepositoryMapper`3 : object {
    [CompilerGeneratedAttribute]
private static RepositoryMapper`3<T, TKey, TEntityModel> <Instance>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<RepositoryMapperProperty<T, TKey, TEntityModel>> <Properties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<RepositoryKeyMapperProperty<T, TKey, TEntityModel>> <KeyProperties>k__BackingField;
    public static RepositoryMapper`3<T, TKey, TEntityModel> Instance { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<RepositoryMapperProperty<T, TKey, TEntityModel>> Properties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<RepositoryKeyMapperProperty<T, TKey, TEntityModel>> KeyProperties { get; }
    private static RepositoryMapper`3();
    [CompilerGeneratedAttribute]
public static RepositoryMapper`3<T, TKey, TEntityModel> get_Instance();
    [CompilerGeneratedAttribute]
internal List`1<RepositoryMapperProperty<T, TKey, TEntityModel>> get_Properties();
    [CompilerGeneratedAttribute]
internal List`1<RepositoryKeyMapperProperty<T, TKey, TEntityModel>> get_KeyProperties();
    [NullableContextAttribute("2")]
public sealed virtual T Map(TEntityModel entity);
    [NullableContextAttribute("2")]
public sealed virtual TEntityModel Map(T entity, TKey key);
    [NullableContextAttribute("2")]
public sealed virtual TKey RetrieveKey(TEntityModel entity);
    public sealed virtual Expression`1<Func`2<TEntityModel, bool>> FindById(TKey key);
}
[FlagsAttribute]
public enum RepositoryFramework.RepositoryMethods : Enum {
    public int value__;
    public static RepositoryMethods None;
    public static RepositoryMethods Insert;
    public static RepositoryMethods Update;
    public static RepositoryMethods Delete;
    public static RepositoryMethods Batch;
    public static RepositoryMethods Exist;
    public static RepositoryMethods Get;
    public static RepositoryMethods Query;
    public static RepositoryMethods Operation;
    public static RepositoryMethods All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RepositoryFramework.RepositoryOptions : object {
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <JsonSerializerOptions>k__BackingField;
    public static JsonSerializerOptions JsonSerializerOptions { get; }
    private static RepositoryOptions();
    [CompilerGeneratedAttribute]
public static JsonSerializerOptions get_JsonSerializerOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.SerializableFilter : object {
    [CompilerGeneratedAttribute]
private List`1<FilterOperationAsString> <Operations>k__BackingField;
    [JsonPropertyNameAttribute("o")]
public List`1<FilterOperationAsString> Operations { get; public set; }
    public static SerializableFilter Empty { get; }
    [CompilerGeneratedAttribute]
public List`1<FilterOperationAsString> get_Operations();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Operations(List`1<FilterOperationAsString> value);
    public static SerializableFilter get_Empty();
    public IFilterExpression Deserialize();
    public IFilterExpression DeserializeAndTranslate(IRepositoryFilterTranslator translator);
    public string AsString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RepositoryFramework.State : object {
    public static State`2<T, TKey> Ok(T value, TKey key);
    public static State`2<T, TKey> Ok(Entity`2<T, TKey> entity);
    public static State`2<T, TKey> NotOk(T value, TKey key);
    public static State`2<T, TKey> NotOk(Entity`2<T, TKey> entity);
    public static State`2<T, TKey> Default(bool isOk, T value, TKey key);
    public static State`2<T, TKey> Default(bool isOk, Entity`2<T, TKey> entity);
    public static Task`1<State`2<T, TKey>> OkAsTask(T value, TKey key);
    public static Task`1<State`2<T, TKey>> OkAsTask(Entity`2<T, TKey> entity);
    public static Task`1<State`2<T, TKey>> NotOkAsTask(T value, TKey key);
    public static Task`1<State`2<T, TKey>> NotOkAsTask(Entity`2<T, TKey> entity);
    public static Task`1<State`2<T, TKey>> DefaultAsTask(bool isOk, T value, TKey key);
    public static Task`1<State`2<T, TKey>> DefaultAsTask(bool isOk, Entity`2<T, TKey> entity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.State`2 : object {
    [CompilerGeneratedAttribute]
private bool <IsOk>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Entity`2<T, TKey> <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Code>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [JsonPropertyNameAttribute("isOk")]
public bool IsOk { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("e")]
public Entity`2<T, TKey> Entity { get; public set; }
    [JsonPropertyNameAttribute("c")]
public Nullable`1<int> Code { get; public set; }
    [NullableAttribute("2")]
[JsonPropertyNameAttribute("m")]
public string Message { get; public set; }
    [JsonIgnoreAttribute]
public bool HasEntity { get; }
    [NullableContextAttribute("2")]
public State`2(bool isOk, T value, TKey key, Nullable`1<int> code, string message);
    [NullableContextAttribute("2")]
[JsonConstructorAttribute]
public State`2(bool isOk, Entity`2<T, TKey> entity, Nullable`1<int> code, string message);
    [CompilerGeneratedAttribute]
public bool get_IsOk();
    [CompilerGeneratedAttribute]
public void set_IsOk(bool value);
    [CompilerGeneratedAttribute]
public Entity`2<T, TKey> get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(Entity`2<T, TKey> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(Nullable`1<int> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Message(string value);
    public bool get_HasEntity();
    public static State`2<T, TKey> Ok();
    public static State`2<T, TKey> NotOk();
    public static bool op_Implicit(State`2<T, TKey> state);
    public static State`2<T, TKey> op_Implicit(bool state);
    public static int op_Implicit(State`2<T, TKey> state);
    public static State`2<T, TKey> op_Implicit(int code);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.ValueFilterOperation : FilteringOperation {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Nullable`1<long> Value { get; public set; }
    public ValueFilterOperation(FilterOperations Operation, Nullable`1<long> Value);
    [CompilerGeneratedAttribute]
protected ValueFilterOperation(ValueFilterOperation original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ValueFilterOperation left, ValueFilterOperation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ValueFilterOperation left, ValueFilterOperation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(FilteringOperation other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ValueFilterOperation other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override ValueFilterOperation <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FilterOperations& Operation, Nullable`1& Value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.QueryPatternExtensions : object {
    [ExtensionAttribute]
public static IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(IQueryPattern`2<T, TKey> entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<List`1<T>> ToListAsEntityAsync(IQueryPattern`2<T, TKey> entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsEntityAsync(IQueryPattern`2<T, TKey> entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> AsQueryBuilder(IQueryPattern`2<T, TKey> entity);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> Where(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> Take(IQueryPattern`2<T, TKey> entity, int top);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> Skip(IQueryPattern`2<T, TKey> entity, int skip);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> OrderBy(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, object>> predicate);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> OrderBy(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, TProperty>> predicate);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> OrderByDescending(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, object>> predicate);
    [ExtensionAttribute]
public static QueryBuilder`2<T, TKey> OrderByDescending(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, TProperty>> predicate);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<IAsyncGrouping`2<TProperty, Entity`2<T, TKey>>> GroupByAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<bool> AnyAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<Entity`2<T, TKey>> FirstOrDefaultAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<Entity`2<T, TKey>> FirstAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`2<T, TKey>> PageAsync(IQueryPattern`2<T, TKey> entity, int page, int pageSize, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<List`1<Entity`2<T, TKey>>> ToListAsync(IQueryPattern`2<T, TKey> entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<long> CountAsync(IQueryPattern`2<T, TKey> entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<TProperty> SumAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<TProperty> AverageAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<TProperty> MaxAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<TProperty> MinAsync(IQueryPattern`2<T, TKey> entity, Expression`1<Func`2<T, TProperty>> predicate, CancellationToken cancellationToken);
}
