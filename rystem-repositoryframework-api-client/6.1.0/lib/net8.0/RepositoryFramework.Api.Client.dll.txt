[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RepositoryBuilderExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDefaultAuthorizationInterceptorForApiHttpClient(IServiceCollection services, Action`1<AuthenticatorSettings> authenticatorSettings, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDefaultAuthorizationInterceptorForApiHttpClient(IServiceCollection services, Action`1<AuthenticatorSettings`1<T>> authenticatorSettings, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDefaultAuthorizationInterceptorForApiHttpClient(IServiceCollection services, Action`1<AuthenticatorSettings`2<T, TKey>> authenticatorSettings, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IRepositoryBuilder`2<T, TKey> WithApiClient(IRepositoryBuilder`2<T, TKey> builder, Action`1<IApiRepositoryBuilder`2<T, TKey>> apiBuilder, string name, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IQueryBuilder`2<T, TKey> WithApiClient(IQueryBuilder`2<T, TKey> builder, Action`1<IApiRepositoryBuilder`2<T, TKey>> apiBuilder, string name, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static ICommandBuilder`2<T, TKey> WithApiClient(ICommandBuilder`2<T, TKey> builder, Action`1<IApiRepositoryBuilder`2<T, TKey>> apiBuilder, string name, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddApiClientInterceptor(IServiceCollection services, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddApiClientSpecificInterceptor(IServiceCollection services, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddApiClientSpecificInterceptor(IServiceCollection services, ServiceLifetime serviceLifetime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.Api.Client.ApiClientSettings`2 : object {
    [CompilerGeneratedAttribute]
private string <StartingPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FactoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExistPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InsertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchPath>k__BackingField;
    public string StartingPath { get; }
    [NullableAttribute("2")]
public string Version { get; }
    [NullableAttribute("2")]
public string Name { get; }
    [NullableAttribute("2")]
public string FactoryName { get; }
    public string GetPath { get; }
    public string ExistPath { get; }
    public string QueryPath { get; }
    public string OperationPath { get; }
    public string InsertPath { get; }
    public string UpdatePath { get; }
    public string DeletePath { get; }
    public string BatchPath { get; }
    [NullableContextAttribute("2")]
public ApiClientSettings`2(string startingPath, string version, string name, string factoryName);
    [CompilerGeneratedAttribute]
public string get_StartingPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FactoryName();
    [CompilerGeneratedAttribute]
public string get_GetPath();
    [CompilerGeneratedAttribute]
public string get_ExistPath();
    [CompilerGeneratedAttribute]
public string get_QueryPath();
    [CompilerGeneratedAttribute]
public string get_OperationPath();
    [CompilerGeneratedAttribute]
public string get_InsertPath();
    [CompilerGeneratedAttribute]
public string get_UpdatePath();
    [CompilerGeneratedAttribute]
public string get_DeletePath();
    [CompilerGeneratedAttribute]
public string get_BatchPath();
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.Api.Client.Authorization.ITokenManager {
    public abstract virtual Task`1<string> GetTokenAsync();
    public abstract virtual Task`1<string> RefreshTokenAsync();
    public abstract virtual Task EnrichWithAuthorizationAsync(HttpClient client);
}
internal static class RepositoryFramework.Api.Client.Const : object {
    [NullableAttribute("1")]
public static string HttpClientName;
}
public class RepositoryFramework.Api.Client.DefaultInterceptor.AuthenticatorSettings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<Exception, IServiceProvider, Task> <ExceptionHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Scopes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<Exception, IServiceProvider, Task> ExceptionHandler { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public Func`3<Exception, IServiceProvider, Task> get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandler(Func`3<Exception, IServiceProvider, Task> value);
}
public class RepositoryFramework.Api.Client.DefaultInterceptor.AuthenticatorSettings`1 : AuthenticatorSettings {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RepositoryFramework.Api.Client.DefaultInterceptor.AuthenticatorSettings`2 : AuthenticatorSettings`1<T> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.Api.Client.DefaultInterceptor.BearerAuthenticator : object {
    private ITokenManager _tokenManager;
    private AuthenticatorSettings _settings;
    private IServiceProvider _provider;
    public BearerAuthenticator(ITokenManager tokenManager, AuthenticatorSettings settings, IServiceProvider provider);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.DefaultInterceptor.BearerAuthenticator/<EnrichAsync>d__4")]
public sealed virtual Task`1<HttpClient> EnrichAsync(HttpClient client, RepositoryMethods path);
}
internal class RepositoryFramework.Api.Client.DefaultInterceptor.BearerAuthenticator`1 : BearerAuthenticator {
    [NullableContextAttribute("1")]
public BearerAuthenticator`1(ITokenManager tokenManager, AuthenticatorSettings`1<T> settings, IServiceProvider provider);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class RepositoryFramework.Api.Client.DefaultInterceptor.BearerAuthenticator`2 : BearerAuthenticator`1<T> {
    [NullableContextAttribute("1")]
public BearerAuthenticator`2(ITokenManager tokenManager, AuthenticatorSettings`2<T, TKey> settings, IServiceProvider provider);
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.Api.Client.IRepositoryClientInterceptor {
    public abstract virtual Task`1<HttpClient> EnrichAsync(HttpClient client, RepositoryMethods path);
}
public interface RepositoryFramework.Api.Client.IRepositoryClientInterceptor`1 {
}
[NullableContextAttribute("2")]
public interface RepositoryFramework.Api.Client.IRepositoryClientInterceptor`2 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.Api.Client.RepositoryClient`2 : object {
    private HttpClient _httpClient;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ApiClientSettings`2<T, TKey> _options;
    private KeySettings`1<TKey> _keySettings;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<IRepositoryClientInterceptor> _clientInterceptors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<IRepositoryClientInterceptor`1<T>> _specificClientInterceptors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<IRepositoryClientInterceptor`2<T, TKey>> _specificClientInterceptorsWithKeys;
    private bool _clientAlreadyEnriched;
    private static string ApplicationJson;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FactoryName>k__BackingField;
    [NullableAttribute("2")]
public string FactoryName { get; private set; }
    public RepositoryClient`2(IHttpClientFactory httpClientFactory, KeySettings`1<TKey> keySettings, IServiceProvider serviceProvider);
    public sealed virtual void SetOptions(ApiClientSettings`2<T, TKey> options);
    private Task`1<HttpClient> EnrichedClientAsync(RepositoryMethods api);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<PostAsJson>d__10`2")]
private static Task`1<TResult> PostAsJson(HttpClient client, string path, TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<GetAsJson>d__11`1")]
private static Task`1<TResult> GetAsJson(HttpClient client, string path, CancellationToken cancellationToken);
    private static string GetCorrectUriWithKey(string path, TKey key);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<DeleteAsync>d__13")]
public sealed virtual Task`1<State`2<T, TKey>> DeleteAsync(TKey key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<GetAsync>d__14")]
public sealed virtual Task`1<T> GetAsync(TKey key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<ExistAsync>d__15")]
public sealed virtual Task`1<State`2<T, TKey>> ExistAsync(TKey key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<InsertAsync>d__16")]
public sealed virtual Task`1<State`2<T, TKey>> InsertAsync(TKey key, T value, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<QueryAsync>d__18")]
public sealed virtual IAsyncEnumerable`1<Entity`2<T, TKey>> QueryAsync(IFilterExpression filter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<EnsureSuccessStatusCodeAsync>d__19")]
private static Task EnsureSuccessStatusCodeAsync(HttpResponseMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<OperationAsync>d__20`1")]
public sealed virtual ValueTask`1<TProperty> OperationAsync(OperationType`1<TProperty> operation, IFilterExpression filter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<UpdateAsync>d__21")]
public sealed virtual Task`1<State`2<T, TKey>> UpdateAsync(TKey key, T value, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("RepositoryFramework.Api.Client.RepositoryClient`2/<BatchAsync>d__22")]
public sealed virtual IAsyncEnumerable`1<BatchResult`2<T, TKey>> BatchAsync(BatchOperations`2<T, TKey> operations, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FactoryName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_FactoryName(string value);
    public sealed virtual void SetFactoryName(string name);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static string <OperationAsync>g__GetPrimitiveNameOrAssemblyQualifiedName|20_0(<>c__DisplayClass20_0`1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RepositoryFramework.ApiRepositoryBuilder`2 : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [NullableAttribute("2")]
private string _version;
    [NullableAttribute("2")]
private string _name;
    [NullableAttribute("2")]
private string _factoryName;
    [NullableAttribute("2")]
private string _path;
    internal IServiceCollection Services { get; internal set; }
    [CompilerGeneratedAttribute]
internal IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
internal void set_Services(IServiceCollection value);
    public sealed virtual IApiRepositoryBuilder`2<T, TKey> WithVersion(string version);
    public sealed virtual IApiRepositoryBuilder`2<T, TKey> WithName(string name);
    public sealed virtual IApiRepositoryBuilder`2<T, TKey> WithStartingPath(string path);
    public sealed virtual IApiRepositoryBuilder`2<T, TKey> WithServerFactoryName(string name);
    public sealed virtual HttpClientRepositoryBuilder`2<T, TKey> WithHttpClient(string domain);
    public sealed virtual HttpClientRepositoryBuilder`2<T, TKey> WithHttpClient(Action`1<HttpClient> configuredClient);
    public sealed virtual Func`2<IServiceProvider, ApiClientSettings`2<T, TKey>> Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RepositoryFramework.HttpClientRepositoryBuilder`2 : object {
    [CompilerGeneratedAttribute]
private IApiRepositoryBuilder`2<T, TKey> <ApiBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpClientBuilder <ClientBuilder>k__BackingField;
    public IApiRepositoryBuilder`2<T, TKey> ApiBuilder { get; }
    public IHttpClientBuilder ClientBuilder { get; }
    public HttpClientRepositoryBuilder`2(IApiRepositoryBuilder`2<T, TKey> apiBuilder, IHttpClientBuilder clientBuilder);
    [CompilerGeneratedAttribute]
public IApiRepositoryBuilder`2<T, TKey> get_ApiBuilder();
    [CompilerGeneratedAttribute]
public IHttpClientBuilder get_ClientBuilder();
    public HttpClientRepositoryBuilder`2<T, TKey> WithDefaultRetryPolicy();
}
[NullableContextAttribute("1")]
public interface RepositoryFramework.IApiRepositoryBuilder`2 {
    public abstract virtual IApiRepositoryBuilder`2<T, TKey> WithVersion(string version);
    public abstract virtual IApiRepositoryBuilder`2<T, TKey> WithName(string name);
    public abstract virtual IApiRepositoryBuilder`2<T, TKey> WithStartingPath(string path);
    public abstract virtual IApiRepositoryBuilder`2<T, TKey> WithServerFactoryName(string name);
    public abstract virtual HttpClientRepositoryBuilder`2<T, TKey> WithHttpClient(string domain);
    public abstract virtual HttpClientRepositoryBuilder`2<T, TKey> WithHttpClient(Action`1<HttpClient> configuredClient);
}
