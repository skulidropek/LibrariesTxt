public static class Rystem.Reflection.ReflectionHelper : object {
    [NullableContextAttribute("1")]
public static string NameOfCallingClass(int deep, bool full);
}
[ExtensionAttribute]
public static class System.CastExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T Cast(object entity);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static object Cast(object entity, Type typeToCast);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Collection.Generics.AsyncEnumerable`1 : object {
    public static IAsyncEnumerable`1<T> Empty;
    private static AsyncEnumerable`1();
    [AsyncIteratorStateMachineAttribute("System.Collection.Generics.AsyncEnumerable`1/<GetEmpty>d__1")]
private static IAsyncEnumerable`1<T> GetEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Concurrent.ConcurrentList`1 : object {
    private IList`1<T> _list;
    private object _trafficLight;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Collections.EnumerableExtensions : object {
    [ExtensionAttribute]
public static object ElementAt(IEnumerable entities, int index);
    [ExtensionAttribute]
public static bool SetElementAt(IEnumerable entities, int index, object value);
    [ExtensionAttribute]
public static bool RemoveElementAt(IEnumerable entities, int index, IEnumerable& newEntities, Object& value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.CopyExtensions : object {
    [ExtensionAttribute]
public static T ToDeepCopy(T source);
    [ExtensionAttribute]
public static object ToDeepCopy(object source);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyPropertiesFrom(object destination, object source);
    [ExtensionAttribute]
public static void CopyPropertiesFrom(T destination, T source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.EnumExtensions : object {
    [ExtensionAttribute]
public static TEnum ToEnum(Enum source);
    [ExtensionAttribute]
public static TEnum ToEnum(string source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.IO.StreamExtensions : object {
    [ExtensionAttribute]
public static Stream ToStream(Byte[] bytes);
    [ExtensionAttribute]
public static Byte[] ToArray(Stream stream);
    [AsyncStateMachineAttribute("System.IO.StreamExtensions/<ToArrayAsync>d__2")]
[ExtensionAttribute]
public static Task`1<Byte[]> ToArrayAsync(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.ArgumentValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Name { get; public set; }
    public Type Type { get; public set; }
    public ArgumentValue(string Name, Type Type);
    [CompilerGeneratedAttribute]
private ArgumentValue(ArgumentValue original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(Type value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ArgumentValue left, ArgumentValue right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ArgumentValue left, ArgumentValue right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ArgumentValue other);
    [CompilerGeneratedAttribute]
public ArgumentValue <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, Type& Type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.BinaryExpressionInterpreter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.ConstantExpressionInterpreter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.ExpressionBearer : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("1")]
public Expression Expression { get; public set; }
    public MemberInfo Member { get; public set; }
    public string Key { get; public set; }
    [NullableContextAttribute("1")]
public ExpressionBearer(Expression Expression);
    [CompilerGeneratedAttribute]
private ExpressionBearer(ExpressionBearer original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Expression get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public MemberInfo get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(MemberInfo value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ExpressionBearer left, ExpressionBearer right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ExpressionBearer left, ExpressionBearer right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ExpressionBearer other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ExpressionBearer <Clone>$();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(Expression& Expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.ExpressionContext : object {
    [CompilerGeneratedAttribute]
private string <ExpressionAsString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ArgumentValue> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <FinalSubstitutions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string ExpressionAsString { get; private set; }
    public List`1<ArgumentValue> Arguments { get; }
    public Dictionary`2<string, string> FinalSubstitutions { get; }
    public ExpressionContext(Expression expression);
    [CompilerGeneratedAttribute]
private ExpressionContext(ExpressionContext original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ExpressionAsString();
    [CompilerGeneratedAttribute]
private void set_ExpressionAsString(string value);
    [CompilerGeneratedAttribute]
public List`1<ArgumentValue> get_Arguments();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_FinalSubstitutions();
    public void ReplaceWithValue(string key, object value);
    public void DirectReplace(string key, string value);
    public bool IsAnArgument(string name, Type type);
    public void CompileAndReplace(Expression argument);
    public string Finalize();
    private static string Interpretate(object value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExpressionContext left, ExpressionContext right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExpressionContext left, ExpressionContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ExpressionContext other);
    [CompilerGeneratedAttribute]
public ExpressionContext <Clone>$();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Finalize>b__17_0(KeyValuePair`2<string, string> method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.Expressions.ExpressionExtensions : object {
    private static List`1<string> PossibleNames;
    private static ExpressionExtensions();
    [ExtensionAttribute]
public static string Serialize(Expression expression);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, TResult>> Deserialize(string expressionAsString);
    [ExtensionAttribute]
public static Expression`1<Func`1<TResult>> Deserialize(string expressionAsString);
    [ExtensionAttribute]
public static Func`2<T, TResult> DeserializeAndCompile(string expressionAsString);
    [ExtensionAttribute]
public static Func`1<TResult> DeserializeAndCompile(string expressionAsString);
    [ExtensionAttribute]
public static LambdaExpression DeserializeAsDynamic(string expressionAsString);
    [ExtensionAttribute]
public static LambdaExpression DeserializeAsDynamic(string expressionAsString, Type inputType);
    [ExtensionAttribute]
public static Delegate DeserializeAndCompileAsDynamic(string expressionAsString);
    [ExtensionAttribute]
public static ValueTuple`2<LambdaExpression, Type> DeserializeAsDynamicAndRetrieveType(string expressionAsString);
    [AsyncStateMachineAttribute("System.Linq.Expressions.ExpressionExtensions/<InvokeAsync>d__10")]
[ExtensionAttribute]
public static ValueTask InvokeAsync(LambdaExpression lambdaExpression, Object[] args);
    [ExtensionAttribute]
public static ValueTask`1<object> InvokeAsync(LambdaExpression lambdaExpression, Type type, Object[] args);
    [AsyncStateMachineAttribute("System.Linq.Expressions.ExpressionExtensions/<InvokeAsync>d__12")]
[ExtensionAttribute]
public static ValueTask`1<object> InvokeAsync(Delegate method, Type type, Object[] args);
    [AsyncStateMachineAttribute("System.Linq.Expressions.ExpressionExtensions/<InvokeAsync>d__13`1")]
[ExtensionAttribute]
public static ValueTask`1<T> InvokeAsync(Delegate method, Object[] args);
    [ExtensionAttribute]
public static ValueTask`1<T> InvokeAsync(LambdaExpression lambdaExpression, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TResult InvokeAndTransform(Expression`1<Func`2<T, TSource>> expression, T entity);
    [ExtensionAttribute]
public static TResult InvokeAndTransform(LambdaExpression expression, Object[] args);
    [AsyncStateMachineAttribute("System.Linq.Expressions.ExpressionExtensions/<InvokeAndTransformAsync>d__17`1")]
[ExtensionAttribute]
public static ValueTask`1<TResult> InvokeAndTransformAsync(LambdaExpression expression, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyInfo GetPropertyFromExpression(Expression`1<Func`2<Tx, Ty>> lambda);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Linq.Expressions.ExpressionSerializer : object {
    private static List`1<IExpressionInterpreter> interpreters;
    private static List`1<ExpressionBearer> Empty;
    private static ExpressionSerializer();
    public static string Serialize(Expression expression);
    public static Expression`1<Func`2<T, TResult>> Deserialize(string expressionAsString);
    public static Expression`1<Func`1<TResult>> Deserialize(string expressionAsString);
    public static LambdaExpression DeserializeAsDynamic(string expressionAsString);
    public static ValueTuple`2<LambdaExpression, Type> DeserializeAsDynamicAndRetrieveType(string expressionAsString);
    private static void Serialize(ExpressionContext context, ExpressionBearer bearer);
    private static IEnumerable`1<ExpressionBearer> ReadExpressions(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("1")]
internal interface System.Linq.Expressions.IExpressionInterpreter {
    public Type Type { get; }
    public abstract virtual Type get_Type();
    public abstract virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.Expressions.LambdaExpressionExtensions : object {
    [ExtensionAttribute]
public static LambdaExpression ChangeReturnType(LambdaExpression expression, Type toChange);
    [ExtensionAttribute]
public static LambdaExpression ChangeReturnType(LambdaExpression expression);
    [ExtensionAttribute]
public static Expression`1<Func`1<TReturn>> AsExpression(LambdaExpression lambdaExpression);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, TReturn>> AsExpression(LambdaExpression lambdaExpression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression`1<Func`3<T, T1, TReturn>> AsExpression(LambdaExpression lambdaExpression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression`1<Func`4<T, T1, T2, TReturn>> AsExpression(LambdaExpression lambdaExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.LambdaExpressionInterpreter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.MemberExpressionInterpreter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.MethodCallExpressionInterpreter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.ParameterExpressionInterpreter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Expressions.UnaryExpressionInterpreter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<ExpressionBearer> Read(ExpressionBearer bearer, ExpressionContext context);
}
[ExtensionAttribute]
public static class System.Linq.LinqAsyncExtensions : object {
    [AsyncStateMachineAttribute("System.Linq.LinqAsyncExtensions/<AllAsync>d__0`1")]
[ExtensionAttribute]
public static ValueTask`1<bool> AllAsync(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, ValueTask`1<bool>>> expression);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("System.Linq.LinqAsyncExtensions/<AllAsync>d__1`1")]
[ExtensionAttribute]
public static ValueTask`1<bool> AllAsync(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, Task`1<bool>>> expression);
    [AsyncStateMachineAttribute("System.Linq.LinqAsyncExtensions/<AnyAsync>d__2`1")]
[ExtensionAttribute]
public static ValueTask`1<bool> AnyAsync(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, ValueTask`1<bool>>> expression);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("System.Linq.LinqAsyncExtensions/<AnyAsync>d__3`1")]
[ExtensionAttribute]
public static ValueTask`1<bool> AnyAsync(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, Task`1<bool>>> expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.QueryableLinqExtensions : object {
    private static ConcurrentDictionary`2<string, MethodInfoWrapper> Methods;
    private static QueryableLinqExtensions();
    private static MethodInfo GetMethod(Type entityType, Type sourceType, string methodName, LambdaExpression expression, bool isAsync);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TResult CallMethod(IQueryable`1<TSource> query, string methodName, LambdaExpression expression, Type typeWhereToSearchTheMethod);
    [ExtensionAttribute]
public static ValueTask`1<TSource> CallMethodAsync(IQueryable`1<TSource> query, string methodName, CancellationToken cancellation);
    [ExtensionAttribute]
public static ValueTask`1<TResult> CallMethodAsync(IQueryable`1<TSource> query, string methodName, CancellationToken cancellation);
    [ExtensionAttribute]
public static ValueTask`1<TSource> CallMethodAsync(IQueryable`1<TSource> query, string methodName, Type typeWhereToSearchTheMethod, CancellationToken cancellation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ValueTask`1<TResult> CallMethodAsync(IQueryable`1<TSource> query, string methodName, Type typeWhereToSearchTheMethod, CancellationToken cancellation);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("System.Linq.QueryableLinqExtensions/<CallMethodAsync>d__8`2")]
[ExtensionAttribute]
public static ValueTask`1<TResult> CallMethodAsync(IQueryable`1<TSource> query, string methodName, LambdaExpression expression, Type typeWhereToSearchTheMethod, CancellationToken cancellation);
    [ExtensionAttribute]
public static decimal Average(IQueryable`1<TSource> source, LambdaExpression selector);
    [ExtensionAttribute]
public static int Count(IQueryable`1<TSource> source, LambdaExpression predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> DistinctBy(IQueryable`1<TSource> source, LambdaExpression keySelector);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<object, TSource>> GroupBy(IQueryable`1<TSource> source, LambdaExpression keySelector);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, LambdaExpression keySelector);
    [ExtensionAttribute]
public static long LongCount(IQueryable`1<TSource> source, LambdaExpression predicate);
    [ExtensionAttribute]
public static object Max(IQueryable`1<TSource> source, LambdaExpression selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object Max(IQueryable`1<TSource> source, LambdaExpression selector);
    [ExtensionAttribute]
public static object Min(IQueryable`1<TSource> source, LambdaExpression selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object Min(IQueryable`1<TSource> source, LambdaExpression selector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, LambdaExpression keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, LambdaExpression keySelector);
    [ExtensionAttribute]
public static IQueryable`1<object> Select(IQueryable`1<TSource> source, LambdaExpression selector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, LambdaExpression selector);
    [ExtensionAttribute]
public static decimal Sum(IQueryable`1<TSource> source, LambdaExpression selector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, LambdaExpression keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, LambdaExpression keySelector);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Where(IQueryable`1<TSource> source, LambdaExpression predicate);
    [CompilerGeneratedAttribute]
internal static bool <GetMethod>g__IsTheRightGeneric|2_1(Type toCheck, <>c__DisplayClass2_1& );
}
[NullableContextAttribute("1")]
internal interface System.ProgrammingLanguage.IProgrammingLanguage {
    public abstract virtual string Start(Type type, string name);
    public abstract virtual string GetMimeType();
    public abstract virtual string SetProperty(string name, string type);
    public abstract virtual string GetPrimitiveType(Type type);
    public abstract virtual string GetNonPrimitiveType(Type type);
    public abstract virtual string End();
    public abstract virtual string ConvertEnum(string name, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.ProgrammingLanguage.ProgrammingLanguageExtensions : object {
    [ExtensionAttribute]
public static ProgrammingLanguangeResponse ConvertAs(IEnumerable`1<Type> types, ProgrammingLanguageType programmingLanguage);
    [ExtensionAttribute]
public static ProgrammingLanguangeResponse ConvertAs(Type type, ProgrammingLanguageType programmingLanguage, string name);
    private static string Transform(string name, Type type, IProgrammingLanguage programmingLanguage, Dictionary`2<Type, bool> typesAlreadyAdded, Dictionary`2<string, int> namesAlreadyAdded);
    [IteratorStateMachineAttribute("System.ProgrammingLanguage.ProgrammingLanguageExtensions/<GetFurtherTypes>d__3")]
private static IEnumerable`1<Type> GetFurtherTypes(Type startingType);
    private static string GetName(PropertyInfo property);
    private static string GetClassName(PropertyInfo property);
    [CompilerGeneratedAttribute]
internal static void <Transform>g__AppendLine|2_0(string line, <>c__DisplayClass2_0& );
}
public enum System.ProgrammingLanguage.ProgrammingLanguageType : Enum {
    public int value__;
    public static ProgrammingLanguageType Typescript;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ProgrammingLanguage.ProgrammingLanguangeResponse : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    public string Text { get; public set; }
    public string MimeType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.ProgrammingLanguage.TypeScript : object {
    public sealed virtual string End();
    public sealed virtual string GetMimeType();
    public sealed virtual string SetProperty(string name, string type);
    public sealed virtual string GetPrimitiveType(Type type);
    public sealed virtual string GetNonPrimitiveType(Type type);
    public void Write(StringBuilder builder, Type type);
    public sealed virtual string Start(Type type, string name);
    public sealed virtual string ConvertEnum(string name, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reflection.BaseProperty : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BaseProperty <Father>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <Self>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyType <GenericType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <Sons>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <Generics>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NavigationPath>k__BackingField;
    private Dictionary`2<string, object> _furtherProperties;
    [CompilerGeneratedAttribute]
private int <Deep>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EnumerableDeep>k__BackingField;
    private List`1<PropertyInfo> _valueFromContextStack;
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <Primitives>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <NonPrimitives>k__BackingField;
    private protected IFurtherParameter[] _furtherParameters;
    [NullableAttribute("2")]
public BaseProperty Father { get; }
    public PropertyInfo Self { get; }
    public PropertyType Type { get; private protected set; }
    public PropertyType GenericType { get; }
    public List`1<BaseProperty> Sons { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] Generics { get; private protected set; }
    public string NavigationPath { get; }
    public int Deep { get; }
    public int EnumerableDeep { get; private protected set; }
    public Type AssemblyType { get; }
    public List`1<BaseProperty> Primitives { get; }
    public List`1<BaseProperty> NonPrimitives { get; }
    protected BaseProperty(PropertyInfo info, BaseProperty father, IFurtherParameter[] furtherParameters);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BaseProperty get_Father();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Self();
    [CompilerGeneratedAttribute]
public PropertyType get_Type();
    [CompilerGeneratedAttribute]
private protected void set_Type(PropertyType value);
    [CompilerGeneratedAttribute]
public PropertyType get_GenericType();
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_Sons();
    [CompilerGeneratedAttribute]
public Type[] get_Generics();
    [CompilerGeneratedAttribute]
private protected void set_Generics(Type[] value);
    [CompilerGeneratedAttribute]
public string get_NavigationPath();
    public T GetProperty(string key);
    [CompilerGeneratedAttribute]
public int get_Deep();
    [CompilerGeneratedAttribute]
public int get_EnumerableDeep();
    [CompilerGeneratedAttribute]
private protected void set_EnumerableDeep(int value);
    public Type get_AssemblyType();
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_Primitives();
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_NonPrimitives();
    protected abstract virtual void ConstructWell();
    public abstract virtual IEnumerable`1<BaseProperty> GetQueryableProperty();
    [NullableContextAttribute("2")]
public object Value(object context, Int32[] indexes);
    [NullableContextAttribute("2")]
public BasePropertyNameValue NamedValue(object context, Int32[] indexes);
    [NullableContextAttribute("2")]
public void Set(object context, object value, Int32[] indexes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.BasePropertyNameValue : object {
    private StringBuilder _navigationPathBuilder;
    [CompilerGeneratedAttribute]
private string <NavigationPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    private int _index;
    public string NavigationPath { get; private set; }
    public string CompleteName { get; }
    [NullableAttribute("2")]
public string Name { get; private set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NavigationPath();
    [CompilerGeneratedAttribute]
private void set_NavigationPath(string value);
    public string get_CompleteName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(object value);
    public void AddName(string name);
    public void AddIndex(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.ComplexProperty : BaseProperty {
    public ComplexProperty(PropertyInfo info, BaseProperty father, IFurtherParameter[] furtherParameters);
    [IteratorStateMachineAttribute("System.Reflection.ComplexProperty/<GetQueryableProperty>d__1")]
public virtual IEnumerable`1<BaseProperty> GetQueryableProperty();
    protected virtual void ConstructWell();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.Constructor : object {
    private static ConcurrentDictionary`2<string, Constructable> s_constructors;
    private static Constructor();
    [NullableContextAttribute("2")]
public static T InvokeWithBestDynamicFit(Object[] args);
    [ExtensionAttribute]
public static object ConstructWithBestDynamicFit(Type type, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.EnumerableProperty : BaseProperty {
    public EnumerableProperty(PropertyInfo info, BaseProperty father, IFurtherParameter[] furtherParameters);
    [IteratorStateMachineAttribute("System.Reflection.EnumerableProperty/<GetQueryableProperty>d__1")]
public virtual IEnumerable`1<BaseProperty> GetQueryableProperty();
    protected virtual void ConstructWell();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class System.Reflection.FurtherParameter`1 : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<BaseProperty, T>> <Creator>k__BackingField;
    [RequiredMemberAttribute]
public string Key { get; public set; }
    [RequiredMemberAttribute]
public Expression`1<Func`2<BaseProperty, T>> Creator { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<BaseProperty, T>> get_Creator();
    [CompilerGeneratedAttribute]
public void set_Creator(Expression`1<Func`2<BaseProperty, T>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Reflection.Generics : object {
    private static ConcurrentDictionary`2<string, MethodInfoWrapper> s_methodsCache;
    private static ConcurrentDictionary`2<string, StaticMethodInfoWrapper> s_staticMethodsCache;
    private static Generics();
    public static StaticMethodInfoWrapper WithStatic(string methodName, Type[] generics);
    public static StaticMethodInfoWrapper WithStatic(Type containerType, string methodName, Type[] generics);
    public static MethodInfoWrapper With(string methodName, Type[] generics);
    public static MethodInfoWrapper With(Type containerType, string methodName, Type[] generics);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reflection.Globals : object {
    public static Dictionary`2<int, object> Cache;
    public static OpCode[] MultiByteOpCodes;
    public static OpCode[] SingleByteOpCodes;
    private static Globals();
    [NullableContextAttribute("2")]
public static string ProcessSpecialTypes(string typeName);
}
[NullableContextAttribute("1")]
public interface System.Reflection.IFurtherParameter {
    public string Key { get; }
    public abstract virtual string get_Key();
    public static IFurtherParameter Create(string key, Expression`1<Func`2<BaseProperty, T>> creator);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Reflection.ILInstruction : object {
    [CompilerGeneratedAttribute]
private OpCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <OperandData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    public OpCode Code { get; internal set; }
    public object Operand { get; internal set; }
    public Byte[] OperandData { get; internal set; }
    public int Offset { get; internal set; }
    [CompilerGeneratedAttribute]
public OpCode get_Code();
    [CompilerGeneratedAttribute]
internal void set_Code(OpCode value);
    [CompilerGeneratedAttribute]
public object get_Operand();
    [CompilerGeneratedAttribute]
internal void set_Operand(object value);
    [CompilerGeneratedAttribute]
public Byte[] get_OperandData();
    [CompilerGeneratedAttribute]
internal void set_OperandData(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
internal void set_Offset(int value);
    [NullableContextAttribute("1")]
public string GetCode();
    [NullableContextAttribute("1")]
private static string GetExpandedOffset(long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.MethodBodyReader : object {
    [CompilerGeneratedAttribute]
private List`1<ILInstruction> <Instructions>k__BackingField;
    private Byte[] _ilCode;
    private MethodInfo _methodInfo;
    public List`1<ILInstruction> Instructions { get; }
    public MethodBodyReader(MethodInfo mi);
    [CompilerGeneratedAttribute]
public List`1<ILInstruction> get_Instructions();
    private ushort ReadUInt16(Int32& position);
    private int ReadInt32(Int32& position);
    private ulong ReadInt64(Int32& position);
    private double ReadDouble(Int32& position);
    private sbyte ReadSByte(Int32& position);
    private byte ReadByte(Int32& position);
    private float ReadSingle(Int32& position);
    private void ConstructInstructions(Module module);
    public string GetBodyCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static string GetBodyAsString(MethodInfo methodInfo);
    [ExtensionAttribute]
public static List`1<ILInstruction> GetInstructions(MethodInfo methodInfo);
    [ExtensionAttribute]
public static string GetSignature(MethodInfo methodInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.MethodInfoWrapper : object {
    private MethodInfo _method;
    public MethodInfoWrapper(MethodInfo methodInfo);
    public object Invoke(object obj, Object[] inputs);
    public TResult Invoke(object obj, Object[] inputs);
    [AsyncStateMachineAttribute("System.Reflection.MethodInfoWrapper/<InvokeAsValueTaskAsync>d__4")]
public ValueTask`1<object> InvokeAsValueTaskAsync(object obj, Object[] inputs);
    [AsyncStateMachineAttribute("System.Reflection.MethodInfoWrapper/<InvokeAsync>d__5")]
public Task`1<object> InvokeAsync(object obj, Object[] inputs);
    [AsyncStateMachineAttribute("System.Reflection.MethodInfoWrapper/<InvokeAsValueTaskAsync>d__6`1")]
public ValueTask`1<T> InvokeAsValueTaskAsync(object obj, Object[] inputs);
    [AsyncStateMachineAttribute("System.Reflection.MethodInfoWrapper/<InvokeAsync>d__7`1")]
public Task`1<T> InvokeAsync(object obj, Object[] inputs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.MockedAssembly : object {
    [CompilerGeneratedAttribute]
private static MockedAssembly <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleBuilder <Builder>k__BackingField;
    private static ConcurrentDictionary`2<Type, MockedType> s_types;
    private static List`1<Type> s_normalTypes;
    public static MockedAssembly Instance { get; }
    public ModuleBuilder Builder { get; }
    private static MockedAssembly();
    [CompilerGeneratedAttribute]
public static MockedAssembly get_Instance();
    [CompilerGeneratedAttribute]
public ModuleBuilder get_Builder();
    public Type GetMockedType(Type baseType, Action`1<MockingConfiguration> configuration);
    [NullableContextAttribute("2")]
public Type GetMockedType(Action`1<MockingConfiguration> configuration);
    public object CreateInstance(Type type, Action`1<MockingConfiguration> configuration, Object[] args);
    public T CreateInstance(Action`1<MockingConfiguration> configuration, Object[] args);
    private static string ToSignature(MethodInfo methodInfo);
    private static string GetPrivateFieldForPropertyName(string propertyName);
    private Type DefineNewImplementation(Type type, MockingConfiguration configuration);
    public Type CreateFromScratch(string name, Type parentType, List`1<MockedProperty> properties);
    private void ConfigureProperties(Type currentType, TypeBuilder typeBuilder, List`1<ILGenerator> constructorGenerators, Dictionary`2<string, bool> createdNames);
    private static object GetFromDictionary(object dictionary, object key);
    private static MethodBuilder CreateMethod(MethodInfo methodInfo, TypeBuilder typeBuilder, Dictionary`2<string, bool> createdNames, Action`1<ILGenerator> action, bool returnDefault, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    private static bool Check(Type type);
    private void ConfigureProperty(PropertyInfo property, TypeBuilder typeBuilder, List`1<ILGenerator> constructorGenerators, Dictionary`2<string, bool> createdNames);
    private void ConfigureMethods(Type currentType, TypeBuilder typeBuilder, Dictionary`2<string, bool> createdNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class System.Reflection.MockedProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [RequiredMemberAttribute]
public string Name { get; public set; }
    [RequiredMemberAttribute]
public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.Mocking : object {
    [ExtensionAttribute]
public static Type Mock(Type type, Action`1<MockingConfiguration> configuration);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Type Mock(T entity, Action`1<MockingConfiguration> configuration);
    [NullableContextAttribute("2")]
public static Type Mock(Action`1<MockingConfiguration> configuration);
    [ExtensionAttribute]
public static object CreateInstance(Type type, Action`1<MockingConfiguration> configuration, Object[] args);
    [ExtensionAttribute]
public static T CreateInstance(T entity, Action`1<MockingConfiguration> configuration, Object[] args);
    public static T CreateInstance(Action`1<MockingConfiguration> configuration, Object[] args);
    [ExtensionAttribute]
public static object CreateInstance(Type type, Object[] args);
    [ExtensionAttribute]
public static T CreateInstance(T entity, Object[] args);
    public static T CreateInstance(Object[] args);
}
public class System.Reflection.MockingConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsSealed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateNewOneIfExists>k__BackingField;
    public bool IsSealed { get; public set; }
    public bool CreateNewOneIfExists { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSealed();
    [CompilerGeneratedAttribute]
public void set_IsSealed(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateNewOneIfExists();
    [CompilerGeneratedAttribute]
public void set_CreateNewOneIfExists(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Reflection.Model : object {
    public static ModelBuilder Create(string name);
    public static Type GetType(string name);
    public static object Construct(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.ModelBuilder : object {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, Type> <Types>k__BackingField;
    private string _name;
    private List`1<MockedProperty> _properties;
    [NullableAttribute("2")]
private Type _parentType;
    internal static ConcurrentDictionary`2<string, Type> Types { get; }
    public ModelBuilder(string name);
    private static ModelBuilder();
    [CompilerGeneratedAttribute]
internal static ConcurrentDictionary`2<string, Type> get_Types();
    public ModelBuilder AddProperty(string name);
    public ModelBuilder AddProperty(string name, Type type);
    public ModelBuilder AddParent(Type parentType);
    public ModelBuilder AddParent();
    public Type Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.NullableExtensions : object {
    [ExtensionAttribute]
public static bool IsNullable(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsNullable(FieldInfo field);
    [ExtensionAttribute]
public static bool IsNullable(ParameterInfo parameter);
    private static bool IsNullableHelper(Type memberType, MemberInfo declaringType, IEnumerable`1<CustomAttributeData> customAttributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.PrimitiveExtensions : object {
    private static Type[] s_primitiveTypes;
    private static PrimitiveExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsPrimitive(T entity);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNumeric(T entity);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsBoolean(Type type);
    [ExtensionAttribute]
public static bool IsDateTime(Type type);
    [ExtensionAttribute]
public static bool IsEnumerable(Type type);
    [ExtensionAttribute]
public static bool IsDictionary(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.PrimitiveProperty : BaseProperty {
    public PrimitiveProperty(PropertyInfo info, BaseProperty father, IFurtherParameter[] furtherParameters);
    [IteratorStateMachineAttribute("System.Reflection.PrimitiveProperty/<GetQueryableProperty>d__1")]
public virtual IEnumerable`1<BaseProperty> GetQueryableProperty();
    protected virtual void ConstructWell();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.PropertyHandler : object {
    private ConcurrentDictionary`2<string, TypeShowcase> _trees;
    [CompilerGeneratedAttribute]
private static PropertyHandler <Instance>k__BackingField;
    public static PropertyHandler Instance { get; }
    private static PropertyHandler();
    [CompilerGeneratedAttribute]
public static PropertyHandler get_Instance();
    public TypeShowcase GetEntity(Type type, IFurtherParameter[] furtherParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.PropertyHandlerExtensions : object {
    [ExtensionAttribute]
public static TypeShowcase ToShowcase(Type type, IFurtherParameter[] furtherParameters);
    [ExtensionAttribute]
public static TypeShowcase ToShowcase(T entity, IFurtherParameter[] furtherParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.PropertyStrategy : object {
    [CompilerGeneratedAttribute]
private static PropertyStrategy <Instance>k__BackingField;
    public static PropertyStrategy Instance { get; }
    private static PropertyStrategy();
    [CompilerGeneratedAttribute]
public static PropertyStrategy get_Instance();
    public BaseProperty CreateProperty(PropertyInfo propertyInfo, BaseProperty father, IFurtherParameter[] furtherParameters);
}
public enum System.Reflection.PropertyType : Enum {
    public int value__;
    public static PropertyType Primitive;
    public static PropertyType Complex;
    public static PropertyType Enumerable;
    public static PropertyType Flag;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.ReflectionExtensions : object {
    private static Dictionary`2<string, PropertyInfo[]> s_allProperties;
    private static Dictionary`2<string, ConstructorInfo[]> s_allConstructors;
    private static Dictionary`2<string, FieldInfo[]> s_allFields;
    private static Dictionary`2<string, MethodInfo[]> s_allMethods;
    private static Dictionary`2<string, MethodInfo[]> s_allStaticMethods;
    private static object s_semaphore;
    private static Type s_objectType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, Func`1<object>> s_defaultCreators;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, Func`1<object>> s_defaultCreatorsWithConstructorPropertiesAndField;
    private static ReflectionExtensions();
    [ExtensionAttribute]
public static bool HasInterface(Type type, Type interfaceType);
    [ExtensionAttribute]
public static bool IsTheSameTypeOrASon(Type type, Type toCompare);
    [ExtensionAttribute]
public static bool IsTheSameTypeOrASon(Type type, TCompared toCompare);
    [ExtensionAttribute]
public static bool IsTheSameTypeOrASon(T item, TCompared toCompare);
    [ExtensionAttribute]
public static bool IsTheSameTypeOrAFather(Type type, Type toCompare);
    [ExtensionAttribute]
public static bool IsTheSameTypeOrAFather(T item, TCompared toCompare);
    [ExtensionAttribute]
public static bool IsTheSameTypeOrAParent(Type type, Type toCompare);
    [ExtensionAttribute]
public static bool IsTheSameTypeOrAParent(T item, TCompared toCompare);
    [ExtensionAttribute]
public static bool HasTheSameTypeOrAParentInGeneric(T item, Type toCompare);
    [ExtensionAttribute]
public static PropertyInfo[] FetchProperties(Type type, Type[] attributesToIgnore);
    [ExtensionAttribute]
public static ConstructorInfo[] FecthConstructors(Type type);
    [ExtensionAttribute]
public static FieldInfo[] FetchFields(Type type);
    [ExtensionAttribute]
public static MethodInfo[] FetchMethods(Type type);
    [ExtensionAttribute]
public static MethodInfo[] FetchStaticMethods(Type type);
    [ExtensionAttribute]
public static object CreateWithDefault(Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T CreateWithDefault(Type type);
    [ExtensionAttribute]
public static object CreateWithDefaultConstructorPropertiesAndField(Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T CreateWithDefaultConstructorPropertiesAndField(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.StaticMethodInfoWrapper : object {
    private MethodInfo _method;
    public StaticMethodInfoWrapper(MethodInfo methodInfo);
    public object Invoke(Object[] inputs);
    [NullableContextAttribute("2")]
public TResult Invoke(Object[] inputs);
    [AsyncStateMachineAttribute("System.Reflection.StaticMethodInfoWrapper/<InvokeAsync>d__4")]
public ValueTask`1<object> InvokeAsync(Object[] inputs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.TypeShowcase : object {
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <Primitives>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <NonPrimitives>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <FlatProperties>k__BackingField;
    public List`1<BaseProperty> Properties { get; }
    public List`1<BaseProperty> Primitives { get; }
    public List`1<BaseProperty> NonPrimitives { get; }
    public List`1<BaseProperty> FlatProperties { get; }
    public TypeShowcase(Type type, IFurtherParameter[] furtherParameters);
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_Properties();
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_Primitives();
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_NonPrimitives();
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_FlatProperties();
    [IteratorStateMachineAttribute("System.Reflection.TypeShowcase/<GetPrimitives>d__13")]
private IEnumerable`1<BaseProperty> GetPrimitives();
    [IteratorStateMachineAttribute("System.Reflection.TypeShowcase/<GetNonPrimitives>d__14")]
private IEnumerable`1<BaseProperty> GetNonPrimitives();
    [IteratorStateMachineAttribute("System.Reflection.TypeShowcase/<GetAllPropertiesAsFlat>d__15")]
private IEnumerable`1<BaseProperty> GetAllPropertiesAsFlat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Security.Cryptography.CryptoExtensions : object {
    [ExtensionAttribute]
public static string ToHash(string message);
    [ExtensionAttribute]
public static string ToHash(T message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Stopwatch : object {
    public static StopwatchStart Start();
    [ExtensionAttribute]
public static StopwatchResult Monitor(Action action);
    [AsyncStateMachineAttribute("System.Stopwatch/<MonitorAsync>d__2")]
[ExtensionAttribute]
public static Task`1<StopwatchResult> MonitorAsync(Func`1<Task> action);
    [AsyncStateMachineAttribute("System.Stopwatch/<MonitorAsync>d__3")]
[ExtensionAttribute]
public static Task`1<StopwatchResult> MonitorAsync(Task action);
    [AsyncStateMachineAttribute("System.Stopwatch/<MonitorAsync>d__4`1")]
[ExtensionAttribute]
public static Task`1<ValueTuple`2<T, StopwatchResult>> MonitorAsync(Func`1<Task`1<T>> action);
    [AsyncStateMachineAttribute("System.Stopwatch/<MonitorAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<ValueTuple`2<T, StopwatchResult>> MonitorAsync(Task`1<T> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.StopwatchResult : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Stop>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public DateTime Start { get; public set; }
    public DateTime Stop { get; public set; }
    public TimeSpan Span { get; }
    public StopwatchResult(DateTime Start, DateTime Stop);
    [CompilerGeneratedAttribute]
private StopwatchResult(StopwatchResult original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Stop();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Stop(DateTime value);
    public TimeSpan get_Span();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StopwatchResult left, StopwatchResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StopwatchResult left, StopwatchResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(StopwatchResult other);
    [CompilerGeneratedAttribute]
public StopwatchResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(DateTime& Start, DateTime& Stop);
}
public class System.StopwatchStart : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    public DateTime Start { get; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [NullableContextAttribute("1")]
public StopwatchResult Stop();
}
[ExtensionAttribute]
public static class System.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string Replace(string value, string oldValue, string newValue, int occurences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Text.Base45Extensions : object {
    private static string Label;
    private static Dictionary`2<int, string> Values;
    private static Dictionary`2<char, int> ValuesAsString;
    private static int O45X45;
    private static Base45Extensions();
    [ExtensionAttribute]
public static string ToBase45(string value);
    [ExtensionAttribute]
public static string ToBase45(T entity);
    [ExtensionAttribute]
public static string FromBase45(string encondedValue);
    [ExtensionAttribute]
public static T FromBase45(string encodedValue);
    private static Tuple`3<int, int, Nullable`1<int>> Calculate(int a, Nullable`1<int> b);
    private static Tuple`2<int, Nullable`1<int>> Calculate(int c, int d, Nullable`1<int> e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Text.Base64Extensions : object {
    [ExtensionAttribute]
public static string ToBase64(string value);
    [ExtensionAttribute]
public static string ToBase64(T entity);
    [ExtensionAttribute]
public static string FromBase64(string encodedValue);
    [ExtensionAttribute]
public static T FromBase64(string encodedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Text.Csv.CsvEngine : object {
    public static string Convert(IEnumerable`1<T> values);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <Convert>g__ConvertOne|3_1(List`1<BaseProperty> properties, Int32[] indexes, <>c__DisplayClass3_0`1& , <>c__DisplayClass3_1`1& );
    [CompilerGeneratedAttribute]
internal static string <Convert>g__CheckIfContainsEscapeCharacters|3_0(string value);
}
[ExtensionAttribute]
public static class System.Text.Csv.CsvEngineExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToCsv(IEnumerable`1<T> values);
}
public enum System.Text.EncodingType : Enum {
    public int value__;
    public static EncodingType Default;
    public static EncodingType ASCII;
    public static EncodingType UTF8;
    public static EncodingType UTF7;
    public static EncodingType UTF32;
    public static EncodingType Latin1;
    public static EncodingType BigEndianUnicode;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Text.Json.JsonExtensions : object {
    private static MethodInfo s_fromJsonMethod;
    private static JsonExtensions();
    [ExtensionAttribute]
public static string ToJson(T entity, JsonSerializerOptions options);
    [ExtensionAttribute]
public static T FromJson(string entity, JsonSerializerOptions options);
    [ExtensionAttribute]
public static T FromJson(Byte[] entity, JsonSerializerOptions options);
    [ExtensionAttribute]
public static object FromJson(string entity, Type type, JsonSerializerOptions options);
    [AsyncStateMachineAttribute("System.Text.Json.JsonExtensions/<FromJsonAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<T> FromJsonAsync(Stream entity, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Text.Minimization.ArraySerializer : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual object Deserialize(Type type, string value, int deep);
    public sealed virtual string Serialize(Type type, object value, int deep);
    public sealed virtual bool IsValid(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Text.Minimization.DictionarySerializer : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsValid(Type type);
    public sealed virtual object Deserialize(Type type, string value, int deep);
    public sealed virtual string Serialize(Type type, object value, int deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Text.Minimization.EnumerableSerializer : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsValid(Type type);
    public sealed virtual object Deserialize(Type type, string value, int deep);
    public sealed virtual string Serialize(Type type, object value, int deep);
}
[NullableContextAttribute("1")]
internal interface System.Text.Minimization.IMinimizationInterpreter {
    public int Priority { get; }
    public abstract virtual string Serialize(Type type, object value, int deep);
    public abstract virtual object Deserialize(Type type, string value, int deep);
    public abstract virtual bool IsValid(Type type);
    public abstract virtual int get_Priority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Text.Minimization.MinimizationConvertExtensions : object {
    [ExtensionAttribute]
public static string ToMinimize(T data, Nullable`1<char> startSeparator);
    [ExtensionAttribute]
public static T FromMinimization(string value, Nullable`1<char> startSeparator);
}
[AttributeUsageAttribute("2048")]
public class System.Text.Minimization.MinimizationIgnore : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.Text.Minimization.MinimizationPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Column { get; }
    public MinimizationPropertyAttribute(int column);
    [CompilerGeneratedAttribute]
public int get_Column();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Text.Minimization.ObjectSerializer : object {
    private static Type s_ignore;
    private static Dictionary`2<string, PropertyInfo[]> s_properties;
    private static object s_semaphore;
    private static Type s_csvProperty;
    public int Priority { get; }
    private static ObjectSerializer();
    public sealed virtual int get_Priority();
    public sealed virtual bool IsValid(Type type);
    private static PropertyInfo[] GetOrderedProperties(Type type);
    public sealed virtual object Deserialize(Type type, string value, int deep);
    public sealed virtual string Serialize(Type type, object value, int deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Text.Minimization.PrimitiveSerializer : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsValid(Type type);
    public sealed virtual object Deserialize(Type type, string value, int deep);
    public sealed virtual string Serialize(Type type, object value, int deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Text.Minimization.Serializer : object {
    [CompilerGeneratedAttribute]
private static Serializer <Instance>k__BackingField;
    private List`1<IMinimizationInterpreter> _interpreters;
    public int Priority { get; }
    public static Serializer Instance { get; }
    private static Serializer();
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public static Serializer get_Instance();
    public IMinimizationInterpreter GetRightService(Type type);
    public sealed virtual object Deserialize(Type type, string value, int deep);
    public sealed virtual string Serialize(Type type, object value, int deep);
    public sealed virtual bool IsValid(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Text.StringExtensions : object {
    [ExtensionAttribute]
public static string ToUpperCaseFirst(string value);
    [ExtensionAttribute]
public static Task`1<string> ConvertToStringAsync(Stream entity);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static string ConvertToString(Memory`1<byte> buffer, EncodingType type);
    [AsyncIteratorStateMachineAttribute("System.Text.StringExtensions/<ReadLinesAsync>d__3")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<string> ReadLinesAsync(Stream entity);
    [ExtensionAttribute]
public static string ConvertToString(Stream entity);
    [ExtensionAttribute]
public static Stream ToStream(string entity);
    [ExtensionAttribute]
public static string ConvertToString(Byte[] entity, EncodingType type);
    [ExtensionAttribute]
public static Byte[] ToByteArray(string entity, EncodingType type);
    [ExtensionAttribute]
public static bool ContainsAtLeast(string value, int count, char contained);
}
public static class System.Threading.Tasks.RystemTask : object {
    [CompilerGeneratedAttribute]
private static bool <WaitYourStartingThread>k__BackingField;
    public static bool WaitYourStartingThread { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_WaitYourStartingThread();
    [CompilerGeneratedAttribute]
public static void set_WaitYourStartingThread(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Threading.Tasks.RystemTaskExtensions : object {
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable NoContext(Task task);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable`1<T> NoContext(Task`1<T> task);
    [ExtensionAttribute]
public static ConfiguredValueTaskAwaitable NoContext(ValueTask task);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ConfiguredValueTaskAwaitable`1<T> NoContext(ValueTask`1<T> task);
    [ExtensionAttribute]
public static ValueTask`1<List`1<T>> ToListAsync(IAsyncEnumerable`1<T> items);
    [ExtensionAttribute]
public static void ToResult(Task task);
    [ExtensionAttribute]
public static T ToResult(Task`1<T> task);
    [ExtensionAttribute]
public static void ToResult(ValueTask task);
    [ExtensionAttribute]
public static T ToResult(ValueTask`1<T> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.Tasks.TaskManager : object {
    public static Task WhenAll(Func`3<int, CancellationToken, Task> task, int times, int concurrentTask, bool runEverytimeASlotIsFree, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskManager/<WhenAll>d__1`1")]
public static Task WhenAll(Func`3<T, CancellationToken, Task> task, IList`1<T> inputs, int concurrentTask, bool runEverytimeASlotIsFree, CancellationToken cancellationToken);
    public static Task WhenAtLeast(Func`3<int, CancellationToken, Task> task, int times, int atLeast, int concurrentTask, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskManager/<WhenAtLeast>d__3`1")]
public static Task WhenAtLeast(Func`3<T, CancellationToken, Task> task, IList`1<T> inputs, int atLeast, int concurrentTask, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Try : object {
    [AsyncStateMachineAttribute("System.Try/<ExecuteWithTryAndRetryEngineAsync>d__0`1")]
private static Task`1<TryResponse`1<T>> ExecuteWithTryAndRetryEngineAsync(Func`1<Task`1<T>> function, Action`1<TryBehavior> behavior);
    public static TryResponse`1<T> WithDefaultOnCatch(Func`1<T> function, Action`1<TryBehavior> behavior);
    public static Exception WithDefaultOnCatch(Action function, Action`1<TryBehavior> behavior);
    public static Task`1<TryResponse`1<T>> WithDefaultOnCatchAsync(Func`1<Task`1<T>> function, Action`1<TryBehavior> behavior);
    [AsyncStateMachineAttribute("System.Try/<WithDefaultOnCatchAsync>d__4")]
public static Task`1<Exception> WithDefaultOnCatchAsync(Func`1<Task> function, Action`1<TryBehavior> behavior);
    [AsyncStateMachineAttribute("System.Try/<WithDefaultOnCatchValueTaskAsync>d__5`1")]
public static Task`1<TryResponse`1<T>> WithDefaultOnCatchValueTaskAsync(Func`1<ValueTask`1<T>> function, Action`1<TryBehavior> behavior);
    [AsyncStateMachineAttribute("System.Try/<WithDefaultOnCatchValueTaskAsync>d__6")]
public static Task`1<Exception> WithDefaultOnCatchValueTaskAsync(Func`1<ValueTask> function, Action`1<TryBehavior> behavior);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.TryBehavior : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Exception, bool> <RetryUntil>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WaitBetweenRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private static TryBehavior <Default>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Exception, bool> RetryUntil { get; public set; }
    public int MaxRetry { get; public set; }
    public int WaitBetweenRetry { get; public set; }
    public static TryBehavior Default { get; }
    private static TryBehavior();
    [CompilerGeneratedAttribute]
public Func`2<Exception, bool> get_RetryUntil();
    [CompilerGeneratedAttribute]
public void set_RetryUntil(Func`2<Exception, bool> value);
    [CompilerGeneratedAttribute]
public int get_MaxRetry();
    [CompilerGeneratedAttribute]
public void set_MaxRetry(int value);
    [CompilerGeneratedAttribute]
public int get_WaitBetweenRetry();
    [CompilerGeneratedAttribute]
public void set_WaitBetweenRetry(int value);
    [CompilerGeneratedAttribute]
public static TryBehavior get_Default();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.TryResponse`1 : object {
    [CompilerGeneratedAttribute]
private T <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public T Entity { get; public set; }
    public Exception Exception { get; public set; }
    public TryResponse`1(T Entity, Exception Exception);
    [CompilerGeneratedAttribute]
private TryResponse`1(TryResponse`1<T> original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public T get_Entity();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Entity(T value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Exception(Exception value);
    [NullableContextAttribute("1")]
public static T op_Implicit(TryResponse`1<T> response);
    [NullableContextAttribute("1")]
public static bool op_Implicit(TryResponse`1<T> response);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TryResponse`1<T> left, TryResponse`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TryResponse`1<T> left, TryResponse`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TryResponse`1<T> other);
    [CompilerGeneratedAttribute]
public TryResponse`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(T& Entity, Exception& Exception);
}
