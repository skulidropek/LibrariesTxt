public class OpenQA.Selenium.Support.Events.EventFiringWebDriver : object {
    private IWebDriver driver;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverNavigationEventArgs> Navigating;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverNavigationEventArgs> Navigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverNavigationEventArgs> NavigatingBack;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverNavigationEventArgs> NavigatedBack;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverNavigationEventArgs> NavigatingForward;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverNavigationEventArgs> NavigatedForward;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebElementEventArgs> ElementClicking;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebElementEventArgs> ElementClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebElementValueEventArgs> ElementValueChanging;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebElementValueEventArgs> ElementValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<FindElementEventArgs> FindingElement;
    [CompilerGeneratedAttribute]
private EventHandler`1<FindElementEventArgs> FindElementCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetShadowRootEventArgs> GettingShadowRoot;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetShadowRootEventArgs> GetShadowRootCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverScriptEventArgs> ScriptExecuting;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverScriptEventArgs> ScriptExecuted;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebDriverExceptionEventArgs> ExceptionThrown;
    public IWebDriver WrappedDriver { get; }
    public string Url { get; public set; }
    public string Title { get; }
    public string PageSource { get; }
    public string CurrentWindowHandle { get; }
    public ReadOnlyCollection`1<string> WindowHandles { get; }
    public EventFiringWebDriver(IWebDriver parentDriver);
    [CompilerGeneratedAttribute]
public void add_Navigating(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Navigating(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Navigated(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_NavigatingBack(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NavigatingBack(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_NavigatedBack(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NavigatedBack(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_NavigatingForward(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NavigatingForward(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_NavigatedForward(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NavigatedForward(EventHandler`1<WebDriverNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ElementClicking(EventHandler`1<WebElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ElementClicking(EventHandler`1<WebElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ElementClicked(EventHandler`1<WebElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ElementClicked(EventHandler`1<WebElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ElementValueChanging(EventHandler`1<WebElementValueEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ElementValueChanging(EventHandler`1<WebElementValueEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ElementValueChanged(EventHandler`1<WebElementValueEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ElementValueChanged(EventHandler`1<WebElementValueEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_FindingElement(EventHandler`1<FindElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FindingElement(EventHandler`1<FindElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_FindElementCompleted(EventHandler`1<FindElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FindElementCompleted(EventHandler`1<FindElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_GettingShadowRoot(EventHandler`1<GetShadowRootEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GettingShadowRoot(EventHandler`1<GetShadowRootEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_GetShadowRootCompleted(EventHandler`1<GetShadowRootEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetShadowRootCompleted(EventHandler`1<GetShadowRootEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ScriptExecuting(EventHandler`1<WebDriverScriptEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ScriptExecuting(EventHandler`1<WebDriverScriptEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ScriptExecuted(EventHandler`1<WebDriverScriptEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ScriptExecuted(EventHandler`1<WebDriverScriptEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ExceptionThrown(EventHandler`1<WebDriverExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionThrown(EventHandler`1<WebDriverExceptionEventArgs> value);
    public sealed virtual IWebDriver get_WrappedDriver();
    public sealed virtual string get_Url();
    public sealed virtual void set_Url(string value);
    public sealed virtual string get_Title();
    public sealed virtual string get_PageSource();
    public sealed virtual string get_CurrentWindowHandle();
    public sealed virtual ReadOnlyCollection`1<string> get_WindowHandles();
    public sealed virtual void Close();
    public sealed virtual void Quit();
    public sealed virtual IOptions Manage();
    public sealed virtual INavigation Navigate();
    public sealed virtual ITargetLocator SwitchTo();
    public sealed virtual IWebElement FindElement(By by);
    public sealed virtual ReadOnlyCollection`1<IWebElement> FindElements(By by);
    public sealed virtual void Dispose();
    public sealed virtual object ExecuteScript(string script, Object[] args);
    public sealed virtual object ExecuteScript(PinnedScript script, Object[] args);
    public sealed virtual object ExecuteAsyncScript(string script, Object[] args);
    public sealed virtual Screenshot GetScreenshot();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnNavigating(WebDriverNavigationEventArgs e);
    protected virtual void OnNavigated(WebDriverNavigationEventArgs e);
    protected virtual void OnNavigatingBack(WebDriverNavigationEventArgs e);
    protected virtual void OnNavigatedBack(WebDriverNavigationEventArgs e);
    protected virtual void OnNavigatingForward(WebDriverNavigationEventArgs e);
    protected virtual void OnNavigatedForward(WebDriverNavigationEventArgs e);
    protected virtual void OnElementClicking(WebElementEventArgs e);
    protected virtual void OnElementClicked(WebElementEventArgs e);
    protected virtual void OnElementValueChanging(WebElementValueEventArgs e);
    protected virtual void OnElementValueChanged(WebElementValueEventArgs e);
    protected virtual void OnFindingElement(FindElementEventArgs e);
    protected virtual void OnFindElementCompleted(FindElementEventArgs e);
    protected virtual void OnGettingShadowRoot(GetShadowRootEventArgs e);
    protected virtual void OnGetShadowRootCompleted(GetShadowRootEventArgs e);
    protected virtual void OnScriptExecuting(WebDriverScriptEventArgs e);
    protected virtual void OnScriptExecuted(WebDriverScriptEventArgs e);
    protected virtual void OnException(WebDriverExceptionEventArgs e);
    private static Object[] UnwrapElementArguments(Object[] args);
    private IWebElement WrapElement(IWebElement underlyingElement);
}
public class OpenQA.Selenium.Support.Events.FindElementEventArgs : EventArgs {
    private IWebDriver driver;
    private IWebElement element;
    private By method;
    public IWebDriver Driver { get; }
    public IWebElement Element { get; }
    public By FindMethod { get; }
    public FindElementEventArgs(IWebDriver driver, By method);
    public FindElementEventArgs(IWebDriver driver, IWebElement element, By method);
    public IWebDriver get_Driver();
    public IWebElement get_Element();
    public By get_FindMethod();
}
public class OpenQA.Selenium.Support.Events.GetShadowRootEventArgs : EventArgs {
    private IWebDriver driver;
    private ISearchContext searchContext;
    public IWebDriver Driver { get; }
    public ISearchContext SearchContext { get; }
    public GetShadowRootEventArgs(IWebDriver driver, ISearchContext searchContext);
    public IWebDriver get_Driver();
    public ISearchContext get_SearchContext();
}
public class OpenQA.Selenium.Support.Events.WebDriverExceptionEventArgs : EventArgs {
    private Exception thrownException;
    private IWebDriver driver;
    public Exception ThrownException { get; }
    public IWebDriver Driver { get; }
    public WebDriverExceptionEventArgs(IWebDriver driver, Exception thrownException);
    public Exception get_ThrownException();
    public IWebDriver get_Driver();
}
public class OpenQA.Selenium.Support.Events.WebDriverNavigationEventArgs : EventArgs {
    private string url;
    private IWebDriver driver;
    public string Url { get; }
    public IWebDriver Driver { get; }
    public WebDriverNavigationEventArgs(IWebDriver driver);
    public WebDriverNavigationEventArgs(IWebDriver driver, string url);
    public string get_Url();
    public IWebDriver get_Driver();
}
public class OpenQA.Selenium.Support.Events.WebDriverScriptEventArgs : EventArgs {
    private IWebDriver driver;
    private string script;
    public IWebDriver Driver { get; }
    public string Script { get; }
    public WebDriverScriptEventArgs(IWebDriver driver, string script);
    public IWebDriver get_Driver();
    public string get_Script();
}
public class OpenQA.Selenium.Support.Events.WebElementEventArgs : EventArgs {
    private IWebDriver driver;
    private IWebElement element;
    public IWebDriver Driver { get; }
    public IWebElement Element { get; }
    public WebElementEventArgs(IWebDriver driver, IWebElement element);
    public IWebDriver get_Driver();
    public IWebElement get_Element();
}
public class OpenQA.Selenium.Support.Events.WebElementValueEventArgs : WebElementEventArgs {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; private set; }
    public WebElementValueEventArgs(IWebDriver driver, IWebElement element, string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
[ExtensionAttribute]
public static class OpenQA.Selenium.Support.Extensions.WebDriverExtensions : object {
    [ExtensionAttribute]
public static Screenshot TakeScreenshot(IWebDriver driver);
    [ExtensionAttribute]
public static void ExecuteJavaScript(IWebDriver driver, string script, Object[] args);
    [ExtensionAttribute]
public static T ExecuteJavaScript(IWebDriver driver, string script, Object[] args);
    private static object ExecuteJavaScriptInternal(IWebDriver driver, string script, Object[] args);
    private static T GetDriverAs(IWebDriver driver);
}
public interface OpenQA.Selenium.Support.UI.ILoadableComponent {
    public abstract virtual ILoadableComponent Load();
}
public abstract class OpenQA.Selenium.Support.UI.LoadableComponent`1 : object {
    [CompilerGeneratedAttribute]
private string <UnableToLoadMessage>k__BackingField;
    public string UnableToLoadMessage { get; public set; }
    protected bool IsLoaded { get; }
    [CompilerGeneratedAttribute]
public virtual string get_UnableToLoadMessage();
    [CompilerGeneratedAttribute]
public virtual void set_UnableToLoadMessage(string value);
    protected bool get_IsLoaded();
    public virtual T Load();
    private sealed virtual override ILoadableComponent OpenQA.Selenium.Support.UI.ILoadableComponent.Load();
    protected virtual void HandleLoadError(WebDriverException ex);
    protected abstract virtual void ExecuteLoad();
    protected abstract virtual bool EvaluateLoadedStatus();
    protected T TryLoad();
}
public class OpenQA.Selenium.Support.UI.LoadableComponentException : WebDriverException {
    public LoadableComponentException(string message);
    public LoadableComponentException(string message, Exception innerException);
    protected LoadableComponentException(SerializationInfo info, StreamingContext context);
}
public class OpenQA.Selenium.Support.UI.PopupWindowFinder : object {
    private IWebDriver driver;
    private TimeSpan timeout;
    private TimeSpan sleepInterval;
    private static TimeSpan DefaultTimeout { get; }
    private static TimeSpan DefaultSleepInterval { get; }
    public PopupWindowFinder(IWebDriver driver);
    public PopupWindowFinder(IWebDriver driver, TimeSpan timeout);
    public PopupWindowFinder(IWebDriver driver, TimeSpan timeout, TimeSpan sleepInterval);
    private static TimeSpan get_DefaultTimeout();
    private static TimeSpan get_DefaultSleepInterval();
    public string Click(IWebElement element);
    public string Invoke(Action popupMethod);
    private static IList`1<string> GetDifference(IList`1<string> existingHandles, IList`1<string> currentHandles);
}
public class OpenQA.Selenium.Support.UI.SelectElement : object {
    private IWebElement element;
    [CompilerGeneratedAttribute]
private bool <IsMultiple>k__BackingField;
    public IWebElement WrappedElement { get; }
    public bool IsMultiple { get; private set; }
    public IList`1<IWebElement> Options { get; }
    public IWebElement SelectedOption { get; }
    public IList`1<IWebElement> AllSelectedOptions { get; }
    public SelectElement(IWebElement element);
    public sealed virtual IWebElement get_WrappedElement();
    [CompilerGeneratedAttribute]
public bool get_IsMultiple();
    [CompilerGeneratedAttribute]
private void set_IsMultiple(bool value);
    public IList`1<IWebElement> get_Options();
    public IWebElement get_SelectedOption();
    public IList`1<IWebElement> get_AllSelectedOptions();
    public void SelectByText(string text, bool partialMatch);
    public void SelectByValue(string value);
    public void SelectByIndex(int index);
    public void DeselectAll();
    public void DeselectByText(string text);
    public void DeselectByValue(string value);
    public void DeselectByIndex(int index);
    private static string EscapeQuotes(string toEscape);
    private static string GetLongestSubstringWithoutSpace(string s);
    private static void SetSelected(IWebElement option, bool select);
}
public abstract class OpenQA.Selenium.Support.UI.SlowLoadableComponent`1 : LoadableComponent`1<T> {
    private IClock clock;
    private TimeSpan timeout;
    private TimeSpan sleepInterval;
    public TimeSpan SleepInterval { get; public set; }
    protected TimeSpan Timeout { get; }
    protected IClock Clock { get; }
    protected SlowLoadableComponent`1(TimeSpan timeout);
    protected SlowLoadableComponent`1(TimeSpan timeout, IClock clock);
    public TimeSpan get_SleepInterval();
    public void set_SleepInterval(TimeSpan value);
    protected TimeSpan get_Timeout();
    protected IClock get_Clock();
    public virtual T Load();
    protected virtual void HandleErrors();
    protected virtual void Wait();
}
public class OpenQA.Selenium.Support.UI.UnexpectedTagNameException : WebDriverException {
    public UnexpectedTagNameException(string expected, string actual);
    public UnexpectedTagNameException(string message);
    public UnexpectedTagNameException(string message, Exception innerException);
    protected UnexpectedTagNameException(SerializationInfo info, StreamingContext context);
}
