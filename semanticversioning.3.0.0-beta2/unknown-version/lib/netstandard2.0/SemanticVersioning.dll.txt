internal class SemanticVersioning.Comparator : object {
    public Operator ComparatorType;
    public Version Version;
    private static string pattern;
    public Comparator(string input);
    public Comparator(Operator comparatorType, Version comparatorVersion);
    public static Tuple`2<int, Comparator> TryParse(string input);
    private static Operator ParseComparatorType(string input);
    public bool IsSatisfied(Version version);
    public bool Intersects(Comparator other);
    public virtual string ToString();
    public sealed virtual bool Equals(Comparator other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class SemanticVersioning.ComparatorSet : object {
    private List`1<Comparator> _comparators;
    public ComparatorSet(string spec);
    private ComparatorSet(IEnumerable`1<Comparator> comparators);
    public bool IsSatisfied(Version version, bool includePrerelease);
    public ComparatorSet Intersect(ComparatorSet other);
    public sealed virtual bool Equals(ComparatorSet other);
    public virtual bool Equals(object other);
    public virtual string ToString();
    public virtual int GetHashCode();
}
internal static class SemanticVersioning.Desugarer : object {
    private static string versionChars;
    public static Tuple`2<int, Comparator[]> TildeRange(string spec);
    public static Tuple`2<int, Comparator[]> CaretRange(string spec);
    public static Tuple`2<int, Comparator[]> HyphenRange(string spec);
    public static Tuple`2<int, Comparator[]> StarRange(string spec);
    private static Comparator[] MinMaxComparators(Version minVersion, Version maxVersion, Operator minOperator, Operator maxOperator);
}
internal class SemanticVersioning.PartialVersion : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreRelease>k__BackingField;
    private static Regex regex;
    public Nullable`1<int> Major { get; public set; }
    public Nullable`1<int> Minor { get; public set; }
    public Nullable`1<int> Patch { get; public set; }
    public string PreRelease { get; public set; }
    public PartialVersion(string input);
    private static PartialVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Major();
    [CompilerGeneratedAttribute]
public void set_Major(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Minor();
    [CompilerGeneratedAttribute]
public void set_Minor(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Patch();
    [CompilerGeneratedAttribute]
public void set_Patch(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PreRelease();
    [CompilerGeneratedAttribute]
public void set_PreRelease(string value);
    public Version ToZeroVersion();
    public bool IsFull();
}
internal static class SemanticVersioning.PreReleaseVersion : object {
    public static int Compare(string a, string b);
    public static string Clean(string input);
    [IteratorStateMachineAttribute("SemanticVersioning.PreReleaseVersion/<Identifiers>d__3")]
private static IEnumerable`1<Identifier> Identifiers(string input);
    [IteratorStateMachineAttribute("SemanticVersioning.PreReleaseVersion/<IdentifierComparisons>d__4")]
private static IEnumerable`1<int> IdentifierComparisons(IEnumerable`1<Identifier> aIdentifiers, IEnumerable`1<Identifier> bIdentifiers);
    [IteratorStateMachineAttribute("SemanticVersioning.PreReleaseVersion/<ZipIdentifiers>d__5")]
private static IEnumerable`1<Tuple`2<Identifier, Identifier>> ZipIdentifiers(IEnumerable`1<Identifier> first, IEnumerable`1<Identifier> second);
}
public class SemanticVersioning.Range : object {
    private ComparatorSet[] _comparatorSets;
    private string _rangeSpec;
    public Range(string rangeSpec, bool loose);
    private Range(IEnumerable`1<ComparatorSet> comparatorSets);
    public bool IsSatisfied(Version version, bool includePrerelease);
    public bool IsSatisfied(string versionString, bool loose, bool includePrerelease);
    public IEnumerable`1<Version> Satisfying(IEnumerable`1<Version> versions, bool includePrerelease);
    public IEnumerable`1<string> Satisfying(IEnumerable`1<string> versions, bool loose, bool includePrerelease);
    public Version MaxSatisfying(IEnumerable`1<Version> versions, bool includePrerelease);
    public string MaxSatisfying(IEnumerable`1<string> versionStrings, bool loose, bool includePrerelease);
    public Range Intersect(Range other);
    public virtual string ToString();
    public sealed virtual bool Equals(Range other);
    public virtual bool Equals(object other);
    public static bool op_Equality(Range a, Range b);
    public static bool op_Inequality(Range a, Range b);
    public virtual int GetHashCode();
    public static bool IsSatisfied(string rangeSpec, string versionString, bool loose, bool includePrerelease);
    public static IEnumerable`1<string> Satisfying(string rangeSpec, IEnumerable`1<string> versions, bool loose, bool includePrerelease);
    public static string MaxSatisfying(string rangeSpec, IEnumerable`1<string> versionStrings, bool loose, bool includePrerelease);
    public static Range Parse(string rangeSpec, bool loose);
    public static bool TryParse(string rangeSpec, Range& result);
    public static bool TryParse(string rangeSpec, bool loose, Range& result);
    [IteratorStateMachineAttribute("SemanticVersioning.Range/<ValidVersions>d__23")]
private IEnumerable`1<Version> ValidVersions(IEnumerable`1<string> versionStrings, bool loose);
}
public class SemanticVersioning.Version : object {
    private string _inputString;
    private int _major;
    private int _minor;
    private int _patch;
    private string _preRelease;
    private string _build;
    private static Regex strictRegex;
    private static Regex looseRegex;
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public string PreRelease { get; }
    public string Build { get; }
    public bool IsPreRelease { get; }
    public Version(string input, bool loose);
    public Version(int major, int minor, int patch, string preRelease, string build);
    private static Version();
    public int get_Major();
    public int get_Minor();
    public int get_Patch();
    public string get_PreRelease();
    public string get_Build();
    public bool get_IsPreRelease();
    public Version BaseVersion();
    public virtual string ToString();
    public string Clean();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Version other);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(Version other);
    [IteratorStateMachineAttribute("SemanticVersioning.Version/<PartComparisons>d__29")]
private IEnumerable`1<int> PartComparisons(Version other);
    public virtual bool Equals(object other);
    public static Version Parse(string input, bool loose);
    public static bool TryParse(string input, Version& result);
    public static bool TryParse(string input, bool loose, Version& result);
    public static bool op_Equality(Version a, Version b);
    public static bool op_Inequality(Version a, Version b);
    public static bool op_GreaterThan(Version a, Version b);
    public static bool op_GreaterThanOrEqual(Version a, Version b);
    public static bool op_LessThan(Version a, Version b);
    public static bool op_LessThanOrEqual(Version a, Version b);
}
