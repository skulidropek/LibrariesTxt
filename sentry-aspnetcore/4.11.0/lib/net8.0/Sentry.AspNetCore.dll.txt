[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseSentry(IApplicationBuilder app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNetCore.Builder.SentryTracingMiddlewareExtensions : object {
    internal static string AlreadyRegisteredWarning;
    private static string UseSentryTracingKey;
    private static string ShouldRegisterKey;
    [ExtensionAttribute]
internal static bool IsSentryTracingRegistered(IApplicationBuilder builder);
    [ExtensionAttribute]
internal static void StoreRegistrationDecision(IApplicationBuilder builder, bool shouldRegisterSentryTracing);
    [ExtensionAttribute]
internal static bool ShouldRegisterSentryTracing(IApplicationBuilder builder);
    [ExtensionAttribute]
internal static IApplicationBuilder UseSentryTracingInternal(IApplicationBuilder builder);
    [ExtensionAttribute]
public static IApplicationBuilder UseSentryTracing(IApplicationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNetCore.Hosting.SentryWebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseSentry(IWebHostBuilder builder);
    [ExtensionAttribute]
public static IWebHostBuilder UseSentry(IWebHostBuilder builder, string dsn);
    [ExtensionAttribute]
public static IWebHostBuilder UseSentry(IWebHostBuilder builder, Action`1<SentryAspNetCoreOptions> configureOptions);
    [ExtensionAttribute]
public static IWebHostBuilder UseSentry(IWebHostBuilder builder, Action`2<WebHostBuilderContext, SentryAspNetCoreOptions> configureOptions);
    [ExtensionAttribute]
public static IWebHostBuilder UseSentry(IWebHostBuilder builder, Action`1<ISentryBuilder> configureSentry);
    [ExtensionAttribute]
public static IWebHostBuilder UseSentry(IWebHostBuilder builder, Action`2<WebHostBuilderContext, ISentryBuilder> configureSentry);
    [ExtensionAttribute]
public static void AddSentryTunneling(IServiceCollection services, String[] hostnames);
    [ExtensionAttribute]
public static void UseSentryTunneling(IApplicationBuilder builder, string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.10.36612")]
internal static class Microsoft.Extensions.Configuration.Binder.SourceGeneration.<BindingExtensions_g>FA326D3CAB2EA305951D81634E89E806F24733EB8399C6B3F2E782244C9E6A041__BindingExtensions : object {
    private static Lazy`1<HashSet`1<string>> s_configKeys_BindableSentryAspNetCoreOptions;
    private static <BindingExtensions_g>FA326D3CAB2EA305951D81634E89E806F24733EB8399C6B3F2E782244C9E6A041__BindingExtensions();
    [ExtensionAttribute]
[<BindingExtensions_g>FA326D3CAB2EA305951D81634E89E806F24733EB8399C6B3F2E782244C9E6A041__InterceptsLocationAttribute("/_/src/Sentry.AspNetCore/SentryAspNetCoreOptionsSetup.cs", "64", "17")]
public static void Bind_BindableSentryAspNetCoreOptions(IConfiguration configuration, object instance);
    public static void BindCore(IConfiguration configuration, List`1& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, Dictionary`2& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, BindableSentryAspNetCoreOptions& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void ValidateConfigurationKeys(Type type, Lazy`1<HashSet`1<string>> keys, IConfiguration configuration, BinderOptions binderOptions);
    public static IConfiguration AsConfigWithChildren(IConfiguration configuration);
    public static bool ParseBool(string value, Func`1<string> getPath);
    [NullableContextAttribute("0")]
public static T ParseEnum(string value, Func`1<string> getPath);
    public static int ParseInt(string value, Func`1<string> getPath);
    public static float ParseFloat(string value, Func`1<string> getPath);
    public static TimeSpan ParseSystemTimeSpan(string value, Func`1<string> getPath);
    public static double ParseDouble(string value, Func`1<string> getPath);
    public static long ParseLong(string value, Func`1<string> getPath);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ISentryBuilder AddSentry(IServiceCollection services);
}
internal class Sentry.AspNetCore.AspNetCoreEventProcessor : object {
    [NullableContextAttribute("1")]
public sealed virtual SentryEvent Process(SentryEvent event);
}
internal class Sentry.AspNetCore.AspNetCoreExceptionProcessor : object {
    [NullableContextAttribute("1")]
public sealed virtual void Process(Exception exception, SentryEvent event);
}
internal class Sentry.AspNetCore.BindableSentryAspNetCoreOptions : BindableSentryLoggingOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeActivityData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RequestSize> <MaxRequestBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FlushOnCompletedRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FlushBeforeRequestCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AdjustStandardEnvironmentNameCasing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoRegisterTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CaptureBlockingCalls>k__BackingField;
    public Nullable`1<bool> IncludeActivityData { get; public set; }
    public Nullable`1<RequestSize> MaxRequestBodySize { get; public set; }
    public Nullable`1<bool> FlushOnCompletedRequest { get; public set; }
    public Nullable`1<bool> FlushBeforeRequestCompleted { get; public set; }
    public Nullable`1<bool> AdjustStandardEnvironmentNameCasing { get; public set; }
    public Nullable`1<bool> AutoRegisterTracing { get; public set; }
    public Nullable`1<bool> CaptureBlockingCalls { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeActivityData();
    [CompilerGeneratedAttribute]
public void set_IncludeActivityData(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RequestSize> get_MaxRequestBodySize();
    [CompilerGeneratedAttribute]
public void set_MaxRequestBodySize(Nullable`1<RequestSize> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FlushOnCompletedRequest();
    [CompilerGeneratedAttribute]
public void set_FlushOnCompletedRequest(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FlushBeforeRequestCompleted();
    [CompilerGeneratedAttribute]
public void set_FlushBeforeRequestCompleted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AdjustStandardEnvironmentNameCasing();
    [CompilerGeneratedAttribute]
public void set_AdjustStandardEnvironmentNameCasing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoRegisterTracing();
    [CompilerGeneratedAttribute]
public void set_AutoRegisterTracing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CaptureBlockingCalls();
    [CompilerGeneratedAttribute]
public void set_CaptureBlockingCalls(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
public void ApplyTo(SentryAspNetCoreOptions options);
}
internal static class Sentry.AspNetCore.Constants : object {
    [NullableAttribute("1")]
public static string SdkName;
}
internal class Sentry.AspNetCore.DefaultUserFactory : object {
    [NullableAttribute("2")]
private IHttpContextAccessor _httpContextAccessor;
    [NullableContextAttribute("1")]
public DefaultUserFactory(IHttpContextAccessor httpContextAccessor);
    [NullableContextAttribute("2")]
public sealed virtual SentryUser Create();
    [NullableContextAttribute("1")]
public SentryUser Create(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.AspNetCore.ExceptionHandlerFeatureProcessor : object {
    private string _originalMethod;
    private IExceptionHandlerFeature _exceptionHandlerFeature;
    public ExceptionHandlerFeatureProcessor(string originalMethod, IExceptionHandlerFeature exceptionHandlerFeature);
    public sealed virtual void Process(Exception exception, SentryEvent sentryEvent);
    internal void ApplyRouteTags(SentryEvent evt);
    internal void ApplyTransactionName(SentryEvent evt, string method);
    [NullableContextAttribute("2")]
internal string TryGetRouteTemplate();
}
[ExtensionAttribute]
internal static class Sentry.AspNetCore.Extensions.HeaderDictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Nullable`1<StringValues> GetValueOrDefault(IHeaderDictionary headers, string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.AspNetCore.Extensions.HttpContextExtensions : object {
    [ExtensionAttribute]
internal static string TryGetRouteTemplate(HttpContext context);
    [ExtensionAttribute]
internal static string TryGetCustomTransactionName(HttpContext context);
    [ExtensionAttribute]
public static string TryGetTransactionName(HttpContext context);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static SentryTraceHeader TryGetSentryTraceHeader(HttpContext context, SentryOptions options);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static BaggageHeader TryGetBaggageHeader(HttpContext context, SentryOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.AspNetCore.HttpRequestAdapter : object {
    [NullableAttribute("1")]
private HttpRequest _request;
    public Nullable`1<long> ContentLength { get; }
    public string ContentType { get; }
    public Stream Body { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> Form { get; }
    [NullableContextAttribute("1")]
public HttpRequestAdapter(HttpRequest request);
    public sealed virtual Nullable`1<long> get_ContentLength();
    public sealed virtual string get_ContentType();
    public sealed virtual Stream get_Body();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> get_Form();
}
[NullableContextAttribute("1")]
public interface Sentry.AspNetCore.ISentryBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.AspNetCore.RouteUtils : object {
    [NullableContextAttribute("2")]
internal static string NewRouteFormat(string routePattern, RouteValueDictionary values, string pathBase);
    [NullableContextAttribute("2")]
internal static string LegacyRouteFormat(RouteValueDictionary values, string pathBase);
    internal static string ReplaceMvcParameters(string route, RouteValueDictionary values);
    internal static bool RouteHasMvcParameters(string route);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.AspNetCore.SamplingExtensions : object {
    internal static string KeyForHttpMethod;
    internal static string KeyForHttpRoute;
    internal static string KeyForHttpPath;
    internal static string KeyForHttpContext;
    [ExtensionAttribute]
public static string TryGetHttpMethod(TransactionSamplingContext samplingContext);
    [ExtensionAttribute]
public static string TryGetHttpRoute(TransactionSamplingContext samplingContext);
    [ExtensionAttribute]
public static string TryGetHttpPath(TransactionSamplingContext samplingContext);
    [ExtensionAttribute]
public static HttpContext TryGetHttpContext(TransactionSamplingContext samplingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.AspNetCore.ScopeExtensions : object {
    [ExtensionAttribute]
public static void Populate(Scope scope, HttpContext context, SentryAspNetCoreOptions options);
    private static void SetEnv(Scope scope, HttpContext context, SentryAspNetCoreOptions options);
    private static void SetBody(Scope scope, HttpContext context, SentryAspNetCoreOptions options);
    [ExtensionAttribute]
public static void Populate(Scope scope, Activity activity);
    [ExtensionAttribute]
internal static void SetWebRoot(Scope scope, string webRoot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.AspNetCore.SentryAspNetCoreBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public SentryAspNetCoreBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[ProviderAliasAttribute("Sentry")]
public class Sentry.AspNetCore.SentryAspNetCoreLoggerProvider : SentryLoggerProvider {
    [NullableContextAttribute("1")]
public SentryAspNetCoreLoggerProvider(IOptions`1<SentryAspNetCoreOptions> options, IHub hub);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.AspNetCore.SentryAspNetCoreOptions : SentryLoggingOptions {
    [CompilerGeneratedAttribute]
private bool <IncludeActivityData>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestSize <MaxRequestBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlushOnCompletedRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlushBeforeRequestCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureBlockingCalls>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionNameProvider <TransactionNameProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AdjustStandardEnvironmentNameCasing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRegisterTracing>k__BackingField;
    public bool IncludeActivityData { get; public set; }
    public RequestSize MaxRequestBodySize { get; public set; }
    public bool FlushOnCompletedRequest { get; public set; }
    internal bool FlushBeforeRequestCompleted { get; internal set; }
    public bool CaptureBlockingCalls { get; public set; }
    public TransactionNameProvider TransactionNameProvider { get; public set; }
    public bool AdjustStandardEnvironmentNameCasing { get; public set; }
    public bool AutoRegisterTracing { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeActivityData();
    [CompilerGeneratedAttribute]
public void set_IncludeActivityData(bool value);
    [CompilerGeneratedAttribute]
public RequestSize get_MaxRequestBodySize();
    [CompilerGeneratedAttribute]
public void set_MaxRequestBodySize(RequestSize value);
    [CompilerGeneratedAttribute]
public bool get_FlushOnCompletedRequest();
    [CompilerGeneratedAttribute]
public void set_FlushOnCompletedRequest(bool value);
    [CompilerGeneratedAttribute]
internal bool get_FlushBeforeRequestCompleted();
    [CompilerGeneratedAttribute]
internal void set_FlushBeforeRequestCompleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaptureBlockingCalls();
    [CompilerGeneratedAttribute]
public void set_CaptureBlockingCalls(bool value);
    [CompilerGeneratedAttribute]
public TransactionNameProvider get_TransactionNameProvider();
    [CompilerGeneratedAttribute]
public void set_TransactionNameProvider(TransactionNameProvider value);
    [CompilerGeneratedAttribute]
public bool get_AdjustStandardEnvironmentNameCasing();
    [CompilerGeneratedAttribute]
public void set_AdjustStandardEnvironmentNameCasing(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoRegisterTracing();
    [CompilerGeneratedAttribute]
public void set_AutoRegisterTracing(bool value);
    [NullableContextAttribute("1")]
internal void SetEnvironment(IWebHostEnvironment hostingEnvironment);
}
[ExtensionAttribute]
internal static class Sentry.AspNetCore.SentryAspNetCoreOptionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void DeduplicateUnhandledException(SentryAspNetCoreOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.AspNetCore.SentryAspNetCoreOptionsSetup : object {
    private IConfiguration _config;
    public SentryAspNetCoreOptionsSetup(ILoggerProviderConfiguration`1<SentryAspNetCoreLoggerProvider> providerConfiguration);
    internal SentryAspNetCoreOptionsSetup(IConfiguration config);
    public sealed virtual void Configure(SentryAspNetCoreOptions options);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.AspNetCore.SentryBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ISentryBuilder AddSentryOptions(ISentryBuilder builder, Action`1<SentryAspNetCoreOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.AspNetCore.SentryMiddleware : object {
    internal static object TraceHeaderItemKey;
    internal static object BaggageHeaderItemKey;
    internal static object TransactionContextItemKey;
    private Func`1<IHub> _getHub;
    private SentryAspNetCoreOptions _options;
    private IWebHostEnvironment _hostingEnvironment;
    private ILogger`1<SentryMiddleware> _logger;
    private IEnumerable`1<ISentryEventExceptionProcessor> _eventExceptionProcessors;
    private IEnumerable`1<ISentryEventProcessor> _eventProcessors;
    private IEnumerable`1<ISentryTransactionProcessor> _transactionProcessors;
    internal static SdkVersion NameAndVersion;
    private static string ProtocolPackageName;
    [NullableAttribute("2")]
private BlockingMonitor _monitor;
    [NullableAttribute("2")]
private DetectBlockingSynchronizationContext _detectBlockingSyncCtx;
    [NullableAttribute("2")]
private TaskBlockingListener _listener;
    public SentryMiddleware(Func`1<IHub> getHub, IOptions`1<SentryAspNetCoreOptions> options, IWebHostEnvironment hostingEnvironment, ILogger`1<SentryMiddleware> logger, IEnumerable`1<ISentryEventExceptionProcessor> eventExceptionProcessors, IEnumerable`1<ISentryEventProcessor> eventProcessors, IEnumerable`1<ISentryTransactionProcessor> transactionProcessors);
    private static SentryMiddleware();
    [AsyncStateMachineAttribute("Sentry.AspNetCore.SentryMiddleware/<InvokeAsync>d__16")]
public sealed virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    private void SyncOptionsScope(Scope scope);
    internal void PopulateScope(HttpContext context, Scope scope);
}
public class Sentry.AspNetCore.SentryStartupFilter : object {
    [NullableContextAttribute("1")]
public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.AspNetCore.SentryTracingBuilder : object {
    private static string EndpointRouteBuilder;
    [CompilerGeneratedAttribute]
private IApplicationBuilder <InnerBuilder>k__BackingField;
    private IApplicationBuilder InnerBuilder { get; }
    public IServiceProvider ApplicationServices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    public IFeatureCollection ServerFeatures { get; }
    public SentryTracingBuilder(IApplicationBuilder inner);
    [CompilerGeneratedAttribute]
private IApplicationBuilder get_InnerBuilder();
    public sealed virtual IServiceProvider get_ApplicationServices();
    public sealed virtual void set_ApplicationServices(IServiceProvider value);
    public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual IFeatureCollection get_ServerFeatures();
    public sealed virtual RequestDelegate Build();
    public sealed virtual IApplicationBuilder New();
    public sealed virtual IApplicationBuilder Use(Func`2<RequestDelegate, RequestDelegate> middleware);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.AspNetCore.SentryTracingMiddleware : object {
    private static string OperationName;
    internal static string AspNetCoreOrigin;
    private RequestDelegate _next;
    private Func`1<IHub> _getHub;
    private SentryAspNetCoreOptions _options;
    public SentryTracingMiddleware(RequestDelegate next, Func`1<IHub> getHub, IOptions`1<SentryAspNetCoreOptions> options);
    private ITransactionTracer TryStartTransaction(HttpContext context);
    [AsyncStateMachineAttribute("Sentry.AspNetCore.SentryTracingMiddleware/<InvokeAsync>d__7")]
public Task InvokeAsync(HttpContext context);
}
internal class Sentry.AspNetCore.SentryTracingStartupFilter : object {
    [NullableContextAttribute("1")]
public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.AspNetCore.SentryTunnelMiddleware : object {
    private String[] _allowedHosts;
    private Lazy`1<string> Version { get; }
    public SentryTunnelMiddleware(String[] allowedHosts);
    private Lazy`1<string> get_Version();
    [AsyncStateMachineAttribute("Sentry.AspNetCore.SentryTunnelMiddleware/<InvokeAsync>d__4")]
public sealed virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    private bool IsHostAllowed(string host);
    [CompilerGeneratedAttribute]
private string <get_Version>b__2_0();
}
public class Sentry.AspNetCore.TransactionNameProvider : MulticastDelegate {
    public TransactionNameProvider(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(HttpContext context);
    public virtual IAsyncResult BeginInvoke(HttpContext context, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.10.36612")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.<BindingExtensions_g>FA326D3CAB2EA305951D81634E89E806F24733EB8399C6B3F2E782244C9E6A041__InterceptsLocationAttribute : Attribute {
    [NullableContextAttribute("1")]
public <BindingExtensions_g>FA326D3CAB2EA305951D81634E89E806F24733EB8399C6B3F2E782244C9E6A041__InterceptsLocationAttribute(string filePath, int line, int column);
}
