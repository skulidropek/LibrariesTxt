[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.9.3103")]
internal static class Microsoft.Extensions.Configuration.Binder.SourceGeneration.<BindingExtensions_g>FD1E67578D7C19D76AC9E9E0C25B40B699A62EE58906C9D3AFC59DC43179B74D6__BindingExtensions : object {
    private static Lazy`1<HashSet`1<string>> s_configKeys_BindableSentryLoggingOptions;
    private static <BindingExtensions_g>FD1E67578D7C19D76AC9E9E0C25B40B699A62EE58906C9D3AFC59DC43179B74D6__BindingExtensions();
    [ExtensionAttribute]
[<BindingExtensions_g>FD1E67578D7C19D76AC9E9E0C25B40B699A62EE58906C9D3AFC59DC43179B74D6__InterceptsLocationAttribute("/_/src/Sentry.Extensions.Logging/SentryLoggingOptionsSetup.cs", "23", "17")]
public static void Bind_BindableSentryLoggingOptions(IConfiguration configuration, object instance);
    public static void BindCore(IConfiguration configuration, List`1& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, Dictionary`2& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, BindableSentryLoggingOptions& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void ValidateConfigurationKeys(Type type, Lazy`1<HashSet`1<string>> keys, IConfiguration configuration, BinderOptions binderOptions);
    public static IConfiguration AsConfigWithChildren(IConfiguration configuration);
    [NullableContextAttribute("0")]
public static T ParseEnum(string value, Func`1<string> getPath);
    public static bool ParseBool(string value, Func`1<string> getPath);
    public static int ParseInt(string value, Func`1<string> getPath);
    public static float ParseFloat(string value, Func`1<string> getPath);
    public static TimeSpan ParseTimeSpan(string value, Func`1<string> getPath);
    public static double ParseDouble(string value, Func`1<string> getPath);
    public static long ParseLong(string value, Func`1<string> getPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddSentry(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddSentry(ILoggingBuilder builder, string dsn);
    [ExtensionAttribute]
public static ILoggingBuilder AddSentry(ILoggingBuilder builder, Action`1<SentryLoggingOptions> optionsConfiguration);
    [ExtensionAttribute]
internal static ILoggingBuilder AddSentry(ILoggingBuilder builder, Action`1<TOptions> optionsConfiguration);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.Extensions.Logging.SentryLoggerFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILoggerFactory AddSentry(ILoggerFactory factory, Action`1<SentryLoggingOptions> optionsConfiguration);
}
internal class Sentry.Extensions.Logging.BindableSentryLoggingOptions : BindableSentryOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<LogLevel> <MinimumBreadcrumbLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogLevel> <MinimumEventLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InitializeSdk>k__BackingField;
    public Nullable`1<LogLevel> MinimumBreadcrumbLevel { get; public set; }
    public Nullable`1<LogLevel> MinimumEventLevel { get; public set; }
    public Nullable`1<bool> InitializeSdk { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<LogLevel> get_MinimumBreadcrumbLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumBreadcrumbLevel(Nullable`1<LogLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<LogLevel> get_MinimumEventLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumEventLevel(Nullable`1<LogLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_InitializeSdk();
    [CompilerGeneratedAttribute]
public void set_InitializeSdk(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
public void ApplyTo(SentryLoggingOptions options);
}
internal static class Sentry.Extensions.Logging.Constants : object {
    [NullableAttribute("1")]
public static string SdkName;
}
public class Sentry.Extensions.Logging.DelegateLogEntryFilter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`5<string, LogLevel, EventId, Exception, bool> _filter;
    public DelegateLogEntryFilter(Func`5<string, LogLevel, EventId, Exception, bool> filter);
    [NullableContextAttribute("1")]
public sealed virtual bool Filter(string categoryName, LogLevel logLevel, EventId eventId, Exception exception);
}
[ExtensionAttribute]
internal static class Sentry.Extensions.Logging.EventIdExtensions : object {
    [NullableAttribute("1")]
public static string DataKey;
    [ExtensionAttribute]
public static Nullable`1<ValueTuple`2<string, string>> ToTupleOrNull(EventId eventId);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToDictionaryOrNull(EventId eventId);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.Extensions.Logging.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddSentry(IServiceCollection services);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensions.Logging.ILogEntryFilter {
    public abstract virtual bool Filter(string categoryName, LogLevel logLevel, EventId eventId, Exception exception);
}
[ExtensionAttribute]
internal static class Sentry.Extensions.Logging.LogLevelExtensions : object {
    [ExtensionAttribute]
public static BreadcrumbLevel ToBreadcrumbLevel(LogLevel level);
    [ExtensionAttribute]
public static LogLevel ToMicrosoft(SentryLevel level);
    [ExtensionAttribute]
public static SentryLevel ToSentryLevel(LogLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Extensions.Logging.MelDiagnosticLogger : object {
    private ILogger`1<ISentryClient> _logger;
    private SentryLevel _level;
    public MelDiagnosticLogger(ILogger`1<ISentryClient> logger, SentryLevel level);
    public sealed virtual bool IsEnabled(SentryLevel level);
    public sealed virtual void Log(SentryLevel logLevel, string message, Exception exception, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Extensions.Logging.SentryHttpMessageHandlerBuilderFilter : object {
    private Func`1<IHub> _getHub;
    public SentryHttpMessageHandlerBuilderFilter(Func`1<IHub> getHub);
    public sealed virtual Action`1<HttpMessageHandlerBuilder> Configure(Action`1<HttpMessageHandlerBuilder> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Extensions.Logging.SentryLogger : object {
    private IHub _hub;
    private ISystemClock _clock;
    private SentryLoggingOptions _options;
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    internal string CategoryName { get; }
    internal SentryLogger(string categoryName, SentryLoggingOptions options, ISystemClock clock, IHub hub);
    [CompilerGeneratedAttribute]
internal string get_CategoryName();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    internal static SentryEvent CreateEvent(LogLevel logLevel, EventId id, TState state, Exception exception, string message, string category);
    [NullableContextAttribute("2")]
private bool ShouldCaptureEvent(LogLevel logLevel, EventId eventId, Exception exception);
    [NullableContextAttribute("2")]
private bool ShouldAddBreadcrumb(LogLevel logLevel, EventId eventId, Exception exception);
    private bool IsFromSentry();
    internal static bool IsEfExceptionMessage(EventId eventId);
    internal static bool IsUnhandledWasmException(EventId eventId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProviderAliasAttribute("Sentry")]
public class Sentry.Extensions.Logging.SentryLoggerProvider : object {
    private ISystemClock _clock;
    private SentryLoggingOptions _options;
    [NullableAttribute("2")]
private IDisposable _scope;
    [NullableAttribute("2")]
private IDisposable _disposableHub;
    [CompilerGeneratedAttribute]
private IHub <Hub>k__BackingField;
    internal static SdkVersion NameAndVersion;
    private static string ProtocolPackageName;
    internal IHub Hub { get; }
    public SentryLoggerProvider(IOptions`1<SentryLoggingOptions> options, IHub hub);
    internal SentryLoggerProvider(IHub hub, ISystemClock clock, SentryLoggingOptions options);
    private static SentryLoggerProvider();
    [CompilerGeneratedAttribute]
internal IHub get_Hub();
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Extensions.Logging.SentryLoggingOptions : SentryOptions {
    [CompilerGeneratedAttribute]
private LogLevel <MinimumBreadcrumbLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <MinimumEventLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitializeSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogEntryFilter[] <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1[] <ConfigureScopeCallbacks>k__BackingField;
    public LogLevel MinimumBreadcrumbLevel { get; public set; }
    public LogLevel MinimumEventLevel { get; public set; }
    public bool InitializeSdk { get; public set; }
    internal ILogEntryFilter[] Filters { get; internal set; }
    internal Action`1[] ConfigureScopeCallbacks { get; internal set; }
    [CompilerGeneratedAttribute]
public LogLevel get_MinimumBreadcrumbLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumBreadcrumbLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public LogLevel get_MinimumEventLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumEventLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public bool get_InitializeSdk();
    [CompilerGeneratedAttribute]
public void set_InitializeSdk(bool value);
    public void ConfigureScope(Action`1<Scope> action);
    [CompilerGeneratedAttribute]
internal ILogEntryFilter[] get_Filters();
    [CompilerGeneratedAttribute]
internal void set_Filters(ILogEntryFilter[] value);
    [CompilerGeneratedAttribute]
internal Action`1[] get_ConfigureScopeCallbacks();
    [CompilerGeneratedAttribute]
internal void set_ConfigureScopeCallbacks(Action`1[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.Extensions.Logging.SentryLoggingOptionsExtensions : object {
    [ExtensionAttribute]
public static void AddLogEntryFilter(SentryLoggingOptions options, ILogEntryFilter filter);
    [ExtensionAttribute]
public static void AddLogEntryFilter(SentryLoggingOptions options, Func`5<string, LogLevel, EventId, Exception, bool> filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Extensions.Logging.SentryLoggingOptionsSetup : object {
    private IConfiguration _config;
    public SentryLoggingOptionsSetup(ILoggerProviderConfiguration`1<SentryLoggerProvider> config);
    public sealed virtual void Configure(SentryLoggingOptions options);
}
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.9.3103")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.<BindingExtensions_g>FD1E67578D7C19D76AC9E9E0C25B40B699A62EE58906C9D3AFC59DC43179B74D6__InterceptsLocationAttribute : Attribute {
    [NullableContextAttribute("1")]
public <BindingExtensions_g>FD1E67578D7C19D76AC9E9E0C25B40B699A62EE58906C9D3AFC59DC43179B74D6__InterceptsLocationAttribute(string filePath, int line, int column);
}
