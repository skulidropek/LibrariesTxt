public static class Sentry.PlatformAbstractions.FrameworkInfo : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyDictionary`2<int, string> <NetFxReleaseVersionMap>k__BackingField;
    public static IReadOnlyDictionary`2<int, string> NetFxReleaseVersionMap { get; public set; }
    private static FrameworkInfo();
    [CompilerGeneratedAttribute]
public static IReadOnlyDictionary`2<int, string> get_NetFxReleaseVersionMap();
    [CompilerGeneratedAttribute]
public static void set_NetFxReleaseVersionMap(IReadOnlyDictionary`2<int, string> value);
    public static FrameworkInstallation GetLatest(int clr);
    public static IEnumerable`1<FrameworkInstallation> GetInstallations();
}
public class Sentry.PlatformAbstractions.FrameworkInstallation : object {
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ServicePack>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FrameworkProfile> <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Release>k__BackingField;
    public string ShortName { get; public set; }
    public Version Version { get; public set; }
    public Nullable`1<int> ServicePack { get; public set; }
    public Nullable`1<FrameworkProfile> Profile { get; public set; }
    public Nullable`1<int> Release { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ServicePack();
    [CompilerGeneratedAttribute]
public void set_ServicePack(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FrameworkProfile> get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(Nullable`1<FrameworkProfile> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Release();
    [CompilerGeneratedAttribute]
public void set_Release(Nullable`1<int> value);
    public virtual string ToString();
}
public enum Sentry.PlatformAbstractions.FrameworkProfile : Enum {
    public int value__;
    public static FrameworkProfile Client;
    public static FrameworkProfile Full;
}
public class Sentry.PlatformAbstractions.Runtime : object {
    private static Runtime _runtime;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    public static Runtime Current { get; }
    public string Name { get; internal set; }
    public string Version { get; internal set; }
    public string Raw { get; internal set; }
    public Runtime(string name, string version, string raw);
    public static Runtime get_Current();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
internal void set_Raw(string value);
    public virtual string ToString();
    public sealed virtual bool Equals(Runtime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.PlatformAbstractions.RuntimeExtensions : object {
    [ExtensionAttribute]
public static bool IsNetFx(Runtime runtime);
    [ExtensionAttribute]
public static bool IsNetCore(Runtime runtime);
    [ExtensionAttribute]
public static bool IsMono(Runtime runtime);
    [ExtensionAttribute]
private static bool IsRuntime(Runtime runtime, string runtimeName);
}
internal static class Sentry.PlatformAbstractions.RuntimeInfo : object {
    private static Regex RuntimeParseRegex;
    private static RuntimeInfo();
    internal static Runtime GetRuntime();
    internal static Runtime Parse(string rawRuntimeDescription, string name);
    internal static void SetNetCoreVersion(Runtime runtime);
    internal static Runtime GetFromRuntimeInformation();
    internal static Runtime GetFromMonoRuntime();
}
