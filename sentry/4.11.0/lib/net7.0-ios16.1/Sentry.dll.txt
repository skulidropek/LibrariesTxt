[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Ben.Demystifier.Constants : object {
    internal static string TrimWarning;
    internal static string SuppressionResurfaced;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class PolyfillExtensions : object {
    private static ConcurrentDictionary`2<ParameterInfo, NullabilityInfo> parameterCache;
    private static ConcurrentDictionary`2<PropertyInfo, NullabilityInfo> propertyCache;
    private static ConcurrentDictionary`2<EventInfo, NullabilityInfo> eventCache;
    private static ConcurrentDictionary`2<FieldInfo, NullabilityInfo> fieldCache;
    private static long TicksPerMicrosecond;
    private static PolyfillExtensions();
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(MemberInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(MemberInfo info);
    [ExtensionAttribute]
public static bool IsNullable(MemberInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(FieldInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(FieldInfo info);
    [ExtensionAttribute]
public static bool IsNullable(FieldInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(EventInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(EventInfo info);
    [ExtensionAttribute]
public static bool IsNullable(EventInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(PropertyInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(PropertyInfo info);
    [ExtensionAttribute]
public static bool IsNullable(PropertyInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(ParameterInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(ParameterInfo info);
    [ExtensionAttribute]
public static bool IsNullable(ParameterInfo info);
    private static NullabilityState GetReadOrWriteState(NullabilityInfo nullability);
    private static NullabilityState GetKnownState(string name, NullabilityInfo nullability);
    private static bool IsNullable(string name, NullabilityInfo nullability);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelasync")]
public static Task CancelAsync(CancellationTokenSource target);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby#system-linq-enumerable-maxby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1)))")]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby?view=net-8.0#system-linq-enumerable-maxby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-collections-generic-icomparer((-1)))")]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.minby#system-linq-enumerable-minby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1)))")]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.minby?view=net-8.0#system-linq-enumerable-minby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-collections-generic-icomparer((-1)))")]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microseconds")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.addmicroseconds")]
public static DateTime AddMicroseconds(DateTime target, double microseconds);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.addmicroseconds")]
public static DateTimeOffset AddMicroseconds(DateTimeOffset target, double microseconds);
    [ExtensionAttribute]
private static long TicksComponent(TimeSpan target);
    [ExtensionAttribute]
private static long TicksComponent(DateTime target);
    [ExtensionAttribute]
private static long TicksComponent(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-threading-cancellationtoken)")]
public static Task WaitAsync(Task target, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitAsync>d__40")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-timespan)")]
public static Task WaitAsync(Task target, TimeSpan timeout);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitAsync>d__41")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-timespan-system-threading-cancellationtoken)")]
public static Task WaitAsync(Task task, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-threading-cancellationtoken)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitAsync>d__43`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1.waitasync#system-threading-tasks-task-1-waitasync(system-threading-cancellationtoken)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> task, TimeSpan timeout);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitAsync>d__44`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1.waitasync#system-threading-tasks-task-1-waitasync(system-timespan-system-threading-cancellationtoken)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> task, TimeSpan timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.dateonly.tryformat")]
public static bool TryFormat(DateOnly target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timeonly.tryformat")]
public static bool TryFormat(TimeOnly target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [NullableContextAttribute("0")]
private static bool CopyToSpan(Span`1<char> destination, Int32& charsWritten, string result);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.hassamemetadatadefinitionas")]
public static bool HasSameMetadataDefinitionAs(MemberInfo target, MemberInfo other);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
}
public enum Sentry.AttachmentType : Enum {
    public int value__;
    public static AttachmentType Default;
    public static AttachmentType Minidump;
    public static AttachmentType AppleCrashReport;
    public static AttachmentType UnrealContext;
    public static AttachmentType UnrealLogs;
    public static AttachmentType ViewHierarchy;
}
internal static class Sentry.AttributeReader : object {
    [NullableContextAttribute("1")]
public static string TryGetProjectDirectory(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.BaggageHeader : object {
    internal static string HttpHeaderName;
    internal static string SentryKeyPrefix;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static IDiagnosticLogger <Logger>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<KeyValuePair`2<string, string>> <Members>k__BackingField;
    [NullableAttribute("2")]
internal static IDiagnosticLogger Logger { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyList`1<KeyValuePair`2<string, string>> Members { get; }
    private BaggageHeader(IEnumerable`1<KeyValuePair`2<string, string>> members);
    private static BaggageHeader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IDiagnosticLogger get_Logger();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void set_Logger(IDiagnosticLogger value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<KeyValuePair`2<string, string>> get_Members();
    internal IReadOnlyDictionary`2<string, string> GetSentryMembers();
    public virtual string ToString();
    internal static BaggageHeader TryParse(string baggage, bool onlySentry);
    internal static BaggageHeader Create(IEnumerable`1<KeyValuePair`2<string, string>> items, bool useSentryPrefix);
    internal static BaggageHeader Merge(IEnumerable`1<BaggageHeader> baggageHeaders);
    [NullableContextAttribute("2")]
private static bool IsValidKey(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Ben.BlockingDetector.BlockingMonitor : object {
    private Func`1<IHub> _getHub;
    private SentryOptions _options;
    internal IRecursionTracker _recursionTracker;
    public BlockingMonitor(Func`1<IHub> getHub, SentryOptions options);
    internal BlockingMonitor(Func`1<IHub> getHub, SentryOptions options, IRecursionTracker recursionTracker);
    [NullableContextAttribute("2")]
private static bool ShouldSkipFrame(string frameInfo);
    public sealed virtual void BlockingStart(DetectionSource detectionSource);
    public sealed virtual void BlockingEnd();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Ben.BlockingDetector.DetectBlockingSynchronizationContext : SynchronizationContext {
    private IBlockingMonitor _monitor;
    [NullableAttribute("2")]
private SynchronizationContext _syncCtx;
    internal int _isSuppressed;
    public DetectBlockingSynchronizationContext(IBlockingMonitor monitor);
    public DetectBlockingSynchronizationContext(IBlockingMonitor monitor, SynchronizationContext syncCtx);
    internal void Suppress();
    internal void Restore();
    public virtual int Wait(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);
    private int WaitInternal(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);
}
internal enum Sentry.Ben.BlockingDetector.DetectionSource : Enum {
    public int value__;
    public static DetectionSource SynchronizationContext;
    public static DetectionSource EventListener;
}
internal interface Sentry.Ben.BlockingDetector.IBlockingMonitor {
    public abstract virtual void BlockingStart(DetectionSource detectionSource);
    public abstract virtual void BlockingEnd();
}
internal interface Sentry.Ben.BlockingDetector.IRecursionTracker {
    public abstract virtual void Recurse();
    public abstract virtual void Backtrack();
    public abstract virtual bool IsFirstRecursion();
}
internal interface Sentry.Ben.BlockingDetector.ITaskBlockingListenerState {
    public abstract virtual void Suppress();
    public abstract virtual bool IsSuppressed();
    public abstract virtual void Restore();
}
internal class Sentry.Ben.BlockingDetector.StaticRecursionTracker : object {
    [ThreadStaticAttribute]
private static int RecursionCount;
    public sealed virtual void Recurse();
    public sealed virtual void Backtrack();
    public bool IsRecursive();
    public sealed virtual bool IsFirstRecursion();
}
internal class Sentry.Ben.BlockingDetector.StaticTaskBlockingListenerState : object {
    [ThreadStaticAttribute]
private static int SuppressionCount;
    public sealed virtual void Suppress();
    public sealed virtual bool IsSuppressed();
    public sealed virtual void Restore();
}
public class Sentry.Ben.BlockingDetector.SuppressBlockingDetection : object {
    [NullableAttribute("1")]
internal ITaskBlockingListenerState _listener;
    [NullableAttribute("2")]
internal DetectBlockingSynchronizationContext _context;
    [NullableContextAttribute("1")]
internal SuppressBlockingDetection(DetectBlockingSynchronizationContext context, ITaskBlockingListenerState listener);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Ben.BlockingDetector.TaskBlockingListener : EventListener {
    internal static Guid s_tplGuid;
    private IBlockingMonitor _monitor;
    private ITaskBlockingListenerState _state;
    private static Lazy`1<StaticTaskBlockingListenerState> LazyDefaultState { get; }
    internal static StaticTaskBlockingListenerState DefaultState { get; }
    public TaskBlockingListener(IBlockingMonitor monitor);
    internal TaskBlockingListener(IBlockingMonitor monitor, ITaskBlockingListenerState state);
    private static TaskBlockingListener();
    private static Lazy`1<StaticTaskBlockingListenerState> get_LazyDefaultState();
    internal static StaticTaskBlockingListenerState get_DefaultState();
    protected virtual void OnEventSourceCreated(EventSource eventSource);
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    [NullableContextAttribute("2")]
internal void DoHandleEvent(int eventId, ReadOnlyCollection`1<object> payload);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.BindableSentryOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsGlobalModeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableScopeSync>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <TagFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SendDefaultPii>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsEnvironmentUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AttachStacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBreadcrumbs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <SampleRate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Distribution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dsn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxQueueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxCacheItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ShutdownTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <FlushTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DecompressionMethods> <DecompressionMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> <RequestBodyCompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RequestBodyCompressionBuffered>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SendClientReports>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SentryLevel> <DiagnosticLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReportAssembliesMode> <ReportAssembliesMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeduplicateMode> <DeduplicateMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CaptureFailedRequests>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <FailedRequestTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <InitCacheFlushTimeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <DefaultTags>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <TracesSampleRate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <TracePropagationTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ProfilesSampleRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StackTraceMode> <StackTraceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxAttachmentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StartupTimeDetectionMode> <DetectStartupTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <AutoSessionTrackingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoSessionTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseAsyncFileIO>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <JsonPreserveReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableSpotlight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpotlightUrl>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private NativeOptions <Native>k__BackingField;
    public Nullable`1<bool> IsGlobalModeEnabled { get; public set; }
    public Nullable`1<bool> EnableScopeSync { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> TagFilters { get; public set; }
    public Nullable`1<bool> SendDefaultPii { get; public set; }
    public Nullable`1<bool> IsEnvironmentUser { get; public set; }
    public string ServerName { get; public set; }
    public Nullable`1<bool> AttachStacktrace { get; public set; }
    public Nullable`1<int> MaxBreadcrumbs { get; public set; }
    public Nullable`1<float> SampleRate { get; public set; }
    public string Release { get; public set; }
    public string Distribution { get; public set; }
    public string Environment { get; public set; }
    public string Dsn { get; public set; }
    public Nullable`1<int> MaxQueueItems { get; public set; }
    public Nullable`1<int> MaxCacheItems { get; public set; }
    public Nullable`1<TimeSpan> ShutdownTimeout { get; public set; }
    public Nullable`1<TimeSpan> FlushTimeout { get; public set; }
    public Nullable`1<DecompressionMethods> DecompressionMethods { get; public set; }
    public Nullable`1<CompressionLevel> RequestBodyCompressionLevel { get; public set; }
    public Nullable`1<bool> RequestBodyCompressionBuffered { get; public set; }
    public Nullable`1<bool> SendClientReports { get; public set; }
    public Nullable`1<bool> Debug { get; public set; }
    public Nullable`1<SentryLevel> DiagnosticLevel { get; public set; }
    public Nullable`1<ReportAssembliesMode> ReportAssembliesMode { get; public set; }
    public Nullable`1<DeduplicateMode> DeduplicateMode { get; public set; }
    public string CacheDirectoryPath { get; public set; }
    public Nullable`1<bool> CaptureFailedRequests { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> FailedRequestTargets { get; public set; }
    public Nullable`1<TimeSpan> InitCacheFlushTimeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> DefaultTags { get; public set; }
    public Nullable`1<bool> EnableTracing { get; public set; }
    public Nullable`1<double> TracesSampleRate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> TracePropagationTargets { get; public set; }
    public Nullable`1<double> ProfilesSampleRate { get; public set; }
    public Nullable`1<StackTraceMode> StackTraceMode { get; public set; }
    public Nullable`1<long> MaxAttachmentSize { get; public set; }
    public Nullable`1<StartupTimeDetectionMode> DetectStartupTime { get; public set; }
    public Nullable`1<TimeSpan> AutoSessionTrackingInterval { get; public set; }
    public Nullable`1<bool> AutoSessionTracking { get; public set; }
    public Nullable`1<bool> UseAsyncFileIO { get; public set; }
    public Nullable`1<bool> JsonPreserveReferences { get; public set; }
    public Nullable`1<bool> EnableSpotlight { get; public set; }
    public string SpotlightUrl { get; public set; }
    [NullableAttribute("1")]
public NativeOptions Native { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsGlobalModeEnabled();
    [CompilerGeneratedAttribute]
public void set_IsGlobalModeEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableScopeSync();
    [CompilerGeneratedAttribute]
public void set_EnableScopeSync(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TagFilters();
    [CompilerGeneratedAttribute]
public void set_TagFilters(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SendDefaultPii();
    [CompilerGeneratedAttribute]
public void set_SendDefaultPii(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsEnvironmentUser();
    [CompilerGeneratedAttribute]
public void set_IsEnvironmentUser(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AttachStacktrace();
    [CompilerGeneratedAttribute]
public void set_AttachStacktrace(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBreadcrumbs();
    [CompilerGeneratedAttribute]
public void set_MaxBreadcrumbs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_SampleRate();
    [CompilerGeneratedAttribute]
public void set_SampleRate(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_Release();
    [CompilerGeneratedAttribute]
public void set_Release(string value);
    [CompilerGeneratedAttribute]
public string get_Distribution();
    [CompilerGeneratedAttribute]
public void set_Distribution(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_Dsn();
    [CompilerGeneratedAttribute]
public void set_Dsn(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxQueueItems();
    [CompilerGeneratedAttribute]
public void set_MaxQueueItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxCacheItems();
    [CompilerGeneratedAttribute]
public void set_MaxCacheItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_FlushTimeout();
    [CompilerGeneratedAttribute]
public void set_FlushTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DecompressionMethods> get_DecompressionMethods();
    [CompilerGeneratedAttribute]
public void set_DecompressionMethods(Nullable`1<DecompressionMethods> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CompressionLevel> get_RequestBodyCompressionLevel();
    [CompilerGeneratedAttribute]
public void set_RequestBodyCompressionLevel(Nullable`1<CompressionLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequestBodyCompressionBuffered();
    [CompilerGeneratedAttribute]
public void set_RequestBodyCompressionBuffered(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SendClientReports();
    [CompilerGeneratedAttribute]
public void set_SendClientReports(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SentryLevel> get_DiagnosticLevel();
    [CompilerGeneratedAttribute]
public void set_DiagnosticLevel(Nullable`1<SentryLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReportAssembliesMode> get_ReportAssembliesMode();
    [CompilerGeneratedAttribute]
public void set_ReportAssembliesMode(Nullable`1<ReportAssembliesMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DeduplicateMode> get_DeduplicateMode();
    [CompilerGeneratedAttribute]
public void set_DeduplicateMode(Nullable`1<DeduplicateMode> value);
    [CompilerGeneratedAttribute]
public string get_CacheDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_CacheDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CaptureFailedRequests();
    [CompilerGeneratedAttribute]
public void set_CaptureFailedRequests(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_FailedRequestTargets();
    [CompilerGeneratedAttribute]
public void set_FailedRequestTargets(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_InitCacheFlushTimeout();
    [CompilerGeneratedAttribute]
public void set_InitCacheFlushTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_DefaultTags();
    [CompilerGeneratedAttribute]
public void set_DefaultTags(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableTracing();
    [CompilerGeneratedAttribute]
public void set_EnableTracing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_TracesSampleRate();
    [CompilerGeneratedAttribute]
public void set_TracesSampleRate(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TracePropagationTargets();
    [CompilerGeneratedAttribute]
public void set_TracePropagationTargets(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ProfilesSampleRate();
    [CompilerGeneratedAttribute]
public void set_ProfilesSampleRate(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StackTraceMode> get_StackTraceMode();
    [CompilerGeneratedAttribute]
public void set_StackTraceMode(Nullable`1<StackTraceMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxAttachmentSize();
    [CompilerGeneratedAttribute]
public void set_MaxAttachmentSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StartupTimeDetectionMode> get_DetectStartupTime();
    [CompilerGeneratedAttribute]
public void set_DetectStartupTime(Nullable`1<StartupTimeDetectionMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_AutoSessionTrackingInterval();
    [CompilerGeneratedAttribute]
public void set_AutoSessionTrackingInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoSessionTracking();
    [CompilerGeneratedAttribute]
public void set_AutoSessionTracking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseAsyncFileIO();
    [CompilerGeneratedAttribute]
public void set_UseAsyncFileIO(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_JsonPreserveReferences();
    [CompilerGeneratedAttribute]
public void set_JsonPreserveReferences(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableSpotlight();
    [CompilerGeneratedAttribute]
public void set_EnableSpotlight(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_SpotlightUrl();
    [CompilerGeneratedAttribute]
public void set_SpotlightUrl(string value);
    [NullableContextAttribute("1")]
public void ApplyTo(SentryOptions options);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public NativeOptions get_Native();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Message: {Message}, Type: {Type}")]
public class Sentry.Breadcrumb : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, string> _data;
    private string _message;
    private bool _sendDefaultPii;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private BreadcrumbLevel <Level>k__BackingField;
    public DateTimeOffset Timestamp { get; }
    public string Message { get; private set; }
    public string Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, string> Data { get; private set; }
    public string Category { get; }
    public BreadcrumbLevel Level { get; }
    [NullableContextAttribute("1")]
public Breadcrumb(string message, string type, IReadOnlyDictionary`2<string, string> data, string category, BreadcrumbLevel level);
    [EditorBrowsableAttribute("1")]
internal Breadcrumb(Nullable`1<DateTimeOffset> timestamp, string message, string type, IReadOnlyDictionary`2<string, string> data, string category, BreadcrumbLevel level);
    internal void Redact();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    public string get_Message();
    private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    public IReadOnlyDictionary`2<string, string> get_Data();
    private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Data(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public BreadcrumbLevel get_Level();
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static Breadcrumb FromJson(JsonElement json);
}
public enum Sentry.BreadcrumbLevel : Enum {
    public int value__;
    [EnumMemberAttribute]
public static BreadcrumbLevel Debug;
    [EnumMemberAttribute]
public static BreadcrumbLevel Info;
    [EnumMemberAttribute]
public static BreadcrumbLevel Warning;
    [EnumMemberAttribute]
public static BreadcrumbLevel Error;
    [EnumMemberAttribute]
public static BreadcrumbLevel Critical;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Sentry.BuiltInSystemDiagnosticsMeters : object {
    private static string MicrosoftAspNetCoreHostingPattern;
    private static string MicrosoftAspNetCoreRoutingPattern;
    private static string MicrosoftAspNetCoreDiagnosticsPattern;
    private static string MicrosoftAspNetCoreRateLimitingPattern;
    private static string MicrosoftAspNetCoreHeaderParsingPattern;
    private static string MicrosoftAspNetCoreServerKestrelPattern;
    private static string MicrosoftAspNetCoreHttpConnectionsPattern;
    private static string MicrosoftExtensionsDiagnosticsHealthChecksPattern;
    private static string MicrosoftExtensionsDiagnosticsResourceMonitoringPattern;
    private static string OpenTelemetryInstrumentationRuntimePattern;
    private static string SystemNetNameResolutionPattern;
    private static string SystemNetHttpPattern;
    public static SubstringOrRegexPattern MicrosoftAspNetCoreHosting;
    public static SubstringOrRegexPattern MicrosoftAspNetCoreRouting;
    public static SubstringOrRegexPattern MicrosoftAspNetCoreDiagnostics;
    public static SubstringOrRegexPattern MicrosoftAspNetCoreRateLimiting;
    public static SubstringOrRegexPattern MicrosoftAspNetCoreHeaderParsing;
    public static SubstringOrRegexPattern MicrosoftAspNetCoreServerKestrel;
    public static SubstringOrRegexPattern MicrosoftAspNetCoreHttpConnections;
    public static SubstringOrRegexPattern MicrosoftExtensionsDiagnosticsHealthChecks;
    public static SubstringOrRegexPattern MicrosoftExtensionsDiagnosticsResourceMonitoring;
    public static SubstringOrRegexPattern OpenTelemetryInstrumentationRuntime;
    public static SubstringOrRegexPattern SystemNetNameResolution;
    public static SubstringOrRegexPattern SystemNetHttp;
    private static Lazy`1<IList`1<SubstringOrRegexPattern>> LazyAll;
    public static IList`1<SubstringOrRegexPattern> All { get; }
    private static BuiltInSystemDiagnosticsMeters();
    public static IList`1<SubstringOrRegexPattern> get_All();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.ByteAttachmentContent : object {
    private Byte[] _bytes;
    public ByteAttachmentContent(Byte[] bytes);
    public sealed virtual Stream GetStream();
}
public enum Sentry.CheckInStatus : Enum {
    public int value__;
    public static CheckInStatus InProgress;
    public static CheckInStatus Ok;
    public static CheckInStatus Error;
}
internal static class Sentry.Cocoa.C : object {
    [NullableContextAttribute("1")]
internal static Dictionary`2<long, DebugImage> LoadDebugImages(IDiagnosticLogger logger);
}
internal class Sentry.Cocoa.CocoaEventProcessor : object {
    [NullableContextAttribute("1")]
public sealed virtual SentryEvent Process(SentryEvent event);
    [NullableContextAttribute("1")]
private static SentryEvent GetTempEvent();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Cocoa.CocoaProfiler : object {
    private SentryOptions _options;
    private SentryId _traceId;
    private SentryId _cocoaTraceId;
    private ulong _startTimeNs;
    private ulong _endTimeNs;
    private SentryStopwatch _stopwatch;
    public CocoaProfiler(SentryOptions options, ulong startTimeNs, SentryId traceId, SentryId cocoaTraceId);
    public sealed virtual void Finish();
    public sealed virtual ISerializable Collect(SentryTransaction transaction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Cocoa.CocoaProfilerFactory : object {
    private SentryOptions _options;
    internal CocoaProfilerFactory(SentryOptions options);
    public sealed virtual ITransactionProfiler Start(ITransactionTracer tracer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Cocoa.CocoaScopeObserver : object {
    private SentryOptions _options;
    [NullableAttribute("2")]
private IScopeObserver _innerObserver;
    public CocoaScopeObserver(SentryOptions options);
    public sealed virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    public sealed virtual void SetExtra(string key, object value);
    public sealed virtual void SetTag(string key, string value);
    public sealed virtual void UnsetTag(string key);
    [NullableContextAttribute("2")]
public sealed virtual void SetUser(SentryUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Cocoa.Extensions.BreadcrumbExtensions : object {
    [ExtensionAttribute]
public static Breadcrumb ToBreadcrumb(SentryBreadcrumb breadcrumb, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static SentryBreadcrumb ToCocoaBreadcrumb(Breadcrumb breadcrumb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Cocoa.Extensions.CocoaExtensions : object {
    [ExtensionAttribute]
public static DateTimeOffset ToDateTimeOffset(NSDate timestamp);
    [ExtensionAttribute]
public static NSDate ToNSDate(DateTimeOffset timestamp);
    [ExtensionAttribute]
public static NSString ToNSString(string str);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToJsonString(NSObject obj, IDiagnosticLogger logger);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Stream ToJsonStream(NSObject obj, IDiagnosticLogger logger);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static NSData ToJsonData(NSObject obj, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToStringDictionary(NSDictionary`2<NSString, TValue> dict, IDiagnosticLogger logger);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Dictionary`2<string, string> ToNullableStringDictionary(NSDictionary`2<NSString, TValue> dict, IDiagnosticLogger logger);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Dictionary`2<string, object> ToObjectDictionary(NSDictionary`2<NSString, TValue> dict, IDiagnosticLogger logger);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Dictionary`2<string, object> ToNullableObjectDictionary(NSDictionary`2<NSString, TValue> dict, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static NSDictionary`2<NSString, NSObject> ToNSDictionary(IEnumerable`1<KeyValuePair`2<string, TValue>> dict);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static NSDictionary`2<NSString, NSObject> ToNullableNSDictionary(ICollection`1<KeyValuePair`2<string, TValue>> dict);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static NSDictionary`2<NSString, NSObject> ToNullableNSDictionary(IReadOnlyCollection`1<KeyValuePair`2<string, TValue>> dict);
    [ExtensionAttribute]
public static object ToObject(NSNumber n);
}
[ExtensionAttribute]
internal static class Sentry.Cocoa.Extensions.EnumExtensions : object {
    [ExtensionAttribute]
public static SentryLevel ToSentryLevel(SentryLevel level);
    [ExtensionAttribute]
public static SentryLevel ToCocoaSentryLevel(SentryLevel level);
    [ExtensionAttribute]
public static BreadcrumbLevel ToBreadcrumbLevel(SentryLevel level);
    [ExtensionAttribute]
public static SentryLevel ToCocoaSentryLevel(BreadcrumbLevel level);
    [ExtensionAttribute]
public static Nullable`1<bool> ToNullableBoolean(SentrySampleDecision decision);
    [ExtensionAttribute]
public static SentrySampleDecision ToCocoaSampleDecision(Nullable`1<bool> decision);
    [ExtensionAttribute]
public static Nullable`1<SpanStatus> ToSpanStatus(SentrySpanStatus status);
    [ExtensionAttribute]
public static SentrySpanStatus ToCocoaSpanStatus(Nullable`1<SpanStatus> status);
    [ExtensionAttribute]
public static TransactionNameSource ToTransactionNameSource(SentryTransactionNameSource source);
    [ExtensionAttribute]
public static SentryTransactionNameSource ToCocoaTransactionNameSource(TransactionNameSource source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Cocoa.Extensions.MiscExtensions : object {
    [ExtensionAttribute]
public static SentryId ToSentryId(SentryId sentryId);
    [ExtensionAttribute]
public static SentryId ToCocoaSentryId(SentryId sentryId);
    [ExtensionAttribute]
public static SpanId ToSpanId(SentrySpanId spanId);
    [ExtensionAttribute]
public static SentrySpanId ToCocoaSpanId(SpanId spanId);
}
[ExtensionAttribute]
internal static class Sentry.Cocoa.Extensions.SamplingContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TransactionSamplingContext ToTransactionSamplingContext(SentrySamplingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Cocoa.Extensions.UserExtensions : object {
    [ExtensionAttribute]
public static SentryUser ToUser(SentryUser user, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static SentryUser ToCocoaUser(SentryUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Cocoa.Facades.SerializableNSObject : object {
    private NSObject _value;
    public SerializableNSObject(NSObject value);
    [AsyncStateMachineAttribute("Sentry.Cocoa.Facades.SerializableNSObject/<SerializeAsync>d__2")]
public sealed virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    public sealed virtual void Serialize(Stream stream, IDiagnosticLogger logger);
    private NSData Serialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Cocoa.Facades.TransactionContextFacade : object {
    private SentryTransactionContext _context;
    public string Name { get; }
    public TransactionNameSource NameSource { get; }
    public Nullable`1<bool> IsParentSampled { get; }
    public SpanId SpanId { get; }
    public Nullable`1<SpanId> ParentSpanId { get; }
    public SentryId TraceId { get; }
    public string Operation { get; }
    public string Description { get; }
    public Nullable`1<SpanStatus> Status { get; }
    public Nullable`1<bool> IsSampled { get; }
    internal TransactionContextFacade(SentryTransactionContext context);
    public sealed virtual string get_Name();
    public sealed virtual TransactionNameSource get_NameSource();
    public sealed virtual Nullable`1<bool> get_IsParentSampled();
    public sealed virtual SpanId get_SpanId();
    public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    public sealed virtual SentryId get_TraceId();
    public sealed virtual string get_Operation();
    public sealed virtual string get_Description();
    public sealed virtual Nullable`1<SpanStatus> get_Status();
    public sealed virtual Nullable`1<bool> get_IsSampled();
}
[ObsoleteAttribute("WARNING: This method deliberately causes a crash, and should not be used in a real application.")]
public enum Sentry.CrashType : Enum {
    public int value__;
    public static CrashType Managed;
    public static CrashType ManagedBackgroundThread;
    public static CrashType Native;
}
[FlagsAttribute]
public enum Sentry.DeduplicateMode : Enum {
    public int value__;
    public static DeduplicateMode SameEvent;
    public static DeduplicateMode SameExceptionInstance;
    public static DeduplicateMode InnerException;
    public static DeduplicateMode AggregateException;
    public static DeduplicateMode All;
}
public class Sentry.DefaultSentryScopeStateProcessor : object {
    [NullableAttribute("1")]
private static Char[] TrimFilter;
    private static DefaultSentryScopeStateProcessor();
    [NullableContextAttribute("1")]
public sealed virtual void Apply(Scope scope, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.DisabledMetricAggregator : object {
    public sealed virtual void Increment(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Gauge(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Distribution(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Set(string key, int value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Set(string key, string value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Timing(string key, double value, Duration unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual IDisposable StartTimer(string key, Duration unit, IDictionary`2<string, string> tags, int stackLevel);
    public sealed virtual Task FlushAsync(bool force, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Dsn : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApiBaseUri>k__BackingField;
    public string Source { get; }
    public string ProjectId { get; }
    [NullableAttribute("2")]
public string Path { get; }
    [NullableAttribute("2")]
public string SecretKey { get; }
    public string PublicKey { get; }
    private Uri ApiBaseUri { get; }
    private Dsn(string source, string projectId, string path, string secretKey, string publicKey, Uri apiBaseUri);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
private Uri get_ApiBaseUri();
    public Uri GetStoreEndpointUri();
    public Uri GetEnvelopeEndpointUri();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool IsDisabled(string dsn);
    public static Dsn Parse(string dsn);
    [NullableContextAttribute("2")]
public static Dsn TryParse(string dsn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Sentry.DsnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Dsn>k__BackingField;
    public string Dsn { get; }
    public DsnAttribute(string dsn);
    [CompilerGeneratedAttribute]
public string get_Dsn();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.DynamicSamplingContext : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Items>k__BackingField;
    public static DynamicSamplingContext Empty;
    public IReadOnlyDictionary`2<string, string> Items { get; }
    public bool IsEmpty { get; }
    private DynamicSamplingContext(IReadOnlyDictionary`2<string, string> items);
    [NullableContextAttribute("2")]
private DynamicSamplingContext(SentryId traceId, string publicKey, Nullable`1<bool> sampled, Nullable`1<double> sampleRate, string release, string environment, string userSegment, string transactionName);
    private static DynamicSamplingContext();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Items();
    public bool get_IsEmpty();
    public BaggageHeader ToBaggageHeader();
    public static DynamicSamplingContext CreateFromBaggageHeader(BaggageHeader baggage);
    public static DynamicSamplingContext CreateFromTransaction(TransactionTracer transaction, SentryOptions options);
    public static DynamicSamplingContext CreateFromPropagationContext(SentryPropagationContext propagationContext, SentryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.DynamicSamplingContextExtensions : object {
    [ExtensionAttribute]
public static DynamicSamplingContext CreateDynamicSamplingContext(BaggageHeader baggage);
    [ExtensionAttribute]
public static DynamicSamplingContext CreateDynamicSamplingContext(TransactionTracer transaction, SentryOptions options);
    [ExtensionAttribute]
public static DynamicSamplingContext CreateDynamicSamplingContext(SentryPropagationContext propagationContext, SentryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.EventLikeExtensions : object {
    [ExtensionAttribute]
public static void AddBreadcrumb(IEventLike eventLike, string message, string category, string type, Nullable`1<ValueTuple`2<string, string>> dataPair, BreadcrumbLevel level);
    [ExtensionAttribute]
public static void AddBreadcrumb(IEventLike eventLike, string message, string category, string type, IReadOnlyDictionary`2<string, string> data, BreadcrumbLevel level);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void AddBreadcrumb(IEventLike eventLike, Nullable`1<DateTimeOffset> timestamp, string message, string category, string type, IReadOnlyDictionary`2<string, string> data, BreadcrumbLevel level);
    [ExtensionAttribute]
public static bool HasUser(IEventLike eventLike);
    [ExtensionAttribute]
public static void SetFingerprint(IEventLike eventLike, IEnumerable`1<string> fingerprint);
    [ExtensionAttribute]
public static void SetFingerprint(IEventLike eventLike, String[] fingerprint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.ExperimentalMetricsOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableCodeLocations>k__BackingField;
    private IList`1<SubstringOrRegexPattern> _captureSystemDiagnosticsInstruments;
    private IList`1<SubstringOrRegexPattern> _captureSystemDiagnosticsMeters;
    public bool EnableCodeLocations { get; public set; }
    public IList`1<SubstringOrRegexPattern> CaptureSystemDiagnosticsInstruments { get; public set; }
    public IList`1<SubstringOrRegexPattern> CaptureSystemDiagnosticsMeters { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableCodeLocations();
    [CompilerGeneratedAttribute]
public void set_EnableCodeLocations(bool value);
    public IList`1<SubstringOrRegexPattern> get_CaptureSystemDiagnosticsInstruments();
    public void set_CaptureSystemDiagnosticsInstruments(IList`1<SubstringOrRegexPattern> value);
    public IList`1<SubstringOrRegexPattern> get_CaptureSystemDiagnosticsMeters();
    public void set_CaptureSystemDiagnosticsMeters(IList`1<SubstringOrRegexPattern> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Sentry.Extensibility.BaseRequestPayloadExtractor : object {
    public sealed virtual object ExtractPayload(IHttpRequest request);
    protected abstract virtual bool IsSupported(IHttpRequest request);
    protected abstract virtual object DoExtractPayLoad(IHttpRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Extensibility.DefaultRequestPayloadExtractor : BaseRequestPayloadExtractor {
    protected virtual bool IsSupported(IHttpRequest request);
    protected virtual object DoExtractPayLoad(IHttpRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.Extensibility.DiagnosticLoggerExtensions : object {
    [ExtensionAttribute]
internal static void Log(SentryOptions options, SentryLevel logLevel, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(IDiagnosticLogger logger, string message, TArg arg);
    [ExtensionAttribute]
internal static void LogDebug(SentryOptions options, string message, TArg arg);
    [ExtensionAttribute]
public static void LogDebug(IDiagnosticLogger logger, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogDebug(SentryOptions options, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogDebug(SentryOptions options, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
public static void LogDebug(IDiagnosticLogger logger, string message);
    [ExtensionAttribute]
internal static void LogDebug(SentryOptions options, string message);
    [ExtensionAttribute]
public static void LogInfo(IDiagnosticLogger logger, string message);
    [ExtensionAttribute]
internal static void LogInfo(SentryOptions options, string message);
    [ExtensionAttribute]
public static void LogInfo(IDiagnosticLogger logger, string message, TArg arg);
    [ExtensionAttribute]
internal static void LogInfo(SentryOptions options, string message, TArg arg);
    [ExtensionAttribute]
public static void LogInfo(IDiagnosticLogger logger, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogInfo(SentryOptions options, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
public static void LogInfo(IDiagnosticLogger logger, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
internal static void LogInfo(SentryOptions options, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
public static void LogWarning(IDiagnosticLogger logger, string message);
    [ExtensionAttribute]
internal static void LogWarning(SentryOptions options, string message);
    [ExtensionAttribute]
public static void LogWarning(IDiagnosticLogger logger, Exception exception, string message);
    [ExtensionAttribute]
internal static void LogWarning(SentryOptions options, Exception exception, string message);
    [ExtensionAttribute]
public static void LogWarning(IDiagnosticLogger logger, string message, TArg arg);
    [ExtensionAttribute]
internal static void LogWarning(SentryOptions options, string message, TArg arg);
    [ExtensionAttribute]
public static void LogWarning(IDiagnosticLogger logger, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogWarning(SentryOptions options, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogWarning(SentryOptions options, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
public static void LogError(IDiagnosticLogger logger, string message);
    [ExtensionAttribute]
public static void LogError(IDiagnosticLogger logger, string message, TArg arg);
    [ExtensionAttribute]
public static void LogError(IDiagnosticLogger logger, Exception exception, string message);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, string message);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, Exception exception, string message);
    [ExtensionAttribute]
public static void LogError(IDiagnosticLogger logger, Exception exception, string message, TArg arg);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, Exception exception, string message, TArg arg);
    [ExtensionAttribute]
public static void LogError(IDiagnosticLogger logger, Exception exception, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, Exception exception, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
public static void LogError(IDiagnosticLogger logger, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, string message, TArg arg, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, string message, TArg arg, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [ExtensionAttribute]
public static void LogError(IDiagnosticLogger logger, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
internal static void LogError(SentryOptions options, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
public static void LogFatal(IDiagnosticLogger logger, string message);
    [ExtensionAttribute]
public static void LogFatal(IDiagnosticLogger logger, Exception exception, string message);
    [ExtensionAttribute]
internal static void LogFatal(SentryOptions options, string message);
    [ExtensionAttribute]
internal static void LogFatal(SentryOptions options, Exception exception, string message);
    [ExtensionAttribute]
internal static void LogIfEnabled(IDiagnosticLogger logger, SentryLevel level, Exception exception, string message);
    [ExtensionAttribute]
internal static void LogIfEnabled(SentryOptions options, SentryLevel level, Exception exception, string message);
    [ExtensionAttribute]
internal static void LogIfEnabled(IDiagnosticLogger logger, SentryLevel level, Exception exception, string message, TArg arg);
    [ExtensionAttribute]
internal static void LogIfEnabled(SentryOptions options, SentryLevel level, Exception exception, string message, TArg arg);
    [ExtensionAttribute]
internal static void LogIfEnabled(IDiagnosticLogger logger, SentryLevel level, Exception exception, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogIfEnabled(SentryOptions options, SentryLevel level, Exception exception, string message, TArg arg, TArg2 arg2);
    [ExtensionAttribute]
internal static void LogIfEnabled(IDiagnosticLogger logger, SentryLevel level, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
internal static void LogIfEnabled(SentryOptions options, SentryLevel level, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3);
    [ExtensionAttribute]
internal static void LogIfEnabled(IDiagnosticLogger logger, SentryLevel level, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [ExtensionAttribute]
internal static void LogIfEnabled(IDiagnosticLogger logger, SentryLevel level, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    [ExtensionAttribute]
internal static void LogIfEnabled(SentryOptions options, SentryLevel level, Exception exception, string message, TArg arg, TArg2 arg2, TArg3 arg3, TArg4 arg4);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Extensibility.DisabledHub : object {
    public static DisabledHub Instance;
    [CompilerGeneratedAttribute]
private IMetricAggregator <Metrics>k__BackingField;
    public bool IsEnabled { get; }
    public IMetricAggregator Metrics { get; }
    public SentryId LastEventId { get; }
    private static DisabledHub();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void ConfigureScope(Action`1<Scope> configureScope);
    public sealed virtual Task ConfigureScopeAsync(Func`2<Scope, Task> configureScope);
    public sealed virtual IDisposable PushScope();
    public sealed virtual IDisposable PushScope(TState state);
    public sealed virtual ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext);
    public sealed virtual void BindException(Exception exception, ISpan span);
    [NullableContextAttribute("2")]
public sealed virtual ISpan GetSpan();
    [NullableContextAttribute("2")]
public sealed virtual SentryTraceHeader GetTraceHeader();
    [NullableContextAttribute("2")]
public sealed virtual BaggageHeader GetBaggage();
    [NullableContextAttribute("2")]
public sealed virtual TransactionContext ContinueTrace(string traceHeader, string baggageHeader, string name, string operation);
    [NullableContextAttribute("2")]
public sealed virtual TransactionContext ContinueTrace(SentryTraceHeader traceHeader, BaggageHeader baggageHeader, string name, string operation);
    public sealed virtual void StartSession();
    public sealed virtual void PauseSession();
    public sealed virtual void ResumeSession();
    public sealed virtual void EndSession(SessionEndStatus status);
    public sealed virtual void BindClient(ISentryClient client);
    public sealed virtual bool CaptureEnvelope(Envelope envelope);
    [NullableContextAttribute("2")]
public sealed virtual SentryId CaptureEvent(SentryEvent evt, Scope scope, SentryHint hint);
    public sealed virtual SentryId CaptureEvent(SentryEvent evt, Action`1<Scope> configureScope);
    public sealed virtual SentryId CaptureEvent(SentryEvent evt, SentryHint hint, Action`1<Scope> configureScope);
    public sealed virtual void CaptureTransaction(SentryTransaction transaction);
    [NullableContextAttribute("2")]
public sealed virtual void CaptureTransaction(SentryTransaction transaction, Scope scope, SentryHint hint);
    public sealed virtual void CaptureSession(SessionUpdate sessionUpdate);
    public sealed virtual SentryId CaptureCheckIn(string monitorSlug, CheckInStatus status, Nullable`1<SentryId> sentryId, Nullable`1<TimeSpan> duration, Scope scope, Action`1<SentryMonitorOptions> configureMonitorOptions);
    public sealed virtual Task FlushAsync(TimeSpan timeout);
    [CompilerGeneratedAttribute]
public sealed virtual IMetricAggregator get_Metrics();
    public sealed virtual void Dispose();
    public sealed virtual void CaptureUserFeedback(UserFeedback userFeedback);
    public sealed virtual SentryId get_LastEventId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Extensibility.FormRequestPayloadExtractor : BaseRequestPayloadExtractor {
    private static string SupportedContentType;
    protected virtual bool IsSupported(IHttpRequest request);
    protected virtual object DoExtractPayLoad(IHttpRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
public class Sentry.Extensibility.HubAdapter : object {
    public static HubAdapter Instance;
    public bool IsEnabled { get; }
    public SentryId LastEventId { get; }
    public IMetricAggregator Metrics { get; }
    private static HubAdapter();
    [DebuggerStepThroughAttribute]
public sealed virtual bool get_IsEnabled();
    [DebuggerStepThroughAttribute]
public sealed virtual SentryId get_LastEventId();
    [DebuggerStepThroughAttribute]
public sealed virtual void ConfigureScope(Action`1<Scope> configureScope);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ConfigureScopeAsync(Func`2<Scope, Task> configureScope);
    [DebuggerStepThroughAttribute]
public sealed virtual IDisposable PushScope();
    [DebuggerStepThroughAttribute]
public sealed virtual IDisposable PushScope(TState state);
    [DebuggerStepThroughAttribute]
public sealed virtual ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext);
    [DebuggerStepThroughAttribute]
internal ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext, DynamicSamplingContext dynamicSamplingContext);
    [DebuggerStepThroughAttribute]
public sealed virtual void BindException(Exception exception, ISpan span);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public sealed virtual ISpan GetSpan();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public sealed virtual SentryTraceHeader GetTraceHeader();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public sealed virtual BaggageHeader GetBaggage();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public sealed virtual TransactionContext ContinueTrace(string traceHeader, string baggageHeader, string name, string operation);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public sealed virtual TransactionContext ContinueTrace(SentryTraceHeader traceHeader, BaggageHeader baggageHeader, string name, string operation);
    [DebuggerStepThroughAttribute]
public sealed virtual void StartSession();
    [DebuggerStepThroughAttribute]
public sealed virtual void PauseSession();
    [DebuggerStepThroughAttribute]
public sealed virtual void ResumeSession();
    [DebuggerStepThroughAttribute]
public sealed virtual void EndSession(SessionEndStatus status);
    [DebuggerStepThroughAttribute]
public sealed virtual void BindClient(ISentryClient client);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public void AddBreadcrumb(string message, string category, string type, IDictionary`2<string, string> data, BreadcrumbLevel level);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public void AddBreadcrumb(ISystemClock clock, string message, string category, string type, IDictionary`2<string, string> data, BreadcrumbLevel level);
    [DebuggerStepThroughAttribute]
public SentryId CaptureEvent(SentryEvent evt);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public SentryId CaptureEvent(SentryEvent evt, Scope scope);
    public sealed virtual bool CaptureEnvelope(Envelope envelope);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public sealed virtual SentryId CaptureEvent(SentryEvent evt, Scope scope, SentryHint hint);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public sealed virtual SentryId CaptureEvent(SentryEvent evt, Action`1<Scope> configureScope);
    public sealed virtual SentryId CaptureEvent(SentryEvent evt, SentryHint hint, Action`1<Scope> configureScope);
    [DebuggerStepThroughAttribute]
public SentryId CaptureException(Exception exception);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public sealed virtual void CaptureTransaction(SentryTransaction transaction);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public sealed virtual void CaptureTransaction(SentryTransaction transaction, Scope scope, SentryHint hint);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public sealed virtual void CaptureSession(SessionUpdate sessionUpdate);
    public sealed virtual SentryId CaptureCheckIn(string monitorSlug, CheckInStatus status, Nullable`1<SentryId> sentryId, Nullable`1<TimeSpan> duration, Scope scope, Action`1<SentryMonitorOptions> monitorOptions);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public sealed virtual Task FlushAsync(TimeSpan timeout);
    public sealed virtual IMetricAggregator get_Metrics();
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public sealed virtual void CaptureUserFeedback(UserFeedback sentryUserFeedback);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.IBackgroundWorker {
    public int QueuedItems { get; }
    public abstract virtual bool EnqueueEnvelope(Envelope envelope);
    public abstract virtual Task FlushAsync(TimeSpan timeout);
    public abstract virtual int get_QueuedItems();
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.IDiagnosticLogger {
    public abstract virtual bool IsEnabled(SentryLevel level);
    public abstract virtual void Log(SentryLevel logLevel, string message, Exception exception, Object[] args);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.IExceptionFilter {
    public abstract virtual bool Filter(Exception ex);
}
[NullableContextAttribute("2")]
public interface Sentry.Extensibility.IHttpRequest {
    public Nullable`1<long> ContentLength { get; }
    public string ContentType { get; }
    public Stream Body { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> Form { get; }
    public abstract virtual Nullable`1<long> get_ContentLength();
    public abstract virtual string get_ContentType();
    public abstract virtual Stream get_Body();
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> get_Form();
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Sentry.Extensibility.INetworkStatusListener {
    public bool Online { get; }
    public abstract virtual bool get_Online();
    public abstract virtual Task WaitForNetworkOnlineAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.IRequestPayloadExtractor {
    public abstract virtual object ExtractPayload(IHttpRequest request);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.ISentryEventExceptionProcessor {
    public abstract virtual void Process(Exception exception, SentryEvent sentryEvent);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.ISentryEventProcessor {
    public abstract virtual SentryEvent Process(SentryEvent event);
}
[ExtensionAttribute]
internal static class Sentry.Extensibility.ISentryEventProcessorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static SentryEvent DoProcessEvent(ISentryEventProcessor processor, SentryEvent event, SentryHint hint);
}
public interface Sentry.Extensibility.ISentryEventProcessorWithHint {
    [NullableContextAttribute("1")]
public abstract virtual SentryEvent Process(SentryEvent event, SentryHint hint);
}
[NullableContextAttribute("2")]
public interface Sentry.Extensibility.ISentryStackTraceFactory {
    public abstract virtual SentryStackTrace Create(Exception exception);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.ISentryTransactionProcessor {
    public abstract virtual SentryTransaction Process(SentryTransaction transaction);
}
[ExtensionAttribute]
internal static class Sentry.Extensibility.ISentryTransactionProcessorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static SentryTransaction DoProcessTransaction(ISentryTransactionProcessor processor, SentryTransaction transaction, SentryHint hint);
}
public interface Sentry.Extensibility.ISentryTransactionProcessorWithHint {
    [NullableContextAttribute("1")]
public abstract virtual SentryTransaction Process(SentryTransaction transaction, SentryHint hint);
}
[NullableContextAttribute("1")]
public interface Sentry.Extensibility.ITransport {
    public abstract virtual Task SendEnvelopeAsync(Envelope envelope, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Extensibility.RequestBodyExtractionDispatcher : object {
    private SentryOptions _options;
    private Func`1<RequestSize> _sizeSwitch;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IRequestPayloadExtractor> <Extractors>k__BackingField;
    internal IEnumerable`1<IRequestPayloadExtractor> Extractors { get; }
    public RequestBodyExtractionDispatcher(IEnumerable`1<IRequestPayloadExtractor> extractors, SentryOptions options, Func`1<RequestSize> sizeSwitch);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IRequestPayloadExtractor> get_Extractors();
    public sealed virtual object ExtractPayload(IHttpRequest request);
}
public enum Sentry.Extensibility.RequestSize : Enum {
    public int value__;
    public static RequestSize None;
    public static RequestSize Small;
    public static RequestSize Medium;
    public static RequestSize Always;
}
public abstract class Sentry.Extensibility.SentryEventExceptionProcessor`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual void Process(Exception exception, SentryEvent sentryEvent);
    [NullableContextAttribute("1")]
protected internal abstract virtual void ProcessException(TException exception, SentryEvent sentryEvent);
}
public class Sentry.Extensibility.SentryStackTraceFactory : object {
    [NullableAttribute("1")]
private SentryOptions _options;
    [NullableContextAttribute("1")]
public SentryStackTraceFactory(SentryOptions options);
    [NullableContextAttribute("2")]
public sealed virtual SentryStackTrace Create(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.FileAttachmentContent : object {
    private string _filePath;
    private bool _readFileAsynchronously;
    public FileAttachmentContent(string filePath);
    public FileAttachmentContent(string filePath, bool readFileAsynchronously);
    public sealed virtual Stream GetStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Force.Crc32.Crc32Algorithm : HashAlgorithm {
    private UInt32 _currentCrc;
    private bool _isBigEndian;
    private static SafeProxy _proxy;
    public Crc32Algorithm(bool isBigEndian);
    private static Crc32Algorithm();
    public static UInt32 Append(UInt32 initial, Byte[] input, int offset, int length);
    public static UInt32 Append(UInt32 initial, Byte[] input);
    public static UInt32 Compute(Byte[] input, int offset, int length);
    public static UInt32 Compute(Byte[] input);
    public static UInt32 ComputeAndWriteToEnd(Byte[] input, int offset, int length);
    public static UInt32 ComputeAndWriteToEnd(Byte[] input);
    public static bool IsValidWithCrcAtEnd(Byte[] input, int offset, int lengthWithCrc);
    public static bool IsValidWithCrcAtEnd(Byte[] input);
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] input, int offset, int length);
    protected virtual Byte[] HashFinal();
    private static UInt32 AppendInternal(UInt32 initial, Byte[] input, int offset, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Force.Crc32.SafeProxy : object {
    private static UInt32 Poly;
    private UInt32[] _table;
    protected void Init(UInt32 poly);
    public UInt32 Append(UInt32 crc, Byte[] input, int offset, int length);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.GlobalSessionManager : object {
    [NullableAttribute("1")]
private static string PersistedSessionFileName;
    [NullableAttribute("1")]
private ISystemClock _clock;
    [NullableAttribute("1")]
private Func`2<string, PersistedSessionUpdate> _persistedSessionProvider;
    [NullableAttribute("1")]
private SentryOptions _options;
    private string _persistenceDirectoryPath;
    private SentrySession _currentSession;
    private Nullable`1<DateTimeOffset> _lastPauseTimestamp;
    internal SentrySession CurrentSession { get; }
    public bool IsSessionActive { get; }
    [NullableContextAttribute("1")]
public GlobalSessionManager(SentryOptions options, ISystemClock clock, Func`2<string, PersistedSessionUpdate> persistedSessionProvider);
    internal SentrySession get_CurrentSession();
    public sealed virtual bool get_IsSessionActive();
    [NullableContextAttribute("1")]
private void PersistSession(SessionUpdate update, Nullable`1<DateTimeOffset> pauseTimestamp);
    private void DeletePersistedSession();
    public sealed virtual SessionUpdate TryRecoverPersistedSession();
    public sealed virtual SessionUpdate StartSession();
    [NullableContextAttribute("1")]
private SessionUpdate EndSession(SentrySession session, DateTimeOffset timestamp, SessionEndStatus status);
    public sealed virtual SessionUpdate EndSession(DateTimeOffset timestamp, SessionEndStatus status);
    public sealed virtual SessionUpdate EndSession(SessionEndStatus status);
    public sealed virtual void PauseSession();
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<SessionUpdate> ResumeSession();
    public sealed virtual SessionUpdate ReportError();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.GraphQLContentExtractor : object {
    [AsyncStateMachineAttribute("Sentry.GraphQLContentExtractor/<ExtractRequestContentAsync>d__0")]
internal static Task`1<GraphQLRequestContent> ExtractRequestContentAsync(HttpRequestMessage request, SentryOptions options);
    [AsyncStateMachineAttribute("Sentry.GraphQLContentExtractor/<ExtractResponseContentAsync>d__1")]
internal static Task`1<Nullable`1<JsonElement>> ExtractResponseContentAsync(HttpResponseMessage response, SentryOptions options);
    [NullableContextAttribute("2")]
private static void TrySeek(Stream stream, long position);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Sentry.GraphQLContentExtractor/<ExtractContentAsync>d__3")]
private static Task`1<string> ExtractContentAsync(HttpContent content, SentryOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.GraphQLHttpRequestException : Exception {
    public GraphQLHttpRequestException(string message);
    public GraphQLHttpRequestException(string message, Exception inner);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.GraphQLRequestContent : object {
    [NullableAttribute("1")]
private static Regex Expression;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationType>k__BackingField;
    [NullableAttribute("1")]
private static JsonSerializerOptions SerializerOptions { get; }
    [NullableAttribute("1")]
private IReadOnlyDictionary`2<string, object> Items { get; }
    internal string RequestContent { get; }
    public string Query { get; }
    public string OperationName { get; }
    public string OperationType { get; }
    public GraphQLRequestContent(string requestContent, SentryOptions options);
    private static GraphQLRequestContent();
    [NullableContextAttribute("1")]
private static JsonSerializerOptions get_SerializerOptions();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
internal string get_RequestContent();
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public string get_OperationType();
    [NullableContextAttribute("1")]
public string OperationNameOrFallback();
    [NullableContextAttribute("1")]
public string OperationTypeOrFallback();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.HasExtraExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void SetExtras(IHasExtra hasExtra, IEnumerable`1<KeyValuePair`2<string, object>> values);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.HasTagsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void SetTags(IHasTags hasTags, IEnumerable`1<KeyValuePair`2<string, string>> tags);
}
public static class Sentry.HintTypes : object {
    [NullableAttribute("1")]
public static string HttpResponseMessage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Sentry.Http.HttpTransportBase : object {
    internal static string DefaultErrorMessage;
    private SentryOptions _options;
    private ISystemClock _clock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, string> _getEnvironmentVariable;
    [NullableAttribute("2")]
private string _lastDiscardedSessionInitId;
    private string _typeName;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<RateLimitCategory, DateTimeOffset> <CategoryLimitResets>k__BackingField;
    internal ConcurrentDictionary`2<RateLimitCategory, DateTimeOffset> CategoryLimitResets { get; }
    protected HttpTransportBase(SentryOptions options, Func`2<string, string> getEnvironmentVariable, ISystemClock clock);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<RateLimitCategory, DateTimeOffset> get_CategoryLimitResets();
    protected internal Envelope ProcessEnvelope(Envelope envelope);
    private void ProcessEnvelopeItem(DateTimeOffset now, EnvelopeItem item, List`1<EnvelopeItem> items);
    protected internal virtual HttpRequestMessage CreateRequest(Envelope envelope);
    protected void HandleResponse(HttpResponseMessage response, Envelope envelope);
    protected Task HandleResponseAsync(HttpResponseMessage response, Envelope envelope, CancellationToken cancellationToken);
    protected Stream ReadStreamFromHttpContent(HttpContent content);
    private void ExtractRateLimits(HttpHeaders responseHeaders);
    private void HandleSuccess(Envelope envelope);
    [AsyncStateMachineAttribute("Sentry.Http.HttpTransportBase/<HandleSuccessAsync>d__18")]
private Task HandleSuccessAsync(Envelope envelope, CancellationToken cancellationToken);
    private void LogEnvelopeSent(Envelope envelope, string payload);
    private void HandleFailure(HttpResponseMessage response, Envelope envelope);
    [AsyncStateMachineAttribute("Sentry.Http.HttpTransportBase/<HandleFailureAsync>d__21")]
private Task HandleFailureAsync(HttpResponseMessage response, Envelope envelope, CancellationToken cancellationToken);
    private void IncrementDiscardsForHttpFailure(HttpStatusCode responseStatusCode, Envelope envelope);
    private void LogFailure(string responseString, HttpStatusCode responseStatusCode, Nullable`1<SentryId> eventId);
    private void LogFailure(JsonElement responseJson, HttpStatusCode responseStatusCode, Nullable`1<SentryId> eventId);
    private static bool HasJsonContent(HttpContent content);
}
[NullableContextAttribute("1")]
public interface Sentry.Http.ISentryHttpClientFactory {
    public abstract virtual HttpClient Create(SentryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Http.SpotlightHttpTransport : HttpTransport {
    private ITransport _inner;
    private SentryOptions _options;
    private HttpClient _httpClient;
    private Uri _spotlightUrl;
    private ISystemClock _clock;
    public SpotlightHttpTransport(ITransport inner, SentryOptions options, HttpClient httpClient, Uri spotlightUrl, ISystemClock clock);
    protected internal virtual HttpRequestMessage CreateRequest(Envelope envelope);
    [AsyncStateMachineAttribute("Sentry.Http.SpotlightHttpTransport/<SendEnvelopeAsync>d__7")]
public virtual Task SendEnvelopeAsync(Envelope envelope, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Sentry.HttpHeadersExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string GetCookies(HttpHeaders headers);
}
[IsReadOnlyAttribute]
public class Sentry.HttpStatusCodeRange : ValueType {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public int Start { get; public set; }
    public int End { get; public set; }
    public HttpStatusCodeRange(int statusCode);
    public HttpStatusCodeRange(int start, int end);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_End(int value);
    public static HttpStatusCodeRange op_Implicit(ValueTuple`2<int, int> range);
    public static HttpStatusCodeRange op_Implicit(int statusCode);
    public static HttpStatusCodeRange op_Implicit(HttpStatusCode statusCode);
    public static HttpStatusCodeRange op_Implicit(ValueTuple`2<HttpStatusCode, HttpStatusCode> range);
    public bool Contains(int statusCode);
    public bool Contains(HttpStatusCode statusCode);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(HttpStatusCodeRange left, HttpStatusCodeRange right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(HttpStatusCodeRange left, HttpStatusCodeRange right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HttpStatusCodeRange other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.HubExtensions : object {
    [ExtensionAttribute]
public static ITransactionTracer StartTransaction(IHub hub, ITransactionContext context);
    [ExtensionAttribute]
public static ITransactionTracer StartTransaction(IHub hub, string name, string operation);
    [ExtensionAttribute]
public static ITransactionTracer StartTransaction(IHub hub, string name, string operation, string description);
    [ExtensionAttribute]
public static ITransactionTracer StartTransaction(IHub hub, string name, string operation, SentryTraceHeader traceHeader);
    [ExtensionAttribute]
public static void AddBreadcrumb(IHub hub, string message, string category, string type, IDictionary`2<string, string> data, BreadcrumbLevel level);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void AddBreadcrumb(IHub hub, ISystemClock clock, string message, string category, string type, IDictionary`2<string, string> data, BreadcrumbLevel level);
    [ExtensionAttribute]
public static void AddBreadcrumb(IHub hub, Breadcrumb breadcrumb, SentryHint hint);
    [ExtensionAttribute]
public static IDisposable PushAndLockScope(IHub hub);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void LockScope(IHub hub);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void UnlockScope(IHub hub);
    [ExtensionAttribute]
internal static SentryId CaptureExceptionInternal(IHub hub, Exception ex);
    [ExtensionAttribute]
public static SentryId CaptureException(IHub hub, Exception ex, Action`1<Scope> configureScope);
    [ExtensionAttribute]
public static SentryId CaptureMessage(IHub hub, string message, Action`1<Scope> configureScope, SentryLevel level);
    [ExtensionAttribute]
internal static ITransactionTracer StartTransaction(IHub hub, ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext, DynamicSamplingContext dynamicSamplingContext);
    [ExtensionAttribute]
internal static ITransactionTracer GetTransaction(IHub hub);
    [ExtensionAttribute]
internal static ITransactionTracer GetTransactionIfSampled(IHub hub);
}
[NullableContextAttribute("1")]
public interface Sentry.IAttachmentContent {
    public abstract virtual Stream GetStream();
}
internal interface Sentry.IBaseTracer {
    internal bool IsOtelInstrumenter { get; }
    internal abstract virtual bool get_IsOtelInstrumenter();
}
[NullableContextAttribute("1")]
public interface Sentry.IEventLike {
    public IReadOnlyCollection`1<Breadcrumb> Breadcrumbs { get; }
    [NullableAttribute("2")]
public string Distribution { get; public set; }
    public Nullable`1<SentryLevel> Level { get; public set; }
    public SentryRequest Request { get; public set; }
    public SentryContexts Contexts { get; public set; }
    public SentryUser User { get; public set; }
    [NullableAttribute("2")]
public string Release { get; public set; }
    [NullableAttribute("2")]
public string Environment { get; public set; }
    [NullableAttribute("2")]
public string TransactionName { get; public set; }
    public SdkVersion Sdk { get; }
    public IReadOnlyList`1<string> Fingerprint { get; public set; }
    public abstract virtual IReadOnlyCollection`1<Breadcrumb> get_Breadcrumbs();
    public abstract virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    [NullableContextAttribute("2")]
public abstract virtual string get_Distribution();
    [NullableContextAttribute("2")]
public abstract virtual void set_Distribution(string value);
    public abstract virtual Nullable`1<SentryLevel> get_Level();
    public abstract virtual void set_Level(Nullable`1<SentryLevel> value);
    public abstract virtual SentryRequest get_Request();
    public abstract virtual void set_Request(SentryRequest value);
    public abstract virtual SentryContexts get_Contexts();
    public abstract virtual void set_Contexts(SentryContexts value);
    public abstract virtual SentryUser get_User();
    public abstract virtual void set_User(SentryUser value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Release();
    [NullableContextAttribute("2")]
public abstract virtual void set_Release(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Environment();
    [NullableContextAttribute("2")]
public abstract virtual void set_Environment(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_TransactionName();
    [NullableContextAttribute("2")]
public abstract virtual void set_TransactionName(string value);
    public abstract virtual SdkVersion get_Sdk();
    public abstract virtual IReadOnlyList`1<string> get_Fingerprint();
    public abstract virtual void set_Fingerprint(IReadOnlyList`1<string> value);
}
[NullableContextAttribute("1")]
public interface Sentry.IHasExtra {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Extra();
    public abstract virtual void SetExtra(string key, object value);
}
[NullableContextAttribute("1")]
public interface Sentry.IHasTags {
    public IReadOnlyDictionary`2<string, string> Tags { get; }
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Tags();
    public abstract virtual void SetTag(string key, string value);
    public abstract virtual void UnsetTag(string key);
}
[NullableContextAttribute("1")]
public interface Sentry.IHub {
    public SentryId LastEventId { get; }
    public IMetricAggregator Metrics { get; }
    public abstract virtual SentryId get_LastEventId();
    public abstract virtual IMetricAggregator get_Metrics();
    public abstract virtual ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext);
    public abstract virtual void BindException(Exception exception, ISpan span);
    [NullableContextAttribute("2")]
public abstract virtual ISpan GetSpan();
    [NullableContextAttribute("2")]
public abstract virtual SentryTraceHeader GetTraceHeader();
    [NullableContextAttribute("2")]
public abstract virtual BaggageHeader GetBaggage();
    [NullableContextAttribute("2")]
public abstract virtual TransactionContext ContinueTrace(string traceHeader, string baggageHeader, string name, string operation);
    [NullableContextAttribute("2")]
public abstract virtual TransactionContext ContinueTrace(SentryTraceHeader traceHeader, BaggageHeader baggageHeader, string name, string operation);
    public abstract virtual void StartSession();
    public abstract virtual void PauseSession();
    public abstract virtual void ResumeSession();
    public abstract virtual void EndSession(SessionEndStatus status);
    public abstract virtual SentryId CaptureEvent(SentryEvent evt, Action`1<Scope> configureScope);
    public abstract virtual SentryId CaptureEvent(SentryEvent evt, SentryHint hint, Action`1<Scope> configureScope);
}
[NullableContextAttribute("1")]
public interface Sentry.IMetricAggregator {
    public abstract virtual void Increment(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public abstract virtual void Gauge(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public abstract virtual void Distribution(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public abstract virtual void Set(string key, int value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public abstract virtual void Set(string key, string value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public abstract virtual void Timing(string key, double value, Duration unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public abstract virtual IDisposable StartTimer(string key, Duration unit, IDictionary`2<string, string> tags, int stackLevel);
    public abstract virtual Task FlushAsync(bool force, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Sentry.IMetricHub {
    public abstract virtual void CaptureMetrics(IEnumerable`1<Metric> metrics);
    public abstract virtual void CaptureCodeLocations(CodeLocations codeLocations);
    public abstract virtual ISpan StartSpan(string operation, string description);
    [NullableContextAttribute("2")]
public abstract virtual ISpan GetSpan();
}
public class Sentry.Infrastructure.ConsoleAndTraceDiagnosticLogger : DiagnosticLogger {
    public ConsoleAndTraceDiagnosticLogger(SentryLevel minimalLevel);
    [NullableContextAttribute("1")]
protected virtual void LogMessage(string message);
}
public class Sentry.Infrastructure.ConsoleDiagnosticLogger : DiagnosticLogger {
    public ConsoleDiagnosticLogger(SentryLevel minimalLevel);
    [NullableContextAttribute("1")]
protected virtual void LogMessage(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Sentry.Infrastructure.DiagnosticLogger : object {
    private SentryLevel _minimalLevel;
    protected DiagnosticLogger(SentryLevel minimalLevel);
    public sealed virtual bool IsEnabled(SentryLevel level);
    public sealed virtual void Log(SentryLevel logLevel, string message, Exception exception, Object[] args);
    protected abstract virtual void LogMessage(string message);
    private static string ScrubNewlines(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Infrastructure.FileDiagnosticLogger : DiagnosticLogger {
    private bool _alsoWriteToConsole;
    private StreamWriter _writer;
    public FileDiagnosticLogger(string path, bool alsoWriteToConsole);
    public FileDiagnosticLogger(string path, SentryLevel minimalLevel, bool alsoWriteToConsole);
    protected virtual void LogMessage(string message);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(object _, EventArgs _);
}
public interface Sentry.Infrastructure.ISystemClock {
    public abstract virtual DateTimeOffset GetUtcNow();
}
public class Sentry.Infrastructure.SystemClock : object {
    [NullableAttribute("1")]
public static SystemClock Clock;
    private static SystemClock();
    public sealed virtual DateTimeOffset GetUtcNow();
}
public class Sentry.Infrastructure.TraceDiagnosticLogger : DiagnosticLogger {
    public TraceDiagnosticLogger(SentryLevel minimalLevel);
    [NullableContextAttribute("1")]
protected virtual void LogMessage(string message);
}
public enum Sentry.InstructionAddressAdjustment : Enum {
    public int value__;
    public static InstructionAddressAdjustment Auto;
    public static InstructionAddressAdjustment All;
    public static InstructionAddressAdjustment AllButFirst;
    public static InstructionAddressAdjustment None;
}
public enum Sentry.Instrumenter : Enum {
    public int value__;
    public static Instrumenter Sentry;
    public static Instrumenter OpenTelemetry;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Integrations.AppDomainProcessExitIntegration : object {
    private IAppDomain _appDomain;
    [NullableAttribute("2")]
private IHub _hub;
    [NullableAttribute("2")]
private SentryOptions _options;
    [NullableContextAttribute("2")]
public AppDomainProcessExitIntegration(IAppDomain appDomain);
    public sealed virtual void Register(IHub hub, SentryOptions options);
    internal void HandleProcessExit(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Integrations.AppDomainUnhandledExceptionIntegration : object {
    private IAppDomain _appDomain;
    [NullableAttribute("2")]
private IHub _hub;
    [NullableAttribute("2")]
private SentryOptions _options;
    [NullableContextAttribute("2")]
internal AppDomainUnhandledExceptionIntegration(IAppDomain appDomain);
    public sealed virtual void Register(IHub hub, SentryOptions options);
    [SecurityCriticalAttribute]
internal void Handle(object sender, UnhandledExceptionEventArgs e);
}
internal class Sentry.Integrations.AutoSessionTrackingIntegration : object {
    [NullableContextAttribute("1")]
public sealed virtual void Register(IHub hub, SentryOptions options);
}
[NullableContextAttribute("1")]
public interface Sentry.Integrations.ISdkIntegration {
    public abstract virtual void Register(IHub hub, SentryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Integrations.UnobservedTaskExceptionIntegration : object {
    internal static string MechanismKey;
    private IAppDomain _appDomain;
    private IHub _hub;
    [NullableContextAttribute("2")]
internal UnobservedTaskExceptionIntegration(IAppDomain appDomain);
    public sealed virtual void Register(IHub hub, SentryOptions _);
    [SecurityCriticalAttribute]
internal void Handle(object sender, UnobservedTaskExceptionEventArgs e);
}
internal static class Sentry.Internal.AotHelper : object {
    [NullableAttribute("1")]
internal static string SuppressionJustification;
    [CompilerGeneratedAttribute]
private static bool <IsTrimmed>k__BackingField;
    internal static bool IsNativeAot;
    internal static bool IsTrimmed { get; }
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
private static AotHelper();
    [CompilerGeneratedAttribute]
internal static bool get_IsTrimmed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.AppDomainAdapter : object {
    [CompilerGeneratedAttribute]
private static AppDomainAdapter <Instance>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private UnhandledExceptionEventHandler UnhandledException;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ProcessExit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<UnobservedTaskExceptionEventArgs> UnobservedTaskException;
    public static AppDomainAdapter Instance { get; }
    private static AppDomainAdapter();
    [CompilerGeneratedAttribute]
public static AppDomainAdapter get_Instance();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_UnhandledException(UnhandledExceptionEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_UnhandledException(UnhandledExceptionEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_ProcessExit(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_ProcessExit(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    private void OnProcessExit(object sender, EventArgs e);
    [SecurityCriticalAttribute]
private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e);
    [SecurityCriticalAttribute]
private void OnUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e);
}
internal static class Sentry.Internal.ApplicationVersionLocator : object {
    [NullableContextAttribute("2")]
internal static string GetCurrent(Assembly asm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Sentry.Internal.AutoClearingList`1 : object {
    private IList`1<T> _list;
    private bool _clearOnNextAdd;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public AutoClearingList`1(IEnumerable`1<T> initialItems, bool clearOnNextAdd);
    public sealed virtual void Add(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.BackgroundWorker : object {
    private ITransport _transport;
    private SentryOptions _options;
    private ConcurrentQueueLite`1<Envelope> _queue;
    private int _maxItems;
    private CancellationTokenSource _shutdownSource;
    private SemaphoreSlim _queuedEnvelopeSemaphore;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private int _currentItems;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler OnFlushObjectReceived;
    [CompilerGeneratedAttribute]
private Task <WorkerTask>k__BackingField;
    internal Task WorkerTask { get; }
    public int QueuedItems { get; }
    public BackgroundWorker(ITransport transport, SentryOptions options, CancellationTokenSource shutdownSource, ConcurrentQueueLite`1<Envelope> queue);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_OnFlushObjectReceived(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_OnFlushObjectReceived(EventHandler value);
    [CompilerGeneratedAttribute]
internal Task get_WorkerTask();
    public sealed virtual int get_QueuedItems();
    public sealed virtual bool EnqueueEnvelope(Envelope envelope);
    public bool EnqueueEnvelope(Envelope envelope, bool process);
    public void ProcessQueuedItems(int count);
    [AsyncStateMachineAttribute("Sentry.Internal.BackgroundWorker/<DoWorkAsync>d__20")]
private Task DoWorkAsync();
    [AsyncStateMachineAttribute("Sentry.Internal.BackgroundWorker/<FlushAsync>d__21")]
public sealed virtual Task FlushAsync(TimeSpan timeout);
    [AsyncStateMachineAttribute("Sentry.Internal.BackgroundWorker/<DoFlushAsync>d__22")]
private Task DoFlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Internal.BackgroundWorker/<SendFinalClientReportAsync>d__23")]
private Task SendFinalClientReportAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.ClientReport : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<DiscardReasonWithCategory, int> <DiscardedEvents>k__BackingField;
    public DateTimeOffset Timestamp { get; }
    public IReadOnlyDictionary`2<DiscardReasonWithCategory, int> DiscardedEvents { get; }
    public ClientReport(DateTimeOffset timestamp, IReadOnlyDictionary`2<DiscardReasonWithCategory, int> discardedEvents);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<DiscardReasonWithCategory, int> get_DiscardedEvents();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static ClientReport FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.ClientReportRecorder : object {
    private SentryOptions _options;
    private ISystemClock _clock;
    private ThreadsafeCounterDictionary`1<DiscardReasonWithCategory> _discardedEvents;
    internal IReadOnlyDictionary`2<DiscardReasonWithCategory, int> DiscardedEvents { get; }
    public ClientReportRecorder(SentryOptions options, ISystemClock clock);
    internal IReadOnlyDictionary`2<DiscardReasonWithCategory, int> get_DiscardedEvents();
    public sealed virtual void RecordDiscardedEvent(DiscardReason reason, DataCategory category, int quantity);
    [NullableContextAttribute("2")]
public sealed virtual ClientReport GenerateClientReport();
    public sealed virtual void Load(ClientReport clientReport);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.ConcurrentQueueLite`1 : object {
    private List`1<T> _queue;
    public int Count { get; }
    public bool IsEmpty { get; }
    public void Enqueue(T item);
    [NullableContextAttribute("2")]
public bool TryDequeue(T& item);
    public int get_Count();
    public bool get_IsEmpty();
    public void Clear();
    [NullableContextAttribute("2")]
public bool TryPeek(T& item);
    public T[] ToArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.Constants : object {
    public static string DsnEnvironmentVariable;
    public static string ReleaseEnvironmentVariable;
    public static string EnvironmentEnvironmentVariable;
    public static string ProductionEnvironmentSetting;
    public static string StagingEnvironmentSetting;
    public static string DevelopmentEnvironmentSetting;
    public static string DebugEnvironmentSetting;
    public static string SdkName;
}
internal abstract class Sentry.Internal.ContextWriter : object {
    [NullableContextAttribute("1")]
public void Write(Scope scope);
    [NullableContextAttribute("2")]
protected abstract virtual void WriteScope(string AppStartTime, string AppBuildType, string OperatingSystemRawDescription, Nullable`1<int> DeviceProcessorCount, string DeviceCpuDescription, string DeviceTimezone, Nullable`1<bool> DeviceSupportsVibration, string DeviceName, Nullable`1<bool> DeviceSimulator, string DeviceDeviceUniqueIdentifier, string DeviceDeviceType, string DeviceModel, Nullable`1<long> DeviceMemorySize, Nullable`1<int> GpuId, string GpuName, string GpuVendorName, Nullable`1<int> GpuMemorySize, string GpuNpotSupport, string GpuVersion, string GpuApiType, Nullable`1<int> GpuMaxTextureSize, Nullable`1<bool> GpuSupportsDrawCallInstancing, Nullable`1<bool> GpuSupportsRayTracing, Nullable`1<bool> GpuSupportsComputeShaders, Nullable`1<bool> GpuSupportsGeometryShaders, string GpuVendorId, Nullable`1<bool> GpuMultiThreadedRendering, string GpuGraphicsShaderLevel);
}
[IsReadOnlyAttribute]
internal class Sentry.Internal.DataCategory : ValueType {
    public static DataCategory Attachment;
    public static DataCategory Default;
    public static DataCategory Error;
    public static DataCategory Internal;
    public static DataCategory Security;
    public static DataCategory Session;
    public static DataCategory Span;
    public static DataCategory Transaction;
    public static DataCategory Profile;
    [NullableAttribute("1")]
private string _value;
    [NullableAttribute("1")]
private string Sentry.Internal.IEnumeration.Value { get; }
    [NullableContextAttribute("1")]
public DataCategory(string value);
    private static DataCategory();
    [NullableContextAttribute("1")]
private sealed virtual override string Sentry.Internal.IEnumeration.get_Value();
    public sealed virtual int CompareTo(DataCategory other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    public sealed virtual bool Equals(DataCategory other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DebugStackTrace : SentryStackTrace {
    private SentryOptions _options;
    private Dictionary`2<Guid, int> _debugImageIndexByModule;
    private static int DebugImageMissing;
    private bool _debugImagesMerged;
    private static Regex RegexAsyncFunctionName;
    private static Regex RegexAnonymousFunction;
    private static Regex RegexAsyncReturn;
    private static Regex RegexNativeAOTInfo;
    [CompilerGeneratedAttribute]
private List`1<DebugImage> <DebugImages>k__BackingField;
    protected List`1<DebugImage> DebugImages { get; }
    internal DebugStackTrace(SentryOptions options);
    private static DebugStackTrace();
    [CompilerGeneratedAttribute]
protected List`1<DebugImage> get_DebugImages();
    internal static DebugStackTrace Create(SentryOptions options, StackTrace stackTrace, bool isCurrentStackTrace, int skipFrames);
    internal static DebugStackTrace Create(SentryOptions options, StackTrace stackTrace, bool isCurrentStackTrace, Func`2<string, bool> skipFrame);
    internal void MergeDebugImagesInto(SentryEvent event);
    [IteratorStateMachineAttribute("Sentry.Internal.DebugStackTrace/<CreateFrames>d__15")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
private IEnumerable`1<SentryStackFrame> CreateFrames(StackTrace stackTrace, bool isCurrentStackTrace, Func`2<string, bool> skipFrame);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
private SentryStackFrame TryCreateManagedFrame(IStackFrame stackFrame);
    internal SentryStackFrame CreateFrame(IStackFrame stackFrame);
    private static string GetRelativeAddressMode(int moduleIndex);
    private static void DemangleAsyncFunctionName(SentryStackFrame frame);
    internal static void DemangleAnonymousFunction(SentryStackFrame frame);
    private static void DemangleLambdaReturnType(SentryStackFrame frame);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002:Avoid calling members marked with 'RequiresAssemblyFilesAttribute' when publishing as a single-file")]
private static PEReader TryReadAssemblyFromDisk(Module module, SentryOptions options, String& assemblyName);
    private Nullable`1<int> AddManagedModuleDebugImage(Module module);
    internal static DebugImage GetManagedModuleDebugImage(Module module, SentryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DelegateEventProcessor : object {
    private Func`2<SentryEvent, SentryEvent> _func;
    public DelegateEventProcessor(Func`2<SentryEvent, SentryEvent> func);
    public sealed virtual SentryEvent Process(SentryEvent event);
}
internal class Sentry.Internal.DelegateTransactionProcessor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<SentryTransaction, SentryTransaction> _func;
    public DelegateTransactionProcessor(Func`2<SentryTransaction, SentryTransaction> func);
    [NullableContextAttribute("1")]
public sealed virtual SentryTransaction Process(SentryTransaction transaction);
}
internal class Sentry.Internal.DelimitedPrefixOrPatternMatcher : object {
    [CompilerGeneratedAttribute]
private char <delimiter>P;
    [CompilerGeneratedAttribute]
private StringComparison <comparison>P;
    public DelimitedPrefixOrPatternMatcher(char delimiter, StringComparison comparison);
    [NullableContextAttribute("1")]
public sealed virtual bool IsMatch(StringOrRegex stringOrRegex, string value);
}
internal static class Sentry.Internal.DiagnosticSource.DatabaseProviderSystems : object {
    [NullableAttribute("1")]
public static Dictionary`2<string, string> ProviderSystems;
    private static DatabaseProviderSystems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DiagnosticSource.EFCommandDiagnosticSourceHelper : EFDiagnosticSourceHelper {
    protected string Operation { get; }
    internal EFCommandDiagnosticSourceHelper(IHub hub, SentryOptions options);
    protected virtual string get_Operation();
    protected virtual string GetDescription(object diagnosticSourceValue);
    [NullableContextAttribute("2")]
private Nullable`1<Guid> GetCommandId(object diagnosticSourceValue);
    private static void SetCommandId(ISpan span, Nullable`1<Guid> commandId);
    private static Nullable`1<Guid> TryGetCommandId(ISpan span);
    [NullableContextAttribute("2")]
protected virtual ISpan GetSpanReference(ITransactionTracer transaction, object diagnosticSourceValue);
    protected virtual void SetSpanReference(ISpan span, object diagnosticSourceValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DiagnosticSource.EFConnectionDiagnosticSourceHelper : EFDiagnosticSourceHelper {
    protected string Operation { get; }
    internal EFConnectionDiagnosticSourceHelper(IHub hub, SentryOptions options);
    protected virtual string get_Operation();
    [NullableContextAttribute("2")]
protected virtual string GetDescription(object diagnosticSourceValue);
    [NullableContextAttribute("2")]
protected virtual ISpan GetSpanReference(ITransactionTracer transaction, object diagnosticSourceValue);
    protected virtual void SetSpanReference(ISpan span, object diagnosticSourceValue);
    [NullableContextAttribute("2")]
internal void AddOrReuseSpan(object diagnosticSourceValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Sentry.Internal.DiagnosticSource.EFDiagnosticSourceHelper : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SentryOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransactionTracer <Transaction>k__BackingField;
    [NullableAttribute("1")]
protected SentryOptions Options { get; }
    protected ITransactionTracer Transaction { get; }
    [NullableAttribute("1")]
protected string Operation { get; }
    [NullableContextAttribute("1")]
internal EFDiagnosticSourceHelper(IHub hub, SentryOptions options);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected SentryOptions get_Options();
    [CompilerGeneratedAttribute]
protected ITransactionTracer get_Transaction();
    [NullableContextAttribute("1")]
protected abstract virtual string get_Operation();
    protected abstract virtual string GetDescription(object diagnosticSourceValue);
    protected string GetDatabaseName(object diagnosticSourceValue);
    protected string GetDatabaseSystem(object diagnosticSourceValue);
    protected string GetDatabaseServerAddress(object diagnosticSourceValue);
    [NullableContextAttribute("1")]
protected static Nullable`1<Guid> TryGetConnectionId(ISpan span);
    protected Nullable`1<Guid> GetConnectionId(object diagnosticSourceValue);
    [NullableContextAttribute("1")]
protected static void SetConnectionId(ISpan span, Nullable`1<Guid> connectionId);
    internal void AddSpan(object diagnosticSourceValue);
    internal void FinishSpan(object diagnosticSourceValue, SpanStatus status);
    [NullableContextAttribute("1")]
protected void SetDbData(ISpan span, object diagnosticSourceValue);
    protected void LogTransactionSpans();
    internal static string FilterNewLineValue(object value);
    protected abstract virtual ISpan GetSpanReference(ITransactionTracer transaction, object diagnosticSourceValue);
    [NullableContextAttribute("1")]
protected abstract virtual void SetSpanReference(ISpan span, object diagnosticSourceValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.DiagnosticSource.EFKeys : object {
    internal static string DbConnectionId;
    internal static string DbCommandId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DiagnosticSource.EFQueryCompilerDiagnosticSourceHelper : EFDiagnosticSourceHelper {
    protected string Operation { get; }
    internal EFQueryCompilerDiagnosticSourceHelper(IHub hub, SentryOptions options);
    protected virtual string get_Operation();
    protected virtual string GetDescription(object diagnosticSourceValue);
    [NullableContextAttribute("2")]
protected virtual ISpan GetSpanReference(ITransactionTracer transaction, object diagnosticSourceValue);
    protected virtual void SetSpanReference(ISpan span, object diagnosticSourceValue);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetSpanReference>b__4_0(ISpan span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.DiagnosticSource.OTelKeys : object {
    internal static string DbName;
    internal static string DbSystem;
    internal static string DbServer;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.DiagnosticSource.ReflectionHelper : object {
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("TrimAnalyzer", "IL2075")]
public static object GetProperty(object obj, string name, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetGuidProperty(object obj, string name, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static string GetStringProperty(object obj, string name, IDiagnosticLogger logger);
}
internal class Sentry.Internal.DiagnosticSource.SentryDiagnosticListenerIntegration : object {
    [NullableContextAttribute("1")]
public sealed virtual void Register(IHub hub, SentryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DiagnosticSource.SentryDiagnosticSubscriber : object {
    private Lazy`1<SentryEFCoreListener> _efListener;
    private Lazy`1<SentrySqlListener> _sqlListener;
    public SentryDiagnosticSubscriber(IHub hub, SentryOptions options);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(DiagnosticListener listener);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DiagnosticSource.SentryEFCoreListener : object {
    internal static string EFConnectionOpening;
    internal static string EFConnectionClosed;
    internal static string EFCommandExecuting;
    internal static string EFCommandExecuted;
    internal static string EFCommandFailed;
    internal static string EFCoreListenerOrigin;
    internal static string EFQueryStartCompiling;
    internal static string EFQueryCompiling;
    internal static string EFQueryCompiled;
    private IHub _hub;
    private SentryOptions _options;
    private bool _logConnectionEnabled;
    private bool _logQueryEnabled;
    private EFQueryCompilerDiagnosticSourceHelper QueryCompilerDiagnosticSourceHelper { get; }
    private EFConnectionDiagnosticSourceHelper ConnectionDiagnosticSourceHelper { get; }
    private EFCommandDiagnosticSourceHelper CommandDiagnosticSourceHelper { get; }
    public SentryEFCoreListener(IHub hub, SentryOptions options);
    internal void DisableConnectionSpan();
    internal void DisableQuerySpan();
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    private EFQueryCompilerDiagnosticSourceHelper get_QueryCompilerDiagnosticSourceHelper();
    private EFConnectionDiagnosticSourceHelper get_ConnectionDiagnosticSourceHelper();
    private EFCommandDiagnosticSourceHelper get_CommandDiagnosticSourceHelper();
    public sealed virtual void OnNext(KeyValuePair`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DiagnosticSource.SentrySqlListener : object {
    internal static string SqlListenerOrigin;
    internal static string SqlDataWriteConnectionOpenBeforeCommand;
    internal static string SqlMicrosoftWriteConnectionOpenBeforeCommand;
    internal static string SqlMicrosoftWriteConnectionOpenAfterCommand;
    internal static string SqlDataWriteConnectionOpenAfterCommand;
    internal static string SqlMicrosoftWriteConnectionCloseAfterCommand;
    internal static string SqlDataWriteConnectionCloseAfterCommand;
    internal static string SqlDataBeforeExecuteCommand;
    internal static string SqlMicrosoftBeforeExecuteCommand;
    internal static string SqlDataAfterExecuteCommand;
    internal static string SqlMicrosoftAfterExecuteCommand;
    internal static string SqlDataWriteCommandError;
    internal static string SqlMicrosoftWriteCommandError;
    private IHub _hub;
    private SentryOptions _options;
    public SentrySqlListener(IHub hub, SentryOptions options);
    private static void SetDatabaseName(ISpan span, string databaseName);
    private static void SetDatabaseAddress(ISpan span, string databaseAddress);
    private static void SetConnectionId(ISpan span, Nullable`1<Guid> connectionId);
    private static void SetOperationId(ISpan span, Nullable`1<Guid> operationId);
    private static Nullable`1<Guid> TryGetOperationId(ISpan span);
    private static Nullable`1<Guid> TryGetConnectionId(ISpan span);
    private void AddSpan(string operation, object value);
    [NullableContextAttribute("2")]
private ISpan GetSpan(SentrySqlSpanType type, object value);
    private static ISpan TryGetConnectionSpan(ITransactionTracer transaction, Nullable`1<Guid> connectionId);
    private static ISpan TryGetQuerySpan(ITransactionTracer transaction, Nullable`1<Guid> operationId);
    [NullableContextAttribute("2")]
private void UpdateConnectionSpan(object value);
    [NullableContextAttribute("2")]
private void FinishCommandSpan(object value, SpanStatus spanStatus);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(KeyValuePair`2<string, object> kvp);
    private void TrySetConnectionStatistics(ISpan span, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.DiagnosticSource.SqlKeys : object {
    internal static string DbConnectionId;
    internal static string DbOperationId;
}
[IsReadOnlyAttribute]
internal class Sentry.Internal.DiscardReason : ValueType {
    public static DiscardReason BeforeSend;
    public static DiscardReason CacheOverflow;
    public static DiscardReason EventProcessor;
    public static DiscardReason NetworkError;
    public static DiscardReason QueueOverflow;
    public static DiscardReason RateLimitBackoff;
    public static DiscardReason SampleRate;
    [NullableAttribute("1")]
private string _value;
    [NullableAttribute("1")]
private string Sentry.Internal.IEnumeration.Value { get; }
    [NullableContextAttribute("1")]
public DiscardReason(string value);
    private static DiscardReason();
    [NullableContextAttribute("1")]
private sealed virtual override string Sentry.Internal.IEnumeration.get_Value();
    public DiscardReasonWithCategory WithCategory(DataCategory category);
    public sealed virtual int CompareTo(DiscardReason other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    public sealed virtual bool Equals(DiscardReason other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class Sentry.Internal.DiscardReasonWithCategory : ValueType {
    [CompilerGeneratedAttribute]
private DiscardReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCategory <Category>k__BackingField;
    public DiscardReason Reason { get; }
    public DataCategory Category { get; }
    [NullableContextAttribute("1")]
public DiscardReasonWithCategory(string reason, string category);
    public DiscardReasonWithCategory(DiscardReason reason, DataCategory category);
    [CompilerGeneratedAttribute]
public DiscardReason get_Reason();
    [CompilerGeneratedAttribute]
public DataCategory get_Category();
    public sealed virtual int CompareTo(DiscardReasonWithCategory other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    public sealed virtual bool Equals(DiscardReasonWithCategory other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Disposable : object {
    private Action _dispose;
    public Disposable(Action dispose);
    public sealed virtual void Dispose();
    public static IDisposable Create(Action dispose);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.DuplicateEventDetectionEventProcessor : object {
    private SentryOptions _options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConditionalWeakTable`2<object, object> _capturedObjects;
    public DuplicateEventDetectionEventProcessor(SentryOptions options);
    public sealed virtual SentryEvent Process(SentryEvent event);
    private bool IsDuplicate(Exception ex, SentryId eventId, bool debugLog);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Enricher : object {
    internal static string DefaultIpAddress;
    private SentryOptions _options;
    private Lazy`1<Runtime> _runtimeLazy;
    public Enricher(SentryOptions options);
    public void Apply(IEventLike eventLike);
    public void Apply(SentryCheckIn checkIn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.ExceptionHandlingSynchronizationContext : SynchronizationContext {
    [CompilerGeneratedAttribute]
private Action`1<Exception> <exceptionHandler>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SynchronizationContext <innerContext>P;
    public ExceptionHandlingSynchronizationContext(Action`1<Exception> exceptionHandler, SynchronizationContext innerContext);
    public virtual void Post(SendOrPostCallback d, object state);
}
internal class Sentry.Internal.ExceptionTypeFilter`1 : object {
    [NullableAttribute("1")]
private Type _filteredType;
    [NullableContextAttribute("1")]
public sealed virtual bool Filter(Exception ex);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.ClientReportExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RecordDiscardedEvents(IClientReportRecorder recorder, DiscardReason reason, Envelope envelope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.CollectionsExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrCreate(ConcurrentDictionary`2<string, object> dictionary, string key);
    [ExtensionAttribute]
public static void TryCopyTo(IDictionary`2<TKey, TValue> from, IDictionary`2<TKey, TValue> to);
    [ExtensionAttribute]
internal static Dictionary`2<TKey, TValue> ToDict(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [IteratorStateMachineAttribute("Sentry.Internal.Extensions.CollectionsExtensions/<WhereNotNullValue>d__3`2")]
[ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TValue>> WhereNotNullValue(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TValue>> Append(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, TKey key, TValue value);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> AsReadOnly(IList`1<T> list);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExceptNulls(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool TryGetTypedValue(IDictionary`2<string, object> source, string key, T& value);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.DictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddIfNotNullOrEmpty(IDictionary`2<TKey, string> dictionary, TKey key, string value);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.DisposableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void DisposeAll(IEnumerable`1<IDisposable> disposables);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.EnumExtensions : object {
    [ExtensionAttribute]
public static T ParseEnum(string str);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.HashExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetHashString(string str, bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.HttpClientExtensions : object {
    [AsyncStateMachineAttribute("Sentry.Internal.Extensions.HttpClientExtensions/<ReadAsJsonAsync>d__0")]
[ExtensionAttribute]
public static Task`1<JsonElement> ReadAsJsonAsync(HttpContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static JsonElement ReadAsJson(HttpContent content);
    [ExtensionAttribute]
public static string ReadAsString(HttpContent content);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.JsonExtensions : object {
    private static JsonConverter[] DefaultConverters;
    private static List`1<JsonConverter> CustomConverters;
    [CompilerGeneratedAttribute]
private static bool <JsonPreserveReferences>k__BackingField;
    private static JsonSerializerOptions SerializerOptions;
    private static JsonSerializerOptions AltSerializerOptions;
    private static List`1<JsonSerializerContext> DefaultSerializerContexts;
    private static List`1<JsonSerializerContext> ReferencePreservingSerializerContexts;
    private static List`1<Func`2<JsonSerializerOptions, JsonSerializerContext>> JsonSerializerContextBuilders;
    internal static bool JsonPreserveReferences { get; internal set; }
    private static JsonExtensions();
    [CompilerGeneratedAttribute]
internal static bool get_JsonPreserveReferences();
    [CompilerGeneratedAttribute]
internal static void set_JsonPreserveReferences(bool value);
    private static JsonSerializerOptions BuildOptions(bool preserveReferences);
    internal static void AddJsonSerializerContext(Func`2<JsonSerializerOptions, T> jsonSerializerContextBuilder);
    internal static void ResetSerializerOptions();
    internal static void AddJsonConverter(JsonConverter converter);
    [ExtensionAttribute]
public static void Deconstruct(JsonProperty jsonProperty, String& name, JsonElement& value);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetDictionaryOrNull(JsonElement json);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Dictionary`2<string, TValue> GetDictionaryOrNull(JsonElement json, Func`2<JsonElement, TValue> factory);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetStringDictionaryOrNull(JsonElement json);
    [ExtensionAttribute]
public static Nullable`1<JsonElement> GetPropertyOrNull(JsonElement json, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object GetDynamicOrNull(JsonElement json);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static object GetNumber(JsonElement json);
    [ExtensionAttribute]
public static Nullable`1<long> GetHexAsLong(JsonElement json);
    [ExtensionAttribute]
public static string GetStringOrThrow(JsonElement json);
    [ExtensionAttribute]
public static void WriteDictionaryValue(Utf8JsonWriter writer, IEnumerable`1<KeyValuePair`2<string, object>> dic, IDiagnosticLogger logger, bool includeNullValues);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void WriteDictionaryValue(Utf8JsonWriter writer, IEnumerable`1<KeyValuePair`2<string, TValue>> dic, IDiagnosticLogger logger, bool includeNullValues);
    [ExtensionAttribute]
public static void WriteStringDictionaryValue(Utf8JsonWriter writer, IEnumerable`1<KeyValuePair`2<string, string>> dic);
    [ExtensionAttribute]
public static void WriteDictionary(Utf8JsonWriter writer, string propertyName, IEnumerable`1<KeyValuePair`2<string, object>> dic, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteDictionary(Utf8JsonWriter writer, string propertyName, IEnumerable`1<KeyValuePair`2<string, TValue>> dic, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteStringDictionary(Utf8JsonWriter writer, string propertyName, IEnumerable`1<KeyValuePair`2<string, string>> dic);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void WriteArrayValue(Utf8JsonWriter writer, IEnumerable`1<T> arr, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteArray(Utf8JsonWriter writer, string propertyName, IEnumerable`1<T> arr, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteStringArrayValue(Utf8JsonWriter writer, IEnumerable`1<string> arr);
    [ExtensionAttribute]
public static void WriteStringArray(Utf8JsonWriter writer, string propertyName, IEnumerable`1<string> arr);
    [ExtensionAttribute]
public static void WriteSerializableValue(Utf8JsonWriter writer, ISentryJsonSerializable value, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteSerializable(Utf8JsonWriter writer, string propertyName, ISentryJsonSerializable value, IDiagnosticLogger logger);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void WriteDynamicValue(Utf8JsonWriter writer, object value, IDiagnosticLogger logger);
    [ExtensionAttribute]
internal static string ToUtf8Json(object value, bool preserveReferences);
    private static JsonSerializerContext GetSerializerContext(Type type, bool preserveReferences);
    private static Byte[] InternalSerializeToUtf8Bytes(object value);
    private static void InternalSerialize(Utf8JsonWriter writer, object value, bool preserveReferences);
    [ExtensionAttribute]
public static void WriteDynamic(Utf8JsonWriter writer, string propertyName, object value, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteBooleanIfNotNull(Utf8JsonWriter writer, string propertyName, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void WriteBooleanIfTrue(Utf8JsonWriter writer, string propertyName, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void WriteNumberIfNotNull(Utf8JsonWriter writer, string propertyName, Nullable`1<short> value);
    [ExtensionAttribute]
public static void WriteNumberIfNotNull(Utf8JsonWriter writer, string propertyName, Nullable`1<int> value);
    [ExtensionAttribute]
public static void WriteNumberIfNotNull(Utf8JsonWriter writer, string propertyName, Nullable`1<long> value);
    [ExtensionAttribute]
public static void WriteNumberIfNotNull(Utf8JsonWriter writer, string propertyName, Nullable`1<float> value);
    [ExtensionAttribute]
public static void WriteNumberIfNotNull(Utf8JsonWriter writer, string propertyName, Nullable`1<double> value);
    [ExtensionAttribute]
public static void WriteNumberIfNotZero(Utf8JsonWriter writer, string propertyName, short value);
    [ExtensionAttribute]
public static void WriteNumberIfNotZero(Utf8JsonWriter writer, string propertyName, int value);
    [ExtensionAttribute]
public static void WriteNumberIfNotZero(Utf8JsonWriter writer, string propertyName, long value);
    [ExtensionAttribute]
public static void WriteNumberIfNotZero(Utf8JsonWriter writer, string propertyName, float value);
    [ExtensionAttribute]
public static void WriteNumberIfNotZero(Utf8JsonWriter writer, string propertyName, double value);
    [ExtensionAttribute]
public static void WriteStringIfNotWhiteSpace(Utf8JsonWriter writer, string propertyName, string value);
    [ExtensionAttribute]
public static void WriteStringIfNotNull(Utf8JsonWriter writer, string propertyName, Nullable`1<DateTimeOffset> value);
    [ExtensionAttribute]
public static void WriteSerializableIfNotNull(Utf8JsonWriter writer, string propertyName, ISentryJsonSerializable value, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteDictionaryIfNotEmpty(Utf8JsonWriter writer, string propertyName, IEnumerable`1<KeyValuePair`2<string, object>> dic, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteDictionaryIfNotEmpty(Utf8JsonWriter writer, string propertyName, IEnumerable`1<KeyValuePair`2<string, TValue>> dic, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteStringDictionaryIfNotEmpty(Utf8JsonWriter writer, string propertyName, IEnumerable`1<KeyValuePair`2<string, string>> dic);
    [ExtensionAttribute]
public static void WriteArrayIfNotEmpty(Utf8JsonWriter writer, string propertyName, IEnumerable`1<T> arr, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteStringArrayIfNotEmpty(Utf8JsonWriter writer, string propertyName, IEnumerable`1<string> arr);
    [ExtensionAttribute]
public static void WriteDynamicIfNotNull(Utf8JsonWriter writer, string propertyName, object value, IDiagnosticLogger logger);
    [ExtensionAttribute]
public static void WriteString(Utf8JsonWriter writer, string propertyName, IEnumeration value);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
[UnconditionalSuppressMessageAttribute("AOT", "IL3050:Calling members annotated with 'RequiresDynamicCodeAttribute' may break functionality when AOT compiling.")]
internal static Byte[] <InternalSerializeToUtf8Bytes>g__JitSerializeToUtf8Bytes|40_0(<>c__DisplayClass40_0& );
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("AOT", "IL3050:Calling members annotated with 'RequiresDynamicCodeAttribute' may break functionality when AOT compiling.")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
internal static void <InternalSerialize>g__JitSerialize|41_0(<>c__DisplayClass41_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.MiscExtensions : object {
    private static TimeSpan MaxTimeout;
    private static MiscExtensions();
    [ExtensionAttribute]
public static TOut Pipe(TIn input, Func`2<TIn, TOut> pipe);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> NullIfDefault(T value);
    [ExtensionAttribute]
public static string ToHexString(long l, bool upperCase);
    [ExtensionAttribute]
public static string ToHexString(Byte[] bytes, bool upperCase);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static string ToHexString(Span`1<byte> bytes, bool upperCase);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static string ToHexString(ReadOnlySpan`1<byte> bytes, bool upperCase);
    [ExtensionAttribute]
public static void CancelAfterSafe(CancellationTokenSource cts, TimeSpan timeout);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNull(object o);
    [ExtensionAttribute]
public static void Add(ICollection`1<KeyValuePair`2<TKey, TValue>> collection, TKey key, TValue value);
    [ExtensionAttribute]
internal static string GetRawMessage(AggregateException exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.Internal.Extensions.PEDebugImageData : object {
    [CompilerGeneratedAttribute]
private string <ImageAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ImageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugChecksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeId>k__BackingField;
    [NullableAttribute("1")]
public string Type { get; }
    public string ImageAddress { get; public set; }
    public Nullable`1<long> ImageSize { get; public set; }
    public string DebugId { get; public set; }
    public string DebugChecksum { get; public set; }
    public string DebugFile { get; public set; }
    public string CodeId { get; public set; }
    [NullableContextAttribute("1")]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_ImageAddress();
    [CompilerGeneratedAttribute]
public void set_ImageAddress(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ImageSize();
    [CompilerGeneratedAttribute]
public void set_ImageSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_DebugId();
    [CompilerGeneratedAttribute]
public void set_DebugId(string value);
    [CompilerGeneratedAttribute]
public string get_DebugChecksum();
    [CompilerGeneratedAttribute]
public void set_DebugChecksum(string value);
    [CompilerGeneratedAttribute]
public string get_DebugFile();
    [CompilerGeneratedAttribute]
public void set_DebugFile(string value);
    [CompilerGeneratedAttribute]
public string get_CodeId();
    [CompilerGeneratedAttribute]
public void set_CodeId(string value);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.PEDebugImageDataExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static DebugImage ToDebugImage(PEDebugImageData imageData, string codeFile, Nullable`1<Guid> moduleVersionId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.PEReaderExtensions : object {
    [ExtensionAttribute]
public static PEDebugImageData TryGetPEDebugImageData(PEReader peReader);
    [ExtensionAttribute]
private static PEDebugImageData GetPEDebugImageData(PEReader peReader);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.ReadOnlyDictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TValue TryGetValue(IReadOnlyDictionary`2<TKey, object> dictionary, TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonSerializableAttribute("Sentry.Internal.GrowableArray`1<System.Int32>")]
[JsonSerializableAttribute("System.Collections.Generic.Dictionary`2<System.String,System.Boolean>")]
[JsonSerializableAttribute("System.Collections.Generic.Dictionary`2<System.String,System.Object>")]
[GeneratedCodeAttribute("System.Text.Json.SourceGeneration", "7.0.10.26716")]
internal class Sentry.Internal.Extensions.SentryJsonContext : JsonSerializerContext {
    [NullableAttribute("2")]
private JsonTypeInfo`1<int> _Int32;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<GrowableArray`1<int>> _GrowableArrayInt32;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<string> _String;
    [NullableAttribute("2")]
private JsonTypeInfo`1<bool> _Boolean;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, bool>> _DictionaryStringBoolean;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<object> _Object;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, object>> _DictionaryStringObject;
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <s_defaultOptions>k__BackingField;
    [NullableAttribute("2")]
private static SentryJsonContext s_defaultContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonSerializerOptions <GeneratedSerializerOptions>k__BackingField;
    public JsonTypeInfo`1<int> Int32 { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public JsonTypeInfo`1<GrowableArray`1<int>> GrowableArrayInt32 { get; }
    public JsonTypeInfo`1<string> String { get; }
    public JsonTypeInfo`1<bool> Boolean { get; }
    public JsonTypeInfo`1<Dictionary`2<string, bool>> DictionaryStringBoolean { get; }
    public JsonTypeInfo`1<object> Object { get; }
    public JsonTypeInfo`1<Dictionary`2<string, object>> DictionaryStringObject { get; }
    private static JsonSerializerOptions s_defaultOptions { get; }
    public static SentryJsonContext Default { get; }
    [NullableAttribute("2")]
protected JsonSerializerOptions GeneratedSerializerOptions { get; }
    public SentryJsonContext(JsonSerializerOptions options);
    private static SentryJsonContext();
    public JsonTypeInfo`1<int> get_Int32();
    private JsonTypeInfo`1<int> Create_Int32(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<GrowableArray`1<int>> get_GrowableArrayInt32();
    private JsonTypeInfo`1<GrowableArray`1<int>> Create_GrowableArrayInt32(JsonSerializerOptions options, bool makeReadOnly);
    [NullableContextAttribute("0")]
private void GrowableArrayInt32SerializeHandler(Utf8JsonWriter writer, GrowableArray`1<int> value);
    public JsonTypeInfo`1<string> get_String();
    private JsonTypeInfo`1<string> Create_String(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<bool> get_Boolean();
    private JsonTypeInfo`1<bool> Create_Boolean(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<Dictionary`2<string, bool>> get_DictionaryStringBoolean();
    private JsonTypeInfo`1<Dictionary`2<string, bool>> Create_DictionaryStringBoolean(JsonSerializerOptions options, bool makeReadOnly);
    private void DictionaryStringBooleanSerializeHandler(Utf8JsonWriter writer, Dictionary`2<string, bool> value);
    public JsonTypeInfo`1<object> get_Object();
    private JsonTypeInfo`1<object> Create_Object(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<Dictionary`2<string, object>> get_DictionaryStringObject();
    private JsonTypeInfo`1<Dictionary`2<string, object>> Create_DictionaryStringObject(JsonSerializerOptions options, bool makeReadOnly);
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions get_s_defaultOptions();
    public static SentryJsonContext get_Default();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual JsonSerializerOptions get_GeneratedSerializerOptions();
    private static JsonConverter GetRuntimeProvidedCustomConverter(JsonSerializerOptions options, Type type);
    public virtual JsonTypeInfo GetTypeInfo(Type type);
    private sealed virtual override JsonTypeInfo global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(Type type, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.StreamExtensions : object {
    private static Byte[] NewlineBuffer;
    private static StreamExtensions();
    [AsyncStateMachineAttribute("Sentry.Internal.Extensions.StreamExtensions/<ReadLineAsync>d__0")]
[ExtensionAttribute]
public static Task`1<Byte[]> ReadLineAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Internal.Extensions.StreamExtensions/<SkipNewlinesAsync>d__1")]
[ExtensionAttribute]
public static Task SkipNewlinesAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Internal.Extensions.StreamExtensions/<ReadByteChunkAsync>d__2")]
[ExtensionAttribute]
public static Task`1<Byte[]> ReadByteChunkAsync(Stream stream, int expectedLength, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteNewlineAsync(Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void WriteNewline(Stream stream);
    [ExtensionAttribute]
public static Nullable`1<long> TryGetLength(Stream stream);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsFileStream(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string ToSnakeCase(string str);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string NullIfWhitespace(string str);
    [ExtensionAttribute]
public static long ParseHexAsLong(string str);
}
[ExtensionAttribute]
internal static class Sentry.Internal.Extensions.UriExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string HttpRequestUrl(Uri uri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.FileSystem : object {
    [CompilerGeneratedAttribute]
private static IFileSystem <Instance>k__BackingField;
    public static IFileSystem Instance { get; }
    private static FileSystem();
    [CompilerGeneratedAttribute]
public static IFileSystem get_Instance();
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual bool FileExists(string path);
    public sealed virtual void MoveFile(string sourceFileName, string destFileName, bool overwrite);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual DateTimeOffset GetFileCreationTime(string path);
    public sealed virtual string ReadAllTextFromFile(string path);
    public sealed virtual Stream OpenFileForReading(string path);
    public sealed virtual Stream CreateFileForWriting(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.GraphQL.GraphQLRequestContentReader : object {
    private static string OperationNameKey;
    private static string QueryKey;
    public static IReadOnlyDictionary`2<string, object> Read(string requestContent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Sentry.Internal.GrowableArray`1 : ValueType {
    private T[] array;
    private int arrayLength;
    public T Item { get; public set; }
    public int Count { get; }
    public bool Empty { get; }
    public bool EmptyCapacity { get; }
    public T[] UnderlyingArray { get; }
    public GrowableArray`1(int initialSize);
    public sealed virtual T get_Item(int index);
    public void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public void Reserve(int size);
    public void Clear();
    public void Add(T item);
    public void AddRange(IEnumerable`1<T> items);
    public void Insert(int index, T item);
    public void RemoveRange(int index, int count);
    public bool get_Empty();
    public void Trim(int maxWaste);
    public bool get_EmptyCapacity();
    public virtual string ToString();
    public GrowableArray`1<T1> Foreach(Func`2<T, T1> func);
    public bool Search(Key key, int startIndex, Func`3<Key, T, int> compare, Int32& index);
    public T[] get_UnderlyingArray();
    private void Realloc(int minSize);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Sentry.Internal.HashableGrowableArray`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private GrowableArray`1<T> _items;
    private int _hashCode;
    private bool _sealed;
    public T Item { get; public set; }
    public int Count { get; }
    public HashableGrowableArray`1(int capacity);
    public sealed virtual T get_Item(int index);
    public void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public void Seal();
    public void Trim(int maxWaste);
    public void Add(T item);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(HashableGrowableArray`1<T> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.CachingTransport : object {
    private static string EnvelopeFileExt;
    private static string ProcessingFolder;
    private ITransport _innerTransport;
    private SentryOptions _options;
    private bool _failStorage;
    private string _isolatedCacheDirectoryPath;
    private int _keepCount;
    private string _processingDirectoryPath;
    private Signal _workerSignal;
    private Signal _processingSignal;
    private Lock _cacheDirectoryLock;
    private CancellationTokenSource _workerCts;
    private Task _worker;
    [NullableAttribute("2")]
private ManualResetEventSlim _initCacheResetEvent;
    [NullableAttribute("2")]
private ManualResetEventSlim _preInitCacheResetEvent;
    private IFileSystem _fileSystem;
    internal ITransport InnerTransport { get; }
    private CachingTransport(ITransport innerTransport, SentryOptions options, bool failStorage);
    internal ITransport get_InnerTransport();
    public static CachingTransport Create(ITransport innerTransport, SentryOptions options, bool startWorker, bool failStorage);
    private void Initialize(bool startWorker);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.CachingTransport/<CachedTransportBackgroundTaskAsync>d__21")]
private Task CachedTransportBackgroundTaskAsync();
    private void MoveUnprocessedFilesBackToCache();
    private void EnsureFreeSpaceInCache();
    private IEnumerable`1<string> GetCacheFilePaths();
    [AsyncStateMachineAttribute("Sentry.Internal.Http.CachingTransport/<ProcessCacheAsync>d__25")]
private Task ProcessCacheAsync(CancellationToken cancellation);
    private static bool IsNetworkError(Exception exception);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.CachingTransport/<InnerProcessCacheAsync>d__27")]
private Task InnerProcessCacheAsync(string file, CancellationToken cancellation);
    private void LogFailureWithDiscard(string file, Exception ex);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.CachingTransport/<TryPrepareNextCacheFileAsync>d__29")]
private Task`1<string> TryPrepareNextCacheFileAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.CachingTransport/<StoreToCacheAsync>d__30")]
private Task StoreToCacheAsync(Envelope envelope, CancellationToken cancellationToken);
    internal int GetCacheLength();
    [AsyncStateMachineAttribute("Sentry.Internal.Http.CachingTransport/<SendEnvelopeAsync>d__32")]
public sealed virtual Task SendEnvelopeAsync(Envelope envelope, CancellationToken cancellationToken);
    public Task StopWorkerAsync();
    public Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.CachingTransport/<DisposeAsync>d__35")]
public ValueTask DisposeAsync();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private DateTimeOffset <GetCacheFilePaths>b__24_0(string f);
}
internal class Sentry.Internal.Http.DefaultSentryHttpClientFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual HttpClient Create(SentryOptions options);
    [NullableContextAttribute("1")]
private static bool SupportsAutomaticDecompression(HttpClientHandler handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.EnvelopeHttpContent : SerializableHttpContent {
    private Envelope _envelope;
    [NullableAttribute("2")]
private IDiagnosticLogger _logger;
    private ISystemClock _clock;
    public EnvelopeHttpContent(Envelope envelope, IDiagnosticLogger logger, ISystemClock clock);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.EnvelopeHttpContent/<SerializeToStreamAsync>d__4")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual void SerializeToStream(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected virtual bool TryComputeLength(Int64& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.GzipBufferedRequestBodyHandler : DelegatingHandler {
    private static string Gzip;
    private CompressionLevel _compressionLevel;
    public GzipBufferedRequestBodyHandler(HttpMessageHandler innerHandler, CompressionLevel compressionLevel);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.GzipBufferedRequestBodyHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.GzipRequestBodyHandler : DelegatingHandler {
    private static string Gzip;
    private CompressionLevel _compressionLevel;
    public GzipRequestBodyHandler(HttpMessageHandler innerHandler, CompressionLevel compressionLevel);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.HttpTransport : HttpTransportBase {
    private HttpClient _httpClient;
    public HttpTransport(SentryOptions options, HttpClient httpClient);
    internal HttpTransport(SentryOptions options, HttpClient httpClient, Func`2<string, string> getEnvironmentVariable, ISystemClock clock);
    [AsyncStateMachineAttribute("Sentry.Internal.Http.HttpTransport/<SendEnvelopeAsync>d__3")]
public virtual Task SendEnvelopeAsync(Envelope envelope, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.LazyHttpTransport : object {
    private Lazy`1<HttpTransport> _httpTransport;
    public LazyHttpTransport(SentryOptions options);
    public sealed virtual Task SendEnvelopeAsync(Envelope envelope, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.RateLimit : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RateLimitCategory> <Categories>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryAfter>k__BackingField;
    public IReadOnlyList`1<RateLimitCategory> Categories { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> Namespaces { get; }
    internal bool IsDefaultNamespace { get; }
    public TimeSpan RetryAfter { get; }
    public RateLimit(TimeSpan retryAfter, IReadOnlyList`1<RateLimitCategory> categories, IReadOnlyList`1<string> namespaces);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RateLimitCategory> get_Categories();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Namespaces();
    internal bool get_IsDefaultNamespace();
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryAfter();
    public static RateLimit Parse(string rateLimitEncoded);
    public static IEnumerable`1<RateLimit> ParseMany(string rateLimitsEncoded);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.RateLimitCategory : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public bool IsMatchAll { get; }
    public RateLimitCategory(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public bool get_IsMatchAll();
    public bool Matches(EnvelopeItem item);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(RateLimitCategory other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Http.RetryAfterHandler : DelegatingHandler {
    private ISystemClock _clock;
    private static HttpStatusCode TooManyRequests;
    internal static TimeSpan DefaultRetryAfterDelay;
    private long _retryAfterUtcTicks;
    internal long RetryAfterUtcTicks { get; }
    public RetryAfterHandler(HttpMessageHandler innerHandler);
    internal RetryAfterHandler(HttpMessageHandler innerHandler, ISystemClock clock);
    private static RetryAfterHandler();
    internal long get_RetryAfterUtcTicks();
    [AsyncStateMachineAttribute("Sentry.Internal.Http.RetryAfterHandler/<SendAsync>d__8")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private DateTimeOffset GetRetryAfterTimestamp(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Hub : object {
    private object _sessionPauseLock;
    private ISystemClock _clock;
    private ISessionManager _sessionManager;
    private SentryOptions _options;
    private RandomValuesFactory _randomValuesFactory;
    private int _isPersistedSessionRecovered;
    [CompilerGeneratedAttribute]
private ConditionalWeakTable`2<Exception, ISpan> <ExceptionToSpanMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalScopeManager <ScopeManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetricAggregator <Metrics>k__BackingField;
    private int _isEnabled;
    internal ConditionalWeakTable`2<Exception, ISpan> ExceptionToSpanMap { get; }
    internal IInternalScopeManager ScopeManager { get; }
    public IMetricAggregator Metrics { get; }
    public bool IsEnabled { get; }
    internal SentryOptions Options { get; }
    private Scope CurrentScope { get; }
    private ISentryClient CurrentClient { get; }
    public SentryId LastEventId { get; }
    [NullableContextAttribute("2")]
internal Hub(SentryOptions options, ISentryClient client, ISessionManager sessionManager, ISystemClock clock, IInternalScopeManager scopeManager, RandomValuesFactory randomValuesFactory);
    [CompilerGeneratedAttribute]
internal ConditionalWeakTable`2<Exception, ISpan> get_ExceptionToSpanMap();
    [CompilerGeneratedAttribute]
internal IInternalScopeManager get_ScopeManager();
    [CompilerGeneratedAttribute]
public sealed virtual IMetricAggregator get_Metrics();
    public sealed virtual bool get_IsEnabled();
    internal SentryOptions get_Options();
    private Scope get_CurrentScope();
    private ISentryClient get_CurrentClient();
    public sealed virtual void ConfigureScope(Action`1<Scope> configureScope);
    [AsyncStateMachineAttribute("Sentry.Internal.Hub/<ConfigureScopeAsync>d__26")]
public sealed virtual Task ConfigureScopeAsync(Func`2<Scope, Task> configureScope);
    public sealed virtual IDisposable PushScope();
    public sealed virtual IDisposable PushScope(TState state);
    public void RestoreScope(Scope savedScope);
    public sealed virtual void BindClient(ISentryClient client);
    public sealed virtual ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext);
    internal ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext, DynamicSamplingContext dynamicSamplingContext);
    public sealed virtual void BindException(Exception exception, ISpan span);
    [NullableContextAttribute("2")]
public sealed virtual ISpan GetSpan();
    public sealed virtual SentryTraceHeader GetTraceHeader();
    public sealed virtual BaggageHeader GetBaggage();
    [NullableContextAttribute("2")]
public sealed virtual TransactionContext ContinueTrace(string traceHeader, string baggageHeader, string name, string operation);
    [NullableContextAttribute("2")]
public sealed virtual TransactionContext ContinueTrace(SentryTraceHeader traceHeader, BaggageHeader baggageHeader, string name, string operation);
    public sealed virtual void StartSession();
    public sealed virtual void PauseSession();
    public sealed virtual void ResumeSession();
    private void EndSession(DateTimeOffset timestamp, SessionEndStatus status);
    public sealed virtual void EndSession(SessionEndStatus status);
    private ISpan GetLinkedSpan(SentryEvent evt);
    private void ApplyTraceContextToEvent(SentryEvent evt, ISpan span);
    private void ApplyTraceContextToEvent(SentryEvent evt, SentryPropagationContext propagationContext);
    public sealed virtual bool CaptureEnvelope(Envelope envelope);
    private void AddBreadcrumbForException(SentryEvent evt, Scope scope);
    public sealed virtual SentryId CaptureEvent(SentryEvent evt, Action`1<Scope> configureScope);
    public sealed virtual SentryId CaptureEvent(SentryEvent evt, SentryHint hint, Action`1<Scope> configureScope);
    [NullableContextAttribute("2")]
public sealed virtual SentryId CaptureEvent(SentryEvent evt, Scope scope, SentryHint hint);
    private SentryId CaptureEvent(SentryEvent evt, SentryHint hint, Scope scope);
    public sealed virtual void CaptureUserFeedback(UserFeedback userFeedback);
    public sealed virtual void CaptureTransaction(SentryTransaction transaction);
    [NullableContextAttribute("2")]
public sealed virtual void CaptureTransaction(SentryTransaction transaction, Scope scope, SentryHint hint);
    public sealed virtual void CaptureMetrics(IEnumerable`1<Metric> metrics);
    public sealed virtual void CaptureCodeLocations(CodeLocations codeLocations);
    public sealed virtual ISpan StartSpan(string operation, string description);
    public sealed virtual void CaptureSession(SessionUpdate sessionUpdate);
    public sealed virtual SentryId CaptureCheckIn(string monitorSlug, CheckInStatus status, Nullable`1<SentryId> sentryId, Nullable`1<TimeSpan> duration, Scope scope, Action`1<SentryMonitorOptions> configureMonitorOptions);
    [AsyncStateMachineAttribute("Sentry.Internal.Hub/<FlushAsync>d__61")]
public sealed virtual Task FlushAsync(TimeSpan timeout);
    public sealed virtual void Dispose();
    public sealed virtual SentryId get_LastEventId();
    [CompilerGeneratedAttribute]
private void <Dispose>b__62_0(Task _);
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IAppDomain {
    [CompilerGeneratedAttribute]
public abstract virtual void add_UnhandledException(UnhandledExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UnhandledException(UnhandledExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProcessExit(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProcessExit(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IClientReportRecorder {
    public abstract virtual void RecordDiscardedEvent(DiscardReason reason, DataCategory category, int quantity);
    [NullableContextAttribute("2")]
public abstract virtual ClientReport GenerateClientReport();
    public abstract virtual void Load(ClientReport report);
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.ICloneable`1 {
    public abstract virtual T Clone();
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IEnumeration {
    internal string Value { get; }
    internal abstract virtual string get_Value();
}
internal interface Sentry.Internal.IEnumeration`1 {
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IFileSystem {
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual void DeleteDirectory(string path, bool recursive);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual bool FileExists(string path);
    public abstract virtual void MoveFile(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual DateTimeOffset GetFileCreationTime(string path);
    public abstract virtual string ReadAllTextFromFile(string file);
    public abstract virtual Stream OpenFileForReading(string path);
    public abstract virtual Stream CreateFileForWriting(string path);
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IInternalScopeManager {
    public IScopeStackContainer ScopeStackContainer { get; }
    public abstract virtual KeyValuePair`2<Scope, ISentryClient> GetCurrent();
    public abstract virtual void RestoreScope(Scope savedScope);
    public abstract virtual IScopeStackContainer get_ScopeStackContainer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.InstallationIdHelper : object {
    [CompilerGeneratedAttribute]
private SentryOptions <options>P;
    private object _installationIdLock;
    [NullableAttribute("2")]
private string _installationId;
    public InstallationIdHelper(SentryOptions options);
    [NullableContextAttribute("2")]
public string TryGetInstallationId();
    [NullableContextAttribute("2")]
private string TryGetPersistentInstallationId();
    [NullableContextAttribute("2")]
private string TryGetHardwareInstallationId();
    internal static string GetMachineNameInstallationId();
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IPing {
    public abstract virtual Task`1<bool> IsAvailableAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
internal interface Sentry.Internal.IStackFrame {
    public StackFrame Frame { get; }
    public abstract virtual StackFrame get_Frame();
    public abstract virtual IntPtr GetNativeImageBase();
    public abstract virtual IntPtr GetNativeIP();
    public abstract virtual bool HasNativeImage();
    public abstract virtual int GetFileColumnNumber();
    public abstract virtual int GetFileLineNumber();
    public abstract virtual string GetFileName();
    public abstract virtual int GetILOffset();
    public abstract virtual MethodBase GetMethod();
    [NullableContextAttribute("1")]
public abstract virtual string ToString();
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IStringOrRegexMatcher {
    public abstract virtual bool IsMatch(StringOrRegex stringOrRegex, string value);
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.ITransactionProfiler {
    public abstract virtual void Finish();
    public abstract virtual ISerializable Collect(SentryTransaction transaction);
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.ITransactionProfilerFactory {
    public abstract virtual ITransactionProfiler Start(ITransactionTracer transaction, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Sentry.Internal.IUpdatable {
    public abstract virtual void UpdateFrom(object source);
}
internal interface Sentry.Internal.IUpdatable`1 {
    [NullableContextAttribute("1")]
public abstract virtual void UpdateFrom(T source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.Json : object {
    public static T Parse(Byte[] json, Func`2<JsonElement, T> factory);
    public static T Parse(string json, Func`2<JsonElement, T> factory);
    public static T Load(string filePath, Func`2<JsonElement, T> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.JsonConverters.IntPtrJsonConverter : JsonConverter`1<IntPtr> {
    public virtual IntPtr Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, IntPtr value, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.JsonConverters.IntPtrNullableJsonConverter : JsonConverter`1<Nullable`1<IntPtr>> {
    public virtual Nullable`1<IntPtr> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Nullable`1<IntPtr> value, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Sentry.Internal.JsonConverters.SentryJsonConverter : JsonConverter`1<object> {
    public virtual bool CanConvert(Type typeToConvert);
    public virtual object Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, object value, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.JsonConverters.UIntPtrJsonConverter : JsonConverter`1<UIntPtr> {
    public virtual UIntPtr Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, UIntPtr value, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.JsonConverters.UIntPtrNullableJsonConverter : JsonConverter`1<Nullable`1<UIntPtr>> {
    public virtual Nullable`1<UIntPtr> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Nullable`1<UIntPtr> value, JsonSerializerOptions options);
}
internal class Sentry.Internal.Lock : object {
    [NullableAttribute("1")]
private Signal _signal;
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Sentry.Internal.Lock/<AcquireAsync>d__2")]
public Task`1<IDisposable> AcquireAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.MainExceptionProcessor : object {
    private static string ExceptionDataKeyPrefix;
    internal static string ExceptionDataTagKey;
    internal static string ExceptionDataContextKey;
    private SentryOptions _options;
    [CompilerGeneratedAttribute]
private Func`1<ISentryStackTraceFactory> <SentryStackTraceFactoryAccessor>k__BackingField;
    internal Func`1<ISentryStackTraceFactory> SentryStackTraceFactoryAccessor { get; }
    public MainExceptionProcessor(SentryOptions options, Func`1<ISentryStackTraceFactory> sentryStackTraceFactoryAccessor);
    [CompilerGeneratedAttribute]
internal Func`1<ISentryStackTraceFactory> get_SentryStackTraceFactoryAccessor();
    public sealed virtual void Process(Exception exception, SentryEvent sentryEvent);
    internal IReadOnlyList`1<SentryException> CreateSentryExceptions(Exception exception);
    private IEnumerable`1<SentryException> WalkExceptions(Exception exception);
    [IteratorStateMachineAttribute("Sentry.Internal.MainExceptionProcessor/<WalkExceptions>d__12")]
private IEnumerable`1<SentryException> WalkExceptions(Exception exception, Counter counter, Nullable`1<int> parentId, string source);
    private static void MoveExceptionDataToEvent(SentryEvent sentryEvent, IEnumerable`1<SentryException> sentryExceptions);
    private SentryException BuildSentryException(Exception exception, int id, Nullable`1<int> parentId, string source);
    private static Mechanism GetMechanism(Exception exception, int id, Nullable`1<int> parentId, string source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.MainSentryEventProcessor : object {
    internal static string CultureInfoKey;
    internal static string CurrentUiCultureKey;
    internal static string MemoryInfoKey;
    internal static string ThreadPoolInfoKey;
    internal static string IsDynamicCodeKey;
    internal static string IsDynamicCodeCompiledKey;
    internal static string IsDynamicCodeSupportedKey;
    private Enricher _enricher;
    private SentryOptions _options;
    [CompilerGeneratedAttribute]
private Func`1<ISentryStackTraceFactory> <SentryStackTraceFactoryAccessor>k__BackingField;
    internal Func`1<ISentryStackTraceFactory> SentryStackTraceFactoryAccessor { get; }
    [NullableAttribute("2")]
internal string Release { get; }
    [NullableAttribute("2")]
internal string Distribution { get; }
    public MainSentryEventProcessor(SentryOptions options, Func`1<ISentryStackTraceFactory> sentryStackTraceFactoryAccessor);
    [CompilerGeneratedAttribute]
internal Func`1<ISentryStackTraceFactory> get_SentryStackTraceFactoryAccessor();
    [NullableContextAttribute("2")]
internal string get_Release();
    [NullableContextAttribute("2")]
internal string get_Distribution();
    public sealed virtual SentryEvent Process(SentryEvent event);
    private static void AddMemoryInfo(SentryContexts contexts);
    private static void AddThreadPoolInfo(SentryContexts contexts);
    private static IDictionary`2<string, string> CultureInfoToDictionary(CultureInfo cultureInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.MemoryInfo : object {
    [CompilerGeneratedAttribute]
private long <AllocatedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FragmentedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HeapSizeBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighMemoryLoadThresholdBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalAvailableMemoryBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MemoryLoadBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCommittedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PromotedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PinnedObjectsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PauseTimePercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan[] <PauseDurations>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FinalizationPendingCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compacted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Concurrent>k__BackingField;
    public long AllocatedBytes { get; }
    public long FragmentedBytes { get; }
    public long HeapSizeBytes { get; }
    public long HighMemoryLoadThresholdBytes { get; }
    public long TotalAvailableMemoryBytes { get; }
    public long MemoryLoadBytes { get; }
    public long TotalCommittedBytes { get; }
    public long PromotedBytes { get; }
    public long PinnedObjectsCount { get; }
    public double PauseTimePercentage { get; }
    public TimeSpan[] PauseDurations { get; }
    public long Index { get; }
    public long FinalizationPendingCount { get; }
    public bool Compacted { get; }
    public bool Concurrent { get; }
    public MemoryInfo(long allocatedBytes, long fragmentedBytes, long heapSizeBytes, long highMemoryLoadThresholdBytes, long totalAvailableMemoryBytes, long memoryLoadBytes, long totalCommittedBytes, long promotedBytes, long pinnedObjectsCount, double pauseTimePercentage, long index, long finalizationPendingCount, bool compacted, bool concurrent, TimeSpan[] pauseDurations);
    [CompilerGeneratedAttribute]
public long get_AllocatedBytes();
    [CompilerGeneratedAttribute]
public long get_FragmentedBytes();
    [CompilerGeneratedAttribute]
public long get_HeapSizeBytes();
    [CompilerGeneratedAttribute]
public long get_HighMemoryLoadThresholdBytes();
    [CompilerGeneratedAttribute]
public long get_TotalAvailableMemoryBytes();
    [CompilerGeneratedAttribute]
public long get_MemoryLoadBytes();
    [CompilerGeneratedAttribute]
public long get_TotalCommittedBytes();
    [CompilerGeneratedAttribute]
public long get_PromotedBytes();
    [CompilerGeneratedAttribute]
public long get_PinnedObjectsCount();
    [CompilerGeneratedAttribute]
public double get_PauseTimePercentage();
    [CompilerGeneratedAttribute]
public TimeSpan[] get_PauseDurations();
    [CompilerGeneratedAttribute]
public long get_Index();
    [CompilerGeneratedAttribute]
public long get_FinalizationPendingCount();
    [CompilerGeneratedAttribute]
public bool get_Compacted();
    [CompilerGeneratedAttribute]
public bool get_Concurrent();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.ModuleExtensions : object {
    internal static string UnknownLocation;
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("SingleFile", "IL3002:Avoid calling members marked with 'RequiresAssemblyFilesAttribute' when publishing as a single-file")]
public static string GetNameOrScopeName(Module module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.NoOpSpan : object {
    [CompilerGeneratedAttribute]
private static ISpan <Instance>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    public static ISpan Instance { get; }
    public SpanId SpanId { get; }
    public Nullable`1<SpanId> ParentSpanId { get; }
    public SentryId TraceId { get; }
    public Nullable`1<bool> IsSampled { get; }
    public IReadOnlyDictionary`2<string, string> Tags { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    public DateTimeOffset StartTimestamp { get; }
    public Nullable`1<DateTimeOffset> EndTimestamp { get; }
    public bool IsFinished { get; }
    public string Operation { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Nullable`1<SpanStatus> Status { get; public set; }
    public IReadOnlyDictionary`2<string, Measurement> Measurements { get; }
    [NullableAttribute("2")]
public string Origin { get; public set; }
    private static NoOpSpan();
    [CompilerGeneratedAttribute]
public static ISpan get_Instance();
    public sealed virtual SpanId get_SpanId();
    public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    public sealed virtual SentryId get_TraceId();
    public sealed virtual Nullable`1<bool> get_IsSampled();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Tags();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Extra();
    public sealed virtual DateTimeOffset get_StartTimestamp();
    public sealed virtual Nullable`1<DateTimeOffset> get_EndTimestamp();
    public sealed virtual bool get_IsFinished();
    public sealed virtual string get_Operation();
    public sealed virtual void set_Operation(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
public sealed virtual void set_Description(string value);
    public sealed virtual Nullable`1<SpanStatus> get_Status();
    public sealed virtual void set_Status(Nullable`1<SpanStatus> value);
    public sealed virtual ISpan StartChild(string operation);
    public sealed virtual void Finish();
    public sealed virtual void Finish(SpanStatus status);
    public sealed virtual void Finish(Exception exception, SpanStatus status);
    public sealed virtual void Finish(Exception exception);
    public sealed virtual void SetTag(string key, string value);
    public sealed virtual void UnsetTag(string key);
    public sealed virtual void SetExtra(string key, object value);
    public sealed virtual SentryTraceHeader GetTraceHeader();
    public sealed virtual IReadOnlyDictionary`2<string, Measurement> get_Measurements();
    public sealed virtual void SetMeasurement(string name, Measurement measurement);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Origin(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.NoOpTransaction : NoOpSpan {
    [CompilerGeneratedAttribute]
private static ITransactionTracer <Instance>k__BackingField;
    public static ITransactionTracer Instance { get; }
    public SdkVersion Sdk { get; }
    public string Name { get; public set; }
    public Nullable`1<bool> IsParentSampled { get; public set; }
    public TransactionNameSource NameSource { get; }
    [NullableAttribute("2")]
public string Distribution { get; public set; }
    public Nullable`1<SentryLevel> Level { get; public set; }
    public SentryRequest Request { get; public set; }
    public SentryContexts Contexts { get; public set; }
    public SentryUser User { get; public set; }
    [NullableAttribute("2")]
public string Platform { get; public set; }
    [NullableAttribute("2")]
public string Release { get; public set; }
    [NullableAttribute("2")]
public string Environment { get; public set; }
    [NullableAttribute("2")]
public string TransactionName { get; public set; }
    public IReadOnlyList`1<string> Fingerprint { get; public set; }
    public IReadOnlyCollection`1<ISpan> Spans { get; }
    public IReadOnlyCollection`1<Breadcrumb> Breadcrumbs { get; }
    private static NoOpTransaction();
    [CompilerGeneratedAttribute]
public static ITransactionTracer get_Instance();
    public sealed virtual SdkVersion get_Sdk();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual Nullable`1<bool> get_IsParentSampled();
    public sealed virtual void set_IsParentSampled(Nullable`1<bool> value);
    public sealed virtual TransactionNameSource get_NameSource();
    [NullableContextAttribute("2")]
public sealed virtual string get_Distribution();
    [NullableContextAttribute("2")]
public sealed virtual void set_Distribution(string value);
    public sealed virtual Nullable`1<SentryLevel> get_Level();
    public sealed virtual void set_Level(Nullable`1<SentryLevel> value);
    public sealed virtual SentryRequest get_Request();
    public sealed virtual void set_Request(SentryRequest value);
    public sealed virtual SentryContexts get_Contexts();
    public sealed virtual void set_Contexts(SentryContexts value);
    public sealed virtual SentryUser get_User();
    public sealed virtual void set_User(SentryUser value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Platform();
    [NullableContextAttribute("2")]
public sealed virtual void set_Platform(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Release();
    [NullableContextAttribute("2")]
public sealed virtual void set_Release(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Environment();
    [NullableContextAttribute("2")]
public sealed virtual void set_Environment(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_TransactionName();
    [NullableContextAttribute("2")]
public sealed virtual void set_TransactionName(string value);
    public sealed virtual IReadOnlyList`1<string> get_Fingerprint();
    public sealed virtual void set_Fingerprint(IReadOnlyList`1<string> value);
    public sealed virtual IReadOnlyCollection`1<ISpan> get_Spans();
    public sealed virtual IReadOnlyCollection`1<Breadcrumb> get_Breadcrumbs();
    [NullableContextAttribute("2")]
public sealed virtual ISpan GetLastActiveSpan();
    public sealed virtual void AddBreadcrumb(Breadcrumb breadcrumb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.ObjectExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<object, Dictionary`2<string, object>> <Map>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConditionalWeakTable`2<object, Dictionary`2<string, object>> Map { get; }
    private static ObjectExtensions();
    [CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<object, Dictionary`2<string, object>> get_Map();
    [ExtensionAttribute]
private static Dictionary`2<string, object> AssociatedProperties(object source);
    [ExtensionAttribute]
public static void SetFused(object source, string propertyName, object value);
    [ExtensionAttribute]
public static void SetFused(object source, T value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T GetFused(object source, string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.OpenTelemetry.OtelSemanticConventions : object {
    public static string AttributeNetTransport;
    public static string AttributeNetPeerIp;
    public static string AttributeNetPeerPort;
    public static string AttributeNetPeerName;
    public static string AttributeNetHostIp;
    public static string AttributeNetHostPort;
    public static string AttributeNetHostName;
    public static string AttributeEnduserId;
    public static string AttributeEnduserRole;
    public static string AttributeEnduserScope;
    public static string AttributePeerService;
    public static string AttributeHttpMethod;
    public static string AttributeHttpUrl;
    public static string AttributeHttpTarget;
    public static string AttributeHttpHost;
    public static string AttributeHttpScheme;
    public static string AttributeHttpStatusCode;
    public static string AttributeHttpStatusText;
    public static string AttributeHttpFlavor;
    public static string AttributeHttpServerName;
    public static string AttributeHttpRoute;
    public static string AttributeHttpClientIP;
    public static string AttributeHttpUserAgent;
    public static string AttributeHttpRequestContentLength;
    public static string AttributeHttpRequestContentLengthUncompressed;
    public static string AttributeHttpResponseContentLength;
    public static string AttributeHttpResponseContentLengthUncompressed;
    public static string AttributeDbSystem;
    public static string AttributeDbConnectionString;
    public static string AttributeDbUser;
    public static string AttributeDbMsSqlInstanceName;
    public static string AttributeDbJdbcDriverClassName;
    public static string AttributeDbName;
    public static string AttributeDbStatement;
    public static string AttributeDbOperation;
    public static string AttributeDbInstance;
    public static string AttributeDbUrl;
    public static string AttributeDbCassandraKeyspace;
    public static string AttributeDbHBaseNamespace;
    public static string AttributeDbRedisDatabaseIndex;
    public static string AttributeDbMongoDbCollection;
    public static string AttributeRpcSystem;
    public static string AttributeRpcService;
    public static string AttributeRpcMethod;
    public static string AttributeRpcGrpcStatusCode;
    public static string AttributeMessageType;
    public static string AttributeMessageId;
    public static string AttributeMessageCompressedSize;
    public static string AttributeMessageUncompressedSize;
    public static string AttributeFaasTrigger;
    public static string AttributeFaasExecution;
    public static string AttributeFaasDocumentCollection;
    public static string AttributeFaasDocumentOperation;
    public static string AttributeFaasDocumentTime;
    public static string AttributeFaasDocumentName;
    public static string AttributeFaasTime;
    public static string AttributeFaasCron;
    public static string AttributeMessagingSystem;
    public static string AttributeMessagingDestination;
    public static string AttributeMessagingDestinationKind;
    public static string AttributeMessagingTempDestination;
    public static string AttributeMessagingProtocol;
    public static string AttributeMessagingProtocolVersion;
    public static string AttributeMessagingUrl;
    public static string AttributeMessagingMessageId;
    public static string AttributeMessagingConversationId;
    public static string AttributeMessagingPayloadSize;
    public static string AttributeMessagingPayloadCompressedSize;
    public static string AttributeMessagingOperation;
    public static string AttributeExceptionEventName;
    public static string AttributeExceptionType;
    public static string AttributeExceptionMessage;
    public static string AttributeExceptionStacktrace;
    public static string AttributeClientAddress;
    public static string AttributeClientPort;
    public static string AttributeHttpRequestMethod;
    public static string AttributeHttpResponseStatusCode;
    public static string AttributeNetworkProtocolVersion;
    public static string AttributeServerAddress;
    public static string AttributeServerPort;
    public static string AttributeServerSocketAddress;
    public static string AttributeUrlFull;
    public static string AttributeUrlPath;
    public static string AttributeUrlScheme;
    public static string AttributeUrlQuery;
    public static string AttributeUserAgentOriginal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.OpenTelemetry.OtelSpanAttributeConstants : object {
    public static string StatusCodeKey;
    public static string StatusDescriptionKey;
    public static string DatabaseStatementTypeKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Sentry.Internal.OpenTelemetry.OtelStatusTags : object {
    public static string UnsetStatusCodeTagValue;
    public static string OkStatusCodeTagValue;
    public static string ErrorStatusCodeTagValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.OriginHelper : object {
    internal static string Manual;
    private static string ValidOriginPattern;
    private static Regex ValidOrigin;
    private static OriginHelper();
    [NullableContextAttribute("2")]
public static bool IsValidOrigin(string value);
    internal static string TryParse(string origin);
    [ExtensionAttribute]
public static void SetOrigin(ISpan span, string origin);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.PartialStream : Stream {
    private Stream _innerStream;
    private long _offset;
    private Nullable`1<long> _length;
    private long _position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PartialStream(Stream innerStream, long offset, Nullable`1<long> length);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [AsyncStateMachineAttribute("Sentry.Internal.PartialStream/<ReadAsync>d__16")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    [ExcludeFromCodeCoverageAttribute]
public virtual int Read(Byte[] buffer, int offset, int count);
    [ExcludeFromCodeCoverageAttribute]
public virtual void SetLength(long value);
    [ExcludeFromCodeCoverageAttribute]
public virtual void Write(Byte[] buffer, int offset, int count);
    [ExcludeFromCodeCoverageAttribute]
public virtual void Flush();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.PiiExtensions : object {
    internal static string RedactedText;
    private static Regex AuthRegex;
    private static Regex UserInfoMatcher;
    private static PiiExtensions();
    [ExtensionAttribute]
public static string RedactUrl(string data);
    private static string RedactAuth(string data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.PollingNetworkStatusListener : object {
    [NullableAttribute("2")]
private SentryOptions _options;
    [NullableAttribute("2")]
private IPing _testPing;
    internal int _delayInMilliseconds;
    private int _maxDelayInMilliseconds;
    private Func`2<int, int> _backoffFunction;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _online;
    private Lazy`1<IPing> LazyPing { get; }
    private IPing Ping { get; }
    public bool Online { get; public set; }
    public PollingNetworkStatusListener(SentryOptions options, int initialDelayInMilliseconds, int maxDelayInMilliseconds, Func`2<int, int> backoffFunction);
    internal PollingNetworkStatusListener(IPing testPing, int initialDelayInMilliseconds, int maxDelayInMilliseconds, Func`2<int, int> backoffFunction);
    private Lazy`1<IPing> get_LazyPing();
    private IPing get_Ping();
    public sealed virtual bool get_Online();
    public void set_Online(bool value);
    [AsyncStateMachineAttribute("Sentry.Internal.PollingNetworkStatusListener/<WaitForNetworkOnlineAsync>d__15")]
public sealed virtual Task WaitForNetworkOnlineAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private IPing <get_LazyPing>b__8_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Sentry.Internal.PooledBuffer`1 : ValueType {
    [CompilerGeneratedAttribute]
private T[] <Array>k__BackingField;
    public T[] Array { get; }
    public PooledBuffer`1(int minimumLength);
    [CompilerGeneratedAttribute]
public T[] get_Array();
    public sealed virtual void Dispose();
}
internal class Sentry.Internal.PrefixOrPatternMatcher : object {
    [CompilerGeneratedAttribute]
private StringComparison <comparison>P;
    public PrefixOrPatternMatcher(StringComparison comparison);
    [NullableContextAttribute("1")]
public sealed virtual bool IsMatch(StringOrRegex stringOrRegex, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.ProcessInfo : object {
    [NullableAttribute("2")]
internal static ProcessInfo Instance;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <StartupTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <BootTime>k__BackingField;
    private Task modreq(System.Runtime.CompilerServices.IsVolatile) _preciseAppStartupTask;
    private Nullable`1<int> _id;
    internal Nullable`1<DateTimeOffset> StartupTime { get; private set; }
    internal Nullable`1<DateTimeOffset> BootTime { get; }
    internal Task PreciseAppStartupTask { get; private set; }
    internal ProcessInfo(SentryOptions options, Func`1<DateTimeOffset> findPreciseStartupTime);
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTimeOffset> get_StartupTime();
    [CompilerGeneratedAttribute]
private void set_StartupTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTimeOffset> get_BootTime();
    internal Task get_PreciseAppStartupTask();
    private void set_PreciseAppStartupTask(Task value);
    public Nullable`1<int> GetId(SentryOptions options);
    private Nullable`1<int> GetCurrentProcessId(SentryOptions options);
    public Nullable`1<bool> ApplicationIsActivated(SentryOptions options);
    private static IntPtr GetForegroundWindow();
    private static int GetWindowThreadProcessId(IntPtr handle, Int32& processId);
}
internal abstract class Sentry.Internal.RandomValuesFactory : object {
    public abstract virtual int NextInt();
    public abstract virtual int NextInt(int minValue, int maxValue);
    public abstract virtual double NextDouble();
    [NullableContextAttribute("1")]
public abstract virtual void NextBytes(Byte[] bytes);
    public abstract virtual void NextBytes(Span`1<byte> bytes);
    public bool NextBool(double rate);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.Internal.RealStackFrame : object {
    [NullableAttribute("1")]
private StackFrame _frame;
    public StackFrame Frame { get; }
    [NullableContextAttribute("1")]
public RealStackFrame(StackFrame frame);
    public sealed virtual StackFrame get_Frame();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual int GetFileColumnNumber();
    public sealed virtual int GetFileLineNumber();
    public sealed virtual string GetFileName();
    public sealed virtual int GetILOffset();
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public sealed virtual MethodBase GetMethod();
    public sealed virtual IntPtr GetNativeImageBase();
    public sealed virtual IntPtr GetNativeIP();
    public sealed virtual bool HasNativeImage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Sentry.Internal.ScopeObserver : object {
    private SentryOptions _options;
    private string _name;
    public ScopeObserver(string name, SentryOptions options);
    public sealed virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    public abstract virtual void AddBreadcrumbImpl(Breadcrumb breadcrumb);
    public sealed virtual void SetExtra(string key, object value);
    public abstract virtual void SetExtraImpl(string key, string value);
    public sealed virtual void SetTag(string key, string value);
    public abstract virtual void SetTagImpl(string key, string value);
    public sealed virtual void UnsetTag(string key);
    public abstract virtual void UnsetTagImpl(string key);
    [NullableContextAttribute("2")]
public sealed virtual void SetUser(SentryUser user);
    public abstract virtual void SetUserImpl(SentryUser user);
    public abstract virtual void UnsetUserImpl();
}
internal class Sentry.Internal.ScopeStack.AsyncLocalScopeStackContainer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncLocal`1<KeyValuePair`2[]> _asyncLocalScope;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2[] Stack { get; public set; }
    public sealed virtual KeyValuePair`2[] get_Stack();
    public sealed virtual void set_Stack(KeyValuePair`2[] value);
}
internal class Sentry.Internal.ScopeStack.GlobalScopeStackContainer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private KeyValuePair`2[] <Stack>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2[] Stack { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2[] get_Stack();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Stack(KeyValuePair`2[] value);
}
internal interface Sentry.Internal.ScopeStack.IScopeStackContainer {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2[] Stack { get; public set; }
    public abstract virtual KeyValuePair`2[] get_Stack();
    public abstract virtual void set_Stack(KeyValuePair`2[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.SdkComposer : object {
    private SentryOptions _options;
    public SdkComposer(SentryOptions options);
    private ITransport CreateTransport();
    private LazyHttpTransport CreateHttpTransport();
    public IBackgroundWorker CreateBackgroundWorker();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.SentryScopeManager : object {
    [CompilerGeneratedAttribute]
private IScopeStackContainer <ScopeStackContainer>k__BackingField;
    private SentryOptions _options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<KeyValuePair`2[]> <NewStack>k__BackingField;
    public IScopeStackContainer ScopeStackContainer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2[] ScopeAndClientStack { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<KeyValuePair`2[]> NewStack { get; }
    private bool IsGlobalMode { get; }
    public SentryScopeManager(SentryOptions options, ISentryClient rootClient);
    [CompilerGeneratedAttribute]
public sealed virtual IScopeStackContainer get_ScopeStackContainer();
    private KeyValuePair`2[] get_ScopeAndClientStack();
    private void set_ScopeAndClientStack(KeyValuePair`2[] value);
    [CompilerGeneratedAttribute]
private Func`1<KeyValuePair`2[]> get_NewStack();
    private bool get_IsGlobalMode();
    public sealed virtual KeyValuePair`2<Scope, ISentryClient> GetCurrent();
    public sealed virtual void ConfigureScope(Action`1<Scope> configureScope);
    public sealed virtual Task ConfigureScopeAsync(Func`2<Scope, Task> configureScope);
    public sealed virtual IDisposable PushScope();
    [NullableContextAttribute("2")]
public sealed virtual IDisposable PushScope(TState state);
    public sealed virtual void RestoreScope(Scope savedScope);
    [NullableContextAttribute("2")]
public sealed virtual void BindClient(ISentryClient client);
    public sealed virtual void Dispose();
}
internal class Sentry.Internal.SentryStopwatch : ValueType {
    private static double StopwatchTicksPerTimeSpanTick;
    private static double StopwatchTicksPerNs;
    private long _startTimestamp;
    private DateTimeOffset _startDateTimeOffset;
    public DateTimeOffset StartDateTimeOffset { get; }
    public DateTimeOffset CurrentDateTimeOffset { get; }
    public TimeSpan Elapsed { get; }
    public ulong ElapsedNanoseconds { get; }
    private static SentryStopwatch();
    public static SentryStopwatch StartNew();
    public DateTimeOffset get_StartDateTimeOffset();
    public DateTimeOffset get_CurrentDateTimeOffset();
    private long Diff();
    public TimeSpan get_Elapsed();
    public ulong get_ElapsedNanoseconds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.Internal.SerializableExtensions : object {
    [AsyncStateMachineAttribute("Sentry.Internal.SerializableExtensions/<SerializeToStringAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> SerializeToStringAsync(ISerializable serializable, IDiagnosticLogger logger, ISystemClock clock, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static string SerializeToString(ISerializable serializable, IDiagnosticLogger logger, ISystemClock clock);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.Internal.SettingLocator : object {
    [NullableAttribute("1")]
private SentryOptions _options;
    [CompilerGeneratedAttribute]
private Assembly <AssemblyForAttributes>k__BackingField;
    public Assembly AssemblyForAttributes { get; protected set; }
    [NullableContextAttribute("1")]
public SettingLocator(SentryOptions options);
    [CompilerGeneratedAttribute]
public Assembly get_AssemblyForAttributes();
    [CompilerGeneratedAttribute]
protected void set_AssemblyForAttributes(Assembly value);
    [NullableContextAttribute("1")]
public virtual string GetEnvironmentVariable(string variable);
    [NullableContextAttribute("1")]
public string GetDsn();
    [NullableContextAttribute("1")]
public string GetEnvironment();
    public string GetEnvironment(bool useDefaultIfNotFound);
    public string GetRelease();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.Signal : object {
    private object _lock;
    private SemaphoreSlim _semaphore;
    public Signal(bool isReleasedInitially);
    public void Release();
    public Task WaitAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.StringOrRegex : object {
    [NullableAttribute("2")]
internal Regex _regex;
    [NullableAttribute("2")]
internal string _prefix;
    public StringOrRegex(string stringOrRegex);
    public StringOrRegex(Regex regex);
    public static StringOrRegex op_Implicit(string stringOrRegex);
    public static StringOrRegex op_Implicit(Regex regex);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Sentry.Internal.StringOrRegexExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool MatchesAny(string parameter, List`1<StringOrRegex> patterns, IStringOrRegexMatcher matcher);
}
internal class Sentry.Internal.SynchronizedRandomValuesFactory : RandomValuesFactory {
    public virtual int NextInt();
    public virtual int NextInt(int minValue, int maxValue);
    public virtual double NextDouble();
    [NullableContextAttribute("1")]
public virtual void NextBytes(Byte[] bytes);
    public virtual void NextBytes(Span`1<byte> bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Internal.TcpPing : object {
    [CompilerGeneratedAttribute]
private string <hostToCheck>P;
    [CompilerGeneratedAttribute]
private int <portToCheck>P;
    private Ping _ping;
    public TcpPing(string hostToCheck, int portToCheck);
    [AsyncStateMachineAttribute("Sentry.Internal.TcpPing/<IsAvailableAsync>d__4")]
public sealed virtual Task`1<bool> IsAvailableAsync(CancellationToken cancellationToken);
}
internal class Sentry.Internal.ThreadPoolInfo : object {
    [CompilerGeneratedAttribute]
private int <MinWorkerThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinCompletionPortThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWorkerThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCompletionPortThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AvailableWorkerThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AvailableCompletionPortThreads>k__BackingField;
    public int MinWorkerThreads { get; }
    public int MinCompletionPortThreads { get; }
    public int MaxWorkerThreads { get; }
    public int MaxCompletionPortThreads { get; }
    public int AvailableWorkerThreads { get; }
    public int AvailableCompletionPortThreads { get; }
    public ThreadPoolInfo(int minWorkerThreads, int minCompletionPortThreads, int maxWorkerThreads, int maxCompletionPortThreads, int availableWorkerThreads, int availableCompletionPortThreads);
    [CompilerGeneratedAttribute]
public int get_MinWorkerThreads();
    [CompilerGeneratedAttribute]
public int get_MinCompletionPortThreads();
    [CompilerGeneratedAttribute]
public int get_MaxWorkerThreads();
    [CompilerGeneratedAttribute]
public int get_MaxCompletionPortThreads();
    [CompilerGeneratedAttribute]
public int get_AvailableWorkerThreads();
    [CompilerGeneratedAttribute]
public int get_AvailableCompletionPortThreads();
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Sentry.Internal.ThreadsafeCounterDictionary`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<TKey, CounterItem<TKey>> _items;
    public int Count { get; }
    public int Item { get; }
    public IEnumerable`1<TKey> Keys { get; }
    public IEnumerable`1<int> Values { get; }
    public void Add(TKey key, int quantity);
    public void Increment(TKey key);
    public int ReadAndReset(TKey key);
    public IReadOnlyDictionary`2<TKey, int> ReadAllAndReset();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, int>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool TryGetValue(TKey key, Int32& value);
    public sealed virtual int get_Item(TKey key);
    public sealed virtual IEnumerable`1<TKey> get_Keys();
    public sealed virtual IEnumerable`1<int> get_Values();
}
[NullableContextAttribute("1")]
public interface Sentry.IScopeObserver {
    public abstract virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    public abstract virtual void SetExtra(string key, object value);
    public abstract virtual void SetTag(string key, string value);
    public abstract virtual void UnsetTag(string key);
    [NullableContextAttribute("2")]
public abstract virtual void SetUser(SentryUser user);
}
[NullableContextAttribute("1")]
public interface Sentry.ISentryClient {
    public bool IsEnabled { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual bool CaptureEnvelope(Envelope envelope);
    [NullableContextAttribute("2")]
public abstract virtual SentryId CaptureEvent(SentryEvent evt, Scope scope, SentryHint hint);
    public abstract virtual void CaptureUserFeedback(UserFeedback userFeedback);
    [EditorBrowsableAttribute("1")]
public abstract virtual void CaptureTransaction(SentryTransaction transaction);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public abstract virtual void CaptureTransaction(SentryTransaction transaction, Scope scope, SentryHint hint);
    public abstract virtual void CaptureSession(SessionUpdate sessionUpdate);
    public abstract virtual SentryId CaptureCheckIn(string monitorSlug, CheckInStatus status, Nullable`1<SentryId> sentryId, Nullable`1<TimeSpan> duration, Scope scope, Action`1<SentryMonitorOptions> configureMonitorOptions);
    public abstract virtual Task FlushAsync(TimeSpan timeout);
}
[NullableContextAttribute("1")]
internal interface Sentry.ISentryFailedRequestHandler {
    public abstract virtual void HandleResponse(HttpResponseMessage response);
}
[NullableContextAttribute("1")]
public interface Sentry.ISentryJsonSerializable {
    public abstract virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
public interface Sentry.ISentryScopeManager {
    public abstract virtual void ConfigureScope(Action`1<Scope> configureScope);
    public abstract virtual Task ConfigureScopeAsync(Func`2<Scope, Task> configureScope);
    public abstract virtual void BindClient(ISentryClient client);
    public abstract virtual IDisposable PushScope();
    public abstract virtual IDisposable PushScope(TState state);
}
[NullableContextAttribute("1")]
public interface Sentry.ISentryScopeStateProcessor {
    public abstract virtual void Apply(Scope scope, object state);
}
[NullableContextAttribute("2")]
public interface Sentry.ISentrySession {
    public SentryId Id { get; }
    public string DistinctId { get; }
    public DateTimeOffset StartTimestamp { get; }
    [NullableAttribute("1")]
public string Release { get; }
    public string Environment { get; }
    public string IpAddress { get; }
    public string UserAgent { get; }
    public int ErrorCount { get; }
    public abstract virtual SentryId get_Id();
    public abstract virtual string get_DistinctId();
    public abstract virtual DateTimeOffset get_StartTimestamp();
    [NullableContextAttribute("1")]
public abstract virtual string get_Release();
    public abstract virtual string get_Environment();
    public abstract virtual string get_IpAddress();
    public abstract virtual string get_UserAgent();
    public abstract virtual int get_ErrorCount();
}
[NullableContextAttribute("2")]
public interface Sentry.ISentryUserFactory {
    public abstract virtual SentryUser Create();
}
[NullableContextAttribute("2")]
internal interface Sentry.ISessionManager {
    public bool IsSessionActive { get; }
    public abstract virtual bool get_IsSessionActive();
    public abstract virtual SessionUpdate TryRecoverPersistedSession();
    public abstract virtual SessionUpdate StartSession();
    public abstract virtual SessionUpdate EndSession(DateTimeOffset timestamp, SessionEndStatus status);
    public abstract virtual SessionUpdate EndSession(SessionEndStatus status);
    public abstract virtual void PauseSession();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<SessionUpdate> ResumeSession();
    public abstract virtual SessionUpdate ReportError();
}
[NullableContextAttribute("1")]
public interface Sentry.ISpan {
    [NullableAttribute("2")]
public string Description { get; public set; }
    public string Operation { get; public set; }
    public Nullable`1<SpanStatus> Status { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Description();
    [NullableContextAttribute("2")]
public abstract virtual void set_Description(string value);
    public abstract virtual string get_Operation();
    public abstract virtual void set_Operation(string value);
    public abstract virtual Nullable`1<SpanStatus> get_Status();
    public abstract virtual void set_Status(Nullable`1<SpanStatus> value);
    public abstract virtual ISpan StartChild(string operation);
    public abstract virtual void Finish();
    public abstract virtual void Finish(SpanStatus status);
    public abstract virtual void Finish(Exception exception, SpanStatus status);
    public abstract virtual void Finish(Exception exception);
}
[NullableContextAttribute("1")]
public interface Sentry.ISpanData {
    public DateTimeOffset StartTimestamp { get; }
    public Nullable`1<DateTimeOffset> EndTimestamp { get; }
    public bool IsFinished { get; }
    public IReadOnlyDictionary`2<string, Measurement> Measurements { get; }
    public abstract virtual DateTimeOffset get_StartTimestamp();
    public abstract virtual Nullable`1<DateTimeOffset> get_EndTimestamp();
    public abstract virtual bool get_IsFinished();
    public abstract virtual SentryTraceHeader GetTraceHeader();
    public abstract virtual IReadOnlyDictionary`2<string, Measurement> get_Measurements();
    public abstract virtual void SetMeasurement(string name, Measurement measurement);
}
[NullableContextAttribute("2")]
internal interface Sentry.ITraceContextInternal {
    public string Origin { get; }
    public abstract virtual string get_Origin();
}
[NullableContextAttribute("1")]
public interface Sentry.ITransactionContext {
    public string Name { get; }
    public Nullable`1<bool> IsParentSampled { get; }
    public TransactionNameSource NameSource { get; }
    public abstract virtual string get_Name();
    public abstract virtual Nullable`1<bool> get_IsParentSampled();
    public abstract virtual TransactionNameSource get_NameSource();
}
public interface Sentry.ITransactionData {
    [NullableAttribute("2")]
public string Platform { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Platform();
    [NullableContextAttribute("2")]
public abstract virtual void set_Platform(string value);
}
public interface Sentry.ITransactionTracer {
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<bool> IsParentSampled { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<ISpan> Spans { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    [NullableContextAttribute("1")]
public abstract virtual void set_Name(string value);
    public abstract virtual Nullable`1<bool> get_IsParentSampled();
    public abstract virtual void set_IsParentSampled(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyCollection`1<ISpan> get_Spans();
    [NullableContextAttribute("2")]
public abstract virtual ISpan GetLastActiveSpan();
}
[ExtensionAttribute]
internal static class Sentry.JsonSerializableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void WriteToFile(ISentryJsonSerializable serializable, string filePath, IDiagnosticLogger logger);
}
[IsReadOnlyAttribute]
public class Sentry.MeasurementUnit : ValueType {
    [NullableAttribute("2")]
private Enum _unit;
    [NullableAttribute("2")]
private string _name;
    public static MeasurementUnit None;
    [NullableContextAttribute("1")]
private MeasurementUnit(Enum unit);
    [NullableContextAttribute("1")]
private MeasurementUnit(string name);
    private static MeasurementUnit();
    [NullableContextAttribute("1")]
public static MeasurementUnit Custom(string name);
    [NullableContextAttribute("2")]
internal static MeasurementUnit Parse(string name);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(MeasurementUnit other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(MeasurementUnit left, MeasurementUnit right);
    public static bool op_Inequality(MeasurementUnit left, MeasurementUnit right);
    public static MeasurementUnit op_Implicit(Duration unit);
    public static MeasurementUnit op_Implicit(Fraction unit);
    public static MeasurementUnit op_Implicit(Information unit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.MetricAggregator : object {
    internal static string DisposingMessage;
    internal static string AlreadyDisposedMessage;
    internal static string CancelledMessage;
    internal static string ShutdownScheduledMessage;
    internal static string ShutdownImmediatelyMessage;
    internal static string FlushShutdownMessage;
    private SentryOptions _options;
    private IMetricHub _metricHub;
    private SemaphoreSlim _codeLocationLock;
    private ReaderWriterLockSlim _bucketsLock;
    private CancellationTokenSource _shutdownSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private Lazy`1<Dictionary`2<long, ConcurrentDictionary`2<string, Metric>>> _buckets;
    internal long _lastClearedStaleLocations;
    internal ConcurrentDictionary`2<long, HashSet`1<MetricResourceIdentifier>> _seenLocations;
    internal Dictionary`2<long, Dictionary`2<MetricResourceIdentifier, SentryStackFrame>> _pendingLocations;
    internal Task _loopTask;
    private SemaphoreSlim _flushLock;
    internal Dictionary`2<long, ConcurrentDictionary`2<string, Metric>> Buckets { get; }
    internal MetricAggregator(SentryOptions options, IMetricHub metricHub, CancellationTokenSource shutdownSource, bool disableLoopTask);
    internal Dictionary`2<long, ConcurrentDictionary`2<string, Metric>> get_Buckets();
    public sealed virtual void Increment(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Gauge(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Distribution(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Set(string key, int value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual void Set(string key, string value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public virtual void Timing(string key, double value, Duration unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    public sealed virtual IDisposable StartTimer(string key, Duration unit, IDictionary`2<string, string> tags, int stackLevel);
    private void Emit(MetricType type, string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp, int stackLevel);
    private ConcurrentDictionary`2<string, Metric> GetOrAddTimeBucket(long bucketKey);
    internal virtual void RecordCodeLocation(MetricType type, string key, MeasurementUnit unit, int stackLevel, DateTimeOffset timestamp);
    [NullableContextAttribute("2")]
internal SentryStackFrame GetCodeLocation(int stackLevel);
    [AsyncStateMachineAttribute("Sentry.MetricAggregator/<RunLoopAsync>d__31")]
private Task RunLoopAsync();
    [AsyncStateMachineAttribute("Sentry.MetricAggregator/<FlushAsync>d__33")]
public sealed virtual Task FlushAsync(bool force, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Sentry.MetricAggregator/<GetFlushableBuckets>d__34")]
internal IEnumerable`1<long> GetFlushableBuckets(bool force);
    private Dictionary`2<long, Dictionary`2<MetricResourceIdentifier, SentryStackFrame>> FlushableLocations();
    internal void ClearStaleLocations(Nullable`1<DateTimeOffset> testNow);
    [AsyncStateMachineAttribute("Sentry.MetricAggregator/<DisposeAsync>d__37")]
public ValueTask DisposeAsync();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.MetricHelper : object {
    private static RandomValuesFactory Random;
    private static int RollupInSeconds;
    private static string InvalidMetricKeyOrNameCharactersPattern;
    private static string InvalidTagKeyCharactersPattern;
    private static string InvalidMetricUnitCharactersPattern;
    private static DateTimeOffset UnixEpoch;
    internal static double FlushShift;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> LazyTagValueReplacements;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static KeyValuePair`2[] TagValueReplacements { get; }
    private static MetricHelper();
    [ExtensionAttribute]
internal static long GetDayBucketKey(DateTimeOffset timestamp);
    [ExtensionAttribute]
internal static long GetTimeBucketKey(DateTimeOffset timestamp);
    internal static DateTimeOffset GetCutoff();
    [GeneratedRegexAttribute("[^\w\-.]+", "8")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex InvalidMetricKeyOrNameCharacters();
    internal static string SanitizeMetricKeyOrName(string input);
    [GeneratedRegexAttribute("[^\w\-.\/]+", "8")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex InvalidTagKeyCharacters();
    internal static string SanitizeTagKey(string input);
    [GeneratedRegexAttribute("[^\w]+", "8")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex InvalidMetricUnitCharacters();
    internal static string SanitizeMetricUnit(string input);
    private static KeyValuePair`2[] get_TagValueReplacements();
    internal static string SanitizeTagValue(string input);
    public static string GetMetricBucketKey(MetricType type, string metricKey, MeasurementUnit unit, IDictionary`2<string, string> tags);
    internal static string GetTagsKey(IDictionary`2<string, string> tags);
    [CompilerGeneratedAttribute]
internal static string <GetTagsKey>g__EscapeString|21_0(string input, Char[] charsToEscape);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.MetricsSummaryAggregator : object {
    [CompilerGeneratedAttribute]
private Lazy`1<ConcurrentDictionary`2<string, SpanMetric>> <LazyMeasurements>k__BackingField;
    private Lazy`1<ConcurrentDictionary`2<string, SpanMetric>> LazyMeasurements { get; }
    internal ConcurrentDictionary`2<string, SpanMetric> Measurements { get; }
    [CompilerGeneratedAttribute]
private Lazy`1<ConcurrentDictionary`2<string, SpanMetric>> get_LazyMeasurements();
    internal ConcurrentDictionary`2<string, SpanMetric> get_Measurements();
    public void Add(MetricType ty, string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.NoOpDisposable : object {
    private static Lazy`1<NoOpDisposable> LazyInstance;
    internal static NoOpDisposable Instance { get; }
    private static NoOpDisposable();
    internal static NoOpDisposable get_Instance();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.PersistedSessionUpdate : object {
    [CompilerGeneratedAttribute]
private SessionUpdate <Update>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PauseTimestamp>k__BackingField;
    public SessionUpdate Update { get; }
    public Nullable`1<DateTimeOffset> PauseTimestamp { get; }
    public PersistedSessionUpdate(SessionUpdate update, Nullable`1<DateTimeOffset> pauseTimestamp);
    [CompilerGeneratedAttribute]
public SessionUpdate get_Update();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PauseTimestamp();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static PersistedSessionUpdate FromJson(JsonElement json);
}
internal static class Sentry.PlatformAbstractions.DeviceInfo : object {
    [NullableAttribute("1")]
public static string PlatformName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Sentry.PlatformAbstractions.FrameworkInfo : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyDictionary`2<int, string> <NetFxReleaseVersionMap>k__BackingField;
    public static IReadOnlyDictionary`2<int, string> NetFxReleaseVersionMap { get; }
    private static FrameworkInfo();
    [CompilerGeneratedAttribute]
public static IReadOnlyDictionary`2<int, string> get_NetFxReleaseVersionMap();
    [NullableContextAttribute("2")]
public static FrameworkInstallation GetLatest(int clr);
    public static IEnumerable`1<FrameworkInstallation> GetInstallations();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.PlatformAbstractions.FrameworkInstallation : object {
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ServicePack>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FrameworkProfile> <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Release>k__BackingField;
    public string ShortName { get; public set; }
    public Version Version { get; public set; }
    public Nullable`1<int> ServicePack { get; public set; }
    public Nullable`1<FrameworkProfile> Profile { get; public set; }
    public Nullable`1<int> Release { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ServicePack();
    [CompilerGeneratedAttribute]
public void set_ServicePack(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FrameworkProfile> get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(Nullable`1<FrameworkProfile> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Release();
    [CompilerGeneratedAttribute]
public void set_Release(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[ExtensionAttribute]
internal static class Sentry.PlatformAbstractions.FrameworkInstallationExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static string GetVersionNumber(FrameworkInstallation frameworkInstall);
}
public enum Sentry.PlatformAbstractions.FrameworkProfile : Enum {
    public int value__;
    public static FrameworkProfile Client;
    public static FrameworkProfile Full;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.PlatformAbstractions.RuntimeInfo : object {
    private static Regex RuntimeParseRegex;
    private static RuntimeInfo();
    internal static SentryRuntime GetRuntime();
    [ExtensionAttribute]
internal static SentryRuntime WithAdditionalProperties(SentryRuntime runtime);
    [NullableContextAttribute("2")]
internal static SentryRuntime Parse(string rawRuntimeDescription, string name);
    private static string GetNetCoreVersion(SentryRuntime runtime);
    internal static string GetRuntimeIdentifier(SentryRuntime runtime);
    [NullableContextAttribute("2")]
private static SentryRuntime GetFromRuntimeInformation();
    [NullableContextAttribute("2")]
private static SentryRuntime GetFromMonoRuntime();
    private static SentryRuntime GetFromEnvironmentVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static string <GetNetCoreVersion>g__RemovePrefixOrNull|4_0(string value, string prefix);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.PlatformAbstractions.SentryRuntime : object {
    [NullableAttribute("1")]
private static Lazy`1<SentryRuntime> _currentRuntime;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [NullableAttribute("1")]
public static SentryRuntime Current { get; }
    public string Name { get; }
    public string Version { get; }
    public string Raw { get; }
    public string Identifier { get; }
    public SentryRuntime(string name, string version, string raw, string identifier);
    private static SentryRuntime();
    [NullableContextAttribute("1")]
public static SentryRuntime get_Current();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    public virtual string ToString();
    public sealed virtual bool Equals(SentryRuntime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.PlatformAbstractions.SentryRuntimeExtensions : object {
    [ExtensionAttribute]
public static bool IsNetFx(SentryRuntime runtime);
    [ExtensionAttribute]
public static bool IsNetCore(SentryRuntime runtime);
    [ExtensionAttribute]
public static bool IsMono(SentryRuntime runtime);
    [ExtensionAttribute]
internal static bool IsBrowserWasm(SentryRuntime runtime);
    [ExtensionAttribute]
private static bool StartsWith(SentryRuntime runtime, string runtimeName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.Protocol.App : object {
    [NullableAttribute("1")]
public static string Type;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InForeground>k__BackingField;
    public string Identifier { get; public set; }
    public Nullable`1<DateTimeOffset> StartTime { get; public set; }
    public string Hash { get; public set; }
    public string BuildType { get; public set; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string Build { get; public set; }
    public Nullable`1<bool> InForeground { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_BuildType();
    [CompilerGeneratedAttribute]
public void set_BuildType(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_InForeground();
    [CompilerGeneratedAttribute]
public void set_InForeground(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
internal App Clone();
    [NullableContextAttribute("1")]
private sealed virtual override App Sentry.Internal.ICloneable<Sentry.Protocol.App>.Clone();
    [NullableContextAttribute("1")]
internal void UpdateFrom(App source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable.UpdateFrom(object source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable<Sentry.Protocol.App>.UpdateFrom(App source);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    [NullableContextAttribute("1")]
public static App FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Protocol.Browser : object {
    public static string Type;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public string Version { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Version(string value);
    internal Browser Clone();
    private sealed virtual override Browser Sentry.Internal.ICloneable<Sentry.Protocol.Browser>.Clone();
    internal void UpdateFrom(Browser source);
    private sealed virtual override void Sentry.Internal.IUpdatable.UpdateFrom(object source);
    private sealed virtual override void Sentry.Internal.IUpdatable<Sentry.Protocol.Browser>.UpdateFrom(Browser source);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    public static Browser FromJson(JsonElement json);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.Protocol.DebugImage : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ImageAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ImageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugChecksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ModuleVersionId>k__BackingField;
    public string Type { get; public set; }
    public Nullable`1<long> ImageAddress { get; public set; }
    public Nullable`1<long> ImageSize { get; public set; }
    public string DebugId { get; public set; }
    public string DebugChecksum { get; public set; }
    public string DebugFile { get; public set; }
    public string CodeId { get; public set; }
    public string CodeFile { get; public set; }
    internal Nullable`1<Guid> ModuleVersionId { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ImageAddress();
    [CompilerGeneratedAttribute]
public void set_ImageAddress(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ImageSize();
    [CompilerGeneratedAttribute]
public void set_ImageSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_DebugId();
    [CompilerGeneratedAttribute]
public void set_DebugId(string value);
    [CompilerGeneratedAttribute]
public string get_DebugChecksum();
    [CompilerGeneratedAttribute]
public void set_DebugChecksum(string value);
    [CompilerGeneratedAttribute]
public string get_DebugFile();
    [CompilerGeneratedAttribute]
public void set_DebugFile(string value);
    [CompilerGeneratedAttribute]
public string get_CodeId();
    [CompilerGeneratedAttribute]
public void set_CodeId(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFile();
    [CompilerGeneratedAttribute]
public void set_CodeFile(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Guid> get_ModuleVersionId();
    [CompilerGeneratedAttribute]
internal void set_ModuleVersionId(Nullable`1<Guid> value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static DebugImage FromJson(JsonElement json);
}
internal class Sentry.Protocol.DebugMeta : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<DebugImage> <Images>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<DebugImage> Images { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DebugImage> get_Images();
    [CompilerGeneratedAttribute]
public void set_Images(List`1<DebugImage> value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static DebugMeta FromJson(JsonElement json);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.Protocol.Device : object {
    [NullableAttribute("1")]
public static string Type;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <Timezone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Brand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <BatteryLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsCharging>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsOnline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceOrientation> <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Simulator>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FreeMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UsableMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LowMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <StorageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FreeStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ExternalStorageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ExternalFreeStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScreenResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <ScreenDensity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ScreenDpi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <BootTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProcessorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpuDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProcessorFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatteryStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceUniqueIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsVibration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsAccelerometer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsGyroscope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsAudio>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsLocationService>k__BackingField;
    public TimeZoneInfo Timezone { get; public set; }
    public string Name { get; public set; }
    public string Manufacturer { get; public set; }
    public string Brand { get; public set; }
    public string Family { get; public set; }
    public string Model { get; public set; }
    public string ModelId { get; public set; }
    public string Architecture { get; public set; }
    public Nullable`1<short> BatteryLevel { get; public set; }
    public Nullable`1<bool> IsCharging { get; public set; }
    public Nullable`1<bool> IsOnline { get; public set; }
    public Nullable`1<DeviceOrientation> Orientation { get; public set; }
    public Nullable`1<bool> Simulator { get; public set; }
    public Nullable`1<long> MemorySize { get; public set; }
    public Nullable`1<long> FreeMemory { get; public set; }
    public Nullable`1<long> UsableMemory { get; public set; }
    public Nullable`1<bool> LowMemory { get; public set; }
    public Nullable`1<long> StorageSize { get; public set; }
    public Nullable`1<long> FreeStorage { get; public set; }
    public Nullable`1<long> ExternalStorageSize { get; public set; }
    public Nullable`1<long> ExternalFreeStorage { get; public set; }
    public string ScreenResolution { get; public set; }
    public Nullable`1<float> ScreenDensity { get; public set; }
    public Nullable`1<int> ScreenDpi { get; public set; }
    public Nullable`1<DateTimeOffset> BootTime { get; public set; }
    public Nullable`1<int> ProcessorCount { get; public set; }
    public string CpuDescription { get; public set; }
    public Nullable`1<int> ProcessorFrequency { get; public set; }
    public string DeviceType { get; public set; }
    public string BatteryStatus { get; public set; }
    public string DeviceUniqueIdentifier { get; public set; }
    public Nullable`1<bool> SupportsVibration { get; public set; }
    public Nullable`1<bool> SupportsAccelerometer { get; public set; }
    public Nullable`1<bool> SupportsGyroscope { get; public set; }
    public Nullable`1<bool> SupportsAudio { get; public set; }
    public Nullable`1<bool> SupportsLocationService { get; public set; }
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_Timezone();
    [CompilerGeneratedAttribute]
public void set_Timezone(TimeZoneInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Manufacturer();
    [CompilerGeneratedAttribute]
public void set_Manufacturer(string value);
    [CompilerGeneratedAttribute]
public string get_Brand();
    [CompilerGeneratedAttribute]
public void set_Brand(string value);
    [CompilerGeneratedAttribute]
public string get_Family();
    [CompilerGeneratedAttribute]
public void set_Family(string value);
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(string value);
    [CompilerGeneratedAttribute]
public string get_ModelId();
    [CompilerGeneratedAttribute]
public void set_ModelId(string value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_BatteryLevel();
    [CompilerGeneratedAttribute]
public void set_BatteryLevel(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsCharging();
    [CompilerGeneratedAttribute]
public void set_IsCharging(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsOnline();
    [CompilerGeneratedAttribute]
public void set_IsOnline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceOrientation> get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Nullable`1<DeviceOrientation> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Simulator();
    [CompilerGeneratedAttribute]
public void set_Simulator(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MemorySize();
    [CompilerGeneratedAttribute]
public void set_MemorySize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FreeMemory();
    [CompilerGeneratedAttribute]
public void set_FreeMemory(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_UsableMemory();
    [CompilerGeneratedAttribute]
public void set_UsableMemory(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LowMemory();
    [CompilerGeneratedAttribute]
public void set_LowMemory(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_StorageSize();
    [CompilerGeneratedAttribute]
public void set_StorageSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FreeStorage();
    [CompilerGeneratedAttribute]
public void set_FreeStorage(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ExternalStorageSize();
    [CompilerGeneratedAttribute]
public void set_ExternalStorageSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ExternalFreeStorage();
    [CompilerGeneratedAttribute]
public void set_ExternalFreeStorage(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_ScreenResolution();
    [CompilerGeneratedAttribute]
public void set_ScreenResolution(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_ScreenDensity();
    [CompilerGeneratedAttribute]
public void set_ScreenDensity(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ScreenDpi();
    [CompilerGeneratedAttribute]
public void set_ScreenDpi(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_BootTime();
    [CompilerGeneratedAttribute]
public void set_BootTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProcessorCount();
    [CompilerGeneratedAttribute]
public void set_ProcessorCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CpuDescription();
    [CompilerGeneratedAttribute]
public void set_CpuDescription(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProcessorFrequency();
    [CompilerGeneratedAttribute]
public void set_ProcessorFrequency(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_DeviceType();
    [CompilerGeneratedAttribute]
public void set_DeviceType(string value);
    [CompilerGeneratedAttribute]
public string get_BatteryStatus();
    [CompilerGeneratedAttribute]
public void set_BatteryStatus(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceUniqueIdentifier();
    [CompilerGeneratedAttribute]
public void set_DeviceUniqueIdentifier(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsVibration();
    [CompilerGeneratedAttribute]
public void set_SupportsVibration(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsAccelerometer();
    [CompilerGeneratedAttribute]
public void set_SupportsAccelerometer(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsGyroscope();
    [CompilerGeneratedAttribute]
public void set_SupportsGyroscope(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsAudio();
    [CompilerGeneratedAttribute]
public void set_SupportsAudio(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsLocationService();
    [CompilerGeneratedAttribute]
public void set_SupportsLocationService(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
internal Device Clone();
    [NullableContextAttribute("1")]
private sealed virtual override Device Sentry.Internal.ICloneable<Sentry.Protocol.Device>.Clone();
    [NullableContextAttribute("1")]
internal void UpdateFrom(Device source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable.UpdateFrom(object source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable<Sentry.Protocol.Device>.UpdateFrom(Device source);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    private static TimeZoneInfo TryParseTimezone(JsonElement json);
    [NullableContextAttribute("1")]
public static Device FromJson(JsonElement json);
}
public enum Sentry.Protocol.DeviceOrientation : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DeviceOrientation Portrait;
    [EnumMemberAttribute]
public static DeviceOrientation Landscape;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Envelopes.AsyncJsonSerializable : object {
    [CompilerGeneratedAttribute]
private Task`1<ISentryJsonSerializable> <Source>k__BackingField;
    public Task`1<ISentryJsonSerializable> Source { get; }
    private AsyncJsonSerializable(Task`1<ISentryJsonSerializable> source);
    [CompilerGeneratedAttribute]
public Task`1<ISentryJsonSerializable> get_Source();
    public static AsyncJsonSerializable CreateFrom(Task`1<T> source);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.AsyncJsonSerializable/<SerializeAsync>d__5")]
public sealed virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    public sealed virtual void Serialize(Stream stream, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Protocol.Envelopes.Envelope : object {
    private Nullable`1<SentryId> _eventId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<EnvelopeItem> <Items>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IReadOnlyDictionary`2<string, string> SdkHeader;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IReadOnlyDictionary`2<string, object> DefaultHeader;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Header { get; }
    public IReadOnlyList`1<EnvelopeItem> Items { get; }
    public Envelope(IReadOnlyDictionary`2<string, object> header, IReadOnlyList`1<EnvelopeItem> items);
    private Envelope(Nullable`1<SentryId> eventId, IReadOnlyDictionary`2<string, object> header, IReadOnlyList`1<EnvelopeItem> items);
    private static Envelope();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Header();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<EnvelopeItem> get_Items();
    public Nullable`1<SentryId> TryGetEventId();
    [NullableContextAttribute("2")]
internal Nullable`1<SentryId> TryGetEventId(IDiagnosticLogger logger);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.Envelope/<SerializeHeaderAsync>d__11")]
private Task SerializeHeaderAsync(Stream stream, IDiagnosticLogger logger, ISystemClock clock, CancellationToken cancellationToken);
    private void SerializeHeader(Stream stream, IDiagnosticLogger logger, ISystemClock clock);
    public sealed virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.Envelope/<SerializeAsync>d__14")]
internal Task SerializeAsync(Stream stream, IDiagnosticLogger logger, ISystemClock clock, CancellationToken cancellationToken);
    public sealed virtual void Serialize(Stream stream, IDiagnosticLogger logger);
    internal void Serialize(Stream stream, IDiagnosticLogger logger, ISystemClock clock);
    public sealed virtual void Dispose();
    private static Dictionary`2<string, object> CreateHeader(SentryId eventId, int extraCapacity);
    [NullableContextAttribute("2")]
private static Dictionary`2<string, object> CreateHeader(SentryId eventId, DynamicSamplingContext dsc);
    public static Envelope FromEvent(SentryEvent event, IDiagnosticLogger logger, IReadOnlyCollection`1<SentryAttachment> attachments, SessionUpdate sessionUpdate);
    public static Envelope FromUserFeedback(UserFeedback sentryUserFeedback);
    public static Envelope FromTransaction(SentryTransaction transaction);
    internal static Envelope FromCodeLocations(CodeLocations codeLocations);
    internal static Envelope FromMetrics(IEnumerable`1<Metric> metrics);
    public static Envelope FromSession(SessionUpdate sessionUpdate);
    public static Envelope FromCheckIn(SentryCheckIn checkIn);
    internal static Envelope FromClientReport(ClientReport clientReport);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.Envelope/<DeserializeHeaderAsync>d__30")]
private static Task`1<IReadOnlyDictionary`2<string, object>> DeserializeHeaderAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.Envelope/<DeserializeAsync>d__31")]
public static Task`1<Envelope> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    internal Envelope WithItem(EnvelopeItem item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Protocol.Envelopes.EnvelopeItem : object {
    private static string TypeKey;
    internal static string TypeValueEvent;
    internal static string TypeValueUserReport;
    internal static string TypeValueTransaction;
    internal static string TypeValueSpan;
    internal static string TypeValueSession;
    internal static string TypeValueCheckIn;
    internal static string TypeValueAttachment;
    internal static string TypeValueClientReport;
    internal static string TypeValueProfile;
    internal static string TypeValueMetric;
    internal static string TypeValueCodeLocations;
    private static string LengthKey;
    private static string FileNameKey;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializable <Payload>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Header { get; }
    public ISerializable Payload { get; }
    internal DataCategory DataCategory { get; }
    public EnvelopeItem(IReadOnlyDictionary`2<string, object> header, ISerializable payload);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Header();
    [CompilerGeneratedAttribute]
public ISerializable get_Payload();
    internal DataCategory get_DataCategory();
    [NullableContextAttribute("2")]
public string TryGetType();
    public Nullable`1<long> TryGetLength();
    internal Nullable`1<long> TryGetOrRecalculateLength();
    [NullableContextAttribute("2")]
public string TryGetFileName();
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.EnvelopeItem/<BufferPayloadAsync>d__27")]
private Task`1<MemoryStream> BufferPayloadAsync(IDiagnosticLogger logger, CancellationToken cancellationToken);
    private MemoryStream BufferPayload(IDiagnosticLogger logger);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.EnvelopeItem/<SerializeHeaderAsync>d__29")]
private static Task SerializeHeaderAsync(Stream stream, IReadOnlyDictionary`2<string, object> header, IDiagnosticLogger logger, CancellationToken cancellationToken);
    private static void SerializeHeader(Stream stream, IReadOnlyDictionary`2<string, object> header, IDiagnosticLogger logger);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.EnvelopeItem/<SerializeAsync>d__31")]
public sealed virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    public sealed virtual void Serialize(Stream stream, IDiagnosticLogger logger);
    public sealed virtual void Dispose();
    public static EnvelopeItem FromEvent(SentryEvent event);
    public static EnvelopeItem FromUserFeedback(UserFeedback sentryUserFeedback);
    public static EnvelopeItem FromTransaction(SentryTransaction transaction);
    internal static EnvelopeItem FromCodeLocations(CodeLocations codeLocations);
    internal static EnvelopeItem FromMetric(Metric metric);
    internal static EnvelopeItem FromProfileInfo(ISerializable source);
    public static EnvelopeItem FromSession(SessionUpdate sessionUpdate);
    public static EnvelopeItem FromCheckIn(SentryCheckIn checkIn);
    public static EnvelopeItem FromAttachment(SentryAttachment attachment);
    internal static EnvelopeItem FromAttachment(SentryAttachment attachment, Stream stream);
    internal static EnvelopeItem FromClientReport(ClientReport report);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.EnvelopeItem/<DeserializeHeaderAsync>d__45")]
private static Task`1<Dictionary`2<string, object>> DeserializeHeaderAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.EnvelopeItem/<DeserializePayloadAsync>d__46")]
private static Task`1<ISerializable> DeserializePayloadAsync(Stream stream, IReadOnlyDictionary`2<string, object> header, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.EnvelopeItem/<DeserializeAsync>d__47")]
public static Task`1<EnvelopeItem> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Sentry.Protocol.Envelopes.ISerializable {
    public abstract virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    public abstract virtual void Serialize(Stream stream, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Envelopes.JsonSerializable : object {
    [CompilerGeneratedAttribute]
private ISentryJsonSerializable <Source>k__BackingField;
    public ISentryJsonSerializable Source { get; }
    public JsonSerializable(ISentryJsonSerializable source);
    [CompilerGeneratedAttribute]
public ISentryJsonSerializable get_Source();
    [AsyncStateMachineAttribute("Sentry.Protocol.Envelopes.JsonSerializable/<SerializeAsync>d__4")]
public sealed virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    public sealed virtual void Serialize(Stream stream, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Envelopes.StreamSerializable : object {
    [CompilerGeneratedAttribute]
private Stream <Source>k__BackingField;
    public Stream Source { get; }
    public StreamSerializable(Stream source);
    [CompilerGeneratedAttribute]
public Stream get_Source();
    public sealed virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    public sealed virtual void Serialize(Stream stream, IDiagnosticLogger logger);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.Protocol.Gpu : object {
    [NullableAttribute("1")]
public static string Type;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VendorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VendorName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MultiThreadedRendering>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NpotSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxTextureSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GraphicsShaderLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsDrawCallInstancing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsRayTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsComputeShaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportsGeometryShaders>k__BackingField;
    public string Name { get; public set; }
    public Nullable`1<int> Id { get; public set; }
    public string VendorId { get; public set; }
    public string VendorName { get; public set; }
    public Nullable`1<int> MemorySize { get; public set; }
    public string ApiType { get; public set; }
    public Nullable`1<bool> MultiThreadedRendering { get; public set; }
    public string Version { get; public set; }
    public string NpotSupport { get; public set; }
    public Nullable`1<int> MaxTextureSize { get; public set; }
    public string GraphicsShaderLevel { get; public set; }
    public Nullable`1<bool> SupportsDrawCallInstancing { get; public set; }
    public Nullable`1<bool> SupportsRayTracing { get; public set; }
    public Nullable`1<bool> SupportsComputeShaders { get; public set; }
    public Nullable`1<bool> SupportsGeometryShaders { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_VendorId();
    [CompilerGeneratedAttribute]
public void set_VendorId(string value);
    [CompilerGeneratedAttribute]
public string get_VendorName();
    [CompilerGeneratedAttribute]
public void set_VendorName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MemorySize();
    [CompilerGeneratedAttribute]
public void set_MemorySize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ApiType();
    [CompilerGeneratedAttribute]
public void set_ApiType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MultiThreadedRendering();
    [CompilerGeneratedAttribute]
public void set_MultiThreadedRendering(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_NpotSupport();
    [CompilerGeneratedAttribute]
public void set_NpotSupport(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxTextureSize();
    [CompilerGeneratedAttribute]
public void set_MaxTextureSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_GraphicsShaderLevel();
    [CompilerGeneratedAttribute]
public void set_GraphicsShaderLevel(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsDrawCallInstancing();
    [CompilerGeneratedAttribute]
public void set_SupportsDrawCallInstancing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsRayTracing();
    [CompilerGeneratedAttribute]
public void set_SupportsRayTracing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsComputeShaders();
    [CompilerGeneratedAttribute]
public void set_SupportsComputeShaders(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportsGeometryShaders();
    [CompilerGeneratedAttribute]
public void set_SupportsGeometryShaders(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
internal Gpu Clone();
    [NullableContextAttribute("1")]
private sealed virtual override Gpu Sentry.Internal.ICloneable<Sentry.Protocol.Gpu>.Clone();
    [NullableContextAttribute("1")]
internal void UpdateFrom(Gpu source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable.UpdateFrom(object source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable<Sentry.Protocol.Gpu>.UpdateFrom(Gpu source);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    [NullableContextAttribute("1")]
public static Gpu FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
public interface Sentry.Protocol.ITraceContext {
    public SpanId SpanId { get; }
    public Nullable`1<SpanId> ParentSpanId { get; }
    public SentryId TraceId { get; }
    public string Operation { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public Nullable`1<SpanStatus> Status { get; }
    public Nullable`1<bool> IsSampled { get; }
    public abstract virtual SpanId get_SpanId();
    public abstract virtual Nullable`1<SpanId> get_ParentSpanId();
    public abstract virtual SentryId get_TraceId();
    public abstract virtual string get_Operation();
    [NullableContextAttribute("2")]
public abstract virtual string get_Description();
    public abstract virtual Nullable`1<SpanStatus> get_Status();
    public abstract virtual Nullable`1<bool> get_IsSampled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Protocol.Measurement : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnit <Unit>k__BackingField;
    public object Value { get; }
    public MeasurementUnit Unit { get; }
    private Measurement(object value, MeasurementUnit unit);
    internal Measurement(int value, MeasurementUnit unit);
    internal Measurement(long value, MeasurementUnit unit);
    internal Measurement(ulong value, MeasurementUnit unit);
    internal Measurement(double value, MeasurementUnit unit);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public MeasurementUnit get_Unit();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static Measurement FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Protocol.Mechanism : object {
    public static string HandledKey;
    public static string MechanismKey;
    public static string DescriptionKey;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <InternalData>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <InternalMeta>k__BackingField;
    private static string DefaultType;
    private string _type;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <HelpLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Synthetic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExceptionGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExceptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ParentId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, object> InternalData { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, object> InternalMeta { get; private set; }
    public string Type { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    [NullableAttribute("2")]
public string Source { get; public set; }
    [NullableAttribute("2")]
public string HelpLink { get; public set; }
    public Nullable`1<bool> Handled { get; public set; }
    public bool Synthetic { get; public set; }
    public bool IsExceptionGroup { get; public set; }
    public Nullable`1<int> ExceptionId { get; public set; }
    public Nullable`1<int> ParentId { get; public set; }
    public IDictionary`2<string, object> Meta { get; }
    public IDictionary`2<string, object> Data { get; }
    private static Mechanism();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_InternalData();
    [CompilerGeneratedAttribute]
private void set_InternalData(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_InternalMeta();
    [CompilerGeneratedAttribute]
private void set_InternalMeta(Dictionary`2<string, object> value);
    public string get_Type();
    public void set_Type(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_HelpLink();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_HelpLink(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Synthetic();
    [CompilerGeneratedAttribute]
public void set_Synthetic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExceptionGroup();
    [CompilerGeneratedAttribute]
public void set_IsExceptionGroup(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExceptionId();
    [CompilerGeneratedAttribute]
public void set_ExceptionId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(Nullable`1<int> value);
    public IDictionary`2<string, object> get_Meta();
    public IDictionary`2<string, object> get_Data();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static Mechanism FromJson(JsonElement json);
    internal bool IsDefaultOrEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.CodeLocations : object {
    [CompilerGeneratedAttribute]
private long <timestamp>P;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<MetricResourceIdentifier, SentryStackFrame> <locations>P;
    public long Timestamp { get; }
    public CodeLocations(long timestamp, IReadOnlyDictionary`2<MetricResourceIdentifier, SentryStackFrame> locations);
    public long get_Timestamp();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.CounterMetric : Metric {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double Value { get; private set; }
    public CounterMetric(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
    public virtual void Add(double value);
    protected virtual void WriteValues(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [IteratorStateMachineAttribute("Sentry.Protocol.Metrics.CounterMetric/<SerializedStatsdValues>d__8")]
protected virtual IEnumerable`1<IConvertible> SerializedStatsdValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.DistributionMetric : Metric {
    private List`1<double> _value;
    public IReadOnlyList`1<double> Value { get; }
    public DistributionMetric(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp);
    public IReadOnlyList`1<double> get_Value();
    public virtual void Add(double value);
    protected virtual void WriteValues(Utf8JsonWriter writer, IDiagnosticLogger logger);
    protected virtual IEnumerable`1<IConvertible> SerializedStatsdValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.GaugeMetric : Metric {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <First>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Count>k__BackingField;
    public double Value { get; private set; }
    public double First { get; }
    public double Min { get; private set; }
    public double Max { get; private set; }
    public double Sum { get; private set; }
    public double Count { get; private set; }
    public GaugeMetric(string key, double value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
    [CompilerGeneratedAttribute]
public double get_First();
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
private void set_Sum(double value);
    [CompilerGeneratedAttribute]
public double get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(double value);
    public virtual void Add(double value);
    protected virtual void WriteValues(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [IteratorStateMachineAttribute("Sentry.Protocol.Metrics.GaugeMetric/<SerializedStatsdValues>d__27")]
protected virtual IEnumerable`1<IConvertible> SerializedStatsdValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Sentry.Protocol.Metrics.Metric : object {
    [CompilerGeneratedAttribute]
private SentryId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MeasurementUnit> <Unit>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _tags;
    public SentryId EventId { get; }
    public string Key { get; }
    public DateTimeOffset Timestamp { get; }
    public Nullable`1<MeasurementUnit> Unit { get; }
    public IDictionary`2<string, string> Tags { get; }
    private string StatsdType { get; }
    protected Metric(string key, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp);
    [CompilerGeneratedAttribute]
public SentryId get_EventId();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public Nullable`1<MeasurementUnit> get_Unit();
    public IDictionary`2<string, string> get_Tags();
    public abstract virtual void Add(double value);
    protected abstract virtual void WriteValues(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    protected abstract virtual IEnumerable`1<IConvertible> SerializedStatsdValues();
    [AsyncStateMachineAttribute("Sentry.Protocol.Metrics.Metric/<SerializeAsync>d__21")]
public sealed virtual Task SerializeAsync(Stream stream, IDiagnosticLogger logger, CancellationToken cancellationToken);
    public sealed virtual void Serialize(Stream stream, IDiagnosticLogger logger);
    private string get_StatsdType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.MetricResourceIdentifier : ValueType {
    [CompilerGeneratedAttribute]
private MetricType <MetricType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnit <Unit>k__BackingField;
    public MetricType MetricType { get; public set; }
    public string Key { get; public set; }
    public MeasurementUnit Unit { get; public set; }
    public MetricResourceIdentifier(MetricType MetricType, string Key, MeasurementUnit Unit);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MetricType get_MetricType();
    [CompilerGeneratedAttribute]
public void set_MetricType(MetricType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MeasurementUnit get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(MeasurementUnit value);
    public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MetricResourceIdentifier left, MetricResourceIdentifier right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MetricResourceIdentifier left, MetricResourceIdentifier right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MetricResourceIdentifier other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(MetricType& MetricType, String& Key, MeasurementUnit& Unit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.MetricsSummary : object {
    private IDictionary`2<string, List`1<SpanMetric>> _measurements;
    public MetricsSummary(MetricsSummaryAggregator aggregator);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
internal enum Sentry.Protocol.Metrics.MetricType : Enum {
    public byte value__;
    public static MetricType Counter;
    public static MetricType Gauge;
    public static MetricType Distribution;
    public static MetricType Set;
}
[ExtensionAttribute]
internal static class Sentry.Protocol.Metrics.MetricTypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string ToStatsdType(MetricType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.SetMetric : Metric {
    private HashSet`1<int> _value;
    public IReadOnlyCollection`1<int> Value { get; }
    public SetMetric(string key, int value, Nullable`1<MeasurementUnit> unit, IDictionary`2<string, string> tags, Nullable`1<DateTimeOffset> timestamp);
    public IReadOnlyCollection`1<int> get_Value();
    public virtual void Add(double value);
    protected virtual void WriteValues(Utf8JsonWriter writer, IDiagnosticLogger logger);
    protected virtual IEnumerable`1<IConvertible> SerializedStatsdValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Protocol.Metrics.SpanMetric : object {
    [CompilerGeneratedAttribute]
private MetricType <MetricType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnit <Unit>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Count>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MetricType MetricType { get; public set; }
    public string Key { get; public set; }
    public MeasurementUnit Unit { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Tags { get; public set; }
    public double Min { get; private set; }
    public double Max { get; private set; }
    public double Sum { get; private set; }
    public double Count { get; private set; }
    public string ExportKey { get; }
    public SpanMetric(MetricType MetricType, string key, double value, MeasurementUnit unit, IDictionary`2<string, string> tags);
    [CompilerGeneratedAttribute]
protected SpanMetric(SpanMetric original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public MetricType get_MetricType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MetricType(MetricType value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(string value);
    [CompilerGeneratedAttribute]
public MeasurementUnit get_Unit();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Unit(MeasurementUnit value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tags(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
private void set_Sum(double value);
    [CompilerGeneratedAttribute]
public double get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(double value);
    public string get_ExportKey();
    public void Add(double value);
    public void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SpanMetric left, SpanMetric right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SpanMetric left, SpanMetric right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SpanMetric other);
    [CompilerGeneratedAttribute]
public virtual SpanMetric <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.Protocol.OperatingSystem : object {
    [NullableAttribute("1")]
public static string Type;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KernelVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rooted>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string RawDescription { get; public set; }
    public string Build { get; public set; }
    public string KernelVersion { get; public set; }
    public Nullable`1<bool> Rooted { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_RawDescription();
    [CompilerGeneratedAttribute]
public void set_RawDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(string value);
    [CompilerGeneratedAttribute]
public string get_KernelVersion();
    [CompilerGeneratedAttribute]
public void set_KernelVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rooted();
    [CompilerGeneratedAttribute]
public void set_Rooted(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
internal OperatingSystem Clone();
    [NullableContextAttribute("1")]
private sealed virtual override OperatingSystem Sentry.Internal.ICloneable<Sentry.Protocol.OperatingSystem>.Clone();
    [NullableContextAttribute("1")]
internal void UpdateFrom(OperatingSystem source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable.UpdateFrom(object source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable<Sentry.Protocol.OperatingSystem>.UpdateFrom(OperatingSystem source);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    [NullableContextAttribute("1")]
public static OperatingSystem FromJson(JsonElement json);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.Protocol.ProfileInfo : object {
    [CompilerGeneratedAttribute]
private SentryId <EventId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DebugMeta <DebugMeta>k__BackingField;
    [NullableAttribute("1")]
private SentryContexts _contexts;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SampleProfile <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryTransaction <Transaction>k__BackingField;
    public SentryId EventId { get; private set; }
    [NullableAttribute("1")]
public DebugMeta DebugMeta { get; public set; }
    [NullableAttribute("1")]
public SentryContexts Contexts { get; public set; }
    [NullableAttribute("1")]
public SampleProfile Profile { get; public set; }
    public DateTimeOffset StartTimestamp { get; public set; }
    public string Environment { get; public set; }
    public string Platform { get; public set; }
    public string Release { get; public set; }
    public SentryTransaction Transaction { get; public set; }
    [CompilerGeneratedAttribute]
public SentryId get_EventId();
    [CompilerGeneratedAttribute]
private void set_EventId(SentryId value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DebugMeta get_DebugMeta();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_DebugMeta(DebugMeta value);
    [NullableContextAttribute("1")]
public SentryContexts get_Contexts();
    [NullableContextAttribute("1")]
public void set_Contexts(SentryContexts value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public SampleProfile get_Profile();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Profile(SampleProfile value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTimestamp();
    [CompilerGeneratedAttribute]
public void set_StartTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_Release();
    [CompilerGeneratedAttribute]
public void set_Release(string value);
    [CompilerGeneratedAttribute]
public SentryTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(SentryTransaction value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Protocol.Response : object {
    public static string Type;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <InternalHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BodySize>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Cookies>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <StatusCode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, string> InternalHeaders { get; private set; }
    public Nullable`1<long> BodySize { get; public set; }
    [NullableAttribute("2")]
public string Cookies { get; public set; }
    [NullableAttribute("2")]
public object Data { get; public set; }
    public IDictionary`2<string, string> Headers { get; }
    public Nullable`1<short> StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_InternalHeaders();
    [CompilerGeneratedAttribute]
private void set_InternalHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BodySize();
    [CompilerGeneratedAttribute]
public void set_BodySize(Nullable`1<long> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Cookies();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Cookies(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Data(object value);
    public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<short> value);
    internal void AddHeaders(IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> headers);
    public sealed virtual Response Clone();
    public sealed virtual void UpdateFrom(Response source);
    public sealed virtual void UpdateFrom(object source);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static Response FromJson(JsonElement json);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.Protocol.Runtime : object {
    [NullableAttribute("1")]
public static string Type;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Build>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string RawDescription { get; public set; }
    public string Identifier { get; public set; }
    public string Build { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_RawDescription();
    [CompilerGeneratedAttribute]
public void set_RawDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public string get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(string value);
    [NullableContextAttribute("1")]
internal Runtime Clone();
    [NullableContextAttribute("1")]
private sealed virtual override Runtime Sentry.Internal.ICloneable<Sentry.Protocol.Runtime>.Clone();
    [NullableContextAttribute("1")]
internal void UpdateFrom(Runtime source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable.UpdateFrom(object source);
    [NullableContextAttribute("1")]
private sealed virtual override void Sentry.Internal.IUpdatable<Sentry.Protocol.Runtime>.UpdateFrom(Runtime source);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    [NullableContextAttribute("1")]
public static Runtime FromJson(JsonElement json);
}
internal class Sentry.Protocol.SampleProfile : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal GrowableArray`1<Sample> Samples;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal GrowableArray`1<SentryStackFrame> Frames;
    internal GrowableArray`1<GrowableArray`1<int>> Stacks;
    [NullableAttribute("1")]
internal List`1<SentryThread> Threads;
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.Protocol.SentryException : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryStackTrace <Stacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Mechanism <Mechanism>k__BackingField;
    public string Type { get; public set; }
    public string Value { get; public set; }
    public string Module { get; public set; }
    public int ThreadId { get; public set; }
    public SentryStackTrace Stacktrace { get; public set; }
    public Mechanism Mechanism { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(string value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public SentryStackTrace get_Stacktrace();
    [CompilerGeneratedAttribute]
public void set_Stacktrace(SentryStackTrace value);
    [CompilerGeneratedAttribute]
public Mechanism get_Mechanism();
    [CompilerGeneratedAttribute]
public void set_Mechanism(Mechanism value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static SentryException FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Protocol.Trace : object {
    public static string Type;
    [CompilerGeneratedAttribute]
private SpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanId> <ParentSpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryId <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [NullableAttribute("2")]
private string _origin;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSampled>k__BackingField;
    public SpanId SpanId { get; public set; }
    public Nullable`1<SpanId> ParentSpanId { get; public set; }
    public SentryId TraceId { get; public set; }
    public string Operation { get; public set; }
    [NullableAttribute("2")]
public string Origin { get; internal set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Nullable`1<SpanStatus> Status { get; public set; }
    public Nullable`1<bool> IsSampled { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual SpanId get_SpanId();
    [CompilerGeneratedAttribute]
public void set_SpanId(SpanId value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    [CompilerGeneratedAttribute]
public void set_ParentSpanId(Nullable`1<SpanId> value);
    [CompilerGeneratedAttribute]
public sealed virtual SentryId get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(SentryId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
internal void set_Origin(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanStatus> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<SpanStatus> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsSampled();
    [CompilerGeneratedAttribute]
internal void set_IsSampled(Nullable`1<bool> value);
    internal Trace Clone();
    private sealed virtual override Trace Sentry.Internal.ICloneable<Sentry.Protocol.Trace>.Clone();
    internal void UpdateFrom(Trace source);
    private sealed virtual override void Sentry.Internal.IUpdatable.UpdateFrom(object source);
    private sealed virtual override void Sentry.Internal.IUpdatable<Sentry.Protocol.Trace>.UpdateFrom(Trace source);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static Trace FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.Reflection.AssemblyExtensions : object {
    [ExtensionAttribute]
public static SdkVersion GetNameAndVersion(Assembly asm);
    [ExtensionAttribute]
internal static string GetVersion(Assembly assembly);
}
public enum Sentry.ReportAssembliesMode : Enum {
    public int value__;
    public static ReportAssembliesMode None;
    public static ReportAssembliesMode Version;
    public static ReportAssembliesMode InformationalVersion;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.Scope : object {
    [CompilerGeneratedAttribute]
private SentryOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    private object _lastEventIdSync;
    private SentryId _lastEventId;
    private object _evaluationSync;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _hasEvaluated;
    private Lazy`1<ConcurrentBag`1<ISentryEventExceptionProcessor>> _lazyExceptionProcessors;
    private Lazy`1<ConcurrentBag`1<ISentryEventProcessor>> _lazyEventProcessors;
    private Lazy`1<ConcurrentBag`1<ISentryTransactionProcessor>> _lazyTransactionProcessors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<Scope> OnEvaluating;
    [CompilerGeneratedAttribute]
private Nullable`1<SentryLevel> <Level>k__BackingField;
    [NullableAttribute("2")]
private SentryRequest _request;
    private SentryContexts _contexts;
    [NullableAttribute("2")]
private SentryUser _user;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Distribution>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [NullableAttribute("2")]
private string _fallbackTransactionName;
    [NullableAttribute("2")]
private ITransactionTracer _transaction;
    [CompilerGeneratedAttribute]
private SentryPropagationContext <PropagationContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SessionUpdate <SessionUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkVersion <Sdk>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Fingerprint>k__BackingField;
    private ConcurrentQueue`1<Breadcrumb> _breadcrumbs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, object> _extra;
    private ConcurrentDictionary`2<string, string> _tags;
    private ConcurrentBag`1<SentryAttachment> _attachments;
    [NullableAttribute("2")]
private ISpan _span;
    internal SentryOptions Options { get; }
    internal bool Locked { get; internal set; }
    internal SentryId LastEventId { get; internal set; }
    internal bool HasEvaluated { get; }
    internal ConcurrentBag`1<ISentryEventExceptionProcessor> ExceptionProcessors { get; }
    internal ConcurrentBag`1<ISentryEventProcessor> EventProcessors { get; }
    internal ConcurrentBag`1<ISentryTransactionProcessor> TransactionProcessors { get; }
    public Nullable`1<SentryLevel> Level { get; public set; }
    public SentryRequest Request { get; public set; }
    public SentryContexts Contexts { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<SentryUser> UserChanged { get; }
    public SentryUser User { get; public set; }
    [NullableAttribute("2")]
public string Release { get; public set; }
    [NullableAttribute("2")]
public string Distribution { get; public set; }
    [NullableAttribute("2")]
public string Environment { get; public set; }
    [NullableAttribute("2")]
public string TransactionName { get; public set; }
    [NullableAttribute("2")]
public ITransactionTracer Transaction { get; public set; }
    internal SentryPropagationContext PropagationContext { get; internal set; }
    [NullableAttribute("2")]
internal SessionUpdate SessionUpdate { get; internal set; }
    public SdkVersion Sdk { get; }
    public IReadOnlyList`1<string> Fingerprint { get; public set; }
    public IReadOnlyCollection`1<Breadcrumb> Breadcrumbs { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    public IReadOnlyDictionary`2<string, string> Tags { get; }
    public IReadOnlyCollection`1<SentryAttachment> Attachments { get; }
    [NullableAttribute("2")]
public ISpan Span { get; public set; }
    [NullableContextAttribute("2")]
public Scope(SentryOptions options);
    [NullableContextAttribute("2")]
internal Scope(SentryOptions options, SentryPropagationContext propagationContext);
    [CompilerGeneratedAttribute]
internal SentryOptions get_Options();
    [CompilerGeneratedAttribute]
internal bool get_Locked();
    [CompilerGeneratedAttribute]
internal void set_Locked(bool value);
    internal SentryId get_LastEventId();
    internal void set_LastEventId(SentryId value);
    internal bool get_HasEvaluated();
    internal ConcurrentBag`1<ISentryEventExceptionProcessor> get_ExceptionProcessors();
    internal ConcurrentBag`1<ISentryEventProcessor> get_EventProcessors();
    internal ConcurrentBag`1<ISentryTransactionProcessor> get_TransactionProcessors();
    [CompilerGeneratedAttribute]
internal void add_OnEvaluating(EventHandler`1<Scope> value);
    [CompilerGeneratedAttribute]
internal void remove_OnEvaluating(EventHandler`1<Scope> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SentryLevel> get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(Nullable`1<SentryLevel> value);
    public sealed virtual SentryRequest get_Request();
    public sealed virtual void set_Request(SentryRequest value);
    public sealed virtual SentryContexts get_Contexts();
    public sealed virtual void set_Contexts(SentryContexts value);
    internal Action`1<SentryUser> get_UserChanged();
    public sealed virtual SentryUser get_User();
    public sealed virtual void set_User(SentryUser value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Release();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Release(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Distribution();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Distribution(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Environment(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_TransactionName();
    [NullableContextAttribute("2")]
public sealed virtual void set_TransactionName(string value);
    [NullableContextAttribute("2")]
public ITransactionTracer get_Transaction();
    [NullableContextAttribute("2")]
public void set_Transaction(ITransactionTracer value);
    [CompilerGeneratedAttribute]
internal SentryPropagationContext get_PropagationContext();
    [CompilerGeneratedAttribute]
internal void set_PropagationContext(SentryPropagationContext value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal SessionUpdate get_SessionUpdate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_SessionUpdate(SessionUpdate value);
    [CompilerGeneratedAttribute]
public sealed virtual SdkVersion get_Sdk();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_Fingerprint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Fingerprint(IReadOnlyList`1<string> value);
    public sealed virtual IReadOnlyCollection`1<Breadcrumb> get_Breadcrumbs();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Extra();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Tags();
    public IReadOnlyCollection`1<SentryAttachment> get_Attachments();
    public sealed virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    public void AddBreadcrumb(Breadcrumb breadcrumb, SentryHint hint);
    public sealed virtual void SetExtra(string key, object value);
    public sealed virtual void SetTag(string key, string value);
    public sealed virtual void UnsetTag(string key);
    public void AddAttachment(SentryAttachment attachment);
    public void Clear();
    public void ClearAttachments();
    public void ClearBreadcrumbs();
    public void Apply(IEventLike other);
    public void Apply(Scope other);
    public void Apply(object state);
    public Scope Clone();
    internal void Evaluate();
    [NullableContextAttribute("2")]
public ISpan get_Span();
    [NullableContextAttribute("2")]
public void set_Span(ISpan value);
    [IteratorStateMachineAttribute("Sentry.Scope/<GetAllEventProcessors>d__114")]
public IEnumerable`1<ISentryEventProcessor> GetAllEventProcessors();
    [IteratorStateMachineAttribute("Sentry.Scope/<GetAllTransactionProcessors>d__115")]
public IEnumerable`1<ISentryTransactionProcessor> GetAllTransactionProcessors();
    [IteratorStateMachineAttribute("Sentry.Scope/<GetAllExceptionProcessors>d__116")]
public IEnumerable`1<ISentryEventExceptionProcessor> GetAllExceptionProcessors();
    public void AddExceptionProcessor(ISentryEventExceptionProcessor processor);
    public void AddExceptionProcessors(IEnumerable`1<ISentryEventExceptionProcessor> processors);
    public void AddEventProcessor(ISentryEventProcessor processor);
    public void AddEventProcessor(Func`2<SentryEvent, SentryEvent> processor);
    public void AddEventProcessors(IEnumerable`1<ISentryEventProcessor> processors);
    public void AddTransactionProcessor(ISentryTransactionProcessor processor);
    public void AddTransactionProcessor(Func`2<SentryTransaction, SentryTransaction> processor);
    public void AddTransactionProcessors(IEnumerable`1<ISentryTransactionProcessor> processors);
    public void AddAttachment(Stream stream, string fileName, AttachmentType type, string contentType);
    public void AddAttachment(Byte[] data, string fileName, AttachmentType type, string contentType);
    public void AddAttachment(string filePath, AttachmentType type, string contentType);
    [NullableContextAttribute("2")]
internal void ResetTransaction(ITransactionTracer expectedCurrentTransaction);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_UserChanged>b__41_0(SentryUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SdkVersion : object {
    private static Lazy`1<SdkVersion> InstanceLazy;
    [CompilerGeneratedAttribute]
private ConcurrentBag`1<SentryPackage> <InternalPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentBag`1<string> <Integrations>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    internal static SdkVersion Instance { get; }
    internal ConcurrentBag`1<SentryPackage> InternalPackages { get; internal set; }
    internal ConcurrentBag`1<string> Integrations { get; internal set; }
    public IEnumerable`1<SentryPackage> Packages { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public string Version { get; public set; }
    private static SdkVersion();
    internal static SdkVersion get_Instance();
    [CompilerGeneratedAttribute]
internal ConcurrentBag`1<SentryPackage> get_InternalPackages();
    [CompilerGeneratedAttribute]
internal void set_InternalPackages(ConcurrentBag`1<SentryPackage> value);
    [CompilerGeneratedAttribute]
internal ConcurrentBag`1<string> get_Integrations();
    [CompilerGeneratedAttribute]
internal void set_Integrations(ConcurrentBag`1<string> value);
    public IEnumerable`1<SentryPackage> get_Packages();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
public void set_Version(string value);
    public void AddPackage(string name, string version);
    internal void AddPackage(SentryPackage package);
    public void AddIntegration(string integration);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static SdkVersion FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{FileName}")]
public class Sentry.SentryAttachment : object {
    [CompilerGeneratedAttribute]
private AttachmentType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttachmentContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public AttachmentType Type { get; }
    public IAttachmentContent Content { get; }
    public string FileName { get; }
    [NullableAttribute("2")]
public string ContentType { get; }
    public SentryAttachment(AttachmentType type, IAttachmentContent content, string fileName, string contentType);
    [CompilerGeneratedAttribute]
public AttachmentType get_Type();
    [CompilerGeneratedAttribute]
public IAttachmentContent get_Content();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ContentType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SentryCheckIn : object {
    [CompilerGeneratedAttribute]
private SentryId <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MonitorSlug>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckInStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SentryId> <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryMonitorOptions <MonitorOptions>k__BackingField;
    public SentryId Id { get; }
    [NullableAttribute("1")]
public string MonitorSlug { get; }
    public CheckInStatus Status { get; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public string Release { get; public set; }
    public string Environment { get; public set; }
    internal Nullable`1<SentryId> TraceId { get; internal set; }
    internal SentryMonitorOptions MonitorOptions { get; internal set; }
    [NullableContextAttribute("1")]
public SentryCheckIn(string monitorSlug, CheckInStatus status, Nullable`1<SentryId> sentryId);
    [CompilerGeneratedAttribute]
public SentryId get_Id();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MonitorSlug();
    [CompilerGeneratedAttribute]
public CheckInStatus get_Status();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_Release();
    [CompilerGeneratedAttribute]
public void set_Release(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<SentryId> get_TraceId();
    [CompilerGeneratedAttribute]
internal void set_TraceId(Nullable`1<SentryId> value);
    [CompilerGeneratedAttribute]
internal SentryMonitorOptions get_MonitorOptions();
    [CompilerGeneratedAttribute]
internal void set_MonitorOptions(SentryMonitorOptions value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
private static string ToSnakeCase(CheckInStatus status);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryClient : object {
    private SentryOptions _options;
    private ISessionManager _sessionManager;
    private RandomValuesFactory _randomValuesFactory;
    private Enricher _enricher;
    [CompilerGeneratedAttribute]
private IBackgroundWorker <Worker>k__BackingField;
    internal IBackgroundWorker Worker { get; }
    internal SentryOptions Options { get; }
    public bool IsEnabled { get; }
    public SentryClient(SentryOptions options);
    [NullableContextAttribute("2")]
internal SentryClient(SentryOptions options, IBackgroundWorker worker, RandomValuesFactory randomValuesFactory, ISessionManager sessionManager);
    [CompilerGeneratedAttribute]
internal IBackgroundWorker get_Worker();
    internal SentryOptions get_Options();
    public sealed virtual bool get_IsEnabled();
    [NullableContextAttribute("2")]
public sealed virtual SentryId CaptureEvent(SentryEvent event, Scope scope, SentryHint hint);
    public sealed virtual void CaptureUserFeedback(UserFeedback userFeedback);
    public sealed virtual void CaptureTransaction(SentryTransaction transaction);
    [NullableContextAttribute("2")]
public sealed virtual void CaptureTransaction(SentryTransaction transaction, Scope scope, SentryHint hint);
    private SentryTransaction BeforeSendTransaction(SentryTransaction transaction, SentryHint hint);
    public sealed virtual void CaptureSession(SessionUpdate sessionUpdate);
    public sealed virtual SentryId CaptureCheckIn(string monitorSlug, CheckInStatus status, Nullable`1<SentryId> sentryId, Nullable`1<TimeSpan> duration, Scope scope, Action`1<SentryMonitorOptions> configureMonitorOptions);
    public sealed virtual Task FlushAsync(TimeSpan timeout);
    [NullableContextAttribute("2")]
private SentryId DoSendEvent(SentryEvent event, SentryHint hint, Scope scope);
    [NullableContextAttribute("2")]
private IReadOnlyCollection`1<Exception> ApplyExceptionFilters(Exception exception);
    public sealed virtual bool CaptureEnvelope(Envelope envelope);
    [NullableContextAttribute("2")]
private SentryEvent BeforeSend(SentryEvent event, SentryHint hint);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.SentryClientExtensions : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static SentryOptions <SentryOptionsForTestingOnly>k__BackingField;
    [NullableAttribute("2")]
internal static SentryOptions SentryOptionsForTestingOnly { get; internal set; }
    [ExtensionAttribute]
public static SentryId CaptureException(ISentryClient client, Exception ex);
    [ExtensionAttribute]
public static SentryId CaptureMessage(ISentryClient client, string message, SentryLevel level);
    [ExtensionAttribute]
public static void CaptureUserFeedback(ISentryClient client, SentryId eventId, string email, string comments, string name);
    [ExtensionAttribute]
public static void Flush(ISentryClient client);
    [ExtensionAttribute]
public static void Flush(ISentryClient client, TimeSpan timeout);
    [ExtensionAttribute]
public static Task FlushAsync(ISentryClient client);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static SentryOptions get_SentryOptionsForTestingOnly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void set_SentryOptionsForTestingOnly(SentryOptions value);
    [ExtensionAttribute]
internal static SentryOptions GetSentryOptions(ISentryClient clientOrHub);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Sentry.SentryConstants : object {
    public static string DisableSdkDsnValue;
    public static int DefaultMaxBreadcrumbs;
    public static int ProtocolVersion;
    public static string Platform;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Sentry.SentryContexts : object {
    private ConcurrentDictionary`2<string, object> _innerDictionary;
    public App App { get; }
    public Browser Browser { get; }
    public Device Device { get; }
    public OperatingSystem OperatingSystem { get; }
    public Response Response { get; }
    public Runtime Runtime { get; }
    public Gpu Gpu { get; }
    public Trace Trace { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public App get_App();
    public Browser get_Browser();
    public Device get_Device();
    public OperatingSystem get_OperatingSystem();
    public Response get_Response();
    public Runtime get_Runtime();
    public Gpu get_Gpu();
    public Trace get_Trace();
    internal SentryContexts Clone();
    internal void CopyTo(SentryContexts to);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static SentryContexts FromJson(JsonElement json);
    [NullableContextAttribute("2")]
internal void ReplaceWith(SentryContexts contexts);
    [NullableContextAttribute("2")]
internal SentryContexts NullIfEmpty();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{GetType().Name,nq}: {EventId,nq}")]
public class Sentry.SentryEvent : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _modules;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Distribution>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private SentryValues`1<SentryException> <SentryExceptionValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private SentryValues`1<SentryThread> <SentryThreadValues>k__BackingField;
    private DebugMeta _debugMeta;
    [CompilerGeneratedAttribute]
private Nullable`1<SentryLevel> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransactionName>k__BackingField;
    private SentryRequest _request;
    [NullableAttribute("1")]
private SentryContexts _contexts;
    private SentryUser _user;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SdkVersion <Sdk>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<string> _fingerprint;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Breadcrumb> _breadcrumbs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _extra;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _tags;
    [CompilerGeneratedAttribute]
private DynamicSamplingContext <DynamicSamplingContext>k__BackingField;
    public Exception Exception { get; }
    public SentryId EventId { get; }
    public DateTimeOffset Timestamp { get; }
    public SentryMessage Message { get; public set; }
    public string Logger { get; public set; }
    public string Platform { get; public set; }
    public string ServerName { get; public set; }
    public string Release { get; public set; }
    public string Distribution { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal SentryValues`1<SentryException> SentryExceptionValues { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<SentryException> SentryExceptions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SentryValues`1<SentryThread> SentryThreadValues { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<SentryThread> SentryThreads { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<DebugImage> DebugImages { get; public set; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> Modules { get; }
    public Nullable`1<SentryLevel> Level { get; public set; }
    public string TransactionName { get; public set; }
    [NullableAttribute("1")]
public SentryRequest Request { get; public set; }
    [NullableAttribute("1")]
public SentryContexts Contexts { get; public set; }
    [NullableAttribute("1")]
public SentryUser User { get; public set; }
    public string Environment { get; public set; }
    [NullableAttribute("1")]
public SdkVersion Sdk { get; internal set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<string> Fingerprint { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<Breadcrumb> Breadcrumbs { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    [NullableAttribute("1")]
public IReadOnlyDictionary`2<string, string> Tags { get; }
    internal DynamicSamplingContext DynamicSamplingContext { get; internal set; }
    public SentryEvent(Exception exception);
    internal SentryEvent(Exception exception, Nullable`1<DateTimeOffset> timestamp, SentryId eventId);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public SentryId get_EventId();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public SentryMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(SentryMessage value);
    [CompilerGeneratedAttribute]
public string get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Release();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Release(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Distribution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Distribution(string value);
    [CompilerGeneratedAttribute]
internal SentryValues`1<SentryException> get_SentryExceptionValues();
    [CompilerGeneratedAttribute]
internal void set_SentryExceptionValues(SentryValues`1<SentryException> value);
    public IEnumerable`1<SentryException> get_SentryExceptions();
    public void set_SentryExceptions(IEnumerable`1<SentryException> value);
    [CompilerGeneratedAttribute]
private SentryValues`1<SentryThread> get_SentryThreadValues();
    [CompilerGeneratedAttribute]
private void set_SentryThreadValues(SentryValues`1<SentryThread> value);
    public IEnumerable`1<SentryThread> get_SentryThreads();
    public void set_SentryThreads(IEnumerable`1<SentryThread> value);
    public List`1<DebugImage> get_DebugImages();
    public void set_DebugImages(List`1<DebugImage> value);
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_Modules();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SentryLevel> get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(Nullable`1<SentryLevel> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TransactionName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionName(string value);
    [NullableContextAttribute("1")]
public sealed virtual SentryRequest get_Request();
    [NullableContextAttribute("1")]
public sealed virtual void set_Request(SentryRequest value);
    [NullableContextAttribute("1")]
public sealed virtual SentryContexts get_Contexts();
    [NullableContextAttribute("1")]
public sealed virtual void set_Contexts(SentryContexts value);
    [NullableContextAttribute("1")]
public sealed virtual SentryUser get_User();
    [NullableContextAttribute("1")]
public sealed virtual void set_User(SentryUser value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Environment(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual SdkVersion get_Sdk();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_Sdk(SdkVersion value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<string> get_Fingerprint();
    [NullableContextAttribute("1")]
public sealed virtual void set_Fingerprint(IReadOnlyList`1<string> value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyCollection`1<Breadcrumb> get_Breadcrumbs();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Extra();
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyDictionary`2<string, string> get_Tags();
    internal bool HasException();
    internal bool HasTerminalException();
    [CompilerGeneratedAttribute]
internal DynamicSamplingContext get_DynamicSamplingContext();
    [CompilerGeneratedAttribute]
internal void set_DynamicSamplingContext(DynamicSamplingContext value);
    [NullableContextAttribute("1")]
public sealed virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    [NullableContextAttribute("1")]
public sealed virtual void SetExtra(string key, object value);
    [NullableContextAttribute("1")]
public sealed virtual void SetTag(string key, string value);
    [NullableContextAttribute("1")]
public sealed virtual void UnsetTag(string key);
    internal void Redact();
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static SentryEvent FromJson(JsonElement json);
    [NullableContextAttribute("1")]
internal static SentryEvent FromJson(JsonElement json, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Sentry.SentryFailedRequestHandler : object {
    [CompilerGeneratedAttribute]
private IHub <Hub>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryOptions <Options>k__BackingField;
    protected IHub Hub { get; }
    protected SentryOptions Options { get; }
    internal SentryFailedRequestHandler(IHub hub, SentryOptions options);
    [CompilerGeneratedAttribute]
protected IHub get_Hub();
    [CompilerGeneratedAttribute]
protected SentryOptions get_Options();
    protected internal abstract virtual void DoEnsureSuccessfulResponse(HttpRequestMessage request, HttpResponseMessage response);
    public sealed virtual void HandleResponse(HttpResponseMessage response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.SentryGraphQLHttpFailedRequestHandler : SentryFailedRequestHandler {
    private IHub _hub;
    private SentryOptions _options;
    internal static string MechanismType;
    private SentryHttpFailedRequestHandler _httpFailedRequestHandler;
    internal SentryGraphQLHttpFailedRequestHandler(IHub hub, SentryOptions options);
    protected internal virtual void DoEnsureSuccessfulResponse(HttpRequestMessage request, HttpResponseMessage response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryGraphQLHttpMessageHandler : SentryMessageHandler {
    private IHub _hub;
    [NullableAttribute("2")]
private SentryOptions _options;
    [NullableAttribute("2")]
private ISentryFailedRequestHandler _failedRequestHandler;
    internal static string GraphQlOrigin;
    [NullableContextAttribute("2")]
public SentryGraphQLHttpMessageHandler(HttpMessageHandler innerHandler, IHub hub);
    [NullableContextAttribute("2")]
internal SentryGraphQLHttpMessageHandler(IHub hub, SentryOptions options, HttpMessageHandler innerHandler, ISentryFailedRequestHandler failedRequestHandler);
    protected internal virtual ISpan ProcessRequest(HttpRequestMessage request, string method, string url);
    protected internal virtual void HandleResponse(HttpResponseMessage response, ISpan span, string method, string url);
    [NullableContextAttribute("2")]
private string GetSpanDescriptionOrDefault(GraphQLRequestContent graphqlInfo, HttpStatusCode statusCode);
    private void AddIfExists(Dictionary`2<string, string> breadcrumbData, string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryHint : object {
    [NullableAttribute("2")]
private SentryOptions _options;
    private List`1<SentryAttachment> _attachments;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _items;
    public ICollection`1<SentryAttachment> Attachments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Items { get; }
    [NullableContextAttribute("2")]
internal SentryHint(SentryOptions options);
    public SentryHint(string key, object value);
    public ICollection`1<SentryAttachment> get_Attachments();
    public IDictionary`2<string, object> get_Items();
    internal void AddAttachmentsFromScope(Scope scope);
    public void AddAttachment(string filePath, AttachmentType type, string contentType);
    public void AddAttachment(Byte[] data, string fileName, AttachmentType type, string contentType);
    public static SentryHint WithAttachments(SentryAttachment[] attachments);
    public static SentryHint WithAttachments(IEnumerable`1<SentryAttachment> attachments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.SentryHttpFailedRequestHandler : SentryFailedRequestHandler {
    public static string MechanismType;
    internal SentryHttpFailedRequestHandler(IHub hub, SentryOptions options);
    protected internal virtual void DoEnsureSuccessfulResponse(HttpRequestMessage request, HttpResponseMessage response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryHttpMessageHandler : SentryMessageHandler {
    private IHub _hub;
    [NullableAttribute("2")]
private SentryOptions _options;
    [NullableAttribute("2")]
private ISentryFailedRequestHandler _failedRequestHandler;
    internal static string HttpClientOrigin;
    public SentryHttpMessageHandler(HttpMessageHandler innerHandler);
    public SentryHttpMessageHandler(IHub hub);
    public SentryHttpMessageHandler(HttpMessageHandler innerHandler, IHub hub);
    [NullableContextAttribute("2")]
internal SentryHttpMessageHandler(IHub hub, SentryOptions options, HttpMessageHandler innerHandler, ISentryFailedRequestHandler failedRequestHandler);
    protected internal virtual ISpan ProcessRequest(HttpRequestMessage request, string method, string url);
    protected internal virtual void HandleResponse(HttpResponseMessage response, ISpan span, string method, string url);
}
[IsReadOnlyAttribute]
public class Sentry.SentryId : ValueType {
    private Guid _guid;
    public static SentryId Empty;
    public SentryId(Guid guid);
    private static SentryId();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(SentryId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SentryId Create();
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static SentryId Parse(string value);
    public static SentryId FromJson(JsonElement json);
    public static bool op_Equality(SentryId left, SentryId right);
    public static bool op_Inequality(SentryId left, SentryId right);
    public static Guid op_Implicit(SentryId sentryId);
    public static SentryId op_Implicit(Guid guid);
}
public enum Sentry.SentryLevel : Enum {
    public short value__;
    [EnumMemberAttribute]
public static SentryLevel Debug;
    [EnumMemberAttribute]
public static SentryLevel Info;
    [EnumMemberAttribute]
public static SentryLevel Warning;
    [EnumMemberAttribute]
public static SentryLevel Error;
    [EnumMemberAttribute]
public static SentryLevel Fatal;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SentryMessage : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<object> <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Formatted>k__BackingField;
    public string Message { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<object> Params { get; public set; }
    public string Formatted { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public string get_Formatted();
    [CompilerGeneratedAttribute]
public void set_Formatted(string value);
    [NullableContextAttribute("1")]
public static SentryMessage op_Implicit(string message);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static SentryMessage FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Sentry.SentryMessageHandler : DelegatingHandler {
    private IHub _hub;
    [NullableAttribute("2")]
private SentryOptions _options;
    private object _innerHandlerLock;
    protected SentryMessageHandler(HttpMessageHandler innerHandler);
    protected SentryMessageHandler(IHub hub);
    protected SentryMessageHandler(HttpMessageHandler innerHandler, IHub hub);
    [NullableContextAttribute("2")]
internal SentryMessageHandler(IHub hub, SentryOptions options, HttpMessageHandler innerHandler);
    protected internal abstract virtual ISpan ProcessRequest(HttpRequestMessage request, string method, string url);
    protected internal abstract virtual void HandleResponse(HttpResponseMessage response, ISpan span, string method, string url);
    [AsyncStateMachineAttribute("Sentry.SentryMessageHandler/<SendAsync>d__10")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    private void PropagateTraceHeaders(HttpRequestMessage request, string url);
    private void AddSentryTraceHeader(HttpRequestMessage request);
    private void AddBaggageHeader(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public enum Sentry.SentryMonitorInterval : Enum {
    public int value__;
    public static SentryMonitorInterval Year;
    public static SentryMonitorInterval Month;
    public static SentryMonitorInterval Week;
    public static SentryMonitorInterval Day;
    public static SentryMonitorInterval Hour;
    public static SentryMonitorInterval Minute;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SentryMonitorOptions : object {
    private SentryMonitorScheduleType _type;
    private string _crontab;
    private Nullable`1<int> _interval;
    private Nullable`1<SentryMonitorInterval> _unit;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <CheckInMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxRuntime>k__BackingField;
    private Nullable`1<int> _failureIssueThreshold;
    private Nullable`1<int> _recoveryThreshold;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    public Nullable`1<TimeSpan> CheckInMargin { get; public set; }
    public Nullable`1<TimeSpan> MaxRuntime { get; public set; }
    public Nullable`1<int> FailureIssueThreshold { get; public set; }
    public Nullable`1<int> RecoveryThreshold { get; public set; }
    public string TimeZone { get; public set; }
    public string Owner { get; public set; }
    [NullableContextAttribute("1")]
[GeneratedRegexAttribute("^(\*|([0-5]?\d))(\s+)(\*|([01]?\d|2[0-3]))(\s+)(\*|([1-9]|[12]\d|3[01]))(\s+)(\*|([1-9]|1[0-2]))(\s+)(\*|([0-7]))$", "1")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex CrontabValidation();
    [NullableContextAttribute("1")]
public void Interval(string crontab);
    public void Interval(int interval, SentryMonitorInterval unit);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_CheckInMargin();
    [CompilerGeneratedAttribute]
public void set_CheckInMargin(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxRuntime();
    [CompilerGeneratedAttribute]
public void set_MaxRuntime(Nullable`1<TimeSpan> value);
    public Nullable`1<int> get_FailureIssueThreshold();
    public void set_FailureIssueThreshold(Nullable`1<int> value);
    public Nullable`1<int> get_RecoveryThreshold();
    public void set_RecoveryThreshold(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
private static string TypeToString(SentryMonitorScheduleType type);
}
internal enum Sentry.SentryMonitorScheduleType : Enum {
    public int value__;
    public static SentryMonitorScheduleType None;
    public static SentryMonitorScheduleType Crontab;
    public static SentryMonitorScheduleType Interval;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryOptions : object {
    [CompilerGeneratedAttribute]
private NativeOptions <Native>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _defaultTags;
    private static RegexOptions DefaultRegexOptions;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IScopeStackContainer <ScopeStackContainer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> _lazyInstallationId;
    private bool _isGlobalModeEnabled;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IScopeObserver <ScopeObserver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableScopeSync>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITransport <Transport>k__BackingField;
    private Lazy`1<IClientReportRecorder> _clientReportRecorder;
    private Lazy`1<ISentryStackTraceFactory> _sentryStackTraceFactory;
    [CompilerGeneratedAttribute]
private int <SentryVersion>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<Type, Lazy`1<ISentryEventExceptionProcessor>>> <ExceptionProcessors>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ISentryTransactionProcessor> <TransactionProcessors>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<Type, Lazy`1<ISentryEventProcessor>>> <EventProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`1<IEnumerable`1<ISentryEventProcessor>>> <EventProcessorsProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`1<IEnumerable`1<ISentryTransactionProcessor>>> <TransactionProcessorsProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`1<IEnumerable`1<ISentryEventExceptionProcessor>>> <ExceptionProcessorsProviders>k__BackingField;
    private DefaultIntegrations _defaultIntegrations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<IExceptionFilter> <ExceptionFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SubstringOrRegexPattern> <TagFilters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBackgroundWorker <BackgroundWorker>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISentryHttpClientFactory <SentryHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISentryScopeStateProcessor <SentryScopeStateProcessor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<StringOrRegex> <InAppExclude>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<StringOrRegex> <InAppInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendDefaultPii>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnvironmentUser>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttachStacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBreadcrumbs>k__BackingField;
    private Nullable`1<float> _sampleRate;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Distribution>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [NullableAttribute("2")]
private string _dsn;
    [NullableAttribute("2")]
internal Dsn _parsedDsn;
    private Lazy`1<string> _sentryBaseUrl;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<SentryEvent, SentryHint, SentryEvent> _beforeSend;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<SentryTransaction, SentryHint, SentryTransaction> _beforeSendTransaction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<Breadcrumb, SentryHint, Breadcrumb> _beforeBreadcrumb;
    private int _maxQueueItems;
    private int _maxCacheItems;
    [CompilerGeneratedAttribute]
private TimeSpan <ShutdownTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FlushTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private DecompressionMethods <DecompressionMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionLevel <RequestBodyCompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestBodyCompressionBuffered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendClientReports>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IWebProxy <HttpProxy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<HttpMessageHandler> <CreateHttpMessageHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<HttpClient> <ConfigureClient>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _debug;
    [CompilerGeneratedAttribute]
private SentryLevel <DiagnosticLevel>k__BackingField;
    [NullableAttribute("2")]
private IDiagnosticLogger modreq(System.Runtime.CompilerServices.IsVolatile) _diagnosticLogger;
    [CompilerGeneratedAttribute]
private ReportAssembliesMode <ReportAssembliesMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DeduplicateMode <DeduplicateMode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CacheDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureFailedRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HttpStatusCodeRange> <FailedRequestStatusCodes>k__BackingField;
    private Lazy`1<IList`1<SubstringOrRegexPattern>> _failedRequestTargets;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InitCacheFlushTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableTracing>k__BackingField;
    private Nullable`1<double> _tracesSampleRate;
    private Nullable`1<double> _profilesSampleRate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<TransactionSamplingContext, Nullable`1<double>> <TracesSampler>k__BackingField;
    private IList`1<SubstringOrRegexPattern> _tracePropagationTargets;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITransactionProfilerFactory <TransactionProfilerFactory>k__BackingField;
    private Nullable`1<StackTraceMode> _stackTraceMode;
    private List`1<ISdkIntegration> _integrations;
    [CompilerGeneratedAttribute]
private long <MaxAttachmentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private StartupTimeDetectionMode <DetectStartupTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <AutoSessionTrackingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSessionTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAsyncFileIO>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`1<bool> <CrashedLastRun>k__BackingField;
    [CompilerGeneratedAttribute]
private Instrumenter <Instrumenter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INetworkStatusListener <NetworkStatusListener>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, PEReader> <AssemblyReader>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ExperimentalMetricsOptions <ExperimentalMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpotlightUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSpotlight>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingLocator <SettingLocator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitNativeSdks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IHub>> <PostInitCallbacks>k__BackingField;
    public NativeOptions Native { get; }
    [NullableAttribute("2")]
internal IScopeStackContainer ScopeStackContainer { get; internal set; }
    [NullableAttribute("2")]
internal string InstallationId { get; }
    public bool IsGlobalModeEnabled { get; public set; }
    [NullableAttribute("2")]
public IScopeObserver ScopeObserver { get; public set; }
    public bool EnableScopeSync { get; public set; }
    [NullableAttribute("2")]
public ITransport Transport { get; public set; }
    internal IClientReportRecorder ClientReportRecorder { get; internal set; }
    internal ISentryStackTraceFactory SentryStackTraceFactory { get; internal set; }
    internal int SentryVersion { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<Type, Lazy`1<ISentryEventExceptionProcessor>>> ExceptionProcessors { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ISentryTransactionProcessor> TransactionProcessors { get; internal set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<Type, Lazy`1<ISentryEventProcessor>>> EventProcessors { get; internal set; }
    internal List`1<Func`1<IEnumerable`1<ISentryEventProcessor>>> EventProcessorsProviders { get; internal set; }
    internal List`1<Func`1<IEnumerable`1<ISentryTransactionProcessor>>> TransactionProcessorsProviders { get; internal set; }
    internal List`1<Func`1<IEnumerable`1<ISentryEventExceptionProcessor>>> ExceptionProcessorsProviders { get; internal set; }
    internal IEnumerable`1<ISdkIntegration> Integrations { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<IExceptionFilter> ExceptionFilters { get; internal set; }
    public ICollection`1<SubstringOrRegexPattern> TagFilters { get; public set; }
    [NullableAttribute("2")]
public IBackgroundWorker BackgroundWorker { get; public set; }
    [NullableAttribute("2")]
internal ISentryHttpClientFactory SentryHttpClientFactory { get; internal set; }
    public ISentryScopeStateProcessor SentryScopeStateProcessor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<StringOrRegex> InAppExclude { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<StringOrRegex> InAppInclude { get; internal set; }
    public bool SendDefaultPii { get; public set; }
    public bool IsEnvironmentUser { get; public set; }
    [NullableAttribute("2")]
public string ServerName { get; public set; }
    public bool AttachStacktrace { get; public set; }
    public int MaxBreadcrumbs { get; public set; }
    public Nullable`1<float> SampleRate { get; public set; }
    [NullableAttribute("2")]
public string Release { get; public set; }
    [NullableAttribute("2")]
public string Distribution { get; public set; }
    [NullableAttribute("2")]
public string Environment { get; public set; }
    [NullableAttribute("2")]
public string Dsn { get; public set; }
    internal Dsn ParsedDsn { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<SentryEvent, SentryHint, SentryEvent> BeforeSendInternal { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<SentryTransaction, SentryHint, SentryTransaction> BeforeSendTransactionInternal { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<Breadcrumb, SentryHint, Breadcrumb> BeforeBreadcrumbInternal { get; }
    public int MaxQueueItems { get; public set; }
    public int MaxCacheItems { get; public set; }
    public TimeSpan ShutdownTimeout { get; public set; }
    public TimeSpan FlushTimeout { get; public set; }
    public DecompressionMethods DecompressionMethods { get; public set; }
    public CompressionLevel RequestBodyCompressionLevel { get; public set; }
    public bool RequestBodyCompressionBuffered { get; public set; }
    public bool SendClientReports { get; public set; }
    [NullableAttribute("2")]
public IWebProxy HttpProxy { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<HttpMessageHandler> CreateHttpMessageHandler { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<HttpClient> ConfigureClient { get; public set; }
    public bool Debug { get; public set; }
    public SentryLevel DiagnosticLevel { get; public set; }
    [NullableAttribute("2")]
public IDiagnosticLogger DiagnosticLogger { get; public set; }
    public ReportAssembliesMode ReportAssembliesMode { get; public set; }
    public DeduplicateMode DeduplicateMode { get; public set; }
    [NullableAttribute("2")]
public string CacheDirectoryPath { get; public set; }
    public bool CaptureFailedRequests { get; public set; }
    public IList`1<HttpStatusCodeRange> FailedRequestStatusCodes { get; public set; }
    public IList`1<SubstringOrRegexPattern> FailedRequestTargets { get; public set; }
    internal IFileSystem FileSystem { get; internal set; }
    public TimeSpan InitCacheFlushTimeout { get; public set; }
    public Dictionary`2<string, string> DefaultTags { get; internal set; }
    internal bool IsPerformanceMonitoringEnabled { get; }
    internal bool IsProfilingEnabled { get; }
    [ObsoleteAttribute("Use TracesSampleRate or TracesSampler instead")]
public Nullable`1<bool> EnableTracing { get; public set; }
    public Nullable`1<double> TracesSampleRate { get; public set; }
    public Nullable`1<double> ProfilesSampleRate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<TransactionSamplingContext, Nullable`1<double>> TracesSampler { get; public set; }
    public IList`1<SubstringOrRegexPattern> TracePropagationTargets { get; public set; }
    [NullableAttribute("2")]
internal ITransactionProfilerFactory TransactionProfilerFactory { get; internal set; }
    public StackTraceMode StackTraceMode { get; public set; }
    public long MaxAttachmentSize { get; public set; }
    public StartupTimeDetectionMode DetectStartupTime { get; public set; }
    public TimeSpan AutoSessionTrackingInterval { get; public set; }
    public bool AutoSessionTracking { get; public set; }
    public bool UseAsyncFileIO { get; public set; }
    [NullableAttribute("2")]
public Func`1<bool> CrashedLastRun { get; public set; }
    internal Instrumenter Instrumenter { get; internal set; }
    public bool JsonPreserveReferences { get; public set; }
    [NullableAttribute("2")]
[EditorBrowsableAttribute("1")]
public INetworkStatusListener NetworkStatusListener { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EditorBrowsableAttribute("1")]
public Func`2<string, PEReader> AssemblyReader { get; public set; }
    [NullableAttribute("2")]
public ExperimentalMetricsOptions ExperimentalMetrics { get; public set; }
    public string SpotlightUrl { get; public set; }
    public bool EnableSpotlight { get; public set; }
    internal SettingLocator SettingLocator { get; internal set; }
    internal bool InitNativeSdks { get; internal set; }
    internal List`1<Action`1<IHub>> PostInitCallbacks { get; internal set; }
    [CompilerGeneratedAttribute]
public NativeOptions get_Native();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IScopeStackContainer get_ScopeStackContainer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ScopeStackContainer(IScopeStackContainer value);
    [NullableContextAttribute("2")]
internal string get_InstallationId();
    public bool get_IsGlobalModeEnabled();
    public void set_IsGlobalModeEnabled(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IScopeObserver get_ScopeObserver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ScopeObserver(IScopeObserver value);
    [CompilerGeneratedAttribute]
public bool get_EnableScopeSync();
    [CompilerGeneratedAttribute]
public void set_EnableScopeSync(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ITransport get_Transport();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Transport(ITransport value);
    internal IClientReportRecorder get_ClientReportRecorder();
    internal void set_ClientReportRecorder(IClientReportRecorder value);
    internal ISentryStackTraceFactory get_SentryStackTraceFactory();
    internal void set_SentryStackTraceFactory(ISentryStackTraceFactory value);
    [CompilerGeneratedAttribute]
internal int get_SentryVersion();
    [CompilerGeneratedAttribute]
internal List`1<ValueTuple`2<Type, Lazy`1<ISentryEventExceptionProcessor>>> get_ExceptionProcessors();
    [CompilerGeneratedAttribute]
internal void set_ExceptionProcessors(List`1<ValueTuple`2<Type, Lazy`1<ISentryEventExceptionProcessor>>> value);
    [CompilerGeneratedAttribute]
internal List`1<ISentryTransactionProcessor> get_TransactionProcessors();
    [CompilerGeneratedAttribute]
internal void set_TransactionProcessors(List`1<ISentryTransactionProcessor> value);
    [CompilerGeneratedAttribute]
internal List`1<ValueTuple`2<Type, Lazy`1<ISentryEventProcessor>>> get_EventProcessors();
    [CompilerGeneratedAttribute]
internal void set_EventProcessors(List`1<ValueTuple`2<Type, Lazy`1<ISentryEventProcessor>>> value);
    [CompilerGeneratedAttribute]
internal List`1<Func`1<IEnumerable`1<ISentryEventProcessor>>> get_EventProcessorsProviders();
    [CompilerGeneratedAttribute]
internal void set_EventProcessorsProviders(List`1<Func`1<IEnumerable`1<ISentryEventProcessor>>> value);
    [CompilerGeneratedAttribute]
internal List`1<Func`1<IEnumerable`1<ISentryTransactionProcessor>>> get_TransactionProcessorsProviders();
    [CompilerGeneratedAttribute]
internal void set_TransactionProcessorsProviders(List`1<Func`1<IEnumerable`1<ISentryTransactionProcessor>>> value);
    [CompilerGeneratedAttribute]
internal List`1<Func`1<IEnumerable`1<ISentryEventExceptionProcessor>>> get_ExceptionProcessorsProviders();
    [CompilerGeneratedAttribute]
internal void set_ExceptionProcessorsProviders(List`1<Func`1<IEnumerable`1<ISentryEventExceptionProcessor>>> value);
    [IteratorStateMachineAttribute("Sentry.SentryOptions/<get_Integrations>d__66")]
internal IEnumerable`1<ISdkIntegration> get_Integrations();
    [CompilerGeneratedAttribute]
internal List`1<IExceptionFilter> get_ExceptionFilters();
    [CompilerGeneratedAttribute]
internal void set_ExceptionFilters(List`1<IExceptionFilter> value);
    [CompilerGeneratedAttribute]
public ICollection`1<SubstringOrRegexPattern> get_TagFilters();
    [CompilerGeneratedAttribute]
public void set_TagFilters(ICollection`1<SubstringOrRegexPattern> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IBackgroundWorker get_BackgroundWorker();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BackgroundWorker(IBackgroundWorker value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ISentryHttpClientFactory get_SentryHttpClientFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_SentryHttpClientFactory(ISentryHttpClientFactory value);
    internal HttpClient GetHttpClient();
    [CompilerGeneratedAttribute]
public ISentryScopeStateProcessor get_SentryScopeStateProcessor();
    [CompilerGeneratedAttribute]
public void set_SentryScopeStateProcessor(ISentryScopeStateProcessor value);
    [CompilerGeneratedAttribute]
internal List`1<StringOrRegex> get_InAppExclude();
    [CompilerGeneratedAttribute]
internal void set_InAppExclude(List`1<StringOrRegex> value);
    [CompilerGeneratedAttribute]
internal List`1<StringOrRegex> get_InAppInclude();
    [CompilerGeneratedAttribute]
internal void set_InAppInclude(List`1<StringOrRegex> value);
    [CompilerGeneratedAttribute]
public bool get_SendDefaultPii();
    [CompilerGeneratedAttribute]
public void set_SendDefaultPii(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnvironmentUser();
    [CompilerGeneratedAttribute]
public void set_IsEnvironmentUser(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ServerName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public bool get_AttachStacktrace();
    [CompilerGeneratedAttribute]
public void set_AttachStacktrace(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxBreadcrumbs();
    [CompilerGeneratedAttribute]
public void set_MaxBreadcrumbs(int value);
    public Nullable`1<float> get_SampleRate();
    public void set_SampleRate(Nullable`1<float> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Release();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Release(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Distribution();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Distribution(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Environment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Environment(string value);
    [NullableContextAttribute("2")]
public string get_Dsn();
    [NullableContextAttribute("2")]
public void set_Dsn(string value);
    internal Dsn get_ParsedDsn();
    [NullableContextAttribute("2")]
internal bool IsSentryRequest(string requestUri);
    [NullableContextAttribute("2")]
internal bool IsSentryRequest(Uri requestUri);
    internal Func`3<SentryEvent, SentryHint, SentryEvent> get_BeforeSendInternal();
    public void SetBeforeSend(Func`3<SentryEvent, SentryHint, SentryEvent> beforeSend);
    public void SetBeforeSend(Func`2<SentryEvent, SentryEvent> beforeSend);
    internal Func`3<SentryTransaction, SentryHint, SentryTransaction> get_BeforeSendTransactionInternal();
    public void SetBeforeSendTransaction(Func`3<SentryTransaction, SentryHint, SentryTransaction> beforeSendTransaction);
    public void SetBeforeSendTransaction(Func`2<SentryTransaction, SentryTransaction> beforeSendTransaction);
    internal Func`3<Breadcrumb, SentryHint, Breadcrumb> get_BeforeBreadcrumbInternal();
    public void SetBeforeBreadcrumb(Func`3<Breadcrumb, SentryHint, Breadcrumb> beforeBreadcrumb);
    public void SetBeforeBreadcrumb(Func`2<Breadcrumb, Breadcrumb> beforeBreadcrumb);
    public int get_MaxQueueItems();
    public void set_MaxQueueItems(int value);
    public int get_MaxCacheItems();
    public void set_MaxCacheItems(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FlushTimeout();
    [CompilerGeneratedAttribute]
public void set_FlushTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public DecompressionMethods get_DecompressionMethods();
    [CompilerGeneratedAttribute]
public void set_DecompressionMethods(DecompressionMethods value);
    [CompilerGeneratedAttribute]
public CompressionLevel get_RequestBodyCompressionLevel();
    [CompilerGeneratedAttribute]
public void set_RequestBodyCompressionLevel(CompressionLevel value);
    [CompilerGeneratedAttribute]
public bool get_RequestBodyCompressionBuffered();
    [CompilerGeneratedAttribute]
public void set_RequestBodyCompressionBuffered(bool value);
    [CompilerGeneratedAttribute]
public bool get_SendClientReports();
    [CompilerGeneratedAttribute]
public void set_SendClientReports(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IWebProxy get_HttpProxy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_HttpProxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public Func`1<HttpMessageHandler> get_CreateHttpMessageHandler();
    [CompilerGeneratedAttribute]
public void set_CreateHttpMessageHandler(Func`1<HttpMessageHandler> value);
    [CompilerGeneratedAttribute]
public Action`1<HttpClient> get_ConfigureClient();
    [CompilerGeneratedAttribute]
public void set_ConfigureClient(Action`1<HttpClient> value);
    public bool get_Debug();
    public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public SentryLevel get_DiagnosticLevel();
    [CompilerGeneratedAttribute]
public void set_DiagnosticLevel(SentryLevel value);
    [NullableContextAttribute("2")]
public IDiagnosticLogger get_DiagnosticLogger();
    [NullableContextAttribute("2")]
public void set_DiagnosticLogger(IDiagnosticLogger value);
    [CompilerGeneratedAttribute]
public ReportAssembliesMode get_ReportAssembliesMode();
    [CompilerGeneratedAttribute]
public void set_ReportAssembliesMode(ReportAssembliesMode value);
    [CompilerGeneratedAttribute]
public DeduplicateMode get_DeduplicateMode();
    [CompilerGeneratedAttribute]
public void set_DeduplicateMode(DeduplicateMode value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CacheDirectoryPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CacheDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public bool get_CaptureFailedRequests();
    [CompilerGeneratedAttribute]
public void set_CaptureFailedRequests(bool value);
    [CompilerGeneratedAttribute]
public IList`1<HttpStatusCodeRange> get_FailedRequestStatusCodes();
    [CompilerGeneratedAttribute]
public void set_FailedRequestStatusCodes(IList`1<HttpStatusCodeRange> value);
    public IList`1<SubstringOrRegexPattern> get_FailedRequestTargets();
    public void set_FailedRequestTargets(IList`1<SubstringOrRegexPattern> value);
    [CompilerGeneratedAttribute]
internal IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
internal void set_FileSystem(IFileSystem value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InitCacheFlushTimeout();
    [CompilerGeneratedAttribute]
public void set_InitCacheFlushTimeout(TimeSpan value);
    public Dictionary`2<string, string> get_DefaultTags();
    internal void set_DefaultTags(Dictionary`2<string, string> value);
    internal bool get_IsPerformanceMonitoringEnabled();
    internal bool get_IsProfilingEnabled();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableTracing();
    [CompilerGeneratedAttribute]
public void set_EnableTracing(Nullable`1<bool> value);
    public Nullable`1<double> get_TracesSampleRate();
    public void set_TracesSampleRate(Nullable`1<double> value);
    public Nullable`1<double> get_ProfilesSampleRate();
    public void set_ProfilesSampleRate(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Func`2<TransactionSamplingContext, Nullable`1<double>> get_TracesSampler();
    [CompilerGeneratedAttribute]
public void set_TracesSampler(Func`2<TransactionSamplingContext, Nullable`1<double>> value);
    public IList`1<SubstringOrRegexPattern> get_TracePropagationTargets();
    public void set_TracePropagationTargets(IList`1<SubstringOrRegexPattern> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ITransactionProfilerFactory get_TransactionProfilerFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TransactionProfilerFactory(ITransactionProfilerFactory value);
    public StackTraceMode get_StackTraceMode();
    public void set_StackTraceMode(StackTraceMode value);
    [CompilerGeneratedAttribute]
public long get_MaxAttachmentSize();
    [CompilerGeneratedAttribute]
public void set_MaxAttachmentSize(long value);
    [CompilerGeneratedAttribute]
public StartupTimeDetectionMode get_DetectStartupTime();
    [CompilerGeneratedAttribute]
public void set_DetectStartupTime(StartupTimeDetectionMode value);
    [CompilerGeneratedAttribute]
public TimeSpan get_AutoSessionTrackingInterval();
    [CompilerGeneratedAttribute]
public void set_AutoSessionTrackingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_AutoSessionTracking();
    [CompilerGeneratedAttribute]
public void set_AutoSessionTracking(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseAsyncFileIO();
    [CompilerGeneratedAttribute]
public void set_UseAsyncFileIO(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`1<bool> get_CrashedLastRun();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CrashedLastRun(Func`1<bool> value);
    [CompilerGeneratedAttribute]
internal Instrumenter get_Instrumenter();
    [CompilerGeneratedAttribute]
internal void set_Instrumenter(Instrumenter value);
    public void AddJsonConverter(JsonConverter converter);
    public void AddJsonSerializerContext(Func`2<JsonSerializerOptions, T> contextBuilder);
    public bool get_JsonPreserveReferences();
    public void set_JsonPreserveReferences(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INetworkStatusListener get_NetworkStatusListener();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NetworkStatusListener(INetworkStatusListener value);
    [CompilerGeneratedAttribute]
public Func`2<string, PEReader> get_AssemblyReader();
    [CompilerGeneratedAttribute]
public void set_AssemblyReader(Func`2<string, PEReader> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ExperimentalMetricsOptions get_ExperimentalMetrics();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ExperimentalMetrics(ExperimentalMetricsOptions value);
    [CompilerGeneratedAttribute]
public string get_SpotlightUrl();
    [CompilerGeneratedAttribute]
public void set_SpotlightUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableSpotlight();
    [CompilerGeneratedAttribute]
public void set_EnableSpotlight(bool value);
    [CompilerGeneratedAttribute]
internal SettingLocator get_SettingLocator();
    [CompilerGeneratedAttribute]
internal void set_SettingLocator(SettingLocator value);
    [CompilerGeneratedAttribute]
internal bool get_InitNativeSdks();
    [CompilerGeneratedAttribute]
internal void set_InitNativeSdks(bool value);
    [CompilerGeneratedAttribute]
internal List`1<Action`1<IHub>> get_PostInitCallbacks();
    [CompilerGeneratedAttribute]
internal void set_PostInitCallbacks(List`1<Action`1<IHub>> value);
    public void AddIntegration(ISdkIntegration integration);
    [NullableContextAttribute("0")]
public void RemoveIntegration();
    public void AddExceptionFilter(IExceptionFilter exceptionFilter);
    [NullableContextAttribute("0")]
public void RemoveExceptionFilter();
    [NullableContextAttribute("0")]
public void AddExceptionFilterForType();
    public void AddInAppExclude(string prefix);
    public void AddInAppExclude(Regex regex);
    public void AddInAppExcludeRegex(string pattern);
    public void AddInAppInclude(string prefix);
    public void AddInAppInclude(Regex regex);
    public void AddInAppIncludeRegex(string pattern);
    public void AddExceptionProcessor(ISentryEventExceptionProcessor processor);
    public void AddExceptionProcessors(IEnumerable`1<ISentryEventExceptionProcessor> processors);
    public void AddEventProcessor(ISentryEventProcessor processor);
    public void AddEventProcessors(IEnumerable`1<ISentryEventProcessor> processors);
    [NullableContextAttribute("0")]
public void RemoveEventProcessor();
    public void AddEventProcessorProvider(Func`1<IEnumerable`1<ISentryEventProcessor>> processorProvider);
    public void AddTransactionProcessor(ISentryTransactionProcessor processor);
    public void AddTransactionProcessors(IEnumerable`1<ISentryTransactionProcessor> processors);
    [NullableContextAttribute("0")]
public void RemoveTransactionProcessor();
    public void AddTransactionProcessorProvider(Func`1<IEnumerable`1<ISentryTransactionProcessor>> processorProvider);
    public void AddExceptionProcessorProvider(Func`1<IEnumerable`1<ISentryEventExceptionProcessor>> processorProvider);
    public IEnumerable`1<ISentryEventProcessor> GetAllEventProcessors();
    public IEnumerable`1<ISentryTransactionProcessor> GetAllTransactionProcessors();
    public IEnumerable`1<ISentryEventExceptionProcessor> GetAllExceptionProcessors();
    public SentryOptions UseStackTraceFactory(ISentryStackTraceFactory sentryStackTraceFactory);
    public void ApplyDefaultTags(IHasTags hasTags);
    public void DisableDuplicateEventDetection();
    public void DisableAppDomainUnhandledExceptionCapture();
    public void DisableDiagnosticSourceIntegration();
    public void DisableUnobservedTaskExceptionCapture();
    public void DisableAppDomainProcessExitFlush();
    [NullableContextAttribute("2")]
internal bool HasIntegration();
    internal void RemoveDefaultIntegration(DefaultIntegrations defaultIntegrations);
    internal void SetupLogging();
    [NullableContextAttribute("2")]
internal string TryGetDsnSpecificCacheDirectoryPath();
    [NullableContextAttribute("2")]
internal string TryGetProcessSpecificCacheDirectoryPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private string <.ctor>b__346_0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISentryTransactionProcessor> <.ctor>b__346_5();
    [CompilerGeneratedAttribute]
private IClientReportRecorder <.ctor>b__346_1();
    [CompilerGeneratedAttribute]
private ISentryStackTraceFactory <.ctor>b__346_2();
    [CompilerGeneratedAttribute]
private ISentryStackTraceFactory <.ctor>g__SentryStackTraceFactoryAccessor|346_3();
    [CompilerGeneratedAttribute]
private ISentryEventProcessor <.ctor>b__346_6();
    [CompilerGeneratedAttribute]
private ISentryEventProcessor <.ctor>b__346_7();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISentryEventProcessor> <.ctor>b__346_8();
    [CompilerGeneratedAttribute]
private ISentryEventExceptionProcessor <.ctor>b__346_10();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISentryEventExceptionProcessor> <.ctor>b__346_11();
    [CompilerGeneratedAttribute]
private string <.ctor>b__346_4();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryPackage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; }
    public string Version { get; }
    public SentryPackage(string name, string version);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static SentryPackage FromJson(JsonElement json);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Sentry.SentryPropagationContext : object {
    [CompilerGeneratedAttribute]
private SentryId <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanId> <ParentSpanId>k__BackingField;
    internal DynamicSamplingContext _dynamicSamplingContext;
    public SentryId TraceId { get; }
    public SpanId SpanId { get; }
    public Nullable`1<SpanId> ParentSpanId { get; }
    internal SentryPropagationContext(SentryId traceId, SpanId parentSpanId, DynamicSamplingContext dynamicSamplingContext);
    public SentryPropagationContext(SentryPropagationContext other);
    [CompilerGeneratedAttribute]
public SentryId get_TraceId();
    [CompilerGeneratedAttribute]
public SpanId get_SpanId();
    [CompilerGeneratedAttribute]
public Nullable`1<SpanId> get_ParentSpanId();
    [NullableContextAttribute("1")]
public DynamicSamplingContext GetOrCreateDynamicSamplingContext(SentryOptions options);
    public static SentryPropagationContext CreateFromHeaders(IDiagnosticLogger logger, SentryTraceHeader traceHeader, BaggageHeader baggageHeader);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SentryRequest : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <InternalEnv>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <InternalOther>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <InternalHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cookies>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, string> InternalEnv { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, string> InternalOther { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, string> InternalHeaders { get; private set; }
    public string Url { get; public set; }
    public string Method { get; public set; }
    public string ApiTarget { get; public set; }
    public object Data { get; public set; }
    public string QueryString { get; public set; }
    public string Cookies { get; public set; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> Headers { get; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> Env { get; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> Other { get; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_InternalEnv();
    [CompilerGeneratedAttribute]
private void set_InternalEnv(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_InternalOther();
    [CompilerGeneratedAttribute]
private void set_InternalOther(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_InternalHeaders();
    [CompilerGeneratedAttribute]
private void set_InternalHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_ApiTarget();
    [CompilerGeneratedAttribute]
public void set_ApiTarget(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public string get_QueryString();
    [CompilerGeneratedAttribute]
public void set_QueryString(string value);
    [CompilerGeneratedAttribute]
public string get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(string value);
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_Headers();
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_Env();
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_Other();
    internal void AddHeaders(IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> headers);
    [NullableContextAttribute("1")]
public SentryRequest Clone();
    internal void CopyTo(SentryRequest request);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static SentryRequest FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Sentry.SentrySdk : object {
    internal static IHub CurrentHub;
    [NullableAttribute("2")]
internal static SentryOptions CurrentOptions { get; }
    public static SentryId LastEventId { get; }
    public static bool IsEnabled { get; }
    public static IMetricAggregator Metrics { get; }
    private static SentrySdk();
    private static void InitSentryCocoaSdk(SentryOptions options);
    private static string GetDefaultReleaseString();
    private static string GetDefaultDistributionString();
    private static string GetBundleValue(string key);
    private static SentryHttpStatusCodeRange[] GetFailedRequestStatusCodes(IList`1<HttpStatusCodeRange> httpStatusCodeRanges);
    [NullableContextAttribute("2")]
internal static SentryOptions get_CurrentOptions();
    [DebuggerStepThroughAttribute]
public static SentryId get_LastEventId();
    internal static IHub InitHub(SentryOptions options);
    private static void LogWarningIfProfilingMisconfigured(SentryOptions options, string info);
    public static IDisposable Init();
    public static IDisposable Init(string dsn);
    public static IDisposable Init(Action`1<SentryOptions> configureOptions);
    [EditorBrowsableAttribute("1")]
public static IDisposable Init(SentryOptions options);
    internal static IDisposable UseHub(IHub hub);
    [DebuggerStepThroughAttribute]
public static void Flush();
    [DebuggerStepThroughAttribute]
public static void Flush(TimeSpan timeout);
    [DebuggerStepThroughAttribute]
public static Task FlushAsync();
    [DebuggerStepThroughAttribute]
public static Task FlushAsync(TimeSpan timeout);
    [EditorBrowsableAttribute("1")]
public static void Close();
    [DebuggerStepThroughAttribute]
public static bool get_IsEnabled();
    [DebuggerStepThroughAttribute]
public static IDisposable PushScope(TState state);
    [DebuggerStepThroughAttribute]
public static IDisposable PushScope();
    [DebuggerStepThroughAttribute]
public static void BindClient(ISentryClient client);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static void AddBreadcrumb(string message, string category, string type, IDictionary`2<string, string> data, BreadcrumbLevel level);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public static void AddBreadcrumb(ISystemClock clock, string message, string category, string type, IDictionary`2<string, string> data, BreadcrumbLevel level);
    [DebuggerStepThroughAttribute]
public static void AddBreadcrumb(Breadcrumb breadcrumb, SentryHint hint);
    [DebuggerStepThroughAttribute]
public static void ConfigureScope(Action`1<Scope> configureScope);
    [DebuggerStepThroughAttribute]
public static Task ConfigureScopeAsync(Func`2<Scope, Task> configureScope);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public static bool CaptureEnvelope(Envelope envelope);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public static SentryId CaptureEvent(SentryEvent evt, Scope scope, SentryHint hint);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public static SentryId CaptureEvent(SentryEvent evt, Action`1<Scope> configureScope);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public static SentryId CaptureEvent(SentryEvent evt, SentryHint hint, Action`1<Scope> configureScope);
    [DebuggerStepThroughAttribute]
public static SentryId CaptureException(Exception exception);
    [DebuggerStepThroughAttribute]
public static SentryId CaptureException(Exception exception, Action`1<Scope> configureScope);
    [DebuggerStepThroughAttribute]
public static SentryId CaptureMessage(string message, SentryLevel level);
    [DebuggerStepThroughAttribute]
public static SentryId CaptureMessage(string message, Action`1<Scope> configureScope, SentryLevel level);
    [DebuggerStepThroughAttribute]
public static void CaptureUserFeedback(UserFeedback userFeedback);
    [DebuggerStepThroughAttribute]
public static void CaptureUserFeedback(SentryId eventId, string email, string comments, string name);
    [DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public static void CaptureTransaction(SentryTransaction transaction);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public static void CaptureTransaction(SentryTransaction transaction, Scope scope, SentryHint hint);
    [DebuggerStepThroughAttribute]
public static void CaptureSession(SessionUpdate sessionUpdate);
    [DebuggerStepThroughAttribute]
public static SentryId CaptureCheckIn(string monitorSlug, CheckInStatus status, Nullable`1<SentryId> sentryId, Nullable`1<TimeSpan> duration, Scope scope, Action`1<SentryMonitorOptions> configureMonitorOptions);
    [DebuggerStepThroughAttribute]
public static ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext);
    [DebuggerStepThroughAttribute]
internal static ITransactionTracer StartTransaction(ITransactionContext context, IReadOnlyDictionary`2<string, object> customSamplingContext, DynamicSamplingContext dynamicSamplingContext);
    [DebuggerStepThroughAttribute]
public static ITransactionTracer StartTransaction(ITransactionContext context);
    [DebuggerStepThroughAttribute]
public static ITransactionTracer StartTransaction(string name, string operation);
    [DebuggerStepThroughAttribute]
public static ITransactionTracer StartTransaction(string name, string operation, string description);
    [DebuggerStepThroughAttribute]
public static ITransactionTracer StartTransaction(string name, string operation, SentryTraceHeader traceHeader);
    [DebuggerStepThroughAttribute]
public static void BindException(Exception exception, ISpan span);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static ISpan GetSpan();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static SentryTraceHeader GetTraceHeader();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static BaggageHeader GetBaggage();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static TransactionContext ContinueTrace(string traceHeader, string baggageHeader, string name, string operation);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static TransactionContext ContinueTrace(SentryTraceHeader traceHeader, BaggageHeader baggageHeader, string name, string operation);
    public static IMetricAggregator get_Metrics();
    [DebuggerStepThroughAttribute]
public static void StartSession();
    [DebuggerStepThroughAttribute]
public static void EndSession(SessionEndStatus status);
    [DebuggerStepThroughAttribute]
public static void PauseSession();
    [DebuggerStepThroughAttribute]
public static void ResumeSession();
    [ObsoleteAttribute("WARNING: This method deliberately causes a crash, and should not be used in a real application.")]
public static void CauseCrash(CrashType crashType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SentrySession : object {
    [CompilerGeneratedAttribute]
private SentryId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DistinctId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    private int _errorCount;
    private int _sequenceNumber;
    public SentryId Id { get; }
    public string DistinctId { get; }
    public DateTimeOffset StartTimestamp { get; }
    [NullableAttribute("1")]
public string Release { get; }
    public string Environment { get; }
    public string IpAddress { get; }
    public string UserAgent { get; }
    public int ErrorCount { get; }
    internal SentrySession(SentryId id, string distinctId, DateTimeOffset startTimestamp, string release, string environment, string ipAddress, string userAgent);
    public SentrySession(string distinctId, string release, string environment);
    [CompilerGeneratedAttribute]
public sealed virtual SentryId get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DistinctId();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTimestamp();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Release();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual string get_IpAddress();
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    public sealed virtual int get_ErrorCount();
    public void ReportError();
    [NullableContextAttribute("1")]
internal SessionUpdate CreateUpdate(bool isInitial, DateTimeOffset timestamp, Nullable`1<SessionEndStatus> endStatus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentrySpan : object {
    [CompilerGeneratedAttribute]
private SpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanId> <ParentSpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryId <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <EndTimestamp>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Measurement> _measurements;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSampled>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _tags;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _extra;
    [NullableAttribute("2")]
private MetricsSummary _metricsSummary;
    [NullableAttribute("2")]
private string _origin;
    public SpanId SpanId { get; private set; }
    public Nullable`1<SpanId> ParentSpanId { get; private set; }
    public SentryId TraceId { get; private set; }
    public DateTimeOffset StartTimestamp { get; private set; }
    public Nullable`1<DateTimeOffset> EndTimestamp { get; private set; }
    public bool IsFinished { get; }
    public IReadOnlyDictionary`2<string, Measurement> Measurements { get; }
    public string Operation { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Nullable`1<SpanStatus> Status { get; public set; }
    public Nullable`1<bool> IsSampled { get; internal set; }
    public IReadOnlyDictionary`2<string, string> Tags { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    [NullableAttribute("2")]
public string Origin { get; internal set; }
    public SentrySpan(Nullable`1<SpanId> parentSpanId, string operation);
    public SentrySpan(ISpan tracer);
    [CompilerGeneratedAttribute]
public sealed virtual SpanId get_SpanId();
    [CompilerGeneratedAttribute]
private void set_SpanId(SpanId value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    [CompilerGeneratedAttribute]
private void set_ParentSpanId(Nullable`1<SpanId> value);
    [CompilerGeneratedAttribute]
public sealed virtual SentryId get_TraceId();
    [CompilerGeneratedAttribute]
private void set_TraceId(SentryId value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTimestamp();
    [CompilerGeneratedAttribute]
private void set_StartTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_EndTimestamp();
    [CompilerGeneratedAttribute]
private void set_EndTimestamp(Nullable`1<DateTimeOffset> value);
    public sealed virtual bool get_IsFinished();
    public sealed virtual IReadOnlyDictionary`2<string, Measurement> get_Measurements();
    public sealed virtual void SetMeasurement(string name, Measurement measurement);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanStatus> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<SpanStatus> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsSampled();
    [CompilerGeneratedAttribute]
internal void set_IsSampled(Nullable`1<bool> value);
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Tags();
    public sealed virtual void SetTag(string key, string value);
    public sealed virtual void UnsetTag(string key);
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Extra();
    public sealed virtual void SetExtra(string key, object value);
    public sealed virtual SentryTraceHeader GetTraceHeader();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static SentrySpan FromJson(JsonElement json);
    internal void Redact();
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
internal void set_Origin(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Function}")]
public class Sentry.SentryStackFrame : object {
    [NullableAttribute("1")]
private static Lazy`1<PrefixOrPatternMatcher> LazyModuleMatcher;
    [NullableAttribute("1")]
private static Lazy`1<DelimitedPrefixOrPatternMatcher> LazyFunctionMatcher;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <InternalPreContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <InternalPostContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <InternalVars>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <InternalFramesOmitted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCodeLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsolutePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InApp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ImageAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <SymbolAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InstructionAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddressMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FunctionId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<string> InternalPreContext { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<string> InternalPostContext { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, string> InternalVars { get; private set; }
    internal List`1<int> InternalFramesOmitted { get; private set; }
    internal bool IsCodeLocation { get; internal set; }
    public string FileName { get; public set; }
    public string Function { get; public set; }
    public string Module { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public Nullable`1<int> ColumnNumber { get; public set; }
    public string AbsolutePath { get; public set; }
    public string ContextLine { get; public set; }
    [NullableAttribute("1")]
public IList`1<string> PreContext { get; }
    [NullableAttribute("1")]
public IList`1<string> PostContext { get; }
    public Nullable`1<bool> InApp { get; public set; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> Vars { get; }
    [NullableAttribute("1")]
public IList`1<int> FramesOmitted { get; }
    public string Package { get; public set; }
    public string Platform { get; public set; }
    public Nullable`1<long> ImageAddress { get; public set; }
    public Nullable`1<long> SymbolAddress { get; public set; }
    public Nullable`1<long> InstructionAddress { get; public set; }
    public string AddressMode { get; public set; }
    public Nullable`1<long> FunctionId { get; public set; }
    private static SentryStackFrame();
    [CompilerGeneratedAttribute]
internal List`1<string> get_InternalPreContext();
    [CompilerGeneratedAttribute]
private void set_InternalPreContext(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_InternalPostContext();
    [CompilerGeneratedAttribute]
private void set_InternalPostContext(List`1<string> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_InternalVars();
    [CompilerGeneratedAttribute]
private void set_InternalVars(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal List`1<int> get_InternalFramesOmitted();
    [CompilerGeneratedAttribute]
private void set_InternalFramesOmitted(List`1<int> value);
    [CompilerGeneratedAttribute]
internal bool get_IsCodeLocation();
    [CompilerGeneratedAttribute]
internal void set_IsCodeLocation(bool value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(string value);
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_AbsolutePath();
    [CompilerGeneratedAttribute]
public void set_AbsolutePath(string value);
    [CompilerGeneratedAttribute]
public string get_ContextLine();
    [CompilerGeneratedAttribute]
public void set_ContextLine(string value);
    [NullableContextAttribute("1")]
public IList`1<string> get_PreContext();
    [NullableContextAttribute("1")]
public IList`1<string> get_PostContext();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_InApp();
    [CompilerGeneratedAttribute]
public void set_InApp(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_Vars();
    [NullableContextAttribute("1")]
public IList`1<int> get_FramesOmitted();
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ImageAddress();
    [CompilerGeneratedAttribute]
public void set_ImageAddress(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_SymbolAddress();
    [CompilerGeneratedAttribute]
public void set_SymbolAddress(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InstructionAddress();
    [CompilerGeneratedAttribute]
public void set_InstructionAddress(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_AddressMode();
    [CompilerGeneratedAttribute]
public void set_AddressMode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(Nullable`1<long> value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public void ConfigureAppFrame(SentryOptions options);
    [NullableContextAttribute("1")]
private void ConfigureAppFrame(SentryOptions options, string parameter, IStringOrRegexMatcher matcher);
    [NullableContextAttribute("1")]
public static SentryStackFrame FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryStackTrace : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<SentryStackFrame> <InternalFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<InstructionAddressAdjustment> <AddressAdjustment>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IList`1<SentryStackFrame> InternalFrames { get; private set; }
    public IList`1<SentryStackFrame> Frames { get; public set; }
    public Nullable`1<InstructionAddressAdjustment> AddressAdjustment { get; public set; }
    [CompilerGeneratedAttribute]
internal IList`1<SentryStackFrame> get_InternalFrames();
    [CompilerGeneratedAttribute]
private void set_InternalFrames(IList`1<SentryStackFrame> value);
    public IList`1<SentryStackFrame> get_Frames();
    public void set_Frames(IList`1<SentryStackFrame> value);
    [CompilerGeneratedAttribute]
public Nullable`1<InstructionAddressAdjustment> get_AddressAdjustment();
    [CompilerGeneratedAttribute]
public void set_AddressAdjustment(Nullable`1<InstructionAddressAdjustment> value);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static SentryStackTrace FromJson(JsonElement json);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SentryThread : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Crashed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryStackTrace <Stacktrace>k__BackingField;
    public Nullable`1<int> Id { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> Crashed { get; public set; }
    public Nullable`1<bool> Current { get; public set; }
    public SentryStackTrace Stacktrace { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Crashed();
    [CompilerGeneratedAttribute]
public void set_Crashed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public SentryStackTrace get_Stacktrace();
    [CompilerGeneratedAttribute]
public void set_Stacktrace(SentryStackTrace value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static SentryThread FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryTraceHeader : object {
    internal static string HttpHeaderName;
    internal static SentryTraceHeader Empty;
    [CompilerGeneratedAttribute]
private SentryId <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSampled>k__BackingField;
    public SentryId TraceId { get; }
    public SpanId SpanId { get; }
    public Nullable`1<bool> IsSampled { get; }
    public SentryTraceHeader(SentryId traceId, SpanId spanSpanId, Nullable`1<bool> isSampled);
    private static SentryTraceHeader();
    [CompilerGeneratedAttribute]
public SentryId get_TraceId();
    [CompilerGeneratedAttribute]
public SpanId get_SpanId();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSampled();
    public virtual string ToString();
    public static SentryTraceHeader Parse(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SentryTransaction : object {
    [CompilerGeneratedAttribute]
private SentryId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionNameSource <NameSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsParentSampled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Distribution>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <EndTimestamp>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Measurement> _measurements;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SampleRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SentryLevel> <Level>k__BackingField;
    [NullableAttribute("2")]
private SentryRequest _request;
    private SentryContexts _contexts;
    [NullableAttribute("2")]
private SentryUser _user;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkVersion <Sdk>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<string> _fingerprint;
    private List`1<Breadcrumb> _breadcrumbs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _extra;
    private Dictionary`2<string, string> _tags;
    private SentrySpan[] _spans;
    [NullableAttribute("2")]
private MetricsSummary _metricsSummary;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DynamicSamplingContext <DynamicSamplingContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITransactionProfiler <TransactionProfiler>k__BackingField;
    public SentryId EventId { get; private set; }
    public SpanId SpanId { get; private set; }
    [NullableAttribute("2")]
public string Origin { get; private set; }
    public Nullable`1<SpanId> ParentSpanId { get; private set; }
    public SentryId TraceId { get; private set; }
    public string Name { get; private set; }
    public TransactionNameSource NameSource { get; }
    public Nullable`1<bool> IsParentSampled { get; public set; }
    [NullableAttribute("2")]
public string Platform { get; public set; }
    [NullableAttribute("2")]
public string Release { get; public set; }
    [NullableAttribute("2")]
public string Distribution { get; public set; }
    public DateTimeOffset StartTimestamp { get; private set; }
    public Nullable`1<DateTimeOffset> EndTimestamp { get; internal set; }
    public IReadOnlyDictionary`2<string, Measurement> Measurements { get; }
    public string Operation { get; private set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Nullable`1<SpanStatus> Status { get; private set; }
    public Nullable`1<bool> IsSampled { get; internal set; }
    public Nullable`1<double> SampleRate { get; internal set; }
    public Nullable`1<SentryLevel> Level { get; public set; }
    public SentryRequest Request { get; public set; }
    public SentryContexts Contexts { get; public set; }
    public SentryUser User { get; public set; }
    [NullableAttribute("2")]
public string Environment { get; public set; }
    [NullableAttribute("2")]
private string Sentry.IEventLike.TransactionName { get; private set; }
    public SdkVersion Sdk { get; internal set; }
    public IReadOnlyList`1<string> Fingerprint { get; public set; }
    public IReadOnlyCollection`1<Breadcrumb> Breadcrumbs { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    public IReadOnlyDictionary`2<string, string> Tags { get; }
    public IReadOnlyCollection`1<SentrySpan> Spans { get; }
    public bool IsFinished { get; }
    [NullableAttribute("2")]
internal DynamicSamplingContext DynamicSamplingContext { get; internal set; }
    [NullableAttribute("2")]
internal ITransactionProfiler TransactionProfiler { get; internal set; }
    private SentryTransaction(string name, TransactionNameSource nameSource);
    public SentryTransaction(string name, string operation);
    public SentryTransaction(string name, string operation, TransactionNameSource nameSource);
    public SentryTransaction(ITransactionTracer tracer);
    [CompilerGeneratedAttribute]
public SentryId get_EventId();
    [CompilerGeneratedAttribute]
private void set_EventId(SentryId value);
    public sealed virtual SpanId get_SpanId();
    private void set_SpanId(SpanId value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
private void set_Origin(string value);
    public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    private void set_ParentSpanId(Nullable`1<SpanId> value);
    public sealed virtual SentryId get_TraceId();
    private void set_TraceId(SentryId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TransactionNameSource get_NameSource();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsParentSampled();
    [CompilerGeneratedAttribute]
public void set_IsParentSampled(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Platform();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Platform(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Release();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Release(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Distribution();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Distribution(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTimestamp();
    [CompilerGeneratedAttribute]
private void set_StartTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_EndTimestamp();
    [CompilerGeneratedAttribute]
internal void set_EndTimestamp(Nullable`1<DateTimeOffset> value);
    public sealed virtual IReadOnlyDictionary`2<string, Measurement> get_Measurements();
    public sealed virtual void SetMeasurement(string name, Measurement measurement);
    public sealed virtual string get_Operation();
    private void set_Operation(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
public void set_Description(string value);
    public sealed virtual Nullable`1<SpanStatus> get_Status();
    private void set_Status(Nullable`1<SpanStatus> value);
    public sealed virtual Nullable`1<bool> get_IsSampled();
    internal void set_IsSampled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SampleRate();
    [CompilerGeneratedAttribute]
internal void set_SampleRate(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SentryLevel> get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(Nullable`1<SentryLevel> value);
    public sealed virtual SentryRequest get_Request();
    public sealed virtual void set_Request(SentryRequest value);
    public sealed virtual SentryContexts get_Contexts();
    public sealed virtual void set_Contexts(SentryContexts value);
    public sealed virtual SentryUser get_User();
    public sealed virtual void set_User(SentryUser value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Environment(string value);
    [NullableContextAttribute("2")]
private sealed virtual override string Sentry.IEventLike.get_TransactionName();
    [NullableContextAttribute("2")]
private sealed virtual override void Sentry.IEventLike.set_TransactionName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SdkVersion get_Sdk();
    [CompilerGeneratedAttribute]
internal void set_Sdk(SdkVersion value);
    public sealed virtual IReadOnlyList`1<string> get_Fingerprint();
    public sealed virtual void set_Fingerprint(IReadOnlyList`1<string> value);
    public sealed virtual IReadOnlyCollection`1<Breadcrumb> get_Breadcrumbs();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Extra();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Tags();
    public IReadOnlyCollection`1<SentrySpan> get_Spans();
    public sealed virtual bool get_IsFinished();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal DynamicSamplingContext get_DynamicSamplingContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_DynamicSamplingContext(DynamicSamplingContext value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ITransactionProfiler get_TransactionProfiler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TransactionProfiler(ITransactionProfiler value);
    internal static SentrySpan[] FromTracerSpans(ITransactionTracer tracer);
    public sealed virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    public sealed virtual void SetExtra(string key, object value);
    public sealed virtual void SetTag(string key, string value);
    public sealed virtual void UnsetTag(string key);
    public sealed virtual SentryTraceHeader GetTraceHeader();
    internal void Redact();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    public static SentryTransaction FromJson(JsonElement json);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SentryUser : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<SentryUser> <PropertyChanged>k__BackingField;
    private string _id;
    private string _username;
    private string _email;
    private string _ipAddress;
    private string _segment;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _other;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<SentryUser> PropertyChanged { get; internal set; }
    public string Id { get; public set; }
    public string Username { get; public set; }
    public string Email { get; public set; }
    public string IpAddress { get; public set; }
    [ObsoleteAttribute("This property is deprecated and will be removed in a future version.")]
public string Segment { get; public set; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> Other { get; public set; }
    [CompilerGeneratedAttribute]
internal Action`1<SentryUser> get_PropertyChanged();
    [CompilerGeneratedAttribute]
internal void set_PropertyChanged(Action`1<SentryUser> value);
    public string get_Id();
    public void set_Id(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Email();
    public void set_Email(string value);
    public string get_IpAddress();
    public void set_IpAddress(string value);
    public string get_Segment();
    public void set_Segment(string value);
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_Other();
    [NullableContextAttribute("1")]
public void set_Other(IDictionary`2<string, string> value);
    [NullableContextAttribute("1")]
public SentryUser Clone();
    internal void CopyTo(SentryUser user);
    internal bool HasAnyData();
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    [NullableContextAttribute("1")]
public static SentryUser FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.SentryValues`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Values>k__BackingField;
    public IEnumerable`1<T> Values { get; }
    public SentryValues`1(IEnumerable`1<T> values);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Values();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
public enum Sentry.SessionEndStatus : Enum {
    public int value__;
    public static SessionEndStatus Exited;
    public static SessionEndStatus Crashed;
    public static SessionEndStatus Abnormal;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SessionUpdate : object {
    [CompilerGeneratedAttribute]
private SentryId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DistinctId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitial>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SessionEndStatus> <EndStatus>k__BackingField;
    public SentryId Id { get; }
    public string DistinctId { get; }
    public DateTimeOffset StartTimestamp { get; }
    [NullableAttribute("1")]
public string Release { get; }
    public string Environment { get; }
    public string IpAddress { get; }
    public string UserAgent { get; }
    public int ErrorCount { get; }
    public bool IsInitial { get; }
    public DateTimeOffset Timestamp { get; }
    public int SequenceNumber { get; }
    public TimeSpan Duration { get; }
    public Nullable`1<SessionEndStatus> EndStatus { get; }
    public SessionUpdate(SentryId id, string distinctId, DateTimeOffset startTimestamp, string release, string environment, string ipAddress, string userAgent, int errorCount, bool isInitial, DateTimeOffset timestamp, int sequenceNumber, Nullable`1<SessionEndStatus> endStatus);
    [NullableContextAttribute("1")]
public SessionUpdate(ISentrySession session, bool isInitial, DateTimeOffset timestamp, int sequenceNumber, Nullable`1<SessionEndStatus> endStatus);
    [NullableContextAttribute("1")]
public SessionUpdate(SessionUpdate sessionUpdate, bool isInitial, Nullable`1<SessionEndStatus> endStatus);
    [NullableContextAttribute("1")]
public SessionUpdate(SessionUpdate sessionUpdate, bool isInitial);
    [CompilerGeneratedAttribute]
public sealed virtual SentryId get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DistinctId();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTimestamp();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Release();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual string get_IpAddress();
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ErrorCount();
    [CompilerGeneratedAttribute]
public bool get_IsInitial();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public int get_SequenceNumber();
    public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public Nullable`1<SessionEndStatus> get_EndStatus();
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static SessionUpdate FromJson(JsonElement json);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.SpanContext : object {
    [CompilerGeneratedAttribute]
private SpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanId> <ParentSpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryId <TraceId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSampled>k__BackingField;
    [CompilerGeneratedAttribute]
private Instrumenter <Instrumenter>k__BackingField;
    private string _origin;
    public SpanId SpanId { get; }
    public Nullable`1<SpanId> ParentSpanId { get; }
    public SentryId TraceId { get; }
    [NullableAttribute("1")]
public string Operation { get; public set; }
    public string Description { get; }
    public Nullable`1<SpanStatus> Status { get; }
    public Nullable`1<bool> IsSampled { get; }
    public Instrumenter Instrumenter { get; internal set; }
    public string Origin { get; internal set; }
    [NullableContextAttribute("1")]
public SpanContext(string operation, Nullable`1<SpanId> spanId, Nullable`1<SpanId> parentSpanId, Nullable`1<SentryId> traceId, string description, Nullable`1<SpanStatus> status, Nullable`1<bool> isSampled);
    [CompilerGeneratedAttribute]
public sealed virtual SpanId get_SpanId();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    [CompilerGeneratedAttribute]
public sealed virtual SentryId get_TraceId();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Operation();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanStatus> get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsSampled();
    [CompilerGeneratedAttribute]
public Instrumenter get_Instrumenter();
    [CompilerGeneratedAttribute]
internal void set_Instrumenter(Instrumenter value);
    public sealed virtual string get_Origin();
    internal void set_Origin(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.SpanDataExtensions : object {
    [ExtensionAttribute]
public static void SetMeasurement(ISpanData spanData, string name, int value, MeasurementUnit unit);
    [ExtensionAttribute]
public static void SetMeasurement(ISpanData spanData, string name, long value, MeasurementUnit unit);
    [ExtensionAttribute]
public static void SetMeasurement(ISpanData spanData, string name, ulong value, MeasurementUnit unit);
    [ExtensionAttribute]
public static void SetMeasurement(ISpanData spanData, string name, double value, MeasurementUnit unit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Sentry.SpanExtensions : object {
    [ExtensionAttribute]
public static ISpan StartChild(ISpan span, string operation, string description);
    [ExtensionAttribute]
internal static ISpan StartChild(ISpan span, SpanContext context);
    [ExtensionAttribute]
public static ITransactionTracer GetTransaction(ISpan span);
    [ExtensionAttribute]
internal static ISpan GetDbParentSpan(ISpan span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Sentry.SpanId : ValueType {
    private static Char[] HexChars;
    private static RandomValuesFactory Random;
    private long _value;
    public static SpanId Empty;
    public SpanId(string value);
    public SpanId(long value);
    private static SpanId();
    private long GetValue();
    public sealed virtual bool Equals(SpanId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static SpanId Create();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger _);
    public static SpanId Parse(string value);
    public static SpanId FromJson(JsonElement json);
    public static bool op_Equality(SpanId left, SpanId right);
    public static bool op_Inequality(SpanId left, SpanId right);
    public static string op_Implicit(SpanId id);
}
public enum Sentry.SpanStatus : Enum {
    public int value__;
    public static SpanStatus Ok;
    public static SpanStatus DeadlineExceeded;
    public static SpanStatus Unauthenticated;
    public static SpanStatus PermissionDenied;
    public static SpanStatus NotFound;
    public static SpanStatus ResourceExhausted;
    public static SpanStatus InvalidArgument;
    public static SpanStatus Unimplemented;
    public static SpanStatus Unavailable;
    public static SpanStatus InternalError;
    public static SpanStatus UnknownError;
    public static SpanStatus Cancelled;
    public static SpanStatus AlreadyExists;
    public static SpanStatus FailedPrecondition;
    public static SpanStatus Aborted;
    public static SpanStatus OutOfRange;
    public static SpanStatus DataLoss;
}
internal static class Sentry.SpanStatusConverter : object {
    [NullableContextAttribute("1")]
public static SpanStatus FromException(Exception exception);
    public static SpanStatus FromHttpStatusCode(int code);
    public static SpanStatus FromHttpStatusCode(HttpStatusCode code);
    public static SpanStatus FromGrpcStatusCode(int code);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.SpanTracer : object {
    private IHub _hub;
    private SentryStopwatch _stopwatch;
    private Instrumenter _instrumenter;
    [CompilerGeneratedAttribute]
private TransactionTracer <Transaction>k__BackingField;
    private Lazy`1<MetricsSummaryAggregator> _metricsSummary;
    [CompilerGeneratedAttribute]
private SpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanId> <ParentSpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private SentryId <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <EndTimestamp>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, Measurement> <InternalMeasurements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSentryRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSampled>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> <InternalTags>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, object> _data;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`1<bool> <IsFiltered>k__BackingField;
    [NullableAttribute("2")]
private string _origin;
    private bool Sentry.IBaseTracer.IsOtelInstrumenter { get; }
    internal TransactionTracer Transaction { get; }
    internal MetricsSummaryAggregator MetricsSummary { get; }
    internal bool HasMetrics { get; }
    public SpanId SpanId { get; internal set; }
    public Nullable`1<SpanId> ParentSpanId { get; internal set; }
    public SentryId TraceId { get; }
    public DateTimeOffset StartTimestamp { get; internal set; }
    public Nullable`1<DateTimeOffset> EndTimestamp { get; internal set; }
    public bool IsFinished { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, Measurement> InternalMeasurements { get; private set; }
    public IReadOnlyDictionary`2<string, Measurement> Measurements { get; }
    public string Operation { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Nullable`1<SpanStatus> Status { get; public set; }
    internal bool IsSentryRequest { get; internal set; }
    public Nullable`1<bool> IsSampled { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ConcurrentDictionary`2<string, string> InternalTags { get; private set; }
    public IReadOnlyDictionary`2<string, string> Tags { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    [NullableAttribute("2")]
internal Func`1<bool> IsFiltered { get; internal set; }
    [NullableAttribute("2")]
public string Origin { get; internal set; }
    public SpanTracer(IHub hub, TransactionTracer transaction, Nullable`1<SpanId> parentSpanId, SentryId traceId, string operation);
    internal SpanTracer(IHub hub, TransactionTracer transaction, SpanId spanId, Nullable`1<SpanId> parentSpanId, SentryId traceId, string operation, Instrumenter instrumenter);
    private sealed virtual override bool Sentry.IBaseTracer.get_IsOtelInstrumenter();
    [CompilerGeneratedAttribute]
internal TransactionTracer get_Transaction();
    internal MetricsSummaryAggregator get_MetricsSummary();
    internal bool get_HasMetrics();
    [CompilerGeneratedAttribute]
public sealed virtual SpanId get_SpanId();
    [CompilerGeneratedAttribute]
internal void set_SpanId(SpanId value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    [CompilerGeneratedAttribute]
internal void set_ParentSpanId(Nullable`1<SpanId> value);
    [CompilerGeneratedAttribute]
public sealed virtual SentryId get_TraceId();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTimestamp();
    [CompilerGeneratedAttribute]
internal void set_StartTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_EndTimestamp();
    [CompilerGeneratedAttribute]
internal void set_EndTimestamp(Nullable`1<DateTimeOffset> value);
    public sealed virtual bool get_IsFinished();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Measurement> get_InternalMeasurements();
    [CompilerGeneratedAttribute]
private void set_InternalMeasurements(Dictionary`2<string, Measurement> value);
    public sealed virtual IReadOnlyDictionary`2<string, Measurement> get_Measurements();
    public sealed virtual void SetMeasurement(string name, Measurement measurement);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Operation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Operation(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanStatus> get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Status(Nullable`1<SpanStatus> value);
    [CompilerGeneratedAttribute]
internal bool get_IsSentryRequest();
    [CompilerGeneratedAttribute]
internal void set_IsSentryRequest(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsSampled();
    [CompilerGeneratedAttribute]
internal void set_IsSampled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, string> get_InternalTags();
    [CompilerGeneratedAttribute]
private void set_InternalTags(ConcurrentDictionary`2<string, string> value);
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Tags();
    public sealed virtual void SetTag(string key, string value);
    public sealed virtual void UnsetTag(string key);
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Extra();
    public sealed virtual void SetExtra(string key, object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Func`1<bool> get_IsFiltered();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_IsFiltered(Func`1<bool> value);
    public sealed virtual ISpan StartChild(string operation);
    internal void Unfinish();
    public sealed virtual void Finish();
    public sealed virtual void Finish(SpanStatus status);
    public sealed virtual void Finish(Exception exception, SpanStatus status);
    public sealed virtual void Finish(Exception exception);
    public sealed virtual SentryTraceHeader GetTraceHeader();
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
internal void set_Origin(string value);
}
public enum Sentry.StackTraceMode : Enum {
    public int value__;
    public static StackTraceMode Original;
    public static StackTraceMode Enhanced;
}
public enum Sentry.StartupTimeDetectionMode : Enum {
    public int value__;
    public static StartupTimeDetectionMode None;
    public static StartupTimeDetectionMode Fast;
    public static StartupTimeDetectionMode Best;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.StreamAttachmentContent : object {
    private Stream _stream;
    public StreamAttachmentContent(Stream stream);
    public sealed virtual Stream GetStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("Sentry.SubstringOrRegexPatternTypeConverter")]
public class Sentry.SubstringOrRegexPattern : object {
    [NullableAttribute("2")]
private Regex _regex;
    [NullableAttribute("2")]
private string _substring;
    private StringComparison _stringComparison;
    [NullableAttribute("2")]
internal Regex Regex { get; }
    public SubstringOrRegexPattern(string substringOrRegexPattern, StringComparison comparison);
    public SubstringOrRegexPattern(Regex regex);
    public static SubstringOrRegexPattern op_Implicit(string substringOrRegexPattern);
    public static SubstringOrRegexPattern op_Implicit(Regex regex);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
internal Regex get_Regex();
    internal bool IsMatch(string str);
    private static Regex TryParseRegex(string pattern, StringComparison comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Sentry.SubstringOrRegexPatternExtensions : object {
    [ExtensionAttribute]
public static bool ContainsMatch(IEnumerable`1<SubstringOrRegexPattern> targets, string str);
    [ExtensionAttribute]
public static IList`1<T> WithConfigBinding(IList`1<T> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.SubstringOrRegexPatternTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Sentry.Timing : object {
    internal static string OperationName;
    public static string MetricsOrigin;
    private SentryOptions _options;
    private MetricAggregator _metricAggregator;
    private string _key;
    private Duration _unit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _tags;
    internal Stopwatch _stopwatch;
    private ISpan _span;
    internal DateTime _startTime;
    internal Timing(MetricAggregator metricAggregator, IMetricHub metricHub, SentryOptions options, string key, Duration unit, IDictionary`2<string, string> tags, int stackLevel);
    public sealed virtual void Dispose();
    internal void DisposeInternal(TimeSpan elapsed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.TransactionContext : SpanContext {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionNameSource <NameSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsParentSampled>k__BackingField;
    public string Name { get; public set; }
    public TransactionNameSource NameSource { get; public set; }
    public Nullable`1<bool> IsParentSampled { get; }
    public TransactionContext(string name, string operation, Nullable`1<SpanId> spanId, Nullable`1<SpanId> parentSpanId, Nullable`1<SentryId> traceId, string description, Nullable`1<SpanStatus> status, Nullable`1<bool> isSampled, Nullable`1<bool> isParentSampled, TransactionNameSource nameSource);
    internal TransactionContext(string name, string operation, SentryTraceHeader traceHeader);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TransactionNameSource get_NameSource();
    [CompilerGeneratedAttribute]
public void set_NameSource(TransactionNameSource value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsParentSampled();
}
public enum Sentry.TransactionNameSource : Enum {
    public int value__;
    public static TransactionNameSource Custom;
    public static TransactionNameSource Url;
    public static TransactionNameSource Route;
    public static TransactionNameSource View;
    public static TransactionNameSource Component;
    public static TransactionNameSource Task;
}
[ExtensionAttribute]
internal static class Sentry.TransactionNameSourceExtensions : object {
    [ExtensionAttribute]
public static bool IsHighQuality(TransactionNameSource transactionNameSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.TransactionSamplingContext : object {
    [CompilerGeneratedAttribute]
private ITransactionContext <TransactionContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <CustomSamplingContext>k__BackingField;
    public ITransactionContext TransactionContext { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> CustomSamplingContext { get; }
    public TransactionSamplingContext(ITransactionContext transactionContext, IReadOnlyDictionary`2<string, object> customSamplingContext);
    [CompilerGeneratedAttribute]
public ITransactionContext get_TransactionContext();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_CustomSamplingContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.TransactionTracer : object {
    private IHub _hub;
    [NullableAttribute("2")]
private SentryOptions _options;
    [NullableAttribute("2")]
private Timer _idleTimer;
    private long _cancelIdleTimeout;
    private SentryStopwatch _stopwatch;
    private Instrumenter _instrumenter;
    [CompilerGeneratedAttribute]
private Nullable`1<SpanId> <ParentSpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionNameSource <NameSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsParentSampled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Distribution>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <EndTimestamp>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SampleRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SentryLevel> <Level>k__BackingField;
    [NullableAttribute("2")]
private SentryRequest _request;
    private SentryContexts _contexts;
    [NullableAttribute("2")]
private SentryUser _user;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkVersion <Sdk>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<string> _fingerprint;
    private ConcurrentBag`1<Breadcrumb> _breadcrumbs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, object> _extra;
    private ConcurrentDictionary`2<string, string> _tags;
    private ConcurrentBag`1<ISpan> _spans;
    private ConcurrentDictionary`2<string, Measurement> _measurements;
    private Lazy`1<MetricsSummaryAggregator> _metricsSummary;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DynamicSamplingContext <DynamicSamplingContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITransactionProfiler <TransactionProfiler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSentryRequest>k__BackingField;
    private LastActiveSpanTracker _activeSpanTracker;
    private bool Sentry.IBaseTracer.IsOtelInstrumenter { get; }
    public SpanId SpanId { get; private set; }
    public Nullable`1<SpanId> ParentSpanId { get; }
    public SentryId TraceId { get; private set; }
    public string Name { get; public set; }
    public TransactionNameSource NameSource { get; public set; }
    public Nullable`1<bool> IsParentSampled { get; public set; }
    [NullableAttribute("2")]
public string Platform { get; public set; }
    [NullableAttribute("2")]
public string Release { get; public set; }
    [NullableAttribute("2")]
public string Distribution { get; public set; }
    public DateTimeOffset StartTimestamp { get; internal set; }
    public Nullable`1<DateTimeOffset> EndTimestamp { get; internal set; }
    public string Operation { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Nullable`1<SpanStatus> Status { get; public set; }
    public Nullable`1<bool> IsSampled { get; internal set; }
    public Nullable`1<double> SampleRate { get; internal set; }
    public Nullable`1<SentryLevel> Level { get; public set; }
    public SentryRequest Request { get; public set; }
    public SentryContexts Contexts { get; public set; }
    public SentryUser User { get; public set; }
    [NullableAttribute("2")]
public string Environment { get; public set; }
    [NullableAttribute("2")]
private string Sentry.IEventLike.TransactionName { get; private set; }
    public SdkVersion Sdk { get; internal set; }
    public IReadOnlyList`1<string> Fingerprint { get; public set; }
    public IReadOnlyCollection`1<Breadcrumb> Breadcrumbs { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extra { get; }
    public IReadOnlyDictionary`2<string, string> Tags { get; }
    public IReadOnlyCollection`1<ISpan> Spans { get; }
    public IReadOnlyDictionary`2<string, Measurement> Measurements { get; }
    internal MetricsSummaryAggregator MetricsSummary { get; }
    internal bool HasMetrics { get; }
    public bool IsFinished { get; }
    [NullableAttribute("2")]
internal DynamicSamplingContext DynamicSamplingContext { get; internal set; }
    [NullableAttribute("2")]
internal ITransactionProfiler TransactionProfiler { get; internal set; }
    internal bool IsSentryRequest { get; internal set; }
    [NullableAttribute("2")]
public string Origin { get; internal set; }
    public TransactionTracer(IHub hub, ITransactionContext context);
    internal TransactionTracer(IHub hub, string name, string operation, TransactionNameSource nameSource);
    internal TransactionTracer(IHub hub, ITransactionContext context, Nullable`1<TimeSpan> idleTimeout);
    private sealed virtual override bool Sentry.IBaseTracer.get_IsOtelInstrumenter();
    public sealed virtual SpanId get_SpanId();
    private void set_SpanId(SpanId value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SpanId> get_ParentSpanId();
    public sealed virtual SentryId get_TraceId();
    private void set_TraceId(SentryId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TransactionNameSource get_NameSource();
    [CompilerGeneratedAttribute]
public void set_NameSource(TransactionNameSource value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsParentSampled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsParentSampled(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Platform();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Platform(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Release();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Release(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Distribution();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Distribution(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTimestamp();
    [CompilerGeneratedAttribute]
internal void set_StartTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_EndTimestamp();
    [CompilerGeneratedAttribute]
internal void set_EndTimestamp(Nullable`1<DateTimeOffset> value);
    public sealed virtual string get_Operation();
    public sealed virtual void set_Operation(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    public sealed virtual Nullable`1<SpanStatus> get_Status();
    public sealed virtual void set_Status(Nullable`1<SpanStatus> value);
    public sealed virtual Nullable`1<bool> get_IsSampled();
    internal void set_IsSampled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SampleRate();
    [CompilerGeneratedAttribute]
internal void set_SampleRate(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SentryLevel> get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(Nullable`1<SentryLevel> value);
    public sealed virtual SentryRequest get_Request();
    public sealed virtual void set_Request(SentryRequest value);
    public sealed virtual SentryContexts get_Contexts();
    public sealed virtual void set_Contexts(SentryContexts value);
    public sealed virtual SentryUser get_User();
    public sealed virtual void set_User(SentryUser value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Environment(string value);
    [NullableContextAttribute("2")]
private sealed virtual override string Sentry.IEventLike.get_TransactionName();
    [NullableContextAttribute("2")]
private sealed virtual override void Sentry.IEventLike.set_TransactionName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SdkVersion get_Sdk();
    [CompilerGeneratedAttribute]
internal void set_Sdk(SdkVersion value);
    public sealed virtual IReadOnlyList`1<string> get_Fingerprint();
    public sealed virtual void set_Fingerprint(IReadOnlyList`1<string> value);
    public sealed virtual IReadOnlyCollection`1<Breadcrumb> get_Breadcrumbs();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Extra();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Tags();
    public sealed virtual IReadOnlyCollection`1<ISpan> get_Spans();
    public sealed virtual IReadOnlyDictionary`2<string, Measurement> get_Measurements();
    internal MetricsSummaryAggregator get_MetricsSummary();
    internal bool get_HasMetrics();
    public sealed virtual bool get_IsFinished();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal DynamicSamplingContext get_DynamicSamplingContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_DynamicSamplingContext(DynamicSamplingContext value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ITransactionProfiler get_TransactionProfiler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TransactionProfiler(ITransactionProfiler value);
    [CompilerGeneratedAttribute]
internal bool get_IsSentryRequest();
    [CompilerGeneratedAttribute]
internal void set_IsSentryRequest(bool value);
    public sealed virtual void AddBreadcrumb(Breadcrumb breadcrumb);
    public sealed virtual void SetExtra(string key, object value);
    public sealed virtual void SetTag(string key, string value);
    public sealed virtual void UnsetTag(string key);
    public sealed virtual void SetMeasurement(string name, Measurement measurement);
    public sealed virtual ISpan StartChild(string operation);
    internal ISpan StartChild(Nullable`1<SpanId> spanId, SpanId parentSpanId, string operation, Instrumenter instrumenter);
    private void AddChildSpan(SpanTracer span);
    [NullableContextAttribute("2")]
public sealed virtual ISpan GetLastActiveSpan();
    public sealed virtual void Finish();
    public sealed virtual void Finish(SpanStatus status);
    public sealed virtual void Finish(Exception exception, SpanStatus status);
    public sealed virtual void Finish(Exception exception);
    public sealed virtual SentryTraceHeader GetTraceHeader();
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
internal void set_Origin(string value);
    private void ReleaseSpans();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__133_0(object state);
    [CompilerGeneratedAttribute]
private void <Finish>b__145_0(Scope scope);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Sentry.UserFeedback : object {
    [CompilerGeneratedAttribute]
private SentryId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comments>k__BackingField;
    public SentryId EventId { get; }
    public string Name { get; }
    public string Email { get; }
    public string Comments { get; }
    public UserFeedback(SentryId eventId, string name, string email, string comments);
    [CompilerGeneratedAttribute]
public SentryId get_EventId();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public string get_Comments();
    [NullableContextAttribute("1")]
public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    [NullableContextAttribute("1")]
public static UserFeedback FromJson(JsonElement json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Sentry.ViewHierarchy : object {
    [CompilerGeneratedAttribute]
private string <RenderingSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ViewHierarchyNode> <Windows>k__BackingField;
    public string RenderingSystem { get; public set; }
    public List`1<ViewHierarchyNode> Windows { get; }
    public ViewHierarchy(string renderingSystem);
    [CompilerGeneratedAttribute]
public string get_RenderingSystem();
    [CompilerGeneratedAttribute]
public void set_RenderingSystem(string value);
    [CompilerGeneratedAttribute]
public List`1<ViewHierarchyNode> get_Windows();
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
public class Sentry.ViewHierarchyAttachment : SentryAttachment {
    [NullableContextAttribute("1")]
public ViewHierarchyAttachment(IAttachmentContent content);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Sentry.ViewHierarchyNode : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ViewHierarchyNode> _children;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    public List`1<ViewHierarchyNode> Children { get; public set; }
    protected ViewHierarchyNode(string type);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    public List`1<ViewHierarchyNode> get_Children();
    public void set_Children(List`1<ViewHierarchyNode> value);
    public sealed virtual void WriteTo(Utf8JsonWriter writer, IDiagnosticLogger logger);
    protected abstract virtual void WriteAdditionalProperties(Utf8JsonWriter writer, IDiagnosticLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class SentryExceptionExtensions : object {
    [ExtensionAttribute]
public static void AddSentryTag(Exception ex, string name, string value);
    [ExtensionAttribute]
public static void AddSentryContext(Exception ex, string name, IReadOnlyDictionary`2<string, object> data);
    [ExtensionAttribute]
public static void SetSentryMechanism(Exception ex, string type, string description, Nullable`1<bool> handled);
}
internal static class System.Collections.Generic.Enumerable.EnumerableIList : object {
    [NullableContextAttribute("1")]
public static EnumerableIList`1<T> Create(IList`1<T> list);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.Enumerable.EnumerableIList`1 : ValueType {
    private IList`1<T> _list;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static EnumerableIList`1<T> Empty;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public EnumerableIList`1(IList`1<T> list);
    private static EnumerableIList`1();
    public sealed virtual EnumeratorIList`1<T> GetEnumerator();
    public static EnumerableIList`1<T> op_Implicit(List`1<T> list);
    public static EnumerableIList`1<T> op_Implicit(T[] array);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Collections.Generic.Enumerable.EnumeratorIList`1 : ValueType {
    private IList`1<T> _list;
    private int _index;
    public T Current { get; }
    [NullableAttribute("2")]
private object System.Collections.IEnumerator.Current { get; }
    public EnumeratorIList`1(IList`1<T> list);
    public sealed virtual T get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Reset();
}
internal interface System.Collections.Generic.Enumerable.IEnumerableIList`1 {
    public abstract virtual EnumeratorIList`1<T> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal class System.Diagnostics.EnhancedStackFrame : StackFrame {
    [NullableAttribute("2")]
private string _fileName;
    private int _lineNumber;
    private int _colNumber;
    [CompilerGeneratedAttribute]
private StackFrame <StackFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolvedMethod <MethodInfo>k__BackingField;
    public StackFrame StackFrame { get; }
    public bool IsRecursive { get; internal set; }
    public ResolvedMethod MethodInfo { get; }
    internal EnhancedStackFrame(StackFrame stackFrame, ResolvedMethod methodInfo, string fileName, int lineNumber, int colNumber);
    [CompilerGeneratedAttribute]
public StackFrame get_StackFrame();
    public bool get_IsRecursive();
    internal void set_IsRecursive(bool value);
    [CompilerGeneratedAttribute]
public ResolvedMethod get_MethodInfo();
    internal bool IsEquivalent(ResolvedMethod methodInfo, string fileName, int lineNumber, int colNumber);
    public virtual int GetFileColumnNumber();
    public virtual int GetFileLineNumber();
    [NullableContextAttribute("2")]
public virtual string GetFileName();
    public virtual int GetILOffset();
    [NullableContextAttribute("2")]
public virtual MethodBase GetMethod();
    public virtual int GetNativeOffset();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal class System.Diagnostics.EnhancedStackTrace : StackTrace {
    private List`1<EnhancedStackFrame> _frames;
    [NullableAttribute("2")]
private static Type StackTraceHiddenAttributeType;
    [NullableAttribute("2")]
private static Type AsyncIteratorStateMachineAttributeType;
    public int FrameCount { get; }
    public EnhancedStackTrace(Exception e);
    public EnhancedStackTrace(StackTrace stackTrace);
    private static EnhancedStackTrace();
    public static EnhancedStackTrace Current();
    public virtual int get_FrameCount();
    public virtual StackFrame GetFrame(int index);
    public virtual StackFrame[] GetFrames();
    public virtual string ToString();
    internal void Append(StringBuilder sb);
    private EnumerableIList`1<EnhancedStackFrame> GetEnumerator();
    private sealed virtual override IEnumerator`1<EnhancedStackFrame> System.Collections.Generic.IEnumerable<System.Diagnostics.EnhancedStackFrame>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static string TryGetFullPath(string filePath);
    private static List`1<EnhancedStackFrame> GetFrames(Exception exception);
    public static List`1<EnhancedStackFrame> GetFrames(StackTrace stackTrace);
    public static ResolvedMethod GetMethodDisplayString(MethodBase originMethod);
    private static bool IsFSharpAsync(MethodBase method);
    private static bool TryResolveGeneratedName(MethodBase& method, Type& type, String& methodName, String& subMethodName, GeneratedNameKind& kind, Nullable`1& ordinal);
    private static bool TryResolveSourceMethod(IEnumerable`1<MethodBase> candidateMethods, GeneratedNameKind kind, string matchHint, MethodBase& method, Type& type, Nullable`1& ordinal);
    private static void GetOrdinal(MethodBase method, Nullable`1& ordinal);
    private static string GetMatchHint(GeneratedNameKind kind, MethodBase method);
    internal static bool TryParseGeneratedName(string name, GeneratedNameKind& kind, Int32& openBracketOffset, Int32& closeBracketOffset);
    private static int IndexOfBalancedParenthesis(string str, int openingOffset, char closing);
    private static string GetPrefix(ParameterInfo parameter);
    private static ResolvedParameter GetParameter(ParameterInfo parameter);
    private static ResolvedParameter GetValueTupleParameter(IList`1<string> tupleNames, string prefix, string name, Type parameterType);
    private static string GetValueTupleParameterName(IList`1<string> tupleNames, Type parameterType);
    private static bool ShowInStackTrace(MethodBase method);
    private static bool IsStackTraceHidden(MemberInfo memberInfo);
    private static bool TryResolveStateMachineMethod(MethodBase& method, Type& declaringType);
    [CompilerGeneratedAttribute]
internal static MethodInfo[] <TryResolveStateMachineMethod>g__GetDeclaredMethods|33_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Diagnostics.ExceptionExtensions : object {
    [NullableAttribute("2")]
private static FieldInfo stackTraceString;
    private static ExceptionExtensions();
    [ExtensionAttribute]
private static void SetStackTracesString(Exception exception, string value);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static T Demystify(T exception);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
public static string ToStringDemystified(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal class System.Diagnostics.Internal.ILReader : object {
    private static OpCode[] singleByteOpCode;
    private static OpCode[] doubleByteOpCode;
    private Byte[] _cil;
    private int ptr;
    [CompilerGeneratedAttribute]
private OpCode <OpCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MetadataToken>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MemberInfo <Operand>k__BackingField;
    public OpCode OpCode { get; private set; }
    public int MetadataToken { get; private set; }
    [NullableAttribute("2")]
public MemberInfo Operand { get; private set; }
    public ILReader(Byte[] cil);
    private static ILReader();
    [CompilerGeneratedAttribute]
public OpCode get_OpCode();
    [CompilerGeneratedAttribute]
private void set_OpCode(OpCode value);
    [CompilerGeneratedAttribute]
public int get_MetadataToken();
    [CompilerGeneratedAttribute]
private void set_MetadataToken(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MemberInfo get_Operand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Operand(MemberInfo value);
    public bool Read(MethodBase methodInfo);
    private OpCode ReadOpCode();
    private MemberInfo ReadOperand(OpCode code, MethodBase methodInfo);
    private byte ReadByte();
    private int ReadInt();
    private static FieldInfo[] GetOpCodeFields();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal class System.Diagnostics.Internal.PortablePdbReader : object {
    private Dictionary`2<string, MetadataReaderProvider> _cache;
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3000:Avoid accessing Assembly file path when publishing as a single file")]
public void PopulateStackFrame(StackFrame frameInfo, MethodBase method, int IlOffset, String& fileName, Int32& row, Int32& column);
    private MetadataReader GetMetadataReader(string assemblyPath);
    private static string GetPdbPath(string assemblyPath);
    private static bool IsPortable(string pdbPath);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal static class System.Diagnostics.Internal.ReflectionHelper : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsValueTuple(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal class System.Diagnostics.ResolvedMethod : object {
    [CompilerGeneratedAttribute]
private MethodBase <MethodBase>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLambda>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolvedParameter <ReturnParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GenericArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <ResolvedGenericArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodBase <SubMethodBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubMethod>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EnumerableIList`1<ResolvedParameter> <Parameters>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EnumerableIList`1<ResolvedParameter> <SubMethodParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecurseCount>k__BackingField;
    public MethodBase MethodBase { get; public set; }
    public Type DeclaringType { get; public set; }
    public bool IsAsync { get; public set; }
    public bool IsLambda { get; public set; }
    public ResolvedParameter ReturnParameter { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<int> Ordinal { get; public set; }
    public string GenericArguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] ResolvedGenericArguments { get; public set; }
    public MethodBase SubMethodBase { get; public set; }
    public string SubMethod { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EnumerableIList`1<ResolvedParameter> Parameters { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EnumerableIList`1<ResolvedParameter> SubMethodParameters { get; public set; }
    public int RecurseCount { get; internal set; }
    [CompilerGeneratedAttribute]
public MethodBase get_MethodBase();
    [CompilerGeneratedAttribute]
public void set_MethodBase(MethodBase value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLambda();
    [CompilerGeneratedAttribute]
public void set_IsLambda(bool value);
    [CompilerGeneratedAttribute]
public ResolvedParameter get_ReturnParameter();
    [CompilerGeneratedAttribute]
public void set_ReturnParameter(ResolvedParameter value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Ordinal();
    [CompilerGeneratedAttribute]
public void set_Ordinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(string value);
    [CompilerGeneratedAttribute]
public Type[] get_ResolvedGenericArguments();
    [CompilerGeneratedAttribute]
public void set_ResolvedGenericArguments(Type[] value);
    [CompilerGeneratedAttribute]
public MethodBase get_SubMethodBase();
    [CompilerGeneratedAttribute]
public void set_SubMethodBase(MethodBase value);
    [CompilerGeneratedAttribute]
public string get_SubMethod();
    [CompilerGeneratedAttribute]
public void set_SubMethod(string value);
    [CompilerGeneratedAttribute]
public EnumerableIList`1<ResolvedParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(EnumerableIList`1<ResolvedParameter> value);
    [CompilerGeneratedAttribute]
public EnumerableIList`1<ResolvedParameter> get_SubMethodParameters();
    [CompilerGeneratedAttribute]
public void set_SubMethodParameters(EnumerableIList`1<ResolvedParameter> value);
    [CompilerGeneratedAttribute]
public int get_RecurseCount();
    [CompilerGeneratedAttribute]
internal void set_RecurseCount(int value);
    [NullableContextAttribute("1")]
internal bool IsSequentialEquivalent(ResolvedMethod obj);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public StringBuilder Append(StringBuilder builder);
    [NullableContextAttribute("1")]
public StringBuilder Append(StringBuilder builder, bool fullName);
    [NullableContextAttribute("1")]
private StringBuilder AppendDeclaringTypeName(StringBuilder builder, bool fullName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal class System.Diagnostics.ResolvedParameter : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResolvedType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamicType>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; public set; }
    public Type ResolvedType { get; public set; }
    [NullableAttribute("2")]
public string Prefix { get; public set; }
    public bool IsDynamicType { get; public set; }
    public ResolvedParameter(Type resolvedType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_ResolvedType();
    [CompilerGeneratedAttribute]
public void set_ResolvedType(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Prefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamicType();
    [CompilerGeneratedAttribute]
public void set_IsDynamicType(bool value);
    public virtual string ToString();
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002:Avoid calling members marked with 'RequiresAssemblyFilesAttribute' when publishing as a single-file")]
public StringBuilder Append(StringBuilder sb);
    protected virtual void AppendTypeName(StringBuilder sb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal static class System.Diagnostics.StringBuilderExtentions : object {
    [ExtensionAttribute]
public static StringBuilder AppendDemystified(StringBuilder builder, Exception exception);
    [ExtensionAttribute]
private static void AppendInnerException(StringBuilder builder, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal static class System.Diagnostics.TypeNameHelper : object {
    public static Dictionary`2<Type, string> BuiltInTypeNames;
    public static Dictionary`2<string, string> FSharpTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames);
    [ExtensionAttribute]
public static StringBuilder AppendTypeDisplayName(StringBuilder builder, Type type, bool fullName, bool includeGenericParameterNames);
    public static string GetTypeNameForGenericType(Type type);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002:Avoid calling members marked with 'RequiresAssemblyFilesAttribute' when publishing as a single-file")]
private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions options);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002:Avoid calling members marked with 'RequiresAssemblyFilesAttribute' when publishing as a single-file")]
private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This class should be avoided when compiling for AOT.")]
internal class System.Diagnostics.ValueTupleResolvedParameter : ResolvedParameter {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <TupleNames>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> TupleNames { get; }
    public ValueTupleResolvedParameter(Type resolvedType, IList`1<string> tupleNames);
    [CompilerGeneratedAttribute]
public IList`1<string> get_TupleNames();
    protected virtual void AppendTypeName(StringBuilder sb);
    private void AppendValueTupleParameterName(StringBuilder sb, Type parameterType);
}
internal abstract class System.Net.Http.SerializableHttpContent : HttpContent {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__CrontabValidation_3 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__CrontabValidation_3 Instance;
    private static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__CrontabValidation_3();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidMetricKeyOrNameCharacters_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidMetricKeyOrNameCharacters_0 Instance;
    private static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidMetricKeyOrNameCharacters_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidMetricUnitCharacters_2 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidMetricUnitCharacters_2 Instance;
    private static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidMetricUnitCharacters_2();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidTagKeyCharacters_1 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidTagKeyCharacters_1 Instance;
    private static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__InvalidTagKeyCharacters_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>FCBA877DADFA45C750FA39EC1739F59971CA001523BF00C20A818F257D2EDCF3A__Utilities();
}
