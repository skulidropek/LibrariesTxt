[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.SeqLoggerExtensions : object {
    private static string LocalServerUrl;
    [ExtensionAttribute]
public static ILoggerFactory AddSeq(ILoggerFactory loggerFactory, IConfigurationSection configuration);
    [ExtensionAttribute]
public static ILoggerFactory AddSeq(ILoggerFactory loggerFactory, string serverUrl, string apiKey, LogLevel minimumLevel, IDictionary`2<string, LogLevel> levelOverrides, IEnumerable`1<Action`1<EnrichingEvent>> enrichers);
    [ExtensionAttribute]
public static ILoggingBuilder AddSeq(ILoggingBuilder loggingBuilder, IConfigurationSection configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddSeq(ILoggingBuilder loggingBuilder, string serverUrl, string apiKey, IEnumerable`1<Action`1<EnrichingEvent>> enrichers);
    private static bool TryCreateProvider(IConfigurationSection configuration, LogLevel defaultMinimumLevel, IEnumerable`1<Action`1<EnrichingEvent>> enrichers, SerilogLoggerProvider& provider);
    [NullableContextAttribute("2")]
private static SerilogLoggerProvider CreateProvider(IConfiguration configuration, string defaultServerUrl, string defaultApiKey, IEnumerable`1<Action`1<EnrichingEvent>> enrichers);
    [NullableContextAttribute("2")]
private static SerilogLoggerProvider CreateProvider(string serverUrl, string apiKey, LogLevel minimumLevel, IDictionary`2<string, LogLevel> levelOverrides, IEnumerable`1<Action`1<EnrichingEvent>> enrichers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Seq.Extensions.Logging.Enricher : object {
    private ILogEventEnricher _builtIn;
    private Action`1[] _enrichers;
    public Enricher(IEnumerable`1<Action`1<EnrichingEvent>> enrichers);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Seq.Extensions.Logging.EnrichingEvent : ValueType {
    private ILogEventPropertyValueFactory _propertyFactory;
    [CompilerGeneratedAttribute]
private LogEvent <LogEvent>k__BackingField;
    internal LogEvent LogEvent { get; }
    internal EnrichingEvent(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
    [CompilerGeneratedAttribute]
internal LogEvent get_LogEvent();
    public void AddOrUpdateProperty(string propertyName, object propertyValue, bool serialize);
    public void AddPropertyIfAbsent(string propertyName, object propertyValue, bool serialize);
}
internal class Seq.Extensions.Logging.ExceptionDataEnricher : object {
    [NullableContextAttribute("1")]
public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Seq.Extensions.Logging.JsonSafeString : ValueType {
    [CompilerGeneratedAttribute]
private string <Json>k__BackingField;
    private string Json { get; }
    [NullableContextAttribute("1")]
public JsonSafeString(string json);
    [CompilerGeneratedAttribute]
private string get_Json();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Seq.Extensions.Logging.SelfLog : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`1<string> _output;
    public static void Enable(TextWriter output);
    public static void Enable(Action`1<string> output);
    public static void Disable();
    [NullableContextAttribute("2")]
public static void WriteLine(string format, object arg0, object arg1, object arg2);
}
internal static class Serilog.Core.Constants : object {
    [NullableAttribute("1")]
public static string SourceContextPropertyName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Enrichers.FixedPropertyEnricher : object {
    private LogEventProperty _logEventProperty;
    public FixedPropertyEnricher(LogEventProperty logEventProperty);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Enrichers.PropertyEnricher : object {
    private string _name;
    private object _value;
    private bool _destructureObjects;
    public PropertyEnricher(string name, object value, bool destructureObjects);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Enrichers.SafeAggregateEnricher : object {
    private ILogEventEnricher[] _enrichers;
    public SafeAggregateEnricher(IEnumerable`1<ILogEventEnricher> enrichers);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.IDestructuringPolicy {
    public abstract virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.ILogEventEnricher {
    public abstract virtual void Enrich(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.ILogEventPropertyFactory {
    public abstract virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.ILogEventPropertyValueFactory {
    public abstract virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.ILogEventSink {
    public abstract virtual void Emit(LogEvent logEvent);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.IScalarConversionPolicy {
    public abstract virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.LevelOverrideMap : object {
    private LoggingLevelSwitch _defaultLevelSwitch;
    private LevelOverride[] _overrides;
    public LevelOverrideMap(IDictionary`2<string, LoggingLevelSwitch> overrides, LoggingLevelSwitch defaultLevelSwitch);
    public void GetEffectiveLevel(string context, LoggingLevelSwitch& levelSwitch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Logger : object {
    private MessageTemplateProcessor _messageTemplateProcessor;
    private ILogEventSink _sink;
    [NullableAttribute("2")]
private Action _dispose;
    private ILogEventEnricher _enricher;
    [NullableAttribute("2")]
private LoggingLevelSwitch _levelSwitch;
    [NullableAttribute("2")]
private LevelOverrideMap _overrideMap;
    [NullableContextAttribute("2")]
internal Logger(ILogEventSink sink, ILogEventEnricher enricher, Action dispose, LoggingLevelSwitch levelSwitch, LevelOverrideMap overrideMap);
    public Logger ForContext(ILogEventEnricher enricher);
    public Logger ForContext(IEnumerable`1<ILogEventEnricher> enrichers);
    public Logger ForContext(string propertyName, object value, bool destructureObjects);
    public Logger ForContext(Type source);
    public bool IsEnabled(LogLevel level);
    public void Write(LogEvent logEvent);
    private sealed virtual override void Serilog.Core.ILogEventSink.Emit(LogEvent logEvent);
    private void Dispatch(LogEvent logEvent);
    [NullableContextAttribute("2")]
public bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    [NullableContextAttribute("2")]
public bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
    public sealed virtual void Dispose();
}
internal class Serilog.Core.LoggingLevelSwitch : object {
    private LogLevel modreq(System.Runtime.CompilerServices.IsVolatile) _minimumLevel;
    public LogLevel MinimumLevel { get; public set; }
    public LoggingLevelSwitch(LogLevel initialMinimumLevel);
    public LogLevel get_MinimumLevel();
    public void set_MinimumLevel(LogLevel value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Pipeline.MessageTemplateCache : object {
    private Dictionary`2<string, MessageTemplate> _templates;
    private object _templatesLock;
    private static int MaxCacheItems;
    private static int MaxCachedTemplateLength;
    public MessageTemplate Parse(string messageTemplate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Serilog.Data.LogEventPropertyValueRewriter`1 : LogEventPropertyValueVisitor`2<TState, LogEventPropertyValue> {
    protected virtual LogEventPropertyValue VisitScalarValue(TState state, ScalarValue scalar);
    protected virtual LogEventPropertyValue VisitSequenceValue(TState state, SequenceValue sequence);
    protected virtual LogEventPropertyValue VisitStructureValue(TState state, StructureValue structure);
    protected virtual LogEventPropertyValue VisitDictionaryValue(TState state, DictionaryValue dictionary);
    protected virtual LogEventPropertyValue VisitUnsupportedValue(TState state, LogEventPropertyValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Serilog.Data.LogEventPropertyValueVisitor`2 : object {
    protected virtual TResult Visit(TState state, LogEventPropertyValue value);
    protected abstract virtual TResult VisitScalarValue(TState state, ScalarValue scalar);
    protected abstract virtual TResult VisitSequenceValue(TState state, SequenceValue sequence);
    protected abstract virtual TResult VisitStructureValue(TState state, StructureValue structure);
    protected abstract virtual TResult VisitDictionaryValue(TState state, DictionaryValue dictionary);
    protected virtual TResult VisitUnsupportedValue(TState state, LogEventPropertyValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Events.DictionaryValue : LogEventPropertyValue {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> <Elements>k__BackingField;
    public IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> Elements { get; }
    public DictionaryValue(IEnumerable`1<KeyValuePair`2<ScalarValue, LogEventPropertyValue>> elements);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> get_Elements();
    [NullableContextAttribute("2")]
public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
internal static class Serilog.Events.LevelAlias : object {
    public static LogLevel Minimum;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Events.LogEvent : object {
    private Dictionary`2<string, LogEventPropertyValue> _properties;
    private ActivityTraceId _traceId;
    private ActivitySpanId _spanId;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageTemplate <MessageTemplate>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public DateTimeOffset Timestamp { get; }
    public LogLevel Level { get; }
    public Nullable`1<ActivityTraceId> TraceId { get; }
    public Nullable`1<ActivitySpanId> SpanId { get; }
    public MessageTemplate MessageTemplate { get; }
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> Properties { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    public LogEvent(DateTimeOffset timestamp, LogLevel level, Exception exception, MessageTemplate messageTemplate, Dictionary`2<string, LogEventPropertyValue> properties, ActivityTraceId traceId, ActivitySpanId spanId);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public LogLevel get_Level();
    public Nullable`1<ActivityTraceId> get_TraceId();
    public Nullable`1<ActivitySpanId> get_SpanId();
    [CompilerGeneratedAttribute]
public MessageTemplate get_MessageTemplate();
    public void RenderMessage(TextWriter output, IFormatProvider formatProvider);
    public string RenderMessage(IFormatProvider formatProvider);
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> get_Properties();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    public void AddOrUpdateProperty(string propertyName, LogEventPropertyValue propertyValue);
    public void AddPropertyIfAbsent(string propertyName, LogEventPropertyValue propertyValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Events.LogEventProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventPropertyValue <Value>k__BackingField;
    public string Name { get; }
    public LogEventPropertyValue Value { get; }
    public LogEventProperty(string name, LogEventPropertyValue value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public LogEventPropertyValue get_Value();
    public static bool IsValidName(string name);
}
internal abstract class Serilog.Events.LogEventPropertyValue : object {
    [NullableContextAttribute("2")]
public abstract virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Events.MessageTemplate : object {
    private MessageTemplateToken[] _tokens;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PropertyToken[] <NamedProperties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PropertyToken[] <PositionalProperties>k__BackingField;
    public string Text { get; }
    public IEnumerable`1<MessageTemplateToken> Tokens { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal PropertyToken[] NamedProperties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal PropertyToken[] PositionalProperties { get; }
    public MessageTemplate(string text, IEnumerable`1<MessageTemplateToken> tokens);
    private static TResult[] GetElementsOfTypeToArray(MessageTemplateToken[] tokens);
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual string ToString();
    public IEnumerable`1<MessageTemplateToken> get_Tokens();
    [CompilerGeneratedAttribute]
internal PropertyToken[] get_NamedProperties();
    [CompilerGeneratedAttribute]
internal PropertyToken[] get_PositionalProperties();
    public string Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, IFormatProvider formatProvider);
    public void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Serilog.Events.ScalarValue : LogEventPropertyValue {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; }
    public ScalarValue(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Events.SequenceValue : LogEventPropertyValue {
    private LogEventPropertyValue[] _elements;
    public IReadOnlyList`1<LogEventPropertyValue> Elements { get; }
    public SequenceValue(IEnumerable`1<LogEventPropertyValue> elements);
    public IReadOnlyList`1<LogEventPropertyValue> get_Elements();
    [NullableContextAttribute("2")]
public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Events.StructureValue : LogEventPropertyValue {
    private LogEventProperty[] _properties;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TypeTag>k__BackingField;
    [NullableAttribute("2")]
public string TypeTag { get; }
    public IReadOnlyList`1<LogEventProperty> Properties { get; }
    public StructureValue(IEnumerable`1<LogEventProperty> properties, string typeTag);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TypeTag();
    public IReadOnlyList`1<LogEventProperty> get_Properties();
    [NullableContextAttribute("2")]
public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    private static void Render(TextWriter output, LogEventProperty property, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Extensions.Logging.SerilogLogger : object {
    private SerilogLoggerProvider _provider;
    private Logger _logger;
    public SerilogLogger(SerilogLoggerProvider provider, Logger logger, string name);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [NullableContextAttribute("2")]
private static object AsLoggableValue(TState state, Func`3<TState, Exception, string> formatter);
    private static LogEventPropertyValue CreateEventIdPropertyValue(EventId eventId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProviderAliasAttribute("Seq")]
internal class Serilog.Extensions.Logging.SerilogLoggerProvider : object {
    internal static string OriginalFormatPropertyName;
    internal static string ScopePropertyName;
    private Logger _logger;
    private Action _dispose;
    [NullableAttribute("2")]
private IExternalScopeProvider _scopeProvider;
    public SerilogLoggerProvider(Logger logger);
    public sealed virtual ILogger CreateLogger(string name);
    [NullableContextAttribute("2")]
public IDisposable BeginScope(T state);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory);
    public sealed virtual void Dispose();
    public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
internal static class Serilog.Extensions.Logging.SerilogLoggerScope : object {
    [NullableContextAttribute("1")]
public static void EnrichAndCreateScopeItem(object state, LogEvent logEvent, ILogEventPropertyValueFactory propertyFactory, LogEventPropertyValue& scopeItem);
}
internal static class Serilog.Formatting.Compact.CompactJsonFormatter : object {
    [NullableContextAttribute("1")]
public static void FormatEvent(LogEvent logEvent, TextWriter output, JsonValueFormatter valueFormatter);
}
internal static class Serilog.Formatting.Display.Padding : object {
    [NullableContextAttribute("1")]
public static void Apply(TextWriter output, string value, Nullable`1<Alignment> alignment);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Serilog.Formatting.Json.JsonValueFormatter : LogEventPropertyValueVisitor`2<TextWriter, bool> {
    [NullableAttribute("2")]
private string _typeTagName;
    private static string DefaultTypeTagName;
    [NullableContextAttribute("2")]
public JsonValueFormatter(string typeTagName);
    public void Format(LogEventPropertyValue value, TextWriter output);
    protected virtual bool VisitScalarValue(TextWriter state, ScalarValue scalar);
    protected virtual bool VisitSequenceValue(TextWriter state, SequenceValue sequence);
    protected virtual bool VisitStructureValue(TextWriter state, StructureValue structure);
    protected virtual bool VisitDictionaryValue(TextWriter state, DictionaryValue dictionary);
    private static void FormatLiteralValue(object value, TextWriter output);
    private static void FormatJsonSafeString(JsonSafeString jss, TextWriter output);
    private static void FormatBooleanValue(bool value, TextWriter output);
    private static void FormatDoubleValue(double value, TextWriter output);
    private static void FormatFloatValue(float value, TextWriter output);
    private static void FormatExactNumericValue(IFormattable value, TextWriter output);
    private static void FormatDateTimeValue(IFormattable value, TextWriter output);
    private static void FormatTimeSpanValue(TimeSpan value, TextWriter output);
    private static void FormatLiteralObjectValue(object value, TextWriter output);
    private static void FormatStringValue(string str, TextWriter output);
    private static void FormatNullValue(TextWriter output);
    public static void WriteQuotedJsonString(string str, TextWriter output);
}
[ExtensionAttribute]
internal static class Serilog.Parameters.GettablePropertyFinder : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Serilog.Parameters.GettablePropertyFinder/<GetPropertiesRecursive>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetPropertiesRecursive(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Parameters.MessageTemplateProcessor : object {
    private MessageTemplateCache _parser;
    private PropertyBinder _propertyBinder;
    private PropertyValueConverter _propertyValueConverter;
    public MessageTemplateProcessor(PropertyValueConverter propertyValueConverter);
    public void Process(string messageTemplate, Object[] messageTemplateParameters, MessageTemplate& parsedTemplate, IEnumerable`1& properties);
    public sealed virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
    public sealed virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Parameters.PropertyBinder : object {
    private PropertyValueConverter _valueConverter;
    private static LogEventProperty[] NoProperties;
    public PropertyBinder(PropertyValueConverter valueConverter);
    private static PropertyBinder();
    public IEnumerable`1<LogEventProperty> ConstructProperties(MessageTemplate messageTemplate, Object[] messageTemplateParameters);
    private IEnumerable`1<LogEventProperty> ConstructPositionalProperties(MessageTemplate template, Object[] messageTemplateParameters);
    private IEnumerable`1<LogEventProperty> ConstructNamedProperties(MessageTemplate template, Object[] messageTemplateParameters);
    private LogEventProperty ConstructProperty(PropertyToken propertyToken, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Parameters.PropertyValueConverter : object {
    private HashSet`1<Type> _builtInScalarTypes;
    private IDestructuringPolicy[] _destructuringPolicies;
    private IScalarConversionPolicy[] _scalarConversionPolicies;
    private int _maximumDestructuringDepth;
    private int _maximumStringLength;
    private bool _propagateExceptions;
    public PropertyValueConverter(int maximumDestructuringDepth, int maximumStringLength);
    private static IEnumerable`1<Type> SeqExtensionsLoggingScalarTypes();
    public sealed virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
    public sealed virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
    public LogEventPropertyValue CreatePropertyValue(object value, Destructuring destructuring);
    private LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects, int depth);
    private LogEventPropertyValue CreatePropertyValue(object value, Destructuring destructuring, int depth);
    private LogEventPropertyValue Stringify(object value);
    private string TruncateIfNecessary(string text);
    private bool IsValueTypeDictionary(Type valueType);
    private bool IsValidDictionaryKeyType(Type valueType);
    [IteratorStateMachineAttribute("Serilog.Parameters.PropertyValueConverter/<GetProperties>d__18")]
private IEnumerable`1<LogEventProperty> GetProperties(object value, ILogEventPropertyValueFactory recursive);
    private static bool IsCompilerGeneratedType(Type type);
}
internal class Serilog.Parsing.Alignment : ValueType {
    [CompilerGeneratedAttribute]
private AlignmentDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    public AlignmentDirection Direction { get; }
    public int Width { get; }
    public Alignment(AlignmentDirection direction, int width);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public AlignmentDirection get_Direction();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Width();
}
internal enum Serilog.Parsing.AlignmentDirection : Enum {
    public int value__;
    public static AlignmentDirection Left;
    public static AlignmentDirection Right;
}
internal enum Serilog.Parsing.Destructuring : Enum {
    public int value__;
    public static Destructuring Default;
    public static Destructuring Stringify;
    public static Destructuring Destructure;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Parsing.MessageTemplateParser : object {
    public static MessageTemplate Parse(string messageTemplate);
    [IteratorStateMachineAttribute("Serilog.Parsing.MessageTemplateParser/<Tokenize>d__1")]
private static IEnumerable`1<MessageTemplateToken> Tokenize(string messageTemplate);
    private static MessageTemplateToken ParsePropertyToken(int startAt, string messageTemplate, Int32& next);
    [NullableContextAttribute("2")]
private static bool TrySplitTagContent(string tagContent, String& propertyNameAndDestructuring, String& format, String& alignment);
    private static bool IsValidInPropertyTag(char c);
    private static bool IsValidInPropertyName(char c);
    private static bool TryGetDestructuringHint(char c, Destructuring& destructuring);
    private static bool IsValidInDestructuringHint(char c);
    private static bool IsValidInAlignment(char c);
    private static bool IsValidInFormat(char c);
    private static TextToken ParseTextToken(int startAt, string messageTemplate, Int32& next);
}
internal abstract class Serilog.Parsing.MessageTemplateToken : object {
    [NullableContextAttribute("1")]
public abstract virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Parsing.PropertyToken : MessageTemplateToken {
    private string _rawText;
    private Nullable`1<int> _position;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Destructuring <Destructuring>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Alignment> <Alignment>k__BackingField;
    public string PropertyName { get; }
    public Destructuring Destructuring { get; }
    [NullableAttribute("2")]
public string Format { get; }
    public Nullable`1<Alignment> Alignment { get; }
    public bool IsPositional { get; }
    public PropertyToken(string propertyName, string rawText, string format, Nullable`1<Alignment> alignment, Destructuring destructuring);
    public virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public Destructuring get_Destructuring();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<Alignment> get_Alignment();
    public bool get_IsPositional();
    public bool TryGetPositionalValue(Int32& position);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Parsing.TextToken : MessageTemplateToken {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public TextToken(string text);
    public virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Text();
}
internal class Serilog.Policies.ByteArrayScalarConversionPolicy : object {
    private static int MaximumByteArrayLength;
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Policies.DelegateDestructuringPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
internal class Serilog.Policies.EnumScalarConversionPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Policies.NullableScalarConversionPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Policies.ReflectionTypesScalarDestructuringPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Policies.SimpleScalarConversionPolicy : object {
    private HashSet`1<Type> _scalarTypes;
    public SimpleScalarConversionPolicy(IEnumerable`1<Type> scalarTypes);
    public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Sinks.PeriodicBatching.BatchedConnectionStatus : object {
    private static TimeSpan MinimumBackoffPeriod;
    private static TimeSpan MaximumBackoffInterval;
    private static int FailuresBeforeDroppingBatch;
    private static int FailuresBeforeDroppingQueue;
    private TimeSpan _period;
    private int _failuresSinceSuccessfulBatch;
    public TimeSpan NextInterval { get; }
    public bool ShouldDropBatch { get; }
    public bool ShouldDropQueue { get; }
    public BatchedConnectionStatus(TimeSpan period);
    private static BatchedConnectionStatus();
    public void MarkSuccess();
    public void MarkFailure();
    public TimeSpan get_NextInterval();
    public bool get_ShouldDropBatch();
    public bool get_ShouldDropQueue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.PeriodicBatching.BoundedConcurrentQueue`1 : object {
    private static int Unbounded;
    private ConcurrentQueue`1<T> _queue;
    private int _queueLimit;
    private int _counter;
    public BoundedConcurrentQueue`1(Nullable`1<int> queueLimit);
    public bool TryDequeue(T& item);
    public bool TryEnqueue(T item);
}
[NullableContextAttribute("1")]
internal interface Serilog.Sinks.PeriodicBatching.IBatchedLogEventSink {
    public abstract virtual Task EmitBatchAsync(IEnumerable`1<LogEvent> batch);
    public abstract virtual Task OnEmptyBatchAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink : object {
    [ObsoleteAttribute("Implement `IBatchedLogEventSink` and use the `PeriodicBatchingSinkOptions` constructor.")]
public static int NoQueueLimit;
    private IBatchedLogEventSink _batchedLogEventSink;
    private int _batchSizeLimit;
    private bool _eagerlyEmitFirstEvent;
    private BoundedConcurrentQueue`1<LogEvent> _queue;
    private BatchedConnectionStatus _status;
    private Queue`1<LogEvent> _waitingBatch;
    private object _stateLock;
    private PortableTimer _timer;
    private bool _unloading;
    private bool _started;
    public PeriodicBatchingSink(IBatchedLogEventSink batchedSink, PeriodicBatchingSinkOptions options);
    private void CloseAndFlush();
    private static void ResetSyncContextAndWait(Func`1<Task> taskFactory);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink/<OnTick>d__15")]
private Task OnTick();
    private void SetTimer(TimeSpan interval);
    public sealed virtual void Emit(LogEvent logEvent);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__11_0(CancellationToken _);
}
internal class Serilog.Sinks.PeriodicBatching.PeriodicBatchingSinkOptions : object {
    [CompilerGeneratedAttribute]
private bool <EagerlyEmitFirstEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <QueueLimit>k__BackingField;
    public bool EagerlyEmitFirstEvent { get; public set; }
    public int BatchSizeLimit { get; public set; }
    public TimeSpan Period { get; public set; }
    public Nullable`1<int> QueueLimit { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EagerlyEmitFirstEvent();
    [CompilerGeneratedAttribute]
public void set_EagerlyEmitFirstEvent(bool value);
    [CompilerGeneratedAttribute]
public int get_BatchSizeLimit();
    [CompilerGeneratedAttribute]
public void set_BatchSizeLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_QueueLimit();
    [CompilerGeneratedAttribute]
public void set_QueueLimit(Nullable`1<int> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.PeriodicBatching.PortableTimer : object {
    private object _stateLock;
    private Func`2<CancellationToken, Task> _onTick;
    private CancellationTokenSource _cancel;
    private Timer _timer;
    private bool _running;
    private bool _disposed;
    public PortableTimer(Func`2<CancellationToken, Task> onTick);
    public void Start(TimeSpan interval);
    [AsyncStateMachineAttribute("Serilog.Sinks.PeriodicBatching.PortableTimer/<OnTick>d__8")]
private void OnTick();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object _);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.ControlledLevelSwitch : object {
    private LoggingLevelSwitch _controlledSwitch;
    private Nullable`1<LogLevel> _originalLevel;
    public bool IsActive { get; }
    public ControlledLevelSwitch(LoggingLevelSwitch controlledSwitch);
    public bool get_IsActive();
    [NullableContextAttribute("1")]
public bool IsIncluded(LogEvent evt);
    public void Update(Nullable`1<LogLevel> minimumAcceptedLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Sinks.Seq.SeqApi : object {
    public static string BulkUploadResource;
    public static string ApiKeyHeaderName;
    public static string CompactLogEventFormatMimeType;
    private static string LevelMarker;
    public static Nullable`1<LogLevel> ReadEventInputResult(string eventInputResult);
    public static string NormalizeServerBaseAddress(string serverUrl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Sinks.Seq.SeqPayloadFormatter : object {
    private static JsonValueFormatter JsonValueFormatter;
    private static SeqPayloadFormatter();
    public static string FormatCompactPayload(IEnumerable`1<LogEvent> events, Nullable`1<long> eventBodyLimitBytes);
    private static void LogNonFormattableEvent(LogEvent logEvent, Exception ex);
    private static bool CheckEventBodySize(string json, Nullable`1<long> eventBodyLimitBytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.SeqSink : object {
    public static int DefaultBatchPostingLimit;
    public static TimeSpan DefaultPeriod;
    public static int DefaultQueueSizeLimit;
    private static TimeSpan RequiredLevelCheckInterval;
    [NullableAttribute("2")]
private string _apiKey;
    private Nullable`1<long> _eventBodyLimitBytes;
    private HttpClient _httpClient;
    private DateTime _nextRequiredLevelCheckUtc;
    private ControlledLevelSwitch _controlledSwitch;
    [NullableContextAttribute("2")]
public SeqSink(string serverUrl, string apiKey, Nullable`1<long> eventBodyLimitBytes, ControlledLevelSwitch controlledSwitch, HttpMessageHandler messageHandler);
    private static SeqSink();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.SeqSink/<OnEmptyBatchAsync>d__11")]
public sealed virtual Task OnEmptyBatchAsync();
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.SeqSink/<EmitBatchAsync>d__12")]
public sealed virtual Task EmitBatchAsync(IEnumerable`1<LogEvent> events);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
