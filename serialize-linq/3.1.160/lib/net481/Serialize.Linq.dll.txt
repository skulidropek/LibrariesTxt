public class Serialize.Linq.Exceptions.InvalidTypeException : Exception {
    public InvalidTypeException(string message);
}
public class Serialize.Linq.Exceptions.MemberNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    public Type DeclaringType { get; }
    public string MemberSignature { get; }
    public MemberNotFoundException(string message, Type declaringType, string memberSignature);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    public virtual string ToString();
}
public class Serialize.Linq.ExpressionContext : ExpressionContextBase {
    private IAssemblyLoader _assemblyLoader;
    public ExpressionContext(IAssemblyLoader assemblyLoader);
    protected virtual IEnumerable`1<Assembly> GetAssemblies();
}
public abstract class Serialize.Linq.ExpressionContextBase : object {
    private ConcurrentDictionary`2<string, ParameterExpression> _parameterExpressions;
    private ConcurrentDictionary`2<string, Type> _typeCache;
    [CompilerGeneratedAttribute]
private bool <AllowPrivateFieldAccess>k__BackingField;
    public bool AllowPrivateFieldAccess { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowPrivateFieldAccess();
    [CompilerGeneratedAttribute]
public void set_AllowPrivateFieldAccess(bool value);
    public virtual Nullable`1<BindingFlags> GetBindingFlags();
    public virtual ParameterExpression GetParameterExpression(ParameterExpressionNode node);
    public virtual Type ResolveType(TypeNode node);
    protected abstract virtual IEnumerable`1<Assembly> GetAssemblies();
    [CompilerGeneratedAttribute]
private Type <ResolveType>b__9_0(string n);
}
[ExtensionAttribute]
public static class Serialize.Linq.Extensions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static ExpressionNode ToExpressionNode(Expression expression, FactorySettings factorySettings);
    [ExtensionAttribute]
public static string ToJson(Expression expression, FactorySettings factorySettings);
    [ExtensionAttribute]
public static string ToJson(Expression expression, INodeFactory factory);
    [ExtensionAttribute]
public static string ToJson(Expression expression, INodeFactory factory, IJsonSerializer serializer);
    [ExtensionAttribute]
public static string ToXml(Expression expression, FactorySettings factorySettings);
    [ExtensionAttribute]
public static string ToXml(Expression expression, INodeFactory factory);
    [ExtensionAttribute]
public static string ToXml(Expression expression, INodeFactory factory, IXmlSerializer serializer);
    [ExtensionAttribute]
public static string ToText(Expression expression, INodeFactory factory, ITextSerializer serializer);
    [ExtensionAttribute]
internal static INodeFactory GetDefaultFactory(Expression expression, FactorySettings factorySettings);
    [IteratorStateMachineAttribute("Serialize.Linq.Extensions.ExpressionExtensions/<GetLinkNodes>d__9")]
[ExtensionAttribute]
internal static IEnumerable`1<Expression> GetLinkNodes(Expression expression);
    [IteratorStateMachineAttribute("Serialize.Linq.Extensions.ExpressionExtensions/<GetNodes>d__10")]
[ExtensionAttribute]
internal static IEnumerable`1<Expression> GetNodes(Expression expression);
    [ExtensionAttribute]
internal static IEnumerable`1<TExpression> GetNodes(Expression expression);
}
[ExtensionAttribute]
internal static class Serialize.Linq.Extensions.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetReturnType(MemberInfo member);
}
[ExtensionAttribute]
internal static class Serialize.Linq.Extensions.ObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsEqualToAny(T item, T[] items);
}
public class Serialize.Linq.Factories.DefaultNodeFactory : object {
    private INodeFactory _innerFactory;
    private Type[] _types;
    [CompilerGeneratedAttribute]
private FactorySettings <Settings>k__BackingField;
    public FactorySettings Settings { get; }
    public DefaultNodeFactory(Type type, FactorySettings factorySettings);
    public DefaultNodeFactory(IEnumerable`1<Type> types, FactorySettings factorySettings);
    [CompilerGeneratedAttribute]
public sealed virtual FactorySettings get_Settings();
    public sealed virtual ExpressionNode Create(Expression expression);
    public sealed virtual TypeNode Create(Type type);
    public sealed virtual Nullable`1<BindingFlags> GetBindingFlags();
    private INodeFactory CreateFactory();
    private static IEnumerable`1<Type> GetComplexMemberTypes(Type type);
}
public class Serialize.Linq.Factories.FactorySettings : object {
    [CompilerGeneratedAttribute]
private bool <UseRelaxedTypeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPrivateFieldAccess>k__BackingField;
    public bool UseRelaxedTypeNames { get; public set; }
    public bool AllowPrivateFieldAccess { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseRelaxedTypeNames();
    [CompilerGeneratedAttribute]
public void set_UseRelaxedTypeNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPrivateFieldAccess();
    [CompilerGeneratedAttribute]
public void set_AllowPrivateFieldAccess(bool value);
}
public class Serialize.Linq.Factories.NodeFactory : object {
    [CompilerGeneratedAttribute]
private FactorySettings <Settings>k__BackingField;
    public FactorySettings Settings { get; }
    public NodeFactory(FactorySettings factorySettings);
    [CompilerGeneratedAttribute]
public sealed virtual FactorySettings get_Settings();
    public virtual ExpressionNode Create(Expression expression);
    public sealed virtual TypeNode Create(Type type);
    public sealed virtual Nullable`1<BindingFlags> GetBindingFlags();
}
public class Serialize.Linq.Factories.TypeResolverNodeFactory : NodeFactory {
    private Type[] _expectedTypes;
    public TypeResolverNodeFactory(IEnumerable`1<Type> expectedTypes, FactorySettings factorySettings);
    private bool IsExpectedType(Type declaredType);
    private bool TryGetConstantValueFromMemberExpression(MemberExpression memberExpression, Object& constantValue, Type& constantValueType);
    private bool TryToInlineExpression(MemberExpression memberExpression, Expression& inlineExpression);
    private ExpressionNode ResolveMemberExpression(MemberExpression memberExpression);
    private ExpressionNode ResolveMethodCallExpression(MethodCallExpression methodCallExpression);
    public virtual ExpressionNode Create(Expression expression);
}
public interface Serialize.Linq.Interfaces.IAssemblyLoader {
    public abstract virtual IEnumerable`1<Assembly> GetAssemblies();
}
public interface Serialize.Linq.Interfaces.IBinarySerializer {
    public abstract virtual Byte[] Serialize(T obj);
    public abstract virtual T Deserialize(Byte[] bytes);
}
public interface Serialize.Linq.Interfaces.IExpressionContext {
    public abstract virtual Nullable`1<BindingFlags> GetBindingFlags();
    public abstract virtual ParameterExpression GetParameterExpression(ParameterExpressionNode node);
    public abstract virtual Type ResolveType(TypeNode node);
}
public interface Serialize.Linq.Interfaces.IJsonSerializer {
}
public interface Serialize.Linq.Interfaces.INodeFactory {
    public FactorySettings Settings { get; }
    public abstract virtual FactorySettings get_Settings();
    public abstract virtual ExpressionNode Create(Expression expression);
    public abstract virtual TypeNode Create(Type type);
    public abstract virtual Nullable`1<BindingFlags> GetBindingFlags();
}
public interface Serialize.Linq.Interfaces.ISerializer {
    public bool AutoAddKnownTypesAsArrayTypes { get; public set; }
    public bool AutoAddKnownTypesAsListTypes { get; public set; }
    public abstract virtual bool get_AutoAddKnownTypesAsArrayTypes();
    public abstract virtual void set_AutoAddKnownTypesAsArrayTypes(bool value);
    public abstract virtual bool get_AutoAddKnownTypesAsListTypes();
    public abstract virtual void set_AutoAddKnownTypesAsListTypes(bool value);
    public abstract virtual void AddKnownType(Type type);
    public abstract virtual void AddKnownTypes(IEnumerable`1<Type> types);
    public abstract virtual void Serialize(Stream stream, T obj);
    public abstract virtual T Deserialize(Stream stream);
}
public interface Serialize.Linq.Interfaces.ITextSerializer {
    public abstract virtual string Serialize(T obj);
    public abstract virtual T Deserialize(string text);
}
public interface Serialize.Linq.Interfaces.IXmlSerializer {
}
internal class Serialize.Linq.Internals.ComplexPropertyMemberTypeEnumerator : PropertyMemberTypeEnumerator {
    private static Type[] _builtinTypes;
    private static ComplexPropertyMemberTypeEnumerator();
    public ComplexPropertyMemberTypeEnumerator(Type type, BindingFlags bindingFlags);
    public ComplexPropertyMemberTypeEnumerator(HashSet`1<Type> seenTypes, Type type, BindingFlags bindingFlags);
    private static bool IsBuiltinType(Type type);
    protected virtual bool IsConsideredType(Type type);
}
internal class Serialize.Linq.Internals.ComplexPropertyMemberTypeFinder : object {
    private bool AnalyseTypes(IEnumerable`1<Type> types, ISet`1<Type> seen, ISet`1<Type> result);
    private bool AnalyseType(Type baseType, ISet`1<Type> seen, ISet`1<Type> result);
    private bool BuildTypes(Type baseType, ISet`1<Type> seen, ISet`1<Type> result);
    public IEnumerable`1<Type> FindTypes(Type baseType);
}
internal class Serialize.Linq.Internals.DefaultAssemblyLoader : object {
    public sealed virtual IEnumerable`1<Assembly> GetAssemblies();
}
internal class Serialize.Linq.Internals.ExpressionCompressor : object {
    public Expression Compress(Expression expression);
    private static List`1<Expression> CompressTree(IList`1<Expression> items, ExpressionType nodeType);
}
internal static class Serialize.Linq.Internals.KnownTypes : object {
    public static Type[] All;
    private static HashSet`1<Type> _allExploded;
    private static KnownTypes();
    public static bool Match(Type type);
    [IteratorStateMachineAttribute("Serialize.Linq.Internals.KnownTypes/<Explode>d__3")]
public static IEnumerable`1<Type> Explode(IEnumerable`1<Type> types, bool includeArrayTypes, bool includeListTypes);
}
internal class Serialize.Linq.Internals.MemberTypeEnumerator : object {
    private int _currentIndex;
    private Type _type;
    private BindingFlags _bindingFlags;
    private HashSet`1<Type> _seenTypes;
    private Type[] _allTypes;
    public bool IsConsidered { get; }
    public Type Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public MemberTypeEnumerator(HashSet`1<Type> seenTypes, Type type, BindingFlags bindingFlags);
    public bool get_IsConsidered();
    protected virtual bool IsConsideredType(Type type);
    protected virtual bool IsConsideredMember(MemberInfo member);
    protected bool IsSeenType(Type type);
    protected void AddSeenType(Type type);
    public virtual Type get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    protected Type[] GetTypesOfType(Type type);
    protected virtual Type[] BuildTypes();
    public virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class Serialize.Linq.Internals.PropertyMemberTypeEnumerator : MemberTypeEnumerator {
    public PropertyMemberTypeEnumerator(HashSet`1<Type> seenTypes, Type type, BindingFlags bindingFlags);
    protected virtual bool IsConsideredMember(MemberInfo member);
}
[ExtensionAttribute]
internal static class Serialize.Linq.Internals.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsArray(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsSubclassOf(Type type, Type c);
    [ExtensionAttribute]
public static bool IsCustomAttributeDefined(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static Type GetBaseType(Type type);
    [ExtensionAttribute]
public static TypeAttributes GetTypeAttributes(Type type);
}
public static class Serialize.Linq.Internals.ValueConverter : object {
    private static ConcurrentDictionary`2<Type, Func`3<object, Type, object>> _userDefinedConverters;
    private static Regex _dateRegex;
    private static ValueConverter();
    public static void AddCustomConverter(Type convertTo, Func`2<object, object> converter);
    public static void AddCustomConverter(Func`3<object, Type, object> converter);
    public static void AddCustomConverter(Type convertTo, Func`3<object, Type, object> converter);
    public static void ClearCustomConverters();
    public static object Convert(object value, Type convertTo);
    private static bool TryCustomConvert(object value, Type convertTo, Object& convertedValue);
    private static bool TryConvertToDateTime(object value, DateTime& dateTime);
    private static bool TryConvertToGuid(object value, Guid& guid);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.BinaryExpressionNode : ExpressionNode`1<BinaryExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNode <Conversion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLiftedToNull>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfoNode <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <Right>k__BackingField;
    [DataMemberAttribute]
public ExpressionNode Conversion { get; public set; }
    [DataMemberAttribute]
public bool IsLiftedToNull { get; public set; }
    [DataMemberAttribute]
public ExpressionNode Left { get; public set; }
    [DataMemberAttribute]
public MethodInfoNode Method { get; public set; }
    [DataMemberAttribute]
public ExpressionNode Right { get; public set; }
    public BinaryExpressionNode(INodeFactory factory, BinaryExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Conversion();
    [CompilerGeneratedAttribute]
public void set_Conversion(ExpressionNode value);
    [CompilerGeneratedAttribute]
public bool get_IsLiftedToNull();
    [CompilerGeneratedAttribute]
public void set_IsLiftedToNull(bool value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(ExpressionNode value);
    [CompilerGeneratedAttribute]
public MethodInfoNode get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(MethodInfoNode value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(ExpressionNode value);
    protected virtual void Initialize(BinaryExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.ConditionalExpressionNode : ExpressionNode`1<ConditionalExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNode <IfFalse>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <IfTrue>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <Test>k__BackingField;
    [DataMemberAttribute]
public ExpressionNode IfFalse { get; public set; }
    [DataMemberAttribute]
public ExpressionNode IfTrue { get; public set; }
    [DataMemberAttribute]
public ExpressionNode Test { get; public set; }
    public ConditionalExpressionNode(INodeFactory factory, ConditionalExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNode get_IfFalse();
    [CompilerGeneratedAttribute]
public void set_IfFalse(ExpressionNode value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_IfTrue();
    [CompilerGeneratedAttribute]
public void set_IfTrue(ExpressionNode value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Test();
    [CompilerGeneratedAttribute]
public void set_Test(ExpressionNode value);
    protected virtual void Initialize(ConditionalExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.ConstantExpressionNode : ExpressionNode`1<ConstantExpression> {
    private object _value;
    public TypeNode Type { get; public set; }
    [DataMemberAttribute]
public object Value { get; public set; }
    public ConstantExpressionNode(INodeFactory factory, object value);
    public ConstantExpressionNode(INodeFactory factory, object value, Type type);
    public ConstantExpressionNode(INodeFactory factory, ConstantExpression expression);
    public virtual TypeNode get_Type();
    public virtual void set_Type(TypeNode value);
    public object get_Value();
    public void set_Value(object value);
    protected virtual void Initialize(ConstantExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.ConstructorInfoNode : MemberNode`1<ConstructorInfo> {
    public ConstructorInfoNode(INodeFactory factory, ConstructorInfo memberInfo);
    protected virtual IEnumerable`1<ConstructorInfo> GetMemberInfosForType(IExpressionContext context, Type type);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.DefaultExpressionNode : ExpressionNode`1<DefaultExpression> {
    public DefaultExpressionNode(INodeFactory factory, DefaultExpression expression);
    protected virtual void Initialize(DefaultExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.ElementInitNode : Node {
    [CompilerGeneratedAttribute]
private ExpressionNodeList <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfoNode <AddMethod>k__BackingField;
    [DataMemberAttribute]
public ExpressionNodeList Arguments { get; public set; }
    [DataMemberAttribute]
public MethodInfoNode AddMethod { get; public set; }
    public ElementInitNode(INodeFactory factory, ElementInit elementInit);
    private void Initialize(ElementInit elementInit);
    [CompilerGeneratedAttribute]
public ExpressionNodeList get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ExpressionNodeList value);
    [CompilerGeneratedAttribute]
public MethodInfoNode get_AddMethod();
    [CompilerGeneratedAttribute]
public void set_AddMethod(MethodInfoNode value);
    internal ElementInit ToElementInit(IExpressionContext context);
}
[CollectionDataContractAttribute]
public class Serialize.Linq.Nodes.ElementInitNodeList : List`1<ElementInitNode> {
    public ElementInitNodeList(INodeFactory factory, IEnumerable`1<ElementInit> items);
    internal IEnumerable`1<ElementInit> GetElementInits(IExpressionContext context);
}
[DataContractAttribute]
public abstract class Serialize.Linq.Nodes.ExpressionNode : Node {
    [CompilerGeneratedAttribute]
private ExpressionType <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeNode <Type>k__BackingField;
    [DataMemberAttribute]
public ExpressionType NodeType { get; public set; }
    [DataMemberAttribute]
public TypeNode Type { get; public set; }
    protected ExpressionNode(INodeFactory factory, ExpressionType nodeType, Type type);
    [CompilerGeneratedAttribute]
public ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public void set_NodeType(ExpressionType value);
    [CompilerGeneratedAttribute]
public virtual TypeNode get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(TypeNode value);
    public virtual Expression ToExpression(IExpressionContext context);
    public Expression ToExpression();
    public Expression`1<TDelegate> ToExpression(IExpressionContext context);
    public Expression`1<Func`2<TEntity, bool>> ToBooleanExpression(IExpressionContext context);
    public Expression`1<TDelegate> ToExpression(Func`2<ExpressionNode, Expression`1<TDelegate>> conversionFunction);
    public Expression`1<TDelegate> ToExpression(Func`3<ExpressionNode, IExpressionContext, Expression`1<TDelegate>> conversionFunction, IExpressionContext context);
    public virtual string ToString();
    private static Expression`1<TDelegate> ConvertToExpression(ExpressionNode expressionNode, IExpressionContext context);
    private static Expression`1<Func`2<TEntity, bool>> ConvertToBooleanExpression(ExpressionNode expressionNode, IExpressionContext context);
}
[DataContractAttribute]
[DebuggerDisplayAttribute("ExpressionNode")]
public abstract class Serialize.Linq.Nodes.ExpressionNode`1 : ExpressionNode {
    protected ExpressionNode`1(INodeFactory factory, TExpression expression);
    protected ExpressionNode`1(INodeFactory factory, ExpressionType nodeType, Type type);
    protected abstract virtual void Initialize(TExpression expression);
}
[CollectionDataContractAttribute]
public class Serialize.Linq.Nodes.ExpressionNodeList : List`1<ExpressionNode> {
    public ExpressionNodeList(INodeFactory factory, IEnumerable`1<Expression> items);
    internal IEnumerable`1<Expression> GetExpressions(IExpressionContext context);
    internal IEnumerable`1<ParameterExpression> GetParameterExpressions(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.FieldInfoNode : MemberNode`1<FieldInfo> {
    public FieldInfoNode(INodeFactory factory, FieldInfo memberInfo);
    protected virtual IEnumerable`1<FieldInfo> GetMemberInfosForType(IExpressionContext context, Type type);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.IndexExpressionNode : ExpressionNode`1<IndexExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNodeList <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfoNode <Indexer>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <Object>k__BackingField;
    [DataMemberAttribute]
public ExpressionNodeList Arguments { get; public set; }
    [DataMemberAttribute]
public PropertyInfoNode Indexer { get; public set; }
    [DataMemberAttribute]
public ExpressionNode Object { get; public set; }
    public IndexExpressionNode(INodeFactory factory, IndexExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNodeList get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ExpressionNodeList value);
    [CompilerGeneratedAttribute]
public PropertyInfoNode get_Indexer();
    [CompilerGeneratedAttribute]
public void set_Indexer(PropertyInfoNode value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(ExpressionNode value);
    protected virtual void Initialize(IndexExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.InvocationExpressionNode : ExpressionNode`1<InvocationExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNodeList <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <Expression>k__BackingField;
    [DataMemberAttribute]
public ExpressionNodeList Arguments { get; public set; }
    [DataMemberAttribute]
public ExpressionNode Expression { get; public set; }
    public InvocationExpressionNode(INodeFactory factory, InvocationExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNodeList get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ExpressionNodeList value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(ExpressionNode value);
    protected virtual void Initialize(InvocationExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.LambdaExpressionNode : ExpressionNode`1<LambdaExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNode <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNodeList <Parameters>k__BackingField;
    [DataMemberAttribute]
public ExpressionNode Body { get; public set; }
    [DataMemberAttribute]
public ExpressionNodeList Parameters { get; public set; }
    public LambdaExpressionNode(INodeFactory factory, LambdaExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(ExpressionNode value);
    [CompilerGeneratedAttribute]
public ExpressionNodeList get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ExpressionNodeList value);
    protected virtual void Initialize(LambdaExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.ListInitExpressionNode : ExpressionNode`1<ListInitExpression> {
    [CompilerGeneratedAttribute]
private ElementInitNodeList <Initializers>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <NewExpression>k__BackingField;
    [DataMemberAttribute]
public ElementInitNodeList Initializers { get; public set; }
    [DataMemberAttribute]
public ExpressionNode NewExpression { get; public set; }
    public ListInitExpressionNode(INodeFactory factory, ListInitExpression expression);
    [CompilerGeneratedAttribute]
public ElementInitNodeList get_Initializers();
    [CompilerGeneratedAttribute]
public void set_Initializers(ElementInitNodeList value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_NewExpression();
    [CompilerGeneratedAttribute]
public void set_NewExpression(ExpressionNode value);
    protected virtual void Initialize(ListInitExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MemberAssignmentNode : MemberBindingNode {
    [CompilerGeneratedAttribute]
private ExpressionNode <Expression>k__BackingField;
    [DataMemberAttribute]
public ExpressionNode Expression { get; public set; }
    public MemberAssignmentNode(INodeFactory factory, MemberAssignment memberAssignment);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(ExpressionNode value);
    internal virtual MemberBinding ToMemberBinding(IExpressionContext context);
}
[DataContractAttribute]
public abstract class Serialize.Linq.Nodes.MemberBindingNode : Node {
    [CompilerGeneratedAttribute]
private MemberBindingType <BindingType>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfoNode <Member>k__BackingField;
    [DataMemberAttribute]
public MemberBindingType BindingType { get; public set; }
    [DataMemberAttribute]
public MemberInfoNode Member { get; public set; }
    protected MemberBindingNode(INodeFactory factory);
    protected MemberBindingNode(INodeFactory factory, MemberBindingType bindingType, MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public MemberBindingType get_BindingType();
    [CompilerGeneratedAttribute]
public void set_BindingType(MemberBindingType value);
    [CompilerGeneratedAttribute]
public MemberInfoNode get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(MemberInfoNode value);
    internal abstract virtual MemberBinding ToMemberBinding(IExpressionContext context);
    internal static MemberBindingNode Create(INodeFactory factory, MemberBinding memberBinding);
}
[CollectionDataContractAttribute]
public class Serialize.Linq.Nodes.MemberBindingNodeList : List`1<MemberBindingNode> {
    public MemberBindingNodeList(INodeFactory factory, IEnumerable`1<MemberBinding> items);
    internal IEnumerable`1<MemberBinding> GetMemberBindings(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MemberExpressionNode : ExpressionNode`1<MemberExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNode <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfoNode <Member>k__BackingField;
    [DataMemberAttribute]
public ExpressionNode Expression { get; public set; }
    [DataMemberAttribute]
public MemberInfoNode Member { get; public set; }
    public MemberExpressionNode(INodeFactory factory, MemberExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(ExpressionNode value);
    [CompilerGeneratedAttribute]
public MemberInfoNode get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(MemberInfoNode value);
    protected virtual void Initialize(MemberExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MemberInfoNode : MemberNode`1<MemberInfo> {
    public MemberInfoNode(INodeFactory factory, MemberInfo memberInfo);
    protected virtual IEnumerable`1<MemberInfo> GetMemberInfosForType(IExpressionContext context, Type type);
}
[CollectionDataContractAttribute]
public class Serialize.Linq.Nodes.MemberInfoNodeList : List`1<MemberInfoNode> {
    public MemberInfoNodeList(INodeFactory factory, IEnumerable`1<MemberInfo> items);
    public IEnumerable`1<MemberInfo> GetMembers(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MemberInitExpressionNode : ExpressionNode`1<MemberInitExpression> {
    [CompilerGeneratedAttribute]
private MemberBindingNodeList <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private NewExpressionNode <NewExpression>k__BackingField;
    [DataMemberAttribute]
public MemberBindingNodeList Bindings { get; public set; }
    [DataMemberAttribute]
public NewExpressionNode NewExpression { get; public set; }
    public MemberInitExpressionNode(INodeFactory factory, MemberInitExpression expression);
    [CompilerGeneratedAttribute]
public MemberBindingNodeList get_Bindings();
    [CompilerGeneratedAttribute]
public void set_Bindings(MemberBindingNodeList value);
    [CompilerGeneratedAttribute]
public NewExpressionNode get_NewExpression();
    [CompilerGeneratedAttribute]
public void set_NewExpression(NewExpressionNode value);
    protected virtual void Initialize(MemberInitExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MemberListBindingNode : MemberBindingNode {
    [CompilerGeneratedAttribute]
private ElementInitNodeList <Initializers>k__BackingField;
    [DataMemberAttribute]
public ElementInitNodeList Initializers { get; public set; }
    public MemberListBindingNode(INodeFactory factory, MemberListBinding memberListBinding);
    [CompilerGeneratedAttribute]
public ElementInitNodeList get_Initializers();
    [CompilerGeneratedAttribute]
public void set_Initializers(ElementInitNodeList value);
    internal virtual MemberBinding ToMemberBinding(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MemberMemberBindingNode : MemberBindingNode {
    [CompilerGeneratedAttribute]
private MemberBindingNodeList <Bindings>k__BackingField;
    [DataMemberAttribute]
public MemberBindingNodeList Bindings { get; public set; }
    public MemberMemberBindingNode(INodeFactory factory, MemberMemberBinding memberMemberBinding);
    [CompilerGeneratedAttribute]
public MemberBindingNodeList get_Bindings();
    [CompilerGeneratedAttribute]
public void set_Bindings(MemberBindingNodeList value);
    internal virtual MemberBinding ToMemberBinding(IExpressionContext context);
}
[DataContractAttribute]
public abstract class Serialize.Linq.Nodes.MemberNode`1 : Node {
    [CompilerGeneratedAttribute]
private TypeNode <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [DataMemberAttribute]
public TypeNode DeclaringType { get; public set; }
    [DataMemberAttribute]
public string Signature { get; public set; }
    protected MemberNode`1(INodeFactory factory, TMemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public TypeNode get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(TypeNode value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    protected virtual void Initialize(TMemberInfo memberInfo);
    protected Type GetDeclaringType(IExpressionContext context);
    protected abstract virtual IEnumerable`1<TMemberInfo> GetMemberInfosForType(IExpressionContext context, Type type);
    public virtual TMemberInfo ToMemberInfo(IExpressionContext context);
    [CompilerGeneratedAttribute]
private bool <ToMemberInfo>b__13_0(TMemberInfo m);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MethodCallExpressionNode : ExpressionNode`1<MethodCallExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNodeList <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfoNode <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionNode <Object>k__BackingField;
    [DataMemberAttribute]
public ExpressionNodeList Arguments { get; public set; }
    [DataMemberAttribute]
public MethodInfoNode Method { get; public set; }
    [DataMemberAttribute]
public ExpressionNode Object { get; public set; }
    public MethodCallExpressionNode(INodeFactory factory, MethodCallExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNodeList get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ExpressionNodeList value);
    [CompilerGeneratedAttribute]
public MethodInfoNode get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(MethodInfoNode value);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(ExpressionNode value);
    protected virtual void Initialize(MethodCallExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.MethodInfoNode : MemberNode`1<MethodInfo> {
    [CompilerGeneratedAttribute]
private bool <IsGenericMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeNode[] <GenericArguments>k__BackingField;
    [DataMemberAttribute]
public bool IsGenericMethod { get; public set; }
    [DataMemberAttribute]
public TypeNode[] GenericArguments { get; public set; }
    public MethodInfoNode(INodeFactory factory, MethodInfo memberInfo);
    protected virtual IEnumerable`1<MethodInfo> GetMemberInfosForType(IExpressionContext context, Type type);
    [CompilerGeneratedAttribute]
public bool get_IsGenericMethod();
    [CompilerGeneratedAttribute]
public void set_IsGenericMethod(bool value);
    [CompilerGeneratedAttribute]
public TypeNode[] get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(TypeNode[] value);
    protected virtual void Initialize(MethodInfo memberInfo);
    public virtual MethodInfo ToMemberInfo(IExpressionContext context);
    [CompilerGeneratedAttribute]
private TypeNode <Initialize>b__11_0(Type a);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.NewArrayExpressionNode : ExpressionNode`1<NewArrayExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNodeList <Expressions>k__BackingField;
    [DataMemberAttribute]
public ExpressionNodeList Expressions { get; public set; }
    public NewArrayExpressionNode(INodeFactory factory, NewArrayExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNodeList get_Expressions();
    [CompilerGeneratedAttribute]
public void set_Expressions(ExpressionNodeList value);
    protected virtual void Initialize(NewArrayExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.NewExpressionNode : ExpressionNode`1<NewExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNodeList <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorInfoNode <Constructor>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfoNodeList <Members>k__BackingField;
    [DataMemberAttribute]
public ExpressionNodeList Arguments { get; public set; }
    [DataMemberAttribute]
public ConstructorInfoNode Constructor { get; public set; }
    [DataMemberAttribute]
public MemberInfoNodeList Members { get; public set; }
    public NewExpressionNode(INodeFactory factory, NewExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNodeList get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ExpressionNodeList value);
    [CompilerGeneratedAttribute]
public ConstructorInfoNode get_Constructor();
    [CompilerGeneratedAttribute]
public void set_Constructor(ConstructorInfoNode value);
    [CompilerGeneratedAttribute]
public MemberInfoNodeList get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(MemberInfoNodeList value);
    protected virtual void Initialize(NewExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
[KnownTypeAttribute("Serialize.Linq.Nodes.BinaryExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ConditionalExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ConstantExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ConstructorInfoNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.DefaultExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ElementInitNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ElementInitNodeList")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ExpressionNodeList")]
[KnownTypeAttribute("Serialize.Linq.Nodes.FieldInfoNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.IndexExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.InvocationExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.LambdaExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ListInitExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberAssignmentNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberBindingNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberBindingNodeList")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberInfoNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberInfoNodeList")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberInitExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberListBindingNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MemberMemberBindingNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.MethodCallExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.NewArrayExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.NewExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.ParameterExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.PropertyInfoNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.TypeBinaryExpressionNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.TypeNode")]
[KnownTypeAttribute("Serialize.Linq.Nodes.UnaryExpressionNode")]
public abstract class Serialize.Linq.Nodes.Node : object {
    [IgnoreDataMemberAttribute]
public INodeFactory Factory;
    protected Node(INodeFactory factory);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.ParameterExpressionNode : ExpressionNode`1<ParameterExpression> {
    [CompilerGeneratedAttribute]
private bool <IsByRef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public bool IsByRef { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    public ParameterExpressionNode(INodeFactory factory, ParameterExpression expression);
    [CompilerGeneratedAttribute]
public bool get_IsByRef();
    [CompilerGeneratedAttribute]
public void set_IsByRef(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    protected virtual void Initialize(ParameterExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.PropertyInfoNode : MemberNode`1<PropertyInfo> {
    public PropertyInfoNode(INodeFactory factory, PropertyInfo memberInfo);
    protected virtual IEnumerable`1<PropertyInfo> GetMemberInfosForType(IExpressionContext context, Type type);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.TypeBinaryExpressionNode : ExpressionNode`1<TypeBinaryExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNode <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeNode <TypeOperand>k__BackingField;
    [DataMemberAttribute]
public ExpressionNode Expression { get; public set; }
    [DataMemberAttribute]
public TypeNode TypeOperand { get; public set; }
    public TypeBinaryExpressionNode(INodeFactory factory, TypeBinaryExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(ExpressionNode value);
    [CompilerGeneratedAttribute]
public TypeNode get_TypeOperand();
    [CompilerGeneratedAttribute]
public void set_TypeOperand(TypeNode value);
    protected virtual void Initialize(TypeBinaryExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.TypeNode : Node {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeNode[] <GenericArguments>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public TypeNode[] GenericArguments { get; public set; }
    public TypeNode(INodeFactory factory, Type type);
    private void Initialize(Type type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TypeNode[] get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(TypeNode[] value);
    public Type ToType(IExpressionContext context);
    [CompilerGeneratedAttribute]
private TypeNode <Initialize>b__2_0(Type t);
}
[DataContractAttribute]
public class Serialize.Linq.Nodes.UnaryExpressionNode : ExpressionNode`1<UnaryExpression> {
    [CompilerGeneratedAttribute]
private ExpressionNode <Operand>k__BackingField;
    [DataMemberAttribute]
public ExpressionNode Operand { get; public set; }
    public UnaryExpressionNode(INodeFactory factory, UnaryExpression expression);
    [CompilerGeneratedAttribute]
public ExpressionNode get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(ExpressionNode value);
    protected virtual void Initialize(UnaryExpression expression);
    public virtual Expression ToExpression(IExpressionContext context);
}
public class Serialize.Linq.Serializers.BinarySerializer : DataSerializer {
    public sealed virtual Byte[] Serialize(T obj);
    public sealed virtual T Deserialize(Byte[] bytes);
    public virtual void Serialize(Stream stream, T obj);
    public virtual T Deserialize(Stream stream);
    protected virtual XmlObjectSerializer CreateXmlObjectSerializer(Type type);
}
public abstract class Serialize.Linq.Serializers.DataSerializer : SerializerBase {
    public virtual void Serialize(Stream stream, T obj);
    public virtual T Deserialize(Stream stream);
    protected abstract virtual XmlObjectSerializer CreateXmlObjectSerializer(Type type);
}
public class Serialize.Linq.Serializers.ExpressionConverter : object {
    private ExpressionCompressor _expressionCompressor;
    public ExpressionNode Convert(Expression expression, FactorySettings factorySettings);
    protected virtual INodeFactory CreateFactory(Expression expression, FactorySettings factorySettings);
}
public class Serialize.Linq.Serializers.ExpressionSerializer : ExpressionConverter {
    private ISerializer _serializer;
    private FactorySettings _factorySettings;
    public bool AutoAddKnownTypesAsArrayTypes { get; public set; }
    public bool AutoAddKnownTypesAsListTypes { get; public set; }
    public bool CanSerializeText { get; }
    public bool CanSerializeBinary { get; }
    private ITextSerializer TextSerializer { get; }
    private IBinarySerializer BinarySerializer { get; }
    public ExpressionSerializer(ISerializer serializer, FactorySettings factorySettings);
    public bool get_AutoAddKnownTypesAsArrayTypes();
    public void set_AutoAddKnownTypesAsArrayTypes(bool value);
    public bool get_AutoAddKnownTypesAsListTypes();
    public void set_AutoAddKnownTypesAsListTypes(bool value);
    public bool get_CanSerializeText();
    public bool get_CanSerializeBinary();
    public void AddKnownType(Type type);
    public void AddKnownTypes(IEnumerable`1<Type> types);
    public void Serialize(Stream stream, Expression expression, FactorySettings factorySettings);
    public Expression Deserialize(Stream stream);
    public string SerializeText(Expression expression, FactorySettings factorySettings);
    public Expression DeserializeText(string text);
    public Expression DeserializeText(string text, IExpressionContext context);
    public Byte[] SerializeBinary(Expression expression, FactorySettings factorySettings);
    public Expression DeserializeBinary(Byte[] bytes);
    public Expression DeserializeBinary(Byte[] bytes, IExpressionContext context);
    private ITextSerializer get_TextSerializer();
    private IBinarySerializer get_BinarySerializer();
}
public class Serialize.Linq.Serializers.JsonSerializer : TextSerializer {
    protected virtual XmlObjectSerializer CreateXmlObjectSerializer(Type type);
}
public abstract class Serialize.Linq.Serializers.SerializerBase : object {
    private HashSet`1<Type> _customKnownTypes;
    private bool _autoAddKnownTypesAsArrayTypes;
    private bool _autoAddKnownTypesAsListTypes;
    private IEnumerable`1<Type> _knownTypesExploded;
    public bool AutoAddKnownTypesAsArrayTypes { get; public set; }
    public bool AutoAddKnownTypesAsListTypes { get; public set; }
    public sealed virtual bool get_AutoAddKnownTypesAsArrayTypes();
    public sealed virtual void set_AutoAddKnownTypesAsArrayTypes(bool value);
    public sealed virtual bool get_AutoAddKnownTypesAsListTypes();
    public sealed virtual void set_AutoAddKnownTypesAsListTypes(bool value);
    public sealed virtual void AddKnownType(Type type);
    public sealed virtual void AddKnownTypes(IEnumerable`1<Type> types);
    protected virtual IEnumerable`1<Type> GetKnownTypes();
    private IEnumerable`1<Type> ExplodeKnownTypes(IEnumerable`1<Type> types);
}
public abstract class Serialize.Linq.Serializers.TextSerializer : DataSerializer {
    public sealed virtual string Serialize(T obj);
    public sealed virtual T Deserialize(string text);
}
public class Serialize.Linq.Serializers.XmlSerializer : TextSerializer {
    protected virtual XmlObjectSerializer CreateXmlObjectSerializer(Type type);
}
