[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Enrichers.Sensitive.CreditCardMaskingOperator : RegexMaskingOperator {
    private static string CreditCardPartialReplacePattern;
    private static string CreditCardFullReplacePattern;
    private string _replacementPattern;
    public CreditCardMaskingOperator(bool fullMask);
    protected virtual string PreprocessMask(string mask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Enrichers.Sensitive.EmailAddressMaskingOperator : RegexMaskingOperator {
    private static string EmailPattern;
    protected virtual string PreprocessInput(string input);
    protected virtual bool ShouldMaskInput(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Serilog.Enrichers.Sensitive.ExtensionMethods : object {
    [ExtensionAttribute]
public static SensitiveArea EnterSensitiveArea(ILogger logger);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithSensitiveDataMasking with the options argument instead")]
public static LoggerConfiguration WithSensitiveDataMasking(LoggerEnrichmentConfiguration loggerConfiguration);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithSensitiveDataMasking with the options argument instead")]
public static LoggerConfiguration WithSensitiveDataMasking(LoggerEnrichmentConfiguration loggerConfiguration, string mask);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithSensitiveDataMasking with the options argument instead")]
public static LoggerConfiguration WithSensitiveDataMaskingInArea(LoggerEnrichmentConfiguration loggerConfiguration);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithSensitiveDataMasking with the options argument instead")]
public static LoggerConfiguration WithSensitiveDataMaskingInArea(LoggerEnrichmentConfiguration loggerConfiguration, string mask);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithSensitiveDataMasking with the options argument instead")]
public static LoggerConfiguration WithSensitiveDataMasking(LoggerEnrichmentConfiguration loggerConfiguration, MaskingMode mode, IEnumerable`1<IMaskingOperator> operators, string mask);
    [ExtensionAttribute]
public static LoggerConfiguration WithSensitiveDataMasking(LoggerEnrichmentConfiguration loggerConfiguration, Action`1<SensitiveDataEnricherOptions> configure);
    [ExtensionAttribute]
public static LoggerConfiguration WithSensitiveDataMasking(LoggerEnrichmentConfiguration loggerConfiguration, SensitiveDataEnricherOptions options);
}
public class Serilog.Enrichers.Sensitive.IbanMaskingOperator : RegexMaskingOperator {
    [NullableAttribute("1")]
private static string IbanReplacePattern;
}
[NullableContextAttribute("1")]
public interface Serilog.Enrichers.Sensitive.IMaskingOperator {
    public abstract virtual MaskingResult Mask(string input, string mask);
}
public enum Serilog.Enrichers.Sensitive.MaskingMode : Enum {
    public int value__;
    public static MaskingMode Globally;
    public static MaskingMode InArea;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Enrichers.Sensitive.MaskingResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    public bool Match { get; public set; }
    public string Result { get; public set; }
    public static MaskingResult NoMatch { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
    public static MaskingResult get_NoMatch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Serilog.Enrichers.Sensitive.RegexMaskingOperator : object {
    private Regex _regex;
    protected RegexMaskingOperator(string regexString);
    protected RegexMaskingOperator(string regexString, RegexOptions options);
    public sealed virtual MaskingResult Mask(string input, string mask);
    protected virtual bool ShouldMaskInput(string input);
    protected virtual string PreprocessInput(string input);
    protected virtual string PreprocessMask(string mask);
    protected virtual string PreprocessMask(string mask, Match match);
    protected virtual bool ShouldMaskMatch(Match match);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Serilog.Enrichers.Sensitive.SensitiveArea : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<SensitiveArea> InstanceLocal;
    public static SensitiveArea Instance { get; public set; }
    private static SensitiveArea();
    public static SensitiveArea get_Instance();
    public static void set_Instance(SensitiveArea value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Enrichers.Sensitive.SensitiveDataEnricher : object {
    private MaskingMode _maskingMode;
    public static string DefaultMaskValue;
    private static MessageTemplateParser Parser;
    private FieldInfo _messageTemplateBackingField;
    private List`1<IMaskingOperator> _maskingOperators;
    private string _maskValue;
    private List`1<string> _maskProperties;
    private List`1<string> _excludeProperties;
    public static IEnumerable`1<IMaskingOperator> DefaultOperators { get; }
    public SensitiveDataEnricher(SensitiveDataEnricherOptions options);
    public SensitiveDataEnricher(Action`1<SensitiveDataEnricherOptions> options);
    public SensitiveDataEnricher(MaskingMode maskingMode, IEnumerable`1<IMaskingOperator> maskingOperators, string mask);
    private static SensitiveDataEnricher();
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
    private ValueTuple`2<bool, LogEventPropertyValue> MaskProperty(KeyValuePair`2<string, LogEventPropertyValue> property);
    private ValueTuple`2<bool, string> ReplaceSensitiveDataFromString(string input);
    public static IEnumerable`1<IMaskingOperator> get_DefaultOperators();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Enrichers.Sensitive.SensitiveDataEnricherOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _operators;
    [CompilerGeneratedAttribute]
private MaskingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaskValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IMaskingOperator> <MaskingOperators>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <MaskProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludeProperties>k__BackingField;
    public MaskingMode Mode { get; public set; }
    public string MaskValue { get; public set; }
    public List`1<IMaskingOperator> MaskingOperators { get; public set; }
    public List`1<string> MaskProperties { get; public set; }
    public List`1<string> ExcludeProperties { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Operators { get; public set; }
    public SensitiveDataEnricherOptions(MaskingMode mode, string maskValue, IEnumerable`1<string> maskingOperators, IEnumerable`1<string> maskProperties, IEnumerable`1<string> excludeProperties, IEnumerable`1<string> operators);
    private static List`1<IMaskingOperator> ResolveMaskingOperators(IEnumerable`1<string> maskingOperatorTypeNames);
    [CompilerGeneratedAttribute]
public MaskingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(MaskingMode value);
    [CompilerGeneratedAttribute]
public string get_MaskValue();
    [CompilerGeneratedAttribute]
public void set_MaskValue(string value);
    [CompilerGeneratedAttribute]
public List`1<IMaskingOperator> get_MaskingOperators();
    [CompilerGeneratedAttribute]
public void set_MaskingOperators(List`1<IMaskingOperator> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_MaskProperties();
    [CompilerGeneratedAttribute]
public void set_MaskProperties(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExcludeProperties();
    [CompilerGeneratedAttribute]
public void set_ExcludeProperties(List`1<string> value);
    public String[] get_Operators();
    public void set_Operators(String[] value);
    public void Apply(SensitiveDataEnricherOptions other);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
