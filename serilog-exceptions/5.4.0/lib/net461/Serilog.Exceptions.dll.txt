[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Serilog.Exceptions.Core.DestructuringOptionsBuilder : object {
    public static IExceptionDestructurer[] DefaultDestructurers;
    public static IExceptionPropertyFilter IgnoreStackTraceAndTargetSiteExceptionFilter;
    private List`1<IExceptionDestructurer> destructurers;
    [CompilerGeneratedAttribute]
private string <RootName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DestructuringDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableReflectionBasedDestructurer>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionPropertyFilter <Filter>k__BackingField;
    public string RootName { get; private set; }
    public int DestructuringDepth { get; private set; }
    public bool DisableReflectionBasedDestructurer { get; private set; }
    public IEnumerable`1<IExceptionDestructurer> Destructurers { get; }
    public IExceptionPropertyFilter Filter { get; private set; }
    private static DestructuringOptionsBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootName();
    [CompilerGeneratedAttribute]
private void set_RootName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DestructuringDepth();
    [CompilerGeneratedAttribute]
private void set_DestructuringDepth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableReflectionBasedDestructurer();
    [CompilerGeneratedAttribute]
private void set_DisableReflectionBasedDestructurer(bool value);
    public sealed virtual IEnumerable`1<IExceptionDestructurer> get_Destructurers();
    [CompilerGeneratedAttribute]
public sealed virtual IExceptionPropertyFilter get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(IExceptionPropertyFilter value);
    public DestructuringOptionsBuilder WithDestructurers(IEnumerable`1<IExceptionDestructurer> destructurers);
    public DestructuringOptionsBuilder WithDefaultDestructurers();
    public DestructuringOptionsBuilder WithFilter(IExceptionPropertyFilter filter);
    public DestructuringOptionsBuilder WithIgnoreStackTraceAndTargetSiteExceptionFilter();
    public DestructuringOptionsBuilder WithRootName(string rootName);
    public DestructuringOptionsBuilder WithDestructuringDepth(int destructuringDepth);
    public DestructuringOptionsBuilder WithoutReflectionBasedDestructurer();
}
public class Serilog.Exceptions.Core.ExceptionEnricher : object {
    private IExceptionDestructurer reflectionBasedDestructurer;
    private Dictionary`2<Type, IExceptionDestructurer> destructurers;
    private IDestructuringOptions destructuringOptions;
    public ExceptionEnricher(IDestructuringOptions destructuringOptions);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
    private IReadOnlyDictionary`2<string, object> DestructureException(Exception exception);
}
internal class Serilog.Exceptions.Core.ExceptionPropertiesBag : object {
    private Exception exception;
    private IExceptionPropertyFilter filter;
    private Dictionary`2<string, object> properties;
    private bool resultsCollected;
    public ExceptionPropertiesBag(Exception exception, IExceptionPropertyFilter filter);
    public sealed virtual IReadOnlyDictionary`2<string, object> GetResultDictionary();
    public sealed virtual void AddProperty(string key, object value);
    public sealed virtual bool ContainsProperty(string key);
}
public interface Serilog.Exceptions.Core.IDestructuringOptions {
    public string RootName { get; }
    public int DestructuringDepth { get; }
    public IEnumerable`1<IExceptionDestructurer> Destructurers { get; }
    public IExceptionPropertyFilter Filter { get; }
    public bool DisableReflectionBasedDestructurer { get; }
    public abstract virtual string get_RootName();
    public abstract virtual int get_DestructuringDepth();
    public abstract virtual IEnumerable`1<IExceptionDestructurer> get_Destructurers();
    public abstract virtual IExceptionPropertyFilter get_Filter();
    public abstract virtual bool get_DisableReflectionBasedDestructurer();
}
public interface Serilog.Exceptions.Core.IExceptionPropertiesBag {
    public abstract virtual IReadOnlyDictionary`2<string, object> GetResultDictionary();
    public abstract virtual void AddProperty(string key, object value);
    public abstract virtual bool ContainsProperty(string key);
}
public class Serilog.Exceptions.Destructurers.AggregateExceptionDestructurer : ExceptionDestructurer {
    public Type[] TargetTypes { get; }
    public virtual Type[] get_TargetTypes();
    public virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
}
public class Serilog.Exceptions.Destructurers.ArgumentExceptionDestructurer : ExceptionDestructurer {
    public Type[] TargetTypes { get; }
    public virtual Type[] get_TargetTypes();
    public virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
}
public class Serilog.Exceptions.Destructurers.ArgumentOutOfRangeExceptionDestructurer : ArgumentExceptionDestructurer {
    public Type[] TargetTypes { get; }
    public virtual Type[] get_TargetTypes();
    public virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
}
public class Serilog.Exceptions.Destructurers.ExceptionDestructurer : object {
    public Type[] TargetTypes { get; }
    public virtual Type[] get_TargetTypes();
    public virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
    internal static void DestructureCommonExceptionProperties(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> innerDestructure, Func`2<IDictionary, object> destructureDataProperty);
    private static String[] GetNotHandledByMonoTypes();
}
public interface Serilog.Exceptions.Destructurers.IExceptionDestructurer {
    public Type[] TargetTypes { get; }
    public abstract virtual Type[] get_TargetTypes();
    public abstract virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
}
public class Serilog.Exceptions.Destructurers.OperationCanceledExceptionDestructurer : ExceptionDestructurer {
    private static string CancellationTokenTrue;
    private static string CancellationTokenFalse;
    private static Type[] TargetExceptionTypes;
    public Type[] TargetTypes { get; }
    private static OperationCanceledExceptionDestructurer();
    public virtual Type[] get_TargetTypes();
    public virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
    internal static object DestructureCancellationToken(CancellationToken& cancellationToken);
}
public class Serilog.Exceptions.Destructurers.ReflectionBasedDestructurer : object {
    private static string IdLabel;
    private static string RefLabel;
    private static string CyclicReferenceMessage;
    private int destructuringDepth;
    private object lockObj;
    private Dictionary`2<Type, ReflectionInfo> reflectionInfoCache;
    private PropertyInfo[] baseExceptionPropertiesForDestructuring;
    public Type[] TargetTypes { get; }
    public ReflectionBasedDestructurer(int destructuringDepth);
    public sealed virtual Type[] get_TargetTypes();
    public sealed virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
    private static string GetOrGenerateRefId(Int32& nextCyclicRefId, IDictionary`2<string, object> destructuredObject);
    private static Func`2<object, object> GenerateFastGetterForProperty(Type type, PropertyInfo property);
    private static PropertyInfo[] GetExceptionPropertiesForDestructuring(Type valueType);
    private static object DestructureUri(Uri value);
    private void AppendProperties(object value, ReflectionPropertyInfo[] reflectionPropertyInfos, Action`2<string, object> addPropertyAction, IDictionary`2<object, IDictionary`2<string, object>> destructuredObjects, int level, Int32& nextCyclicRefId);
    private ReflectionInfo GenerateReflectionInfoForType(Type valueType);
    private object DestructureValue(object value, int level, IDictionary`2<object, IDictionary`2<string, object>> destructuredObjects, Int32& nextCyclicRefId);
    private object DestructureValueEnumerable(IEnumerable value, int level, IDictionary`2<object, IDictionary`2<string, object>> destructuredObjects, Int32& nextCyclicRefId);
    private object DestructureValueDictionary(IDictionary value, int level, IDictionary`2<object, IDictionary`2<string, object>> destructuredObjects, Int32& nextCyclicRefId);
    private IDictionary`2<string, object> DestructureObject(object value, Type valueType, int level, IDictionary`2<object, IDictionary`2<string, object>> destructuredObjects, Int32& nextCyclicRefId);
    private object DestructureTask(Task task, int level, IDictionary`2<object, IDictionary`2<string, object>> destructuredObjects, Int32& nextCyclicRefId);
    private ReflectionInfo GetOrCreateReflectionInfo(Type valueType);
    private void AppendTypeIfPossible(IExceptionPropertiesBag propertiesBag, Type valueType);
}
public class Serilog.Exceptions.Destructurers.ReflectionTypeLoadExceptionDestructurer : ExceptionDestructurer {
    public Type[] TargetTypes { get; }
    public virtual Type[] get_TargetTypes();
    public virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
}
public class Serilog.Exceptions.Destructurers.TaskCanceledExceptionDestructurer : OperationCanceledExceptionDestructurer {
    private static Type[] TargetExceptionTypes;
    public Type[] TargetTypes { get; }
    private static TaskCanceledExceptionDestructurer();
    public virtual Type[] get_TargetTypes();
    public virtual void Destructure(Exception exception, IExceptionPropertiesBag propertiesBag, Func`2<Exception, IReadOnlyDictionary`2<string, object>> destructureException);
    internal static object DestructureTask(Task task, Func`2<Exception, IReadOnlyDictionary`2<string, object>> innerDestructure);
}
[ExtensionAttribute]
internal static class Serilog.Exceptions.DictionaryExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, object> ToStringObjectDictionary(IDictionary dictionary);
}
public class Serilog.Exceptions.Filters.CompositeExceptionPropertyFilter : object {
    private IExceptionPropertyFilter[] filters;
    public CompositeExceptionPropertyFilter(IExceptionPropertyFilter[] filters);
    public sealed virtual bool ShouldPropertyBeFiltered(Exception exception, string propertyName, object value);
}
public interface Serilog.Exceptions.Filters.IExceptionPropertyFilter {
    public abstract virtual bool ShouldPropertyBeFiltered(Exception exception, string propertyName, object value);
}
public class Serilog.Exceptions.Filters.IgnorePropertyByNameExceptionFilter : object {
    private String[] propertiesToIgnore;
    public IgnorePropertyByNameExceptionFilter(String[] propertiesToIgnore);
    public sealed virtual bool ShouldPropertyBeFiltered(Exception exception, string propertyName, object value);
}
[ExtensionAttribute]
public static class Serilog.Exceptions.LoggerEnrichmentConfigurationExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration WithExceptionDetails(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithExceptionDetails(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, IDestructuringOptions destructuringOptions);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Serilog.Exceptions.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotBeEmpty { get; }
    internal static string DestructuringDepthMustBeMoreThanZero { get; }
    internal static string FilterAlreadySet { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotBeEmpty();
    internal static string get_DestructuringDepthMustBeMoreThanZero();
    internal static string get_FilterAlreadySet();
}
[ExtensionAttribute]
internal static class Serilog.Exceptions.TypeExtensions : object {
    [ExtensionAttribute]
public static TypeCode GetTypeCode(Type type);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
