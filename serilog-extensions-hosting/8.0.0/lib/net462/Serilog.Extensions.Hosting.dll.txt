[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Serilog.Extensions.Hosting.AmbientDiagnosticContextCollector : object {
    private static AsyncLocal`1<AmbientDiagnosticContextCollector> AmbientCollector;
    private DiagnosticContextCollector _collector;
    public static DiagnosticContextCollector Current { get; }
    private static AmbientDiagnosticContextCollector();
    public static DiagnosticContextCollector get_Current();
    public static DiagnosticContextCollector Begin();
    public sealed virtual void Dispose();
}
public class Serilog.Extensions.Hosting.DiagnosticContext : object {
    private ILogger _logger;
    public DiagnosticContext(ILogger logger);
    public DiagnosticContextCollector BeginCollection();
    public sealed virtual void Set(string propertyName, object value, bool destructureObjects);
    public sealed virtual void SetException(Exception exception);
}
public class Serilog.Extensions.Hosting.DiagnosticContextCollector : object {
    private IDisposable _chainedDisposable;
    private object _propertiesLock;
    private Exception _exception;
    private Dictionary`2<string, LogEventProperty> _properties;
    public DiagnosticContextCollector(IDisposable chainedDisposable);
    public void AddOrUpdate(LogEventProperty property);
    public void SetException(Exception exception);
    [ObsoleteAttribute("Replaced by TryComplete(out IEnumerable<LogEventProperty> properties, out Exception exception).")]
public bool TryComplete(IEnumerable`1& properties);
    public bool TryComplete(IEnumerable`1& properties, Exception& exception);
    public sealed virtual void Dispose();
}
internal class Serilog.Extensions.Hosting.FixedPropertyEnricher : object {
    private LogEventProperty _property;
    public FixedPropertyEnricher(LogEventProperty property);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Serilog.Extensions.Hosting.InjectedLoggerSettings : object {
    private IServiceProvider _services;
    public InjectedLoggerSettings(IServiceProvider services);
    public sealed virtual void Configure(LoggerConfiguration loggerConfiguration);
}
internal interface Serilog.Extensions.Hosting.IReloadableLogger {
    public abstract virtual ILogger ReloadLogger();
}
internal class Serilog.Extensions.Hosting.NullEnricher : object {
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
[ObsoleteAttribute("Replaced with Serilog.Extensions.Logging.SerilogLoggerFactory")]
[EditorBrowsableAttribute("1")]
public class Serilog.Hosting.SerilogLoggerFactory : object {
    private SerilogLoggerProvider _provider;
    public SerilogLoggerFactory(ILogger logger, bool dispose);
    public sealed virtual void Dispose();
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void AddProvider(ILoggerProvider provider);
}
public interface Serilog.IDiagnosticContext {
    public abstract virtual void Set(string propertyName, object value, bool destructureObjects);
    public abstract virtual void SetException(Exception exception);
}
[ExtensionAttribute]
public static class Serilog.LoggerSettingsConfigurationExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration Services(LoggerSettingsConfiguration loggerSettingsConfiguration, IServiceProvider services);
}
[ExtensionAttribute]
public static class Serilog.SerilogHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseSerilog(IHostBuilder builder, ILogger logger, bool dispose, LoggerProviderCollection providers);
    [ExtensionAttribute]
public static IHostBuilder UseSerilog(IHostBuilder builder, Action`2<HostBuilderContext, LoggerConfiguration> configureLogger, bool preserveStaticLogger, bool writeToProviders);
    [ExtensionAttribute]
public static IHostBuilder UseSerilog(IHostBuilder builder, Action`3<HostBuilderContext, IServiceProvider, LoggerConfiguration> configureLogger, bool preserveStaticLogger, bool writeToProviders);
}
[ExtensionAttribute]
public static class Serilog.SerilogServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddSerilog(IServiceCollection collection, ILogger logger, bool dispose, LoggerProviderCollection providers);
    [ExtensionAttribute]
public static IServiceCollection AddSerilog(IServiceCollection collection, Action`1<LoggerConfiguration> configureLogger, bool preserveStaticLogger, bool writeToProviders);
    [ExtensionAttribute]
public static IServiceCollection AddSerilog(IServiceCollection collection, Action`2<IServiceProvider, LoggerConfiguration> configureLogger, bool preserveStaticLogger, bool writeToProviders);
    private static void ConfigureDiagnosticContext(IServiceCollection collection, bool useRegisteredLogger);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
