[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Serilog.ConfigurationLoggerConfigurationExtensions : object {
    public static string DefaultSectionName;
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, ConfigurationReaderOptions readerOptions) instead.")]
public static LoggerConfiguration Configuration(LoggerSettingsConfiguration settingConfiguration, IConfiguration configuration, string sectionName, DependencyContext dependencyContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, ConfigurationReaderOptions readerOptions) instead.")]
public static LoggerConfiguration Configuration(LoggerSettingsConfiguration settingConfiguration, IConfiguration configuration, DependencyContext dependencyContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, string sectionName, DependencyContext dependencyContext) instead.")]
public static LoggerConfiguration ConfigurationSection(LoggerSettingsConfiguration settingConfiguration, IConfigurationSection configSection, DependencyContext dependencyContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, ConfigurationReaderOptions readerOptions) instead.")]
public static LoggerConfiguration Configuration(LoggerSettingsConfiguration settingConfiguration, IConfiguration configuration, string sectionName, ConfigurationAssemblySource configurationAssemblySource);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, ConfigurationReaderOptions readerOptions) instead.")]
public static LoggerConfiguration Configuration(LoggerSettingsConfiguration settingConfiguration, IConfiguration configuration, ConfigurationAssemblySource configurationAssemblySource);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, string sectionName, ConfigurationAssemblySource configurationAssemblySource) instead.")]
public static LoggerConfiguration ConfigurationSection(LoggerSettingsConfiguration settingConfiguration, IConfigurationSection configSection, ConfigurationAssemblySource configurationAssemblySource);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, ConfigurationReaderOptions readerOptions) instead.")]
public static LoggerConfiguration Configuration(LoggerSettingsConfiguration settingConfiguration, IConfiguration configuration, string sectionName, Assembly[] assemblies);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadFrom.Configuration(IConfiguration configuration, ConfigurationReaderOptions readerOptions) instead.")]
public static LoggerConfiguration Configuration(LoggerSettingsConfiguration settingConfiguration, IConfiguration configuration, Assembly[] assemblies);
    [ExtensionAttribute]
public static LoggerConfiguration Configuration(LoggerSettingsConfiguration settingConfiguration, IConfiguration configuration, ConfigurationReaderOptions readerOptions);
    private static ConfigurationReader GetConfigurationReader(IConfiguration configuration, ConfigurationReaderOptions readerOptions, DependencyContext dependencyContext);
    private static ConfigurationReader GetConfigurationReader(IConfiguration configuration, ConfigurationReaderOptions readerOptions, ConfigurationAssemblySource source);
    private static ConfigurationReader GetConfigurationReader(IConfiguration configuration, ConfigurationReaderOptions readerOptions, IReadOnlyCollection`1<Assembly> assemblies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Serilog.Settings.Configuration.Assemblies.AssemblyFinder : object {
    public abstract virtual IReadOnlyList`1<AssemblyName> FindAssembliesContainingName(string nameToFind);
    protected static bool IsCaseInsensitiveMatch(string text, string textToFind);
    public static AssemblyFinder Auto();
    public static AssemblyFinder ForSource(ConfigurationAssemblySource configurationAssemblySource);
    public static AssemblyFinder ForDependencyContext(DependencyContext dependencyContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.Configuration.Assemblies.CompositeAssemblyFinder : AssemblyFinder {
    private AssemblyFinder[] _assemblyFinders;
    public CompositeAssemblyFinder(AssemblyFinder[] assemblyFinders);
    public virtual IReadOnlyList`1<AssemblyName> FindAssembliesContainingName(string nameToFind);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Serilog.Settings.Configuration.Assemblies.DependencyContextAssemblyFinder : AssemblyFinder {
    private DependencyContext _dependencyContext;
    public DependencyContextAssemblyFinder(DependencyContext dependencyContext);
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<AssemblyName> FindAssembliesContainingName(string nameToFind);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <FindAssembliesContainingName>g__IsReferencingSerilog|2_5(Library library);
}
internal class Serilog.Settings.Configuration.Assemblies.DllScanningAssemblyFinder : AssemblyFinder {
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<AssemblyName> FindAssembliesContainingName(string nameToFind);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static AssemblyName <FindAssembliesContainingName>g__TryGetAssemblyNameFrom|0_8(string path);
}
public enum Serilog.Settings.Configuration.ConfigurationAssemblySource : Enum {
    public int value__;
    public static ConfigurationAssemblySource UseLoadedAssemblies;
    public static ConfigurationAssemblySource AlwaysScanDllFiles;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.Configuration.ConfigurationReader : object {
    private static string LevelSwitchNameRegex;
    private static String[] BuiltinSectionNames;
    private IConfiguration _section;
    private IReadOnlyCollection`1<Assembly> _configurationAssemblies;
    private ResolutionContext _resolutionContext;
    [NullableAttribute("2")]
private IConfigurationRoot _configurationRoot;
    public ConfigurationReader(IConfiguration configSection, AssemblyFinder assemblyFinder, ConfigurationReaderOptions readerOptions, IConfiguration configuration);
    internal ConfigurationReader(IConfiguration configSection, IReadOnlyCollection`1<Assembly> configurationAssemblies, ResolutionContext resolutionContext);
    private static ConfigurationReader();
    public sealed virtual void Configure(LoggerConfiguration loggerConfiguration);
    private void ProcessFilterSwitchDeclarations();
    private void ProcessLevelSwitchDeclarations();
    private void ApplyMinimumLevel(LoggerConfiguration loggerConfiguration);
    private void SubscribeToLoggingLevelChanges(IConfigurationSection levelSection, LoggingLevelSwitch levelSwitch);
    private void ApplyFilters(LoggerConfiguration loggerConfiguration);
    private void ApplyDestructuring(LoggerConfiguration loggerConfiguration);
    private void ApplySinks(LoggerConfiguration loggerConfiguration);
    private void ApplyAuditSinks(LoggerConfiguration loggerConfiguration);
    private sealed virtual override void Serilog.Settings.Configuration.IConfigurationReader.ApplySinks(LoggerSinkConfiguration loggerSinkConfiguration);
    private sealed virtual override void Serilog.Settings.Configuration.IConfigurationReader.ApplyEnrichment(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration);
    private void ApplyEnrichment(LoggerConfiguration loggerConfiguration);
    internal ILookup`2<string, Dictionary`2<string, IConfigurationArgumentValue>> GetMethodCalls(IConfiguration directive);
    internal static IConfigurationArgumentValue GetArgumentValue(IConfigurationSection argumentSection, IReadOnlyCollection`1<Assembly> configurationAssemblies);
    private static IReadOnlyCollection`1<Assembly> LoadConfigurationAssemblies(IConfiguration section, AssemblyFinder assemblyFinder);
    private void CallConfigurationMethods(ILookup`2<string, Dictionary`2<string, IConfigurationArgumentValue>> methods, IReadOnlyCollection`1<MethodInfo> configurationMethods, object receiver);
    private static bool HasImplicitValueWhenNotSpecified(ParameterInfo paramInfo);
    private object GetImplicitValueForNotSpecifiedKey(ParameterInfo parameter, MethodInfo methodToInvoke);
    internal static MethodInfo SelectConfigurationMethod(IReadOnlyCollection`1<MethodInfo> candidateMethods, string name, IReadOnlyCollection`1<string> suppliedArgumentNames);
    private static bool ParameterNameMatches(string actualParameterName, string suppliedName);
    private static bool ParameterNameMatches(string actualParameterName, IEnumerable`1<string> suppliedNames);
    private static IReadOnlyCollection`1<MethodInfo> FindSinkConfigurationMethods(IReadOnlyCollection`1<Assembly> configurationAssemblies, bool allowInternalTypes, bool allowInternalMethods);
    private static IReadOnlyCollection`1<MethodInfo> FindAuditSinkConfigurationMethods(IReadOnlyCollection`1<Assembly> configurationAssemblies, bool allowInternalTypes, bool allowInternalMethods);
    private static IReadOnlyCollection`1<MethodInfo> FindFilterConfigurationMethods(IReadOnlyCollection`1<Assembly> configurationAssemblies, bool allowInternalTypes, bool allowInternalMethods);
    private static IReadOnlyCollection`1<MethodInfo> FindDestructureConfigurationMethods(IReadOnlyCollection`1<Assembly> configurationAssemblies, bool allowInternalTypes, bool allowInternalMethods);
    private static IReadOnlyCollection`1<MethodInfo> FindEventEnricherConfigurationMethods(IReadOnlyCollection`1<Assembly> configurationAssemblies, bool allowInternalTypes, bool allowInternalMethods);
    private static List`1<MethodInfo> FindConfigurationExtensionMethods(IReadOnlyCollection`1<Assembly> configurationAssemblies, Type configType, bool allowInternalTypes, bool allowInternalMethods);
    internal static bool IsValidSwitchName(string input);
    private static LogEventLevel ParseLogEventLevel(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType6`2<<>f__AnonymousType5`2<IConfigurationSection, string>, Dictionary`2<string, IConfigurationArgumentValue>> <GetMethodCalls>b__20_4(<>f__AnonymousType5`2<IConfigurationSection, string> <>h__TransparentIdentifier0);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType7`2<string, IConfigurationArgumentValue> <GetMethodCalls>b__20_9(IConfigurationSection argument);
    [CompilerGeneratedAttribute]
internal static string <GetMethodCalls>g__GetSectionName|20_8(IConfigurationSection s);
    [CompilerGeneratedAttribute]
internal static bool <FindConfigurationExtensionMethods>g__HasCustomExtensionAttribute|34_0(MethodInfo m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Serilog.Settings.Configuration.ConfigurationReaderOptions : object {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormatProvider <FormatProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInternalTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInternalMethods>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<string, LoggingLevelSwitch> <OnLevelSwitchCreated>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<string, ILoggingFilterSwitch> <OnFilterSwitchCreated>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Assembly[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyContext <DependencyContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConfigurationAssemblySource> <ConfigurationAssemblySource>k__BackingField;
    public string SectionName { get; public set; }
    public IFormatProvider FormatProvider { get; public set; }
    public bool AllowInternalTypes { get; public set; }
    public bool AllowInternalMethods { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<string, LoggingLevelSwitch> OnLevelSwitchCreated { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<string, ILoggingFilterSwitch> OnFilterSwitchCreated { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Assembly[] Assemblies { get; }
    internal DependencyContext DependencyContext { get; }
    internal Nullable`1<ConfigurationAssemblySource> ConfigurationAssemblySource { get; }
    [NullableContextAttribute("1")]
public ConfigurationReaderOptions(Assembly[] assemblies);
    public ConfigurationReaderOptions(DependencyContext dependencyContext);
    public ConfigurationReaderOptions(ConfigurationAssemblySource configurationAssemblySource);
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SectionName(string value);
    [CompilerGeneratedAttribute]
public IFormatProvider get_FormatProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FormatProvider(IFormatProvider value);
    [CompilerGeneratedAttribute]
public bool get_AllowInternalTypes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AllowInternalTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowInternalMethods();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AllowInternalMethods(bool value);
    [CompilerGeneratedAttribute]
public Action`2<string, LoggingLevelSwitch> get_OnLevelSwitchCreated();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnLevelSwitchCreated(Action`2<string, LoggingLevelSwitch> value);
    [CompilerGeneratedAttribute]
public Action`2<string, ILoggingFilterSwitch> get_OnFilterSwitchCreated();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnFilterSwitchCreated(Action`2<string, ILoggingFilterSwitch> value);
    [CompilerGeneratedAttribute]
internal Assembly[] get_Assemblies();
    [CompilerGeneratedAttribute]
internal DependencyContext get_DependencyContext();
    [CompilerGeneratedAttribute]
internal Nullable`1<ConfigurationAssemblySource> get_ConfigurationAssemblySource();
}
[NullableContextAttribute("1")]
internal interface Serilog.Settings.Configuration.IConfigurationArgumentValue {
    public abstract virtual object ConvertTo(Type toType, ResolutionContext resolutionContext);
}
[NullableContextAttribute("1")]
internal interface Serilog.Settings.Configuration.IConfigurationReader {
    public abstract virtual void ApplySinks(LoggerSinkConfiguration loggerSinkConfiguration);
    public abstract virtual void ApplyEnrichment(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration);
}
[NullableContextAttribute("2")]
public interface Serilog.Settings.Configuration.ILoggingFilterSwitch {
    public string Expression { get; public set; }
    public abstract virtual string get_Expression();
    public abstract virtual void set_Expression(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.Configuration.LoggingFilterSwitchProxy : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<string> _setProxy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<string> _getProxy;
    [CompilerGeneratedAttribute]
private object <RealSwitch>k__BackingField;
    public object RealSwitch { get; }
    [NullableAttribute("2")]
public string Expression { get; public set; }
    private LoggingFilterSwitchProxy(object realSwitch);
    [CompilerGeneratedAttribute]
public object get_RealSwitch();
    [NullableContextAttribute("2")]
public sealed virtual string get_Expression();
    [NullableContextAttribute("2")]
public sealed virtual void set_Expression(string value);
    [NullableContextAttribute("2")]
public static LoggingFilterSwitchProxy Create(string expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.Configuration.ObjectArgumentValue : object {
    private IConfigurationSection _section;
    private IReadOnlyCollection`1<Assembly> _configurationAssemblies;
    public ObjectArgumentValue(IConfigurationSection section, IReadOnlyCollection`1<Assembly> configurationAssemblies);
    public sealed virtual object ConvertTo(Type toType, ResolutionContext resolutionContext);
    private bool TryCallCtorExplicit(IConfigurationSection section, ResolutionContext resolutionContext, Object& value);
    private bool TryCallCtorImplicit(IConfigurationSection section, Type parameterType, ResolutionContext resolutionContext, Object& value);
    private bool TryCallCtor(Type type, Dictionary`2<string, IConfigurationSection> suppliedArguments, ResolutionContext resolutionContext, Object& value);
    private static bool IsContainer(Type type, Type& elementType);
    [NullableContextAttribute("2")]
private static bool IsConstructableDictionary(Type type, Type elementType, Type& concreteType, Type& keyType, Type& valueType, MethodInfo& addMethod);
    private static bool IsConstructableContainer(Type type, Type elementType, Type& concreteType, MethodInfo& addMethod);
    [CompilerGeneratedAttribute]
private object <ConvertTo>g__CreateArray|3_0(<>c__DisplayClass3_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private bool <ConvertTo>g__TryCreateContainer|3_1(Object& result, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.Configuration.ResolutionContext : object {
    private IDictionary`2<string, LoggingLevelSwitch> _declaredLevelSwitches;
    private IDictionary`2<string, LoggingFilterSwitchProxy> _declaredFilterSwitches;
    [NullableAttribute("2")]
private IConfiguration _appConfiguration;
    [CompilerGeneratedAttribute]
private ConfigurationReaderOptions <ReaderOptions>k__BackingField;
    public ConfigurationReaderOptions ReaderOptions { get; }
    public bool HasAppConfiguration { get; }
    public IConfiguration AppConfiguration { get; }
    [NullableContextAttribute("2")]
public ResolutionContext(IConfiguration appConfiguration, ConfigurationReaderOptions readerOptions);
    [CompilerGeneratedAttribute]
public ConfigurationReaderOptions get_ReaderOptions();
    public LoggingLevelSwitch LookUpLevelSwitchByName(string switchName);
    public LoggingFilterSwitchProxy LookUpFilterSwitchByName(string switchName);
    public bool get_HasAppConfiguration();
    public IConfiguration get_AppConfiguration();
    public string AddLevelSwitch(string levelSwitchName, LoggingLevelSwitch levelSwitch);
    public void AddFilterSwitch(string filterSwitchName, LoggingFilterSwitchProxy filterSwitch);
    private string ToSwitchReference(string switchName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.Configuration.StringArgumentValue : object {
    private string _providedValue;
    private static Regex StaticMemberAccessorRegex;
    private static Dictionary`2<Type, Func`2<string, object>> ExtendedTypeConversions;
    public StringArgumentValue(string providedValue);
    private static StringArgumentValue();
    public sealed virtual object ConvertTo(Type toType, ResolutionContext resolutionContext);
    internal static Type FindType(string typeName);
    [NullableContextAttribute("2")]
internal static bool TryParseStaticMemberAccessor(string input, String& accessorTypeName, String& memberName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Settings.Configuration.SurrogateConfigurationMethods : object {
    private static Dictionary`2<Type, MethodInfo[]> SurrogateMethodCandidates;
    internal static MethodInfo[] WriteTo;
    internal static MethodInfo[] AuditTo;
    internal static MethodInfo[] Enrich;
    internal static MethodInfo[] Destructure;
    internal static MethodInfo[] Filter;
    private static SurrogateConfigurationMethods();
    private static LoggerConfiguration Sink(LoggerSinkConfiguration loggerSinkConfiguration, ILogEventSink sink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    private static LoggerConfiguration Logger(LoggerSinkConfiguration loggerSinkConfiguration, Action`1<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    private static LoggerConfiguration Sink(LoggerAuditSinkConfiguration auditSinkConfiguration, ILogEventSink sink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    private static LoggerConfiguration Logger(LoggerAuditSinkConfiguration auditSinkConfiguration, Action`1<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    private static LoggerConfiguration With(LoggerFilterConfiguration loggerFilterConfiguration, ILogEventFilter filter);
    private static LoggerConfiguration With(LoggerDestructuringConfiguration loggerDestructuringConfiguration, IDestructuringPolicy policy);
    private static LoggerConfiguration ToMaximumDepth(LoggerDestructuringConfiguration loggerDestructuringConfiguration, int maximumDestructuringDepth);
    private static LoggerConfiguration ToMaximumStringLength(LoggerDestructuringConfiguration loggerDestructuringConfiguration, int maximumStringLength);
    private static LoggerConfiguration ToMaximumCollectionCount(LoggerDestructuringConfiguration loggerDestructuringConfiguration, int maximumCollectionCount);
    private static LoggerConfiguration AsScalar(LoggerDestructuringConfiguration loggerDestructuringConfiguration, Type scalarType);
    private static LoggerConfiguration With(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, ILogEventEnricher enricher);
    private static LoggerConfiguration AtLevel(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, Action`1<LoggerEnrichmentConfiguration> configureEnricher, LogEventLevel enrichFromLevel, LoggingLevelSwitch levelSwitch);
    private static LoggerConfiguration FromLogContext(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration);
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
