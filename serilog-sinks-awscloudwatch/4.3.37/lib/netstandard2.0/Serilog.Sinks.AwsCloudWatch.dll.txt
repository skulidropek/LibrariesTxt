[ExtensionAttribute]
public static class Serilog.Sinks.AwsCloudWatch.AwsCloudWatchConfigurationExtension : object {
    [ExtensionAttribute]
public static LoggerConfiguration AmazonCloudWatch(LoggerSinkConfiguration loggerConfiguration, ICloudWatchSinkOptions options, IAmazonCloudWatchLogs cloudWatchClient);
    [ExtensionAttribute]
public static LoggerConfiguration AmazonCloudWatch(LoggerSinkConfiguration loggerConfiguration, string logGroup, string logStreamPrefix, LogEventLevel restrictedToMinimumLevel, int batchSizeLimit, int batchUploadPeriodInSeconds, bool createLogGroup, int queueSizeLimit, byte maxRetryAttempts, LogGroupRetentionPolicy logGroupRetentionPolicy, bool appendUniqueInstanceGuid, bool appendHostName, ITextFormatter textFormatter, IAmazonCloudWatchLogs cloudWatchClient);
    [ExtensionAttribute]
public static LoggerConfiguration AmazonCloudWatch(LoggerSinkConfiguration loggerConfiguration, string logGroup, ILogStreamNameProvider logStreamNameProvider, LogEventLevel restrictedToMinimumLevel, int batchSizeLimit, int batchUploadPeriodInSeconds, bool createLogGroup, int queueSizeLimit, byte maxRetryAttempts, LogGroupRetentionPolicy logGroupRetentionPolicy, ITextFormatter textFormatter, IAmazonCloudWatchLogs cloudWatchClient);
}
public class Serilog.Sinks.AwsCloudWatch.CloudWatchLogSink : object {
    private PeriodicBatchingSink batchingSink;
    public static int MaxLogEventSize;
    public static int MaxLogEventBatchSize;
    public static int MaxLogEventBatchCount;
    public static int MessageBufferSize;
    public static TimeSpan MaxBatchEventSpan;
    public static TimeSpan ErrorBackoffStartingInterval;
    public CloudWatchLogSink(IAmazonCloudWatchLogs cloudWatchClient, ICloudWatchSinkOptions options);
    private static CloudWatchLogSink();
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
}
public class Serilog.Sinks.AwsCloudWatch.CloudWatchSinkOptions : object {
    public static LogEventLevel DefaultMinimumLogEventLevel;
    public static int DefaultBatchSizeLimit;
    public static int DefaultQueueSizeLimit;
    public static bool DefaultCreateLogGroup;
    public static byte DefaultRetryAttempts;
    public static TimeSpan DefaultPeriod;
    [CompilerGeneratedAttribute]
private LogEventLevel <MinimumLogEventLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueueSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private LogGroupRetentionPolicy <LogGroupRetentionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateLogGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogStreamNameProvider <LogStreamNameProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextFormatter <TextFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <RetryAttempts>k__BackingField;
    public LogEventLevel MinimumLogEventLevel { get; public set; }
    public int BatchSizeLimit { get; public set; }
    public int QueueSizeLimit { get; public set; }
    public TimeSpan Period { get; public set; }
    public LogGroupRetentionPolicy LogGroupRetentionPolicy { get; public set; }
    public bool CreateLogGroup { get; public set; }
    public string LogGroupName { get; public set; }
    public ILogStreamNameProvider LogStreamNameProvider { get; public set; }
    public ITextFormatter TextFormatter { get; public set; }
    public byte RetryAttempts { get; public set; }
    private static CloudWatchSinkOptions();
    [CompilerGeneratedAttribute]
public sealed virtual LogEventLevel get_MinimumLogEventLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumLogEventLevel(LogEventLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_BatchSizeLimit();
    [CompilerGeneratedAttribute]
public void set_BatchSizeLimit(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_QueueSizeLimit();
    [CompilerGeneratedAttribute]
public void set_QueueSizeLimit(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual LogGroupRetentionPolicy get_LogGroupRetentionPolicy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogGroupRetentionPolicy(LogGroupRetentionPolicy value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CreateLogGroup();
    [CompilerGeneratedAttribute]
public void set_CreateLogGroup(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LogGroupName();
    [CompilerGeneratedAttribute]
public void set_LogGroupName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ILogStreamNameProvider get_LogStreamNameProvider();
    [CompilerGeneratedAttribute]
public void set_LogStreamNameProvider(ILogStreamNameProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual ITextFormatter get_TextFormatter();
    [CompilerGeneratedAttribute]
public void set_TextFormatter(ITextFormatter value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_RetryAttempts();
    [CompilerGeneratedAttribute]
public void set_RetryAttempts(byte value);
}
public class Serilog.Sinks.AwsCloudWatch.ConstantLogStreamNameProvider : object {
    private string _prefix;
    public ConstantLogStreamNameProvider(string prefix);
    public sealed virtual string GetLogStreamName();
}
public class Serilog.Sinks.AwsCloudWatch.DefaultLogStreamProvider : object {
    private string DATETIME_FORMAT;
    public sealed virtual string GetLogStreamName();
}
[ExtensionAttribute]
internal static class Serilog.Sinks.AwsCloudWatch.HttpStatusCodeExtensions : object {
    [ExtensionAttribute]
public static bool IsSuccessStatusCode(HttpStatusCode statusCode);
    [ExtensionAttribute]
public static string FlattenedMetaData(ResponseMetadata metadata);
}
public interface Serilog.Sinks.AwsCloudWatch.ICloudWatchSinkOptions {
    public LogEventLevel MinimumLogEventLevel { get; }
    public int BatchSizeLimit { get; }
    public int QueueSizeLimit { get; }
    public TimeSpan Period { get; }
    public LogGroupRetentionPolicy LogGroupRetentionPolicy { get; public set; }
    public bool CreateLogGroup { get; }
    public string LogGroupName { get; }
    public ILogStreamNameProvider LogStreamNameProvider { get; }
    public ITextFormatter TextFormatter { get; }
    public byte RetryAttempts { get; }
    public abstract virtual LogEventLevel get_MinimumLogEventLevel();
    public abstract virtual int get_BatchSizeLimit();
    public abstract virtual int get_QueueSizeLimit();
    public abstract virtual TimeSpan get_Period();
    public abstract virtual LogGroupRetentionPolicy get_LogGroupRetentionPolicy();
    public abstract virtual void set_LogGroupRetentionPolicy(LogGroupRetentionPolicy value);
    public abstract virtual bool get_CreateLogGroup();
    public abstract virtual string get_LogGroupName();
    public abstract virtual ILogStreamNameProvider get_LogStreamNameProvider();
    public abstract virtual ITextFormatter get_TextFormatter();
    public abstract virtual byte get_RetryAttempts();
}
public interface Serilog.Sinks.AwsCloudWatch.ILogStreamNameProvider {
    public abstract virtual string GetLogStreamName();
}
public enum Serilog.Sinks.AwsCloudWatch.LogGroupRetentionPolicy : Enum {
    public int value__;
    public static LogGroupRetentionPolicy Indefinitely;
    public static LogGroupRetentionPolicy OneDay;
    public static LogGroupRetentionPolicy ThreeDays;
    public static LogGroupRetentionPolicy FiveDays;
    public static LogGroupRetentionPolicy OneWeek;
    public static LogGroupRetentionPolicy TwoWeeks;
    public static LogGroupRetentionPolicy OneMonth;
    public static LogGroupRetentionPolicy TwoMonths;
    public static LogGroupRetentionPolicy ThreeMonths;
    public static LogGroupRetentionPolicy FourMonths;
    public static LogGroupRetentionPolicy FiveMonths;
    public static LogGroupRetentionPolicy SixMonths;
    public static LogGroupRetentionPolicy OneYear;
    public static LogGroupRetentionPolicy OneYearAndOneMonth;
    public static LogGroupRetentionPolicy OneYearAndSixMonths;
    public static LogGroupRetentionPolicy TwoYears;
    public static LogGroupRetentionPolicy FiveYears;
    public static LogGroupRetentionPolicy TenYears;
}
public class Serilog.Sinks.AwsCloudWatch.LogStreamNameProvider.ConfigurableLogStreamNameProvider : object {
    private string logStreamPrefix;
    private Guid instanceGuid;
    private bool appendHostName;
    private bool appendUniqueInstanceGuid;
    private string streamName;
    public ConfigurableLogStreamNameProvider(string logStreamPrefix, bool appendHostName, bool appendUniqueInstanceGuid);
    public sealed virtual string GetLogStreamName();
}
internal class Serilog.Sinks.AwsCloudWatch.PeriodicBatchingSinkImplementationCallback : object {
    private IAmazonCloudWatchLogs cloudWatchClient;
    private ICloudWatchSinkOptions options;
    private bool hasInit;
    private string logStreamName;
    private ITextFormatter textFormatter;
    private SemaphoreSlim syncObject;
    public PeriodicBatchingSinkImplementationCallback(IAmazonCloudWatchLogs cloudWatchClient, ICloudWatchSinkOptions options);
    [AsyncStateMachineAttribute("Serilog.Sinks.AwsCloudWatch.PeriodicBatchingSinkImplementationCallback/<EnsureInitializedAsync>d__7")]
private Task EnsureInitializedAsync();
    [AsyncStateMachineAttribute("Serilog.Sinks.AwsCloudWatch.PeriodicBatchingSinkImplementationCallback/<CreateLogGroupAsync>d__8")]
private Task CreateLogGroupAsync();
    private void UpdateLogStreamName();
    [AsyncStateMachineAttribute("Serilog.Sinks.AwsCloudWatch.PeriodicBatchingSinkImplementationCallback/<CreateLogStreamAsync>d__10")]
private Task CreateLogStreamAsync();
    [AsyncStateMachineAttribute("Serilog.Sinks.AwsCloudWatch.PeriodicBatchingSinkImplementationCallback/<GetLogStreamAsync>d__11")]
private Task`1<LogStream> GetLogStreamAsync();
    private List`1<InputLogEvent> CreateBatch(Queue`1<InputLogEvent> logEvents);
    [AsyncStateMachineAttribute("Serilog.Sinks.AwsCloudWatch.PeriodicBatchingSinkImplementationCallback/<PublishBatchAsync>d__13")]
private Task PublishBatchAsync(List`1<InputLogEvent> batch);
    [AsyncStateMachineAttribute("Serilog.Sinks.AwsCloudWatch.PeriodicBatchingSinkImplementationCallback/<EmitBatchAsync>d__14")]
public sealed virtual Task EmitBatchAsync(IEnumerable`1<LogEvent> events);
    public sealed virtual Task OnEmptyBatchAsync();
    [CompilerGeneratedAttribute]
private bool <CreateLogGroupAsync>b__8_0(LogGroup lg);
    [CompilerGeneratedAttribute]
private bool <GetLogStreamAsync>b__11_0(LogStream ls);
    [CompilerGeneratedAttribute]
private InputLogEvent <EmitBatchAsync>b__14_1(LogEvent event);
}
