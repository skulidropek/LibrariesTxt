[ExtensionAttribute]
public static class Serilog.LoggerConfigurationExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This interface is obsolete and may get removed in future release. Please consider using AzureAnalytics", "False")]
public static LoggerConfiguration AzureLogAnalytics(LoggerSinkConfiguration loggerConfiguration, string workspaceId, string authenticationId, string logName, LogEventLevel restrictedToMinimumLevel, bool storeTimestampInUtc, IFormatProvider formatProvider, int logBufferSize, int batchSize, AzureOfferingType azureOfferingType, string proxy);
    [ExtensionAttribute]
public static LoggerConfiguration AzureAnalytics(LoggerSinkConfiguration loggerConfiguration, string workspaceId, string authenticationId, string logName, LogEventLevel restrictedToMinimumLevel, bool storeTimestampInUtc, IFormatProvider formatProvider, int logBufferSize, int batchSize, AzureOfferingType azureOfferingType, LoggingLevelSwitch levelSwitch, bool flattenObject, string proxy);
    [ExtensionAttribute]
public static LoggerConfiguration AzureAnalytics(LoggerSinkConfiguration loggerConfiguration, string workspaceId, string authenticationId, ConfigurationSettings loggerSettings, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
}
public enum Serilog.Sinks.AzureAnalytics.AzureOfferingType : Enum {
    public int value__;
    public static AzureOfferingType Public;
    public static AzureOfferingType US_Government;
    public static AzureOfferingType China;
}
public class Serilog.Sinks.AzureAnalytics.ConfigurationSettings : object {
    private int _logBufferSize;
    private int _batchSize;
    private string _logName;
    public bool StoreTimestampInUtc;
    public IFormatProvider FormatProvider;
    public AzureOfferingType AzureOfferingType;
    public NamingStrategy PropertyNamingStrategy;
    [CompilerGeneratedAttribute]
private bool <Flatten>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Proxy>k__BackingField;
    public int BufferSize { get; public set; }
    public int BatchSize { get; public set; }
    public string LogName { get; public set; }
    public bool Flatten { get; public set; }
    public string Proxy { get; public set; }
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public string get_LogName();
    public void set_LogName(string value);
    [CompilerGeneratedAttribute]
public bool get_Flatten();
    [CompilerGeneratedAttribute]
public void set_Flatten(bool value);
    [CompilerGeneratedAttribute]
public string get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(string value);
}
public enum Serilog.Sinks.AzureAnalytics.NamingStrategy : Enum {
    public int value__;
    public static NamingStrategy Default;
    public static NamingStrategy CamelCase;
    public static NamingStrategy Application;
}
internal class Serilog.Sinks.AzureAnalytics.WebProxy : object {
    private Uri _proxyUri;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    public ICredentials Credentials { get; public set; }
    public WebProxy(string proxy);
    private WebProxy(Uri proxyUri);
    public sealed virtual Uri GetProxy(Uri destination);
    public sealed virtual bool IsBypassed(Uri host);
    [CompilerGeneratedAttribute]
public sealed virtual ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Credentials(ICredentials value);
}
internal class Serilog.Sinks.AzureLogAnalyticsSink : BatchProvider {
    private SemaphoreSlim _semaphore;
    private Uri _analyticsUrl;
    private string _authenticationId;
    private string _workSpaceId;
    private JsonSerializer _jsonSerializer;
    private JsonSerializerSettings _jsonSerializerSettings;
    private ConfigurationSettings _configurationSettings;
    private static HttpClientHandler ClientHandler;
    private static HttpClient Client;
    private static int MaximumMessageSize;
    internal AzureLogAnalyticsSink(string workSpaceId, string authenticationId, ConfigurationSettings settings);
    internal AzureLogAnalyticsSink(string workSpaceId, string authenticationId, string logName, bool storeTimestampInUtc, IFormatProvider formatProvider, int logBufferSize, int batchSize, AzureOfferingType azureOfferingType, bool flattenObjects, string proxy);
    private static AzureLogAnalyticsSink();
    private static Uri GetServiceEndpoint(AzureOfferingType azureOfferingType, string workspaceId);
    public sealed virtual void Emit(LogEvent logEvent);
    private int GetStringSizeInBytes(int stringLength);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureLogAnalyticsSink/<WriteLogEventAsync>d__15")]
protected virtual Task`1<bool> WriteLogEventAsync(ICollection`1<LogEvent> logEventsBatch);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureLogAnalyticsSink/<SendLogMessageAsync>d__16")]
private Task`1<bool> SendLogMessageAsync(List`1<string> jsonStringCollection);
    private static string BuildSignature(int contentLength, string dateString, string key);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureLogAnalyticsSink/<PostDataAsync>d__18")]
private Task`1<bool> PostDataAsync(List`1<string> jsonStringCollection);
}
internal abstract class Serilog.Sinks.Batch.BatchProvider : object {
    private static int MaxSupportedBufferSize;
    private static int MaxSupportedBatchSize;
    private int _numMessages;
    private bool _canStop;
    private int _maxBufferSize;
    private int _batchSize;
    private ConcurrentQueue`1<LogEvent> _logEventBatch;
    private BlockingCollection`1<IList`1<LogEvent>> _batchEventsCollection;
    private BlockingCollection`1<LogEvent> _eventsCollection;
    private TimeSpan _timerThresholdSpan;
    private TimeSpan _transientThresholdSpan;
    private Task _timerTask;
    private Task _batchTask;
    private Task _eventPumpTask;
    private CancellationTokenSource _cancellationTokenSource;
    private AutoResetEvent _timerResetEvent;
    private SemaphoreSlim _semaphoreSlim;
    private bool _disposedValue;
    protected BatchProvider(int batchSize, int maxBufferSize);
    [AsyncStateMachineAttribute("Serilog.Sinks.Batch.BatchProvider/<PumpAsync>d__18")]
private Task PumpAsync();
    private void TimerPump();
    private void EventPump();
    private void FlushLogEventBatch();
    protected void PushEvent(LogEvent logEvent);
    protected abstract virtual Task`1<bool> WriteLogEventAsync(ICollection`1<LogEvent> logEventsBatch);
    protected virtual void Dispose(bool disposing);
    private void FlushAndCloseEventHandlers();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Serilog.Sinks.Extensions.JsonExtensions : object {
    private static string LogPropertyName;
    [ExtensionAttribute]
internal static JObject Flatten(JObject jsonObject, bool flatObject);
    private static string Join(string prefix, string name);
    private static void FlattenJToken(IDictionary`2<string, object> dict, JToken token, string prefix);
}
[ExtensionAttribute]
internal static class Serilog.Sinks.Extensions.LogEventExtensions : object {
    [ExtensionAttribute]
internal static string Json(LogEvent logEvent, bool storeTimestampInUtc);
    [ExtensionAttribute]
internal static IDictionary`2<string, object> Dictionary(LogEvent logEvent, bool storeTimestampInUtc, IFormatProvider formatProvider);
    [ExtensionAttribute]
internal static string Json(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    [ExtensionAttribute]
internal static IDictionary`2<string, object> Dictionary(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    private static object ConvertToDictionary(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    private static object ConvertToDictionary(LogEvent logEvent, bool storeTimestampInUtc, IFormatProvider formatProvider);
    private static object Simplify(LogEventPropertyValue data);
}
