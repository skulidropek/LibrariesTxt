[ExtensionAttribute]
public static class Serilog.LoggerConfigurationAzureBlobStorageExtensions : object {
    public static int DefaultBatchSizeLimit;
    public static TimeSpan DefaultPeriod;
    internal static string DefaultConsoleOutputTemplate;
    private static LoggerConfigurationAzureBlobStorageExtensions();
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, BlobServiceClient blobServiceClient, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, string outputTemplate, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, IFormatProvider formatProvider, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, string connectionString, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, string outputTemplate, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, IFormatProvider formatProvider, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, string connectionStringName, IConfiguration configuration, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, string outputTemplate, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, IFormatProvider formatProvider, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, string sharedAccessSignature, string accountUrl, Uri blobEndpoint, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, string outputTemplate, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, IFormatProvider formatProvider, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, ITextFormatter formatter, string connectionString, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, ITextFormatter formatter, string connectionStringName, IConfiguration configuration, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, ITextFormatter formatter, string sharedAccessSignature, string accountUrl, Uri blobEndpoint, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, ITextFormatter formatter, Uri storageAccountUri, string managedIdentityClientId, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, Uri storageAccountUri, string managedIdentityClientId, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, string outputTemplate, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, IFormatProvider formatProvider, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
    [ExtensionAttribute]
public static LoggerConfiguration AzureBlobStorage(LoggerSinkConfiguration loggerConfiguration, ITextFormatter formatter, BlobServiceClient blobServiceClient, LogEventLevel restrictedToMinimumLevel, string storageContainerName, string storageFileName, Nullable`1<TimeSpan> period, Nullable`1<int> batchPostingLimit, bool bypassBlobCreationValidation, ICloudBlobProvider cloudBlobProvider, string contentType, Nullable`1<long> blobSizeLimitBytes, Nullable`1<int> retainedBlobCountLimit, bool useUtcTimeZone);
}
public class Serilog.Sinks.AzureBlobStorage.AzureBlobProvider.DefaultCloudBlobProvider : object {
    private AppendBlobClient currentAppendBlobClient;
    private string currentBlobName;
    private int currentBlobRollSequence;
    private static int MaxBlocksOnBlobBeforeRoll;
    private static DefaultCloudBlobProvider();
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureBlobStorage.AzureBlobProvider.DefaultCloudBlobProvider/<GetCloudBlobAsync>d__4")]
public sealed virtual Task`1<AppendBlobClient> GetCloudBlobAsync(BlobServiceClient blobServiceClient, string blobContainerName, string blobName, bool bypassBlobCreationValidation, string contentType, Nullable`1<long> blobSizeLimitBytes);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureBlobStorage.AzureBlobProvider.DefaultCloudBlobProvider/<ValidateAppendBlobClientAsync>d__5")]
private Task ValidateAppendBlobClientAsync(BlobServiceClient blobServiceClient, string blobContainerName, string blobName, bool bypassBlobCreationValidation, string contentType, Nullable`1<long> blobSizeLimitBytes);
    private bool ValidateBlobProperties(BlobProperties properties, Nullable`1<long> blobSizeLimitBytes);
    private string GetRolledBlobName(string blobName, int rollingSequenceNumber);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureBlobStorage.AzureBlobProvider.DefaultCloudBlobProvider/<GetBlobReferenceAsync>d__8")]
public Task`1<AppendBlobClient> GetBlobReferenceAsync(BlobServiceClient blobServiceClient, string blobContainerName, string blobName, bool bypassBlobCreationValidation, string contentType);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureBlobStorage.AzureBlobProvider.DefaultCloudBlobProvider/<CreateBlobContainerIfNotExistsAsync>d__9")]
private Task CreateBlobContainerIfNotExistsAsync(BlobContainerClient blobContainerClient, bool bypassBlobCreationValidation);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureBlobStorage.AzureBlobProvider.DefaultCloudBlobProvider/<DeleteArchivedBlobsAsync>d__10")]
public sealed virtual Task DeleteArchivedBlobsAsync(BlobServiceClient blobServiceClient, string blobContainerName, string blobNameFormat, int retainedBlobCountLimit);
    private string RemoveRolledBlobNameSerialNum(string blobName);
}
public interface Serilog.Sinks.AzureBlobStorage.AzureBlobProvider.ICloudBlobProvider {
    public abstract virtual Task`1<AppendBlobClient> GetCloudBlobAsync(BlobServiceClient blobServiceClient, string blobContainerName, string blobName, bool bypassBlobCreationValidation, string contentType, Nullable`1<long> blobSizeLimitBytes);
    public abstract virtual Task DeleteArchivedBlobsAsync(BlobServiceClient blobServiceClient, string blobContainerName, string blobNameFormat, int retainedBlobCountLimit);
}
public class Serilog.Sinks.AzureBlobStorage.AzureBlobStorageSink : object {
    private BlobServiceClient blobServiceClient;
    private AzureBlobStorageSinkOptions options;
    private BlobNameFactory blobNameFactory;
    public AzureBlobStorageSink(BlobServiceClient blobServiceClient, AzureBlobStorageSinkOptions options);
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureBlobStorage.AzureBlobStorageSink/<EmitBatchAsync>d__4")]
public sealed virtual Task EmitBatchAsync(IReadOnlyCollection`1<LogEvent> batch);
    public sealed virtual Task OnEmptyBatchAsync();
}
public class Serilog.Sinks.AzureBlobStorage.AzureBlobStorageSinkOptions : object {
    [CompilerGeneratedAttribute]
private ITextFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BypassContainerCreationValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private ICloudBlobProvider <CloudBlobProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAppendBlobBlockPreparer <AppendBlobBlockPreparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IAppendBlobBlockWriter <AppendBlobBlockWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BlobSizeLimitBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetainedBlobCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUtcTimezone>k__BackingField;
    public ITextFormatter Formatter { get; public set; }
    public string StorageContainerName { get; public set; }
    public string StorageFileName { get; public set; }
    public bool BypassContainerCreationValidation { get; public set; }
    public ICloudBlobProvider CloudBlobProvider { get; public set; }
    public IAppendBlobBlockPreparer AppendBlobBlockPreparer { get; public set; }
    public IAppendBlobBlockWriter AppendBlobBlockWriter { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<long> BlobSizeLimitBytes { get; public set; }
    public Nullable`1<int> RetainedBlobCountLimit { get; public set; }
    public bool UseUtcTimezone { get; public set; }
    [CompilerGeneratedAttribute]
public ITextFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(ITextFormatter value);
    [CompilerGeneratedAttribute]
public string get_StorageContainerName();
    [CompilerGeneratedAttribute]
public void set_StorageContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_StorageFileName();
    [CompilerGeneratedAttribute]
public void set_StorageFileName(string value);
    [CompilerGeneratedAttribute]
public bool get_BypassContainerCreationValidation();
    [CompilerGeneratedAttribute]
public void set_BypassContainerCreationValidation(bool value);
    [CompilerGeneratedAttribute]
public ICloudBlobProvider get_CloudBlobProvider();
    [CompilerGeneratedAttribute]
public void set_CloudBlobProvider(ICloudBlobProvider value);
    [CompilerGeneratedAttribute]
public IAppendBlobBlockPreparer get_AppendBlobBlockPreparer();
    [CompilerGeneratedAttribute]
public void set_AppendBlobBlockPreparer(IAppendBlobBlockPreparer value);
    [CompilerGeneratedAttribute]
public IAppendBlobBlockWriter get_AppendBlobBlockWriter();
    [CompilerGeneratedAttribute]
public void set_AppendBlobBlockWriter(IAppendBlobBlockWriter value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BlobSizeLimitBytes();
    [CompilerGeneratedAttribute]
public void set_BlobSizeLimitBytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RetainedBlobCountLimit();
    [CompilerGeneratedAttribute]
public void set_RetainedBlobCountLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_UseUtcTimezone();
    [CompilerGeneratedAttribute]
public void set_UseUtcTimezone(bool value);
}
public class Serilog.Sinks.AzureBlobStorage.BlobNameFactory : object {
    private Char[] dateFormatChars;
    private List`1<string> supportedProperties;
    private string baseBlobName;
    public BlobNameFactory(string baseBlobName);
    public string GetBlobName(DateTimeOffset dtTimeOffset, Nullable`1<LogEventLevel> logLevel, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, bool useUtcTimeZone);
    private void ValidateBlobName(Nullable`1<LogEventLevel> logLevel, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    public string GetBlobRegex();
    [CompilerGeneratedAttribute]
private bool <GetBlobName>b__4_0(char c);
    [CompilerGeneratedAttribute]
private bool <ValidateBlobName>b__5_0(char c);
    [CompilerGeneratedAttribute]
private bool <GetBlobRegex>b__6_1(char c);
}
internal class Serilog.Sinks.AzureBlobStorage.DefaultAppendBlobBlockPreparer : object {
    private static int MaxAppendBlobBlockSize;
    public sealed virtual IEnumerable`1<string> PrepareAppendBlocks(ITextFormatter textFormatter, IReadOnlyCollection`1<LogEvent> logEvents);
}
public class Serilog.Sinks.AzureBlobStorage.DefaultAppendBlobBlockWriter : object {
    [AsyncStateMachineAttribute("Serilog.Sinks.AzureBlobStorage.DefaultAppendBlobBlockWriter/<WriteBlocksToAppendBlobAsync>d__0")]
public sealed virtual Task WriteBlocksToAppendBlobAsync(AppendBlobClient appendBlobClient, IEnumerable`1<string> blocks);
}
public interface Serilog.Sinks.AzureBlobStorage.IAppendBlobBlockPreparer {
    public abstract virtual IEnumerable`1<string> PrepareAppendBlocks(ITextFormatter textFormatter, IReadOnlyCollection`1<LogEvent> logEvents);
}
public interface Serilog.Sinks.AzureBlobStorage.IAppendBlobBlockWriter {
    public abstract virtual Task WriteBlocksToAppendBlobAsync(AppendBlobClient appendBlobClient, IEnumerable`1<string> blocks);
}
