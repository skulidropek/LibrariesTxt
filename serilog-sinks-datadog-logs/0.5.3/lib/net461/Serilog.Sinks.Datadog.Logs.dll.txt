[ExtensionAttribute]
public static class Serilog.LoggerConfigurationDatadogExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration DatadogLogs(LoggerSinkConfiguration loggerConfiguration, string apiKey, string source, string service, string host, String[] tags, DatadogConfiguration configuration, IConfigurationSection configurationSection, LogEventLevel restrictedToMinimumLevel, Nullable`1<int> batchSizeLimit, Nullable`1<TimeSpan> batchPeriod, Nullable`1<int> queueLimit, Action`1<Exception> exceptionHandler, bool detectTCPDisconnection, IDatadogClient client, ITextFormatter formatter, Nullable`1<int> maxMessageSize);
}
internal static class Serilog.Sinks.Datadog.Logs.ApplyMicrosoftExtensionsConfiguration : object {
    internal static DatadogConfiguration ConfigureDatadogConfiguration(DatadogConfiguration datadogConfiguration, IConfigurationSection configurationSection);
}
public class Serilog.Sinks.Datadog.Logs.CannotSendLogEventException : LogEventException {
    public CannotSendLogEventException(string payload, IEnumerable`1<LogEvent> logEvents);
    public CannotSendLogEventException(string payload, IEnumerable`1<LogEvent> logEvents, Exception ex);
    public CannotSendLogEventException(string payload, IEnumerable`1<LogEvent> logEvents, HttpResponseMessage message);
}
internal class Serilog.Sinks.Datadog.Logs.ConnectionMatcher : object {
    private IPEndPoint _localIPv4;
    private IPEndPoint _localIPv6;
    private IPEndPoint _remoteIPv4;
    private IPEndPoint _remoteIPv6;
    private ConnectionMatcher(IPEndPoint localIPv4, IPEndPoint localIPv6, IPEndPoint remoteIPv4, IPEndPoint remoteIPv6);
    public static ConnectionMatcher TryCreate(EndPoint local, EndPoint remote);
    public bool IsSameConnection(EndPoint local, EndPoint remote);
}
internal class Serilog.Sinks.Datadog.Logs.Consts : object {
    public static string Version;
}
public class Serilog.Sinks.Datadog.Logs.DatadogConfiguration : object {
    public static string DDUrl;
    public static int DDPort;
    public static int DDPortNoSSL;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSSL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTCP>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetries>k__BackingField;
    public string Url { get; public set; }
    public int Port { get; public set; }
    public bool UseSSL { get; public set; }
    public bool UseTCP { get; public set; }
    public int MaxRetries { get; public set; }
    public DatadogConfiguration(string url, int port, bool useSSL, bool useTCP, int maxRetries);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public bool get_UseSSL();
    [CompilerGeneratedAttribute]
public void set_UseSSL(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseTCP();
    [CompilerGeneratedAttribute]
public void set_UseTCP(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxRetries();
    [CompilerGeneratedAttribute]
public void set_MaxRetries(int value);
    public virtual string ToString();
}
public class Serilog.Sinks.Datadog.Logs.DatadogHttpClient : object {
    private static string _content;
    private static int _maxPayloadSize;
    private static int _maxMessageCount;
    private string _url;
    private DatadogLogRenderer _renderer;
    private HttpClient _client;
    private int _maxRetries;
    private static int MaxBackoff;
    public DatadogHttpClient(string url, DatadogLogRenderer renderer, HttpClient client, int maxRetries);
    public sealed virtual Task WriteAsync(IEnumerable`1<LogEvent> events);
    private List`1<JsonPayloadBuilder> BuildEvents(IEnumerable`1<LogEvent> events);
    [AsyncStateMachineAttribute("Serilog.Sinks.Datadog.Logs.DatadogHttpClient/<Post>d__11")]
private Task Post(JsonPayloadBuilder payloadBuilder);
    private sealed virtual override void Serilog.Sinks.Datadog.Logs.IDatadogClient.Close();
    [CompilerGeneratedAttribute]
private Task <WriteAsync>b__9_0(JsonPayloadBuilder post);
}
internal class Serilog.Sinks.Datadog.Logs.DatadogHttpIntakeClient : HttpClient {
    public DatadogHttpIntakeClient(string apiKey);
}
public class Serilog.Sinks.Datadog.Logs.DatadogJsonFormatter : object {
    private JsonValueFormatter _valueFormatter;
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void writeProperty(LogEventProperty property, TextWriter output, bool isLast);
    private void writeKeyValue(string key, LogEventPropertyValue val, TextWriter output, bool isLast);
    private void writeKeyValue(string key, string val, TextWriter output, bool isLast);
}
public class Serilog.Sinks.Datadog.Logs.DatadogLogRenderer : object {
    private static string CSHARP;
    private int _maxMessageSize;
    private List`1<LogEventProperty> _props;
    private ITextFormatter _formatter;
    private Byte[] _truncatedFlag;
    private int _ddPayloadSize;
    public DatadogLogRenderer(string source, string service, string host, String[] tags, int maxMessageSize, ITextFormatter formatter, Nullable`1<int> ddPayloadSize);
    public String[] RenderDatadogEvents(LogEvent logEvent);
    internal IEnumerable`1<Byte[]> TruncateIfNeeded(string rawPayload);
    internal string ToDDPayload(string rawPayload);
    [CompilerGeneratedAttribute]
private string <RenderDatadogEvents>b__7_0(Byte[] x);
}
public class Serilog.Sinks.Datadog.Logs.DatadogSink : object {
    private IDatadogClient _client;
    private Action`1<Exception> _exceptionHandler;
    private static Task completedTask;
    private static TimeSpan DefaultBatchPeriod;
    private static int DefaultBatchSizeLimit;
    private static int DefaultMaxMessageSize;
    public DatadogSink(string apiKey, string source, string service, string host, String[] tags, DatadogConfiguration config, Action`1<Exception> exceptionHandler, bool detectTCPDisconnection, IDatadogClient client, ITextFormatter formatter, Nullable`1<int> maxMessageSize);
    private static DatadogSink();
    public static ILogEventSink Create(string apiKey, string source, string service, string host, String[] tags, DatadogConfiguration config, Nullable`1<int> batchSizeLimit, Nullable`1<TimeSpan> batchPeriod, Nullable`1<int> queueLimit, Action`1<Exception> exceptionHandler, bool detectTCPDisconnection, IDatadogClient client, ITextFormatter formatter, Nullable`1<int> maxMessageSize);
    [AsyncStateMachineAttribute("Serilog.Sinks.Datadog.Logs.DatadogSink/<EmitBatchAsync>d__8")]
public sealed virtual Task EmitBatchAsync(IEnumerable`1<LogEvent> events);
    public sealed virtual Task OnEmptyBatchAsync();
    public sealed virtual void Dispose();
    private static IDatadogClient CreateDatadogClient(string apiKey, DatadogLogRenderer renderer, DatadogConfiguration configuration, bool detectTCPDisconnection);
    [AsyncStateMachineAttribute("Serilog.Sinks.Datadog.Logs.DatadogSink/<RunTask>d__12")]
private Task RunTask(Task task);
    private void OnException(Exception e);
}
public class Serilog.Sinks.Datadog.Logs.DatadogTcpClient : object {
    private DatadogConfiguration _config;
    private DatadogLogRenderer _renderer;
    private string _apiKey;
    private bool _detectTCPDisconnection;
    private TcpClient _client;
    private Stream _stream;
    private ConnectionMatcher _connectionMatcher;
    private static string WhiteSpace;
    private static string MessageDelimiter;
    private static int MaxBackoff;
    private static UTF8Encoding UTF8;
    public DatadogTcpClient(DatadogConfiguration config, DatadogLogRenderer renderer, string apiKey, bool detectTCPDisconnection);
    private static DatadogTcpClient();
    [AsyncStateMachineAttribute("Serilog.Sinks.Datadog.Logs.DatadogTcpClient/<ConnectAsync>d__12")]
private Task ConnectAsync();
    [AsyncStateMachineAttribute("Serilog.Sinks.Datadog.Logs.DatadogTcpClient/<WriteAsync>d__13")]
public sealed virtual Task WriteAsync(IEnumerable`1<LogEvent> events);
    private void CloseConnection();
    private bool IsConnectionClosed();
    public sealed virtual void Close();
    [CompilerGeneratedAttribute]
private bool <IsConnectionClosed>b__15_0(TcpConnectionInformation c);
}
public interface Serilog.Sinks.Datadog.Logs.IDatadogClient {
    public abstract virtual Task WriteAsync(IEnumerable`1<LogEvent> events);
    public abstract virtual void Close();
}
internal class Serilog.Sinks.Datadog.Logs.JsonPayloadBuilder : object {
    private int _size;
    private string _delimiter;
    private StringBuilder _buffer;
    public List`1<LogEvent> LogEvents;
    public int Size();
    public int Count();
    public void Add(string payload, LogEvent logEvent);
    public string Build();
}
public class Serilog.Sinks.Datadog.Logs.LogEventException : Exception {
    [CompilerGeneratedAttribute]
private IEnumerable`1<LogEvent> <LogEvents>k__BackingField;
    public IEnumerable`1<LogEvent> LogEvents { get; }
    public LogEventException(string message, IEnumerable`1<LogEvent> logEvents);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LogEvent> get_LogEvents();
}
