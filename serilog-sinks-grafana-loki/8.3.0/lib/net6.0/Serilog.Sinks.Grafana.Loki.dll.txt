[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Serilog.Sinks.Grafana.Loki.DefaultReservedPropertyRenamingStrategy : object {
    [NullableContextAttribute("1")]
public sealed virtual string Rename(string originalName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Grafana.Loki.DictionaryComparer`2 : object {
    [CompilerGeneratedAttribute]
private static DictionaryComparer`2<TKey, TValue> <Instance>k__BackingField;
    public static DictionaryComparer`2<TKey, TValue> Instance { get; }
    private static DictionaryComparer`2();
    [CompilerGeneratedAttribute]
public static DictionaryComparer`2<TKey, TValue> get_Instance();
    public sealed virtual bool Equals(IDictionary`2<TKey, TValue> x, IDictionary`2<TKey, TValue> y);
    public sealed virtual int GetHashCode(IDictionary`2<TKey, TValue> obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Serilog.Sinks.Grafana.Loki.HttpClients.BaseLokiHttpClient : object {
    protected HttpClient HttpClient;
    private static string TenantHeader;
    private static Regex TenantIdValueRegex;
    [NullableContextAttribute("2")]
protected BaseLokiHttpClient(HttpClient httpClient);
    private static BaseLokiHttpClient();
    public abstract virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, Stream contentStream);
    [NullableContextAttribute("2")]
public virtual void SetCredentials(LokiCredentials credentials);
    [NullableContextAttribute("2")]
public virtual void SetTenant(string tenant);
    public virtual void Dispose();
    private static string Base64Encode(string str);
}
public class Serilog.Sinks.Grafana.Loki.HttpClients.LokiGzipHttpClient : BaseLokiHttpClient {
    protected CompressionLevel CompressionLevel;
    [NullableContextAttribute("2")]
public LokiGzipHttpClient(HttpClient httpClient, CompressionLevel compressionLevel);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Serilog.Sinks.Grafana.Loki.HttpClients.LokiGzipHttpClient/<PostAsync>d__2")]
public virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, Stream contentStream);
}
public class Serilog.Sinks.Grafana.Loki.HttpClients.LokiHttpClient : BaseLokiHttpClient {
    [NullableContextAttribute("2")]
public LokiHttpClient(HttpClient httpClient);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Serilog.Sinks.Grafana.Loki.HttpClients.LokiHttpClient/<PostAsync>d__1")]
public virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, Stream contentStream);
}
[NullableContextAttribute("1")]
public interface Serilog.Sinks.Grafana.Loki.ILokiBatchFormatter {
    public abstract virtual void Format(IReadOnlyCollection`1<LokiLogEvent> lokiLogEvents, ITextFormatter formatter, TextWriter output);
}
[NullableContextAttribute("2")]
public interface Serilog.Sinks.Grafana.Loki.ILokiHttpClient {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, Stream contentStream);
    public abstract virtual void SetCredentials(LokiCredentials credentials);
    public abstract virtual void SetTenant(string tenant);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Grafana.Loki.Infrastructure.BoundedQueue`1 : object {
    private static int Unbounded;
    private Queue`1<T> _queue;
    private int _queueLimit;
    private object _syncRoot;
    public BoundedQueue`1(Nullable`1<int> queueLimit);
    public bool TryEnqueue(T item);
    [NullableContextAttribute("2")]
public bool TryDequeue(T& item);
}
internal class Serilog.Sinks.Grafana.Loki.Infrastructure.ExponentialBackoffConnectionSchedule : object {
    public static TimeSpan MinimumBackoffPeriod;
    public static TimeSpan MaximumBackoffInterval;
    private TimeSpan _period;
    private int _failuresSinceSuccessfulConnection;
    public TimeSpan NextInterval { get; }
    public ExponentialBackoffConnectionSchedule(TimeSpan period);
    private static ExponentialBackoffConnectionSchedule();
    public TimeSpan get_NextInterval();
    public void MarkSuccess();
    public void MarkFailure();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Grafana.Loki.Infrastructure.PortableTimer : object {
    private Func`1<Task> _onTick;
    private object _syncRoot;
    private Timer _timer;
    private bool _isDisposed;
    private bool _isRunning;
    public PortableTimer(Func`1<Task> onTick);
    public void Start(TimeSpan interval);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.Grafana.Loki.Infrastructure.PortableTimer/<OnTick>d__8")]
private void OnTick();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object _);
}
[NullableContextAttribute("1")]
public interface Serilog.Sinks.Grafana.Loki.IReservedPropertyRenamingStrategy {
    public abstract virtual string Rename(string originalName);
}
[ExtensionAttribute]
public static class Serilog.Sinks.Grafana.Loki.LoggerConfigurationLokiExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static LoggerConfiguration GrafanaLoki(LoggerSinkConfiguration sinkConfiguration, string uri, IEnumerable`1<LokiLabel> labels, IEnumerable`1<string> propertiesAsLabels, LokiCredentials credentials, string tenant, LogEventLevel restrictedToMinimumLevel, int batchPostingLimit, Nullable`1<int> queueLimit, Nullable`1<TimeSpan> period, ITextFormatter textFormatter, ILokiHttpClient httpClient, IReservedPropertyRenamingStrategy reservedPropertyRenamingStrategy, bool useInternalTimestamp, bool leavePropertiesIntact);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Grafana.Loki.LokiBatchFormatter : object {
    private static int DefaultWriteBufferCapacity;
    private IEnumerable`1<LokiLabel> _globalLabels;
    private IReservedPropertyRenamingStrategy _renamingStrategy;
    private IEnumerable`1<string> _propertiesAsLabels;
    private bool _leavePropertiesIntact;
    private bool _useInternalTimestamp;
    public LokiBatchFormatter(IReservedPropertyRenamingStrategy renamingStrategy, IEnumerable`1<LokiLabel> globalLabels, IEnumerable`1<string> propertiesAsLabels, bool useInternalTimestamp, bool leavePropertiesIntact);
    public sealed virtual void Format(IReadOnlyCollection`1<LokiLogEvent> lokiLogEvents, ITextFormatter formatter, TextWriter output);
    private void GenerateEntry(LokiLogEvent lokiLogEvent, ITextFormatter formatter, LokiStream stream);
    private ValueTuple`2<Dictionary`2<string, string>, LokiLogEvent> GenerateLabels(LokiLogEvent lokiLogEvent);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private DateTimeOffset <Format>b__7_3(LokiLogEvent x);
    [CompilerGeneratedAttribute]
private LokiLogEvent <Format>g__AddLevelAsPropertySafely|7_2(LokiLogEvent lokiLogEvent);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GenerateLabels>b__9_2(KeyValuePair`2<string, LogEventPropertyValue> kvp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Grafana.Loki.LokiCredentials : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string Login { get; public set; }
    public string Password { get; public set; }
    internal bool IsEmpty { get; }
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    internal bool get_IsEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Grafana.Loki.LokiJsonTextFormatter : object {
    protected IReservedPropertyRenamingStrategy RenamingStrategy;
    protected JsonValueFormatter ValueFormatter;
    private static String[] ReservedKeywords;
    public LokiJsonTextFormatter(IReservedPropertyRenamingStrategy renamingStrategy);
    private static LokiJsonTextFormatter();
    public virtual void Format(LogEvent logEvent, TextWriter output);
    protected virtual string GetSanitizedPropertyName(string propertyName);
    protected virtual void SerializeException(TextWriter output, Exception exception, int level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Grafana.Loki.LokiLabel : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Grafana.Loki.LokiSink : object {
    private string _requestUri;
    private int _batchPostingLimit;
    private ITextFormatter _textFormatter;
    private ILokiBatchFormatter _batchFormatter;
    private ILokiHttpClient _httpClient;
    private ExponentialBackoffConnectionSchedule _connectionSchedule;
    private object _syncRoot;
    private PortableTimer _timer;
    private BoundedQueue`1<LokiLogEvent> _queue;
    private Queue`1<LokiLogEvent> _waitingBatch;
    private bool _isDisposed;
    public LokiSink(string requestUri, int batchPostingLimit, Nullable`1<int> queueLimit, TimeSpan period, ITextFormatter textFormatter, ILokiBatchFormatter batchFormatter, ILokiHttpClient httpClient);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.Grafana.Loki.LokiSink/<OnTick>d__14")]
private Task OnTick();
    private void SetTimer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Grafana.Loki.Models.LokiBatch : object {
    [CompilerGeneratedAttribute]
private IList`1<LokiStream> <Streams>k__BackingField;
    [JsonPropertyNameAttribute("streams")]
public IList`1<LokiStream> Streams { get; }
    [JsonIgnoreAttribute]
public bool IsNotEmpty { get; }
    [CompilerGeneratedAttribute]
public IList`1<LokiStream> get_Streams();
    public bool get_IsNotEmpty();
    public LokiStream CreateStream();
    public string Serialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Grafana.Loki.Models.LokiLogEvent : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <InternalTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEvent <LogEvent>k__BackingField;
    public DateTimeOffset InternalTimestamp { get; }
    public LogEvent LogEvent { get; private set; }
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> Properties { get; }
    public LokiLogEvent(LogEvent logEvent);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_InternalTimestamp();
    [CompilerGeneratedAttribute]
public LogEvent get_LogEvent();
    [CompilerGeneratedAttribute]
private void set_LogEvent(LogEvent value);
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> get_Properties();
    internal LokiLogEvent CopyWithProperties(IEnumerable`1<KeyValuePair`2<string, LogEventPropertyValue>> properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Grafana.Loki.Models.LokiStream : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IList`1<string>> <Entries>k__BackingField;
    [JsonPropertyNameAttribute("stream")]
public Dictionary`2<string, string> Labels { get; }
    [JsonPropertyNameAttribute("values")]
public IList`1<IList`1<string>> Entries { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public IList`1<IList`1<string>> get_Entries();
    [CompilerGeneratedAttribute]
public void set_Entries(IList`1<IList`1<string>> value);
    public void AddLabel(string key, string value);
    public void AddEntry(DateTimeOffset timestamp, string entry);
}
[ExtensionAttribute]
internal static class Serilog.Sinks.Grafana.Loki.Utils.DateTimeOffsetExtensions : object {
    private static long NanosecondsPerTick;
    private static DateTimeOffset UnixEpoch;
    private static DateTimeOffsetExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string ToUnixNanosecondsString(DateTimeOffset offset);
}
internal static class Serilog.Sinks.Grafana.Loki.Utils.Encoding : object {
    [NullableAttribute("1")]
public static Encoding UTF8WithoutBom;
    private static Encoding();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Serilog.Sinks.Grafana.Loki.Utils.EnumerableExtensions : object {
    [ExtensionAttribute]
public static ValueTuple`2<IEnumerable`1<TSource>, IEnumerable`1<TSource>> Partition(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> kvp, TKey& key, TValue& value);
}
[ExtensionAttribute]
internal static class Serilog.Sinks.Grafana.Loki.Utils.LogEventExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void RenamePropertyIfPresent(LogEvent logEvent, string propertyName, Func`2<string, string> renamingStrategy);
}
[ExtensionAttribute]
internal static class Serilog.Sinks.Grafana.Loki.Utils.LogEventLevelExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string ToGrafanaLogLevel(LogEventLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Sinks.Grafana.Loki.Utils.LokiRoutesBuilder : object {
    private static string LogEntriesEndpoint;
    public static string BuildLogsEntriesRoute(string host);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
