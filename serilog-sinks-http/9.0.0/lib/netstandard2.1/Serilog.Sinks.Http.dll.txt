[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Serilog.LoggerSinkConfigurationExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration Http(LoggerSinkConfiguration sinkConfiguration, string requestUri, Nullable`1<long> queueLimitBytes, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, Nullable`1<TimeSpan> period, bool flushOnClose, ITextFormatter textFormatter, IBatchFormatter batchFormatter, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch, IHttpClient httpClient, IConfiguration configuration);
    [ExtensionAttribute]
public static LoggerConfiguration DurableHttpUsingFileSizeRolledBuffers(LoggerSinkConfiguration sinkConfiguration, string requestUri, string bufferBaseFileName, Nullable`1<long> bufferFileSizeLimitBytes, bool bufferFileShared, Nullable`1<int> retainedBufferFileCountLimit, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, Nullable`1<TimeSpan> period, bool flushOnClose, ITextFormatter textFormatter, IBatchFormatter batchFormatter, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch, IHttpClient httpClient, IConfiguration configuration);
    [ExtensionAttribute]
public static LoggerConfiguration DurableHttpUsingTimeRolledBuffers(LoggerSinkConfiguration sinkConfiguration, string requestUri, string bufferBaseFileName, BufferRollingInterval bufferRollingInterval, Nullable`1<long> bufferFileSizeLimitBytes, bool bufferFileShared, Nullable`1<int> retainedBufferFileCountLimit, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, Nullable`1<TimeSpan> period, bool flushOnClose, ITextFormatter textFormatter, IBatchFormatter batchFormatter, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch, IHttpClient httpClient, IConfiguration configuration);
}
public class Serilog.Sinks.Http.BatchFormatters.ArrayBatchFormatter : object {
    [NullableContextAttribute("1")]
public sealed virtual void Format(IEnumerable`1<string> logEvents, TextWriter output);
}
public enum Serilog.Sinks.Http.BufferRollingInterval : Enum {
    public int value__;
    public static BufferRollingInterval Year;
    public static BufferRollingInterval Month;
    public static BufferRollingInterval Day;
    public static BufferRollingInterval Hour;
    public static BufferRollingInterval Minute;
}
public static class Serilog.Sinks.Http.ByteSize : object {
    public static long B;
    public static long KB;
    public static long MB;
    public static long GB;
    [NullableContextAttribute("1")]
public static long From(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.HttpClients.JsonGzipHttpClient : object {
    private static string JsonContentType;
    private static string GzipContentEncoding;
    private HttpClient httpClient;
    [CompilerGeneratedAttribute]
private CompressionLevel <CompressionLevel>k__BackingField;
    protected CompressionLevel CompressionLevel { get; protected set; }
    public JsonGzipHttpClient(CompressionLevel compressionLevel);
    public JsonGzipHttpClient(HttpClient httpClient, CompressionLevel compressionLevel);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
protected CompressionLevel get_CompressionLevel();
    [CompilerGeneratedAttribute]
protected void set_CompressionLevel(CompressionLevel value);
    public virtual void Configure(IConfiguration configuration);
    [AsyncStateMachineAttribute("Serilog.Sinks.Http.HttpClients.JsonGzipHttpClient/<PostAsync>d__12")]
public virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, Stream contentStream, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.HttpClients.JsonHttpClient : object {
    private static string JsonContentType;
    private HttpClient httpClient;
    public JsonHttpClient(HttpClient httpClient);
    protected virtual override void Finalize();
    public virtual void Configure(IConfiguration configuration);
    [AsyncStateMachineAttribute("Serilog.Sinks.Http.HttpClients.JsonHttpClient/<PostAsync>d__6")]
public virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, Stream contentStream, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
public interface Serilog.Sinks.Http.IBatchFormatter {
    public abstract virtual void Format(IEnumerable`1<string> logEvents, TextWriter output);
}
[NullableContextAttribute("1")]
public interface Serilog.Sinks.Http.IHttpClient {
    public abstract virtual void Configure(IConfiguration configuration);
    public abstract virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, Stream contentStream, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Durable.Batch : object {
    [CompilerGeneratedAttribute]
private List`1<string> <LogEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasReachedLimit>k__BackingField;
    public List`1<string> LogEvents { get; }
    public bool HasReachedLimit { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_LogEvents();
    [CompilerGeneratedAttribute]
public bool get_HasReachedLimit();
    [CompilerGeneratedAttribute]
public void set_HasReachedLimit(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Durable.BookmarkFile : object {
    private FileStream fileStream;
    public BookmarkFile(string bookmarkFileName);
    [NullableContextAttribute("2")]
public void TryReadBookmark(Int64& nextLineBeginsAtOffset, String& currentFile);
    public void WriteBookmark(long nextLineBeginsAtOffset, string currentFile);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Serilog.Sinks.Http.Private.Durable.BufferFileReader : object {
    private static char CR;
    private static char LF;
    private static string CRLFString;
    private static string LFString;
    private static BufferFileReader();
    public static Batch Read(string fileName, Int64& nextLineBeginsAtOffset, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, CancellationToken cancellationToken);
    public static Batch Read(Stream stream, Int64& nextLineBeginsAtOffset, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, CancellationToken cancellationToken);
    private static Line ReadLine(Stream stream);
}
[ExtensionAttribute]
public static class Serilog.Sinks.Http.Private.Durable.BufferRollingIntervalExtensions : object {
    [ExtensionAttribute]
public static RollingInterval ToRollingInterval(BufferRollingInterval self);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Durable.FileSizeRolledBufferFiles : object {
    private DirectoryService directoryService;
    private string logFolder;
    private string candidateSearchPath;
    private Regex fileNameMatcher;
    [CompilerGeneratedAttribute]
private string <BookmarkFileName>k__BackingField;
    public string BookmarkFileName { get; }
    public FileSizeRolledBufferFiles(DirectoryService directoryService, string bufferBaseFilePath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BookmarkFileName();
    public sealed virtual String[] Get();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private KeyValuePair`2<string, Match> <Get>b__8_0(string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Durable.FileSizeRolledDurableHttpSink : object {
    private HttpLogShipper shipper;
    private ILogEventSink sink;
    public FileSizeRolledDurableHttpSink(string requestUri, string bufferBaseFileName, Nullable`1<long> bufferFileSizeLimitBytes, bool bufferFileShared, Nullable`1<int> retainedBufferFileCountLimit, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, TimeSpan period, bool flushOnClose, ITextFormatter textFormatter, IBatchFormatter batchFormatter, IHttpClient httpClient);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    private static ILogEventSink CreateFileSink(string bufferBaseFileName, Nullable`1<long> bufferFileSizeLimitBytes, bool bufferFileShared, Nullable`1<int> retainedBufferFileCountLimit, ITextFormatter textFormatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Durable.HttpLogShipper : object {
    private IHttpClient httpClient;
    private string requestUri;
    private IBufferFiles bufferFiles;
    private Nullable`1<long> logEventLimitBytes;
    private Nullable`1<int> logEventsInBatchLimit;
    private Nullable`1<long> batchSizeLimitBytes;
    private IBatchFormatter batchFormatter;
    private ExponentialBackoffConnectionSchedule connectionSchedule;
    private bool flushOnClose;
    private PortableTimer timer;
    private CancellationTokenSource cts;
    private object syncRoot;
    private bool disposed;
    public HttpLogShipper(IHttpClient httpClient, string requestUri, IBufferFiles bufferFiles, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, TimeSpan period, bool flushOnClose, IBatchFormatter batchFormatter);
    public sealed virtual void Dispose();
    private void SetTimer();
    [AsyncStateMachineAttribute("Serilog.Sinks.Http.Private.Durable.HttpLogShipper/<OnTick>d__16")]
private Task OnTick();
    private static bool IsUnlockedAtLength(string file, long maxLength);
}
[NullableContextAttribute("1")]
public interface Serilog.Sinks.Http.Private.Durable.IBufferFiles {
    public string BookmarkFileName { get; }
    public abstract virtual string get_BookmarkFileName();
    public abstract virtual String[] Get();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Durable.TimeRolledBufferFiles : object {
    private DirectoryService directoryService;
    private string logFolder;
    private string candidateSearchPath;
    private Regex fileNameMatcher;
    [CompilerGeneratedAttribute]
private string <BookmarkFileName>k__BackingField;
    public string BookmarkFileName { get; }
    public TimeRolledBufferFiles(DirectoryService directoryService, string bufferBaseFilePath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BookmarkFileName();
    public sealed virtual String[] Get();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private KeyValuePair`2<string, Match> <Get>b__8_0(string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Durable.TimeRolledDurableHttpSink : object {
    private HttpLogShipper shipper;
    private ILogEventSink sink;
    public TimeRolledDurableHttpSink(string requestUri, string bufferBaseFileName, BufferRollingInterval bufferRollingInterval, Nullable`1<long> bufferFileSizeLimitBytes, bool bufferFileShared, Nullable`1<int> retainedBufferFileCountLimit, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, TimeSpan period, bool flushOnClose, ITextFormatter textFormatter, IBatchFormatter batchFormatter, IHttpClient httpClient);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    private static ILogEventSink CreateFileSink(string bufferBaseFileName, BufferRollingInterval bufferRollingInterval, Nullable`1<long> bufferFileSizeLimitBytes, bool bufferFileShared, Nullable`1<int> retainedBufferFileCountLimit, ITextFormatter textFormatter);
}
public static class Serilog.Sinks.Http.Private.Encoding : object {
    [NullableAttribute("1")]
public static Encoding UTF8WithoutBom;
    private static Encoding();
}
public class Serilog.Sinks.Http.Private.IO.DirectoryService : object {
    [NullableContextAttribute("1")]
public virtual String[] GetFiles(string path, string searchPattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.NonDurable.Batch : object {
    [CompilerGeneratedAttribute]
private List`1<string> <LogEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasReachedLimit>k__BackingField;
    public List`1<string> LogEvents { get; }
    public bool HasReachedLimit { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_LogEvents();
    [CompilerGeneratedAttribute]
public bool get_HasReachedLimit();
    [CompilerGeneratedAttribute]
public void set_HasReachedLimit(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.NonDurable.HttpSink : object {
    private string requestUri;
    private Nullable`1<long> logEventLimitBytes;
    private Nullable`1<int> logEventsInBatchLimit;
    private Nullable`1<long> batchSizeLimitBytes;
    private bool flushOnClose;
    private ITextFormatter textFormatter;
    private IBatchFormatter batchFormatter;
    private IHttpClient httpClient;
    private ExponentialBackoffConnectionSchedule connectionSchedule;
    private PortableTimer timer;
    private LogEventQueue queue;
    private CancellationTokenSource cts;
    private object syncRoot;
    [NullableAttribute("2")]
private Batch unsentBatch;
    private bool disposed;
    public HttpSink(string requestUri, Nullable`1<long> queueLimitBytes, Nullable`1<long> logEventLimitBytes, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes, TimeSpan period, bool flushOnClose, ITextFormatter textFormatter, IBatchFormatter batchFormatter, IHttpClient httpClient);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    private void SetTimer();
    [AsyncStateMachineAttribute("Serilog.Sinks.Http.Private.NonDurable.HttpSink/<OnTick>d__19")]
private Task OnTick();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.NonDurable.LogEventQueue : object {
    private Queue`1<string> queue;
    private Nullable`1<long> queueLimitBytes;
    private object syncRoot;
    private long queueBytes;
    public LogEventQueue(Nullable`1<long> queueLimitBytes);
    public void Enqueue(string logEvent);
    public EnqueueResult TryEnqueue(string logEvent);
    public DequeueResult TryDequeue(Nullable`1<long> logEventMaxSize, String& logEvent);
}
public static class Serilog.Sinks.Http.Private.NonDurable.LogEventQueueReader : object {
    [NullableContextAttribute("1")]
public static Batch Read(LogEventQueue queue, Nullable`1<int> logEventsInBatchLimit, Nullable`1<long> batchSizeLimitBytes);
}
public class Serilog.Sinks.Http.Private.Time.ExponentialBackoffConnectionSchedule : object {
    public static TimeSpan MinimumBackoffPeriod;
    public static TimeSpan MaximumBackoffInterval;
    private TimeSpan period;
    private int failuresSinceSuccessfulConnection;
    public TimeSpan NextInterval { get; }
    public ExponentialBackoffConnectionSchedule(TimeSpan period);
    private static ExponentialBackoffConnectionSchedule();
    public void MarkSuccess();
    public void MarkFailure();
    public TimeSpan get_NextInterval();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.Private.Time.PortableTimer : object {
    private object syncRoot;
    private Func`1<Task> onTick;
    private Timer timer;
    private bool running;
    private bool disposed;
    public PortableTimer(Func`1<Task> onTick);
    public void Start(TimeSpan interval);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.Http.Private.Time.PortableTimer/<OnTick>d__8")]
private void OnTick();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object _);
}
public class Serilog.Sinks.Http.TextFormatters.CompactRenderedTextFormatter : CompactTextFormatter {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.TextFormatters.CompactTextFormatter : object {
    [CompilerGeneratedAttribute]
private bool <IsRenderingMessage>k__BackingField;
    protected bool IsRenderingMessage { get; protected set; }
    [CompilerGeneratedAttribute]
protected bool get_IsRenderingMessage();
    [CompilerGeneratedAttribute]
protected void set_IsRenderingMessage(bool value);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void FormatContent(LogEvent logEvent, TextWriter output);
    private static void LogNonFormattableEvent(LogEvent logEvent, Exception e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Serilog.Sinks.Http.TextFormatters.NamespacedTextFormatter : object {
    private string component;
    [NullableAttribute("2")]
private string subComponent;
    [CompilerGeneratedAttribute]
private bool <IsRenderingMessage>k__BackingField;
    protected bool IsRenderingMessage { get; protected set; }
    protected NamespacedTextFormatter(string component, string subComponent);
    [CompilerGeneratedAttribute]
protected bool get_IsRenderingMessage();
    [CompilerGeneratedAttribute]
protected void set_IsRenderingMessage(bool value);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void FormatContent(LogEvent logEvent, TextWriter output);
    private void WriteProperties(LogEvent logEvent, TextWriter output);
    private void WriteOpenNamespace(TextWriter output);
    private void WriteCloseNamespace(TextWriter output);
    private static void WriteProperties(IEnumerable`1<KeyValuePair`2<string, LogEventPropertyValue>> properties, TextWriter output);
    private static bool TemplateContainsPropertyName(MessageTemplate template, string propertyName);
    private static void WriteRenderings(IEnumerable`1<IGrouping`2<string, PropertyToken>> tokensWithFormat, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    private static void LogNonFormattableEvent(LogEvent logEvent, Exception e);
}
public class Serilog.Sinks.Http.TextFormatters.NormalRenderedTextFormatter : NormalTextFormatter {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Http.TextFormatters.NormalTextFormatter : object {
    [CompilerGeneratedAttribute]
private bool <IsRenderingMessage>k__BackingField;
    protected bool IsRenderingMessage { get; protected set; }
    [CompilerGeneratedAttribute]
protected bool get_IsRenderingMessage();
    [CompilerGeneratedAttribute]
protected void set_IsRenderingMessage(bool value);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void FormatContent(LogEvent logEvent, TextWriter output);
    private static void WriteProperties(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    private static void WriteRenderings(IEnumerable`1<IGrouping`2<string, PropertyToken>> tokensWithFormat, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    private static void LogNonFormattableEvent(LogEvent logEvent, Exception e);
}
internal static class Serilog.Sinks.Http.TextFormatters.ValueFormatter : object {
    [NullableAttribute("1")]
internal static JsonValueFormatter Instance;
    private static ValueFormatter();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
