[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.FileLoggerExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory AddFile(ILoggerFactory loggerFactory, IConfigurationSection configuration);
    [ExtensionAttribute]
public static ILoggerFactory AddFile(ILoggerFactory loggerFactory, string pathFormat, LogLevel minimumLevel, IDictionary`2<string, LogLevel> levelOverrides, bool isJson, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, string outputTemplate);
    [ExtensionAttribute]
public static ILoggingBuilder AddFile(ILoggingBuilder loggingBuilder, IConfiguration configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddFile(ILoggingBuilder loggingBuilder, string pathFormat, LogLevel minimumLevel, IDictionary`2<string, LogLevel> levelOverrides, bool isJson, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, string outputTemplate);
    private static Logger CreateLogger(string pathFormat, LogLevel minimumLevel, IDictionary`2<string, LogLevel> levelOverrides, bool isJson, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, string outputTemplate);
    private static LogLevel GetMinimumLogLevel(IConfiguration configuration);
    private static Dictionary`2<string, LogLevel> GetLevelOverrides(IConfiguration configuration);
}
internal static class Serilog.Extensions.Logging.File.Conversions : object {
    public static LogEventLevel MicrosoftToSerilogLevel(LogLevel logLevel);
}
internal class Serilog.Extensions.Logging.File.EventIdEnricher : object {
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Serilog.Extensions.Logging.File.FileLoggingConfiguration : object {
    internal static long DefaultFileSizeLimitBytes;
    internal static int DefaultRetainedFileCountLimit;
    internal static string DefaultOutputTemplate;
    [CompilerGeneratedAttribute]
private string <PathFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FileSizeLimitBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetainedFileCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputTemplate>k__BackingField;
    public string PathFormat { get; public set; }
    public bool Json { get; public set; }
    public Nullable`1<long> FileSizeLimitBytes { get; public set; }
    public Nullable`1<int> RetainedFileCountLimit { get; public set; }
    public string OutputTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PathFormat();
    [CompilerGeneratedAttribute]
public void set_PathFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_Json();
    [CompilerGeneratedAttribute]
public void set_Json(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FileSizeLimitBytes();
    [CompilerGeneratedAttribute]
public void set_FileSizeLimitBytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RetainedFileCountLimit();
    [CompilerGeneratedAttribute]
public void set_RetainedFileCountLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_OutputTemplate();
    [CompilerGeneratedAttribute]
public void set_OutputTemplate(string value);
}
