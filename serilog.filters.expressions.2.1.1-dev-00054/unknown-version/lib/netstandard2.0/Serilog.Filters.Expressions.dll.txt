internal class Serilog.Filters.Expressions.Ast.FilterArrayExpression : FilterExpression {
    [CompilerGeneratedAttribute]
private FilterExpression[] <Elements>k__BackingField;
    public FilterExpression[] Elements { get; }
    public FilterArrayExpression(FilterExpression[] elements);
    [CompilerGeneratedAttribute]
public FilterExpression[] get_Elements();
    public virtual string ToString();
}
internal class Serilog.Filters.Expressions.Ast.FilterCallExpression : FilterExpression {
    [CompilerGeneratedAttribute]
private string <OperatorName>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterExpression[] <Operands>k__BackingField;
    public string OperatorName { get; }
    public FilterExpression[] Operands { get; }
    public FilterCallExpression(string operatorName, FilterExpression[] operands);
    [CompilerGeneratedAttribute]
public string get_OperatorName();
    [CompilerGeneratedAttribute]
public FilterExpression[] get_Operands();
    public virtual string ToString();
}
internal class Serilog.Filters.Expressions.Ast.FilterConstantExpression : FilterExpression {
    private object _constantValue;
    public object ConstantValue { get; }
    public FilterConstantExpression(object constantValue);
    public object get_ConstantValue();
    public virtual string ToString();
}
internal abstract class Serilog.Filters.Expressions.Ast.FilterExpression : object {
    private FilterExpressionType _type;
    public FilterExpressionType Type { get; }
    public FilterExpressionType get_Type();
}
internal enum Serilog.Filters.Expressions.Ast.FilterExpressionType : Enum {
    public int value__;
    public static FilterExpressionType None;
    public static FilterExpressionType Call;
    public static FilterExpressionType Constant;
    public static FilterExpressionType Property;
    public static FilterExpressionType Text;
    public static FilterExpressionType Subproperty;
    public static FilterExpressionType Wildcard;
    public static FilterExpressionType Parameter;
    public static FilterExpressionType Lambda;
    public static FilterExpressionType Array;
}
internal class Serilog.Filters.Expressions.Ast.FilterLambdaExpression : FilterExpression {
    private FilterParameterExpression[] _parameters;
    private FilterExpression _body;
    public FilterParameterExpression[] Parameters { get; }
    public FilterExpression Body { get; }
    public FilterLambdaExpression(FilterParameterExpression[] parameters, FilterExpression body);
    public FilterParameterExpression[] get_Parameters();
    public FilterExpression get_Body();
    public virtual string ToString();
}
internal class Serilog.Filters.Expressions.Ast.FilterParameterExpression : FilterExpression {
    private string _parameterName;
    public string ParameterName { get; }
    public FilterParameterExpression(string parameterName);
    public string get_ParameterName();
    public virtual string ToString();
}
internal class Serilog.Filters.Expressions.Ast.FilterPropertyExpression : FilterExpression {
    private string _propertyName;
    private bool _isBuiltIn;
    private bool _requiresEscape;
    public string PropertyName { get; }
    public bool IsBuiltIn { get; }
    public FilterPropertyExpression(string propertyName, bool isBuiltIn);
    public string get_PropertyName();
    public bool get_IsBuiltIn();
    public virtual string ToString();
}
internal class Serilog.Filters.Expressions.Ast.FilterSubpropertyExpression : FilterExpression {
    private string _propertyName;
    private FilterExpression _receiver;
    public string PropertyName { get; }
    public FilterExpression Receiver { get; }
    public FilterSubpropertyExpression(string propertyName, FilterExpression receiver);
    public string get_PropertyName();
    public FilterExpression get_Receiver();
    public virtual string ToString();
}
internal class Serilog.Filters.Expressions.Ast.FilterTextExpression : FilterExpression {
    private string _text;
    private FilterTextMatching _matching;
    public string Text { get; }
    public FilterTextMatching Matching { get; }
    public FilterTextExpression(string text, FilterTextMatching matching);
    public string get_Text();
    public FilterTextMatching get_Matching();
    public virtual string ToString();
}
internal enum Serilog.Filters.Expressions.Ast.FilterTextMatching : Enum {
    public int value__;
    public static FilterTextMatching Exact;
    public static FilterTextMatching Insensitive;
    public static FilterTextMatching RegularExpression;
    public static FilterTextMatching RegularExpressionInsensitive;
}
internal enum Serilog.Filters.Expressions.Ast.FilterWildcard : Enum {
    public int value__;
    public static FilterWildcard Undefined;
    public static FilterWildcard Any;
    public static FilterWildcard All;
}
internal class Serilog.Filters.Expressions.Ast.FilterWildcardExpression : FilterExpression {
    private FilterWildcard _wildcard;
    public FilterWildcard Wildcard { get; }
    public FilterWildcardExpression(FilterWildcard wildcard);
    public FilterWildcard get_Wildcard();
    public virtual string ToString();
}
internal class Serilog.Filters.Expressions.Compilation.Arrays.FilterExpressionConstantArrayEvaluator : FilterExpressionIdentityTransformer {
    public static FilterExpression Evaluate(FilterExpression expression);
    protected virtual FilterExpression Transform(FilterArrayExpression ax);
}
internal class Serilog.Filters.Expressions.Compilation.CompiledFilterExpression : MulticastDelegate {
    public CompiledFilterExpression(object object, IntPtr method);
    public virtual object Invoke(LogEvent context);
    public virtual IAsyncResult BeginInvoke(LogEvent context, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Serilog.Filters.Expressions.Compilation.Costing.FilterExpressionCosting : object {
    [CompilerGeneratedAttribute]
private FilterExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Costing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReorderableOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterExpressionCosting[] <ReorderableOperands>k__BackingField;
    public FilterExpression Expression { get; }
    public double Costing { get; }
    public string ReorderableOperator { get; }
    public FilterExpressionCosting[] ReorderableOperands { get; }
    public FilterExpressionCosting(FilterExpression expression, double costing, string reorderableOperator, FilterExpressionCosting[] reorderableOperands);
    [CompilerGeneratedAttribute]
public FilterExpression get_Expression();
    [CompilerGeneratedAttribute]
public double get_Costing();
    [CompilerGeneratedAttribute]
public string get_ReorderableOperator();
    [CompilerGeneratedAttribute]
public FilterExpressionCosting[] get_ReorderableOperands();
}
internal class Serilog.Filters.Expressions.Compilation.Costing.FilterExpressionCostReordering : FilterExpressionTransformer`1<FilterExpressionCosting> {
    public static FilterExpression Reorder(FilterExpression expression);
    protected virtual FilterExpressionCosting Transform(FilterPropertyExpression px);
    protected virtual FilterExpressionCosting Transform(FilterTextExpression tx);
    protected virtual FilterExpressionCosting Transform(FilterParameterExpression prx);
    protected virtual FilterExpressionCosting Transform(FilterWildcardExpression wx);
    protected virtual FilterExpressionCosting Transform(FilterLambdaExpression lmx);
    protected virtual FilterExpressionCosting Transform(FilterSubpropertyExpression spx);
    protected virtual FilterExpressionCosting Transform(FilterConstantExpression cx);
    protected virtual FilterExpressionCosting Transform(FilterCallExpression lx);
    protected virtual FilterExpressionCosting Transform(FilterArrayExpression ax);
}
internal static class Serilog.Filters.Expressions.Compilation.FilterExpressionCompiler : object {
    public static Func`2<LogEvent, object> CompileAndExpose(FilterExpression expression);
}
internal class Serilog.Filters.Expressions.Compilation.In.FilterExpressionNotInRewriter : FilterExpressionIdentityTransformer {
    public static FilterExpression Rewrite(FilterExpression expression);
    protected virtual FilterExpression Transform(FilterCallExpression lx);
}
internal class Serilog.Filters.Expressions.Compilation.Is.IsOperatorTransformer : FilterExpressionIdentityTransformer {
    public static FilterExpression Rewrite(FilterExpression expression);
    protected virtual FilterExpression Transform(FilterCallExpression lx);
}
internal class Serilog.Filters.Expressions.Compilation.Like.LikeOperatorTransformer : FilterExpressionIdentityTransformer {
    public static FilterExpression Rewrite(FilterExpression expression);
    private static FilterExpression Like(FilterExpression lhs, FilterTextExpression rhs);
    protected virtual FilterExpression Transform(FilterCallExpression lx);
}
internal class Serilog.Filters.Expressions.Compilation.Linq.ExpressionConstantMapper : ExpressionVisitor {
    private IDictionary`2<object, Expression> _mapping;
    public ExpressionConstantMapper(IDictionary`2<object, Expression> mapping);
    protected virtual Expression VisitConstant(ConstantExpression node);
}
internal class Serilog.Filters.Expressions.Compilation.Linq.LinqExpressionCompiler : FilterExpressionTransformer`1<Expression`1<CompiledFilterExpression>> {
    private static IDictionary`2<string, MethodInfo> OperatorMethods;
    private static LinqExpressionCompiler();
    public static CompiledFilterExpression Compile(FilterExpression expression);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterCallExpression lx);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterSubpropertyExpression spx);
    private static Expression Splice(LambdaExpression lambda, ParameterExpression[] newParameters);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterConstantExpression cx);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterPropertyExpression px);
    private static object GetPropertyValue(LogEvent context, string propertyName);
    public static bool TryGetStructurePropertyValue(StructureValue sv, string name, LogEventPropertyValue& value);
    private static object NormalizeBaseDocumentProperty(string rawValue);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterTextExpression tx);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterLambdaExpression lmx);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterParameterExpression prx);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterWildcardExpression wx);
    protected virtual Expression`1<CompiledFilterExpression> Transform(FilterArrayExpression ax);
}
internal class Serilog.Filters.Expressions.Compilation.Linq.ParameterReplacementVisitor : ExpressionVisitor {
    private ParameterExpression[] _from;
    private ParameterExpression[] _to;
    public ParameterReplacementVisitor(ParameterExpression[] from, ParameterExpression[] to);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
internal class Serilog.Filters.Expressions.Compilation.Properties.PropertiesObjectAccessorTransformer : FilterExpressionIdentityTransformer {
    public static FilterExpression Rewrite(FilterExpression actual);
    protected virtual FilterExpression Transform(FilterCallExpression lx);
}
internal class Serilog.Filters.Expressions.Compilation.Text.IndexOfIgnoreCaseCallRewriter : MatchingRewriter {
    public virtual FilterExpression Rewrite(FilterCallExpression lx, TextMatchingTransformer rewriteArm);
}
internal abstract class Serilog.Filters.Expressions.Compilation.Text.MatchingRewriter : object {
    public virtual FilterExpression Rewrite(FilterCallExpression lx, TextMatchingTransformer rewriteArm);
    protected static bool UseCaseInsensitiveRegexMatching(FilterTextExpression optTxt, FilterTextMatching matching);
    protected static bool UseCaseInsensitiveTextMatching(FilterTextExpression tx0, FilterTextExpression tx1);
}
internal class Serilog.Filters.Expressions.Compilation.Text.RegexSecondMatchCallRewriter : MatchingRewriter {
    public virtual FilterExpression Rewrite(FilterCallExpression lx, TextMatchingTransformer rewriteArm);
}
internal class Serilog.Filters.Expressions.Compilation.Text.SymmetricMatchCallRewriter : MatchingRewriter {
    public virtual FilterExpression Rewrite(FilterCallExpression lx, TextMatchingTransformer rewriteArm);
}
internal class Serilog.Filters.Expressions.Compilation.Text.TextMatchingTransformer : FilterExpressionIdentityTransformer {
    private static Dictionary`2<string, MatchingRewriter> Rewriters;
    private static TextMatchingTransformer();
    public static FilterExpression Rewrite(FilterExpression expression);
    protected virtual FilterExpression Transform(FilterCallExpression lx);
    protected virtual FilterExpression Transform(FilterTextExpression tx);
}
internal class Serilog.Filters.Expressions.Compilation.Transformations.FilterExpressionIdentityTransformer : FilterExpressionTransformer`1<FilterExpression> {
    protected virtual FilterExpression Transform(FilterCallExpression lx);
    protected virtual FilterExpression Transform(FilterConstantExpression cx);
    protected virtual FilterExpression Transform(FilterPropertyExpression px);
    protected virtual FilterExpression Transform(FilterSubpropertyExpression spx);
    protected virtual FilterExpression Transform(FilterTextExpression tx);
    protected virtual FilterExpression Transform(FilterLambdaExpression lmx);
    protected virtual FilterExpression Transform(FilterParameterExpression prx);
    protected virtual FilterExpression Transform(FilterWildcardExpression wx);
    protected virtual FilterExpression Transform(FilterArrayExpression ax);
}
internal class Serilog.Filters.Expressions.Compilation.Transformations.FilterExpressionNodeReplacer : FilterExpressionIdentityTransformer {
    private FilterExpression _source;
    private FilterExpression _dest;
    private FilterExpressionNodeReplacer(FilterExpression source, FilterExpression dest);
    public static FilterExpression Replace(FilterExpression expr, FilterExpression source, FilterExpression dest);
    protected virtual FilterExpression Transform(FilterCallExpression lx);
    protected virtual FilterExpression Transform(FilterConstantExpression cx);
    protected virtual FilterExpression Transform(FilterPropertyExpression px);
    protected virtual FilterExpression Transform(FilterSubpropertyExpression spx);
    protected virtual FilterExpression Transform(FilterTextExpression tx);
    protected virtual FilterExpression Transform(FilterLambdaExpression lmx);
    protected virtual FilterExpression Transform(FilterParameterExpression prx);
    protected virtual FilterExpression Transform(FilterWildcardExpression wx);
}
internal abstract class Serilog.Filters.Expressions.Compilation.Transformations.FilterExpressionTransformer`1 : object {
    public TResult Transform(FilterExpression expression);
    protected abstract virtual TResult Transform(FilterCallExpression lx);
    protected abstract virtual TResult Transform(FilterConstantExpression cx);
    protected abstract virtual TResult Transform(FilterPropertyExpression px);
    protected abstract virtual TResult Transform(FilterSubpropertyExpression spx);
    protected abstract virtual TResult Transform(FilterTextExpression tx);
    protected abstract virtual TResult Transform(FilterLambdaExpression lmx);
    protected abstract virtual TResult Transform(FilterParameterExpression prx);
    protected abstract virtual TResult Transform(FilterWildcardExpression wx);
    protected abstract virtual TResult Transform(FilterArrayExpression ax);
}
internal class Serilog.Filters.Expressions.Compilation.Wildcards.FilterExpressionWildcardSearch : FilterExpressionTransformer`1<FilterCallExpression> {
    public static FilterCallExpression FindElementAtWildcard(FilterExpression fx);
    protected virtual FilterCallExpression Transform(FilterCallExpression lx);
    protected virtual FilterCallExpression Transform(FilterConstantExpression cx);
    protected virtual FilterCallExpression Transform(FilterPropertyExpression px);
    protected virtual FilterCallExpression Transform(FilterSubpropertyExpression spx);
    protected virtual FilterCallExpression Transform(FilterTextExpression tx);
    protected virtual FilterCallExpression Transform(FilterLambdaExpression lmx);
    protected virtual FilterCallExpression Transform(FilterParameterExpression prx);
    protected virtual FilterCallExpression Transform(FilterWildcardExpression wx);
    protected virtual FilterCallExpression Transform(FilterArrayExpression ax);
}
internal class Serilog.Filters.Expressions.Compilation.Wildcards.WildcardComprehensionTransformer : FilterExpressionIdentityTransformer {
    private int _nextParameter;
    public static FilterExpression Expand(FilterExpression root);
    protected virtual FilterExpression Transform(FilterCallExpression lx);
}
public static class Serilog.Filters.Expressions.FilterLanguage : object {
    public static Func`2<LogEvent, object> CreateFilter(string expression);
    public static bool TryCreateFilter(string expression, Func`2& filter, String& error);
    public static string EscapeLikeExpressionContent(string text);
    public static string EscapeStringContent(string text);
    public static bool IsValidPropertyName(string propertyName);
}
public class Serilog.Filters.Expressions.LoggingFilterSwitch : object {
    private Tuple`2 modreq(System.Runtime.CompilerServices.IsVolatile) _filter;
    public string Expression { get; public set; }
    public LoggingFilterSwitch(string expression);
    public string get_Expression();
    public void set_Expression(string value);
    public sealed virtual bool IsEnabled(LogEvent logEvent);
    public virtual string ToString();
}
internal static class Serilog.Filters.Expressions.Operators : object {
    [CompilerGeneratedAttribute]
private static StringComparer <OperatorComparer>k__BackingField;
    public static string OpAdd;
    public static string OpSubtract;
    public static string OpMultiply;
    public static string OpDivide;
    public static string OpModulo;
    public static string OpPower;
    public static string OpRound;
    public static string OpAnd;
    public static string OpOr;
    public static string OpLessThanOrEqual;
    public static string OpLessThan;
    public static string OpGreaterThan;
    public static string OpGreaterThanOrEqual;
    public static string OpEqual;
    public static string RuntimeOpEqualIgnoreCase;
    public static string RuntimeOpEqualPattern;
    public static string OpNotEqual;
    public static string RuntimeOpNotEqualIgnoreCase;
    public static string RuntimeOpNotEqualPattern;
    public static string OpNegate;
    public static string OpNot;
    public static string OpContains;
    public static string RuntimeOpContainsIgnoreCase;
    public static string RuntimeOpContainsPattern;
    public static string OpIndexOf;
    public static string RuntimeOpIndexOfIgnoreCase;
    public static string RuntimeOpIndexOfPattern;
    public static string OpLength;
    public static string OpStartsWith;
    public static string RuntimeOpStartsWithIgnoreCase;
    public static string RuntimeOpStartsWithPattern;
    public static string OpEndsWith;
    public static string RuntimeOpEndsWithIgnoreCase;
    public static string RuntimeOpEndsWithPattern;
    public static string OpHas;
    public static string OpArrived;
    public static string OpDateTime;
    public static string OpTimeSpan;
    public static string OpTimeOfDay;
    public static string OpElementAt;
    public static string RuntimeOpAny;
    public static string RuntimeOpAll;
    public static string OpTypeOf;
    public static string OpTotalMilliseconds;
    public static string RuntimeOpIsNull;
    public static string RuntimeOpIsNotNull;
    public static string OpCoalesce;
    public static string IntermediateOpSqlLike;
    public static string IntermediateOpSqlNotLike;
    public static string IntermediateOpSqlIs;
    public static string RuntimeOpSqlIn;
    public static string IntermediateOpSqlNotIn;
    public static string RuntimeOpStrictNot;
    public static string OpSubstring;
    public static string RuntimeOpNewSequence;
    public static string OpIndexOfIgnoreCase;
    public static HashSet`1<string> WildcardComparators;
    public static HashSet`1<string> LogicalOperators;
    public static HashSet`1<string> UserSyntaxRootOperators;
    public static StringComparer OperatorComparer { get; }
    private static Operators();
    [CompilerGeneratedAttribute]
public static StringComparer get_OperatorComparer();
    public static bool SameOperator(string op1, string op2);
    public static string ToRuntimeIgnoreCase(string op);
    public static string ToRuntimePattern(string op);
    public static string ToRuntimeWildcardOperator(FilterWildcard wildcard);
    public static bool IsRuntimeVariant(string op, string variant);
}
internal class Serilog.Filters.Expressions.Parsing.FilterExpressionKeyword : ValueType {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterExpressionToken <Token>k__BackingField;
    public string Text { get; }
    public FilterExpressionToken Token { get; }
    public FilterExpressionKeyword(string text, FilterExpressionToken token);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public FilterExpressionToken get_Token();
}
internal static class Serilog.Filters.Expressions.Parsing.FilterExpressionParser : object {
    public static FilterExpression Parse(string filterExpression);
    public static bool TryParse(string filterExpression, FilterExpression& root, String& error);
}
internal static class Serilog.Filters.Expressions.Parsing.FilterExpressionTextParsers : object {
    private static TextParser`1<FilterExpressionToken> LessOrEqual;
    private static TextParser`1<FilterExpressionToken> GreaterOrEqual;
    private static TextParser`1<FilterExpressionToken> NotEqual;
    public static TextParser`1<FilterExpressionToken> CompoundOperator;
    public static TextParser`1<string> HexInteger;
    public static TextParser`1<char> SqlStringContentChar;
    public static TextParser`1<string> SqlString;
    [CompilerGeneratedAttribute]
private static TextParser`1<char> <RegularExpressionContentChar>k__BackingField;
    public static TextParser`1<Unit> RegularExpression;
    public static TextParser`1<TextSpan> Real;
    public static TextParser`1<char> RegularExpressionContentChar { get; }
    private static FilterExpressionTextParsers();
    [CompilerGeneratedAttribute]
public static TextParser`1<char> get_RegularExpressionContentChar();
}
internal enum Serilog.Filters.Expressions.Parsing.FilterExpressionToken : Enum {
    public int value__;
    public static FilterExpressionToken None;
    public static FilterExpressionToken Identifier;
    [TokenAttribute]
public static FilterExpressionToken BuiltInIdentifier;
    public static FilterExpressionToken String;
    [TokenAttribute]
public static FilterExpressionToken RegularExpression;
    public static FilterExpressionToken Number;
    [TokenAttribute]
public static FilterExpressionToken HexNumber;
    [TokenAttribute]
public static FilterExpressionToken Comma;
    [TokenAttribute]
public static FilterExpressionToken Period;
    [TokenAttribute]
public static FilterExpressionToken LBracket;
    [TokenAttribute]
public static FilterExpressionToken RBracket;
    [TokenAttribute]
public static FilterExpressionToken LParen;
    [TokenAttribute]
public static FilterExpressionToken RParen;
    [TokenAttribute]
public static FilterExpressionToken QuestionMark;
    [TokenAttribute]
public static FilterExpressionToken Plus;
    [TokenAttribute]
public static FilterExpressionToken Minus;
    [TokenAttribute]
public static FilterExpressionToken Asterisk;
    [TokenAttribute]
public static FilterExpressionToken ForwardSlash;
    [TokenAttribute]
public static FilterExpressionToken Percent;
    [TokenAttribute]
public static FilterExpressionToken Caret;
    [TokenAttribute]
public static FilterExpressionToken LessThan;
    [TokenAttribute]
public static FilterExpressionToken LessThanOrEqual;
    [TokenAttribute]
public static FilterExpressionToken GreaterThan;
    [TokenAttribute]
public static FilterExpressionToken GreaterThanOrEqual;
    [TokenAttribute]
public static FilterExpressionToken Equal;
    [TokenAttribute]
public static FilterExpressionToken NotEqual;
    [TokenAttribute]
public static FilterExpressionToken And;
    [TokenAttribute]
public static FilterExpressionToken In;
    [TokenAttribute]
public static FilterExpressionToken Is;
    [TokenAttribute]
public static FilterExpressionToken Like;
    [TokenAttribute]
public static FilterExpressionToken Not;
    [TokenAttribute]
public static FilterExpressionToken Or;
    [TokenAttribute]
public static FilterExpressionToken True;
    [TokenAttribute]
public static FilterExpressionToken False;
    [TokenAttribute]
public static FilterExpressionToken Null;
}
internal class Serilog.Filters.Expressions.Parsing.FilterExpressionTokenizer : Tokenizer`1<FilterExpressionToken> {
    private static FilterExpressionToken[] SimpleOps;
    private static HashSet`1<FilterExpressionToken> PreRegexTokens;
    private static FilterExpressionKeyword[] Keywords;
    [CompilerGeneratedAttribute]
private static FilterExpressionTokenizer <Instance>k__BackingField;
    public static FilterExpressionTokenizer Instance { get; }
    private static FilterExpressionTokenizer();
    [IteratorStateMachineAttribute("Serilog.Filters.Expressions.Parsing.FilterExpressionTokenizer/<Tokenize>d__4")]
protected virtual IEnumerable`1<Result`1<FilterExpressionToken>> Tokenize(TextSpan stringSpan, TokenizationState`1<FilterExpressionToken> tokenizationState);
    private static bool IsDelimiter(Result`1<char> next);
    private static bool TryGetKeyword(TextSpan span, FilterExpressionToken& keyword);
    [CompilerGeneratedAttribute]
public static FilterExpressionTokenizer get_Instance();
}
internal static class Serilog.Filters.Expressions.Parsing.FilterExpressionTokenParsers : object {
    private static TokenListParser`2<FilterExpressionToken, string> Add;
    private static TokenListParser`2<FilterExpressionToken, string> Subtract;
    private static TokenListParser`2<FilterExpressionToken, string> Multiply;
    private static TokenListParser`2<FilterExpressionToken, string> Divide;
    private static TokenListParser`2<FilterExpressionToken, string> Modulo;
    private static TokenListParser`2<FilterExpressionToken, string> Power;
    private static TokenListParser`2<FilterExpressionToken, string> And;
    private static TokenListParser`2<FilterExpressionToken, string> Or;
    private static TokenListParser`2<FilterExpressionToken, string> Lte;
    private static TokenListParser`2<FilterExpressionToken, string> Lt;
    private static TokenListParser`2<FilterExpressionToken, string> Gt;
    private static TokenListParser`2<FilterExpressionToken, string> Gte;
    private static TokenListParser`2<FilterExpressionToken, string> Eq;
    private static TokenListParser`2<FilterExpressionToken, string> Neq;
    private static TokenListParser`2<FilterExpressionToken, string> Negate;
    private static TokenListParser`2<FilterExpressionToken, string> Not;
    private static TokenListParser`2<FilterExpressionToken, string> Like;
    private static TokenListParser`2<FilterExpressionToken, string> NotLike;
    private static TokenListParser`2<FilterExpressionToken, string> In;
    private static TokenListParser`2<FilterExpressionToken, string> NotIn;
    private static TokenListParser`2<FilterExpressionToken, string> Is;
    private static TokenListParser`2<FilterExpressionToken, Func`2<FilterExpression, FilterExpression>> PropertyPathStep;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Wildcard;
    private static TokenListParser`2<FilterExpressionToken, Func`2<FilterExpression, FilterExpression>> PropertyPathIndexerStep;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Function;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> ArrayLiteral;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> RootProperty;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> PropertyPath;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> RegularExpression;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> SqlString;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> HexNumber;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Number;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Literal;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Item;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Factor;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Operand;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> InnerTerm;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Term;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Comparand;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Comparison;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Conjunction;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Disjunction;
    private static TokenListParser`2<FilterExpressionToken, FilterExpression> Expr;
    private static FilterExpressionTokenParsers();
    public static TokenListParserResult`2<FilterExpressionToken, FilterExpression> TryParse(TokenList`1<FilterExpressionToken> input);
    private static FilterExpression MakeBinary(string operatorName, FilterExpression leftOperand, FilterExpression rightOperand);
    private static FilterExpression MakeUnary(string operatorName, FilterExpression operand);
}
[ExtensionAttribute]
internal static class Serilog.Filters.Expressions.Parsing.ParserExtensions : object {
    [ExtensionAttribute]
public static TextParser`1<U> SelectCatch(TextParser`1<T> parser, Func`2<T, U> trySelector, string errorMessage);
    [ExtensionAttribute]
public static TokenListParser`2<TTokenKind, U> SelectCatch(TokenListParser`2<TTokenKind, T> parser, Func`2<T, U> trySelector, string errorMessage);
}
[AttributeUsageAttribute("64")]
internal class Serilog.Filters.Expressions.Runtime.AcceptNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class Serilog.Filters.Expressions.Runtime.AcceptUndefinedAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class Serilog.Filters.Expressions.Runtime.BooleanAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class Serilog.Filters.Expressions.Runtime.NumericAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class Serilog.Filters.Expressions.Runtime.NumericComparableAttribute : Attribute {
}
internal static class Serilog.Filters.Expressions.Runtime.Representation : object {
    private static Type[] NumericTypes;
    private static Type[] AllowedTypes;
    private static Representation();
    public static object Represent(LogEventPropertyValue value);
    public static object Expose(object internalValue);
    private static object ExposeOrRepresent(object internalValue);
    public static LogEventPropertyValue Recapture(object value);
}
internal static class Serilog.Filters.Expressions.Runtime.RuntimeOperators : object {
    private static CompareInfo CompareInfo;
    private static RuntimeOperators();
    [NumericAttribute]
public static object Add(object left, object right);
    [NumericAttribute]
public static object Subtract(object left, object right);
    [NumericAttribute]
public static object Multiply(object left, object right);
    [NumericAttribute]
public static object Divide(object left, object right);
    [NumericAttribute]
public static object Modulo(object left, object right);
    [NumericAttribute]
public static object Power(object left, object right);
    [BooleanAttribute]
public static object And(object left, object right);
    [BooleanAttribute]
[AcceptUndefinedAttribute]
[AcceptNullAttribute]
public static object Or(object left, object right);
    [NumericComparableAttribute]
public static object LessThanOrEqual(object left, object right);
    [NumericComparableAttribute]
public static object LessThan(object left, object right);
    [NumericComparableAttribute]
public static object GreaterThan(object left, object right);
    [NumericComparableAttribute]
public static object GreaterThanOrEqual(object left, object right);
    [AcceptNullAttribute]
public static object Equal(object left, object right);
    private static bool UnboxedEqualHelper(object left, object right);
    [AcceptNullAttribute]
public static object _Internal_In(object item, object collection);
    [AcceptNullAttribute]
public static object _Internal_EqualIgnoreCase(object left, object right);
    [AcceptNullAttribute]
public static object _Internal_EqualPattern(object left, object right);
    [AcceptNullAttribute]
public static object NotEqual(object left, object right);
    [AcceptNullAttribute]
public static object _Internal_NotEqualIgnoreCase(object left, object right);
    [AcceptNullAttribute]
public static object _Internal_NotEqualPattern(object left, object right);
    [NumericAttribute]
public static object Negate(object operand);
    [BooleanAttribute]
[AcceptUndefinedAttribute]
public static object Not(object operand);
    [BooleanAttribute]
public static object _Internal_StrictNot(object operand);
    public static object Contains(object corpus, object pattern);
    public static object _Internal_ContainsIgnoreCase(object corpus, object pattern);
    public static object _Internal_ContainsPattern(object corpus, object pattern);
    public static object IndexOf(object corpus, object pattern);
    public static object _Internal_IndexOfIgnoreCase(object corpus, object pattern);
    public static object _Internal_IndexOfPattern(object corpus, object pattern);
    public static object Length(object arg);
    public static object StartsWith(object corpus, object pattern);
    public static object _Internal_StartsWithIgnoreCase(object corpus, object pattern);
    public static object _Internal_StartsWithPattern(object corpus, object pattern);
    public static object EndsWith(object corpus, object pattern);
    public static object _Internal_EndsWithIgnoreCase(object corpus, object pattern);
    public static object _Internal_EndsWithPattern(object corpus, object pattern);
    [AcceptUndefinedAttribute]
[AcceptNullAttribute]
public static object Has(object value);
    public static object ElementAt(object items, object index);
    public static object _Internal_Any(object items, object predicate);
    public static object _Internal_All(object items, object predicate);
    [AcceptNullAttribute]
[AcceptUndefinedAttribute]
public static object TypeOf(object value);
    [AcceptUndefinedAttribute]
[AcceptNullAttribute]
public static object _Internal_IsNull(object value);
    [AcceptUndefinedAttribute]
[AcceptNullAttribute]
public static object _Internal_IsNotNull(object value);
    [AcceptUndefinedAttribute]
[AcceptNullAttribute]
public static object Coalesce(object v1, object v2);
    [AcceptNullAttribute]
public static object Substring(object sval, object startIndex, object length);
    public static SequenceValue _Internal_NewSequence(Object[] arr);
}
internal class Serilog.Filters.Expressions.Runtime.Undefined : object {
    public static Undefined Value;
    private static Undefined();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ExtensionAttribute]
public static class Serilog.LoggerEnrichmentConfigurationExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration When(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, string expression, Action`1<LoggerEnrichmentConfiguration> configureEnricher);
}
[ExtensionAttribute]
public static class Serilog.LoggerFilterConfigurationExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration ByIncludingOnly(LoggerFilterConfiguration loggerFilterConfiguration, string expression);
    [ExtensionAttribute]
public static LoggerConfiguration ByExcluding(LoggerFilterConfiguration loggerFilterConfiguration, string expression);
    [ExtensionAttribute]
public static LoggerConfiguration ControlledBy(LoggerFilterConfiguration loggerFilterConfiguration, LoggingFilterSwitch switch);
}
[ExtensionAttribute]
public static class Serilog.LoggerSinkConfigurationExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration Conditional(LoggerSinkConfiguration loggerSinkConfiguration, string expression, Action`1<LoggerSinkConfiguration> configureSink);
}
