[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Serilog.LoggerConfigurationApplicationInsightsExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration ApplicationInsights(LoggerSinkConfiguration loggerConfiguration, TelemetryConfiguration telemetryConfiguration, ITelemetryConverter telemetryConverter, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    [ExtensionAttribute]
public static LoggerConfiguration ApplicationInsights(LoggerSinkConfiguration loggerConfiguration, ITelemetryConverter telemetryConverter, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    [ExtensionAttribute]
public static LoggerConfiguration ApplicationInsights(LoggerSinkConfiguration loggerConfiguration, TelemetryClient telemetryClient, ITelemetryConverter telemetryConverter, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    [ExtensionAttribute]
public static LoggerConfiguration ApplicationInsights(LoggerSinkConfiguration loggerConfiguration, string connectionString, ITelemetryConverter telemetryConverter, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
}
public class Serilog.Sinks.ApplicationInsights.ApplicationInsightsSink : object {
    private IFormatProvider _formatProvider;
    private ITelemetryConverter _telemetryConverter;
    private long _isDisposed;
    private long _isDisposing;
    private TelemetryClient _telemetryClient;
    public bool IsDisposing { get; protected set; }
    public bool IsDisposed { get; protected set; }
    public ApplicationInsightsSink(TelemetryClient telemetryClient, ITelemetryConverter telemetryConverter, IFormatProvider formatProvider);
    public bool get_IsDisposing();
    protected void set_IsDisposing(bool value);
    public bool get_IsDisposed();
    protected void set_IsDisposed(bool value);
    public virtual void Emit(LogEvent logEvent);
    protected virtual void TrackTelemetry(ITelemetry telemetry);
    protected void CheckForAndThrowIfDisposed();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposeManagedResources);
}
public class Serilog.Sinks.ApplicationInsights.Formatters.ApplicationInsightsDottedValueFormatter : object {
    private static IDictionary`2<Type, Action`3<string, object, IDictionary`2<string, string>>> LiteralWriters;
    private static ApplicationInsightsDottedValueFormatter();
    public sealed virtual void Format(string propertyName, LogEventPropertyValue propertyValue, IDictionary`2<string, string> properties);
    private static void WriteStructureValue(string key, StructureValue structureValue, IDictionary`2<string, string> properties);
    private static void WriteDictionaryValue(string key, DictionaryValue dictionaryValue, IDictionary`2<string, string> properties);
    private static void WriteSequenceValue(string key, SequenceValue sequenceValue, IDictionary`2<string, string> properties);
    private static void WriteValue(string key, object value, IDictionary`2<string, string> properties);
    private static void AppendProperty(IDictionary`2<string, string> propDictionary, string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.ApplicationInsights.Formatters.ApplicationInsightsJsonValueFormatter : object {
    private JsonValueFormatter _formatter;
    public sealed virtual void Format(string propertyName, LogEventPropertyValue propertyValue, IDictionary`2<string, string> properties);
    private string FormatAsJson(LogEventPropertyValue propertyValue);
}
public interface Serilog.Sinks.ApplicationInsights.Formatters.IValueFormatter {
    public abstract virtual void Format(string propertyName, LogEventPropertyValue propertyValue, IDictionary`2<string, string> properties);
}
public class Serilog.Sinks.ApplicationInsights.TelemetryConverters.EventTelemetryConverter : TelemetryConverterBase {
    [IteratorStateMachineAttribute("Serilog.Sinks.ApplicationInsights.TelemetryConverters.EventTelemetryConverter/<Convert>d__0")]
public virtual IEnumerable`1<ITelemetry> Convert(LogEvent logEvent, IFormatProvider formatProvider);
    public virtual void ForwardPropertiesToTelemetryProperties(LogEvent logEvent, ISupportProperties telemetryProperties, IFormatProvider formatProvider);
}
public interface Serilog.Sinks.ApplicationInsights.TelemetryConverters.ITelemetryConverter {
    public abstract virtual IEnumerable`1<ITelemetry> Convert(LogEvent logEvent, IFormatProvider formatProvider);
}
public abstract class Serilog.Sinks.ApplicationInsights.TelemetryConverters.TelemetryConverterBase : object {
    public static string TelemetryPropertiesLogLevel;
    public static string TelemetryPropertiesMessageTemplate;
    public static string TelemetryPropertiesRenderedMessage;
    public static string OperationIdProperty;
    public static string VersionProperty;
    private static MessageTemplateTextFormatter MessageTemplateTextFormatter;
    [CompilerGeneratedAttribute]
private IValueFormatter <ValueFormatter>k__BackingField;
    public IValueFormatter ValueFormatter { get; }
    private static TelemetryConverterBase();
    [CompilerGeneratedAttribute]
public virtual IValueFormatter get_ValueFormatter();
    public abstract virtual IEnumerable`1<ITelemetry> Convert(LogEvent logEvent, IFormatProvider formatProvider);
    public virtual ExceptionTelemetry ToExceptionTelemetry(LogEvent logEvent, IFormatProvider formatProvider);
    public virtual void ForwardPropertiesToTelemetryProperties(LogEvent logEvent, ISupportProperties telemetryProperties, IFormatProvider formatProvider);
    public void ForwardPropertiesToTelemetryProperties(LogEvent logEvent, ISupportProperties telemetryProperties, IFormatProvider formatProvider, bool includeLogLevel, bool includeRenderedMessage, bool includeMessageTemplate);
    public Nullable`1<SeverityLevel> ToSeverityLevel(LogEventLevel logEventLevel);
}
public class Serilog.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter : TelemetryConverterBase {
    private static MessageTemplateTextFormatter MessageTemplateTextFormatter;
    private static TraceTelemetryConverter();
    [IteratorStateMachineAttribute("Serilog.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter/<Convert>d__1")]
public virtual IEnumerable`1<ITelemetry> Convert(LogEvent logEvent, IFormatProvider formatProvider);
}
public static class Serilog.TelemetryConverter : object {
    public static ITelemetryConverter Traces { get; }
    public static ITelemetryConverter Events { get; }
    public static ITelemetryConverter get_Traces();
    public static ITelemetryConverter get_Events();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
