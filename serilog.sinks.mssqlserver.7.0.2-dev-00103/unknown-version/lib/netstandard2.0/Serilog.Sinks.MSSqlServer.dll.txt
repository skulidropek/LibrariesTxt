[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Serilog.LoggerConfigurationMSSqlServerExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the new interface accepting a MSSqlServerSinkOptions parameter instead. This will be removed in a future release.", "False")]
public static LoggerConfiguration MSSqlServer(LoggerSinkConfiguration loggerConfiguration, string connectionString, string tableName, IConfiguration appConfiguration, LogEventLevel restrictedToMinimumLevel, int batchPostingLimit, Nullable`1<TimeSpan> period, IFormatProvider formatProvider, bool autoCreateSqlTable, ColumnOptions columnOptions, IConfigurationSection columnOptionsSection, string schemaName, ITextFormatter logEventFormatter);
    [ExtensionAttribute]
public static LoggerConfiguration MSSqlServer(LoggerSinkConfiguration loggerConfiguration, string connectionString, MSSqlServerSinkOptions sinkOptions, IConfigurationSection sinkOptionsSection, IConfiguration appConfiguration, LogEventLevel restrictedToMinimumLevel, IFormatProvider formatProvider, ColumnOptions columnOptions, IConfigurationSection columnOptionsSection, ITextFormatter logEventFormatter);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the new interface accepting a MSSqlServerSinkOptions parameter instead. This will be removed in a future release.", "False")]
public static LoggerConfiguration MSSqlServer(LoggerAuditSinkConfiguration loggerAuditSinkConfiguration, string connectionString, string tableName, IConfiguration appConfiguration, LogEventLevel restrictedToMinimumLevel, IFormatProvider formatProvider, bool autoCreateSqlTable, ColumnOptions columnOptions, IConfigurationSection columnOptionsSection, string schemaName, ITextFormatter logEventFormatter);
    [ExtensionAttribute]
public static LoggerConfiguration MSSqlServer(LoggerAuditSinkConfiguration loggerAuditSinkConfiguration, string connectionString, MSSqlServerSinkOptions sinkOptions, IConfigurationSection sinkOptionsSection, IConfiguration appConfiguration, LogEventLevel restrictedToMinimumLevel, IFormatProvider formatProvider, ColumnOptions columnOptions, IConfigurationSection columnOptionsSection, ITextFormatter logEventFormatter);
    private static void ReadConfiguration(String& connectionString, MSSqlServerSinkOptions& sinkOptions, IConfiguration appConfiguration, ColumnOptions& columnOptions, IConfigurationSection columnOptionsSection, IConfigurationSection sinkOptionsSection);
}
internal class Serilog.Sinks.MSSqlServer.ApplyMicrosoftExtensionsConfiguration : object {
    private IMicrosoftExtensionsConnectionStringProvider _connectionStringProvider;
    private IMicrosoftExtensionsColumnOptionsProvider _columnOptionsProvider;
    private IMicrosoftExtensionsSinkOptionsProvider _sinkOptionsProvider;
    internal ApplyMicrosoftExtensionsConfiguration(IMicrosoftExtensionsConnectionStringProvider connectionStringProvider, IMicrosoftExtensionsColumnOptionsProvider columnOptionsProvider, IMicrosoftExtensionsSinkOptionsProvider sinkOptionsProvider);
    public sealed virtual string GetConnectionString(string nameOrConnectionString, IConfiguration appConfiguration);
    public sealed virtual ColumnOptions ConfigureColumnOptions(ColumnOptions columnOptions, IConfigurationSection config);
    public sealed virtual MSSqlServerSinkOptions ConfigureSinkOptions(MSSqlServerSinkOptions sinkOptions, IConfigurationSection config);
}
public class Serilog.Sinks.MSSqlServer.ColumnOptions : object {
    private ICollection`1<StandardColumn> _store;
    [CompilerGeneratedAttribute]
private SqlColumn <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClusteredColumnstoreIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SqlColumn> <AdditionalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<DataColumn> <AdditionalDataColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private IdColumnOptions <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private LevelColumnOptions <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceIdColumnOptions <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanIdColumnOptions <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertiesColumnOptions <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionColumnOptions <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageTemplateColumnOptions <MessageTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageColumnOptions <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeStampColumnOptions <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventColumnOptions <LogEvent>k__BackingField;
    private bool _configurationFinalized;
    public ICollection`1<StandardColumn> Store { get; public set; }
    public SqlColumn PrimaryKey { get; public set; }
    public bool ClusteredColumnstoreIndex { get; public set; }
    public bool DisableTriggers { get; public set; }
    public ICollection`1<SqlColumn> AdditionalColumns { get; public set; }
    [ObsoleteAttribute("Use the AdditionalColumns collection instead. This will be removed in a future release.", "False")]
public ICollection`1<DataColumn> AdditionalDataColumns { get; public set; }
    public IdColumnOptions Id { get; private set; }
    public LevelColumnOptions Level { get; private set; }
    public TraceIdColumnOptions TraceId { get; private set; }
    public SpanIdColumnOptions SpanId { get; private set; }
    public PropertiesColumnOptions Properties { get; private set; }
    public ExceptionColumnOptions Exception { get; public set; }
    public MessageTemplateColumnOptions MessageTemplate { get; public set; }
    public MessageColumnOptions Message { get; public set; }
    public TimeStampColumnOptions TimeStamp { get; private set; }
    public LogEventColumnOptions LogEvent { get; private set; }
    public ICollection`1<StandardColumn> get_Store();
    public void set_Store(ICollection`1<StandardColumn> value);
    [CompilerGeneratedAttribute]
public SqlColumn get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(SqlColumn value);
    [CompilerGeneratedAttribute]
public bool get_ClusteredColumnstoreIndex();
    [CompilerGeneratedAttribute]
public void set_ClusteredColumnstoreIndex(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableTriggers();
    [CompilerGeneratedAttribute]
public void set_DisableTriggers(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<SqlColumn> get_AdditionalColumns();
    [CompilerGeneratedAttribute]
public void set_AdditionalColumns(ICollection`1<SqlColumn> value);
    [CompilerGeneratedAttribute]
public ICollection`1<DataColumn> get_AdditionalDataColumns();
    [CompilerGeneratedAttribute]
public void set_AdditionalDataColumns(ICollection`1<DataColumn> value);
    [CompilerGeneratedAttribute]
public IdColumnOptions get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(IdColumnOptions value);
    [CompilerGeneratedAttribute]
public LevelColumnOptions get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(LevelColumnOptions value);
    [CompilerGeneratedAttribute]
public TraceIdColumnOptions get_TraceId();
    [CompilerGeneratedAttribute]
private void set_TraceId(TraceIdColumnOptions value);
    [CompilerGeneratedAttribute]
public SpanIdColumnOptions get_SpanId();
    [CompilerGeneratedAttribute]
private void set_SpanId(SpanIdColumnOptions value);
    [CompilerGeneratedAttribute]
public PropertiesColumnOptions get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(PropertiesColumnOptions value);
    [CompilerGeneratedAttribute]
public ExceptionColumnOptions get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(ExceptionColumnOptions value);
    [CompilerGeneratedAttribute]
public MessageTemplateColumnOptions get_MessageTemplate();
    [CompilerGeneratedAttribute]
public void set_MessageTemplate(MessageTemplateColumnOptions value);
    [CompilerGeneratedAttribute]
public MessageColumnOptions get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(MessageColumnOptions value);
    [CompilerGeneratedAttribute]
public TimeStampColumnOptions get_TimeStamp();
    [CompilerGeneratedAttribute]
private void set_TimeStamp(TimeStampColumnOptions value);
    [CompilerGeneratedAttribute]
public LogEventColumnOptions get_LogEvent();
    [CompilerGeneratedAttribute]
private void set_LogEvent(LogEventColumnOptions value);
    internal SqlColumn GetStandardColumnOptions(StandardColumn standardColumn);
    internal void FinalizeConfigurationForSinkConstructor();
    private static void ColumnstoreCompatibilityCheck(SqlColumn column);
}
internal interface Serilog.Sinks.MSSqlServer.Configuration.Factories.IMSSqlServerAuditSinkFactory {
    public abstract virtual ILogEventSink Create(string connectionString, MSSqlServerSinkOptions sinkOptions, IFormatProvider formatProvider, ColumnOptions columnOptions, ITextFormatter logEventFormatter);
}
internal interface Serilog.Sinks.MSSqlServer.Configuration.Factories.IMSSqlServerSinkFactory {
    public abstract virtual IBatchedLogEventSink Create(string connectionString, MSSqlServerSinkOptions sinkOptions, IFormatProvider formatProvider, ColumnOptions columnOptions, ITextFormatter logEventFormatter);
}
internal interface Serilog.Sinks.MSSqlServer.Configuration.Factories.IPeriodicBatchingSinkFactory {
    public abstract virtual ILogEventSink Create(IBatchedLogEventSink sink, MSSqlServerSinkOptions sinkOptions);
}
internal class Serilog.Sinks.MSSqlServer.Configuration.Factories.MSSqlServerAuditSinkFactory : object {
    public sealed virtual ILogEventSink Create(string connectionString, MSSqlServerSinkOptions sinkOptions, IFormatProvider formatProvider, ColumnOptions columnOptions, ITextFormatter logEventFormatter);
}
internal class Serilog.Sinks.MSSqlServer.Configuration.Factories.MSSqlServerSinkFactory : object {
    public sealed virtual IBatchedLogEventSink Create(string connectionString, MSSqlServerSinkOptions sinkOptions, IFormatProvider formatProvider, ColumnOptions columnOptions, ITextFormatter logEventFormatter);
}
internal class Serilog.Sinks.MSSqlServer.Configuration.Factories.PeriodicBatchingSinkFactory : object {
    public sealed virtual ILogEventSink Create(IBatchedLogEventSink sink, MSSqlServerSinkOptions sinkOptions);
}
internal interface Serilog.Sinks.MSSqlServer.Configuration.IMicrosoftExtensionsColumnOptionsProvider {
    public abstract virtual ColumnOptions ConfigureColumnOptions(ColumnOptions columnOptions, IConfigurationSection config);
}
internal interface Serilog.Sinks.MSSqlServer.Configuration.IMicrosoftExtensionsConnectionStringProvider {
    public abstract virtual string GetConnectionString(string nameOrConnectionString, IConfiguration appConfiguration);
}
internal interface Serilog.Sinks.MSSqlServer.Configuration.IMicrosoftExtensionsSinkOptionsProvider {
    public abstract virtual MSSqlServerSinkOptions ConfigureSinkOptions(MSSqlServerSinkOptions sinkOptions, IConfigurationSection config);
}
internal class Serilog.Sinks.MSSqlServer.Configuration.MicrosoftExtensionsColumnOptionsProvider : object {
    public sealed virtual ColumnOptions ConfigureColumnOptions(ColumnOptions columnOptions, IConfigurationSection config);
    private static void SetCommonColumnOptions(IConfigurationSection section, SqlColumn target);
    private static void AddRemoveStandardColumns(IConfigurationSection config, ColumnOptions columnOptions);
    private static void AddAdditionalColumns(IConfigurationSection config, ColumnOptions columnOptions);
    private static void ReadStandardColumns(IConfigurationSection config, ColumnOptions columnOptions);
    private static void ReadMiscColumnOptions(IConfigurationSection config, ColumnOptions columnOptions);
}
internal class Serilog.Sinks.MSSqlServer.Configuration.MicrosoftExtensionsConnectionStringProvider : object {
    public sealed virtual string GetConnectionString(string nameOrConnectionString, IConfiguration appConfiguration);
}
internal class Serilog.Sinks.MSSqlServer.Configuration.MicrosoftExtensionsSinkOptionsProvider : object {
    public sealed virtual MSSqlServerSinkOptions ConfigureSinkOptions(MSSqlServerSinkOptions sinkOptions, IConfigurationSection config);
    private static void ReadTableOptions(IConfigurationSection config, MSSqlServerSinkOptions sinkOptions);
    private static void ReadBatchSettings(IConfigurationSection config, MSSqlServerSinkOptions sinkOptions);
}
internal class Serilog.Sinks.MSSqlServer.Dependencies.SinkDependencies : object {
    [CompilerGeneratedAttribute]
private IDataTableCreator <DataTableCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlCommandExecutor <SqlDatabaseCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlCommandExecutor <SqlTableCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlBulkBatchWriter <SqlBulkBatchWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlLogEventWriter <SqlLogEventWriter>k__BackingField;
    public IDataTableCreator DataTableCreator { get; public set; }
    public ISqlCommandExecutor SqlDatabaseCreator { get; public set; }
    public ISqlCommandExecutor SqlTableCreator { get; public set; }
    public ISqlBulkBatchWriter SqlBulkBatchWriter { get; public set; }
    public ISqlLogEventWriter SqlLogEventWriter { get; public set; }
    [CompilerGeneratedAttribute]
public IDataTableCreator get_DataTableCreator();
    [CompilerGeneratedAttribute]
public void set_DataTableCreator(IDataTableCreator value);
    [CompilerGeneratedAttribute]
public ISqlCommandExecutor get_SqlDatabaseCreator();
    [CompilerGeneratedAttribute]
public void set_SqlDatabaseCreator(ISqlCommandExecutor value);
    [CompilerGeneratedAttribute]
public ISqlCommandExecutor get_SqlTableCreator();
    [CompilerGeneratedAttribute]
public void set_SqlTableCreator(ISqlCommandExecutor value);
    [CompilerGeneratedAttribute]
public ISqlBulkBatchWriter get_SqlBulkBatchWriter();
    [CompilerGeneratedAttribute]
public void set_SqlBulkBatchWriter(ISqlBulkBatchWriter value);
    [CompilerGeneratedAttribute]
public ISqlLogEventWriter get_SqlLogEventWriter();
    [CompilerGeneratedAttribute]
public void set_SqlLogEventWriter(ISqlLogEventWriter value);
}
internal static class Serilog.Sinks.MSSqlServer.Dependencies.SinkDependenciesFactory : object {
    internal static SinkDependencies Create(string connectionString, MSSqlServerSinkOptions sinkOptions, IFormatProvider formatProvider, ColumnOptions columnOptions, ITextFormatter logEventFormatter);
}
[ExtensionAttribute]
internal static class Serilog.Sinks.MSSqlServer.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string TruncateOutput(string value, int dataLength);
    [ExtensionAttribute]
public static string Truncate(string value, int maxLength, string suffix);
}
internal interface Serilog.Sinks.MSSqlServer.IApplyMicrosoftExtensionsConfiguration {
    public abstract virtual string GetConnectionString(string nameOrConnectionString, IConfiguration appConfiguration);
    public abstract virtual ColumnOptions ConfigureColumnOptions(ColumnOptions columnOptions, IConfigurationSection config);
    public abstract virtual MSSqlServerSinkOptions ConfigureSinkOptions(MSSqlServerSinkOptions sinkOptions, IConfigurationSection config);
}
public class Serilog.Sinks.MSSqlServer.MSSqlServerAuditSink : object {
    private ISqlLogEventWriter _sqlLogEventWriter;
    [ObsoleteAttribute("Use the new interface accepting a MSSqlServerSinkOptions parameter instead. This will be removed in a future release.", "False")]
public MSSqlServerAuditSink(string connectionString, string tableName, IFormatProvider formatProvider, bool autoCreateSqlTable, ColumnOptions columnOptions, string schemaName, ITextFormatter logEventFormatter);
    public MSSqlServerAuditSink(string connectionString, MSSqlServerSinkOptions sinkOptions, IFormatProvider formatProvider, ColumnOptions columnOptions, ITextFormatter logEventFormatter);
    internal MSSqlServerAuditSink(MSSqlServerSinkOptions sinkOptions, ColumnOptions columnOptions, SinkDependencies sinkDependencies);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void ValidateParameters(MSSqlServerSinkOptions sinkOptions, ColumnOptions columnOptions);
    private static void CheckSinkDependencies(SinkDependencies sinkDependencies);
    private static void CreateDatabaseAndTable(MSSqlServerSinkOptions sinkOptions, SinkDependencies sinkDependencies);
}
public class Serilog.Sinks.MSSqlServer.MSSqlServerSink : object {
    private ISqlBulkBatchWriter _sqlBulkBatchWriter;
    private DataTable _eventTable;
    public static string DefaultSchemaName;
    public static int DefaultBatchPostingLimit;
    public static TimeSpan DefaultPeriod;
    private bool _disposedValue;
    [ObsoleteAttribute("Use the new interface accepting a MSSqlServerSinkOptions parameter instead. This will be removed in a future release.", "False")]
public MSSqlServerSink(string connectionString, string tableName, int batchPostingLimit, TimeSpan period, IFormatProvider formatProvider, bool autoCreateSqlTable, ColumnOptions columnOptions, string schemaName, ITextFormatter logEventFormatter);
    public MSSqlServerSink(string connectionString, MSSqlServerSinkOptions sinkOptions, IFormatProvider formatProvider, ColumnOptions columnOptions, ITextFormatter logEventFormatter);
    internal MSSqlServerSink(MSSqlServerSinkOptions sinkOptions, SinkDependencies sinkDependencies);
    private static MSSqlServerSink();
    public sealed virtual Task EmitBatchAsync(IReadOnlyCollection`1<LogEvent> batch);
    public sealed virtual Task OnEmptyBatchAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void ValidateParameters(MSSqlServerSinkOptions sinkOptions);
    private static void CheckSinkDependencies(SinkDependencies sinkDependencies);
    private void CreateDatabaseAndTable(MSSqlServerSinkOptions sinkOptions, SinkDependencies sinkDependencies);
}
public class Serilog.Sinks.MSSqlServer.MSSqlServerSinkOptions : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCreateSqlDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCreateSqlTable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnlistInTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchPostingLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BatchPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EagerlyEmitFirstEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevelSwitch <LevelSwitch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSqlBulkCopy>k__BackingField;
    public string TableName { get; public set; }
    public string SchemaName { get; public set; }
    public bool AutoCreateSqlDatabase { get; public set; }
    public bool AutoCreateSqlTable { get; public set; }
    public bool EnlistInTransaction { get; public set; }
    public int BatchPostingLimit { get; public set; }
    public TimeSpan BatchPeriod { get; public set; }
    public bool EagerlyEmitFirstEvent { get; public set; }
    public LoggingLevelSwitch LevelSwitch { get; public set; }
    public bool UseSqlBulkCopy { get; public set; }
    internal MSSqlServerSinkOptions(string tableName, Nullable`1<int> batchPostingLimit, Nullable`1<TimeSpan> batchPeriod, bool autoCreateSqlTable, string schemaName);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoCreateSqlDatabase();
    [CompilerGeneratedAttribute]
public void set_AutoCreateSqlDatabase(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoCreateSqlTable();
    [CompilerGeneratedAttribute]
public void set_AutoCreateSqlTable(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnlistInTransaction();
    [CompilerGeneratedAttribute]
public void set_EnlistInTransaction(bool value);
    [CompilerGeneratedAttribute]
public int get_BatchPostingLimit();
    [CompilerGeneratedAttribute]
public void set_BatchPostingLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BatchPeriod();
    [CompilerGeneratedAttribute]
public void set_BatchPeriod(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_EagerlyEmitFirstEvent();
    [CompilerGeneratedAttribute]
public void set_EagerlyEmitFirstEvent(bool value);
    [CompilerGeneratedAttribute]
public LoggingLevelSwitch get_LevelSwitch();
    [CompilerGeneratedAttribute]
public void set_LevelSwitch(LoggingLevelSwitch value);
    [CompilerGeneratedAttribute]
public bool get_UseSqlBulkCopy();
    [CompilerGeneratedAttribute]
public void set_UseSqlBulkCopy(bool value);
}
internal class Serilog.Sinks.MSSqlServer.Output.AdditionalColumnDataGenerator : object {
    private IColumnSimplePropertyValueResolver _columnSimplePropertyValueResolver;
    private IColumnHierarchicalPropertyValueResolver _columnHierarchicalPropertyValueResolver;
    public AdditionalColumnDataGenerator(IColumnSimplePropertyValueResolver columnSimplePropertyValueResolver, IColumnHierarchicalPropertyValueResolver columnHierarchicalPropertyValueResolver);
    public sealed virtual KeyValuePair`2<string, object> GetAdditionalColumnNameAndValue(SqlColumn additionalColumn, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    private static bool TryChangeType(object obj, Type type, Object& conversion);
}
internal class Serilog.Sinks.MSSqlServer.Output.ColumnHierarchicalPropertyValueResolver : object {
    public sealed virtual KeyValuePair`2<string, LogEventPropertyValue> GetPropertyValueForColumn(SqlColumn additionalColumn, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    private KeyValuePair`2<string, LogEventPropertyValue> GetSubPropertyValueForColumnRecursive(IReadOnlyList`1<string> propertyNameHierarchy, IReadOnlyList`1<LogEventProperty> properties);
}
internal class Serilog.Sinks.MSSqlServer.Output.ColumnSimplePropertyValueResolver : object {
    public sealed virtual KeyValuePair`2<string, LogEventPropertyValue> GetPropertyValueForColumn(SqlColumn additionalColumn, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
}
internal interface Serilog.Sinks.MSSqlServer.Output.IAdditionalColumnDataGenerator {
    public abstract virtual KeyValuePair`2<string, object> GetAdditionalColumnNameAndValue(SqlColumn additionalColumn, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
}
internal interface Serilog.Sinks.MSSqlServer.Output.IColumnHierarchicalPropertyValueResolver {
    public abstract virtual KeyValuePair`2<string, LogEventPropertyValue> GetPropertyValueForColumn(SqlColumn additionalColumn, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
}
internal interface Serilog.Sinks.MSSqlServer.Output.IColumnSimplePropertyValueResolver {
    public abstract virtual KeyValuePair`2<string, LogEventPropertyValue> GetPropertyValueForColumn(SqlColumn additionalColumn, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
}
internal interface Serilog.Sinks.MSSqlServer.Output.ILogEventDataGenerator {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> GetColumnsAndValues(LogEvent logEvent);
}
internal interface Serilog.Sinks.MSSqlServer.Output.IStandardColumnDataGenerator {
    public abstract virtual KeyValuePair`2<string, object> GetStandardColumnNameAndValue(StandardColumn column, LogEvent logEvent);
}
internal interface Serilog.Sinks.MSSqlServer.Output.IXmlPropertyFormatter {
    public abstract virtual string GetValidElementName(string name);
    public abstract virtual string Simplify(LogEventPropertyValue value, PropertiesColumnOptions options);
}
internal class Serilog.Sinks.MSSqlServer.Output.JsonLogEventFormatter : object {
    private static string _commaDelimiter;
    private ColumnOptions _columnOptions;
    private IStandardColumnDataGenerator _standardColumnsDataGenerator;
    private JsonValueFormatter _valueFormatter;
    public JsonLogEventFormatter(ColumnOptions columnOptions, IStandardColumnDataGenerator standardColumnsDataGenerator);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void WriteStandardColumns(LogEvent logEvent, TextWriter output, String& precedingDelimiter);
    private void WriteIfPresent(StandardColumn col, LogEvent logEvent, TextWriter output, String& precedingDelimiter);
    private void WriteTimeStampIfPresent(LogEvent logEvent, TextWriter output, String& precedingDelimiter);
    private KeyValuePair`2<string, object> WritePropertyName(LogEvent le, TextWriter writer, StandardColumn col);
    private void WriteProperties(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    private static void WriteRenderings(IEnumerable`1<IGrouping`2<string, PropertyToken>> tokensWithFormat, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
}
internal class Serilog.Sinks.MSSqlServer.Output.LogEventDataGenerator : object {
    private ColumnOptions _columnOptions;
    private IStandardColumnDataGenerator _standardColumnDataGenerator;
    private IAdditionalColumnDataGenerator _additionalColumnDataGenerator;
    public LogEventDataGenerator(ColumnOptions columnOptions, IStandardColumnDataGenerator standardColumnDataGenerator, IAdditionalColumnDataGenerator additionalColumnDataGenerator);
    [IteratorStateMachineAttribute("Serilog.Sinks.MSSqlServer.Output.LogEventDataGenerator/<GetColumnsAndValues>d__4")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetColumnsAndValues(LogEvent logEvent);
}
internal class Serilog.Sinks.MSSqlServer.Output.StandardColumnDataGenerator : object {
    private ColumnOptions _columnOptions;
    private IFormatProvider _formatProvider;
    private IXmlPropertyFormatter _xmlPropertyFormatter;
    private ITextFormatter _logEventFormatter;
    private ISet`1<string> _additionalColumnPropertyNames;
    public StandardColumnDataGenerator(ColumnOptions columnOptions, IFormatProvider formatProvider, IXmlPropertyFormatter xmlPropertyFormatter, ITextFormatter logEventFormatter);
    public sealed virtual KeyValuePair`2<string, object> GetStandardColumnNameAndValue(StandardColumn column, LogEvent logEvent);
    private KeyValuePair`2<string, object> GetTimeStampStandardColumnNameAndValue(LogEvent logEvent);
    private string RenderLogEventColumn(LogEvent logEvent);
    private string ConvertPropertiesToXmlStructure(IEnumerable`1<KeyValuePair`2<string, LogEventPropertyValue>> properties);
    [CompilerGeneratedAttribute]
private bool <RenderLogEventColumn>b__8_0(KeyValuePair`2<string, LogEventPropertyValue> p);
}
internal class Serilog.Sinks.MSSqlServer.Output.XmlPropertyFormatter : object {
    private static Regex _invalidXMLChars;
    private static XmlPropertyFormatter();
    public sealed virtual string Simplify(LogEventPropertyValue value, PropertiesColumnOptions options);
    public sealed virtual string GetValidElementName(string name);
    private static string SimplifyScalar(object value);
    private string SimplifyDictionary(PropertiesColumnOptions options, DictionaryValue dict);
    private string SimplifySequence(PropertiesColumnOptions options, SequenceValue seq);
    private string SimplifyStructure(PropertiesColumnOptions options, StructureValue str);
}
internal class Serilog.Sinks.MSSqlServer.Platform.DataTableCreator : object {
    private string _tableName;
    private ColumnOptions _columnOptions;
    public DataTableCreator(string tableName, ColumnOptions columnOptions);
    public sealed virtual DataTable CreateDataTable();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.IDataTableCreator {
    public abstract virtual DataTable CreateDataTable();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.ISqlBulkBatchWriter {
    public abstract virtual Task WriteBatch(IEnumerable`1<LogEvent> events, DataTable dataTable);
}
internal interface Serilog.Sinks.MSSqlServer.Platform.ISqlCommandExecutor {
    public abstract virtual void Execute();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.ISqlConnectionFactory {
    public abstract virtual ISqlConnectionWrapper Create();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.ISqlCreateDatabaseWriter {
    public string DatabaseName { get; }
    public abstract virtual string get_DatabaseName();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.ISqlCreateTableWriter {
    public string TableName { get; }
    public abstract virtual string get_TableName();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.ISqlLogEventWriter {
    public abstract virtual void WriteEvent(LogEvent logEvent);
}
internal interface Serilog.Sinks.MSSqlServer.Platform.ISqlWriter {
    public abstract virtual string GetSql();
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlBulkBatchWriter : object {
    private string _tableName;
    private string _schemaName;
    private bool _disableTriggers;
    private ISqlConnectionFactory _sqlConnectionFactory;
    private ILogEventDataGenerator _logEventDataGenerator;
    public SqlBulkBatchWriter(string tableName, string schemaName, bool disableTriggers, ISqlConnectionFactory sqlConnectionFactory, ILogEventDataGenerator logEventDataGenerator);
    [AsyncStateMachineAttribute("Serilog.Sinks.MSSqlServer.Platform.SqlBulkBatchWriter/<WriteBatch>d__6")]
public sealed virtual Task WriteBatch(IEnumerable`1<LogEvent> events, DataTable dataTable);
    private void FillDataTable(IEnumerable`1<LogEvent> events, DataTable dataTable);
}
internal interface Serilog.Sinks.MSSqlServer.Platform.SqlClient.ISqlBulkCopyWrapper {
    public abstract virtual void AddSqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public abstract virtual Task WriteToServerAsync(DataTable table);
}
internal interface Serilog.Sinks.MSSqlServer.Platform.SqlClient.ISqlCommandWrapper {
    public CommandType CommandType { get; public set; }
    public string CommandText { get; public set; }
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual void AddParameter(string parameterName, object value);
    public abstract virtual int ExecuteNonQuery();
    public abstract virtual Task`1<int> ExecuteNonQueryAsync();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.SqlClient.ISqlConnectionStringBuilderWrapper {
    public string ConnectionString { get; }
    public string InitialCatalog { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual string get_InitialCatalog();
}
internal interface Serilog.Sinks.MSSqlServer.Platform.SqlClient.ISqlConnectionWrapper {
    public string ConnectionString { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void Open();
    public abstract virtual Task OpenAsync();
    public abstract virtual ISqlCommandWrapper CreateCommand();
    public abstract virtual ISqlCommandWrapper CreateCommand(string cmdText);
    public abstract virtual ISqlBulkCopyWrapper CreateSqlBulkCopy(bool disableTriggers, string destinationTableName);
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlClient.SqlBulkCopyWrapper : object {
    private SqlBulkCopy _sqlBulkCopy;
    private bool _disposedValue;
    public SqlBulkCopyWrapper(SqlBulkCopy sqlBulkCopy);
    public sealed virtual void AddSqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public sealed virtual Task WriteToServerAsync(DataTable table);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlClient.SqlCommandWrapper : object {
    private SqlCommand _sqlCommand;
    private bool _disposedValue;
    public CommandType CommandType { get; public set; }
    public string CommandText { get; public set; }
    public SqlCommandWrapper(SqlCommand sqlCommand);
    public sealed virtual CommandType get_CommandType();
    public sealed virtual void set_CommandType(CommandType value);
    public sealed virtual string get_CommandText();
    public sealed virtual void set_CommandText(string value);
    public sealed virtual void AddParameter(string parameterName, object value);
    public sealed virtual int ExecuteNonQuery();
    public sealed virtual Task`1<int> ExecuteNonQueryAsync();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlClient.SqlConnectionStringBuilderWrapper : object {
    private SqlConnectionStringBuilder _sqlConnectionStringBuilder;
    public string ConnectionString { get; }
    public string InitialCatalog { get; public set; }
    public SqlConnectionStringBuilderWrapper(string connectionString, bool enlist);
    public sealed virtual string get_ConnectionString();
    public sealed virtual string get_InitialCatalog();
    public void set_InitialCatalog(string value);
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlClient.SqlConnectionWrapper : object {
    private SqlConnection _sqlConnection;
    private bool _disposedValue;
    public string ConnectionString { get; }
    public SqlConnectionWrapper(string connectionString);
    public sealed virtual string get_ConnectionString();
    public sealed virtual void Open();
    [AsyncStateMachineAttribute("Serilog.Sinks.MSSqlServer.Platform.SqlClient.SqlConnectionWrapper/<OpenAsync>d__6")]
public sealed virtual Task OpenAsync();
    public sealed virtual ISqlCommandWrapper CreateCommand();
    public sealed virtual ISqlCommandWrapper CreateCommand(string cmdText);
    public sealed virtual ISqlBulkCopyWrapper CreateSqlBulkCopy(bool disableTriggers, string destinationTableName);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal abstract class Serilog.Sinks.MSSqlServer.Platform.SqlCommandExecutor : object {
    private ISqlWriter _sqlWriter;
    private ISqlConnectionFactory _sqlConnectionFactory;
    public SqlCommandExecutor(ISqlWriter sqlWriter, ISqlConnectionFactory sqlConnectionFactory);
    public sealed virtual void Execute();
    protected abstract virtual void HandleException(Exception ex);
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlConnectionFactory : object {
    private string _connectionString;
    private ISqlConnectionStringBuilderWrapper _sqlConnectionStringBuilderWrapper;
    public SqlConnectionFactory(ISqlConnectionStringBuilderWrapper sqlConnectionStringBuilderWrapper);
    public sealed virtual ISqlConnectionWrapper Create();
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlCreateDatabaseWriter : object {
    private string _databaseName;
    public string DatabaseName { get; }
    public SqlCreateDatabaseWriter(string databaseName);
    public sealed virtual string get_DatabaseName();
    public sealed virtual string GetSql();
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlCreateTableWriter : object {
    private string _schemaName;
    private string _tableName;
    private ColumnOptions _columnOptions;
    private IDataTableCreator _dataTableCreator;
    public string TableName { get; }
    public SqlCreateTableWriter(string schemaName, string tableName, ColumnOptions columnOptions, IDataTableCreator dataTableCreator);
    public sealed virtual string get_TableName();
    public sealed virtual string GetSql();
    private static string GetColumnDDL(SqlColumn column);
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlDatabaseCreator : SqlCommandExecutor {
    private string _databaseName;
    public SqlDatabaseCreator(ISqlCreateDatabaseWriter sqlCreateDatabaseWriter, ISqlConnectionFactory sqlConnectionFactory);
    protected virtual void HandleException(Exception ex);
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlInsertStatementWriter : object {
    private string _tableName;
    private string _schemaName;
    private ISqlConnectionFactory _sqlConnectionFactory;
    private ILogEventDataGenerator _logEventDataGenerator;
    public SqlInsertStatementWriter(string tableName, string schemaName, ISqlConnectionFactory sqlConnectionFactory, ILogEventDataGenerator logEventDataGenerator);
    public sealed virtual Task WriteBatch(IEnumerable`1<LogEvent> events, DataTable dataTable);
    public sealed virtual void WriteEvent(LogEvent logEvent);
    [AsyncStateMachineAttribute("Serilog.Sinks.MSSqlServer.Platform.SqlInsertStatementWriter/<WriteBatch>d__7")]
public Task WriteBatch(IEnumerable`1<LogEvent> events);
}
internal class Serilog.Sinks.MSSqlServer.Platform.SqlTableCreator : SqlCommandExecutor {
    private string _tableName;
    public SqlTableCreator(ISqlCreateTableWriter sqlCreateTableWriter, ISqlConnectionFactory sqlConnectionFactory);
    protected virtual void HandleException(Exception ex);
}
public static class Serilog.Sinks.MSSqlServer.SetProperty : object {
    public static void IfNotNull(string value, PropertySetter`1<T> setter);
    public static void IfNotNullOrEmpty(string value, PropertySetter`1<T> setter);
}
[ObsoleteAttribute("Replace SinkOptions with MSSqlServerSinkOptions. SinkOptions will be removed in a future release.", "False")]
public class Serilog.Sinks.MSSqlServer.Sinks.MSSqlServer.Options.SinkOptions : MSSqlServerSinkOptions {
}
public class Serilog.Sinks.MSSqlServer.SqlColumn : object {
    private SqlDbType _dataType;
    private string _columnName;
    private string _propertyName;
    private List`1<string> _propertyNameHierarchy;
    [CompilerGeneratedAttribute]
private bool <AllowNull>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonClusteredIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StandardColumn> <StandardColumnIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StandardColumnType>k__BackingField;
    public string ColumnName { get; public set; }
    public SqlDbType DataType { get; public set; }
    public bool AllowNull { get; public set; }
    public int DataLength { get; public set; }
    public bool NonClusteredIndex { get; public set; }
    public string PropertyName { get; public set; }
    internal IReadOnlyList`1<string> PropertyNameHierarchy { get; }
    internal bool HasHierarchicalPropertyName { get; }
    internal Nullable`1<StandardColumn> StandardColumnIdentifier { get; internal set; }
    internal Type StandardColumnType { get; internal set; }
    public SqlColumn(string columnName, SqlDbType dataType, bool allowNull, int dataLength);
    public SqlColumn(DataColumn dataColumn);
    public string get_ColumnName();
    public void set_ColumnName(string value);
    public SqlDbType get_DataType();
    public void set_DataType(SqlDbType value);
    [CompilerGeneratedAttribute]
public bool get_AllowNull();
    [CompilerGeneratedAttribute]
public void set_AllowNull(bool value);
    [CompilerGeneratedAttribute]
public int get_DataLength();
    [CompilerGeneratedAttribute]
public void set_DataLength(int value);
    [CompilerGeneratedAttribute]
public bool get_NonClusteredIndex();
    [CompilerGeneratedAttribute]
public void set_NonClusteredIndex(bool value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    internal IReadOnlyList`1<string> get_PropertyNameHierarchy();
    internal bool get_HasHierarchicalPropertyName();
    [CompilerGeneratedAttribute]
internal Nullable`1<StandardColumn> get_StandardColumnIdentifier();
    [CompilerGeneratedAttribute]
internal void set_StandardColumnIdentifier(Nullable`1<StandardColumn> value);
    [CompilerGeneratedAttribute]
internal Type get_StandardColumnType();
    [CompilerGeneratedAttribute]
internal void set_StandardColumnType(Type value);
    internal virtual DataColumn AsDataColumn();
    internal void SetDataTypeFromConfigString(string requestedSqlType);
    private void ParseHierarchicalPropertyName(string propertyName);
}
public static class Serilog.Sinks.MSSqlServer.SqlDataTypes : object {
    public static SqlDbType NotSupported;
    public static Dictionary`2<SqlDbType, Type> SystemTypeMap;
    public static ReadOnlyCollection`1<SqlDbType> VariableCharacterColumnTypes;
    public static List`1<SqlDbType> DataLengthRequired;
    public static Dictionary`2<Type, SqlDbType> ReverseTypeMap;
    public static List`1<SqlDbType> ColumnstoreCompatible;
    private static SqlDataTypes();
    public static bool TryParseIfSupported(string requestedType, SqlDbType& supportedSqlDbType);
}
public enum Serilog.Sinks.MSSqlServer.StandardColumn : Enum {
    public int value__;
    public static StandardColumn Id;
    public static StandardColumn Message;
    public static StandardColumn MessageTemplate;
    public static StandardColumn Level;
    public static StandardColumn TraceId;
    public static StandardColumn SpanId;
    public static StandardColumn TimeStamp;
    public static StandardColumn Exception;
    public static StandardColumn Properties;
    public static StandardColumn LogEvent;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
