[NullableContextAttribute("1")]
public interface Serilog.Sinks.PeriodicBatching.IBatchedLogEventSink {
    public abstract virtual Task EmitBatchAsync(IEnumerable`1<LogEvent> batch);
    public abstract virtual Task OnEmptyBatchAsync();
}
internal class Serilog.Sinks.PeriodicBatching.LegacyBatchedSinkAdapter : object {
    [NullableAttribute("1")]
private IBatchedLogEventSink _inner;
    private bool _dispose;
    [NullableContextAttribute("1")]
public LegacyBatchedSinkAdapter(IBatchedLogEventSink inner, bool dispose);
    [NullableContextAttribute("1")]
public sealed virtual Task EmitBatchAsync(IReadOnlyCollection`1<LogEvent> batch);
    [NullableContextAttribute("1")]
public sealed virtual Task OnEmptyBatchAsync();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.PeriodicBatching.LegacyBatchedSinkAdapter/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink : object {
    private ILogEventSink _targetSink;
    private bool _inheritanceApi;
    [ObsoleteAttribute("Implement `IBatchedLogEventSink` and use the `PeriodicBatchingSinkOptions` constructor.")]
public static int NoQueueLimit;
    public PeriodicBatchingSink(IBatchedLogEventSink batchedSink, PeriodicBatchingSinkOptions options);
    [ObsoleteAttribute("Implement `IBatchedLogEventSink` and use the `PeriodicBatchingSinkOptions` constructor.")]
protected PeriodicBatchingSink(int batchSizeLimit, TimeSpan period);
    [ObsoleteAttribute("Implement `IBatchedLogEventSink` and use the `PeriodicBatchingSinkOptions` constructor.")]
protected PeriodicBatchingSink(int batchSizeLimit, TimeSpan period, int queueLimit);
    private static ILogEventSink CreateSink(IBatchedLogEventSink batchedLogEventSink, bool disposeBatchedSink, PeriodicBatchingSinkOptions options);
    public sealed virtual void Emit(LogEvent logEvent);
    protected virtual void EmitBatch(IEnumerable`1<LogEvent> events);
    [AsyncStateMachineAttribute("Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink/<EmitBatchAsync>d__9")]
protected virtual Task EmitBatchAsync(IEnumerable`1<LogEvent> events);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual bool CanInclude(LogEvent logEvent);
    protected virtual void OnEmptyBatch();
    [AsyncStateMachineAttribute("Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink/<OnEmptyBatchAsync>d__15")]
protected virtual Task OnEmptyBatchAsync();
    private sealed virtual override Task Serilog.Sinks.PeriodicBatching.IBatchedLogEventSink.EmitBatchAsync(IEnumerable`1<LogEvent> batch);
    private sealed virtual override Task Serilog.Sinks.PeriodicBatching.IBatchedLogEventSink.OnEmptyBatchAsync();
}
public class Serilog.Sinks.PeriodicBatching.PeriodicBatchingSinkOptions : object {
    [CompilerGeneratedAttribute]
private bool <EagerlyEmitFirstEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <QueueLimit>k__BackingField;
    public bool EagerlyEmitFirstEvent { get; public set; }
    public int BatchSizeLimit { get; public set; }
    public TimeSpan Period { get; public set; }
    public Nullable`1<int> QueueLimit { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EagerlyEmitFirstEvent();
    [CompilerGeneratedAttribute]
public void set_EagerlyEmitFirstEvent(bool value);
    [CompilerGeneratedAttribute]
public int get_BatchSizeLimit();
    [CompilerGeneratedAttribute]
public void set_BatchSizeLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_QueueLimit();
    [CompilerGeneratedAttribute]
public void set_QueueLimit(Nullable`1<int> value);
}
