[ExtensionAttribute]
public static class Serilog.RollingFileLoggerConfigurationExtensions : object {
    private static int DefaultRetainedFileCountLimit;
    private static long DefaultFileSizeLimitBytes;
    private static string DefaultOutputTemplate;
    [ExtensionAttribute]
public static LoggerConfiguration RollingFile(LoggerSinkConfiguration sinkConfiguration, string pathFormat, LogEventLevel restrictedToMinimumLevel, string outputTemplate, IFormatProvider formatProvider, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval);
    [ExtensionAttribute]
public static LoggerConfiguration RollingFile(LoggerSinkConfiguration sinkConfiguration, ITextFormatter formatter, string pathFormat, LogEventLevel restrictedToMinimumLevel, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval);
}
internal static class Serilog.Sinks.RollingFile.Clock : object {
    private static Func`1<DateTime> _dateTimeNow;
    [ThreadStaticAttribute]
private static DateTime _testDateTimeNow;
    public static DateTime DateTimeNow { get; }
    private static Clock();
    public static DateTime get_DateTimeNow();
    public static void SetTestDateTimeNow(DateTime now);
}
internal static class Serilog.Sinks.RollingFile.IOErrors : object {
    public static bool IsLockedFile(IOException ex);
}
public class Serilog.Sinks.RollingFile.RollingFileSink : object {
    private TemplatedPathRoller _roller;
    private ITextFormatter _textFormatter;
    private Nullable`1<long> _fileSizeLimitBytes;
    private Nullable`1<int> _retainedFileCountLimit;
    private Encoding _encoding;
    private bool _buffered;
    private bool _shared;
    private object _syncRoot;
    private bool _isDisposed;
    private Nullable`1<DateTime> _nextCheckpoint;
    private ILogEventSink _currentFile;
    public RollingFileSink(string pathFormat, ITextFormatter textFormatter, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, Encoding encoding, bool buffered, bool shared);
    public sealed virtual void Emit(LogEvent logEvent);
    private void AlignCurrentFileTo(DateTime now);
    private void OpenFile(DateTime now);
    private void ApplyRetentionPolicy(string currentFilePath);
    public sealed virtual void Dispose();
    private void CloseFile();
    public sealed virtual void FlushToDisk();
}
internal class Serilog.Sinks.RollingFile.RollingLogFile : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SequenceNumber>k__BackingField;
    public string Filename { get; }
    public DateTime DateTime { get; }
    public int SequenceNumber { get; }
    public RollingLogFile(string filename, DateTime dateTime, int sequenceNumber);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public int get_SequenceNumber();
}
internal class Serilog.Sinks.RollingFile.Specifier : object {
    public static Specifier Date;
    public static Specifier Hour;
    public static Specifier HalfHour;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    public string Token { get; }
    public string Format { get; }
    public TimeSpan Interval { get; }
    private Specifier(string name, string format, TimeSpan interval);
    private static Specifier();
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public TimeSpan get_Interval();
    public DateTime GetCurrentCheckpoint(DateTime instant);
    public DateTime GetNextCheckpoint(DateTime instant);
    public static bool TryGetSpecifier(string pathTemplate, Specifier& specifier);
}
internal class Serilog.Sinks.RollingFile.TemplatedPathRoller : object {
    private static string DefaultSeparator;
    private static string SpecifierMatchGroup;
    private static string SequenceNumberMatchGroup;
    private string _pathTemplate;
    private Regex _filenameMatcher;
    private Specifier _specifier;
    [CompilerGeneratedAttribute]
private string <LogFileDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectorySearchPattern>k__BackingField;
    public string LogFileDirectory { get; }
    public string DirectorySearchPattern { get; }
    public TemplatedPathRoller(string pathTemplate);
    [CompilerGeneratedAttribute]
public string get_LogFileDirectory();
    [CompilerGeneratedAttribute]
public string get_DirectorySearchPattern();
    public void GetLogFilePath(DateTime date, int sequenceNumber, String& path);
    [IteratorStateMachineAttribute("Serilog.Sinks.RollingFile.TemplatedPathRoller/<SelectMatches>d__14")]
public IEnumerable`1<RollingLogFile> SelectMatches(IEnumerable`1<string> filenames);
    public DateTime GetCurrentCheckpoint(DateTime instant);
    public DateTime GetNextCheckpoint(DateTime instant);
}
