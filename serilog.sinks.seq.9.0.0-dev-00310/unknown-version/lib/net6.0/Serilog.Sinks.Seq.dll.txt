[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Serilog.SeqLoggerConfigurationExtensions : object {
    private static int DefaultBatchPostingLimit;
    private static TimeSpan DefaultPeriod;
    private static int DefaultQueueSizeLimit;
    private static SeqLoggerConfigurationExtensions();
    [NullableContextAttribute("1")]
private static ITextFormatter CreateDefaultFormatter(IFormatProvider formatProvider);
    [ExtensionAttribute]
public static LoggerConfiguration Seq(LoggerSinkConfiguration loggerSinkConfiguration, string serverUrl, LogEventLevel restrictedToMinimumLevel, int batchPostingLimit, Nullable`1<TimeSpan> period, string apiKey, string bufferBaseFilename, Nullable`1<long> bufferSizeLimitBytes, Nullable`1<long> eventBodyLimitBytes, LoggingLevelSwitch controlLevelSwitch, HttpMessageHandler messageHandler, Nullable`1<long> retainedInvalidPayloadsLimitBytes, int queueSizeLimit, ITextFormatter payloadFormatter, IFormatProvider formatProvider);
    [ExtensionAttribute]
public static LoggerConfiguration Seq(LoggerAuditSinkConfiguration loggerAuditSinkConfiguration, string serverUrl, LogEventLevel restrictedToMinimumLevel, string apiKey, HttpMessageHandler messageHandler, ITextFormatter payloadFormatter, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.Audit.SeqAuditSink : object {
    private SeqIngestionApi _ingestionApi;
    private ITextFormatter _payloadFormatter;
    public SeqAuditSink(SeqIngestionApi ingestionApi, ITextFormatter payloadFormatter);
    public sealed virtual void Dispose();
    public sealed virtual void Emit(LogEvent logEvent);
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Audit.SeqAuditSink/<EmitAsync>d__5")]
private Task EmitAsync(LogEvent logEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.Batched.BatchedSeqSink : object {
    private static TimeSpan RequiredLevelCheckInterval;
    private ConstrainedBufferedFormatter _payloadFormatter;
    private SeqIngestionApi _ingestionApi;
    private DateTime _nextRequiredLevelCheckUtc;
    private ControlledLevelSwitch _controlledSwitch;
    public BatchedSeqSink(SeqIngestionApi ingestionApi, ITextFormatter payloadFormatter, Nullable`1<long> eventBodyLimitBytes, ControlledLevelSwitch controlledSwitch);
    private static BatchedSeqSink();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Batched.BatchedSeqSink/<OnEmptyBatchAsync>d__7")]
public sealed virtual Task OnEmptyBatchAsync();
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Batched.BatchedSeqSink/<EmitBatchAsync>d__8")]
public sealed virtual Task EmitBatchAsync(IReadOnlyCollection`1<LogEvent> events);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.ConstrainedBufferedFormatter : object {
    private static int NewLineByteCount;
    private Nullable`1<long> _eventBodyLimitBytes;
    private ITextFormatter _innerFormatter;
    public ConstrainedBufferedFormatter(Nullable`1<long> eventBodyLimitBytes, ITextFormatter innerFormatter);
    private static ConstrainedBufferedFormatter();
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void Format(LogEvent logEvent, TextWriter output, bool writePlaceholders);
    private static LogEvent CreateNonFormattableEventPlaceholder(LogEvent logEvent, Exception ex);
    private static bool CheckEventBodySize(string jsonLine, Nullable`1<long> eventBodyLimitBytes);
    private static LogEvent CreateOversizeEventPlaceholder(LogEvent logEvent, string jsonLine, long eventBodyLimitBytes);
    internal static long GetOversizeEventSampleLength(long eventBodyLimitBytes);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.ControlledLevelSwitch : object {
    private LoggingLevelSwitch _controlledSwitch;
    private Nullable`1<LogEventLevel> _originalLevel;
    public bool IsActive { get; }
    public ControlledLevelSwitch(LoggingLevelSwitch controlledSwitch);
    public bool get_IsActive();
    [NullableContextAttribute("1")]
public bool IsIncluded(LogEvent evt);
    public void Update(Nullable`1<LogEventLevel> minimumAcceptedLevel);
}
internal class Serilog.Sinks.Seq.Conventions.PreserveDottedPropertyNames : object {
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyDictionary`2<string, LogEventPropertyValue> ProcessDottedPropertyNames(IReadOnlyDictionary`2<string, LogEventPropertyValue> maybeDotted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.Conventions.UnflattenDottedPropertyNames : object {
    private static int MaxDepth;
    public sealed virtual IReadOnlyDictionary`2<string, LogEventPropertyValue> ProcessDottedPropertyNames(IReadOnlyDictionary`2<string, LogEventPropertyValue> maybeDotted);
    private static IReadOnlyDictionary`2<string, LogEventPropertyValue> DottedToNestedRecursive(IReadOnlyDictionary`2<string, LogEventPropertyValue> maybeDotted, int depth);
    private static LogEventPropertyValue MakeStructureValue(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    internal static bool IsDottedIdentifier(string key);
    private static bool IsIdentifier(string s);
    private static ValueTuple`2<string, string> TakeFirstIdentifier(string dottedIdentifier);
}
internal class Serilog.Sinks.Seq.Durable.BookmarkFile : object {
    [NullableAttribute("1")]
private FileStream _bookmark;
    [NullableContextAttribute("1")]
public BookmarkFile(string bookmarkFilename);
    public FileSetPosition TryReadBookmark();
    public void WriteBookmark(FileSetPosition bookmark);
    public sealed virtual void Dispose();
}
internal class Serilog.Sinks.Seq.Durable.DurableSeqSink : object {
    [NullableAttribute("1")]
private HttpLogShipper _shipper;
    [NullableAttribute("1")]
private Logger _sink;
    [NullableContextAttribute("1")]
public DurableSeqSink(SeqIngestionApi ingestionApi, ITextFormatter payloadFormatter, string bufferBaseFilename, int batchPostingLimit, TimeSpan period, Nullable`1<long> bufferSizeLimitBytes, Nullable`1<long> eventBodyLimitBytes, ControlledLevelSwitch controlledSwitch, Nullable`1<long> retainedInvalidPayloadsLimitBytes);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Durable.DurableSeqSink/<DisposeAsync>d__4")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
public sealed virtual void Emit(LogEvent logEvent);
}
internal class Serilog.Sinks.Seq.Durable.ExponentialBackoffConnectionSchedule : object {
    private static TimeSpan MinimumBackoffPeriod;
    private static TimeSpan MaximumBackoffInterval;
    private TimeSpan _period;
    private int _failuresSinceSuccessfulConnection;
    public TimeSpan NextInterval { get; }
    public ExponentialBackoffConnectionSchedule(TimeSpan period);
    private static ExponentialBackoffConnectionSchedule();
    public void MarkSuccess();
    public void MarkFailure();
    public TimeSpan get_NextInterval();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.Durable.FileSet : object {
    private string _bookmarkFilename;
    private string _candidateSearchPath;
    private string _logFolder;
    private Regex _filenameMatcher;
    private static string InvalidPayloadFilePrefix;
    [CompilerGeneratedAttribute]
private string <RollingFilePathFormat>k__BackingField;
    public string RollingFilePathFormat { get; }
    public FileSet(string bufferBaseFilename);
    [CompilerGeneratedAttribute]
public string get_RollingFilePathFormat();
    public BookmarkFile OpenBookmarkFile();
    public String[] GetBufferFiles();
    public void CleanUpBufferFiles(long bufferSizeLimitBytes);
    public string MakeInvalidPayloadFilename(HttpStatusCode statusCode);
    public void CleanUpInvalidPayloadFiles(long maxNumberOfBytesToRetain);
    private static void DeleteExceedingCumulativeSize(IEnumerable`1<FileInfo> files, long maxNumberOfBytesToRetain, int alwaysRetainCount);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private KeyValuePair`2<string, Match> <GetBufferFiles>b__10_0(string n);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Serilog.Sinks.Seq.Durable.FileSetPosition : ValueType {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NextLineStart>k__BackingField;
    public static FileSetPosition None;
    public string File { get; }
    public long NextLineStart { get; }
    public FileSetPosition(long nextLineStart, string file);
    private static FileSetPosition();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public long get_NextLineStart();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.Durable.HttpLogShipper : object {
    private static TimeSpan RequiredLevelCheckInterval;
    private int _batchPostingLimit;
    private Nullable`1<long> _eventBodyLimitBytes;
    private FileSet _fileSet;
    private Nullable`1<long> _retainedInvalidPayloadsLimitBytes;
    private Nullable`1<long> _bufferSizeLimitBytes;
    private SeqIngestionApi _ingestionApi;
    private ExponentialBackoffConnectionSchedule _connectionSchedule;
    private DateTime _nextRequiredLevelCheckUtc;
    private object _stateLock;
    private PortableTimer _timer;
    private ControlledLevelSwitch _controlledSwitch;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _unloading;
    public HttpLogShipper(FileSet fileSet, SeqIngestionApi ingestionApi, int batchPostingLimit, TimeSpan period, Nullable`1<long> eventBodyLimitBytes, ControlledLevelSwitch controlledSwitch, Nullable`1<long> retainedInvalidPayloadsLimitBytes, Nullable`1<long> bufferSizeLimitBytes);
    private static HttpLogShipper();
    public bool IsIncluded(LogEvent logEvent);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Durable.HttpLogShipper/<DisposeAsync>d__16")]
public sealed virtual ValueTask DisposeAsync();
    private void SetTimer();
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Durable.HttpLogShipper/<OnTick>d__18")]
private Task OnTick();
    private Task DumpInvalidPayloadAsync(HttpStatusCode statusCode, string payload);
    private static bool FileIsUnlockedAndUnextended(FileSetPosition position);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__13_0(CancellationToken _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Sinks.Seq.Durable.PayloadReader : object {
    public static string ReadPayload(int batchPostingLimit, Nullable`1<long> eventBodyLimitBytes, FileSetPosition& position, Int32& count, String& mimeType);
    private static string ReadCompactPayload(int batchPostingLimit, Nullable`1<long> eventBodyLimitBytes, FileSetPosition& position, Int32& count);
    private static string ReadRawPayload(int batchPostingLimit, Nullable`1<long> eventBodyLimitBytes, FileSetPosition& position, Int32& count);
    private static bool TryReadLine(Stream current, Int64& nextStart, String& nextLine);
    public static string MakeEmptyPayload(String& mimeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Sinks.Seq.Formatting.CleanMessageTemplateFormatter : object {
    private static JsonValueFormatter SharedJsonValueFormatter;
    private static CleanMessageTemplateFormatter();
    public static string Format(MessageTemplate messageTemplate, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, IFormatProvider formatProvider);
    private static void RenderPropertyToken(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, PropertyToken pt, TextWriter output, IFormatProvider formatProvider);
    private static void RenderPropertyValueUnaligned(LogEventPropertyValue propertyValue, TextWriter output, string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Sinks.Seq.Formatting.Padding : object {
    private static Char[] PaddingChars;
    private static Padding();
    public static void Apply(TextWriter output, string value, Alignment alignment);
}
[IsReadOnlyAttribute]
internal class Serilog.Sinks.Seq.Http.IngestionResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogEventLevel> <MinimumAcceptedLevel>k__BackingField;
    public bool Succeeded { get; }
    public HttpStatusCode StatusCode { get; }
    public Nullable`1<LogEventLevel> MinimumAcceptedLevel { get; }
    public IngestionResult(bool succeeded, HttpStatusCode statusCode, Nullable`1<LogEventLevel> minimumAcceptedLevel);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public Nullable`1<LogEventLevel> get_MinimumAcceptedLevel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Serilog.Sinks.Seq.Http.SeqIngestionApi : object {
    public static string RawEventFormatMediaType;
    public static string CompactLogEventFormatMediaType;
    public static string EmptyClefPayload;
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Http.SeqIngestionApi/<IngestAsync>d__3")]
public Task`1<Nullable`1<LogEventLevel>> IngestAsync(string clefPayload);
    public abstract virtual Task`1<IngestionResult> TryIngestAsync(string payload, string mediaType);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.Http.SeqIngestionApiClient : SeqIngestionApi {
    private static string BulkUploadResource;
    private static string ApiKeyHeaderName;
    [NullableAttribute("2")]
private string _apiKey;
    private HttpClient _httpClient;
    private static string LevelMarker;
    [NullableContextAttribute("2")]
public SeqIngestionApiClient(string serverUrl, string apiKey, HttpMessageHandler messageHandler);
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.Http.SeqIngestionApiClient/<TryIngestAsync>d__5")]
public virtual Task`1<IngestionResult> TryIngestAsync(string payload, string mediaType);
    public virtual void Dispose();
    [NullableContextAttribute("2")]
internal static Nullable`1<LogEventLevel> ReadIngestionResult(string ingestionResult);
    internal static string NormalizeServerBaseAddress(string serverUrl);
}
[NullableContextAttribute("1")]
internal interface Serilog.Sinks.Seq.IDottedPropertyNameConvention {
    public abstract virtual IReadOnlyDictionary`2<string, LogEventPropertyValue> ProcessDottedPropertyNames(IReadOnlyDictionary`2<string, LogEventPropertyValue> maybeDotted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.Seq.PortableTimer : object {
    private object _stateLock;
    private Func`2<CancellationToken, Task> _onTick;
    private CancellationTokenSource _cancel;
    private Timer _timer;
    private bool _running;
    private bool _disposed;
    public PortableTimer(Func`2<CancellationToken, Task> onTick);
    public void Start(TimeSpan interval);
    [AsyncStateMachineAttribute("Serilog.Sinks.Seq.PortableTimer/<OnTick>d__8")]
private void OnTick();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.Seq.SeqCompactJsonFormatter : object {
    private static IDottedPropertyNameConvention DottedPropertyNameConvention;
    private JsonValueFormatter _valueFormatter;
    private IFormatProvider _formatProvider;
    [NullableContextAttribute("2")]
public SeqCompactJsonFormatter(IFormatProvider formatProvider);
    private static SeqCompactJsonFormatter();
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    public static void FormatEvent(LogEvent logEvent, TextWriter output, JsonValueFormatter valueFormatter, IFormatProvider formatProvider);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
