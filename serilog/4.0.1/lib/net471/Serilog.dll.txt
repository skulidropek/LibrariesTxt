internal static class Guard : object {
    [NullableContextAttribute("1")]
public static T AgainstNull(T argument, string paramName);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Capturing.MessageTemplateProcessor : object {
    private MessageTemplateCache _parser;
    private PropertyBinder _propertyBinder;
    private PropertyValueConverter _propertyValueConverter;
    public MessageTemplateProcessor(PropertyValueConverter propertyValueConverter);
    public void Process(string messageTemplate, Object[] messageTemplateParameters, MessageTemplate& parsedTemplate, EventProperty[]& properties);
    public sealed virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
    public sealed virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Capturing.PropertyBinder : object {
    private PropertyValueConverter _valueConverter;
    private static EventProperty[] NoProperties;
    public PropertyBinder(PropertyValueConverter valueConverter);
    private static PropertyBinder();
    public EventProperty[] ConstructProperties(MessageTemplate messageTemplate, Object[] messageTemplateParameters);
    private EventProperty[] ConstructPositionalProperties(MessageTemplate template, Object[] messageTemplateParameters, PropertyToken[] positionalProperties);
    private EventProperty[] ConstructNamedProperties(MessageTemplate template, Object[] messageTemplateParameters);
    private EventProperty ConstructProperty(PropertyToken propertyToken, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Capturing.PropertyValueConverter : object {
    private static HashSet`1<Type> BuiltInScalarTypes;
    private IDestructuringPolicy[] _destructuringPolicies;
    private Type[] _dictionaryTypes;
    private IScalarConversionPolicy[] _scalarConversionPolicies;
    private DepthLimiter _depthLimiter;
    private int _maximumStringLength;
    private int _maximumCollectionCount;
    private bool _propagateExceptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static HashSet`1<string> _lastSeenNames;
    public PropertyValueConverter(int maximumDestructuringDepth, int maximumStringLength, int maximumCollectionCount, IEnumerable`1<Type> additionalScalarTypes, IEnumerable`1<Type> additionalDictionaryTypes, IEnumerable`1<IDestructuringPolicy> additionalDestructuringPolicies, bool propagateExceptions);
    private static PropertyValueConverter();
    public sealed virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
    public sealed virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
    public LogEventPropertyValue CreatePropertyValue(object value, Destructuring destructuring);
    private LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects, int depth);
    private LogEventPropertyValue CreatePropertyValue(object value, Destructuring destructuring, int depth);
    private bool TryConvertEnumerable(object value, Type type, Destructuring destructuring, LogEventPropertyValue& result);
    private bool TryConvertValueTuple(object value, Type type, Destructuring destructuring, LogEventPropertyValue& result);
    private bool TryConvertStructure(object value, Type type, Destructuring destructuring, StructureValue& result);
    private ScalarValue Stringify(object value);
    private string TruncateIfNecessary(string text);
    private bool TryGetDictionary(object value, Type valueType, IDictionary& dictionary);
    private static bool IsValidDictionaryKeyType(Type valueType);
    internal StructureValue CreateStructureValue(object value, Type type, bool isCompilerGeneratedType);
    internal static bool IsCompilerGeneratedType(Type type);
    [IteratorStateMachineAttribute("Serilog.Capturing.PropertyValueConverter/<<TryConvertEnumerable>g__MapToDictionaryElements|15_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<ScalarValue, LogEventPropertyValue>> <TryConvertEnumerable>g__MapToDictionaryElements|15_0(IDictionary dictionaryEntries, Destructuring destructure);
    [IteratorStateMachineAttribute("Serilog.Capturing.PropertyValueConverter/<<TryConvertEnumerable>g__MapToSequenceElements|15_1>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<LogEventPropertyValue> <TryConvertEnumerable>g__MapToSequenceElements|15_1(IEnumerable sequence, Destructuring destructure);
}
internal static class Serilog.Capturing.TrimConfiguration : object {
    [CompilerGeneratedAttribute]
private static bool <IsCompilerGeneratedCodeSupported>k__BackingField;
    public static bool IsCompilerGeneratedCodeSupported { get; }
    private static TrimConfiguration();
    [CompilerGeneratedAttribute]
public static bool get_IsCompilerGeneratedCodeSupported();
}
public class Serilog.Configuration.BatchingOptions : object {
    [CompilerGeneratedAttribute]
private bool <EagerlyEmitFirstEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BufferingTimeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <QueueLimit>k__BackingField;
    public bool EagerlyEmitFirstEvent { get; public set; }
    public int BatchSizeLimit { get; public set; }
    public TimeSpan BufferingTimeLimit { get; public set; }
    public Nullable`1<int> QueueLimit { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EagerlyEmitFirstEvent();
    [CompilerGeneratedAttribute]
public void set_EagerlyEmitFirstEvent(bool value);
    [CompilerGeneratedAttribute]
public int get_BatchSizeLimit();
    [CompilerGeneratedAttribute]
public void set_BatchSizeLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BufferingTimeLimit();
    [CompilerGeneratedAttribute]
public void set_BufferingTimeLimit(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_QueueLimit();
    [CompilerGeneratedAttribute]
public void set_QueueLimit(Nullable`1<int> value);
}
[NullableContextAttribute("1")]
public interface Serilog.Configuration.ILoggerSettings {
    public abstract virtual void Configure(LoggerConfiguration loggerConfiguration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Configuration.LoggerAuditSinkConfiguration : object {
    private LoggerSinkConfiguration _sinkConfiguration;
    internal LoggerAuditSinkConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventSink> addSink);
    public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Sink(LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Logger(Action`1<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Logger(ILogger logger, LogEventLevel restrictedToMinimumLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Configuration.LoggerDestructuringConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<Type> _addScalar;
    private Action`1<Type> _addDictionaryType;
    private Action`1<IDestructuringPolicy> _addPolicy;
    private Action`1<int> _setMaximumDepth;
    private Action`1<int> _setMaximumStringLength;
    private Action`1<int> _setMaximumCollectionCount;
    internal LoggerDestructuringConfiguration(LoggerConfiguration loggerConfiguration, Action`1<Type> addScalar, Action`1<Type> addDictionaryType, Action`1<IDestructuringPolicy> addPolicy, Action`1<int> setMaximumDepth, Action`1<int> setMaximumStringLength, Action`1<int> setMaximumCollectionCount);
    public LoggerConfiguration AsScalar(Type scalarType);
    public LoggerConfiguration AsScalar();
    public LoggerConfiguration With(IDestructuringPolicy[] destructuringPolicies);
    public LoggerConfiguration With();
    public LoggerConfiguration AsDictionary();
    public LoggerConfiguration ByTransforming(Func`2<TValue, object> transformation);
    public LoggerConfiguration ByTransformingWhere(Func`2<Type, bool> predicate, Func`2<TValue, object> transformation);
    public LoggerConfiguration ToMaximumDepth(int maximumDestructuringDepth);
    public LoggerConfiguration ToMaximumStringLength(int maximumStringLength);
    public LoggerConfiguration ToMaximumCollectionCount(int maximumCollectionCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Configuration.LoggerEnrichmentConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<ILogEventEnricher> _addEnricher;
    internal LoggerEnrichmentConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventEnricher> addEnricher);
    public LoggerConfiguration With(ILogEventEnricher[] enrichers);
    public LoggerConfiguration With();
    public LoggerConfiguration WithProperty(string name, object value, bool destructureObjects);
    public LoggerConfiguration FromLogContext();
    public LoggerConfiguration When(Func`2<LogEvent, bool> condition, Action`1<LoggerEnrichmentConfiguration> configureEnricher);
    public LoggerConfiguration AtLevel(LogEventLevel enrichFromLevel, Action`1<LoggerEnrichmentConfiguration> configureEnricher);
    public LoggerConfiguration AtLevel(LoggingLevelSwitch levelSwitch, Action`1<LoggerEnrichmentConfiguration> configureEnricher);
    public static LoggerConfiguration Wrap(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, Func`2<ILogEventEnricher, ILogEventEnricher> wrapEnricher, Action`1<LoggerEnrichmentConfiguration> configureWrappedEnricher);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Configuration.LoggerFilterConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<ILogEventFilter> _addFilter;
    internal LoggerFilterConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventFilter> addFilter);
    public LoggerConfiguration With(ILogEventFilter[] filters);
    public LoggerConfiguration With();
    public LoggerConfiguration ByExcluding(Func`2<LogEvent, bool> exclusionPredicate);
    public LoggerConfiguration ByIncludingOnly(Func`2<LogEvent, bool> inclusionPredicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Configuration.LoggerMinimumLevelConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<LogEventLevel> _setMinimum;
    private Action`1<LoggingLevelSwitch> _setLevelSwitch;
    private Action`2<string, LoggingLevelSwitch> _addOverride;
    internal LoggerMinimumLevelConfiguration(LoggerConfiguration loggerConfiguration, Action`1<LogEventLevel> setMinimum, Action`1<LoggingLevelSwitch> setLevelSwitch, Action`2<string, LoggingLevelSwitch> addOverride);
    public LoggerConfiguration Is(LogEventLevel minimumLevel);
    public LoggerConfiguration ControlledBy(LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Verbose();
    public LoggerConfiguration Debug();
    public LoggerConfiguration Information();
    public LoggerConfiguration Warning();
    public LoggerConfiguration Error();
    public LoggerConfiguration Fatal();
    public LoggerConfiguration Override(string source, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Override(string source, LogEventLevel minimumLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Configuration.LoggerSettingsConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    internal LoggerSettingsConfiguration(LoggerConfiguration loggerConfiguration);
    public LoggerConfiguration Settings(ILoggerSettings settings);
    public LoggerConfiguration KeyValuePairs(IEnumerable`1<KeyValuePair`2<string, string>> settings);
    private LoggerConfiguration KeyValuePairs(IReadOnlyDictionary`2<string, string> settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Configuration.LoggerSinkConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<ILogEventSink> _addSink;
    internal LoggerSinkConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventSink> addSink);
    [EditorBrowsableAttribute("1")]
public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel);
    public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Sink(LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Sink(IBatchedLogEventSink batchedLogEventSink, BatchingOptions batchingOptions, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Sink(BatchingOptions batchingOptions, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Logger(Action`1<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    [EditorBrowsableAttribute("1")]
public LoggerConfiguration Logger(ILogger logger, LogEventLevel restrictedToMinimumLevel);
    public LoggerConfiguration Logger(ILogger logger, bool attemptDispose, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Conditional(Func`2<LogEvent, bool> condition, Action`1<LoggerSinkConfiguration> configureSink);
    [ObsoleteAttribute("Use the two-argument `Wrap()` overload to construct a wrapper, then use `WriteTo.Sink()` to add it to the configuration.")]
public static LoggerConfiguration Wrap(LoggerSinkConfiguration loggerSinkConfiguration, Func`2<ILogEventSink, ILogEventSink> wrapSink, Action`1<LoggerSinkConfiguration> configureWrappedSink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public static ILogEventSink Wrap(Func`2<ILogEventSink, ILogEventSink> wrapSink, Action`1<LoggerSinkConfiguration> configureWrappedSink);
    public static ILogEventSink CreateSink(Action`1<LoggerSinkConfiguration> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Context.EnricherStack : object {
    [NullableAttribute("2")]
private EnricherStack _under;
    [NullableAttribute("2")]
private ILogEventEnricher _top;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private static EnricherStack <Empty>k__BackingField;
    public int Count { get; }
    public static EnricherStack Empty { get; }
    public bool IsEmpty { get; }
    public ILogEventEnricher Top { get; }
    private EnricherStack(EnricherStack under, ILogEventEnricher top);
    private static EnricherStack();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ILogEventEnricher> System.Collections.Generic.IEnumerable<Serilog.Core.ILogEventEnricher>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public static EnricherStack get_Empty();
    public bool get_IsEmpty();
    public EnricherStack Push(ILogEventEnricher t);
    public ILogEventEnricher get_Top();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Serilog.Context.LogContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<EnricherStack> Data;
    [NullableAttribute("2")]
private static EnricherStack Enrichers { get; private set; }
    private static LogContext();
    public static IDisposable PushProperty(string name, object value, bool destructureObjects);
    public static IDisposable Push(ILogEventEnricher enricher);
    public static IDisposable Push(ILogEventEnricher[] enrichers);
    public static ILogEventEnricher Clone();
    public static IDisposable Suspend();
    public static void Reset();
    private static EnricherStack GetOrCreateEnricherStack();
    internal static void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
    [NullableContextAttribute("2")]
private static EnricherStack get_Enrichers();
    [NullableContextAttribute("2")]
private static void set_Enrichers(EnricherStack value);
}
internal class Serilog.Context.LogContextEnricher : object {
    [NullableContextAttribute("1")]
public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public static class Serilog.Core.Constants : object {
    [NullableAttribute("1")]
public static string SourceContextPropertyName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Enrichers.ConditionalEnricher : object {
    private ILogEventEnricher _wrapped;
    private Func`2<LogEvent, bool> _condition;
    public ConditionalEnricher(ILogEventEnricher wrapped, Func`2<LogEvent, bool> condition);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
    public sealed virtual void Dispose();
}
internal class Serilog.Core.Enrichers.EmptyEnricher : object {
    [NullableContextAttribute("1")]
public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Serilog.Core.Enrichers.FixedPropertyEnricher : object {
    private EventProperty _eventProperty;
    public FixedPropertyEnricher(EventProperty& eventProperty);
    [NullableContextAttribute("1")]
public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Core.Enrichers.PropertyEnricher : object {
    private string _name;
    [NullableAttribute("2")]
private object _value;
    private bool _destructureObjects;
    public PropertyEnricher(string name, object value, bool destructureObjects);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Enrichers.SafeAggregateEnricher : object {
    private ILogEventEnricher[] _enrichers;
    public SafeAggregateEnricher(IEnumerable`1<ILogEventEnricher> enrichers);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Filters.DelegateFilter : object {
    private Func`2<LogEvent, bool> _isEnabled;
    public DelegateFilter(Func`2<LogEvent, bool> isEnabled);
    public sealed virtual bool IsEnabled(LogEvent logEvent);
}
[NullableContextAttribute("1")]
public interface Serilog.Core.IBatchedLogEventSink {
    public abstract virtual Task EmitBatchAsync(IReadOnlyCollection`1<LogEvent> batch);
    public abstract virtual Task OnEmptyBatchAsync();
}
[NullableContextAttribute("1")]
public interface Serilog.Core.IDestructuringPolicy {
    public abstract virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
[NullableContextAttribute("1")]
public interface Serilog.Core.ILogEventEnricher {
    public abstract virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
[NullableContextAttribute("1")]
public interface Serilog.Core.ILogEventFilter {
    public abstract virtual bool IsEnabled(LogEvent logEvent);
}
[NullableContextAttribute("1")]
public interface Serilog.Core.ILogEventPropertyFactory {
    public abstract virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
}
[NullableContextAttribute("1")]
public interface Serilog.Core.ILogEventPropertyValueFactory {
    public abstract virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
}
[NullableContextAttribute("1")]
public interface Serilog.Core.ILogEventSink {
    public abstract virtual void Emit(LogEvent logEvent);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.IMessageTemplateParser {
    public abstract virtual MessageTemplate Parse(string messageTemplate);
}
[NullableContextAttribute("1")]
internal interface Serilog.Core.IScalarConversionPolicy {
    public abstract virtual bool TryConvertToScalar(object value, ScalarValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.LevelOverrideMap : object {
    private LogEventLevel _defaultMinimumLevel;
    [NullableAttribute("2")]
private LoggingLevelSwitch _defaultLevelSwitch;
    private LevelOverride[] _overrides;
    public LevelOverrideMap(IDictionary`2<string, LoggingLevelSwitch> overrides, LogEventLevel defaultMinimumLevel, LoggingLevelSwitch defaultLevelSwitch);
    public void GetEffectiveLevel(string context, LogEventLevel& minimumLevel, LoggingLevelSwitch& levelSwitch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Core.Logger : object {
    private static Object[] NoPropertyValues;
    private static LogEventProperty[] NoProperties;
    private MessageTemplateProcessor _messageTemplateProcessor;
    private ILogEventSink _sink;
    [NullableAttribute("2")]
private Action _dispose;
    private ILogEventEnricher _enricher;
    private LogEventLevel _minimumLevel;
    [NullableAttribute("2")]
private LoggingLevelSwitch _levelSwitch;
    [NullableAttribute("2")]
private LevelOverrideMap _overrideMap;
    [CompilerGeneratedAttribute]
private static ILogger <None>k__BackingField;
    internal bool HasOverrideMap { get; }
    public static ILogger None { get; }
    internal Logger(MessageTemplateProcessor messageTemplateProcessor, LogEventLevel minimumLevel, LoggingLevelSwitch levelSwitch, ILogEventSink sink, ILogEventEnricher enricher, Action dispose, LevelOverrideMap overrideMap);
    private static Logger();
    internal bool get_HasOverrideMap();
    public sealed virtual ILogger ForContext(ILogEventEnricher enricher);
    public sealed virtual ILogger ForContext(IEnumerable`1<ILogEventEnricher> enrichers);
    public sealed virtual ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public sealed virtual ILogger ForContext(Type source);
    public sealed virtual ILogger ForContext();
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    public sealed virtual bool IsEnabled(LogEventLevel level);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Write(LogEvent logEvent);
    private sealed virtual override void Serilog.Core.ILogEventSink.Emit(LogEvent logEvent);
    private void Dispatch(LogEvent logEvent);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    [NullableContextAttribute("2")]
public sealed virtual bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public static ILogger get_None();
}
public class Serilog.Core.LoggingLevelSwitch : object {
    private LogEventLevel modreq(System.Runtime.CompilerServices.IsVolatile) _minimumLevel;
    [NullableAttribute("1")]
private object _levelUpdateLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<LoggingLevelSwitchChangedEventArgs> MinimumLevelChanged;
    public LogEventLevel MinimumLevel { get; public set; }
    public LoggingLevelSwitch(LogEventLevel initialMinimumLevel);
    [CompilerGeneratedAttribute]
public void add_MinimumLevelChanged(EventHandler`1<LoggingLevelSwitchChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MinimumLevelChanged(EventHandler`1<LoggingLevelSwitchChangedEventArgs> value);
    public LogEventLevel get_MinimumLevel();
    public void set_MinimumLevel(LogEventLevel value);
}
public class Serilog.Core.LoggingLevelSwitchChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private LogEventLevel <OldLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventLevel <NewLevel>k__BackingField;
    public LogEventLevel OldLevel { get; }
    public LogEventLevel NewLevel { get; }
    public LoggingLevelSwitchChangedEventArgs(LogEventLevel oldLevel, LogEventLevel newLevel);
    [CompilerGeneratedAttribute]
public LogEventLevel get_OldLevel();
    [CompilerGeneratedAttribute]
public LogEventLevel get_NewLevel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("96")]
public class Serilog.Core.MessageTemplateFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MessageTemplateParameterName>k__BackingField;
    public string MessageTemplateParameterName { get; private set; }
    public MessageTemplateFormatMethodAttribute(string messageTemplateParameterName);
    [CompilerGeneratedAttribute]
public string get_MessageTemplateParameterName();
    [CompilerGeneratedAttribute]
private void set_MessageTemplateParameterName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Pipeline.ByReferenceStringComparer : object {
    public static ByReferenceStringComparer Instance;
    private static ByReferenceStringComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Pipeline.MessageTemplateCache : object {
    private IMessageTemplateParser _innerParser;
    private object _templatesLock;
    private Hashtable _templates;
    private static int MaxCacheItems;
    private static int MaxCachedTemplateLength;
    public MessageTemplateCache(IMessageTemplateParser innerParser);
    public sealed virtual MessageTemplate Parse(string messageTemplate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Pipeline.SilentLogger : object {
    public sealed virtual ILogger ForContext(ILogEventEnricher enricher);
    public sealed virtual ILogger ForContext(IEnumerable`1<ILogEventEnricher> enrichers);
    public sealed virtual ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public sealed virtual ILogger ForContext();
    public sealed virtual ILogger ForContext(Type source);
    public sealed virtual void Write(LogEvent logEvent);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual bool IsEnabled(LogEventLevel level);
    public sealed virtual void Verbose(string messageTemplate);
    public sealed virtual void Verbose(string messageTemplate, T propertyValue);
    public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Verbose(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Verbose(Exception exception, string messageTemplate);
    public sealed virtual void Verbose(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Debug(string messageTemplate);
    public sealed virtual void Debug(string messageTemplate, T propertyValue);
    public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Debug(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Debug(Exception exception, string messageTemplate);
    public sealed virtual void Debug(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
public sealed virtual void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Information(string messageTemplate);
    public sealed virtual void Information(string messageTemplate, T propertyValue);
    public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Information(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Information(Exception exception, string messageTemplate);
    public sealed virtual void Information(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
public sealed virtual void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Warning(string messageTemplate);
    public sealed virtual void Warning(string messageTemplate, T propertyValue);
    public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Warning(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Warning(Exception exception, string messageTemplate);
    public sealed virtual void Warning(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
public sealed virtual void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(string messageTemplate);
    public sealed virtual void Error(string messageTemplate, T propertyValue);
    public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Error(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(Exception exception, string messageTemplate);
    public sealed virtual void Error(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
public sealed virtual void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Fatal(string messageTemplate);
    public sealed virtual void Fatal(string messageTemplate, T propertyValue);
    public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Fatal(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Fatal(Exception exception, string messageTemplate);
    public sealed virtual void Fatal(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    [NullableContextAttribute("2")]
public sealed virtual bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Sinks.AggregateSink : object {
    private ILogEventSink[] _sinks;
    public AggregateSink(IEnumerable`1<ILogEventSink> sinks);
    public sealed virtual void Emit(LogEvent logEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Sinks.Batching.BatchingSink : object {
    private Channel`1<LogEvent> _queue;
    private object _stateLock;
    private CancellationTokenSource _shutdownSignal;
    private Task _runLoop;
    private IBatchedLogEventSink _targetSink;
    private int _batchSizeLimit;
    private bool _eagerlyEmitFirstEvent;
    private FailureAwareBatchScheduler _batchScheduler;
    private Queue`1<LogEvent> _currentBatch;
    private Task _waitForShutdownSignal;
    [NullableAttribute("2")]
private Task`1<bool> _cachedWaitToRead;
    public BatchingSink(IBatchedLogEventSink batchedSink, BatchingOptions options);
    public sealed virtual void Emit(LogEvent logEvent);
    [AsyncStateMachineAttribute("Serilog.Core.Sinks.Batching.BatchingSink/<LoopAsync>d__13")]
private Task LoopAsync();
    [AsyncStateMachineAttribute("Serilog.Core.Sinks.Batching.BatchingSink/<TryWaitToReadAsync>d__14")]
private Task`1<bool> TryWaitToReadAsync(ChannelReader`1<LogEvent> reader, Task timeout, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private void SignalShutdown();
    private void WriteToSelfLog(string message, Exception exception);
}
internal class Serilog.Core.Sinks.Batching.FailureAwareBatchScheduler : object {
    private static TimeSpan MinimumBackoffPeriod;
    private static TimeSpan MaximumBackoffInterval;
    private static int FailuresBeforeDroppingBatch;
    private static int FailuresBeforeDroppingQueue;
    private TimeSpan _period;
    private int _failuresSinceSuccessfulBatch;
    public TimeSpan NextInterval { get; }
    public bool ShouldDropBatch { get; }
    public bool ShouldDropQueue { get; }
    public FailureAwareBatchScheduler(TimeSpan period);
    private static FailureAwareBatchScheduler();
    public void MarkSuccess();
    public void MarkFailure();
    public TimeSpan get_NextInterval();
    public bool get_ShouldDropBatch();
    public bool get_ShouldDropQueue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Sinks.ConditionalSink : object {
    private ILogEventSink _wrapped;
    private Func`2<LogEvent, bool> _condition;
    public ConditionalSink(ILogEventSink wrapped, Func`2<LogEvent, bool> condition);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
}
internal class Serilog.Core.Sinks.DisposeDelegatingSink : object {
    [NullableAttribute("1")]
private ILogEventSink _sink;
    [NullableAttribute("2")]
private IDisposable _disposable;
    [NullableContextAttribute("1")]
public DisposeDelegatingSink(ILogEventSink sink, IDisposable disposable);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual void Emit(LogEvent logEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Sinks.DisposingAggregateSink : object {
    private ILogEventSink[] _sinks;
    public DisposingAggregateSink(IEnumerable`1<ILogEventSink> sinks);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    private static void ReportDisposingException(ILogEventSink sink, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Sinks.FilteringSink : object {
    private ILogEventSink _sink;
    private bool _propagateExceptions;
    private ILogEventFilter[] _filters;
    public FilteringSink(ILogEventSink sink, IEnumerable`1<ILogEventFilter> filters, bool propagateExceptions);
    public sealed virtual void Emit(LogEvent logEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Sinks.RestrictedSink : object {
    private ILogEventSink _sink;
    private LoggingLevelSwitch _levelSwitch;
    public RestrictedSink(ILogEventSink sink, LoggingLevelSwitch levelSwitch);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Core.Sinks.SafeAggregateSink : object {
    private ILogEventSink[] _sinks;
    public SafeAggregateSink(IEnumerable`1<ILogEventSink> sinks);
    public sealed virtual void Emit(LogEvent logEvent);
}
internal class Serilog.Core.Sinks.SecondaryLoggerSink : object {
    [NullableAttribute("1")]
private ILogger _logger;
    private bool _attemptDispose;
    [NullableContextAttribute("1")]
public SecondaryLoggerSink(ILogger logger, bool attemptDispose);
    [NullableContextAttribute("1")]
public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Serilog.Data.LogEventPropertyValueRewriter`1 : LogEventPropertyValueVisitor`2<TState, LogEventPropertyValue> {
    protected virtual LogEventPropertyValue VisitScalarValue(TState state, ScalarValue scalar);
    protected virtual LogEventPropertyValue VisitSequenceValue(TState state, SequenceValue sequence);
    protected virtual LogEventPropertyValue VisitStructureValue(TState state, StructureValue structure);
    protected virtual LogEventPropertyValue VisitDictionaryValue(TState state, DictionaryValue dictionary);
    protected virtual LogEventPropertyValue VisitUnsupportedValue(TState state, LogEventPropertyValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Serilog.Data.LogEventPropertyValueVisitor`2 : object {
    protected virtual TResult Visit(TState state, LogEventPropertyValue value);
    protected abstract virtual TResult VisitScalarValue(TState state, ScalarValue scalar);
    protected abstract virtual TResult VisitSequenceValue(TState state, SequenceValue sequence);
    protected abstract virtual TResult VisitStructureValue(TState state, StructureValue structure);
    protected abstract virtual TResult VisitDictionaryValue(TState state, DictionaryValue dictionary);
    protected virtual TResult VisitUnsupportedValue(TState state, LogEventPropertyValue value);
}
public class Serilog.Debugging.LoggingFailedException : Exception {
    [NullableContextAttribute("1")]
public LoggingFailedException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Serilog.Debugging.SelfLog : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`1<string> _output;
    public static void Enable(TextWriter output);
    public static void Enable(Action`1<string> output);
    public static void Disable();
    [NullableContextAttribute("2")]
public static void WriteLine(string format, object arg0, object arg1, object arg2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Events.DictionaryValue : LogEventPropertyValue {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> <Elements>k__BackingField;
    public IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> Elements { get; }
    public DictionaryValue(IEnumerable`1<KeyValuePair`2<ScalarValue, LogEventPropertyValue>> elements);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> get_Elements();
    [NullableContextAttribute("2")]
public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Serilog.Events.EventProperty : ValueType {
    public static EventProperty None;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventPropertyValue <Value>k__BackingField;
    public string Name { get; }
    public LogEventPropertyValue Value { get; }
    public EventProperty(string name, LogEventPropertyValue value);
    private static EventProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public LogEventPropertyValue get_Value();
    public void Deconstruct(String& name, LogEventPropertyValue& value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public bool Equals(EventProperty other);
    public virtual int GetHashCode();
}
public static class Serilog.Events.LevelAlias : object {
    public static LogEventLevel Minimum;
    public static LogEventLevel Maximum;
    public static LogEventLevel Off;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Events.LogEvent : object {
    private Dictionary`2<string, LogEventPropertyValue> _properties;
    private ActivityTraceId _traceId;
    private ActivitySpanId _spanId;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageTemplate <MessageTemplate>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public DateTimeOffset Timestamp { get; }
    public LogEventLevel Level { get; }
    [CLSCompliantAttribute("False")]
public Nullable`1<ActivityTraceId> TraceId { get; }
    [CLSCompliantAttribute("False")]
public Nullable`1<ActivitySpanId> SpanId { get; }
    public MessageTemplate MessageTemplate { get; }
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> Properties { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    private LogEvent(DateTimeOffset timestamp, LogEventLevel level, Exception exception, MessageTemplate messageTemplate, Dictionary`2<string, LogEventPropertyValue> properties, ActivityTraceId traceId, ActivitySpanId spanId);
    public LogEvent(DateTimeOffset timestamp, LogEventLevel level, Exception exception, MessageTemplate messageTemplate, IEnumerable`1<LogEventProperty> properties);
    [CLSCompliantAttribute("False")]
public LogEvent(DateTimeOffset timestamp, LogEventLevel level, Exception exception, MessageTemplate messageTemplate, IEnumerable`1<LogEventProperty> properties, ActivityTraceId traceId, ActivitySpanId spanId);
    internal LogEvent(DateTimeOffset timestamp, LogEventLevel level, Exception exception, MessageTemplate messageTemplate, EventProperty[] properties, ActivityTraceId traceId, ActivitySpanId spanId);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public LogEventLevel get_Level();
    public Nullable`1<ActivityTraceId> get_TraceId();
    public Nullable`1<ActivitySpanId> get_SpanId();
    [CompilerGeneratedAttribute]
public MessageTemplate get_MessageTemplate();
    public void RenderMessage(TextWriter output, IFormatProvider formatProvider);
    public string RenderMessage(IFormatProvider formatProvider);
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> get_Properties();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    public void AddOrUpdateProperty(LogEventProperty property);
    internal void AddOrUpdateProperty(EventProperty& property);
    public void AddPropertyIfAbsent(LogEventProperty property);
    internal void AddPropertyIfAbsent(EventProperty& property);
    internal void AddPropertyIfAbsent(ILogEventPropertyFactory factory, string name, object value, bool destructureObjects);
    public void RemovePropertyIfPresent(string propertyName);
    [CLSCompliantAttribute("False")]
public static LogEvent UnstableAssembleFromParts(DateTimeOffset timestamp, LogEventLevel level, Exception exception, MessageTemplate messageTemplate, Dictionary`2<string, LogEventPropertyValue> properties, ActivityTraceId traceId, ActivitySpanId spanId);
    internal LogEvent Copy();
}
public enum Serilog.Events.LogEventLevel : Enum {
    public int value__;
    public static LogEventLevel Verbose;
    public static LogEventLevel Debug;
    public static LogEventLevel Information;
    public static LogEventLevel Warning;
    public static LogEventLevel Error;
    public static LogEventLevel Fatal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Events.LogEventProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventPropertyValue <Value>k__BackingField;
    public string Name { get; }
    public LogEventPropertyValue Value { get; }
    public LogEventProperty(string name, LogEventPropertyValue value);
    internal LogEventProperty(EventProperty property);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public LogEventPropertyValue get_Value();
    [NullableContextAttribute("2")]
public static bool IsValidName(string name);
    internal static void EnsureValidName(string name);
}
public abstract class Serilog.Events.LogEventPropertyValue : object {
    [NullableContextAttribute("2")]
public abstract virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Events.MessageTemplate : object {
    [CompilerGeneratedAttribute]
private static MessageTemplate <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageTemplateToken[] <TokenArray>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PropertyToken[] <NamedProperties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PropertyToken[] <PositionalProperties>k__BackingField;
    public static MessageTemplate Empty { get; }
    public string Text { get; }
    public IEnumerable`1<MessageTemplateToken> Tokens { get; }
    internal MessageTemplateToken[] TokenArray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal PropertyToken[] NamedProperties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal PropertyToken[] PositionalProperties { get; }
    public MessageTemplate(IEnumerable`1<MessageTemplateToken> tokens);
    public MessageTemplate(string text, IEnumerable`1<MessageTemplateToken> tokens);
    private static MessageTemplate();
    [CompilerGeneratedAttribute]
public static MessageTemplate get_Empty();
    private static TResult[] GetElementsOfTypeToArray(MessageTemplateToken[] tokens);
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual string ToString();
    public IEnumerable`1<MessageTemplateToken> get_Tokens();
    [CompilerGeneratedAttribute]
internal MessageTemplateToken[] get_TokenArray();
    [CompilerGeneratedAttribute]
internal PropertyToken[] get_NamedProperties();
    [CompilerGeneratedAttribute]
internal PropertyToken[] get_PositionalProperties();
    public string Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, IFormatProvider formatProvider);
    public void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Serilog.Events.ScalarValue : LogEventPropertyValue {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static ScalarValue <Null>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [NullableAttribute("1")]
public static ScalarValue Null { get; }
    public object Value { get; }
    public ScalarValue(object value);
    private static ScalarValue();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ScalarValue get_Null();
    [CompilerGeneratedAttribute]
public object get_Value();
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    internal static void Render(object value, TextWriter output, string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Events.SequenceValue : LogEventPropertyValue {
    private LogEventPropertyValue[] _elements;
    [CompilerGeneratedAttribute]
private static SequenceValue <Empty>k__BackingField;
    public static SequenceValue Empty { get; }
    public IReadOnlyList`1<LogEventPropertyValue> Elements { get; }
    public SequenceValue(IEnumerable`1<LogEventPropertyValue> elements);
    internal SequenceValue(LogEventPropertyValue[] elements);
    private static SequenceValue();
    [CompilerGeneratedAttribute]
public static SequenceValue get_Empty();
    public IReadOnlyList`1<LogEventPropertyValue> get_Elements();
    [NullableContextAttribute("2")]
public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Events.StructureValue : LogEventPropertyValue {
    private LogEventProperty[] _properties;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TypeTag>k__BackingField;
    [NullableAttribute("2")]
public string TypeTag { get; }
    public IReadOnlyList`1<LogEventProperty> Properties { get; }
    public StructureValue(IEnumerable`1<LogEventProperty> properties, string typeTag);
    internal StructureValue(LogEventProperty[] properties, string typeTag);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TypeTag();
    public IReadOnlyList`1<LogEventProperty> get_Properties();
    [NullableContextAttribute("2")]
public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    private static void Render(TextWriter output, LogEventProperty property, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Serilog.Filters.Matching : object {
    public static Func`2<LogEvent, bool> FromSource();
    public static Func`2<LogEvent, bool> FromSource(string source);
    public static Func`2<LogEvent, bool> WithProperty(string propertyName);
    public static Func`2<LogEvent, bool> WithProperty(string propertyName, object scalarValue);
    public static Func`2<LogEvent, bool> WithProperty(string propertyName, Func`2<TScalar, bool> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Formatting.Display.LevelOutputFormat : object {
    private static String[][] _titleCaseLevelMap;
    private static String[][] _lowerCaseLevelMap;
    private static String[][] _upperCaseLevelMap;
    private static LevelOutputFormat();
    public static string GetLevelMoniker(LogEventLevel value, string format);
    private static string GetLevelMoniker(String[][] caseLevelMap, LogEventLevel level, int width);
    private static string GetLevelMoniker(String[][] caseLevelMap, LogEventLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Formatting.Display.MessageTemplateTextFormatter : object {
    [NullableAttribute("2")]
private IFormatProvider _formatProvider;
    private MessageTemplate _outputTemplate;
    public MessageTemplateTextFormatter(string outputTemplate, IFormatProvider formatProvider);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Serilog.Formatting.Display.OutputProperties : object {
    public static string MessagePropertyName;
    public static string TimestampPropertyName;
    public static string UtcTimestampPropertyName;
    public static string LevelPropertyName;
    public static string TraceIdPropertyName;
    public static string SpanIdPropertyName;
    public static string NewLinePropertyName;
    public static string ExceptionPropertyName;
    public static string PropertiesPropertyName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Formatting.Display.PropertiesOutputFormat : object {
    private static JsonValueFormatter JsonValueFormatter;
    private static PropertiesOutputFormat();
    public static void Render(MessageTemplate template, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, MessageTemplate outputTemplate, TextWriter output, string format, IFormatProvider formatProvider);
    private static bool TemplateContainsPropertyName(MessageTemplate template, string propertyName);
}
[NullableContextAttribute("1")]
public interface Serilog.Formatting.ITextFormatter {
    public abstract virtual void Format(LogEvent logEvent, TextWriter output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Formatting.Json.JsonFormatter : object {
    private string _closingDelimiter;
    private bool _renderMessage;
    [NullableAttribute("2")]
private IFormatProvider _formatProvider;
    private JsonValueFormatter _jsonValueFormatter;
    [NullableContextAttribute("2")]
public JsonFormatter(string closingDelimiter, bool renderMessage, IFormatProvider formatProvider);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void WriteRenderingsValues(IEnumerable`1<IGrouping`2<string, PropertyToken>> tokensWithFormat, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    [CompilerGeneratedAttribute]
internal static void <WriteRenderingsValues>g__WriteNameValuePair|6_0(string name, string value, Nullable`1& precedingDelimiter, TextWriter output);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Serilog.Formatting.Json.JsonValueFormatter : LogEventPropertyValueVisitor`2<TextWriter, bool> {
    [NullableAttribute("2")]
private string _typeTagName;
    private static string DefaultTypeTagName;
    [NullableContextAttribute("2")]
public JsonValueFormatter(string typeTagName);
    public void Format(LogEventPropertyValue value, TextWriter output);
    protected virtual bool VisitScalarValue(TextWriter state, ScalarValue scalar);
    protected virtual bool VisitSequenceValue(TextWriter state, SequenceValue sequence);
    protected virtual bool VisitStructureValue(TextWriter state, StructureValue structure);
    protected virtual bool VisitDictionaryValue(TextWriter state, DictionaryValue dictionary);
    protected virtual void FormatLiteralValue(object value, TextWriter output);
    private static void FormatBooleanValue(bool value, TextWriter output);
    private static void FormatFloatValue(float value, TextWriter output);
    private static void FormatDoubleValue(double value, TextWriter output);
    private static void FormatExactNumericValue(int value, TextWriter output);
    private static void FormatExactNumericValue(UInt32 value, TextWriter output);
    private static void FormatExactNumericValue(long value, TextWriter output);
    private static void FormatExactNumericValue(ulong value, TextWriter output);
    private static void FormatExactNumericValue(decimal value, TextWriter output);
    private static void FormatExactNumericValue(byte value, TextWriter output);
    private static void FormatExactNumericValue(sbyte value, TextWriter output);
    private static void FormatExactNumericValue(short value, TextWriter output);
    private static void FormatExactNumericValue(ushort value, TextWriter output);
    private static void FormatDateTimeValue(DateTime value, TextWriter output);
    private static void FormatDateTimeOffsetValue(DateTimeOffset value, TextWriter output);
    private static void FormatTimeSpanValue(TimeSpan value, TextWriter output);
    private static void FormatLiteralObjectValue(object value, TextWriter output);
    private static void FormatStringValue(string str, TextWriter output);
    private static void FormatNullValue(TextWriter output);
    public static void WriteQuotedJsonString(string str, TextWriter output);
}
[NullableContextAttribute("1")]
public interface Serilog.ILogger {
    public abstract virtual ILogger ForContext(ILogEventEnricher enricher);
    public abstract virtual ILogger ForContext(IEnumerable`1<ILogEventEnricher> enrichers);
    public abstract virtual ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public abstract virtual ILogger ForContext();
    public abstract virtual ILogger ForContext(Type source);
    public abstract virtual void Write(LogEvent logEvent);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public abstract virtual bool IsEnabled(LogEventLevel level);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    [NullableContextAttribute("2")]
public abstract virtual bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Serilog.Log : object {
    private static ILogger _logger;
    public static ILogger Logger { get; public set; }
    private static Log();
    public static ILogger get_Logger();
    public static void set_Logger(ILogger value);
    public static void CloseAndFlush();
    public static ILogger ForContext(ILogEventEnricher enricher);
    public static ILogger ForContext(ILogEventEnricher[] enrichers);
    public static ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public static ILogger ForContext();
    public static ILogger ForContext(Type source);
    public static void Write(LogEvent logEvent);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public static bool IsEnabled(LogEventLevel level);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [NullableContextAttribute("2")]
[MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    [NullableContextAttribute("2")]
public static bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.LoggerConfiguration : object {
    private List`1<ILogEventSink> _logEventSinks;
    private List`1<ILogEventSink> _auditSinks;
    private List`1<ILogEventEnricher> _enrichers;
    private List`1<ILogEventFilter> _filters;
    private List`1<Type> _additionalScalarTypes;
    private HashSet`1<Type> _additionalDictionaryTypes;
    private List`1<IDestructuringPolicy> _additionalDestructuringPolicies;
    private Dictionary`2<string, LoggingLevelSwitch> _overrides;
    private LogEventLevel _minimumLevel;
    [NullableAttribute("2")]
private LoggingLevelSwitch _levelSwitch;
    private int _maximumDestructuringDepth;
    private int _maximumStringLength;
    private int _maximumCollectionCount;
    private bool _loggerCreated;
    [CompilerGeneratedAttribute]
private LoggerSinkConfiguration <WriteTo>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggerEnrichmentConfiguration <Enrich>k__BackingField;
    public LoggerSinkConfiguration WriteTo { get; internal set; }
    public LoggerAuditSinkConfiguration AuditTo { get; }
    public LoggerMinimumLevelConfiguration MinimumLevel { get; }
    public LoggerEnrichmentConfiguration Enrich { get; internal set; }
    public LoggerFilterConfiguration Filter { get; }
    public LoggerDestructuringConfiguration Destructure { get; }
    public LoggerSettingsConfiguration ReadFrom { get; }
    [CompilerGeneratedAttribute]
public LoggerSinkConfiguration get_WriteTo();
    [CompilerGeneratedAttribute]
internal void set_WriteTo(LoggerSinkConfiguration value);
    public LoggerAuditSinkConfiguration get_AuditTo();
    public LoggerMinimumLevelConfiguration get_MinimumLevel();
    [CompilerGeneratedAttribute]
public LoggerEnrichmentConfiguration get_Enrich();
    [CompilerGeneratedAttribute]
internal void set_Enrich(LoggerEnrichmentConfiguration value);
    public LoggerFilterConfiguration get_Filter();
    public LoggerDestructuringConfiguration get_Destructure();
    public LoggerSettingsConfiguration get_ReadFrom();
    public Logger CreateLogger();
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(ILogEventSink s);
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_1(ILogEventEnricher e);
    [CompilerGeneratedAttribute]
private void <get_AuditTo>b__20_0(ILogEventSink s);
    [CompilerGeneratedAttribute]
private void <get_MinimumLevel>b__22_0(LogEventLevel l);
    [CompilerGeneratedAttribute]
private void <get_MinimumLevel>b__22_1(LoggingLevelSwitch sw);
    [CompilerGeneratedAttribute]
private void <get_MinimumLevel>b__22_2(string s, LoggingLevelSwitch lls);
    [CompilerGeneratedAttribute]
private void <get_Filter>b__28_0(ILogEventFilter f);
    [CompilerGeneratedAttribute]
private void <get_Destructure>b__30_0(Type type);
    [CompilerGeneratedAttribute]
private void <get_Destructure>b__30_1(int depth);
    [CompilerGeneratedAttribute]
private void <get_Destructure>b__30_2(int length);
    [CompilerGeneratedAttribute]
private void <get_Destructure>b__30_3(int count);
}
[ExtensionAttribute]
public static class Serilog.LoggerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILogger ForContext(ILogger logger, LogEventLevel level, string propertyName, TValue value, bool destructureObjects);
}
[IsReadOnlyAttribute]
public class Serilog.Parsing.Alignment : ValueType {
    [CompilerGeneratedAttribute]
private AlignmentDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    public AlignmentDirection Direction { get; }
    public int Width { get; }
    public Alignment(AlignmentDirection direction, int width);
    [CompilerGeneratedAttribute]
public AlignmentDirection get_Direction();
    [CompilerGeneratedAttribute]
public int get_Width();
}
public enum Serilog.Parsing.AlignmentDirection : Enum {
    public int value__;
    public static AlignmentDirection Left;
    public static AlignmentDirection Right;
}
public enum Serilog.Parsing.Destructuring : Enum {
    public int value__;
    public static Destructuring Default;
    public static Destructuring Stringify;
    public static Destructuring Destructure;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Parsing.MessageTemplateParser : object {
    private static bool DefaultAcceptDottedPropertyNames;
    private static TextToken EmptyTextToken;
    private bool _acceptDottedPropertyNames;
    internal MessageTemplateParser(bool acceptDottedPropertyNames);
    private static MessageTemplateParser();
    public sealed virtual MessageTemplate Parse(string messageTemplate);
    [IteratorStateMachineAttribute("Serilog.Parsing.MessageTemplateParser/<Tokenize>d__6")]
private IEnumerable`1<MessageTemplateToken> Tokenize(string messageTemplate);
    private MessageTemplateToken ParsePropertyToken(int startAt, string messageTemplate, Int32& next);
    [NullableContextAttribute("2")]
private static bool TrySplitTagContent(string tagContent, String& propertyNameAndDestructuring, String& format, String& alignment);
    private bool IsValidInPropertyName(char c);
    private static bool TryGetDestructuringHint(char c, Destructuring& destructuring);
    private static bool IsValidInFormat(char c);
    private static TextToken ParseTextToken(int startAt, string messageTemplate, Int32& next);
}
public abstract class Serilog.Parsing.MessageTemplateToken : object {
    public int Length { get; }
    public abstract virtual int get_Length();
    [NullableContextAttribute("1")]
public abstract virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Parsing.PropertyToken : MessageTemplateToken {
    private Nullable`1<int> _position;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Destructuring <Destructuring>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Alignment> <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawText>k__BackingField;
    public int Length { get; }
    public string PropertyName { get; }
    public Destructuring Destructuring { get; }
    [NullableAttribute("2")]
public string Format { get; }
    public Nullable`1<Alignment> Alignment { get; }
    public bool IsPositional { get; }
    internal string RawText { get; }
    public PropertyToken(string propertyName, string rawText, string format, Nullable`1& alignment, Destructuring destructuring);
    public virtual int get_Length();
    public virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public Destructuring get_Destructuring();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<Alignment> get_Alignment();
    public bool get_IsPositional();
    [CompilerGeneratedAttribute]
internal string get_RawText();
    public bool TryGetPositionalValue(Int32& position);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Parsing.TextToken : MessageTemplateToken {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public int Length { get; }
    public string Text { get; }
    public TextToken(string text);
    public virtual int get_Length();
    public virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Text();
}
internal class Serilog.Policies.ByteArrayScalarConversionPolicy : object {
    private static int MaximumByteArrayLength;
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvertToScalar(object value, ScalarValue& result);
}
internal class Serilog.Policies.DelegateDestructuringPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
internal class Serilog.Policies.EnumScalarConversionPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvertToScalar(object value, ScalarValue& result);
}
internal class Serilog.Policies.PrimitiveScalarConversionPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryConvertToScalar(object value, ScalarValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Policies.ProjectedDestructuringPolicy : object {
    private Func`2<Type, bool> _canApply;
    private Func`2<object, object> _projection;
    public ProjectedDestructuringPolicy(Func`2<Type, bool> canApply, Func`2<object, object> projection);
    public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
internal class Serilog.Policies.ReflectionTypesScalarDestructuringPolicy : object {
    [NullableContextAttribute("1")]
public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Policies.SimpleScalarConversionPolicy : object {
    private HashSet`1<Type> _scalarTypes;
    public SimpleScalarConversionPolicy(IEnumerable`1<Type> scalarTypes);
    public sealed virtual bool TryConvertToScalar(object value, ScalarValue& result);
}
internal static class Serilog.Rendering.Casing : object {
    [NullableContextAttribute("1")]
public static string Format(string value, string format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Rendering.MessageTemplateRenderer : object {
    private static JsonValueFormatter JsonValueFormatter;
    private static MessageTemplateRenderer();
    public static void Render(MessageTemplate messageTemplate, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, string format, IFormatProvider formatProvider);
    public static void RenderTextToken(TextToken tt, TextWriter output);
    public static void RenderPropertyToken(PropertyToken pt, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider, bool isLiteral, bool isJson);
    private static void RenderValue(LogEventPropertyValue propertyValue, bool literal, bool json, TextWriter output, string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Rendering.Padding : object {
    private static Char[] PaddingChars;
    private static Padding();
    public static void Apply(TextWriter output, string value, Nullable`1& alignment);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Serilog.Rendering.ReusableStringWriter : StringWriter {
    [ThreadStaticAttribute]
private static ReusableStringWriter _pooledWriter;
    internal static int StringBuilderCapacityThreshold;
    private ReusableStringWriter(IFormatProvider formatProvider);
    [NullableContextAttribute("1")]
public static StringWriter GetOrCreate(IFormatProvider formatProvider);
    protected virtual void Dispose(bool disposing);
}
internal static class Serilog.Settings.KeyValuePairs.CallableConfigurationMethodFinder : object {
    [NullableContextAttribute("1")]
internal static IList`1<MethodInfo> FindConfigurationMethods(IEnumerable`1<Assembly> configurationAssemblies, Type configType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.KeyValuePairs.KeyValuePairSettings : object {
    private static string UsingDirective;
    private static string LevelSwitchDirective;
    private static string AuditToDirective;
    private static string WriteToDirective;
    private static string MinimumLevelDirective;
    private static string MinimumLevelControlledByDirective;
    private static string EnrichWithDirective;
    private static string EnrichWithPropertyDirective;
    private static string FilterDirective;
    private static string DestructureDirective;
    private static string UsingDirectiveFullFormPrefix;
    private static string EnrichWithPropertyDirectivePrefix;
    private static string MinimumLevelOverrideDirectivePrefix;
    private static string CallableDirectiveRegex;
    private static string LevelSwitchDeclarationDirectiveRegex;
    private static string LevelSwitchNameRegex;
    private static String[] _supportedDirectives;
    private static Dictionary`2<string, Type> CallableDirectiveReceiverTypes;
    private static Dictionary`2<Type, Func`2<LoggerConfiguration, object>> CallableDirectiveReceivers;
    private IReadOnlyDictionary`2<string, string> _settings;
    public KeyValuePairSettings(IReadOnlyDictionary`2<string, string> settings);
    private static KeyValuePairSettings();
    public sealed virtual void Configure(LoggerConfiguration loggerConfiguration);
    internal static bool IsValidSwitchName(string input);
    private static IReadOnlyDictionary`2<string, LoggingLevelSwitch> ParseNamedLevelSwitchDeclarationDirectives(IReadOnlyDictionary`2<string, string> directives);
    private static LoggingLevelSwitch LookUpSwitchByName(string switchName, IReadOnlyDictionary`2<string, LoggingLevelSwitch> declaredLevelSwitches);
    private static object ConvertOrLookupByName(string valueOrSwitchName, Type type, IReadOnlyDictionary`2<string, LoggingLevelSwitch> declaredSwitches);
    private static void ApplyDirectives(List`1<IGrouping`2<string, ConfigurationMethodCall>> directives, IList`1<MethodInfo> configurationMethods, object loggerConfigMethod, IReadOnlyDictionary`2<string, LoggingLevelSwitch> declaredSwitches);
    internal static MethodInfo SelectConfigurationMethod(IEnumerable`1<MethodInfo> candidateMethods, string name, IEnumerable`1<ConfigurationMethodCall> suppliedArgumentValues);
    internal static IEnumerable`1<Assembly> LoadConfigurationAssemblies(IReadOnlyDictionary`2<string, string> directives);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Settings.KeyValuePairs.SettingValueConversions : object {
    private static Regex StaticMemberAccessorRegex;
    private static Dictionary`2<Type, Func`2<string, object>> ExtendedTypeConversions;
    private static SettingValueConversions();
    public static object ConvertToType(string value, Type toType);
    [NullableContextAttribute("2")]
internal static bool TryParseStaticMemberAccessor(string input, String& accessorTypeName, String& memberName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Serilog.Settings.KeyValuePairs.SurrogateConfigurationMethods : object {
    private static Dictionary`2<Type, MethodInfo[]> SurrogateMethodCandidates;
    internal static MethodInfo[] WriteTo;
    internal static MethodInfo[] AuditTo;
    internal static MethodInfo[] Enrich;
    internal static MethodInfo[] Destructure;
    internal static MethodInfo[] Filter;
    private static SurrogateConfigurationMethods();
    internal static LoggerConfiguration Sink(LoggerSinkConfiguration loggerSinkConfiguration, ILogEventSink sink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    internal static LoggerConfiguration Sink(LoggerAuditSinkConfiguration auditSinkConfiguration, ILogEventSink sink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    internal static LoggerConfiguration With(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, ILogEventEnricher enricher);
    internal static LoggerConfiguration FromLogContext(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration);
    internal static LoggerConfiguration With(LoggerDestructuringConfiguration loggerDestructuringConfiguration, IDestructuringPolicy policy);
    internal static LoggerConfiguration AsScalar(LoggerDestructuringConfiguration loggerDestructuringConfiguration, Type scalarType);
    internal static LoggerConfiguration ToMaximumCollectionCount(LoggerDestructuringConfiguration loggerDestructuringConfiguration, int maximumCollectionCount);
    internal static LoggerConfiguration ToMaximumDepth(LoggerDestructuringConfiguration loggerDestructuringConfiguration, int maximumDestructuringDepth);
    internal static LoggerConfiguration ToMaximumStringLength(LoggerDestructuringConfiguration loggerDestructuringConfiguration, int maximumStringLength);
    internal static LoggerConfiguration With(LoggerFilterConfiguration loggerFilterConfiguration, ILogEventFilter filter);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("736")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RequiresAssemblyFilesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[AttributeUsageAttribute("108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private string ToStringFromEnd();
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[AttributeUsageAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiresLocationAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices.UnsafeAccessorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private UnsafeAccessorKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public UnsafeAccessorKind Kind { get; }
    public string Name { get; public set; }
    public UnsafeAccessorAttribute(UnsafeAccessorKind kind);
    [CompilerGeneratedAttribute]
public UnsafeAccessorKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal enum System.Runtime.CompilerServices.UnsafeAccessorKind : Enum {
    public int value__;
    public static UnsafeAccessorKind Constructor;
    public static UnsafeAccessorKind Method;
    public static UnsafeAccessorKind StaticMethod;
    public static UnsafeAccessorKind Field;
    public static UnsafeAccessorKind StaticField;
}
[AttributeUsageAttribute("8")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices2.InlineArrayAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; }
    public InlineArrayAttribute(int length);
    [CompilerGeneratedAttribute]
public int get_Length();
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
    [NullableAttribute("2")]
public string EntryPoint;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public TargetPlatformAttribute(string platformName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[AttributeUsageAttribute("448")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformGuardAttribute(string platformName);
}
