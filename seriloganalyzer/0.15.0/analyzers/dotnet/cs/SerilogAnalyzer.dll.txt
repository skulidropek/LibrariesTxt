internal static class SerilogAnalyzer.AnalyzingMessageTemplateParser : object {
    [IteratorStateMachineAttribute("SerilogAnalyzer.AnalyzingMessageTemplateParser/<Analyze>d__0")]
public static IEnumerable`1<MessageTemplateToken> Analyze(string messageTemplate);
    private static MessageTemplateToken ParsePropertyToken(int startAt, string messageTemplate, Int32& next);
    private static bool TrySplitTagContent(string tagContent, String& propertyNameAndDestructuring, String& format, String& alignment, MessageTemplateDiagnostic& diagnostic);
    private static bool IsValidInPropertyTag(char c);
    private static bool IsValidInPropertyName(char c);
    private static bool IsValidInDestructuringHint(char c);
    private static bool IsValidInAlignment(char c);
    private static bool IsValidInFormat(char c);
    private static void ParseTextToken(int startAt, string messageTemplate, Int32& next);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class SerilogAnalyzer.ConvertToMessageTemplateCodeFixProvider : CodeFixProvider {
    private static string title;
    private static string ConversionName;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [AsyncStateMachineAttribute("SerilogAnalyzer.ConvertToMessageTemplateCodeFixProvider/<ConvertStringConcatToMessageTemplateAsync>d__0")]
private Task`1<Document> ConvertStringConcatToMessageTemplateAsync(Document document, ExpressionSyntax stringConcat, InvocationExpressionSyntax logger, CancellationToken cancellationToken);
    private static void GetFormatStringAndExpressionsFromStringConcat(ExpressionSyntax stringConcat, InterpolatedStringExpressionSyntax& format, List`1& expressions);
    private static bool IsForbiddenInVerbatimString(char c);
    private static bool ContainsQuotesOrLineBreaks(string s);
    [AsyncStateMachineAttribute("SerilogAnalyzer.ConvertToMessageTemplateCodeFixProvider/<ConvertInterpolationToMessageTemplateAsync>d__4")]
private Task`1<Document> ConvertInterpolationToMessageTemplateAsync(Document document, InterpolatedStringExpressionSyntax interpolatedString, InvocationExpressionSyntax logger, CancellationToken cancellationToken);
    private static void GetFormatStringAndExpressionsFromInterpolation(InterpolatedStringExpressionSyntax interpolatedString, InterpolatedStringExpressionSyntax& format, List`1& expressions);
    [AsyncStateMachineAttribute("SerilogAnalyzer.ConvertToMessageTemplateCodeFixProvider/<ConvertStringFormatToMessageTemplateAsync>d__6")]
private Task`1<Document> ConvertStringFormatToMessageTemplateAsync(Document document, InvocationExpressionSyntax stringFormat, InvocationExpressionSyntax logger, CancellationToken cancellationToken);
    private static void GetFormatStringAndExpressionsFromStringFormat(InvocationExpressionSyntax stringFormat, InterpolatedStringExpressionSyntax& format, List`1& expressions);
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("SerilogAnalyzer.ConvertToMessageTemplateCodeFixProvider/<RegisterCodeFixesAsync>d__13")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("SerilogAnalyzer.ConvertToMessageTemplateCodeFixProvider/<InlineFormatAndArgumentsIntoLoggerStatementAsync>d__14")]
private static Task`1<Document> InlineFormatAndArgumentsIntoLoggerStatementAsync(Document document, ExpressionSyntax originalTemplateExpression, InvocationExpressionSyntax logger, InterpolatedStringExpressionSyntax format, List`1<ExpressionSyntax> expressions, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <GetFormatStringAndExpressionsFromStringConcat>g__FindExpressions|1_0(ExpressionSyntax exp, <>c__DisplayClass1_0& );
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class SerilogAnalyzer.CorrectLoggerContextCodeFixProvider : CodeFixProvider {
    private static string title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("SerilogAnalyzer.CorrectLoggerContextCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("SerilogAnalyzer.CorrectLoggerContextCodeFixProvider/<UseCorrectType>d__5")]
private Task`1<Solution> UseCorrectType(Document document, TypeSyntax syntax, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class SerilogAnalyzer.DestructuringHintCodeFixProvider : CodeFixProvider {
    private static string title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("SerilogAnalyzer.DestructuringHintCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("SerilogAnalyzer.DestructuringHintCodeFixProvider/<AddDestructuringHint>d__5")]
private Task`1<Solution> AddDestructuringHint(Document document, TextSpan textSpan, CancellationToken cancellationToken);
}
internal class SerilogAnalyzer.ExtensibleMethod : object {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Arguments>k__BackingField;
    public string AssemblyName { get; public set; }
    public string MethodName { get; public set; }
    public Dictionary`2<string, string> Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(Dictionary`2<string, string> value);
}
[ExtensionAttribute]
public static class SerilogAnalyzer.Extensions : object {
    [ExtensionAttribute]
public static string NullWhenWhitespace(string source);
}
internal class SerilogAnalyzer.LoggerConfiguration : object {
    [CompilerGeneratedAttribute]
private string <MinimumLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MinimumLevelOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExtensibleMethod> <WriteTo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExtensibleMethod> <AuditTo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExtensibleMethod> <Enrich>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <EnrichWithProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ErrorLog>k__BackingField;
    public string MinimumLevel { get; public set; }
    public Dictionary`2<string, string> MinimumLevelOverrides { get; public set; }
    public List`1<ExtensibleMethod> WriteTo { get; public set; }
    public List`1<ExtensibleMethod> AuditTo { get; public set; }
    public List`1<ExtensibleMethod> Enrich { get; public set; }
    public Dictionary`2<string, string> EnrichWithProperty { get; public set; }
    public List`1<string> ErrorLog { get; public set; }
    public bool HasParsingErrors { get; }
    [CompilerGeneratedAttribute]
public string get_MinimumLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumLevel(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MinimumLevelOverrides();
    [CompilerGeneratedAttribute]
public void set_MinimumLevelOverrides(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<ExtensibleMethod> get_WriteTo();
    [CompilerGeneratedAttribute]
public void set_WriteTo(List`1<ExtensibleMethod> value);
    [CompilerGeneratedAttribute]
public List`1<ExtensibleMethod> get_AuditTo();
    [CompilerGeneratedAttribute]
public void set_AuditTo(List`1<ExtensibleMethod> value);
    [CompilerGeneratedAttribute]
public List`1<ExtensibleMethod> get_Enrich();
    [CompilerGeneratedAttribute]
public void set_Enrich(List`1<ExtensibleMethod> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_EnrichWithProperty();
    [CompilerGeneratedAttribute]
public void set_EnrichWithProperty(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ErrorLog();
    [CompilerGeneratedAttribute]
public void set_ErrorLog(List`1<string> value);
    public bool get_HasParsingErrors();
    public void AddError(string message, CSharpSyntaxNode syntax);
    public void AddNonConstantError(CSharpSyntaxNode syntax);
    private static string FormatLineSpan(FileLinePositionSpan span);
}
internal class SerilogAnalyzer.MessageTemplateDiagnostic : MessageTemplateToken {
    [CompilerGeneratedAttribute]
private string <Diagnostic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MustBeRemapped>k__BackingField;
    public string Diagnostic { get; public set; }
    public bool MustBeRemapped { get; public set; }
    public MessageTemplateDiagnostic(int startIndex, int length, string diagnostic, bool mustBeRemapped);
    [CompilerGeneratedAttribute]
public string get_Diagnostic();
    [CompilerGeneratedAttribute]
public void set_Diagnostic(string value);
    [CompilerGeneratedAttribute]
public bool get_MustBeRemapped();
    [CompilerGeneratedAttribute]
public void set_MustBeRemapped(bool value);
}
internal abstract class SerilogAnalyzer.MessageTemplateToken : object {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int StartIndex { get; public set; }
    public int Length { get; public set; }
    protected MessageTemplateToken(int startIndex, int length);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
}
internal class SerilogAnalyzer.ObjectDisplay : object {
    private static bool TryReplaceChar(char c, String& replaceWith);
    private static bool NeedsEscaping(UnicodeCategory category);
    public static string FormatLiteral(string value, bool useQuotes, bool escapeNonPrintable);
    private static bool ContainsNewLine(string s);
}
internal static class SerilogAnalyzer.PropertyBindingAnalyzer : object {
    private static List`1<MessageTemplateDiagnostic> NoProperties;
    private static PropertyBindingAnalyzer();
    public static List`1<MessageTemplateDiagnostic> AnalyzeProperties(List`1<PropertyToken> propertyTokens, List`1<SourceArgument> arguments);
    private static void AnalyzePositionalProperties(List`1<MessageTemplateDiagnostic> diagnostics, List`1<PropertyToken> positionalProperties, List`1<SourceArgument> arguments);
    private static void AnalyzeNamedProperties(List`1<MessageTemplateDiagnostic> diagnostics, List`1<PropertyToken> namedProperties, List`1<SourceArgument> arguments);
}
internal class SerilogAnalyzer.PropertyToken : MessageTemplateToken {
    private string _rawText;
    private Nullable`1<int> _position;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public bool IsPositional { get; }
    internal string RawText { get; }
    public PropertyToken(int startIndex, string propertyName, string rawText);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    public bool get_IsPositional();
    internal string get_RawText();
    public bool TryGetPositionalValue(Int32& position);
    public virtual string ToString();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SerilogAnalyzer.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ConstantMessageTemplateAnalyzerDescription { get; }
    internal static string ConstantMessageTemplateAnalyzerMessageFormat { get; }
    internal static string ConstantMessageTemplateAnalyzerTitle { get; }
    internal static string DestructureAnonymousObjectsAnalyzerDescription { get; }
    internal static string DestructureAnonymousObjectsAnalyzerMessageFormat { get; }
    internal static string DestructureAnonymousObjectsAnalyzerTitle { get; }
    internal static string ExceptionAnalyzerDescription { get; }
    internal static string ExceptionAnalyzerMessageFormat { get; }
    internal static string ExceptionAnalyzerTitle { get; }
    internal static string PascalPropertyNameAnalyzerDescription { get; }
    internal static string PascalPropertyNameAnalyzerMessageFormat { get; }
    internal static string PascalPropertyNameAnalyzerTitle { get; }
    internal static string PropertyBindingAnalyzerDescription { get; }
    internal static string PropertyBindingAnalyzerMessageFormat { get; }
    internal static string PropertyBindingAnalyzerTitle { get; }
    internal static string TemplateAnalyzerDescription { get; }
    internal static string TemplateAnalyzerMessageFormat { get; }
    internal static string TemplateAnalyzerTitle { get; }
    internal static string UniquePropertyNameAnalyzerDescription { get; }
    internal static string UniquePropertyNameAnalyzerMessageFormat { get; }
    internal static string UniquePropertyNameAnalyzerTitle { get; }
    internal static string UseCorrectContextualLoggerAnalyzerDescription { get; }
    internal static string UseCorrectContextualLoggerAnalyzerMessageFormat { get; }
    internal static string UseCorrectContextualLoggerAnalyzerTitle { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ConstantMessageTemplateAnalyzerDescription();
    internal static string get_ConstantMessageTemplateAnalyzerMessageFormat();
    internal static string get_ConstantMessageTemplateAnalyzerTitle();
    internal static string get_DestructureAnonymousObjectsAnalyzerDescription();
    internal static string get_DestructureAnonymousObjectsAnalyzerMessageFormat();
    internal static string get_DestructureAnonymousObjectsAnalyzerTitle();
    internal static string get_ExceptionAnalyzerDescription();
    internal static string get_ExceptionAnalyzerMessageFormat();
    internal static string get_ExceptionAnalyzerTitle();
    internal static string get_PascalPropertyNameAnalyzerDescription();
    internal static string get_PascalPropertyNameAnalyzerMessageFormat();
    internal static string get_PascalPropertyNameAnalyzerTitle();
    internal static string get_PropertyBindingAnalyzerDescription();
    internal static string get_PropertyBindingAnalyzerMessageFormat();
    internal static string get_PropertyBindingAnalyzerTitle();
    internal static string get_TemplateAnalyzerDescription();
    internal static string get_TemplateAnalyzerMessageFormat();
    internal static string get_TemplateAnalyzerTitle();
    internal static string get_UniquePropertyNameAnalyzerDescription();
    internal static string get_UniquePropertyNameAnalyzerMessageFormat();
    internal static string get_UniquePropertyNameAnalyzerTitle();
    internal static string get_UseCorrectContextualLoggerAnalyzerDescription();
    internal static string get_UseCorrectContextualLoggerAnalyzerMessageFormat();
    internal static string get_UseCorrectContextualLoggerAnalyzerTitle();
}
[ExtensionAttribute]
internal static class SerilogAnalyzer.RoslynHelper : object {
    private static string DefaultParameterName;
    private static string DefaultBuiltInParameterName;
    private static SymbolDisplayFormat s_shortNameFormat;
    private static Func`2<char, char> s_toLower;
    private static Func`2<char, char> s_toUpper;
    private static RoslynHelper();
    public static IParameterSymbol DetermineParameter(ArgumentSyntax argument, SemanticModel semanticModel, bool allowParams, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static string GenerateNameForExpression(SemanticModel semanticModel, ExpressionSyntax expression, bool capitalize);
    [ExtensionAttribute]
public static string CreateParameterName(ITypeSymbol type, bool capitalize);
    private static string GetParameterName(ITypeSymbol type);
    [ExtensionAttribute]
public static bool IsSpecialType(ITypeSymbol symbol);
    [ExtensionAttribute]
public static string GetShortName(INamespaceOrTypeSymbol symbol);
    [ExtensionAttribute]
public static ExpressionSyntax WalkDownParentheses(ExpressionSyntax expression);
    [ExtensionAttribute]
public static string ToPascalCase(string shortName, bool trimLeadingTypePrefix);
    [ExtensionAttribute]
public static string ToCamelCase(string shortName, bool trimLeadingTypePrefix);
    [ExtensionAttribute]
private static string ConvertCase(string shortName, bool trimLeadingTypePrefix, Func`2<char, char> convert);
    [ExtensionAttribute]
public static bool LooksLikeInterfaceName(string name);
    [ExtensionAttribute]
public static bool LooksLikeTypeParameterName(string name);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class SerilogAnalyzer.SerilogAnalyzerAnalyzer : DiagnosticAnalyzer {
    public static string ExceptionDiagnosticId;
    private static LocalizableString ExceptionTitle;
    private static LocalizableString ExceptionMessageFormat;
    private static LocalizableString ExceptionDescription;
    private static DiagnosticDescriptor ExceptionRule;
    public static string TemplateDiagnosticId;
    private static LocalizableString TemplateTitle;
    private static LocalizableString TemplateMessageFormat;
    private static LocalizableString TemplateDescription;
    private static DiagnosticDescriptor TemplateRule;
    public static string PropertyBindingDiagnosticId;
    private static LocalizableString PropertyBindingTitle;
    private static LocalizableString PropertyBindingMessageFormat;
    private static LocalizableString PropertyBindingDescription;
    private static DiagnosticDescriptor PropertyBindingRule;
    public static string ConstantMessageTemplateDiagnosticId;
    private static LocalizableString ConstantMessageTemplateTitle;
    private static LocalizableString ConstantMessageTemplateMessageFormat;
    private static LocalizableString ConstantMessageTemplateDescription;
    private static DiagnosticDescriptor ConstantMessageTemplateRule;
    public static string UniquePropertyNameDiagnosticId;
    private static LocalizableString UniquePropertyNameTitle;
    private static LocalizableString UniquePropertyNameMessageFormat;
    private static LocalizableString UniquePropertyNameDescription;
    private static DiagnosticDescriptor UniquePropertyNameRule;
    public static string PascalPropertyNameDiagnosticId;
    private static LocalizableString PascalPropertyNameTitle;
    private static LocalizableString PascalPropertyNameMessageFormat;
    private static LocalizableString PascalPropertyNameDescription;
    private static DiagnosticDescriptor PascalPropertyNameRule;
    public static string DestructureAnonymousObjectsDiagnosticId;
    private static LocalizableString DestructureAnonymousObjectsTitle;
    private static LocalizableString DestructureAnonymousObjectsMessageFormat;
    private static LocalizableString DestructureAnonymousObjectsDescription;
    private static DiagnosticDescriptor DestructureAnonymousObjectsRule;
    public static string UseCorrectContextualLoggerDiagnosticId;
    private static LocalizableString UseCorrectContextualLoggerTitle;
    private static LocalizableString UseCorrectContextualLoggerMessageFormat;
    private static LocalizableString UseCorrectContextualLoggerDescription;
    private static DiagnosticDescriptor UseCorrectContextualLoggerRule;
    private static string ILogger;
    private static string ForContext;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static SerilogAnalyzerAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SyntaxNodeAnalysisContext context);
    private static void CheckForContextCorrectness(SyntaxNodeAnalysisContext& context, InvocationExpressionSyntax invocation, IMethodSymbol method);
    private static void ReportDiagnostic(SyntaxNodeAnalysisContext& context, TextSpan& literalSpan, string stringText, bool exactPositions, DiagnosticDescriptor rule, MessageTemplateDiagnostic diagnostic);
    public static int GetPositionInLiteral(string literal, int unescapedPosition);
    internal static bool IsHexDigit(char c);
    private static bool IsException(ITypeSymbol exceptionSymbol, ITypeSymbol type);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class SerilogAnalyzer.SerilogAnalyzerCodeFixProvider : CodeFixProvider {
    private static string title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("SerilogAnalyzer.SerilogAnalyzerCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("SerilogAnalyzer.SerilogAnalyzerCodeFixProvider/<MoveExceptionFirstAsync>d__5")]
private Task`1<Solution> MoveExceptionFirstAsync(Document document, ArgumentSyntax argument, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class SerilogAnalyzer.SerilogAnalyzerPascalCaseCodeFixProvider : CodeFixProvider {
    private static char stringificationPrefix;
    private static char destructuringPrefix;
    private static string title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("SerilogAnalyzer.SerilogAnalyzerPascalCaseCodeFixProvider/<RegisterCodeFixesAsync>d__5")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("SerilogAnalyzer.SerilogAnalyzerPascalCaseCodeFixProvider/<PascalCaseTheProperties>d__6")]
private Task`1<Solution> PascalCaseTheProperties(Document document, LiteralExpressionSyntax node, CancellationToken cancellationToken);
    private static void AppendAsPascalCase(StringBuilder sb, string input);
}
[ExportCodeRefactoringProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class SerilogAnalyzer.ShowConfigCodeRefactoringProvider : CodeRefactoringProvider {
    private static String[] InterestingProperties;
    private static String[] LogLevels;
    private static string NotAConstantReplacementValue;
    private static ShowConfigCodeRefactoringProvider();
    [AsyncStateMachineAttribute("SerilogAnalyzer.ShowConfigCodeRefactoringProvider/<ComputeRefactoringsAsync>d__3")]
public sealed virtual Task ComputeRefactoringsAsync(CodeRefactoringContext context);
    private static LoggerConfiguration GetLoggerConfigurationFromSyntax(CodeRefactoringContext context, SemanticModel semanticModel, List`1<MemberAccessExpressionSyntax> configurationProperties);
    private static void AddExtensibleMethod(SemanticModel semanticModel, MemberAccessExpressionSyntax invokedMethod, LoggerConfiguration configuration, Action`1<ExtensibleMethod> addMethod, CancellationToken cancellationToken);
    private static string GetAssemblyQualifiedTypeName(ITypeSymbol type);
    private Task`1<Document> InsertConfigurationComment(Document document, MemberAccessExpressionSyntax firstProperty, SyntaxNode root, LoggerConfiguration configuration, Func`2<LoggerConfiguration, string> generateConfig, CancellationToken cancellationToken);
    private static string GetAppSettingsConfiguration(LoggerConfiguration configuration);
    private static void ConvertExtensibleMethod(List`1<XElement> configEntries, ExtensibleMethod enrichment, string prefix);
    private static void AddEntry(List`1<XElement> configEntries, string key, string value);
    private static string GetAppSettingsJsonConfiguration(LoggerConfiguration configuration);
    private static void WriteMethodCalls(List`1<ExtensibleMethod> methods, StringBuilder sb, string methodKind);
    private static void FinishPreviousLine(StringBuilder sb, Boolean& needsComma);
}
internal class SerilogAnalyzer.SourceArgument : object {
    [CompilerGeneratedAttribute]
private ArgumentSyntax <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public ArgumentSyntax Argument { get; public set; }
    public int StartIndex { get; public set; }
    public int Length { get; public set; }
    [CompilerGeneratedAttribute]
public ArgumentSyntax get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(ArgumentSyntax value);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
}
