internal static class SerilogTraceListener.LevelMapping : object {
    public static LogEventLevel ToLogEventLevel(TraceEventType eventType);
}
public class SerilogTraceListener.SerilogTraceListener : TraceListener {
    private static string ActivityIdProperty;
    private static string CategoryProperty;
    private static string EventIdProperty;
    private static string FailDetailMessageProperty;
    private static string RelatedActivityIdProperty;
    private static string SourceProperty;
    private static string TraceDataProperty;
    private static string TraceEventTypeProperty;
    private static LogEventLevel DefaultLogLevel;
    private static LogEventLevel FailLevel;
    private static string NoMessageTraceEventMessageTemplate;
    private static string TraceDataMessageTemplate;
    private ILogger _logger;
    public bool IsThreadSafe { get; }
    public SerilogTraceListener(ILogger logger);
    public SerilogTraceListener(string context);
    public virtual bool get_IsThreadSafe();
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceTransfer(TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    public virtual void Write(object data);
    public virtual void Write(string message);
    public virtual void Write(object data, string category);
    public virtual void Write(string message, string category);
    public virtual void WriteLine(string message);
    public virtual void WriteLine(object data);
    public virtual void WriteLine(string message, string category);
    public virtual void WriteLine(object data, string category);
    private void AddFormatArgs(IList`1<LogEventProperty> properties, Object[] args, Exception& exception);
    private IList`1<LogEventProperty> CreateFailProperties();
    private IList`1<LogEventProperty> CreateProperties();
    private IList`1<LogEventProperty> CreateTraceProperties(string source, TraceEventType eventType, int id);
    private void SafeAddProperty(IList`1<LogEventProperty> properties, string name, object value);
    private void Write(TraceEventType eventType, Exception exception, string messageTemplate, IList`1<LogEventProperty> properties);
    private void Write(LogEventLevel level, Exception exception, string messageTemplate, IList`1<LogEventProperty> properties);
    private bool ShouldTrace(TraceEventCache cache, string source, TraceEventType eventType, int id, string formatOrMessage, Object[] args, object data1, Object[] data);
    private void WriteData(TraceEventType eventType, IList`1<LogEventProperty> properties, object data);
}
