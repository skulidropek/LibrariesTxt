[ExtensionAttribute]
public static class Serilog.SerilogWebClassicLoggerConfigurationExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration WithClaimValue(LoggerEnrichmentConfiguration enrichmentConfiguration, string claimProperty, string logEventProperty);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestClientHostIP(LoggerEnrichmentConfiguration enrichmentConfiguration, bool checkForHttpProxies);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestClientHostName(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestId(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestNumber(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestUrl(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestRawUrl(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestTraceId(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestType(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestUrlReferrer(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpRequestUserAgent(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithHttpSessionId(LoggerEnrichmentConfiguration enrichmentConfiguration);
    [ExtensionAttribute]
public static LoggerConfiguration WithUserName(LoggerEnrichmentConfiguration enrichmentConfiguration, string anonymousUsername, string noneUsername);
}
public class SerilogWeb.Classic.ApplicationLifecycleModule : object {
    private static SerilogWebClassicConfiguration Config { get; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.UseLogger(ILogger customLogger))")]
public static ILogger Logger { get; public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.IgnoreRequestsMatching(filter))")]
public static Func`2<HttpContextBase, bool> RequestFilter { get; public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.EnableFormDataLogging()) or SerilogWebClassic.Configure(cfg => cfg.EnableFormDataLogging(forms => cfg.XXX))")]
public static LogPostedFormDataOption LogPostedFormData { get; public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.EnableFormDataLogging(forms => forms.FilterKeywords())) or SerilogWebClassic.Configure(cfg => cfg.EnableFormDataLogging(forms => forms.DisablePasswordFiltering()))")]
public static bool FilterPasswordsInFormData { get; public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.EnableFormDataLogging(forms => forms.FilterKeywords(keywords))")]
public static IEnumerable`1<string> FilteredKeywordsInFormData { get; public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.Enable()) or SerilogWebClassic.Configure(cfg => cfg.Disable())")]
public static bool IsEnabled { get; public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.LogAtLevel(level))")]
unknown static LogEventLevel RequestLoggingLevel {public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg..EnableFormDataLogging(forms => forms.AtLevel(level)))")]
public static LogEventLevel FormDataLoggingLevel { get; public set; }
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.Configure(cfg => cfg.EnableFormDataLogging(forms => forms.OnMatch(matchingFunction)))")]
public static Func`2<HttpContextBase, bool> ShouldLogPostedFormData { get; public set; }
    private static SerilogWebClassicConfiguration get_Config();
    public static ILogger get_Logger();
    public static void set_Logger(ILogger value);
    public static void Register();
    public static Func`2<HttpContextBase, bool> get_RequestFilter();
    public static void set_RequestFilter(Func`2<HttpContextBase, bool> value);
    public static LogPostedFormDataOption get_LogPostedFormData();
    public static void set_LogPostedFormData(LogPostedFormDataOption value);
    public static bool get_FilterPasswordsInFormData();
    public static void set_FilterPasswordsInFormData(bool value);
    public static IEnumerable`1<string> get_FilteredKeywordsInFormData();
    public static void set_FilteredKeywordsInFormData(IEnumerable`1<string> value);
    public static bool get_IsEnabled();
    public static void set_IsEnabled(bool value);
    public static void set_RequestLoggingLevel(LogEventLevel value);
    public static LogEventLevel get_FormDataLoggingLevel();
    public static void set_FormDataLoggingLevel(LogEventLevel value);
    public static Func`2<HttpContextBase, bool> get_ShouldLogPostedFormData();
    public static void set_ShouldLogPostedFormData(Func`2<HttpContextBase, bool> value);
    public sealed virtual void Init(HttpApplication application);
    [ObsoleteAttribute("Obsolete since v4.1 - Use SerilogWebClassic.ResetConfiguration()")]
internal static void ResetConfiguration();
    public sealed virtual void Dispose();
}
public class SerilogWeb.Classic.Enrichers.ClaimValueEnricher : object {
    private string _claimProperty;
    private string _logEventProperty;
    public ClaimValueEnricher(string claimProperty);
    public ClaimValueEnricher(string claimProperty, string logEventProperty);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
    [CompilerGeneratedAttribute]
private bool <Enrich>b__5_0(Claim c);
}
internal static class SerilogWeb.Classic.Enrichers.CurrentHttpContext : object {
    [DebuggerNonUserCodeAttribute]
internal static HttpRequest Request { get; }
    internal static HttpRequest get_Request();
}
public class SerilogWeb.Classic.Enrichers.HttpRequestClientHostIPEnricher : object {
    [CompilerGeneratedAttribute]
private bool <CheckForHttpProxies>k__BackingField;
    public static string HttpRequestClientHostIPPropertyName;
    public bool CheckForHttpProxies { get; public set; }
    public HttpRequestClientHostIPEnricher(bool checkForHttpProxies);
    [CompilerGeneratedAttribute]
public bool get_CheckForHttpProxies();
    [CompilerGeneratedAttribute]
public void set_CheckForHttpProxies(bool value);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestClientHostNameEnricher : object {
    public static string HttpRequestClientHostNamePropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestIdEnricher : object {
    public static string HttpRequestIdPropertyName;
    private static string RequestIdItemName;
    private static HttpRequestIdEnricher();
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
    public static bool TryGetCurrentHttpRequestId(Guid& requestId);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestNumberEnricher : object {
    public static string HttpRequestNumberPropertyName;
    private static int _lastRequestNumber;
    private static string RequestNumberItemName;
    private static HttpRequestNumberEnricher();
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestRawUrlEnricher : object {
    public static string HttpRequestRawUrlPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestTraceIdEnricher : object {
    public static string HttpRequestTraceIdPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestTypeEnricher : object {
    public static string HttpRequestTypePropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestUrlEnricher : object {
    public static string HttpRequestUrlPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestUrlReferrerEnricher : object {
    public static string HttpRequestUrlReferrerPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpRequestUserAgentEnricher : object {
    public static string HttpRequestUserAgentPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.HttpSessionIdEnricher : object {
    public static string HttpSessionIdPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class SerilogWeb.Classic.Enrichers.UserNameEnricher : object {
    private string _anonymousUsername;
    private string _noneUsername;
    public static string UserNamePropertyName;
    public UserNameEnricher(string anonymousUsername, string noneUsername);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
[ExtensionAttribute]
public static class SerilogWeb.Classic.Extensions.SerilogWebRequestExtensions : object {
    private static string SerilogWebErrorKey;
    [ExtensionAttribute]
public static void AddSerilogWebError(HttpContextBase self, Exception exception);
    [ExtensionAttribute]
public static void AddSerilogWebError(HttpContext self, Exception exception);
    private static void AddSerilogWebErrorInternal(IDictionary items, Exception ex);
    [ExtensionAttribute]
public static Exception GetLastSerilogWebError(HttpContextBase self);
    [ExtensionAttribute]
public static Exception GetLastSerilogWebError(HttpContext self);
    private static Exception GetLastSerilogWebErrorInternal(IDictionary items);
}
internal class SerilogWeb.Classic.HttpApplicationWrapper : object {
    private HttpApplication _httpApplication;
    public HttpContextBase Context { get; }
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    public HttpServerUtilityBase Server { get; }
    public HttpApplicationWrapper(HttpApplication httpApplication);
    public sealed virtual HttpContextBase get_Context();
    public sealed virtual HttpRequestBase get_Request();
    public sealed virtual HttpResponseBase get_Response();
    public sealed virtual HttpServerUtilityBase get_Server();
}
internal interface SerilogWeb.Classic.IHttpApplication {
    public HttpContextBase Context { get; }
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    public HttpServerUtilityBase Server { get; }
    public abstract virtual HttpContextBase get_Context();
    public abstract virtual HttpRequestBase get_Request();
    public abstract virtual HttpResponseBase get_Response();
    public abstract virtual HttpServerUtilityBase get_Server();
}
public enum SerilogWeb.Classic.LogPostedFormDataOption : Enum {
    public int value__;
    public static LogPostedFormDataOption Never;
    public static LogPostedFormDataOption Always;
    public static LogPostedFormDataOption OnlyOnError;
    public static LogPostedFormDataOption OnMatch;
}
public static class SerilogWeb.Classic.SerilogWebClassic : object {
    [CompilerGeneratedAttribute]
private static SerilogWebClassicConfiguration <Configuration>k__BackingField;
    internal static SerilogWebClassicConfiguration Configuration { get; internal set; }
    private static SerilogWebClassic();
    [CompilerGeneratedAttribute]
internal static SerilogWebClassicConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
internal static void set_Configuration(SerilogWebClassicConfiguration value);
    public static void Configure(Func`2<SerilogWebClassicConfigurationBuilder, SerilogWebClassicConfigurationBuilder> configure);
    internal static void ResetConfiguration();
}
internal class SerilogWeb.Classic.SerilogWebClassicConfiguration : object {
    private static Func`2<HttpContextBase, bool> AlwaysTrue;
    private static Func`2<HttpContextBase, bool> AlwaysFalse;
    private static Func`2<HttpContextBase, bool> DefaultErrorStrategy;
    internal static SerilogWebClassicConfiguration Default;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContextBase, TimeSpan, LogEventLevel> <LogLevelEvaluator>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CustomLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> <RequestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventLevel <FormDataLoggingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private LogPostedFormDataOption <LogPostedFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> <ShouldLogPostedFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterPasswordsInFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <FilteredKeywordsInFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> <FormLoggingStrategy>k__BackingField;
    internal bool IsEnabled { get; }
    internal Func`3<HttpContextBase, TimeSpan, LogEventLevel> LogLevelEvaluator { get; }
    internal ILogger CustomLogger { get; }
    internal Func`2<HttpContextBase, bool> RequestFilter { get; }
    internal LogEventLevel FormDataLoggingLevel { get; }
    internal LogPostedFormDataOption LogPostedFormData { get; }
    internal Func`2<HttpContextBase, bool> ShouldLogPostedFormData { get; }
    internal bool FilterPasswordsInFormData { get; }
    internal IEnumerable`1<string> FilteredKeywordsInFormData { get; }
    internal ILogger Logger { get; }
    internal Func`2<HttpContextBase, bool> FormLoggingStrategy { get; }
    internal SerilogWebClassicConfiguration(bool isEnabled, Func`3<HttpContextBase, TimeSpan, LogEventLevel> logLevelEvaluator, Func`2<HttpContextBase, bool> requestFilter, LogEventLevel formDataLoggingLevel, ILogger customLogger, LogPostedFormDataOption logPostedFormData, Func`2<HttpContextBase, bool> shouldLogPostedFormData, bool filterPasswordsInFormData, IEnumerable`1<string> filteredKeywordsInFormData);
    private static SerilogWebClassicConfiguration();
    internal SerilogWebClassicConfiguration Edit(Func`2<SerilogWebClassicConfigurationBuilder, SerilogWebClassicConfigurationBuilder> configure);
    [CompilerGeneratedAttribute]
internal bool get_IsEnabled();
    [CompilerGeneratedAttribute]
internal Func`3<HttpContextBase, TimeSpan, LogEventLevel> get_LogLevelEvaluator();
    [CompilerGeneratedAttribute]
internal ILogger get_CustomLogger();
    [CompilerGeneratedAttribute]
internal Func`2<HttpContextBase, bool> get_RequestFilter();
    [CompilerGeneratedAttribute]
internal LogEventLevel get_FormDataLoggingLevel();
    [CompilerGeneratedAttribute]
internal LogPostedFormDataOption get_LogPostedFormData();
    [CompilerGeneratedAttribute]
internal Func`2<HttpContextBase, bool> get_ShouldLogPostedFormData();
    [CompilerGeneratedAttribute]
internal bool get_FilterPasswordsInFormData();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> get_FilteredKeywordsInFormData();
    internal ILogger get_Logger();
    [CompilerGeneratedAttribute]
internal Func`2<HttpContextBase, bool> get_FormLoggingStrategy();
    internal string FilterPasswords(string key, string value);
}
public class SerilogWeb.Classic.SerilogWebClassicConfigurationBuilder : object {
    private static Func`2<HttpContextBase, bool> AlwaysFalse;
    private static String[] DefaultFilteredOutFormDataKeywords;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContextBase, TimeSpan, LogEventLevel> <LogLevelEvaluator>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CustomLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> <RequestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventLevel <FormDataLoggingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private LogPostedFormDataOption <LogPostedFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> <ShouldLogPostedFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterPasswordsInFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <FilteredKeywordsInFormData>k__BackingField;
    private bool IsEnabled { get; private set; }
    private Func`3<HttpContextBase, TimeSpan, LogEventLevel> LogLevelEvaluator { get; private set; }
    private ILogger CustomLogger { get; private set; }
    private Func`2<HttpContextBase, bool> RequestFilter { get; private set; }
    private LogEventLevel FormDataLoggingLevel { get; private set; }
    private LogPostedFormDataOption LogPostedFormData { get; private set; }
    private Func`2<HttpContextBase, bool> ShouldLogPostedFormData { get; private set; }
    private bool FilterPasswordsInFormData { get; private set; }
    private IEnumerable`1<string> FilteredKeywordsInFormData { get; private set; }
    internal SerilogWebClassicConfigurationBuilder(SerilogWebClassicConfiguration configToCopy);
    private static SerilogWebClassicConfigurationBuilder();
    [CompilerGeneratedAttribute]
private bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
private Func`3<HttpContextBase, TimeSpan, LogEventLevel> get_LogLevelEvaluator();
    [CompilerGeneratedAttribute]
private void set_LogLevelEvaluator(Func`3<HttpContextBase, TimeSpan, LogEventLevel> value);
    [CompilerGeneratedAttribute]
private ILogger get_CustomLogger();
    [CompilerGeneratedAttribute]
private void set_CustomLogger(ILogger value);
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> get_RequestFilter();
    [CompilerGeneratedAttribute]
private void set_RequestFilter(Func`2<HttpContextBase, bool> value);
    [CompilerGeneratedAttribute]
private LogEventLevel get_FormDataLoggingLevel();
    [CompilerGeneratedAttribute]
private void set_FormDataLoggingLevel(LogEventLevel value);
    [CompilerGeneratedAttribute]
private LogPostedFormDataOption get_LogPostedFormData();
    [CompilerGeneratedAttribute]
private void set_LogPostedFormData(LogPostedFormDataOption value);
    [CompilerGeneratedAttribute]
private Func`2<HttpContextBase, bool> get_ShouldLogPostedFormData();
    [CompilerGeneratedAttribute]
private void set_ShouldLogPostedFormData(Func`2<HttpContextBase, bool> value);
    [CompilerGeneratedAttribute]
private bool get_FilterPasswordsInFormData();
    [CompilerGeneratedAttribute]
private void set_FilterPasswordsInFormData(bool value);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> get_FilteredKeywordsInFormData();
    [CompilerGeneratedAttribute]
private void set_FilteredKeywordsInFormData(IEnumerable`1<string> value);
    private void Reset();
    private void ResetFormDataLogging();
    internal SerilogWebClassicConfiguration Build();
    public SerilogWebClassicConfigurationBuilder Disable();
    public SerilogWebClassicConfigurationBuilder Enable();
    public SerilogWebClassicConfigurationBuilder LogAtLevel(LogEventLevel level);
    public SerilogWebClassicConfigurationBuilder LogAtLevel(Func`3<HttpContextBase, TimeSpan, LogEventLevel> logLevelEvaluator);
    public SerilogWebClassicConfigurationBuilder UseLogger(ILogger customLogger);
    public SerilogWebClassicConfigurationBuilder UseDefaultLogger();
    public SerilogWebClassicConfigurationBuilder IgnoreRequestsMatching(Func`2<HttpContextBase, bool> filter);
    public SerilogWebClassicConfigurationBuilder EnableFormDataLogging();
    public SerilogWebClassicConfigurationBuilder EnableFormDataLogging(Action`1<FormDataLoggingConfigurationBuilder> configure);
    public SerilogWebClassicConfigurationBuilder DisableFormDataLogging();
}
internal class SerilogWeb.Classic.WebRequestLoggingHandler : object {
    private static string StopWatchKey;
    private static string HttpRequestEventMessageTemplate;
    private IHttpApplication _application;
    public WebRequestLoggingHandler(IHttpApplication application);
    internal void OnBeginRequest(SerilogWebClassicConfiguration configuration);
    internal void OnLogRequest(SerilogWebClassicConfiguration configuration);
}
