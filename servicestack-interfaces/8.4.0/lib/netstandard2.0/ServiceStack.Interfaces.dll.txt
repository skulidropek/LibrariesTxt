public interface IHasRedisResolver {
    public IRedisResolver RedisResolver { get; public set; }
    public abstract virtual IRedisResolver get_RedisResolver();
    public abstract virtual void set_RedisResolver(IRedisResolver value);
}
public interface IRedisResolver {
    public IRedisEndpoint PrimaryEndpoint { get; }
    public int ReadWriteHostsCount { get; }
    public int ReadOnlyHostsCount { get; }
    public abstract virtual IRedisEndpoint get_PrimaryEndpoint();
    public abstract virtual int get_ReadWriteHostsCount();
    public abstract virtual int get_ReadOnlyHostsCount();
    public abstract virtual IRedisClient CreateClient(string host);
    public abstract virtual void ResetMasters(IEnumerable`1<string> hosts);
    public abstract virtual void ResetSlaves(IEnumerable`1<string> hosts);
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspChildControlTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ControlType>k__BackingField;
    [NotNullAttribute]
public string TagName { get; private set; }
    [NotNullAttribute]
public Type ControlType { get; private set; }
    public AspChildControlTypeAttribute(string tagName, Type controlType);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public Type get_ControlType();
    [CompilerGeneratedAttribute]
private void set_ControlType(Type value);
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldAttribute : Attribute {
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldsAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspMethodPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcActionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; private set; }
    public AspMvcActionAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2176")]
internal class JetBrains.Annotations.AspMvcActionSelectorAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcAreaAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; private set; }
    public AspMvcAreaAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcAreaMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcAreaPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcAreaViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcControllerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; private set; }
    public AspMvcControllerAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcDisplayTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcEditorTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcMasterAttribute : Attribute {
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcModelTypeAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcPartialViewAttribute : Attribute {
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("68")]
internal class JetBrains.Annotations.AspMvcSuppressViewErrorAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcViewAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcViewComponentAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcViewComponentViewAttribute : Attribute {
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspRequiredAttributeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [NotNullAttribute]
public string Attribute { get; private set; }
    public AspRequiredAttributeAttribute(string attribute);
    [CompilerGeneratedAttribute]
public string get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspTypePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CreateConstructorReferences>k__BackingField;
    public bool CreateConstructorReferences { get; private set; }
    public AspTypePropertyAttribute(bool createConstructorReferences);
    [CompilerGeneratedAttribute]
public bool get_CreateConstructorReferences();
    [CompilerGeneratedAttribute]
private void set_CreateConstructorReferences(bool value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AssertionConditionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private AssertionConditionType <ConditionType>k__BackingField;
    public AssertionConditionType ConditionType { get; private set; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    [CompilerGeneratedAttribute]
public AssertionConditionType get_ConditionType();
    [CompilerGeneratedAttribute]
private void set_ConditionType(AssertionConditionType value);
}
internal enum JetBrains.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.AssertionMethodAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [NotNullAttribute]
public Type BaseType { get; private set; }
    public BaseTypeRequiredAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(Type value);
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[AttributeUsageAttribute("224")]
internal class JetBrains.Annotations.CollectionAccessAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CollectionAccessType <CollectionAccessType>k__BackingField;
    public CollectionAccessType CollectionAccessType { get; private set; }
    public CollectionAccessAttribute(CollectionAccessType collectionAccessType);
    [CompilerGeneratedAttribute]
public CollectionAccessType get_CollectionAccessType();
    [CompilerGeneratedAttribute]
private void set_CollectionAccessType(CollectionAccessType value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.CollectionAccessType : Enum {
    public int value__;
    public static CollectionAccessType None;
    public static CollectionAccessType Read;
    public static CollectionAccessType ModifyExistingContent;
    public static CollectionAccessType UpdatedContent;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    [NotNullAttribute]
public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlAttributeValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public HtmlAttributeValueAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlElementAttributesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CanBeNullAttribute]
public string Name { get; private set; }
    public HtmlElementAttributesAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemCanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.LinqTunnelAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public bool Required { get; private set; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.MacroAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CanBeNullAttribute]
public string Expression { get; public set; }
    public int Editable { get; public set; }
    [CanBeNullAttribute]
public string Target { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public int get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(int value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
}
[AttributeUsageAttribute("16388")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.MustUseReturnValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [CanBeNullAttribute]
public string Justification { get; private set; }
    public MustUseReturnValueAttribute(string justification);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
private void set_Justification(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("1052")]
internal class JetBrains.Annotations.NoReorderAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CanBeNullAttribute]
public string ParameterName { get; private set; }
    public NotifyPropertyChangedInvocatorAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.PathReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CanBeNullAttribute]
public string BasePath { get; private set; }
    public PathReferenceAttribute(string basePath);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
}
[AttributeUsageAttribute("19916")]
internal class JetBrains.Annotations.ProvidesContextAttribute : Attribute {
}
[MeansImplicitUseAttribute("3")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CanBeNullAttribute]
public string Comment { get; private set; }
    public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.PureAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorDirectiveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Directive>k__BackingField;
    [NotNullAttribute]
public string Directive { get; private set; }
    public RazorDirectiveAttribute(string directive);
    [CompilerGeneratedAttribute]
public string get_Directive();
    [CompilerGeneratedAttribute]
private void set_Directive(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorHelperCommonAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorImportNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public RazorImportNamespaceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorInjectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [NotNullAttribute]
public string Type { get; private set; }
    [NotNullAttribute]
public string FieldName { get; private set; }
    public RazorInjectionAttribute(string type, string fieldName);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.RazorLayoutAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorPageBaseTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageName>k__BackingField;
    [NotNullAttribute]
public string BaseType { get; private set; }
    [CanBeNullAttribute]
public string PageName { get; private set; }
    public RazorPageBaseTypeAttribute(string baseType);
    public RazorPageBaseTypeAttribute(string baseType, string pageName);
    [CompilerGeneratedAttribute]
public string get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(string value);
    [CompilerGeneratedAttribute]
public string get_PageName();
    [CompilerGeneratedAttribute]
private void set_PageName(string value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.RazorSectionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteLiteralMethodAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteMethodAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.RazorWriteMethodParameterAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.RegexPatternAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.SourceTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.ValueProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public ValueProviderAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.XamlItemsControlAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class ServiceStack.AI.InitSpeechToText : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, int>> <PhraseWeights>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, int>> PhraseWeights { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, int>> get_PhraseWeights();
    [CompilerGeneratedAttribute]
public void set_PhraseWeights(IEnumerable`1<KeyValuePair`2<string, int>> value);
}
[NullableContextAttribute("1")]
public interface ServiceStack.AI.IPhrasesProvider {
    public abstract virtual Task`1<IEnumerable`1<string>> GetPhrasesAsync(CancellationToken token);
}
public interface ServiceStack.AI.IPhraseWeightsProvider {
    public abstract virtual Task`1<IEnumerable`1<ValueTuple`2<string, int>>> GetPhraseWeightsAsync(CancellationToken token);
}
[NullableContextAttribute("1")]
public interface ServiceStack.AI.IPromptProvider {
    public abstract virtual Task`1<string> CreateSchemaAsync(CancellationToken token);
    public abstract virtual Task`1<string> CreatePromptAsync(string userMessage, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface ServiceStack.AI.IPromptProviderFactory {
    public abstract virtual IPromptProvider Get(string name);
}
[NullableContextAttribute("1")]
public interface ServiceStack.AI.ISpeechToText {
    public abstract virtual Task InitAsync(InitSpeechToText config, CancellationToken token);
    public abstract virtual Task`1<TranscriptResult> TranscribeAsync(string recordingPath, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface ServiceStack.AI.ISpeechToTextFactory {
    public abstract virtual ISpeechToText Get(string name);
}
[NullableContextAttribute("1")]
public interface ServiceStack.AI.ITypeChat {
    public abstract virtual Task`1<TypeChatResponse> TranslateMessageAsync(TypeChatRequest request, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface ServiceStack.AI.ITypeChatFactory {
    public abstract virtual ITypeChat Get(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.AI.PromptProviderFactory : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IPromptProvider> <Providers>k__BackingField;
    public Dictionary`2<string, IPromptProvider> Providers { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IPromptProvider> get_Providers();
    public sealed virtual IPromptProvider Get(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.AI.SpeechToTextFactory : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ISpeechToText> <Providers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, ISpeechToText> <Resolve>k__BackingField;
    public Dictionary`2<string, ISpeechToText> Providers { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, ISpeechToText> Resolve { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ISpeechToText> get_Providers();
    [CompilerGeneratedAttribute]
public Func`2<string, ISpeechToText> get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(Func`2<string, ISpeechToText> value);
    public sealed virtual ISpeechToText Get(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.AI.TranscriptResult : object {
    [CompilerGeneratedAttribute]
private string <Transcript>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Confidence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiResponse>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public string Transcript { get; public set; }
    public float Confidence { get; public set; }
    public string ApiResponse { get; public set; }
    [NullableAttribute("2")]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Transcript();
    [CompilerGeneratedAttribute]
public void set_Transcript(string value);
    [CompilerGeneratedAttribute]
public float get_Confidence();
    [CompilerGeneratedAttribute]
public void set_Confidence(float value);
    [CompilerGeneratedAttribute]
public string get_ApiResponse();
    [CompilerGeneratedAttribute]
public void set_ApiResponse(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ResponseStatus get_ResponseStatus();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResponseStatus(ResponseStatus value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.AI.TypeChatFactory : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ITypeChat> <Providers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, ITypeChat> <Resolve>k__BackingField;
    public Dictionary`2<string, ITypeChat> Providers { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, ITypeChat> Resolve { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ITypeChat> get_Providers();
    [CompilerGeneratedAttribute]
public Func`2<string, ITypeChat> get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(Func`2<string, ITypeChat> value);
    public sealed virtual ITypeChat Get(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.AI.TypeChatRequest : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Prompt>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <UserMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeProcessTimeoutMs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeChatTranslator <TypeChatTranslator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [NullableAttribute("1")]
public string Schema { get; public set; }
    [NullableAttribute("1")]
public string Prompt { get; public set; }
    [NullableAttribute("1")]
public string UserMessage { get; }
    public string NodePath { get; public set; }
    public int NodeProcessTimeoutMs { get; public set; }
    public string ScriptPath { get; public set; }
    public TypeChatTranslator TypeChatTranslator { get; public set; }
    public string SchemaPath { get; public set; }
    public string WorkingDirectory { get; public set; }
    [NullableContextAttribute("1")]
public TypeChatRequest(string schema, string prompt, string userMessage);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Schema();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Schema(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Prompt();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Prompt(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_UserMessage();
    [CompilerGeneratedAttribute]
public string get_NodePath();
    [CompilerGeneratedAttribute]
public void set_NodePath(string value);
    [CompilerGeneratedAttribute]
public int get_NodeProcessTimeoutMs();
    [CompilerGeneratedAttribute]
public void set_NodeProcessTimeoutMs(int value);
    [CompilerGeneratedAttribute]
public string get_ScriptPath();
    [CompilerGeneratedAttribute]
public void set_ScriptPath(string value);
    [CompilerGeneratedAttribute]
public TypeChatTranslator get_TypeChatTranslator();
    [CompilerGeneratedAttribute]
public void set_TypeChatTranslator(TypeChatTranslator value);
    [CompilerGeneratedAttribute]
public string get_SchemaPath();
    [CompilerGeneratedAttribute]
public void set_SchemaPath(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.AI.TypeChatResponse : object {
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public string Result { get; public set; }
    [NullableAttribute("2")]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ResponseStatus get_ResponseStatus();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResponseStatus(ResponseStatus value);
}
public enum ServiceStack.AI.TypeChatTranslator : Enum {
    public int value__;
    public static TypeChatTranslator Json;
    public static TypeChatTranslator Program;
}
[AttributeUsageAttribute("128")]
public class ServiceStack.AllowResetAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.ApiAllowableValuesAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Values>k__BackingField;
    public string Name { get; public set; }
    public string Type { get; public set; }
    public Nullable`1<int> Min { get; public set; }
    public Nullable`1<int> Max { get; public set; }
    public String[] Values { get; public set; }
    public ApiAllowableValuesAttribute(string name);
    public ApiAllowableValuesAttribute(string name, int min, int max);
    public ApiAllowableValuesAttribute(int min, int max);
    public ApiAllowableValuesAttribute(string name, String[] values);
    public ApiAllowableValuesAttribute(String[] values);
    public ApiAllowableValuesAttribute(string name, Type enumType);
    public ApiAllowableValuesAttribute(Type enumType);
    public ApiAllowableValuesAttribute(string name, Func`1<String[]> listAction);
    public ApiAllowableValuesAttribute(Func`1<String[]> listAction);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public String[] get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(String[] value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.ApiAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BodyParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    public string Description { get; public set; }
    public int BodyParameter { get; public set; }
    public string RequestContentType { get; public set; }
    public bool IsRequired { get; public set; }
    public ApiAttribute(string description);
    public ApiAttribute(string description, int generateBodyParameter);
    public ApiAttribute(string description, int generateBodyParameter, bool isRequired);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public int get_BodyParameter();
    [CompilerGeneratedAttribute]
public void set_BodyParameter(int value);
    [CompilerGeneratedAttribute]
public string get_RequestContentType();
    [CompilerGeneratedAttribute]
public void set_RequestContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.ApiMemberAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Route>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeInSchema>k__BackingField;
    public string Verb { get; public set; }
    public string ParameterType { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string DataType { get; public set; }
    public string Format { get; public set; }
    public bool IsRequired { get; public set; }
    public bool IsOptional { get; public set; }
    public bool AllowMultiple { get; public set; }
    public string Route { get; public set; }
    public bool ExcludeInSchema { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterType();
    [CompilerGeneratedAttribute]
public void set_ParameterType(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public void set_AllowMultiple(bool value);
    [CompilerGeneratedAttribute]
public string get_Route();
    [CompilerGeneratedAttribute]
public void set_Route(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeInSchema();
    [CompilerGeneratedAttribute]
public void set_ExcludeInSchema(bool value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.ApiResponseAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResponseType>k__BackingField;
    public int StatusCode { get; public set; }
    public string Description { get; public set; }
    public bool IsDefaultResponse { get; public set; }
    public Type ResponseType { get; public set; }
    public ApiResponseAttribute(HttpStatusCode statusCode, string description);
    public ApiResponseAttribute(int statusCode, string description);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultResponse();
    [CompilerGeneratedAttribute]
public void set_IsDefaultResponse(bool value);
    [CompilerGeneratedAttribute]
public Type get_ResponseType();
    [CompilerGeneratedAttribute]
public void set_ResponseType(Type value);
}
[FlagsAttribute]
public enum ServiceStack.ApplyTo : Enum {
    public int value__;
    public static ApplyTo None;
    public static ApplyTo All;
    public static ApplyTo Get;
    public static ApplyTo Post;
    public static ApplyTo Put;
    public static ApplyTo Delete;
    public static ApplyTo Patch;
    public static ApplyTo Options;
    public static ApplyTo Head;
    public static ApplyTo Connect;
    public static ApplyTo Trace;
    public static ApplyTo PropFind;
    public static ApplyTo PropPatch;
    public static ApplyTo MkCol;
    public static ApplyTo Copy;
    public static ApplyTo Move;
    public static ApplyTo Lock;
    public static ApplyTo UnLock;
    public static ApplyTo Report;
    public static ApplyTo CheckOut;
    public static ApplyTo CheckIn;
    public static ApplyTo UnCheckOut;
    public static ApplyTo MkWorkSpace;
    public static ApplyTo Update;
    public static ApplyTo Label;
    public static ApplyTo Merge;
    public static ApplyTo MkActivity;
    public static ApplyTo OrderPatch;
    public static ApplyTo Acl;
    public static ApplyTo Search;
    public static ApplyTo VersionControl;
    public static ApplyTo BaseLineControl;
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfGuid : List`1<Guid> {
    public ArrayOfGuid(IEnumerable`1<Guid> collection);
    public ArrayOfGuid(Guid[] args);
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfGuidId : List`1<Guid> {
    public ArrayOfGuidId(IEnumerable`1<Guid> collection);
    public ArrayOfGuidId(Guid[] args);
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfInt : List`1<int> {
    public ArrayOfInt(IEnumerable`1<int> collection);
    public ArrayOfInt(Int32[] args);
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfIntId : List`1<int> {
    public ArrayOfIntId(IEnumerable`1<int> collection);
    public ArrayOfIntId(Int32[] args);
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfLong : List`1<long> {
    public ArrayOfLong(IEnumerable`1<long> collection);
    public ArrayOfLong(Int64[] args);
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfLongId : List`1<long> {
    public ArrayOfLongId(IEnumerable`1<long> collection);
    public ArrayOfLongId(Int64[] args);
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfString : List`1<string> {
    public ArrayOfString(IEnumerable`1<string> collection);
    public ArrayOfString(String[] args);
}
[CollectionDataContractAttribute]
public class ServiceStack.ArrayOfStringId : List`1<string> {
    public ArrayOfStringId(IEnumerable`1<string> collection);
    public ArrayOfStringId(String[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class ServiceStack.AsyncCommand : AsyncCommand`1<NoArgs> {
    protected virtual Task RunAsync(NoArgs request, CancellationToken token);
    protected abstract virtual Task RunAsync(CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.AsyncCommand`1 : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public CancellationToken Token { get; }
    public IRequest Request { get; public set; }
    public sealed virtual CancellationToken get_Token();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    [AsyncStateMachineAttribute("ServiceStack.AsyncCommand`1/<ExecuteAsync>d__6")]
public sealed virtual Task ExecuteAsync(TArgs request);
    protected abstract virtual Task RunAsync(TArgs request, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.AsyncCommandWithResult`1 : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public CancellationToken Token { get; }
    public IRequest Request { get; public set; }
    public TResult Result { get; protected set; }
    public sealed virtual CancellationToken get_Token();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual TResult get_Result();
    [CompilerGeneratedAttribute]
protected void set_Result(TResult value);
    [AsyncStateMachineAttribute("ServiceStack.AsyncCommandWithResult`1/<ExecuteAsync>d__10")]
public sealed virtual Task ExecuteAsync(NoArgs request);
    protected abstract virtual Task`1<TResult> RunAsync(CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.AsyncCommandWithResult`2 : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public CancellationToken Token { get; }
    public IRequest Request { get; public set; }
    public TResult Result { get; protected set; }
    public sealed virtual CancellationToken get_Token();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual TResult get_Result();
    [CompilerGeneratedAttribute]
protected void set_Result(TResult value);
    [AsyncStateMachineAttribute("ServiceStack.AsyncCommandWithResult`2/<ExecuteAsync>d__10")]
public sealed virtual Task ExecuteAsync(TArgs request);
    protected abstract virtual Task`1<TResult> RunAsync(TArgs request, CancellationToken token);
}
public class ServiceStack.AttributeBase : Attribute {
    protected Guid typeId;
}
[ExtensionAttribute]
public static class ServiceStack.AttributeExtensions : object {
    private static TAttr FirstAttribute(Type type);
    private static TAttribute FirstAttribute(MemberInfo memberInfo);
    private static TAttribute FirstAttribute(ParameterInfo pi);
    private static TAttr[] AllAttributes(MemberInfo mi);
    private static Object[] AllAttributes(MemberInfo memberInfo, Type attrType);
    private static TAttr[] AllAttributes(ParameterInfo pi);
    [ExtensionAttribute]
public static string GetNotes(Type type);
    [ExtensionAttribute]
public static string GetDescription(Type type);
    [ExtensionAttribute]
public static string GetDescription(MemberInfo mi);
    [ExtensionAttribute]
public static string GetDescription(ParameterInfo pi);
}
[DataContractAttribute]
public abstract class ServiceStack.AuditBase : object {
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletedBy>k__BackingField;
    [DataMemberAttribute]
public DateTime CreatedDate { get; public set; }
    [DataMemberAttribute]
[RequiredAttribute]
public string CreatedBy { get; public set; }
    [DataMemberAttribute]
public DateTime ModifiedDate { get; public set; }
    [DataMemberAttribute]
[RequiredAttribute]
public string ModifiedBy { get; public set; }
    [DataMemberAttribute]
[IndexAttribute]
public Nullable`1<DateTime> DeletedDate { get; public set; }
    [DataMemberAttribute]
public string DeletedBy { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_ModifiedBy();
    [CompilerGeneratedAttribute]
public void set_ModifiedBy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_DeletedDate();
    [CompilerGeneratedAttribute]
public void set_DeletedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_DeletedBy();
    [CompilerGeneratedAttribute]
public void set_DeletedBy(string value);
}
public interface ServiceStack.Auth.IAuthTokens {
    public string Provider { get; public set; }
    public string UserId { get; public set; }
    public string AccessToken { get; public set; }
    public string AccessTokenSecret { get; public set; }
    public string RefreshToken { get; public set; }
    public Nullable`1<DateTime> RefreshTokenExpiry { get; public set; }
    public string RequestToken { get; public set; }
    public string RequestTokenSecret { get; public set; }
    public Dictionary`2<string, string> Items { get; public set; }
    public abstract virtual string get_Provider();
    public abstract virtual void set_Provider(string value);
    public abstract virtual string get_UserId();
    public abstract virtual void set_UserId(string value);
    public abstract virtual string get_AccessToken();
    public abstract virtual void set_AccessToken(string value);
    public abstract virtual string get_AccessTokenSecret();
    public abstract virtual void set_AccessTokenSecret(string value);
    public abstract virtual string get_RefreshToken();
    public abstract virtual void set_RefreshToken(string value);
    public abstract virtual Nullable`1<DateTime> get_RefreshTokenExpiry();
    public abstract virtual void set_RefreshTokenExpiry(Nullable`1<DateTime> value);
    public abstract virtual string get_RequestToken();
    public abstract virtual void set_RequestToken(string value);
    public abstract virtual string get_RequestTokenSecret();
    public abstract virtual void set_RequestTokenSecret(string value);
    public abstract virtual Dictionary`2<string, string> get_Items();
    public abstract virtual void set_Items(Dictionary`2<string, string> value);
}
public interface ServiceStack.Auth.IPasswordHasher {
    public byte Version { get; }
    public abstract virtual byte get_Version();
    public abstract virtual bool VerifyPassword(string hashedPassword, string providedPassword, Boolean& needsRehash);
    public abstract virtual string HashPassword(string password);
}
public interface ServiceStack.Auth.IUserAuth {
    public int Id { get; public set; }
    public string PrimaryEmail { get; public set; }
    public string Salt { get; public set; }
    public string PasswordHash { get; public set; }
    public string DigestHa1Hash { get; public set; }
    public List`1<string> Roles { get; public set; }
    public List`1<string> Permissions { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public int InvalidLoginAttempts { get; public set; }
    public Nullable`1<DateTime> LastLoginAttempt { get; public set; }
    public Nullable`1<DateTime> LockedDate { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public abstract virtual int get_Id();
    public abstract virtual void set_Id(int value);
    public abstract virtual string get_PrimaryEmail();
    public abstract virtual void set_PrimaryEmail(string value);
    public abstract virtual string get_Salt();
    public abstract virtual void set_Salt(string value);
    public abstract virtual string get_PasswordHash();
    public abstract virtual void set_PasswordHash(string value);
    public abstract virtual string get_DigestHa1Hash();
    public abstract virtual void set_DigestHa1Hash(string value);
    public abstract virtual List`1<string> get_Roles();
    public abstract virtual void set_Roles(List`1<string> value);
    public abstract virtual List`1<string> get_Permissions();
    public abstract virtual void set_Permissions(List`1<string> value);
    public abstract virtual Nullable`1<int> get_RefId();
    public abstract virtual void set_RefId(Nullable`1<int> value);
    public abstract virtual string get_RefIdStr();
    public abstract virtual void set_RefIdStr(string value);
    public abstract virtual int get_InvalidLoginAttempts();
    public abstract virtual void set_InvalidLoginAttempts(int value);
    public abstract virtual Nullable`1<DateTime> get_LastLoginAttempt();
    public abstract virtual void set_LastLoginAttempt(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_LockedDate();
    public abstract virtual void set_LockedDate(Nullable`1<DateTime> value);
    public abstract virtual DateTime get_CreatedDate();
    public abstract virtual void set_CreatedDate(DateTime value);
    public abstract virtual DateTime get_ModifiedDate();
    public abstract virtual void set_ModifiedDate(DateTime value);
}
public interface ServiceStack.Auth.IUserAuthDetails {
    public int Id { get; public set; }
    public int UserAuthId { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public abstract virtual int get_Id();
    public abstract virtual void set_Id(int value);
    public abstract virtual int get_UserAuthId();
    public abstract virtual void set_UserAuthId(int value);
    public abstract virtual DateTime get_CreatedDate();
    public abstract virtual void set_CreatedDate(DateTime value);
    public abstract virtual DateTime get_ModifiedDate();
    public abstract virtual void set_ModifiedDate(DateTime value);
    public abstract virtual Nullable`1<int> get_RefId();
    public abstract virtual void set_RefId(Nullable`1<int> value);
    public abstract virtual string get_RefIdStr();
    public abstract virtual void set_RefIdStr(string value);
}
public interface ServiceStack.Auth.IUserAuthDetailsExtended {
    public string UserName { get; public set; }
    public string DisplayName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string PhoneNumber { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    public string BirthDateRaw { get; public set; }
    public string Address { get; public set; }
    public string Address2 { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string Country { get; public set; }
    public string Culture { get; public set; }
    public string FullName { get; public set; }
    public string Gender { get; public set; }
    public string Language { get; public set; }
    public string MailAddress { get; public set; }
    public string Nickname { get; public set; }
    public string PostalCode { get; public set; }
    public string TimeZone { get; public set; }
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_FirstName();
    public abstract virtual void set_FirstName(string value);
    public abstract virtual string get_LastName();
    public abstract virtual void set_LastName(string value);
    public abstract virtual string get_Company();
    public abstract virtual void set_Company(string value);
    public abstract virtual string get_Email();
    public abstract virtual void set_Email(string value);
    public abstract virtual string get_PhoneNumber();
    public abstract virtual void set_PhoneNumber(string value);
    public abstract virtual Nullable`1<DateTime> get_BirthDate();
    public abstract virtual void set_BirthDate(Nullable`1<DateTime> value);
    public abstract virtual string get_BirthDateRaw();
    public abstract virtual void set_BirthDateRaw(string value);
    public abstract virtual string get_Address();
    public abstract virtual void set_Address(string value);
    public abstract virtual string get_Address2();
    public abstract virtual void set_Address2(string value);
    public abstract virtual string get_City();
    public abstract virtual void set_City(string value);
    public abstract virtual string get_State();
    public abstract virtual void set_State(string value);
    public abstract virtual string get_Country();
    public abstract virtual void set_Country(string value);
    public abstract virtual string get_Culture();
    public abstract virtual void set_Culture(string value);
    public abstract virtual string get_FullName();
    public abstract virtual void set_FullName(string value);
    public abstract virtual string get_Gender();
    public abstract virtual void set_Gender(string value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual string get_MailAddress();
    public abstract virtual void set_MailAddress(string value);
    public abstract virtual string get_Nickname();
    public abstract virtual void set_Nickname(string value);
    public abstract virtual string get_PostalCode();
    public abstract virtual void set_PostalCode(string value);
    public abstract virtual string get_TimeZone();
    public abstract virtual void set_TimeZone(string value);
}
public class ServiceStack.Auth.UserAuthBase : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BirthDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BirthDateRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DigestHa1Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvalidLoginAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastLoginAttempt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LockedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [AutoIncrementAttribute]
public int Id { get; public set; }
    [IndexAttribute]
public string UserName { get; public set; }
    [IndexAttribute]
public string Email { get; public set; }
    public string DisplayName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Company { get; public set; }
    public string PhoneNumber { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    public string BirthDateRaw { get; public set; }
    public string Address { get; public set; }
    public string Address2 { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string Country { get; public set; }
    public string Culture { get; public set; }
    public string FullName { get; public set; }
    public string Gender { get; public set; }
    public string Language { get; public set; }
    public string MailAddress { get; public set; }
    public string Nickname { get; public set; }
    public string PostalCode { get; public set; }
    public string TimeZone { get; public set; }
    public string PrimaryEmail { get; public set; }
    public string Salt { get; public set; }
    public string PasswordHash { get; public set; }
    public string DigestHa1Hash { get; public set; }
    public List`1<string> Roles { get; public set; }
    public List`1<string> Permissions { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public int InvalidLoginAttempts { get; public set; }
    public Nullable`1<DateTime> LastLoginAttempt { get; public set; }
    public Nullable`1<DateTime> LockedDate { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
public virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FirstName();
    [CompilerGeneratedAttribute]
public virtual void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_LastName();
    [CompilerGeneratedAttribute]
public virtual void set_LastName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Company();
    [CompilerGeneratedAttribute]
public virtual void set_Company(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_BirthDate();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_BirthDateRaw();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDateRaw(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address();
    [CompilerGeneratedAttribute]
public virtual void set_Address(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address2();
    [CompilerGeneratedAttribute]
public virtual void set_Address2(string value);
    [CompilerGeneratedAttribute]
public virtual string get_City();
    [CompilerGeneratedAttribute]
public virtual void set_City(string value);
    [CompilerGeneratedAttribute]
public virtual string get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Country();
    [CompilerGeneratedAttribute]
public virtual void set_Country(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Culture();
    [CompilerGeneratedAttribute]
public virtual void set_Culture(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual void set_FullName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Gender();
    [CompilerGeneratedAttribute]
public virtual void set_Gender(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_MailAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Nickname();
    [CompilerGeneratedAttribute]
public virtual void set_Nickname(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PostalCode();
    [CompilerGeneratedAttribute]
public virtual void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TimeZone();
    [CompilerGeneratedAttribute]
public virtual void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryEmail();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryEmail(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Salt();
    [CompilerGeneratedAttribute]
public virtual void set_Salt(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PasswordHash();
    [CompilerGeneratedAttribute]
public virtual void set_PasswordHash(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DigestHa1Hash();
    [CompilerGeneratedAttribute]
public virtual void set_DigestHa1Hash(string value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public virtual void set_Permissions(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefIdStr();
    [CompilerGeneratedAttribute]
public virtual void set_RefIdStr(string value);
    [CompilerGeneratedAttribute]
public virtual int get_InvalidLoginAttempts();
    [CompilerGeneratedAttribute]
public virtual void set_InvalidLoginAttempts(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastLoginAttempt();
    [CompilerGeneratedAttribute]
public virtual void set_LastLoginAttempt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LockedDate();
    [CompilerGeneratedAttribute]
public virtual void set_LockedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public virtual void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
}
public class ServiceStack.Auth.UserAuthDetailsBase : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BirthDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BirthDateRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RefreshTokenExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [AutoIncrementAttribute]
public int Id { get; public set; }
    public int UserAuthId { get; public set; }
    public string Provider { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string FullName { get; public set; }
    public string DisplayName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string PhoneNumber { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    public string BirthDateRaw { get; public set; }
    public string Address { get; public set; }
    public string Address2 { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string Country { get; public set; }
    public string Culture { get; public set; }
    public string Gender { get; public set; }
    public string Language { get; public set; }
    public string MailAddress { get; public set; }
    public string Nickname { get; public set; }
    public string PostalCode { get; public set; }
    public string TimeZone { get; public set; }
    public string RefreshToken { get; public set; }
    public Nullable`1<DateTime> RefreshTokenExpiry { get; public set; }
    public string RequestToken { get; public set; }
    public string RequestTokenSecret { get; public set; }
    public Dictionary`2<string, string> Items { get; public set; }
    public string AccessToken { get; public set; }
    public string AccessTokenSecret { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public virtual int get_UserAuthId();
    [CompilerGeneratedAttribute]
public virtual void set_UserAuthId(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Provider();
    [CompilerGeneratedAttribute]
public virtual void set_Provider(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual void set_FullName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FirstName();
    [CompilerGeneratedAttribute]
public virtual void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_LastName();
    [CompilerGeneratedAttribute]
public virtual void set_LastName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Company();
    [CompilerGeneratedAttribute]
public virtual void set_Company(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
public virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_BirthDate();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_BirthDateRaw();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDateRaw(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address();
    [CompilerGeneratedAttribute]
public virtual void set_Address(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address2();
    [CompilerGeneratedAttribute]
public virtual void set_Address2(string value);
    [CompilerGeneratedAttribute]
public virtual string get_City();
    [CompilerGeneratedAttribute]
public virtual void set_City(string value);
    [CompilerGeneratedAttribute]
public virtual string get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Country();
    [CompilerGeneratedAttribute]
public virtual void set_Country(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Culture();
    [CompilerGeneratedAttribute]
public virtual void set_Culture(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Gender();
    [CompilerGeneratedAttribute]
public virtual void set_Gender(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_MailAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Nickname();
    [CompilerGeneratedAttribute]
public virtual void set_Nickname(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PostalCode();
    [CompilerGeneratedAttribute]
public virtual void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TimeZone();
    [CompilerGeneratedAttribute]
public virtual void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RefreshToken();
    [CompilerGeneratedAttribute]
public virtual void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_RefreshTokenExpiry();
    [CompilerGeneratedAttribute]
public virtual void set_RefreshTokenExpiry(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_RequestToken();
    [CompilerGeneratedAttribute]
public virtual void set_RequestToken(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RequestTokenSecret();
    [CompilerGeneratedAttribute]
public virtual void set_RequestTokenSecret(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Items();
    [CompilerGeneratedAttribute]
public virtual void set_Items(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual string get_AccessToken();
    [CompilerGeneratedAttribute]
public virtual void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public virtual string get_AccessTokenSecret();
    [CompilerGeneratedAttribute]
public virtual void set_AccessTokenSecret(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public virtual void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefIdStr();
    [CompilerGeneratedAttribute]
public virtual void set_RefIdStr(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.AutoApplyAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    public string Name { get; }
    public String[] Args { get; }
    public AutoApplyAttribute(string name, String[] args);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public String[] get_Args();
}
[AttributeUsageAttribute("132")]
public class ServiceStack.AutoDefaultAttribute : ScriptValueAttribute {
}
[AttributeUsageAttribute("4")]
public class ServiceStack.AutoFilterAttribute : ScriptValueAttribute {
    [CompilerGeneratedAttribute]
private QueryTerm <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueFormat>k__BackingField;
    public QueryTerm Term { get; public set; }
    public string Field { get; public set; }
    public string Operand { get; public set; }
    public string Template { get; public set; }
    public string ValueFormat { get; public set; }
    public AutoFilterAttribute(string field);
    public AutoFilterAttribute(string field, string template);
    public AutoFilterAttribute(QueryTerm term, string field);
    public AutoFilterAttribute(QueryTerm term, string field, string template);
    [CompilerGeneratedAttribute]
public QueryTerm get_Term();
    [CompilerGeneratedAttribute]
public void set_Term(QueryTerm value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(string value);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ValueFormat();
    [CompilerGeneratedAttribute]
public void set_ValueFormat(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.AutoIgnoreAttribute : AttributeBase {
}
[AttributeUsageAttribute("132")]
public class ServiceStack.AutoMapAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    public string To { get; public set; }
    public AutoMapAttribute(string to);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.AutoPopulateAttribute : ScriptValueAttribute {
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    public string Field { get; public set; }
    public AutoPopulateAttribute(string field);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.AutoQueryViewerAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrandUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrandImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackgroundImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSearchField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSearchType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSearchText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultFields>k__BackingField;
    public string Name { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string IconUrl { get; public set; }
    public string BrandUrl { get; public set; }
    public string BrandImageUrl { get; public set; }
    public string TextColor { get; public set; }
    public string LinkColor { get; public set; }
    public string BackgroundColor { get; public set; }
    public string BackgroundImageUrl { get; public set; }
    public string DefaultSearchField { get; public set; }
    public string DefaultSearchType { get; public set; }
    public string DefaultSearchText { get; public set; }
    public string DefaultFields { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(string value);
    [CompilerGeneratedAttribute]
public string get_BrandUrl();
    [CompilerGeneratedAttribute]
public void set_BrandUrl(string value);
    [CompilerGeneratedAttribute]
public string get_BrandImageUrl();
    [CompilerGeneratedAttribute]
public void set_BrandImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(string value);
    [CompilerGeneratedAttribute]
public string get_LinkColor();
    [CompilerGeneratedAttribute]
public void set_LinkColor(string value);
    [CompilerGeneratedAttribute]
public string get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(string value);
    [CompilerGeneratedAttribute]
public string get_BackgroundImageUrl();
    [CompilerGeneratedAttribute]
public void set_BackgroundImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSearchField();
    [CompilerGeneratedAttribute]
public void set_DefaultSearchField(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSearchType();
    [CompilerGeneratedAttribute]
public void set_DefaultSearchType(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSearchText();
    [CompilerGeneratedAttribute]
public void set_DefaultSearchText(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultFields();
    [CompilerGeneratedAttribute]
public void set_DefaultFields(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.AutoQueryViewerFieldAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideInSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutHint>k__BackingField;
    public string Title { get; public set; }
    public string Description { get; public set; }
    public bool HideInSummary { get; public set; }
    public string ValueFormat { get; public set; }
    public string LayoutHint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_HideInSummary();
    [CompilerGeneratedAttribute]
public void set_HideInSummary(bool value);
    [CompilerGeneratedAttribute]
public string get_ValueFormat();
    [CompilerGeneratedAttribute]
public void set_ValueFormat(string value);
    [CompilerGeneratedAttribute]
public string get_LayoutHint();
    [CompilerGeneratedAttribute]
public void set_LayoutHint(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.AutoUpdateAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private AutoUpdateStyle <Style>k__BackingField;
    public AutoUpdateStyle Style { get; public set; }
    public AutoUpdateAttribute(AutoUpdateStyle style);
    [CompilerGeneratedAttribute]
public AutoUpdateStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(AutoUpdateStyle value);
}
public enum ServiceStack.AutoUpdateStyle : Enum {
    public int value__;
    public static AutoUpdateStyle Always;
    public static AutoUpdateStyle NonDefaults;
}
public static class ServiceStack.Behavior : object {
    public static string AuditQuery;
    public static string AuditCreate;
    public static string AuditModify;
    public static string AuditDelete;
    public static string AuditSoftDelete;
}
[DataContractAttribute]
public class ServiceStack.BoolResponse : object {
    [CompilerGeneratedAttribute]
private bool <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public bool Result { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
public interface ServiceStack.Caching.ICacheClient {
    public abstract virtual bool Remove(string key);
    public abstract virtual void RemoveAll(IEnumerable`1<string> keys);
    public abstract virtual T Get(string key);
    public abstract virtual long Increment(string key, UInt32 amount);
    public abstract virtual long Decrement(string key, UInt32 amount);
    public abstract virtual bool Add(string key, T value);
    public abstract virtual bool Set(string key, T value);
    public abstract virtual bool Replace(string key, T value);
    public abstract virtual bool Add(string key, T value, DateTime expiresAt);
    public abstract virtual bool Set(string key, T value, DateTime expiresAt);
    public abstract virtual bool Replace(string key, T value, DateTime expiresAt);
    public abstract virtual bool Add(string key, T value, TimeSpan expiresIn);
    public abstract virtual bool Set(string key, T value, TimeSpan expiresIn);
    public abstract virtual bool Replace(string key, T value, TimeSpan expiresIn);
    public abstract virtual void FlushAll();
    public abstract virtual IDictionary`2<string, T> GetAll(IEnumerable`1<string> keys);
    public abstract virtual void SetAll(IDictionary`2<string, T> values);
}
public interface ServiceStack.Caching.ICacheClientAsync {
    public abstract virtual Task`1<bool> RemoveAsync(string key, CancellationToken token);
    public abstract virtual Task RemoveAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    public abstract virtual Task`1<T> GetAsync(string key, CancellationToken token);
    public abstract virtual Task`1<long> IncrementAsync(string key, UInt32 amount, CancellationToken token);
    public abstract virtual Task`1<long> DecrementAsync(string key, UInt32 amount, CancellationToken token);
    public abstract virtual Task`1<bool> AddAsync(string key, T value, CancellationToken token);
    public abstract virtual Task`1<bool> SetAsync(string key, T value, CancellationToken token);
    public abstract virtual Task`1<bool> ReplaceAsync(string key, T value, CancellationToken token);
    public abstract virtual Task`1<bool> AddAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    public abstract virtual Task`1<bool> SetAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    public abstract virtual Task`1<bool> ReplaceAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    public abstract virtual Task`1<bool> AddAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    public abstract virtual Task`1<bool> SetAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    public abstract virtual Task`1<bool> ReplaceAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    public abstract virtual Task FlushAllAsync(CancellationToken token);
    public abstract virtual Task`1<IDictionary`2<string, T>> GetAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    public abstract virtual Task SetAllAsync(IDictionary`2<string, T> values, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<TimeSpan>> GetTimeToLiveAsync(string key, CancellationToken token);
    public abstract virtual IAsyncEnumerable`1<string> GetKeysByPatternAsync(string pattern, CancellationToken token);
    public abstract virtual Task RemoveExpiredEntriesAsync(CancellationToken token);
}
public interface ServiceStack.Caching.ICacheClientExtended {
    public abstract virtual Nullable`1<TimeSpan> GetTimeToLive(string key);
    public abstract virtual IEnumerable`1<string> GetKeysByPattern(string pattern);
    public abstract virtual void RemoveExpiredEntries();
}
[ObsoleteAttribute("Use DeflateCompressor and IStreamCompressor")]
public interface ServiceStack.Caching.IDeflateProvider {
    public abstract virtual Byte[] Deflate(string text);
    public abstract virtual Byte[] Deflate(Byte[] bytes);
    public abstract virtual string Inflate(Byte[] gzBuffer);
    public abstract virtual Byte[] InflateBytes(Byte[] gzBuffer);
    public abstract virtual Stream DeflateStream(Stream outputStream);
    public abstract virtual Stream InflateStream(Stream inputStream);
}
[ObsoleteAttribute("Use GZipCompressor and IStreamCompressor")]
public interface ServiceStack.Caching.IGZipProvider {
    public abstract virtual Byte[] GZip(string text);
    public abstract virtual Byte[] GZip(Byte[] bytes);
    public abstract virtual string GUnzip(Byte[] gzBuffer);
    public abstract virtual Byte[] GUnzipBytes(Byte[] gzBuffer);
    public abstract virtual Stream GZipStream(Stream outputStream);
    public abstract virtual Stream GUnzipStream(Stream gzStream);
}
public interface ServiceStack.Caching.IMemcachedClient {
    public abstract virtual bool Remove(string key);
    public abstract virtual void RemoveAll(IEnumerable`1<string> keys);
    public abstract virtual object Get(string key);
    public abstract virtual object Get(string key, UInt64& lastModifiedValue);
    public abstract virtual long Increment(string key, UInt32 amount);
    public abstract virtual long Decrement(string key, UInt32 amount);
    public abstract virtual bool Add(string key, object value);
    public abstract virtual bool Set(string key, object value);
    public abstract virtual bool Replace(string key, object value);
    public abstract virtual bool Add(string key, object value, DateTime expiresAt);
    public abstract virtual bool Set(string key, object value, DateTime expiresAt);
    public abstract virtual bool Replace(string key, object value, DateTime expiresAt);
    public abstract virtual void FlushAll();
    public abstract virtual IDictionary`2<string, object> GetAll(IEnumerable`1<string> keys);
    public abstract virtual bool CheckAndSet(string key, object value, ulong lastModifiedValue);
    public abstract virtual bool CheckAndSet(string key, object value, ulong lastModifiedValue, DateTime expiresAt);
    public abstract virtual IDictionary`2<string, object> GetAll(IEnumerable`1<string> keys, IDictionary`2& lastModifiedValues);
}
public interface ServiceStack.Caching.IRemoveByPattern {
    public abstract virtual void RemoveByPattern(string pattern);
    public abstract virtual void RemoveByRegex(string regex);
}
public interface ServiceStack.Caching.IRemoveByPatternAsync {
    public abstract virtual Task RemoveByPatternAsync(string pattern, CancellationToken token);
    public abstract virtual Task RemoveByRegexAsync(string regex, CancellationToken token);
}
[DefaultMemberAttribute("Item")]
public interface ServiceStack.Caching.ISession {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    public abstract virtual void Set(string key, T value);
    public abstract virtual T Get(string key);
    public abstract virtual bool Remove(string key);
    public abstract virtual void RemoveAll();
}
public interface ServiceStack.Caching.ISessionAsync {
    public abstract virtual Task SetAsync(string key, T value, CancellationToken token);
    public abstract virtual Task`1<T> GetAsync(string key, CancellationToken token);
    public abstract virtual Task`1<bool> RemoveAsync(string key, CancellationToken token);
    public abstract virtual Task RemoveAllAsync(CancellationToken token);
}
public interface ServiceStack.Caching.ISessionFactory {
    public abstract virtual ISession GetOrCreateSession(IRequest httpReq, IResponse httpRes);
    public abstract virtual ISessionAsync GetOrCreateSessionAsync(IRequest httpReq, IResponse httpRes);
    public abstract virtual ISession GetOrCreateSession();
    public abstract virtual ISessionAsync GetOrCreateSessionAsync();
    public abstract virtual ISession CreateSession(string sessionId);
    public abstract virtual ISessionAsync CreateSessionAsync(string sessionId);
}
[NullableContextAttribute("1")]
public interface ServiceStack.Caching.IStreamCompressor {
    public string Encoding { get; }
    public abstract virtual string get_Encoding();
    public abstract virtual Byte[] Compress(string text, Encoding encoding);
    public abstract virtual Byte[] Compress(Byte[] bytes);
    public abstract virtual Stream Compress(Stream outputStream, bool leaveOpen);
    public abstract virtual string Decompress(Byte[] zipBuffer, Encoding encoding);
    public abstract virtual Stream Decompress(Stream zipBuffer, bool leaveOpen);
    public abstract virtual Byte[] DecompressBytes(Byte[] zipBuffer);
}
public enum ServiceStack.CallStyle : Enum {
    public long value__;
    public static CallStyle OneWay;
    public static CallStyle Reply;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class ServiceStack.CommandAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    public Type CommandType { get; }
    public CommandAttribute(Type commandType);
    [CompilerGeneratedAttribute]
public Type get_CommandType();
}
[AttributeUsageAttribute("128")]
public class ServiceStack.CommandAttribute`1 : CommandAttribute {
}
public interface ServiceStack.Commands.ICommand {
    public abstract virtual void Execute();
}
public interface ServiceStack.Commands.ICommand`1 {
    public abstract virtual ReturnType Execute();
}
public interface ServiceStack.Commands.ICommandExec {
}
public interface ServiceStack.Commands.ICommandList`1 {
}
public interface ServiceStack.Configuration.IAppSettings {
    public abstract virtual Dictionary`2<string, string> GetAll();
    public abstract virtual List`1<string> GetAllKeys();
    public abstract virtual bool Exists(string key);
    public abstract virtual void Set(string key, T value);
    public abstract virtual string GetString(string name);
    public abstract virtual IList`1<string> GetList(string key);
    public abstract virtual IDictionary`2<string, string> GetDictionary(string key);
    public abstract virtual List`1<KeyValuePair`2<string, string>> GetKeyValuePairs(string key);
    public abstract virtual T Get(string name);
    public abstract virtual T Get(string name, T defaultValue);
}
public interface ServiceStack.Configuration.IContainerAdapter {
    public abstract virtual T Resolve();
}
public interface ServiceStack.Configuration.IHasResolver {
    public IResolver Resolver { get; }
    public abstract virtual IResolver get_Resolver();
}
public interface ServiceStack.Configuration.IRelease {
    public abstract virtual void Release(object instance);
}
public interface ServiceStack.Configuration.IResolver {
    public abstract virtual T TryResolve();
}
public interface ServiceStack.Configuration.IRuntimeAppSettings {
    public abstract virtual T Get(IRequest request, string name, T defaultValue);
}
public interface ServiceStack.Configuration.ITypeFactory {
    public abstract virtual object CreateInstance(IResolver resolver, Type type);
}
public enum ServiceStack.CurrencyDisplay : Enum {
    public int value__;
    public static CurrencyDisplay Undefined;
    public static CurrencyDisplay Symbol;
    public static CurrencyDisplay NarrowSymbol;
    public static CurrencyDisplay Code;
    public static CurrencyDisplay Name;
}
public enum ServiceStack.CurrencySign : Enum {
    public int value__;
    public static CurrencySign Undefined;
    public static CurrencySign Accounting;
    public static CurrencySign Standard;
}
public class ServiceStack.Data.DataException : Exception {
    public DataException(string message);
    public DataException(string message, Exception innerException);
}
public interface ServiceStack.Data.IEntityStore {
    public abstract virtual T GetById(object id);
    public abstract virtual IList`1<T> GetByIds(ICollection ids);
    public abstract virtual T Store(T entity);
    public abstract virtual void StoreAll(IEnumerable`1<TEntity> entities);
    public abstract virtual void Delete(T entity);
    public abstract virtual void DeleteById(object id);
    public abstract virtual void DeleteByIds(ICollection ids);
    public abstract virtual void DeleteAll();
}
public interface ServiceStack.Data.IEntityStore`1 {
    public abstract virtual T GetById(object id);
    public abstract virtual IList`1<T> GetByIds(IEnumerable ids);
    public abstract virtual IList`1<T> GetAll();
    public abstract virtual T Store(T entity);
    public abstract virtual void StoreAll(IEnumerable`1<T> entities);
    public abstract virtual void Delete(T entity);
    public abstract virtual void DeleteById(object id);
    public abstract virtual void DeleteByIds(IEnumerable ids);
    public abstract virtual void DeleteAll();
}
public interface ServiceStack.Data.IEntityStoreAsync {
    public abstract virtual Task`1<T> GetByIdAsync(object id, CancellationToken token);
    public abstract virtual Task`1<IList`1<T>> GetByIdsAsync(ICollection ids, CancellationToken token);
    public abstract virtual Task`1<T> StoreAsync(T entity, CancellationToken token);
    public abstract virtual Task StoreAllAsync(IEnumerable`1<TEntity> entities, CancellationToken token);
    public abstract virtual Task DeleteAsync(T entity, CancellationToken token);
    public abstract virtual Task DeleteByIdAsync(object id, CancellationToken token);
    public abstract virtual Task DeleteByIdsAsync(ICollection ids, CancellationToken token);
    public abstract virtual Task DeleteAllAsync(CancellationToken token);
}
public interface ServiceStack.Data.IEntityStoreAsync`1 {
    public abstract virtual Task`1<T> GetByIdAsync(object id, CancellationToken token);
    public abstract virtual Task`1<IList`1<T>> GetByIdsAsync(IEnumerable ids, CancellationToken token);
    public abstract virtual Task`1<IList`1<T>> GetAllAsync(CancellationToken token);
    public abstract virtual Task`1<T> StoreAsync(T entity, CancellationToken token);
    public abstract virtual Task StoreAllAsync(IEnumerable`1<T> entities, CancellationToken token);
    public abstract virtual Task DeleteAsync(T entity, CancellationToken token);
    public abstract virtual Task DeleteByIdAsync(object id, CancellationToken token);
    public abstract virtual Task DeleteByIdsAsync(IEnumerable ids, CancellationToken token);
    public abstract virtual Task DeleteAllAsync(CancellationToken token);
}
public class ServiceStack.Data.OptimisticConcurrencyException : DataException {
    public OptimisticConcurrencyException(string message);
    public OptimisticConcurrencyException(string message, Exception innerException);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.AddColumnAttribute : AlterColumnAttribute {
}
[AttributeUsageAttribute("460")]
public class ServiceStack.DataAnnotations.AliasAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public AliasAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public abstract class ServiceStack.DataAnnotations.AlterColumnAttribute : AttributeBase {
}
[AttributeUsageAttribute("384")]
public class ServiceStack.DataAnnotations.AutoIdAttribute : AttributeBase {
}
[AttributeUsageAttribute("384")]
public class ServiceStack.DataAnnotations.AutoIncrementAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.BelongToAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Type <BelongToTableType>k__BackingField;
    public Type BelongToTableType { get; public set; }
    public BelongToAttribute(Type belongToTableType);
    [CompilerGeneratedAttribute]
public Type get_BelongToTableType();
    [CompilerGeneratedAttribute]
public void set_BelongToTableType(Type value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.CheckConstraintAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Constraint>k__BackingField;
    public string Constraint { get; }
    public CheckConstraintAttribute(string constraint);
    [CompilerGeneratedAttribute]
public string get_Constraint();
}
[AttributeUsageAttribute("12")]
public class ServiceStack.DataAnnotations.CompositeIndexAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private List`1<string> <FieldNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unique>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public List`1<string> FieldNames { get; public set; }
    public bool Unique { get; public set; }
    public string Name { get; public set; }
    public CompositeIndexAttribute(String[] fieldNames);
    public CompositeIndexAttribute(bool unique, String[] fieldNames);
    [CompilerGeneratedAttribute]
public List`1<string> get_FieldNames();
    [CompilerGeneratedAttribute]
public void set_FieldNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Unique();
    [CompilerGeneratedAttribute]
public void set_Unique(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("12")]
public class ServiceStack.DataAnnotations.CompositeKeyAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private List`1<string> <FieldNames>k__BackingField;
    public List`1<string> FieldNames { get; public set; }
    public CompositeKeyAttribute(String[] fieldNames);
    [CompilerGeneratedAttribute]
public List`1<string> get_FieldNames();
    [CompilerGeneratedAttribute]
public void set_FieldNames(List`1<string> value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.ComputeAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    public string Expression { get; public set; }
    public ComputeAttribute(string expression);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.ComputedAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.CustomFieldAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public string Sql { get; public set; }
    public int Order { get; public set; }
    public CustomFieldAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.CustomInsertAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    public CustomInsertAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.CustomSelectAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    public CustomSelectAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.CustomUpdateAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    public CustomUpdateAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.DecimalLengthAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public int Precision { get; public set; }
    public int Scale { get; public set; }
    public DecimalLengthAttribute(int precision, int scale);
    public DecimalLengthAttribute(int precision);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(int value);
}
[AttributeUsageAttribute("384")]
public class ServiceStack.DataAnnotations.DefaultAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <IntValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DoubleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DefaultType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WithConstraint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnUpdate>k__BackingField;
    public int IntValue { get; public set; }
    public double DoubleValue { get; public set; }
    public Type DefaultType { get; public set; }
    public string DefaultValue { get; public set; }
    public string WithConstraint { get; public set; }
    public bool OnUpdate { get; public set; }
    public DefaultAttribute(int intValue);
    public DefaultAttribute(double doubleValue);
    public DefaultAttribute(string defaultValue);
    public DefaultAttribute(Type defaultType, string defaultValue);
    [CompilerGeneratedAttribute]
public int get_IntValue();
    [CompilerGeneratedAttribute]
public void set_IntValue(int value);
    [CompilerGeneratedAttribute]
public double get_DoubleValue();
    [CompilerGeneratedAttribute]
public void set_DoubleValue(double value);
    [CompilerGeneratedAttribute]
public Type get_DefaultType();
    [CompilerGeneratedAttribute]
public void set_DefaultType(Type value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public string get_WithConstraint();
    [CompilerGeneratedAttribute]
public void set_WithConstraint(string value);
    [CompilerGeneratedAttribute]
public bool get_OnUpdate();
    [CompilerGeneratedAttribute]
public void set_OnUpdate(bool value);
}
public class ServiceStack.DataAnnotations.DescriptionAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; public set; }
    public DescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[AttributeUsageAttribute("16")]
public class ServiceStack.DataAnnotations.EnumAsCharAttribute : AttributeBase {
}
[AttributeUsageAttribute("16")]
public class ServiceStack.DataAnnotations.EnumAsIntAttribute : AttributeBase {
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.ExcludeAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Feature <Feature>k__BackingField;
    public Feature Feature { get; public set; }
    public ExcludeAttribute(Feature feature);
    [CompilerGeneratedAttribute]
public Feature get_Feature();
    [CompilerGeneratedAttribute]
public void set_Feature(Feature value);
}
[AttributeUsageAttribute("132")]
public class ServiceStack.DataAnnotations.ExcludeFromDescriptionAttribute : AttributeBase {
}
[AttributeUsageAttribute("132")]
public class ServiceStack.DataAnnotations.ExcludeMetadataAttribute : ExcludeAttribute {
}
[AttributeUsageAttribute("132")]
public class ServiceStack.DataAnnotations.ExplicitAutoQuery : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.ForeignKeyAttribute : ReferencesAttribute {
    [CompilerGeneratedAttribute]
private string <OnDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignKeyName>k__BackingField;
    public string OnDelete { get; public set; }
    public string OnUpdate { get; public set; }
    public string ForeignKeyName { get; public set; }
    public ForeignKeyAttribute(Type type);
    [CompilerGeneratedAttribute]
public string get_OnDelete();
    [CompilerGeneratedAttribute]
public void set_OnDelete(string value);
    [CompilerGeneratedAttribute]
public string get_OnUpdate();
    [CompilerGeneratedAttribute]
public void set_OnUpdate(string value);
    [CompilerGeneratedAttribute]
public string get_ForeignKeyName();
    [CompilerGeneratedAttribute]
public void set_ForeignKeyName(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.HashKeyAttribute : AttributeBase {
}
[AttributeUsageAttribute("460")]
public class ServiceStack.DataAnnotations.IdAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public IdAttribute(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.IgnoreAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.IgnoreOnInsertAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.IgnoreOnSelectAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.IgnoreOnUpdateAttribute : AttributeBase {
}
[AttributeUsageAttribute("396")]
public class ServiceStack.DataAnnotations.IndexAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unique>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clustered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonClustered>k__BackingField;
    public string Name { get; public set; }
    public bool Unique { get; public set; }
    public bool Clustered { get; public set; }
    public bool NonClustered { get; public set; }
    public IndexAttribute(bool unique);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Unique();
    [CompilerGeneratedAttribute]
public void set_Unique(bool value);
    [CompilerGeneratedAttribute]
public bool get_Clustered();
    [CompilerGeneratedAttribute]
public void set_Clustered(bool value);
    [CompilerGeneratedAttribute]
public bool get_NonClustered();
    [CompilerGeneratedAttribute]
public void set_NonClustered(bool value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.MapColumnAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    public string Table { get; public set; }
    public string Column { get; public set; }
    public MapColumnAttribute(string table, string column);
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
}
public class ServiceStack.DataAnnotations.MetaAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public MetaAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.PersistedAttribute : AttributeBase {
}
public class ServiceStack.DataAnnotations.PgSqlBigIntArrayAttribute : PgSqlLongArrayAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlDecimalArrayAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlDoubleArrayAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlFloatArrayAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlHStoreAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlIntArrayAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlJsonAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlJsonBAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlLongArrayAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlShortArrayAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlTextArrayAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlTimestampArrayAttribute : CustomFieldAttribute {
}
[ObsoleteAttribute("Use [PgSqlTimestampArray]")]
public class ServiceStack.DataAnnotations.PgSqlTimestampAttribute : CustomFieldAttribute {
}
public class ServiceStack.DataAnnotations.PgSqlTimestampTzArrayAttribute : CustomFieldAttribute {
}
[ObsoleteAttribute("Use [PgSqlTimestampTzArray]")]
public class ServiceStack.DataAnnotations.PgSqlTimestampTzAttribute : CustomFieldAttribute {
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.PostCreateTableAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    public PostCreateTableAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.PostDropTableAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    public PostDropTableAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.PreCreateTableAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    public PreCreateTableAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.PreDropTableAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    public PreDropTableAttribute(string sql);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.PrimaryKeyAttribute : AttributeBase {
}
public class ServiceStack.DataAnnotations.RangeAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private object <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OperandType>k__BackingField;
    public object Minimum { get; private set; }
    public object Maximum { get; private set; }
    public Type OperandType { get; private set; }
    public RangeAttribute(int minimum, int maximum);
    public RangeAttribute(double minimum, double maximum);
    public RangeAttribute(Type type, string minimum, string maximum);
    [CompilerGeneratedAttribute]
public object get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(object value);
    [CompilerGeneratedAttribute]
public object get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(object value);
    [CompilerGeneratedAttribute]
public Type get_OperandType();
    [CompilerGeneratedAttribute]
private void set_OperandType(Type value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.RangeKeyAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.ReferenceAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.ReferenceFieldAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Type <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    public Type Model { get; public set; }
    public string Id { get; public set; }
    public string Field { get; public set; }
    public ReferenceFieldAttribute(Type model, string id);
    public ReferenceFieldAttribute(Type model, string id, string field);
    [CompilerGeneratedAttribute]
public Type get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(Type value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
}
[AttributeUsageAttribute("396")]
public class ServiceStack.DataAnnotations.ReferencesAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    public ReferencesAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.RemoveColumnAttribute : AlterColumnAttribute {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.RenameColumnAttribute : AlterColumnAttribute {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    public string From { get; }
    public RenameColumnAttribute(string from);
    [CompilerGeneratedAttribute]
public string get_From();
}
public class ServiceStack.DataAnnotations.RequiredAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.ReturnOnInsertAttribute : AttributeBase {
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.RowVersionAttribute : AttributeBase {
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.SchemaAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public SchemaAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.SequenceAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public SequenceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.SqlServerBucketCountAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; public set; }
    public SqlServerBucketCountAttribute(int count);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.SqlServerCollateAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    public string Collation { get; public set; }
    public SqlServerCollateAttribute(string collation);
    [CompilerGeneratedAttribute]
public string get_Collation();
    [CompilerGeneratedAttribute]
public void set_Collation(string value);
}
public enum ServiceStack.DataAnnotations.SqlServerDurability : Enum {
    public int value__;
    public static SqlServerDurability SchemaOnly;
    public static SqlServerDurability SchemaAndData;
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.SqlServerFileTableAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <FileTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileTableCollateFileName>k__BackingField;
    public string FileTableDirectory { get; internal set; }
    public string FileTableCollateFileName { get; internal set; }
    public SqlServerFileTableAttribute(string directory, string collateFileName);
    [CompilerGeneratedAttribute]
public string get_FileTableDirectory();
    [CompilerGeneratedAttribute]
internal void set_FileTableDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_FileTableCollateFileName();
    [CompilerGeneratedAttribute]
internal void set_FileTableCollateFileName(string value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DataAnnotations.SqlServerMemoryOptimizedAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Nullable`1<SqlServerDurability> <Durability>k__BackingField;
    public Nullable`1<SqlServerDurability> Durability { get; public set; }
    public SqlServerMemoryOptimizedAttribute(SqlServerDurability durability);
    [CompilerGeneratedAttribute]
public Nullable`1<SqlServerDurability> get_Durability();
    [CompilerGeneratedAttribute]
public void set_Durability(Nullable`1<SqlServerDurability> value);
}
public class ServiceStack.DataAnnotations.StringLengthAttribute : AttributeBase {
    public static int MaxText;
    [CompilerGeneratedAttribute]
private int <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumLength>k__BackingField;
    public int MinimumLength { get; public set; }
    public int MaximumLength { get; public set; }
    public StringLengthAttribute(int maximumLength);
    public StringLengthAttribute(int minimumLength, int maximumLength);
    [CompilerGeneratedAttribute]
public int get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(int value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DataAnnotations.UniqueAttribute : AttributeBase {
}
[AttributeUsageAttribute("12")]
public class ServiceStack.DataAnnotations.UniqueConstraintAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private List`1<string> <FieldNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public List`1<string> FieldNames { get; public set; }
    public string Name { get; public set; }
    public UniqueConstraintAttribute(String[] fieldNames);
    [CompilerGeneratedAttribute]
public List`1<string> get_FieldNames();
    [CompilerGeneratedAttribute]
public void set_FieldNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("460")]
public class ServiceStack.DataAnnotations.UniqueIdAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public UniqueIdAttribute(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
}
public enum ServiceStack.DateMonth : Enum {
    public int value__;
    public static DateMonth Undefined;
    public static DateMonth Numeric;
    public static DateMonth Digits2;
    public static DateMonth Narrow;
    public static DateMonth Short;
    public static DateMonth Long;
}
public enum ServiceStack.DatePart : Enum {
    public int value__;
    public static DatePart Undefined;
    public static DatePart Numeric;
    public static DatePart Digits2;
}
public enum ServiceStack.DateStyle : Enum {
    public int value__;
    public static DateStyle Undefined;
    public static DateStyle Full;
    public static DateStyle Long;
    public static DateStyle Medium;
    public static DateStyle Short;
}
public enum ServiceStack.DateText : Enum {
    public int value__;
    public static DateText Undefined;
    public static DateText Narrow;
    public static DateText Short;
    public static DateText Long;
}
[AttributeUsageAttribute("128")]
public class ServiceStack.DenyResetAttribute : AttributeBase {
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitCodeAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Lang <Lang>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Statements>k__BackingField;
    public Lang Lang { get; public set; }
    public String[] Statements { get; public set; }
    public EmitCodeAttribute(Lang lang, string statement);
    public EmitCodeAttribute(Lang lang, String[] statements);
    [CompilerGeneratedAttribute]
public Lang get_Lang();
    [CompilerGeneratedAttribute]
public void set_Lang(Lang value);
    [CompilerGeneratedAttribute]
public String[] get_Statements();
    [CompilerGeneratedAttribute]
public void set_Statements(String[] value);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitCSharp : EmitCodeAttribute {
    public EmitCSharp(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitDart : EmitCodeAttribute {
    public EmitDart(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitFSharp : EmitCodeAttribute {
    public EmitFSharp(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitJava : EmitCodeAttribute {
    public EmitJava(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitKotlin : EmitCodeAttribute {
    public EmitKotlin(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitPhp : EmitCodeAttribute {
    public EmitPhp(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitPython : EmitCodeAttribute {
    public EmitPython(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitSwift : EmitCodeAttribute {
    public EmitSwift(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitTypeScript : EmitCodeAttribute {
    public EmitTypeScript(String[] statements);
}
[AttributeUsageAttribute("140")]
public class ServiceStack.EmitVb : EmitCodeAttribute {
    public EmitVb(String[] statements);
}
[DataContractAttribute]
public class ServiceStack.EmptyResponse : object {
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
public enum ServiceStack.Endpoint : Enum {
    public long value__;
    public static Endpoint Http;
    public static Endpoint Mq;
    public static Endpoint Tcp;
    public static Endpoint Other;
}
[DataContractAttribute]
public class ServiceStack.ErrorResponse : object {
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class ServiceStack.ExplorerCssAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Form>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fieldset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    public string Form { get; public set; }
    public string Fieldset { get; public set; }
    public string Field { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Form();
    [CompilerGeneratedAttribute]
public void set_Form(string value);
    [CompilerGeneratedAttribute]
public string get_Fieldset();
    [CompilerGeneratedAttribute]
public void set_Fieldset(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.FallbackRouteAttribute : RouteAttribute {
    public FallbackRouteAttribute(string path);
    public FallbackRouteAttribute(string path, string verbs);
}
[FlagsAttribute]
public enum ServiceStack.Feature : Enum {
    public int value__;
    public static Feature None;
    public static Feature All;
    public static Feature Soap;
    public static Feature Metadata;
    public static Feature PredefinedRoutes;
    public static Feature RequestInfo;
    public static Feature Json;
    public static Feature Xml;
    public static Feature Jsv;
    public static Feature Soap11;
    public static Feature Soap12;
    public static Feature Csv;
    public static Feature Html;
    public static Feature CustomFormat;
    public static Feature Markdown;
    public static Feature Razor;
    public static Feature ProtoBuf;
    public static Feature MsgPack;
    public static Feature Jsonl;
    public static Feature Grpc;
    public static Feature ServiceDiscovery;
    public static Feature Validation;
    public static Feature ApiExplorer;
}
[AttributeUsageAttribute("4")]
public class ServiceStack.FieldAttribute : InputAttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldCss>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputCss>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelCss>k__BackingField;
    public string Name { get; public set; }
    public string FieldCss { get; public set; }
    public string InputCss { get; public set; }
    public string LabelCss { get; public set; }
    public FieldAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FieldCss();
    [CompilerGeneratedAttribute]
public void set_FieldCss(string value);
    [CompilerGeneratedAttribute]
public string get_InputCss();
    [CompilerGeneratedAttribute]
public void set_InputCss(string value);
    [CompilerGeneratedAttribute]
public string get_LabelCss();
    [CompilerGeneratedAttribute]
public void set_LabelCss(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class ServiceStack.FieldCssAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public string Field { get; public set; }
    public string Input { get; public set; }
    public string Label { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
}
public enum ServiceStack.Format : Enum {
    public long value__;
    public static Format Soap11;
    public static Format Soap12;
    public static Format Xml;
    public static Format Json;
    public static Format Jsv;
    public static Format ProtoBuf;
    public static Format Csv;
    public static Format Html;
    public static Format Wire;
    public static Format MsgPack;
    public static Format Other;
}
[AttributeUsageAttribute("128")]
public class ServiceStack.FormatAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    public string Method { get; public set; }
    public string Options { get; public set; }
    public string Locale { get; public set; }
    public FormatAttribute(string method);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(string value);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
}
public class ServiceStack.FormatEnumFlags : FormatAttribute {
    public FormatEnumFlags(string type);
}
public static class ServiceStack.FormatMethods : object {
    public static string Currency;
    public static string Bytes;
    public static string Icon;
    public static string IconRounded;
    public static string Attachment;
    public static string Link;
    public static string LinkEmail;
    public static string LinkPhone;
    public static string EnumFlags;
    public static string Hidden;
}
public static class ServiceStack.GenerateBodyParameter : object {
    public static int IfNotDisabled;
    public static int Always;
    public static int Never;
}
public enum ServiceStack.Http : Enum {
    public long value__;
    public static Http Head;
    public static Http Get;
    public static Http Post;
    public static Http Put;
    public static Http Delete;
    public static Http Patch;
    public static Http Options;
    public static Http Other;
}
public interface ServiceStack.IAny`1 {
    public abstract virtual object Any(T request);
}
public interface ServiceStack.IAnyAsync`1 {
    public abstract virtual Task`1<object> AnyAsync(T request);
}
public interface ServiceStack.IAnyVoid`1 {
    public abstract virtual void Any(T request);
}
public interface ServiceStack.IAnyVoidAsync`1 {
    public abstract virtual Task AnyAsync(T request);
}
[NullableContextAttribute("1")]
public interface ServiceStack.IApiKey {
    public string Key { get; }
    [NullableAttribute("2")]
public string Environment { get; }
    public DateTime CreatedDate { get; }
    public Nullable`1<DateTime> ExpiryDate { get; }
    public Nullable`1<DateTime> CancelledDate { get; }
    public Nullable`1<int> RefId { get; }
    public string RefIdStr { get; }
    public abstract virtual string get_Key();
    [NullableContextAttribute("2")]
public abstract virtual string get_Environment();
    public abstract virtual DateTime get_CreatedDate();
    public abstract virtual Nullable`1<DateTime> get_ExpiryDate();
    public abstract virtual Nullable`1<DateTime> get_CancelledDate();
    public abstract virtual Nullable`1<int> get_RefId();
    public abstract virtual string get_RefIdStr();
    public abstract virtual bool HasScope(string scope);
    public abstract virtual bool HasFeature(string feature);
    public abstract virtual bool CanAccess(Type requestType);
}
[NullableContextAttribute("1")]
public interface ServiceStack.IApiKeyResolver {
    public abstract virtual string GetApiKeyToken(IRequest req);
}
[NullableContextAttribute("1")]
public interface ServiceStack.IApiKeySource {
    public abstract virtual Task`1<IApiKey> GetApiKeyAsync(string key);
}
public interface ServiceStack.IApiResponseDescription {
    public int StatusCode { get; }
    public string Description { get; }
    public abstract virtual int get_StatusCode();
    public abstract virtual string get_Description();
}
public interface ServiceStack.IAsyncCommand {
}
public interface ServiceStack.IAsyncCommand`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(T request);
}
[NullableContextAttribute("2")]
public interface ServiceStack.IAsyncCommand`2 {
}
[NullableContextAttribute("1")]
public interface ServiceStack.ICommandExecutor {
    public abstract virtual TCommand Command();
    public abstract virtual Task ExecuteAsync(IAsyncCommand`1<TRequest> command, TRequest request);
    public abstract virtual Task`1<TResult> ExecuteWithResultAsync(IAsyncCommand`2<TRequest, TResult> command, TRequest request);
}
public interface ServiceStack.ICompressor {
    public abstract virtual string Compress(string source);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.IconAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Svg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cls>k__BackingField;
    public string Svg { get; public set; }
    public string Uri { get; public set; }
    public string Alt { get; public set; }
    public string Cls { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Svg();
    [CompilerGeneratedAttribute]
public void set_Svg(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_Alt();
    [CompilerGeneratedAttribute]
public void set_Alt(string value);
    [CompilerGeneratedAttribute]
public string get_Cls();
    [CompilerGeneratedAttribute]
public void set_Cls(string value);
}
public interface ServiceStack.IContainer {
    public abstract virtual Func`1<object> CreateFactory(Type type);
    public abstract virtual IContainer AddSingleton(Type serviceType, Func`1<object> factory);
    public abstract virtual IContainer AddTransient(Type serviceType, Func`1<object> factory);
    public abstract virtual object Resolve(Type type);
    public abstract virtual bool Exists(Type type);
}
public interface ServiceStack.ICreateDb`1 {
}
public interface ServiceStack.ICrud {
}
public interface ServiceStack.IDelete {
}
public interface ServiceStack.IDelete`1 {
    public abstract virtual object Delete(T request);
}
public interface ServiceStack.IDeleteAsync`1 {
    public abstract virtual Task`1<object> DeleteAsync(T request);
}
public interface ServiceStack.IDeleteDb`1 {
}
public interface ServiceStack.IDeleteVoid`1 {
    public abstract virtual void Delete(T request);
}
public interface ServiceStack.IDeleteVoidAsync`1 {
    public abstract virtual Task DeleteAsync(T request);
}
[DataContractAttribute]
public class ServiceStack.IdResponse : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
public interface ServiceStack.IEncryptedClient {
    public string ServerPublicKeyXml { get; }
    public IJsonServiceClient Client { get; }
    public abstract virtual string get_ServerPublicKeyXml();
    public abstract virtual IJsonServiceClient get_Client();
    public abstract virtual TResponse Send(string httpMethod, object request);
    public abstract virtual TResponse Send(string httpMethod, IReturn`1<TResponse> request);
}
public interface ServiceStack.IGet {
}
public interface ServiceStack.IGet`1 {
    public abstract virtual object Get(T request);
}
public interface ServiceStack.IGetAsync`1 {
    public abstract virtual Task`1<object> GetAsync(T request);
}
public interface ServiceStack.IGetVoid`1 {
    public abstract virtual void Get(T request);
}
public interface ServiceStack.IGetVoidAsync`1 {
    public abstract virtual Task GetAsync(T request);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.IgnoreServicesAttribute : AttributeBase {
}
[NullableContextAttribute("2")]
public interface ServiceStack.IHasAuthSecret {
    public string AuthSecret { get; public set; }
    public abstract virtual string get_AuthSecret();
    public abstract virtual void set_AuthSecret(string value);
}
[NullableContextAttribute("2")]
public interface ServiceStack.IHasBearerToken {
    public string BearerToken { get; public set; }
    public abstract virtual string get_BearerToken();
    public abstract virtual void set_BearerToken(string value);
}
public interface ServiceStack.IHasCancellationToken {
    public CancellationToken Token { get; }
    public abstract virtual CancellationToken get_Token();
}
public interface ServiceStack.IHasErrorCode {
    public string ErrorCode { get; }
    public abstract virtual string get_ErrorCode();
}
public interface ServiceStack.IHasErrorStatus {
    public ResponseStatus Error { get; }
    public abstract virtual ResponseStatus get_Error();
}
public interface ServiceStack.IHasQueryParams {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> QueryParams { get; public set; }
    public abstract virtual Dictionary`2<string, string> get_QueryParams();
    public abstract virtual void set_QueryParams(Dictionary`2<string, string> value);
}
[NullableContextAttribute("2")]
public interface ServiceStack.IHasRefreshToken {
    public string RefreshToken { get; public set; }
    public abstract virtual string get_RefreshToken();
    public abstract virtual void set_RefreshToken(string value);
}
public interface ServiceStack.IHasRefreshTokenExpiry {
    public Nullable`1<DateTime> RefreshTokenExpiry { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_RefreshTokenExpiry();
    public abstract virtual void set_RefreshTokenExpiry(Nullable`1<DateTime> value);
}
public interface ServiceStack.IHasResponseStatus {
    public ResponseStatus ResponseStatus { get; public set; }
    public abstract virtual ResponseStatus get_ResponseStatus();
    public abstract virtual void set_ResponseStatus(ResponseStatus value);
}
[NullableContextAttribute("1")]
public interface ServiceStack.IHasResult`1 {
    public T Result { get; }
    public abstract virtual T get_Result();
}
[NullableContextAttribute("2")]
public interface ServiceStack.IHasSessionId {
    public string SessionId { get; public set; }
    public abstract virtual string get_SessionId();
    public abstract virtual void set_SessionId(string value);
}
public interface ServiceStack.IHasTraceId {
    public string TraceId { get; }
    public abstract virtual string get_TraceId();
}
public interface ServiceStack.IHasVersion {
    public int Version { get; public set; }
    public abstract virtual int get_Version();
    public abstract virtual void set_Version(int value);
}
public interface ServiceStack.IHtmlString {
    public abstract virtual string ToHtmlString();
}
public interface ServiceStack.IHttpRestClientAsync {
    public abstract virtual Task`1<TResponse> GetAsync(string relativeOrAbsoluteUrl, CancellationToken token);
    public abstract virtual Task`1<TResponse> DeleteAsync(string relativeOrAbsoluteUrl, CancellationToken token);
    public abstract virtual Task`1<TResponse> PostAsync(string relativeOrAbsoluteUrl, object request, CancellationToken token);
    public abstract virtual Task`1<TResponse> PutAsync(string relativeOrAbsoluteUrl, object request, CancellationToken token);
    public abstract virtual Task`1<TResponse> CustomMethodAsync(string httpVerb, string relativeOrAbsoluteUrl, object request, CancellationToken token);
    public abstract virtual Task`1<TResponse> SendAsync(string httpMethod, string absoluteUrl, object request, CancellationToken token);
}
public interface ServiceStack.IJoin {
}
public interface ServiceStack.IJoin`2 {
}
public interface ServiceStack.IJoin`3 {
}
public interface ServiceStack.IJoin`4 {
}
public interface ServiceStack.IJoin`5 {
}
public interface ServiceStack.IJsonServiceClient {
    public string BaseUri { get; }
    public abstract virtual string get_BaseUri();
}
public interface ServiceStack.ILeftJoin`2 {
}
public interface ServiceStack.ILeftJoin`3 {
}
public interface ServiceStack.ILeftJoin`4 {
}
public interface ServiceStack.ILeftJoin`5 {
}
public interface ServiceStack.IMeta {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> Meta { get; public set; }
    public abstract virtual Dictionary`2<string, string> get_Meta();
    public abstract virtual void set_Meta(Dictionary`2<string, string> value);
}
public class ServiceStack.InfoException : Exception {
    public InfoException(string message);
    public virtual string ToString();
}
[AttributeUsageAttribute("128")]
public class ServiceStack.InputAttribute : InputAttributeBase {
}
public class ServiceStack.InputAttributeBase : MetadataAttributeBase {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Help>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Autocomplete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Autofocus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Capture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AllowableValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <AllowableValuesEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvalAllowableValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvalAllowableEntries>k__BackingField;
    public string Type { get; public set; }
    public string Value { get; public set; }
    public string Placeholder { get; public set; }
    public string Help { get; public set; }
    public string Label { get; public set; }
    public string Title { get; public set; }
    public string Size { get; public set; }
    public string Pattern { get; public set; }
    public bool ReadOnly { get; public set; }
    public bool Required { get; public set; }
    public bool Disabled { get; public set; }
    public string Autocomplete { get; public set; }
    public string Autofocus { get; public set; }
    public string Min { get; public set; }
    public string Max { get; public set; }
    public string Step { get; public set; }
    public int MinLength { get; public set; }
    public int MaxLength { get; public set; }
    public string Accept { get; public set; }
    public string Capture { get; public set; }
    public bool Multiple { get; public set; }
    public String[] AllowableValues { get; public set; }
    public Type AllowableValuesEnum { get; public set; }
    public string Options { get; public set; }
    public bool Ignore { get; public set; }
    public string EvalAllowableValues { get; public set; }
    public string EvalAllowableEntries { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Help();
    [CompilerGeneratedAttribute]
public void set_Help(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Autocomplete();
    [CompilerGeneratedAttribute]
public void set_Autocomplete(string value);
    [CompilerGeneratedAttribute]
public string get_Autofocus();
    [CompilerGeneratedAttribute]
public void set_Autofocus(string value);
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
    [CompilerGeneratedAttribute]
public string get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(string value);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [CompilerGeneratedAttribute]
public void set_MinLength(int value);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public string get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(string value);
    [CompilerGeneratedAttribute]
public string get_Capture();
    [CompilerGeneratedAttribute]
public void set_Capture(string value);
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public String[] get_AllowableValues();
    [CompilerGeneratedAttribute]
public void set_AllowableValues(String[] value);
    [CompilerGeneratedAttribute]
public Type get_AllowableValuesEnum();
    [CompilerGeneratedAttribute]
public void set_AllowableValuesEnum(Type value);
    [CompilerGeneratedAttribute]
public string get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(string value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public string get_EvalAllowableValues();
    [CompilerGeneratedAttribute]
public void set_EvalAllowableValues(string value);
    [CompilerGeneratedAttribute]
public string get_EvalAllowableEntries();
    [CompilerGeneratedAttribute]
public void set_EvalAllowableEntries(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.Intl : MetadataAttributeBase {
    [CompilerGeneratedAttribute]
private IntlFormat <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private DateStyle <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeStyle <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private NumberStyle <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativeTimeStyle <RelativeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Numeric <Numeric>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Currency>k__BackingField;
    [CompilerGeneratedAttribute]
private CurrencyDisplay <CurrencyDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private CurrencySign <CurrencySign>k__BackingField;
    [CompilerGeneratedAttribute]
private SignDisplay <SignDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private RoundingMode <RoundingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitDisplay <UnitDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private Notation <Notation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumIntegerDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumFractionDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumFractionDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumSignificantDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumSignificantDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FractionalSecondDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private DateText <Weekday>k__BackingField;
    [CompilerGeneratedAttribute]
private DateText <Era>k__BackingField;
    [CompilerGeneratedAttribute]
private DatePart <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private DateMonth <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private DatePart <Day>k__BackingField;
    [CompilerGeneratedAttribute]
private DatePart <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private DatePart <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private DatePart <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private DateText <TimeZoneName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hour12>k__BackingField;
    public IntlFormat Type { get; public set; }
    public string Locale { get; public set; }
    public string Options { get; public set; }
    public DateStyle Date { get; public set; }
    public TimeStyle Time { get; public set; }
    public NumberStyle Number { get; public set; }
    public RelativeTimeStyle RelativeTime { get; public set; }
    public Numeric Numeric { get; public set; }
    public string Currency { get; public set; }
    public CurrencyDisplay CurrencyDisplay { get; public set; }
    public CurrencySign CurrencySign { get; public set; }
    public SignDisplay SignDisplay { get; public set; }
    public RoundingMode RoundingMode { get; public set; }
    public string Unit { get; public set; }
    public UnitDisplay UnitDisplay { get; public set; }
    public Notation Notation { get; public set; }
    public int MinimumIntegerDigits { get; public set; }
    public int MinimumFractionDigits { get; public set; }
    public int MaximumFractionDigits { get; public set; }
    public int MinimumSignificantDigits { get; public set; }
    public int MaximumSignificantDigits { get; public set; }
    public int FractionalSecondDigits { get; public set; }
    public DateText Weekday { get; public set; }
    public DateText Era { get; public set; }
    public DatePart Year { get; public set; }
    public DateMonth Month { get; public set; }
    public DatePart Day { get; public set; }
    public DatePart Hour { get; public set; }
    public DatePart Minute { get; public set; }
    public DatePart Second { get; public set; }
    public DateText TimeZoneName { get; public set; }
    public string TimeZone { get; public set; }
    public bool Hour12 { get; public set; }
    public Intl(IntlFormat type);
    [CompilerGeneratedAttribute]
public IntlFormat get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IntlFormat value);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public string get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(string value);
    [CompilerGeneratedAttribute]
public DateStyle get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateStyle value);
    [CompilerGeneratedAttribute]
public TimeStyle get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(TimeStyle value);
    [CompilerGeneratedAttribute]
public NumberStyle get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(NumberStyle value);
    [CompilerGeneratedAttribute]
public RelativeTimeStyle get_RelativeTime();
    [CompilerGeneratedAttribute]
public void set_RelativeTime(RelativeTimeStyle value);
    [CompilerGeneratedAttribute]
public Numeric get_Numeric();
    [CompilerGeneratedAttribute]
public void set_Numeric(Numeric value);
    [CompilerGeneratedAttribute]
public string get_Currency();
    [CompilerGeneratedAttribute]
public void set_Currency(string value);
    [CompilerGeneratedAttribute]
public CurrencyDisplay get_CurrencyDisplay();
    [CompilerGeneratedAttribute]
public void set_CurrencyDisplay(CurrencyDisplay value);
    [CompilerGeneratedAttribute]
public CurrencySign get_CurrencySign();
    [CompilerGeneratedAttribute]
public void set_CurrencySign(CurrencySign value);
    [CompilerGeneratedAttribute]
public SignDisplay get_SignDisplay();
    [CompilerGeneratedAttribute]
public void set_SignDisplay(SignDisplay value);
    [CompilerGeneratedAttribute]
public RoundingMode get_RoundingMode();
    [CompilerGeneratedAttribute]
public void set_RoundingMode(RoundingMode value);
    [CompilerGeneratedAttribute]
public string get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(string value);
    [CompilerGeneratedAttribute]
public UnitDisplay get_UnitDisplay();
    [CompilerGeneratedAttribute]
public void set_UnitDisplay(UnitDisplay value);
    [CompilerGeneratedAttribute]
public Notation get_Notation();
    [CompilerGeneratedAttribute]
public void set_Notation(Notation value);
    [CompilerGeneratedAttribute]
public int get_MinimumIntegerDigits();
    [CompilerGeneratedAttribute]
public void set_MinimumIntegerDigits(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumFractionDigits();
    [CompilerGeneratedAttribute]
public void set_MinimumFractionDigits(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumFractionDigits();
    [CompilerGeneratedAttribute]
public void set_MaximumFractionDigits(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumSignificantDigits();
    [CompilerGeneratedAttribute]
public void set_MinimumSignificantDigits(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumSignificantDigits();
    [CompilerGeneratedAttribute]
public void set_MaximumSignificantDigits(int value);
    [CompilerGeneratedAttribute]
public int get_FractionalSecondDigits();
    [CompilerGeneratedAttribute]
public void set_FractionalSecondDigits(int value);
    [CompilerGeneratedAttribute]
public DateText get_Weekday();
    [CompilerGeneratedAttribute]
public void set_Weekday(DateText value);
    [CompilerGeneratedAttribute]
public DateText get_Era();
    [CompilerGeneratedAttribute]
public void set_Era(DateText value);
    [CompilerGeneratedAttribute]
public DatePart get_Year();
    [CompilerGeneratedAttribute]
public void set_Year(DatePart value);
    [CompilerGeneratedAttribute]
public DateMonth get_Month();
    [CompilerGeneratedAttribute]
public void set_Month(DateMonth value);
    [CompilerGeneratedAttribute]
public DatePart get_Day();
    [CompilerGeneratedAttribute]
public void set_Day(DatePart value);
    [CompilerGeneratedAttribute]
public DatePart get_Hour();
    [CompilerGeneratedAttribute]
public void set_Hour(DatePart value);
    [CompilerGeneratedAttribute]
public DatePart get_Minute();
    [CompilerGeneratedAttribute]
public void set_Minute(DatePart value);
    [CompilerGeneratedAttribute]
public DatePart get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(DatePart value);
    [CompilerGeneratedAttribute]
public DateText get_TimeZoneName();
    [CompilerGeneratedAttribute]
public void set_TimeZoneName(DateText value);
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public bool get_Hour12();
    [CompilerGeneratedAttribute]
public void set_Hour12(bool value);
}
public class ServiceStack.IntlDateTime : Intl {
    public IntlDateTime(DateStyle date, TimeStyle time);
    public virtual bool ShouldInclude(PropertyInfo pi, string value);
}
public enum ServiceStack.IntlFormat : Enum {
    public int value__;
    public static IntlFormat Number;
    public static IntlFormat DateTime;
    public static IntlFormat RelativeTime;
}
public class ServiceStack.IntlNumber : Intl {
    public IntlNumber(NumberStyle style);
    public virtual bool ShouldInclude(PropertyInfo pi, string value);
}
public class ServiceStack.IntlRelativeTime : Intl {
    public IntlRelativeTime(Numeric numeric);
    public virtual bool ShouldInclude(PropertyInfo pi, string value);
}
[DataContractAttribute]
public class ServiceStack.IntResponse : object {
    [CompilerGeneratedAttribute]
private int <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public int Result { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
public interface ServiceStack.IO.IEndpoint {
    public string Host { get; }
    public int Port { get; }
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
}
public interface ServiceStack.IO.IHasVirtualFiles {
    public bool IsDirectory { get; }
    public bool IsFile { get; }
    public abstract virtual bool get_IsDirectory();
    public abstract virtual bool get_IsFile();
    public abstract virtual IVirtualFile GetFile();
    public abstract virtual IVirtualDirectory GetDirectory();
}
public interface ServiceStack.IO.IRequireVirtualFiles {
    public IVirtualFiles VirtualFiles { get; public set; }
    public abstract virtual IVirtualFiles get_VirtualFiles();
    public abstract virtual void set_VirtualFiles(IVirtualFiles value);
}
public interface ServiceStack.IO.IVirtualDirectory {
    public bool IsRoot { get; }
    public IVirtualDirectory ParentDirectory { get; }
    public IEnumerable`1<IVirtualFile> Files { get; }
    public IEnumerable`1<IVirtualDirectory> Directories { get; }
    public abstract virtual bool get_IsRoot();
    public abstract virtual IVirtualDirectory get_ParentDirectory();
    public abstract virtual IEnumerable`1<IVirtualFile> get_Files();
    public abstract virtual IEnumerable`1<IVirtualDirectory> get_Directories();
    public abstract virtual IVirtualFile GetFile(string virtualPath);
    public abstract virtual IVirtualFile GetFile(Stack`1<string> virtualPath);
    public abstract virtual IVirtualDirectory GetDirectory(string virtualPath);
    public abstract virtual IVirtualDirectory GetDirectory(Stack`1<string> virtualPath);
    public abstract virtual IEnumerable`1<IVirtualFile> GetAllMatchingFiles(string globPattern, int maxDepth);
}
public interface ServiceStack.IO.IVirtualFile {
    public IVirtualPathProvider VirtualPathProvider { get; }
    public string Extension { get; }
    public long Length { get; }
    public abstract virtual IVirtualPathProvider get_VirtualPathProvider();
    public abstract virtual string get_Extension();
    public abstract virtual string GetFileHash();
    public abstract virtual Stream OpenRead();
    public abstract virtual StreamReader OpenText();
    public abstract virtual string ReadAllText();
    public abstract virtual Task`1<string> ReadAllTextAsync(CancellationToken token);
    public abstract virtual Task`1<Byte[]> ReadAllBytesAsync(CancellationToken token);
    public abstract virtual object GetContents();
    public abstract virtual long get_Length();
    public abstract virtual void Refresh();
    public abstract virtual Task WritePartialToAsync(Stream toStream, long start, long end, CancellationToken token);
}
public interface ServiceStack.IO.IVirtualFiles {
    public abstract virtual Task WriteFileAsync(string filePath, object contents, CancellationToken token);
    public abstract virtual void WriteFile(string filePath, string textContents);
    public abstract virtual void WriteFile(string filePath, Stream stream);
    public abstract virtual void WriteFile(string filePath, object contents);
    public abstract virtual void WriteFiles(IEnumerable`1<IVirtualFile> files, Func`2<IVirtualFile, string> toPath);
    public abstract virtual void WriteFiles(Dictionary`2<string, string> textFiles);
    public abstract virtual void WriteFiles(Dictionary`2<string, object> files);
    public abstract virtual void AppendFile(string filePath, string textContents);
    public abstract virtual void AppendFile(string filePath, Stream stream);
    public abstract virtual void AppendFile(string filePath, object contents);
    public abstract virtual void DeleteFile(string filePath);
    public abstract virtual void DeleteFiles(IEnumerable`1<string> filePaths);
    public abstract virtual void DeleteFolder(string dirPath);
}
public interface ServiceStack.IO.IVirtualFilesAsync {
    public abstract virtual Task WriteFileAsync(string filePath, string textContents);
    public abstract virtual Task WriteFileAsync(string filePath, Stream stream);
    public abstract virtual Task WriteFilesAsync(IEnumerable`1<IVirtualFile> files, Func`2<IVirtualFile, string> toPath);
    public abstract virtual Task AppendFileAsync(string filePath, string textContents);
    public abstract virtual Task AppendFileAsync(string filePath, Stream stream);
    public abstract virtual Task DeleteFileAsync(string filePath);
    public abstract virtual Task DeleteFilesAsync(IEnumerable`1<string> filePaths);
    public abstract virtual Task DeleteFolderAsync(string dirPath);
}
public interface ServiceStack.IO.IVirtualNode {
    public IVirtualDirectory Directory { get; }
    public string Name { get; }
    public string VirtualPath { get; }
    public string RealPath { get; }
    public bool IsDirectory { get; }
    public DateTime LastModified { get; }
    public abstract virtual IVirtualDirectory get_Directory();
    public abstract virtual string get_Name();
    public abstract virtual string get_VirtualPath();
    public abstract virtual string get_RealPath();
    public abstract virtual bool get_IsDirectory();
    public abstract virtual DateTime get_LastModified();
}
public interface ServiceStack.IO.IVirtualPathProvider {
    public IVirtualDirectory RootDirectory { get; }
    public string VirtualPathSeparator { get; }
    public string RealPathSeparator { get; }
    public abstract virtual IVirtualDirectory get_RootDirectory();
    public abstract virtual string get_VirtualPathSeparator();
    public abstract virtual string get_RealPathSeparator();
    public abstract virtual string CombineVirtualPath(string basePath, string relativePath);
    public abstract virtual bool FileExists(string virtualPath);
    public abstract virtual bool DirectoryExists(string virtualPath);
    public abstract virtual IVirtualFile GetFile(string virtualPath);
    public abstract virtual string GetFileHash(string virtualPath);
    public abstract virtual string GetFileHash(IVirtualFile virtualFile);
    public abstract virtual IVirtualDirectory GetDirectory(string virtualPath);
    public abstract virtual IEnumerable`1<IVirtualFile> GetAllMatchingFiles(string globPattern, int maxDepth);
    public abstract virtual IEnumerable`1<IVirtualFile> GetAllFiles();
    public abstract virtual IEnumerable`1<IVirtualFile> GetRootFiles();
    public abstract virtual IEnumerable`1<IVirtualDirectory> GetRootDirectories();
    public abstract virtual bool IsSharedFile(IVirtualFile virtualFile);
    public abstract virtual bool IsViewFile(IVirtualFile virtualFile);
}
public interface ServiceStack.IOneWayClient {
    public abstract virtual void SendOneWay(object requestDto);
    public abstract virtual void SendOneWay(string relativeOrAbsoluteUri, object requestDto);
    public abstract virtual void SendAllOneWay(IEnumerable`1<object> requests);
}
public interface ServiceStack.IOptions {
}
public interface ServiceStack.IOptionsAsync`1 {
    public abstract virtual Task`1<object> OptionsAsync(T request);
}
public interface ServiceStack.IOptionsVerb`1 {
    public abstract virtual object Options(T request);
}
public interface ServiceStack.IOptionsVoid`1 {
    public abstract virtual void Options(T request);
}
public interface ServiceStack.IOptionsVoidAsync`1 {
    public abstract virtual Task OptionsAsync(T request);
}
public interface ServiceStack.IPatch {
}
public interface ServiceStack.IPatch`1 {
    public abstract virtual object Patch(T request);
}
public interface ServiceStack.IPatchAsync`1 {
    public abstract virtual Task`1<object> PatchAsync(T request);
}
public interface ServiceStack.IPatchDb`1 {
}
public interface ServiceStack.IPatchVoid`1 {
    public abstract virtual void Patch(T request);
}
public interface ServiceStack.IPatchVoidAsync`1 {
    public abstract virtual Task PatchAsync(T request);
}
public interface ServiceStack.IPost {
}
public interface ServiceStack.IPost`1 {
    public abstract virtual object Post(T request);
}
public interface ServiceStack.IPostAsync`1 {
    public abstract virtual Task`1<object> PostAsync(T request);
}
public interface ServiceStack.IPostVoid`1 {
    public abstract virtual void Post(T request);
}
public interface ServiceStack.IPostVoidAsync`1 {
    public abstract virtual Task PostAsync(T request);
}
public interface ServiceStack.IPut {
}
public interface ServiceStack.IPut`1 {
    public abstract virtual object Put(T request);
}
public interface ServiceStack.IPutAsync`1 {
    public abstract virtual Task`1<object> PutAsync(T request);
}
public interface ServiceStack.IPutVoid`1 {
    public abstract virtual void Put(T request);
}
public interface ServiceStack.IPutVoidAsync`1 {
    public abstract virtual Task PutAsync(T request);
}
public interface ServiceStack.IQuery {
    public Nullable`1<int> Skip { get; public set; }
    public Nullable`1<int> Take { get; public set; }
    public string OrderBy { get; public set; }
    public string OrderByDesc { get; public set; }
    public string Include { get; public set; }
    public string Fields { get; public set; }
    public abstract virtual Nullable`1<int> get_Skip();
    public abstract virtual void set_Skip(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_Take();
    public abstract virtual void set_Take(Nullable`1<int> value);
    public abstract virtual string get_OrderBy();
    public abstract virtual void set_OrderBy(string value);
    public abstract virtual string get_OrderByDesc();
    public abstract virtual void set_OrderByDesc(string value);
    public abstract virtual string get_Include();
    public abstract virtual void set_Include(string value);
    public abstract virtual string get_Fields();
    public abstract virtual void set_Fields(string value);
}
public interface ServiceStack.IQueryData {
}
public interface ServiceStack.IQueryData`1 {
}
public interface ServiceStack.IQueryData`2 {
}
public interface ServiceStack.IQueryDb {
}
public interface ServiceStack.IQueryDb`1 {
}
public interface ServiceStack.IQueryDb`2 {
}
public interface ServiceStack.IQueryResponse {
    public int Offset { get; public set; }
    public int Total { get; public set; }
    public abstract virtual int get_Offset();
    public abstract virtual void set_Offset(int value);
    public abstract virtual int get_Total();
    public abstract virtual void set_Total(int value);
}
public interface ServiceStack.IRawString {
    public abstract virtual string ToRawString();
}
public interface ServiceStack.IReceiver {
    public abstract virtual void NoSuchMethod(string selector, object message);
}
public interface ServiceStack.IReflectAttributeConverter {
    public abstract virtual ReflectAttribute ToReflectAttribute();
}
public interface ServiceStack.IReflectAttributeFilter {
    public abstract virtual bool ShouldInclude(PropertyInfo pi, string value);
}
public interface ServiceStack.IReplyClient {
}
public interface ServiceStack.IRequireAuthentication {
}
[NullableContextAttribute("2")]
public interface ServiceStack.IRequireRefreshToken {
    public string RefreshToken { get; public set; }
    public Nullable`1<DateTime> RefreshTokenExpiry { get; public set; }
    public abstract virtual string get_RefreshToken();
    public abstract virtual void set_RefreshToken(string value);
    public abstract virtual Nullable`1<DateTime> get_RefreshTokenExpiry();
    public abstract virtual void set_RefreshTokenExpiry(Nullable`1<DateTime> value);
}
public interface ServiceStack.IRequiresSchema {
    public abstract virtual void InitSchema();
}
public interface ServiceStack.IRequiresSchemaAsync {
    public abstract virtual Task InitSchemaAsync(CancellationToken token);
}
public interface ServiceStack.IResponseStatus {
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    public string StackTrace { get; public set; }
    public bool IsSuccess { get; }
    public abstract virtual string get_ErrorCode();
    public abstract virtual void set_ErrorCode(string value);
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void set_ErrorMessage(string value);
    public abstract virtual string get_StackTrace();
    public abstract virtual void set_StackTrace(string value);
    public abstract virtual bool get_IsSuccess();
}
public interface ServiceStack.IRestClient {
    public abstract virtual void AddHeader(string name, string value);
    public abstract virtual void ClearCookies();
    public abstract virtual Dictionary`2<string, string> GetCookieValues();
    public abstract virtual void SetCookie(string name, string value, Nullable`1<TimeSpan> expiresIn);
    public abstract virtual TResponse Get(string relativeOrAbsoluteUrl);
    public abstract virtual IEnumerable`1<TResponse> GetLazy(IReturn`1<QueryResponse`1<TResponse>> queryDto);
    public abstract virtual TResponse Delete(string relativeOrAbsoluteUrl);
    public abstract virtual TResponse Post(string relativeOrAbsoluteUrl, object request);
    public abstract virtual TResponse Put(string relativeOrAbsoluteUrl, object requestDto);
    public abstract virtual TResponse Patch(string relativeOrAbsoluteUrl, object requestDto);
    public abstract virtual TResponse Send(string httpMethod, string relativeOrAbsoluteUrl, object request);
    public abstract virtual TResponse PostFile(string relativeOrAbsoluteUrl, Stream fileToUpload, string fileName, string mimeType, string fieldName);
    public abstract virtual TResponse PostFileWithRequest(Stream fileToUpload, string fileName, object request, string fieldName);
    public abstract virtual TResponse PostFileWithRequest(string relativeOrAbsoluteUrl, Stream fileToUpload, string fileName, object request, string fieldName);
    public abstract virtual TResponse PostFilesWithRequest(object request, IEnumerable`1<UploadFile> files);
    public abstract virtual TResponse PostFilesWithRequest(string relativeOrAbsoluteUrl, object request, IEnumerable`1<UploadFile> files);
}
public interface ServiceStack.IRestClientAsync {
    public abstract virtual Task`1<TResponse> GetAsync(IReturn`1<TResponse> requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> GetAsync(object requestDto, CancellationToken token);
    public abstract virtual Task GetAsync(IReturnVoid requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> DeleteAsync(IReturn`1<TResponse> requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> DeleteAsync(object requestDto, CancellationToken token);
    public abstract virtual Task DeleteAsync(IReturnVoid requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> PostAsync(IReturn`1<TResponse> requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> PostAsync(object requestDto, CancellationToken token);
    public abstract virtual Task PostAsync(IReturnVoid requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> PutAsync(IReturn`1<TResponse> requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> PutAsync(object requestDto, CancellationToken token);
    public abstract virtual Task PutAsync(IReturnVoid requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> PatchAsync(IReturn`1<TResponse> requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> PatchAsync(object requestDto, CancellationToken token);
    public abstract virtual Task PatchAsync(IReturnVoid requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> CustomMethodAsync(string httpVerb, IReturn`1<TResponse> requestDto, CancellationToken token);
    public abstract virtual Task`1<TResponse> CustomMethodAsync(string httpVerb, object requestDto, CancellationToken token);
    public abstract virtual Task CustomMethodAsync(string httpVerb, IReturnVoid requestDto, CancellationToken token);
}
public interface ServiceStack.IRestClientSync {
    public abstract virtual TResponse Get(IReturn`1<TResponse> requestDto);
    public abstract virtual TResponse Get(object requestDto);
    public abstract virtual void Get(IReturnVoid requestDto);
    public abstract virtual TResponse Delete(IReturn`1<TResponse> requestDto);
    public abstract virtual TResponse Delete(object requestDto);
    public abstract virtual void Delete(IReturnVoid requestDto);
    public abstract virtual TResponse Post(IReturn`1<TResponse> requestDto);
    public abstract virtual TResponse Post(object requestDto);
    public abstract virtual void Post(IReturnVoid requestDto);
    public abstract virtual TResponse Put(IReturn`1<TResponse> requestDto);
    public abstract virtual TResponse Put(object requestDto);
    public abstract virtual void Put(IReturnVoid requestDto);
    public abstract virtual TResponse Patch(IReturn`1<TResponse> requestDto);
    public abstract virtual TResponse Patch(object requestDto);
    public abstract virtual void Patch(IReturnVoid requestDto);
    public abstract virtual TResponse CustomMethod(string httpVerb, IReturn`1<TResponse> requestDto);
    public abstract virtual TResponse CustomMethod(string httpVerb, object requestDto);
    public abstract virtual void CustomMethod(string httpVerb, IReturnVoid requestDto);
}
public interface ServiceStack.IRestGateway {
    public abstract virtual T Send(IReturn`1<T> request);
    public abstract virtual T Get(IReturn`1<T> request);
    public abstract virtual T Post(IReturn`1<T> request);
    public abstract virtual T Put(IReturn`1<T> request);
    public abstract virtual T Delete(IReturn`1<T> request);
}
public interface ServiceStack.IRestGatewayAsync {
    public abstract virtual Task`1<T> SendAsync(IReturn`1<T> request, CancellationToken token);
    public abstract virtual Task`1<T> GetAsync(IReturn`1<T> request, CancellationToken token);
    public abstract virtual Task`1<T> PostAsync(IReturn`1<T> request, CancellationToken token);
    public abstract virtual Task`1<T> PutAsync(IReturn`1<T> request, CancellationToken token);
    public abstract virtual Task`1<T> DeleteAsync(IReturn`1<T> request, CancellationToken token);
}
public interface ServiceStack.IRestServiceClient {
}
public interface ServiceStack.IReturn {
}
public interface ServiceStack.IReturn`1 {
}
public interface ServiceStack.IReturnVoid {
}
public interface ServiceStack.ISaveDb`1 {
}
public interface ServiceStack.IScriptValue {
    public object Value { get; public set; }
    public string Expression { get; public set; }
    public string Eval { get; public set; }
    public bool NoCache { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual string get_Expression();
    public abstract virtual void set_Expression(string value);
    public abstract virtual string get_Eval();
    public abstract virtual void set_Eval(string value);
    public abstract virtual bool get_NoCache();
    public abstract virtual void set_NoCache(bool value);
}
public interface ServiceStack.ISequenceSource {
    public abstract virtual long Increment(string key, long amount);
    public abstract virtual void Reset(string key, long startingAt);
}
public interface ServiceStack.ISequenceSourceAsync {
    public abstract virtual Task`1<long> IncrementAsync(string key, long amount, CancellationToken token);
    public abstract virtual Task ResetAsync(string key, long startingAt, CancellationToken token);
}
public interface ServiceStack.IService {
}
public interface ServiceStack.IServiceAfterFilter {
    public abstract virtual object OnAfterExecute(object response);
}
public interface ServiceStack.IServiceAfterFilterAsync {
    public abstract virtual Task`1<object> OnAfterExecuteAsync(object response);
}
public interface ServiceStack.IServiceBeforeFilter {
    public abstract virtual void OnBeforeExecute(object requestDto);
}
public interface ServiceStack.IServiceBeforeFilterAsync {
    public abstract virtual Task OnBeforeExecuteAsync(object requestDto);
}
public interface ServiceStack.IServiceClient {
}
public interface ServiceStack.IServiceClientAsync {
}
public interface ServiceStack.IServiceClientCommon {
    public abstract virtual void SetCredentials(string userName, string password);
}
public interface ServiceStack.IServiceClientSync {
}
public interface ServiceStack.IServiceErrorFilter {
    public abstract virtual Task`1<object> OnExceptionAsync(object requestDto, Exception ex);
}
public interface ServiceStack.IServiceFilters {
}
public interface ServiceStack.IServiceGateway {
    public abstract virtual TResponse Send(object requestDto);
    public abstract virtual List`1<TResponse> SendAll(IEnumerable`1<object> requestDtos);
    public abstract virtual void Publish(object requestDto);
    public abstract virtual void PublishAll(IEnumerable`1<object> requestDtos);
}
public interface ServiceStack.IServiceGatewayAsync {
    public abstract virtual Task`1<TResponse> SendAsync(object requestDto, CancellationToken token);
    public abstract virtual Task`1<List`1<TResponse>> SendAllAsync(IEnumerable`1<object> requestDtos, CancellationToken token);
    public abstract virtual Task PublishAsync(object requestDto, CancellationToken token);
    public abstract virtual Task PublishAllAsync(IEnumerable`1<object> requestDtos, CancellationToken token);
}
public interface ServiceStack.IStream {
}
public interface ServiceStack.IUpdateDb`1 {
}
public interface ServiceStack.IUrlFilter {
    public abstract virtual string ToUrl(string absoluteUrl);
}
public interface ServiceStack.IValidateRule {
    public string Validator { get; public set; }
    public string Condition { get; public set; }
    public string ErrorCode { get; public set; }
    public string Message { get; public set; }
    public abstract virtual string get_Validator();
    public abstract virtual void set_Validator(string value);
    public abstract virtual string get_Condition();
    public abstract virtual void set_Condition(string value);
    public abstract virtual string get_ErrorCode();
    public abstract virtual void set_ErrorCode(string value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
}
public interface ServiceStack.IValidationSource {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, IValidateRule>> GetValidationRules(Type type);
}
public interface ServiceStack.IValidationSourceAdmin {
    public abstract virtual List`1<ValidationRule> GetAllValidateRules();
    public abstract virtual Task`1<List`1<ValidationRule>> GetAllValidateRulesAsync();
    public abstract virtual Task`1<List`1<ValidationRule>> GetAllValidateRulesAsync(string typeName);
    public abstract virtual void SaveValidationRules(List`1<ValidationRule> validateRules);
    public abstract virtual Task SaveValidationRulesAsync(List`1<ValidationRule> validateRules);
    public abstract virtual Task`1<List`1<ValidationRule>> GetValidateRulesByIdsAsync(Int32[] ids);
    public abstract virtual Task DeleteValidationRulesAsync(Int32[] ids);
    public abstract virtual Task ClearCacheAsync();
}
public interface ServiceStack.IVerb {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IconAttribute]
public class ServiceStack.Jobs.BackgroundJob : BackgroundJobBase {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Transient>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TransientRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletedJob <ParentJob>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<object> <OnSuccess>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Exception> <OnFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CancellationToken> <Token>k__BackingField;
    [AutoIncrementAttribute]
public long Id { get; public set; }
    [IgnoreAttribute]
[IgnoreDataMemberAttribute]
public bool Transient { get; public set; }
    [IgnoreAttribute]
[IgnoreDataMemberAttribute]
public object TransientRequest { get; public set; }
    [IgnoreAttribute]
[IgnoreDataMemberAttribute]
public CompletedJob ParentJob { get; public set; }
    [IgnoreAttribute]
[IgnoreDataMemberAttribute]
public Action`1<object> OnSuccess { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreAttribute]
[IgnoreDataMemberAttribute]
public Action`1<Exception> OnFailed { get; public set; }
    [IgnoreAttribute]
[IgnoreDataMemberAttribute]
public Nullable`1<CancellationToken> Token { get; public set; }
    [CompilerGeneratedAttribute]
public virtual long get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(long value);
    [CompilerGeneratedAttribute]
public bool get_Transient();
    [CompilerGeneratedAttribute]
public void set_Transient(bool value);
    [CompilerGeneratedAttribute]
public object get_TransientRequest();
    [CompilerGeneratedAttribute]
public void set_TransientRequest(object value);
    [CompilerGeneratedAttribute]
public CompletedJob get_ParentJob();
    [CompilerGeneratedAttribute]
public void set_ParentJob(CompletedJob value);
    [CompilerGeneratedAttribute]
public Action`1<object> get_OnSuccess();
    [CompilerGeneratedAttribute]
public void set_OnSuccess(Action`1<object> value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_OnFailed();
    [CompilerGeneratedAttribute]
public void set_OnFailed(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CancellationToken> get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(Nullable`1<CancellationToken> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class ServiceStack.Jobs.BackgroundJobBase : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Worker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DependsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RunAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Request>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <RequestBody>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseBody>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundJobState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CompletedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <NotifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetryLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Attempts>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DurationMs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TimeoutSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Logs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastActivityDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <Error>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Args>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public long Id { get; public set; }
    public Nullable`1<long> ParentId { get; public set; }
    [IndexAttribute]
public string RefId { get; public set; }
    public string Worker { get; public set; }
    public string Tag { get; public set; }
    public string BatchId { get; public set; }
    public string Callback { get; public set; }
    public Nullable`1<long> DependsOn { get; public set; }
    public Nullable`1<DateTime> RunAfter { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public string CreatedBy { get; public set; }
    public string RequestId { get; public set; }
    [NullableAttribute("1")]
public string RequestType { get; public set; }
    public string Command { get; public set; }
    [NullableAttribute("1")]
public string Request { get; public set; }
    [NullableAttribute("1")]
public string RequestBody { get; public set; }
    public string UserId { get; public set; }
    public string Response { get; public set; }
    public string ResponseBody { get; public set; }
    public BackgroundJobState State { get; public set; }
    [IndexAttribute]
public Nullable`1<DateTime> StartedDate { get; public set; }
    public Nullable`1<DateTime> CompletedDate { get; public set; }
    public Nullable`1<DateTime> NotifiedDate { get; public set; }
    public Nullable`1<int> RetryLimit { get; public set; }
    public int Attempts { get; public set; }
    public int DurationMs { get; public set; }
    public Nullable`1<int> TimeoutSecs { get; public set; }
    public Nullable`1<double> Progress { get; public set; }
    public string Status { get; public set; }
    public string Logs { get; public set; }
    public Nullable`1<DateTime> LastActivityDate { get; public set; }
    public string ReplyTo { get; public set; }
    public string ErrorCode { get; public set; }
    public ResponseStatus Error { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> Args { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public virtual long get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(long value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_ParentId();
    [CompilerGeneratedAttribute]
public virtual void set_ParentId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Worker();
    [CompilerGeneratedAttribute]
public virtual void set_Worker(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
    [CompilerGeneratedAttribute]
public virtual string get_BatchId();
    [CompilerGeneratedAttribute]
public virtual void set_BatchId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Callback();
    [CompilerGeneratedAttribute]
public virtual void set_Callback(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_DependsOn();
    [CompilerGeneratedAttribute]
public virtual void set_DependsOn(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_RunAfter();
    [CompilerGeneratedAttribute]
public virtual void set_RunAfter(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RequestId();
    [CompilerGeneratedAttribute]
public virtual void set_RequestId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_RequestType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_RequestType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Command();
    [CompilerGeneratedAttribute]
public virtual void set_Command(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Request();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Request(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_RequestBody();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_RequestBody(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Response();
    [CompilerGeneratedAttribute]
public virtual void set_Response(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ResponseBody();
    [CompilerGeneratedAttribute]
public virtual void set_ResponseBody(string value);
    [CompilerGeneratedAttribute]
public virtual BackgroundJobState get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(BackgroundJobState value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_StartedDate();
    [CompilerGeneratedAttribute]
public virtual void set_StartedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CompletedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CompletedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_NotifiedDate();
    [CompilerGeneratedAttribute]
public virtual void set_NotifiedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RetryLimit();
    [CompilerGeneratedAttribute]
public virtual void set_RetryLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual int get_Attempts();
    [CompilerGeneratedAttribute]
public virtual void set_Attempts(int value);
    [CompilerGeneratedAttribute]
public virtual int get_DurationMs();
    [CompilerGeneratedAttribute]
public virtual void set_DurationMs(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TimeoutSecs();
    [CompilerGeneratedAttribute]
public virtual void set_TimeoutSecs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<double> get_Progress();
    [CompilerGeneratedAttribute]
public virtual void set_Progress(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public virtual string get_Status();
    [CompilerGeneratedAttribute]
public virtual void set_Status(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Logs();
    [CompilerGeneratedAttribute]
public virtual void set_Logs(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastActivityDate();
    [CompilerGeneratedAttribute]
public virtual void set_LastActivityDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_ReplyTo();
    [CompilerGeneratedAttribute]
public virtual void set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ErrorCode();
    [CompilerGeneratedAttribute]
public virtual void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public virtual ResponseStatus get_Error();
    [CompilerGeneratedAttribute]
public virtual void set_Error(ResponseStatus value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Args();
    [CompilerGeneratedAttribute]
public virtual void set_Args(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.Jobs.BackgroundJobOptions : object {
    [CompilerGeneratedAttribute]
private string <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Worker>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RunAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DependsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetryLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TimeoutSecs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RunCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<object> <OnSuccess>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Exception> <OnFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CancellationToken> <Token>k__BackingField;
    public string RefId { get; public set; }
    public Nullable`1<long> ParentId { get; public set; }
    public string Worker { get; public set; }
    public Nullable`1<DateTime> RunAfter { get; public set; }
    public string Callback { get; public set; }
    public Nullable`1<long> DependsOn { get; public set; }
    public string UserId { get; public set; }
    public Nullable`1<int> RetryLimit { get; public set; }
    public string ReplyTo { get; public set; }
    public string Tag { get; public set; }
    public string BatchId { get; public set; }
    public string CreatedBy { get; public set; }
    public Nullable`1<int> TimeoutSecs { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> Args { get; public set; }
    public Nullable`1<bool> RunCommand { get; public set; }
    [IgnoreDataMemberAttribute]
public Action`1<object> OnSuccess { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
public Action`1<Exception> OnFailed { get; public set; }
    [IgnoreDataMemberAttribute]
public Nullable`1<CancellationToken> Token { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RefId();
    [CompilerGeneratedAttribute]
public void set_RefId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Worker();
    [CompilerGeneratedAttribute]
public void set_Worker(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_RunAfter();
    [CompilerGeneratedAttribute]
public void set_RunAfter(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Callback();
    [CompilerGeneratedAttribute]
public void set_Callback(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_DependsOn();
    [CompilerGeneratedAttribute]
public void set_DependsOn(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RetryLimit();
    [CompilerGeneratedAttribute]
public virtual void set_RetryLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ReplyTo();
    [CompilerGeneratedAttribute]
public void set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public virtual string get_BatchId();
    [CompilerGeneratedAttribute]
public virtual void set_BatchId(string value);
    [CompilerGeneratedAttribute]
public string get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TimeoutSecs();
    [CompilerGeneratedAttribute]
public void set_TimeoutSecs(Nullable`1<int> value);
    public Nullable`1<TimeSpan> get_Timeout();
    public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RunCommand();
    [CompilerGeneratedAttribute]
public void set_RunCommand(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Action`1<object> get_OnSuccess();
    [CompilerGeneratedAttribute]
public void set_OnSuccess(Action`1<object> value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_OnFailed();
    [CompilerGeneratedAttribute]
public void set_OnFailed(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CancellationToken> get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(Nullable`1<CancellationToken> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Jobs.BackgroundJobRef : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefId>k__BackingField;
    public long Id { get; }
    public string RefId { get; }
    public BackgroundJobRef(long id, string refId);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public string get_RefId();
    public void Deconstruct(Int64& id, String& refId);
}
public enum ServiceStack.Jobs.BackgroundJobState : Enum {
    public int value__;
    public static BackgroundJobState Queued;
    public static BackgroundJobState Started;
    public static BackgroundJobState Executed;
    public static BackgroundJobState Completed;
    public static BackgroundJobState Failed;
    public static BackgroundJobState Cancelled;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.Jobs.BackgroundJobStatusUpdate : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private BackgroundJob <Job>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    [NullableAttribute("1")]
public BackgroundJob Job { get; }
    public Nullable`1<double> Progress { get; }
    public string Status { get; }
    public string Log { get; }
    public BackgroundJobStatusUpdate(BackgroundJob job, Nullable`1<double> progress, string status, string log);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public BackgroundJob get_Job();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<double> get_Progress();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Status();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Log();
    public void Deconstruct(BackgroundJob& job, Nullable`1& progress, String& status, String& log);
}
[IconAttribute]
public class ServiceStack.Jobs.CompletedJob : BackgroundJobBase {
}
[IconAttribute]
public class ServiceStack.Jobs.FailedJob : BackgroundJobBase {
}
[NullableContextAttribute("1")]
public interface ServiceStack.Jobs.IBackgroundJobs {
    public abstract virtual BackgroundJobRef EnqueueApi(object requestDto, BackgroundJobOptions options);
    public abstract virtual BackgroundJobRef EnqueueCommand(string commandName, object arg, BackgroundJobOptions options);
    public abstract virtual BackgroundJob RunCommand(string commandName, object arg, BackgroundJobOptions options);
    public abstract virtual Task`1<object> RunCommandAsync(string commandName, object arg, BackgroundJobOptions options);
    public abstract virtual Task ExecuteJobAsync(BackgroundJob job);
    public abstract virtual bool CancelJob(long jobId);
    public abstract virtual void CancelWorker(string worker);
    public abstract virtual void RequeueFailedJob(long jobId);
    public abstract virtual void FailJob(BackgroundJob job, Exception ex);
    public abstract virtual void FailJob(BackgroundJob job, ResponseStatus error, bool shouldRetry);
    public abstract virtual void CompleteJob(BackgroundJob job, object response);
    public abstract virtual void UpdateJobStatus(BackgroundJobStatusUpdate status);
    public abstract virtual Task StartAsync(CancellationToken stoppingToken);
    public abstract virtual Task TickAsync();
    public abstract virtual Dictionary`2<string, int> GetWorkerQueueCounts();
    public abstract virtual List`1<WorkerStats> GetWorkerStats();
    public abstract virtual IDbConnection OpenDb();
    public abstract virtual IDbConnection OpenMonthDb(DateTime createdDate);
    [NullableContextAttribute("2")]
public abstract virtual JobResult GetJob(long jobId);
    public abstract virtual JobResult GetJobByRefId(string refId);
    public abstract virtual object CreateRequest(BackgroundJobBase job);
    public abstract virtual object CreateResponse(BackgroundJobBase job);
    public abstract virtual void RecurringApi(string taskName, Schedule schedule, object requestDto, BackgroundJobOptions options);
    public abstract virtual void RecurringCommand(string taskName, Schedule schedule, string commandName, object arg, BackgroundJobOptions options);
    public abstract virtual void DeleteRecurringTask(string taskName);
    public abstract virtual Nullable`1<int> GetCommandEstimatedDurationMs(string commandType, string worker);
    public abstract virtual Nullable`1<int> GetApiEstimatedDurationMs(string requestType, string worker);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.Jobs.JobResult : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private JobSummary <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundJob <Queued>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletedJob <Completed>k__BackingField;
    [CompilerGeneratedAttribute]
private FailedJob <Failed>k__BackingField;
    [NullableAttribute("1")]
public JobSummary Summary { get; public set; }
    public BackgroundJob Queued { get; public set; }
    public CompletedJob Completed { get; public set; }
    public FailedJob Failed { get; public set; }
    [IgnoreDataMemberAttribute]
public BackgroundJobBase Job { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public JobSummary get_Summary();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Summary(JobSummary value);
    [CompilerGeneratedAttribute]
public BackgroundJob get_Queued();
    [CompilerGeneratedAttribute]
public void set_Queued(BackgroundJob value);
    [CompilerGeneratedAttribute]
public CompletedJob get_Completed();
    [CompilerGeneratedAttribute]
public void set_Completed(CompletedJob value);
    [CompilerGeneratedAttribute]
public FailedJob get_Failed();
    [CompilerGeneratedAttribute]
public void set_Failed(FailedJob value);
    public BackgroundJobBase get_Job();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IconAttribute]
public class ServiceStack.Jobs.JobSummary : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Worker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CompletedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundJobState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DurationMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Attempts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public long Id { get; public set; }
    public Nullable`1<long> ParentId { get; public set; }
    [IndexAttribute]
public string RefId { get; public set; }
    public string Worker { get; public set; }
    public string Tag { get; public set; }
    public string BatchId { get; public set; }
    [IndexAttribute]
public DateTime CreatedDate { get; public set; }
    public string CreatedBy { get; public set; }
    [NullableAttribute("1")]
public string RequestType { get; public set; }
    public string Command { get; public set; }
    [NullableAttribute("1")]
public string Request { get; public set; }
    public string Response { get; public set; }
    public string UserId { get; public set; }
    public string Callback { get; public set; }
    public Nullable`1<DateTime> StartedDate { get; public set; }
    public Nullable`1<DateTime> CompletedDate { get; public set; }
    public BackgroundJobState State { get; public set; }
    public int DurationMs { get; public set; }
    public int Attempts { get; public set; }
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public virtual long get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(long value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_ParentId();
    [CompilerGeneratedAttribute]
public virtual void set_ParentId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Worker();
    [CompilerGeneratedAttribute]
public virtual void set_Worker(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
    [CompilerGeneratedAttribute]
public virtual string get_BatchId();
    [CompilerGeneratedAttribute]
public virtual void set_BatchId(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_RequestType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_RequestType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Command();
    [CompilerGeneratedAttribute]
public virtual void set_Command(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Request();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Request(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Response();
    [CompilerGeneratedAttribute]
public virtual void set_Response(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Callback();
    [CompilerGeneratedAttribute]
public virtual void set_Callback(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_StartedDate();
    [CompilerGeneratedAttribute]
public virtual void set_StartedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CompletedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CompletedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual BackgroundJobState get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(BackgroundJobState value);
    [CompilerGeneratedAttribute]
public virtual int get_DurationMs();
    [CompilerGeneratedAttribute]
public virtual void set_DurationMs(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Attempts();
    [CompilerGeneratedAttribute]
public virtual void set_Attempts(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ErrorCode();
    [CompilerGeneratedAttribute]
public virtual void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public virtual void set_ErrorMessage(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Jobs.Schedule : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <_interval>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <_cronExpression>k__BackingField;
    private Nullable`1<TimeSpan> _interval { get; }
    [NullableAttribute("2")]
private string _cronExpression { get; }
    public static Schedule EveryMinute { get; }
    public static Schedule Hourly { get; }
    public static Schedule Daily { get; }
    public static Schedule Weekly { get; }
    public static Schedule Monthly { get; }
    public static Schedule Yearly { get; }
    public Schedule(Nullable`1<TimeSpan> interval);
    [NullableContextAttribute("2")]
public Schedule(string cronExpression);
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> get__interval();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private string get__cronExpression();
    public static Schedule Interval(TimeSpan interval);
    public static Schedule Cron(string cronExpression);
    public static Schedule get_EveryMinute();
    public static Schedule get_Hourly();
    public static Schedule get_Daily();
    public static Schedule get_Weekly();
    public static Schedule get_Monthly();
    public static Schedule get_Yearly();
    [NullableContextAttribute("2")]
public void Deconstruct(Nullable`1& interval, String& cronExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Jobs.ScheduledTask : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Interval>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CronExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestBody>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BackgroundJobOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastRun>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastJobId>k__BackingField;
    [AutoIncrementAttribute]
public long Id { get; public set; }
    [IndexAttribute]
public string Name { get; public set; }
    public Nullable`1<TimeSpan> Interval { get; public set; }
    [NullableAttribute("2")]
public string CronExpression { get; public set; }
    public string RequestType { get; public set; }
    [NullableAttribute("2")]
public string Command { get; public set; }
    public string Request { get; public set; }
    public string RequestBody { get; public set; }
    [NullableAttribute("2")]
public BackgroundJobOptions Options { get; public set; }
    public Nullable`1<DateTime> LastRun { get; public set; }
    public Nullable`1<long> LastJobId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CronExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CronExpression(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RequestType();
    [CompilerGeneratedAttribute]
public virtual void set_RequestType(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Command();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Command(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Request();
    [CompilerGeneratedAttribute]
public virtual void set_Request(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RequestBody();
    [CompilerGeneratedAttribute]
public virtual void set_RequestBody(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BackgroundJobOptions get_Options();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Options(BackgroundJobOptions value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastRun();
    [CompilerGeneratedAttribute]
public void set_LastRun(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LastJobId();
    [CompilerGeneratedAttribute]
public void set_LastJobId(Nullable`1<long> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Jobs.WorkerStats : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Queued>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Received>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Completed>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Retries>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <RunningJob>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RunningTime>k__BackingField;
    public string Name { get; public set; }
    public long Queued { get; public set; }
    public long Received { get; public set; }
    public long Completed { get; public set; }
    public long Retries { get; public set; }
    public long Failed { get; public set; }
    public Nullable`1<long> RunningJob { get; public set; }
    public Nullable`1<TimeSpan> RunningTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_Queued();
    [CompilerGeneratedAttribute]
public void set_Queued(long value);
    [CompilerGeneratedAttribute]
public long get_Received();
    [CompilerGeneratedAttribute]
public void set_Received(long value);
    [CompilerGeneratedAttribute]
public long get_Completed();
    [CompilerGeneratedAttribute]
public void set_Completed(long value);
    [CompilerGeneratedAttribute]
public long get_Retries();
    [CompilerGeneratedAttribute]
public void set_Retries(long value);
    [CompilerGeneratedAttribute]
public long get_Failed();
    [CompilerGeneratedAttribute]
public void set_Failed(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_RunningJob();
    [CompilerGeneratedAttribute]
public void set_RunningJob(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RunningTime();
    [CompilerGeneratedAttribute]
public void set_RunningTime(Nullable`1<TimeSpan> value);
}
[FlagsAttribute]
public enum ServiceStack.Lang : Enum {
    public int value__;
    public static Lang CSharp;
    public static Lang FSharp;
    public static Lang Vb;
    public static Lang TypeScript;
    public static Lang Dart;
    public static Lang Swift;
    public static Lang Java;
    public static Lang Kotlin;
    public static Lang Python;
    public static Lang Go;
    public static Lang Php;
}
public enum ServiceStack.Lifetime : Enum {
    public int value__;
    public static Lifetime Singleton;
    public static Lifetime Scoped;
    public static Lifetime Transient;
}
[AttributeUsageAttribute("4")]
public class ServiceStack.LifetimeAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Lifetime <lifetime>P;
    public Lifetime Lifetime { get; }
    public LifetimeAttribute(Lifetime lifetime);
    public Lifetime get_Lifetime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ServiceStack.Locks : object {
    public static object AppDb;
    public static object JobsDb;
    public static object RequestsDb;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, object> <Workers>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, object> <NamedConnections>k__BackingField;
    public static Dictionary`2<string, object> Workers { get; }
    public static Dictionary`2<string, object> NamedConnections { get; }
    private static Locks();
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, object> get_Workers();
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, object> get_NamedConnections();
    public static object TryGetLock(string worker);
    public static object GetDbLock(string namedConnection);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class ServiceStack.LocodeCssAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Form>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fieldset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    public string Form { get; public set; }
    public string Fieldset { get; public set; }
    public string Field { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Form();
    [CompilerGeneratedAttribute]
public void set_Form(string value);
    [CompilerGeneratedAttribute]
public string get_Fieldset();
    [CompilerGeneratedAttribute]
public void set_Fieldset(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
}
public class ServiceStack.Logging.GenericLogFactory : object {
    public Action`1<string> OnMessage;
    public GenericLogFactory(Action`1<string> onMessage);
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string typeName);
}
public class ServiceStack.Logging.GenericLogger : object {
    private static string DEBUG;
    private static string ERROR;
    private static string FATAL;
    private static string INFO;
    private static string WARN;
    public Action`1<string> OnMessage;
    [CompilerGeneratedAttribute]
private bool <CaptureLogs>k__BackingField;
    public StringBuilder Logs;
    [CompilerGeneratedAttribute]
private bool <IsDebugEnabled>k__BackingField;
    public bool CaptureLogs { get; public set; }
    public bool IsDebugEnabled { get; public set; }
    public GenericLogger(Type type);
    public GenericLogger(string type);
    [CompilerGeneratedAttribute]
public bool get_CaptureLogs();
    [CompilerGeneratedAttribute]
public void set_CaptureLogs(bool value);
    public virtual void OnLog(string message);
    public virtual void Log(object message, Exception exception);
    public virtual void LogFormat(object message, Object[] args);
    public virtual void Log(object message);
    public sealed virtual void Debug(object message, Exception exception);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDebugEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDebugEnabled(bool value);
    public sealed virtual void Debug(object message);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Error(object message, Exception exception);
    public sealed virtual void Error(object message);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(object message, Exception exception);
    public sealed virtual void Fatal(object message);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void Info(object message, Exception exception);
    public sealed virtual void Info(object message);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(object message, Exception exception);
    public sealed virtual void Warn(object message);
    public sealed virtual void WarnFormat(string format, Object[] args);
}
public interface ServiceStack.Logging.ILog {
    public bool IsDebugEnabled { get; }
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual void Debug(object message);
    public abstract virtual void Debug(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void DebugFormat(string format, Object[] args);
    public abstract virtual void Error(object message);
    public abstract virtual void Error(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void ErrorFormat(string format, Object[] args);
    public abstract virtual void Fatal(object message);
    public abstract virtual void Fatal(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void FatalFormat(string format, Object[] args);
    public abstract virtual void Info(object message);
    public abstract virtual void Info(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void InfoFormat(string format, Object[] args);
    public abstract virtual void Warn(object message);
    public abstract virtual void Warn(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void WarnFormat(string format, Object[] args);
}
public interface ServiceStack.Logging.ILogFactory {
    public abstract virtual ILog GetLogger(Type type);
    public abstract virtual ILog GetLogger(string typeName);
}
public interface ServiceStack.Logging.ILogTrace {
    public bool IsTraceEnabled { get; }
    public abstract virtual bool get_IsTraceEnabled();
    public abstract virtual void Trace(object message);
    public abstract virtual void Trace(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void TraceFormat(string format, Object[] args);
}
public interface ServiceStack.Logging.ILogWithContext {
    public abstract virtual IDisposable PushProperty(string key, object value);
}
[ExtensionAttribute]
public static class ServiceStack.Logging.ILogWithContextExtensions : object {
    [ExtensionAttribute]
public static IDisposable PushProperty(ILog logger, string key, object value);
}
public interface ServiceStack.Logging.ILogWithException {
    public abstract virtual void Debug(Exception exception, string format, Object[] args);
    public abstract virtual void Info(Exception exception, string format, Object[] args);
    public abstract virtual void Warn(Exception exception, string format, Object[] args);
    public abstract virtual void Error(Exception exception, string format, Object[] args);
    public abstract virtual void Fatal(Exception exception, string format, Object[] args);
}
[ExtensionAttribute]
public static class ServiceStack.Logging.ILogWithExceptionExtensions : object {
    [ExtensionAttribute]
public static void Debug(ILog logger, Exception exception, string format, Object[] args);
    [ExtensionAttribute]
public static void Info(ILog logger, Exception exception, string format, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILog logger, Exception exception, string format, Object[] args);
    [ExtensionAttribute]
public static void Error(ILog logger, Exception exception, string format, Object[] args);
    [ExtensionAttribute]
public static void Fatal(ILog logger, Exception exception, string format, Object[] args);
}
public class ServiceStack.Logging.LazyLogger : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public bool IsDebugEnabled { get; }
    public LazyLogger(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual void Debug(object message);
    public sealed virtual void Debug(object message, Exception exception);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Error(object message);
    public sealed virtual void Error(object message, Exception exception);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(object message);
    public sealed virtual void Fatal(object message, Exception exception);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void Info(object message);
    public sealed virtual void Info(object message, Exception exception);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(object message);
    public sealed virtual void Warn(object message, Exception exception);
    public sealed virtual void WarnFormat(string format, Object[] args);
}
public class ServiceStack.Logging.LogManager : object {
    private static ILogFactory logFactory;
    public static ILogFactory LogFactory { get; public set; }
    public static ILogFactory get_LogFactory();
    public static void set_LogFactory(ILogFactory value);
    public static ILog GetLogger(Type type);
    public static ILog GetLogger(string typeName);
}
[ExtensionAttribute]
public static class ServiceStack.Logging.LogUtils : object {
    [ExtensionAttribute]
public static bool IsTraceEnabled(ILog log);
    [ExtensionAttribute]
public static void Trace(ILog log, object message);
    [ExtensionAttribute]
public static void Trace(ILog log, object message, Exception exception);
    [ExtensionAttribute]
public static void TraceFormat(ILog log, string format, Object[] args);
}
public class ServiceStack.Logging.NullDebugLogger : object {
    [CompilerGeneratedAttribute]
private bool <IsDebugEnabled>k__BackingField;
    public bool IsDebugEnabled { get; public set; }
    public NullDebugLogger(string type);
    public NullDebugLogger(Type type);
    private static void Log(object message, Exception exception);
    private static void LogFormat(object message, Object[] args);
    private static void Log(object message);
    public sealed virtual void Debug(object message, Exception exception);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDebugEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDebugEnabled(bool value);
    public sealed virtual void Debug(object message);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Error(object message, Exception exception);
    public sealed virtual void Error(object message);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(object message, Exception exception);
    public sealed virtual void Fatal(object message);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void Info(object message, Exception exception);
    public sealed virtual void Info(object message);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(object message, Exception exception);
    public sealed virtual void Warn(object message);
    public sealed virtual void WarnFormat(string format, Object[] args);
}
public class ServiceStack.Logging.NullLogFactory : object {
    private bool debugEnabled;
    public NullLogFactory(bool debugEnabled);
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string typeName);
}
public class ServiceStack.Logging.StringBuilderLog : object {
    private static string DEBUG;
    private static string ERROR;
    private static string FATAL;
    private static string INFO;
    private static string WARN;
    private StringBuilder logs;
    [CompilerGeneratedAttribute]
private bool <IsDebugEnabled>k__BackingField;
    public bool IsDebugEnabled { get; public set; }
    public StringBuilderLog(string type, StringBuilder logs);
    public StringBuilderLog(Type type, StringBuilder logs);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDebugEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDebugEnabled(bool value);
    private void Log(object message, Exception exception);
    private void LogFormat(object message, Object[] args);
    private void Log(object message);
    public sealed virtual void Debug(object message, Exception exception);
    public sealed virtual void Debug(object message);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Error(object message, Exception exception);
    public sealed virtual void Error(object message);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(object message, Exception exception);
    public sealed virtual void Fatal(object message);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void Info(object message, Exception exception);
    public sealed virtual void Info(object message);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(object message, Exception exception);
    public sealed virtual void Warn(object message);
    public sealed virtual void WarnFormat(string format, Object[] args);
}
public class ServiceStack.Logging.StringBuilderLogFactory : object {
    private StringBuilder sb;
    private bool debugEnabled;
    public StringBuilderLogFactory(bool debugEnabled);
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string typeName);
    public string GetLogs();
    public void ClearLogs();
}
public class ServiceStack.Logging.TestLogFactory : object {
    private bool debugEnabled;
    public TestLogFactory(bool debugEnabled);
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string typeName);
}
public class ServiceStack.Logging.TestLogger : object {
    private static List`1<KeyValuePair`2<Levels, string>> _logs;
    [CompilerGeneratedAttribute]
private bool <IsDebugEnabled>k__BackingField;
    public bool IsDebugEnabled { get; public set; }
    public TestLogger(string type);
    public TestLogger(Type type);
    private static TestLogger();
    public static IList`1<KeyValuePair`2<Levels, string>> GetLogs();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDebugEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDebugEnabled(bool value);
    private static void Log(Levels level, object message, Exception exception);
    private static void LogFormat(Levels level, object message, Object[] args);
    private static void Log(Levels level, object message);
    public sealed virtual void Debug(object message, Exception exception);
    public sealed virtual void Debug(object message);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Error(object message, Exception exception);
    public sealed virtual void Error(object message);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(object message, Exception exception);
    public sealed virtual void Fatal(object message);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void Info(object message, Exception exception);
    public sealed virtual void Info(object message);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(object message, Exception exception);
    public sealed virtual void Warn(object message);
    public sealed virtual void WarnFormat(string format, Object[] args);
}
public interface ServiceStack.Messaging.IMessage {
    public DateTime CreatedDate { get; }
    public long Priority { get; public set; }
    public int RetryAttempts { get; public set; }
    public Nullable`1<Guid> ReplyId { get; public set; }
    public string ReplyTo { get; public set; }
    public int Options { get; public set; }
    public ResponseStatus Error { get; public set; }
    public string Tag { get; public set; }
    public object Body { get; public set; }
    public string TraceId { get; public set; }
    public abstract virtual DateTime get_CreatedDate();
    public abstract virtual long get_Priority();
    public abstract virtual void set_Priority(long value);
    public abstract virtual int get_RetryAttempts();
    public abstract virtual void set_RetryAttempts(int value);
    public abstract virtual Nullable`1<Guid> get_ReplyId();
    public abstract virtual void set_ReplyId(Nullable`1<Guid> value);
    public abstract virtual string get_ReplyTo();
    public abstract virtual void set_ReplyTo(string value);
    public abstract virtual int get_Options();
    public abstract virtual void set_Options(int value);
    public abstract virtual ResponseStatus get_Error();
    public abstract virtual void set_Error(ResponseStatus value);
    public abstract virtual string get_Tag();
    public abstract virtual void set_Tag(string value);
    public abstract virtual object get_Body();
    public abstract virtual void set_Body(object value);
    public abstract virtual string get_TraceId();
    public abstract virtual void set_TraceId(string value);
}
public interface ServiceStack.Messaging.IMessage`1 {
    public abstract virtual T GetBody();
}
public interface ServiceStack.Messaging.IMessageFactory {
    public abstract virtual IMessageProducer CreateMessageProducer();
}
public interface ServiceStack.Messaging.IMessageHandler {
    public Type MessageType { get; }
    public IMessageQueueClient MqClient { get; }
    public abstract virtual Type get_MessageType();
    public abstract virtual IMessageQueueClient get_MqClient();
    public abstract virtual void Process(IMessageQueueClient mqClient);
    public abstract virtual int ProcessQueue(IMessageQueueClient mqClient, string queueName, Func`1<bool> doNext);
    public abstract virtual void ProcessMessage(IMessageQueueClient mqClient, object mqResponse);
    public abstract virtual IMessageHandlerStats GetStats();
}
public interface ServiceStack.Messaging.IMessageHandlerStats {
    public string Name { get; }
    public int TotalMessagesProcessed { get; }
    public int TotalMessagesFailed { get; }
    public int TotalRetries { get; }
    public int TotalNormalMessagesReceived { get; }
    public int TotalPriorityMessagesReceived { get; }
    public Nullable`1<DateTime> LastMessageProcessed { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_TotalMessagesProcessed();
    public abstract virtual int get_TotalMessagesFailed();
    public abstract virtual int get_TotalRetries();
    public abstract virtual int get_TotalNormalMessagesReceived();
    public abstract virtual int get_TotalPriorityMessagesReceived();
    public abstract virtual Nullable`1<DateTime> get_LastMessageProcessed();
    public abstract virtual void Add(IMessageHandlerStats stats);
}
public interface ServiceStack.Messaging.IMessageProducer {
    public abstract virtual void Publish(T messageBody);
    public abstract virtual void Publish(IMessage`1<T> message);
}
public interface ServiceStack.Messaging.IMessageQueueClient {
    public abstract virtual void Publish(string queueName, IMessage message);
    public abstract virtual void Notify(string queueName, IMessage message);
    public abstract virtual IMessage`1<T> Get(string queueName, Nullable`1<TimeSpan> timeOut);
    public abstract virtual IMessage`1<T> GetAsync(string queueName);
    public abstract virtual void Ack(IMessage message);
    public abstract virtual void Nak(IMessage message, bool requeue, Exception exception);
    public abstract virtual IMessage`1<T> CreateMessage(object mqResponse);
    public abstract virtual string GetTempQueueName();
}
public interface ServiceStack.Messaging.IMessageQueueClientFactory {
    public abstract virtual IMessageQueueClient CreateMessageQueueClient();
}
public interface ServiceStack.Messaging.IMessageSerializer {
    public abstract virtual Byte[] ToBytes(IMessage message);
    public abstract virtual Byte[] ToBytes(IMessage`1<T> message);
    public abstract virtual IMessage ToMessage(Byte[] bytes, Type ofType);
    public abstract virtual Message`1<T> ToMessage(Byte[] bytes);
}
public interface ServiceStack.Messaging.IMessageService {
    public IMessageFactory MessageFactory { get; }
    public List`1<Type> RegisteredTypes { get; }
    public abstract virtual IMessageFactory get_MessageFactory();
    public abstract virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn);
    public abstract virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, int noOfThreads);
    public abstract virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx);
    public abstract virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx, int noOfThreads);
    public abstract virtual IMessageHandlerStats GetStats();
    public abstract virtual List`1<Type> get_RegisteredTypes();
    public abstract virtual string GetStatus();
    public abstract virtual string GetStatsDescription();
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
public class ServiceStack.Messaging.Message : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ReplyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    public Guid Id { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public long Priority { get; public set; }
    public int RetryAttempts { get; public set; }
    public Nullable`1<Guid> ReplyId { get; public set; }
    public string ReplyTo { get; public set; }
    public int Options { get; public set; }
    public ResponseStatus Error { get; public set; }
    public string Tag { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    public object Body { get; public set; }
    public string TraceId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(long value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RetryAttempts();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RetryAttempts(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_ReplyId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplyId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReplyTo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Options(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(ResponseStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tag(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TraceId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TraceId(string value);
    public static Message`1<T> Create(T request);
}
public class ServiceStack.Messaging.Message`1 : Message {
    public Message`1(T body);
    public static IMessage Create(object oBody);
    public sealed virtual T GetBody();
    public virtual string ToString();
}
public static class ServiceStack.Messaging.MessageFactory : object {
    private static Dictionary`2<Type, MessageFactoryDelegate> CacheFn;
    private static MessageFactory();
    public static IMessage Create(object response);
}
internal class ServiceStack.Messaging.MessageFactoryDelegate : MulticastDelegate {
    public MessageFactoryDelegate(object object, IntPtr method);
    public virtual IMessage Invoke(object body);
    public virtual IAsyncResult BeginInvoke(object body, AsyncCallback callback, object object);
    public virtual IMessage EndInvoke(IAsyncResult result);
}
public class ServiceStack.Messaging.MessageHandlerStats : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastMessageProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalMessagesProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalMessagesFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalNormalMessagesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPriorityMessagesReceived>k__BackingField;
    public string Name { get; private set; }
    public Nullable`1<DateTime> LastMessageProcessed { get; private set; }
    public int TotalMessagesProcessed { get; private set; }
    public int TotalMessagesFailed { get; private set; }
    public int TotalRetries { get; private set; }
    public int TotalNormalMessagesReceived { get; private set; }
    public int TotalPriorityMessagesReceived { get; private set; }
    public MessageHandlerStats(string name);
    public MessageHandlerStats(string name, int totalMessagesProcessed, int totalMessagesFailed, int totalRetries, int totalNormalMessagesReceived, int totalPriorityMessagesReceived, Nullable`1<DateTime> lastMessageProcessed);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_LastMessageProcessed();
    [CompilerGeneratedAttribute]
private void set_LastMessageProcessed(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalMessagesProcessed();
    [CompilerGeneratedAttribute]
private void set_TotalMessagesProcessed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalMessagesFailed();
    [CompilerGeneratedAttribute]
private void set_TotalMessagesFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalRetries();
    [CompilerGeneratedAttribute]
private void set_TotalRetries(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalNormalMessagesReceived();
    [CompilerGeneratedAttribute]
private void set_TotalNormalMessagesReceived(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalPriorityMessagesReceived();
    [CompilerGeneratedAttribute]
private void set_TotalPriorityMessagesReceived(int value);
    public virtual void Add(IMessageHandlerStats stats);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class ServiceStack.Messaging.MessageHandlerStatsExtensions : object {
    [ExtensionAttribute]
public static IMessageHandlerStats CombineStats(IEnumerable`1<IMessageHandlerStats> stats);
}
[FlagsAttribute]
public enum ServiceStack.Messaging.MessageOption : Enum {
    public int value__;
    public static MessageOption None;
    public static MessageOption All;
    public static MessageOption NotifyOneWay;
}
public class ServiceStack.Messaging.MessagingException : Exception {
    [CompilerGeneratedAttribute]
private object <ResponseDto>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public object ResponseDto { get; public set; }
    public ResponseStatus ResponseStatus { get; public set; }
    public MessagingException(string message);
    public MessagingException(string message, Exception innerException);
    public MessagingException(ResponseStatus responseStatus, Exception innerException);
    public MessagingException(ResponseStatus responseStatus, object responseDto, Exception innerException);
    [CompilerGeneratedAttribute]
public object get_ResponseDto();
    [CompilerGeneratedAttribute]
public void set_ResponseDto(object value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
    public sealed virtual ResponseStatus ToResponseStatus();
}
public class ServiceStack.Messaging.QueueNames : object {
    public static string Exchange;
    public static string ExchangeDlq;
    public static string ExchangeTopic;
    public static string MqPrefix;
    public static string QueuePrefix;
    public static string TempMqPrefix;
    public static string TopicIn;
    public static string TopicOut;
    public static Func`3<string, string, string> ResolveQueueNameFn;
    private Type messageType;
    public string Priority { get; }
    public string In { get; }
    public string Out { get; }
    public string Dlq { get; }
    public QueueNames(Type messageType);
    private static QueueNames();
    public static string ResolveQueueName(string typeName, string queueSuffix);
    public static bool IsTempQueue(string queueName);
    public static void SetQueuePrefix(string prefix);
    public string get_Priority();
    public string get_In();
    public string get_Out();
    public string get_Dlq();
    public static string GetTempQueueName();
}
public static class ServiceStack.Messaging.QueueNames`1 : object {
    [CompilerGeneratedAttribute]
private static string <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <In>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Dlq>k__BackingField;
    public static string Priority { get; private set; }
    public static string In { get; private set; }
    public static string Out { get; private set; }
    public static string Dlq { get; private set; }
    public static String[] AllQueueNames { get; }
    private static QueueNames`1();
    [CompilerGeneratedAttribute]
public static string get_Priority();
    [CompilerGeneratedAttribute]
private static void set_Priority(string value);
    [CompilerGeneratedAttribute]
public static string get_In();
    [CompilerGeneratedAttribute]
private static void set_In(string value);
    [CompilerGeneratedAttribute]
public static string get_Out();
    [CompilerGeneratedAttribute]
private static void set_Out(string value);
    [CompilerGeneratedAttribute]
public static string get_Dlq();
    [CompilerGeneratedAttribute]
private static void set_Dlq(string value);
    public static String[] get_AllQueueNames();
}
public class ServiceStack.Messaging.UnRetryableMessagingException : MessagingException {
    public UnRetryableMessagingException(string message);
    public UnRetryableMessagingException(string message, Exception innerException);
}
public static class ServiceStack.Messaging.WorkerStatus : object {
    public static int Disposed;
    public static int Stopped;
    public static int Stopping;
    public static int Starting;
    public static int Started;
    public static string ToString(int workerStatus);
}
public class ServiceStack.MetadataAttributeBase : AttributeBase {
    public virtual bool ShouldInclude(PropertyInfo pi, string value);
}
public interface ServiceStack.Model.ICacheByDateModified {
    public Nullable`1<DateTime> LastModified { get; }
    public abstract virtual Nullable`1<DateTime> get_LastModified();
}
public interface ServiceStack.Model.ICacheByEtag {
    public string Etag { get; }
    public abstract virtual string get_Etag();
}
public interface ServiceStack.Model.IHasAction {
    public string Action { get; }
    public abstract virtual string get_Action();
}
public interface ServiceStack.Model.IHasGuidId {
}
public interface ServiceStack.Model.IHasId`1 {
    public T Id { get; }
    public abstract virtual T get_Id();
}
public interface ServiceStack.Model.IHasIntId {
}
public interface ServiceStack.Model.IHasLongId {
}
[DefaultMemberAttribute("Item")]
public interface ServiceStack.Model.IHasNamed`1 {
    public T Item { get; public set; }
    public abstract virtual T get_Item(string listId);
    public abstract virtual void set_Item(string listId, T value);
}
public interface ServiceStack.Model.IHasNamedCollection`1 {
}
public interface ServiceStack.Model.IHasNamedList`1 {
}
public interface ServiceStack.Model.IHasStringId {
}
public interface ServiceStack.Model.IMutId`1 {
    public T Id { get; public set; }
    public abstract virtual T get_Id();
    public abstract virtual void set_Id(T value);
}
public interface ServiceStack.Model.IMutIntId {
}
public interface ServiceStack.Model.IMutLongId {
}
public interface ServiceStack.Model.IMutStringId {
}
public interface ServiceStack.Model.IResponseStatusConvertible {
    public abstract virtual ResponseStatus ToResponseStatus();
}
[AttributeUsageAttribute("384")]
public class ServiceStack.MultiPartFieldAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringSerializer>k__BackingField;
    public string ContentType { get; public set; }
    public Type StringSerializer { get; public set; }
    public MultiPartFieldAttribute(string contentType);
    public MultiPartFieldAttribute(Type stringSerializer);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Type get_StringSerializer();
    [CompilerGeneratedAttribute]
public void set_StringSerializer(Type value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.NamedConnectionAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public NamedConnectionAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class ServiceStack.NavItem : object {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Show>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hide>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NavItem> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public string Label { get; public set; }
    public string Href { get; public set; }
    public Nullable`1<bool> Exact { get; public set; }
    public string Id { get; public set; }
    public string ClassName { get; public set; }
    public string IconClass { get; public set; }
    public string IconSrc { get; public set; }
    public string Show { get; public set; }
    public string Hide { get; public set; }
    public List`1<NavItem> Children { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_IconClass();
    [CompilerGeneratedAttribute]
public void set_IconClass(string value);
    [CompilerGeneratedAttribute]
public string get_IconSrc();
    [CompilerGeneratedAttribute]
public void set_IconSrc(string value);
    [CompilerGeneratedAttribute]
public string get_Show();
    [CompilerGeneratedAttribute]
public void set_Show(string value);
    [CompilerGeneratedAttribute]
public string get_Hide();
    [CompilerGeneratedAttribute]
public void set_Hide(string value);
    [CompilerGeneratedAttribute]
public List`1<NavItem> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<NavItem> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
public enum ServiceStack.Network : Enum {
    public long value__;
    public static Network Localhost;
    public static Network LocalSubnet;
    public static Network External;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.NoArgs : object {
    [CompilerGeneratedAttribute]
private static NoArgs <Value>k__BackingField;
    public static NoArgs Value { get; }
    private static NoArgs();
    [CompilerGeneratedAttribute]
public static NoArgs get_Value();
}
public enum ServiceStack.Notation : Enum {
    public int value__;
    public static Notation Undefined;
    public static Notation Standard;
    public static Notation Scientific;
    public static Notation Engineering;
    public static Notation Compact;
}
[AttributeUsageAttribute("4")]
public class ServiceStack.NotesAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    public string Notes { get; public set; }
    public NotesAttribute(string notes);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
}
public static class ServiceStack.NumberCurrency : object {
    public static string USD;
    public static string EUR;
    public static string JPY;
    public static string GBP;
    public static string CHF;
    public static string CAD;
    public static string AUD;
    public static string ZAR;
    public static string CNY;
    public static string HKD;
    public static string NZD;
    public static string SEK;
    public static string KRW;
    public static string SGD;
    public static string NOK;
    public static string MXN;
    public static string INR;
    public static string RUB;
    public static string TRY;
    public static string BRL;
    public static string TWD;
    public static string DKK;
    public static string PLN;
    public static string THB;
    public static string IDR;
    public static string HUF;
    public static string CZK;
    public static string ILS;
    public static string CLP;
    public static string PHP;
    public static string AED;
    public static string COP;
    public static string SAR;
    public static string MYR;
    public static string RON;
    public static String[] All;
    private static NumberCurrency();
}
public enum ServiceStack.NumberStyle : Enum {
    public int value__;
    public static NumberStyle Undefined;
    public static NumberStyle Decimal;
    public static NumberStyle Currency;
    public static NumberStyle Percent;
    public static NumberStyle Unit;
}
public static class ServiceStack.NumberUnit : object {
    public static string Acre;
    public static string Bit;
    public static string Byte;
    public static string Celsius;
    public static string Centimeter;
    public static string Day;
    public static string Degree;
    public static string Fahrenheit;
    public static string Foot;
    public static string Gallon;
    public static string Gigabit;
    public static string Gigabyte;
    public static string Gram;
    public static string Hectare;
    public static string Hour;
    public static string Inch;
    public static string Kilobit;
    public static string Kilobyte;
    public static string Kilogram;
    public static string Kilometer;
    public static string Liter;
    public static string Megabit;
    public static string Megabyte;
    public static string Meter;
    public static string Mile;
    public static string Milliliter;
    public static string Millimeter;
    public static string Millisecond;
    public static string Minute;
    public static string Month;
    public static string Ounce;
    public static string Percent;
    public static string Petabyte;
    public static string Pound;
    public static string Second;
    public static string Stone;
    public static string Terabit;
    public static string Terabyte;
    public static string Week;
    public static string Yard;
    public static string Year;
}
public enum ServiceStack.Numeric : Enum {
    public int value__;
    public static Numeric Undefined;
    public static Numeric Always;
    public static Numeric Auto;
}
public class ServiceStack.PageArgAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public PageArgAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.PageAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Layout>k__BackingField;
    public string VirtualPath { get; public set; }
    public string Layout { get; public set; }
    public PageAttribute(string virtualPath, string layout);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public void set_VirtualPath(string value);
    [CompilerGeneratedAttribute]
public string get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(string value);
}
[AttributeUsageAttribute("460")]
public class ServiceStack.PriorityAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; public set; }
    public PriorityAttribute(int value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
}
[CollectionDataContractAttribute]
public class ServiceStack.Properties : List`1<Property> {
    public Properties(IEnumerable`1<Property> collection);
}
[DataContractAttribute]
public class ServiceStack.Property : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[DataContractAttribute]
public abstract class ServiceStack.QueryBase : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderByDesc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <QueryParams>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Take { get; public set; }
    [DataMemberAttribute]
[InputAttribute]
public string OrderBy { get; public set; }
    [DataMemberAttribute]
[InputAttribute]
public string OrderByDesc { get; public set; }
    [DataMemberAttribute]
[InputAttribute]
public string Include { get; public set; }
    [DataMemberAttribute]
[InputAttribute]
[FieldCssAttribute]
public string Fields { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [IgnoreDataMemberAttribute]
public Dictionary`2<string, string> QueryParams { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public virtual void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Take();
    [CompilerGeneratedAttribute]
public virtual void set_Take(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_OrderBy();
    [CompilerGeneratedAttribute]
public virtual void set_OrderBy(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OrderByDesc();
    [CompilerGeneratedAttribute]
public virtual void set_OrderByDesc(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Include();
    [CompilerGeneratedAttribute]
public virtual void set_Include(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Fields();
    [CompilerGeneratedAttribute]
public virtual void set_Fields(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_QueryParams();
    [CompilerGeneratedAttribute]
public virtual void set_QueryParams(Dictionary`2<string, string> value);
}
public abstract class ServiceStack.QueryData`1 : QueryBase {
}
public abstract class ServiceStack.QueryData`2 : QueryBase {
}
[AttributeUsageAttribute("4")]
public class ServiceStack.QueryDataAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private QueryTerm <DefaultTerm>k__BackingField;
    public QueryTerm DefaultTerm { get; public set; }
    public QueryDataAttribute(QueryTerm defaultTerm);
    [CompilerGeneratedAttribute]
public QueryTerm get_DefaultTerm();
    [CompilerGeneratedAttribute]
public void set_DefaultTerm(QueryTerm value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.QueryDataFieldAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private QueryTerm <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    public QueryTerm Term { get; public set; }
    public string Condition { get; public set; }
    public string Field { get; public set; }
    [CompilerGeneratedAttribute]
public QueryTerm get_Term();
    [CompilerGeneratedAttribute]
public void set_Term(QueryTerm value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
}
public abstract class ServiceStack.QueryDb`1 : QueryBase {
}
public abstract class ServiceStack.QueryDb`2 : QueryBase {
}
[AttributeUsageAttribute("4")]
public class ServiceStack.QueryDbAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private QueryTerm <DefaultTerm>k__BackingField;
    public QueryTerm DefaultTerm { get; public set; }
    public QueryDbAttribute(QueryTerm defaultTerm);
    [CompilerGeneratedAttribute]
public QueryTerm get_DefaultTerm();
    [CompilerGeneratedAttribute]
public void set_DefaultTerm(QueryTerm value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.QueryDbFieldAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private QueryTerm <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueStyle <ValueStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueArity>k__BackingField;
    public QueryTerm Term { get; public set; }
    public string Operand { get; public set; }
    public string Template { get; public set; }
    public string Field { get; public set; }
    public string ValueFormat { get; public set; }
    public ValueStyle ValueStyle { get; public set; }
    public int ValueArity { get; public set; }
    [CompilerGeneratedAttribute]
public QueryTerm get_Term();
    [CompilerGeneratedAttribute]
public void set_Term(QueryTerm value);
    [CompilerGeneratedAttribute]
public string get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(string value);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_ValueFormat();
    [CompilerGeneratedAttribute]
public void set_ValueFormat(string value);
    [CompilerGeneratedAttribute]
public ValueStyle get_ValueStyle();
    [CompilerGeneratedAttribute]
public void set_ValueStyle(ValueStyle value);
    [CompilerGeneratedAttribute]
public int get_ValueArity();
    [CompilerGeneratedAttribute]
public void set_ValueArity(int value);
}
[DataContractAttribute]
public class ServiceStack.QueryResponse`1 : object {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<T> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public int Offset { get; public set; }
    [DataMemberAttribute]
public int Total { get; public set; }
    [DataMemberAttribute]
public List`1<T> Results { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Offset();
    [CompilerGeneratedAttribute]
public virtual void set_Offset(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Total();
    [CompilerGeneratedAttribute]
public virtual void set_Total(int value);
    [CompilerGeneratedAttribute]
public virtual List`1<T> get_Results();
    [CompilerGeneratedAttribute]
public virtual void set_Results(List`1<T> value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public virtual void set_ResponseStatus(ResponseStatus value);
}
public enum ServiceStack.QueryTerm : Enum {
    public int value__;
    public static QueryTerm Default;
    public static QueryTerm And;
    public static QueryTerm Or;
    public static QueryTerm Ensure;
}
public interface ServiceStack.Redis.Generic.IRedisHash`2 {
    public abstract virtual Dictionary`2<TKey, TValue> GetAll();
}
public interface ServiceStack.Redis.Generic.IRedisHashAsync`2 {
    public abstract virtual ValueTask`1<Dictionary`2<TKey, TValue>> GetAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask AddAsync(KeyValuePair`2<TKey, TValue> item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(TKey key, TValue value, CancellationToken token);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsKeyAsync(TKey key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(TKey key, CancellationToken token);
}
public interface ServiceStack.Redis.Generic.IRedisList`1 {
    public abstract virtual List`1<T> GetAll();
    public abstract virtual List`1<T> GetRange(int startingFrom, int endingAt);
    public abstract virtual List`1<T> GetRangeFromSortedList(int startingFrom, int endingAt);
    public abstract virtual void RemoveAll();
    public abstract virtual void Trim(int keepStartingFrom, int keepEndingAt);
    public abstract virtual long RemoveValue(T value);
    public abstract virtual long RemoveValue(T value, int noOfMatches);
    public abstract virtual void AddRange(IEnumerable`1<T> values);
    public abstract virtual void Append(T value);
    public abstract virtual void Prepend(T value);
    public abstract virtual T RemoveStart();
    public abstract virtual T BlockingRemoveStart(Nullable`1<TimeSpan> timeOut);
    public abstract virtual T RemoveEnd();
    public abstract virtual void Enqueue(T value);
    public abstract virtual T Dequeue();
    public abstract virtual T BlockingDequeue(Nullable`1<TimeSpan> timeOut);
    public abstract virtual void Push(T value);
    public abstract virtual T Pop();
    public abstract virtual T BlockingPop(Nullable`1<TimeSpan> timeOut);
    public abstract virtual T PopAndPush(IRedisList`1<T> toList);
}
public interface ServiceStack.Redis.Generic.IRedisListAsync`1 {
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeAsync(int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedListAsync(int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask RemoveAllAsync(CancellationToken token);
    public abstract virtual ValueTask TrimAsync(int keepStartingFrom, int keepEndingAt, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveValueAsync(T value, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveValueAsync(T value, int noOfMatches, CancellationToken token);
    public abstract virtual ValueTask AddRangeAsync(IEnumerable`1<T> values, CancellationToken token);
    public abstract virtual ValueTask AppendAsync(T value, CancellationToken token);
    public abstract virtual ValueTask PrependAsync(T value, CancellationToken token);
    public abstract virtual ValueTask`1<T> RemoveStartAsync(CancellationToken token);
    public abstract virtual ValueTask`1<T> BlockingRemoveStartAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<T> RemoveEndAsync(CancellationToken token);
    public abstract virtual ValueTask EnqueueAsync(T value, CancellationToken token);
    public abstract virtual ValueTask`1<T> DequeueAsync(CancellationToken token);
    public abstract virtual ValueTask`1<T> BlockingDequeueAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask PushAsync(T value, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopAsync(CancellationToken token);
    public abstract virtual ValueTask`1<T> BlockingPopAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopAndPushAsync(IRedisListAsync`1<T> toList, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(T item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(T item, CancellationToken token);
    public abstract virtual ValueTask RemoveAtAsync(int index, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsAsync(T item, CancellationToken token);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
    public abstract virtual ValueTask`1<int> IndexOfAsync(T item, CancellationToken token);
    public abstract virtual ValueTask`1<T> ElementAtAsync(int index, CancellationToken token);
    public abstract virtual ValueTask SetValueAsync(int index, T value, CancellationToken token);
}
public interface ServiceStack.Redis.Generic.IRedisSet`1 {
    public abstract virtual List`1<T> Sort(int startingFrom, int endingAt);
    public abstract virtual HashSet`1<T> GetAll();
    public abstract virtual T PopRandomItem();
    public abstract virtual T GetRandomItem();
    public abstract virtual void MoveTo(T item, IRedisSet`1<T> toSet);
    public abstract virtual void PopulateWithIntersectOf(IRedisSet`1[] sets);
    public abstract virtual void PopulateWithUnionOf(IRedisSet`1[] sets);
    public abstract virtual void GetDifferences(IRedisSet`1[] withSets);
    public abstract virtual void PopulateWithDifferencesOf(IRedisSet`1<T> fromSet, IRedisSet`1[] withSets);
}
public interface ServiceStack.Redis.Generic.IRedisSetAsync`1 {
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> SortAsync(int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<T> PopRandomItemAsync(CancellationToken token);
    public abstract virtual ValueTask`1<T> GetRandomItemAsync(CancellationToken token);
    public abstract virtual ValueTask MoveToAsync(T item, IRedisSetAsync`1<T> toSet, CancellationToken token);
    public abstract virtual ValueTask PopulateWithIntersectOfAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    public abstract virtual ValueTask PopulateWithIntersectOfAsync(IRedisSetAsync`1[] sets);
    public abstract virtual ValueTask PopulateWithUnionOfAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    public abstract virtual ValueTask PopulateWithUnionOfAsync(IRedisSetAsync`1[] sets);
    public abstract virtual ValueTask GetDifferencesAsync(IRedisSetAsync`1[] withSets, CancellationToken token);
    public abstract virtual ValueTask GetDifferencesAsync(IRedisSetAsync`1[] withSets);
    public abstract virtual ValueTask PopulateWithDifferencesOfAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets, CancellationToken token);
    public abstract virtual ValueTask PopulateWithDifferencesOfAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsAsync(T item, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(T item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(T item, CancellationToken token);
}
public interface ServiceStack.Redis.Generic.IRedisSortedSet`1 {
    public abstract virtual void Add(T item, double score);
    public abstract virtual T PopItemWithHighestScore();
    public abstract virtual T PopItemWithLowestScore();
    public abstract virtual double IncrementItem(T item, double incrementBy);
    public abstract virtual int IndexOf(T item);
    public abstract virtual long IndexOfDescending(T item);
    public abstract virtual List`1<T> GetAll();
    public abstract virtual List`1<T> GetAllDescending();
    public abstract virtual List`1<T> GetRange(int fromRank, int toRank);
    public abstract virtual List`1<T> GetRangeByLowestScore(double fromScore, double toScore);
    public abstract virtual List`1<T> GetRangeByLowestScore(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<T> GetRangeByHighestScore(double fromScore, double toScore);
    public abstract virtual List`1<T> GetRangeByHighestScore(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual long RemoveRange(int minRank, int maxRank);
    public abstract virtual long RemoveRangeByScore(double fromScore, double toScore);
    public abstract virtual double GetItemScore(T item);
    public abstract virtual long PopulateWithIntersectOf(IRedisSortedSet`1[] setIds);
    public abstract virtual long PopulateWithIntersectOf(IRedisSortedSet`1[] setIds, String[] args);
    public abstract virtual long PopulateWithUnionOf(IRedisSortedSet`1[] setIds);
    public abstract virtual long PopulateWithUnionOf(IRedisSortedSet`1[] setIds, String[] args);
}
public interface ServiceStack.Redis.Generic.IRedisSortedSetAsync`1 {
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask AddAsync(T item, double score, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopItemWithHighestScoreAsync(CancellationToken token);
    public abstract virtual ValueTask`1<T> PopItemWithLowestScoreAsync(CancellationToken token);
    public abstract virtual ValueTask`1<double> IncrementItemAsync(T item, double incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<int> IndexOfAsync(T item, CancellationToken token);
    public abstract virtual ValueTask`1<long> IndexOfDescendingAsync(T item, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetAllDescendingAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeAsync(int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeByLowestScoreAsync(double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeByLowestScoreAsync(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeByHighestScoreAsync(double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeByHighestScoreAsync(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeAsync(int minRank, int maxRank, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeByScoreAsync(double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<double> GetItemScoreAsync(T item, CancellationToken token);
    public abstract virtual ValueTask`1<long> PopulateWithIntersectOfAsync(IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> PopulateWithIntersectOfAsync(IRedisSortedSetAsync`1[] setIds);
    public abstract virtual ValueTask`1<long> PopulateWithIntersectOfAsync(IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<long> PopulateWithUnionOfAsync(IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> PopulateWithUnionOfAsync(IRedisSortedSetAsync`1[] setIds);
    public abstract virtual ValueTask`1<long> PopulateWithUnionOfAsync(IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsAsync(T item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(T item, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(T item, CancellationToken token);
}
[DefaultMemberAttribute("Item")]
public interface ServiceStack.Redis.Generic.IRedisTypedClient`1 {
    public IHasNamed`1<IRedisList`1<T>> Lists { get; public set; }
    public IHasNamed`1<IRedisSet`1<T>> Sets { get; public set; }
    public IHasNamed`1<IRedisSortedSet`1<T>> SortedSets { get; public set; }
    public IRedisClient RedisClient { get; }
    public long Db { get; public set; }
    public IRedisSet TypeIdsSet { get; }
    public T Item { get; public set; }
    public string SequenceKey { get; public set; }
    public abstract virtual IHasNamed`1<IRedisList`1<T>> get_Lists();
    public abstract virtual void set_Lists(IHasNamed`1<IRedisList`1<T>> value);
    public abstract virtual IHasNamed`1<IRedisSet`1<T>> get_Sets();
    public abstract virtual void set_Sets(IHasNamed`1<IRedisSet`1<T>> value);
    public abstract virtual IHasNamed`1<IRedisSortedSet`1<T>> get_SortedSets();
    public abstract virtual void set_SortedSets(IHasNamed`1<IRedisSortedSet`1<T>> value);
    public abstract virtual IRedisHash`2<TKey, T> GetHash(string hashId);
    public abstract virtual IRedisTypedTransaction`1<T> CreateTransaction();
    public abstract virtual IRedisTypedPipeline`1<T> CreatePipeline();
    public abstract virtual IRedisClient get_RedisClient();
    public abstract virtual IDisposable AcquireLock();
    public abstract virtual IDisposable AcquireLock(TimeSpan timeOut);
    public abstract virtual long get_Db();
    public abstract virtual void set_Db(long value);
    public abstract virtual List`1<string> GetAllKeys();
    public abstract virtual IRedisSet get_TypeIdsSet();
    public abstract virtual T get_Item(string key);
    public abstract virtual void set_Item(string key, T value);
    public abstract virtual string UrnKey(T value);
    public abstract virtual string get_SequenceKey();
    public abstract virtual void set_SequenceKey(string value);
    public abstract virtual void SetSequence(int value);
    public abstract virtual long GetNextSequence();
    public abstract virtual long GetNextSequence(int incrBy);
    public abstract virtual RedisKeyType GetEntryType(string key);
    public abstract virtual string GetRandomKey();
    public abstract virtual void SetValue(string key, T entity);
    public abstract virtual void SetValue(string key, T entity, TimeSpan expireIn);
    public abstract virtual bool SetValueIfNotExists(string key, T entity);
    public abstract virtual bool SetValueIfExists(string key, T entity);
    public abstract virtual T Store(T entity, TimeSpan expireIn);
    public abstract virtual T GetValue(string key);
    public abstract virtual T GetAndSetValue(string key, T value);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool RemoveEntry(string key);
    public abstract virtual bool RemoveEntry(String[] args);
    public abstract virtual bool RemoveEntry(IHasStringId[] entities);
    public abstract virtual long IncrementValue(string key);
    public abstract virtual long IncrementValueBy(string key, int count);
    public abstract virtual long DecrementValue(string key);
    public abstract virtual long DecrementValueBy(string key, int count);
    public abstract virtual bool ExpireIn(object id, TimeSpan expiresAt);
    public abstract virtual bool ExpireAt(object id, DateTime dateTime);
    public abstract virtual bool ExpireEntryIn(string key, TimeSpan expiresAt);
    public abstract virtual bool ExpireEntryAt(string key, DateTime dateTime);
    public abstract virtual TimeSpan GetTimeToLive(string key);
    public abstract virtual void Save();
    public abstract virtual void SaveAsync();
    public abstract virtual void FlushDb();
    public abstract virtual void FlushAll();
    public abstract virtual T[] SearchKeys(string pattern);
    public abstract virtual List`1<T> GetValues(List`1<string> keys);
    public abstract virtual List`1<T> GetSortedEntryValues(IRedisSet`1<T> fromSet, int startingFrom, int endingAt);
    public abstract virtual void StoreAsHash(T entity);
    public abstract virtual T GetFromHash(object id);
    public abstract virtual HashSet`1<T> GetAllItemsFromSet(IRedisSet`1<T> fromSet);
    public abstract virtual void AddItemToSet(IRedisSet`1<T> toSet, T item);
    public abstract virtual void RemoveItemFromSet(IRedisSet`1<T> fromSet, T item);
    public abstract virtual T PopItemFromSet(IRedisSet`1<T> fromSet);
    public abstract virtual void MoveBetweenSets(IRedisSet`1<T> fromSet, IRedisSet`1<T> toSet, T item);
    public abstract virtual long GetSetCount(IRedisSet`1<T> set);
    public abstract virtual bool SetContainsItem(IRedisSet`1<T> set, T item);
    public abstract virtual HashSet`1<T> GetIntersectFromSets(IRedisSet`1[] sets);
    public abstract virtual void StoreIntersectFromSets(IRedisSet`1<T> intoSet, IRedisSet`1[] sets);
    public abstract virtual HashSet`1<T> GetUnionFromSets(IRedisSet`1[] sets);
    public abstract virtual void StoreUnionFromSets(IRedisSet`1<T> intoSet, IRedisSet`1[] sets);
    public abstract virtual HashSet`1<T> GetDifferencesFromSet(IRedisSet`1<T> fromSet, IRedisSet`1[] withSets);
    public abstract virtual void StoreDifferencesFromSet(IRedisSet`1<T> intoSet, IRedisSet`1<T> fromSet, IRedisSet`1[] withSets);
    public abstract virtual T GetRandomItemFromSet(IRedisSet`1<T> fromSet);
    public abstract virtual List`1<T> GetAllItemsFromList(IRedisList`1<T> fromList);
    public abstract virtual List`1<T> GetRangeFromList(IRedisList`1<T> fromList, int startingFrom, int endingAt);
    public abstract virtual List`1<T> SortList(IRedisList`1<T> fromList, int startingFrom, int endingAt);
    public abstract virtual void AddItemToList(IRedisList`1<T> fromList, T value);
    public abstract virtual void PrependItemToList(IRedisList`1<T> fromList, T value);
    public abstract virtual T RemoveStartFromList(IRedisList`1<T> fromList);
    public abstract virtual T BlockingRemoveStartFromList(IRedisList`1<T> fromList, Nullable`1<TimeSpan> timeOut);
    public abstract virtual T RemoveEndFromList(IRedisList`1<T> fromList);
    public abstract virtual void RemoveAllFromList(IRedisList`1<T> fromList);
    public abstract virtual void TrimList(IRedisList`1<T> fromList, int keepStartingFrom, int keepEndingAt);
    public abstract virtual long RemoveItemFromList(IRedisList`1<T> fromList, T value);
    public abstract virtual long RemoveItemFromList(IRedisList`1<T> fromList, T value, int noOfMatches);
    public abstract virtual long GetListCount(IRedisList`1<T> fromList);
    public abstract virtual T GetItemFromList(IRedisList`1<T> fromList, int listIndex);
    public abstract virtual void SetItemInList(IRedisList`1<T> toList, int listIndex, T value);
    public abstract virtual void InsertBeforeItemInList(IRedisList`1<T> toList, T pivot, T value);
    public abstract virtual void InsertAfterItemInList(IRedisList`1<T> toList, T pivot, T value);
    public abstract virtual void EnqueueItemOnList(IRedisList`1<T> fromList, T item);
    public abstract virtual T DequeueItemFromList(IRedisList`1<T> fromList);
    public abstract virtual T BlockingDequeueItemFromList(IRedisList`1<T> fromList, Nullable`1<TimeSpan> timeOut);
    public abstract virtual void PushItemToList(IRedisList`1<T> fromList, T item);
    public abstract virtual T PopItemFromList(IRedisList`1<T> fromList);
    public abstract virtual T BlockingPopItemFromList(IRedisList`1<T> fromList, Nullable`1<TimeSpan> timeOut);
    public abstract virtual T PopAndPushItemBetweenLists(IRedisList`1<T> fromList, IRedisList`1<T> toList);
    public abstract virtual T BlockingPopAndPushItemBetweenLists(IRedisList`1<T> fromList, IRedisList`1<T> toList, Nullable`1<TimeSpan> timeOut);
    public abstract virtual void AddItemToSortedSet(IRedisSortedSet`1<T> toSet, T value);
    public abstract virtual void AddItemToSortedSet(IRedisSortedSet`1<T> toSet, T value, double score);
    public abstract virtual bool RemoveItemFromSortedSet(IRedisSortedSet`1<T> fromSet, T value);
    public abstract virtual T PopItemWithLowestScoreFromSortedSet(IRedisSortedSet`1<T> fromSet);
    public abstract virtual T PopItemWithHighestScoreFromSortedSet(IRedisSortedSet`1<T> fromSet);
    public abstract virtual bool SortedSetContainsItem(IRedisSortedSet`1<T> set, T value);
    public abstract virtual double IncrementItemInSortedSet(IRedisSortedSet`1<T> set, T value, double incrementBy);
    public abstract virtual long GetItemIndexInSortedSet(IRedisSortedSet`1<T> set, T value);
    public abstract virtual long GetItemIndexInSortedSetDesc(IRedisSortedSet`1<T> set, T value);
    public abstract virtual List`1<T> GetAllItemsFromSortedSet(IRedisSortedSet`1<T> set);
    public abstract virtual List`1<T> GetAllItemsFromSortedSetDesc(IRedisSortedSet`1<T> set);
    public abstract virtual List`1<T> GetRangeFromSortedSet(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public abstract virtual List`1<T> GetRangeFromSortedSetDesc(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public abstract virtual IDictionary`2<T, double> GetAllWithScoresFromSortedSet(IRedisSortedSet`1<T> set);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSet(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetDesc(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public abstract virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public abstract virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public abstract virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public abstract virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public abstract virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public abstract virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual long RemoveRangeFromSortedSet(IRedisSortedSet`1<T> set, int minRank, int maxRank);
    public abstract virtual long RemoveRangeFromSortedSetByScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public abstract virtual long GetSortedSetCount(IRedisSortedSet`1<T> set);
    public abstract virtual double GetItemScoreInSortedSet(IRedisSortedSet`1<T> set, T value);
    public abstract virtual long StoreIntersectFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds);
    public abstract virtual long StoreIntersectFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds, String[] args);
    public abstract virtual long StoreUnionFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds);
    public abstract virtual long StoreUnionFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds, String[] args);
    public abstract virtual bool HashContainsEntry(IRedisHash`2<TKey, T> hash, TKey key);
    public abstract virtual bool SetEntryInHash(IRedisHash`2<TKey, T> hash, TKey key, T value);
    public abstract virtual bool SetEntryInHashIfNotExists(IRedisHash`2<TKey, T> hash, TKey key, T value);
    public abstract virtual void SetRangeInHash(IRedisHash`2<TKey, T> hash, IEnumerable`1<KeyValuePair`2<TKey, T>> keyValuePairs);
    public abstract virtual T GetValueFromHash(IRedisHash`2<TKey, T> hash, TKey key);
    public abstract virtual bool RemoveEntryFromHash(IRedisHash`2<TKey, T> hash, TKey key);
    public abstract virtual long GetHashCount(IRedisHash`2<TKey, T> hash);
    public abstract virtual List`1<TKey> GetHashKeys(IRedisHash`2<TKey, T> hash);
    public abstract virtual List`1<T> GetHashValues(IRedisHash`2<TKey, T> hash);
    public abstract virtual Dictionary`2<TKey, T> GetAllEntriesFromHash(IRedisHash`2<TKey, T> hash);
    public abstract virtual void StoreRelatedEntities(object parentId, List`1<TChild> children);
    public abstract virtual void StoreRelatedEntities(object parentId, TChild[] children);
    public abstract virtual void DeleteRelatedEntities(object parentId);
    public abstract virtual void DeleteRelatedEntity(object parentId, object childId);
    public abstract virtual List`1<TChild> GetRelatedEntities(object parentId);
    public abstract virtual long GetRelatedEntitiesCount(object parentId);
    public abstract virtual void AddToRecentsList(T value);
    public abstract virtual List`1<T> GetLatestFromRecentsList(int skip, int take);
    public abstract virtual List`1<T> GetEarliestFromRecentsList(int skip, int take);
}
public interface ServiceStack.Redis.Generic.IRedisTypedClientAsync`1 {
    public IHasNamed`1<IRedisListAsync`1<T>> Lists { get; }
    public IHasNamed`1<IRedisSetAsync`1<T>> Sets { get; }
    public IHasNamed`1<IRedisSortedSetAsync`1<T>> SortedSets { get; }
    public IRedisSetAsync TypeIdsSet { get; }
    public IRedisClientAsync RedisClient { get; }
    public long Db { get; }
    public string SequenceKey { get; public set; }
    public abstract virtual IHasNamed`1<IRedisListAsync`1<T>> get_Lists();
    public abstract virtual IHasNamed`1<IRedisSetAsync`1<T>> get_Sets();
    public abstract virtual IHasNamed`1<IRedisSortedSetAsync`1<T>> get_SortedSets();
    public abstract virtual IRedisHashAsync`2<TKey, T> GetHash(string hashId);
    public abstract virtual IRedisSetAsync get_TypeIdsSet();
    public abstract virtual ValueTask`1<IRedisTypedTransactionAsync`1<T>> CreateTransactionAsync(CancellationToken token);
    public abstract virtual IRedisTypedPipelineAsync`1<T> CreatePipeline();
    public abstract virtual IRedisClientAsync get_RedisClient();
    public abstract virtual ValueTask`1<IAsyncDisposable> AcquireLockAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual long get_Db();
    public abstract virtual ValueTask SelectAsync(long db, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetAllKeysAsync(CancellationToken token);
    public abstract virtual string UrnKey(T value);
    public abstract virtual string get_SequenceKey();
    public abstract virtual void set_SequenceKey(string value);
    public abstract virtual ValueTask SetSequenceAsync(int value, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetNextSequenceAsync(CancellationToken token);
    public abstract virtual ValueTask`1<long> GetNextSequenceAsync(int incrBy, CancellationToken token);
    public abstract virtual ValueTask`1<RedisKeyType> GetEntryTypeAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<string> GetRandomKeyAsync(CancellationToken token);
    public abstract virtual ValueTask SetValueAsync(string key, T entity, CancellationToken token);
    public abstract virtual ValueTask SetValueAsync(string key, T entity, TimeSpan expireIn, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetValueIfNotExistsAsync(string key, T entity, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetValueIfExistsAsync(string key, T entity, CancellationToken token);
    public abstract virtual ValueTask`1<T> StoreAsync(T entity, TimeSpan expireIn, CancellationToken token);
    public abstract virtual ValueTask`1<T> GetValueAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<T> GetAndSetValueAsync(string key, T value, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsKeyAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveEntryAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveEntryAsync(String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveEntryAsync(String[] args);
    public abstract virtual ValueTask`1<bool> RemoveEntryAsync(IHasStringId[] entities, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveEntryAsync(IHasStringId[] entities);
    public abstract virtual ValueTask`1<long> IncrementValueAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> IncrementValueByAsync(string key, int count, CancellationToken token);
    public abstract virtual ValueTask`1<long> DecrementValueAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> DecrementValueByAsync(string key, int count, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireInAsync(object id, TimeSpan expiresAt, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireAtAsync(object id, DateTime dateTime, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireEntryInAsync(string key, TimeSpan expiresAt, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireEntryAtAsync(string key, DateTime dateTime, CancellationToken token);
    public abstract virtual ValueTask`1<TimeSpan> GetTimeToLiveAsync(string key, CancellationToken token);
    public abstract virtual ValueTask ForegroundSaveAsync(CancellationToken token);
    public abstract virtual ValueTask BackgroundSaveAsync(CancellationToken token);
    public abstract virtual ValueTask FlushDbAsync(CancellationToken token);
    public abstract virtual ValueTask FlushAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<T[]> SearchKeysAsync(string pattern, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetValuesAsync(List`1<string> keys, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetSortedEntryValuesAsync(IRedisSetAsync`1<T> fromSet, int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask StoreAsHashAsync(T entity, CancellationToken token);
    public abstract virtual ValueTask`1<T> GetFromHashAsync(object id, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetAllItemsFromSetAsync(IRedisSetAsync`1<T> fromSet, CancellationToken token);
    public abstract virtual ValueTask AddItemToSetAsync(IRedisSetAsync`1<T> toSet, T item, CancellationToken token);
    public abstract virtual ValueTask RemoveItemFromSetAsync(IRedisSetAsync`1<T> fromSet, T item, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopItemFromSetAsync(IRedisSetAsync`1<T> fromSet, CancellationToken token);
    public abstract virtual ValueTask MoveBetweenSetsAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1<T> toSet, T item, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetSetCountAsync(IRedisSetAsync`1<T> set, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetContainsItemAsync(IRedisSetAsync`1<T> set, T item, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetIntersectFromSetsAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetIntersectFromSetsAsync(IRedisSetAsync`1[] sets);
    public abstract virtual ValueTask StoreIntersectFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets, CancellationToken token);
    public abstract virtual ValueTask StoreIntersectFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetUnionFromSetsAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetUnionFromSetsAsync(IRedisSetAsync`1[] sets);
    public abstract virtual ValueTask StoreUnionFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets, CancellationToken token);
    public abstract virtual ValueTask StoreUnionFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetDifferencesFromSetAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<T>> GetDifferencesFromSetAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets);
    public abstract virtual ValueTask StoreDifferencesFromSetAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets, CancellationToken token);
    public abstract virtual ValueTask StoreDifferencesFromSetAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets);
    public abstract virtual ValueTask`1<T> GetRandomItemFromSetAsync(IRedisSetAsync`1<T> fromSet, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetAllItemsFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromListAsync(IRedisListAsync`1<T> fromList, int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> SortListAsync(IRedisListAsync`1<T> fromList, int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask AddItemToListAsync(IRedisListAsync`1<T> fromList, T value, CancellationToken token);
    public abstract virtual ValueTask PrependItemToListAsync(IRedisListAsync`1<T> fromList, T value, CancellationToken token);
    public abstract virtual ValueTask`1<T> RemoveStartFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    public abstract virtual ValueTask`1<T> BlockingRemoveStartFromListAsync(IRedisListAsync`1<T> fromList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<T> RemoveEndFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    public abstract virtual ValueTask RemoveAllFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    public abstract virtual ValueTask TrimListAsync(IRedisListAsync`1<T> fromList, int keepStartingFrom, int keepEndingAt, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveItemFromListAsync(IRedisListAsync`1<T> fromList, T value, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveItemFromListAsync(IRedisListAsync`1<T> fromList, T value, int noOfMatches, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetListCountAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    public abstract virtual ValueTask`1<T> GetItemFromListAsync(IRedisListAsync`1<T> fromList, int listIndex, CancellationToken token);
    public abstract virtual ValueTask SetItemInListAsync(IRedisListAsync`1<T> toList, int listIndex, T value, CancellationToken token);
    public abstract virtual ValueTask InsertBeforeItemInListAsync(IRedisListAsync`1<T> toList, T pivot, T value, CancellationToken token);
    public abstract virtual ValueTask InsertAfterItemInListAsync(IRedisListAsync`1<T> toList, T pivot, T value, CancellationToken token);
    public abstract virtual ValueTask EnqueueItemOnListAsync(IRedisListAsync`1<T> fromList, T item, CancellationToken token);
    public abstract virtual ValueTask`1<T> DequeueItemFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    public abstract virtual ValueTask`1<T> BlockingDequeueItemFromListAsync(IRedisListAsync`1<T> fromList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask PushItemToListAsync(IRedisListAsync`1<T> fromList, T item, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopItemFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    public abstract virtual ValueTask`1<T> BlockingPopItemFromListAsync(IRedisListAsync`1<T> fromList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopAndPushItemBetweenListsAsync(IRedisListAsync`1<T> fromList, IRedisListAsync`1<T> toList, CancellationToken token);
    public abstract virtual ValueTask`1<T> BlockingPopAndPushItemBetweenListsAsync(IRedisListAsync`1<T> fromList, IRedisListAsync`1<T> toList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask AddItemToSortedSetAsync(IRedisSortedSetAsync`1<T> toSet, T value, CancellationToken token);
    public abstract virtual ValueTask AddItemToSortedSetAsync(IRedisSortedSetAsync`1<T> toSet, T value, double score, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveItemFromSortedSetAsync(IRedisSortedSetAsync`1<T> fromSet, T value, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopItemWithLowestScoreFromSortedSetAsync(IRedisSortedSetAsync`1<T> fromSet, CancellationToken token);
    public abstract virtual ValueTask`1<T> PopItemWithHighestScoreFromSortedSetAsync(IRedisSortedSetAsync`1<T> fromSet, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SortedSetContainsItemAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    public abstract virtual ValueTask`1<double> IncrementItemInSortedSetAsync(IRedisSortedSetAsync`1<T> set, T value, double incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetItemIndexInSortedSetAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetItemIndexInSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetAllItemsFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetAllItemsFromSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetAllWithScoresFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<T, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, int minRank, int maxRank, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeFromSortedSetByScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetSortedSetCountAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    public abstract virtual ValueTask`1<double> GetItemScoreInSortedSetAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreIntersectFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreIntersectFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds);
    public abstract virtual ValueTask`1<long> StoreIntersectFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreUnionFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreUnionFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds);
    public abstract virtual ValueTask`1<long> StoreUnionFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<bool> HashContainsEntryAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetEntryInHashAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, T value, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetEntryInHashIfNotExistsAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, T value, CancellationToken token);
    public abstract virtual ValueTask SetRangeInHashAsync(IRedisHashAsync`2<TKey, T> hash, IEnumerable`1<KeyValuePair`2<TKey, T>> keyValuePairs, CancellationToken token);
    public abstract virtual ValueTask`1<T> GetValueFromHashAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveEntryFromHashAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetHashCountAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<TKey>> GetHashKeysAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetHashValuesAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    public abstract virtual ValueTask`1<Dictionary`2<TKey, T>> GetAllEntriesFromHashAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    public abstract virtual ValueTask StoreRelatedEntitiesAsync(object parentId, List`1<TChild> children, CancellationToken token);
    public abstract virtual ValueTask StoreRelatedEntitiesAsync(object parentId, TChild[] children, CancellationToken token);
    public abstract virtual ValueTask StoreRelatedEntitiesAsync(object parentId, TChild[] children);
    public abstract virtual ValueTask DeleteRelatedEntitiesAsync(object parentId, CancellationToken token);
    public abstract virtual ValueTask DeleteRelatedEntityAsync(object parentId, object childId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<TChild>> GetRelatedEntitiesAsync(object parentId, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetRelatedEntitiesCountAsync(object parentId, CancellationToken token);
    public abstract virtual ValueTask AddToRecentsListAsync(T value, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetLatestFromRecentsListAsync(int skip, int take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetEarliestFromRecentsListAsync(int skip, int take, CancellationToken token);
}
public interface ServiceStack.Redis.Generic.IRedisTypedPipeline`1 {
}
public interface ServiceStack.Redis.Generic.IRedisTypedPipelineAsync`1 {
}
public interface ServiceStack.Redis.Generic.IRedisTypedQueueableOperation`1 {
    public abstract virtual void QueueCommand(Action`1<IRedisTypedClient`1<T>> command);
    public abstract virtual void QueueCommand(Action`1<IRedisTypedClient`1<T>> command, Action onSuccessCallback);
    public abstract virtual void QueueCommand(Action`1<IRedisTypedClient`1<T>> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, int> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, int> command, Action`1<int> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, int> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, long> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, long> command, Action`1<long> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, long> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, bool> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, bool> command, Action`1<bool> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, bool> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, double> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, double> command, Action`1<double> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, double> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[]> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[]> command, Action`1<Byte[]> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[]> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, string> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, string> command, Action`1<string> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, string> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, T> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, T> command, Action`1<T> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, T> command, Action`1<T> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<string>> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<string>> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<T>> command);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<T>> command, Action`1<List`1<T>> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<T>> command, Action`1<List`1<T>> onSuccessCallback, Action`1<Exception> onErrorCallback);
}
public interface ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync`1 {
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<int>> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<long>> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<bool>> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<double>> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<Byte[]>> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<string>> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<T>> command, Action`1<T> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<List`1<string>>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<HashSet`1<string>>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<List`1<T>>> command, Action`1<List`1<T>> onSuccessCallback, Action`1<Exception> onErrorCallback);
}
public interface ServiceStack.Redis.Generic.IRedisTypedTransaction`1 {
    public abstract virtual bool Commit();
    public abstract virtual void Rollback();
}
public interface ServiceStack.Redis.Generic.IRedisTypedTransactionAsync`1 {
    public abstract virtual ValueTask`1<bool> CommitAsync(CancellationToken token);
    public abstract virtual ValueTask RollbackAsync(CancellationToken token);
}
public interface ServiceStack.Redis.IHasStats {
    public Dictionary`2<string, long> Stats { get; }
    public abstract virtual Dictionary`2<string, long> get_Stats();
}
[DefaultMemberAttribute("Item")]
public interface ServiceStack.Redis.IRedisClient {
    public long Db { get; public set; }
    public long DbSize { get; }
    public Dictionary`2<string, string> Info { get; }
    public DateTime LastSave { get; }
    public string Host { get; }
    public int Port { get; }
    public int ConnectTimeout { get; public set; }
    public int RetryTimeout { get; public set; }
    public int RetryCount { get; public set; }
    public int SendTimeout { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool HadExceptions { get; }
    public string Item { get; public set; }
    public IHasNamed`1<IRedisList> Lists { get; public set; }
    public IHasNamed`1<IRedisSet> Sets { get; public set; }
    public IHasNamed`1<IRedisSortedSet> SortedSets { get; public set; }
    public IHasNamed`1<IRedisHash> Hashes { get; public set; }
    public abstract virtual long get_Db();
    public abstract virtual void set_Db(long value);
    public abstract virtual long get_DbSize();
    public abstract virtual Dictionary`2<string, string> get_Info();
    public abstract virtual DateTime GetServerTime();
    public abstract virtual DateTime get_LastSave();
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
    public abstract virtual int get_ConnectTimeout();
    public abstract virtual void set_ConnectTimeout(int value);
    public abstract virtual int get_RetryTimeout();
    public abstract virtual void set_RetryTimeout(int value);
    public abstract virtual int get_RetryCount();
    public abstract virtual void set_RetryCount(int value);
    public abstract virtual int get_SendTimeout();
    public abstract virtual void set_SendTimeout(int value);
    public abstract virtual string get_Username();
    public abstract virtual void set_Username(string value);
    public abstract virtual string get_Password();
    public abstract virtual void set_Password(string value);
    public abstract virtual bool get_HadExceptions();
    public abstract virtual bool Ping();
    public abstract virtual string Echo(string text);
    public abstract virtual RedisText Custom(Object[] cmdWithArgs);
    public abstract virtual void Save();
    public abstract virtual void SaveAsync();
    public abstract virtual void Shutdown();
    public abstract virtual void ShutdownNoSave();
    public abstract virtual void RewriteAppendOnlyFileAsync();
    public abstract virtual void FlushDb();
    public abstract virtual RedisServerRole GetServerRole();
    public abstract virtual RedisText GetServerRoleInfo();
    public abstract virtual string GetConfig(string item);
    public abstract virtual void SetConfig(string item, string value);
    public abstract virtual void SaveConfig();
    public abstract virtual void ResetInfoStats();
    public abstract virtual string GetClient();
    public abstract virtual void SetClient(string name);
    public abstract virtual void KillClient(string address);
    public abstract virtual long KillClients(string fromAddress, string withId, Nullable`1<RedisClientType> ofType, Nullable`1<bool> skipMe);
    public abstract virtual List`1<Dictionary`2<string, string>> GetClientsInfo();
    public abstract virtual void PauseAllClients(TimeSpan duration);
    public abstract virtual string get_Item(string key);
    public abstract virtual void set_Item(string key, string value);
    public abstract virtual List`1<string> GetAllKeys();
    public abstract virtual string UrnKey(T value);
    public abstract virtual string UrnKey(object id);
    public abstract virtual string UrnKey(Type type, object id);
    public abstract virtual void SetAll(IEnumerable`1<string> keys, IEnumerable`1<string> values);
    public abstract virtual void SetAll(Dictionary`2<string, string> map);
    public abstract virtual void SetValues(Dictionary`2<string, string> map);
    public abstract virtual void SetValue(string key, string value);
    public abstract virtual void SetValue(string key, string value, TimeSpan expireIn);
    public abstract virtual bool SetValueIfNotExists(string key, string value);
    public abstract virtual bool SetValueIfNotExists(string key, string value, TimeSpan expireIn);
    public abstract virtual bool SetValueIfExists(string key, string value);
    public abstract virtual bool SetValueIfExists(string key, string value, TimeSpan expireIn);
    public abstract virtual string GetValue(string key);
    public abstract virtual string GetAndSetValue(string key, string value);
    public abstract virtual List`1<string> GetValues(List`1<string> keys);
    public abstract virtual List`1<T> GetValues(List`1<string> keys);
    public abstract virtual Dictionary`2<string, string> GetValuesMap(List`1<string> keys);
    public abstract virtual Dictionary`2<string, T> GetValuesMap(List`1<string> keys);
    public abstract virtual long AppendTo(string key, string value);
    public abstract virtual string Slice(string key, int fromIndex, int toIndex);
    public abstract virtual long InsertAt(string key, int offset, string value);
    public abstract virtual void RenameKey(string fromName, string toName);
    public abstract virtual T GetFromHash(object id);
    public abstract virtual void StoreAsHash(T entity);
    public abstract virtual object StoreObject(object entity);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool RemoveEntry(String[] args);
    public abstract virtual long IncrementValue(string key);
    public abstract virtual long IncrementValueBy(string key, int count);
    public abstract virtual long IncrementValueBy(string key, long count);
    public abstract virtual double IncrementValueBy(string key, double count);
    public abstract virtual long DecrementValue(string key);
    public abstract virtual long DecrementValueBy(string key, int count);
    public abstract virtual List`1<string> SearchKeys(string pattern);
    public abstract virtual string Type(string key);
    public abstract virtual RedisKeyType GetEntryType(string key);
    public abstract virtual long GetStringCount(string key);
    public abstract virtual string GetRandomKey();
    public abstract virtual bool ExpireEntryIn(string key, TimeSpan expireIn);
    public abstract virtual bool ExpireEntryAt(string key, DateTime expireAt);
    public abstract virtual List`1<string> GetSortedEntryValues(string key, int startingFrom, int endingAt);
    public abstract virtual void WriteAll(IEnumerable`1<TEntity> entities);
    public abstract virtual IEnumerable`1<string> ScanAllKeys(string pattern, int pageSize);
    public abstract virtual IEnumerable`1<string> ScanAllSetItems(string setId, string pattern, int pageSize);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, double>> ScanAllSortedSetItems(string setId, string pattern, int pageSize);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> ScanAllHashEntries(string hashId, string pattern, int pageSize);
    public abstract virtual bool AddToHyperLog(string key, String[] elements);
    public abstract virtual long CountHyperLog(string key);
    public abstract virtual void MergeHyperLogs(string toKey, String[] fromKeys);
    public abstract virtual long AddGeoMember(string key, double longitude, double latitude, string member);
    public abstract virtual long AddGeoMembers(string key, RedisGeo[] geoPoints);
    public abstract virtual double CalculateDistanceBetweenGeoMembers(string key, string fromMember, string toMember, string unit);
    public abstract virtual String[] GetGeohashes(string key, String[] members);
    public abstract virtual List`1<RedisGeo> GetGeoCoordinates(string key, String[] members);
    public abstract virtual String[] FindGeoMembersInRadius(string key, double longitude, double latitude, double radius, string unit);
    public abstract virtual List`1<RedisGeoResult> FindGeoResultsInRadius(string key, double longitude, double latitude, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest);
    public abstract virtual String[] FindGeoMembersInRadius(string key, string member, double radius, string unit);
    public abstract virtual List`1<RedisGeoResult> FindGeoResultsInRadius(string key, string member, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest);
    public abstract virtual IRedisTypedClient`1<T> As();
    public abstract virtual IHasNamed`1<IRedisList> get_Lists();
    public abstract virtual void set_Lists(IHasNamed`1<IRedisList> value);
    public abstract virtual IHasNamed`1<IRedisSet> get_Sets();
    public abstract virtual void set_Sets(IHasNamed`1<IRedisSet> value);
    public abstract virtual IHasNamed`1<IRedisSortedSet> get_SortedSets();
    public abstract virtual void set_SortedSets(IHasNamed`1<IRedisSortedSet> value);
    public abstract virtual IHasNamed`1<IRedisHash> get_Hashes();
    public abstract virtual void set_Hashes(IHasNamed`1<IRedisHash> value);
    public abstract virtual IRedisTransaction CreateTransaction();
    public abstract virtual IRedisPipeline CreatePipeline();
    public abstract virtual IDisposable AcquireLock(string key);
    public abstract virtual IDisposable AcquireLock(string key, TimeSpan timeOut);
    public abstract virtual void Watch(String[] keys);
    public abstract virtual void UnWatch();
    public abstract virtual IRedisSubscription CreateSubscription();
    public abstract virtual long PublishMessage(string toChannel, string message);
    public abstract virtual HashSet`1<string> GetAllItemsFromSet(string setId);
    public abstract virtual void AddItemToSet(string setId, string item);
    public abstract virtual void AddRangeToSet(string setId, List`1<string> items);
    public abstract virtual void RemoveItemFromSet(string setId, string item);
    public abstract virtual string PopItemFromSet(string setId);
    public abstract virtual List`1<string> PopItemsFromSet(string setId, int count);
    public abstract virtual void MoveBetweenSets(string fromSetId, string toSetId, string item);
    public abstract virtual long GetSetCount(string setId);
    public abstract virtual bool SetContainsItem(string setId, string item);
    public abstract virtual HashSet`1<string> GetIntersectFromSets(String[] setIds);
    public abstract virtual void StoreIntersectFromSets(string intoSetId, String[] setIds);
    public abstract virtual HashSet`1<string> GetUnionFromSets(String[] setIds);
    public abstract virtual void StoreUnionFromSets(string intoSetId, String[] setIds);
    public abstract virtual HashSet`1<string> GetDifferencesFromSet(string fromSetId, String[] withSetIds);
    public abstract virtual void StoreDifferencesFromSet(string intoSetId, string fromSetId, String[] withSetIds);
    public abstract virtual string GetRandomItemFromSet(string setId);
    public abstract virtual List`1<string> GetAllItemsFromList(string listId);
    public abstract virtual List`1<string> GetRangeFromList(string listId, int startingFrom, int endingAt);
    public abstract virtual List`1<string> GetRangeFromSortedList(string listId, int startingFrom, int endingAt);
    public abstract virtual List`1<string> GetSortedItemsFromList(string listId, SortOptions sortOptions);
    public abstract virtual void AddItemToList(string listId, string value);
    public abstract virtual void AddRangeToList(string listId, List`1<string> values);
    public abstract virtual void PrependItemToList(string listId, string value);
    public abstract virtual void PrependRangeToList(string listId, List`1<string> values);
    public abstract virtual void RemoveAllFromList(string listId);
    public abstract virtual string RemoveStartFromList(string listId);
    public abstract virtual string BlockingRemoveStartFromList(string listId, Nullable`1<TimeSpan> timeOut);
    public abstract virtual ItemRef BlockingRemoveStartFromLists(String[] listIds, Nullable`1<TimeSpan> timeOut);
    public abstract virtual string RemoveEndFromList(string listId);
    public abstract virtual void TrimList(string listId, int keepStartingFrom, int keepEndingAt);
    public abstract virtual long RemoveItemFromList(string listId, string value);
    public abstract virtual long RemoveItemFromList(string listId, string value, int noOfMatches);
    public abstract virtual long GetListCount(string listId);
    public abstract virtual string GetItemFromList(string listId, int listIndex);
    public abstract virtual void SetItemInList(string listId, int listIndex, string value);
    public abstract virtual void EnqueueItemOnList(string listId, string value);
    public abstract virtual string DequeueItemFromList(string listId);
    public abstract virtual string BlockingDequeueItemFromList(string listId, Nullable`1<TimeSpan> timeOut);
    public abstract virtual ItemRef BlockingDequeueItemFromLists(String[] listIds, Nullable`1<TimeSpan> timeOut);
    public abstract virtual void PushItemToList(string listId, string value);
    public abstract virtual string PopItemFromList(string listId);
    public abstract virtual string BlockingPopItemFromList(string listId, Nullable`1<TimeSpan> timeOut);
    public abstract virtual ItemRef BlockingPopItemFromLists(String[] listIds, Nullable`1<TimeSpan> timeOut);
    public abstract virtual string PopAndPushItemBetweenLists(string fromListId, string toListId);
    public abstract virtual string BlockingPopAndPushItemBetweenLists(string fromListId, string toListId, Nullable`1<TimeSpan> timeOut);
    public abstract virtual bool AddItemToSortedSet(string setId, string value);
    public abstract virtual bool AddItemToSortedSet(string setId, string value, double score);
    public abstract virtual bool AddRangeToSortedSet(string setId, List`1<string> values, double score);
    public abstract virtual bool AddRangeToSortedSet(string setId, List`1<string> values, long score);
    public abstract virtual bool RemoveItemFromSortedSet(string setId, string value);
    public abstract virtual long RemoveItemsFromSortedSet(string setId, List`1<string> values);
    public abstract virtual string PopItemWithLowestScoreFromSortedSet(string setId);
    public abstract virtual string PopItemWithHighestScoreFromSortedSet(string setId);
    public abstract virtual bool SortedSetContainsItem(string setId, string value);
    public abstract virtual double IncrementItemInSortedSet(string setId, string value, double incrementBy);
    public abstract virtual double IncrementItemInSortedSet(string setId, string value, long incrementBy);
    public abstract virtual long GetItemIndexInSortedSet(string setId, string value);
    public abstract virtual long GetItemIndexInSortedSetDesc(string setId, string value);
    public abstract virtual List`1<string> GetAllItemsFromSortedSet(string setId);
    public abstract virtual List`1<string> GetAllItemsFromSortedSetDesc(string setId);
    public abstract virtual List`1<string> GetRangeFromSortedSet(string setId, int fromRank, int toRank);
    public abstract virtual List`1<string> GetRangeFromSortedSetDesc(string setId, int fromRank, int toRank);
    public abstract virtual IDictionary`2<string, double> GetAllWithScoresFromSortedSet(string setId);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSet(string setId, int fromRank, int toRank);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetDesc(string setId, int fromRank, int toRank);
    public abstract virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore);
    public abstract virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, double fromScore, double toScore);
    public abstract virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, long fromScore, long toScore);
    public abstract virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, double fromScore, double toScore);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, long fromScore, long toScore);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore);
    public abstract virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, double fromScore, double toScore);
    public abstract virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, long fromScore, long toScore);
    public abstract virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, double fromScore, double toScore);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, long fromScore, long toScore);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual long RemoveRangeFromSortedSet(string setId, int minRank, int maxRank);
    public abstract virtual long RemoveRangeFromSortedSetByScore(string setId, double fromScore, double toScore);
    public abstract virtual long RemoveRangeFromSortedSetByScore(string setId, long fromScore, long toScore);
    public abstract virtual long GetSortedSetCount(string setId);
    public abstract virtual long GetSortedSetCount(string setId, string fromStringScore, string toStringScore);
    public abstract virtual long GetSortedSetCount(string setId, long fromScore, long toScore);
    public abstract virtual long GetSortedSetCount(string setId, double fromScore, double toScore);
    public abstract virtual double GetItemScoreInSortedSet(string setId, string value);
    public abstract virtual long StoreIntersectFromSortedSets(string intoSetId, String[] setIds);
    public abstract virtual long StoreIntersectFromSortedSets(string intoSetId, String[] setIds, String[] args);
    public abstract virtual long StoreUnionFromSortedSets(string intoSetId, String[] setIds);
    public abstract virtual long StoreUnionFromSortedSets(string intoSetId, String[] setIds, String[] args);
    public abstract virtual List`1<string> SearchSortedSet(string setId, string start, string end, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual long SearchSortedSetCount(string setId, string start, string end);
    public abstract virtual long RemoveRangeFromSortedSetBySearch(string setId, string start, string end);
    public abstract virtual bool HashContainsEntry(string hashId, string key);
    public abstract virtual bool SetEntryInHash(string hashId, string key, string value);
    public abstract virtual bool SetEntryInHashIfNotExists(string hashId, string key, string value);
    public abstract virtual void SetRangeInHash(string hashId, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    public abstract virtual long IncrementValueInHash(string hashId, string key, int incrementBy);
    public abstract virtual double IncrementValueInHash(string hashId, string key, double incrementBy);
    public abstract virtual string GetValueFromHash(string hashId, string key);
    public abstract virtual List`1<string> GetValuesFromHash(string hashId, String[] keys);
    public abstract virtual bool RemoveEntryFromHash(string hashId, string key);
    public abstract virtual long GetHashCount(string hashId);
    public abstract virtual List`1<string> GetHashKeys(string hashId);
    public abstract virtual List`1<string> GetHashValues(string hashId);
    public abstract virtual Dictionary`2<string, string> GetAllEntriesFromHash(string hashId);
    public abstract virtual T ExecCachedLua(string scriptBody, Func`2<string, T> scriptSha1);
    public abstract virtual RedisText ExecLua(string body, String[] args);
    public abstract virtual RedisText ExecLua(string luaBody, String[] keys, String[] args);
    public abstract virtual RedisText ExecLuaSha(string sha1, String[] args);
    public abstract virtual RedisText ExecLuaSha(string sha1, String[] keys, String[] args);
    public abstract virtual string ExecLuaAsString(string luaBody, String[] args);
    public abstract virtual string ExecLuaAsString(string luaBody, String[] keys, String[] args);
    public abstract virtual string ExecLuaShaAsString(string sha1, String[] args);
    public abstract virtual string ExecLuaShaAsString(string sha1, String[] keys, String[] args);
    public abstract virtual long ExecLuaAsInt(string luaBody, String[] args);
    public abstract virtual long ExecLuaAsInt(string luaBody, String[] keys, String[] args);
    public abstract virtual long ExecLuaShaAsInt(string sha1, String[] args);
    public abstract virtual long ExecLuaShaAsInt(string sha1, String[] keys, String[] args);
    public abstract virtual List`1<string> ExecLuaAsList(string luaBody, String[] args);
    public abstract virtual List`1<string> ExecLuaAsList(string luaBody, String[] keys, String[] args);
    public abstract virtual List`1<string> ExecLuaShaAsList(string sha1, String[] args);
    public abstract virtual List`1<string> ExecLuaShaAsList(string sha1, String[] keys, String[] args);
    public abstract virtual string CalculateSha1(string luaBody);
    public abstract virtual bool HasLuaScript(string sha1Ref);
    public abstract virtual Dictionary`2<string, bool> WhichLuaScriptsExists(String[] sha1Refs);
    public abstract virtual void RemoveAllLuaScripts();
    public abstract virtual void KillRunningLuaScript();
    public abstract virtual string LoadLuaScript(string body);
}
public interface ServiceStack.Redis.IRedisClientAsync {
    public IHasNamed`1<IRedisListAsync> Lists { get; }
    public IHasNamed`1<IRedisSetAsync> Sets { get; }
    public IHasNamed`1<IRedisSortedSetAsync> SortedSets { get; }
    public IHasNamed`1<IRedisHashAsync> Hashes { get; }
    public long Db { get; }
    public string Host { get; }
    public int Port { get; }
    public int ConnectTimeout { get; public set; }
    public int RetryTimeout { get; public set; }
    public int RetryCount { get; public set; }
    public int SendTimeout { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool HadExceptions { get; }
    public abstract virtual IHasNamed`1<IRedisListAsync> get_Lists();
    public abstract virtual IHasNamed`1<IRedisSetAsync> get_Sets();
    public abstract virtual IHasNamed`1<IRedisSortedSetAsync> get_SortedSets();
    public abstract virtual IHasNamed`1<IRedisHashAsync> get_Hashes();
    public abstract virtual long get_Db();
    public abstract virtual ValueTask SelectAsync(long db, CancellationToken token);
    public abstract virtual ValueTask`1<long> DbSizeAsync(CancellationToken token);
    public abstract virtual ValueTask`1<Dictionary`2<string, string>> InfoAsync(CancellationToken token);
    public abstract virtual ValueTask`1<DateTime> GetServerTimeAsync(CancellationToken token);
    public abstract virtual ValueTask`1<DateTime> LastSaveAsync(CancellationToken token);
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
    public abstract virtual int get_ConnectTimeout();
    public abstract virtual void set_ConnectTimeout(int value);
    public abstract virtual int get_RetryTimeout();
    public abstract virtual void set_RetryTimeout(int value);
    public abstract virtual int get_RetryCount();
    public abstract virtual void set_RetryCount(int value);
    public abstract virtual int get_SendTimeout();
    public abstract virtual void set_SendTimeout(int value);
    public abstract virtual string get_Username();
    public abstract virtual void set_Username(string value);
    public abstract virtual string get_Password();
    public abstract virtual void set_Password(string value);
    public abstract virtual bool get_HadExceptions();
    public abstract virtual ValueTask`1<bool> PingAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> EchoAsync(string text, CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> CustomAsync(Object[] cmdWithArgs, CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> CustomAsync(Object[] cmdWithArgs);
    public abstract virtual ValueTask ForegroundSaveAsync(CancellationToken token);
    public abstract virtual ValueTask BackgroundSaveAsync(CancellationToken token);
    public abstract virtual ValueTask ShutdownAsync(CancellationToken token);
    public abstract virtual ValueTask ShutdownNoSaveAsync(CancellationToken token);
    public abstract virtual ValueTask BackgroundRewriteAppendOnlyFileAsync(CancellationToken token);
    public abstract virtual ValueTask FlushDbAsync(CancellationToken token);
    public abstract virtual ValueTask`1<RedisServerRole> GetServerRoleAsync(CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> GetServerRoleInfoAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> GetConfigAsync(string item, CancellationToken token);
    public abstract virtual ValueTask SetConfigAsync(string item, string value, CancellationToken token);
    public abstract virtual ValueTask SaveConfigAsync(CancellationToken token);
    public abstract virtual ValueTask ResetInfoStatsAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> GetClientAsync(CancellationToken token);
    public abstract virtual ValueTask SetClientAsync(string name, CancellationToken token);
    public abstract virtual ValueTask KillClientAsync(string address, CancellationToken token);
    public abstract virtual ValueTask`1<long> KillClientsAsync(string fromAddress, string withId, Nullable`1<RedisClientType> ofType, Nullable`1<bool> skipMe, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<Dictionary`2<string, string>>> GetClientsInfoAsync(CancellationToken token);
    public abstract virtual ValueTask PauseAllClientsAsync(TimeSpan duration, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetAllKeysAsync(CancellationToken token);
    public abstract virtual string UrnKey(T value);
    public abstract virtual string UrnKey(object id);
    public abstract virtual string UrnKey(Type type, object id);
    public abstract virtual ValueTask SetAllAsync(IEnumerable`1<string> keys, IEnumerable`1<string> values, CancellationToken token);
    public abstract virtual ValueTask SetAllAsync(IDictionary`2<string, string> map, CancellationToken token);
    public abstract virtual ValueTask SetValuesAsync(IDictionary`2<string, string> map, CancellationToken token);
    public abstract virtual ValueTask SetValueAsync(string key, string value, CancellationToken token);
    public abstract virtual ValueTask SetValueAsync(string key, string value, TimeSpan expireIn, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetValueIfNotExistsAsync(string key, string value, Nullable`1<TimeSpan> expireIn, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetValueIfExistsAsync(string key, string value, Nullable`1<TimeSpan> expireIn, CancellationToken token);
    public abstract virtual ValueTask`1<string> GetValueAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<string> GetAndSetValueAsync(string key, string value, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetValuesAsync(List`1<string> keys, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<T>> GetValuesAsync(List`1<string> keys, CancellationToken token);
    public abstract virtual ValueTask`1<Dictionary`2<string, string>> GetValuesMapAsync(List`1<string> keys, CancellationToken token);
    public abstract virtual ValueTask`1<Dictionary`2<string, T>> GetValuesMapAsync(List`1<string> keys, CancellationToken token);
    public abstract virtual ValueTask`1<long> AppendToAsync(string key, string value, CancellationToken token);
    public abstract virtual ValueTask`1<string> SliceAsync(string key, int fromIndex, int toIndex, CancellationToken token);
    public abstract virtual ValueTask`1<long> InsertAtAsync(string key, int offset, string value, CancellationToken token);
    public abstract virtual ValueTask RenameKeyAsync(string fromName, string toName, CancellationToken token);
    public abstract virtual ValueTask`1<T> GetFromHashAsync(object id, CancellationToken token);
    public abstract virtual ValueTask StoreAsHashAsync(T entity, CancellationToken token);
    public abstract virtual ValueTask`1<object> StoreObjectAsync(object entity, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsKeyAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveEntryAsync(String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveEntryAsync(String[] args);
    public abstract virtual ValueTask`1<long> IncrementValueAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> IncrementValueByAsync(string key, int count, CancellationToken token);
    public abstract virtual ValueTask`1<long> IncrementValueByAsync(string key, long count, CancellationToken token);
    public abstract virtual ValueTask`1<double> IncrementValueByAsync(string key, double count, CancellationToken token);
    public abstract virtual ValueTask`1<long> DecrementValueAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> DecrementValueByAsync(string key, int count, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> SearchKeysAsync(string pattern, CancellationToken token);
    public abstract virtual ValueTask`1<string> TypeAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<RedisKeyType> GetEntryTypeAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetStringCountAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<string> GetRandomKeyAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireEntryInAsync(string key, TimeSpan expireIn, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireEntryAtAsync(string key, DateTime expireAt, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetSortedEntryValuesAsync(string key, int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask WriteAllAsync(IEnumerable`1<TEntity> entities, CancellationToken token);
    public abstract virtual IAsyncEnumerable`1<string> ScanAllKeysAsync(string pattern, int pageSize, CancellationToken token);
    public abstract virtual IAsyncEnumerable`1<string> ScanAllSetItemsAsync(string setId, string pattern, int pageSize, CancellationToken token);
    public abstract virtual IAsyncEnumerable`1<KeyValuePair`2<string, double>> ScanAllSortedSetItemsAsync(string setId, string pattern, int pageSize, CancellationToken token);
    public abstract virtual IAsyncEnumerable`1<KeyValuePair`2<string, string>> ScanAllHashEntriesAsync(string hashId, string pattern, int pageSize, CancellationToken token);
    public abstract virtual ValueTask`1<bool> AddToHyperLogAsync(string key, String[] elements, CancellationToken token);
    public abstract virtual ValueTask`1<bool> AddToHyperLogAsync(string key, String[] elements);
    public abstract virtual ValueTask`1<long> CountHyperLogAsync(string key, CancellationToken token);
    public abstract virtual ValueTask MergeHyperLogsAsync(string toKey, String[] fromKeys, CancellationToken token);
    public abstract virtual ValueTask MergeHyperLogsAsync(string toKey, String[] fromKeys);
    public abstract virtual ValueTask`1<long> AddGeoMemberAsync(string key, double longitude, double latitude, string member, CancellationToken token);
    public abstract virtual ValueTask`1<long> AddGeoMembersAsync(string key, RedisGeo[] geoPoints, CancellationToken token);
    public abstract virtual ValueTask`1<long> AddGeoMembersAsync(string key, RedisGeo[] geoPoints);
    public abstract virtual ValueTask`1<double> CalculateDistanceBetweenGeoMembersAsync(string key, string fromMember, string toMember, string unit, CancellationToken token);
    public abstract virtual ValueTask`1<String[]> GetGeohashesAsync(string key, String[] members, CancellationToken token);
    public abstract virtual ValueTask`1<String[]> GetGeohashesAsync(string key, String[] members);
    public abstract virtual ValueTask`1<List`1<RedisGeo>> GetGeoCoordinatesAsync(string key, String[] members, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<RedisGeo>> GetGeoCoordinatesAsync(string key, String[] members);
    public abstract virtual ValueTask`1<String[]> FindGeoMembersInRadiusAsync(string key, double longitude, double latitude, double radius, string unit, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<RedisGeoResult>> FindGeoResultsInRadiusAsync(string key, double longitude, double latitude, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest, CancellationToken token);
    public abstract virtual ValueTask`1<String[]> FindGeoMembersInRadiusAsync(string key, string member, double radius, string unit, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<RedisGeoResult>> FindGeoResultsInRadiusAsync(string key, string member, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest, CancellationToken token);
    public abstract virtual IRedisTypedClientAsync`1<T> As();
    public abstract virtual ValueTask`1<IRedisTransactionAsync> CreateTransactionAsync(CancellationToken token);
    public abstract virtual IRedisPipelineAsync CreatePipeline();
    public abstract virtual ValueTask`1<IAsyncDisposable> AcquireLockAsync(string key, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask WatchAsync(String[] keys, CancellationToken token);
    public abstract virtual ValueTask WatchAsync(String[] keys);
    public abstract virtual ValueTask UnWatchAsync(CancellationToken token);
    public abstract virtual ValueTask`1<IRedisSubscriptionAsync> CreateSubscriptionAsync(CancellationToken token);
    public abstract virtual ValueTask`1<long> PublishMessageAsync(string toChannel, string message, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetAllItemsFromSetAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask AddItemToSetAsync(string setId, string item, CancellationToken token);
    public abstract virtual ValueTask AddRangeToSetAsync(string setId, List`1<string> items, CancellationToken token);
    public abstract virtual ValueTask RemoveItemFromSetAsync(string setId, string item, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopItemFromSetAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> PopItemsFromSetAsync(string setId, int count, CancellationToken token);
    public abstract virtual ValueTask MoveBetweenSetsAsync(string fromSetId, string toSetId, string item, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetSetCountAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetContainsItemAsync(string setId, string item, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetIntersectFromSetsAsync(String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetIntersectFromSetsAsync(String[] setIds);
    public abstract virtual ValueTask StoreIntersectFromSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask StoreIntersectFromSetsAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetUnionFromSetsAsync(String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetUnionFromSetsAsync(String[] setIds);
    public abstract virtual ValueTask StoreUnionFromSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask StoreUnionFromSetsAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetDifferencesFromSetAsync(string fromSetId, String[] withSetIds, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetDifferencesFromSetAsync(string fromSetId, String[] withSetIds);
    public abstract virtual ValueTask StoreDifferencesFromSetAsync(string intoSetId, string fromSetId, String[] withSetIds, CancellationToken token);
    public abstract virtual ValueTask StoreDifferencesFromSetAsync(string intoSetId, string fromSetId, String[] withSetIds);
    public abstract virtual ValueTask`1<string> GetRandomItemFromSetAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetAllItemsFromListAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromListAsync(string listId, int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedListAsync(string listId, int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetSortedItemsFromListAsync(string listId, SortOptions sortOptions, CancellationToken token);
    public abstract virtual ValueTask AddItemToListAsync(string listId, string value, CancellationToken token);
    public abstract virtual ValueTask AddRangeToListAsync(string listId, List`1<string> values, CancellationToken token);
    public abstract virtual ValueTask PrependItemToListAsync(string listId, string value, CancellationToken token);
    public abstract virtual ValueTask PrependRangeToListAsync(string listId, List`1<string> values, CancellationToken token);
    public abstract virtual ValueTask RemoveAllFromListAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<string> RemoveStartFromListAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<string> BlockingRemoveStartFromListAsync(string listId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<ItemRef> BlockingRemoveStartFromListsAsync(String[] listIds, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<string> RemoveEndFromListAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask TrimListAsync(string listId, int keepStartingFrom, int keepEndingAt, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveItemFromListAsync(string listId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveItemFromListAsync(string listId, string value, int noOfMatches, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetListCountAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<string> GetItemFromListAsync(string listId, int listIndex, CancellationToken token);
    public abstract virtual ValueTask SetItemInListAsync(string listId, int listIndex, string value, CancellationToken token);
    public abstract virtual ValueTask EnqueueItemOnListAsync(string listId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<string> DequeueItemFromListAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<string> BlockingDequeueItemFromListAsync(string listId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<ItemRef> BlockingDequeueItemFromListsAsync(String[] listIds, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask PushItemToListAsync(string listId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopItemFromListAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<string> BlockingPopItemFromListAsync(string listId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<ItemRef> BlockingPopItemFromListsAsync(String[] listIds, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopAndPushItemBetweenListsAsync(string fromListId, string toListId, CancellationToken token);
    public abstract virtual ValueTask`1<string> BlockingPopAndPushItemBetweenListsAsync(string fromListId, string toListId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<bool> AddItemToSortedSetAsync(string setId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<bool> AddItemToSortedSetAsync(string setId, string value, double score, CancellationToken token);
    public abstract virtual ValueTask`1<bool> AddRangeToSortedSetAsync(string setId, List`1<string> values, double score, CancellationToken token);
    public abstract virtual ValueTask`1<bool> AddRangeToSortedSetAsync(string setId, List`1<string> values, long score, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveItemFromSortedSetAsync(string setId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveItemsFromSortedSetAsync(string setId, List`1<string> values, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopItemWithLowestScoreFromSortedSetAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopItemWithHighestScoreFromSortedSetAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SortedSetContainsItemAsync(string setId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<double> IncrementItemInSortedSetAsync(string setId, string value, double incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<double> IncrementItemInSortedSetAsync(string setId, string value, long incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetItemIndexInSortedSetAsync(string setId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetItemIndexInSortedSetDescAsync(string setId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetAllItemsFromSortedSetAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetAllItemsFromSortedSetDescAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetAsync(string setId, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetDescAsync(string setId, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetAllWithScoresFromSortedSetAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetAsync(string setId, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetDescAsync(string setId, int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<IDictionary`2<string, double>> GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeFromSortedSetAsync(string setId, int minRank, int maxRank, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeFromSortedSetByScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeFromSortedSetByScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetSortedSetCountAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetSortedSetCountAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetSortedSetCountAsync(string setId, long fromScore, long toScore, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetSortedSetCountAsync(string setId, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<double> GetItemScoreInSortedSetAsync(string setId, string value, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreIntersectFromSortedSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreIntersectFromSortedSetsAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<long> StoreIntersectFromSortedSetsAsync(string intoSetId, String[] setIds, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreUnionFromSortedSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> StoreUnionFromSortedSetsAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<long> StoreUnionFromSortedSetsAsync(string intoSetId, String[] setIds, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> SearchSortedSetAsync(string setId, string start, string end, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<long> SearchSortedSetCountAsync(string setId, string start, string end, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveRangeFromSortedSetBySearchAsync(string setId, string start, string end, CancellationToken token);
    public abstract virtual ValueTask`1<bool> HashContainsEntryAsync(string hashId, string key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetEntryInHashAsync(string hashId, string key, string value, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetEntryInHashIfNotExistsAsync(string hashId, string key, string value, CancellationToken token);
    public abstract virtual ValueTask SetRangeInHashAsync(string hashId, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs, CancellationToken token);
    public abstract virtual ValueTask`1<long> IncrementValueInHashAsync(string hashId, string key, int incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<double> IncrementValueInHashAsync(string hashId, string key, double incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<string> GetValueFromHashAsync(string hashId, string key, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetValuesFromHashAsync(string hashId, String[] keys, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetValuesFromHashAsync(string hashId, String[] keys);
    public abstract virtual ValueTask`1<bool> RemoveEntryFromHashAsync(string hashId, string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetHashCountAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetHashKeysAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetHashValuesAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<Dictionary`2<string, string>> GetAllEntriesFromHashAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<T> ExecCachedLuaAsync(string scriptBody, Func`2<string, ValueTask`1<T>> scriptSha1, CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> ExecLuaAsync(string body, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> ExecLuaAsync(string body, String[] args);
    public abstract virtual ValueTask`1<RedisText> ExecLuaAsync(string luaBody, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> ExecLuaShaAsync(string sha1, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> ExecLuaShaAsync(string sha1, String[] args);
    public abstract virtual ValueTask`1<RedisText> ExecLuaShaAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<string> ExecLuaAsStringAsync(string luaBody, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<string> ExecLuaAsStringAsync(string luaBody, String[] args);
    public abstract virtual ValueTask`1<string> ExecLuaAsStringAsync(string luaBody, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<string> ExecLuaShaAsStringAsync(string sha1, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<string> ExecLuaShaAsStringAsync(string sha1, String[] args);
    public abstract virtual ValueTask`1<string> ExecLuaShaAsStringAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<long> ExecLuaAsIntAsync(string luaBody, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<long> ExecLuaAsIntAsync(string luaBody, String[] args);
    public abstract virtual ValueTask`1<long> ExecLuaAsIntAsync(string luaBody, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<long> ExecLuaShaAsIntAsync(string sha1, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<long> ExecLuaShaAsIntAsync(string sha1, String[] args);
    public abstract virtual ValueTask`1<long> ExecLuaShaAsIntAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> ExecLuaAsListAsync(string luaBody, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> ExecLuaAsListAsync(string luaBody, String[] args);
    public abstract virtual ValueTask`1<List`1<string>> ExecLuaAsListAsync(string luaBody, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> ExecLuaShaAsListAsync(string sha1, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> ExecLuaShaAsListAsync(string sha1, String[] args);
    public abstract virtual ValueTask`1<List`1<string>> ExecLuaShaAsListAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    public abstract virtual ValueTask`1<string> CalculateSha1Async(string luaBody, CancellationToken token);
    public abstract virtual ValueTask`1<bool> HasLuaScriptAsync(string sha1Ref, CancellationToken token);
    public abstract virtual ValueTask`1<Dictionary`2<string, bool>> WhichLuaScriptsExistsAsync(String[] sha1Refs, CancellationToken token);
    public abstract virtual ValueTask`1<Dictionary`2<string, bool>> WhichLuaScriptsExistsAsync(String[] sha1Refs);
    public abstract virtual ValueTask RemoveAllLuaScriptsAsync(CancellationToken token);
    public abstract virtual ValueTask KillRunningLuaScriptAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> LoadLuaScriptAsync(string body, CancellationToken token);
    public abstract virtual ValueTask SlowlogResetAsync(CancellationToken token);
    public abstract virtual ValueTask`1<SlowlogItem[]> GetSlowlogAsync(Nullable`1<int> numberOfRecords, CancellationToken token);
}
public interface ServiceStack.Redis.IRedisClientCacheManager {
    public abstract virtual IRedisClient GetClient();
    public abstract virtual IRedisClient GetReadOnlyClient();
    public abstract virtual ICacheClient GetCacheClient();
    public abstract virtual ICacheClient GetReadOnlyCacheClient();
}
public interface ServiceStack.Redis.IRedisClientsManager {
    public IRedisResolver RedisResolver { get; }
    public abstract virtual IRedisResolver get_RedisResolver();
    public abstract virtual IRedisClient GetClient();
    public abstract virtual IRedisClient GetReadOnlyClient();
    public abstract virtual ICacheClient GetCacheClient();
    public abstract virtual ICacheClient GetReadOnlyCacheClient();
}
public interface ServiceStack.Redis.IRedisClientsManagerAsync {
    public IRedisResolver RedisResolver { get; }
    public abstract virtual IRedisResolver get_RedisResolver();
    public abstract virtual ValueTask`1<IRedisClientAsync> GetClientAsync(CancellationToken token);
    public abstract virtual ValueTask`1<IRedisClientAsync> GetReadOnlyClientAsync(CancellationToken token);
    public abstract virtual ValueTask`1<ICacheClientAsync> GetCacheClientAsync(CancellationToken token);
    public abstract virtual ValueTask`1<ICacheClientAsync> GetReadOnlyCacheClientAsync(CancellationToken token);
}
public interface ServiceStack.Redis.IRedisEndpoint {
    public bool Ssl { get; }
    public int ConnectTimeout { get; }
    public int SendTimeout { get; }
    public int ReceiveTimeout { get; }
    public int RetryTimeout { get; }
    public int IdleTimeOutSecs { get; }
    public long Db { get; }
    public string Client { get; }
    public string Username { get; }
    public string Password { get; }
    public abstract virtual bool get_Ssl();
    public abstract virtual int get_ConnectTimeout();
    public abstract virtual int get_SendTimeout();
    public abstract virtual int get_ReceiveTimeout();
    public abstract virtual int get_RetryTimeout();
    public abstract virtual int get_IdleTimeOutSecs();
    public abstract virtual long get_Db();
    public abstract virtual string get_Client();
    public abstract virtual string get_Username();
    public abstract virtual string get_Password();
}
public interface ServiceStack.Redis.IRedisHash {
    public abstract virtual bool AddIfNotExists(KeyValuePair`2<string, string> item);
    public abstract virtual void AddRange(IEnumerable`1<KeyValuePair`2<string, string>> items);
    public abstract virtual long IncrementValue(string key, int incrementBy);
}
public interface ServiceStack.Redis.IRedisHashAsync {
    public abstract virtual ValueTask`1<bool> AddIfNotExistsAsync(KeyValuePair`2<string, string> item, CancellationToken token);
    public abstract virtual ValueTask AddRangeAsync(IEnumerable`1<KeyValuePair`2<string, string>> items, CancellationToken token);
    public abstract virtual ValueTask`1<long> IncrementValueAsync(string key, int incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask AddAsync(KeyValuePair`2<string, string> item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(string key, string value, CancellationToken token);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsKeyAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(string key, CancellationToken token);
}
public interface ServiceStack.Redis.IRedisList {
    public abstract virtual List`1<string> GetAll();
    public abstract virtual List`1<string> GetRange(int startingFrom, int endingAt);
    public abstract virtual List`1<string> GetRangeFromSortedList(int startingFrom, int endingAt);
    public abstract virtual void RemoveAll();
    public abstract virtual void Trim(int keepStartingFrom, int keepEndingAt);
    public abstract virtual long RemoveValue(string value);
    public abstract virtual long RemoveValue(string value, int noOfMatches);
    public abstract virtual void Prepend(string value);
    public abstract virtual void Append(string value);
    public abstract virtual string RemoveStart();
    public abstract virtual string BlockingRemoveStart(Nullable`1<TimeSpan> timeOut);
    public abstract virtual string RemoveEnd();
    public abstract virtual void Enqueue(string value);
    public abstract virtual string Dequeue();
    public abstract virtual string BlockingDequeue(Nullable`1<TimeSpan> timeOut);
    public abstract virtual void Push(string value);
    public abstract virtual string Pop();
    public abstract virtual string BlockingPop(Nullable`1<TimeSpan> timeOut);
    public abstract virtual string PopAndPush(IRedisList toList);
}
public interface ServiceStack.Redis.IRedisListAsync {
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeAsync(int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedListAsync(int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask RemoveAllAsync(CancellationToken token);
    public abstract virtual ValueTask TrimAsync(int keepStartingFrom, int keepEndingAt, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveValueAsync(string value, CancellationToken token);
    public abstract virtual ValueTask`1<long> RemoveValueAsync(string value, int noOfMatches, CancellationToken token);
    public abstract virtual ValueTask PrependAsync(string value, CancellationToken token);
    public abstract virtual ValueTask AppendAsync(string value, CancellationToken token);
    public abstract virtual ValueTask`1<string> RemoveStartAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> BlockingRemoveStartAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<string> RemoveEndAsync(CancellationToken token);
    public abstract virtual ValueTask EnqueueAsync(string value, CancellationToken token);
    public abstract virtual ValueTask`1<string> DequeueAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> BlockingDequeueAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask PushAsync(string value, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> BlockingPopAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopAndPushAsync(IRedisListAsync toList, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(string item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(string item, CancellationToken token);
    public abstract virtual ValueTask RemoveAtAsync(int index, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsAsync(string item, CancellationToken token);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
    public abstract virtual ValueTask`1<int> IndexOfAsync(string item, CancellationToken token);
    public abstract virtual ValueTask`1<string> ElementAtAsync(int index, CancellationToken token);
    public abstract virtual ValueTask SetValueAsync(int index, string value, CancellationToken token);
}
public interface ServiceStack.Redis.IRedisNativeClient {
    public Dictionary`2<string, string> Info { get; }
    public long Db { get; public set; }
    public long DbSize { get; }
    public DateTime LastSave { get; }
    public abstract virtual Dictionary`2<string, string> get_Info();
    public abstract virtual long get_Db();
    public abstract virtual void set_Db(long value);
    public abstract virtual long get_DbSize();
    public abstract virtual DateTime get_LastSave();
    public abstract virtual void Save();
    public abstract virtual void BgSave();
    public abstract virtual void Shutdown();
    public abstract virtual void BgRewriteAof();
    public abstract virtual void Quit();
    public abstract virtual void FlushDb();
    public abstract virtual void FlushAll();
    public abstract virtual bool Ping();
    public abstract virtual string Echo(string text);
    public abstract virtual void SlaveOf(string hostname, int port);
    public abstract virtual void SlaveOfNoOne();
    public abstract virtual Byte[][] ConfigGet(string pattern);
    public abstract virtual void ConfigSet(string item, Byte[] value);
    public abstract virtual void ConfigResetStat();
    public abstract virtual void ConfigRewrite();
    public abstract virtual Byte[][] Time();
    public abstract virtual void DebugSegfault();
    public abstract virtual Byte[] Dump(string key);
    public abstract virtual Byte[] Restore(string key, long expireMs, Byte[] dumpValue);
    public abstract virtual void Migrate(string host, int port, string key, int destinationDb, long timeoutMs);
    public abstract virtual bool Move(string key, int db);
    public abstract virtual long ObjectIdleTime(string key);
    public abstract virtual RedisText Role();
    public abstract virtual RedisData RawCommand(Object[] cmdWithArgs);
    public abstract virtual RedisData RawCommand(Byte[][] cmdWithBinaryArgs);
    public abstract virtual string ClientGetName();
    public abstract virtual void ClientSetName(string client);
    public abstract virtual void ClientKill(string host);
    public abstract virtual long ClientKill(string addr, string id, string type, string skipMe);
    public abstract virtual Byte[] ClientList();
    public abstract virtual void ClientPause(int timeOutMs);
    public abstract virtual Byte[][] Keys(string pattern);
    public abstract virtual string Type(string key);
    public abstract virtual long Exists(string key);
    public abstract virtual long StrLen(string key);
    public abstract virtual void Set(string key, Byte[] value);
    public abstract virtual void SetEx(string key, int expireInSeconds, Byte[] value);
    public abstract virtual bool Persist(string key);
    public abstract virtual void PSetEx(string key, long expireInMs, Byte[] value);
    public abstract virtual long SetNX(string key, Byte[] value);
    public abstract virtual void MSet(Byte[][] keys, Byte[][] values);
    public abstract virtual void MSet(String[] keys, Byte[][] values);
    public abstract virtual bool MSetNx(Byte[][] keys, Byte[][] values);
    public abstract virtual bool MSetNx(String[] keys, Byte[][] values);
    public abstract virtual Byte[] Get(string key);
    public abstract virtual Byte[] GetSet(string key, Byte[] value);
    public abstract virtual Byte[][] MGet(Byte[][] keysAndArgs);
    public abstract virtual Byte[][] MGet(String[] keys);
    public abstract virtual long Del(string key);
    public abstract virtual long Del(String[] keys);
    public abstract virtual long Incr(string key);
    public abstract virtual long IncrBy(string key, int incrBy);
    public abstract virtual double IncrByFloat(string key, double incrBy);
    public abstract virtual long Decr(string key);
    public abstract virtual long DecrBy(string key, int decrBy);
    public abstract virtual long Append(string key, Byte[] value);
    public abstract virtual Byte[] GetRange(string key, int fromIndex, int toIndex);
    public abstract virtual long SetRange(string key, int offset, Byte[] value);
    public abstract virtual long GetBit(string key, int offset);
    public abstract virtual long SetBit(string key, int offset, int value);
    public abstract virtual string RandomKey();
    public abstract virtual void Rename(string oldKeyName, string newKeyName);
    public abstract virtual bool RenameNx(string oldKeyName, string newKeyName);
    public abstract virtual bool Expire(string key, int seconds);
    public abstract virtual bool PExpire(string key, long ttlMs);
    public abstract virtual bool ExpireAt(string key, long unixTime);
    public abstract virtual bool PExpireAt(string key, long unixTimeMs);
    public abstract virtual long Ttl(string key);
    public abstract virtual long PTtl(string key);
    public abstract virtual ScanResult Scan(ulong cursor, int count, string match);
    public abstract virtual ScanResult SScan(string setId, ulong cursor, int count, string match);
    public abstract virtual ScanResult ZScan(string setId, ulong cursor, int count, string match);
    public abstract virtual ScanResult HScan(string hashId, ulong cursor, int count, string match);
    public abstract virtual bool PfAdd(string key, Byte[][] elements);
    public abstract virtual long PfCount(string key);
    public abstract virtual void PfMerge(string toKeyId, String[] fromKeys);
    public abstract virtual Byte[][] Sort(string listOrSetId, SortOptions sortOptions);
    public abstract virtual Byte[][] LRange(string listId, int startingFrom, int endingAt);
    public abstract virtual long RPush(string listId, Byte[] value);
    public abstract virtual long RPushX(string listId, Byte[] value);
    public abstract virtual long LPush(string listId, Byte[] value);
    public abstract virtual long LPushX(string listId, Byte[] value);
    public abstract virtual void LTrim(string listId, int keepStartingFrom, int keepEndingAt);
    public abstract virtual long LRem(string listId, int removeNoOfMatches, Byte[] value);
    public abstract virtual long LLen(string listId);
    public abstract virtual Byte[] LIndex(string listId, int listIndex);
    public abstract virtual void LInsert(string listId, bool insertBefore, Byte[] pivot, Byte[] value);
    public abstract virtual void LSet(string listId, int listIndex, Byte[] value);
    public abstract virtual Byte[] LPop(string listId);
    public abstract virtual Byte[] RPop(string listId);
    public abstract virtual Byte[][] BLPop(string listId, int timeOutSecs);
    public abstract virtual Byte[][] BLPop(String[] listIds, int timeOutSecs);
    public abstract virtual Byte[] BLPopValue(string listId, int timeOutSecs);
    public abstract virtual Byte[][] BLPopValue(String[] listIds, int timeOutSecs);
    public abstract virtual Byte[][] BRPop(string listId, int timeOutSecs);
    public abstract virtual Byte[][] BRPop(String[] listIds, int timeOutSecs);
    public abstract virtual Byte[] RPopLPush(string fromListId, string toListId);
    public abstract virtual Byte[] BRPopValue(string listId, int timeOutSecs);
    public abstract virtual Byte[][] BRPopValue(String[] listIds, int timeOutSecs);
    public abstract virtual Byte[] BRPopLPush(string fromListId, string toListId, int timeOutSecs);
    public abstract virtual Byte[][] SMembers(string setId);
    public abstract virtual long SAdd(string setId, Byte[] value);
    public abstract virtual long SAdd(string setId, Byte[][] value);
    public abstract virtual long SRem(string setId, Byte[] value);
    public abstract virtual Byte[] SPop(string setId);
    public abstract virtual Byte[][] SPop(string setId, int count);
    public abstract virtual void SMove(string fromSetId, string toSetId, Byte[] value);
    public abstract virtual long SCard(string setId);
    public abstract virtual long SIsMember(string setId, Byte[] value);
    public abstract virtual Byte[][] SInter(String[] setIds);
    public abstract virtual void SInterStore(string intoSetId, String[] setIds);
    public abstract virtual Byte[][] SUnion(String[] setIds);
    public abstract virtual void SUnionStore(string intoSetId, String[] setIds);
    public abstract virtual Byte[][] SDiff(string fromSetId, String[] withSetIds);
    public abstract virtual void SDiffStore(string intoSetId, string fromSetId, String[] withSetIds);
    public abstract virtual Byte[] SRandMember(string setId);
    public abstract virtual long ZAdd(string setId, double score, Byte[] value);
    public abstract virtual long ZAdd(string setId, long score, Byte[] value);
    public abstract virtual long ZRem(string setId, Byte[] value);
    public abstract virtual long ZRem(string setId, Byte[][] values);
    public abstract virtual double ZIncrBy(string setId, double incrBy, Byte[] value);
    public abstract virtual double ZIncrBy(string setId, long incrBy, Byte[] value);
    public abstract virtual long ZRank(string setId, Byte[] value);
    public abstract virtual long ZRevRank(string setId, Byte[] value);
    public abstract virtual Byte[][] ZRange(string setId, int min, int max);
    public abstract virtual Byte[][] ZRangeWithScores(string setId, int min, int max);
    public abstract virtual Byte[][] ZRevRange(string setId, int min, int max);
    public abstract virtual Byte[][] ZRevRangeWithScores(string setId, int min, int max);
    public abstract virtual Byte[][] ZRangeByScore(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual Byte[][] ZRangeByScore(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual Byte[][] ZRangeByScoreWithScores(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual Byte[][] ZRangeByScoreWithScores(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual Byte[][] ZRevRangeByScore(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual Byte[][] ZRevRangeByScore(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual Byte[][] ZRevRangeByScoreWithScores(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual Byte[][] ZRevRangeByScoreWithScores(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual long ZRemRangeByRank(string setId, int min, int max);
    public abstract virtual long ZRemRangeByScore(string setId, double fromScore, double toScore);
    public abstract virtual long ZRemRangeByScore(string setId, long fromScore, long toScore);
    public abstract virtual long ZCard(string setId);
    public abstract virtual double ZScore(string setId, Byte[] value);
    public abstract virtual long ZUnionStore(string intoSetId, String[] setIds);
    public abstract virtual long ZInterStore(string intoSetId, String[] setIds);
    public abstract virtual Byte[][] ZRangeByLex(string setId, string min, string max, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual long ZLexCount(string setId, string min, string max);
    public abstract virtual long ZRemRangeByLex(string setId, string min, string max);
    public abstract virtual long HSet(string hashId, Byte[] key, Byte[] value);
    public abstract virtual void HMSet(string hashId, Byte[][] keys, Byte[][] values);
    public abstract virtual long HSetNX(string hashId, Byte[] key, Byte[] value);
    public abstract virtual long HIncrby(string hashId, Byte[] key, int incrementBy);
    public abstract virtual double HIncrbyFloat(string hashId, Byte[] key, double incrementBy);
    public abstract virtual Byte[] HGet(string hashId, Byte[] key);
    public abstract virtual Byte[][] HMGet(string hashId, Byte[][] keysAndArgs);
    public abstract virtual long HDel(string hashId, Byte[] key);
    public abstract virtual long HExists(string hashId, Byte[] key);
    public abstract virtual long HLen(string hashId);
    public abstract virtual Byte[][] HKeys(string hashId);
    public abstract virtual Byte[][] HVals(string hashId);
    public abstract virtual Byte[][] HGetAll(string hashId);
    public abstract virtual long GeoAdd(string key, double longitude, double latitude, string member);
    public abstract virtual long GeoAdd(string key, RedisGeo[] geoPoints);
    public abstract virtual double GeoDist(string key, string fromMember, string toMember, string unit);
    public abstract virtual String[] GeoHash(string key, String[] members);
    public abstract virtual List`1<RedisGeo> GeoPos(string key, String[] members);
    public abstract virtual List`1<RedisGeoResult> GeoRadius(string key, double longitude, double latitude, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc);
    public abstract virtual List`1<RedisGeoResult> GeoRadiusByMember(string key, string member, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc);
    public abstract virtual void Watch(String[] keys);
    public abstract virtual void UnWatch();
    public abstract virtual long Publish(string toChannel, Byte[] message);
    public abstract virtual Byte[][] Subscribe(String[] toChannels);
    public abstract virtual Byte[][] UnSubscribe(String[] toChannels);
    public abstract virtual Byte[][] PSubscribe(String[] toChannelsMatchingPatterns);
    public abstract virtual Byte[][] PUnSubscribe(String[] toChannelsMatchingPatterns);
    public abstract virtual Byte[][] ReceiveMessages();
    public abstract virtual IRedisSubscription CreateSubscription();
    public abstract virtual RedisData EvalCommand(string luaBody, int numberKeysInArgs, Byte[][] keys);
    public abstract virtual RedisData EvalShaCommand(string sha1, int numberKeysInArgs, Byte[][] keys);
    public abstract virtual Byte[][] Eval(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual Byte[][] EvalSha(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual long EvalInt(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual long EvalShaInt(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual string EvalStr(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual string EvalShaStr(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual string CalculateSha1(string luaBody);
    public abstract virtual Byte[][] ScriptExists(Byte[][] sha1Refs);
    public abstract virtual void ScriptFlush();
    public abstract virtual void ScriptKill();
    public abstract virtual Byte[] ScriptLoad(string body);
}
public interface ServiceStack.Redis.IRedisNativeClientAsync {
    public long Db { get; }
    public abstract virtual ValueTask`1<Dictionary`2<string, string>> InfoAsync(CancellationToken token);
    public abstract virtual long get_Db();
    public abstract virtual ValueTask SelectAsync(long db, CancellationToken token);
    public abstract virtual ValueTask`1<long> DbSizeAsync(CancellationToken token);
    public abstract virtual ValueTask`1<DateTime> LastSaveAsync(CancellationToken token);
    public abstract virtual ValueTask SaveAsync(CancellationToken token);
    public abstract virtual ValueTask BgSaveAsync(CancellationToken token);
    public abstract virtual ValueTask ShutdownAsync(bool noSave, CancellationToken token);
    public abstract virtual ValueTask BgRewriteAofAsync(CancellationToken token);
    public abstract virtual ValueTask QuitAsync(CancellationToken token);
    public abstract virtual ValueTask FlushDbAsync(CancellationToken token);
    public abstract virtual ValueTask FlushAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> PingAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> EchoAsync(string text, CancellationToken token);
    public abstract virtual ValueTask SlaveOfAsync(string hostname, int port, CancellationToken token);
    public abstract virtual ValueTask SlaveOfNoOneAsync(CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ConfigGetAsync(string pattern, CancellationToken token);
    public abstract virtual ValueTask ConfigSetAsync(string item, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask ConfigResetStatAsync(CancellationToken token);
    public abstract virtual ValueTask ConfigRewriteAsync(CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> TimeAsync(CancellationToken token);
    public abstract virtual ValueTask DebugSegfaultAsync(CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> DumpAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> RestoreAsync(string key, long expireMs, Byte[] dumpValue, CancellationToken token);
    public abstract virtual ValueTask MigrateAsync(string host, int port, string key, int destinationDb, long timeoutMs, CancellationToken token);
    public abstract virtual ValueTask`1<bool> MoveAsync(string key, int db, CancellationToken token);
    public abstract virtual ValueTask`1<long> ObjectIdleTimeAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<RedisText> RoleAsync(CancellationToken token);
    public abstract virtual ValueTask`1<RedisData> RawCommandAsync(Object[] cmdWithArgs, CancellationToken token);
    public abstract virtual ValueTask`1<RedisData> RawCommandAsync(Object[] cmdWithArgs);
    public abstract virtual ValueTask`1<RedisData> RawCommandAsync(Byte[][] cmdWithBinaryArgs, CancellationToken token);
    public abstract virtual ValueTask`1<RedisData> RawCommandAsync(Byte[][] cmdWithBinaryArgs);
    public abstract virtual ValueTask`1<string> ClientGetNameAsync(CancellationToken token);
    public abstract virtual ValueTask ClientSetNameAsync(string client, CancellationToken token);
    public abstract virtual ValueTask ClientKillAsync(string host, CancellationToken token);
    public abstract virtual ValueTask`1<long> ClientKillAsync(string addr, string id, string type, string skipMe, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> ClientListAsync(CancellationToken token);
    public abstract virtual ValueTask ClientPauseAsync(int timeOutMs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> KeysAsync(string pattern, CancellationToken token);
    public abstract virtual ValueTask`1<string> TypeAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> ExistsAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> StrLenAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<bool> SetAsync(string key, Byte[] value, bool exists, long expirySeconds, long expiryMilliseconds, CancellationToken token);
    public abstract virtual ValueTask SetAsync(string key, Byte[] value, long expirySeconds, long expiryMilliseconds, CancellationToken token);
    public abstract virtual ValueTask SetExAsync(string key, int expireInSeconds, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<bool> PersistAsync(string key, CancellationToken token);
    public abstract virtual ValueTask PSetExAsync(string key, long expireInMs, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> SetNXAsync(string key, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask MSetAsync(Byte[][] keys, Byte[][] values, CancellationToken token);
    public abstract virtual ValueTask MSetAsync(String[] keys, Byte[][] values, CancellationToken token);
    public abstract virtual ValueTask`1<bool> MSetNxAsync(Byte[][] keys, Byte[][] values, CancellationToken token);
    public abstract virtual ValueTask`1<bool> MSetNxAsync(String[] keys, Byte[][] values, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> GetAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> GetSetAsync(string key, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> MGetAsync(Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> MGetAsync(Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<Byte[][]> MGetAsync(String[] keys, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> MGetAsync(String[] keys);
    public abstract virtual ValueTask`1<long> DelAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> DelAsync(String[] keys, CancellationToken token);
    public abstract virtual ValueTask`1<long> DelAsync(String[] keys);
    public abstract virtual ValueTask`1<long> IncrAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> IncrByAsync(string key, long incrBy, CancellationToken token);
    public abstract virtual ValueTask`1<double> IncrByFloatAsync(string key, double incrBy, CancellationToken token);
    public abstract virtual ValueTask`1<long> DecrAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> DecrByAsync(string key, long decrBy, CancellationToken token);
    public abstract virtual ValueTask`1<long> AppendAsync(string key, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> GetRangeAsync(string key, int fromIndex, int toIndex, CancellationToken token);
    public abstract virtual ValueTask`1<long> SetRangeAsync(string key, int offset, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> GetBitAsync(string key, int offset, CancellationToken token);
    public abstract virtual ValueTask`1<long> SetBitAsync(string key, int offset, int value, CancellationToken token);
    public abstract virtual ValueTask`1<long> BitCountAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<string> RandomKeyAsync(CancellationToken token);
    public abstract virtual ValueTask RenameAsync(string oldKeyName, string newKeyName, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RenameNxAsync(string oldKeyName, string newKeyName, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireAsync(string key, int seconds, CancellationToken token);
    public abstract virtual ValueTask`1<bool> PExpireAsync(string key, long ttlMs, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ExpireAtAsync(string key, long unixTime, CancellationToken token);
    public abstract virtual ValueTask`1<bool> PExpireAtAsync(string key, long unixTimeMs, CancellationToken token);
    public abstract virtual ValueTask`1<long> TtlAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<long> PTtlAsync(string key, CancellationToken token);
    public abstract virtual ValueTask`1<ScanResult> ScanAsync(ulong cursor, int count, string match, CancellationToken token);
    public abstract virtual ValueTask`1<ScanResult> SScanAsync(string setId, ulong cursor, int count, string match, CancellationToken token);
    public abstract virtual ValueTask`1<ScanResult> ZScanAsync(string setId, ulong cursor, int count, string match, CancellationToken token);
    public abstract virtual ValueTask`1<ScanResult> HScanAsync(string hashId, ulong cursor, int count, string match, CancellationToken token);
    public abstract virtual ValueTask`1<bool> PfAddAsync(string key, Byte[][] elements, CancellationToken token);
    public abstract virtual ValueTask`1<bool> PfAddAsync(string key, Byte[][] elements);
    public abstract virtual ValueTask`1<long> PfCountAsync(string key, CancellationToken token);
    public abstract virtual ValueTask PfMergeAsync(string toKeyId, String[] fromKeys, CancellationToken token);
    public abstract virtual ValueTask PfMergeAsync(string toKeyId, String[] fromKeys);
    public abstract virtual ValueTask`1<Byte[][]> SortAsync(string listOrSetId, SortOptions sortOptions, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> LRangeAsync(string listId, int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<long> RPushAsync(string listId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> RPushXAsync(string listId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> LPushAsync(string listId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> LPushXAsync(string listId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask LTrimAsync(string listId, int keepStartingFrom, int keepEndingAt, CancellationToken token);
    public abstract virtual ValueTask`1<long> LRemAsync(string listId, int removeNoOfMatches, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> LLenAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> LIndexAsync(string listId, int listIndex, CancellationToken token);
    public abstract virtual ValueTask LInsertAsync(string listId, bool insertBefore, Byte[] pivot, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask LSetAsync(string listId, int listIndex, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> LPopAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> RPopAsync(string listId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> BLPopAsync(string listId, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> BLPopAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> BLPopValueAsync(string listId, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> BLPopValueAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> BRPopAsync(string listId, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> BRPopAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> RPopLPushAsync(string fromListId, string toListId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> BRPopValueAsync(string listId, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> BRPopValueAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> BRPopLPushAsync(string fromListId, string toListId, int timeOutSecs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SMembersAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<long> SAddAsync(string setId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> SAddAsync(string setId, Byte[][] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> SRemAsync(string setId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> SPopAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SPopAsync(string setId, int count, CancellationToken token);
    public abstract virtual ValueTask SMoveAsync(string fromSetId, string toSetId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> SCardAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<long> SIsMemberAsync(string setId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SInterAsync(String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SInterAsync(String[] setIds);
    public abstract virtual ValueTask SInterStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask SInterStoreAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<Byte[][]> SUnionAsync(String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SUnionAsync(String[] setIds);
    public abstract virtual ValueTask SUnionStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask SUnionStoreAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<Byte[][]> SDiffAsync(string fromSetId, String[] withSetIds, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SDiffAsync(string fromSetId, String[] withSetIds);
    public abstract virtual ValueTask SDiffStoreAsync(string intoSetId, string fromSetId, String[] withSetIds, CancellationToken token);
    public abstract virtual ValueTask SDiffStoreAsync(string intoSetId, string fromSetId, String[] withSetIds);
    public abstract virtual ValueTask`1<Byte[]> SRandMemberAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZAddAsync(string setId, double score, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZAddAsync(string setId, long score, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRemAsync(string setId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRemAsync(string setId, Byte[][] values, CancellationToken token);
    public abstract virtual ValueTask`1<double> ZIncrByAsync(string setId, double incrBy, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<double> ZIncrByAsync(string setId, long incrBy, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRankAsync(string setId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRevRankAsync(string setId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRangeAsync(string setId, int min, int max, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRangeWithScoresAsync(string setId, int min, int max, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRevRangeAsync(string setId, int min, int max, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRevRangeWithScoresAsync(string setId, int min, int max, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRangeByScoreAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRangeByScoreAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRangeByScoreWithScoresAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRangeByScoreWithScoresAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRevRangeByScoreAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRevRangeByScoreAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRevRangeByScoreWithScoresAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ZRevRangeByScoreWithScoresAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRemRangeByRankAsync(string setId, int min, int max, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRemRangeByScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRemRangeByScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZCardAsync(string setId, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZCountAsync(string setId, double min, double max, CancellationToken token);
    public abstract virtual ValueTask`1<double> ZScoreAsync(string setId, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZUnionStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZUnionStoreAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<long> ZInterStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZInterStoreAsync(string intoSetId, String[] setIds);
    public abstract virtual ValueTask`1<Byte[][]> ZRangeByLexAsync(string setId, string min, string max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZLexCountAsync(string setId, string min, string max, CancellationToken token);
    public abstract virtual ValueTask`1<long> ZRemRangeByLexAsync(string setId, string min, string max, CancellationToken token);
    public abstract virtual ValueTask`1<long> HSetAsync(string hashId, Byte[] key, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask HMSetAsync(string hashId, Byte[][] keys, Byte[][] values, CancellationToken token);
    public abstract virtual ValueTask`1<long> HSetNXAsync(string hashId, Byte[] key, Byte[] value, CancellationToken token);
    public abstract virtual ValueTask`1<long> HIncrbyAsync(string hashId, Byte[] key, int incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<double> HIncrbyFloatAsync(string hashId, Byte[] key, double incrementBy, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> HGetAsync(string hashId, Byte[] key, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> HMGetAsync(string hashId, Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> HMGetAsync(string hashId, Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<long> HDelAsync(string hashId, Byte[] key, CancellationToken token);
    public abstract virtual ValueTask`1<long> HExistsAsync(string hashId, Byte[] key, CancellationToken token);
    public abstract virtual ValueTask`1<long> HLenAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> HKeysAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> HValsAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> HGetAllAsync(string hashId, CancellationToken token);
    public abstract virtual ValueTask`1<long> GeoAddAsync(string key, double longitude, double latitude, string member, CancellationToken token);
    public abstract virtual ValueTask`1<long> GeoAddAsync(string key, RedisGeo[] geoPoints, CancellationToken token);
    public abstract virtual ValueTask`1<long> GeoAddAsync(string key, RedisGeo[] geoPoints);
    public abstract virtual ValueTask`1<double> GeoDistAsync(string key, string fromMember, string toMember, string unit, CancellationToken token);
    public abstract virtual ValueTask`1<String[]> GeoHashAsync(string key, String[] members, CancellationToken token);
    public abstract virtual ValueTask`1<String[]> GeoHashAsync(string key, String[] members);
    public abstract virtual ValueTask`1<List`1<RedisGeo>> GeoPosAsync(string key, String[] members, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<RedisGeo>> GeoPosAsync(string key, String[] members);
    public abstract virtual ValueTask`1<List`1<RedisGeoResult>> GeoRadiusAsync(string key, double longitude, double latitude, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<RedisGeoResult>> GeoRadiusByMemberAsync(string key, string member, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc, CancellationToken token);
    public abstract virtual ValueTask WatchAsync(String[] keys, CancellationToken token);
    public abstract virtual ValueTask WatchAsync(String[] keys);
    public abstract virtual ValueTask UnWatchAsync(CancellationToken token);
    public abstract virtual ValueTask`1<long> PublishAsync(string toChannel, Byte[] message, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SubscribeAsync(String[] toChannels, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> SubscribeAsync(String[] toChannels);
    public abstract virtual ValueTask`1<Byte[][]> UnSubscribeAsync(String[] toChannels, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> UnSubscribeAsync(String[] toChannels);
    public abstract virtual ValueTask`1<Byte[][]> PSubscribeAsync(String[] toChannelsMatchingPatterns, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> PSubscribeAsync(String[] toChannelsMatchingPatterns);
    public abstract virtual ValueTask`1<Byte[][]> PUnSubscribeAsync(String[] toChannelsMatchingPatterns, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> PUnSubscribeAsync(String[] toChannelsMatchingPatterns);
    public abstract virtual ValueTask`1<Byte[][]> ReceiveMessagesAsync(CancellationToken token);
    public abstract virtual ValueTask`1<IRedisSubscriptionAsync> CreateSubscriptionAsync(CancellationToken token);
    public abstract virtual ValueTask`1<RedisData> EvalCommandAsync(string luaBody, int numberKeysInArgs, Byte[][] keys, CancellationToken token);
    public abstract virtual ValueTask`1<RedisData> EvalCommandAsync(string luaBody, int numberKeysInArgs, Byte[][] keys);
    public abstract virtual ValueTask`1<RedisData> EvalShaCommandAsync(string sha1, int numberKeysInArgs, Byte[][] keys, CancellationToken token);
    public abstract virtual ValueTask`1<RedisData> EvalShaCommandAsync(string sha1, int numberKeysInArgs, Byte[][] keys);
    public abstract virtual ValueTask`1<Byte[][]> EvalAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> EvalAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<Byte[][]> EvalShaAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> EvalShaAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<long> EvalIntAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<long> EvalIntAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<long> EvalShaIntAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<long> EvalShaIntAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<string> EvalStrAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<string> EvalStrAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<string> EvalShaStrAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    public abstract virtual ValueTask`1<string> EvalShaStrAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    public abstract virtual ValueTask`1<string> CalculateSha1Async(string luaBody, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ScriptExistsAsync(Byte[][] sha1Refs, CancellationToken token);
    public abstract virtual ValueTask`1<Byte[][]> ScriptExistsAsync(Byte[][] sha1Refs);
    public abstract virtual ValueTask ScriptFlushAsync(CancellationToken token);
    public abstract virtual ValueTask ScriptKillAsync(CancellationToken token);
    public abstract virtual ValueTask`1<Byte[]> ScriptLoadAsync(string body, CancellationToken token);
    public abstract virtual ValueTask SlowlogResetAsync(CancellationToken token);
    public abstract virtual ValueTask`1<Object[]> SlowlogGetAsync(Nullable`1<int> top, CancellationToken token);
}
public interface ServiceStack.Redis.IRedisPubSubServer {
    public Action OnInit { get; public set; }
    public Action OnStart { get; public set; }
    public Action OnStop { get; public set; }
    public Action OnDispose { get; public set; }
    public Action`2<string, string> OnMessage { get; public set; }
    public Action`1<string> OnUnSubscribe { get; public set; }
    public Action`1<string> OnEvent { get; public set; }
    public Action`1<Exception> OnError { get; public set; }
    public Action`1<IRedisPubSubServer> OnFailover { get; public set; }
    public IRedisClientsManager ClientsManager { get; }
    public String[] Channels { get; }
    public Nullable`1<TimeSpan> WaitBeforeNextRestart { get; public set; }
    public DateTime CurrentServerTime { get; }
    public abstract virtual Action get_OnInit();
    public abstract virtual void set_OnInit(Action value);
    public abstract virtual Action get_OnStart();
    public abstract virtual void set_OnStart(Action value);
    public abstract virtual Action get_OnStop();
    public abstract virtual void set_OnStop(Action value);
    public abstract virtual Action get_OnDispose();
    public abstract virtual void set_OnDispose(Action value);
    public abstract virtual Action`2<string, string> get_OnMessage();
    public abstract virtual void set_OnMessage(Action`2<string, string> value);
    public abstract virtual Action`1<string> get_OnUnSubscribe();
    public abstract virtual void set_OnUnSubscribe(Action`1<string> value);
    public abstract virtual Action`1<string> get_OnEvent();
    public abstract virtual void set_OnEvent(Action`1<string> value);
    public abstract virtual Action`1<Exception> get_OnError();
    public abstract virtual void set_OnError(Action`1<Exception> value);
    public abstract virtual Action`1<IRedisPubSubServer> get_OnFailover();
    public abstract virtual void set_OnFailover(Action`1<IRedisPubSubServer> value);
    public abstract virtual IRedisClientsManager get_ClientsManager();
    public abstract virtual String[] get_Channels();
    public abstract virtual Nullable`1<TimeSpan> get_WaitBeforeNextRestart();
    public abstract virtual void set_WaitBeforeNextRestart(Nullable`1<TimeSpan> value);
    public abstract virtual DateTime get_CurrentServerTime();
    public abstract virtual string GetStatus();
    public abstract virtual string GetStatsDescription();
    public abstract virtual IRedisPubSubServer Start();
    public abstract virtual void Stop();
    public abstract virtual void Restart();
}
public interface ServiceStack.Redis.IRedisSet {
    public abstract virtual List`1<string> GetRangeFromSortedSet(int startingFrom, int endingAt);
    public abstract virtual HashSet`1<string> GetAll();
    public abstract virtual string Pop();
    public abstract virtual void Move(string value, IRedisSet toSet);
    public abstract virtual HashSet`1<string> Intersect(IRedisSet[] withSets);
    public abstract virtual void StoreIntersect(IRedisSet[] withSets);
    public abstract virtual HashSet`1<string> Union(IRedisSet[] withSets);
    public abstract virtual void StoreUnion(IRedisSet[] withSets);
    public abstract virtual HashSet`1<string> Diff(IRedisSet[] withSets);
    public abstract virtual void StoreDiff(IRedisSet fromSet, IRedisSet[] withSets);
    public abstract virtual string GetRandomEntry();
}
public interface ServiceStack.Redis.IRedisSetAsync {
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeFromSortedSetAsync(int startingFrom, int endingAt, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> GetAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> PopAsync(CancellationToken token);
    public abstract virtual ValueTask MoveAsync(string value, IRedisSetAsync toSet, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> IntersectAsync(IRedisSetAsync[] withSets, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> IntersectAsync(IRedisSetAsync[] withSets);
    public abstract virtual ValueTask StoreIntersectAsync(IRedisSetAsync[] withSets, CancellationToken token);
    public abstract virtual ValueTask StoreIntersectAsync(IRedisSetAsync[] withSets);
    public abstract virtual ValueTask`1<HashSet`1<string>> UnionAsync(IRedisSetAsync[] withSets, CancellationToken token);
    public abstract virtual ValueTask`1<HashSet`1<string>> UnionAsync(IRedisSetAsync[] withSets);
    public abstract virtual ValueTask StoreUnionAsync(IRedisSetAsync[] withSets, CancellationToken token);
    public abstract virtual ValueTask StoreUnionAsync(IRedisSetAsync[] withSets);
    public abstract virtual ValueTask`1<HashSet`1<string>> DiffAsync(IRedisSetAsync[] withSets, CancellationToken token);
    public abstract virtual ValueTask StoreDiffAsync(IRedisSetAsync fromSet, IRedisSetAsync[] withSets, CancellationToken token);
    public abstract virtual ValueTask StoreDiffAsync(IRedisSetAsync fromSet, IRedisSetAsync[] withSets);
    public abstract virtual ValueTask`1<string> GetRandomEntryAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(string item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(string item, CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsAsync(string item, CancellationToken token);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
}
public interface ServiceStack.Redis.IRedisSortedSet {
    public abstract virtual List`1<string> GetAll();
    public abstract virtual List`1<string> GetRange(int startingRank, int endingRank);
    public abstract virtual List`1<string> GetRangeByScore(string fromStringScore, string toStringScore);
    public abstract virtual List`1<string> GetRangeByScore(string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<string> GetRangeByScore(double fromScore, double toScore);
    public abstract virtual List`1<string> GetRangeByScore(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual void RemoveRange(int fromRank, int toRank);
    public abstract virtual void RemoveRangeByScore(double fromScore, double toScore);
    public abstract virtual void StoreFromIntersect(IRedisSortedSet[] ofSets);
    public abstract virtual void StoreFromUnion(IRedisSortedSet[] ofSets);
    public abstract virtual long GetItemIndex(string value);
    public abstract virtual double GetItemScore(string value);
    public abstract virtual void IncrementItemScore(string value, double incrementByScore);
    public abstract virtual string PopItemWithHighestScore();
    public abstract virtual string PopItemWithLowestScore();
}
public interface ServiceStack.Redis.IRedisSortedSetAsync {
    public abstract virtual ValueTask`1<int> CountAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetAllAsync(CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeAsync(int startingRank, int endingRank, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeByScoreAsync(string fromStringScore, string toStringScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeByScoreAsync(string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeByScoreAsync(double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask`1<List`1<string>> GetRangeByScoreAsync(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual ValueTask RemoveRangeAsync(int fromRank, int toRank, CancellationToken token);
    public abstract virtual ValueTask RemoveRangeByScoreAsync(double fromScore, double toScore, CancellationToken token);
    public abstract virtual ValueTask StoreFromIntersectAsync(IRedisSortedSetAsync[] ofSets, CancellationToken token);
    public abstract virtual ValueTask StoreFromIntersectAsync(IRedisSortedSetAsync[] ofSets);
    public abstract virtual ValueTask StoreFromUnionAsync(IRedisSortedSetAsync[] ofSets, CancellationToken token);
    public abstract virtual ValueTask StoreFromUnionAsync(IRedisSortedSetAsync[] ofSets);
    public abstract virtual ValueTask`1<long> GetItemIndexAsync(string value, CancellationToken token);
    public abstract virtual ValueTask`1<double> GetItemScoreAsync(string value, CancellationToken token);
    public abstract virtual ValueTask IncrementItemScoreAsync(string value, double incrementByScore, CancellationToken token);
    public abstract virtual ValueTask`1<string> PopItemWithHighestScoreAsync(CancellationToken token);
    public abstract virtual ValueTask`1<string> PopItemWithLowestScoreAsync(CancellationToken token);
    public abstract virtual ValueTask ClearAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> ContainsAsync(string item, CancellationToken token);
    public abstract virtual ValueTask AddAsync(string item, CancellationToken token);
    public abstract virtual ValueTask`1<bool> RemoveAsync(string item, CancellationToken token);
}
public interface ServiceStack.Redis.IRedisSubscription {
    public long SubscriptionCount { get; }
    public Action`1<string> OnSubscribe { get; public set; }
    public Action`2<string, string> OnMessage { get; public set; }
    public Action`2<string, Byte[]> OnMessageBytes { get; public set; }
    public Action`1<string> OnUnSubscribe { get; public set; }
    public abstract virtual long get_SubscriptionCount();
    public abstract virtual Action`1<string> get_OnSubscribe();
    public abstract virtual void set_OnSubscribe(Action`1<string> value);
    public abstract virtual Action`2<string, string> get_OnMessage();
    public abstract virtual void set_OnMessage(Action`2<string, string> value);
    public abstract virtual Action`2<string, Byte[]> get_OnMessageBytes();
    public abstract virtual void set_OnMessageBytes(Action`2<string, Byte[]> value);
    public abstract virtual Action`1<string> get_OnUnSubscribe();
    public abstract virtual void set_OnUnSubscribe(Action`1<string> value);
    public abstract virtual void SubscribeToChannels(String[] channels);
    public abstract virtual void SubscribeToChannelsMatching(String[] patterns);
    public abstract virtual void UnSubscribeFromAllChannels();
    public abstract virtual void UnSubscribeFromChannels(String[] channels);
    public abstract virtual void UnSubscribeFromChannelsMatching(String[] patterns);
}
public interface ServiceStack.Redis.IRedisSubscriptionAsync {
    public long SubscriptionCount { get; }
    public abstract virtual long get_SubscriptionCount();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnSubscribeAsync(Func`2<string, ValueTask> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnSubscribeAsync(Func`2<string, ValueTask> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnMessageAsync(Func`3<string, string, ValueTask> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnMessageAsync(Func`3<string, string, ValueTask> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnMessageBytesAsync(Func`3<string, Byte[], ValueTask> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnMessageBytesAsync(Func`3<string, Byte[], ValueTask> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnUnSubscribeAsync(Func`2<string, ValueTask> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnUnSubscribeAsync(Func`2<string, ValueTask> value);
    public abstract virtual ValueTask SubscribeToChannelsAsync(String[] channels, CancellationToken token);
    public abstract virtual ValueTask SubscribeToChannelsAsync(String[] channels);
    public abstract virtual ValueTask SubscribeToChannelsMatchingAsync(String[] patterns, CancellationToken token);
    public abstract virtual ValueTask SubscribeToChannelsMatchingAsync(String[] patterns);
    public abstract virtual ValueTask UnSubscribeFromAllChannelsAsync(CancellationToken token);
    public abstract virtual ValueTask UnSubscribeFromChannelsAsync(String[] channels, CancellationToken token);
    public abstract virtual ValueTask UnSubscribeFromChannelsAsync(String[] channels);
    public abstract virtual ValueTask UnSubscribeFromChannelsMatchingAsync(String[] patterns, CancellationToken token);
    public abstract virtual ValueTask UnSubscribeFromChannelsMatchingAsync(String[] patterns);
}
public interface ServiceStack.Redis.IRedisTransaction {
    public abstract virtual bool Commit();
    public abstract virtual void Rollback();
}
public interface ServiceStack.Redis.IRedisTransactionAsync {
    public abstract virtual ValueTask`1<bool> CommitAsync(CancellationToken token);
    public abstract virtual ValueTask RollbackAsync(CancellationToken token);
}
public interface ServiceStack.Redis.IRedisTransactionBase {
}
public interface ServiceStack.Redis.IRedisTransactionBaseAsync {
}
public class ServiceStack.Redis.ItemRef : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    public string Id { get; public set; }
    public string Item { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
}
public interface ServiceStack.Redis.Pipeline.IRedisPipeline {
}
public interface ServiceStack.Redis.Pipeline.IRedisPipelineAsync {
}
public interface ServiceStack.Redis.Pipeline.IRedisPipelineShared {
    public abstract virtual void Flush();
    public abstract virtual bool Replay();
}
public interface ServiceStack.Redis.Pipeline.IRedisPipelineSharedAsync {
    public abstract virtual ValueTask FlushAsync(CancellationToken token);
    public abstract virtual ValueTask`1<bool> ReplayAsync(CancellationToken token);
}
public interface ServiceStack.Redis.Pipeline.IRedisQueueableOperation {
    public abstract virtual void QueueCommand(Action`1<IRedisClient> command);
    public abstract virtual void QueueCommand(Action`1<IRedisClient> command, Action onSuccessCallback);
    public abstract virtual void QueueCommand(Action`1<IRedisClient> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, int> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, int> command, Action`1<int> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, int> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, long> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, long> command, Action`1<long> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, long> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, bool> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, bool> command, Action`1<bool> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, bool> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, double> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, double> command, Action`1<double> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, double> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Byte[]> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Byte[]> command, Action`1<Byte[]> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Byte[]> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Byte[][]> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Byte[][]> command, Action`1<Byte[][]> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Byte[][]> command, Action`1<Byte[][]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, string> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, string> command, Action`1<string> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, string> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, List`1<string>> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, HashSet`1<string>> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Dictionary`2<string, string>> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Dictionary`2<string, string>> command, Action`1<Dictionary`2<string, string>> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, Dictionary`2<string, string>> command, Action`1<Dictionary`2<string, string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, RedisData> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, RedisData> command, Action`1<RedisData> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, RedisData> command, Action`1<RedisData> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, RedisText> command);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, RedisText> command, Action`1<RedisText> onSuccessCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClient, RedisText> command, Action`1<RedisText> onSuccessCallback, Action`1<Exception> onErrorCallback);
}
public interface ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync {
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<int>> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<long>> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<bool>> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<double>> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<Byte[]>> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<Byte[][]>> command, Action`1<Byte[][]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<string>> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<List`1<string>>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<HashSet`1<string>>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<Dictionary`2<string, string>>> command, Action`1<Dictionary`2<string, string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<RedisData>> command, Action`1<RedisData> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public abstract virtual void QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<RedisText>> command, Action`1<RedisText> onSuccessCallback, Action`1<Exception> onErrorCallback);
}
public interface ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperation {
    public abstract virtual void CompleteVoidQueuedCommand(Action voidReadCommand);
    public abstract virtual void CompleteIntQueuedCommand(Func`1<int> intReadCommand);
    public abstract virtual void CompleteLongQueuedCommand(Func`1<long> longReadCommand);
    public abstract virtual void CompleteBytesQueuedCommand(Func`1<Byte[]> bytesReadCommand);
    public abstract virtual void CompleteMultiBytesQueuedCommand(Func`1<Byte[][]> multiBytesReadCommand);
    public abstract virtual void CompleteStringQueuedCommand(Func`1<string> stringReadCommand);
    public abstract virtual void CompleteMultiStringQueuedCommand(Func`1<List`1<string>> multiStringReadCommand);
    public abstract virtual void CompleteDoubleQueuedCommand(Func`1<double> doubleReadCommand);
    public abstract virtual void CompleteRedisDataQueuedCommand(Func`1<RedisData> redisDataReadCommand);
}
public interface ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync {
    public abstract virtual void CompleteVoidQueuedCommandAsync(Func`2<CancellationToken, ValueTask> voidReadCommand);
    public abstract virtual void CompleteIntQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<int>> intReadCommand);
    public abstract virtual void CompleteLongQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<long>> longReadCommand);
    public abstract virtual void CompleteBytesQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<Byte[]>> bytesReadCommand);
    public abstract virtual void CompleteMultiBytesQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<Byte[][]>> multiBytesReadCommand);
    public abstract virtual void CompleteStringQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<string>> stringReadCommand);
    public abstract virtual void CompleteMultiStringQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<List`1<string>>> multiStringReadCommand);
    public abstract virtual void CompleteDoubleQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<double>> doubleReadCommand);
    public abstract virtual void CompleteRedisDataQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<RedisData>> redisDataReadCommand);
}
public enum ServiceStack.Redis.RedisClientType : Enum {
    public int value__;
    public static RedisClientType Normal;
    public static RedisClientType Slave;
    public static RedisClientType PubSub;
}
public class ServiceStack.Redis.RedisData : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RedisData> <Children>k__BackingField;
    public Byte[] Data { get; public set; }
    public List`1<RedisData> Children { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public List`1<RedisData> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<RedisData> value);
}
public class ServiceStack.Redis.RedisGeo : object {
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    public double Longitude { get; public set; }
    public double Latitude { get; public set; }
    public string Member { get; public set; }
    public RedisGeo(double longitude, double latitude, string member);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(string value);
}
public class ServiceStack.Redis.RedisGeoResult : object {
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Distance>k__BackingField;
    public string Member { get; public set; }
    public double Longitude { get; public set; }
    public double Latitude { get; public set; }
    public long Hash { get; public set; }
    public string Unit { get; public set; }
    public double Distance { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(string value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public long get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(long value);
    [CompilerGeneratedAttribute]
public string get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(string value);
    [CompilerGeneratedAttribute]
public double get_Distance();
    [CompilerGeneratedAttribute]
public void set_Distance(double value);
}
public static class ServiceStack.Redis.RedisGeoUnit : object {
    public static string Meters;
    public static string Kilometers;
    public static string Miles;
    public static string Feet;
}
public enum ServiceStack.Redis.RedisKeyType : Enum {
    public int value__;
    public static RedisKeyType None;
    public static RedisKeyType String;
    public static RedisKeyType List;
    public static RedisKeyType Set;
    public static RedisKeyType SortedSet;
    public static RedisKeyType Hash;
}
public enum ServiceStack.Redis.RedisServerRole : Enum {
    public int value__;
    public static RedisServerRole Unknown;
    public static RedisServerRole Master;
    public static RedisServerRole Slave;
    public static RedisServerRole Sentinel;
}
public class ServiceStack.Redis.RedisText : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RedisText> <Children>k__BackingField;
    public string Text { get; public set; }
    public List`1<RedisText> Children { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public List`1<RedisText> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<RedisText> value);
    public virtual string ToString();
}
public class ServiceStack.Redis.ScanResult : object {
    [CompilerGeneratedAttribute]
private ulong <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Byte[]> <Results>k__BackingField;
    public ulong Cursor { get; public set; }
    public List`1<Byte[]> Results { get; public set; }
    [CompilerGeneratedAttribute]
public ulong get_Cursor();
    [CompilerGeneratedAttribute]
public void set_Cursor(ulong value);
    [CompilerGeneratedAttribute]
public List`1<Byte[]> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<Byte[]> value);
}
public class ServiceStack.Redis.SlowlogItem : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public int Id { get; private set; }
    public int Duration { get; private set; }
    public DateTime Timestamp { get; private set; }
    public String[] Arguments { get; private set; }
    public SlowlogItem(int id, DateTime timeStamp, int duration, String[] arguments);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
private void set_Duration(int value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(String[] value);
}
public class ServiceStack.Redis.SortOptions : object {
    [CompilerGeneratedAttribute]
private string <SortPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SortAlpha>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SortDesc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreAtKey>k__BackingField;
    public string SortPattern { get; public set; }
    public Nullable`1<int> Skip { get; public set; }
    public Nullable`1<int> Take { get; public set; }
    public string GetPattern { get; public set; }
    public bool SortAlpha { get; public set; }
    public bool SortDesc { get; public set; }
    public string StoreAtKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SortPattern();
    [CompilerGeneratedAttribute]
public void set_SortPattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Take();
    [CompilerGeneratedAttribute]
public void set_Take(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_GetPattern();
    [CompilerGeneratedAttribute]
public void set_GetPattern(string value);
    [CompilerGeneratedAttribute]
public bool get_SortAlpha();
    [CompilerGeneratedAttribute]
public void set_SortAlpha(bool value);
    [CompilerGeneratedAttribute]
public bool get_SortDesc();
    [CompilerGeneratedAttribute]
public void set_SortDesc(bool value);
    [CompilerGeneratedAttribute]
public string get_StoreAtKey();
    [CompilerGeneratedAttribute]
public void set_StoreAtKey(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.RefAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Type <ModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfId>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <QueryType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <None>k__BackingField;
    public Type ModelType { get; public set; }
    public string Model { get; public set; }
    public string RefId { get; public set; }
    public string RefLabel { get; public set; }
    public string SelfId { get; public set; }
    public Type QueryType { get; public set; }
    public bool None { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ModelType();
    [CompilerGeneratedAttribute]
public void set_ModelType(Type value);
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(string value);
    [CompilerGeneratedAttribute]
public string get_RefId();
    [CompilerGeneratedAttribute]
public void set_RefId(string value);
    [CompilerGeneratedAttribute]
public string get_RefLabel();
    [CompilerGeneratedAttribute]
public void set_RefLabel(string value);
    [CompilerGeneratedAttribute]
public string get_SelfId();
    [CompilerGeneratedAttribute]
public void set_SelfId(string value);
    [CompilerGeneratedAttribute]
public Type get_QueryType();
    [CompilerGeneratedAttribute]
public void set_QueryType(Type value);
    [CompilerGeneratedAttribute]
public bool get_None();
    [CompilerGeneratedAttribute]
public void set_None(bool value);
}
public class ServiceStack.ReflectAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<PropertyInfo, object>> <ConstructorArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<PropertyInfo, object>> <PropertyArgs>k__BackingField;
    public string Name { get; public set; }
    public List`1<KeyValuePair`2<PropertyInfo, object>> ConstructorArgs { get; public set; }
    public List`1<KeyValuePair`2<PropertyInfo, object>> PropertyArgs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<PropertyInfo, object>> get_ConstructorArgs();
    [CompilerGeneratedAttribute]
public void set_ConstructorArgs(List`1<KeyValuePair`2<PropertyInfo, object>> value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<PropertyInfo, object>> get_PropertyArgs();
    [CompilerGeneratedAttribute]
public void set_PropertyArgs(List`1<KeyValuePair`2<PropertyInfo, object>> value);
}
public enum ServiceStack.RelativeTimeStyle : Enum {
    public int value__;
    public static RelativeTimeStyle Undefined;
    public static RelativeTimeStyle Long;
    public static RelativeTimeStyle Short;
    public static RelativeTimeStyle Narrow;
}
[FlagsAttribute]
public enum ServiceStack.RequestAttributes : Enum {
    public long value__;
    public static RequestAttributes None;
    public static RequestAttributes Any;
    public static RequestAttributes AnyNetworkAccessType;
    public static RequestAttributes AnySecurityMode;
    public static RequestAttributes AnyHttpMethod;
    public static RequestAttributes AnyCallStyle;
    public static RequestAttributes AnyFormat;
    public static RequestAttributes AnyEndpoint;
    public static RequestAttributes InternalNetworkAccess;
    public static RequestAttributes Localhost;
    public static RequestAttributes LocalSubnet;
    public static RequestAttributes External;
    public static RequestAttributes Secure;
    public static RequestAttributes InSecure;
    public static RequestAttributes HttpHead;
    public static RequestAttributes HttpGet;
    public static RequestAttributes HttpPost;
    public static RequestAttributes HttpPut;
    public static RequestAttributes HttpDelete;
    public static RequestAttributes HttpPatch;
    public static RequestAttributes HttpOptions;
    public static RequestAttributes HttpOther;
    public static RequestAttributes OneWay;
    public static RequestAttributes Reply;
    public static RequestAttributes Soap11;
    public static RequestAttributes Soap12;
    public static RequestAttributes Xml;
    public static RequestAttributes Json;
    public static RequestAttributes Jsv;
    public static RequestAttributes ProtoBuf;
    public static RequestAttributes Csv;
    public static RequestAttributes Html;
    public static RequestAttributes Jsonl;
    public static RequestAttributes MsgPack;
    public static RequestAttributes FormatOther;
    public static RequestAttributes Http;
    public static RequestAttributes MessageQueue;
    public static RequestAttributes Tcp;
    public static RequestAttributes Grpc;
    public static RequestAttributes EndpointOther;
    public static RequestAttributes InProcess;
}
[ExtensionAttribute]
public static class ServiceStack.RequestAttributesExtensions : object {
    [ExtensionAttribute]
public static bool IsLocalhost(RequestAttributes attrs);
    [ExtensionAttribute]
public static bool IsLocalSubnet(RequestAttributes attrs);
    [ExtensionAttribute]
public static bool IsExternal(RequestAttributes attrs);
    [ExtensionAttribute]
public static Format ToFormat(string format);
    [ExtensionAttribute]
public static string FromFormat(Format format);
    [ExtensionAttribute]
public static Format ToFormat(Feature feature);
    [ExtensionAttribute]
public static Feature ToFeature(Format format);
    [ExtensionAttribute]
public static RequestAttributes ToRequestAttribute(Format format);
    [ExtensionAttribute]
public static Feature ToSoapFeature(RequestAttributes attributes);
}
public class ServiceStack.RequestLogEntry : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsoluteUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestBody>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RequestDto>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardedFor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Referer>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <FormData>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResponseDto>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ErrorResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <ExceptionData>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [AutoIncrementAttribute]
public long Id { get; public set; }
    public string TraceId { get; public set; }
    public string OperationName { get; public set; }
    public DateTime DateTime { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string HttpMethod { get; public set; }
    public string AbsoluteUri { get; public set; }
    public string PathInfo { get; public set; }
    [StringLengthAttribute("2147483647")]
public string RequestBody { get; public set; }
    public object RequestDto { get; public set; }
    public string UserAuthId { get; public set; }
    public string SessionId { get; public set; }
    public string IpAddress { get; public set; }
    public string ForwardedFor { get; public set; }
    public string Referer { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public Dictionary`2<string, string> FormData { get; public set; }
    public Dictionary`2<string, string> Items { get; public set; }
    public Dictionary`2<string, string> ResponseHeaders { get; public set; }
    public object Session { get; public set; }
    public object ResponseDto { get; public set; }
    public object ErrorResponse { get; public set; }
    public string ExceptionSource { get; public set; }
    public IDictionary ExceptionData { get; public set; }
    public TimeSpan RequestDuration { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(string value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public void set_DateTime(DateTime value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_StatusDescription();
    [CompilerGeneratedAttribute]
public void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public string get_AbsoluteUri();
    [CompilerGeneratedAttribute]
public void set_AbsoluteUri(string value);
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
    [CompilerGeneratedAttribute]
public string get_RequestBody();
    [CompilerGeneratedAttribute]
public void set_RequestBody(string value);
    [CompilerGeneratedAttribute]
public object get_RequestDto();
    [CompilerGeneratedAttribute]
public void set_RequestDto(object value);
    [CompilerGeneratedAttribute]
public string get_UserAuthId();
    [CompilerGeneratedAttribute]
public void set_UserAuthId(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardedFor();
    [CompilerGeneratedAttribute]
public void set_ForwardedFor(string value);
    [CompilerGeneratedAttribute]
public string get_Referer();
    [CompilerGeneratedAttribute]
public void set_Referer(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_FormData();
    [CompilerGeneratedAttribute]
public void set_FormData(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public object get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(object value);
    [CompilerGeneratedAttribute]
public object get_ResponseDto();
    [CompilerGeneratedAttribute]
public void set_ResponseDto(object value);
    [CompilerGeneratedAttribute]
public object get_ErrorResponse();
    [CompilerGeneratedAttribute]
public void set_ErrorResponse(object value);
    [CompilerGeneratedAttribute]
public string get_ExceptionSource();
    [CompilerGeneratedAttribute]
public void set_ExceptionSource(string value);
    [CompilerGeneratedAttribute]
public IDictionary get_ExceptionData();
    [CompilerGeneratedAttribute]
public void set_ExceptionData(IDictionary value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestDuration();
    [CompilerGeneratedAttribute]
public void set_RequestDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
[DataContractAttribute]
public class ServiceStack.ResponseError : object {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [DataMemberAttribute]
public string ErrorCode { get; public set; }
    [DataMemberAttribute]
public string FieldName { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
[DataContractAttribute]
public class ServiceStack.ResponseStatus : object {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResponseError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [DataMemberAttribute]
public string ErrorCode { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string StackTrace { get; public set; }
    [DataMemberAttribute]
public List`1<ResponseError> Errors { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    public ResponseStatus(string errorCode);
    public ResponseStatus(string errorCode, string message);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public List`1<ResponseError> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<ResponseError> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.RestrictAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private RequestAttributes[] <AccessibleToAny>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestAttributes[] <VisibleToAny>k__BackingField;
    public bool VisibleInternalOnly { get; public set; }
    public bool VisibleLocalhostOnly { get; public set; }
    public bool LocalhostOnly { get; public set; }
    public bool InternalOnly { get; public set; }
    public bool ExternalOnly { get; public set; }
    public RequestAttributes AccessTo { get; public set; }
    public RequestAttributes[] AccessibleToAny { get; private set; }
    public RequestAttributes VisibilityTo { get; public set; }
    unknown bool Hide {public set; }
    public RequestAttributes[] VisibleToAny { get; private set; }
    public bool HasNoAccessRestrictions { get; }
    public bool HasNoVisibilityRestrictions { get; }
    public RestrictAttribute(RequestAttributes[] restrictAccessAndVisibilityToScenarios);
    public RestrictAttribute(RequestAttributes[] allowedAccessScenarios, RequestAttributes[] visibleToScenarios);
    public bool get_VisibleInternalOnly();
    public void set_VisibleInternalOnly(bool value);
    public bool get_VisibleLocalhostOnly();
    public void set_VisibleLocalhostOnly(bool value);
    public bool get_LocalhostOnly();
    public void set_LocalhostOnly(bool value);
    public bool get_InternalOnly();
    public void set_InternalOnly(bool value);
    public bool get_ExternalOnly();
    public void set_ExternalOnly(bool value);
    public RequestAttributes get_AccessTo();
    public void set_AccessTo(RequestAttributes value);
    [CompilerGeneratedAttribute]
public RequestAttributes[] get_AccessibleToAny();
    [CompilerGeneratedAttribute]
private void set_AccessibleToAny(RequestAttributes[] value);
    public RequestAttributes get_VisibilityTo();
    public void set_VisibilityTo(RequestAttributes value);
    public void set_Hide(bool value);
    [CompilerGeneratedAttribute]
public RequestAttributes[] get_VisibleToAny();
    [CompilerGeneratedAttribute]
private void set_VisibleToAny(RequestAttributes[] value);
    private static RequestAttributes[] ToAllowedFlagsSet(RequestAttributes[] restrictToAny);
    public bool CanShowTo(RequestAttributes restrictions);
    public bool HasAccessTo(RequestAttributes restrictions);
    public bool get_HasNoAccessRestrictions();
    public bool get_HasNoVisibilityRestrictions();
}
[ExtensionAttribute]
public static class ServiceStack.RestrictExtensions : object {
    [ExtensionAttribute]
public static RequestAttributes ToAllowedFlagsSet(RequestAttributes restrictTo);
    public static bool HasAnyRestrictionsOf(RequestAttributes allRestrictions, RequestAttributes restrictions);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.RetryAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Times>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDelayMs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelayFirst>k__BackingField;
    public int Times { get; public set; }
    public RetryBehavior Behavior { get; public set; }
    public int DelayMs { get; public set; }
    public int MaxDelayMs { get; public set; }
    public bool DelayFirst { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Times();
    [CompilerGeneratedAttribute]
public void set_Times(int value);
    [CompilerGeneratedAttribute]
public RetryBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(RetryBehavior value);
    [CompilerGeneratedAttribute]
public int get_DelayMs();
    [CompilerGeneratedAttribute]
public void set_DelayMs(int value);
    [CompilerGeneratedAttribute]
public int get_MaxDelayMs();
    [CompilerGeneratedAttribute]
public void set_MaxDelayMs(int value);
    [CompilerGeneratedAttribute]
public bool get_DelayFirst();
    [CompilerGeneratedAttribute]
public void set_DelayFirst(bool value);
}
public enum ServiceStack.RetryBehavior : Enum {
    public int value__;
    public static RetryBehavior Default;
    public static RetryBehavior Standard;
    public static RetryBehavior LinearBackoff;
    public static RetryBehavior ExponentialBackoff;
    public static RetryBehavior FullJitterBackoff;
}
public class ServiceStack.RetryPolicy : ValueType {
    [CompilerGeneratedAttribute]
private int <Times>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDelayMs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelayFirst>k__BackingField;
    public int Times { get; public set; }
    public RetryBehavior Behavior { get; public set; }
    public int DelayMs { get; public set; }
    public int MaxDelayMs { get; public set; }
    public bool DelayFirst { get; public set; }
    public RetryPolicy(int Times, RetryBehavior Behavior, int DelayMs, int MaxDelayMs, bool DelayFirst);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Times();
    [CompilerGeneratedAttribute]
public void set_Times(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public RetryBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(RetryBehavior value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_DelayMs();
    [CompilerGeneratedAttribute]
public void set_DelayMs(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_MaxDelayMs();
    [CompilerGeneratedAttribute]
public void set_MaxDelayMs(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_DelayFirst();
    [CompilerGeneratedAttribute]
public void set_DelayFirst(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RetryPolicy left, RetryPolicy right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RetryPolicy left, RetryPolicy right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RetryPolicy other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Int32& Times, RetryBehavior& Behavior, Int32& DelayMs, Int32& MaxDelayMs, Boolean& DelayFirst);
}
public enum ServiceStack.RoundingMode : Enum {
    public int value__;
    public static RoundingMode Undefined;
    public static RoundingMode Ceil;
    public static RoundingMode Floor;
    public static RoundingMode Expand;
    public static RoundingMode Trunc;
    public static RoundingMode HalfCeil;
    public static RoundingMode HalfFloor;
    public static RoundingMode HalfExpand;
    public static RoundingMode HalfTrunc;
    public static RoundingMode HalfEven;
}
[AttributeUsageAttribute("68")]
public class ServiceStack.RouteAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verbs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Matches>k__BackingField;
    public string Path { get; public set; }
    public string Summary { get; public set; }
    public string Notes { get; public set; }
    public string Verbs { get; public set; }
    public int Priority { get; public set; }
    public string Matches { get; public set; }
    public RouteAttribute(string path);
    public RouteAttribute(string path, string verbs);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    [CompilerGeneratedAttribute]
public string get_Verbs();
    [CompilerGeneratedAttribute]
public void set_Verbs(string value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public string get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(string value);
    protected bool Equals(RouteAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ReflectAttribute ToReflectAttribute();
}
public class ServiceStack.ScriptValue : ValueType {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Eval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    public object Value { get; public set; }
    public string Expression { get; public set; }
    public string Eval { get; public set; }
    public bool NoCache { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Eval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Eval(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_NoCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCache(bool value);
}
public abstract class ServiceStack.ScriptValueAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Eval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    public object Value { get; public set; }
    public string Expression { get; public set; }
    public string Eval { get; public set; }
    public bool NoCache { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Eval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Eval(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCache(bool value);
}
public enum ServiceStack.Security : Enum {
    public long value__;
    public static Security Secure;
    public static Security InSecure;
}
public enum ServiceStack.SignDisplay : Enum {
    public int value__;
    public static SignDisplay Undefined;
    public static SignDisplay Always;
    public static SignDisplay Auto;
    public static SignDisplay ExceptZero;
    public static SignDisplay Negative;
    public static SignDisplay Never;
}
public static class ServiceStack.SqlTemplate : object {
    public static string IsNull;
    public static string IsNotNull;
    public static string GreaterThanOrEqual;
    public static string GreaterThan;
    public static string LessThan;
    public static string LessThanOrEqual;
    public static string NotEqual;
    public static string CaseSensitiveLike;
    public static string CaseInsensitiveLike;
}
public class ServiceStack.StrictModeException : ArgumentException {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Code { get; public set; }
    public StrictModeException(string message, string code);
    public StrictModeException(string message, Exception innerException, string code);
    public StrictModeException(string message, string paramName, string code);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
}
[DataContractAttribute]
public class ServiceStack.StringResponse : object {
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public string Result { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
[DataContractAttribute]
public class ServiceStack.StringsResponse : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public List`1<string> Results { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
public static class ServiceStack.SvgIcons : object {
    private static string LogoPrefix;
    private static string IconPrefix;
    public static string ServiceStack;
    public static string Apple;
    public static string Twitter;
    public static string GitHub;
    public static string Google;
    public static string Facebook;
    public static string Microsoft;
    public static string LinkedIn;
    public static string Male;
    public static string Female;
    public static string MaleBusiness;
    public static string FemaleBusiness;
    public static string MaleColor;
    public static string FemaleColor;
    public static string Users;
    public static string Tasks;
    public static string Stats;
    public static string Logs;
    public static string Completed;
    public static string Failed;
}
public static class ServiceStack.SwaggerType : object {
    public static string Byte;
    public static string Boolean;
    public static string Int;
    public static string Long;
    public static string Float;
    public static string Double;
    public static string String;
    public static string Date;
    public static string Array;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class ServiceStack.SyncCommand : SyncCommand`1<NoArgs> {
    protected virtual void Run(NoArgs request);
    protected abstract virtual void Run();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.SyncCommand`1 : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public IRequest Request { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    public sealed virtual Task ExecuteAsync(TArgs request);
    protected abstract virtual void Run(TArgs request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.SyncCommandWithResult`1 : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public IRequest Request { get; public set; }
    public TResult Result { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual TResult get_Result();
    [CompilerGeneratedAttribute]
protected void set_Result(TResult value);
    public sealed virtual Task ExecuteAsync(NoArgs request);
    protected abstract virtual TResult Run();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.SyncCommandWithResult`2 : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public IRequest Request { get; public set; }
    public TResult Result { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual TResult get_Result();
    [CompilerGeneratedAttribute]
protected void set_Result(TResult value);
    public sealed virtual Task ExecuteAsync(TArgs request);
    protected abstract virtual TResult Run(TArgs request);
}
[AttributeUsageAttribute("196")]
public class ServiceStack.SynthesizeAttribute : AttributeBase {
}
[AttributeUsageAttribute("4")]
public class ServiceStack.TagAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public TagAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public static class ServiceStack.TagNames : object {
    public static string Auth;
    public static string Admin;
    public static string Jobs;
}
[AttributeUsageAttribute("128")]
public class ServiceStack.TextInputAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Help>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AllowableValues>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public string Type { get; public set; }
    public string Value { get; public set; }
    public string Placeholder { get; public set; }
    public string Help { get; public set; }
    public string Label { get; public set; }
    public string Size { get; public set; }
    public string Pattern { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public Nullable`1<bool> IsRequired { get; public set; }
    public string Min { get; public set; }
    public string Max { get; public set; }
    public Nullable`1<int> Step { get; public set; }
    public Nullable`1<int> MinLength { get; public set; }
    public Nullable`1<int> MaxLength { get; public set; }
    public String[] AllowableValues { get; public set; }
    public TextInputAttribute(string id);
    public TextInputAttribute(string id, string type);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Help();
    [CompilerGeneratedAttribute]
public void set_Help(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinLength();
    [CompilerGeneratedAttribute]
public void set_MinLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public String[] get_AllowableValues();
    [CompilerGeneratedAttribute]
public void set_AllowableValues(String[] value);
}
public enum ServiceStack.TimeStyle : Enum {
    public int value__;
    public static TimeStyle Undefined;
    public static TimeStyle Full;
    public static TimeStyle Long;
    public static TimeStyle Medium;
    public static TimeStyle Short;
}
public enum ServiceStack.UnitDisplay : Enum {
    public int value__;
    public static UnitDisplay Undefined;
    public static UnitDisplay Long;
    public static UnitDisplay Short;
    public static UnitDisplay Narrow;
}
public class ServiceStack.UploadFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string FileName { get; public set; }
    public Stream Stream { get; public set; }
    public string FieldName { get; public set; }
    public string ContentType { get; public set; }
    public UploadFile(Stream stream);
    public UploadFile(string fileName, Stream stream);
    public UploadFile(string fileName, Stream stream, string fieldName);
    public UploadFile(string fileName, Stream stream, string fieldName, string contentType);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.UploadToAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public string Location { get; public set; }
    public UploadToAttribute(string location);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
}
public class ServiceStack.ValidateApiKeyAttribute : ValidateRequestAttribute {
    public ValidateApiKeyAttribute(string scope);
}
[AttributeUsageAttribute("128")]
public class ServiceStack.ValidateAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Validator { get; public set; }
    public string Condition { get; public set; }
    [IgnoreAttribute]
public String[] AllConditions { get; public set; }
    [IgnoreAttribute]
public String[] AnyConditions { get; public set; }
    public string ErrorCode { get; public set; }
    public string Message { get; public set; }
    public ValidateAttribute(string validator);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Validator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Validator(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Condition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Condition(string value);
    public String[] get_AllConditions();
    public void set_AllConditions(String[] value);
    public String[] get_AnyConditions();
    public void set_AnyConditions(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    public static string Combine(string comperand, String[] conditions);
    public sealed virtual ReflectAttribute ToReflectAttribute();
}
public class ServiceStack.ValidateAuthSecretAttribute : ValidateRequestAttribute {
}
public class ServiceStack.ValidateCreditCardAttribute : ValidateAttribute {
}
public class ServiceStack.ValidateEmailAttribute : ValidateAttribute {
}
public class ServiceStack.ValidateEmptyAttribute : ValidateAttribute {
}
public class ServiceStack.ValidateEqualAttribute : ValidateAttribute {
    public ValidateEqualAttribute(string value);
    public ValidateEqualAttribute(int value);
    public ValidateEqualAttribute(bool value);
}
public class ServiceStack.ValidateExactLengthAttribute : ValidateAttribute {
    public ValidateExactLengthAttribute(int length);
}
public class ServiceStack.ValidateExclusiveBetweenAttribute : ValidateAttribute {
    public ValidateExclusiveBetweenAttribute(string from, string to);
    public ValidateExclusiveBetweenAttribute(char from, char to);
    public ValidateExclusiveBetweenAttribute(int from, int to);
}
public class ServiceStack.ValidateGreaterThanAttribute : ValidateAttribute {
    public ValidateGreaterThanAttribute(int value);
}
public class ServiceStack.ValidateGreaterThanOrEqualAttribute : ValidateAttribute {
    public ValidateGreaterThanOrEqualAttribute(int value);
}
public class ServiceStack.ValidateHasClaimAttribute : ValidateRequestAttribute {
    [CompilerGeneratedAttribute]
private string <type>P;
    [CompilerGeneratedAttribute]
private string <value>P;
    public string Type { get; }
    public string Value { get; }
    public ValidateHasClaimAttribute(string type, string value);
    public string get_Type();
    public string get_Value();
}
public class ServiceStack.ValidateHasPermissionAttribute : ValidateRequestAttribute {
    [CompilerGeneratedAttribute]
private string <permission>P;
    public string Permission { get; }
    public ValidateHasPermissionAttribute(string permission);
    public string get_Permission();
}
public class ServiceStack.ValidateHasRoleAttribute : ValidateRequestAttribute {
    [CompilerGeneratedAttribute]
private string <role>P;
    public string Role { get; }
    public ValidateHasRoleAttribute(string role);
    public string get_Role();
}
public class ServiceStack.ValidateHasScopeAttribute : ValidateRequestAttribute {
    [CompilerGeneratedAttribute]
private string <scope>P;
    public string Scope { get; }
    public ValidateHasScopeAttribute(string scope);
    public string get_Scope();
}
public class ServiceStack.ValidateInclusiveBetweenAttribute : ValidateAttribute {
    public ValidateInclusiveBetweenAttribute(string from, string to);
    public ValidateInclusiveBetweenAttribute(char from, char to);
    public ValidateInclusiveBetweenAttribute(int from, int to);
}
public class ServiceStack.ValidateIsAdminAttribute : ValidateRequestAttribute {
}
public class ServiceStack.ValidateIsAuthenticatedAttribute : ValidateRequestAttribute {
}
public class ServiceStack.ValidateLengthAttribute : ValidateAttribute {
    public ValidateLengthAttribute(int min, int max);
}
public class ServiceStack.ValidateLessThanAttribute : ValidateAttribute {
    public ValidateLessThanAttribute(int value);
}
public class ServiceStack.ValidateLessThanOrEqualAttribute : ValidateAttribute {
    public ValidateLessThanOrEqualAttribute(int value);
}
public class ServiceStack.ValidateMaximumLengthAttribute : ValidateAttribute {
    public ValidateMaximumLengthAttribute(int max);
}
public class ServiceStack.ValidateMinimumLengthAttribute : ValidateAttribute {
    public ValidateMinimumLengthAttribute(int min);
}
public class ServiceStack.ValidateNotEmptyAttribute : ValidateAttribute {
}
public class ServiceStack.ValidateNotEqualAttribute : ValidateAttribute {
    public ValidateNotEqualAttribute(string value);
    public ValidateNotEqualAttribute(int value);
    public ValidateNotEqualAttribute(bool value);
}
public class ServiceStack.ValidateNotNullAttribute : ValidateAttribute {
}
public class ServiceStack.ValidateNullAttribute : ValidateAttribute {
}
public class ServiceStack.ValidateRegularExpressionAttribute : ValidateAttribute {
    public ValidateRegularExpressionAttribute(string pattern);
}
[AttributeUsageAttribute("4")]
[TagAttribute("PropertyOrder")]
public class ServiceStack.ValidateRequestAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public string Validator { get; public set; }
    public string Condition { get; public set; }
    [IgnoreAttribute]
public String[] Conditions { get; public set; }
    public string ErrorCode { get; public set; }
    public string Message { get; public set; }
    public int StatusCode { get; public set; }
    [IgnoreAttribute]
public String[] AllConditions { get; public set; }
    [IgnoreAttribute]
public String[] AnyConditions { get; public set; }
    public ValidateRequestAttribute(string validator);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Validator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Validator(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Condition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Condition(string value);
    public String[] get_Conditions();
    public void set_Conditions(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    public String[] get_AllConditions();
    public void set_AllConditions(String[] value);
    public String[] get_AnyConditions();
    public void set_AnyConditions(String[] value);
    public sealed virtual ReflectAttribute ToReflectAttribute();
}
public class ServiceStack.ValidateRule : object {
    [CompilerGeneratedAttribute]
private string <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Validator { get; public set; }
    public string Condition { get; public set; }
    public string ErrorCode { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Validator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Validator(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Condition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Condition(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
}
public class ServiceStack.ValidateScalePrecisionAttribute : ValidateAttribute {
    public ValidateScalePrecisionAttribute(int scale, int precision);
}
public class ServiceStack.ValidationRule : ValidateRule {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuspendedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <SuspendedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [AutoIncrementAttribute]
public int Id { get; public set; }
    [RequiredAttribute]
public string Type { get; public set; }
    public string Field { get; public set; }
    public string CreatedBy { get; public set; }
    public Nullable`1<DateTime> CreatedDate { get; public set; }
    public string ModifiedBy { get; public set; }
    public Nullable`1<DateTime> ModifiedDate { get; public set; }
    public string SuspendedBy { get; public set; }
    [IndexAttribute]
public Nullable`1<DateTime> SuspendedDate { get; public set; }
    public string Notes { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_ModifiedBy();
    [CompilerGeneratedAttribute]
public void set_ModifiedBy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ModifiedDate();
    [CompilerGeneratedAttribute]
public void set_ModifiedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_SuspendedBy();
    [CompilerGeneratedAttribute]
public void set_SuspendedBy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_SuspendedDate();
    [CompilerGeneratedAttribute]
public void set_SuspendedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    protected bool Equals(ValidationRule other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum ServiceStack.ValueStyle : Enum {
    public int value__;
    public static ValueStyle Single;
    public static ValueStyle Multiple;
    public static ValueStyle List;
}
public interface ServiceStack.Web.IContentTypeReader {
    public abstract virtual object DeserializeFromString(string contentType, Type type, string request);
    public abstract virtual object DeserializeFromStream(string contentType, Type type, Stream requestStream);
    public abstract virtual StreamDeserializerDelegate GetStreamDeserializer(string contentType);
    public abstract virtual StreamDeserializerDelegateAsync GetStreamDeserializerAsync(string contentType);
}
public interface ServiceStack.Web.IContentTypes {
    public Dictionary`2<string, string> ContentTypeFormats { get; }
    public abstract virtual string GetFormatContentType(string format);
    public abstract virtual Dictionary`2<string, string> get_ContentTypeFormats();
    public abstract virtual void Register(string contentType, StreamSerializerDelegate streamSerializer, StreamDeserializerDelegate streamDeserializer);
    public abstract virtual void RegisterAsync(string contentType, StreamSerializerDelegateAsync responseSerializer, StreamDeserializerDelegateAsync streamDeserializer);
    public abstract virtual void Remove(string contentType);
}
public interface ServiceStack.Web.IContentTypeWriter {
    public abstract virtual Byte[] SerializeToBytes(IRequest req, object response);
    public abstract virtual string SerializeToString(IRequest req, object response);
    public abstract virtual string SerializeToString(IRequest req, object response, string contentType);
    public abstract virtual Task SerializeToStreamAsync(IRequest requestContext, object response, Stream toStream);
    public abstract virtual StreamSerializerDelegateAsync GetStreamSerializerAsync(string contentType);
}
public interface ServiceStack.Web.IConvertRequest {
    public abstract virtual T Convert(T value);
}
public interface ServiceStack.Web.ICookies {
    public List`1<Cookie> Collection { get; }
    public abstract virtual List`1<Cookie> get_Collection();
    public abstract virtual void DeleteCookie(string cookieName);
    public abstract virtual void AddPermanentCookie(string cookieName, string cookieValue, Nullable`1<bool> secureOnly);
    public abstract virtual void AddSessionCookie(string cookieName, string cookieValue, Nullable`1<bool> secureOnly);
}
public interface ServiceStack.Web.IExpirable {
    public Nullable`1<DateTime> LastModified { get; }
    public abstract virtual Nullable`1<DateTime> get_LastModified();
}
public interface ServiceStack.Web.IHasHeaders {
    public Dictionary`2<string, string> Headers { get; }
    public abstract virtual Dictionary`2<string, string> get_Headers();
}
public interface ServiceStack.Web.IHasOptions {
    public IDictionary`2<string, string> Options { get; }
    public abstract virtual IDictionary`2<string, string> get_Options();
}
public interface ServiceStack.Web.IHasRequestFilter {
    public abstract virtual void RequestFilter(IRequest req, IResponse res, object requestDto);
}
public interface ServiceStack.Web.IHasRequestFilterAsync {
    public abstract virtual Task RequestFilterAsync(IRequest req, IResponse res, object requestDto);
}
public interface ServiceStack.Web.IHasResponseFilter {
    public abstract virtual void ResponseFilter(IRequest req, IResponse res, object response);
}
public interface ServiceStack.Web.IHasResponseFilterAsync {
    public abstract virtual Task ResponseFilterAsync(IRequest req, IResponse res, object response);
}
public interface ServiceStack.Web.IHttpError {
    public string Message { get; }
    public string ErrorCode { get; }
    public string StackTrace { get; }
    public abstract virtual string get_Message();
    public abstract virtual string get_ErrorCode();
    public abstract virtual string get_StackTrace();
}
public interface ServiceStack.Web.IHttpFile {
    public string Name { get; }
    public string FileName { get; }
    public long ContentLength { get; }
    public string ContentType { get; }
    public Stream InputStream { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_FileName();
    public abstract virtual long get_ContentLength();
    public abstract virtual string get_ContentType();
    public abstract virtual Stream get_InputStream();
}
public interface ServiceStack.Web.IHttpRequest {
    public IHttpResponse HttpResponse { get; }
    public string HttpMethod { get; }
    public string XForwardedFor { get; }
    public Nullable`1<int> XForwardedPort { get; }
    public string XForwardedProtocol { get; }
    public string XRealIp { get; }
    public string Accept { get; }
    public abstract virtual IHttpResponse get_HttpResponse();
    public abstract virtual string get_HttpMethod();
    public abstract virtual string get_XForwardedFor();
    public abstract virtual Nullable`1<int> get_XForwardedPort();
    public abstract virtual string get_XForwardedProtocol();
    public abstract virtual string get_XRealIp();
    public abstract virtual string get_Accept();
}
public interface ServiceStack.Web.IHttpResponse {
    public ICookies Cookies { get; }
    public abstract virtual ICookies get_Cookies();
    public abstract virtual void SetCookie(Cookie cookie);
    public abstract virtual void ClearCookies();
}
public interface ServiceStack.Web.IHttpResult {
    public int Status { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public List`1<Cookie> Cookies { get; }
    public object Response { get; public set; }
    public IContentTypeWriter ResponseFilter { get; public set; }
    public IRequest RequestContext { get; public set; }
    public int PaddingLength { get; public set; }
    public Func`1<IDisposable> ResultScope { get; public set; }
    public abstract virtual int get_Status();
    public abstract virtual void set_Status(int value);
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual void set_StatusCode(HttpStatusCode value);
    public abstract virtual string get_StatusDescription();
    public abstract virtual void set_StatusDescription(string value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual List`1<Cookie> get_Cookies();
    public abstract virtual object get_Response();
    public abstract virtual void set_Response(object value);
    public abstract virtual IContentTypeWriter get_ResponseFilter();
    public abstract virtual void set_ResponseFilter(IContentTypeWriter value);
    public abstract virtual IRequest get_RequestContext();
    public abstract virtual void set_RequestContext(IRequest value);
    public abstract virtual int get_PaddingLength();
    public abstract virtual void set_PaddingLength(int value);
    public abstract virtual Func`1<IDisposable> get_ResultScope();
    public abstract virtual void set_ResultScope(Func`1<IDisposable> value);
}
[ObsoleteAttribute("Use IPartialWriterAsync")]
public interface ServiceStack.Web.IPartialWriter {
    public bool IsPartialRequest { get; }
    public abstract virtual bool get_IsPartialRequest();
    public abstract virtual void WritePartialTo(IResponse response);
}
public interface ServiceStack.Web.IPartialWriterAsync {
    public bool IsPartialRequest { get; }
    public abstract virtual bool get_IsPartialRequest();
    public abstract virtual Task WritePartialToAsync(IResponse response, CancellationToken token);
}
public interface ServiceStack.Web.IRequest {
    public object OriginalRequest { get; }
    public IResponse Response { get; }
    public string OperationName { get; public set; }
    public string Verb { get; }
    public RequestAttributes RequestAttributes { get; public set; }
    public IRequestPreferences RequestPreferences { get; }
    public object Dto { get; public set; }
    public string ContentType { get; }
    public bool IsLocal { get; }
    public string UserAgent { get; }
    public IDictionary`2<string, Cookie> Cookies { get; }
    public string ResponseContentType { get; public set; }
    public bool HasExplicitResponseContentType { get; }
    public Dictionary`2<string, object> Items { get; }
    public NameValueCollection Headers { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection FormData { get; }
    public bool UseBufferedStream { get; public set; }
    public string RawUrl { get; }
    public string AbsoluteUri { get; }
    public string UserHostAddress { get; }
    public string RemoteIp { get; }
    public string Authorization { get; }
    public bool IsSecureConnection { get; }
    public String[] AcceptTypes { get; }
    public string PathInfo { get; }
    public string OriginalPathInfo { get; }
    public Stream InputStream { get; }
    public long ContentLength { get; }
    public IHttpFile[] Files { get; }
    public Uri UrlReferrer { get; }
    public abstract virtual object get_OriginalRequest();
    public abstract virtual IResponse get_Response();
    public abstract virtual string get_OperationName();
    public abstract virtual void set_OperationName(string value);
    public abstract virtual string get_Verb();
    public abstract virtual RequestAttributes get_RequestAttributes();
    public abstract virtual void set_RequestAttributes(RequestAttributes value);
    public abstract virtual IRequestPreferences get_RequestPreferences();
    public abstract virtual object get_Dto();
    public abstract virtual void set_Dto(object value);
    public abstract virtual string get_ContentType();
    public abstract virtual bool get_IsLocal();
    public abstract virtual string get_UserAgent();
    public abstract virtual IDictionary`2<string, Cookie> get_Cookies();
    public abstract virtual string get_ResponseContentType();
    public abstract virtual void set_ResponseContentType(string value);
    public abstract virtual bool get_HasExplicitResponseContentType();
    public abstract virtual Dictionary`2<string, object> get_Items();
    public abstract virtual NameValueCollection get_Headers();
    public abstract virtual NameValueCollection get_QueryString();
    public abstract virtual NameValueCollection get_FormData();
    public abstract virtual bool get_UseBufferedStream();
    public abstract virtual void set_UseBufferedStream(bool value);
    public abstract virtual string GetRawBody();
    public abstract virtual Task`1<string> GetRawBodyAsync();
    public abstract virtual string get_RawUrl();
    public abstract virtual string get_AbsoluteUri();
    public abstract virtual string get_UserHostAddress();
    public abstract virtual string get_RemoteIp();
    public abstract virtual string get_Authorization();
    public abstract virtual bool get_IsSecureConnection();
    public abstract virtual String[] get_AcceptTypes();
    public abstract virtual string get_PathInfo();
    public abstract virtual string get_OriginalPathInfo();
    public abstract virtual Stream get_InputStream();
    public abstract virtual long get_ContentLength();
    public abstract virtual IHttpFile[] get_Files();
    public abstract virtual Uri get_UrlReferrer();
}
public interface ServiceStack.Web.IRequestFilterBase {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual IRequestFilterBase Copy();
}
public interface ServiceStack.Web.IRequestLogger {
    public bool EnableSessionTracking { get; public set; }
    public bool EnableRequestBodyTracking { get; public set; }
    public Func`2<IRequest, bool> RequestBodyTrackingFilter { get; public set; }
    public bool EnableResponseTracking { get; public set; }
    public Func`2<IRequest, bool> ResponseTrackingFilter { get; public set; }
    public bool EnableErrorTracking { get; public set; }
    public bool LimitToServiceRequests { get; public set; }
    public Func`2<IRequest, bool> SkipLogging { get; public set; }
    public Type[] ExcludeRequestDtoTypes { get; public set; }
    public Type[] HideRequestBodyForRequestDtoTypes { get; public set; }
    public Type[] ExcludeResponseTypes { get; public set; }
    public Action`2<IRequest, RequestLogEntry> RequestLogFilter { get; public set; }
    public Func`2<object, bool> IgnoreFilter { get; public set; }
    public Func`1<DateTime> CurrentDateFn { get; public set; }
    public abstract virtual bool get_EnableSessionTracking();
    public abstract virtual void set_EnableSessionTracking(bool value);
    public abstract virtual bool get_EnableRequestBodyTracking();
    public abstract virtual void set_EnableRequestBodyTracking(bool value);
    public abstract virtual Func`2<IRequest, bool> get_RequestBodyTrackingFilter();
    public abstract virtual void set_RequestBodyTrackingFilter(Func`2<IRequest, bool> value);
    public abstract virtual bool get_EnableResponseTracking();
    public abstract virtual void set_EnableResponseTracking(bool value);
    public abstract virtual Func`2<IRequest, bool> get_ResponseTrackingFilter();
    public abstract virtual void set_ResponseTrackingFilter(Func`2<IRequest, bool> value);
    public abstract virtual bool get_EnableErrorTracking();
    public abstract virtual void set_EnableErrorTracking(bool value);
    public abstract virtual bool get_LimitToServiceRequests();
    public abstract virtual void set_LimitToServiceRequests(bool value);
    public abstract virtual Func`2<IRequest, bool> get_SkipLogging();
    public abstract virtual void set_SkipLogging(Func`2<IRequest, bool> value);
    public abstract virtual Type[] get_ExcludeRequestDtoTypes();
    public abstract virtual void set_ExcludeRequestDtoTypes(Type[] value);
    public abstract virtual Type[] get_HideRequestBodyForRequestDtoTypes();
    public abstract virtual void set_HideRequestBodyForRequestDtoTypes(Type[] value);
    public abstract virtual Type[] get_ExcludeResponseTypes();
    public abstract virtual void set_ExcludeResponseTypes(Type[] value);
    public abstract virtual Action`2<IRequest, RequestLogEntry> get_RequestLogFilter();
    public abstract virtual void set_RequestLogFilter(Action`2<IRequest, RequestLogEntry> value);
    public abstract virtual Func`2<object, bool> get_IgnoreFilter();
    public abstract virtual void set_IgnoreFilter(Func`2<object, bool> value);
    public abstract virtual Func`1<DateTime> get_CurrentDateFn();
    public abstract virtual void set_CurrentDateFn(Func`1<DateTime> value);
    public abstract virtual void Log(IRequest request, object requestDto, object response, TimeSpan elapsed);
    public abstract virtual List`1<RequestLogEntry> GetLatestLogs(Nullable`1<int> take);
}
public interface ServiceStack.Web.IRequestPreferences {
    public bool AcceptsBrotli { get; }
    public bool AcceptsDeflate { get; }
    public bool AcceptsGzip { get; }
    public abstract virtual bool get_AcceptsBrotli();
    public abstract virtual bool get_AcceptsDeflate();
    public abstract virtual bool get_AcceptsGzip();
}
public interface ServiceStack.Web.IRequiresRequest {
    public IRequest Request { get; public set; }
    public abstract virtual IRequest get_Request();
    public abstract virtual void set_Request(IRequest value);
}
public interface ServiceStack.Web.IRequiresRequestStream {
    public Stream RequestStream { get; public set; }
    public abstract virtual Stream get_RequestStream();
    public abstract virtual void set_RequestStream(Stream value);
}
public interface ServiceStack.Web.IResponse {
    public object OriginalResponse { get; }
    public IRequest Request { get; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public Stream OutputStream { get; }
    public object Dto { get; public set; }
    public bool UseBufferedStream { get; public set; }
    public bool IsClosed { get; }
    public bool KeepAlive { get; public set; }
    public bool HasStarted { get; }
    public Dictionary`2<string, object> Items { get; }
    public abstract virtual object get_OriginalResponse();
    public abstract virtual IRequest get_Request();
    public abstract virtual int get_StatusCode();
    public abstract virtual void set_StatusCode(int value);
    public abstract virtual string get_StatusDescription();
    public abstract virtual void set_StatusDescription(string value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual void AddHeader(string name, string value);
    public abstract virtual void RemoveHeader(string name);
    public abstract virtual string GetHeader(string name);
    public abstract virtual void Redirect(string url);
    public abstract virtual Stream get_OutputStream();
    public abstract virtual object get_Dto();
    public abstract virtual void set_Dto(object value);
    public abstract virtual bool get_UseBufferedStream();
    public abstract virtual void set_UseBufferedStream(bool value);
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync(CancellationToken token);
    public abstract virtual void End();
    public abstract virtual void Flush();
    public abstract virtual Task FlushAsync(CancellationToken token);
    public abstract virtual bool get_IsClosed();
    public abstract virtual void SetContentLength(long contentLength);
    public abstract virtual bool get_KeepAlive();
    public abstract virtual void set_KeepAlive(bool value);
    public abstract virtual bool get_HasStarted();
    public abstract virtual Dictionary`2<string, object> get_Items();
}
public interface ServiceStack.Web.IResponseFilterBase {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual IResponseFilterBase Copy();
}
public interface ServiceStack.Web.IRestPath {
    public bool IsWildCardPath { get; }
    public Type RequestType { get; }
    public abstract virtual bool get_IsWildCardPath();
    public abstract virtual Type get_RequestType();
    public abstract virtual object CreateRequest(string pathInfo, Dictionary`2<string, string> queryStringAndFormData, object fromInstance);
}
public interface ServiceStack.Web.IServiceController {
    public abstract virtual IRestPath GetRestPathForRequest(string httpMethod, string pathInfo);
    public abstract virtual object ExecuteMessage(IMessage mqMessage);
    public abstract virtual object ExecuteMessage(IMessage dto, IRequest request);
    public abstract virtual object Execute(object requestDto, IRequest request);
    public abstract virtual object Execute(object requestDto, IRequest request, bool applyFilters);
    public abstract virtual object Execute(object requestDto);
    public abstract virtual object Execute(IRequest request, bool applyFilters);
    public abstract virtual Task`1<object> GatewayExecuteAsync(object requestDto, IRequest req, bool applyFilters);
}
public interface ServiceStack.Web.IServiceExecutor {
    public abstract virtual Task`1<object> ExecuteAsync(object requestDto, IRequest request);
}
public interface ServiceStack.Web.IServiceGatewayFactory {
    public abstract virtual IServiceGateway GetServiceGateway(IRequest request);
}
public interface ServiceStack.Web.IServiceRoutes {
    public abstract virtual IServiceRoutes Add(string restPath);
    public abstract virtual IServiceRoutes Add(string restPath, string verbs);
    public abstract virtual IServiceRoutes Add(Type requestType, string restPath, string verbs);
    public abstract virtual IServiceRoutes Add(Type requestType, string restPath, string verbs, int priority);
    public abstract virtual IServiceRoutes Add(Type requestType, string restPath, string verbs, string summary, string notes);
    public abstract virtual IServiceRoutes Add(Type requestType, string restPath, string verbs, string summary, string notes, string matches);
}
public interface ServiceStack.Web.IServiceRunner {
    public abstract virtual object Process(IRequest requestContext, object instance, object request);
}
public interface ServiceStack.Web.IServiceRunner`1 {
    public abstract virtual void OnBeforeExecute(IRequest req, TRequest request, object service);
    public abstract virtual object OnAfterExecute(IRequest req, object response, object service);
    public abstract virtual Task`1<object> HandleExceptionAsync(IRequest req, TRequest requestDto, Exception ex, object instance);
    public abstract virtual Task`1<object> ExecuteAsync(IRequest req, object instance, TRequest requestDto);
    public abstract virtual object Execute(IRequest req, object instance, IMessage`1<TRequest> request);
    public abstract virtual object ExecuteOneWay(IRequest req, object instance, TRequest requestDto);
}
[ObsoleteAttribute("Use IStreamWriterAsync")]
public interface ServiceStack.Web.IStreamWriter {
    public abstract virtual void WriteTo(Stream responseStream);
}
public interface ServiceStack.Web.IStreamWriterAsync {
    public abstract virtual Task WriteToAsync(Stream responseStream, CancellationToken token);
}
public class ServiceStack.Web.StreamDeserializerDelegate : MulticastDelegate {
    public StreamDeserializerDelegate(object object, IntPtr method);
    public virtual object Invoke(Type type, Stream fromStream);
    public virtual IAsyncResult BeginInvoke(Type type, Stream fromStream, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class ServiceStack.Web.StreamDeserializerDelegateAsync : MulticastDelegate {
    public StreamDeserializerDelegateAsync(object object, IntPtr method);
    public virtual Task`1<object> Invoke(Type type, Stream fromStream);
    public virtual IAsyncResult BeginInvoke(Type type, Stream fromStream, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class ServiceStack.Web.StreamSerializerDelegate : MulticastDelegate {
    public StreamSerializerDelegate(object object, IntPtr method);
    public virtual void Invoke(IRequest req, object dto, Stream outputStream);
    public virtual IAsyncResult BeginInvoke(IRequest req, object dto, Stream outputStream, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ServiceStack.Web.StreamSerializerDelegateAsync : MulticastDelegate {
    public StreamSerializerDelegateAsync(object object, IntPtr method);
    public virtual Task Invoke(IRequest req, object dto, Stream outputStream);
    public virtual IAsyncResult BeginInvoke(IRequest req, object dto, Stream outputStream, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class ServiceStack.Web.StringDeserializerDelegate : MulticastDelegate {
    public StringDeserializerDelegate(object object, IntPtr method);
    public virtual object Invoke(string contents, Type type);
    public virtual IAsyncResult BeginInvoke(string contents, Type type, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class ServiceStack.Web.StringSerializerDelegate : MulticastDelegate {
    public StringSerializerDelegate(object object, IntPtr method);
    public virtual string Invoke(IRequest req, object dto);
    public virtual IAsyncResult BeginInvoke(IRequest req, object dto, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class ServiceStack.Web.TextDeserializerDelegate : MulticastDelegate {
    public TextDeserializerDelegate(object object, IntPtr method);
    public virtual object Invoke(Type type, string dto);
    public virtual IAsyncResult BeginInvoke(Type type, string dto, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class ServiceStack.Web.TextSerializerDelegate : MulticastDelegate {
    public TextSerializerDelegate(object object, IntPtr method);
    public virtual string Invoke(object dto);
    public virtual IAsyncResult BeginInvoke(object dto, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class ServiceStack.WorkerAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public WorkerAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ServiceStack.Workers : object {
    public static string AppDb;
    public static string JobsDb;
    public static string RequestsDb;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
