[AttributeUsageAttribute("4")]
public class ServiceStack.OrmLite.SqlServer.Converters.SqlJsonAttribute : Attribute {
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerBoolConverter : BoolConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerByteArrayConverter : ByteArrayConverter {
    public string ColumnDefinition { get; }
    public virtual string get_ColumnDefinition();
    public virtual string ToQuotedString(Type fieldType, object value);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerDateTime2Converter : SqlServerDateTimeConverter {
    private static string DateTimeFormat;
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerDateTimeConverter : DateTimeConverter {
    private static string DateTimeFormat;
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerDecimalConverter : DecimalConverter {
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerDoubleConverter : DoubleConverter {
    public string ColumnDefinition { get; }
    public virtual string get_ColumnDefinition();
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerFloatConverter : FloatConverter {
    public string ColumnDefinition { get; }
    public virtual string get_ColumnDefinition();
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerGuidConverter : GuidConverter {
    public string ColumnDefinition { get; }
    public virtual string get_ColumnDefinition();
    public virtual string ToQuotedString(Type fieldType, object value);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerJsonStringConverter : SqlServerStringConverter {
    public virtual object FromDbValue(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerRowVersionConverter : RowVersionConverter {
    public string ColumnDefinition { get; }
    public virtual string get_ColumnDefinition();
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerSByteConverter : SByteConverter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerStringConverter : StringConverter {
    public string MaxColumnDefinition { get; }
    public int MaxVarCharLength { get; }
    public virtual string get_MaxColumnDefinition();
    public virtual int get_MaxVarCharLength();
    public virtual string GetColumnDefinition(Nullable`1<int> stringLength);
    public virtual void InitDbParam(IDbDataParameter p, Type fieldType);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerTimeConverter : OrmLiteConverter {
    private static DateTime timeSpanOffset;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    public Nullable`1<int> Precision { get; public set; }
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    private static SqlServerTimeConverter();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<int> value);
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object ToDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerUInt16Converter : UInt16Converter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerUInt32Converter : UInt32Converter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.SqlServer.Converters.SqlServerUInt64Converter : UInt64Converter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2008OrmLiteDialectProvider : SqlServerOrmLiteDialectProvider {
    public static SqlServer2008OrmLiteDialectProvider Instance;
    private static SqlServer2008OrmLiteDialectProvider();
    public virtual string SqlConcat(IEnumerable`1<object> args);
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2012OrmLiteDialectProvider : SqlServerOrmLiteDialectProvider {
    public static SqlServer2012OrmLiteDialectProvider Instance;
    private static SqlServer2012OrmLiteDialectProvider();
    public virtual bool DoesSequenceExist(IDbCommand dbCmd, string sequence);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SqlServer.SqlServer2012OrmLiteDialectProvider/<DoesSequenceExistAsync>d__2")]
public virtual Task`1<bool> DoesSequenceExistAsync(IDbCommand dbCmd, string sequenceName, CancellationToken token);
    protected virtual string GetAutoIncrementDefinition(FieldDefinition fieldDef);
    protected virtual bool ShouldSkipInsert(FieldDefinition fieldDef);
    protected virtual bool SupportsSequences(FieldDefinition fieldDef);
    public virtual List`1<string> ToCreateSequenceStatements(Type tableType);
    public virtual string ToCreateSequenceStatement(Type tableType, string sequenceName);
    public virtual List`1<string> SequenceList(Type tableType);
    public virtual string ToSelectStatement(QueryType queryType, ModelDefinition modelDef, string selectExpression, string bodyExpression, string orderByExpression, Nullable`1<int> offset, Nullable`1<int> rows, ISet`1<string> tags);
    public virtual string GetColumnDefinition(FieldDefinition fieldDef);
    public virtual string ToCreateTableStatement(Type tableType);
    public virtual void AppendFieldCondition(StringBuilder sqlFilter, FieldDefinition fieldDef, IDbCommand cmd);
    public virtual void AppendNullFieldCondition(StringBuilder sqlFilter, FieldDefinition fieldDef);
    internal bool isSpatialField(FieldDefinition fieldDef);
    internal bool hasIsNullProperty(FieldDefinition fieldDef);
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2014OrmLiteDialectProvider : SqlServer2012OrmLiteDialectProvider {
    public static SqlServer2014OrmLiteDialectProvider Instance;
    private static SqlServer2014OrmLiteDialectProvider();
    public virtual string GetColumnDefinition(FieldDefinition fieldDef);
    public virtual string ToCreateTableStatement(Type tableType);
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2016Expression`1 : SqlServerExpression`1<T> {
    public SqlServer2016Expression`1(IOrmLiteDialectProvider dialectProvider);
    protected virtual object VisitSqlMethodCall(MethodCallExpression m);
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2016OrmLiteDialectProvider : SqlServer2014OrmLiteDialectProvider {
    public static SqlServer2016OrmLiteDialectProvider Instance;
    private static SqlServer2016OrmLiteDialectProvider();
    public virtual SqlExpression`1<T> SqlExpression();
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2017OrmLiteDialectProvider : SqlServer2016OrmLiteDialectProvider {
    public static SqlServer2017OrmLiteDialectProvider Instance;
    private static SqlServer2017OrmLiteDialectProvider();
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2019OrmLiteDialectProvider : SqlServer2017OrmLiteDialectProvider {
    public static SqlServer2019OrmLiteDialectProvider Instance;
    private static SqlServer2019OrmLiteDialectProvider();
}
public class ServiceStack.OrmLite.SqlServer.SqlServer2022OrmLiteDialectProvider : SqlServer2019OrmLiteDialectProvider {
    public static SqlServer2022OrmLiteDialectProvider Instance;
    private static SqlServer2022OrmLiteDialectProvider();
}
public class ServiceStack.OrmLite.SqlServer.SqlServerExpression`1 : SqlExpression`1<T> {
    public SqlServerExpression`1(IOrmLiteDialectProvider dialectProvider);
    public virtual void PrepareUpdateStatement(IDbCommand dbCmd, T item, bool excludeDefaults);
    public virtual string GetSubstringSql(object quotedColumn, int startIndex, Nullable`1<int> length);
    protected virtual PartialSqlString ToLengthPartialString(object arg);
    protected virtual void ConvertToPlaceholderAndParameter(Object& right);
    protected virtual void VisitFilter(string operand, object originalLeft, object originalRight, Object& left, Object& right);
    public virtual string ToDeleteRowStatement();
}
internal class ServiceStack.OrmLite.SqlServer.SqlServerExpressionUtils : object {
    internal static void PrepareSqlServerUpdateStatement(IDbCommand dbCmd, SqlExpression`1<T> q, T item, bool excludeDefaults);
}
public class ServiceStack.OrmLite.SqlServer.SqlServerOrmLiteDialectProvider : OrmLiteDialectProviderBase`1<SqlServerOrmLiteDialectProvider> {
    public static SqlServerOrmLiteDialectProvider Instance;
    private static string DefaultSchema;
    public string SqlRandom { get; }
    public bool SupportsAsync { get; }
    private static SqlServerOrmLiteDialectProvider();
    public virtual string GetQuotedValue(string paramValue);
    public virtual IDbConnection CreateConnection(string connectionString, Dictionary`2<string, string> options);
    public virtual SqlExpression`1<T> SqlExpression();
    public virtual IDbDataParameter CreateParam();
    public virtual string ToTableNamesStatement(string schema);
    public virtual string ToTableNamesWithRowCountsStatement(bool live, string schema);
    public virtual List`1<string> GetSchemas(IDbCommand dbCmd);
    public virtual Dictionary`2<string, List`1<string>> GetSchemaTables(IDbCommand dbCmd);
    public virtual bool DoesSchemaExist(IDbCommand dbCmd, string schemaName);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SqlServer.SqlServerOrmLiteDialectProvider/<DoesSchemaExistAsync>d__12")]
public virtual Task`1<bool> DoesSchemaExistAsync(IDbCommand dbCmd, string schemaName, CancellationToken token);
    public virtual string ToCreateSchemaStatement(string schemaName);
    public virtual string ToCreateSavePoint(string name);
    public virtual string ToReleaseSavePoint(string name);
    public virtual string ToRollbackSavePoint(string name);
    public virtual bool DoesTableExist(IDbCommand dbCmd, string tableName, string schema);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SqlServer.SqlServerOrmLiteDialectProvider/<DoesTableExistAsync>d__18")]
public virtual Task`1<bool> DoesTableExistAsync(IDbCommand dbCmd, string tableName, string schema, CancellationToken token);
    public virtual bool DoesColumnExist(IDbConnection db, string columnName, string tableName, string schema);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SqlServer.SqlServerOrmLiteDialectProvider/<DoesColumnExistAsync>d__20")]
public virtual Task`1<bool> DoesColumnExistAsync(IDbConnection db, string columnName, string tableName, string schema, CancellationToken token);
    public virtual string GetForeignKeyOnDeleteClause(ForeignKeyConstraint foreignKey);
    public virtual string GetForeignKeyOnUpdateClause(ForeignKeyConstraint foreignKey);
    public virtual string GetDropForeignKeyConstraints(ModelDefinition modelDef);
    public virtual string ToAddColumnStatement(string schema, string table, FieldDefinition fieldDef);
    public virtual string ToAlterColumnStatement(string schema, string table, FieldDefinition fieldDef);
    public virtual string ToChangeColumnNameStatement(string schema, string table, FieldDefinition fieldDef, string oldColumn);
    public virtual string ToRenameColumnStatement(string schema, string table, string oldColumn, string newColumn);
    protected virtual string GetAutoIncrementDefinition(FieldDefinition fieldDef);
    public virtual string GetAutoIdDefaultValue(FieldDefinition fieldDef);
    public virtual string GetColumnDefinition(FieldDefinition fieldDef);
    public virtual string ToDropConstraintStatement(string schema, string table, string constraintName);
    public virtual void BulkInsert(IDbConnection db, IEnumerable`1<T> objs, BulkInsertConfig config);
    public virtual string ToInsertRowStatement(IDbCommand cmd, object objWithProperties, ICollection`1<string> insertFields);
    protected string Sequence(string schema, string sequence);
    protected virtual bool ShouldSkipInsert(FieldDefinition fieldDef);
    protected virtual bool ShouldReturnOnInsert(ModelDefinition modelDef, FieldDefinition fieldDef);
    public virtual bool HasInsertReturnValues(ModelDefinition modelDef);
    protected virtual bool SupportsSequences(FieldDefinition fieldDef);
    public virtual void EnableIdentityInsert(IDbCommand cmd);
    public virtual Task EnableIdentityInsertAsync(IDbCommand cmd, CancellationToken token);
    public virtual void DisableIdentityInsert(IDbCommand cmd);
    public virtual Task DisableIdentityInsertAsync(IDbCommand cmd, CancellationToken token);
    public virtual void PrepareParameterizedInsertStatement(IDbCommand cmd, ICollection`1<string> insertFields, Func`2<FieldDefinition, bool> shouldInclude);
    public virtual void PrepareInsertRowStatement(IDbCommand dbCmd, Dictionary`2<string, object> args);
    public virtual string ToSelectStatement(QueryType queryType, ModelDefinition modelDef, string selectExpression, string bodyExpression, string orderByExpression, Nullable`1<int> offset, Nullable`1<int> rows, ISet`1<string> tags);
    protected static string SqlTop(string sql, int take, string selectType);
    public static string UseAliasesOrStripTablePrefixes(string selectExpression);
    public virtual string GetLoadChildrenSubSelect(SqlExpression`1<From> expr);
    public virtual string SqlCurrency(string fieldOrValue, string currencySymbol);
    public virtual string SqlBool(bool value);
    public virtual string SqlLimit(Nullable`1<int> offset, Nullable`1<int> rows);
    public virtual string SqlCast(object fieldOrValue, string castAs);
    public virtual string get_SqlRandom();
    public virtual void EnableForeignKeysCheck(IDbCommand cmd);
    public virtual Task EnableForeignKeysCheckAsync(IDbCommand cmd, CancellationToken token);
    public virtual void DisableForeignKeysCheck(IDbCommand cmd);
    public virtual Task DisableForeignKeysCheckAsync(IDbCommand cmd, CancellationToken token);
    protected DbConnection Unwrap(IDbConnection db);
    protected DbCommand Unwrap(IDbCommand cmd);
    protected DbDataReader Unwrap(IDataReader reader);
    public virtual bool get_SupportsAsync();
    public virtual Task OpenAsync(IDbConnection db, CancellationToken token);
    public virtual Task`1<IDataReader> ExecuteReaderAsync(IDbCommand cmd, CancellationToken token);
    public virtual Task`1<int> ExecuteNonQueryAsync(IDbCommand cmd, CancellationToken token);
    public virtual Task`1<object> ExecuteScalarAsync(IDbCommand cmd, CancellationToken token);
    public virtual Task`1<bool> ReadAsync(IDataReader reader, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SqlServer.SqlServerOrmLiteDialectProvider/<ReaderEach>d__69`1")]
public virtual Task`1<List`1<T>> ReaderEach(IDataReader reader, Func`1<T> fn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SqlServer.SqlServerOrmLiteDialectProvider/<ReaderEach>d__70`1")]
public virtual Task`1<Return> ReaderEach(IDataReader reader, Action fn, Return source, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SqlServer.SqlServerOrmLiteDialectProvider/<ReaderRead>d__71`1")]
public virtual Task`1<T> ReaderRead(IDataReader reader, Func`1<T> fn, CancellationToken token);
    public virtual void InitConnection(IDbConnection dbConn);
}
public class ServiceStack.OrmLite.SqlServer.SqlServerTableHint : object {
    public static JoinFormatDelegate ReadUncommitted;
    public static JoinFormatDelegate ReadCommitted;
    public static JoinFormatDelegate ReadPast;
    public static JoinFormatDelegate Serializable;
    public static JoinFormatDelegate RepeatableRead;
    public static JoinFormatDelegate NoLock;
    private static SqlServerTableHint();
}
public static class ServiceStack.OrmLite.SqlServer2008Dialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServer2008OrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServer2008OrmLiteDialectProvider get_Instance();
}
public static class ServiceStack.OrmLite.SqlServer2012Dialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServer2012OrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServer2012OrmLiteDialectProvider get_Instance();
}
public static class ServiceStack.OrmLite.SqlServer2014Dialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServer2014OrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServer2014OrmLiteDialectProvider get_Instance();
}
public static class ServiceStack.OrmLite.SqlServer2016Dialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServer2016OrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServer2016OrmLiteDialectProvider get_Instance();
}
public static class ServiceStack.OrmLite.SqlServer2017Dialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServer2017OrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServer2017OrmLiteDialectProvider get_Instance();
}
public static class ServiceStack.OrmLite.SqlServer2019Dialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServer2019OrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServer2019OrmLiteDialectProvider get_Instance();
}
public static class ServiceStack.OrmLite.SqlServer2022Dialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServer2022OrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServer2022OrmLiteDialectProvider get_Instance();
}
public static class ServiceStack.OrmLite.SqlServerDialect : object {
    public static IOrmLiteDialectProvider Provider { get; }
    public static SqlServerOrmLiteDialectProvider Instance { get; }
    public static IOrmLiteDialectProvider get_Provider();
    public static SqlServerOrmLiteDialectProvider get_Instance();
}
