[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class ServiceStack.OrmLite.AliasNamingStrategy : OrmLiteNamingStrategyBase {
    public Dictionary`2<string, string> TableAliases;
    public Dictionary`2<string, string> ColumnAliases;
    [CompilerGeneratedAttribute]
private INamingStrategy <UseNamingStrategy>k__BackingField;
    public INamingStrategy UseNamingStrategy { get; public set; }
    [CompilerGeneratedAttribute]
public INamingStrategy get_UseNamingStrategy();
    [CompilerGeneratedAttribute]
public void set_UseNamingStrategy(INamingStrategy value);
    public virtual string GetTableName(string name);
    public virtual string GetColumnName(string name);
}
public class ServiceStack.OrmLite.BulkInsertConfig : object {
    [CompilerGeneratedAttribute]
private int <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private BulkInsertMode <Mode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<string> <InsertFields>k__BackingField;
    public int BatchSize { get; public set; }
    public BulkInsertMode Mode { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> InsertFields { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BatchSize();
    [CompilerGeneratedAttribute]
public void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
public BulkInsertMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(BulkInsertMode value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_InsertFields();
    [CompilerGeneratedAttribute]
public void set_InsertFields(ICollection`1<string> value);
}
public enum ServiceStack.OrmLite.BulkInsertMode : Enum {
    public int value__;
    public static BulkInsertMode Optimized;
    public static BulkInsertMode Csv;
    public static BulkInsertMode Sql;
}
public class ServiceStack.OrmLite.CaptureSqlFilter : OrmLiteResultsFilter {
    [CompilerGeneratedAttribute]
private List`1<SqlCommandDetails> <SqlCommandHistory>k__BackingField;
    public List`1<SqlCommandDetails> SqlCommandHistory { get; public set; }
    public List`1<string> SqlStatements { get; }
    private void CaptureSqlCommand(IDbCommand command);
    [CompilerGeneratedAttribute]
public List`1<SqlCommandDetails> get_SqlCommandHistory();
    [CompilerGeneratedAttribute]
public void set_SqlCommandHistory(List`1<SqlCommandDetails> value);
    public List`1<string> get_SqlStatements();
}
public class ServiceStack.OrmLite.ColumnSchema : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumericPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumericScale>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseCatalogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDBNull>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAliased>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLong>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProviderSpecificDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollationType>k__BackingField;
    public string ColumnName { get; public set; }
    public int ColumnOrdinal { get; public set; }
    public int ColumnSize { get; public set; }
    public int NumericPrecision { get; public set; }
    public int NumericScale { get; public set; }
    public bool IsUnique { get; public set; }
    public bool IsKey { get; public set; }
    public string BaseServerName { get; public set; }
    public string BaseCatalogName { get; public set; }
    public string BaseColumnName { get; public set; }
    public string BaseSchemaName { get; public set; }
    public string BaseTableName { get; public set; }
    public Type DataType { get; public set; }
    public bool AllowDBNull { get; public set; }
    public int ProviderType { get; public set; }
    public bool IsAliased { get; public set; }
    public bool IsExpression { get; public set; }
    public bool IsAutoIncrement { get; public set; }
    public bool IsRowVersion { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsLong { get; public set; }
    public bool IsReadOnly { get; public set; }
    public Type ProviderSpecificDataType { get; public set; }
    public object DefaultValue { get; public set; }
    public string DataTypeName { get; public set; }
    public string CollationType { get; public set; }
    public string ColumnDefinition { get; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public int get_ColumnOrdinal();
    [CompilerGeneratedAttribute]
public void set_ColumnOrdinal(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnSize();
    [CompilerGeneratedAttribute]
public void set_ColumnSize(int value);
    [CompilerGeneratedAttribute]
public int get_NumericPrecision();
    [CompilerGeneratedAttribute]
public void set_NumericPrecision(int value);
    [CompilerGeneratedAttribute]
public int get_NumericScale();
    [CompilerGeneratedAttribute]
public void set_NumericScale(int value);
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
public void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsKey();
    [CompilerGeneratedAttribute]
public void set_IsKey(bool value);
    [CompilerGeneratedAttribute]
public string get_BaseServerName();
    [CompilerGeneratedAttribute]
public void set_BaseServerName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseCatalogName();
    [CompilerGeneratedAttribute]
public void set_BaseCatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseColumnName();
    [CompilerGeneratedAttribute]
public void set_BaseColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseSchemaName();
    [CompilerGeneratedAttribute]
public void set_BaseSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseTableName();
    [CompilerGeneratedAttribute]
public void set_BaseTableName(string value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(Type value);
    [CompilerGeneratedAttribute]
public bool get_AllowDBNull();
    [CompilerGeneratedAttribute]
public void set_AllowDBNull(bool value);
    [CompilerGeneratedAttribute]
public int get_ProviderType();
    [CompilerGeneratedAttribute]
public void set_ProviderType(int value);
    [CompilerGeneratedAttribute]
public bool get_IsAliased();
    [CompilerGeneratedAttribute]
public void set_IsAliased(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExpression();
    [CompilerGeneratedAttribute]
public void set_IsExpression(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoIncrement();
    [CompilerGeneratedAttribute]
public void set_IsAutoIncrement(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRowVersion();
    [CompilerGeneratedAttribute]
public void set_IsRowVersion(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLong();
    [CompilerGeneratedAttribute]
public void set_IsLong(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public Type get_ProviderSpecificDataType();
    [CompilerGeneratedAttribute]
public void set_ProviderSpecificDataType(Type value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_CollationType();
    [CompilerGeneratedAttribute]
public void set_CollationType(string value);
    public virtual string ToString();
    public string get_ColumnDefinition();
    private StringBuilder AppendDefinition(StringBuilder sql);
}
public class ServiceStack.OrmLite.ConflictResolution : object {
    public static string Ignore;
}
public class ServiceStack.OrmLite.Converters.BoolAsIntConverter : BoolConverter {
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual string ToQuotedString(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.BoolConverter : NativeValueOrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.ByteArrayConverter : OrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.Converters.ByteConverter : IntegerConverter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.Converters.CharArrayConverter : StringConverter {
    public CharArrayConverter(int stringLength);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.CharConverter : StringConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual string GetColumnDefinition(Nullable`1<int> stringLength);
    public virtual object FromDbValue(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.DateOnlyConverter : DateTimeConverter {
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(object value);
}
public class ServiceStack.OrmLite.Converters.DateTimeConverter : OrmLiteConverter {
    [CompilerGeneratedAttribute]
private DateTimeKind <DateStyle>k__BackingField;
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public DateTimeKind DateStyle { get; public set; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateStyle();
    [CompilerGeneratedAttribute]
public void set_DateStyle(DateTimeKind value);
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual string DateTimeFmt(DateTime dateTime, string dateTimeFormat);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
    public virtual object FromDbValue(object value);
}
public class ServiceStack.OrmLite.Converters.DateTimeOffsetConverter : OrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.DecimalConverter : FloatConverter {
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public int Precision { get; public set; }
    public int Scale { get; public set; }
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public DecimalConverter(int precision, int scale);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(int value);
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual string GetColumnDefinition(Nullable`1<int> precision, Nullable`1<int> scale);
}
public class ServiceStack.OrmLite.Converters.DoubleConverter : FloatConverter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.Converters.EnumConverter : StringConverter {
    private static Dictionary`2<Type, EnumKind> enumTypeCache;
    private static ConcurrentDictionary`2<Type, bool> intEnums;
    private static EnumConverter();
    public static EnumKind GetEnumKind(Type enumType);
    public virtual void InitDbParam(IDbDataParameter p, Type fieldType);
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
    public static char ToCharValue(object value);
    public static bool IsIntEnum(Type fieldType);
    public static bool HasEnumMembers(Type enumType);
    public virtual object FromDbValue(Type fieldType, object value);
}
public enum ServiceStack.OrmLite.Converters.EnumKind : Enum {
    public int value__;
    public static EnumKind String;
    public static EnumKind Int;
    public static EnumKind Char;
    public static EnumKind EnumMember;
}
public class ServiceStack.OrmLite.Converters.FloatConverter : NativeValueOrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
    public virtual string ToQuotedString(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.GuidConverter : OrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.Int16Converter : IntegerConverter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.Converters.Int32Converter : IntegerConverter {
}
public class ServiceStack.OrmLite.Converters.Int64Converter : IntegerConverter {
    public DbType DbType { get; }
    public string ColumnDefinition { get; }
    public virtual DbType get_DbType();
    public virtual string get_ColumnDefinition();
}
public abstract class ServiceStack.OrmLite.Converters.IntegerConverter : NativeValueOrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.ReferenceTypeConverter : StringConverter {
    public string ColumnDefinition { get; }
    public string MaxColumnDefinition { get; }
    public virtual string get_ColumnDefinition();
    public virtual string get_MaxColumnDefinition();
    public virtual string GetColumnDefinition(Nullable`1<int> stringLength);
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.RowVersionConverter : OrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.SByteConverter : IntegerConverter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.Converters.StringConverter : OrmLiteConverter {
    [CompilerGeneratedAttribute]
private bool <UseUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StringLength>k__BackingField;
    protected string maxColumnDefinition;
    public bool UseUnicode { get; public set; }
    public int StringLength { get; public set; }
    public int MaxVarCharLength { get; }
    public string MaxColumnDefinition { get; public set; }
    public string ColumnDefinition { get; }
    public StringConverter(int stringLength);
    [CompilerGeneratedAttribute]
public bool get_UseUnicode();
    [CompilerGeneratedAttribute]
public void set_UseUnicode(bool value);
    [CompilerGeneratedAttribute]
public int get_StringLength();
    [CompilerGeneratedAttribute]
public void set_StringLength(int value);
    public virtual int get_MaxVarCharLength();
    public virtual string get_MaxColumnDefinition();
    public virtual void set_MaxColumnDefinition(string value);
    public virtual string get_ColumnDefinition();
    public virtual string GetColumnDefinition(Nullable`1<int> stringLength);
    public virtual void InitDbParam(IDbDataParameter p, Type fieldType);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.TimeOnlyConverter : TimeSpanAsIntConverter {
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter : OrmLiteConverter {
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    public virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
public class ServiceStack.OrmLite.Converters.UInt16Converter : IntegerConverter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.Converters.UInt32Converter : IntegerConverter {
    public DbType DbType { get; }
    public virtual DbType get_DbType();
}
public class ServiceStack.OrmLite.Converters.UInt64Converter : IntegerConverter {
    public DbType DbType { get; }
    public string ColumnDefinition { get; }
    public virtual DbType get_DbType();
    public virtual string get_ColumnDefinition();
}
public class ServiceStack.OrmLite.Converters.ValueTypeConverter : StringConverter {
    public string ColumnDefinition { get; }
    public string MaxColumnDefinition { get; }
    public virtual string get_ColumnDefinition();
    public virtual string get_MaxColumnDefinition();
    public virtual string GetColumnDefinition(Nullable`1<int> stringLength);
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
}
internal class ServiceStack.OrmLite.Dapper.BasicWrappedReader : object {
    private IDataReader _reader;
    private IDbCommand _cmd;
    private IDataReader ServiceStack.OrmLite.Dapper.IWrappedDataReader.Reader { get; }
    private IDbCommand ServiceStack.OrmLite.Dapper.IWrappedDataReader.Command { get; }
    private int System.Data.IDataReader.Depth { get; }
    private bool System.Data.IDataReader.IsClosed { get; }
    private int System.Data.IDataReader.RecordsAffected { get; }
    private int System.Data.IDataRecord.FieldCount { get; }
    private object System.Data.IDataRecord.Item { get; }
    private object System.Data.IDataRecord.Item { get; }
    public BasicWrappedReader(IDbCommand cmd, IDataReader reader);
    private sealed virtual override IDataReader ServiceStack.OrmLite.Dapper.IWrappedDataReader.get_Reader();
    private sealed virtual override IDbCommand ServiceStack.OrmLite.Dapper.IWrappedDataReader.get_Command();
    private sealed virtual override void System.Data.IDataReader.Close();
    private sealed virtual override int System.Data.IDataReader.get_Depth();
    private sealed virtual override DataTable System.Data.IDataReader.GetSchemaTable();
    private sealed virtual override bool System.Data.IDataReader.get_IsClosed();
    private sealed virtual override bool System.Data.IDataReader.NextResult();
    private sealed virtual override bool System.Data.IDataReader.Read();
    private sealed virtual override int System.Data.IDataReader.get_RecordsAffected();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override int System.Data.IDataRecord.get_FieldCount();
    private sealed virtual override bool System.Data.IDataRecord.GetBoolean(int i);
    private sealed virtual override byte System.Data.IDataRecord.GetByte(int i);
    private sealed virtual override long System.Data.IDataRecord.GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    private sealed virtual override char System.Data.IDataRecord.GetChar(int i);
    private sealed virtual override long System.Data.IDataRecord.GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int i);
    private sealed virtual override string System.Data.IDataRecord.GetDataTypeName(int i);
    private sealed virtual override DateTime System.Data.IDataRecord.GetDateTime(int i);
    private sealed virtual override decimal System.Data.IDataRecord.GetDecimal(int i);
    private sealed virtual override double System.Data.IDataRecord.GetDouble(int i);
    private sealed virtual override Type System.Data.IDataRecord.GetFieldType(int i);
    private sealed virtual override float System.Data.IDataRecord.GetFloat(int i);
    private sealed virtual override Guid System.Data.IDataRecord.GetGuid(int i);
    private sealed virtual override short System.Data.IDataRecord.GetInt16(int i);
    private sealed virtual override int System.Data.IDataRecord.GetInt32(int i);
    private sealed virtual override long System.Data.IDataRecord.GetInt64(int i);
    private sealed virtual override string System.Data.IDataRecord.GetName(int i);
    private sealed virtual override int System.Data.IDataRecord.GetOrdinal(string name);
    private sealed virtual override string System.Data.IDataRecord.GetString(int i);
    private sealed virtual override object System.Data.IDataRecord.GetValue(int i);
    private sealed virtual override int System.Data.IDataRecord.GetValues(Object[] values);
    private sealed virtual override bool System.Data.IDataRecord.IsDBNull(int i);
    private sealed virtual override object System.Data.IDataRecord.get_Item(string name);
    private sealed virtual override object System.Data.IDataRecord.get_Item(int i);
}
public class ServiceStack.OrmLite.Dapper.CommandDefinition : ValueType {
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CommandType> <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    private static Link`2<Type, Action`1<IDbCommand>> commandInitCache;
    public string CommandText { get; }
    public object Parameters { get; }
    public IDbTransaction Transaction { get; }
    public Nullable`1<int> CommandTimeout { get; }
    public Nullable`1<CommandType> CommandType { get; }
    public bool Buffered { get; }
    internal bool AddToCache { get; }
    public CommandFlags Flags { get; }
    public bool Pipelined { get; }
    public CancellationToken CancellationToken { get; }
    public CommandDefinition(string commandText, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType, CommandFlags flags, CancellationToken cancellationToken);
    private CommandDefinition(object parameters);
    internal static CommandDefinition ForCallback(object parameters);
    internal void OnCompleted();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CommandText();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Parameters();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_CommandTimeout();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<CommandType> get_CommandType();
    public bool get_Buffered();
    internal bool get_AddToCache();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CommandFlags get_Flags();
    public bool get_Pipelined();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    internal IDbCommand SetupCommand(IDbConnection cnn, Action`2<IDbCommand, object> paramReader);
    private static Action`1<IDbCommand> GetInit(Type commandType);
    private static MethodInfo GetBasicPropertySetter(Type declaringType, string name, Type expectedType);
}
[FlagsAttribute]
public enum ServiceStack.OrmLite.Dapper.CommandFlags : Enum {
    public int value__;
    public static CommandFlags None;
    public static CommandFlags Buffered;
    public static CommandFlags Pipelined;
    public static CommandFlags NoCache;
}
public class ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap : object {
    private Type _type;
    private Func`3<Type, string, PropertyInfo> _propertySelector;
    public CustomPropertyTypeMap(Type type, Func`3<Type, string, PropertyInfo> propertySelector);
    public sealed virtual ConstructorInfo FindConstructor(String[] names, Type[] types);
    public sealed virtual ConstructorInfo FindExplicitConstructor();
    public sealed virtual IMemberMap GetConstructorParameter(ConstructorInfo constructor, string columnName);
    public sealed virtual IMemberMap GetMember(string columnName);
}
internal class ServiceStack.OrmLite.Dapper.DataTableHandler : object {
    public sealed virtual object Parse(Type destinationType, object value);
    public sealed virtual void SetValue(IDbDataParameter parameter, object value);
}
public class ServiceStack.OrmLite.Dapper.DbString : object {
    [CompilerGeneratedAttribute]
private static bool <IsAnsiDefault>k__BackingField;
    public static int DefaultLength;
    [CompilerGeneratedAttribute]
private bool <IsAnsi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static bool IsAnsiDefault { get; public set; }
    public bool IsAnsi { get; public set; }
    public bool IsFixedLength { get; public set; }
    public int Length { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_IsAnsiDefault();
    [CompilerGeneratedAttribute]
public static void set_IsAnsiDefault(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAnsi();
    [CompilerGeneratedAttribute]
public void set_IsAnsi(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFixedLength();
    [CompilerGeneratedAttribute]
public void set_IsFixedLength(bool value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public sealed virtual void AddParameter(IDbCommand command, string name);
}
[DefaultMemberAttribute("Item")]
internal class ServiceStack.OrmLite.Dapper.DbWrappedReader : DbDataReader {
    private DbDataReader _reader;
    private IDbCommand _cmd;
    private IDataReader ServiceStack.OrmLite.Dapper.IWrappedDataReader.Reader { get; }
    private IDbCommand ServiceStack.OrmLite.Dapper.IWrappedDataReader.Command { get; }
    public bool HasRows { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int VisibleFieldCount { get; }
    public DbWrappedReader(IDbCommand cmd, DbDataReader reader);
    private sealed virtual override IDataReader ServiceStack.OrmLite.Dapper.IWrappedDataReader.get_Reader();
    private sealed virtual override IDbCommand ServiceStack.OrmLite.Dapper.IWrappedDataReader.get_Command();
    public virtual bool get_HasRows();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual object InitializeLifetimeService();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_RecordsAffected();
    protected virtual void Dispose(bool disposing);
    public virtual int get_FieldCount();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual int get_VisibleFieldCount();
    protected virtual DbDataReader GetDbDataReader(int ordinal);
}
public class ServiceStack.OrmLite.Dapper.DefaultTypeMap : object {
    private List`1<FieldInfo> _fields;
    private Type _type;
    [CompilerGeneratedAttribute]
private static bool <MatchNamesWithUnderscores>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PropertyInfo> <Properties>k__BackingField;
    public static bool MatchNamesWithUnderscores { get; public set; }
    public List`1<PropertyInfo> Properties { get; }
    public DefaultTypeMap(Type type);
    internal static MethodInfo GetPropertySetter(PropertyInfo propertyInfo, Type type);
    internal static List`1<PropertyInfo> GetSettableProps(Type t);
    internal static List`1<FieldInfo> GetSettableFields(Type t);
    public sealed virtual ConstructorInfo FindConstructor(String[] names, Type[] types);
    public sealed virtual ConstructorInfo FindExplicitConstructor();
    public sealed virtual IMemberMap GetConstructorParameter(ConstructorInfo constructor, string columnName);
    public sealed virtual IMemberMap GetMember(string columnName);
    [CompilerGeneratedAttribute]
public static bool get_MatchNamesWithUnderscores();
    [CompilerGeneratedAttribute]
public static void set_MatchNamesWithUnderscores(bool value);
    [CompilerGeneratedAttribute]
public List`1<PropertyInfo> get_Properties();
}
[DefaultMemberAttribute("Item")]
internal class ServiceStack.OrmLite.Dapper.DisposedReader : DbDataReader {
    internal static DisposedReader Instance;
    public int Depth { get; }
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public bool HasRows { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    private static DisposedReader();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_IsClosed();
    public virtual bool get_HasRows();
    public virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    private static T ThrowDisposed();
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.DisposedReader/<ThrowDisposedAsync>d__15`1")]
private static Task`1<T> ThrowDisposedAsync();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual object InitializeLifetimeService();
    protected virtual void Dispose(bool disposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual float GetFloat(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual Guid GetGuid(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual Stream GetStream(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
}
public class ServiceStack.OrmLite.Dapper.DynamicParameters : object {
    internal static DbType EnumerableMultiParameter;
    private static Dictionary`2<Identity, Action`2<IDbCommand, object>> paramReaderCache;
    private Dictionary`2<string, ParamInfo> parameters;
    private List`1<object> templates;
    [CompilerGeneratedAttribute]
private bool <RemoveUnused>k__BackingField;
    private List`1<Action> outputCallbacks;
    private object ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup.Item { get; }
    public bool RemoveUnused { get; public set; }
    public IEnumerable`1<string> ParameterNames { get; }
    public DynamicParameters(object template);
    private static DynamicParameters();
    private sealed virtual override object ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup.get_Item(string name);
    public void AddDynamicParams(object param);
    public void Add(string name, object value, Nullable`1<DbType> dbType, Nullable`1<ParameterDirection> direction, Nullable`1<int> size);
    public void Add(string name, object value, Nullable`1<DbType> dbType, Nullable`1<ParameterDirection> direction, Nullable`1<int> size, Nullable`1<byte> precision, Nullable`1<byte> scale);
    private static string Clean(string name);
    private sealed virtual override void ServiceStack.OrmLite.Dapper.SqlMapper.IDynamicParameters.AddParameters(IDbCommand command, Identity identity);
    [CompilerGeneratedAttribute]
public bool get_RemoveUnused();
    [CompilerGeneratedAttribute]
public void set_RemoveUnused(bool value);
    protected void AddParameters(IDbCommand command, Identity identity);
    public IEnumerable`1<string> get_ParameterNames();
    public T Get(string name);
    public DynamicParameters Output(T target, Expression`1<Func`2<T, object>> expression, Nullable`1<DbType> dbType, Nullable`1<int> size);
    private sealed virtual override void ServiceStack.OrmLite.Dapper.SqlMapper.IParameterCallbacks.OnCompleted();
}
[AttributeUsageAttribute("32")]
public class ServiceStack.OrmLite.Dapper.ExplicitConstructorAttribute : Attribute {
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.Dapper.Extensions : object {
    [ExtensionAttribute]
internal static Task`1<TTo> CastResult(Task`1<TFrom> task);
    private static void OnTaskCompleted(Task`1<TFrom> completedTask, object state);
}
internal class ServiceStack.OrmLite.Dapper.FeatureSupport : object {
    private static FeatureSupport Default;
    private static FeatureSupport Postgres;
    [CompilerGeneratedAttribute]
private bool <Arrays>k__BackingField;
    public bool Arrays { get; }
    private FeatureSupport(bool arrays);
    private static FeatureSupport();
    public static FeatureSupport Get(IDbConnection connection);
    [CompilerGeneratedAttribute]
public bool get_Arrays();
}
public interface ServiceStack.OrmLite.Dapper.IWrappedDataReader {
    public IDataReader Reader { get; }
    public IDbCommand Command { get; }
    public abstract virtual IDataReader get_Reader();
    public abstract virtual IDbCommand get_Command();
}
internal class ServiceStack.OrmLite.Dapper.SimpleMemberMap : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldInfo <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <Parameter>k__BackingField;
    public string ColumnName { get; }
    public Type MemberType { get; }
    public PropertyInfo Property { get; }
    public FieldInfo Field { get; }
    public ParameterInfo Parameter { get; }
    public SimpleMemberMap(string columnName, PropertyInfo property);
    public SimpleMemberMap(string columnName, FieldInfo field);
    public SimpleMemberMap(string columnName, ParameterInfo parameter);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ColumnName();
    public sealed virtual Type get_MemberType();
    [CompilerGeneratedAttribute]
public sealed virtual PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual FieldInfo get_Field();
    [CompilerGeneratedAttribute]
public sealed virtual ParameterInfo get_Parameter();
}
internal class ServiceStack.OrmLite.Dapper.SqlDataRecordHandler`1 : object {
    public sealed virtual object Parse(Type destinationType, object value);
    public sealed virtual void SetValue(IDbDataParameter parameter, object value);
}
internal class ServiceStack.OrmLite.Dapper.SqlDataRecordListTVPParameter`1 : object {
    private IEnumerable`1<T> data;
    private string typeName;
    public SqlDataRecordListTVPParameter`1(IEnumerable`1<T> data, string typeName);
    private sealed virtual override void ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter.AddParameter(IDbCommand command, string name);
    internal static void Set(IDbDataParameter parameter, IEnumerable`1<T> data, string typeName);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.Dapper.SqlMapper : object {
    [CompilerGeneratedAttribute]
private static EventHandler QueryCachePurged;
    private static ConcurrentDictionary`2<Identity, CacheInfo> _queryCache;
    private static int COLLECT_PER_ITEMS;
    private static int COLLECT_HIT_COUNT_MIN;
    private static int collect;
    private static Dictionary`2<Type, DbType> typeMap;
    private static Dictionary`2<Type, ITypeHandler> typeHandlers;
    internal static string LinqBinary;
    private static string ObsoleteInternalUsageOnly;
    private static Int32[] ErrTwoRows;
    private static Int32[] ErrZeroRows;
    private static Regex smellsLikeOleDb;
    private static Regex literalTokens;
    private static Regex pseudoPositional;
    internal static MethodInfo format;
    private static Dictionary`2<TypeCode, MethodInfo> toStrings;
    private static MethodInfo StringReplace;
    private static MethodInfo InvariantCulture;
    private static MethodInfo enumParse;
    private static MethodInfo getItem;
    public static Func`2<Type, ITypeMap> TypeMapProvider;
    private static Hashtable _typeMaps;
    private static IEqualityComparer`1<string> connectionStringComparer;
    private static string DataTableTypeNameKey;
    [ThreadStaticAttribute]
private static StringBuilder perThreadStringBuilderCache;
    public static IEqualityComparer`1<string> ConnectionStringComparer { get; public set; }
    private static SqlMapper();
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<T> QueryFirstAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<T> QueryFirstOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<T> QuerySingleAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<T> QuerySingleOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QueryFirstAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QueryFirstOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QuerySingleAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QuerySingleOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    private static Task`1<DbDataReader> ExecuteReaderWithFlagsFallbackAsync(DbCommand cmd, bool wasClosed, CommandBehavior behavior, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static Task TryOpenAsync(IDbConnection cnn, CancellationToken cancel);
    [ExtensionAttribute]
private static DbCommand TrySetupAsyncCommand(CommandDefinition command, IDbConnection cnn, Action`2<IDbCommand, object> paramReader);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<QueryAsync>d__33`1")]
[ExtensionAttribute]
private static Task`1<IEnumerable`1<T>> QueryAsync(IDbConnection cnn, Type effectiveType, CommandDefinition command);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<QueryRowAsync>d__34`1")]
[ExtensionAttribute]
private static Task`1<T> QueryRowAsync(IDbConnection cnn, Row row, Type effectiveType, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IDbConnection cnn, CommandDefinition command);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<ExecuteMultiImplAsync>d__38")]
private static Task`1<int> ExecuteMultiImplAsync(IDbConnection cnn, CommandDefinition command, IEnumerable multiExec);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<ExecuteImplAsync>d__39")]
private static Task`1<int> ExecuteImplAsync(IDbConnection cnn, CommandDefinition command, object param);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`3<TFirst, TSecond, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`3<TFirst, TSecond, TReturn> map, string splitOn);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`4<TFirst, TSecond, TThird, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`4<TFirst, TSecond, TThird, TReturn> map, string splitOn);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`5<TFirst, TSecond, TThird, TFourth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`5<TFirst, TSecond, TThird, TFourth, TReturn> map, string splitOn);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`6<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`6<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, string splitOn);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, string splitOn);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, string splitOn);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<MultiMapAsync>d__52`8")]
[ExtensionAttribute]
private static Task`1<IEnumerable`1<TReturn>> MultiMapAsync(IDbConnection cnn, CommandDefinition command, Delegate map, string splitOn);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Type[] types, Func`2<Object[], TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<MultiMapAsync>d__54`1")]
[ExtensionAttribute]
private static Task`1<IEnumerable`1<TReturn>> MultiMapAsync(IDbConnection cnn, CommandDefinition command, Type[] types, Func`2<Object[], TReturn> map, string splitOn);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<ExecuteReaderSync>d__55`1")]
private static IEnumerable`1<T> ExecuteReaderSync(IDataReader reader, Func`2<IDataReader, object> func, object parameters);
    [ExtensionAttribute]
public static Task`1<GridReader> QueryMultipleAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<QueryMultipleAsync>d__57")]
[ExtensionAttribute]
public static Task`1<GridReader> QueryMultipleAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IDataReader> ExecuteReaderAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IDataReader> ExecuteReaderAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IDataReader> ExecuteReaderAsync(IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<ExecuteWrappedReaderImplAsync>d__64")]
private static Task`1<DbDataReader> ExecuteWrappedReaderImplAsync(IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IDbConnection cnn, CommandDefinition command);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<ExecuteScalarImplAsync>d__69`1")]
private static Task`1<T> ExecuteScalarImplAsync(IDbConnection cnn, CommandDefinition command);
    private static int GetColumnHash(IDataReader reader, int startBound, int length);
    [CompilerGeneratedAttribute]
public static void add_QueryCachePurged(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_QueryCachePurged(EventHandler value);
    private static void OnQueryCachePurged();
    private static void SetQueryCache(Identity key, CacheInfo value);
    private static void CollectCacheGarbage();
    private static bool TryGetQueryCache(Identity key, CacheInfo& value);
    public static void PurgeQueryCache();
    private static void PurgeQueryCacheByType(Type type);
    public static int GetCachedSQLCount();
    public static IEnumerable`1<Tuple`3<string, string, int>> GetCachedSQL(int ignoreHitCountAbove);
    public static IEnumerable`1<Tuple`2<int, int>> GetHashCollissions();
    public static void ResetTypeHandlers();
    private static void ResetTypeHandlers(bool clone);
    public static void AddTypeMap(Type type, DbType dbType);
    public static void RemoveTypeMap(Type type);
    public static void AddTypeHandler(Type type, ITypeHandler handler);
    internal static bool HasTypeHandler(Type type);
    public static void AddTypeHandlerImpl(Type type, ITypeHandler handler, bool clone);
    public static void AddTypeHandler(TypeHandler`1<T> handler);
    [ObsoleteAttribute("This method is for internal use only", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DbType GetDbType(object value);
    [ObsoleteAttribute("This method is for internal use only", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DbType LookupDbType(Type type, string name, bool demand, ITypeHandler& handler);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static int Execute(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static int Execute(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static object ExecuteScalar(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static T ExecuteScalar(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object ExecuteScalar(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static T ExecuteScalar(IDbConnection cnn, CommandDefinition command);
    private static IEnumerable GetMultiExec(object param);
    [ExtensionAttribute]
private static int ExecuteImpl(IDbConnection cnn, CommandDefinition& command);
    [ExtensionAttribute]
public static IDataReader ExecuteReader(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IDataReader ExecuteReader(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static IDataReader ExecuteReader(IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [ExtensionAttribute]
public static IEnumerable`1<object> Query(IDbConnection cnn, string sql, object param, IDbTransaction transaction, bool buffered, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QueryFirst(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QueryFirstOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QuerySingle(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QuerySingleOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(IDbConnection cnn, string sql, object param, IDbTransaction transaction, bool buffered, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static T QueryFirst(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static T QueryFirstOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static T QuerySingle(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static T QuerySingleOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<object> Query(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, bool buffered, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QueryFirst(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QueryFirstOrDefault(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QuerySingle(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QuerySingleOrDefault(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static T QueryFirst(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static T QueryFirstOrDefault(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static T QuerySingle(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static T QuerySingleOrDefault(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static GridReader QueryMultiple(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static GridReader QueryMultiple(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
private static GridReader QueryMultipleImpl(IDbConnection cnn, CommandDefinition& command);
    private static IDataReader ExecuteReaderWithFlagsFallback(IDbCommand cmd, bool wasClosed, CommandBehavior behavior);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<QueryImpl>d__140`1")]
[ExtensionAttribute]
private static IEnumerable`1<T> QueryImpl(IDbConnection cnn, CommandDefinition command, Type effectiveType);
    private static void ThrowMultipleRows(Row row);
    private static void ThrowZeroRows(Row row);
    private static T QueryRowImpl(IDbConnection cnn, Row row, CommandDefinition& command, Type effectiveType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`3<TFirst, TSecond, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`4<TFirst, TSecond, TThird, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`5<TFirst, TSecond, TThird, TFourth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`6<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Type[] types, Func`2<Object[], TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
private static IEnumerable`1<TReturn> MultiMap(IDbConnection cnn, string sql, Delegate map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<MultiMapImpl>d__155`8")]
[ExtensionAttribute]
private static IEnumerable`1<TReturn> MultiMapImpl(IDbConnection cnn, CommandDefinition command, Delegate map, string splitOn, IDataReader reader, Identity identity, bool finalize);
    private static CommandBehavior GetBehavior(bool close, CommandBehavior default);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<MultiMapImpl>d__157`1")]
[ExtensionAttribute]
private static IEnumerable`1<TReturn> MultiMapImpl(IDbConnection cnn, CommandDefinition command, Type[] types, Func`2<Object[], TReturn> map, string splitOn, IDataReader reader, Identity identity, bool finalize);
    private static Func`2<IDataReader, TReturn> GenerateMapper(Func`2<IDataReader, object> deserializer, Func`2[] otherDeserializers, object map);
    private static Func`2<IDataReader, TReturn> GenerateMapper(int length, Func`2<IDataReader, object> deserializer, Func`2[] otherDeserializers, Func`2<Object[], TReturn> map);
    private static Func`2[] GenerateDeserializers(Identity identity, string splitOn, IDataReader reader);
    private static int GetNextSplitDynamic(int startIdx, string splitOn, IDataReader reader);
    private static int GetNextSplit(int startIdx, string splitOn, IDataReader reader);
    private static CacheInfo GetCacheInfo(Identity identity, object exampleParameters, bool addToCache);
    private static bool ShouldPassByPosition(string sql);
    private static void PassByPosition(IDbCommand cmd);
    private static Func`2<IDataReader, object> GetDeserializer(Type type, IDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    private static Func`2<IDataReader, object> GetHandlerDeserializer(ITypeHandler handler, Type type, int startBound);
    private static Exception MultiMapException(IDataRecord reader);
    internal static Func`2<IDataReader, object> GetDapperRowDeserializer(IDataRecord reader, int startBound, int length, bool returnNullIfFirstMissing);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "False")]
public static char ReadChar(object value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "False")]
public static Nullable`1<char> ReadNullableChar(object value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "True")]
public static IDbDataParameter FindOrAddParameter(IDataParameterCollection parameters, IDbCommand command, string name);
    internal static int GetListPaddingExtraCount(int count);
    private static string GetInListRegex(string name, bool byPosition);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "False")]
public static void PackListParameters(IDbCommand command, string namePrefix, object value);
    private static bool TryStringSplit(IEnumerable& list, int splitAt, string namePrefix, IDbCommand command, bool byPosition);
    private static bool TryStringSplit(IEnumerable`1& list, int splitAt, string namePrefix, IDbCommand command, string colType, bool byPosition, Action`2<StringBuilder, T> append);
    [ObsoleteAttribute("This method is for internal use only", "False")]
public static object SanitizeParameterValue(object value);
    private static IEnumerable`1<PropertyInfo> FilterParameters(IEnumerable`1<PropertyInfo> parameters, string sql);
    [ExtensionAttribute]
public static void ReplaceLiterals(IParameterLookup parameters, IDbCommand command);
    [ObsoleteAttribute("This method is for internal use only")]
public static string Format(object value);
    internal static void ReplaceLiterals(IParameterLookup parameters, IDbCommand command, IList`1<LiteralToken> tokens);
    internal static IList`1<LiteralToken> GetLiteralTokens(string sql);
    public static Action`2<IDbCommand, object> CreateParamInfoGenerator(Identity identity, bool checkForDuplicates, bool removeUnused);
    private static bool IsValueTuple(Type type);
    internal static Action`2<IDbCommand, object> CreateParamInfoGenerator(Identity identity, bool checkForDuplicates, bool removeUnused, IList`1<LiteralToken> literals);
    private static MethodInfo GetToString(TypeCode typeCode);
    private static int ExecuteCommand(IDbConnection cnn, CommandDefinition& command, Action`2<IDbCommand, object> paramReader);
    private static T ExecuteScalarImpl(IDbConnection cnn, CommandDefinition& command);
    private static IDataReader ExecuteReaderImpl(IDbConnection cnn, CommandDefinition& command, CommandBehavior commandBehavior, IDbCommand& cmd);
    private static Action`2<IDbCommand, object> GetParameterReader(IDbConnection cnn, CommandDefinition& command);
    private static Func`2<IDataReader, object> GetStructDeserializer(Type type, Type effectiveType, int index);
    private static T Parse(object value);
    public static ITypeMap GetTypeMap(Type type);
    public static void SetTypeMap(Type type, ITypeMap map);
    public static Func`2<IDataReader, object> GetTypeDeserializer(Type type, IDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    private static LocalBuilder GetTempLocal(ILGenerator il, Dictionary`2& locals, Type type, bool initAndLoad);
    private static Func`2<IDataReader, object> GetTypeDeserializerImpl(Type type, IDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    private static void GenerateValueTupleDeserializer(Type valueTupleType, IDataReader reader, int startBound, int length, ILGenerator il);
    private static void GenerateDeserializerFromMap(Type type, IDataReader reader, int startBound, int length, bool returnNullIfFirstMissing, ILGenerator il);
    private static void LoadDefaultValue(ILGenerator il, Type type);
    private static void LoadReaderValueOrBranchToDBNullLabel(ILGenerator il, int index, LocalBuilder& stringEnumLocal, LocalBuilder valueCopyLocal, Type colType, Type memberType, Label& isDbNullLabel);
    private static void FlexibleConvertBoxedFromHeadOfStack(ILGenerator il, Type from, Type to, Type via);
    private static MethodInfo GetOperator(Type from, Type to);
    private static MethodInfo ResolveOperator(MethodInfo[] methods, Type from, Type to, string name);
    [ObsoleteAttribute("This method is for internal use only", "False")]
public static void ThrowDataException(Exception ex, int index, IDataReader reader, object value);
    private static void EmitInt32(ILGenerator il, int value);
    public static IEqualityComparer`1<string> get_ConnectionStringComparer();
    public static void set_ConnectionStringComparer(IEqualityComparer`1<string> value);
    [ExtensionAttribute]
public static ICustomQueryParameter AsTableValuedParameter(DataTable table, string typeName);
    [ExtensionAttribute]
public static void SetTypeName(DataTable table, string typeName);
    [ExtensionAttribute]
public static string GetTypeName(DataTable table);
    [ExtensionAttribute]
public static ICustomQueryParameter AsTableValuedParameter(IEnumerable`1<T> list, string typeName);
    private static StringBuilder GetStringBuilder();
    [ExtensionAttribute]
private static string __ToStringRecycle(StringBuilder obj);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<Parse>d__238`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Parse(IDataReader reader);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<Parse>d__239")]
[ExtensionAttribute]
public static IEnumerable`1<object> Parse(IDataReader reader, Type type);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Dapper.SqlMapper/<Parse>d__240")]
[ExtensionAttribute]
public static IEnumerable`1<object> Parse(IDataReader reader);
    [ExtensionAttribute]
public static Func`2<IDataReader, object> GetRowParser(IDataReader reader, Type type, int startIndex, int length, bool returnNullIfFirstMissing);
    [ExtensionAttribute]
public static Func`2<IDataReader, T> GetRowParser(IDataReader reader, Type concreteType, int startIndex, int length, bool returnNullIfFirstMissing);
    [CompilerGeneratedAttribute]
internal static LocalBuilder <CreateParamInfoGenerator>g__GetSizeLocal|190_0(<>c__DisplayClass190_0& );
}
internal static class ServiceStack.OrmLite.Dapper.StructuredHelper : object {
    private static Hashtable s_udt;
    private static Hashtable s_tvp;
    private static StructuredHelper();
    private static Action`2<IDbDataParameter, string> GetUDT(Type type);
    private static Action`2<IDbDataParameter, string> GetTVP(Type type);
    private static Action`2<IDbDataParameter, string> SlowGetHelper(Type type, Hashtable hashtable, string nameProperty, int sqlDbType);
    private static Action`2<IDbDataParameter, string> CreateFor(Type type, string nameProperty, int sqlDbType);
    internal static void ConfigureUDT(IDbDataParameter parameter, string typeName);
    internal static void ConfigureTVP(IDbDataParameter parameter, string typeName);
}
internal class ServiceStack.OrmLite.Dapper.TableValuedParameter : object {
    private DataTable table;
    private string typeName;
    public TableValuedParameter(DataTable table);
    public TableValuedParameter(DataTable table, string typeName);
    private sealed virtual override void ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter.AddParameter(IDbCommand command, string name);
    internal static void Set(IDbDataParameter parameter, DataTable table, string typeName);
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.Dapper.TypeExtensions : object {
    [ExtensionAttribute]
public static MethodInfo GetPublicInstanceMethod(Type type, string name, Type[] types);
}
internal static class ServiceStack.OrmLite.Dapper.WrappedReader : object {
    public static IDataReader Create(IDbCommand cmd, IDataReader reader);
    public static DbDataReader Create(IDbCommand cmd, DbDataReader reader);
}
internal class ServiceStack.OrmLite.Dapper.XDocumentHandler : XmlTypeHandler`1<XDocument> {
    protected virtual XDocument Parse(string xml);
    protected virtual string Format(XDocument xml);
}
internal class ServiceStack.OrmLite.Dapper.XElementHandler : XmlTypeHandler`1<XElement> {
    protected virtual XElement Parse(string xml);
    protected virtual string Format(XElement xml);
}
internal class ServiceStack.OrmLite.Dapper.XmlDocumentHandler : XmlTypeHandler`1<XmlDocument> {
    protected virtual XmlDocument Parse(string xml);
    protected virtual string Format(XmlDocument xml);
}
internal abstract class ServiceStack.OrmLite.Dapper.XmlTypeHandler`1 : StringTypeHandler`1<T> {
    public virtual void SetValue(IDbDataParameter parameter, T value);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.DbDataParameterExtensions : object {
    [ExtensionAttribute]
public static IDbDataParameter CreateParam(IDbConnection db, string name, object value, Type fieldType, Nullable`1<DbType> dbType, Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<int> size);
    [ExtensionAttribute]
public static IDbDataParameter CreateParam(IOrmLiteDialectProvider dialectProvider, string name, object value, Type fieldType, Nullable`1<DbType> dbType, Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<int> size);
    [ExtensionAttribute]
internal static void ConfigureParam(IOrmLiteDialectProvider dialectProvider, IDbDataParameter p, object value, Nullable`1<DbType> dbType);
    [ExtensionAttribute]
public static IDbDataParameter AddQueryParam(IOrmLiteDialectProvider dialectProvider, IDbCommand dbCmd, object value, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static IDbDataParameter AddUpdateParam(IOrmLiteDialectProvider dialectProvider, IDbCommand dbCmd, object value, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static IDbDataParameter AddParam(IOrmLiteDialectProvider dialectProvider, IDbCommand dbCmd, object value, FieldDefinition fieldDef, Action`1<IDbDataParameter> paramFilter);
    [ExtensionAttribute]
public static string GetInsertParam(IOrmLiteDialectProvider dialectProvider, IDbCommand dbCmd, object value, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static string GetUpdateParam(IOrmLiteDialectProvider dialectProvider, IDbCommand dbCmd, object value, FieldDefinition fieldDef);
}
[ObsoleteAttribute("Use DbScriptsAsync")]
public class ServiceStack.OrmLite.DbScripts : ScriptMethods {
    private static string DbInfo;
    private static string DbConnection;
    private IDbConnectionFactory dbFactory;
    public IDbConnectionFactory DbFactory { get; public set; }
    public IDbConnectionFactory get_DbFactory();
    public void set_DbFactory(IDbConnectionFactory value);
    public IDbConnection OpenDbConnection(ScriptScopeContext scope, Dictionary`2<string, object> options);
    private T dialect(ScriptScopeContext scope, Func`2<IOrmLiteDialectProvider, T> fn);
    public IgnoreResult useDb(ScriptScopeContext scope, Dictionary`2<string, object> dbConnOptions);
    private IDbConnection OpenDbConnectionFromOptions(Dictionary`2<string, object> options);
    private T exec(Func`2<IDbConnection, T> fn, ScriptScopeContext scope, object options);
    public object dbSelect(ScriptScopeContext scope, string sql);
    public object dbSelect(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public object dbSelect(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public object dbSingle(ScriptScopeContext scope, string sql);
    public object dbSingle(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public object dbSingle(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public object dbScalar(ScriptScopeContext scope, string sql);
    public object dbScalar(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public object dbScalar(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public long dbCount(ScriptScopeContext scope, string sql);
    public long dbCount(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public long dbCount(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public bool dbExists(ScriptScopeContext scope, string sql);
    public bool dbExists(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public bool dbExists(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public int dbExec(ScriptScopeContext scope, string sql);
    public int dbExec(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public int dbExec(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public List`1<string> dbNamedConnections();
    public List`1<string> dbTableNames(ScriptScopeContext scope);
    public List`1<string> dbTableNames(ScriptScopeContext scope, Dictionary`2<string, object> args);
    public List`1<string> dbTableNames(ScriptScopeContext scope, Dictionary`2<string, object> args, object options);
    public List`1<KeyValuePair`2<string, long>> dbTableNamesWithRowCounts(ScriptScopeContext scope);
    public List`1<KeyValuePair`2<string, long>> dbTableNamesWithRowCounts(ScriptScopeContext scope, Dictionary`2<string, object> args);
    public List`1<KeyValuePair`2<string, long>> dbTableNamesWithRowCounts(ScriptScopeContext scope, Dictionary`2<string, object> args, object options);
    public String[] dbColumnNames(ScriptScopeContext scope, string tableName);
    public String[] dbColumnNames(ScriptScopeContext scope, string tableName, object options);
    public ColumnSchema[] dbColumns(ScriptScopeContext scope, string tableName);
    public ColumnSchema[] dbColumns(ScriptScopeContext scope, string tableName, object options);
    public ColumnSchema[] dbDesc(ScriptScopeContext scope, string sql);
    public ColumnSchema[] dbDesc(ScriptScopeContext scope, string sql, object options);
    public string sqlQuote(ScriptScopeContext scope, string name);
    public string sqlConcat(ScriptScopeContext scope, IEnumerable`1<object> values);
    public string sqlCurrency(ScriptScopeContext scope, string fieldOrValue);
    public string sqlCurrency(ScriptScopeContext scope, string fieldOrValue, string symbol);
    public string sqlCast(ScriptScopeContext scope, object fieldOrValue, string castAs);
    public string sqlBool(ScriptScopeContext scope, bool value);
    public string sqlTrue(ScriptScopeContext scope);
    public string sqlFalse(ScriptScopeContext scope);
    public string sqlLimit(ScriptScopeContext scope, Nullable`1<int> offset, Nullable`1<int> limit);
    public string sqlLimit(ScriptScopeContext scope, Nullable`1<int> limit);
    public string sqlSkip(ScriptScopeContext scope, Nullable`1<int> offset);
    public string sqlTake(ScriptScopeContext scope, Nullable`1<int> limit);
    public string sqlOrderByFields(ScriptScopeContext scope, string orderBy);
    public string ormliteVar(ScriptScopeContext scope, string name);
    public string sqlVerifyFragment(string sql);
    public bool isUnsafeSql(string sql);
    public bool isUnsafeSqlFragment(string sql);
    private string padCondition(string text);
}
public class ServiceStack.OrmLite.DbScriptsAsync : ScriptMethods {
    private DbScripts sync;
    private static string DbInfo;
    private static string DbConnection;
    private IDbConnectionFactory dbFactory;
    private DbScripts Sync { get; }
    public IDbConnectionFactory DbFactory { get; public set; }
    private DbScripts get_Sync();
    public object dbSelectSync(ScriptScopeContext scope, string sql);
    public object dbSelectSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public object dbSelectSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public object dbSingleSync(ScriptScopeContext scope, string sql);
    public object dbSingleSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public object dbSingleSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public object dbScalarSync(ScriptScopeContext scope, string sql);
    public object dbScalarSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public object dbScalarSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public long dbCountSync(ScriptScopeContext scope, string sql);
    public long dbCountSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public long dbCountSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public bool dbExistsSync(ScriptScopeContext scope, string sql);
    public bool dbExistsSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public bool dbExistsSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public int dbExecSync(ScriptScopeContext scope, string sql);
    public int dbExecSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public int dbExecSync(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public List`1<string> dbTableNamesSync(ScriptScopeContext scope);
    public List`1<string> dbTableNamesSync(ScriptScopeContext scope, Dictionary`2<string, object> args);
    public List`1<string> dbTableNamesSync(ScriptScopeContext scope, Dictionary`2<string, object> args, object options);
    public List`1<KeyValuePair`2<string, long>> dbTableNamesWithRowCountsSync(ScriptScopeContext scope);
    public List`1<KeyValuePair`2<string, long>> dbTableNamesWithRowCountsSync(ScriptScopeContext scope, Dictionary`2<string, object> args);
    public List`1<KeyValuePair`2<string, long>> dbTableNamesWithRowCountsSync(ScriptScopeContext scope, Dictionary`2<string, object> args, object options);
    public String[] dbColumnNamesSync(ScriptScopeContext scope, string tableName);
    public String[] dbColumnNamesSync(ScriptScopeContext scope, string tableName, object options);
    public ColumnSchema[] dbColumnsSync(ScriptScopeContext scope, string tableName);
    public ColumnSchema[] dbColumnsSync(ScriptScopeContext scope, string tableName, object options);
    public ColumnSchema[] dbDescSync(ScriptScopeContext scope, string sql);
    public ColumnSchema[] dbDescSync(ScriptScopeContext scope, string sql, object options);
    public IDbConnectionFactory get_DbFactory();
    public void set_DbFactory(IDbConnectionFactory value);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.DbScriptsAsync/<OpenDbConnectionAsync>d__39")]
public Task`1<IDbConnection> OpenDbConnectionAsync(ScriptScopeContext scope, Dictionary`2<string, object> options);
    private T dialect(ScriptScopeContext scope, Func`2<IOrmLiteDialectProvider, T> fn);
    public IgnoreResult useDb(ScriptScopeContext scope, Dictionary`2<string, object> dbConnOptions);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.DbScriptsAsync/<OpenDbConnectionFromOptionsAsync>d__42")]
private Task`1<IDbConnection> OpenDbConnectionFromOptionsAsync(Dictionary`2<string, object> options);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.DbScriptsAsync/<exec>d__43`1")]
private Task`1<object> exec(Func`2<IDbConnection, Task`1<T>> fn, ScriptScopeContext scope, object options);
    public Task`1<object> dbSelect(ScriptScopeContext scope, string sql);
    public Task`1<object> dbSelect(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public Task`1<object> dbSelect(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public Task`1<object> dbSingle(ScriptScopeContext scope, string sql);
    public Task`1<object> dbSingle(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public Task`1<object> dbSingle(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public Task`1<object> dbScalar(ScriptScopeContext scope, string sql);
    public Task`1<object> dbScalar(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public Task`1<object> dbScalar(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public Task`1<object> dbCount(ScriptScopeContext scope, string sql);
    public Task`1<object> dbCount(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public Task`1<object> dbCount(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.DbScriptsAsync/<dbExists>d__56")]
public Task`1<object> dbExists(ScriptScopeContext scope, string sql);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.DbScriptsAsync/<dbExists>d__57")]
public Task`1<object> dbExists(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.DbScriptsAsync/<dbExists>d__58")]
public Task`1<object> dbExists(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public Task`1<object> dbExec(ScriptScopeContext scope, string sql);
    public Task`1<object> dbExec(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args);
    public Task`1<object> dbExec(ScriptScopeContext scope, string sql, Dictionary`2<string, object> args, object options);
    public List`1<string> dbNamedConnections();
    public Task`1<object> dbTableNames(ScriptScopeContext scope);
    public Task`1<object> dbTableNames(ScriptScopeContext scope, Dictionary`2<string, object> args);
    public Task`1<object> dbTableNames(ScriptScopeContext scope, Dictionary`2<string, object> args, object options);
    public Task`1<object> dbTableNamesWithRowCounts(ScriptScopeContext scope);
    public Task`1<object> dbTableNamesWithRowCounts(ScriptScopeContext scope, Dictionary`2<string, object> args);
    public Task`1<object> dbTableNamesWithRowCounts(ScriptScopeContext scope, Dictionary`2<string, object> args, object options);
    public Task`1<object> dbColumnNames(ScriptScopeContext scope, string tableName);
    public Task`1<object> dbColumnNames(ScriptScopeContext scope, string tableName, object options);
    public Task`1<object> dbColumns(ScriptScopeContext scope, string tableName);
    public Task`1<object> dbColumns(ScriptScopeContext scope, string tableName, object options);
    public Task`1<object> dbDesc(ScriptScopeContext scope, string sql);
    public Task`1<object> dbDesc(ScriptScopeContext scope, string sql, object options);
    public string sqlQuote(ScriptScopeContext scope, string name);
    public string sqlConcat(ScriptScopeContext scope, IEnumerable`1<object> values);
    public string sqlCurrency(ScriptScopeContext scope, string fieldOrValue);
    public string sqlCurrency(ScriptScopeContext scope, string fieldOrValue, string symbol);
    public string sqlCast(ScriptScopeContext scope, object fieldOrValue, string castAs);
    public string sqlBool(ScriptScopeContext scope, bool value);
    public string sqlTrue(ScriptScopeContext scope);
    public string sqlFalse(ScriptScopeContext scope);
    public string sqlLimit(ScriptScopeContext scope, Nullable`1<int> offset, Nullable`1<int> limit);
    public string sqlLimit(ScriptScopeContext scope, Nullable`1<int> limit);
    public string sqlSkip(ScriptScopeContext scope, Nullable`1<int> offset);
    public string sqlTake(ScriptScopeContext scope, Nullable`1<int> limit);
    public string sqlOrderByFields(ScriptScopeContext scope, string orderBy);
    public string ormliteVar(ScriptScopeContext scope, string name);
    public string sqlVerifyFragment(string sql);
    public bool isUnsafeSql(string sql);
    public bool isUnsafeSqlFragment(string sql);
    private string padCondition(string text);
}
public class ServiceStack.OrmLite.DbTypes`1 : object {
    public DbType DbType;
    public string TextDefinition;
    public bool ShouldQuoteValue;
    public Dictionary`2<Type, string> ColumnTypeMap;
    public Dictionary`2<Type, DbType> ColumnDbTypeMap;
    public void Set(DbType dbType, string fieldDefinition);
}
public class ServiceStack.OrmLite.DictionaryRow : ValueType {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Fields>k__BackingField;
    public Type Type { get; }
    public Dictionary`2<string, object> Fields { get; }
    public DictionaryRow(Type type, Dictionary`2<string, object> fields);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Fields();
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.DynamicRowUtils : object {
    [ExtensionAttribute]
internal static object ToFilterType(object row);
    [ExtensionAttribute]
internal static object ToFilterType(object row, Type type);
}
public class ServiceStack.OrmLite.EnumMemberAccess : PartialSqlString {
    [CompilerGeneratedAttribute]
private Type <EnumType>k__BackingField;
    public Type EnumType { get; private set; }
    public EnumMemberAccess(string text, Type enumType);
    [CompilerGeneratedAttribute]
public Type get_EnumType();
    [CompilerGeneratedAttribute]
private void set_EnumType(Type value);
}
internal class ServiceStack.OrmLite.EOT : object {
}
public class ServiceStack.OrmLite.FieldDefinition : object {
    [CompilerGeneratedAttribute]
private ModelDefinition <ModelDef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <FieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FieldTypeDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TreatAsType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUniqueIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClustered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonClustered>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FieldLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueConstraint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckConstraint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUniqueConstraint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private ForeignKeyConstraint <ForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private GetMemberDelegate <GetValueFn>k__BackingField;
    [CompilerGeneratedAttribute]
private SetMemberDelegate <SetValueFn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComputed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPersisted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputeExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BelongToModelName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldReference <FieldReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomFieldDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRefType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreOnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreOnInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnOnInsert>k__BackingField;
    public ModelDefinition ModelDef { get; public set; }
    public string Name { get; public set; }
    public string Alias { get; public set; }
    public string FieldName { get; }
    public Type FieldType { get; public set; }
    public object FieldTypeDefaultValue { get; public set; }
    public Type TreatAsType { get; public set; }
    public Type ColumnType { get; }
    public PropertyInfo PropertyInfo { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public bool AutoIncrement { get; public set; }
    public bool AutoId { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsIndexed { get; public set; }
    public bool IsUniqueIndex { get; public set; }
    public bool IsClustered { get; public set; }
    public bool IsNonClustered { get; public set; }
    public string IndexName { get; public set; }
    public bool IsRowVersion { get; public set; }
    public Nullable`1<int> FieldLength { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    public string DefaultValue { get; public set; }
    public string DefaultValueConstraint { get; public set; }
    public string CheckConstraint { get; public set; }
    public bool IsUniqueConstraint { get; public set; }
    public int Order { get; public set; }
    public ForeignKeyConstraint ForeignKey { get; public set; }
    public GetMemberDelegate GetValueFn { get; public set; }
    public SetMemberDelegate SetValueFn { get; public set; }
    public string Sequence { get; public set; }
    public bool IsComputed { get; public set; }
    public bool IsPersisted { get; public set; }
    public string ComputeExpression { get; public set; }
    public string CustomSelect { get; public set; }
    public string CustomInsert { get; public set; }
    public string CustomUpdate { get; public set; }
    public bool RequiresAlias { get; }
    public string BelongToModelName { get; public set; }
    public bool IsReference { get; public set; }
    public FieldReference FieldReference { get; public set; }
    public string CustomFieldDefinition { get; public set; }
    public bool IsRefType { get; public set; }
    public bool IgnoreOnUpdate { get; public set; }
    public bool IgnoreOnInsert { get; public set; }
    public bool ReturnOnInsert { get; public set; }
    [CompilerGeneratedAttribute]
public ModelDefinition get_ModelDef();
    [CompilerGeneratedAttribute]
public void set_ModelDef(ModelDefinition value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    public string get_FieldName();
    [CompilerGeneratedAttribute]
public Type get_FieldType();
    [CompilerGeneratedAttribute]
public void set_FieldType(Type value);
    [CompilerGeneratedAttribute]
public object get_FieldTypeDefaultValue();
    [CompilerGeneratedAttribute]
public void set_FieldTypeDefaultValue(object value);
    [CompilerGeneratedAttribute]
public Type get_TreatAsType();
    [CompilerGeneratedAttribute]
public void set_TreatAsType(Type value);
    public Type get_ColumnType();
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public void set_PropertyInfo(PropertyInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoIncrement();
    [CompilerGeneratedAttribute]
public void set_AutoIncrement(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoId();
    [CompilerGeneratedAttribute]
public void set_AutoId(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexed();
    [CompilerGeneratedAttribute]
public void set_IsIndexed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUniqueIndex();
    [CompilerGeneratedAttribute]
public void set_IsUniqueIndex(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsClustered();
    [CompilerGeneratedAttribute]
public void set_IsClustered(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNonClustered();
    [CompilerGeneratedAttribute]
public void set_IsNonClustered(bool value);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
public void set_IndexName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRowVersion();
    [CompilerGeneratedAttribute]
public void set_IsRowVersion(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FieldLength();
    [CompilerGeneratedAttribute]
public void set_FieldLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValueConstraint();
    [CompilerGeneratedAttribute]
public void set_DefaultValueConstraint(string value);
    [CompilerGeneratedAttribute]
public string get_CheckConstraint();
    [CompilerGeneratedAttribute]
public void set_CheckConstraint(string value);
    [CompilerGeneratedAttribute]
public bool get_IsUniqueConstraint();
    [CompilerGeneratedAttribute]
public void set_IsUniqueConstraint(bool value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public ForeignKeyConstraint get_ForeignKey();
    [CompilerGeneratedAttribute]
public void set_ForeignKey(ForeignKeyConstraint value);
    [CompilerGeneratedAttribute]
public GetMemberDelegate get_GetValueFn();
    [CompilerGeneratedAttribute]
public void set_GetValueFn(GetMemberDelegate value);
    [CompilerGeneratedAttribute]
public SetMemberDelegate get_SetValueFn();
    [CompilerGeneratedAttribute]
public void set_SetValueFn(SetMemberDelegate value);
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public string GetQuotedName(IOrmLiteDialectProvider dialectProvider);
    public string GetQuotedValue(object fromInstance, IOrmLiteDialectProvider dialect);
    [CompilerGeneratedAttribute]
public string get_Sequence();
    [CompilerGeneratedAttribute]
public void set_Sequence(string value);
    [CompilerGeneratedAttribute]
public bool get_IsComputed();
    [CompilerGeneratedAttribute]
public void set_IsComputed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPersisted();
    [CompilerGeneratedAttribute]
public void set_IsPersisted(bool value);
    [CompilerGeneratedAttribute]
public string get_ComputeExpression();
    [CompilerGeneratedAttribute]
public void set_ComputeExpression(string value);
    [CompilerGeneratedAttribute]
public string get_CustomSelect();
    [CompilerGeneratedAttribute]
public void set_CustomSelect(string value);
    [CompilerGeneratedAttribute]
public string get_CustomInsert();
    [CompilerGeneratedAttribute]
public void set_CustomInsert(string value);
    [CompilerGeneratedAttribute]
public string get_CustomUpdate();
    [CompilerGeneratedAttribute]
public void set_CustomUpdate(string value);
    public bool get_RequiresAlias();
    [CompilerGeneratedAttribute]
public string get_BelongToModelName();
    [CompilerGeneratedAttribute]
public void set_BelongToModelName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(bool value);
    [CompilerGeneratedAttribute]
public FieldReference get_FieldReference();
    [CompilerGeneratedAttribute]
public void set_FieldReference(FieldReference value);
    [CompilerGeneratedAttribute]
public string get_CustomFieldDefinition();
    [CompilerGeneratedAttribute]
public void set_CustomFieldDefinition(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRefType();
    [CompilerGeneratedAttribute]
public void set_IsRefType(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreOnUpdate();
    [CompilerGeneratedAttribute]
public void set_IgnoreOnUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreOnInsert();
    [CompilerGeneratedAttribute]
public void set_IgnoreOnInsert(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReturnOnInsert();
    [CompilerGeneratedAttribute]
public void set_ReturnOnInsert(bool value);
    public virtual string ToString();
    public bool ShouldSkipInsert();
    public bool ShouldSkipUpdate();
    public bool ShouldSkipDelete();
    public bool IsSelfRefField(FieldDefinition fieldDef);
    public bool IsSelfRefField(string name);
    public FieldDefinition Clone(Action`1<FieldDefinition> modifier);
}
public class ServiceStack.OrmLite.FieldReference : object {
    [CompilerGeneratedAttribute]
private FieldDefinition <FieldDef>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RefModel>k__BackingField;
    private ModelDefinition refModelDef;
    [CompilerGeneratedAttribute]
private string <RefId>k__BackingField;
    private FieldDefinition refIdFieldDef;
    [CompilerGeneratedAttribute]
private string <RefField>k__BackingField;
    private FieldDefinition refFieldDef;
    public FieldDefinition FieldDef { get; }
    public Type RefModel { get; public set; }
    public ModelDefinition RefModelDef { get; }
    public string RefId { get; public set; }
    public FieldDefinition RefIdFieldDef { get; }
    public string RefField { get; public set; }
    public FieldDefinition RefFieldDef { get; }
    public FieldReference(FieldDefinition fieldDef);
    [CompilerGeneratedAttribute]
public FieldDefinition get_FieldDef();
    [CompilerGeneratedAttribute]
public Type get_RefModel();
    [CompilerGeneratedAttribute]
public void set_RefModel(Type value);
    public ModelDefinition get_RefModelDef();
    [CompilerGeneratedAttribute]
public string get_RefId();
    [CompilerGeneratedAttribute]
public void set_RefId(string value);
    public FieldDefinition get_RefIdFieldDef();
    [CompilerGeneratedAttribute]
public string get_RefField();
    [CompilerGeneratedAttribute]
public void set_RefField(string value);
    public FieldDefinition get_RefFieldDef();
}
public class ServiceStack.OrmLite.ForeignKeyConstraint : object {
    [CompilerGeneratedAttribute]
private Type <ReferenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignKeyName>k__BackingField;
    public Type ReferenceType { get; private set; }
    public string OnDelete { get; private set; }
    public string OnUpdate { get; private set; }
    public string ForeignKeyName { get; private set; }
    public ForeignKeyConstraint(Type type, string onDelete, string onUpdate, string foreignKeyName);
    [CompilerGeneratedAttribute]
public Type get_ReferenceType();
    [CompilerGeneratedAttribute]
private void set_ReferenceType(Type value);
    [CompilerGeneratedAttribute]
public string get_OnDelete();
    [CompilerGeneratedAttribute]
private void set_OnDelete(string value);
    [CompilerGeneratedAttribute]
public string get_OnUpdate();
    [CompilerGeneratedAttribute]
private void set_OnUpdate(string value);
    [CompilerGeneratedAttribute]
public string get_ForeignKeyName();
    [CompilerGeneratedAttribute]
private void set_ForeignKeyName(string value);
    public string GetForeignKeyName(ModelDefinition modelDef, ModelDefinition refModelDef, INamingStrategy namingStrategy, FieldDefinition fieldDef);
}
public class ServiceStack.OrmLite.GetValueDelegate : MulticastDelegate {
    public GetValueDelegate(object object, IntPtr method);
    public virtual object Invoke(int i);
    public virtual IAsyncResult BeginInvoke(int i, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public interface ServiceStack.OrmLite.IDynamicRow {
    public Type Type { get; }
    public abstract virtual Type get_Type();
}
public interface ServiceStack.OrmLite.IDynamicRow`1 {
    public T Fields { get; }
    public abstract virtual T get_Fields();
}
public interface ServiceStack.OrmLite.IHasColumnDefinitionLength {
    public abstract virtual string GetColumnDefinition(Nullable`1<int> length);
}
public interface ServiceStack.OrmLite.IHasColumnDefinitionPrecision {
    public abstract virtual string GetColumnDefinition(Nullable`1<int> precision, Nullable`1<int> scale);
}
public interface ServiceStack.OrmLite.IHasDialectProvider {
    public IOrmLiteDialectProvider DialectProvider { get; }
    public abstract virtual IOrmLiteDialectProvider get_DialectProvider();
}
public interface ServiceStack.OrmLite.IHasUntypedSqlExpression {
    public abstract virtual IUntypedSqlExpression GetUntyped();
}
public interface ServiceStack.OrmLite.INamingStrategy {
    public abstract virtual string GetSchemaName(string name);
    public abstract virtual string GetSchemaName(ModelDefinition modelDef);
    public abstract virtual string GetTableName(string name);
    public abstract virtual string GetTableName(ModelDefinition modelDef);
    public abstract virtual string GetColumnName(string name);
    public abstract virtual string GetSequenceName(string modelName, string fieldName);
    public abstract virtual string ApplyNameRestrictions(string name);
}
public class ServiceStack.OrmLite.IndexFieldsCacheKey : object {
    private int hashCode;
    [CompilerGeneratedAttribute]
private ModelDefinition <ModelDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <Dialect>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Fields>k__BackingField;
    public ModelDefinition ModelDefinition { get; }
    public IOrmLiteDialectProvider Dialect { get; }
    public String[] Fields { get; }
    public IndexFieldsCacheKey(String[] fields, ModelDefinition modelDefinition, IOrmLiteDialectProvider dialect);
    [CompilerGeneratedAttribute]
public ModelDefinition get_ModelDefinition();
    [CompilerGeneratedAttribute]
public IOrmLiteDialectProvider get_Dialect();
    [CompilerGeneratedAttribute]
public String[] get_Fields();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface ServiceStack.OrmLite.IOrmLiteConverter {
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public DbType DbType { get; }
    public string ColumnDefinition { get; }
    public abstract virtual IOrmLiteDialectProvider get_DialectProvider();
    public abstract virtual void set_DialectProvider(IOrmLiteDialectProvider value);
    public abstract virtual DbType get_DbType();
    public abstract virtual string get_ColumnDefinition();
    public abstract virtual string ToQuotedString(Type fieldType, object value);
    public abstract virtual void InitDbParam(IDbDataParameter p, Type fieldType);
    public abstract virtual object ToDbValue(Type fieldType, object value);
    public abstract virtual object FromDbValue(Type fieldType, object value);
    public abstract virtual object GetValue(IDataReader reader, int columnIndex, Object[] values);
}
public interface ServiceStack.OrmLite.IOrmLiteDialectProvider {
    public Action`1<IDbConnection> OnOpenConnection { get; public set; }
    public IOrmLiteExecFilter ExecFilter { get; public set; }
    public string ParamString { get; public set; }
    public INamingStrategy NamingStrategy { get; public set; }
    public IStringSerializer StringSerializer { get; public set; }
    public Func`2<string, string> ParamNameFilter { get; public set; }
    public Dictionary`2<string, string> Variables { get; }
    public bool SupportsSchema { get; }
    public bool SupportsConcurrentWrites { get; }
    public bool SupportsAsync { get; }
    public string SqlRandom { get; }
    public abstract virtual void Init(string connectionString);
    public abstract virtual void RegisterConverter(IOrmLiteConverter converter);
    public abstract virtual void InitConnection(IDbConnection dbConn);
    public abstract virtual Action`1<IDbConnection> get_OnOpenConnection();
    public abstract virtual void set_OnOpenConnection(Action`1<IDbConnection> value);
    public abstract virtual IOrmLiteExecFilter get_ExecFilter();
    public abstract virtual void set_ExecFilter(IOrmLiteExecFilter value);
    public abstract virtual IOrmLiteConverter GetConverter(Type type);
    public abstract virtual IOrmLiteConverter GetConverterBestMatch(Type type);
    public abstract virtual IOrmLiteConverter GetConverterBestMatch(FieldDefinition fieldDef);
    public abstract virtual string get_ParamString();
    public abstract virtual void set_ParamString(string value);
    public abstract virtual string EscapeWildcards(string value);
    public abstract virtual INamingStrategy get_NamingStrategy();
    public abstract virtual void set_NamingStrategy(INamingStrategy value);
    public abstract virtual IStringSerializer get_StringSerializer();
    public abstract virtual void set_StringSerializer(IStringSerializer value);
    public abstract virtual Func`2<string, string> get_ParamNameFilter();
    public abstract virtual void set_ParamNameFilter(Func`2<string, string> value);
    public abstract virtual Dictionary`2<string, string> get_Variables();
    public abstract virtual bool get_SupportsSchema();
    public abstract virtual bool get_SupportsConcurrentWrites();
    public abstract virtual string GetQuotedValue(string paramValue);
    public abstract virtual string GetQuotedValue(object value, Type fieldType);
    public abstract virtual string GetDefaultValue(Type tableType, string fieldName);
    public abstract virtual string GetDefaultValue(FieldDefinition fieldDef);
    public abstract virtual bool HasInsertReturnValues(ModelDefinition modelDef);
    public abstract virtual object GetParamValue(object value, Type fieldType);
    public abstract virtual void InitQueryParam(IDbDataParameter param);
    public abstract virtual void InitUpdateParam(IDbDataParameter param);
    public abstract virtual object ToDbValue(object value, Type type);
    public abstract virtual object FromDbValue(object value, Type type);
    public abstract virtual object GetValue(IDataReader reader, int columnIndex, Type type);
    public abstract virtual int GetValues(IDataReader reader, Object[] values);
    public abstract virtual IDbConnection CreateConnection(string filePath, Dictionary`2<string, string> options);
    public abstract virtual string GetTableName(Type modelType);
    public abstract virtual string GetTableName(ModelDefinition modelDef);
    public abstract virtual string GetTableName(ModelDefinition modelDef, bool useStrategy);
    public abstract virtual string GetTableName(string table, string schema);
    public abstract virtual string GetTableName(string table, string schema, bool useStrategy);
    public abstract virtual string GetQuotedTableName(Type modelType);
    public abstract virtual string GetQuotedTableName(ModelDefinition modelDef);
    public abstract virtual string GetQuotedTableName(string tableName, string schema);
    public abstract virtual string GetQuotedTableName(string tableName, string schema, bool useStrategy);
    public abstract virtual string GetQuotedColumnName(string columnName);
    public abstract virtual string GetQuotedName(string name);
    public abstract virtual string GetQuotedName(string name, string schema);
    public abstract virtual string SanitizeFieldNameForParamName(string fieldName);
    public abstract virtual string GetColumnDefinition(FieldDefinition fieldDef);
    public abstract virtual long GetLastInsertId(IDbCommand command);
    public abstract virtual string GetLastInsertIdSqlSuffix();
    public abstract virtual string ToSelectStatement(Type tableType, string sqlFilter, Object[] filterParams);
    public abstract virtual string ToSelectStatement(QueryType queryType, ModelDefinition modelDef, string selectExpression, string bodyExpression, string orderByExpression, Nullable`1<int> offset, Nullable`1<int> rows, ISet`1<string> tags);
    public abstract virtual string ToInsertRowSql(T obj, ICollection`1<string> insertFields);
    public abstract virtual string ToInsertRowsSql(IEnumerable`1<T> objs, ICollection`1<string> insertFields);
    public abstract virtual void BulkInsert(IDbConnection db, IEnumerable`1<T> objs, BulkInsertConfig config);
    public abstract virtual string ToInsertRowStatement(IDbCommand cmd, object objWithProperties, ICollection`1<string> insertFields);
    public abstract virtual void PrepareParameterizedInsertStatement(IDbCommand cmd, ICollection`1<string> insertFields, Func`2<FieldDefinition, bool> shouldInclude);
    public abstract virtual bool PrepareParameterizedUpdateStatement(IDbCommand cmd, ICollection`1<string> updateFields);
    public abstract virtual bool PrepareParameterizedDeleteStatement(IDbCommand cmd, IDictionary`2<string, object> deleteFieldValues);
    public abstract virtual void PrepareStoredProcedureStatement(IDbCommand cmd, T obj);
    public abstract virtual void SetParameterValues(IDbCommand dbCmd, object obj);
    public abstract virtual void SetParameter(FieldDefinition fieldDef, IDbDataParameter p);
    public abstract virtual void EnableIdentityInsert(IDbCommand cmd);
    public abstract virtual Task EnableIdentityInsertAsync(IDbCommand cmd, CancellationToken token);
    public abstract virtual void DisableIdentityInsert(IDbCommand cmd);
    public abstract virtual Task DisableIdentityInsertAsync(IDbCommand cmd, CancellationToken token);
    public abstract virtual void EnableForeignKeysCheck(IDbCommand cmd);
    public abstract virtual Task EnableForeignKeysCheckAsync(IDbCommand cmd, CancellationToken token);
    public abstract virtual void DisableForeignKeysCheck(IDbCommand cmd);
    public abstract virtual Task DisableForeignKeysCheckAsync(IDbCommand cmd, CancellationToken token);
    public abstract virtual Dictionary`2<string, FieldDefinition> GetFieldDefinitionMap(ModelDefinition modelDef);
    public abstract virtual object GetFieldValue(FieldDefinition fieldDef, object value);
    public abstract virtual object GetFieldValue(Type fieldType, object value);
    public abstract virtual void PrepareUpdateRowStatement(IDbCommand dbCmd, object objWithProperties, ICollection`1<string> updateFields);
    public abstract virtual void PrepareUpdateRowStatement(IDbCommand dbCmd, Dictionary`2<string, object> args, string sqlFilter);
    public abstract virtual void PrepareUpdateRowAddStatement(IDbCommand dbCmd, Dictionary`2<string, object> args, string sqlFilter);
    public abstract virtual void PrepareInsertRowStatement(IDbCommand dbCmd, Dictionary`2<string, object> args);
    public abstract virtual string ToDeleteStatement(Type tableType, string sqlFilter, Object[] filterParams);
    public abstract virtual IDbCommand CreateParameterizedDeleteStatement(IDbConnection connection, object objWithProperties);
    public abstract virtual string ToExistStatement(Type fromTableType, object objWithProperties, string sqlFilter, Object[] filterParams);
    public abstract virtual string ToSelectFromProcedureStatement(object fromObjWithProperties, Type outputModelType, string sqlFilter, Object[] filterParams);
    public abstract virtual string ToExecuteProcedureStatement(object objWithProperties);
    public abstract virtual string ToCreateSchemaStatement(string schema);
    public abstract virtual string ToCreateTableStatement(Type tableType);
    public abstract virtual string ToPostCreateTableStatement(ModelDefinition modelDef);
    public abstract virtual string ToPostDropTableStatement(ModelDefinition modelDef);
    public abstract virtual List`1<string> ToCreateIndexStatements(Type tableType);
    public abstract virtual List`1<string> ToCreateSequenceStatements(Type tableType);
    public abstract virtual string ToCreateSequenceStatement(Type tableType, string sequenceName);
    public abstract virtual string ToCreateSavePoint(string name);
    public abstract virtual string ToReleaseSavePoint(string name);
    public abstract virtual string ToRollbackSavePoint(string name);
    public abstract virtual List`1<string> SequenceList(Type tableType);
    public abstract virtual Task`1<List`1<string>> SequenceListAsync(Type tableType, CancellationToken token);
    public abstract virtual List`1<string> GetSchemas(IDbCommand dbCmd);
    public abstract virtual Dictionary`2<string, List`1<string>> GetSchemaTables(IDbCommand dbCmd);
    public abstract virtual bool DoesSchemaExist(IDbCommand dbCmd, string schema);
    public abstract virtual Task`1<bool> DoesSchemaExistAsync(IDbCommand dbCmd, string schema, CancellationToken token);
    public abstract virtual bool DoesTableExist(IDbConnection db, string tableName, string schema);
    public abstract virtual Task`1<bool> DoesTableExistAsync(IDbConnection db, string tableName, string schema, CancellationToken token);
    public abstract virtual bool DoesTableExist(IDbCommand dbCmd, string tableName, string schema);
    public abstract virtual Task`1<bool> DoesTableExistAsync(IDbCommand dbCmd, string tableName, string schema, CancellationToken token);
    public abstract virtual bool DoesColumnExist(IDbConnection db, string columnName, string tableName, string schema);
    public abstract virtual Task`1<bool> DoesColumnExistAsync(IDbConnection db, string columnName, string tableName, string schema, CancellationToken token);
    public abstract virtual bool DoesSequenceExist(IDbCommand dbCmd, string sequence);
    public abstract virtual Task`1<bool> DoesSequenceExistAsync(IDbCommand dbCmd, string sequenceName, CancellationToken token);
    public abstract virtual object FromDbRowVersion(Type fieldType, object value);
    public abstract virtual SelectItem GetRowVersionSelectColumn(FieldDefinition field, string tablePrefix);
    public abstract virtual string GetRowVersionColumn(FieldDefinition field, string tablePrefix);
    public abstract virtual string GetColumnNames(ModelDefinition modelDef);
    public abstract virtual SelectItem[] GetColumnNames(ModelDefinition modelDef, string tablePrefix);
    public abstract virtual SqlExpression`1<T> SqlExpression();
    public abstract virtual IDbDataParameter CreateParam();
    public abstract virtual string GetDropForeignKeyConstraints(ModelDefinition modelDef);
    public abstract virtual string ToAddColumnStatement(string schema, string table, FieldDefinition fieldDef);
    public abstract virtual string ToAlterColumnStatement(string schema, string table, FieldDefinition fieldDef);
    public abstract virtual string ToChangeColumnNameStatement(string schema, string table, FieldDefinition fieldDef, string oldColumn);
    public abstract virtual string ToRenameColumnStatement(string schema, string table, string oldColumn, string newColumn);
    public abstract virtual string ToDropColumnStatement(string schema, string table, string column);
    public abstract virtual string ToDropConstraintStatement(string schema, string table, string constraint);
    public abstract virtual string ToAddForeignKeyStatement(Expression`1<Func`2<T, object>> field, Expression`1<Func`2<TForeign, object>> foreignField, OnFkOption onUpdate, OnFkOption onDelete, string foreignKeyName);
    public abstract virtual string ToDropForeignKeyStatement(string schema, string table, string foreignKeyName);
    public abstract virtual string ToCreateIndexStatement(Expression`1<Func`2<T, object>> field, string indexName, bool unique);
    public abstract virtual bool get_SupportsAsync();
    public abstract virtual Task OpenAsync(IDbConnection db, CancellationToken token);
    public abstract virtual Task`1<IDataReader> ExecuteReaderAsync(IDbCommand cmd, CancellationToken token);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(IDbCommand cmd, CancellationToken token);
    public abstract virtual Task`1<object> ExecuteScalarAsync(IDbCommand cmd, CancellationToken token);
    public abstract virtual Task`1<bool> ReadAsync(IDataReader reader, CancellationToken token);
    public abstract virtual Task`1<List`1<T>> ReaderEach(IDataReader reader, Func`1<T> fn, CancellationToken token);
    public abstract virtual Task`1<Return> ReaderEach(IDataReader reader, Action fn, Return source, CancellationToken token);
    public abstract virtual Task`1<T> ReaderRead(IDataReader reader, Func`1<T> fn, CancellationToken token);
    public abstract virtual Task`1<long> InsertAndGetLastInsertIdAsync(IDbCommand dbCmd, CancellationToken token);
    public abstract virtual string GetLoadChildrenSubSelect(SqlExpression`1<From> expr);
    public abstract virtual string ToRowCountStatement(string innerSql);
    public abstract virtual string ToUpdateStatement(IDbCommand dbCmd, T item, ICollection`1<string> updateFields);
    public abstract virtual string ToInsertStatement(IDbCommand dbCmd, T item, ICollection`1<string> insertFields);
    public abstract virtual string MergeParamsIntoSql(string sql, IEnumerable`1<IDbDataParameter> dbParams);
    public abstract virtual string GetRefSelfSql(SqlExpression`1<From> refQ, ModelDefinition modelDef, FieldDefinition refSelf, ModelDefinition refModelDef);
    public abstract virtual string GetRefFieldSql(string subSql, ModelDefinition refModelDef, FieldDefinition refField);
    public abstract virtual string GetFieldReferenceSql(string subSql, FieldDefinition fieldDef, FieldReference fieldRef);
    public abstract virtual string ToTableNamesStatement(string schema);
    public abstract virtual string ToTableNamesWithRowCountsStatement(bool live, string schema);
    public abstract virtual string SqlConflict(string sql, string conflictResolution);
    public abstract virtual string SqlConcat(IEnumerable`1<object> args);
    public abstract virtual string SqlCurrency(string fieldOrValue);
    public abstract virtual string SqlCurrency(string fieldOrValue, string currencySymbol);
    public abstract virtual string SqlBool(bool value);
    public abstract virtual string SqlLimit(Nullable`1<int> offset, Nullable`1<int> rows);
    public abstract virtual string SqlCast(object fieldOrValue, string castAs);
    public abstract virtual string get_SqlRandom();
    public abstract virtual string GenerateComment(String& modreq(System.Runtime.InteropServices.InAttribute) text);
}
public interface ServiceStack.OrmLite.IOrmLiteExecFilter {
    public abstract virtual SqlExpression`1<T> SqlExpression(IDbConnection dbConn);
    public abstract virtual IDbCommand CreateCommand(IDbConnection dbConn);
    public abstract virtual void DisposeCommand(IDbCommand dbCmd, IDbConnection dbConn);
    public abstract virtual T Exec(IDbConnection dbConn, Func`2<IDbCommand, T> filter);
    public abstract virtual IDbCommand Exec(IDbConnection dbConn, Func`2<IDbCommand, IDbCommand> filter);
    public abstract virtual Task`1<T> Exec(IDbConnection dbConn, Func`2<IDbCommand, Task`1<T>> filter);
    public abstract virtual Task`1<IDbCommand> Exec(IDbConnection dbConn, Func`2<IDbCommand, Task`1<IDbCommand>> filter);
    public abstract virtual void Exec(IDbConnection dbConn, Action`1<IDbCommand> filter);
    public abstract virtual Task Exec(IDbConnection dbConn, Func`2<IDbCommand, Task> filter);
    public abstract virtual IEnumerable`1<T> ExecLazy(IDbConnection dbConn, Func`2<IDbCommand, IEnumerable`1<T>> filter);
}
public interface ServiceStack.OrmLite.IOrmLiteResultsFilter {
    public abstract virtual long GetLastInsertId(IDbCommand dbCmd);
    public abstract virtual List`1<T> GetList(IDbCommand dbCmd);
    public abstract virtual IList GetRefList(IDbCommand dbCmd, Type refType);
    public abstract virtual T GetSingle(IDbCommand dbCmd);
    public abstract virtual object GetRefSingle(IDbCommand dbCmd, Type refType);
    public abstract virtual T GetScalar(IDbCommand dbCmd);
    public abstract virtual object GetScalar(IDbCommand dbCmd);
    public abstract virtual long GetLongScalar(IDbCommand dbCmd);
    public abstract virtual List`1<T> GetColumn(IDbCommand dbCmd);
    public abstract virtual HashSet`1<T> GetColumnDistinct(IDbCommand dbCmd);
    public abstract virtual Dictionary`2<K, V> GetDictionary(IDbCommand dbCmd);
    public abstract virtual List`1<KeyValuePair`2<K, V>> GetKeyValuePairs(IDbCommand dbCmd);
    public abstract virtual Dictionary`2<K, List`1<V>> GetLookup(IDbCommand dbCmd);
    public abstract virtual int ExecuteSql(IDbCommand dbCmd);
}
public interface ServiceStack.OrmLite.IPropertyInvoker {
    public Func`3<object, Type, object> ConvertValueFn { get; public set; }
    public abstract virtual Func`3<object, Type, object> get_ConvertValueFn();
    public abstract virtual void set_ConvertValueFn(Func`3<object, Type, object> value);
    public abstract virtual void SetPropertyValue(PropertyInfo propertyInfo, Type fieldType, object onInstance, object withValue);
    public abstract virtual object GetPropertyValue(PropertyInfo propertyInfo, object fromInstance);
}
internal interface ServiceStack.OrmLite.ISetDbTransaction {
    public IDbTransaction Transaction { get; public set; }
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
}
public interface ServiceStack.OrmLite.ISqlExpression {
    public List`1<IDbDataParameter> Params { get; }
    public abstract virtual List`1<IDbDataParameter> get_Params();
    public abstract virtual string ToSelectStatement();
    public abstract virtual string ToSelectStatement(QueryType forType);
    public abstract virtual string SelectInto();
    public abstract virtual string SelectInto(QueryType forType);
}
public interface ServiceStack.OrmLite.IUntypedApi {
    public IDbConnection Db { get; public set; }
    public IDbCommand DbCmd { get; public set; }
    public abstract virtual IDbConnection get_Db();
    public abstract virtual void set_Db(IDbConnection value);
    public abstract virtual IDbCommand get_DbCmd();
    public abstract virtual void set_DbCmd(IDbCommand value);
    public abstract virtual int SaveAll(IEnumerable objs);
    public abstract virtual Task`1<int> SaveAllAsync(IEnumerable objs, CancellationToken token);
    public abstract virtual bool Save(object obj);
    public abstract virtual Task`1<bool> SaveAsync(object obj, CancellationToken token);
    public abstract virtual void InsertAll(IEnumerable objs);
    public abstract virtual void InsertAll(IEnumerable objs, Action`1<IDbCommand> commandFilter);
    public abstract virtual long Insert(object obj, bool selectIdentity);
    public abstract virtual long Insert(object obj, Action`1<IDbCommand> commandFilter, bool selectIdentity);
    public abstract virtual int UpdateAll(IEnumerable objs);
    public abstract virtual int UpdateAll(IEnumerable objs, Action`1<IDbCommand> commandFilter);
    public abstract virtual int Update(object obj);
    public abstract virtual Task`1<int> UpdateAsync(object obj, CancellationToken token);
    public abstract virtual int DeleteAll();
    public abstract virtual int Delete(object obj, object anonType);
    public abstract virtual int DeleteNonDefaults(object obj, object filter);
    public abstract virtual int DeleteById(object id);
    public abstract virtual int DeleteByIds(IEnumerable idValues);
    public abstract virtual IEnumerable Cast(IEnumerable results);
}
public interface ServiceStack.OrmLite.IUntypedSqlExpression {
    public string TableAlias { get; public set; }
    public bool PrefixFieldWithTableName { get; public set; }
    public bool WhereStatementWithoutWhereString { get; public set; }
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public string SelectExpression { get; public set; }
    public string FromExpression { get; public set; }
    public string BodyExpression { get; }
    public string WhereExpression { get; public set; }
    public string GroupByExpression { get; public set; }
    public string HavingExpression { get; public set; }
    public string OrderByExpression { get; public set; }
    public Nullable`1<int> Rows { get; public set; }
    public Nullable`1<int> Offset { get; public set; }
    public List`1<string> UpdateFields { get; public set; }
    public List`1<string> InsertFields { get; public set; }
    public ModelDefinition ModelDef { get; }
    public abstract virtual string get_TableAlias();
    public abstract virtual void set_TableAlias(string value);
    public abstract virtual bool get_PrefixFieldWithTableName();
    public abstract virtual void set_PrefixFieldWithTableName(bool value);
    public abstract virtual bool get_WhereStatementWithoutWhereString();
    public abstract virtual void set_WhereStatementWithoutWhereString(bool value);
    public abstract virtual IOrmLiteDialectProvider get_DialectProvider();
    public abstract virtual void set_DialectProvider(IOrmLiteDialectProvider value);
    public abstract virtual string get_SelectExpression();
    public abstract virtual void set_SelectExpression(string value);
    public abstract virtual string get_FromExpression();
    public abstract virtual void set_FromExpression(string value);
    public abstract virtual string get_BodyExpression();
    public abstract virtual string get_WhereExpression();
    public abstract virtual void set_WhereExpression(string value);
    public abstract virtual string get_GroupByExpression();
    public abstract virtual void set_GroupByExpression(string value);
    public abstract virtual string get_HavingExpression();
    public abstract virtual void set_HavingExpression(string value);
    public abstract virtual string get_OrderByExpression();
    public abstract virtual void set_OrderByExpression(string value);
    public abstract virtual Nullable`1<int> get_Rows();
    public abstract virtual void set_Rows(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_Offset();
    public abstract virtual void set_Offset(Nullable`1<int> value);
    public abstract virtual List`1<string> get_UpdateFields();
    public abstract virtual void set_UpdateFields(List`1<string> value);
    public abstract virtual List`1<string> get_InsertFields();
    public abstract virtual void set_InsertFields(List`1<string> value);
    public abstract virtual ModelDefinition get_ModelDef();
    public abstract virtual IUntypedSqlExpression Clone();
    public abstract virtual IUntypedSqlExpression Select();
    public abstract virtual IUntypedSqlExpression Select(string selectExpression);
    public abstract virtual IUntypedSqlExpression UnsafeSelect(string rawSelect);
    public abstract virtual IUntypedSqlExpression Select(Expression`1<Func`3<Table1, Table2, object>> fields);
    public abstract virtual IUntypedSqlExpression Select(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public abstract virtual IUntypedSqlExpression SelectDistinct(Expression`1<Func`3<Table1, Table2, object>> fields);
    public abstract virtual IUntypedSqlExpression SelectDistinct(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public abstract virtual IUntypedSqlExpression SelectDistinct();
    public abstract virtual IUntypedSqlExpression From(string tables);
    public abstract virtual IUntypedSqlExpression UnsafeFrom(string rawFrom);
    public abstract virtual IUntypedSqlExpression Where();
    public abstract virtual IUntypedSqlExpression UnsafeWhere(string rawSql, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression Ensure(string sqlFilter, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression Where(string sqlFilter, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression UnsafeAnd(string rawSql, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression And(string sqlFilter, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression UnsafeOr(string rawSql, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression Or(string sqlFilter, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression AddCondition(string condition, string sqlFilter, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression GroupBy();
    public abstract virtual IUntypedSqlExpression GroupBy(string groupBy);
    public abstract virtual IUntypedSqlExpression Having();
    public abstract virtual IUntypedSqlExpression Having(string sqlFilter, Object[] filterParams);
    public abstract virtual IUntypedSqlExpression OrderBy();
    public abstract virtual IUntypedSqlExpression OrderBy(string orderBy);
    public abstract virtual ModelDefinition GetModelDefinition(FieldDefinition fieldDef);
    public abstract virtual IUntypedSqlExpression OrderByFields(FieldDefinition[] fields);
    public abstract virtual IUntypedSqlExpression OrderByFieldsDescending(FieldDefinition[] fields);
    public abstract virtual IUntypedSqlExpression OrderByFields(String[] fieldNames);
    public abstract virtual IUntypedSqlExpression OrderByFieldsDescending(String[] fieldNames);
    public abstract virtual IUntypedSqlExpression OrderBy(Expression`1<Func`2<Table, object>> keySelector);
    public abstract virtual IUntypedSqlExpression ThenBy(string orderBy);
    public abstract virtual IUntypedSqlExpression ThenBy(Expression`1<Func`2<Table, object>> keySelector);
    public abstract virtual IUntypedSqlExpression OrderByDescending(Expression`1<Func`2<Table, object>> keySelector);
    public abstract virtual IUntypedSqlExpression OrderByDescending(string orderBy);
    public abstract virtual IUntypedSqlExpression ThenByDescending(string orderBy);
    public abstract virtual IUntypedSqlExpression ThenByDescending(Expression`1<Func`2<Table, object>> keySelector);
    public abstract virtual IUntypedSqlExpression Skip(Nullable`1<int> skip);
    public abstract virtual IUntypedSqlExpression Take(Nullable`1<int> take);
    public abstract virtual IUntypedSqlExpression Limit(int skip, int rows);
    public abstract virtual IUntypedSqlExpression Limit(Nullable`1<int> skip, Nullable`1<int> rows);
    public abstract virtual IUntypedSqlExpression Limit(int rows);
    public abstract virtual IUntypedSqlExpression Limit();
    public abstract virtual IUntypedSqlExpression ClearLimits();
    public abstract virtual IUntypedSqlExpression Update(List`1<string> updateFields);
    public abstract virtual IUntypedSqlExpression Update();
    public abstract virtual IUntypedSqlExpression Insert(List`1<string> insertFields);
    public abstract virtual IUntypedSqlExpression Insert();
    public abstract virtual IDbDataParameter CreateParam(string name, object value, ParameterDirection direction, Nullable`1<DbType> dbType);
    public abstract virtual IUntypedSqlExpression Join(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public abstract virtual IUntypedSqlExpression Join(Type sourceType, Type targetType, Expression joinExpr);
    public abstract virtual IUntypedSqlExpression LeftJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public abstract virtual IUntypedSqlExpression LeftJoin(Type sourceType, Type targetType, Expression joinExpr);
    public abstract virtual IUntypedSqlExpression RightJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public abstract virtual IUntypedSqlExpression FullJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public abstract virtual IUntypedSqlExpression CrossJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public abstract virtual IUntypedSqlExpression CustomJoin(string joinString);
    public abstract virtual IUntypedSqlExpression Ensure(Expression`1<Func`2<Target, bool>> predicate);
    public abstract virtual IUntypedSqlExpression Ensure(Expression`1<Func`3<Source, Target, bool>> predicate);
    public abstract virtual IUntypedSqlExpression Where(Expression`1<Func`2<Target, bool>> predicate);
    public abstract virtual IUntypedSqlExpression Where(Expression`1<Func`3<Source, Target, bool>> predicate);
    public abstract virtual IUntypedSqlExpression And(Expression`1<Func`2<Target, bool>> predicate);
    public abstract virtual IUntypedSqlExpression And(Expression`1<Func`3<Source, Target, bool>> predicate);
    public abstract virtual IUntypedSqlExpression Or(Expression`1<Func`2<Target, bool>> predicate);
    public abstract virtual IUntypedSqlExpression Or(Expression`1<Func`3<Source, Target, bool>> predicate);
    public abstract virtual string SqlTable(ModelDefinition modelDef);
    public abstract virtual string SqlColumn(string columnName);
    public abstract virtual string ToDeleteRowStatement();
    public abstract virtual string ToCountStatement();
    public abstract virtual IList`1<string> GetAllFields();
    public abstract virtual Tuple`2<ModelDefinition, FieldDefinition> FirstMatchingField(string fieldName);
}
public class ServiceStack.OrmLite.JoinFormatDelegate : MulticastDelegate {
    public JoinFormatDelegate(object object, IntPtr method);
    public virtual string Invoke(IOrmLiteDialectProvider dialect, ModelDefinition tableDef, string joinExpr);
    public virtual IAsyncResult BeginInvoke(IOrmLiteDialectProvider dialect, ModelDefinition tableDef, string joinExpr, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<List`1<T>> SelectFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<List`1<T>> SelectFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<List`1<TModel>> SelectFmtAsync(IDbConnection dbConn, CancellationToken token, Type fromTableType, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<List`1<TModel>> SelectFmtAsync(IDbConnection dbConn, Type fromTableType, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<T> ScalarFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<T> ScalarFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<List`1<T>> ColumnFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<List`1<T>> ColumnFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<HashSet`1<T>> ColumnDistinctFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<HashSet`1<T>> ColumnDistinctFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<Dictionary`2<K, List`1<V>>> LookupFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<Dictionary`2<K, List`1<V>>> LookupFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<Dictionary`2<K, V>> DictionaryFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<Dictionary`2<K, V>> DictionaryFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<bool> ExistsFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<bool> ExistsFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.ExistsAsync(db.From<T>())")]
public static Task`1<bool> ExistsAsync(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<List`1<TOutputModel>> SqlProcedureFmtAsync(IDbConnection dbConn, CancellationToken token, object anonType, string sqlFilter, Object[] filterParams);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static class ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static List`1<T> SelectFmt(IDbConnection dbConn, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static List`1<TModel> SelectFmt(IDbConnection dbConn, Type fromTableType, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static IEnumerable`1<T> SelectLazyFmt(IDbConnection dbConn, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static T SingleFmt(IDbConnection dbConn, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static T ScalarFmt(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static List`1<T> ColumnFmt(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static HashSet`1<T> ColumnDistinctFmt(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Dictionary`2<K, List`1<V>> LookupFmt(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Dictionary`2<K, V> DictionaryFmt(IDbConnection dbConn, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static bool ExistsFmt(IDbConnection dbConn, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Exists(db.From<T>())")]
public static bool Exists(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
internal static class ServiceStack.OrmLite.Legacy.OrmLiteReadCommandExtensionsAsyncLegacy : object {
    [ExtensionAttribute]
internal static Task`1<T> SingleFmtAsync(IDbCommand dbCmd, CancellationToken token, string filter, Object[] filterParams);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectFmtAsync(IDbCommand dbCmd, CancellationToken token, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
internal static Task`1<List`1<TModel>> SelectFmtAsync(IDbCommand dbCmd, CancellationToken token, Type fromTableType, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
internal static Task`1<T> ScalarFmtAsync(IDbCommand dbCmd, CancellationToken token, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> ColumnFmtAsync(IDbCommand dbCmd, CancellationToken token, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static Task`1<HashSet`1<T>> ColumnDistinctFmtAsync(IDbCommand dbCmd, CancellationToken token, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, List`1<V>>> LookupFmtAsync(IDbCommand dbCmd, CancellationToken token, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, V>> DictionaryFmtAsync(IDbCommand dbCmd, CancellationToken token, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
internal static Task`1<bool> ExistsFmtAsync(IDbCommand dbCmd, CancellationToken token, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
internal static Task`1<int> DeleteFmtAsync(IDbCommand dbCmd, CancellationToken token, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
internal static Task`1<int> DeleteFmtAsync(IDbCommand dbCmd, CancellationToken token, Type tableType, string sqlFilter, Object[] filterParams);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
internal static class ServiceStack.OrmLite.Legacy.OrmLiteReadCommandExtensionsLegacy : object {
    [ExtensionAttribute]
internal static List`1<T> SelectFmt(IDbCommand dbCmd, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
internal static List`1<TModel> SelectFmt(IDbCommand dbCmd, Type fromTableType, string sqlFilter, Object[] filterParams);
    internal static string ToSelectFmt(IOrmLiteDialectProvider dialectProvider, Type fromTableType, string sqlFilter, Object[] filterParams);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.Legacy.OrmLiteReadCommandExtensionsLegacy/<SelectLazyFmt>d__3`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> SelectLazyFmt(IDbCommand dbCmd, string filter, Object[] filterParams);
    [ExtensionAttribute]
internal static T SingleFmt(IDbCommand dbCmd, string filter, Object[] filterParams);
    [ExtensionAttribute]
internal static T ScalarFmt(IDbCommand dbCmd, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static List`1<T> ColumnFmt(IDbCommand dbCmd, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static HashSet`1<T> ColumnDistinctFmt(IDbCommand dbCmd, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static Dictionary`2<K, List`1<V>> LookupFmt(IDbCommand dbCmd, string sql, Object[] sqlParams);
    [ExtensionAttribute]
internal static Dictionary`2<K, V> DictionaryFmt(IDbCommand dbCmd, string sqlFormat, Object[] sqlParams);
    [ExtensionAttribute]
internal static bool ExistsFmt(IDbCommand dbCmd, string sqlFilter, Object[] filterParams);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static class ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiAsyncLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SelectAsync(db.From<T>())")]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SelectAsync<Into, From>(db.From<T>())")]
public static Task`1<List`1<Into>> SelectAsync(IDbConnection dbConn, Func`2<SqlExpression`1<From>, SqlExpression`1<From>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SingleAsync(db.From<T>())")]
public static Task`1<T> SingleAsync(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SingleAsync("Age = @age", new { age = 42 })")]
public static Task`1<T> SingleFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SingleAsync("Age = @age", new { age = 42 })")]
public static Task`1<T> SingleFmtAsync(IDbConnection dbConn, string sqlFormat, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.CountAsync(db.From<T>())")]
public static Task`1<long> CountAsync(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.LoadSelectAsync(db.From<T>())")]
public static Task`1<List`1<T>> LoadSelectAsync(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, String[] include, CancellationToken token);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static class ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use From<T>")]
public static SqlExpression`1<T> SqlExpression(IDbConnection dbConn);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Select(db.From<T>())")]
public static List`1<T> Select(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Select<Into>(db.From<From>())")]
public static List`1<Into> Select(IDbConnection dbConn, SqlExpression`1<From> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Select<Into>(db.From<T>())")]
public static List`1<Into> Select(IDbConnection dbConn, Func`2<SqlExpression`1<From>, SqlExpression`1<From>> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Single(db.From<T>())")]
public static T Single(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Count(db.From<T>())")]
public static long Count(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.LoadSelect(db.From<T>())")]
public static List`1<T> LoadSelect(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, IEnumerable`1<string> include);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.LoadSelect(db.From<T>())")]
public static List`1<T> LoadSelect(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, Func`2<T, object> include);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.Legacy.OrmLiteWriteApiAsyncLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> DeleteFmtAsync(IDbConnection dbConn, CancellationToken token, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> DeleteFmtAsync(IDbConnection dbConn, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> DeleteFmtAsync(IDbConnection dbConn, CancellationToken token, Type tableType, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> DeleteFmtAsync(IDbConnection dbConn, Type tableType, string sqlFilter, Object[] filterParams);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static class ServiceStack.OrmLite.Legacy.OrmLiteWriteCommandExtensionsLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static int DeleteFmt(IDbConnection dbConn, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static int DeleteFmt(IDbConnection dbConn, Type tableType, string sqlFilter, Object[] filterParams);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static class ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.InsertOnlyAsync(obj, db.From<T>())")]
public static Task InsertOnlyAsync(IDbConnection dbConn, T obj, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields, CancellationToken token);
    [ExtensionAttribute]
public static Task InsertOnlyAsync(IDbConnection dbConn, T obj, SqlExpression`1<T> onlyFields, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.UpdateOnlyAsync(model, db.From<T>())")]
public static Task`1<int> UpdateOnlyAsync(IDbConnection dbConn, T model, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> UpdateFmtAsync(IDbConnection dbConn, string set, string where, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> UpdateFmtAsync(IDbConnection dbConn, string table, string set, string where, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> DeleteFmtAsync(IDbConnection dbConn, string where, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> DeleteFmtAsync(IDbConnection dbConn, string where);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static Task`1<int> DeleteFmtAsync(IDbConnection dbConn, string table, string where, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.DeleteAsync(db.From<T>())")]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> where, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.InsertOnly(obj, db.From<T>())")]
public static void InsertOnly(IDbConnection dbConn, T obj, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.UpdateOnly(model, db.From<T>())")]
public static int UpdateOnly(IDbConnection dbConn, T model, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static int UpdateFmt(IDbConnection dbConn, string set, string where);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static int UpdateFmt(IDbConnection dbConn, string table, string set, string where);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static int DeleteFmt(IDbConnection dbConn, string where);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static int DeleteFmt(IDbConnection dbConn, string table, string where);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Delete(db.From<T>())")]
public static int Delete(IDbConnection dbConn, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> where);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.InsertOnly(() => new Person { ... })")]
public static void InsertOnly(IDbConnection dbConn, T obj, SqlExpression`1<T> onlyFields);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
internal static class ServiceStack.OrmLite.Legacy.ReadExpressionCommandExtensionsAsyncLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SelectAsync(db.From<T>())")]
internal static Task`1<List`1<T>> SelectAsync(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SelectAsync(db.From<T>())")]
internal static Task`1<List`1<Into>> SelectAsync(IDbCommand dbCmd, Func`2<SqlExpression`1<From>, SqlExpression`1<From>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.SingleAsync(db.From<T>())")]
internal static Task`1<T> SingleAsync(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.CountAsync(db.From<T>())")]
internal static Task`1<long> CountAsync(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.LoadSelectAsync(db.From<T>())")]
internal static Task`1<List`1<T>> LoadSelectAsync(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, String[] include, CancellationToken token);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
internal static class ServiceStack.OrmLite.Legacy.ReadExpressionCommandExtensionsLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Select(db.From<T>())")]
internal static List`1<T> Select(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Select<Into,From>(db.From<From>())")]
internal static List`1<Into> Select(IDbCommand dbCmd, Func`2<SqlExpression`1<From>, SqlExpression`1<From>> expression);
    [ExtensionAttribute]
internal static List`1<Into> Select(IDbCommand dbCmd, SqlExpression`1<From> q);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Single(db.From<T>())")]
internal static T Single(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Count(db.From<T>())")]
internal static long Count(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.LoadSelect(db.From<T>())")]
internal static List`1<T> LoadSelect(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> expression, IEnumerable`1<string> include);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
internal static class ServiceStack.OrmLite.Legacy.WriteExpressionCommandExtensionsAsyncLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.InsertOnlyAsync(obj, db.From<T>())")]
internal static Task InsertOnlyAsync(IDbCommand dbCmd, T obj, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.UpdateOnlyAsync(model, db.From<T>())")]
internal static Task`1<int> UpdateOnlyAsync(IDbCommand dbCmd, T model, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateFmtAsync(IDbCommand dbCmd, string set, string where, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateFmtAsync(IDbCommand dbCmd, string table, string set, string where, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.DeleteAsync(db.From<T>())")]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> where, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteFmtAsync(IDbCommand dbCmd, string where, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteFmtAsync(IDbCommand dbCmd, string table, string where, CancellationToken token);
    [ExtensionAttribute]
internal static Task InsertOnlyAsync(IDbCommand dbCmd, T obj, SqlExpression`1<T> onlyFields, CancellationToken token);
}
[ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
internal static class ServiceStack.OrmLite.Legacy.WriteExpressionCommandExtensionsLegacy : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.InsertOnly(obj, db.From<T>())")]
public static void InsertOnly(IDbCommand dbCmd, T obj, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.UpdateOnly(model, db.From<T>())")]
public static int UpdateOnly(IDbCommand dbCmd, T model, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> onlyFields);
    [ExtensionAttribute]
public static int UpdateFmt(IDbCommand dbCmd, string set, string where);
    [ExtensionAttribute]
public static int UpdateFmt(IDbCommand dbCmd, string table, string set, string where);
    internal static string UpdateFmtSql(IOrmLiteDialectProvider dialectProvider, string table, string set, string where);
    [ExtensionAttribute]
internal static int DeleteFmt(IDbCommand dbCmd, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
internal static int DeleteFmt(IDbCommand dbCmd, Type tableType, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
public static int DeleteFmt(IDbCommand dbCmd, string where);
    [ExtensionAttribute]
public static int DeleteFmt(IDbCommand dbCmd, string table, string where);
    internal static string DeleteFmtSql(IOrmLiteDialectProvider dialectProvider, string table, string where);
    [ExtensionAttribute]
[ObsoleteAttribute("Use db.Delete(db.From<T>())")]
internal static int Delete(IDbCommand dbCmd, Func`2<SqlExpression`1<T>, SqlExpression`1<T>> where);
    [ExtensionAttribute]
[ObsoleteAttribute("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]
public static void InsertOnly(IDbCommand dbCmd, T obj, SqlExpression`1<T> onlyFields);
}
public class ServiceStack.OrmLite.LowercaseUnderscoreNamingStrategy : OrmLiteNamingStrategyBase {
    public virtual string GetTableName(string name);
    public virtual string GetColumnName(string name);
}
public static class ServiceStack.OrmLite.Messages : object {
    public static string LegacyApi;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.OrmLite.Migration : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CompletedDate>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamedConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [AutoIncrementAttribute]
public long Id { get; public set; }
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Description { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public Nullable`1<DateTime> CompletedDate { get; public set; }
    [NullableAttribute("1")]
public string ConnectionString { get; public set; }
    public string NamedConnection { get; public set; }
    [StringLengthAttribute("2147483647")]
public string Log { get; public set; }
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    [StringLengthAttribute("2147483647")]
public string ErrorStackTrace { get; public set; }
    [NullableAttribute("1")]
[StringLengthAttribute("2147483647")]
public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CompletedDate();
    [CompilerGeneratedAttribute]
public void set_CompletedDate(Nullable`1<DateTime> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ConnectionString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_NamedConnection();
    [CompilerGeneratedAttribute]
public void set_NamedConnection(string value);
    [CompilerGeneratedAttribute]
public string get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
public void set_ErrorStackTrace(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class ServiceStack.OrmLite.MigrationBase : object {
    [CompilerGeneratedAttribute]
private IDbConnectionFactory <DbFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbConnection <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CompletedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private StringBuilder <MigrationLog>k__BackingField;
    public IDbConnectionFactory DbFactory { get; public set; }
    public IDbConnection Db { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public string Log { get; public set; }
    public Nullable`1<DateTime> StartedAt { get; public set; }
    public Nullable`1<DateTime> CompletedDate { get; public set; }
    public Exception Error { get; public set; }
    [NullableAttribute("1")]
public StringBuilder MigrationLog { get; public set; }
    [CompilerGeneratedAttribute]
public IDbConnectionFactory get_DbFactory();
    [CompilerGeneratedAttribute]
public void set_DbFactory(IDbConnectionFactory value);
    [CompilerGeneratedAttribute]
public IDbConnection get_Db();
    [CompilerGeneratedAttribute]
public void set_Db(IDbConnection value);
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(IDbTransaction value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Log();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Log(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_StartedAt();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartedAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_CompletedDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CompletedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(Exception value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public StringBuilder get_MigrationLog();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MigrationLog(StringBuilder value);
    public virtual void AfterOpen();
    public virtual void BeforeCommit();
    public virtual void BeforeRollback();
    public virtual void Up();
    public virtual void Down();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.OrmLite.Migrator : object {
    public static string All;
    public static string Last;
    [CompilerGeneratedAttribute]
private IDbConnectionFactory <DbFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <MigrationTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    public IDbConnectionFactory DbFactory { get; }
    public Type[] MigrationTypes { get; }
    public TimeSpan Timeout { get; public set; }
    public ILog Log { get; public set; }
    public Migrator(IDbConnectionFactory dbFactory, Assembly[] migrationAssemblies);
    public Migrator(IDbConnectionFactory dbFactory, Type[] migrationTypes);
    [CompilerGeneratedAttribute]
public IDbConnectionFactory get_DbFactory();
    [CompilerGeneratedAttribute]
public Type[] get_MigrationTypes();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public ILog get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(ILog value);
    private Type GetNextMigrationToRun(IDbConnection db, List`1<Type> migrationTypes);
    public AppTaskResult Run();
    public AppTaskResult Run(bool throwIfError);
    private void LogMigrationsFound(List`1<Type> remainingMigrations);
    public static List`1<Type> GetAllMigrationTypes(Assembly[] migrationAssemblies);
    public static void Init(IDbConnection db);
    public static void Recreate(IDbConnection db);
    public static void Clear(IDbConnection db);
    private Type GetNextMigrationRevertToRun(IDbConnection db, List`1<Type> migrationTypes);
    public AppTaskResult Revert(string migrationName);
    public AppTaskResult Revert(string migrationName, bool throwIfError);
    public static AppTaskResult Down(IDbConnectionFactory dbFactory, Type migrationType);
    public static AppTaskResult Down(IDbConnectionFactory dbFactory, Type[] migrationTypes);
    public static AppTaskResult Up(IDbConnectionFactory dbFactory, Type migrationType);
    public static AppTaskResult Up(IDbConnectionFactory dbFactory, Type[] migrationTypes);
    public static MigrationBase Run(IDbConnectionFactory dbFactory, Type nextRun, Action`1<MigrationBase> migrateAction, string namedConnection);
    public static AppTaskResult RunAll(IDbConnectionFactory dbFactory, IEnumerable`1<Type> migrationTypes, Action`1<MigrationBase> migrateAction);
}
public class ServiceStack.OrmLite.ModelDefinition : object {
    public static string RowVersionName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreCreateTableSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostCreateTableSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreDropTableSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostDropTableSql>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition <RowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FieldDefinition> <FieldDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition[] <FieldDefinitionsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition[] <FieldDefinitionsWithAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FieldDefinition> <IgnoredFieldDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition[] <IgnoredFieldDefinitionsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition[] <AllFieldDefinitionsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition[] <ReferenceFieldDefinitionsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ReferenceFieldNames>k__BackingField;
    private object fieldDefLock;
    private Dictionary`2<string, FieldDefinition> fieldDefinitionMap;
    private Func`2<string, string> fieldNameSanitizer;
    [CompilerGeneratedAttribute]
private FieldDefinition[] <AutoIdFields>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CompositeIndexAttribute> <CompositeIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UniqueConstraintAttribute> <UniqueConstraints>k__BackingField;
    public string Name { get; public set; }
    public string Alias { get; public set; }
    public string Schema { get; public set; }
    public string PreCreateTableSql { get; public set; }
    public string PostCreateTableSql { get; public set; }
    public string PreDropTableSql { get; public set; }
    public string PostDropTableSql { get; public set; }
    public bool IsInSchema { get; }
    public bool HasAutoIncrementId { get; }
    public bool HasSequenceAttribute { get; }
    public FieldDefinition RowVersion { get; public set; }
    public string ModelName { get; }
    public Type ModelType { get; public set; }
    public FieldDefinition PrimaryKey { get; }
    public List`1<FieldDefinition> FieldDefinitions { get; public set; }
    public FieldDefinition[] FieldDefinitionsArray { get; private set; }
    public FieldDefinition[] FieldDefinitionsWithAliases { get; private set; }
    public List`1<FieldDefinition> IgnoredFieldDefinitions { get; public set; }
    public FieldDefinition[] IgnoredFieldDefinitionsArray { get; private set; }
    public FieldDefinition[] AllFieldDefinitionsArray { get; private set; }
    public FieldDefinition[] ReferenceFieldDefinitionsArray { get; private set; }
    public HashSet`1<string> ReferenceFieldNames { get; private set; }
    public FieldDefinition[] AutoIdFields { get; private set; }
    public List`1<CompositeIndexAttribute> CompositeIndexes { get; public set; }
    public List`1<UniqueConstraintAttribute> UniqueConstraints { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_PreCreateTableSql();
    [CompilerGeneratedAttribute]
public void set_PreCreateTableSql(string value);
    [CompilerGeneratedAttribute]
public string get_PostCreateTableSql();
    [CompilerGeneratedAttribute]
public void set_PostCreateTableSql(string value);
    [CompilerGeneratedAttribute]
public string get_PreDropTableSql();
    [CompilerGeneratedAttribute]
public void set_PreDropTableSql(string value);
    [CompilerGeneratedAttribute]
public string get_PostDropTableSql();
    [CompilerGeneratedAttribute]
public void set_PostDropTableSql(string value);
    public bool get_IsInSchema();
    public bool get_HasAutoIncrementId();
    public bool get_HasSequenceAttribute();
    [CompilerGeneratedAttribute]
public FieldDefinition get_RowVersion();
    [CompilerGeneratedAttribute]
public void set_RowVersion(FieldDefinition value);
    public string get_ModelName();
    [CompilerGeneratedAttribute]
public Type get_ModelType();
    [CompilerGeneratedAttribute]
public void set_ModelType(Type value);
    public FieldDefinition get_PrimaryKey();
    public object GetPrimaryKey(object instance);
    [CompilerGeneratedAttribute]
public List`1<FieldDefinition> get_FieldDefinitions();
    [CompilerGeneratedAttribute]
public void set_FieldDefinitions(List`1<FieldDefinition> value);
    [CompilerGeneratedAttribute]
public FieldDefinition[] get_FieldDefinitionsArray();
    [CompilerGeneratedAttribute]
private void set_FieldDefinitionsArray(FieldDefinition[] value);
    [CompilerGeneratedAttribute]
public FieldDefinition[] get_FieldDefinitionsWithAliases();
    [CompilerGeneratedAttribute]
private void set_FieldDefinitionsWithAliases(FieldDefinition[] value);
    [CompilerGeneratedAttribute]
public List`1<FieldDefinition> get_IgnoredFieldDefinitions();
    [CompilerGeneratedAttribute]
public void set_IgnoredFieldDefinitions(List`1<FieldDefinition> value);
    [CompilerGeneratedAttribute]
public FieldDefinition[] get_IgnoredFieldDefinitionsArray();
    [CompilerGeneratedAttribute]
private void set_IgnoredFieldDefinitionsArray(FieldDefinition[] value);
    [CompilerGeneratedAttribute]
public FieldDefinition[] get_AllFieldDefinitionsArray();
    [CompilerGeneratedAttribute]
private void set_AllFieldDefinitionsArray(FieldDefinition[] value);
    [CompilerGeneratedAttribute]
public FieldDefinition[] get_ReferenceFieldDefinitionsArray();
    [CompilerGeneratedAttribute]
private void set_ReferenceFieldDefinitionsArray(FieldDefinition[] value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ReferenceFieldNames();
    [CompilerGeneratedAttribute]
private void set_ReferenceFieldNames(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public FieldDefinition[] get_AutoIdFields();
    [CompilerGeneratedAttribute]
private void set_AutoIdFields(FieldDefinition[] value);
    public List`1<FieldDefinition> GetAutoIdFieldDefinitions();
    public FieldDefinition[] GetOrderedFieldDefinitions(ICollection`1<string> fieldNames, Func`2<string, string> sanitizeFieldName);
    public Dictionary`2<string, FieldDefinition> GetFieldDefinitionMap(Func`2<string, string> sanitizeFieldName);
    [CompilerGeneratedAttribute]
public List`1<CompositeIndexAttribute> get_CompositeIndexes();
    [CompilerGeneratedAttribute]
public void set_CompositeIndexes(List`1<CompositeIndexAttribute> value);
    [CompilerGeneratedAttribute]
public List`1<UniqueConstraintAttribute> get_UniqueConstraints();
    [CompilerGeneratedAttribute]
public void set_UniqueConstraints(List`1<UniqueConstraintAttribute> value);
    public FieldDefinition GetFieldDefinition(Expression`1<Func`2<T, object>> field);
    private void ThrowNoFieldException(string fieldName);
    public FieldDefinition AssertFieldDefinition(string fieldName);
    public FieldDefinition GetFieldDefinition(string fieldName);
    public FieldDefinition AssertFieldDefinition(string fieldName, Func`2<string, string> sanitizeFieldName);
    public FieldDefinition GetFieldDefinition(string fieldName, Func`2<string, string> sanitizeFieldName);
    public string GetQuotedName(string fieldName, IOrmLiteDialectProvider dialectProvider);
    public FieldDefinition GetFieldDefinition(Func`2<string, bool> predicate);
    public void AfterInit();
    public bool IsRefField(FieldDefinition fieldDef);
    private bool IsRefField(string name);
    public virtual string ToString();
    public bool IsReference(string fieldName);
    public bool HasAnyReferences(IEnumerable`1<string> fieldNames);
    public static ModelDefinition For(Type modelType);
}
public static class ServiceStack.OrmLite.ModelDefinition`1 : object {
    private static ModelDefinition definition;
    private static string primaryKeyName;
    public static ModelDefinition Definition { get; }
    public static string PrimaryKeyName { get; }
    public static ModelDefinition get_Definition();
    public static string get_PrimaryKeyName();
}
public abstract class ServiceStack.OrmLite.NativeValueOrmLiteConverter : OrmLiteConverter {
    public virtual string ToQuotedString(Type fieldType, object value);
}
public class ServiceStack.OrmLite.ObjectRow : ValueType {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Fields>k__BackingField;
    public Type Type { get; }
    public object Fields { get; }
    public ObjectRow(Type type, object fields);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual object get_Fields();
}
public enum ServiceStack.OrmLite.OnFkOption : Enum {
    public int value__;
    public static OnFkOption Cascade;
    public static OnFkOption SetNull;
    public static OnFkOption NoAction;
    public static OnFkOption SetDefault;
    public static OnFkOption Restrict;
}
public class ServiceStack.OrmLite.OrmLiteCommand : object {
    private OrmLiteConnection dbConn;
    private IDbCommand dbCmd;
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <DialectProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public bool IsDisposed { get; private set; }
    public Guid ConnectionId { get; }
    public IDbConnection Connection { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public IDbCommand DbCommand { get; }
    public OrmLiteCommand(OrmLiteConnection dbConn, IDbCommand dbCmd);
    [CompilerGeneratedAttribute]
public sealed virtual IOrmLiteDialectProvider get_DialectProvider();
    [CompilerGeneratedAttribute]
public void set_DialectProvider(IOrmLiteDialectProvider value);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public Guid get_ConnectionId();
    public sealed virtual void Dispose();
    public sealed virtual void Prepare();
    public sealed virtual void Cancel();
    public sealed virtual IDbDataParameter CreateParameter();
    public sealed virtual int ExecuteNonQuery();
    public sealed virtual IDataReader ExecuteReader();
    public sealed virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public sealed virtual object ExecuteScalar();
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual void set_Connection(IDbConnection value);
    public sealed virtual IDbTransaction get_Transaction();
    public sealed virtual void set_Transaction(IDbTransaction value);
    public sealed virtual string get_CommandText();
    public sealed virtual void set_CommandText(string value);
    public sealed virtual int get_CommandTimeout();
    public sealed virtual void set_CommandTimeout(int value);
    public sealed virtual CommandType get_CommandType();
    public sealed virtual void set_CommandType(CommandType value);
    public sealed virtual IDataParameterCollection get_Parameters();
    public sealed virtual UpdateRowSource get_UpdatedRowSource();
    public sealed virtual void set_UpdatedRowSource(UpdateRowSource value);
    public sealed virtual IDbCommand get_DbCommand();
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteConfig : object {
    public static string IdField;
    private static int DefaultCommandTimeout;
    private static Nullable`1<int> commandTimeout;
    private static IOrmLiteDialectProvider dialectProvider;
    private static string RequiresOrmLiteConnection;
    [CompilerGeneratedAttribute]
private static bool <DisableColumnGuessFallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <StripUpperInLike>k__BackingField;
    private static IOrmLiteExecFilter execFilter;
    [CompilerGeneratedAttribute]
private static Action`1<IDbCommand> <BeforeExecFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<IDbCommand> <AfterExecFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<IDbCommand, object> <InsertFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<IDbCommand, object> <UpdateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<IUntypedSqlExpression> <SqlExpressionSelectFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<Type, string, string> <LoadReferenceSelectFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <StringFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<FieldDefinition, object> <OnDbNullFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<object> <PopulatedObjectFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<IDbCommand, Exception> <ExceptionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ThrowOnError>k__BackingField;
    public static Func`2<string, string> SanitizeFieldNameForParamNameFn;
    [CompilerGeneratedAttribute]
private static bool <IsCaseInsensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DeoptimizeReader>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <SkipForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IncludeTablePrefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<IUntypedSqlExpression> <SqlExpressionInitFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <ParamNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<ModelDefinition> <OnModelDefinitionInit>k__BackingField;
    public static int CommandTimeout { get; public set; }
    public static IOrmLiteDialectProvider DialectProvider { get; public set; }
    public static bool DisableColumnGuessFallback { get; public set; }
    public static bool StripUpperInLike { get; public set; }
    public static IOrmLiteResultsFilter ResultsFilter { get; public set; }
    public static IOrmLiteExecFilter ExecFilter { get; public set; }
    public static Action`1<IDbCommand> BeforeExecFilter { get; public set; }
    public static Action`1<IDbCommand> AfterExecFilter { get; public set; }
    public static Action`2<IDbCommand, object> InsertFilter { get; public set; }
    public static Action`2<IDbCommand, object> UpdateFilter { get; public set; }
    public static Action`1<IUntypedSqlExpression> SqlExpressionSelectFilter { get; public set; }
    public static Func`3<Type, string, string> LoadReferenceSelectFilter { get; public set; }
    public static Func`2<string, string> StringFilter { get; public set; }
    public static Func`2<FieldDefinition, object> OnDbNullFilter { get; public set; }
    public static Action`1<object> PopulatedObjectFilter { get; public set; }
    public static Action`2<IDbCommand, Exception> ExceptionFilter { get; public set; }
    public static bool ThrowOnError { get; public set; }
    public static bool IsCaseInsensitive { get; public set; }
    public static bool DeoptimizeReader { get; public set; }
    public static bool SkipForeignKeys { get; public set; }
    public static bool IncludeTablePrefixes { get; public set; }
    public static Action`1<IUntypedSqlExpression> SqlExpressionInitFilter { get; public set; }
    public static Func`2<string, string> ParamNameFilter { get; public set; }
    public static Action`1<ModelDefinition> OnModelDefinitionInit { get; public set; }
    private static OrmLiteConfig();
    public static int get_CommandTimeout();
    public static void set_CommandTimeout(int value);
    public static IOrmLiteDialectProvider get_DialectProvider();
    public static void set_DialectProvider(IOrmLiteDialectProvider value);
    [ExtensionAttribute]
public static IOrmLiteDialectProvider GetDialectProvider(IDbCommand dbCmd);
    [ExtensionAttribute]
public static IOrmLiteDialectProvider Dialect(IDbCommand dbCmd);
    [ExtensionAttribute]
public static IOrmLiteDialectProvider GetDialectProvider(IDbConnection db);
    [ExtensionAttribute]
public static INamingStrategy GetNamingStrategy(IDbConnection db);
    [ExtensionAttribute]
public static IOrmLiteDialectProvider Dialect(IDbConnection db);
    [ExtensionAttribute]
public static IOrmLiteExecFilter GetExecFilter(IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
public static IOrmLiteExecFilter GetExecFilter(IDbCommand dbCmd);
    [ExtensionAttribute]
public static IOrmLiteExecFilter GetExecFilter(IDbConnection db);
    [ExtensionAttribute]
public static void SetLastCommandText(IDbConnection db, string sql);
    [ExtensionAttribute]
public static void SetLastCommand(IDbConnection db, IDbCommand dbCmd);
    [ExtensionAttribute]
public static void SetCommandTimeout(IDbConnection db, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static void SetCommandTimeout(IDbConnection db, Nullable`1<TimeSpan> commandTimeout);
    [ExtensionAttribute]
public static IDbConnection ToDbConnection(string dbConnectionStringOrFilePath);
    [ExtensionAttribute]
public static IDbConnection OpenDbConnection(string dbConnectionStringOrFilePath);
    [ExtensionAttribute]
public static IDbConnection OpenReadOnlyDbConnection(string dbConnectionStringOrFilePath);
    public static void ClearCache();
    [ExtensionAttribute]
public static ModelDefinition GetModelMetadata(Type modelType);
    [ExtensionAttribute]
public static IDbConnection ToDbConnection(string dbConnectionStringOrFilePath, IOrmLiteDialectProvider dialectProvider);
    public static void ResetLogFactory(ILogFactory logFactory);
    [CompilerGeneratedAttribute]
public static bool get_DisableColumnGuessFallback();
    [CompilerGeneratedAttribute]
public static void set_DisableColumnGuessFallback(bool value);
    [CompilerGeneratedAttribute]
public static bool get_StripUpperInLike();
    [CompilerGeneratedAttribute]
public static void set_StripUpperInLike(bool value);
    public static IOrmLiteResultsFilter get_ResultsFilter();
    public static void set_ResultsFilter(IOrmLiteResultsFilter value);
    public static IOrmLiteExecFilter get_ExecFilter();
    public static void set_ExecFilter(IOrmLiteExecFilter value);
    [CompilerGeneratedAttribute]
public static Action`1<IDbCommand> get_BeforeExecFilter();
    [CompilerGeneratedAttribute]
public static void set_BeforeExecFilter(Action`1<IDbCommand> value);
    [CompilerGeneratedAttribute]
public static Action`1<IDbCommand> get_AfterExecFilter();
    [CompilerGeneratedAttribute]
public static void set_AfterExecFilter(Action`1<IDbCommand> value);
    [CompilerGeneratedAttribute]
public static Action`2<IDbCommand, object> get_InsertFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertFilter(Action`2<IDbCommand, object> value);
    [CompilerGeneratedAttribute]
public static Action`2<IDbCommand, object> get_UpdateFilter();
    [CompilerGeneratedAttribute]
public static void set_UpdateFilter(Action`2<IDbCommand, object> value);
    [CompilerGeneratedAttribute]
public static Action`1<IUntypedSqlExpression> get_SqlExpressionSelectFilter();
    [CompilerGeneratedAttribute]
public static void set_SqlExpressionSelectFilter(Action`1<IUntypedSqlExpression> value);
    [CompilerGeneratedAttribute]
public static Func`3<Type, string, string> get_LoadReferenceSelectFilter();
    [CompilerGeneratedAttribute]
public static void set_LoadReferenceSelectFilter(Func`3<Type, string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_StringFilter();
    [CompilerGeneratedAttribute]
public static void set_StringFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<FieldDefinition, object> get_OnDbNullFilter();
    [CompilerGeneratedAttribute]
public static void set_OnDbNullFilter(Func`2<FieldDefinition, object> value);
    [CompilerGeneratedAttribute]
public static Action`1<object> get_PopulatedObjectFilter();
    [CompilerGeneratedAttribute]
public static void set_PopulatedObjectFilter(Action`1<object> value);
    [CompilerGeneratedAttribute]
public static Action`2<IDbCommand, Exception> get_ExceptionFilter();
    [CompilerGeneratedAttribute]
public static void set_ExceptionFilter(Action`2<IDbCommand, Exception> value);
    [CompilerGeneratedAttribute]
public static bool get_ThrowOnError();
    [CompilerGeneratedAttribute]
public static void set_ThrowOnError(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsCaseInsensitive();
    [CompilerGeneratedAttribute]
public static void set_IsCaseInsensitive(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DeoptimizeReader();
    [CompilerGeneratedAttribute]
public static void set_DeoptimizeReader(bool value);
    [CompilerGeneratedAttribute]
public static bool get_SkipForeignKeys();
    [CompilerGeneratedAttribute]
public static void set_SkipForeignKeys(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IncludeTablePrefixes();
    [CompilerGeneratedAttribute]
public static void set_IncludeTablePrefixes(bool value);
    [CompilerGeneratedAttribute]
public static Action`1<IUntypedSqlExpression> get_SqlExpressionInitFilter();
    [CompilerGeneratedAttribute]
public static void set_SqlExpressionInitFilter(Action`1<IUntypedSqlExpression> value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_ParamNameFilter();
    [CompilerGeneratedAttribute]
public static void set_ParamNameFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Action`1<ModelDefinition> get_OnModelDefinitionInit();
    [CompilerGeneratedAttribute]
public static void set_OnModelDefinitionInit(Action`1<ModelDefinition> value);
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.OrmLiteConfigExtensions : object {
    private static Dictionary`2<Type, ModelDefinition> typeModelDefinitionMap;
    private static OrmLiteConfigExtensions();
    internal static bool CheckForIdField(IEnumerable`1<PropertyInfo> objProperties);
    internal static void ClearCache();
    [ExtensionAttribute]
internal static ModelDefinition GetModelDefinition(Type modelType);
    [ExtensionAttribute]
public static StringLengthAttribute CalculateStringLength(PropertyInfo propertyInfo, DecimalLengthAttribute decimalAttribute);
    [CompilerGeneratedAttribute]
internal static string <GetModelDefinition>g__JoinSql|3_0(List`1<string> statements);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteConflictResolutions : object {
    [ExtensionAttribute]
public static void OnConflictIgnore(IDbCommand dbCmd);
    [ExtensionAttribute]
public static void OnConflict(IDbCommand dbCmd, string conflictResolution);
}
public class ServiceStack.OrmLite.OrmLiteConnection : object {
    public OrmLiteConnectionFactory Factory;
    [CompilerGeneratedAttribute]
private IDbTransaction <Transaction>k__BackingField;
    private IDbConnection dbConnection;
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <DialectProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastCommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbCommand <LastCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    private string connectionString;
    [CompilerGeneratedAttribute]
private bool <AutoDisposeConnection>k__BackingField;
    public IDbTransaction Transaction { get; public set; }
    public IDbTransaction DbTransaction { get; }
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public string LastCommandText { get; public set; }
    public IDbCommand LastCommand { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public Guid ConnectionId { get; public set; }
    public IDbConnection DbConnection { get; }
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public bool AutoDisposeConnection { get; public set; }
    public OrmLiteConnection(OrmLiteConnectionFactory factory);
    [CompilerGeneratedAttribute]
public sealed virtual IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Transaction(IDbTransaction value);
    public sealed virtual IDbTransaction get_DbTransaction();
    [CompilerGeneratedAttribute]
public sealed virtual IOrmLiteDialectProvider get_DialectProvider();
    [CompilerGeneratedAttribute]
public void set_DialectProvider(IOrmLiteDialectProvider value);
    [CompilerGeneratedAttribute]
public string get_LastCommandText();
    [CompilerGeneratedAttribute]
public void set_LastCommandText(string value);
    [CompilerGeneratedAttribute]
public IDbCommand get_LastCommand();
    [CompilerGeneratedAttribute]
public void set_LastCommand(IDbCommand value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(Guid value);
    public sealed virtual IDbConnection get_DbConnection();
    public sealed virtual void Dispose();
    public sealed virtual IDbTransaction BeginTransaction();
    public sealed virtual IDbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public sealed virtual void Close();
    public sealed virtual void ChangeDatabase(string databaseName);
    public sealed virtual IDbCommand CreateCommand();
    public sealed virtual void Open();
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteConnection/<OpenAsync>d__38")]
public Task OpenAsync(CancellationToken token);
    public sealed virtual string get_ConnectionString();
    public sealed virtual void set_ConnectionString(string value);
    public sealed virtual int get_ConnectionTimeout();
    public sealed virtual string get_Database();
    public sealed virtual ConnectionState get_State();
    [CompilerGeneratedAttribute]
public bool get_AutoDisposeConnection();
    [CompilerGeneratedAttribute]
public void set_AutoDisposeConnection(bool value);
    public static DbConnection op_Explicit(OrmLiteConnection dbConn);
}
public class ServiceStack.OrmLite.OrmLiteConnectionFactory : object {
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <DialectProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDisposeConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDbConnection, IDbConnection> <ConnectionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbCommand <AlwaysReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbTransaction <AlwaysReturnTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<OrmLiteConnection> <OnDispose>k__BackingField;
    private OrmLiteConnection ormLiteConnection;
    private static Dictionary`2<string, IOrmLiteDialectProvider> dialectProviders;
    private static Dictionary`2<string, OrmLiteConnectionFactory> namedConnections;
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public string ConnectionString { get; public set; }
    public bool AutoDisposeConnection { get; public set; }
    public Func`2<IDbConnection, IDbConnection> ConnectionFilter { get; public set; }
    public IDbCommand AlwaysReturnCommand { get; public set; }
    public IDbTransaction AlwaysReturnTransaction { get; public set; }
    public Action`1<OrmLiteConnection> OnDispose { get; public set; }
    private OrmLiteConnection OrmLiteConnection { get; }
    public static Dictionary`2<string, IOrmLiteDialectProvider> DialectProviders { get; }
    public static Dictionary`2<string, OrmLiteConnectionFactory> NamedConnections { get; }
    public OrmLiteConnectionFactory(string connectionString);
    public OrmLiteConnectionFactory(string connectionString, IOrmLiteDialectProvider dialectProvider);
    public OrmLiteConnectionFactory(string connectionString, IOrmLiteDialectProvider dialectProvider, bool setGlobalDialectProvider);
    [CompilerGeneratedAttribute]
public IOrmLiteDialectProvider get_DialectProvider();
    [CompilerGeneratedAttribute]
public void set_DialectProvider(IOrmLiteDialectProvider value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoDisposeConnection();
    [CompilerGeneratedAttribute]
public void set_AutoDisposeConnection(bool value);
    [CompilerGeneratedAttribute]
public Func`2<IDbConnection, IDbConnection> get_ConnectionFilter();
    [CompilerGeneratedAttribute]
public void set_ConnectionFilter(Func`2<IDbConnection, IDbConnection> value);
    [CompilerGeneratedAttribute]
public IDbCommand get_AlwaysReturnCommand();
    [CompilerGeneratedAttribute]
public void set_AlwaysReturnCommand(IDbCommand value);
    [CompilerGeneratedAttribute]
public IDbTransaction get_AlwaysReturnTransaction();
    [CompilerGeneratedAttribute]
public void set_AlwaysReturnTransaction(IDbTransaction value);
    [CompilerGeneratedAttribute]
public Action`1<OrmLiteConnection> get_OnDispose();
    [CompilerGeneratedAttribute]
public void set_OnDispose(Action`1<OrmLiteConnection> value);
    private OrmLiteConnection get_OrmLiteConnection();
    public virtual IDbConnection CreateDbConnection();
    public static IDbConnection CreateDbConnection(string namedConnection);
    public virtual IDbConnection OpenDbConnection();
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteConnectionFactory/<OpenDbConnectionAsync>d__38")]
public virtual Task`1<IDbConnection> OpenDbConnectionAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteConnectionFactory/<OpenDbConnectionAsync>d__39")]
public virtual Task`1<IDbConnection> OpenDbConnectionAsync(string namedConnection, CancellationToken token);
    public virtual IDbConnection OpenDbConnectionString(string connectionString);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteConnectionFactory/<OpenDbConnectionStringAsync>d__41")]
public virtual Task`1<IDbConnection> OpenDbConnectionStringAsync(string connectionString, CancellationToken token);
    public virtual IDbConnection OpenDbConnectionString(string connectionString, string providerName);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteConnectionFactory/<OpenDbConnectionStringAsync>d__43")]
public virtual Task`1<IDbConnection> OpenDbConnectionStringAsync(string connectionString, string providerName, CancellationToken token);
    public virtual IDbConnection OpenDbConnection(string namedConnection);
    public static Dictionary`2<string, IOrmLiteDialectProvider> get_DialectProviders();
    public virtual void RegisterDialectProvider(string providerName, IOrmLiteDialectProvider dialectProvider);
    public static Dictionary`2<string, OrmLiteConnectionFactory> get_NamedConnections();
    public virtual void RegisterConnection(string namedConnection, string connectionString, IOrmLiteDialectProvider dialectProvider);
    public virtual void RegisterConnection(string namedConnection, OrmLiteConnectionFactory connectionFactory);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions : object {
    [ExtensionAttribute]
public static IDbConnection Open(IDbConnectionFactory connectionFactory);
    [ExtensionAttribute]
public static Task`1<IDbConnection> OpenDbConnectionAsync(IDbConnectionFactory connectionFactory, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<IDbConnection> OpenAsync(IDbConnectionFactory connectionFactory, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<IDbConnection> OpenAsync(IDbConnectionFactory connectionFactory, string namedConnection, CancellationToken token);
    [ExtensionAttribute]
public static IDbConnection Open(IDbConnectionFactory connectionFactory, string namedConnection);
    [ExtensionAttribute]
public static IDbConnection OpenDbConnection(IDbConnectionFactory connectionFactory, string namedConnection);
    [ExtensionAttribute]
public static Task`1<IDbConnection> OpenDbConnectionAsync(IDbConnectionFactory connectionFactory, string namedConnection, CancellationToken token);
    [ExtensionAttribute]
public static IDbConnection OpenDbConnectionString(IDbConnectionFactory connectionFactory, string connectionString);
    [ExtensionAttribute]
public static IDbConnection OpenDbConnectionString(IDbConnectionFactory connectionFactory, string connectionString, string providerName);
    [ExtensionAttribute]
public static Task`1<IDbConnection> OpenDbConnectionStringAsync(IDbConnectionFactory connectionFactory, string connectionString, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<IDbConnection> OpenDbConnectionStringAsync(IDbConnectionFactory connectionFactory, string connectionString, string providerName, CancellationToken token);
    [ExtensionAttribute]
public static IOrmLiteDialectProvider GetDialectProvider(IDbConnectionFactory connectionFactory, ConnectionInfo dbInfo);
    [ExtensionAttribute]
public static IOrmLiteDialectProvider GetDialectProvider(IDbConnectionFactory connectionFactory, string providerName, string namedConnection);
    [ExtensionAttribute]
public static IDbConnection ToDbConnection(IDbConnection db);
    [ExtensionAttribute]
public static IDbCommand ToDbCommand(IDbCommand dbCmd);
    [ExtensionAttribute]
public static IDbTransaction ToDbTransaction(IDbTransaction dbTrans);
    [ExtensionAttribute]
public static Guid GetConnectionId(IDbConnection db);
    [ExtensionAttribute]
public static Guid GetConnectionId(IDbCommand dbCmd);
    [ExtensionAttribute]
public static void RegisterConnection(IDbConnectionFactory dbFactory, string namedConnection, string connectionString, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
public static void RegisterConnection(IDbConnectionFactory dbFactory, string namedConnection, OrmLiteConnectionFactory connectionFactory);
    [ExtensionAttribute]
public static IDbConnection OpenDbConnection(IDbConnectionFactory dbFactory, ConnectionInfo connInfo);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions/<OpenDbConnectionAsync>d__21")]
[ExtensionAttribute]
public static Task`1<IDbConnection> OpenDbConnectionAsync(IDbConnectionFactory dbFactory, ConnectionInfo connInfo);
    [ExtensionAttribute]
public static Dictionary`2<string, OrmLiteConnectionFactory> GetNamedConnections(IDbConnectionFactory dbFactory);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteConnectionUtils : object {
    [ExtensionAttribute]
public static bool InTransaction(IDbConnection db);
    [ExtensionAttribute]
public static IDbTransaction GetTransaction(IDbConnection db);
}
public class ServiceStack.OrmLite.OrmLiteContext : object {
    public static OrmLiteContext Instance;
    public static bool UseThreadStatic;
    [ThreadStaticAttribute]
public static IDictionary ContextItems;
    private AsyncLocal`1<IDictionary> localContextItems;
    private static string _key;
    public IDictionary Items { get; public set; }
    public static OrmLiteState OrmLiteState { get; public set; }
    internal static IDbTransaction TSTransaction { get; internal set; }
    private static OrmLiteContext();
    public virtual IDictionary get_Items();
    public virtual void set_Items(IDictionary value);
    private IDictionary GetItems();
    private IDictionary CreateItems(IDictionary items);
    public void ClearItems();
    public T GetOrCreate(Func`1<T> createFn);
    internal static void SetItem(string key, T value);
    public static OrmLiteState CreateNewState();
    public static OrmLiteState GetOrCreateState();
    public static OrmLiteState get_OrmLiteState();
    public static void set_OrmLiteState(OrmLiteState value);
    internal static IDbTransaction get_TSTransaction();
    internal static void set_TSTransaction(IDbTransaction value);
}
public abstract class ServiceStack.OrmLite.OrmLiteConverter : object {
    public static ILog Log;
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <DialectProvider>k__BackingField;
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public string ColumnDefinition { get; }
    public DbType DbType { get; }
    private static OrmLiteConverter();
    [CompilerGeneratedAttribute]
public sealed virtual IOrmLiteDialectProvider get_DialectProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DialectProvider(IOrmLiteDialectProvider value);
    public abstract virtual string get_ColumnDefinition();
    public virtual DbType get_DbType();
    public virtual string ToQuotedString(Type fieldType, object value);
    public virtual void InitDbParam(IDbDataParameter p, Type fieldType);
    public virtual object ToDbValue(Type fieldType, object value);
    public virtual object FromDbValue(Type fieldType, object value);
    public virtual object GetValue(IDataReader reader, int columnIndex, Object[] values);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteConverterExtensions : object {
    [ExtensionAttribute]
public static object ConvertNumber(IOrmLiteConverter converter, Type toIntegerType, object value);
    [ExtensionAttribute]
public static object ConvertNumber(IOrmLiteDialectProvider dialectProvider, Type toIntegerType, object value);
}
public class ServiceStack.OrmLite.OrmLiteDataParameter : object {
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public string ParameterName { get; public set; }
    public string SourceColumn { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public object Value { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DbType get_DbType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public sealed virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ParameterName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceVersion(DataRowVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Precision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Precision(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Scale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scale(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Size();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Size(int value);
}
public class ServiceStack.OrmLite.OrmLiteDefaultNamingStrategy : OrmLiteNamingStrategyBase {
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.OrmLiteDiagnostics : object {
    [ExtensionAttribute]
public static Guid WriteCommandBefore(DiagnosticListener listener, IDbCommand dbCmd, string operation);
    [ExtensionAttribute]
public static void WriteCommandAfter(DiagnosticListener listener, Guid operationId, IDbCommand dbCmd, string operation);
    [ExtensionAttribute]
public static void WriteCommandError(DiagnosticListener listener, Guid operationId, IDbCommand dbCmd, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionOpenBefore(DiagnosticListener listener, IDbConnection dbConn, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenAfter(DiagnosticListener listener, Guid operationId, IDbConnection dbConn, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenError(DiagnosticListener listener, Guid operationId, IDbConnection dbConn, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionCloseBefore(DiagnosticListener listener, IDbConnection dbConn, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseAfter(DiagnosticListener listener, Guid operationId, Guid clientConnectionId, IDbConnection dbConn, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseError(DiagnosticListener listener, Guid operationId, Guid clientConnectionId, IDbConnection dbConn, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionOpen(DiagnosticListener listener, IsolationLevel isolationLevel, IDbConnection dbConn, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionCommitBefore(DiagnosticListener listener, IsolationLevel isolationLevel, IDbConnection dbConn, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitAfter(DiagnosticListener listener, Guid operationId, IsolationLevel isolationLevel, IDbConnection dbConn, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitError(DiagnosticListener listener, Guid operationId, IsolationLevel isolationLevel, IDbConnection dbConn, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionRollbackBefore(DiagnosticListener listener, IsolationLevel isolationLevel, IDbConnection dbConn, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackAfter(DiagnosticListener listener, Guid operationId, IsolationLevel isolationLevel, IDbConnection dbConn, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackError(DiagnosticListener listener, Guid operationId, IsolationLevel isolationLevel, IDbConnection dbConn, string transactionName, Exception ex, string operation);
}
public abstract class ServiceStack.OrmLite.OrmLiteDialectProviderBase`1 : object {
    protected static ILog Log;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrmLiteExecFilter <ExecFilter>k__BackingField;
    public Dictionary`2<Type, IOrmLiteConverter> Converters;
    public string AutoIncrementDefinition;
    [CompilerGeneratedAttribute]
private Action`1<IDbConnection> <OnOpenConnection>k__BackingField;
    internal int OneTimeConnectionCommandsRun;
    [CompilerGeneratedAttribute]
private List`1<string> <OneTimeConnectionCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ConnectionCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParamString>k__BackingField;
    [CompilerGeneratedAttribute]
private INamingStrategy <NamingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringSerializer <StringSerializer>k__BackingField;
    private Func`2<string, string> paramNameFilter;
    public string DefaultValueFormat;
    private EnumConverter enumConverter;
    private RowVersionConverter rowVersionConverter;
    private ReferenceTypeConverter referenceTypeConverter;
    private ValueTypeConverter valueTypeConverter;
    [CompilerGeneratedAttribute]
private string <SelectIdentitySql>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ModelDefinition, IEnumerable`1<FieldDefinition>> <CreateTableFieldsStrategy>k__BackingField;
    public Dictionary`2<string, string> Variables { get; public set; }
    public IOrmLiteExecFilter ExecFilter { get; public set; }
    public DecimalConverter DecimalConverter { get; }
    public StringConverter StringConverter { get; }
    public Action`1<IDbConnection> OnOpenConnection { get; public set; }
    unknown bool AllowLoadLocalInfile {public set; }
    public List`1<string> OneTimeConnectionCommands { get; }
    public List`1<string> ConnectionCommands { get; }
    public string ParamString { get; public set; }
    public INamingStrategy NamingStrategy { get; public set; }
    public IStringSerializer StringSerializer { get; public set; }
    public Func`2<string, string> ParamNameFilter { get; public set; }
    public bool SupportsSchema { get; }
    public bool SupportsConcurrentWrites { get; }
    public EnumConverter EnumConverter { get; public set; }
    public RowVersionConverter RowVersionConverter { get; public set; }
    public ReferenceTypeConverter ReferenceTypeConverter { get; public set; }
    public ValueTypeConverter ValueTypeConverter { get; public set; }
    public string SelectIdentitySql { get; public set; }
    public Func`2<ModelDefinition, IEnumerable`1<FieldDefinition>> CreateTableFieldsStrategy { get; public set; }
    public string SqlRandom { get; }
    public bool SupportsAsync { get; }
    private static OrmLiteDialectProviderBase`1();
    protected void InitColumnTypeMap();
    public string GetColumnTypeDefinition(Type columnType, Nullable`1<int> fieldLength, Nullable`1<int> scale);
    public virtual void InitDbParam(IDbDataParameter dbParam, Type columnType);
    public abstract virtual IDbDataParameter CreateParam();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrmLiteExecFilter get_ExecFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecFilter(IOrmLiteExecFilter value);
    public DecimalConverter get_DecimalConverter();
    public StringConverter get_StringConverter();
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IDbConnection> get_OnOpenConnection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnOpenConnection(Action`1<IDbConnection> value);
    public void set_AllowLoadLocalInfile(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_OneTimeConnectionCommands();
    [CompilerGeneratedAttribute]
public List`1<string> get_ConnectionCommands();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ParamString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParamString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual INamingStrategy get_NamingStrategy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NamingStrategy(INamingStrategy value);
    [CompilerGeneratedAttribute]
public sealed virtual IStringSerializer get_StringSerializer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StringSerializer(IStringSerializer value);
    public sealed virtual Func`2<string, string> get_ParamNameFilter();
    public sealed virtual void set_ParamNameFilter(Func`2<string, string> value);
    public virtual bool get_SupportsSchema();
    public virtual bool get_SupportsConcurrentWrites();
    public EnumConverter get_EnumConverter();
    public void set_EnumConverter(EnumConverter value);
    public RowVersionConverter get_RowVersionConverter();
    public void set_RowVersionConverter(RowVersionConverter value);
    public ReferenceTypeConverter get_ReferenceTypeConverter();
    public void set_ReferenceTypeConverter(ReferenceTypeConverter value);
    public ValueTypeConverter get_ValueTypeConverter();
    public void set_ValueTypeConverter(ValueTypeConverter value);
    public void RemoveConverter();
    public virtual void Init(string connectionString);
    public sealed virtual void RegisterConverter(IOrmLiteConverter converter);
    public sealed virtual IOrmLiteConverter GetConverter(Type type);
    public virtual bool ShouldQuoteValue(Type fieldType);
    public virtual object FromDbRowVersion(Type fieldType, object value);
    public sealed virtual IOrmLiteConverter GetConverterBestMatch(Type type);
    public virtual IOrmLiteConverter GetConverterBestMatch(FieldDefinition fieldDef);
    public virtual object ToDbValue(object value, Type type);
    public virtual object FromDbValue(object value, Type type);
    public sealed virtual object GetValue(IDataReader reader, int columnIndex, Type type);
    public virtual int GetValues(IDataReader reader, Object[] values);
    public abstract virtual IDbConnection CreateConnection(string filePath, Dictionary`2<string, string> options);
    public virtual string GetQuotedValue(string paramValue);
    public virtual string GetSchemaName(string schema);
    public virtual string GetTableName(Type modelType);
    public virtual string GetTableName(ModelDefinition modelDef);
    public virtual string GetTableName(ModelDefinition modelDef, bool useStrategy);
    public virtual string GetTableName(string table, string schema);
    public virtual string GetTableName(string table, string schema, bool useStrategy);
    public virtual string GetQuotedTableName(Type modelType);
    public virtual string GetQuotedTableName(ModelDefinition modelDef);
    public virtual string GetQuotedTableName(string tableName, string schema);
    public virtual string GetQuotedTableName(string tableName, string schema, bool useStrategy);
    public virtual string GetQuotedColumnName(string columnName);
    public virtual bool ShouldQuote(string name);
    public virtual string QuoteIfRequired(string name);
    public virtual string GetQuotedName(string name);
    public virtual string GetQuotedName(string name, string schema);
    public virtual string SanitizeFieldNameForParamName(string fieldName);
    public virtual string GetColumnDefinition(FieldDefinition fieldDef);
    [CompilerGeneratedAttribute]
public virtual string get_SelectIdentitySql();
    [CompilerGeneratedAttribute]
public virtual void set_SelectIdentitySql(string value);
    public virtual long GetLastInsertId(IDbCommand dbCmd);
    public virtual string GetLastInsertIdSqlSuffix();
    public virtual bool IsFullSelectStatement(string sql);
    public virtual string ToSelectStatement(Type tableType, string sqlFilter, Object[] filterParams);
    protected virtual void ApplyTags(StringBuilder sqlBuilder, ISet`1<string> tags);
    public virtual string ToSelectStatement(QueryType queryType, ModelDefinition modelDef, string selectExpression, string bodyExpression, string orderByExpression, Nullable`1<int> offset, Nullable`1<int> rows, ISet`1<string> tags);
    public virtual string GenerateComment(String& modreq(System.Runtime.InteropServices.InAttribute) text);
    public virtual void InitConnection(IDbConnection dbConn);
    public virtual SelectItem GetRowVersionSelectColumn(FieldDefinition field, string tablePrefix);
    public virtual string GetRowVersionColumn(FieldDefinition field, string tablePrefix);
    public virtual string GetColumnNames(ModelDefinition modelDef);
    public virtual SelectItem[] GetColumnNames(ModelDefinition modelDef, string tablePrefix);
    protected virtual bool ShouldSkipInsert(FieldDefinition fieldDef);
    public virtual string ColumnNameOnly(string columnExpr);
    public virtual FieldDefinition[] GetInsertFieldDefinitions(ModelDefinition modelDef, ICollection`1<string> insertFields);
    public virtual void AppendInsertRowValueSql(StringBuilder sbColumnValues, FieldDefinition fieldDef, object obj);
    public virtual string ToInsertRowSql(T obj, ICollection`1<string> insertFields);
    public virtual string ToInsertRowsSql(IEnumerable`1<T> objs, ICollection`1<string> insertFields);
    public virtual void BulkInsert(IDbConnection db, IEnumerable`1<T> objs, BulkInsertConfig config);
    public virtual string ToInsertRowStatement(IDbCommand cmd, object objWithProperties, ICollection`1<string> insertFields);
    public virtual string ToInsertStatement(IDbCommand dbCmd, T item, ICollection`1<string> insertFields);
    protected virtual object GetInsertDefaultValue(FieldDefinition fieldDef);
    public virtual void PrepareParameterizedInsertStatement(IDbCommand cmd, ICollection`1<string> insertFields, Func`2<FieldDefinition, bool> shouldInclude);
    public virtual void PrepareInsertRowStatement(IDbCommand dbCmd, Dictionary`2<string, object> args);
    public virtual string ToUpdateStatement(IDbCommand dbCmd, T item, ICollection`1<string> updateFields);
    private IDbDataParameter[] ToArray(IDataParameterCollection dbParams);
    public virtual string MergeParamsIntoSql(string sql, IEnumerable`1<IDbDataParameter> dbParams);
    public virtual string GetRefSelfSql(SqlExpression`1<From> refQ, ModelDefinition modelDef, FieldDefinition refSelf, ModelDefinition refModelDef);
    public virtual string GetRefFieldSql(string subSql, ModelDefinition refModelDef, FieldDefinition refField);
    public virtual string GetFieldReferenceSql(string subSql, FieldDefinition fieldDef, FieldReference fieldRef);
    public virtual bool PrepareParameterizedUpdateStatement(IDbCommand cmd, ICollection`1<string> updateFields);
    public virtual void AppendNullFieldCondition(StringBuilder sqlFilter, FieldDefinition fieldDef);
    public virtual void AppendFieldCondition(StringBuilder sqlFilter, FieldDefinition fieldDef, IDbCommand cmd);
    public virtual bool PrepareParameterizedDeleteStatement(IDbCommand cmd, IDictionary`2<string, object> deleteFieldValues);
    public virtual void PrepareStoredProcedureStatement(IDbCommand cmd, T obj);
    protected IDbDataParameter AddParameter(IDbCommand cmd, FieldDefinition fieldDef);
    public virtual void SetParameter(FieldDefinition fieldDef, IDbDataParameter p);
    public virtual void EnableIdentityInsert(IDbCommand cmd);
    public virtual Task EnableIdentityInsertAsync(IDbCommand cmd, CancellationToken token);
    public virtual void DisableIdentityInsert(IDbCommand cmd);
    public virtual Task DisableIdentityInsertAsync(IDbCommand cmd, CancellationToken token);
    public virtual void EnableForeignKeysCheck(IDbCommand cmd);
    public virtual Task EnableForeignKeysCheckAsync(IDbCommand cmd, CancellationToken token);
    public virtual void DisableForeignKeysCheck(IDbCommand cmd);
    public virtual Task DisableForeignKeysCheckAsync(IDbCommand cmd, CancellationToken token);
    public virtual void SetParameterValues(IDbCommand dbCmd, object obj);
    public sealed virtual Dictionary`2<string, FieldDefinition> GetFieldDefinitionMap(ModelDefinition modelDef);
    public virtual void SetParameterValue(FieldDefinition fieldDef, IDataParameter p, object obj);
    protected virtual void SetParameterSize(FieldDefinition fieldDef, IDataParameter p);
    protected virtual object GetValue(FieldDefinition fieldDef, object obj);
    public sealed virtual object GetFieldValue(FieldDefinition fieldDef, object value);
    public sealed virtual object GetFieldValue(Type fieldType, object value);
    protected virtual object GetValueOrDbNull(FieldDefinition fieldDef, object obj);
    protected virtual object GetQuotedValueOrDbNull(FieldDefinition fieldDef, object obj);
    public virtual void PrepareUpdateRowStatement(IDbCommand dbCmd, object objWithProperties, ICollection`1<string> updateFields);
    public virtual void PrepareUpdateRowStatement(IDbCommand dbCmd, Dictionary`2<string, object> args, string sqlFilter);
    public virtual void PrepareUpdateRowAddStatement(IDbCommand dbCmd, Dictionary`2<string, object> args, string sqlFilter);
    public virtual string ToDeleteStatement(Type tableType, string sqlFilter, Object[] filterParams);
    public virtual bool HasInsertReturnValues(ModelDefinition modelDef);
    public sealed virtual string GetDefaultValue(Type tableType, string fieldName);
    public virtual string GetDefaultValue(FieldDefinition fieldDef);
    public virtual string ResolveFragment(string sql);
    public virtual string GetAutoIdDefaultValue(FieldDefinition fieldDef);
    [CompilerGeneratedAttribute]
public Func`2<ModelDefinition, IEnumerable`1<FieldDefinition>> get_CreateTableFieldsStrategy();
    [CompilerGeneratedAttribute]
public void set_CreateTableFieldsStrategy(Func`2<ModelDefinition, IEnumerable`1<FieldDefinition>> value);
    public static IEnumerable`1<FieldDefinition> GetFieldDefinitions(ModelDefinition modelDef);
    public abstract virtual string ToCreateSchemaStatement(string schemaName);
    public virtual List`1<string> GetSchemas(IDbCommand dbCmd);
    public virtual Dictionary`2<string, List`1<string>> GetSchemaTables(IDbCommand dbCmd);
    public abstract virtual bool DoesSchemaExist(IDbCommand dbCmd, string schemaName);
    public virtual Task`1<bool> DoesSchemaExistAsync(IDbCommand dbCmd, string schema, CancellationToken token);
    public virtual string ToCreateTableStatement(Type tableType);
    public virtual string GetUniqueConstraints(ModelDefinition modelDef);
    protected virtual string GetUniqueConstraintName(UniqueConstraintAttribute constraint, string tableName);
    public virtual string GetCheckConstraint(ModelDefinition modelDef, FieldDefinition fieldDef);
    public virtual string ToPostCreateTableStatement(ModelDefinition modelDef);
    public virtual string ToPostDropTableStatement(ModelDefinition modelDef);
    public virtual string GetForeignKeyOnDeleteClause(ForeignKeyConstraint foreignKey);
    public virtual string GetForeignKeyOnUpdateClause(ForeignKeyConstraint foreignKey);
    public virtual List`1<string> ToCreateIndexStatements(Type tableType);
    public virtual bool DoesTableExist(IDbConnection db, string tableName, string schema);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteDialectProviderBase`1/<DoesTableExistAsync>d__187")]
public virtual Task`1<bool> DoesTableExistAsync(IDbConnection db, string tableName, string schema, CancellationToken token);
    public virtual bool DoesTableExist(IDbCommand dbCmd, string tableName, string schema);
    public virtual Task`1<bool> DoesTableExistAsync(IDbCommand dbCmd, string tableName, string schema, CancellationToken token);
    public virtual bool DoesColumnExist(IDbConnection db, string columnName, string tableName, string schema);
    public virtual Task`1<bool> DoesColumnExistAsync(IDbConnection db, string columnName, string tableName, string schema, CancellationToken token);
    public virtual bool DoesSequenceExist(IDbCommand dbCmd, string sequence);
    public virtual Task`1<bool> DoesSequenceExistAsync(IDbCommand dbCmd, string sequenceName, CancellationToken token);
    protected virtual string GetIndexName(bool isUnique, string modelName, string fieldName);
    protected virtual string GetCompositeIndexName(CompositeIndexAttribute compositeIndex, ModelDefinition modelDef);
    protected virtual string GetCompositeIndexNameWithSchema(CompositeIndexAttribute compositeIndex, ModelDefinition modelDef);
    protected virtual string ToCreateIndexStatement(bool isUnique, string indexName, ModelDefinition modelDef, string fieldName, bool isCombined, FieldDefinition fieldDef);
    public virtual List`1<string> ToCreateSequenceStatements(Type tableType);
    public virtual string ToCreateSequenceStatement(Type tableType, string sequenceName);
    public virtual string ToCreateSavePoint(string name);
    public virtual string ToReleaseSavePoint(string name);
    public virtual string ToRollbackSavePoint(string name);
    public virtual List`1<string> SequenceList(Type tableType);
    public virtual Task`1<List`1<string>> SequenceListAsync(Type tableType, CancellationToken token);
    public virtual string ToExistStatement(Type fromTableType, object objWithProperties, string sqlFilter, Object[] filterParams);
    public virtual string ToSelectFromProcedureStatement(object fromObjWithProperties, Type outputModelType, string sqlFilter, Object[] filterParams);
    public virtual string ToExecuteProcedureStatement(object objWithProperties);
    protected static ModelDefinition GetModel(Type modelType);
    public virtual SqlExpression`1<T> SqlExpression();
    public sealed virtual IDbCommand CreateParameterizedDeleteStatement(IDbConnection connection, object objWithProperties);
    public virtual string GetDropForeignKeyConstraints(ModelDefinition modelDef);
    public virtual string ToAddColumnStatement(string schema, string table, FieldDefinition fieldDef);
    public virtual string ToAlterColumnStatement(string schema, string table, FieldDefinition fieldDef);
    public virtual string ToChangeColumnNameStatement(string schema, string table, FieldDefinition fieldDef, string oldColumn);
    public virtual string ToRenameColumnStatement(string schema, string table, string oldColumn, string newColumn);
    public virtual string ToAddForeignKeyStatement(Expression`1<Func`2<T, object>> field, Expression`1<Func`2<TForeign, object>> foreignField, OnFkOption onUpdate, OnFkOption onDelete, string foreignKeyName);
    public virtual string ToDropForeignKeyStatement(string schema, string table, string foreignKeyName);
    public virtual string ToDropConstraintStatement(string schema, string table, string constraintName);
    public virtual string ToCreateIndexStatement(Expression`1<Func`2<T, object>> field, string indexName, bool unique);
    protected virtual string FkOptionToString(OnFkOption option);
    public virtual string GetQuotedValue(object value, Type fieldType);
    public virtual object GetParamValue(object value, Type fieldType);
    public virtual void InitQueryParam(IDbDataParameter param);
    public virtual void InitUpdateParam(IDbDataParameter param);
    public virtual string EscapeWildcards(string value);
    public virtual string GetLoadChildrenSubSelect(SqlExpression`1<From> expr);
    public virtual string ToRowCountStatement(string innerSql);
    public virtual string ToDropColumnStatement(string schema, string table, string column);
    public virtual string ToTableNamesStatement(string schema);
    public virtual string ToTableNamesWithRowCountsStatement(bool live, string schema);
    public virtual string SqlConflict(string sql, string conflictResolution);
    public virtual string SqlConcat(IEnumerable`1<object> args);
    public virtual string SqlCurrency(string fieldOrValue);
    public virtual string SqlCurrency(string fieldOrValue, string currencySymbol);
    public virtual string SqlBool(bool value);
    public virtual string SqlLimit(Nullable`1<int> offset, Nullable`1<int> rows);
    public virtual string SqlCast(object fieldOrValue, string castAs);
    public virtual string get_SqlRandom();
    public virtual bool get_SupportsAsync();
    public virtual Task OpenAsync(IDbConnection db, CancellationToken token);
    public virtual Task`1<IDataReader> ExecuteReaderAsync(IDbCommand cmd, CancellationToken token);
    public virtual Task`1<int> ExecuteNonQueryAsync(IDbCommand cmd, CancellationToken token);
    public virtual Task`1<object> ExecuteScalarAsync(IDbCommand cmd, CancellationToken token);
    public virtual Task`1<bool> ReadAsync(IDataReader reader, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteDialectProviderBase`1/<ReaderEach>d__247`1")]
public virtual Task`1<List`1<T>> ReaderEach(IDataReader reader, Func`1<T> fn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteDialectProviderBase`1/<ReaderEach>d__248`1")]
public virtual Task`1<Return> ReaderEach(IDataReader reader, Action fn, Return source, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteDialectProviderBase`1/<ReaderRead>d__249`1")]
public virtual Task`1<T> ReaderRead(IDataReader reader, Func`1<T> fn, CancellationToken token);
    public virtual Task`1<long> InsertAndGetLastInsertIdAsync(IDbCommand dbCmd, CancellationToken token);
    [CompilerGeneratedAttribute]
private string <GetInsertFieldDefinitions>b__118_0(string name);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteDialectProviderExtensions : object {
    [ExtensionAttribute]
public static string GetParam(IOrmLiteDialectProvider dialect, string name, string format);
    [ExtensionAttribute]
public static string GetParam(IOrmLiteDialectProvider dialect, string name);
    [ExtensionAttribute]
public static string GetParam(IOrmLiteDialectProvider dialect, int indexNo);
    [ExtensionAttribute]
public static string ToFieldName(IOrmLiteDialectProvider dialect, string paramName);
    [ExtensionAttribute]
public static string FmtTable(string tableName, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string FmtColumn(string columnName, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string GetQuotedColumnName(IOrmLiteDialectProvider dialect, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static string GetQuotedColumnName(IOrmLiteDialectProvider dialect, ModelDefinition tableDef, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static string GetQuotedColumnName(IOrmLiteDialectProvider dialect, ModelDefinition tableDef, string tableAlias, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static string GetQuotedColumnName(IOrmLiteDialectProvider dialect, ModelDefinition tableDef, string fieldName);
    [ExtensionAttribute]
public static string GetQuotedColumnName(IOrmLiteDialectProvider dialect, ModelDefinition tableDef, string tableAlias, string fieldName);
    [ExtensionAttribute]
public static object FromDbValue(IOrmLiteDialectProvider dialect, IDataReader reader, int columnIndex, Type type);
    [ExtensionAttribute]
public static IOrmLiteConverter GetConverter(IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static bool HasConverter(IOrmLiteDialectProvider dialect, Type type);
    [ExtensionAttribute]
public static StringConverter GetStringConverter(IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static DecimalConverter GetDecimalConverter(IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static DateTimeConverter GetDateTimeConverter(IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static bool IsMySqlConnector(IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static void InitDbParam(IOrmLiteDialectProvider dialect, IDbDataParameter dbParam, Type columnType);
    [ExtensionAttribute]
public static void InitDbParam(IOrmLiteDialectProvider dialect, IDbDataParameter dbParam, Type columnType, object value);
    [ExtensionAttribute]
public static string SqlSpread(IOrmLiteDialectProvider dialect, T[] values);
    [ExtensionAttribute]
public static string ToAddColumnStatement(IOrmLiteDialectProvider dialect, Type modelType, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static string ToAlterColumnStatement(IOrmLiteDialectProvider dialect, Type modelType, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static string ToChangeColumnNameStatement(IOrmLiteDialectProvider dialect, Type modelType, FieldDefinition fieldDef, string oldColumnName);
    [ExtensionAttribute]
public static string ToRenameColumnStatement(IOrmLiteDialectProvider dialect, Type modelType, string oldColumnName, string newColumnName);
    [ExtensionAttribute]
public static string ToDropColumnStatement(IOrmLiteDialectProvider dialect, Type modelType, string columnName);
    [ExtensionAttribute]
public static string ToDropConstraintStatement(IOrmLiteDialectProvider dialect, Type modelType, string constraintName);
}
public class ServiceStack.OrmLite.OrmLiteExecFilter : object {
    public virtual SqlExpression`1<T> SqlExpression(IDbConnection dbConn);
    public virtual IDbCommand CreateCommand(IDbConnection dbConn);
    public virtual void DisposeCommand(IDbCommand dbCmd, IDbConnection dbConn);
    public virtual T Exec(IDbConnection dbConn, Func`2<IDbCommand, T> filter);
    public virtual IDbCommand Exec(IDbConnection dbConn, Func`2<IDbCommand, IDbCommand> filter);
    public virtual void Exec(IDbConnection dbConn, Action`1<IDbCommand> filter);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteExecFilter/<Exec>d__6`1")]
public virtual Task`1<T> Exec(IDbConnection dbConn, Func`2<IDbCommand, Task`1<T>> filter);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteExecFilter/<Exec>d__7")]
public virtual Task`1<IDbCommand> Exec(IDbConnection dbConn, Func`2<IDbCommand, Task`1<IDbCommand>> filter);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteExecFilter/<Exec>d__8")]
public virtual Task Exec(IDbConnection dbConn, Func`2<IDbCommand, Task> filter);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.OrmLiteExecFilter/<ExecLazy>d__9`1")]
public virtual IEnumerable`1<T> ExecLazy(IDbConnection dbConn, Func`2<IDbCommand, IEnumerable`1<T>> filter);
}
public class ServiceStack.OrmLite.OrmLiteNamingStrategyBase : object {
    public virtual string GetSchemaName(string name);
    public virtual string GetSchemaName(ModelDefinition modelDef);
    public virtual string GetTableName(string name);
    public virtual string GetTableName(ModelDefinition modelDef);
    public virtual string GetColumnName(string name);
    public virtual string GetSequenceName(string modelName, string fieldName);
    public virtual string ApplyNameRestrictions(string name);
}
public class ServiceStack.OrmLite.OrmLitePersistenceProvider : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    protected bool DisposeConnection;
    protected IDbConnection connection;
    protected string ConnectionString { get; protected set; }
    public IDbConnection Connection { get; }
    public OrmLitePersistenceProvider(string connectionString);
    public OrmLitePersistenceProvider(IDbConnection connection);
    [CompilerGeneratedAttribute]
protected string get_ConnectionString();
    [CompilerGeneratedAttribute]
protected void set_ConnectionString(string value);
    public IDbConnection get_Connection();
    private IDbCommand CreateCommand();
    public sealed virtual T GetById(object id);
    public sealed virtual IList`1<T> GetByIds(ICollection ids);
    public sealed virtual T Store(T entity);
    public sealed virtual void StoreAll(IEnumerable`1<TEntity> entities);
    public sealed virtual void Delete(T entity);
    public sealed virtual void DeleteById(object id);
    public sealed virtual void DeleteByIds(ICollection ids);
    public sealed virtual void DeleteAll();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteReadApi : object {
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn);
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn, string sql);
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static List`1<TModel> Select(IDbConnection dbConn, Type fromTableType, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<TModel> Select(IDbConnection dbConn, Type fromTableType);
    [ExtensionAttribute]
public static List`1<T> Where(IDbConnection dbConn, string name, object value);
    [ExtensionAttribute]
public static List`1<T> Where(IDbConnection dbConn, object anonType);
    [ExtensionAttribute]
public static List`1<T> SelectByIds(IDbConnection dbConn, IEnumerable idValues);
    [ExtensionAttribute]
public static List`1<T> SelectNonDefaults(IDbConnection dbConn, T filter);
    [ExtensionAttribute]
public static List`1<T> SelectNonDefaults(IDbConnection dbConn, string sql, T filter);
    [ExtensionAttribute]
public static IEnumerable`1<T> SelectLazy(IDbConnection dbConn);
    [ExtensionAttribute]
public static IEnumerable`1<T> SelectLazy(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static IEnumerable`1<T> SelectLazy(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereLazy(IDbConnection dbConn, object anonType);
    [ExtensionAttribute]
public static T Single(IDbConnection dbConn, object anonType);
    [ExtensionAttribute]
public static T Single(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static T Single(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static T SingleById(IDbConnection dbConn, object idValue);
    [ExtensionAttribute]
public static T SingleWhere(IDbConnection dbConn, string name, object value);
    [ExtensionAttribute]
public static T Scalar(IDbConnection dbConn, ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static T Scalar(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static T Scalar(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<T> Column(IDbConnection dbConn, ISqlExpression query);
    [ExtensionAttribute]
public static List`1<T> Column(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static IEnumerable`1<T> ColumnLazy(IDbConnection dbConn, ISqlExpression query);
    [ExtensionAttribute]
public static IEnumerable`1<T> ColumnLazy(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static IEnumerable`1<T> ColumnLazy(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<T> Column(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static HashSet`1<T> ColumnDistinct(IDbConnection dbConn, ISqlExpression query);
    [ExtensionAttribute]
public static HashSet`1<T> ColumnDistinct(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static HashSet`1<T> ColumnDistinct(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static Dictionary`2<K, List`1<V>> Lookup(IDbConnection dbConn, ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static Dictionary`2<K, List`1<V>> Lookup(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static Dictionary`2<K, List`1<V>> Lookup(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static Dictionary`2<K, V> Dictionary(IDbConnection dbConn, ISqlExpression query);
    [ExtensionAttribute]
public static Dictionary`2<K, V> Dictionary(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<KeyValuePair`2<K, V>> KeyValuePairs(IDbConnection dbConn, ISqlExpression query);
    [ExtensionAttribute]
public static List`1<KeyValuePair`2<K, V>> KeyValuePairs(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static bool Exists(IDbConnection dbConn, Expression`1<Func`2<T, bool>> expression);
    [ExtensionAttribute]
public static bool Exists(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static bool Exists(IDbConnection dbConn, object anonType);
    [ExtensionAttribute]
public static bool Exists(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<T> SqlList(IDbConnection dbConn, ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static List`1<T> SqlList(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static List`1<T> SqlList(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<T> SqlList(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static List`1<T> SqlList(IDbConnection dbConn, string sql, Action`1<IDbCommand> dbCmdFilter);
    [ExtensionAttribute]
public static IDbCommand SqlProc(IDbConnection dbConn, string name, object inParams, bool excludeDefaults);
    [ExtensionAttribute]
public static List`1<T> SqlColumn(IDbConnection dbConn, ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static List`1<T> SqlColumn(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static List`1<T> SqlColumn(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static List`1<T> SqlColumn(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static T SqlScalar(IDbConnection dbConn, ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static T SqlScalar(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static T SqlScalar(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static T SqlScalar(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static long LastInsertId(IDbConnection dbConn);
    [ExtensionAttribute]
public static int ExecuteNonQuery(IDbConnection dbConn, string sql);
    [ExtensionAttribute]
public static int ExecuteNonQuery(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static int ExecuteNonQuery(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static int ExecuteNonQuery(IDbConnection dbConn, string sql, Action`1<IDbCommand> dbCmdFilter);
    [ExtensionAttribute]
public static List`1<TOutputModel> SqlProcedure(IDbConnection dbConn, object anonType);
    [ExtensionAttribute]
public static List`1<TOutputModel> SqlProcedure(IDbConnection dbConn, object anonType, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
public static long LongScalar(IDbConnection dbConn);
    [ExtensionAttribute]
public static T LoadSingleById(IDbConnection dbConn, object idValue, String[] include);
    [ExtensionAttribute]
public static T LoadSingleById(IDbConnection dbConn, object idValue, Expression`1<Func`2<T, object>> include);
    [ExtensionAttribute]
public static void LoadReferences(IDbConnection dbConn, T instance);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteReadApiAsync : object {
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<TModel>> SelectAsync(IDbConnection dbConn, Type fromTableType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<TModel>> SelectAsync(IDbConnection dbConn, Type fromTableType, string sqlFilter, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> WhereAsync(IDbConnection dbConn, string name, object value, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> WhereAsync(IDbConnection dbConn, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectByIdsAsync(IDbConnection dbConn, IEnumerable idValues, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectNonDefaultsAsync(IDbConnection dbConn, T filter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectNonDefaultsAsync(IDbConnection dbConn, string sql, T filter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IDbConnection dbConn, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleByIdAsync(IDbConnection dbConn, object idValue, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleWhereAsync(IDbConnection dbConn, string name, object value, CancellationToken token);
    [ExtensionAttribute]
public static T ScalarAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static Task`1<T> ScalarAsync(IDbConnection dbConn, ISqlExpression sqlExpression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> ScalarAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> ScalarAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> ColumnAsync(IDbConnection dbConn, ISqlExpression query, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> ColumnAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> ColumnAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<HashSet`1<T>> ColumnDistinctAsync(IDbConnection dbConn, ISqlExpression query, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<HashSet`1<T>> ColumnDistinctAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<HashSet`1<T>> ColumnDistinctAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<K, List`1<V>>> LookupAsync(IDbConnection dbConn, ISqlExpression sqlExpression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<K, List`1<V>>> LookupAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<K, List`1<V>>> LookupAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<K, V>> DictionaryAsync(IDbConnection dbConn, ISqlExpression query, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<K, V>> DictionaryAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<K, V>> DictionaryAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<KeyValuePair`2<K, V>>> KeyValuePairsAsync(IDbConnection dbConn, ISqlExpression query, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<KeyValuePair`2<K, V>>> KeyValuePairsAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<KeyValuePair`2<K, V>>> KeyValuePairsAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> ExistsAsync(IDbConnection dbConn, Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> ExistsAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> ExistsAsync(IDbConnection dbConn, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> ExistsAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlListAsync(IDbConnection dbConn, ISqlExpression sqlExpression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlListAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlListAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlListAsync(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlListAsync(IDbConnection dbConn, string sql, Action`1<IDbCommand> dbCmdFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlColumnAsync(IDbConnection dbConn, ISqlExpression sqlExpression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlColumnAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlColumnAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SqlColumnAsync(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SqlScalarAsync(IDbConnection dbConn, ISqlExpression sqlExpression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SqlScalarAsync(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SqlScalarAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SqlScalarAsync(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(IDbConnection dbConn, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(IDbConnection dbConn, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<TOutputModel>> SqlProcedureAsync(IDbConnection dbConn, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> LongScalarAsync(IDbConnection dbConn, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> LoadSingleByIdAsync(IDbConnection dbConn, object idValue, String[] include, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> LoadSingleByIdAsync(IDbConnection dbConn, object idValue, Expression`1<Func`2<T, object>> include, CancellationToken token);
    [ExtensionAttribute]
public static Task LoadReferencesAsync(IDbConnection dbConn, T instance, String[] include, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteReadCommandExtensions : object {
    internal static ILog Log;
    public static string UseDbConnectionExtensions;
    private static OrmLiteReadCommandExtensions();
    [ExtensionAttribute]
internal static IDataReader ExecReader(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static IDataReader ExecReader(IDbCommand dbCmd, string sql, CommandBehavior commandBehavior);
    [ExtensionAttribute]
internal static IDataReader ExecReader(IDbCommand dbCmd, string sql, IEnumerable`1<IDataParameter> parameters);
    [ExtensionAttribute]
internal static List`1<T> Select(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static void SetFilter(IDbCommand dbCmd, string name, object value);
    [ExtensionAttribute]
internal static IDbCommand SetFilters(IDbCommand dbCmd, object anonType, bool excludeDefaults);
    [ExtensionAttribute]
internal static void PopulateWith(IDbCommand dbCmd, ISqlExpression expression, QueryType queryType);
    [ExtensionAttribute]
internal static IDbCommand SetParameters(IDbCommand dbCmd, object anonType, bool excludeDefaults, String& sql);
    [ExtensionAttribute]
internal static IDbCommand SetParameters(IDbCommand dbCmd, IEnumerable`1<IDbDataParameter> sqlParams);
    private static IEnumerable GetMultiValues(object value);
    [ExtensionAttribute]
internal static IDbCommand SetParameters(IDbCommand dbCmd, Dictionary`2<string, object> dict, bool excludeDefaults, String& sql);
    [ExtensionAttribute]
internal static IDbCommand SetParameters(IDbCommand dbCmd, Type type, object anonType, bool excludeDefaults, String& sql);
    [ExtensionAttribute]
internal static void SetParamValue(IOrmLiteDialectProvider dialectProvider, IDbDataParameter p, object value, Type propType, FieldDefinition fieldDef);
    [ExtensionAttribute]
internal static void ForEachParam(Dictionary`2<string, object> values, ModelDefinition modelDef, bool excludeDefaults, ParamIterDelegate fn);
    [ExtensionAttribute]
internal static List`1<string> AllFields(object anonType);
    [ExtensionAttribute]
internal static Dictionary`2<string, object> AllFieldsMap(object anonType);
    [ExtensionAttribute]
internal static Dictionary`2<string, object> NonDefaultsOnly(Dictionary`2<string, object> fieldValues);
    [ExtensionAttribute]
public static IDbCommand SetFilters(IDbCommand dbCmd, object anonType);
    [ExtensionAttribute]
public static void ClearFilters(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static string GetFilterSql(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static List`1<T> SelectByIds(IDbCommand dbCmd, IEnumerable idValues);
    [ExtensionAttribute]
internal static T SingleById(IDbCommand dbCmd, object value);
    [ExtensionAttribute]
internal static T SingleWhere(IDbCommand dbCmd, string name, object value);
    [ExtensionAttribute]
internal static T Single(IDbCommand dbCmd, object anonType);
    [ExtensionAttribute]
internal static T Single(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static T Single(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static List`1<T> Where(IDbCommand dbCmd, string name, object value);
    [ExtensionAttribute]
internal static List`1<T> Where(IDbCommand dbCmd, object anonType);
    [ExtensionAttribute]
internal static List`1<T> Select(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static List`1<T> Select(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static List`1<T> Select(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
internal static List`1<TModel> Select(IDbCommand dbCmd, Type fromTableType);
    [ExtensionAttribute]
internal static List`1<T> Select(IDbCommand dbCmd, Type fromTableType, string sql, object anonType);
    internal static string ToSelect(IOrmLiteDialectProvider dialectProvider, Type fromTableType, string sqlFilter);
    [ExtensionAttribute]
internal static List`1<T> SqlList(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static List`1<T> SqlList(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static List`1<T> SqlList(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
internal static List`1<T> SqlList(IDbCommand dbCmd, string sql, Action`1<IDbCommand> dbCmdFilter);
    [ExtensionAttribute]
internal static List`1<T> SqlColumn(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static List`1<T> SqlColumn(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static List`1<T> SqlColumn(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
internal static T SqlScalar(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static T SqlScalar(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static T SqlScalar(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
internal static List`1<T> SelectNonDefaults(IDbCommand dbCmd, object filter);
    [ExtensionAttribute]
internal static List`1<T> SelectNonDefaults(IDbCommand dbCmd, string sql, object anonType);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensions/<SelectLazy>d__49`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> SelectLazy(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensions/<SelectLazy>d__50`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> SelectLazy(IDbCommand dbCmd, string sql, object anonType);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensions/<ColumnLazy>d__51`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> ColumnLazy(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensions/<ColumnLazy>d__52`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> ColumnLazy(IDbCommand dbCmd, string sql, object anonType);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensions/<ColumnLazy>d__53`1")]
[ExtensionAttribute]
private static IEnumerable`1<T> ColumnLazy(IDbCommand dbCmd, string sql);
    [IteratorStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensions/<WhereLazy>d__54`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> WhereLazy(IDbCommand dbCmd, object anonType);
    [ExtensionAttribute]
internal static IEnumerable`1<T> SelectLazy(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static T Scalar(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static T Scalar(IDataReader reader, IOrmLiteDialectProvider dialectProvider);
    internal static T ToScalar(IOrmLiteDialectProvider dialectProvider, IDataReader reader, int columnIndex);
    [ExtensionAttribute]
internal static long LastInsertId(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static List`1<T> Column(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static List`1<T> Column(IDataReader reader, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
internal static HashSet`1<T> ColumnDistinct(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static HashSet`1<T> ColumnDistinct(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static HashSet`1<T> ColumnDistinct(IDataReader reader, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
public static Dictionary`2<K, List`1<V>> Lookup(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static Dictionary`2<K, List`1<V>> Lookup(IDataReader reader, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
internal static Dictionary`2<K, V> Dictionary(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static Dictionary`2<K, V> Dictionary(IDataReader reader, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
internal static List`1<KeyValuePair`2<K, V>> KeyValuePairs(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static List`1<KeyValuePair`2<K, V>> KeyValuePairs(IDataReader reader, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
internal static bool Exists(IDbCommand dbCmd, object anonType);
    [ExtensionAttribute]
internal static bool Exists(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static List`1<TOutputModel> SqlProcedure(IDbCommand dbCommand, object fromObjWithProperties);
    [ExtensionAttribute]
internal static List`1<TOutputModel> SqlProcedureFmt(IDbCommand dbCmd, object fromObjWithProperties, string sqlFilter, Object[] filterParams);
    [ExtensionAttribute]
public static long LongScalar(IDbCommand dbCmd);
    internal static long ToLong(int result);
    internal static long ToLong(object result);
    [ExtensionAttribute]
internal static T LoadSingleById(IDbCommand dbCmd, object value, String[] include);
    [ExtensionAttribute]
public static void LoadReferences(IDbCommand dbCmd, T instance, IEnumerable`1<string> include);
    [ExtensionAttribute]
internal static List`1<Into> LoadListWithReferences(IDbCommand dbCmd, SqlExpression`1<From> expr, IEnumerable`1<string> include);
    [ExtensionAttribute]
public static FieldDefinition GetRefFieldDef(ModelDefinition modelDef, ModelDefinition refModelDef, Type refType);
    [ExtensionAttribute]
public static FieldDefinition GetRefFieldDefIfExists(ModelDefinition modelDef, ModelDefinition refModelDef);
    [ExtensionAttribute]
public static FieldDefinition GetSelfRefFieldDefIfExists(ModelDefinition modelDef, ModelDefinition refModelDef, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static IDbDataParameter AddParam(IDbCommand dbCmd, string name, object value, ParameterDirection direction, Nullable`1<DbType> dbType, Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<int> size, Action`1<IDbDataParameter> paramFilter);
    [ExtensionAttribute]
public static IDbDataParameter CreateParam(IDbCommand dbCmd, string name, object value, ParameterDirection direction, Nullable`1<DbType> dbType, Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<int> size);
    [ExtensionAttribute]
internal static IDbCommand SqlProc(IDbCommand dbCmd, string name, object inParams, bool excludeDefaults);
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync : object {
    internal static ILog Log;
    private static OrmLiteReadCommandExtensionsAsync();
    [ExtensionAttribute]
internal static Task`1<IDataReader> ExecReaderAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<IDataReader> ExecReaderAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDataParameter> parameters, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectAsync(IDbCommand dbCmd, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<TModel>> SelectAsync(IDbCommand dbCmd, Type fromTableType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<TModel>> SelectAsync(IDbCommand dbCmd, Type fromTableType, string sqlFilter, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectByIdsAsync(IDbCommand dbCmd, IEnumerable idValues, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SingleByIdAsync(IDbCommand dbCmd, object value, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SingleWhereAsync(IDbCommand dbCmd, string name, object value, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SingleAsync(IDbCommand dbCmd, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SingleAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SingleAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> WhereAsync(IDbCommand dbCmd, string name, object value, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> WhereAsync(IDbCommand dbCmd, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectAsync(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SqlListAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SqlListAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SqlListAsync(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SqlListAsync(IDbCommand dbCmd, string sql, Action`1<IDbCommand> dbCmdFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SqlColumnAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SqlColumnAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SqlColumnAsync(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SqlScalarAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SqlScalarAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SqlScalarAsync(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectNonDefaultsAsync(IDbCommand dbCmd, object filter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectNonDefaultsAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> ScalarAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> ScalarAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<LongScalarAsync>d__31")]
[ExtensionAttribute]
public static Task`1<long> LongScalarAsync(IDbCommand dbCmd, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> ColumnAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<ColumnAsync>d__33`1")]
[ExtensionAttribute]
internal static Task`1<List`1<T>> ColumnAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<HashSet`1<T>> ColumnDistinctAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<ColumnDistinctAsync>d__35`1")]
[ExtensionAttribute]
internal static Task`1<HashSet`1<T>> ColumnDistinctAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, List`1<V>>> LookupAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, List`1<V>>> LookupAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, V>> DictionaryAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, V>> DictionaryAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<KeyValuePair`2<K, V>>> KeyValuePairsAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<KeyValuePair`2<K, V>>> KeyValuePairsAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<ExistsAsync>d__42`1")]
[ExtensionAttribute]
internal static Task`1<bool> ExistsAsync(IDbCommand dbCmd, object anonType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<ExistsAsync>d__43`1")]
[ExtensionAttribute]
internal static Task`1<bool> ExistsAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<TOutputModel>> SqlProcedureAsync(IDbCommand dbCommand, object fromObjWithProperties, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<TOutputModel>> SqlProcedureFmtAsync(IDbCommand dbCmd, CancellationToken token, object fromObjWithProperties, string sqlFilter, Object[] filterParams);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<LoadSingleByIdAsync>d__46`1")]
[ExtensionAttribute]
internal static Task`1<T> LoadSingleByIdAsync(IDbCommand dbCmd, object value, String[] include, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<LoadReferencesAsync>d__47`1")]
[ExtensionAttribute]
public static Task LoadReferencesAsync(IDbCommand dbCmd, T instance, String[] include, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync/<LoadListWithReferences>d__48`2")]
[ExtensionAttribute]
internal static Task`1<List`1<Into>> LoadListWithReferences(IDbCommand dbCmd, SqlExpression`1<From> expr, IEnumerable`1<string> include, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteReadExpressionsApi : object {
    [ExtensionAttribute]
public static T Exec(IDbConnection dbConn, Func`2<IDbCommand, T> filter);
    [ExtensionAttribute]
public static void Exec(IDbConnection dbConn, Action`1<IDbCommand> filter);
    [ExtensionAttribute]
public static Task`1<T> Exec(IDbConnection dbConn, Func`2<IDbCommand, Task`1<T>> filter);
    [ExtensionAttribute]
public static Task Exec(IDbConnection dbConn, Func`2<IDbCommand, Task> filter);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecLazy(IDbConnection dbConn, Func`2<IDbCommand, IEnumerable`1<T>> filter);
    [ExtensionAttribute]
public static IDbCommand Exec(IDbConnection dbConn, Func`2<IDbCommand, IDbCommand> filter);
    [ExtensionAttribute]
public static Task`1<IDbCommand> Exec(IDbConnection dbConn, Func`2<IDbCommand, Task`1<IDbCommand>> filter);
    [ExtensionAttribute]
public static SqlExpression`1<T> From(IDbConnection dbConn);
    [ExtensionAttribute]
public static SqlExpression`1<T> From(IDbConnection dbConn, Action`1<SqlExpression`1<T>> options);
    [ExtensionAttribute]
public static SqlExpression`1<T> From(IDbConnection dbConn, Expression`1<Func`3<T, JoinWith, bool>> joinExpr);
    [ExtensionAttribute]
public static SqlExpression`1<T> From(IDbConnection dbConn, string fromExpression);
    [ExtensionAttribute]
public static SqlExpression`1<T> From(IDbConnection dbConn, TableOptions tableOptions);
    [ExtensionAttribute]
public static SqlExpression`1<T> TagWith(SqlExpression`1<T> expression, string tag);
    [ExtensionAttribute]
public static SqlExpression`1<T> TagWithCallSite(SqlExpression`1<T> expression, string filePath, int lineNumber);
    [ExtensionAttribute]
public static SqlExpression`1<T> From(IDbConnection dbConn, TableOptions tableOptions, Action`1<SqlExpression`1<T>> options);
    [ExtensionAttribute]
[ObsoleteAttribute("Use TableAlias")]
public static JoinFormatDelegate JoinAlias(IDbConnection db, string alias);
    [ExtensionAttribute]
public static TableOptions TableAlias(IDbConnection db, string alias);
    [ExtensionAttribute]
public static string GetTableName(IDbConnection db);
    [ExtensionAttribute]
public static List`1<string> GetTableNames(IDbConnection db);
    [ExtensionAttribute]
public static List`1<string> GetTableNames(IDbConnection db, string schema);
    [ExtensionAttribute]
public static Task`1<List`1<string>> GetTableNamesAsync(IDbConnection db);
    [ExtensionAttribute]
public static Task`1<List`1<string>> GetTableNamesAsync(IDbConnection db, string schema);
    [ExtensionAttribute]
public static List`1<KeyValuePair`2<string, long>> GetTableNamesWithRowCounts(IDbConnection db, bool live, string schema);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadExpressionsApi/<GetTableNamesWithRowCountsAsync>d__23")]
[ExtensionAttribute]
public static Task`1<List`1<KeyValuePair`2<string, long>>> GetTableNamesWithRowCountsAsync(IDbConnection db, bool live, string schema);
    private static string CreateTableRowCountUnionSql(IDbConnection db, string schema);
    [ExtensionAttribute]
public static string GetQuotedTableName(IDbConnection db);
    [ExtensionAttribute]
public static IDbTransaction OpenTransaction(IDbConnection dbConn);
    [ExtensionAttribute]
public static IDbTransaction OpenTransactionIfNotExists(IDbConnection dbConn);
    [ExtensionAttribute]
public static IDbTransaction OpenTransaction(IDbConnection dbConn, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static IDbTransaction OpenTransactionIfNotExists(IDbConnection dbConn, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static SavePoint SavePoint(IDbTransaction trans, string name);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteReadExpressionsApi/<SavePointAsync>d__31")]
[ExtensionAttribute]
public static Task`1<SavePoint> SavePointAsync(IDbTransaction trans, string name);
    [ExtensionAttribute]
public static IDbCommand OpenCommand(IDbConnection dbConn);
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<T> Select(IDbConnection dbConn, ISqlExpression expression, object anonType);
    [ExtensionAttribute]
public static List`1<Tuple`2<T, T2>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<Tuple`3<T, T2, T3>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<Tuple`4<T, T2, T3, T4>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<Tuple`5<T, T2, T3, T4, T5>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<Tuple`6<T, T2, T3, T4, T5, T6>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static List`1<Tuple`2<T, T2>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects);
    [ExtensionAttribute]
public static List`1<Tuple`3<T, T2, T3>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects);
    [ExtensionAttribute]
public static List`1<Tuple`4<T, T2, T3, T4>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects);
    [ExtensionAttribute]
public static List`1<Tuple`5<T, T2, T3, T4, T5>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects);
    [ExtensionAttribute]
public static List`1<Tuple`6<T, T2, T3, T4, T5, T6>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects);
    [ExtensionAttribute]
public static List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects);
    [ExtensionAttribute]
public static List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>> SelectMulti(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects);
    [ExtensionAttribute]
public static T Single(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static T Single(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static T Single(IDbConnection dbConn, ISqlExpression expression);
    [ExtensionAttribute]
public static TKey Scalar(IDbConnection dbConn, Expression`1<Func`2<T, object>> field);
    [ExtensionAttribute]
public static TKey Scalar(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static long Count(IDbConnection dbConn, Expression`1<Func`2<T, bool>> expression);
    [ExtensionAttribute]
public static long Count(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static long Count(IDbConnection dbConn);
    [ExtensionAttribute]
public static long RowCount(IDbConnection dbConn, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static long RowCount(IDbConnection dbConn, string sql, object anonType);
    [ExtensionAttribute]
public static long RowCount(IDbConnection dbConn, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static List`1<T> LoadSelect(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate, String[] include);
    [ExtensionAttribute]
public static List`1<T> LoadSelect(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate, Expression`1<Func`2<T, object>> include);
    [ExtensionAttribute]
public static List`1<T> LoadSelect(IDbConnection dbConn, SqlExpression`1<T> expression, String[] include);
    [ExtensionAttribute]
public static List`1<T> LoadSelect(IDbConnection dbConn, SqlExpression`1<T> expression, IEnumerable`1<string> include);
    [ExtensionAttribute]
public static List`1<T> LoadSelect(IDbConnection dbConn, SqlExpression`1<T> expression, Expression`1<Func`2<T, object>> include);
    [ExtensionAttribute]
public static List`1<Into> LoadSelect(IDbConnection dbConn, SqlExpression`1<From> expression, String[] include);
    [ExtensionAttribute]
public static List`1<Into> LoadSelect(IDbConnection dbConn, SqlExpression`1<From> expression, IEnumerable`1<string> include);
    [ExtensionAttribute]
public static List`1<Into> LoadSelect(IDbConnection dbConn, SqlExpression`1<From> expression, Expression`1<Func`2<Into, object>> include);
    [ExtensionAttribute]
public static DataTable GetSchemaTable(IDbConnection dbConn, string sql);
    [ExtensionAttribute]
public static ColumnSchema[] GetTableColumns(IDbConnection dbConn);
    [ExtensionAttribute]
public static ColumnSchema[] GetTableColumns(IDbConnection dbConn, Type type);
    [ExtensionAttribute]
public static ColumnSchema[] GetTableColumns(IDbConnection dbConn, string sql);
    [ExtensionAttribute]
public static void EnableForeignKeysCheck(IDbConnection dbConn);
    [ExtensionAttribute]
public static void DisableForeignKeysCheck(IDbConnection dbConn);
    [CompilerGeneratedAttribute]
internal static List`1<KeyValuePair`2<string, long>> <GetTableNamesWithRowCounts>g__GetResults|22_0(<>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static Task`1<List`1<KeyValuePair`2<string, long>>> <GetTableNamesWithRowCountsAsync>g__GetResultsAsync|23_0(<>c__DisplayClass23_0& );
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync : object {
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Into>> SelectAsync(IDbConnection dbConn, SqlExpression`1<From> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SelectAsync(IDbConnection dbConn, ISqlExpression expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`2<T, T2>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`3<T, T2, T3>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`4<T, T2, T3, T4>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`5<T, T2, T3, T4, T5>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`6<T, T2, T3, T4, T5, T6>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`2<T, T2>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`3<T, T2, T3>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`4<T, T2, T3, T4>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`5<T, T2, T3, T4, T5>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`6<T, T2, T3, T4, T5, T6>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>>> SelectMultiAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IDbConnection dbConn, ISqlExpression expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TKey> ScalarAsync(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TKey> ScalarAsync(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> CountAsync(IDbConnection dbConn, Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> CountAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> CountAsync(IDbConnection dbConn, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> RowCountAsync(IDbConnection dbConn, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> RowCountAsync(IDbConnection dbConn, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> LoadSelectAsync(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate, String[] include, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> LoadSelectAsync(IDbConnection dbConn, Expression`1<Func`2<T, bool>> predicate, Expression`1<Func`2<T, object>> include);
    [ExtensionAttribute]
public static Task`1<List`1<T>> LoadSelectAsync(IDbConnection dbConn, SqlExpression`1<T> expression, String[] include, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> LoadSelectAsync(IDbConnection dbConn, SqlExpression`1<T> expression, IEnumerable`1<string> include, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Into>> LoadSelectAsync(IDbConnection dbConn, SqlExpression`1<From> expression, String[] include, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Into>> LoadSelectAsync(IDbConnection dbConn, SqlExpression`1<From> expression, IEnumerable`1<string> include, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<Into>> LoadSelectAsync(IDbConnection dbConn, SqlExpression`1<From> expression, Expression`1<Func`2<Into, object>> include);
    [ExtensionAttribute]
public static Task`1<DataTable> GetSchemaTableAsync(IDbConnection dbConn, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<ColumnSchema[]> GetTableColumnsAsync(IDbConnection dbConn, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<ColumnSchema[]> GetTableColumnsAsync(IDbConnection dbConn, Type type, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<ColumnSchema[]> GetTableColumnsAsync(IDbConnection dbConn, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task EnableForeignKeysCheckAsync(IDbConnection dbConn, CancellationToken token);
    [ExtensionAttribute]
public static Task DisableForeignKeysCheckAsync(IDbConnection dbConn, CancellationToken token);
}
public class ServiceStack.OrmLite.OrmLiteResultsFilter : object {
    [CompilerGeneratedAttribute]
private IEnumerable <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <RefResults>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <ColumnResults>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <ColumnDistinctResults>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <DictionaryResults>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <LookupResults>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SingleResult>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RefSingleResult>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ScalarResult>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LongScalarResult>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastInsertId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExecuteSqlResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDbCommand, int> <ExecuteSqlFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDbCommand, Type, IEnumerable> <ResultsFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDbCommand, Type, IEnumerable> <RefResultsFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDbCommand, Type, IEnumerable> <ColumnResultsFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDbCommand, Type, IEnumerable> <ColumnDistinctResultsFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IDbCommand, Type, Type, IDictionary> <DictionaryResultsFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IDbCommand, Type, Type, IDictionary> <LookupResultsFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDbCommand, Type, object> <SingleResultFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDbCommand, Type, object> <RefSingleResultFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDbCommand, Type, object> <ScalarResultFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDbCommand, long> <LongScalarResultFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDbCommand, long> <LastInsertIdFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <SqlFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IDbCommand> <SqlCommandFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintSql>k__BackingField;
    private IOrmLiteResultsFilter previousFilter;
    public IEnumerable Results { get; public set; }
    public IEnumerable RefResults { get; public set; }
    public IEnumerable ColumnResults { get; public set; }
    public IEnumerable ColumnDistinctResults { get; public set; }
    public IDictionary DictionaryResults { get; public set; }
    public IDictionary LookupResults { get; public set; }
    public object SingleResult { get; public set; }
    public object RefSingleResult { get; public set; }
    public object ScalarResult { get; public set; }
    public long LongScalarResult { get; public set; }
    public long LastInsertId { get; public set; }
    public int ExecuteSqlResult { get; public set; }
    public Func`2<IDbCommand, int> ExecuteSqlFn { get; public set; }
    public Func`3<IDbCommand, Type, IEnumerable> ResultsFn { get; public set; }
    public Func`3<IDbCommand, Type, IEnumerable> RefResultsFn { get; public set; }
    public Func`3<IDbCommand, Type, IEnumerable> ColumnResultsFn { get; public set; }
    public Func`3<IDbCommand, Type, IEnumerable> ColumnDistinctResultsFn { get; public set; }
    public Func`4<IDbCommand, Type, Type, IDictionary> DictionaryResultsFn { get; public set; }
    public Func`4<IDbCommand, Type, Type, IDictionary> LookupResultsFn { get; public set; }
    public Func`3<IDbCommand, Type, object> SingleResultFn { get; public set; }
    public Func`3<IDbCommand, Type, object> RefSingleResultFn { get; public set; }
    public Func`3<IDbCommand, Type, object> ScalarResultFn { get; public set; }
    public Func`2<IDbCommand, long> LongScalarResultFn { get; public set; }
    public Func`2<IDbCommand, long> LastInsertIdFn { get; public set; }
    public Action`1<string> SqlFilter { get; public set; }
    public Action`1<IDbCommand> SqlCommandFilter { get; public set; }
    public bool PrintSql { get; public set; }
    public OrmLiteResultsFilter(IEnumerable results);
    [CompilerGeneratedAttribute]
public IEnumerable get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IEnumerable value);
    [CompilerGeneratedAttribute]
public IEnumerable get_RefResults();
    [CompilerGeneratedAttribute]
public void set_RefResults(IEnumerable value);
    [CompilerGeneratedAttribute]
public IEnumerable get_ColumnResults();
    [CompilerGeneratedAttribute]
public void set_ColumnResults(IEnumerable value);
    [CompilerGeneratedAttribute]
public IEnumerable get_ColumnDistinctResults();
    [CompilerGeneratedAttribute]
public void set_ColumnDistinctResults(IEnumerable value);
    [CompilerGeneratedAttribute]
public IDictionary get_DictionaryResults();
    [CompilerGeneratedAttribute]
public void set_DictionaryResults(IDictionary value);
    [CompilerGeneratedAttribute]
public IDictionary get_LookupResults();
    [CompilerGeneratedAttribute]
public void set_LookupResults(IDictionary value);
    [CompilerGeneratedAttribute]
public object get_SingleResult();
    [CompilerGeneratedAttribute]
public void set_SingleResult(object value);
    [CompilerGeneratedAttribute]
public object get_RefSingleResult();
    [CompilerGeneratedAttribute]
public void set_RefSingleResult(object value);
    [CompilerGeneratedAttribute]
public object get_ScalarResult();
    [CompilerGeneratedAttribute]
public void set_ScalarResult(object value);
    [CompilerGeneratedAttribute]
public long get_LongScalarResult();
    [CompilerGeneratedAttribute]
public void set_LongScalarResult(long value);
    [CompilerGeneratedAttribute]
public long get_LastInsertId();
    [CompilerGeneratedAttribute]
public void set_LastInsertId(long value);
    [CompilerGeneratedAttribute]
public int get_ExecuteSqlResult();
    [CompilerGeneratedAttribute]
public void set_ExecuteSqlResult(int value);
    [CompilerGeneratedAttribute]
public Func`2<IDbCommand, int> get_ExecuteSqlFn();
    [CompilerGeneratedAttribute]
public void set_ExecuteSqlFn(Func`2<IDbCommand, int> value);
    [CompilerGeneratedAttribute]
public Func`3<IDbCommand, Type, IEnumerable> get_ResultsFn();
    [CompilerGeneratedAttribute]
public void set_ResultsFn(Func`3<IDbCommand, Type, IEnumerable> value);
    [CompilerGeneratedAttribute]
public Func`3<IDbCommand, Type, IEnumerable> get_RefResultsFn();
    [CompilerGeneratedAttribute]
public void set_RefResultsFn(Func`3<IDbCommand, Type, IEnumerable> value);
    [CompilerGeneratedAttribute]
public Func`3<IDbCommand, Type, IEnumerable> get_ColumnResultsFn();
    [CompilerGeneratedAttribute]
public void set_ColumnResultsFn(Func`3<IDbCommand, Type, IEnumerable> value);
    [CompilerGeneratedAttribute]
public Func`3<IDbCommand, Type, IEnumerable> get_ColumnDistinctResultsFn();
    [CompilerGeneratedAttribute]
public void set_ColumnDistinctResultsFn(Func`3<IDbCommand, Type, IEnumerable> value);
    [CompilerGeneratedAttribute]
public Func`4<IDbCommand, Type, Type, IDictionary> get_DictionaryResultsFn();
    [CompilerGeneratedAttribute]
public void set_DictionaryResultsFn(Func`4<IDbCommand, Type, Type, IDictionary> value);
    [CompilerGeneratedAttribute]
public Func`4<IDbCommand, Type, Type, IDictionary> get_LookupResultsFn();
    [CompilerGeneratedAttribute]
public void set_LookupResultsFn(Func`4<IDbCommand, Type, Type, IDictionary> value);
    [CompilerGeneratedAttribute]
public Func`3<IDbCommand, Type, object> get_SingleResultFn();
    [CompilerGeneratedAttribute]
public void set_SingleResultFn(Func`3<IDbCommand, Type, object> value);
    [CompilerGeneratedAttribute]
public Func`3<IDbCommand, Type, object> get_RefSingleResultFn();
    [CompilerGeneratedAttribute]
public void set_RefSingleResultFn(Func`3<IDbCommand, Type, object> value);
    [CompilerGeneratedAttribute]
public Func`3<IDbCommand, Type, object> get_ScalarResultFn();
    [CompilerGeneratedAttribute]
public void set_ScalarResultFn(Func`3<IDbCommand, Type, object> value);
    [CompilerGeneratedAttribute]
public Func`2<IDbCommand, long> get_LongScalarResultFn();
    [CompilerGeneratedAttribute]
public void set_LongScalarResultFn(Func`2<IDbCommand, long> value);
    [CompilerGeneratedAttribute]
public Func`2<IDbCommand, long> get_LastInsertIdFn();
    [CompilerGeneratedAttribute]
public void set_LastInsertIdFn(Func`2<IDbCommand, long> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_SqlFilter();
    [CompilerGeneratedAttribute]
public void set_SqlFilter(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<IDbCommand> get_SqlCommandFilter();
    [CompilerGeneratedAttribute]
public void set_SqlCommandFilter(Action`1<IDbCommand> value);
    [CompilerGeneratedAttribute]
public bool get_PrintSql();
    [CompilerGeneratedAttribute]
public void set_PrintSql(bool value);
    private void Filter(IDbCommand dbCmd);
    private IEnumerable GetResults(IDbCommand dbCmd);
    private IEnumerable GetRefResults(IDbCommand dbCmd, Type refType);
    private IEnumerable GetColumnResults(IDbCommand dbCmd);
    private IEnumerable GetColumnDistinctResults(IDbCommand dbCmd);
    private IDictionary GetDictionaryResults(IDbCommand dbCmd);
    private IDictionary GetLookupResults(IDbCommand dbCmd);
    private object GetSingleResult(IDbCommand dbCmd);
    private object GetRefSingleResult(IDbCommand dbCmd, Type refType);
    private object GetScalarResult(IDbCommand dbCmd);
    private long GetLongScalarResult(IDbCommand dbCmd);
    public sealed virtual long GetLastInsertId(IDbCommand dbCmd);
    public sealed virtual List`1<T> GetList(IDbCommand dbCmd);
    public sealed virtual IList GetRefList(IDbCommand dbCmd, Type refType);
    public sealed virtual T GetSingle(IDbCommand dbCmd);
    public sealed virtual object GetRefSingle(IDbCommand dbCmd, Type refType);
    public sealed virtual T GetScalar(IDbCommand dbCmd);
    public sealed virtual long GetLongScalar(IDbCommand dbCmd);
    private T ConvertTo(object value);
    public sealed virtual object GetScalar(IDbCommand dbCmd);
    public sealed virtual List`1<T> GetColumn(IDbCommand dbCmd);
    public sealed virtual HashSet`1<T> GetColumnDistinct(IDbCommand dbCmd);
    public sealed virtual Dictionary`2<K, V> GetDictionary(IDbCommand dbCmd);
    public sealed virtual List`1<KeyValuePair`2<K, V>> GetKeyValuePairs(IDbCommand dbCmd);
    public sealed virtual Dictionary`2<K, List`1<V>> GetLookup(IDbCommand dbCmd);
    public sealed virtual int ExecuteSql(IDbCommand dbCmd);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteResultsFilterExtensions : object {
    internal static ILog Log;
    private static OrmLiteResultsFilterExtensions();
    [ExtensionAttribute]
public static int ExecNonQuery(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
public static int ExecNonQuery(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static int ExecNonQuery(IDbCommand dbCmd);
    [ExtensionAttribute]
public static int ExecNonQuery(IDbCommand dbCmd, string sql, Action`1<IDbCommand> dbCmdFilter);
    [ExtensionAttribute]
public static List`1<T> ConvertToList(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
public static IList ConvertToList(IDbCommand dbCmd, Type refType, string sql);
    [ExtensionAttribute]
public static IDbDataParameter PopulateWith(IDbDataParameter to, IDbDataParameter from);
    [ExtensionAttribute]
internal static List`1<T> ExprConvertToList(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, HashSet`1<string> onlyFields);
    [ExtensionAttribute]
public static T ConvertTo(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static object ConvertTo(IDbCommand dbCmd, Type refType, string sql);
    [ExtensionAttribute]
internal static T Scalar(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static T Scalar(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
public static object Scalar(IDbCommand dbCmd, ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static object Scalar(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
public static long ExecLongScalar(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static T ExprConvertTo(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, HashSet`1<string> onlyFields);
    [ExtensionAttribute]
internal static List`1<T> Column(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static List`1<T> Column(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static HashSet`1<T> ColumnDistinct(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static HashSet`1<T> ColumnDistinct(IDbCommand dbCmd, ISqlExpression expression);
    [ExtensionAttribute]
internal static Dictionary`2<K, V> Dictionary(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static Dictionary`2<K, V> Dictionary(IDbCommand dbCmd, ISqlExpression expression);
    [ExtensionAttribute]
internal static List`1<KeyValuePair`2<K, V>> KeyValuePairs(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static List`1<KeyValuePair`2<K, V>> KeyValuePairs(IDbCommand dbCmd, ISqlExpression expression);
    [ExtensionAttribute]
internal static Dictionary`2<K, List`1<V>> Lookup(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static Dictionary`2<K, List`1<V>> Lookup(IDbCommand dbCmd, string sql);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync : object {
    internal static ILog Log;
    private static OrmLiteResultsFilterExtensionsAsync();
    [ExtensionAttribute]
public static Task`1<int> ExecNonQueryAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> ExecNonQueryAsync(IDbCommand dbCmd, string sql, Dictionary`2<string, object> dict, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> ExecNonQueryAsync(IDbCommand dbCmd, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<List`1<T>> ConvertToListAsync(IDbCommand dbCmd);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ConvertToListAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<List`1<T>> ConvertToListAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<IList> ConvertToListAsync(IDbCommand dbCmd, Type refType);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ConvertToListAsync>d__7")]
[ExtensionAttribute]
public static Task`1<IList> ConvertToListAsync(IDbCommand dbCmd, Type refType, string sql, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ExprConvertToListAsync>d__8`1")]
[ExtensionAttribute]
internal static Task`1<List`1<T>> ExprConvertToListAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, HashSet`1<string> onlyFields, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> ConvertToAsync(IDbCommand dbCmd);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ConvertToAsync>d__10`1")]
[ExtensionAttribute]
public static Task`1<T> ConvertToAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ConvertToAsync>d__11")]
[ExtensionAttribute]
internal static Task`1<object> ConvertToAsync(IDbCommand dbCmd, Type refType, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> ScalarAsync(IDbCommand dbCmd);
    [ExtensionAttribute]
public static Task`1<T> ScalarAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ScalarAsync>d__14`1")]
[ExtensionAttribute]
public static Task`1<T> ScalarAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<object> ScalarAsync(IDbCommand dbCmd);
    [ExtensionAttribute]
public static Task`1<object> ScalarAsync(IDbCommand dbCmd, ISqlExpression expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<object> ScalarAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> ExecLongScalarAsync(IDbCommand dbCmd);
    [ExtensionAttribute]
public static Task`1<long> ExecLongScalarAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ExprConvertToAsync>d__20`1")]
[ExtensionAttribute]
internal static Task`1<T> ExprConvertToAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> ColumnAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ColumnAsync>d__22`1")]
[ExtensionAttribute]
internal static Task`1<List`1<T>> ColumnAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<HashSet`1<T>> ColumnDistinctAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<ColumnDistinctAsync>d__24`1")]
[ExtensionAttribute]
internal static Task`1<HashSet`1<T>> ColumnDistinctAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, V>> DictionaryAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<DictionaryAsync>d__26`2")]
[ExtensionAttribute]
internal static Task`1<Dictionary`2<K, V>> DictionaryAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<KeyValuePair`2<K, V>>> KeyValuePairsAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<KeyValuePairsAsync>d__28`2")]
[ExtensionAttribute]
internal static Task`1<List`1<KeyValuePair`2<K, V>>> KeyValuePairsAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<K, List`1<V>>> LookupAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync/<LookupAsync>d__30`2")]
[ExtensionAttribute]
internal static Task`1<Dictionary`2<K, List`1<V>>> LookupAsync(IDbCommand dbCmd, string sql, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteSchemaApi : object {
    [ExtensionAttribute]
public static bool TableExists(IDbConnection dbConn, string tableName, string schema);
    [ExtensionAttribute]
public static Task`1<bool> TableExistsAsync(IDbConnection dbConn, string tableName, string schema, CancellationToken token);
    [ExtensionAttribute]
public static bool TableExists(IDbConnection dbConn);
    [ExtensionAttribute]
public static Task`1<bool> TableExistsAsync(IDbConnection dbConn, CancellationToken token);
    [ExtensionAttribute]
public static bool ColumnExists(IDbConnection dbConn, string columnName, string tableName, string schema);
    [ExtensionAttribute]
public static Task`1<bool> ColumnExistsAsync(IDbConnection dbConn, string columnName, string tableName, string schema, CancellationToken token);
    [ExtensionAttribute]
public static bool ColumnExists(IDbConnection dbConn, Expression`1<Func`2<T, object>> field);
    [ExtensionAttribute]
public static Task`1<bool> ColumnExistsAsync(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, CancellationToken token);
    [ExtensionAttribute]
public static void CreateSchema(IDbConnection dbConn);
    [ExtensionAttribute]
public static bool CreateSchema(IDbConnection dbConn, string schemaName);
    [ExtensionAttribute]
public static void CreateTables(IDbConnection dbConn, bool overwrite, Type[] tableTypes);
    [ExtensionAttribute]
public static void CreateTable(IDbConnection dbConn, bool overwrite, Type modelType);
    [ExtensionAttribute]
public static void CreateTableIfNotExists(IDbConnection dbConn, Type[] tableTypes);
    [ExtensionAttribute]
public static void DropAndCreateTables(IDbConnection dbConn, Type[] tableTypes);
    [ExtensionAttribute]
public static void CreateTable(IDbConnection dbConn, bool overwrite);
    [ExtensionAttribute]
public static bool CreateTableIfNotExists(IDbConnection dbConn);
    [ExtensionAttribute]
public static bool CreateTableIfNotExists(IDbConnection dbConn, Type modelType);
    [ExtensionAttribute]
public static void DropAndCreateTable(IDbConnection dbConn);
    [ExtensionAttribute]
public static void DropAndCreateTable(IDbConnection dbConn, Type modelType);
    [ExtensionAttribute]
public static void DropTables(IDbConnection dbConn, Type[] tableTypes);
    [ExtensionAttribute]
public static void DropTable(IDbConnection dbConn, Type modelType);
    [ExtensionAttribute]
public static void DropTable(IDbConnection dbConn);
    [ExtensionAttribute]
public static List`1<string> GetSchemas(IDbConnection dbConn);
    [ExtensionAttribute]
public static Dictionary`2<string, List`1<string>> GetSchemaTables(IDbConnection dbConn);
    [ExtensionAttribute]
public static void Migrate(IDbConnection dbConn);
    [ExtensionAttribute]
public static void Revert(IDbConnection dbConn);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteSchemaModifyApi : object {
    private static void InitUserFieldDefinition(Type modelType, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static void AlterTable(IDbConnection dbConn, string command);
    [ExtensionAttribute]
public static void AlterTable(IDbConnection dbConn, Type modelType, string command);
    [ExtensionAttribute]
public static void AddColumn(IDbConnection dbConn, Expression`1<Func`2<T, object>> field);
    [ExtensionAttribute]
public static void AddColumn(IDbConnection dbConn, Type modelType, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static void AddColumn(IDbConnection dbConn, string table, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static void AddColumn(IDbConnection dbConn, string schema, string table, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static void AlterColumn(IDbConnection dbConn, Expression`1<Func`2<T, object>> field);
    [ExtensionAttribute]
public static void AlterColumn(IDbConnection dbConn, Type modelType, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static void AlterColumn(IDbConnection dbConn, string table, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static void AlterColumn(IDbConnection dbConn, string schema, string table, FieldDefinition fieldDef);
    [ExtensionAttribute]
public static void ChangeColumnName(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, string oldColumn);
    [ExtensionAttribute]
public static void ChangeColumnName(IDbConnection dbConn, Type modelType, FieldDefinition fieldDef, string oldColumn);
    [ExtensionAttribute]
public static void RenameColumn(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, string oldColumn);
    [ExtensionAttribute]
public static void RenameColumn(IDbConnection dbConn, string oldColumn, string newColumn);
    [ExtensionAttribute]
public static void RenameColumn(IDbConnection dbConn, Type modelType, string oldColumn, string newColumn);
    [ExtensionAttribute]
public static void RenameColumn(IDbConnection dbConn, string table, string oldColumn, string newColumn);
    [ExtensionAttribute]
public static void RenameColumn(IDbConnection dbConn, string schema, string table, string oldColumn, string newColumn);
    [ExtensionAttribute]
public static void DropColumn(IDbConnection dbConn, Expression`1<Func`2<T, object>> field);
    [ExtensionAttribute]
public static void DropColumn(IDbConnection dbConn, string column);
    [ExtensionAttribute]
public static void DropColumn(IDbConnection dbConn, Type modelType, string column);
    [ExtensionAttribute]
public static void DropColumn(IDbConnection dbConn, string table, string column);
    [ExtensionAttribute]
public static void DropColumn(IDbConnection dbConn, string schema, string table, string column);
    [ExtensionAttribute]
public static void DropConstraint(IDbConnection dbConn, Type modelType, string constraint);
    [ExtensionAttribute]
public static void AddForeignKey(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, Expression`1<Func`2<TForeign, object>> foreignField, OnFkOption onUpdate, OnFkOption onDelete, string foreignKeyName);
    [ExtensionAttribute]
public static void DropForeignKeys(IDbConnection dbConn);
    [ExtensionAttribute]
public static void DropForeignKey(IDbConnection dbConn, string foreignKeyName);
    [ExtensionAttribute]
public static void CreateIndex(IDbConnection dbConn, Expression`1<Func`2<T, object>> field, string indexName, bool unique);
    [ExtensionAttribute]
public static void DropIndex(IDbConnection dbConn, string indexName);
    [ExtensionAttribute]
public static void Migrate(IDbConnection dbConn, Type modelType);
    [ExtensionAttribute]
public static void Revert(IDbConnection dbConn, Type modelType);
}
public class ServiceStack.OrmLite.OrmLiteSPStatement : object {
    private IDbConnection db;
    private IDbCommand dbCmd;
    private IOrmLiteDialectProvider dialectProvider;
    public int ReturnValue { get; }
    public OrmLiteSPStatement(IDbCommand dbCmd);
    public OrmLiteSPStatement(IDbConnection db, IDbCommand dbCmd);
    public bool TryGetParameterValue(string parameterName, Object& value);
    public int get_ReturnValue();
    public List`1<T> ConvertToList();
    public List`1<T> ConvertToScalarList();
    public T ConvertTo();
    public T ConvertToScalar();
    public List`1<T> ConvertFirstColumnToList();
    public HashSet`1<T> ConvertFirstColumnToListDistinct();
    public int ExecuteNonQuery();
    public bool HasResult();
    public sealed virtual void Dispose();
}
public class ServiceStack.OrmLite.OrmLiteState : object {
    private static long Counter;
    public long Id;
    public IDbTransaction TSTransaction;
    public IOrmLiteResultsFilter ResultsFilter;
    public virtual string ToString();
}
public class ServiceStack.OrmLite.OrmLiteTransaction : object {
    [CompilerGeneratedAttribute]
private IDbTransaction <Transaction>k__BackingField;
    private IDbConnection db;
    public IDbTransaction Transaction { get; public set; }
    public IDbTransaction DbTransaction { get; }
    public IDbConnection Db { get; }
    public IDbConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    public OrmLiteTransaction(IDbConnection db, IDbTransaction transaction);
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(IDbTransaction value);
    public sealed virtual IDbTransaction get_DbTransaction();
    public IDbConnection get_Db();
    public static OrmLiteTransaction Create(IDbConnection db, Nullable`1<IsolationLevel> isolationLevel);
    public sealed virtual void Dispose();
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual IsolationLevel get_IsolationLevel();
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync : object {
    public static T CreateInstance();
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync/<ConvertToAsync>d__1`1")]
[ExtensionAttribute]
public static Task`1<T> ConvertToAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync/<ConvertToListAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<List`1<T>> ConvertToListAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, HashSet`1<string> onlyFields, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync/<ConvertToAsync>d__3")]
[ExtensionAttribute]
public static Task`1<object> ConvertToAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, Type type, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync/<ConvertToListAsync>d__4")]
[ExtensionAttribute]
public static Task`1<IList> ConvertToListAsync(IDataReader reader, IOrmLiteDialectProvider dialectProvider, Type type, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteUtils : object {
    internal static string AsyncRequiresNet45Error;
    [CompilerGeneratedAttribute]
private static int <MaxCachedIndexFields>k__BackingField;
    private static Dictionary`2<IndexFieldsCacheKey, Tuple`3[]> indexFieldsCache;
    internal static ILog Log;
    public static Regex VerifyFragmentRegEx;
    public static Regex VerifySqlRegEx;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <SqlVerifyFragmentFn>k__BackingField;
    public static String[] IllegalSqlFragmentTokens;
    private static int NotFound;
    private static Regex AllowedPropertyCharsRegex;
    private static Char[] QuotedChars;
    public static Regex RegexPassword;
    public static int MaxCachedIndexFields { get; public set; }
    public static Func`2<string, string> SqlVerifyFragmentFn { get; public set; }
    private static OrmLiteUtils();
    [CompilerGeneratedAttribute]
public static int get_MaxCachedIndexFields();
    [CompilerGeneratedAttribute]
public static void set_MaxCachedIndexFields(int value);
    public static void HandleException(Exception ex, string message, Object[] args);
    [ExtensionAttribute]
public static void DebugCommand(ILog log, IDbCommand cmd);
    [ExtensionAttribute]
public static string GetDebugString(IDbCommand cmd);
    public static T CreateInstance();
    [ExtensionAttribute]
internal static bool IsTuple(Type type);
    [ExtensionAttribute]
internal static bool IsValueTuple(Type type);
    public static bool IsScalar();
    [ExtensionAttribute]
public static T ConvertTo(IDataReader reader, IOrmLiteDialectProvider dialectProvider, HashSet`1<string> onlyFields);
    [ExtensionAttribute]
public static List`1<object> ConvertToListObjects(IDataReader dataReader);
    [ExtensionAttribute]
public static Dictionary`2<string, object> ConvertToDictionaryObjects(IDataReader dataReader);
    [ExtensionAttribute]
public static IDictionary`2<string, object> ConvertToExpandoObject(IDataReader dataReader);
    [ExtensionAttribute]
public static T ConvertToValueTuple(IDataReader reader, Object[] values, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
public static List`1<T> ConvertToList(IDataReader reader, IOrmLiteDialectProvider dialectProvider, HashSet`1<string> onlyFields);
    [ExtensionAttribute]
internal static List`1<object> ToMultiTuple(IDataReader reader, IOrmLiteDialectProvider dialectProvider, List`1<Tuple`3[]> modelIndexCaches, Type[] genericArgs, Object[] values);
    [ExtensionAttribute]
internal static List`1<Tuple`3[]> GetMultiIndexCaches(IDataReader reader, IOrmLiteDialectProvider dialectProvider, HashSet`1<string> onlyFields, Type[] genericArgs);
    [ExtensionAttribute]
public static object ConvertTo(IDataReader reader, IOrmLiteDialectProvider dialectProvider, Type type);
    [ExtensionAttribute]
public static IList ConvertToList(IDataReader reader, IOrmLiteDialectProvider dialectProvider, Type type);
    [ExtensionAttribute]
internal static string GetColumnNames(Type tableType, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string GetColumnNames(ModelDefinition modelDef, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string ToSelectString(IEnumerable`1<TItem> items);
    [ExtensionAttribute]
internal static string SetIdsInSqlParams(IDbCommand dbCmd, IEnumerable idValues);
    [ExtensionAttribute]
public static string SqlFmt(string sqlText, Object[] sqlParams);
    [ExtensionAttribute]
public static string SqlFmt(string sqlText, IOrmLiteDialectProvider dialect, Object[] sqlParams);
    [ExtensionAttribute]
public static string SqlColumn(string columnName, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string SqlColumnRaw(string columnName, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string SqlTable(string tableName, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string SqlTableRaw(string tableName, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string SqlValue(object value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_SqlVerifyFragmentFn();
    [CompilerGeneratedAttribute]
public static void set_SqlVerifyFragmentFn(Func`2<string, string> value);
    public static bool isUnsafeSql(string sql, Regex verifySql);
    [ExtensionAttribute]
public static string SqlVerifyFragment(string sqlFragment);
    [ExtensionAttribute]
public static string SqlVerifyFragment(string sqlFragment, IEnumerable`1<string> illegalFragments);
    [ExtensionAttribute]
public static string SqlParam(string paramValue);
    [ExtensionAttribute]
public static string StripQuotedStrings(string text, char quote);
    [ExtensionAttribute]
public static string SqlJoin(List`1<T> values, IOrmLiteDialectProvider dialect);
    public static string SqlJoin(IEnumerable values, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static SqlInValues SqlInValues(T[] values, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string SqlInParams(T[] values, IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static String[] GetFieldNames(IDataReader reader);
    [ExtensionAttribute]
public static Tuple`3[] GetIndexFieldsCache(IDataReader reader, ModelDefinition modelDefinition, IOrmLiteDialectProvider dialect, HashSet`1<string> onlyFields, int startPos, Nullable`1<int> endPos);
    internal static int FindColumnIndex(IOrmLiteDialectProvider dialectProvider, FieldDefinition fieldDef, Dictionary`2<string, int> dbFieldMap);
    private static int TryGuessColumnIndex(string fieldName, Dictionary`2<string, int> dbFieldMap);
    [ExtensionAttribute]
public static bool IsRefType(Type fieldType);
    [ExtensionAttribute]
public static string StripTablePrefixes(string selectExpression);
    [ExtensionAttribute]
public static string AliasOrColumn(string quotedExpr);
    [ExtensionAttribute]
public static string StripDbQuotes(string quotedExpr);
    public static void PrintSql();
    public static void UnPrintSql();
    public static StringBuilder CaptureSql();
    public static void CaptureSql(StringBuilder sb);
    public static void UnCaptureSql();
    public static string UnCaptureSqlAndFree(StringBuilder sb);
    public static ModelDefinition GetModelDefinition(Type modelType);
    public static ulong ConvertToULong(Byte[] bytes);
    [ExtensionAttribute]
public static List`1<Parent> Merge(Parent parent, List`1<Child> children);
    [ExtensionAttribute]
public static List`1<Parent> Merge(List`1<Parent> parents, List`1<Child> children);
    internal static void SetListChildResults(List`1<Parent> parents, ModelDefinition modelDef, FieldDefinition fieldDef, Type refType, IList childResults, FieldDefinition refField);
    internal static void SetRefSelfChildResults(List`1<Parent> parents, FieldDefinition fieldDef, ModelDefinition refModelDef, FieldDefinition refSelf, IList childResults);
    internal static void SetRefFieldChildResults(List`1<Parent> parents, ModelDefinition modelDef, FieldDefinition fieldDef, FieldDefinition refField, IList childResults);
    [ObsoleteAttribute("Use dialectProvider.GetNonDefaultValueInsertFields()")]
public static List`1<string> GetNonDefaultValueInsertFields(T obj);
    public static void AssertNotAnonType();
    [ExtensionAttribute]
public static List`1<string> GetNonDefaultValueInsertFields(IOrmLiteDialectProvider dialectProvider, object obj);
    [ExtensionAttribute]
public static List`1<string> ParseTokens(string expr);
    [ExtensionAttribute]
public static String[] AllAnonFields(Type type);
    [ExtensionAttribute]
public static T EvalFactoryFn(Expression`1<Func`1<T>> expr);
    public static JoinFormatDelegate JoinAlias(string alias);
    public static string QuotedLiteral(string text);
    public static string UnquotedColumnName(string columnExpr);
    public static string OrderByFields(IOrmLiteDialectProvider dialect, string orderBy);
    public static string MaskPassword(string connectionString);
}
public static class ServiceStack.OrmLite.OrmLiteVariables : object {
    public static string SystemUtc;
    public static string MaxText;
    public static string MaxTextUnicode;
    public static string True;
    public static string False;
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteWriteApi : object {
    [ExtensionAttribute]
public static string GetLastSql(IDbConnection dbConn);
    [ExtensionAttribute]
public static string GetMergedParamsLastSql(IDbConnection dbConn);
    [ExtensionAttribute]
public static string GetLastSqlAndParams(IDbCommand dbCmd);
    [ExtensionAttribute]
public static int ExecuteSql(IDbConnection dbConn, string sql);
    [ExtensionAttribute]
public static int ExecuteSql(IDbConnection dbConn, string sql, object dbParams);
    [ExtensionAttribute]
public static int ExecuteSql(IDbConnection dbConn, string sql, Dictionary`2<string, object> dbParams);
    [ExtensionAttribute]
public static long Insert(IDbConnection dbConn, T obj, bool selectIdentity, bool enableIdentityInsert);
    [ExtensionAttribute]
public static long Insert(IDbConnection dbConn, T obj, Action`1<IDbCommand> commandFilter, bool selectIdentity);
    [ExtensionAttribute]
public static long Insert(IDbConnection dbConn, Dictionary`2<string, object> obj, bool selectIdentity);
    [ExtensionAttribute]
public static long Insert(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, Dictionary`2<string, object> obj, bool selectIdentity);
    [ExtensionAttribute]
public static void InsertUsingDefaults(IDbConnection dbConn, T[] objs);
    [ExtensionAttribute]
public static long InsertIntoSelect(IDbConnection dbConn, ISqlExpression query);
    [ExtensionAttribute]
public static long InsertIntoSelect(IDbConnection dbConn, ISqlExpression query, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static void InsertAll(IDbConnection dbConn, IEnumerable`1<T> objs);
    [ExtensionAttribute]
public static void InsertAll(IDbConnection dbConn, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static void Insert(IDbConnection dbConn, T[] objs);
    [ExtensionAttribute]
public static void Insert(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, T[] objs);
    [ExtensionAttribute]
public static void BulkInsert(IDbConnection dbConn, IEnumerable`1<T> objs, BulkInsertConfig config);
    [ExtensionAttribute]
public static int Update(IDbConnection dbConn, T obj, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Update(IDbConnection dbConn, Dictionary`2<string, object> obj, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Update(IDbConnection dbConn, T[] objs);
    [ExtensionAttribute]
public static int Update(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, T[] objs);
    [ExtensionAttribute]
public static int UpdateAll(IDbConnection dbConn, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, object anonFilter, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, Dictionary`2<string, object> filters);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, T allFieldsFilter, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, T[] allFieldsFilters);
    [ExtensionAttribute]
public static int DeleteNonDefaults(IDbConnection dbConn, T nonDefaultsFilter);
    [ExtensionAttribute]
public static int DeleteNonDefaults(IDbConnection dbConn, T[] nonDefaultsFilters);
    [ExtensionAttribute]
public static int DeleteById(IDbConnection dbConn, object id, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static void DeleteById(IDbConnection dbConn, object id, ulong rowVersion, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int DeleteByIds(IDbConnection dbConn, IEnumerable idValues);
    [ExtensionAttribute]
public static int DeleteAll(IDbConnection dbConn);
    [ExtensionAttribute]
public static int DeleteAll(IDbConnection dbConn, IEnumerable`1<T> rows);
    [ExtensionAttribute]
public static int DeleteAll(IDbConnection dbConn, Type tableType);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, string sqlFilter, object anonType);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, Type tableType, string sqlFilter, object anonType);
    [ExtensionAttribute]
public static bool Save(IDbConnection dbConn, T obj, bool references);
    [ExtensionAttribute]
public static int Save(IDbConnection dbConn, T[] objs);
    [ExtensionAttribute]
public static int SaveAll(IDbConnection dbConn, IEnumerable`1<T> objs);
    [ExtensionAttribute]
public static void SaveAllReferences(IDbConnection dbConn, T instance);
    [ExtensionAttribute]
public static void SaveReferences(IDbConnection dbConn, T instance, TRef[] refs);
    [ExtensionAttribute]
public static void SaveReferences(IDbConnection dbConn, T instance, List`1<TRef> refs);
    [ExtensionAttribute]
public static void SaveReferences(IDbConnection dbConn, T instance, IEnumerable`1<TRef> refs);
    [ExtensionAttribute]
public static object GetRowVersion(IDbConnection dbConn, object id);
    [ExtensionAttribute]
public static object GetRowVersion(IDbConnection dbConn, Type modelType, object id);
    [ExtensionAttribute]
public static void ExecuteProcedure(IDbConnection dbConn, T obj);
    [ExtensionAttribute]
public static string ToUpdateStatement(IDbConnection dbConn, T item, ICollection`1<string> updateFields);
    [ExtensionAttribute]
public static string ToInsertStatement(IDbConnection dbConn, T item, ICollection`1<string> insertFields);
    [CompilerGeneratedAttribute]
internal static Type <GetMergedParamsLastSql>g__GetTypeFromDbType|1_0(DbType dbType);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteWriteApiAsync : object {
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlAsync(IDbConnection dbConn, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlAsync(IDbConnection dbConn, string sql, object dbParams, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> InsertAsync(IDbConnection dbConn, T obj, bool selectIdentity, bool enableIdentityInsert, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> InsertAsync(IDbConnection dbConn, T obj, Action`1<IDbCommand> commandFilter, bool selectIdentity, bool enableIdentityInsert, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> InsertAsync(IDbConnection dbConn, Dictionary`2<string, object> obj, bool selectIdentity, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> InsertAsync(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, Dictionary`2<string, object> obj, bool selectIdentity, CancellationToken token);
    [ExtensionAttribute]
public static Task InsertAsync(IDbConnection dbConn, CancellationToken token, T[] objs);
    [ExtensionAttribute]
public static Task InsertAsync(IDbConnection dbConn, T[] objs);
    [ExtensionAttribute]
public static Task InsertAsync(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, CancellationToken token, T[] objs);
    [ExtensionAttribute]
public static Task InsertUsingDefaultsAsync(IDbConnection dbConn, T[] objs, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> InsertIntoSelectAsync(IDbConnection dbConn, ISqlExpression query, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> InsertIntoSelectAsync(IDbConnection dbConn, ISqlExpression query, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task InsertAllAsync(IDbConnection dbConn, IEnumerable`1<T> objs, CancellationToken token);
    [ExtensionAttribute]
public static Task InsertAllAsync(IDbConnection dbConn, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, T obj, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, Dictionary`2<string, object> obj, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, CancellationToken token, T[] objs);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, T[] objs);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, CancellationToken token, T[] objs);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, T[] objs);
    [ExtensionAttribute]
public static Task`1<int> UpdateAllAsync(IDbConnection dbConn, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, object anonFilter, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, Dictionary`2<string, object> filters, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, T allFieldsFilter, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, CancellationToken token, T[] allFieldsFilters);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, Action`1<IDbCommand> commandFilter, T[] allFieldsFilters);
    [ExtensionAttribute]
public static Task`1<int> DeleteNonDefaultsAsync(IDbConnection dbConn, T nonDefaultsFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteNonDefaultsAsync(IDbConnection dbConn, CancellationToken token, T[] nonDefaultsFilters);
    [ExtensionAttribute]
public static Task`1<int> DeleteNonDefaultsAsync(IDbConnection dbConn, T[] nonDefaultsFilters);
    [ExtensionAttribute]
public static Task`1<int> DeleteByIdAsync(IDbConnection dbConn, object id, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task DeleteByIdAsync(IDbConnection dbConn, object id, ulong rowVersion, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteByIdsAsync(IDbConnection dbConn, IEnumerable idValues, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAllAsync(IDbConnection dbConn, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAllAsync(IDbConnection dbConn, Type tableType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, string sqlFilter, object anonType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, Type tableType, string sqlFilter, object anonType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteApiAsync/<SaveAsync>d__36`1")]
[ExtensionAttribute]
public static Task`1<bool> SaveAsync(IDbConnection dbConn, T obj, bool references, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> SaveAsync(IDbConnection dbConn, CancellationToken token, T[] objs);
    [ExtensionAttribute]
public static Task`1<int> SaveAsync(IDbConnection dbConn, T[] objs);
    [ExtensionAttribute]
public static Task`1<int> SaveAllAsync(IDbConnection dbConn, IEnumerable`1<T> objs, CancellationToken token);
    [ExtensionAttribute]
public static Task SaveAllReferencesAsync(IDbConnection dbConn, T instance, CancellationToken token);
    [ExtensionAttribute]
public static Task SaveReferencesAsync(IDbConnection dbConn, CancellationToken token, T instance, TRef[] refs);
    [ExtensionAttribute]
public static Task SaveReferencesAsync(IDbConnection dbConn, T instance, TRef[] refs);
    [ExtensionAttribute]
public static Task SaveReferencesAsync(IDbConnection dbConn, T instance, List`1<TRef> refs, CancellationToken token);
    [ExtensionAttribute]
public static Task SaveReferencesAsync(IDbConnection dbConn, T instance, IEnumerable`1<TRef> refs, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<object> GetRowVersionAsync(IDbConnection dbConn, object id, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<object> GetRowVersionAsync(IDbConnection dbConn, Type modelType, object id, CancellationToken token);
    [ExtensionAttribute]
public static Task ExecuteProcedureAsync(IDbConnection dbConn, T obj, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteWriteCommandExtensions : object {
    internal static ILog Log;
    private static int NotFound;
    private static OrmLiteWriteCommandExtensions();
    [ExtensionAttribute]
internal static bool CreateSchema(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static bool CreateSchema(IDbCommand dbCmd, string schemaName);
    [ExtensionAttribute]
internal static void CreateTables(IDbCommand dbCmd, bool overwrite, Type[] tableTypes);
    [ExtensionAttribute]
internal static bool CreateTable(IDbCommand dbCmd, bool overwrite);
    [ExtensionAttribute]
internal static bool CreateTable(IDbCommand dbCmd, bool overwrite, Type modelType);
    [ExtensionAttribute]
internal static void DropTable(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static void DropTable(IDbCommand dbCmd, Type modelType);
    [ExtensionAttribute]
internal static void DropTables(IDbCommand dbCmd, Type[] tableTypes);
    private static void DropTable(IDbCommand dbCmd, ModelDefinition modelDef);
    [ExtensionAttribute]
internal static string LastSql(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static int ExecuteSql(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int ExecuteSql(IDbCommand dbCmd, string sql, object anonType, Action`1<IDbCommand> commandFilter);
    private static bool IgnoreAlreadyExistsError(Exception ex);
    private static bool IgnoreAlreadyExistsGeneratorError(Exception ex);
    [ExtensionAttribute]
public static T PopulateWithSqlReader(T objWithProperties, IOrmLiteDialectProvider dialectProvider, IDataReader reader);
    [ExtensionAttribute]
public static int GetColumnIndex(IDataReader reader, IOrmLiteDialectProvider dialectProvider, string fieldName);
    [ExtensionAttribute]
public static T PopulateWithSqlReader(T objWithProperties, IOrmLiteDialectProvider dialectProvider, IDataReader reader, Tuple`3[] indexCache, Object[] values);
    [ExtensionAttribute]
public static void PopulateObjectWithSqlReader(IOrmLiteDialectProvider dialectProvider, object objWithProperties, IDataReader reader, Tuple`3[] indexCache, Object[] values);
    [ExtensionAttribute]
internal static Object[] PopulateValues(IDataReader reader, Object[] values, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
internal static int Update(IDbCommand dbCmd, T obj, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int Update(IDbCommand dbCmd, Dictionary`2<string, object> obj, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int UpdateInternal(IDbCommand dbCmd, object obj, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int UpdateAndVerify(IDbCommand dbCmd, Action`1<IDbCommand> commandFilter, bool hadRowVersion);
    [ExtensionAttribute]
internal static int Update(IDbCommand dbCmd, T[] objs, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int UpdateAll(IDbCommand dbCmd, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter);
    private static int AssertRowsUpdated(IDbCommand dbCmd, bool hadRowVersion);
    [ExtensionAttribute]
internal static int Delete(IDbCommand dbCmd, T anonType, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int Delete(IDbCommand dbCmd, object anonType, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int DeleteNonDefaults(IDbCommand dbCmd, T filter);
    [ExtensionAttribute]
internal static int Delete(IDbCommand dbCmd, T[] objs);
    [ExtensionAttribute]
internal static int DeleteNonDefaults(IDbCommand dbCmd, T[] filters);
    private static int DeleteAll(IDbCommand dbCmd, IEnumerable`1<T> objs, Func`2<object, Dictionary`2<string, object>> fieldValuesFn, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int DeleteById(IDbCommand dbCmd, object id, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static string DeleteByIdSql(IDbCommand dbCmd, object id);
    [ExtensionAttribute]
internal static void DeleteById(IDbCommand dbCmd, object id, ulong rowVersion, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static string DeleteByIdSql(IDbCommand dbCmd, object id, ulong rowVersion);
    [ExtensionAttribute]
internal static int DeleteByIds(IDbCommand dbCmd, IEnumerable idValues);
    internal static string GetDeleteByIdsSql(string sqlIn, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
internal static int DeleteAll(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static int DeleteAll(IDbCommand dbCmd, IEnumerable`1<T> rows);
    [ExtensionAttribute]
internal static int DeleteAll(IDbCommand dbCmd, Type tableType);
    [ExtensionAttribute]
internal static int Delete(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static int Delete(IDbCommand dbCmd, Type tableType, string sql, object anonType);
    [ExtensionAttribute]
internal static long Insert(IDbCommand dbCmd, T obj, Action`1<IDbCommand> commandFilter, bool selectIdentity, bool enableIdentityInsert);
    [ExtensionAttribute]
internal static long Insert(IDbCommand dbCmd, Dictionary`2<string, object> obj, Action`1<IDbCommand> commandFilter, bool selectIdentity);
    [ExtensionAttribute]
internal static void RemovePrimaryKeyWithDefaultValue(Dictionary`2<string, object> obj);
    private static long InsertInternal(IOrmLiteDialectProvider dialectProvider, IDbCommand dbCmd, object obj, Action`1<IDbCommand> commandFilter, bool selectIdentity);
    [ExtensionAttribute]
internal static long PopulateReturnValues(IDataReader reader, IOrmLiteDialectProvider dialectProvider, object obj);
    [ExtensionAttribute]
internal static void Insert(IDbCommand dbCmd, Action`1<IDbCommand> commandFilter, T[] objs);
    [ExtensionAttribute]
internal static long InsertIntoSelect(IDbCommand dbCmd, ISqlExpression query, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static IDbCommand InsertIntoSelectInternal(IDbCommand dbCmd, ISqlExpression query, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static void InsertAll(IDbCommand dbCmd, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static void InsertUsingDefaults(IDbCommand dbCmd, T[] objs);
    [ExtensionAttribute]
internal static int Save(IDbCommand dbCmd, T[] objs);
    [ExtensionAttribute]
internal static bool Save(IDbCommand dbCmd, T obj);
    [ExtensionAttribute]
internal static int SaveAll(IDbCommand dbCmd, IEnumerable`1<T> objs);
    [ExtensionAttribute]
internal static void SaveAllReferences(IDbCommand dbCmd, T instance);
    internal static void SaveAllReferences(IDbCommand dbCmd, ModelDefinition modelDef, object instance);
    [ExtensionAttribute]
internal static void SaveReferences(IDbCommand dbCmd, T instance, TRef[] refs);
    [ExtensionAttribute]
internal static void ExecuteProcedure(IDbCommand dbCmd, T obj);
    [ExtensionAttribute]
internal static object GetRowVersion(IDbCommand dbCmd, ModelDefinition modelDef, object id);
    [ExtensionAttribute]
internal static string RowVersionSql(IDbCommand dbCmd, ModelDefinition modelDef, object id);
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync : object {
    internal static ILog Log;
    private static OrmLiteWriteCommandExtensionsAsync();
    [ExtensionAttribute]
internal static Task`1<int> ExecuteSqlAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> ExecuteSqlAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> ExecuteSqlAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> ExecuteSqlAsync(IDbCommand dbCmd, string sql, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> ExecuteSqlAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> ExecuteSqlAsync(IDbCommand dbCmd, string sql, object anonType, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateAsync(IDbCommand dbCmd, T obj, CancellationToken token, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static Task`1<int> UpdateAsync(IDbCommand dbCmd, Dictionary`2<string, object> obj, CancellationToken token, Action`1<IDbCommand> commandFilter);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<UpdateInternalAsync>d__9`1")]
[ExtensionAttribute]
internal static Task`1<int> UpdateInternalAsync(IDbCommand dbCmd, object obj, CancellationToken token, Action`1<IDbCommand> commandFilter);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<UpdateAndVerifyAsync>d__10`1")]
[ExtensionAttribute]
internal static Task`1<int> UpdateAndVerifyAsync(IDbCommand dbCmd, Action`1<IDbCommand> commandFilter, bool hadRowVersion, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateAsync(IDbCommand dbCmd, Action`1<IDbCommand> commandFilter, CancellationToken token, T[] objs);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<UpdateAllAsync>d__12`1")]
[ExtensionAttribute]
internal static Task`1<int> UpdateAllAsync(IDbCommand dbCmd, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<AssertRowsUpdatedAsync>d__13")]
private static Task`1<int> AssertRowsUpdatedAsync(IDbCommand dbCmd, bool hadRowVersion, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, T filter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteNonDefaultsAsync(IDbCommand dbCmd, T filter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, CancellationToken token, T[] objs);
    [ExtensionAttribute]
internal static Task`1<int> DeleteNonDefaultsAsync(IDbCommand dbCmd, CancellationToken token, T[] filters);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<DeleteAllAsync>d__19`1")]
private static Task`1<int> DeleteAllAsync(IDbCommand dbCmd, IEnumerable`1<T> objs, Func`2<object, Dictionary`2<string, object>> fieldValuesFn, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteByIdAsync(IDbCommand dbCmd, object id, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<DeleteByIdAsync>d__21`1")]
[ExtensionAttribute]
internal static Task DeleteByIdAsync(IDbCommand dbCmd, object id, ulong rowVersion, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteByIdsAsync(IDbCommand dbCmd, IEnumerable idValues, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAllAsync(IDbCommand dbCmd, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAllAsync(IDbCommand dbCmd, Type tableType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, Type tableType, string sql, object anonType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<InsertAsync>d__27`1")]
[ExtensionAttribute]
internal static Task`1<long> InsertAsync(IDbCommand dbCmd, T obj, Action`1<IDbCommand> commandFilter, bool selectIdentity, bool enableIdentityInsert, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<InsertAsync>d__28`1")]
[ExtensionAttribute]
internal static Task`1<long> InsertAsync(IDbCommand dbCmd, Dictionary`2<string, object> obj, Action`1<IDbCommand> commandFilter, bool selectIdentity, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<InsertInternalAsync>d__29`1")]
private static Task`1<long> InsertInternalAsync(IOrmLiteDialectProvider dialectProvider, IDbCommand dbCmd, object obj, Action`1<IDbCommand> commandFilter, bool selectIdentity, CancellationToken token);
    [ExtensionAttribute]
internal static Task InsertAsync(IDbCommand dbCmd, Action`1<IDbCommand> commandFilter, CancellationToken token, T[] objs);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<InsertUsingDefaultsAsync>d__31`1")]
[ExtensionAttribute]
internal static Task InsertUsingDefaultsAsync(IDbCommand dbCmd, T[] objs, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<InsertIntoSelectAsync>d__32`1")]
[ExtensionAttribute]
internal static Task`1<long> InsertIntoSelectAsync(IDbCommand dbCmd, ISqlExpression query, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<InsertAllAsync>d__33`1")]
[ExtensionAttribute]
internal static Task InsertAllAsync(IDbCommand dbCmd, IEnumerable`1<T> objs, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> SaveAsync(IDbCommand dbCmd, CancellationToken token, T[] objs);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<SaveAsync>d__35`1")]
[ExtensionAttribute]
internal static Task`1<bool> SaveAsync(IDbCommand dbCmd, T obj, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<SaveAllAsync>d__36`1")]
[ExtensionAttribute]
internal static Task`1<int> SaveAllAsync(IDbCommand dbCmd, IEnumerable`1<T> objs, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<SaveAllReferencesAsync>d__37`1")]
[ExtensionAttribute]
internal static Task SaveAllReferencesAsync(IDbCommand dbCmd, T instance, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<SaveAllReferences>d__38")]
internal static Task SaveAllReferences(IDbCommand dbCmd, ModelDefinition modelDef, object instance, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<SaveReferencesAsync>d__39`2")]
[ExtensionAttribute]
public static Task SaveReferencesAsync(IDbCommand dbCmd, CancellationToken token, T instance, TRef[] refs);
    [ExtensionAttribute]
internal static Task ExecuteProcedureAsync(IDbCommand dbCommand, T obj, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync/<GetRowVersionAsync>d__41")]
[ExtensionAttribute]
internal static Task`1<object> GetRowVersionAsync(IDbCommand dbCmd, ModelDefinition modelDef, object id, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteWriteExpressionsApi : object {
    [ExtensionAttribute]
public static int UpdateOnlyFields(IDbConnection dbConn, T model, SqlExpression`1<T> onlyFields, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnlyFields(IDbConnection dbConn, T obj, String[] onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnlyFields(IDbConnection dbConn, T obj, Expression`1<Func`2<T, object>> onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnly(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnly(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnly(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, string whereExpression, IEnumerable`1<IDbDataParameter> sqlParams, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnly(IDbConnection dbConn, Dictionary`2<string, object> updateFields, Expression`1<Func`2<T, bool>> obj);
    [ExtensionAttribute]
public static int UpdateOnly(IDbConnection dbConn, Dictionary`2<string, object> updateFields, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnly(IDbConnection dbConn, Dictionary`2<string, object> updateFields, string whereExpression, Object[] whereParams, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateAdd(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateAdd(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateNonDefaults(IDbConnection dbConn, T item, Expression`1<Func`2<T, bool>> obj);
    [ExtensionAttribute]
public static int Update(IDbConnection dbConn, T item, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Update(IDbConnection dbConn, object updateOnly, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static long InsertOnly(IDbConnection dbConn, T obj, Expression`1<Func`2<T, object>> onlyFields, bool selectIdentity);
    [ExtensionAttribute]
public static long InsertOnly(IDbConnection dbConn, T obj, String[] onlyFields, bool selectIdentity);
    [ExtensionAttribute]
public static long InsertOnly(IDbConnection dbConn, Expression`1<Func`1<T>> insertFields, bool selectIdentity);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Delete(IDbConnection dbConn, SqlExpression`1<T> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int DeleteWhere(IDbConnection dbConn, string whereFilter, Object[] whereParams);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync : object {
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyFieldsAsync(IDbConnection dbConn, T model, SqlExpression`1<T> onlyFields, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyFieldsAsync(IDbConnection dbConn, T obj, String[] onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyFieldsAsync(IDbConnection dbConn, T obj, Expression`1<Func`2<T, object>> onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, string whereExpression, IEnumerable`1<IDbDataParameter> sqlParams, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbConnection dbConn, Dictionary`2<string, object> updateFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbConnection dbConn, Dictionary`2<string, object> updateFields, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbConnection dbConn, Dictionary`2<string, object> updateFields, string whereExpression, Object[] whereParams, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAddAsync(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAddAsync(IDbConnection dbConn, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateNonDefaultsAsync(IDbConnection dbConn, T item, Expression`1<Func`2<T, bool>> obj, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, T item, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection dbConn, object updateOnly, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task InsertOnlyAsync(IDbConnection dbConn, T obj, Expression`1<Func`2<T, object>> onlyFields, CancellationToken token);
    [ExtensionAttribute]
public static Task InsertOnlyAsync(IDbConnection dbConn, T obj, String[] onlyFields, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> InsertOnlyAsync(IDbConnection dbConn, Expression`1<Func`1<T>> insertFields, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection dbConn, SqlExpression`1<T> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> DeleteWhereAsync(IDbConnection dbConn, string whereFilter, Object[] whereParams, Action`1<IDbCommand> commandFilter, CancellationToken token);
}
public class ServiceStack.OrmLite.ParameterRebinder : SqlExpressionVisitor {
    private Dictionary`2<ParameterExpression, ParameterExpression> map;
    public ParameterRebinder(Dictionary`2<ParameterExpression, ParameterExpression> map);
    public static Expression ReplaceParameters(Dictionary`2<ParameterExpression, ParameterExpression> map, Expression exp);
    protected virtual Expression VisitParameter(ParameterExpression p);
}
public class ServiceStack.OrmLite.PartialSqlString : object {
    public static PartialSqlString Null;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public EnumMemberAccess EnumMember;
    public string Text { get; internal set; }
    public PartialSqlString(string text);
    public PartialSqlString(string text, EnumMemberAccess enumMember);
    private static PartialSqlString();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
internal void set_Text(string value);
    public virtual string ToString();
    protected bool Equals(PartialSqlString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.PredicateBuilder : object {
    public static Expression`1<Func`2<T, bool>> True();
    public static Expression`1<Func`2<T, bool>> False();
    public static Expression`1<Func`2<T, bool>> Create(Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Not(Expression`1<Func`2<T, bool>> expression);
    [ExtensionAttribute]
private static Expression`1<T> Compose(Expression`1<T> first, Expression`1<T> second, Func`3<Expression, Expression, Expression> merge);
}
public class ServiceStack.OrmLite.PrefixNamingStrategy : OrmLiteNamingStrategyBase {
    [CompilerGeneratedAttribute]
private string <TablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnPrefix>k__BackingField;
    public string TablePrefix { get; public set; }
    public string ColumnPrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TablePrefix();
    [CompilerGeneratedAttribute]
public void set_TablePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnPrefix();
    [CompilerGeneratedAttribute]
public void set_ColumnPrefix(string value);
    public virtual string GetTableName(string name);
    public virtual string GetColumnName(string name);
}
public enum ServiceStack.OrmLite.QueryType : Enum {
    public int value__;
    public static QueryType Select;
    public static QueryType Single;
    public static QueryType Scalar;
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.ReadExpressionCommandExtensions : object {
    [ExtensionAttribute]
internal static List`1<T> Select(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static List`1<T> Select(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
internal static List`1<Tuple`2<T, T2>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static List`1<Tuple`3<T, T2, T3>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static List`1<Tuple`4<T, T2, T3, T4>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static List`1<Tuple`5<T, T2, T3, T4, T5>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static List`1<Tuple`6<T, T2, T3, T4, T5, T6>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static string CreateMultiSelect(SqlExpression`1<T> q, IOrmLiteDialectProvider dialectProvider);
    [ExtensionAttribute]
internal static string CreateMultiSelect(ISqlExpression q, String[] tableSelects);
    [ExtensionAttribute]
internal static List`1<Tuple`2<T, T2>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects);
    [ExtensionAttribute]
internal static List`1<Tuple`3<T, T2, T3>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects);
    [ExtensionAttribute]
internal static List`1<Tuple`4<T, T2, T3, T4>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects);
    [ExtensionAttribute]
internal static List`1<Tuple`5<T, T2, T3, T4, T5>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects);
    [ExtensionAttribute]
internal static List`1<Tuple`6<T, T2, T3, T4, T5, T6>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects);
    [ExtensionAttribute]
internal static List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects);
    [ExtensionAttribute]
internal static List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>> SelectMulti(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects);
    [ExtensionAttribute]
internal static T Single(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
internal static T Single(IDbCommand dbCmd, SqlExpression`1<T> q);
    [ExtensionAttribute]
public static TKey Scalar(IDbCommand dbCmd, SqlExpression`1<T> expression);
    [ExtensionAttribute]
public static TKey Scalar(IDbCommand dbCmd, Expression`1<Func`2<T, object>> field);
    [ExtensionAttribute]
internal static TKey Scalar(IDbCommand dbCmd, Expression`1<Func`2<T, object>> field, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
internal static long Count(IDbCommand dbCmd);
    [ExtensionAttribute]
internal static long Count(IDbCommand dbCmd, SqlExpression`1<T> expression);
    [ExtensionAttribute]
internal static long Count(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
internal static long GetCount(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static long GetCount(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static long RowCount(IDbCommand dbCmd, SqlExpression`1<T> expression);
    [ExtensionAttribute]
internal static long RowCount(IDbCommand dbCmd, string sql, object anonType);
    [ExtensionAttribute]
internal static long RowCount(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
internal static List`1<T> LoadSelect(IDbCommand dbCmd, SqlExpression`1<T> expression, IEnumerable`1<string> include);
    [ExtensionAttribute]
internal static List`1<Into> LoadSelect(IDbCommand dbCmd, SqlExpression`1<From> expression, IEnumerable`1<string> include);
    [ExtensionAttribute]
internal static List`1<T> LoadSelect(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate, IEnumerable`1<string> include);
    [ExtensionAttribute]
internal static DataTable GetSchemaTable(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
public static ColumnSchema[] GetTableColumns(IDbCommand dbCmd, Type table);
    [ExtensionAttribute]
public static ColumnSchema[] GetTableColumns(IDbCommand dbCmd, string sql);
    [ExtensionAttribute]
internal static ColumnSchema[] ToColumnSchemas(DataTable dt, IDbCommand dbCmd);
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync : object {
    [ExtensionAttribute]
internal static Task`1<List`1<Into>> SelectAsync(IDbCommand dbCmd, SqlExpression`1<From> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> SelectAsync(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`2<T, T2>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`3<T, T2, T3>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`4<T, T2, T3, T4>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`5<T, T2, T3, T4, T5>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`6<T, T2, T3, T4, T5, T6>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`2<T, T2>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`3<T, T2, T3>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`4<T, T2, T3, T4>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`5<T, T2, T3, T4, T5>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`6<T, T2, T3, T4, T5, T6>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`7<T, T2, T3, T4, T5, T6, T7>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Tuple`8<T, T2, T3, T4, T5, T6, T7, T8>>> SelectMultiAsync(IDbCommand dbCmd, SqlExpression`1<T> q, String[] tableSelects, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SingleAsync(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> SingleAsync(IDbCommand dbCmd, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TKey> ScalarAsync(IDbCommand dbCmd, Expression`1<Func`2<T, object>> field, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<TKey> ScalarAsync(IDbCommand dbCmd, Expression`1<Func`2<T, object>> field, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<long> CountAsync(IDbCommand dbCmd, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<long> CountAsync(IDbCommand dbCmd, SqlExpression`1<T> q, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<long> CountAsync(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync/<GetCountAsync>d__24")]
[ExtensionAttribute]
internal static Task`1<long> GetCountAsync(IDbCommand dbCmd, string sql, IEnumerable`1<IDbDataParameter> sqlParams, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<long> RowCountAsync(IDbCommand dbCmd, SqlExpression`1<T> expression, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<long> RowCountAsync(IDbCommand dbCmd, string sql, object anonType, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> LoadSelectAsync(IDbCommand dbCmd, SqlExpression`1<T> expression, IEnumerable`1<string> include, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<Into>> LoadSelectAsync(IDbCommand dbCmd, SqlExpression`1<From> expression, IEnumerable`1<string> include, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> LoadSelectAsync(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate, IEnumerable`1<string> include, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<T> ExprConvertToAsync(IDataReader dataReader, IOrmLiteDialectProvider dialectProvider, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> Select(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync/<GetSchemaTableAsync>d__32")]
[ExtensionAttribute]
internal static Task`1<DataTable> GetSchemaTableAsync(IDbCommand dbCmd, string sql, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<ColumnSchema[]> GetTableColumnsAsync(IDbCommand dbCmd, Type table, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync/<GetTableColumnsAsync>d__34")]
[ExtensionAttribute]
public static Task`1<ColumnSchema[]> GetTableColumnsAsync(IDbCommand dbCmd, string sql, CancellationToken token);
}
public class ServiceStack.OrmLite.SavePoint : object {
    [CompilerGeneratedAttribute]
private OrmLiteTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <DialectProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private bool didRelease;
    private bool didRollback;
    private OrmLiteTransaction Transaction { get; }
    private IOrmLiteDialectProvider DialectProvider { get; }
    public string Name { get; }
    public SavePoint(OrmLiteTransaction transaction, string name);
    [CompilerGeneratedAttribute]
private OrmLiteTransaction get_Transaction();
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider get_DialectProvider();
    [CompilerGeneratedAttribute]
public string get_Name();
    private void VerifyValidState();
    public void Save();
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SavePoint/<SaveAsync>d__14")]
public Task SaveAsync();
    public void Release();
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SavePoint/<ReleaseAsync>d__16")]
public Task ReleaseAsync();
    public void Rollback();
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.SavePoint/<RollbackAsync>d__18")]
public Task RollbackAsync();
}
public abstract class ServiceStack.OrmLite.SelectItem : object {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <DialectProvider>k__BackingField;
    public string Alias { get; public set; }
    protected IOrmLiteDialectProvider DialectProvider { get; protected set; }
    protected SelectItem(IOrmLiteDialectProvider dialectProvider, string alias);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
protected IOrmLiteDialectProvider get_DialectProvider();
    [CompilerGeneratedAttribute]
protected void set_DialectProvider(IOrmLiteDialectProvider value);
    public abstract virtual string ToString();
}
public class ServiceStack.OrmLite.SelectItemColumn : SelectItem {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuotedTableAlias>k__BackingField;
    public string ColumnName { get; public set; }
    public string QuotedTableAlias { get; public set; }
    public SelectItemColumn(IOrmLiteDialectProvider dialectProvider, string columnName, string columnAlias, string quotedTableAlias);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_QuotedTableAlias();
    [CompilerGeneratedAttribute]
public void set_QuotedTableAlias(string value);
    public virtual string ToString();
}
public class ServiceStack.OrmLite.SelectItemExpression : SelectItem {
    [CompilerGeneratedAttribute]
private string <SelectExpression>k__BackingField;
    public string SelectExpression { get; public set; }
    public SelectItemExpression(IOrmLiteDialectProvider dialectProvider, string selectExpression, string alias);
    [CompilerGeneratedAttribute]
public string get_SelectExpression();
    [CompilerGeneratedAttribute]
public void set_SelectExpression(string value);
    public virtual string ToString();
}
public static class ServiceStack.OrmLite.Sql : object {
    public static string VARCHAR;
    public static string EOT;
    private static Sql();
    public static List`1<object> Flatten(IEnumerable list);
    public static bool In(T value, TItem[] list);
    public static bool In(T value, SqlExpression`1<TItem> query);
    public static string Asc(T value);
    public static string Desc(T value);
    public static string As(T value, object asValue);
    public static T Sum(T value);
    public static string Sum(string value);
    public static T Count(T value);
    public static T CountDistinct(T value);
    public static string Count(string value);
    public static T Min(T value);
    public static string Min(string value);
    public static T Max(T value);
    public static string Max(string value);
    public static T Avg(T value);
    public static string Avg(string value);
    public static T AllFields(T item);
    [ObsoleteAttribute("Use TableAlias")]
public static string JoinAlias(string property, string tableAlias);
    public static string TableAlias(string property, string tableAlias);
    [ObsoleteAttribute("Use TableAlias")]
public static T JoinAlias(T property, string tableAlias);
    public static T TableAlias(T property, string tableAlias);
    public static string Custom(string customSql);
    public static T Custom(string customSql);
    public static string Cast(object value, string castAs);
    public static Nullable`1<bool> IsJson(string expression);
    public static T JsonValue(string expression, string path);
    public static string JsonValue(string expression, string path);
    public static string JsonQuery(string expression);
    public static T JsonQuery(string expression);
    public static string JsonQuery(string expression, string path);
    public static T JsonQuery(string expression, string path);
}
public class ServiceStack.OrmLite.SqlBuilder : object {
    private Dictionary`2<string, Clauses> data;
    private int seq;
    public Template AddTemplate(string sql, object parameters);
    private void AddClause(string name, string sql, object parameters, string joiner, string prefix, string postfix);
    public SqlBuilder LeftJoin(string sql, object parameters);
    public SqlBuilder Where(string sql, object parameters);
    public SqlBuilder OrderBy(string sql, object parameters);
    public SqlBuilder Select(string sql, object parameters);
    public SqlBuilder AddParameters(object parameters);
    public SqlBuilder Join(string sql, object parameters);
}
public class ServiceStack.OrmLite.SqlCommandDetails : object {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Parameters>k__BackingField;
    public string Sql { get; public set; }
    public Dictionary`2<string, object> Parameters { get; public set; }
    public SqlCommandDetails(IDbCommand command);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Dictionary`2<string, object> value);
}
public abstract class ServiceStack.OrmLite.SqlExpression`1 : object {
    public static string TrueLiteral;
    public static string FalseLiteral;
    private Expression`1<Func`2<T, bool>> underlyingExpression;
    private List`1<string> orderByProperties;
    private string selectExpression;
    private string fromExpression;
    private string whereExpression;
    private string groupBy;
    private string havingExpression;
    private string orderBy;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <OnlyFields>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UpdateFields>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <InsertFields>k__BackingField;
    private string sep;
    protected ModelDefinition modelDef;
    [CompilerGeneratedAttribute]
private string <TableAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrmLiteDialectProvider <DialectProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IDbDataParameter> <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <SqlFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<SqlExpression`1<T>> <SelectFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrefixFieldWithTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSelectPropertiesAsAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJoinTypeAsAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhereStatementWithoutWhereString>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEscapeWildcards>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CustomSelect>k__BackingField;
    protected bool useFieldName;
    protected bool selectDistinct;
    protected bool skipParameterizationForThisExpression;
    protected bool isSelectExpression;
    private bool hasEnsureConditions;
    private bool inSqlMethodCall;
    private LambdaExpression originalLambda;
    private string quotedTrue;
    private string quotedFalse;
    protected List`1<ModelDefinition> tableDefs;
    private TableOptions joinAlias;
    private Dictionary`2<ModelDefinition, TableOptions> joinAliases;
    public HashSet`1<string> OnlyFields { get; protected set; }
    public List`1<string> UpdateFields { get; public set; }
    public List`1<string> InsertFields { get; public set; }
    public string TableAlias { get; public set; }
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public List`1<IDbDataParameter> Params { get; public set; }
    public Func`2<string, string> SqlFilter { get; public set; }
    public static Action`1<SqlExpression`1<T>> SelectFilter { get; public set; }
    public Nullable`1<int> Rows { get; public set; }
    public Nullable`1<int> Offset { get; public set; }
    public bool PrefixFieldWithTableName { get; public set; }
    public bool UseSelectPropertiesAsAliases { get; public set; }
    public bool UseJoinTypeAsAliases { get; public set; }
    public bool WhereStatementWithoutWhereString { get; public set; }
    public ISet`1<string> Tags { get; }
    public bool AllowEscapeWildcards { get; public set; }
    protected bool CustomSelect { get; protected set; }
    protected string Sep { get; }
    public string SelectExpression { get; public set; }
    public string FromExpression { get; public set; }
    public string BodyExpression { get; }
    public string WhereExpression { get; public set; }
    public string GroupByExpression { get; public set; }
    public string HavingExpression { get; public set; }
    public string OrderByExpression { get; public set; }
    public ModelDefinition ModelDef { get; protected set; }
    protected internal bool UseFieldName { get; protected internal set; }
    protected SqlExpression`1(IOrmLiteDialectProvider dialectProvider);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_OnlyFields();
    [CompilerGeneratedAttribute]
protected void set_OnlyFields(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UpdateFields();
    [CompilerGeneratedAttribute]
public void set_UpdateFields(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_InsertFields();
    [CompilerGeneratedAttribute]
public void set_InsertFields(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_TableAlias();
    [CompilerGeneratedAttribute]
public void set_TableAlias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrmLiteDialectProvider get_DialectProvider();
    [CompilerGeneratedAttribute]
public void set_DialectProvider(IOrmLiteDialectProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IDbDataParameter> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(List`1<IDbDataParameter> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_SqlFilter();
    [CompilerGeneratedAttribute]
public void set_SqlFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Action`1<SqlExpression`1<T>> get_SelectFilter();
    [CompilerGeneratedAttribute]
public static void set_SelectFilter(Action`1<SqlExpression`1<T>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_PrefixFieldWithTableName();
    [CompilerGeneratedAttribute]
public void set_PrefixFieldWithTableName(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSelectPropertiesAsAliases();
    [CompilerGeneratedAttribute]
public void set_UseSelectPropertiesAsAliases(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseJoinTypeAsAliases();
    [CompilerGeneratedAttribute]
public void set_UseJoinTypeAsAliases(bool value);
    [CompilerGeneratedAttribute]
public bool get_WhereStatementWithoutWhereString();
    [CompilerGeneratedAttribute]
public void set_WhereStatementWithoutWhereString(bool value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public bool get_AllowEscapeWildcards();
    [CompilerGeneratedAttribute]
public void set_AllowEscapeWildcards(bool value);
    [CompilerGeneratedAttribute]
protected bool get_CustomSelect();
    [CompilerGeneratedAttribute]
protected void set_CustomSelect(bool value);
    protected string get_Sep();
    public SqlExpression`1<T> Clone();
    public virtual void AddTag(string tag);
    protected virtual SqlExpression`1<T> CopyTo(SqlExpression`1<T> to);
    public string ComputeHash(bool includeParams);
    public string Dump(bool includeParams);
    public virtual SqlExpression`1<T> Select();
    internal SqlExpression`1<T> SelectIfDistinct(string selectExpression);
    public virtual SqlExpression`1<T> Select(string selectExpression);
    public virtual SqlExpression`1<T> SelectDistinct(string selectExpression);
    public virtual SqlExpression`1<T> UnsafeSelect(string rawSelect);
    public virtual SqlExpression`1<T> UnsafeSelect(string rawSelect, bool distinct);
    public virtual SqlExpression`1<T> Select(String[] fields);
    public virtual SqlExpression`1<T> SelectDistinct(String[] fields);
    internal virtual SqlExpression`1<T> Select(String[] fields, bool distinct);
    private SqlExpression`1<T> InternalSelect(Expression fields, bool distinct);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`2<T, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`2<Table1, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`3<Table1, Table2, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`5<Table1, Table2, Table3, Table4, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`6<Table1, Table2, Table3, Table4, Table5, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`7<Table1, Table2, Table3, Table4, Table5, Table6, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`8<Table1, Table2, Table3, Table4, Table5, Table6, Table7, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`9<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`10<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`11<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, Table10, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`12<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, Table10, Table11, object>> fields);
    public virtual SqlExpression`1<T> Select(Expression`1<Func`13<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, Table10, Table11, Table12, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`2<T, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`2<Table1, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`3<Table1, Table2, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`5<Table1, Table2, Table3, Table4, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`6<Table1, Table2, Table3, Table4, Table5, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`7<Table1, Table2, Table3, Table4, Table5, Table6, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`8<Table1, Table2, Table3, Table4, Table5, Table6, Table7, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`9<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`10<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`11<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, Table10, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`12<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, Table10, Table11, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct(Expression`1<Func`13<Table1, Table2, Table3, Table4, Table5, Table6, Table7, Table8, Table9, Table10, Table11, Table12, object>> fields);
    public virtual SqlExpression`1<T> SelectDistinct();
    public virtual SqlExpression`1<T> From(string tables);
    public virtual SqlExpression`1<T> IncludeTablePrefix();
    public virtual SqlExpression`1<T> SetTableAlias(string tableAlias);
    public virtual SqlExpression`1<T> UnsafeFrom(string rawFrom);
    public virtual SqlExpression`1<T> Where();
    private string FormatFilter(string sqlFilter, Object[] filterParams);
    private string CreateInParamSql(IEnumerable values);
    public virtual SqlExpression`1<T> UnsafeWhere(string rawSql, Object[] filterParams);
    public virtual SqlExpression`1<T> Where(string sqlFilter, Object[] filterParams);
    public virtual SqlExpression`1<T> UnsafeAnd(string rawSql, Object[] filterParams);
    public virtual SqlExpression`1<T> And(string sqlFilter, Object[] filterParams);
    public virtual SqlExpression`1<T> UnsafeOr(string rawSql, Object[] filterParams);
    public virtual SqlExpression`1<T> Or(string sqlFilter, Object[] filterParams);
    public virtual SqlExpression`1<T> AddCondition(string condition, string sqlFilter, Object[] filterParams);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`2<T, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`2<T, bool>> predicate, Object[] filterParams);
    public virtual SqlExpression`1<T> And(Expression`1<Func`2<T, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`2<T, bool>> predicate, Object[] filterParams);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`2<T, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`2<T, bool>> predicate, Object[] filterParams);
    public virtual SqlExpression`1<T> WhereExists(ISqlExpression subSelect);
    public virtual SqlExpression`1<T> WhereNotExists(ISqlExpression subSelect);
    private void Reset(string sep, bool useFieldName);
    protected SqlExpression`1<T> AppendToWhere(string condition, Expression predicate, Object[] filterParams);
    protected SqlExpression`1<T> AppendToWhere(string condition, Expression predicate);
    private static string WhereExpressionToString(object expression);
    protected SqlExpression`1<T> AppendToWhere(string condition, string sqlExpression);
    public virtual SqlExpression`1<T> Ensure(Expression`1<Func`2<T, bool>> predicate);
    public virtual SqlExpression`1<T> Ensure(Expression`1<Func`2<Target, bool>> predicate);
    public virtual SqlExpression`1<T> Ensure(Expression`1<Func`3<Source, Target, bool>> predicate);
    public virtual SqlExpression`1<T> Ensure(Expression`1<Func`4<T1, T2, T3, bool>> predicate);
    public virtual SqlExpression`1<T> Ensure(Expression`1<Func`5<T1, T2, T3, T4, bool>> predicate);
    public virtual SqlExpression`1<T> Ensure(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> predicate);
    protected SqlExpression`1<T> AppendToEnsure(Expression predicate);
    public SqlExpression`1<T> Ensure(string sqlFilter, Object[] filterParams);
    private string ListExpression(Expression expr, string strExpr);
    public virtual SqlExpression`1<T> GroupBy();
    public virtual SqlExpression`1<T> GroupBy(string groupBy);
    public virtual SqlExpression`1<T> UnsafeGroupBy(string groupBy);
    private SqlExpression`1<T> InternalGroupBy(Expression expr);
    public virtual SqlExpression`1<T> GroupBy(Expression`1<Func`2<Table, object>> keySelector);
    public virtual SqlExpression`1<T> GroupBy(Expression`1<Func`3<Table1, Table2, object>> keySelector);
    public virtual SqlExpression`1<T> GroupBy(Expression`1<Func`4<Table1, Table2, Table3, object>> keySelector);
    public virtual SqlExpression`1<T> GroupBy(Expression`1<Func`5<Table1, Table2, Table3, Table4, object>> keySelector);
    public virtual SqlExpression`1<T> GroupBy(Expression`1<Func`2<T, object>> keySelector);
    public virtual SqlExpression`1<T> Having();
    public virtual SqlExpression`1<T> Having(string sqlFilter, Object[] filterParams);
    public virtual SqlExpression`1<T> UnsafeHaving(string sqlFilter, Object[] filterParams);
    protected SqlExpression`1<T> AppendHaving(Expression predicate);
    public virtual SqlExpression`1<T> Having(Expression`1<Func`2<T, bool>> predicate);
    public virtual SqlExpression`1<T> Having(Expression`1<Func`2<Table, bool>> predicate);
    public virtual SqlExpression`1<T> Having(Expression`1<Func`3<Table1, Table2, bool>> predicate);
    public virtual SqlExpression`1<T> Having(Expression`1<Func`4<Table1, Table2, Table3, bool>> predicate);
    public virtual SqlExpression`1<T> OrderBy();
    public virtual SqlExpression`1<T> OrderBy(string orderBy);
    public virtual SqlExpression`1<T> OrderBy(long columnIndex);
    public virtual SqlExpression`1<T> UnsafeOrderBy(string orderBy);
    public virtual SqlExpression`1<T> OrderByRandom();
    public ModelDefinition GetModelDefinition(FieldDefinition fieldDef);
    private SqlExpression`1<T> OrderByFields(string orderBySuffix, FieldDefinition[] fields);
    public virtual SqlExpression`1<T> OrderByFields(FieldDefinition[] fields);
    public virtual SqlExpression`1<T> OrderByFieldsDescending(FieldDefinition[] fields);
    private SqlExpression`1<T> OrderByFields(string orderBySuffix, String[] fieldNames);
    public virtual SqlExpression`1<T> OrderByFields(String[] fieldNames);
    public virtual SqlExpression`1<T> OrderByFieldsDescending(String[] fieldNames);
    public virtual SqlExpression`1<T> OrderBy(Expression`1<Func`2<T, object>> keySelector);
    public virtual SqlExpression`1<T> OrderBy(Expression`1<Func`2<Table, object>> fields);
    public virtual SqlExpression`1<T> OrderBy(Expression`1<Func`3<Table1, Table2, object>> fields);
    public virtual SqlExpression`1<T> OrderBy(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public virtual SqlExpression`1<T> OrderBy(Expression`1<Func`5<Table1, Table2, Table3, Table4, object>> fields);
    public virtual SqlExpression`1<T> OrderBy(Expression`1<Func`6<Table1, Table2, Table3, Table4, Table5, object>> fields);
    private SqlExpression`1<T> OrderByInternal(Expression expr);
    public static bool IsSqlClass(object obj);
    public virtual SqlExpression`1<T> ThenBy(string orderBy);
    public virtual SqlExpression`1<T> ThenBy(Expression`1<Func`2<T, object>> keySelector);
    public virtual SqlExpression`1<T> ThenBy(Expression`1<Func`2<Table, object>> fields);
    public virtual SqlExpression`1<T> ThenBy(Expression`1<Func`3<Table1, Table2, object>> fields);
    public virtual SqlExpression`1<T> ThenBy(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public virtual SqlExpression`1<T> ThenBy(Expression`1<Func`5<Table1, Table2, Table3, Table4, object>> fields);
    public virtual SqlExpression`1<T> ThenBy(Expression`1<Func`6<Table1, Table2, Table3, Table4, Table5, object>> fields);
    private SqlExpression`1<T> ThenByInternal(Expression keySelector);
    public virtual SqlExpression`1<T> OrderByDescending(Expression`1<Func`2<T, object>> keySelector);
    public virtual SqlExpression`1<T> OrderByDescending(Expression`1<Func`2<Table, object>> keySelector);
    public virtual SqlExpression`1<T> OrderByDescending(Expression`1<Func`3<Table1, Table2, object>> fields);
    public virtual SqlExpression`1<T> OrderByDescending(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public virtual SqlExpression`1<T> OrderByDescending(Expression`1<Func`5<Table1, Table2, Table3, Table4, object>> fields);
    public virtual SqlExpression`1<T> OrderByDescending(Expression`1<Func`6<Table1, Table2, Table3, Table4, Table5, object>> fields);
    private SqlExpression`1<T> OrderByDescendingInternal(Expression keySelector);
    public virtual SqlExpression`1<T> OrderByDescending(string orderBy);
    public virtual SqlExpression`1<T> OrderByDescending(long columnIndex);
    private SqlExpression`1<T> UnsafeOrderByDescending(string orderBy);
    public virtual SqlExpression`1<T> ThenByDescending(string orderBy);
    public virtual SqlExpression`1<T> ThenByDescending(Expression`1<Func`2<T, object>> keySelector);
    public virtual SqlExpression`1<T> ThenByDescending(Expression`1<Func`2<Table, object>> fields);
    public virtual SqlExpression`1<T> ThenByDescending(Expression`1<Func`3<Table1, Table2, object>> fields);
    public virtual SqlExpression`1<T> ThenByDescending(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public virtual SqlExpression`1<T> ThenByDescending(Expression`1<Func`5<Table1, Table2, Table3, Table4, object>> fields);
    public virtual SqlExpression`1<T> ThenByDescending(Expression`1<Func`6<Table1, Table2, Table3, Table4, Table5, object>> fields);
    private SqlExpression`1<T> ThenByDescendingInternal(Expression keySelector);
    private void BuildOrderByClauseInternal();
    public virtual SqlExpression`1<T> Skip(Nullable`1<int> skip);
    public virtual SqlExpression`1<T> Take(Nullable`1<int> take);
    public virtual SqlExpression`1<T> Limit(int skip, int rows);
    public virtual SqlExpression`1<T> Limit(Nullable`1<int> skip, Nullable`1<int> rows);
    public virtual SqlExpression`1<T> Limit(int rows);
    public virtual SqlExpression`1<T> Limit();
    public virtual SqlExpression`1<T> ClearLimits();
    public virtual SqlExpression`1<T> Update(List`1<string> updateFields);
    public virtual SqlExpression`1<T> Update(IEnumerable`1<string> updateFields);
    public virtual SqlExpression`1<T> Update(Expression`1<Func`2<T, object>> fields);
    public virtual SqlExpression`1<T> Update();
    public virtual SqlExpression`1<T> Insert(Expression`1<Func`2<T, TKey>> fields);
    public virtual SqlExpression`1<T> Insert(List`1<string> insertFields);
    public virtual SqlExpression`1<T> Insert();
    public virtual SqlExpression`1<T> WithSqlFilter(Func`2<string, string> sqlFilter);
    public string SqlTable(ModelDefinition modelDef);
    public string SqlColumn(string columnName);
    public virtual IDbDataParameter AddParam(object value);
    public string ConvertToParam(object value);
    public virtual void CopyParamsTo(IDbCommand dbCmd);
    public virtual string ToDeleteRowStatement();
    public virtual void PrepareUpdateStatement(IDbCommand dbCmd, T item, bool excludeDefaults);
    public virtual void PrepareUpdateStatement(IDbCommand dbCmd, Dictionary`2<string, object> updateFields);
    public virtual string ToSelectStatement();
    public virtual string ToSelectStatement(QueryType forType);
    public virtual string ToMergedParamsSelectStatement();
    public virtual string ToCountStatement();
    public string get_SelectExpression();
    public void set_SelectExpression(string value);
    public string get_FromExpression();
    public void set_FromExpression(string value);
    public string get_BodyExpression();
    public string get_WhereExpression();
    public void set_WhereExpression(string value);
    public string get_GroupByExpression();
    public void set_GroupByExpression(string value);
    public string get_HavingExpression();
    public void set_HavingExpression(string value);
    public string get_OrderByExpression();
    public void set_OrderByExpression(string value);
    public ModelDefinition get_ModelDef();
    protected void set_ModelDef(ModelDefinition value);
    protected internal bool get_UseFieldName();
    protected internal void set_UseFieldName(bool value);
    public virtual object Visit(Expression exp);
    protected virtual object VisitJoin(Expression exp);
    protected virtual object VisitLambda(LambdaExpression lambda);
    public virtual object GetValue(object value, Type type);
    protected virtual object VisitBinary(BinaryExpression b);
    private BinaryExpression PreEvaluateBinary(BinaryExpression b, object left, object right);
    protected virtual bool IsBooleanComparison(Expression e);
    protected virtual bool IsParameterAccess(Expression e);
    protected virtual bool IsParameterOrConvertAccess(Expression e);
    protected virtual bool IsConstantExpression(Expression e);
    protected bool CheckExpressionForTypes(Expression e, ExpressionType[] types);
    private static void Swap(Object& left, Object& right);
    protected virtual void VisitFilter(string operand, object originalLeft, object originalRight, Object& left, Object& right);
    protected virtual void ConvertToPlaceholderAndParameter(Object& right);
    protected virtual object VisitMemberAccess(MemberExpression m);
    protected bool IsTableColumn(MemberExpression m);
    protected virtual object GetMemberExpression(MemberExpression m);
    protected virtual string GetTableAlias(MemberExpression m, ModelDefinition tableDef);
    protected virtual object VisitMemberInit(MemberInitExpression exp);
    protected virtual object VisitNew(NewExpression nex);
    private bool IsLambdaArg(Expression expr);
    private bool IsLambdaArg(string name);
    private object SetAnonTypePropertyNamesForSelectExpression(object expr, Expression arg, MemberInfo member);
    private static void StripAliases(SelectList<T> selectList);
    protected virtual object VisitParameter(ParameterExpression p);
    protected virtual object VisitConstant(ConstantExpression c);
    protected virtual object VisitUnary(UnaryExpression u);
    protected virtual object VisitIndexExpression(IndexExpression e);
    protected virtual object VisitConditional(ConditionalExpression e);
    private object GetNotValue(object o);
    protected virtual bool IsColumnAccess(MethodCallExpression m);
    protected virtual object VisitMethodCall(MethodCallExpression m);
    private object EvaluateExpression(Expression m);
    protected virtual List`1<object> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual List`1<object> VisitInSqlExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual object VisitNewArray(NewArrayExpression na);
    protected virtual List`1<object> VisitNewArrayFromExpressionList(NewArrayExpression na);
    protected virtual string BindOperant(ExpressionType e);
    protected virtual string GetQuotedColumnName(ModelDefinition tableDef, string memberName);
    protected virtual string GetQuotedColumnName(ModelDefinition tableDef, string tableAlias, string memberName);
    protected string RemoveQuoteFromAlias(string exp);
    protected virtual bool IsFieldName(object quotedExp);
    protected string GetColumnName(string fieldName);
    protected object GetTrueExpression();
    protected object GetFalseExpression();
    protected object GetQuotedTrueValue();
    protected object GetQuotedFalseValue();
    private void BuildSelectExpression(string fields, bool distinct);
    public IList`1<string> GetAllFields();
    protected virtual bool IsStaticArrayMethod(MethodCallExpression m);
    protected virtual object VisitStaticArrayMethodCall(MethodCallExpression m);
    private static bool IsEnumerableMethod(MethodCallExpression m);
    protected virtual object VisitEnumerableMethodCall(MethodCallExpression m);
    private object ToInPartialString(Expression memberExpr, object quotedColName);
    protected virtual bool IsStaticStringMethod(MethodCallExpression m);
    protected virtual object VisitStaticStringMethodCall(MethodCallExpression m);
    private object VisitLengthStringProperty(MemberExpression m);
    protected virtual PartialSqlString ToLengthPartialString(object arg);
    private PartialSqlString BuildConcatExpression(List`1<object> args);
    private PartialSqlString BuildCompareExpression(List`1<object> args);
    protected PartialSqlString ToConcatPartialString(List`1<object> args);
    protected virtual PartialSqlString ToComparePartialString(List`1<object> args);
    protected virtual object VisitSqlMethodCall(MethodCallExpression m);
    protected string ConvertInExpressionToSql(MethodCallExpression m, object quotedColName);
    protected virtual string CreateInSubQuerySql(object quotedColName, string subSelect);
    protected virtual object VisitColumnAccessMethod(MethodCallExpression m);
    protected virtual string ToCast(string quotedColName);
    public virtual string GetSubstringSql(object quotedColumn, int startIndex, Nullable`1<int> length);
    public IDbDataParameter CreateParam(string name, object value, ParameterDirection direction, Nullable`1<DbType> dbType, DataRowVersion sourceVersion);
    public sealed virtual IUntypedSqlExpression GetUntyped();
    public List`1<ModelDefinition> GetAllTables();
    public SqlExpression`1<T> AddReferenceTableIfNotExists();
    public SqlExpression`1<T> CustomJoin(string joinString);
    public bool IsJoinedTable(Type type);
    public SqlExpression`1<T> Join(Expression`1<Func`3<T, Target, bool>> joinExpr);
    public SqlExpression`1<T> Join(Expression`1<Func`3<T, Target, bool>> joinExpr, TableOptions options);
    public SqlExpression`1<T> Join(Expression`1<Func`3<T, Target, bool>> joinExpr, JoinFormatDelegate joinFormat);
    public SqlExpression`1<T> Join(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public SqlExpression`1<T> Join(Expression`1<Func`3<Source, Target, bool>> joinExpr, JoinFormatDelegate joinFormat);
    public SqlExpression`1<T> Join(Expression`1<Func`3<Source, Target, bool>> joinExpr, TableOptions options);
    public SqlExpression`1<T> Join(Type sourceType, Type targetType, Expression joinExpr);
    public SqlExpression`1<T> Join(Type sourceType, Type targetType, Expression joinExpr, TableOptions options);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`3<T, Target, bool>> joinExpr);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`3<T, Target, bool>> joinExpr, JoinFormatDelegate joinFormat);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`3<T, Target, bool>> joinExpr, TableOptions options);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr, JoinFormatDelegate joinFormat);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr, TableOptions options);
    public SqlExpression`1<T> LeftJoin(Type sourceType, Type targetType, Expression joinExpr);
    public SqlExpression`1<T> LeftJoin(Type sourceType, Type targetType, Expression joinExpr, TableOptions options);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`3<T, Target, bool>> joinExpr);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`3<T, Target, bool>> joinExpr, JoinFormatDelegate joinFormat);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`3<T, Target, bool>> joinExpr, TableOptions options);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr, JoinFormatDelegate joinFormat);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr, TableOptions options);
    public SqlExpression`1<T> RightJoin(Type sourceType, Type targetType, Expression joinExpr);
    public SqlExpression`1<T> RightJoin(Type sourceType, Type targetType, Expression joinExpr, TableOptions options);
    public SqlExpression`1<T> FullJoin(Expression`1<Func`3<T, Target, bool>> joinExpr);
    public SqlExpression`1<T> FullJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public SqlExpression`1<T> CrossJoin(Expression`1<Func`3<T, Target, bool>> joinExpr);
    public SqlExpression`1<T> CrossJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    protected SqlExpression`1<T> InternalJoin(string joinType, Expression`1<Func`3<Source, Target, bool>> joinExpr, JoinFormatDelegate joinFormat);
    protected SqlExpression`1<T> InternalJoin(string joinType, Expression`1<Func`3<Source, Target, bool>> joinExpr, TableOptions options);
    protected SqlExpression`1<T> InternalJoin(string joinType, Expression joinExpr);
    public SqlExpression`1<T> Join(Expression`1<Func`4<Source, Target, T3, bool>> joinExpr);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`4<Source, Target, T3, bool>> joinExpr);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`4<Source, Target, T3, bool>> joinExpr);
    public SqlExpression`1<T> FullJoin(Expression`1<Func`4<Source, Target, T3, bool>> joinExpr);
    public SqlExpression`1<T> Join(Expression`1<Func`5<Source, Target, T3, T4, bool>> joinExpr);
    public SqlExpression`1<T> LeftJoin(Expression`1<Func`5<Source, Target, T3, T4, bool>> joinExpr);
    public SqlExpression`1<T> RightJoin(Expression`1<Func`5<Source, Target, T3, T4, bool>> joinExpr);
    public SqlExpression`1<T> FullJoin(Expression`1<Func`5<Source, Target, T3, T4, bool>> joinExpr);
    private string InternalCreateSqlFromExpression(Expression joinExpr, bool isCrossJoin);
    private string InternalCreateSqlFromDefinitions(ModelDefinition sourceDef, ModelDefinition targetDef, bool isCrossJoin);
    public SqlExpression`1<T> CustomJoin(string joinString);
    protected virtual SqlExpression`1<T> InternalJoin(string joinType, Expression joinExpr, ModelDefinition sourceDef, ModelDefinition targetDef, TableOptions options);
    public sealed virtual string SelectInto();
    public sealed virtual string SelectInto(QueryType queryType);
    private static FieldDefinition FindWeakMatch(ModelDefinition tableDef, FieldDefinition fieldDef);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`2<Target, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`3<Source, Target, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`4<T1, T2, T3, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`5<T1, T2, T3, T4, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> predicate);
    public virtual SqlExpression`1<T> Where(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`2<Target, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`3<Source, Target, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`4<T1, T2, T3, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`5<T1, T2, T3, T4, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> predicate);
    public virtual SqlExpression`1<T> And(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`2<Target, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`3<Source, Target, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`4<T1, T2, T3, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`5<T1, T2, T3, T4, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> predicate);
    public virtual SqlExpression`1<T> Or(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> predicate);
    public Tuple`2<ModelDefinition, FieldDefinition> FirstMatchingField(string fieldName);
    [CompilerGeneratedAttribute]
private void <OrderByDescendingInternal>b__219_0(string x);
    [CompilerGeneratedAttribute]
private void <ThenByDescendingInternal>b__230_0(string x);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.SqlExpressionExtensions : object {
    [ExtensionAttribute]
public static IUntypedSqlExpression GetUntypedSqlExpression(ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static IOrmLiteDialectProvider ToDialectProvider(ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static string Table(ISqlExpression sqlExpression);
    [ExtensionAttribute]
public static string Table(IOrmLiteDialectProvider dialect);
    [ExtensionAttribute]
public static string Column(ISqlExpression sqlExpression, Expression`1<Func`2<Table, object>> propertyExpression, bool prefixTable);
    [ExtensionAttribute]
public static string Column(IOrmLiteDialectProvider dialect, Expression`1<Func`2<Table, object>> propertyExpression, bool prefixTable);
    [ExtensionAttribute]
public static string Column(ISqlExpression sqlExpression, string propertyName, bool prefixTable);
    [ExtensionAttribute]
public static string Column(IOrmLiteDialectProvider dialect, string propertyName, bool prefixTable);
}
public abstract class ServiceStack.OrmLite.SqlExpressionVisitor : object {
    protected virtual Expression Visit(Expression exp);
    protected virtual MemberBinding VisitBinding(MemberBinding binding);
    protected virtual ElementInit VisitElementInitializer(ElementInit initializer);
    protected virtual Expression VisitUnary(UnaryExpression u);
    protected virtual Expression VisitBinary(BinaryExpression b);
    protected virtual Expression VisitTypeIs(TypeBinaryExpression b);
    protected virtual Expression VisitConstant(ConstantExpression c);
    protected virtual Expression VisitConditional(ConditionalExpression c);
    protected virtual Expression VisitParameter(ParameterExpression p);
    protected virtual Expression VisitMemberAccess(MemberExpression m);
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    protected virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    protected virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    protected virtual Expression VisitLambda(LambdaExpression lambda);
    protected virtual NewExpression VisitNew(NewExpression nex);
    protected virtual Expression VisitMemberInit(MemberInitExpression init);
    protected virtual Expression VisitListInit(ListInitExpression init);
    protected virtual Expression VisitNewArray(NewArrayExpression na);
    protected virtual Expression VisitInvocation(InvocationExpression iv);
}
public class ServiceStack.OrmLite.SqlInValues : object {
    public static string EmptyIn;
    private IEnumerable values;
    private IOrmLiteDialectProvider dialectProvider;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; }
    public SqlInValues(IEnumerable values, IOrmLiteDialectProvider dialectProvider);
    [CompilerGeneratedAttribute]
public int get_Count();
    public string ToSqlInString();
    public IEnumerable GetValues();
}
internal abstract class ServiceStack.OrmLite.Support.LoadList`2 : object {
    protected IDbCommand dbCmd;
    protected SqlExpression`1<From> q;
    protected IOrmLiteDialectProvider dialectProvider;
    protected List`1<Into> parentResults;
    protected ModelDefinition modelDef;
    protected FieldDefinition[] fieldDefs;
    protected string subSql;
    public FieldDefinition[] FieldDefs { get; }
    public List`1<Into> ParentResults { get; }
    protected LoadList`2(IDbCommand dbCmd, SqlExpression`1<From> q);
    public FieldDefinition[] get_FieldDefs();
    public List`1<Into> get_ParentResults();
    protected string GetRefListSql(ModelDefinition refModelDef, FieldDefinition refField);
    protected void SetListChildResults(FieldDefinition fieldDef, Type refType, IList childResults, FieldDefinition refField);
    protected string GetRefSelfSql(ModelDefinition modelDef, FieldDefinition refSelf, ModelDefinition refModelDef);
    protected string GetRefFieldSql(ModelDefinition refModelDef, FieldDefinition refField);
    protected string GetFieldReferenceSql(FieldDefinition fieldDef, FieldReference fieldRef);
    protected Dictionary`2<object, object> CreateRefMap();
    protected void SetRefSelfChildResults(FieldDefinition fieldDef, ModelDefinition refModelDef, FieldDefinition refSelf, IList childResults);
    protected void SetRefFieldChildResults(FieldDefinition fieldDef, FieldDefinition refField, IList childResults);
    protected void SetFieldReferenceChildResults(FieldDefinition fieldDef, FieldReference fieldRef, IList childResults);
}
internal class ServiceStack.OrmLite.Support.LoadListAsync`2 : LoadList`2<Into, From> {
    public LoadListAsync`2(IDbCommand dbCmd, SqlExpression`1<From> expr);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Support.LoadListAsync`2/<SetRefFieldListAsync>d__1")]
public Task SetRefFieldListAsync(FieldDefinition fieldDef, Type refType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Support.LoadListAsync`2/<SetRefFieldAsync>d__2")]
public Task SetRefFieldAsync(FieldDefinition fieldDef, Type refType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Support.LoadListAsync`2/<SetFieldReferenceAsync>d__3")]
public Task SetFieldReferenceAsync(FieldDefinition fieldDef, FieldReference fieldRef, CancellationToken token);
}
internal class ServiceStack.OrmLite.Support.LoadListSync`2 : LoadList`2<Into, From> {
    public LoadListSync`2(IDbCommand dbCmd, SqlExpression`1<From> q);
    public void SetRefFieldList(FieldDefinition fieldDef, Type refType);
    public void SetRefField(FieldDefinition fieldDef, Type refType);
    public void SetFieldReference(FieldDefinition fieldDef, FieldReference fieldRef);
}
internal abstract class ServiceStack.OrmLite.Support.LoadReferences`1 : object {
    protected IDbCommand dbCmd;
    protected T instance;
    protected ModelDefinition modelDef;
    protected FieldDefinition[] fieldDefs;
    protected object pkValue;
    protected IOrmLiteDialectProvider dialectProvider;
    public FieldDefinition[] FieldDefs { get; }
    protected LoadReferences`1(IDbCommand dbCmd, T instance);
    public FieldDefinition[] get_FieldDefs();
    protected string GetRefListSql(Type refType);
    protected string GetRefFieldSql(Type refType, FieldDefinition refField);
    protected string GetRefSelfSql(Type refType, FieldDefinition refSelf, ModelDefinition refModelDef);
    protected string GetFieldReferenceSql(FieldDefinition fieldDef, FieldReference fieldRef);
}
internal class ServiceStack.OrmLite.Support.LoadReferencesAsync`1 : LoadReferences`1<T> {
    public LoadReferencesAsync`1(IDbCommand dbCmd, T instance);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Support.LoadReferencesAsync`1/<SetRefFieldList>d__1")]
public Task SetRefFieldList(FieldDefinition fieldDef, Type refType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Support.LoadReferencesAsync`1/<SetRefField>d__2")]
public Task SetRefField(FieldDefinition fieldDef, Type refType, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.Support.LoadReferencesAsync`1/<SetFieldReference>d__3")]
public Task SetFieldReference(FieldDefinition fieldDef, FieldReference fieldRef, CancellationToken token);
}
internal class ServiceStack.OrmLite.Support.LoadReferencesSync`1 : LoadReferences`1<T> {
    public LoadReferencesSync`1(IDbCommand dbCmd, T instance);
    public void SetRefFieldList(FieldDefinition fieldDef, Type refType);
    public void SetRefField(FieldDefinition fieldDef, Type refType);
    public void SetFieldReference(FieldDefinition fieldDef, FieldReference fieldRef);
}
public class ServiceStack.OrmLite.TableOptions : object {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    internal JoinFormatDelegate JoinFormat;
    internal ModelDefinition ModelDef;
    internal string ParamName;
    public string Expression { get; public set; }
    public string Alias { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
}
public class ServiceStack.OrmLite.UntypedApi`1 : object {
    [CompilerGeneratedAttribute]
private IDbConnection <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbCommand <DbCmd>k__BackingField;
    public IDbConnection Db { get; public set; }
    public IDbCommand DbCmd { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IDbConnection get_Db();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Db(IDbConnection value);
    [CompilerGeneratedAttribute]
public sealed virtual IDbCommand get_DbCmd();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DbCmd(IDbCommand value);
    public TReturn Exec(Func`2<IDbCommand, TReturn> filter);
    public Task`1<TReturn> Exec(Func`2<IDbCommand, Task`1<TReturn>> filter);
    public void Exec(Action`1<IDbCommand> filter);
    public sealed virtual int SaveAll(IEnumerable objs);
    public sealed virtual bool Save(object obj);
    public sealed virtual Task`1<int> SaveAllAsync(IEnumerable objs, CancellationToken token);
    public sealed virtual Task`1<bool> SaveAsync(object obj, CancellationToken token);
    public sealed virtual void InsertAll(IEnumerable objs);
    public sealed virtual void InsertAll(IEnumerable objs, Action`1<IDbCommand> commandFilter);
    public sealed virtual long Insert(object obj, bool selectIdentity);
    public sealed virtual long Insert(object obj, Action`1<IDbCommand> commandFilter, bool selectIdentity);
    public sealed virtual int UpdateAll(IEnumerable objs);
    public sealed virtual int UpdateAll(IEnumerable objs, Action`1<IDbCommand> commandFilter);
    public sealed virtual int Update(object obj);
    public sealed virtual Task`1<int> UpdateAsync(object obj, CancellationToken token);
    public int Update(object obj, Action`1<IDbCommand> commandFilter);
    public sealed virtual int DeleteAll();
    public sealed virtual int Delete(object obj, object anonType);
    public sealed virtual int DeleteNonDefaults(object obj, object filter);
    public sealed virtual int DeleteById(object id);
    public sealed virtual int DeleteByIds(IEnumerable idValues);
    public sealed virtual IEnumerable Cast(IEnumerable results);
}
[ExtensionAttribute]
public static class ServiceStack.OrmLite.UntypedApiExtensions : object {
    private static ConcurrentDictionary`2<Type, Type> untypedApiMap;
    private static UntypedApiExtensions();
    [ExtensionAttribute]
public static IUntypedApi CreateTypedApi(IDbConnection db, Type forType);
    [ExtensionAttribute]
public static IUntypedApi CreateTypedApi(IDbCommand dbCmd, Type forType);
    [ExtensionAttribute]
public static IUntypedApi CreateTypedApi(Type forType);
}
public class ServiceStack.OrmLite.UntypedSqlExpressionProxy`1 : object {
    private SqlExpression`1<T> q;
    public string TableAlias { get; public set; }
    public bool PrefixFieldWithTableName { get; public set; }
    public bool WhereStatementWithoutWhereString { get; public set; }
    public IOrmLiteDialectProvider DialectProvider { get; public set; }
    public List`1<IDbDataParameter> Params { get; public set; }
    public string SelectExpression { get; public set; }
    public string FromExpression { get; public set; }
    public string BodyExpression { get; }
    public string WhereExpression { get; public set; }
    public string GroupByExpression { get; public set; }
    public string HavingExpression { get; public set; }
    public string OrderByExpression { get; public set; }
    public Nullable`1<int> Rows { get; public set; }
    public Nullable`1<int> Offset { get; public set; }
    public List`1<string> UpdateFields { get; public set; }
    public List`1<string> InsertFields { get; public set; }
    public ModelDefinition ModelDef { get; }
    public UntypedSqlExpressionProxy`1(SqlExpression`1<T> q);
    public sealed virtual string get_TableAlias();
    public sealed virtual void set_TableAlias(string value);
    public sealed virtual bool get_PrefixFieldWithTableName();
    public sealed virtual void set_PrefixFieldWithTableName(bool value);
    public sealed virtual bool get_WhereStatementWithoutWhereString();
    public sealed virtual void set_WhereStatementWithoutWhereString(bool value);
    public sealed virtual IOrmLiteDialectProvider get_DialectProvider();
    public sealed virtual void set_DialectProvider(IOrmLiteDialectProvider value);
    public sealed virtual List`1<IDbDataParameter> get_Params();
    public void set_Params(List`1<IDbDataParameter> value);
    public sealed virtual string get_SelectExpression();
    public sealed virtual void set_SelectExpression(string value);
    public sealed virtual string get_FromExpression();
    public sealed virtual void set_FromExpression(string value);
    public sealed virtual string get_BodyExpression();
    public sealed virtual string get_WhereExpression();
    public sealed virtual void set_WhereExpression(string value);
    public sealed virtual string get_GroupByExpression();
    public sealed virtual void set_GroupByExpression(string value);
    public sealed virtual string get_HavingExpression();
    public sealed virtual void set_HavingExpression(string value);
    public sealed virtual string get_OrderByExpression();
    public sealed virtual void set_OrderByExpression(string value);
    public sealed virtual Nullable`1<int> get_Rows();
    public sealed virtual void set_Rows(Nullable`1<int> value);
    public sealed virtual Nullable`1<int> get_Offset();
    public sealed virtual void set_Offset(Nullable`1<int> value);
    public sealed virtual List`1<string> get_UpdateFields();
    public sealed virtual void set_UpdateFields(List`1<string> value);
    public sealed virtual List`1<string> get_InsertFields();
    public sealed virtual void set_InsertFields(List`1<string> value);
    public sealed virtual ModelDefinition get_ModelDef();
    public sealed virtual IUntypedSqlExpression Clone();
    public sealed virtual IUntypedSqlExpression Select();
    public sealed virtual IUntypedSqlExpression Select(string selectExpression);
    public sealed virtual IUntypedSqlExpression UnsafeSelect(string rawSelect);
    public sealed virtual IUntypedSqlExpression Select(Expression`1<Func`3<Table1, Table2, object>> fields);
    public sealed virtual IUntypedSqlExpression Select(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public sealed virtual IUntypedSqlExpression SelectDistinct(Expression`1<Func`3<Table1, Table2, object>> fields);
    public sealed virtual IUntypedSqlExpression SelectDistinct(Expression`1<Func`4<Table1, Table2, Table3, object>> fields);
    public sealed virtual IUntypedSqlExpression SelectDistinct();
    public sealed virtual IUntypedSqlExpression From(string tables);
    public sealed virtual IUntypedSqlExpression UnsafeFrom(string rawFrom);
    public sealed virtual IUntypedSqlExpression Where();
    public sealed virtual IUntypedSqlExpression UnsafeWhere(string rawSql, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression Ensure(string sqlFilter, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression Where(string sqlFilter, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression UnsafeAnd(string rawSql, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression And(string sqlFilter, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression UnsafeOr(string rawSql, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression Or(string sqlFilter, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression AddCondition(string condition, string sqlFilter, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression GroupBy();
    public sealed virtual IUntypedSqlExpression GroupBy(string groupBy);
    public sealed virtual IUntypedSqlExpression Having();
    public sealed virtual IUntypedSqlExpression Having(string sqlFilter, Object[] filterParams);
    public sealed virtual IUntypedSqlExpression OrderBy();
    public sealed virtual IUntypedSqlExpression OrderBy(string orderBy);
    public sealed virtual ModelDefinition GetModelDefinition(FieldDefinition fieldDef);
    public sealed virtual IUntypedSqlExpression OrderByFields(FieldDefinition[] fields);
    public sealed virtual IUntypedSqlExpression OrderByFieldsDescending(FieldDefinition[] fields);
    public sealed virtual IUntypedSqlExpression OrderByFields(String[] fieldNames);
    public sealed virtual IUntypedSqlExpression OrderByFieldsDescending(String[] fieldNames);
    public sealed virtual IUntypedSqlExpression OrderBy(Expression`1<Func`2<Table, object>> keySelector);
    public sealed virtual IUntypedSqlExpression ThenBy(string orderBy);
    public sealed virtual IUntypedSqlExpression ThenBy(Expression`1<Func`2<Table, object>> keySelector);
    public sealed virtual IUntypedSqlExpression OrderByDescending(Expression`1<Func`2<Table, object>> keySelector);
    public sealed virtual IUntypedSqlExpression OrderByDescending(string orderBy);
    public sealed virtual IUntypedSqlExpression ThenByDescending(string orderBy);
    public sealed virtual IUntypedSqlExpression ThenByDescending(Expression`1<Func`2<Table, object>> keySelector);
    public sealed virtual IUntypedSqlExpression Skip(Nullable`1<int> skip);
    public sealed virtual IUntypedSqlExpression Take(Nullable`1<int> take);
    public sealed virtual IUntypedSqlExpression Limit(int skip, int rows);
    public sealed virtual IUntypedSqlExpression Limit(Nullable`1<int> skip, Nullable`1<int> rows);
    public sealed virtual IUntypedSqlExpression Limit(int rows);
    public sealed virtual IUntypedSqlExpression Limit();
    public sealed virtual IUntypedSqlExpression ClearLimits();
    public sealed virtual IUntypedSqlExpression Update(List`1<string> updateFields);
    public sealed virtual IUntypedSqlExpression Update();
    public sealed virtual IUntypedSqlExpression Insert(List`1<string> insertFields);
    public sealed virtual IUntypedSqlExpression Insert();
    public sealed virtual IDbDataParameter CreateParam(string name, object value, ParameterDirection direction, Nullable`1<DbType> dbType);
    public sealed virtual IUntypedSqlExpression Join(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public sealed virtual IUntypedSqlExpression Join(Type sourceType, Type targetType, Expression joinExpr);
    public sealed virtual IUntypedSqlExpression LeftJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public sealed virtual IUntypedSqlExpression LeftJoin(Type sourceType, Type targetType, Expression joinExpr);
    public sealed virtual IUntypedSqlExpression RightJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public sealed virtual IUntypedSqlExpression FullJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public sealed virtual IUntypedSqlExpression CrossJoin(Expression`1<Func`3<Source, Target, bool>> joinExpr);
    public sealed virtual IUntypedSqlExpression CustomJoin(string joinString);
    public sealed virtual IUntypedSqlExpression Where(Expression`1<Func`2<Target, bool>> predicate);
    public sealed virtual IUntypedSqlExpression Ensure(Expression`1<Func`2<Target, bool>> predicate);
    public sealed virtual IUntypedSqlExpression Where(Expression`1<Func`3<Source, Target, bool>> predicate);
    public sealed virtual IUntypedSqlExpression Ensure(Expression`1<Func`3<Source, Target, bool>> predicate);
    public sealed virtual IUntypedSqlExpression And(Expression`1<Func`2<Target, bool>> predicate);
    public sealed virtual IUntypedSqlExpression And(Expression`1<Func`3<Source, Target, bool>> predicate);
    public sealed virtual IUntypedSqlExpression Or(Expression`1<Func`2<Target, bool>> predicate);
    public sealed virtual IUntypedSqlExpression Or(Expression`1<Func`3<Source, Target, bool>> predicate);
    public sealed virtual string SqlTable(ModelDefinition modelDef);
    public sealed virtual string SqlColumn(string columnName);
    public sealed virtual string ToDeleteRowStatement();
    public sealed virtual string ToSelectStatement();
    public sealed virtual string ToSelectStatement(QueryType forType);
    public sealed virtual string ToCountStatement();
    public sealed virtual IList`1<string> GetAllFields();
    public sealed virtual Tuple`2<ModelDefinition, FieldDefinition> FirstMatchingField(string fieldName);
    public sealed virtual string SelectInto();
    public sealed virtual string SelectInto(QueryType queryType);
}
public class ServiceStack.OrmLite.UpperCaseNamingStrategy : OrmLiteNamingStrategyBase {
    public virtual string GetTableName(string name);
    public virtual string GetColumnName(string name);
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.WriteExpressionCommandExtensions : object {
    [ExtensionAttribute]
public static int UpdateOnlyFields(IDbCommand dbCmd, T model, SqlExpression`1<T> onlyFields, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static void UpdateOnlySql(IDbCommand dbCmd, T model, SqlExpression`1<T> onlyFields);
    [ExtensionAttribute]
internal static int UpdateOnlyFields(IDbCommand dbCmd, T obj, Expression`1<Func`2<T, object>> onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int UpdateOnlyFields(IDbCommand dbCmd, T obj, String[] onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static int UpdateOnly(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static IDbCommand InitUpdateOnly(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q);
    [ExtensionAttribute]
internal static int UpdateOnly(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, string whereExpression, IEnumerable`1<IDbDataParameter> dbParams, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static IDbCommand InitUpdateOnly(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, string whereExpression, IEnumerable`1<IDbDataParameter> sqlParams);
    [ExtensionAttribute]
public static int UpdateAdd(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static IDbCommand InitUpdateAdd(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q);
    [ExtensionAttribute]
public static int UpdateOnly(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static string GetUpdateOnlyWhereExpression(IOrmLiteDialectProvider dialectProvider, Dictionary`2<string, object> updateFields, Object[]& args);
    [ExtensionAttribute]
public static int UpdateOnly(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnly(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, string whereExpression, Object[] whereParams, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int UpdateOnlyReferences(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, Func`2<Dictionary`2<string, object>, int> fn);
    [ExtensionAttribute]
internal static void PrepareUpdateOnly(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, string whereExpression, Object[] whereParams);
    [ExtensionAttribute]
public static int UpdateNonDefaults(IDbCommand dbCmd, T item, Expression`1<Func`2<T, bool>> where);
    [ExtensionAttribute]
public static int Update(IDbCommand dbCmd, T item, Expression`1<Func`2<T, bool>> expression, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Update(IDbCommand dbCmd, object updateOnly, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
internal static bool PrepareUpdateAnonSql(IDbCommand dbCmd, IOrmLiteDialectProvider dialectProvider, object updateOnly, string whereSql);
    [ExtensionAttribute]
public static long InsertOnly(IDbCommand dbCmd, T obj, String[] onlyFields, bool selectIdentity);
    [ExtensionAttribute]
public static long InsertOnly(IDbCommand dbCmd, Expression`1<Func`1<T>> insertFields, bool selectIdentity);
    [ExtensionAttribute]
internal static IDbCommand InitInsertOnly(IDbCommand dbCmd, Expression`1<Func`1<T>> insertFields);
    [ExtensionAttribute]
public static int Delete(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int Delete(IDbCommand dbCmd, SqlExpression`1<T> where, Action`1<IDbCommand> commandFilter);
    [ExtensionAttribute]
public static int DeleteWhere(IDbCommand dbCmd, string whereFilter, Object[] whereParams);
}
[ExtensionAttribute]
internal static class ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync : object {
    [ExtensionAttribute]
internal static Task`1<int> UpdateOnlyFieldsAsync(IDbCommand dbCmd, T model, SqlExpression`1<T> onlyFields, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateOnlyFieldsAsync(IDbCommand dbCmd, T obj, Expression`1<Func`2<T, object>> onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateOnlyFieldsAsync(IDbCommand dbCmd, T obj, String[] onlyFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateOnlyAsync(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateOnlyAsync(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, string whereExpression, IEnumerable`1<IDbDataParameter> sqlParams, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAddAsync(IDbCommand dbCmd, Expression`1<Func`1<T>> updateFields, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateOnlyAsync(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, string whereExpression, Object[] whereParams, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync/<UpdateOnlyReferencesAsync>d__9`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateOnlyReferencesAsync(IDbCommand dbCmd, Dictionary`2<string, object> updateFields, Func`2<Dictionary`2<string, object>, Task`1<int>> fn, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateNonDefaultsAsync(IDbCommand dbCmd, T item, Expression`1<Func`2<T, bool>> obj, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateAsync(IDbCommand dbCmd, T item, Expression`1<Func`2<T, bool>> expression, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> UpdateAsync(IDbCommand dbCmd, object updateOnly, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task InsertOnlyAsync(IDbCommand dbCmd, T obj, String[] onlyFields, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> InsertOnlyAsync(IDbCommand dbCmd, Expression`1<Func`1<T>> insertFields, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, Expression`1<Func`2<T, bool>> where, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteAsync(IDbCommand dbCmd, SqlExpression`1<T> q, Action`1<IDbCommand> commandFilter, CancellationToken token);
    [ExtensionAttribute]
internal static Task`1<int> DeleteWhereAsync(IDbCommand dbCmd, string whereFilter, Object[] whereParams, Action`1<IDbCommand> commandFilter, CancellationToken token);
}
public class ServiceStack.OrmLite.XmlValue : ValueType {
    [CompilerGeneratedAttribute]
private string <Xml>k__BackingField;
    public string Xml { get; }
    public XmlValue(string xml);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Xml();
    public virtual string ToString();
    public bool Equals(XmlValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static XmlValue op_Implicit(string expandedName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
