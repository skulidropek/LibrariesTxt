[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class ServiceStack.Redis.BasicRedisClientManager : object {
    public static ILog Log;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SocketSendTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SocketReceiveTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IdleTimeOutSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespacePrefix>k__BackingField;
    private int readWriteHostsIndex;
    private int readOnlyHostsIndex;
    protected int RedisClientCounter;
    [CompilerGeneratedAttribute]
private Func`2<RedisEndpoint, RedisClient> <ClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRedisNativeClient> <ConnectionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IRedisClientsManager>> <OnFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private IRedisResolver <RedisResolver>k__BackingField;
    public Nullable`1<int> ConnectTimeout { get; public set; }
    public Nullable`1<int> SocketSendTimeout { get; public set; }
    public Nullable`1<int> SocketReceiveTimeout { get; public set; }
    public Nullable`1<int> IdleTimeOutSecs { get; public set; }
    public string NamespacePrefix { get; public set; }
    public Func`2<RedisEndpoint, RedisClient> ClientFactory { get; public set; }
    public Nullable`1<long> Db { get; private set; }
    public Action`1<IRedisNativeClient> ConnectionFilter { get; public set; }
    public List`1<Action`1<IRedisClientsManager>> OnFailover { get; private set; }
    public IRedisResolver RedisResolver { get; public set; }
    public Dictionary`2<string, long> Stats { get; }
    public BasicRedisClientManager(String[] readWriteHosts);
    public BasicRedisClientManager(int initialDb, String[] readWriteHosts);
    public BasicRedisClientManager(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts, Nullable`1<long> initialDb);
    public BasicRedisClientManager(IEnumerable`1<RedisEndpoint> readWriteHosts, IEnumerable`1<RedisEndpoint> readOnlyHosts, Nullable`1<long> initialDb);
    private static BasicRedisClientManager();
    private ValueTask`1<ICacheClientAsync> GetCacheClientAsync(CancellationToken& _);
    private ValueTask`1<ICacheClientAsync> GetReadOnlyCacheClientAsync(CancellationToken& _);
    private IRedisClientAsync ConfigureRedisClientAsync(IRedisClientAsync client);
    private sealed virtual override ValueTask`1<ICacheClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetCacheClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<ICacheClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyCacheClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyClientAsync(CancellationToken token);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-GetAsync>d__8`1")]
private sealed virtual override Task`1<T> ServiceStack.Caching.ICacheClientAsync.GetAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-SetAsync>d__9`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-SetAsync>d__10`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-SetAsync>d__11`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-FlushAllAsync>d__12")]
private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.FlushAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-GetAllAsync>d__13`1")]
private sealed virtual override Task`1<IDictionary`2<string, T>> ServiceStack.Caching.ICacheClientAsync.GetAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-SetAllAsync>d__14`1")]
private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.SetAllAsync(IDictionary`2<string, T> values, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-RemoveAsync>d__15")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.RemoveAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-RemoveAllAsync>d__16")]
private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.RemoveAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-IncrementAsync>d__17")]
private sealed virtual override Task`1<long> ServiceStack.Caching.ICacheClientAsync.IncrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-DecrementAsync>d__18")]
private sealed virtual override Task`1<long> ServiceStack.Caching.ICacheClientAsync.DecrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-AddAsync>d__19`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-ReplaceAsync>d__20`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-AddAsync>d__21`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-ReplaceAsync>d__22`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-AddAsync>d__23`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-ReplaceAsync>d__24`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-GetTimeToLiveAsync>d__25")]
private sealed virtual override Task`1<Nullable`1<TimeSpan>> ServiceStack.Caching.ICacheClientAsync.GetTimeToLiveAsync(string key, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-GetKeysByPatternAsync>d__26")]
private sealed virtual override IAsyncEnumerable`1<string> ServiceStack.Caching.ICacheClientAsync.GetKeysByPatternAsync(string pattern, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BasicRedisClientManager/<ServiceStack-Caching-ICacheClientAsync-RemoveExpiredEntriesAsync>d__27")]
private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.RemoveExpiredEntriesAsync(CancellationToken token);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SocketSendTimeout();
    [CompilerGeneratedAttribute]
public void set_SocketSendTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SocketReceiveTimeout();
    [CompilerGeneratedAttribute]
public void set_SocketReceiveTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IdleTimeOutSecs();
    [CompilerGeneratedAttribute]
public void set_IdleTimeOutSecs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_NamespacePrefix();
    [CompilerGeneratedAttribute]
public void set_NamespacePrefix(string value);
    [CompilerGeneratedAttribute]
public Func`2<RedisEndpoint, RedisClient> get_ClientFactory();
    [CompilerGeneratedAttribute]
public void set_ClientFactory(Func`2<RedisEndpoint, RedisClient> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Db();
    [CompilerGeneratedAttribute]
private void set_Db(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Action`1<IRedisNativeClient> get_ConnectionFilter();
    [CompilerGeneratedAttribute]
public void set_ConnectionFilter(Action`1<IRedisNativeClient> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IRedisClientsManager>> get_OnFailover();
    [CompilerGeneratedAttribute]
private void set_OnFailover(List`1<Action`1<IRedisClientsManager>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IRedisResolver get_RedisResolver();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RedisResolver(IRedisResolver value);
    protected virtual void OnStart();
    public sealed virtual IRedisClient GetClient();
    private RedisClient GetClientImpl();
    public virtual IRedisClient GetReadOnlyClient();
    private RedisClient GetReadOnlyClientImpl();
    private RedisClient InitNewClient(RedisClient client);
    public sealed virtual void SetAll(IDictionary`2<string, T> values);
    public void Start();
    public sealed virtual void FailoverTo(String[] readWriteHosts);
    public sealed virtual void FailoverTo(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts);
    public sealed virtual void Dispose();
    public sealed virtual Dictionary`2<string, long> get_Stats();
    public sealed virtual ICacheClient GetCacheClient();
    public sealed virtual ICacheClient GetReadOnlyCacheClient();
    private ICacheClient ConfigureRedisClient(IRedisClient client);
    public sealed virtual bool Remove(string key);
    public sealed virtual void RemoveAll(IEnumerable`1<string> keys);
    public sealed virtual T Get(string key);
    public sealed virtual long Increment(string key, UInt32 amount);
    public sealed virtual long Decrement(string key, UInt32 amount);
    public sealed virtual bool Add(string key, T value);
    public sealed virtual bool Set(string key, T value);
    public sealed virtual bool Replace(string key, T value);
    public sealed virtual bool Add(string key, T value, DateTime expiresAt);
    public sealed virtual bool Set(string key, T value, DateTime expiresAt);
    public sealed virtual bool Replace(string key, T value, DateTime expiresAt);
    public sealed virtual bool Add(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Set(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Replace(string key, T value, TimeSpan expiresIn);
    public sealed virtual void FlushAll();
    public sealed virtual IDictionary`2<string, T> GetAll(IEnumerable`1<string> keys);
}
public class ServiceStack.Redis.BasicRedisResolver : object {
    private static ILog log;
    [CompilerGeneratedAttribute]
private Func`2<RedisEndpoint, RedisClient> <ClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadWriteHostsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadOnlyHostsCount>k__BackingField;
    private RedisEndpoint[] masters;
    private RedisEndpoint[] replicas;
    public Func`2<RedisEndpoint, RedisClient> ClientFactory { get; public set; }
    public int ReadWriteHostsCount { get; private set; }
    public int ReadOnlyHostsCount { get; private set; }
    public RedisEndpoint[] Masters { get; }
    public RedisEndpoint[] Replicas { get; }
    public IRedisEndpoint PrimaryEndpoint { get; }
    public BasicRedisResolver(IEnumerable`1<RedisEndpoint> masters, IEnumerable`1<RedisEndpoint> replicas);
    private static BasicRedisResolver();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<RedisEndpoint, RedisClient> get_ClientFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientFactory(Func`2<RedisEndpoint, RedisClient> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadWriteHostsCount();
    [CompilerGeneratedAttribute]
private void set_ReadWriteHostsCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadOnlyHostsCount();
    [CompilerGeneratedAttribute]
private void set_ReadOnlyHostsCount(int value);
    public sealed virtual RedisEndpoint[] get_Masters();
    public RedisEndpoint[] get_Replicas();
    public sealed virtual IRedisEndpoint get_PrimaryEndpoint();
    public sealed virtual IRedisClient CreateClient(string host);
    public virtual void ResetMasters(IEnumerable`1<string> hosts);
    public virtual void ResetMasters(List`1<RedisEndpoint> newMasters);
    public virtual void ResetSlaves(IEnumerable`1<string> hosts);
    public virtual void ResetSlaves(List`1<RedisEndpoint> newReplicas);
    public sealed virtual RedisClient CreateRedisClient(RedisEndpoint config, bool master);
    public sealed virtual RedisEndpoint GetReadWriteHost(int desiredIndex);
    public sealed virtual RedisEndpoint GetReadOnlyHost(int desiredIndex);
    public sealed virtual RedisClient CreateMasterClient(int desiredIndex);
    public sealed virtual RedisClient CreateSlaveClient(int desiredIndex);
}
internal class ServiceStack.Redis.BufferedReader : object {
    private Stream source;
    private Byte[] buffer;
    private int offset;
    private int available;
    internal BufferedReader(Stream source, int bufferSize);
    internal ValueTask`1<int> ReadByteAsync(CancellationToken& token);
    private ValueTask`1<int> ReadByteSlowAsync(CancellationToken& token);
    internal ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken& token);
    private ValueTask`1<int> ReadSlowAsync(Byte[] buffer, int offset, int count, CancellationToken& token);
    public sealed virtual void Dispose();
    internal void Close();
    internal void Reset();
    internal int ReadByte();
    private int ReadByteFromBuffer();
    private int ReadByteSlow();
    private int ReadFromBuffer(Byte[] buffer, int offset, int count);
    internal int Read(Byte[] buffer, int offset, int count);
    private int ReadSlow(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BufferedReader/<<ReadByteSlowAsync>g__Awaited|1_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<int> <ReadByteSlowAsync>g__Awaited|1_0(BufferedReader this, Task`1<int> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.BufferedReader/<<ReadSlowAsync>g__Awaited|3_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<int> <ReadSlowAsync>g__Awaited|3_0(BufferedReader this, Task`1<int> pending, Byte[] buffer, int offset, int count);
}
public class ServiceStack.Redis.BufferedStream : Stream {
    private Stream networkStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public BufferedStream(Stream stream);
    public BufferedStream(Stream stream, int bufferSize);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual int Read(Byte[] buffer, int offset, int length);
    public virtual void Write(Byte[] buffer, int offset, int length);
    public virtual void Flush();
    public virtual void SetLength(long length);
    public virtual long Seek(long position, SeekOrigin origin);
}
public static class ServiceStack.Redis.Commands : object {
    public static Byte[] Quit;
    public static Byte[] Auth;
    public static Byte[] Exists;
    public static Byte[] Del;
    public static Byte[] Type;
    public static Byte[] Keys;
    public static Byte[] RandomKey;
    public static Byte[] Rename;
    public static Byte[] RenameNx;
    public static Byte[] PExpire;
    public static Byte[] PExpireAt;
    public static Byte[] DbSize;
    public static Byte[] Expire;
    public static Byte[] ExpireAt;
    public static Byte[] Ttl;
    public static Byte[] PTtl;
    public static Byte[] Select;
    public static Byte[] FlushDb;
    public static Byte[] FlushAll;
    public static Byte[] Ping;
    public static Byte[] Echo;
    public static Byte[] Save;
    public static Byte[] BgSave;
    public static Byte[] LastSave;
    public static Byte[] Shutdown;
    public static Byte[] NoSave;
    public static Byte[] BgRewriteAof;
    public static Byte[] Info;
    public static Byte[] SlaveOf;
    public static Byte[] No;
    public static Byte[] One;
    public static Byte[] ResetStat;
    public static Byte[] Rewrite;
    public static Byte[] Time;
    public static Byte[] Segfault;
    public static Byte[] Sleep;
    public static Byte[] Dump;
    public static Byte[] Restore;
    public static Byte[] Migrate;
    public static Byte[] Move;
    public static Byte[] Object;
    public static Byte[] IdleTime;
    public static Byte[] Monitor;
    public static Byte[] Debug;
    public static Byte[] Config;
    public static Byte[] Client;
    public static Byte[] List;
    public static Byte[] Kill;
    public static Byte[] Addr;
    public static Byte[] Id;
    public static Byte[] SkipMe;
    public static Byte[] SetName;
    public static Byte[] GetName;
    public static Byte[] Pause;
    public static Byte[] Role;
    public static Byte[] StrLen;
    public static Byte[] Set;
    public static Byte[] Get;
    public static Byte[] GetSet;
    public static Byte[] MGet;
    public static Byte[] SetNx;
    public static Byte[] SetEx;
    public static Byte[] Persist;
    public static Byte[] PSetEx;
    public static Byte[] MSet;
    public static Byte[] MSetNx;
    public static Byte[] Incr;
    public static Byte[] IncrBy;
    public static Byte[] IncrByFloat;
    public static Byte[] Decr;
    public static Byte[] DecrBy;
    public static Byte[] Append;
    public static Byte[] GetRange;
    public static Byte[] SetRange;
    public static Byte[] GetBit;
    public static Byte[] SetBit;
    public static Byte[] BitCount;
    public static Byte[] Scan;
    public static Byte[] SScan;
    public static Byte[] HScan;
    public static Byte[] ZScan;
    public static Byte[] Match;
    public static Byte[] Count;
    public static Byte[] PfAdd;
    public static Byte[] PfCount;
    public static Byte[] PfMerge;
    public static Byte[] RPush;
    public static Byte[] LPush;
    public static Byte[] RPushX;
    public static Byte[] LPushX;
    public static Byte[] LLen;
    public static Byte[] LRange;
    public static Byte[] LTrim;
    public static Byte[] LIndex;
    public static Byte[] LInsert;
    public static Byte[] Before;
    public static Byte[] After;
    public static Byte[] LSet;
    public static Byte[] LRem;
    public static Byte[] LPop;
    public static Byte[] RPop;
    public static Byte[] BLPop;
    public static Byte[] BRPop;
    public static Byte[] RPopLPush;
    public static Byte[] BRPopLPush;
    public static Byte[] SAdd;
    public static Byte[] SRem;
    public static Byte[] SPop;
    public static Byte[] SMove;
    public static Byte[] SCard;
    public static Byte[] SIsMember;
    public static Byte[] SInter;
    public static Byte[] SInterStore;
    public static Byte[] SUnion;
    public static Byte[] SUnionStore;
    public static Byte[] SDiff;
    public static Byte[] SDiffStore;
    public static Byte[] SMembers;
    public static Byte[] SRandMember;
    public static Byte[] ZAdd;
    public static Byte[] ZRem;
    public static Byte[] ZIncrBy;
    public static Byte[] ZRank;
    public static Byte[] ZRevRank;
    public static Byte[] ZRange;
    public static Byte[] ZRevRange;
    public static Byte[] ZRangeByScore;
    public static Byte[] ZRevRangeByScore;
    public static Byte[] ZCard;
    public static Byte[] ZScore;
    public static Byte[] ZCount;
    public static Byte[] ZRemRangeByRank;
    public static Byte[] ZRemRangeByScore;
    public static Byte[] ZUnionStore;
    public static Byte[] ZInterStore;
    public static Byte[] ZRangeByLex;
    public static Byte[] ZLexCount;
    public static Byte[] ZRemRangeByLex;
    public static Byte[] HSet;
    public static Byte[] HSetNx;
    public static Byte[] HGet;
    public static Byte[] HMSet;
    public static Byte[] HMGet;
    public static Byte[] HIncrBy;
    public static Byte[] HIncrByFloat;
    public static Byte[] HExists;
    public static Byte[] HDel;
    public static Byte[] HLen;
    public static Byte[] HKeys;
    public static Byte[] HVals;
    public static Byte[] HGetAll;
    public static Byte[] Sort;
    public static Byte[] Watch;
    public static Byte[] UnWatch;
    public static Byte[] Multi;
    public static Byte[] Exec;
    public static Byte[] Discard;
    public static Byte[] Subscribe;
    public static Byte[] UnSubscribe;
    public static Byte[] PSubscribe;
    public static Byte[] PUnSubscribe;
    public static Byte[] Publish;
    public static Byte[] WithScores;
    public static Byte[] Limit;
    public static Byte[] By;
    public static Byte[] Asc;
    public static Byte[] Desc;
    public static Byte[] Alpha;
    public static Byte[] Store;
    public static Byte[] Eval;
    public static Byte[] EvalSha;
    public static Byte[] Script;
    public static Byte[] Load;
    public static Byte[] Flush;
    public static Byte[] Slowlog;
    public static Byte[] Ex;
    public static Byte[] Px;
    public static Byte[] Nx;
    public static Byte[] Xx;
    public static Byte[] Sentinel;
    public static Byte[] Masters;
    public static Byte[] Sentinels;
    public static Byte[] Master;
    public static Byte[] Slaves;
    public static Byte[] Failover;
    public static Byte[] GetMasterAddrByName;
    public static Byte[] GeoAdd;
    public static Byte[] GeoDist;
    public static Byte[] GeoHash;
    public static Byte[] GeoPos;
    public static Byte[] GeoRadius;
    public static Byte[] GeoRadiusByMember;
    public static Byte[] WithCoord;
    public static Byte[] WithDist;
    public static Byte[] WithHash;
    public static Byte[] Meters;
    public static Byte[] Kilometers;
    public static Byte[] Miles;
    public static Byte[] Feet;
    private static Commands();
    public static Byte[] GetUnit(string unit);
}
[DefaultMemberAttribute("Item")]
public class ServiceStack.Redis.Generic.ManagedList`1 : object {
    private string key;
    private IRedisClientsManager manager;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ManagedList`1(IRedisClientsManager manager, string key);
    private IRedisClient GetClient();
    private List`1<T> GetRedisList();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class ServiceStack.Redis.Generic.QueuedRedisTypedCommand`1 : QueuedRedisOperation {
    private Delegate asyncReturnCommand;
    [CompilerGeneratedAttribute]
private Action`1<IRedisTypedClient`1<T>> <VoidReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, int> <IntReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, long> <LongReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, bool> <BoolReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, Byte[]> <BytesReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, Byte[][]> <MultiBytesReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, string> <StringReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, List`1<string>> <MultiStringReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, List`1<T>> <MultiObjectReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, double> <DoubleReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisTypedClient`1<T>, T> <ObjectReturnCommand>k__BackingField;
    public Action`1<IRedisTypedClient`1<T>> VoidReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, int> IntReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, long> LongReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, bool> BoolReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, Byte[]> BytesReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, Byte[][]> MultiBytesReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, string> StringReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, List`1<string>> MultiStringReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, List`1<T>> MultiObjectReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, double> DoubleReturnCommand { get; public set; }
    public Func`2<IRedisTypedClient`1<T>, T> ObjectReturnCommand { get; public set; }
    private QueuedRedisTypedCommand`1<T> SetAsyncReturnCommand(Delegate value);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask> VoidReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<int>> IntReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<long>> LongReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<bool>> BoolReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<Byte[]>> BytesReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<Byte[][]>> MultiBytesReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<string>> StringReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<List`1<string>>> MultiStringReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<double>> DoubleReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<List`1<T>>> MultiObjectReturnCommandAsync);
    internal QueuedRedisTypedCommand`1<T> WithAsyncReturnCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<T>> ObjectReturnCommandAsync);
    public ValueTask ExecuteAsync(IRedisTypedClientAsync`1<T> client);
    protected void ExecuteThrowIfSync();
    [CompilerGeneratedAttribute]
public Action`1<IRedisTypedClient`1<T>> get_VoidReturnCommand();
    [CompilerGeneratedAttribute]
public void set_VoidReturnCommand(Action`1<IRedisTypedClient`1<T>> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, int> get_IntReturnCommand();
    [CompilerGeneratedAttribute]
public void set_IntReturnCommand(Func`2<IRedisTypedClient`1<T>, int> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, long> get_LongReturnCommand();
    [CompilerGeneratedAttribute]
public void set_LongReturnCommand(Func`2<IRedisTypedClient`1<T>, long> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, bool> get_BoolReturnCommand();
    [CompilerGeneratedAttribute]
public void set_BoolReturnCommand(Func`2<IRedisTypedClient`1<T>, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, Byte[]> get_BytesReturnCommand();
    [CompilerGeneratedAttribute]
public void set_BytesReturnCommand(Func`2<IRedisTypedClient`1<T>, Byte[]> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, Byte[][]> get_MultiBytesReturnCommand();
    [CompilerGeneratedAttribute]
public void set_MultiBytesReturnCommand(Func`2<IRedisTypedClient`1<T>, Byte[][]> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, string> get_StringReturnCommand();
    [CompilerGeneratedAttribute]
public void set_StringReturnCommand(Func`2<IRedisTypedClient`1<T>, string> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, List`1<string>> get_MultiStringReturnCommand();
    [CompilerGeneratedAttribute]
public void set_MultiStringReturnCommand(Func`2<IRedisTypedClient`1<T>, List`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, List`1<T>> get_MultiObjectReturnCommand();
    [CompilerGeneratedAttribute]
public void set_MultiObjectReturnCommand(Func`2<IRedisTypedClient`1<T>, List`1<T>> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, double> get_DoubleReturnCommand();
    [CompilerGeneratedAttribute]
public void set_DoubleReturnCommand(Func`2<IRedisTypedClient`1<T>, double> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisTypedClient`1<T>, T> get_ObjectReturnCommand();
    [CompilerGeneratedAttribute]
public void set_ObjectReturnCommand(Func`2<IRedisTypedClient`1<T>, T> value);
    public void Execute(IRedisTypedClient`1<T> client);
    private void ExecuteThrowIfAsync();
    private void OnExecuteThrowIfAsync();
}
[DefaultMemberAttribute("Item")]
internal class ServiceStack.Redis.Generic.RedisClientHash`2 : object {
    private RedisTypedClient`1<T> client;
    private string hashId;
    private IRedisTypedClientAsync`1<T> AsyncClient { get; }
    public string Id { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<T> Values { get; }
    public RedisClientHash`2(RedisTypedClient`1<T> client, string hashId);
    private IRedisTypedClientAsync`1<T> get_AsyncClient();
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisHashAsync<TKey,T>.AddAsync(KeyValuePair`2<TKey, T> item, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisHashAsync<TKey,T>.AddAsync(TKey key, T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisHashAsync<TKey,T>.ClearAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisHashAsync<TKey,T>.ContainsKeyAsync(TKey key, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.Generic.IRedisHashAsync<TKey,T>.CountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<Dictionary`2<TKey, T>> ServiceStack.Redis.Generic.IRedisHashAsync<TKey,T>.GetAllAsync(CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientHash`2/<System-Collections-Generic-IAsyncEnumerable<System-Collections-Generic-KeyValuePair<TKey,T>>-GetAsyncEnumerator>d__8")]
private sealed virtual override IAsyncEnumerator`1<KeyValuePair`2<TKey, T>> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.KeyValuePair<TKey,T>>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisHashAsync<TKey,T>.RemoveAsync(TKey key, CancellationToken token);
    public sealed virtual string get_Id();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Dictionary`2<TKey, T> GetAll();
    public sealed virtual void Add(KeyValuePair`2<TKey, T> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, T> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, T> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void Add(TKey key, T value);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, T& value);
    public sealed virtual T get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, T value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<T> get_Values();
    public List`1<TKey> GetAllKeys();
    public List`1<T> GetAllValues();
}
[DefaultMemberAttribute("Item")]
internal class ServiceStack.Redis.Generic.RedisClientList`1 : object {
    private RedisTypedClient`1<T> client;
    private string listId;
    private static int PageLimit;
    private IRedisTypedClientAsync`1<T> AsyncClient { get; }
    public string Id { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public RedisClientList`1(RedisTypedClient`1<T> client, string listId);
    private IRedisTypedClientAsync`1<T> get_AsyncClient();
    private IRedisListAsync`1<T> AsAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientList`1/<ServiceStack-Redis-Generic-IRedisListAsync<T>-AddRangeAsync>d__3")]
private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.AddRangeAsync(IEnumerable`1<T> values, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.AppendAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.BlockingDequeueAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.BlockingPopAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.BlockingRemoveStartAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.Generic.IRedisListAsync<T>.CountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.DequeueAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.EnqueueAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisListAsync<T>.GetAllAsync(CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientList`1/<System-Collections-Generic-IAsyncEnumerable<T>-GetAsyncEnumerator>d__12")]
private sealed virtual override IAsyncEnumerator`1<T> System.Collections.Generic.IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisListAsync<T>.GetRangeAsync(int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisListAsync<T>.GetRangeFromSortedListAsync(int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.PopAndPushAsync(IRedisListAsync`1<T> toList, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.PopAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.PrependAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.PushAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.RemoveAllAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.RemoveEndAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.RemoveStartAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisListAsync<T>.RemoveValueAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisListAsync<T>.RemoveValueAsync(T value, int noOfMatches, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.TrimAsync(int keepStartingFrom, int keepEndingAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientList`1/<ServiceStack-Redis-Generic-IRedisListAsync<T>-RemoveAsync>d__25")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisListAsync<T>.RemoveAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.AddAsync(T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientList`1/<ServiceStack-Redis-Generic-IRedisListAsync<T>-RemoveAtAsync>d__27")]
private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.RemoveAtAsync(int index, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientList`1/<ServiceStack-Redis-Generic-IRedisListAsync<T>-ContainsAsync>d__28")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisListAsync<T>.ContainsAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.ClearAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientList`1/<ServiceStack-Redis-Generic-IRedisListAsync<T>-IndexOfAsync>d__30")]
private sealed virtual override ValueTask`1<int> ServiceStack.Redis.Generic.IRedisListAsync<T>.IndexOfAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisListAsync<T>.ElementAtAsync(int index, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisListAsync<T>.SetValueAsync(int index, T value, CancellationToken token);
    public sealed virtual string get_Id();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [IteratorStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientList`1/<GetPagingEnumerator>d__40")]
public IEnumerator`1<T> GetPagingEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual List`1<T> GetAll();
    public sealed virtual List`1<T> GetRange(int startingFrom, int endingAt);
    public sealed virtual List`1<T> GetRangeFromSortedList(int startingFrom, int endingAt);
    public sealed virtual void RemoveAll();
    public sealed virtual void Trim(int keepStartingFrom, int keepEndingAt);
    public sealed virtual long RemoveValue(T value);
    public sealed virtual long RemoveValue(T value, int noOfMatches);
    public sealed virtual void AddRange(IEnumerable`1<T> values);
    public sealed virtual void Append(T value);
    public sealed virtual void Prepend(T value);
    public sealed virtual T RemoveStart();
    public sealed virtual T BlockingRemoveStart(Nullable`1<TimeSpan> timeOut);
    public sealed virtual T RemoveEnd();
    public sealed virtual void Enqueue(T value);
    public sealed virtual T Dequeue();
    public sealed virtual T BlockingDequeue(Nullable`1<TimeSpan> timeOut);
    public sealed virtual void Push(T value);
    public sealed virtual T Pop();
    public sealed virtual T BlockingPop(Nullable`1<TimeSpan> timeOut);
    public sealed virtual T PopAndPush(IRedisList`1<T> toList);
    public T BlockingPopAndPush(IRedisList`1<T> toList, Nullable`1<TimeSpan> timeOut);
}
internal class ServiceStack.Redis.Generic.RedisClientSet`1 : object {
    private RedisTypedClient`1<T> client;
    private string setId;
    private static int PageLimit;
    private IRedisTypedClientAsync`1<T> AsyncClient { get; }
    public string Id { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public RedisClientSet`1(RedisTypedClient`1<T> client, string setId);
    private IRedisTypedClientAsync`1<T> get_AsyncClient();
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.AddAsync(T value, CancellationToken token);
    private IRedisSetAsync`1<T> AsAsync();
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.ClearAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisSetAsync<T>.ContainsAsync(T item, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.Generic.IRedisSetAsync<T>.CountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisSetAsync<T>.GetAllAsync(CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientSet`1/<System-Collections-Generic-IAsyncEnumerable<T>-GetAsyncEnumerator>d__8")]
private sealed virtual override IAsyncEnumerator`1<T> System.Collections.Generic.IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.GetDifferencesAsync(IRedisSetAsync`1[] withSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.GetDifferencesAsync(IRedisSetAsync`1[] withSets);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisSetAsync<T>.GetRandomItemAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.MoveToAsync(T item, IRedisSetAsync`1<T> toSet, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisSetAsync<T>.PopRandomItemAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.PopulateWithDifferencesOfAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.PopulateWithDifferencesOfAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.PopulateWithIntersectOfAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.PopulateWithIntersectOfAsync(IRedisSetAsync`1[] sets);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.PopulateWithUnionOfAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSetAsync<T>.PopulateWithUnionOfAsync(IRedisSetAsync`1[] sets);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisSetAsync<T>.RemoveAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSetAsync<T>.SortAsync(int startingFrom, int endingAt, CancellationToken token);
    public sealed virtual string get_Id();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [IteratorStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientSet`1/<GetPagingEnumerator>d__29")]
public IEnumerator`1<T> GetPagingEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual List`1<T> Sort(int startingFrom, int endingAt);
    public sealed virtual HashSet`1<T> GetAll();
    public sealed virtual T PopRandomItem();
    public sealed virtual T GetRandomItem();
    public sealed virtual void MoveTo(T item, IRedisSet`1<T> toSet);
    public sealed virtual void PopulateWithIntersectOf(IRedisSet`1[] sets);
    public sealed virtual void PopulateWithUnionOf(IRedisSet`1[] sets);
    public sealed virtual void GetDifferences(IRedisSet`1[] withSets);
    public sealed virtual void PopulateWithDifferencesOf(IRedisSet`1<T> fromSet, IRedisSet`1[] withSets);
}
[ExtensionAttribute]
public static class ServiceStack.Redis.Generic.RedisClientsManagerExtensionsGeneric : object {
    [ExtensionAttribute]
public static ManagedList`1<T> GetManagedList(IRedisClientsManager manager, string key);
}
internal class ServiceStack.Redis.Generic.RedisClientSortedSet`1 : object {
    private RedisTypedClient`1<T> client;
    private string setId;
    private static int PageLimit;
    private IRedisTypedClientAsync`1<T> AsyncClient { get; }
    public string Id { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public RedisClientSortedSet`1(RedisTypedClient`1<T> client, string setId);
    private IRedisTypedClientAsync`1<T> get_AsyncClient();
    private IRedisSortedSetAsync`1<T> AsAsync();
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.AddAsync(T item, double score, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.CountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetAllAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetAllDescendingAsync(CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientSortedSet`1/<System-Collections-Generic-IAsyncEnumerable<T>-GetAsyncEnumerator>d__7")]
private sealed virtual override IAsyncEnumerator`1<T> System.Collections.Generic.IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetItemScoreAsync(T item, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetRangeAsync(int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetRangeByHighestScoreAsync(double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetRangeByHighestScoreAsync(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetRangeByLowestScoreAsync(double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.GetRangeByLowestScoreAsync(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.IncrementItemAsync(T item, double incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.IndexOfAsync(T item, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.IndexOfDescendingAsync(T item, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopItemWithHighestScoreAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopItemWithLowestScoreAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopulateWithIntersectOfAsync(IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopulateWithIntersectOfAsync(IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopulateWithUnionOfAsync(IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopulateWithUnionOfAsync(IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.RemoveRangeAsync(int minRank, int maxRank, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.RemoveRangeByScoreAsync(double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.ClearAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.ContainsAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.AddAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.RemoveAsync(T value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopulateWithIntersectOfAsync(IRedisSortedSetAsync`1[] setIds);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisSortedSetAsync<T>.PopulateWithUnionOfAsync(IRedisSortedSetAsync`1[] setIds);
    public sealed virtual string get_Id();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [IteratorStateMachineAttribute("ServiceStack.Redis.Generic.RedisClientSortedSet`1/<GetPagingEnumerator>d__38")]
public IEnumerator`1<T> GetPagingEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Add(T item, double score);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual T PopItemWithHighestScore();
    public sealed virtual T PopItemWithLowestScore();
    public sealed virtual double IncrementItem(T item, double incrementBy);
    public sealed virtual int IndexOf(T item);
    public sealed virtual long IndexOfDescending(T item);
    public sealed virtual List`1<T> GetAll();
    public sealed virtual List`1<T> GetAllDescending();
    public sealed virtual List`1<T> GetRange(int fromRank, int toRank);
    public sealed virtual List`1<T> GetRangeByLowestScore(double fromScore, double toScore);
    public sealed virtual List`1<T> GetRangeByLowestScore(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<T> GetRangeByHighestScore(double fromScore, double toScore);
    public sealed virtual List`1<T> GetRangeByHighestScore(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual long RemoveRange(int minRank, int maxRank);
    public sealed virtual long RemoveRangeByScore(double fromScore, double toScore);
    public sealed virtual double GetItemScore(T item);
    public sealed virtual long PopulateWithIntersectOf(IRedisSortedSet`1[] setIds);
    public sealed virtual long PopulateWithIntersectOf(IRedisSortedSet`1[] setIds, String[] args);
    public sealed virtual long PopulateWithUnionOf(IRedisSortedSet`1[] setIds);
    public sealed virtual long PopulateWithUnionOf(IRedisSortedSet`1[] setIds, String[] args);
}
[DefaultMemberAttribute("Item")]
public class ServiceStack.Redis.Generic.RedisTypedClient`1 : object {
    private ITypeSerializer`1<T> serializer;
    private RedisClient client;
    private string RecentSortedSetKey;
    [CompilerGeneratedAttribute]
private string <TypeIdsSetKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeLockKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SequenceKey>k__BackingField;
    private static int FirstElement;
    private static int LastElement;
    [CompilerGeneratedAttribute]
private IHasNamed`1<IRedisList`1<T>> <Lists>k__BackingField;
    [CompilerGeneratedAttribute]
private IHasNamed`1<IRedisSet`1<T>> <Sets>k__BackingField;
    [CompilerGeneratedAttribute]
private IHasNamed`1<IRedisSortedSet`1<T>> <SortedSets>k__BackingField;
    private IRedisClientAsync AsyncClient { get; }
    private IRedisNativeClientAsync AsyncNative { get; }
    private IRedisSetAsync ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.TypeIdsSet { get; }
    private IRedisClientAsync ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RedisClient { get; }
    private long ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.Db { get; }
    private IHasNamed`1<IRedisListAsync`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.Lists { get; }
    private IHasNamed`1<IRedisSetAsync`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.Sets { get; }
    private IHasNamed`1<IRedisSortedSetAsync`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SortedSets { get; }
    public IRedisClient RedisClient { get; }
    public IRedisNativeClient NativeClient { get; }
    public string TypeIdsSetKey { get; public set; }
    public string TypeLockKey { get; public set; }
    public IRedisTransactionBase Transaction { get; public set; }
    public IRedisPipelineShared Pipeline { get; public set; }
    public IRedisSet TypeIdsSet { get; }
    private RedisClientSet TypeIdsSetRaw { get; }
    public T Item { get; public set; }
    public string SequenceKey { get; public set; }
    public IHasNamed`1<IRedisList`1<T>> Lists { get; public set; }
    public IHasNamed`1<IRedisSet`1<T>> Sets { get; public set; }
    public long Db { get; public set; }
    public IHasNamed`1<IRedisSortedSet`1<T>> SortedSets { get; public set; }
    private static RedisTypedClient`1();
    public RedisTypedClient`1(RedisClient client);
    public IRedisTypedClientAsync`1<T> AsAsync();
    private IRedisClientAsync get_AsyncClient();
    private IRedisNativeClientAsync get_AsyncNative();
    private sealed virtual override IRedisSetAsync ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.get_TypeIdsSet();
    private sealed virtual override IRedisClientAsync ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.get_RedisClient();
    internal ValueTask ExpectQueuedAsync(CancellationToken token);
    internal ValueTask ExpectOkAsync(CancellationToken token);
    internal ValueTask`1<int> ReadMultiDataResultCountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetValueAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-SetValueAsync>d__13")]
private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetValueAsync(string key, T entity, CancellationToken token);
    private sealed virtual override Task`1<T> ServiceStack.Data.IEntityStoreAsync<T>.GetByIdAsync(object id, CancellationToken token);
    internal ValueTask FlushSendBufferAsync(CancellationToken token);
    internal ValueTask AddTypeIdsRegisteredDuringPipelineAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-GetByIdsAsync>d__17")]
private sealed virtual override Task`1<IList`1<T>> ServiceStack.Data.IEntityStoreAsync<T>.GetByIdsAsync(IEnumerable ids, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-GetAllAsync>d__18")]
private sealed virtual override Task`1<IList`1<T>> ServiceStack.Data.IEntityStoreAsync<T>.GetAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-StoreAsync>d__19")]
private sealed virtual override Task`1<T> ServiceStack.Data.IEntityStoreAsync<T>.StoreAsync(T entity, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-StoreAllAsync>d__20")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync<T>.StoreAllAsync(IEnumerable`1<T> entities, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-DeleteAsync>d__21")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync<T>.DeleteAsync(T entity, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-DeleteByIdAsync>d__22")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync<T>.DeleteByIdAsync(object id, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-DeleteByIdsAsync>d__23")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync<T>.DeleteByIdsAsync(IEnumerable ids, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Data-IEntityStoreAsync<T>-DeleteAllAsync>d__24")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync<T>.DeleteAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<DeleteAllAsync>d__25")]
private Task DeleteAllAsync(ulong cursor, int batchSize, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetValuesAsync>d__26")]
private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetValuesAsync(List`1<string> keys, CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisTypedTransactionAsync`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.CreateTransactionAsync(CancellationToken token);
    private sealed virtual override IRedisTypedPipelineAsync`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.CreatePipeline();
    private sealed virtual override ValueTask`1<IAsyncDisposable> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.AcquireLockAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override long ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.get_Db();
    private sealed virtual override IHasNamed`1<IRedisListAsync`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.get_Lists();
    private sealed virtual override IHasNamed`1<IRedisSetAsync`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.get_Sets();
    private sealed virtual override IHasNamed`1<IRedisSortedSetAsync`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.get_SortedSets();
    private sealed virtual override IRedisHashAsync`2<TKey, T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetHash(string hashId);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SelectAsync(long db, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAllKeysAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetSequenceAsync(int value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetNextSequenceAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetNextSequenceAsync(int incrBy, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisKeyType> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetEntryTypeAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRandomKeyAsync(CancellationToken token);
    private static void AssertNotNull(object obj, string name);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-SetValueAsync>d__47")]
private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetValueAsync(string key, T entity, TimeSpan expireIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-SetValueIfNotExistsAsync>d__48")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetValueIfNotExistsAsync(string key, T entity, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-SetValueIfExistsAsync>d__49")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetValueIfExistsAsync(string key, T entity, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-StoreAsync>d__50")]
private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreAsync(T entity, TimeSpan expireIn, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAndSetValueAsync(string key, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.ContainsKeyAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveEntryAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveEntryAsync(String[] keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-RemoveEntryAsync>d__55")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveEntryAsync(IHasStringId[] entities, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.IncrementValueAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.IncrementValueByAsync(string key, int count, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.DecrementValueAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.DecrementValueByAsync(string key, int count, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.ExpireInAsync(object id, TimeSpan expiresIn, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.ExpireAtAsync(object id, DateTime expireAt, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.ExpireEntryInAsync(string key, TimeSpan expireIn, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.ExpireEntryAtAsync(string key, DateTime expireAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetTimeToLiveAsync>d__64")]
private sealed virtual override ValueTask`1<TimeSpan> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetTimeToLiveAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.ForegroundSaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.BackgroundSaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.FlushDbAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.FlushAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-SearchKeysAsync>d__69")]
private sealed virtual override ValueTask`1<T[]> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SearchKeysAsync(string pattern, CancellationToken token);
    private ValueTask`1<List`1<T>> CreateList(ValueTask`1<Byte[][]> pending);
    private ValueTask`1<T> DeserializeValueAsync(ValueTask`1<Byte[]> pending);
    private static ValueTask`1<T> DeserializeFromStringAsync(ValueTask`1<string> pending);
    private static ValueTask`1<IDictionary`2<T, double>> CreateGenericMapAsync(ValueTask`1<IDictionary`2<string, double>> pending);
    private static ValueTask`1<Dictionary`2<TKey, TValue>> ConvertEachToAsync(ValueTask`1<Dictionary`2<string, string>> pending);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetSortedEntryValuesAsync(IRedisSetAsync`1<T> fromSet, int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreAsHashAsync(T entity, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetFromHashAsync(object id, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetAllItemsFromSetAsync>d__78")]
private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAllItemsFromSetAsync(IRedisSetAsync`1<T> fromSet, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.AddItemToSetAsync(IRedisSetAsync`1<T> toSet, T item, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveItemFromSetAsync(IRedisSetAsync`1<T> fromSet, T item, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.PopItemFromSetAsync(IRedisSetAsync`1<T> fromSet, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.MoveBetweenSetsAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1<T> toSet, T item, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetSetCountAsync(IRedisSetAsync`1<T> set, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetContainsItemAsync(IRedisSetAsync`1<T> set, T item, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetIntersectFromSetsAsync>d__85")]
private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetIntersectFromSetsAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreIntersectFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetUnionFromSetsAsync>d__87")]
private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetUnionFromSetsAsync(IRedisSetAsync`1[] sets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreUnionFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetDifferencesFromSetAsync>d__89")]
private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetDifferencesFromSetAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreDifferencesFromSetAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRandomItemFromSetAsync(IRedisSetAsync`1<T> fromSet, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAllItemsFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromListAsync(IRedisListAsync`1<T> fromList, int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SortListAsync(IRedisListAsync`1<T> fromList, int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.AddItemToListAsync(IRedisListAsync`1<T> fromList, T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.PrependItemToListAsync(IRedisListAsync`1<T> fromList, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveStartFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-BlockingRemoveStartFromListAsync>d__98")]
private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.BlockingRemoveStartFromListAsync(IRedisListAsync`1<T> fromList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveEndFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveAllFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.TrimListAsync(IRedisListAsync`1<T> fromList, int keepStartingFrom, int keepEndingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveItemFromListAsync(IRedisListAsync`1<T> fromList, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveItemFromListAsync(IRedisListAsync`1<T> fromList, T value, int noOfMatches, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetListCountAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetItemFromListAsync(IRedisListAsync`1<T> fromList, int listIndex, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetItemInListAsync(IRedisListAsync`1<T> toList, int listIndex, T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.InsertBeforeItemInListAsync(IRedisListAsync`1<T> toList, T pivot, T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.InsertAfterItemInListAsync(IRedisListAsync`1<T> toList, T pivot, T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.EnqueueItemOnListAsync(IRedisListAsync`1<T> fromList, T item, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.DequeueItemFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-BlockingDequeueItemFromListAsync>d__111")]
private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.BlockingDequeueItemFromListAsync(IRedisListAsync`1<T> fromList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.PushItemToListAsync(IRedisListAsync`1<T> fromList, T item, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.PopItemFromListAsync(IRedisListAsync`1<T> fromList, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-BlockingPopItemFromListAsync>d__114")]
private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.BlockingPopItemFromListAsync(IRedisListAsync`1<T> fromList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.PopAndPushItemBetweenListsAsync(IRedisListAsync`1<T> fromList, IRedisListAsync`1<T> toList, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.BlockingPopAndPushItemBetweenListsAsync(IRedisListAsync`1<T> fromList, IRedisListAsync`1<T> toList, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.AddItemToSortedSetAsync(IRedisSortedSetAsync`1<T> toSet, T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.AddItemToSortedSetAsync(IRedisSortedSetAsync`1<T> toSet, T value, double score, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveItemFromSortedSetAsync(IRedisSortedSetAsync`1<T> fromSet, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.PopItemWithLowestScoreFromSortedSetAsync(IRedisSortedSetAsync`1<T> fromSet, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.PopItemWithHighestScoreFromSortedSetAsync(IRedisSortedSetAsync`1<T> fromSet, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SortedSetContainsItemAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.IncrementItemInSortedSetAsync(IRedisSortedSetAsync`1<T> set, T value, double incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetItemIndexInSortedSetAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetItemIndexInSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAllItemsFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAllItemsFromSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAllWithScoresFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetDescAsync(IRedisSortedSetAsync`1<T> set, int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByLowestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<T, double>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRangeWithScoresFromSortedSetByHighestScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveRangeFromSortedSetAsync(IRedisSortedSetAsync`1<T> set, int minRank, int maxRank, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveRangeFromSortedSetByScoreAsync(IRedisSortedSetAsync`1<T> set, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetSortedSetCountAsync(IRedisSortedSetAsync`1<T> set, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetItemScoreInSortedSetAsync(IRedisSortedSetAsync`1<T> set, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreIntersectFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreIntersectFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreUnionFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreUnionFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.HashContainsEntryAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetEntryInHashAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, T value, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetEntryInHashIfNotExistsAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, T value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.SetRangeInHashAsync(IRedisHashAsync`2<TKey, T> hash, IEnumerable`1<KeyValuePair`2<TKey, T>> keyValuePairs, CancellationToken token);
    private sealed virtual override ValueTask`1<T> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetValueFromHashAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveEntryFromHashAsync(IRedisHashAsync`2<TKey, T> hash, TKey key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetHashCountAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<TKey>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetHashKeysAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetHashValuesAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    private sealed virtual override ValueTask`1<Dictionary`2<TKey, T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetAllEntriesFromHashAsync(IRedisHashAsync`2<TKey, T> hash, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-StoreRelatedEntitiesAsync>d__167`1")]
private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreRelatedEntitiesAsync(object parentId, List`1<TChild> children, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreRelatedEntitiesAsync(object parentId, TChild[] children, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.DeleteRelatedEntitiesAsync(object parentId, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.DeleteRelatedEntityAsync(object parentId, object childId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetRelatedEntitiesAsync>d__171`1")]
private sealed virtual override ValueTask`1<List`1<TChild>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRelatedEntitiesAsync(object parentId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetRelatedEntitiesCountAsync(object parentId, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.AddToRecentsListAsync(T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetLatestFromRecentsListAsync>d__174")]
private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetLatestFromRecentsListAsync(int skip, int take, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<ServiceStack-Redis-Generic-IRedisTypedClientAsync<T>-GetEarliestFromRecentsListAsync>d__175")]
private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetEarliestFromRecentsListAsync(int skip, int take, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveEntryAsync(String[] args);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.RemoveEntryAsync(IHasStringId[] entities);
    private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetIntersectFromSetsAsync(IRedisSetAsync`1[] sets);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreIntersectFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets);
    private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetUnionFromSetsAsync(IRedisSetAsync`1[] sets);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreUnionFromSetsAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1[] sets);
    private sealed virtual override ValueTask`1<HashSet`1<T>> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.GetDifferencesFromSetAsync(IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreDifferencesFromSetAsync(IRedisSetAsync`1<T> intoSet, IRedisSetAsync`1<T> fromSet, IRedisSetAsync`1[] withSets);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreIntersectFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreUnionFromSortedSetsAsync(IRedisSortedSetAsync`1<T> intoSetId, IRedisSortedSetAsync`1[] setIds);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedClientAsync<T>.StoreRelatedEntitiesAsync(object parentId, TChild[] children);
    public sealed virtual IRedisClient get_RedisClient();
    public IRedisNativeClient get_NativeClient();
    [CompilerGeneratedAttribute]
public string get_TypeIdsSetKey();
    [CompilerGeneratedAttribute]
public void set_TypeIdsSetKey(string value);
    [CompilerGeneratedAttribute]
public string get_TypeLockKey();
    [CompilerGeneratedAttribute]
public void set_TypeLockKey(string value);
    public sealed virtual IRedisTypedTransaction`1<T> CreateTransaction();
    public sealed virtual IRedisTypedPipeline`1<T> CreatePipeline();
    public sealed virtual IDisposable AcquireLock();
    public sealed virtual IDisposable AcquireLock(TimeSpan timeOut);
    public IRedisTransactionBase get_Transaction();
    public void set_Transaction(IRedisTransactionBase value);
    public IRedisPipelineShared get_Pipeline();
    public void set_Pipeline(IRedisPipelineShared value);
    public void Watch(String[] keys);
    public void UnWatch();
    public void Multi();
    public void Discard();
    public void Exec();
    internal void AddTypeIdsRegisteredDuringPipeline();
    internal void ClearTypeIdsRegisteredDuringPipeline();
    public sealed virtual List`1<string> GetAllKeys();
    public sealed virtual string UrnKey(T entity);
    public sealed virtual IRedisSet get_TypeIdsSet();
    private RedisClientSet get_TypeIdsSetRaw();
    public sealed virtual T get_Item(string key);
    public sealed virtual void set_Item(string key, T value);
    public Byte[] SerializeValue(T value);
    public T DeserializeValue(Byte[] value);
    public sealed virtual void SetValue(string key, T entity);
    public sealed virtual void SetValue(string key, T entity, TimeSpan expireIn);
    public sealed virtual bool SetValueIfNotExists(string key, T entity);
    public sealed virtual bool SetValueIfExists(string key, T entity);
    public sealed virtual T GetValue(string key);
    public sealed virtual T GetAndSetValue(string key, T value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool RemoveEntry(string key);
    public sealed virtual bool RemoveEntry(String[] keys);
    public sealed virtual bool RemoveEntry(IHasStringId[] entities);
    public sealed virtual long IncrementValue(string key);
    public sealed virtual long IncrementValueBy(string key, int count);
    public sealed virtual long DecrementValue(string key);
    public sealed virtual long DecrementValueBy(string key, int count);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SequenceKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SequenceKey(string value);
    public sealed virtual void SetSequence(int value);
    public sealed virtual long GetNextSequence();
    public sealed virtual long GetNextSequence(int incrBy);
    public sealed virtual RedisKeyType GetEntryType(string key);
    public sealed virtual string GetRandomKey();
    public sealed virtual bool ExpireEntryIn(string key, TimeSpan expireIn);
    public sealed virtual bool ExpireEntryAt(string key, DateTime expireAt);
    public sealed virtual bool ExpireIn(object id, TimeSpan expireIn);
    public sealed virtual bool ExpireAt(object id, DateTime expireAt);
    public sealed virtual TimeSpan GetTimeToLive(string key);
    public sealed virtual void Save();
    public sealed virtual void SaveAsync();
    public sealed virtual void FlushDb();
    public sealed virtual void FlushAll();
    public sealed virtual T[] SearchKeys(string pattern);
    private T[] SearchKeysParse(List`1<string> strKeys);
    public sealed virtual List`1<T> GetValues(List`1<string> keys);
    private List`1<T> ProcessGetValues(Byte[][] resultBytesArray);
    public sealed virtual void StoreAsHash(T entity);
    public sealed virtual T GetFromHash(object id);
    public sealed virtual T GetById(object id);
    public sealed virtual IList`1<T> GetByIds(IEnumerable ids);
    public sealed virtual IList`1<T> GetAll();
    public sealed virtual T Store(T entity);
    public sealed virtual T Store(T entity, TimeSpan expireIn);
    public sealed virtual void StoreAll(IEnumerable`1<T> entities);
    private bool PrepareStoreAll(IEnumerable`1<T> entities, Byte[][]& keys, Byte[][]& values, List`1& entitiesList);
    public sealed virtual void Delete(T entity);
    public sealed virtual void DeleteById(object id);
    public sealed virtual void DeleteByIds(IEnumerable ids);
    private void DeleteAll(ulong cursor, int pageSize);
    public sealed virtual void DeleteAll();
    internal void ExpectQueued();
    internal void ExpectOk();
    internal int ReadMultiDataResultCount();
    public void FlushSendBuffer();
    public void ResetSendBuffer();
    internal void EndPipeline();
    private string GetChildReferenceSetKey(object parentId);
    public sealed virtual void StoreRelatedEntities(object parentId, List`1<TChild> children);
    public sealed virtual void StoreRelatedEntities(object parentId, TChild[] children);
    public sealed virtual void DeleteRelatedEntity(object parentId, object childId);
    public sealed virtual void DeleteRelatedEntities(object parentId);
    public sealed virtual List`1<TChild> GetRelatedEntities(object parentId);
    public sealed virtual long GetRelatedEntitiesCount(object parentId);
    public sealed virtual void AddToRecentsList(T value);
    public sealed virtual List`1<T> GetLatestFromRecentsList(int skip, int take);
    public sealed virtual List`1<T> GetEarliestFromRecentsList(int skip, int take);
    public sealed virtual IRedisHash`2<TKey, T> GetHash(string hashId);
    public sealed virtual bool HashContainsEntry(IRedisHash`2<TKey, T> hash, TKey key);
    public sealed virtual bool SetEntryInHash(IRedisHash`2<TKey, T> hash, TKey key, T value);
    public sealed virtual bool SetEntryInHashIfNotExists(IRedisHash`2<TKey, T> hash, TKey key, T value);
    public sealed virtual void SetRangeInHash(IRedisHash`2<TKey, T> hash, IEnumerable`1<KeyValuePair`2<TKey, T>> keyValuePairs);
    public sealed virtual T GetValueFromHash(IRedisHash`2<TKey, T> hash, TKey key);
    public sealed virtual bool RemoveEntryFromHash(IRedisHash`2<TKey, T> hash, TKey key);
    public sealed virtual long GetHashCount(IRedisHash`2<TKey, T> hash);
    public sealed virtual List`1<TKey> GetHashKeys(IRedisHash`2<TKey, T> hash);
    public sealed virtual List`1<T> GetHashValues(IRedisHash`2<TKey, T> hash);
    public sealed virtual Dictionary`2<TKey, T> GetAllEntriesFromHash(IRedisHash`2<TKey, T> hash);
    public static Dictionary`2<TKey, TValue> ConvertEachTo(IDictionary`2<string, string> map);
    [CompilerGeneratedAttribute]
public sealed virtual IHasNamed`1<IRedisList`1<T>> get_Lists();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Lists(IHasNamed`1<IRedisList`1<T>> value);
    private List`1<T> CreateList(Byte[][] multiDataList);
    public sealed virtual List`1<T> GetAllItemsFromList(IRedisList`1<T> fromList);
    public sealed virtual List`1<T> GetRangeFromList(IRedisList`1<T> fromList, int startingFrom, int endingAt);
    public sealed virtual List`1<T> SortList(IRedisList`1<T> fromList, int startingFrom, int endingAt);
    public sealed virtual void AddItemToList(IRedisList`1<T> fromList, T value);
    public void AddRangeToList(IRedisList`1<T> fromList, IEnumerable`1<T> values);
    public sealed virtual void PrependItemToList(IRedisList`1<T> fromList, T value);
    public sealed virtual T RemoveStartFromList(IRedisList`1<T> fromList);
    public sealed virtual T BlockingRemoveStartFromList(IRedisList`1<T> fromList, Nullable`1<TimeSpan> timeOut);
    public sealed virtual T RemoveEndFromList(IRedisList`1<T> fromList);
    public sealed virtual void RemoveAllFromList(IRedisList`1<T> fromList);
    public sealed virtual void TrimList(IRedisList`1<T> fromList, int keepStartingFrom, int keepEndingAt);
    public sealed virtual long RemoveItemFromList(IRedisList`1<T> fromList, T value);
    public sealed virtual long RemoveItemFromList(IRedisList`1<T> fromList, T value, int noOfMatches);
    public sealed virtual long GetListCount(IRedisList`1<T> fromList);
    public sealed virtual T GetItemFromList(IRedisList`1<T> fromList, int listIndex);
    public sealed virtual void SetItemInList(IRedisList`1<T> toList, int listIndex, T value);
    public sealed virtual void InsertBeforeItemInList(IRedisList`1<T> toList, T pivot, T value);
    public sealed virtual void InsertAfterItemInList(IRedisList`1<T> toList, T pivot, T value);
    public sealed virtual void EnqueueItemOnList(IRedisList`1<T> fromList, T item);
    public sealed virtual T DequeueItemFromList(IRedisList`1<T> fromList);
    public sealed virtual T BlockingDequeueItemFromList(IRedisList`1<T> fromList, Nullable`1<TimeSpan> timeOut);
    public sealed virtual void PushItemToList(IRedisList`1<T> fromList, T item);
    public sealed virtual T PopItemFromList(IRedisList`1<T> fromList);
    public sealed virtual T BlockingPopItemFromList(IRedisList`1<T> fromList, Nullable`1<TimeSpan> timeOut);
    public sealed virtual T PopAndPushItemBetweenLists(IRedisList`1<T> fromList, IRedisList`1<T> toList);
    public sealed virtual T BlockingPopAndPushItemBetweenLists(IRedisList`1<T> fromList, IRedisList`1<T> toList, Nullable`1<TimeSpan> timeOut);
    [CompilerGeneratedAttribute]
public sealed virtual IHasNamed`1<IRedisSet`1<T>> get_Sets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Sets(IHasNamed`1<IRedisSet`1<T>> value);
    public sealed virtual long get_Db();
    public sealed virtual void set_Db(long value);
    private HashSet`1<T> CreateHashSet(Byte[][] multiDataList);
    public sealed virtual List`1<T> GetSortedEntryValues(IRedisSet`1<T> fromSet, int startingFrom, int endingAt);
    public sealed virtual HashSet`1<T> GetAllItemsFromSet(IRedisSet`1<T> fromSet);
    public sealed virtual void AddItemToSet(IRedisSet`1<T> toSet, T item);
    public sealed virtual void RemoveItemFromSet(IRedisSet`1<T> fromSet, T item);
    public sealed virtual T PopItemFromSet(IRedisSet`1<T> fromSet);
    public sealed virtual void MoveBetweenSets(IRedisSet`1<T> fromSet, IRedisSet`1<T> toSet, T item);
    public sealed virtual long GetSetCount(IRedisSet`1<T> set);
    public sealed virtual bool SetContainsItem(IRedisSet`1<T> set, T item);
    public sealed virtual HashSet`1<T> GetIntersectFromSets(IRedisSet`1[] sets);
    public sealed virtual void StoreIntersectFromSets(IRedisSet`1<T> intoSet, IRedisSet`1[] sets);
    public sealed virtual HashSet`1<T> GetUnionFromSets(IRedisSet`1[] sets);
    public sealed virtual void StoreUnionFromSets(IRedisSet`1<T> intoSet, IRedisSet`1[] sets);
    public sealed virtual HashSet`1<T> GetDifferencesFromSet(IRedisSet`1<T> fromSet, IRedisSet`1[] withSets);
    public sealed virtual void StoreDifferencesFromSet(IRedisSet`1<T> intoSet, IRedisSet`1<T> fromSet, IRedisSet`1[] withSets);
    public sealed virtual T GetRandomItemFromSet(IRedisSet`1<T> fromSet);
    [CompilerGeneratedAttribute]
public sealed virtual IHasNamed`1<IRedisSortedSet`1<T>> get_SortedSets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortedSets(IHasNamed`1<IRedisSortedSet`1<T>> value);
    public static T DeserializeFromString(string serializedObj);
    private static IDictionary`2<T, double> CreateGenericMap(IDictionary`2<string, double> map);
    public sealed virtual void AddItemToSortedSet(IRedisSortedSet`1<T> toSet, T value);
    public sealed virtual void AddItemToSortedSet(IRedisSortedSet`1<T> toSet, T value, double score);
    public sealed virtual bool RemoveItemFromSortedSet(IRedisSortedSet`1<T> fromSet, T value);
    public sealed virtual T PopItemWithLowestScoreFromSortedSet(IRedisSortedSet`1<T> fromSet);
    public sealed virtual T PopItemWithHighestScoreFromSortedSet(IRedisSortedSet`1<T> fromSet);
    public sealed virtual bool SortedSetContainsItem(IRedisSortedSet`1<T> set, T value);
    public sealed virtual double IncrementItemInSortedSet(IRedisSortedSet`1<T> set, T value, double incrementBy);
    public sealed virtual long GetItemIndexInSortedSet(IRedisSortedSet`1<T> set, T value);
    public sealed virtual long GetItemIndexInSortedSetDesc(IRedisSortedSet`1<T> set, T value);
    public sealed virtual List`1<T> GetAllItemsFromSortedSet(IRedisSortedSet`1<T> set);
    public sealed virtual List`1<T> GetAllItemsFromSortedSetDesc(IRedisSortedSet`1<T> set);
    public sealed virtual List`1<T> GetRangeFromSortedSet(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public sealed virtual List`1<T> GetRangeFromSortedSetDesc(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public sealed virtual IDictionary`2<T, double> GetAllWithScoresFromSortedSet(IRedisSortedSet`1<T> set);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSet(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetDesc(IRedisSortedSet`1<T> set, int fromRank, int toRank);
    public sealed virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public sealed virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public sealed virtual List`1<T> GetRangeFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByLowestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public sealed virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public sealed virtual List`1<T> GetRangeFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public sealed virtual IDictionary`2<T, double> GetRangeWithScoresFromSortedSetByHighestScore(IRedisSortedSet`1<T> set, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual long RemoveRangeFromSortedSet(IRedisSortedSet`1<T> set, int minRank, int maxRank);
    public sealed virtual long RemoveRangeFromSortedSetByScore(IRedisSortedSet`1<T> set, double fromScore, double toScore);
    public sealed virtual long GetSortedSetCount(IRedisSortedSet`1<T> set);
    public sealed virtual double GetItemScoreInSortedSet(IRedisSortedSet`1<T> set, T value);
    public sealed virtual long StoreIntersectFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds);
    public sealed virtual long StoreIntersectFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds, String[] args);
    public sealed virtual long StoreUnionFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds);
    public sealed virtual long StoreUnionFromSortedSets(IRedisSortedSet`1<T> intoSetId, IRedisSortedSet`1[] setIds, String[] args);
    [CompilerGeneratedAttribute]
private string <ServiceStack.Data.IEntityStoreAsync<T>.GetByIdsAsync>b__17_0(object x);
    [CompilerGeneratedAttribute]
private string <ServiceStack.Data.IEntityStoreAsync<T>.DeleteByIdsAsync>b__23_1(string t);
    [CompilerGeneratedAttribute]
private string <DeleteAllAsync>b__25_0(Byte[] x);
    [CompilerGeneratedAttribute]
internal static void <AssertNotNull>g__Throw|46_0(string name);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<<CreateList>g__Awaited|70_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<List`1<T>> <CreateList>g__Awaited|70_0(RedisTypedClient`1<T> obj, ValueTask`1<Byte[][]> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<<DeserializeValueAsync>g__Awaited|71_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<T> <DeserializeValueAsync>g__Awaited|71_0(RedisTypedClient`1<T> obj, ValueTask`1<Byte[]> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<<DeserializeFromStringAsync>g__Awaited|72_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<T> <DeserializeFromStringAsync>g__Awaited|72_0(ValueTask`1<string> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<<CreateGenericMapAsync>g__Awaited|73_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<IDictionary`2<T, double>> <CreateGenericMapAsync>g__Awaited|73_0(ValueTask`1<IDictionary`2<string, double>> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedClient`1/<<ConvertEachToAsync>g__Awaited|74_0>d`2")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<Dictionary`2<TKey, TValue>> <ConvertEachToAsync>g__Awaited|74_0(ValueTask`1<Dictionary`2<string, string>> pending);
    [CompilerGeneratedAttribute]
private string <GetByIds>b__271_0(object x);
    [CompilerGeneratedAttribute]
private string <DeleteByIds>b__279_1(string t);
    [CompilerGeneratedAttribute]
private string <DeleteAll>b__280_1(string t);
}
public class ServiceStack.Redis.Generic.RedisTypedCommandQueue`1 : RedisQueueCompletableOperation {
    internal RedisTypedClient`1<T> RedisClient;
    internal RedisTypedCommandQueue`1(RedisTypedClient`1<T> redisClient);
    public sealed virtual void QueueCommand(Action`1<IRedisTypedClient`1<T>> command);
    public sealed virtual void QueueCommand(Action`1<IRedisTypedClient`1<T>> command, Action onSuccessCallback);
    public sealed virtual void QueueCommand(Action`1<IRedisTypedClient`1<T>> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, int> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, int> command, Action`1<int> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, int> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, long> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, long> command, Action`1<long> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, long> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, bool> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, bool> command, Action`1<bool> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, bool> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, double> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, double> command, Action`1<double> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, double> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[]> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[]> command, Action`1<Byte[]> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[]> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, string> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, string> command, Action`1<string> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, string> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, T> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, T> command, Action`1<T> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, T> command, Action`1<T> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[][]> command);
    public void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[][]> command, Action`1<Byte[][]> onSuccessCallback);
    public void QueueCommand(Func`2<IRedisTypedClient`1<T>, Byte[][]> command, Action`1<Byte[][]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<string>> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<T>> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<T>> command, Action`1<List`1<T>> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, List`1<T>> command, Action`1<List`1<T>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<string>> command);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<T>> command);
    public void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<T>> command, Action`1<HashSet`1<T>> onSuccessCallback);
    public void QueueCommand(Func`2<IRedisTypedClient`1<T>, HashSet`1<T>> command, Action`1<HashSet`1<T>> onSuccessCallback, Action`1<Exception> onErrorCallback);
}
internal class ServiceStack.Redis.Generic.RedisTypedTransaction`1 : RedisTypedPipeline`1<T> {
    private int _numCommands;
    private bool _isAsync;
    internal RedisTypedTransaction`1(RedisTypedClient`1<T> redisClient, bool isAsync);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Generic.RedisTypedTransaction`1/<ServiceStack-Redis-Generic-IRedisTypedTransactionAsync<T>-CommitAsync>d__0")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Generic.IRedisTypedTransactionAsync<T>.CommitAsync(CancellationToken token);
    private ValueTask ExecAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.Generic.IRedisTypedTransactionAsync<T>.RollbackAsync(CancellationToken token);
    protected virtual void Init();
    private void QueueExpectQueued();
    private void Exec();
    public sealed virtual bool Commit();
    private void handleMultiDataResultCount(int count);
    public sealed virtual void Rollback();
    public virtual bool Replay();
    public virtual void Dispose();
    protected virtual void AddCurrentQueuedOperation();
    private void QueueExpectQueuedAsync();
    [CompilerGeneratedAttribute]
private void <Commit>b__9_0(IRedisClient r);
    [CompilerGeneratedAttribute]
private void <Commit>b__9_1(IRedisClient r);
}
public interface ServiceStack.Redis.IHandleClientDispose {
    public abstract virtual void DisposeClient(RedisNativeClient client);
}
[ExtensionAttribute]
internal static class ServiceStack.Redis.Internal.ValueTask_Utils : object {
    private static Task`1<bool> s_TaskTrue;
    private static Task`1<bool> s_TaskFalse;
    private static ValueTask`1<bool> s_ValueTaskTrue;
    private static ValueTask_Utils();
    [ExtensionAttribute]
internal static ValueTask Await(ValueTask`1<T> pending);
    [ExtensionAttribute]
internal static ValueTask`1<TTo> Await(ValueTask`1<TFrom> pending, Func`2<TFrom, TTo> projection);
    [ExtensionAttribute]
internal static ValueTask`1<int> AsInt32(ValueTask`1<long> pending);
    [ExtensionAttribute]
internal static ValueTask`1<TTo> Await(ValueTask`1<TFrom> pending, Func`3<TFrom, TState, TTo> projection, TState state);
    [ExtensionAttribute]
internal static ValueTask`1<bool> AwaitAsTrue(ValueTask pending);
    [ExtensionAttribute]
internal static Task`1<bool> AwaitAsTrueTask(ValueTask pending);
    [ExtensionAttribute]
internal static ValueTask`1<bool> AwaitAsTrue(ValueTask`1<T> pending);
    [ExtensionAttribute]
internal static ValueTask`1<bool> IsSuccessAsync(ValueTask`1<long> pending);
    [ExtensionAttribute]
internal static Task`1<bool> IsSuccessTaskAsync(ValueTask`1<long> pending);
    [ExtensionAttribute]
internal static ValueTask`1<List`1<TValue>> ConvertEachToAsync(ValueTask`1<List`1<string>> pending);
    [ExtensionAttribute]
internal static ValueTask`1<List`1<string>> ToStringListAsync(ValueTask`1<Byte[][]> pending);
    [ExtensionAttribute]
internal static ValueTask`1<T> Await(ValueTask pending, T result);
    [ExtensionAttribute]
internal static ValueTask`1<T> AsValueTaskResult(T value);
    [ExtensionAttribute]
internal static ValueTask`1<string> FromUtf8BytesAsync(ValueTask`1<Byte[]> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<Await>g__Awaited|0_0>d`1")]
[CompilerGeneratedAttribute]
internal static ValueTask <Await>g__Awaited|0_0(ValueTask`1<T> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<Await>g__Awaited|1_0>d`2")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<TTo> <Await>g__Awaited|1_0(ValueTask`1<TFrom> pending, Func`2<TFrom, TTo> projection);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<AsInt32>g__Awaited|2_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<int> <AsInt32>g__Awaited|2_0(ValueTask`1<long> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<Await>g__Awaited|3_0>d`3")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<TTo> <Await>g__Awaited|3_0(ValueTask`1<TFrom> pending, Func`3<TFrom, TState, TTo> projection, TState state);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<AwaitAsTrue>g__Awaited|4_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<bool> <AwaitAsTrue>g__Awaited|4_0(ValueTask pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<AwaitAsTrueTask>g__Awaited|5_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<bool> <AwaitAsTrueTask>g__Awaited|5_0(ValueTask pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<AwaitAsTrue>g__Awaited|6_0>d`1")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<bool> <AwaitAsTrue>g__Awaited|6_0(ValueTask`1<T> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<IsSuccessAsync>g__Awaited|7_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<bool> <IsSuccessAsync>g__Awaited|7_0(ValueTask`1<long> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<IsSuccessTaskAsync>g__Awaited|8_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<bool> <IsSuccessTaskAsync>g__Awaited|8_0(ValueTask`1<long> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<ConvertEachToAsync>g__Awaited|11_0>d`1")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<List`1<TValue>> <ConvertEachToAsync>g__Awaited|11_0(ValueTask`1<List`1<string>> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<ToStringListAsync>g__Awaited|12_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<List`1<string>> <ToStringListAsync>g__Awaited|12_0(ValueTask`1<Byte[][]> pending);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<Await>g__Awaited|14_0>d`1")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<T> <Await>g__Awaited|14_0(ValueTask pending, T result);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Internal.ValueTask_Utils/<<FromUtf8BytesAsync>g__Awaited|16_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<string> <FromUtf8BytesAsync>g__Awaited|16_0(ValueTask`1<Byte[]> pending);
}
public class ServiceStack.Redis.InvalidAccessException : RedisException {
    public InvalidAccessException(int threadId, string stackTrace);
}
public interface ServiceStack.Redis.IRedisFailover {
    public List`1<Action`1<IRedisClientsManager>> OnFailover { get; }
    public abstract virtual List`1<Action`1<IRedisClientsManager>> get_OnFailover();
    public abstract virtual void FailoverTo(String[] readWriteHosts);
    public abstract virtual void FailoverTo(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts);
}
public interface ServiceStack.Redis.IRedisResolverExtended {
    public RedisEndpoint[] Masters { get; }
    public Func`2<RedisEndpoint, RedisClient> ClientFactory { get; public set; }
    public abstract virtual RedisEndpoint[] get_Masters();
    public abstract virtual Func`2<RedisEndpoint, RedisClient> get_ClientFactory();
    public abstract virtual void set_ClientFactory(Func`2<RedisEndpoint, RedisClient> value);
    public abstract virtual RedisClient CreateMasterClient(int desiredIndex);
    public abstract virtual RedisClient CreateSlaveClient(int desiredIndex);
    public abstract virtual RedisClient CreateRedisClient(RedisEndpoint config, bool master);
    public abstract virtual RedisEndpoint GetReadWriteHost(int desiredIndex);
    public abstract virtual RedisEndpoint GetReadOnlyHost(int desiredIndex);
}
public interface ServiceStack.Redis.IRedisSentinel {
    public abstract virtual IRedisClientsManager Start();
}
internal class ServiceStack.Redis.Pipeline.QueuedRedisCommand : RedisCommand {
    public virtual ValueTask ExecuteAsync(IRedisClientAsync client);
    public virtual void Execute(IRedisClient client);
}
internal class ServiceStack.Redis.Pipeline.QueuedRedisOperation : object {
    private Delegate asyncReadCommand;
    protected static ILog Log;
    [CompilerGeneratedAttribute]
private Action <VoidReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<int> <IntReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<long> <LongReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<bool> <BoolReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Byte[]> <BytesReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Byte[][]> <MultiBytesReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <StringReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<List`1<string>> <MultiStringReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Dictionary`2<string, string>> <DictionaryStringReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<double> <DoubleReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<RedisData> <RedisDataReadCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnSuccessVoidCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<int> <OnSuccessIntCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<long> <OnSuccessLongCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<bool> <OnSuccessBoolCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Byte[]> <OnSuccessBytesCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Byte[][]> <OnSuccessMultiBytesCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <OnSuccessStringCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<List`1<string>> <OnSuccessMultiStringCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Dictionary`2<string, string>> <OnSuccessDictionaryStringCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<RedisData> <OnSuccessRedisDataCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<RedisText> <OnSuccessRedisTextCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<double> <OnSuccessDoubleCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <OnSuccessTypeCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<List`1<string>> <OnSuccessMultiTypeCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <OnErrorCallback>k__BackingField;
    public Action VoidReadCommand { get; public set; }
    public Func`1<int> IntReadCommand { get; public set; }
    public Func`1<long> LongReadCommand { get; public set; }
    public Func`1<bool> BoolReadCommand { get; public set; }
    public Func`1<Byte[]> BytesReadCommand { get; public set; }
    public Func`1<Byte[][]> MultiBytesReadCommand { get; public set; }
    public Func`1<string> StringReadCommand { get; public set; }
    public Func`1<List`1<string>> MultiStringReadCommand { get; public set; }
    public Func`1<Dictionary`2<string, string>> DictionaryStringReadCommand { get; public set; }
    public Func`1<double> DoubleReadCommand { get; public set; }
    public Func`1<RedisData> RedisDataReadCommand { get; public set; }
    public Action OnSuccessVoidCallback { get; public set; }
    public Action`1<int> OnSuccessIntCallback { get; public set; }
    public Action`1<long> OnSuccessLongCallback { get; public set; }
    public Action`1<bool> OnSuccessBoolCallback { get; public set; }
    public Action`1<Byte[]> OnSuccessBytesCallback { get; public set; }
    public Action`1<Byte[][]> OnSuccessMultiBytesCallback { get; public set; }
    public Action`1<string> OnSuccessStringCallback { get; public set; }
    public Action`1<List`1<string>> OnSuccessMultiStringCallback { get; public set; }
    public Action`1<Dictionary`2<string, string>> OnSuccessDictionaryStringCallback { get; public set; }
    public Action`1<RedisData> OnSuccessRedisDataCallback { get; public set; }
    public Action`1<RedisText> OnSuccessRedisTextCallback { get; public set; }
    public Action`1<double> OnSuccessDoubleCallback { get; public set; }
    public Action`1<string> OnSuccessTypeCallback { get; public set; }
    public Action`1<List`1<string>> OnSuccessMultiTypeCallback { get; public set; }
    public Action`1<Exception> OnErrorCallback { get; public set; }
    private static QueuedRedisOperation();
    public virtual ValueTask ExecuteAsync(IRedisClientAsync client);
    private QueuedRedisOperation SetAsyncReadCommand(Delegate value);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask> VoidReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<int>> IntReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<long>> LongReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<bool>> BoolReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<Byte[]>> BytesReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<Byte[][]>> MultiBytesReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<string>> StringReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<List`1<string>>> MultiStringReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<Dictionary`2<string, string>>> DictionaryStringReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<double>> DoubleReadCommandAsync);
    internal QueuedRedisOperation WithAsyncReadCommand(Func`2<CancellationToken, ValueTask`1<RedisData>> RedisDataReadCommandAsync);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Pipeline.QueuedRedisOperation/<ProcessResultAsync>d__14")]
public ValueTask ProcessResultAsync(CancellationToken token);
    private void ProcessResultThrowIfSync();
    [CompilerGeneratedAttribute]
public Action get_VoidReadCommand();
    [CompilerGeneratedAttribute]
public void set_VoidReadCommand(Action value);
    [CompilerGeneratedAttribute]
public Func`1<int> get_IntReadCommand();
    [CompilerGeneratedAttribute]
public void set_IntReadCommand(Func`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<long> get_LongReadCommand();
    [CompilerGeneratedAttribute]
public void set_LongReadCommand(Func`1<long> value);
    [CompilerGeneratedAttribute]
public Func`1<bool> get_BoolReadCommand();
    [CompilerGeneratedAttribute]
public void set_BoolReadCommand(Func`1<bool> value);
    [CompilerGeneratedAttribute]
public Func`1<Byte[]> get_BytesReadCommand();
    [CompilerGeneratedAttribute]
public void set_BytesReadCommand(Func`1<Byte[]> value);
    [CompilerGeneratedAttribute]
public Func`1<Byte[][]> get_MultiBytesReadCommand();
    [CompilerGeneratedAttribute]
public void set_MultiBytesReadCommand(Func`1<Byte[][]> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_StringReadCommand();
    [CompilerGeneratedAttribute]
public void set_StringReadCommand(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<List`1<string>> get_MultiStringReadCommand();
    [CompilerGeneratedAttribute]
public void set_MultiStringReadCommand(Func`1<List`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`1<Dictionary`2<string, string>> get_DictionaryStringReadCommand();
    [CompilerGeneratedAttribute]
public void set_DictionaryStringReadCommand(Func`1<Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Func`1<double> get_DoubleReadCommand();
    [CompilerGeneratedAttribute]
public void set_DoubleReadCommand(Func`1<double> value);
    [CompilerGeneratedAttribute]
public Func`1<RedisData> get_RedisDataReadCommand();
    [CompilerGeneratedAttribute]
public void set_RedisDataReadCommand(Func`1<RedisData> value);
    [CompilerGeneratedAttribute]
public Action get_OnSuccessVoidCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessVoidCallback(Action value);
    [CompilerGeneratedAttribute]
public Action`1<int> get_OnSuccessIntCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessIntCallback(Action`1<int> value);
    [CompilerGeneratedAttribute]
public Action`1<long> get_OnSuccessLongCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessLongCallback(Action`1<long> value);
    [CompilerGeneratedAttribute]
public Action`1<bool> get_OnSuccessBoolCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessBoolCallback(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public Action`1<Byte[]> get_OnSuccessBytesCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessBytesCallback(Action`1<Byte[]> value);
    [CompilerGeneratedAttribute]
public Action`1<Byte[][]> get_OnSuccessMultiBytesCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessMultiBytesCallback(Action`1<Byte[][]> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_OnSuccessStringCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessStringCallback(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<List`1<string>> get_OnSuccessMultiStringCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessMultiStringCallback(Action`1<List`1<string>> value);
    [CompilerGeneratedAttribute]
public Action`1<Dictionary`2<string, string>> get_OnSuccessDictionaryStringCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessDictionaryStringCallback(Action`1<Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Action`1<RedisData> get_OnSuccessRedisDataCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessRedisDataCallback(Action`1<RedisData> value);
    [CompilerGeneratedAttribute]
public Action`1<RedisText> get_OnSuccessRedisTextCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessRedisTextCallback(Action`1<RedisText> value);
    [CompilerGeneratedAttribute]
public Action`1<double> get_OnSuccessDoubleCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessDoubleCallback(Action`1<double> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_OnSuccessTypeCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessTypeCallback(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<List`1<string>> get_OnSuccessMultiTypeCallback();
    [CompilerGeneratedAttribute]
public void set_OnSuccessMultiTypeCallback(Action`1<List`1<string>> value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_OnErrorCallback();
    [CompilerGeneratedAttribute]
public void set_OnErrorCallback(Action`1<Exception> value);
    public virtual void Execute(IRedisClient client);
    public void ProcessResult();
    protected void ProcessResultThrowIfAsync();
    private void OnProcessResultThrowIfAsync();
}
public class ServiceStack.Redis.Pipeline.RedisPipelineCommand : object {
    private RedisNativeClient client;
    private int cmdCount;
    public RedisPipelineCommand(RedisNativeClient client);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Pipeline.RedisPipelineCommand/<ReadAllAsIntsAsync>d__0")]
internal ValueTask`1<List`1<long>> ReadAllAsIntsAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Pipeline.RedisPipelineCommand/<ReadAllAsIntsHaveSuccessAsync>d__1")]
internal ValueTask`1<bool> ReadAllAsIntsHaveSuccessAsync(CancellationToken token);
    internal ValueTask FlushAsync(CancellationToken token);
    public void WriteCommand(Byte[][] cmdWithBinaryArgs);
    public List`1<long> ReadAllAsInts();
    public bool ReadAllAsIntsHaveSuccess();
    public void Flush();
}
public class ServiceStack.Redis.PooledRedisClientManager : object {
    public static bool UseGetClientBlocking;
    private AsyncManualResetEvent readAsyncEvent;
    private AsyncManualResetEvent writeAsyncEvent;
    private static ILog Log;
    private static string PoolTimeoutError;
    protected int PoolSizeMultiplier;
    public int RecheckPoolAfterMs;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PoolTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SocketSendTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SocketReceiveTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IdleTimeOutSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssertAccessOnlyOnSameThread>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespacePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IRedisResolver <RedisResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IRedisClientsManager>> <OnFailover>k__BackingField;
    private RedisClient[] writeClients;
    protected int WritePoolIndex;
    private RedisClient[] readClients;
    protected int ReadPoolIndex;
    protected int RedisClientCounter;
    [CompilerGeneratedAttribute]
private RedisClientManagerConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRedisNativeClient> <ConnectionFilter>k__BackingField;
    private static ReservedClient reservedSlot;
    private int disposeAttempts;
    public Nullable`1<int> PoolTimeout { get; public set; }
    public Nullable`1<int> ConnectTimeout { get; public set; }
    public Nullable`1<int> SocketSendTimeout { get; public set; }
    public Nullable`1<int> SocketReceiveTimeout { get; public set; }
    public Nullable`1<int> IdleTimeOutSecs { get; public set; }
    public bool AssertAccessOnlyOnSameThread { get; public set; }
    public string NamespacePrefix { get; public set; }
    public IRedisResolver RedisResolver { get; public set; }
    public List`1<Action`1<IRedisClientsManager>> OnFailover { get; private set; }
    protected RedisClientManagerConfig Config { get; protected set; }
    public Nullable`1<long> Db { get; private set; }
    public Action`1<IRedisNativeClient> ConnectionFilter { get; public set; }
    public Dictionary`2<string, long> Stats { get; }
    public PooledRedisClientManager(int poolSize, int poolTimeOutSeconds, String[] readWriteHosts);
    public PooledRedisClientManager(long initialDb, String[] readWriteHosts);
    public PooledRedisClientManager(String[] readWriteHosts);
    public PooledRedisClientManager(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts);
    public PooledRedisClientManager(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts, RedisClientManagerConfig config);
    public PooledRedisClientManager(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts, long initialDb);
    public PooledRedisClientManager(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts, RedisClientManagerConfig config, Nullable`1<long> initialDb, Nullable`1<int> poolSizeMultiplier, Nullable`1<int> poolTimeOutSeconds);
    private static PooledRedisClientManager();
    private sealed virtual override ValueTask`1<ICacheClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetCacheClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<ICacheClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyCacheClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyClientAsync(CancellationToken token);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.PooledRedisClientManager/<WaitForWriter>d__8")]
private Task`1<bool> WaitForWriter(int msTimeout);
    [AsyncStateMachineAttribute("ServiceStack.Redis.PooledRedisClientManager/<GetClientAsync>d__9")]
private ValueTask`1<IRedisClientAsync> GetClientAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.PooledRedisClientManager/<WaitForReader>d__10")]
private Task`1<bool> WaitForReader(int msTimeout);
    [AsyncStateMachineAttribute("ServiceStack.Redis.PooledRedisClientManager/<GetReadOnlyClientAsync>d__11")]
private ValueTask`1<IRedisClientAsync> GetReadOnlyClientAsync();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PoolTimeout();
    [CompilerGeneratedAttribute]
public void set_PoolTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SocketSendTimeout();
    [CompilerGeneratedAttribute]
public void set_SocketSendTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SocketReceiveTimeout();
    [CompilerGeneratedAttribute]
public void set_SocketReceiveTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IdleTimeOutSecs();
    [CompilerGeneratedAttribute]
public void set_IdleTimeOutSecs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_AssertAccessOnlyOnSameThread();
    [CompilerGeneratedAttribute]
public void set_AssertAccessOnlyOnSameThread(bool value);
    [CompilerGeneratedAttribute]
public string get_NamespacePrefix();
    [CompilerGeneratedAttribute]
public void set_NamespacePrefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IRedisResolver get_RedisResolver();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RedisResolver(IRedisResolver value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IRedisClientsManager>> get_OnFailover();
    [CompilerGeneratedAttribute]
private void set_OnFailover(List`1<Action`1<IRedisClientsManager>> value);
    [CompilerGeneratedAttribute]
protected RedisClientManagerConfig get_Config();
    [CompilerGeneratedAttribute]
protected void set_Config(RedisClientManagerConfig value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Db();
    [CompilerGeneratedAttribute]
private void set_Db(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Action`1<IRedisNativeClient> get_ConnectionFilter();
    [CompilerGeneratedAttribute]
public void set_ConnectionFilter(Action`1<IRedisNativeClient> value);
    public sealed virtual void FailoverTo(String[] readWriteHosts);
    public sealed virtual void FailoverTo(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts);
    protected virtual void OnStart();
    public sealed virtual IRedisClient GetClient();
    private RedisClient GetClientBlocking();
    private int GetInActiveWriteClient(RedisClient& inactiveClient);
    public virtual IRedisClient GetReadOnlyClient();
    private RedisClient GetReadOnlyClientBlocking();
    private int GetInActiveReadClient(RedisClient& inactiveClient);
    private RedisClient InitNewClient(RedisClient client);
    private RedisClient InitClient(RedisClient client);
    private void PulseAllReadAsync();
    private void PulseAllRead();
    private void PulseAllWriteAsync();
    private void PulseAllWrite();
    public sealed virtual void DisposeClient(RedisNativeClient client);
    public void DisposeReadOnlyClient(RedisNativeClient client);
    public void DisposeWriteClient(RedisNativeClient client);
    public void Start();
    public Dictionary`2<string, string> GetStats();
    private void AssertValidReadWritePool();
    private void AssertValidReadOnlyPool();
    public Int32[] GetClientPoolActiveStates();
    public Int32[] GetReadOnlyClientPoolActiveStates();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected void Dispose(RedisClient redisClient);
    public sealed virtual ICacheClient GetCacheClient();
    public sealed virtual ICacheClient GetReadOnlyCacheClient();
    public DisposablePooledClient`1<T> GetDisposableClient();
    public sealed virtual Dictionary`2<string, long> get_Stats();
}
public class ServiceStack.Redis.RedisAllPurposePipeline : RedisCommandQueue {
    public RedisAllPurposePipeline(RedisClient redisClient);
    private IRedisPipelineAsync AsAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisAllPurposePipeline/<ReplayAsync>d__1")]
private protected virtual ValueTask`1<bool> ReplayAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisAllPurposePipeline/<ExecuteAsync>d__2")]
protected ValueTask ExecuteAsync();
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Pipeline.IRedisPipelineSharedAsync.ReplayAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisAllPurposePipeline/<ServiceStack-Redis-Pipeline-IRedisPipelineSharedAsync-FlushAsync>d__4")]
private sealed virtual override ValueTask ServiceStack.Redis.Pipeline.IRedisPipelineSharedAsync.FlushAsync(CancellationToken token);
    private protected virtual ValueTask DisposeAsync();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    internal static void AssertSync(ValueTask`1<T> command);
    internal static void AssertSync(ValueTask command);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisAllPurposePipeline/<ObserveAsync>d__9")]
private static Task ObserveAsync(Task task);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<int>> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<long>> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<bool>> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<double>> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<Byte[]>> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<Byte[][]>> command, Action`1<Byte[][]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<string>> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<List`1<string>>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<HashSet`1<string>>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<Dictionary`2<string, string>>> command, Action`1<Dictionary`2<string, string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<RedisData>> command, Action`1<RedisData> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync.QueueCommand(Func`2<IRedisClientAsync, ValueTask`1<RedisText>> command, Action`1<RedisText> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteMultiBytesQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<Byte[][]>> multiBytesReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteLongQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<long>> longReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteBytesQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<Byte[]>> bytesReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteVoidQueuedCommandAsync(Func`2<CancellationToken, ValueTask> voidReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteStringQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<string>> stringReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteDoubleQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<double>> doubleReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteIntQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<int>> intReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteMultiStringQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<List`1<string>>> multiStringReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteRedisDataQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<RedisData>> redisDataReadCommand);
    protected virtual void Init();
    public sealed virtual void Flush();
    protected void Execute();
    public virtual bool Replay();
    protected void ClosePipeline();
    public virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
public class ServiceStack.Redis.RedisClient : RedisNativeClient {
    internal static HashSet`1<Type> __uniqueTypes;
    public static Func`1<RedisClient> NewFactoryFn;
    public static Func`2<object, Dictionary`2<string, string>> ConvertToHashFn;
    private Dictionary`2<string, HashSet`1<string>> registeredTypeIdsWithinPipelineMap;
    private static ConcurrentDictionary`2<string, string> CachedLuaSha1Map;
    private static Dictionary`2<Type, bool> numericTypes;
    [CompilerGeneratedAttribute]
private IHasNamed`1<IRedisHash> <Hashes>k__BackingField;
    private static int FirstElement;
    private static int LastElement;
    [CompilerGeneratedAttribute]
private IHasNamed`1<IRedisList> <Lists>k__BackingField;
    [CompilerGeneratedAttribute]
private IHasNamed`1<IRedisSet> <Sets>k__BackingField;
    [CompilerGeneratedAttribute]
private IHasNamed`1<IRedisSortedSet> <SortedSets>k__BackingField;
    private IRedisNativeClientAsync NativeAsync { get; }
    private IHasNamed`1<IRedisListAsync> ServiceStack.Redis.IRedisClientAsync.Lists { get; }
    private IHasNamed`1<IRedisSetAsync> ServiceStack.Redis.IRedisClientAsync.Sets { get; }
    private IHasNamed`1<IRedisSortedSetAsync> ServiceStack.Redis.IRedisClientAsync.SortedSets { get; }
    private IHasNamed`1<IRedisHashAsync> ServiceStack.Redis.IRedisClientAsync.Hashes { get; }
    public string Item { get; public set; }
    public IHasNamed`1<IRedisHash> Hashes { get; public set; }
    public IHasNamed`1<IRedisList> Lists { get; public set; }
    public IHasNamed`1<IRedisSet> Sets { get; public set; }
    public IHasNamed`1<IRedisSortedSet> SortedSets { get; public set; }
    public RedisClient(string host);
    public RedisClient(RedisEndpoint config);
    public RedisClient(string host, int port);
    public RedisClient(string host, int port, string password, long db);
    public RedisClient(Uri uri);
    private static RedisClient();
    public IRedisClientAsync AsAsync();
    private sealed virtual override IRedisTypedClientAsync`1<T> ServiceStack.Redis.IRedisClientAsync.As();
    private IRedisNativeClientAsync get_NativeAsync();
    private sealed virtual override IHasNamed`1<IRedisListAsync> ServiceStack.Redis.IRedisClientAsync.get_Lists();
    private sealed virtual override IHasNamed`1<IRedisSetAsync> ServiceStack.Redis.IRedisClientAsync.get_Sets();
    private sealed virtual override IHasNamed`1<IRedisSortedSetAsync> ServiceStack.Redis.IRedisClientAsync.get_SortedSets();
    private sealed virtual override IHasNamed`1<IRedisHashAsync> ServiceStack.Redis.IRedisClientAsync.get_Hashes();
    internal ValueTask RegisterTypeIdAsync(T value, CancellationToken token);
    internal ValueTask RegisterTypeIdAsync(string typeIdsSetKey, string id, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<AddTypeIdsRegisteredDuringPipelineAsync>d__14")]
internal ValueTask AddTypeIdsRegisteredDuringPipelineAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<DateTime> ServiceStack.Redis.IRedisClientAsync.GetServerTimeAsync(CancellationToken token);
    private sealed virtual override IRedisPipelineAsync ServiceStack.Redis.IRedisClientAsync.CreatePipeline();
    private sealed virtual override ValueTask`1<IRedisTransactionAsync> ServiceStack.Redis.IRedisClientAsync.CreateTransactionAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.RemoveEntryAsync(String[] keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ExecAsync>d__19")]
private ValueTask ExecAsync(Func`2<IRedisClientAsync, ValueTask> action);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ExecAsync>d__20`1")]
private ValueTask`1<T> ExecAsync(Func`2<IRedisClientAsync, ValueTask`1<T>> action);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetValueAsync(string key, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetValueAsync(string key, CancellationToken token);
    private sealed virtual override Task`1<T> ServiceStack.Caching.ICacheClientAsync.GetAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-SearchKeysAsync>d__24")]
private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.SearchKeysAsync(string pattern, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-ScanAllKeysAsync>d__25")]
private sealed virtual override IAsyncEnumerable`1<string> ServiceStack.Redis.IRedisClientAsync.ScanAllKeysAsync(string pattern, int pageSize, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisKeyType> ServiceStack.Redis.IRedisClientAsync.GetEntryTypeAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.AddItemToSetAsync(string setId, string item, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.AddItemToListAsync(string listId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.AddItemToSortedSetAsync(string setId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.AddItemToSortedSetAsync(string setId, string value, double score, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.SetEntryInHashAsync(string hashId, string key, string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetAllAsync(IDictionary`2<string, string> map, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetAllAsync(IEnumerable`1<string> keys, IEnumerable`1<string> values, CancellationToken token);
    private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.SetAllAsync(IDictionary`2<string, T> values, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.RenameKeyAsync(string fromName, string toName, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.ContainsKeyAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetRandomKeyAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SelectAsync(long db, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.ExpireEntryInAsync(string key, TimeSpan expireIn, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.ExpireEntryAtAsync(string key, DateTime expireAt, CancellationToken token);
    private sealed virtual override Task`1<Nullable`1<TimeSpan>> ServiceStack.Caching.ICacheClientAsync.GetTimeToLiveAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.PingAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.EchoAsync(string text, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.ForegroundSaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.BackgroundSaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.ShutdownAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.ShutdownNoSaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.BackgroundRewriteAppendOnlyFileAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.FlushDbAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetValuesAsync(List`1<string> keys, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<T>> ServiceStack.Redis.IRedisClientAsync.GetValuesAsync(List`1<string> keys, CancellationToken token);
    private sealed virtual override ValueTask`1<Dictionary`2<string, string>> ServiceStack.Redis.IRedisClientAsync.GetValuesMapAsync(List`1<string> keys, CancellationToken token);
    private sealed virtual override ValueTask`1<Dictionary`2<string, T>> ServiceStack.Redis.IRedisClientAsync.GetValuesMapAsync(List`1<string> keys, CancellationToken token);
    private sealed virtual override ValueTask`1<IAsyncDisposable> ServiceStack.Redis.IRedisClientAsync.AcquireLockAsync(string key, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetValueAsync(string key, string value, TimeSpan expireIn, CancellationToken token);
    private static void PickTime(Nullable`1<TimeSpan> value, Int64& expirySeconds, Int64& expiryMilliseconds);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.SetValueIfNotExistsAsync(string key, string value, Nullable`1<TimeSpan> expireIn, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.SetValueIfExistsAsync(string key, string value, Nullable`1<TimeSpan> expireIn, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.WatchAsync(String[] keys, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.UnWatchAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.AppendToAsync(string key, string value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-SliceAsync>d__62")]
private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.SliceAsync(string key, int fromIndex, int toIndex, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.InsertAtAsync(string key, int offset, string value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-StoreObjectAsync>d__64")]
private sealed virtual override ValueTask`1<object> ServiceStack.Redis.IRedisClientAsync.StoreObjectAsync(object entity, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.PopItemFromSetAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.PopItemsFromSetAsync(string setId, int count, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SlowlogResetAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<SlowlogItem[]> ServiceStack.Redis.IRedisClientAsync.GetSlowlogAsync(Nullable`1<int> numberOfRecords, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, CancellationToken token);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetSortedSetCountAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetSortedSetCountAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetSortedSetCountAsync(string setId, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetSortedSetCountAsync(string setId, long fromScore, long toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisClientAsync.GetItemScoreInSortedSetAsync(string setId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.CustomAsync(Object[] cmdWithArgs, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetValuesAsync(IDictionary`2<string, string> map, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.FlushAllAsync(CancellationToken token);
    private sealed virtual override Task`1<IDictionary`2<string, T>> ServiceStack.Caching.ICacheClientAsync.GetAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.RemoveAsync(string key, CancellationToken token);
    private sealed virtual override IAsyncEnumerable`1<string> ServiceStack.Caching.ICacheClientAsync.GetKeysByPatternAsync(string pattern, CancellationToken token);
    private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.RemoveExpiredEntriesAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Caching-IRemoveByPatternAsync-RemoveByPatternAsync>d__85")]
private sealed virtual override Task ServiceStack.Caching.IRemoveByPatternAsync.RemoveByPatternAsync(string pattern, CancellationToken token);
    private sealed virtual override Task ServiceStack.Caching.IRemoveByPatternAsync.RemoveByRegexAsync(string regex, CancellationToken token);
    private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.RemoveAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    private sealed virtual override Task`1<long> ServiceStack.Caching.ICacheClientAsync.IncrementAsync(string key, UInt32 amount, CancellationToken token);
    private sealed virtual override Task`1<long> ServiceStack.Caching.ICacheClientAsync.DecrementAsync(string key, UInt32 amount, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.DbSizeAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<Dictionary`2<string, string>> ServiceStack.Redis.IRedisClientAsync.InfoAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<DateTime> ServiceStack.Redis.IRedisClientAsync.LastSaveAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Data-IEntityStoreAsync-GetByIdAsync>d__99`1")]
private sealed virtual override Task`1<T> ServiceStack.Data.IEntityStoreAsync.GetByIdAsync(object id, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Data-IEntityStoreAsync-GetByIdsAsync>d__100`1")]
private sealed virtual override Task`1<IList`1<T>> ServiceStack.Data.IEntityStoreAsync.GetByIdsAsync(ICollection ids, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Data-IEntityStoreAsync-StoreAsync>d__101`1")]
private sealed virtual override Task`1<T> ServiceStack.Data.IEntityStoreAsync.StoreAsync(T entity, CancellationToken token);
    private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync.StoreAllAsync(IEnumerable`1<TEntity> entities, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<StoreAllAsyncImpl>d__103`1")]
internal ValueTask StoreAllAsyncImpl(IEnumerable`1<TEntity> entities, CancellationToken token);
    internal ValueTask RegisterTypeIdsAsync(IEnumerable`1<T> values, CancellationToken token);
    internal ValueTask RemoveTypeIdsByValueAsync(T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<RemoveTypeIdsByValuesAsync>d__106`1")]
internal ValueTask RemoveTypeIdsByValuesAsync(T[] values, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<RemoveTypeIdsByIdAsync>d__107`1")]
internal ValueTask RemoveTypeIdsByIdAsync(string id, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<RemoveTypeIdsByIdsAsync>d__108`1")]
internal ValueTask RemoveTypeIdsByIdsAsync(String[] ids, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Data-IEntityStoreAsync-DeleteAsync>d__109`1")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync.DeleteAsync(T entity, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Data-IEntityStoreAsync-DeleteByIdAsync>d__110`1")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync.DeleteByIdAsync(object id, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Data-IEntityStoreAsync-DeleteByIdsAsync>d__111`1")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync.DeleteByIdsAsync(ICollection ids, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Data-IEntityStoreAsync-DeleteAllAsync>d__112`1")]
private sealed virtual override Task ServiceStack.Data.IEntityStoreAsync.DeleteAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<DeleteAllAsync>d__113`1")]
private Task DeleteAllAsync(ulong cursor, int batchSize, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.SearchSortedSetAsync(string setId, string start, string end, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.SearchSortedSetCountAsync(string setId, string start, string end, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.RemoveRangeFromSortedSetBySearchAsync(string setId, string start, string end, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.TypeAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetStringCountAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetSetCountAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetListCountAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetHashCountAsync(string hashId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-ExecCachedLuaAsync>d__122`1")]
private sealed virtual override ValueTask`1<T> ServiceStack.Redis.IRedisClientAsync.ExecCachedLuaAsync(string scriptBody, Func`2<string, ValueTask`1<T>> scriptSha1, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsync(string luaBody, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsStringAsync(string luaBody, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsStringAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.LoadLuaScriptAsync(string body, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.WriteAllAsync(IEnumerable`1<TEntity> entities, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetAllItemsFromSetAsync>d__129")]
private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisClientAsync.GetAllItemsFromSetAsync(string setId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-AddRangeToSetAsync>d__130")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.AddRangeToSetAsync(string setId, List`1<string> items, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<AddRangeToSetNeedsSendAsync>d__131")]
private ValueTask`1<bool> AddRangeToSetNeedsSendAsync(string setId, List`1<string> items);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.RemoveItemFromSetAsync(string setId, string item, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.IncrementValueByAsync(string key, int count, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.IncrementValueByAsync(string key, long count, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisClientAsync.IncrementValueByAsync(string key, double count, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.IncrementValueAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.DecrementValueAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.DecrementValueByAsync(string key, int count, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetServerRoleAsync>d__139")]
private sealed virtual override ValueTask`1<RedisServerRole> ServiceStack.Redis.IRedisClientAsync.GetServerRoleAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.GetServerRoleInfoAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetConfigAsync>d__141")]
private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetConfigAsync(string configItem, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetConfigAsync(string configItem, string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SaveConfigAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.ResetInfoStatsAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetClientAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetClientAsync(string name, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.KillClientAsync(string address, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.KillClientsAsync(string fromAddress, string withId, Nullable`1<RedisClientType> ofType, Nullable`1<bool> skipMe, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetClientsInfoAsync>d__149")]
private sealed virtual override ValueTask`1<List`1<Dictionary`2<string, string>>> ServiceStack.Redis.IRedisClientAsync.GetClientsInfoAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.PauseAllClientsAsync(TimeSpan duration, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetAllKeysAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetAndSetValueAsync(string key, string value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetFromHashAsync>d__153`1")]
private sealed virtual override ValueTask`1<T> ServiceStack.Redis.IRedisClientAsync.GetFromHashAsync(object id, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-StoreAsHashAsync>d__154`1")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.StoreAsHashAsync(T entity, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetSortedEntryValuesAsync(string setId, int startingFrom, int endingAt, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-ScanAllSetItemsAsync>d__156")]
private sealed virtual override IAsyncEnumerable`1<string> ServiceStack.Redis.IRedisClientAsync.ScanAllSetItemsAsync(string setId, string pattern, int pageSize, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-ScanAllSortedSetItemsAsync>d__157")]
private sealed virtual override IAsyncEnumerable`1<KeyValuePair`2<string, double>> ServiceStack.Redis.IRedisClientAsync.ScanAllSortedSetItemsAsync(string setId, string pattern, int pageSize, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-ScanAllHashEntriesAsync>d__158")]
private sealed virtual override IAsyncEnumerable`1<KeyValuePair`2<string, string>> ServiceStack.Redis.IRedisClientAsync.ScanAllHashEntriesAsync(string hashId, string pattern, int pageSize, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.AddToHyperLogAsync(string key, String[] elements, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.CountHyperLogAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.MergeHyperLogsAsync(string toKey, String[] fromKeys, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.AddGeoMemberAsync(string key, double longitude, double latitude, string member, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.AddGeoMembersAsync(string key, RedisGeo[] geoPoints, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisClientAsync.CalculateDistanceBetweenGeoMembersAsync(string key, string fromMember, string toMember, string unit, CancellationToken token);
    private sealed virtual override ValueTask`1<String[]> ServiceStack.Redis.IRedisClientAsync.GetGeohashesAsync(string key, String[] members, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<RedisGeo>> ServiceStack.Redis.IRedisClientAsync.GetGeoCoordinatesAsync(string key, String[] members, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-FindGeoMembersInRadiusAsync>d__167")]
private sealed virtual override ValueTask`1<String[]> ServiceStack.Redis.IRedisClientAsync.FindGeoMembersInRadiusAsync(string key, double longitude, double latitude, double radius, string unit, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<RedisGeoResult>> ServiceStack.Redis.IRedisClientAsync.FindGeoResultsInRadiusAsync(string key, double longitude, double latitude, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-FindGeoMembersInRadiusAsync>d__169")]
private sealed virtual override ValueTask`1<String[]> ServiceStack.Redis.IRedisClientAsync.FindGeoMembersInRadiusAsync(string key, string member, double radius, string unit, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<RedisGeoResult>> ServiceStack.Redis.IRedisClientAsync.FindGeoResultsInRadiusAsync(string key, string member, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest, CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisSubscriptionAsync> ServiceStack.Redis.IRedisClientAsync.CreateSubscriptionAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.PublishMessageAsync(string toChannel, string message, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.MoveBetweenSetsAsync(string fromSetId, string toSetId, string item, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.SetContainsItemAsync(string setId, string item, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetIntersectFromSetsAsync>d__175")]
private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisClientAsync.GetIntersectFromSetsAsync(String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.StoreIntersectFromSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetUnionFromSetsAsync>d__177")]
private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisClientAsync.GetUnionFromSetsAsync(String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.StoreUnionFromSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-GetDifferencesFromSetAsync>d__179")]
private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisClientAsync.GetDifferencesFromSetAsync(string fromSetId, String[] withSetIds, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.StoreDifferencesFromSetAsync(string intoSetId, string fromSetId, String[] withSetIds, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetRandomItemFromSetAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetAllItemsFromListAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromListAsync(string listId, int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedListAsync(string listId, int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetSortedItemsFromListAsync(string listId, SortOptions sortOptions, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-AddRangeToListAsync>d__186")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.AddRangeToListAsync(string listId, List`1<string> values, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.PrependItemToListAsync(string listId, string value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-PrependRangeToListAsync>d__188")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.PrependRangeToListAsync(string listId, List`1<string> values, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.RemoveAllFromListAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.RemoveStartFromListAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.BlockingRemoveStartFromListAsync(string listId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-BlockingRemoveStartFromListsAsync>d__192")]
private sealed virtual override ValueTask`1<ItemRef> ServiceStack.Redis.IRedisClientAsync.BlockingRemoveStartFromListsAsync(String[] listIds, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.RemoveEndFromListAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.TrimListAsync(string listId, int keepStartingFrom, int keepEndingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.RemoveItemFromListAsync(string listId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.RemoveItemFromListAsync(string listId, string value, int noOfMatches, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetItemFromListAsync(string listId, int listIndex, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetItemInListAsync(string listId, int listIndex, string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.EnqueueItemOnListAsync(string listId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.DequeueItemFromListAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.BlockingDequeueItemFromListAsync(string listId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-BlockingDequeueItemFromListsAsync>d__202")]
private sealed virtual override ValueTask`1<ItemRef> ServiceStack.Redis.IRedisClientAsync.BlockingDequeueItemFromListsAsync(String[] listIds, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.PushItemToListAsync(string listId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.PopItemFromListAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.BlockingPopItemFromListAsync(string listId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-BlockingPopItemFromListsAsync>d__206")]
private sealed virtual override ValueTask`1<ItemRef> ServiceStack.Redis.IRedisClientAsync.BlockingPopItemFromListsAsync(String[] listIds, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.PopAndPushItemBetweenListsAsync(string fromListId, string toListId, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.BlockingPopAndPushItemBetweenListsAsync(string fromListId, string toListId, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-AddRangeToSortedSetAsync>d__209")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.AddRangeToSortedSetAsync(string setId, List`1<string> values, double score, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-AddRangeToSortedSetAsync>d__210")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.AddRangeToSortedSetAsync(string setId, List`1<string> values, long score, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.RemoveItemFromSortedSetAsync(string setId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.RemoveItemsFromSortedSetAsync(string setId, List`1<string> values, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-PopItemWithLowestScoreFromSortedSetAsync>d__213")]
private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.PopItemWithLowestScoreFromSortedSetAsync(string setId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-PopItemWithHighestScoreFromSortedSetAsync>d__214")]
private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.PopItemWithHighestScoreFromSortedSetAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.SortedSetContainsItemAsync(string setId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisClientAsync.IncrementItemInSortedSetAsync(string setId, string value, double incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisClientAsync.IncrementItemInSortedSetAsync(string setId, string value, long incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetItemIndexInSortedSetAsync(string setId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.GetItemIndexInSortedSetDescAsync(string setId, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetAllItemsFromSortedSetAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetAllItemsFromSortedSetDescAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetAsync(string setId, int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetDescAsync(string setId, int fromRank, int toRank, CancellationToken token);
    private static ValueTask`1<IDictionary`2<string, double>> CreateSortedScoreMapAsync(ValueTask`1<Byte[][]> pending);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetAllWithScoresFromSortedSetAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetAsync(string setId, int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetDescAsync(string setId, int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByLowestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetRangeFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<IDictionary`2<string, double>> ServiceStack.Redis.IRedisClientAsync.GetRangeWithScoresFromSortedSetByHighestScoreAsync(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.RemoveRangeFromSortedSetAsync(string setId, int minRank, int maxRank, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.RemoveRangeFromSortedSetByScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.RemoveRangeFromSortedSetByScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.StoreIntersectFromSortedSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.StoreIntersectFromSortedSetsAsync(string intoSetId, String[] setIds, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.StoreUnionFromSortedSetsAsync(string intoSetId, String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.StoreUnionFromSortedSetsAsync(string intoSetId, String[] setIds, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.HashContainsEntryAsync(string hashId, string key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.SetEntryInHashIfNotExistsAsync(string hashId, string key, string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.SetRangeInHashAsync(string hashId, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.IncrementValueInHashAsync(string hashId, string key, int incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisClientAsync.IncrementValueInHashAsync(string hashId, string key, double incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.GetValueFromHashAsync(string hashId, string key, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetValuesFromHashAsync(string hashId, String[] keys, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.RemoveEntryFromHashAsync(string hashId, string key, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetHashKeysAsync(string hashId, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetHashValuesAsync(string hashId, CancellationToken token);
    private sealed virtual override ValueTask`1<Dictionary`2<string, string>> ServiceStack.Redis.IRedisClientAsync.GetAllEntriesFromHashAsync(string hashId, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsync(string body, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsync(string sha1, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsStringAsync(string body, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsStringAsync(string sha1, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsIntAsync(string body, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsIntAsync(string body, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsIntAsync(string sha1, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsIntAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsListAsync(string body, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsListAsync(string body, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsListAsync(string sha1, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsListAsync(string sha1, String[] keys, String[] args, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.CalculateSha1Async(string luaBody, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-HasLuaScriptAsync>d__283")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.HasLuaScriptAsync(string sha1Ref, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<ServiceStack-Redis-IRedisClientAsync-WhichLuaScriptsExistsAsync>d__284")]
private sealed virtual override ValueTask`1<Dictionary`2<string, bool>> ServiceStack.Redis.IRedisClientAsync.WhichLuaScriptsExistsAsync(String[] sha1Refs, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.RemoveAllLuaScriptsAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.KillRunningLuaScriptAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.CustomAsync(Object[] cmdWithArgs);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.RemoveEntryAsync(String[] args);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisClientAsync.AddToHyperLogAsync(string key, String[] elements);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.MergeHyperLogsAsync(string toKey, String[] fromKeys);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.AddGeoMembersAsync(string key, RedisGeo[] geoPoints);
    private sealed virtual override ValueTask`1<String[]> ServiceStack.Redis.IRedisClientAsync.GetGeohashesAsync(string key, String[] members);
    private sealed virtual override ValueTask`1<List`1<RedisGeo>> ServiceStack.Redis.IRedisClientAsync.GetGeoCoordinatesAsync(string key, String[] members);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.WatchAsync(String[] keys);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisClientAsync.GetIntersectFromSetsAsync(String[] setIds);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.StoreIntersectFromSetsAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisClientAsync.GetUnionFromSetsAsync(String[] setIds);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.StoreUnionFromSetsAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisClientAsync.GetDifferencesFromSetAsync(string fromSetId, String[] withSetIds);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisClientAsync.StoreDifferencesFromSetAsync(string intoSetId, string fromSetId, String[] withSetIds);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.StoreIntersectFromSortedSetsAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.StoreUnionFromSortedSetsAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.GetValuesFromHashAsync(string hashId, String[] keys);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsync(string body, String[] args);
    private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsync(string sha1, String[] args);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsStringAsync(string luaBody, String[] args);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsStringAsync(string sha1, String[] args);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsIntAsync(string luaBody, String[] args);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsIntAsync(string sha1, String[] args);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.ExecLuaAsListAsync(string luaBody, String[] args);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisClientAsync.ExecLuaShaAsListAsync(string sha1, String[] args);
    private sealed virtual override ValueTask`1<Dictionary`2<string, bool>> ServiceStack.Redis.IRedisClientAsync.WhichLuaScriptsExistsAsync(String[] sha1Refs);
    public static RedisClient New();
    public void Init();
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public virtual void OnConnected();
    public sealed virtual RedisText Custom(Object[] cmdWithArgs);
    public DateTime ConvertToServerDate(DateTime expiresAt);
    public string GetTypeSequenceKey();
    public string GetTypeIdsSetKey();
    public string GetTypeIdsSetKey(Type type);
    public sealed virtual void RewriteAppendOnlyFileAsync();
    public sealed virtual List`1<string> GetAllKeys();
    public sealed virtual void SetValue(string key, string value);
    public bool SetValue(Byte[] key, Byte[] value, TimeSpan expireIn);
    public sealed virtual void SetValue(string key, string value, TimeSpan expireIn);
    public sealed virtual bool SetValueIfExists(string key, string value);
    public sealed virtual bool SetValueIfNotExists(string key, string value);
    public sealed virtual bool SetValueIfExists(string key, string value, TimeSpan expireIn);
    public sealed virtual bool SetValueIfNotExists(string key, string value, TimeSpan expireIn);
    public sealed virtual void SetValues(Dictionary`2<string, string> map);
    public sealed virtual void SetAll(IEnumerable`1<string> keys, IEnumerable`1<string> values);
    private bool GetSetAllBytes(IEnumerable`1<string> keys, IEnumerable`1<string> values, Byte[][]& keyBytes, Byte[][]& valBytes);
    public sealed virtual void SetAll(Dictionary`2<string, string> map);
    private static bool GetSetAllBytes(IDictionary`2<string, string> map, Byte[][]& keyBytes, Byte[][]& valBytes);
    public sealed virtual string GetValue(string key);
    public sealed virtual string GetAndSetValue(string key, string value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public bool Remove(Byte[] key);
    public sealed virtual bool RemoveEntry(String[] keys);
    public sealed virtual long IncrementValue(string key);
    public sealed virtual long IncrementValueBy(string key, int count);
    public sealed virtual long IncrementValueBy(string key, long count);
    public sealed virtual double IncrementValueBy(string key, double count);
    public sealed virtual long DecrementValue(string key);
    public sealed virtual long DecrementValueBy(string key, int count);
    public sealed virtual long AppendTo(string key, string value);
    public sealed virtual string Slice(string key, int fromIndex, int toIndex);
    public sealed virtual long InsertAt(string key, int offset, string value);
    public sealed virtual void RenameKey(string fromName, string toName);
    public sealed virtual long GetStringCount(string key);
    public sealed virtual string GetRandomKey();
    public sealed virtual bool ExpireEntryIn(string key, TimeSpan expireIn);
    private bool UseMillisecondExpiration(TimeSpan value);
    public bool ExpireEntryIn(Byte[] key, TimeSpan expireIn);
    public sealed virtual bool ExpireEntryAt(string key, DateTime expireAt);
    public sealed virtual Nullable`1<TimeSpan> GetTimeToLive(string key);
    private static Nullable`1<TimeSpan> ParseTimeToLiveResult(long ttlSecs);
    public sealed virtual void RemoveExpiredEntries();
    public sealed virtual IRedisTypedClient`1<T> As();
    public sealed virtual IDisposable AcquireLock(string key);
    public sealed virtual IDisposable AcquireLock(string key, TimeSpan timeOut);
    public sealed virtual IRedisTransaction CreateTransaction();
    public void AssertNotInTransaction();
    public sealed virtual IRedisPipeline CreatePipeline();
    public sealed virtual List`1<string> SearchKeys(string pattern);
    public sealed virtual List`1<string> GetValues(List`1<string> keys);
    private static List`1<string> ParseGetValuesResult(Byte[][] resultBytesArray);
    public sealed virtual List`1<T> GetValues(List`1<string> keys);
    private static List`1<T> ParseGetValuesResult(Byte[][] resultBytesArray);
    public sealed virtual Dictionary`2<string, string> GetValuesMap(List`1<string> keys);
    private static Dictionary`2<string, string> ParseGetValuesMapResult(String[] keysArray, Byte[][] resultBytesArray);
    public sealed virtual Dictionary`2<string, T> GetValuesMap(List`1<string> keys);
    private static Dictionary`2<string, T> ParseGetValuesMapResult(String[] keysArray, Byte[][] resultBytesArray);
    public virtual IRedisSubscription CreateSubscription();
    public sealed virtual long PublishMessage(string toChannel, string message);
    internal HashSet`1<string> GetRegisteredTypeIdsWithinPipeline(string typeIdsSet);
    internal void RegisterTypeId(T value);
    internal void RegisterTypeId(string typeIdsSetKey, string id);
    internal void RegisterTypeIds(IEnumerable`1<T> values);
    internal void RemoveTypeIdsById(string id);
    internal void RemoveTypeIdsByIds(IEnumerable`1<string> ids);
    internal void RemoveTypeIdsByValue(T value);
    internal void RemoveTypeIdsByValues(IEnumerable`1<T> values);
    internal void AddTypeIdsRegisteredDuringPipeline();
    internal void ClearTypeIdsRegisteredDuringPipeline();
    public sealed virtual T GetById(object id);
    public sealed virtual IList`1<T> GetByIds(ICollection ids);
    public IList`1<T> GetAll();
    public sealed virtual T Store(T entity);
    public sealed virtual object StoreObject(object entity);
    public sealed virtual void StoreAll(IEnumerable`1<TEntity> entities);
    public sealed virtual T GetFromHash(object id);
    public sealed virtual void StoreAsHash(T entity);
    internal void _StoreAll(IEnumerable`1<TEntity> entities);
    private bool PrepareStoreAll(IEnumerable`1<TEntity> entities, Byte[][]& keys, Byte[][]& values, List`1& entitiesList);
    public sealed virtual void WriteAll(IEnumerable`1<TEntity> entities);
    private bool PrepareWriteAll(IEnumerable`1<TEntity> entities, Byte[][]& keys, Byte[][]& values);
    public static Byte[] SerializeToUtf8Bytes(T value);
    public sealed virtual void Delete(T entity);
    public sealed virtual void DeleteById(object id);
    public sealed virtual void DeleteByIds(ICollection ids);
    public sealed virtual void DeleteAll();
    private void DeleteAll(ulong cursor, int batchSize);
    public RedisClient CloneClient();
    public sealed virtual string UrnKey(T value);
    public sealed virtual string UrnKey(object id);
    public sealed virtual string UrnKey(Type type, object id);
    public sealed virtual T ExecCachedLua(string scriptBody, Func`2<string, T> scriptSha1);
    public sealed virtual RedisText ExecLua(string body, String[] args);
    public sealed virtual RedisText ExecLua(string luaBody, String[] keys, String[] args);
    public sealed virtual RedisText ExecLuaSha(string sha1, String[] args);
    public sealed virtual RedisText ExecLuaSha(string sha1, String[] keys, String[] args);
    public sealed virtual long ExecLuaAsInt(string body, String[] args);
    public sealed virtual long ExecLuaAsInt(string luaBody, String[] keys, String[] args);
    public sealed virtual long ExecLuaShaAsInt(string sha1, String[] args);
    public sealed virtual long ExecLuaShaAsInt(string sha1, String[] keys, String[] args);
    public sealed virtual string ExecLuaAsString(string body, String[] args);
    public sealed virtual string ExecLuaAsString(string sha1, String[] keys, String[] args);
    public sealed virtual string ExecLuaShaAsString(string sha1, String[] args);
    public sealed virtual string ExecLuaShaAsString(string sha1, String[] keys, String[] args);
    public sealed virtual List`1<string> ExecLuaAsList(string body, String[] args);
    public sealed virtual List`1<string> ExecLuaAsList(string luaBody, String[] keys, String[] args);
    public sealed virtual List`1<string> ExecLuaShaAsList(string sha1, String[] args);
    public sealed virtual List`1<string> ExecLuaShaAsList(string sha1, String[] keys, String[] args);
    public sealed virtual bool HasLuaScript(string sha1Ref);
    public sealed virtual Dictionary`2<string, bool> WhichLuaScriptsExists(String[] sha1Refs);
    private static Dictionary`2<string, bool> WhichLuaScriptsExistsParseResult(String[] sha1Refs, Byte[][] intFlags);
    public sealed virtual void RemoveAllLuaScripts();
    public sealed virtual void KillRunningLuaScript();
    public sealed virtual string LoadLuaScript(string body);
    public sealed virtual void RemoveByPattern(string pattern);
    public sealed virtual void RemoveByRegex(string pattern);
    private static string RegexToGlob(string regex);
    [IteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ScanAllKeys>d__449")]
public sealed virtual IEnumerable`1<string> ScanAllKeys(string pattern, int pageSize);
    [IteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ScanAllSetItems>d__450")]
public sealed virtual IEnumerable`1<string> ScanAllSetItems(string setId, string pattern, int pageSize);
    [IteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ScanAllSortedSetItems>d__451")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, double>> ScanAllSortedSetItems(string setId, string pattern, int pageSize);
    [IteratorStateMachineAttribute("ServiceStack.Redis.RedisClient/<ScanAllHashEntries>d__452")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> ScanAllHashEntries(string hashId, string pattern, int pageSize);
    public sealed virtual bool AddToHyperLog(string key, String[] elements);
    public sealed virtual long CountHyperLog(string key);
    public sealed virtual void MergeHyperLogs(string toKey, String[] fromKeys);
    public sealed virtual RedisServerRole GetServerRole();
    private static RedisServerRole ToServerRole(string roleName);
    internal RedisClient LimitAccessToThread(int originalThreadId, string originalStackTrace);
    public T Exec(Func`2<RedisClient, T> action);
    public void Exec(Action`1<RedisClient> action);
    public sealed virtual void RemoveAll(IEnumerable`1<string> keys);
    public sealed virtual T Get(string key);
    private static Byte[] ToBytes(T value);
    public sealed virtual long Increment(string key, UInt32 amount);
    public sealed virtual long Decrement(string key, UInt32 amount);
    public sealed virtual bool Add(string key, T value);
    public sealed virtual bool Set(string key, T value);
    public sealed virtual bool Replace(string key, T value);
    public sealed virtual bool Add(string key, T value, DateTime expiresAt);
    public sealed virtual bool Add(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Set(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Set(string key, T value, DateTime expiresAt);
    public sealed virtual bool Replace(string key, T value, DateTime expiresAt);
    public sealed virtual bool Replace(string key, T value, TimeSpan expiresIn);
    public sealed virtual IDictionary`2<string, T> GetAll(IEnumerable`1<string> keys);
    private static IDictionary`2<string, T> ProcessGetAllResult(String[] keysArray, Byte[][] keyValues);
    public sealed virtual void SetAll(IDictionary`2<string, T> values);
    private static void GetSetAllBytesTyped(IDictionary`2<string, T> values, String[]& keys, Byte[][]& valBytes);
    public sealed virtual void SetConfig(string configItem, string value);
    public sealed virtual RedisText GetServerRoleInfo();
    public sealed virtual string GetConfig(string configItem);
    private static string GetConfigParse(Byte[][] byteArray);
    public sealed virtual void SaveConfig();
    public sealed virtual void ResetInfoStats();
    public sealed virtual string GetClient();
    public sealed virtual void SetClient(string name);
    public sealed virtual void KillClient(string address);
    public sealed virtual long KillClients(string fromAddress, string withId, Nullable`1<RedisClientType> ofType, Nullable`1<bool> skipMe);
    public sealed virtual List`1<Dictionary`2<string, string>> GetClientsInfo();
    private static List`1<Dictionary`2<string, string>> GetClientsInfoParse(Byte[] rawResult);
    public sealed virtual void PauseAllClients(TimeSpan duration);
    public sealed virtual DateTime GetServerTime();
    private static DateTime ParseTimeResult(Byte[][] parts);
    [CompilerGeneratedAttribute]
public sealed virtual IHasNamed`1<IRedisHash> get_Hashes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Hashes(IHasNamed`1<IRedisHash> value);
    public sealed virtual bool SetEntryInHash(string hashId, string key, string value);
    public sealed virtual bool SetEntryInHashIfNotExists(string hashId, string key, string value);
    public sealed virtual void SetRangeInHash(string hashId, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    private bool SetRangeInHashPrepare(IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs, Byte[][]& keys, Byte[][]& values);
    public sealed virtual long IncrementValueInHash(string hashId, string key, int incrementBy);
    public long IncrementValueInHash(string hashId, string key, long incrementBy);
    public sealed virtual double IncrementValueInHash(string hashId, string key, double incrementBy);
    public sealed virtual string GetValueFromHash(string hashId, string key);
    public sealed virtual bool HashContainsEntry(string hashId, string key);
    public sealed virtual bool RemoveEntryFromHash(string hashId, string key);
    public sealed virtual long GetHashCount(string hashId);
    public sealed virtual List`1<string> GetHashKeys(string hashId);
    public sealed virtual List`1<string> GetHashValues(string hashId);
    public sealed virtual Dictionary`2<string, string> GetAllEntriesFromHash(string hashId);
    public sealed virtual List`1<string> GetValuesFromHash(string hashId, String[] keys);
    [CompilerGeneratedAttribute]
public sealed virtual IHasNamed`1<IRedisList> get_Lists();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Lists(IHasNamed`1<IRedisList> value);
    public sealed virtual List`1<string> GetAllItemsFromList(string listId);
    public sealed virtual List`1<string> GetRangeFromList(string listId, int startingFrom, int endingAt);
    public sealed virtual List`1<string> GetRangeFromSortedList(string listId, int startingFrom, int endingAt);
    public sealed virtual List`1<string> GetSortedItemsFromList(string listId, SortOptions sortOptions);
    public sealed virtual void AddItemToList(string listId, string value);
    public sealed virtual void AddRangeToList(string listId, List`1<string> values);
    private RedisPipelineCommand AddRangeToListPrepareNonFlushed(string listId, List`1<string> values);
    public sealed virtual void PrependItemToList(string listId, string value);
    public sealed virtual void PrependRangeToList(string listId, List`1<string> values);
    private RedisPipelineCommand PrependRangeToListPrepareNonFlushed(string listId, List`1<string> values);
    public sealed virtual void RemoveAllFromList(string listId);
    public sealed virtual string RemoveStartFromList(string listId);
    public sealed virtual string BlockingRemoveStartFromList(string listId, Nullable`1<TimeSpan> timeOut);
    public sealed virtual ItemRef BlockingRemoveStartFromLists(String[] listIds, Nullable`1<TimeSpan> timeOut);
    public sealed virtual string RemoveEndFromList(string listId);
    public sealed virtual void TrimList(string listId, int keepStartingFrom, int keepEndingAt);
    public sealed virtual long RemoveItemFromList(string listId, string value);
    public sealed virtual long RemoveItemFromList(string listId, string value, int noOfMatches);
    public sealed virtual long GetListCount(string listId);
    public sealed virtual string GetItemFromList(string listId, int listIndex);
    public sealed virtual void SetItemInList(string listId, int listIndex, string value);
    public sealed virtual void EnqueueItemOnList(string listId, string value);
    public sealed virtual string DequeueItemFromList(string listId);
    public sealed virtual string BlockingDequeueItemFromList(string listId, Nullable`1<TimeSpan> timeOut);
    public sealed virtual ItemRef BlockingDequeueItemFromLists(String[] listIds, Nullable`1<TimeSpan> timeOut);
    public sealed virtual void PushItemToList(string listId, string value);
    public sealed virtual string PopItemFromList(string listId);
    public sealed virtual string BlockingPopItemFromList(string listId, Nullable`1<TimeSpan> timeOut);
    public sealed virtual ItemRef BlockingPopItemFromLists(String[] listIds, Nullable`1<TimeSpan> timeOut);
    public sealed virtual string PopAndPushItemBetweenLists(string fromListId, string toListId);
    public sealed virtual string BlockingPopAndPushItemBetweenLists(string fromListId, string toListId, Nullable`1<TimeSpan> timeOut);
    [CompilerGeneratedAttribute]
public sealed virtual IHasNamed`1<IRedisSet> get_Sets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Sets(IHasNamed`1<IRedisSet> value);
    private static HashSet`1<string> CreateHashSet(Byte[][] multiDataList);
    public sealed virtual List`1<string> GetSortedEntryValues(string setId, int startingFrom, int endingAt);
    public sealed virtual long AddGeoMember(string key, double longitude, double latitude, string member);
    public sealed virtual long AddGeoMembers(string key, RedisGeo[] geoPoints);
    public sealed virtual double CalculateDistanceBetweenGeoMembers(string key, string fromMember, string toMember, string unit);
    public sealed virtual String[] GetGeohashes(string key, String[] members);
    public sealed virtual List`1<RedisGeo> GetGeoCoordinates(string key, String[] members);
    public sealed virtual String[] FindGeoMembersInRadius(string key, double longitude, double latitude, double radius, string unit);
    private static String[] ParseFindGeoMembersResult(List`1<RedisGeoResult> results);
    public sealed virtual List`1<RedisGeoResult> FindGeoResultsInRadius(string key, double longitude, double latitude, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest);
    public sealed virtual String[] FindGeoMembersInRadius(string key, string member, double radius, string unit);
    public sealed virtual List`1<RedisGeoResult> FindGeoResultsInRadius(string key, string member, double radius, string unit, Nullable`1<int> count, Nullable`1<bool> sortByNearest);
    public sealed virtual HashSet`1<string> GetAllItemsFromSet(string setId);
    public sealed virtual void AddItemToSet(string setId, string item);
    public sealed virtual void AddRangeToSet(string setId, List`1<string> items);
    private bool AddRangeToSetNeedsSend(string setId, List`1<string> items);
    public sealed virtual void RemoveItemFromSet(string setId, string item);
    public sealed virtual string PopItemFromSet(string setId);
    public sealed virtual List`1<string> PopItemsFromSet(string setId, int count);
    public sealed virtual void MoveBetweenSets(string fromSetId, string toSetId, string item);
    public sealed virtual long GetSetCount(string setId);
    public sealed virtual bool SetContainsItem(string setId, string item);
    public sealed virtual HashSet`1<string> GetIntersectFromSets(String[] setIds);
    public sealed virtual void StoreIntersectFromSets(string intoSetId, String[] setIds);
    public sealed virtual HashSet`1<string> GetUnionFromSets(String[] setIds);
    public sealed virtual void StoreUnionFromSets(string intoSetId, String[] setIds);
    public sealed virtual HashSet`1<string> GetDifferencesFromSet(string fromSetId, String[] withSetIds);
    public sealed virtual void StoreDifferencesFromSet(string intoSetId, string fromSetId, String[] withSetIds);
    public sealed virtual string GetRandomItemFromSet(string setId);
    public sealed virtual IEnumerable`1<string> GetKeysByPattern(string pattern);
    public IEnumerable`1<SlowlogItem> GetSlowlog(Nullable`1<int> numberOfRecords);
    private static SlowlogItem[] ParseSlowlog(Object[] data);
    [CompilerGeneratedAttribute]
public sealed virtual IHasNamed`1<IRedisSortedSet> get_SortedSets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortedSets(IHasNamed`1<IRedisSortedSet> value);
    public static double GetLexicalScore(string value);
    public sealed virtual bool AddItemToSortedSet(string setId, string value);
    public sealed virtual bool AddItemToSortedSet(string setId, string value, double score);
    public bool AddItemToSortedSet(string setId, string value, long score);
    public sealed virtual bool AddRangeToSortedSet(string setId, List`1<string> values, double score);
    public sealed virtual bool AddRangeToSortedSet(string setId, List`1<string> values, long score);
    private RedisPipelineCommand AddRangeToSortedSetPrepareNonFlushed(string setId, List`1<string> values, Byte[] uScore);
    public sealed virtual bool RemoveItemFromSortedSet(string setId, string value);
    public sealed virtual long RemoveItemsFromSortedSet(string setId, List`1<string> values);
    public sealed virtual string PopItemWithLowestScoreFromSortedSet(string setId);
    public sealed virtual string PopItemWithHighestScoreFromSortedSet(string setId);
    public sealed virtual bool SortedSetContainsItem(string setId, string value);
    public sealed virtual double IncrementItemInSortedSet(string setId, string value, double incrementBy);
    public sealed virtual double IncrementItemInSortedSet(string setId, string value, long incrementBy);
    public sealed virtual long GetItemIndexInSortedSet(string setId, string value);
    public sealed virtual long GetItemIndexInSortedSetDesc(string setId, string value);
    public sealed virtual List`1<string> GetAllItemsFromSortedSet(string setId);
    public sealed virtual List`1<string> GetAllItemsFromSortedSetDesc(string setId);
    public sealed virtual List`1<string> GetRangeFromSortedSet(string setId, int fromRank, int toRank);
    public sealed virtual List`1<string> GetRangeFromSortedSetDesc(string setId, int fromRank, int toRank);
    public sealed virtual IDictionary`2<string, double> GetAllWithScoresFromSortedSet(string setId);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSet(string setId, int fromRank, int toRank);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetDesc(string setId, int fromRank, int toRank);
    private static IDictionary`2<string, double> CreateSortedScoreMap(Byte[][] multiDataList);
    public sealed virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore);
    public sealed virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, double fromScore, double toScore);
    public sealed virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, long fromScore, long toScore);
    public sealed virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<string> GetRangeFromSortedSetByLowestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, double fromScore, double toScore);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, long fromScore, long toScore);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByLowestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore);
    public sealed virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, double fromScore, double toScore);
    public sealed virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, long fromScore, long toScore);
    public sealed virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<string> GetRangeFromSortedSetByHighestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, double fromScore, double toScore);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, long fromScore, long toScore);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual IDictionary`2<string, double> GetRangeWithScoresFromSortedSetByHighestScore(string setId, long fromScore, long toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual long RemoveRangeFromSortedSet(string setId, int minRank, int maxRank);
    public sealed virtual long RemoveRangeFromSortedSetByScore(string setId, double fromScore, double toScore);
    public sealed virtual long RemoveRangeFromSortedSetByScore(string setId, long fromScore, long toScore);
    public sealed virtual long GetSortedSetCount(string setId);
    public sealed virtual long GetSortedSetCount(string setId, string fromStringScore, string toStringScore);
    public sealed virtual long GetSortedSetCount(string setId, double fromScore, double toScore);
    public sealed virtual long GetSortedSetCount(string setId, long fromScore, long toScore);
    public sealed virtual double GetItemScoreInSortedSet(string setId, string value);
    public sealed virtual long StoreIntersectFromSortedSets(string intoSetId, String[] setIds);
    public sealed virtual long StoreIntersectFromSortedSets(string intoSetId, String[] setIds, String[] args);
    public sealed virtual long StoreUnionFromSortedSets(string intoSetId, String[] setIds);
    public sealed virtual long StoreUnionFromSortedSets(string intoSetId, String[] setIds, String[] args);
    private static string GetSearchStart(string start);
    private static string GetSearchEnd(string end);
    public sealed virtual List`1<string> SearchSortedSet(string setId, string start, string end, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual long SearchSortedSetCount(string setId, string start, string end);
    public sealed virtual long RemoveRangeFromSortedSetBySearch(string setId, string start, string end);
    [CompilerGeneratedAttribute]
private string <DeleteAllAsync>b__113_0(Byte[] id);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClient/<<CreateSortedScoreMapAsync>g__Awaited|224_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<IDictionary`2<string, double>> <CreateSortedScoreMapAsync>g__Awaited|224_0(ValueTask`1<Byte[][]> pending);
    [CompilerGeneratedAttribute]
private string <DeleteAll>b__417_0(Byte[] id);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ScanResult <>n__0(ulong cursor, int count, string match);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ScanResult <>n__1(string setId, ulong cursor, int count, string match);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ScanResult <>n__2(string setId, ulong cursor, int count, string match);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ScanResult <>n__3(string hashId, ulong cursor, int count, string match);
}
[ExtensionAttribute]
public static class ServiceStack.Redis.RedisClientExtensions : object {
    [ExtensionAttribute]
public static string GetHostString(IRedisClient redis);
    [ExtensionAttribute]
public static string GetHostString(RedisEndpoint config);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AppendTo")]
public static long AppendToValue(IRedisClient redis, string key, string value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AppendToAsync")]
public static ValueTask`1<long> AppendToValueAsync(IRedisClientAsync redis, string key, string value, CancellationToken token);
}
[DefaultMemberAttribute("Item")]
internal class ServiceStack.Redis.RedisClientHash : object {
    private RedisClient client;
    private string hashId;
    private IRedisClientAsync AsyncClient { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    public string Id { get; }
    public RedisClientHash(RedisClient client, string hashId);
    private IRedisClientAsync get_AsyncClient();
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisHashAsync.AddAsync(KeyValuePair`2<string, string> item, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisHashAsync.AddAsync(string key, string value, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisHashAsync.AddIfNotExistsAsync(KeyValuePair`2<string, string> item, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisHashAsync.AddRangeAsync(IEnumerable`1<KeyValuePair`2<string, string>> items, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisHashAsync.ClearAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisHashAsync.ContainsKeyAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.IRedisHashAsync.CountAsync(CancellationToken token);
    private sealed virtual override IAsyncEnumerator`1<KeyValuePair`2<string, string>> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisHashAsync.IncrementValueAsync(string key, int incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisHashAsync.RemoveAsync(string key, CancellationToken token);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<string, string> item);
    public sealed virtual bool AddIfNotExists(KeyValuePair`2<string, string> item);
    public sealed virtual void AddRange(IEnumerable`1<KeyValuePair`2<string, string>> items);
    public sealed virtual long IncrementValue(string key, int incrementBy);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, string> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, string> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void Add(string key, string value);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, String& value);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual string get_Id();
}
[DefaultMemberAttribute("Item")]
internal class ServiceStack.Redis.RedisClientList : object {
    private RedisClient client;
    private string listId;
    private static int PageLimit;
    private IRedisClientAsync AsyncClient { get; }
    public string Id { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    public RedisClientList(RedisClient client, string listId);
    private IRedisClientAsync get_AsyncClient();
    private IRedisListAsync AsAsync();
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.AppendAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.BlockingDequeueAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.BlockingPopAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.BlockingRemoveStartAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.IRedisListAsync.CountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.DequeueAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.EnqueueAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisListAsync.GetAllAsync(CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.RedisClientList/<System-Collections-Generic-IAsyncEnumerable<System-String>-GetAsyncEnumerator>d__11")]
private sealed virtual override IAsyncEnumerator`1<string> System.Collections.Generic.IAsyncEnumerable<System.String>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisListAsync.GetRangeAsync(int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisListAsync.GetRangeFromSortedListAsync(int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.PopAndPushAsync(IRedisListAsync toList, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.PopAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.PrependAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.PushAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.RemoveAllAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.RemoveEndAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.RemoveStartAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisListAsync.RemoveValueAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisListAsync.RemoveValueAsync(string value, int noOfMatches, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.TrimAsync(int keepStartingFrom, int keepEndingAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientList/<ServiceStack-Redis-IRedisListAsync-RemoveAsync>d__24")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisListAsync.RemoveAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.AddAsync(string value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientList/<ServiceStack-Redis-IRedisListAsync-RemoveAtAsync>d__26")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.RemoveAtAsync(int index, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientList/<ServiceStack-Redis-IRedisListAsync-ContainsAsync>d__27")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisListAsync.ContainsAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.ClearAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientList/<ServiceStack-Redis-IRedisListAsync-IndexOfAsync>d__29")]
private sealed virtual override ValueTask`1<int> ServiceStack.Redis.IRedisListAsync.IndexOfAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisListAsync.ElementAtAsync(int index, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisListAsync.SetValueAsync(int index, string value, CancellationToken token);
    public sealed virtual string get_Id();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    [IteratorStateMachineAttribute("ServiceStack.Redis.RedisClientList/<GetPagingEnumerator>d__39")]
public IEnumerator`1<string> GetPagingEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public sealed virtual List`1<string> GetAll();
    public sealed virtual List`1<string> GetRange(int startingFrom, int endingAt);
    public sealed virtual List`1<string> GetRangeFromSortedList(int startingFrom, int endingAt);
    public sealed virtual void RemoveAll();
    public sealed virtual void Trim(int keepStartingFrom, int keepEndingAt);
    public sealed virtual long RemoveValue(string value);
    public sealed virtual long RemoveValue(string value, int noOfMatches);
    public sealed virtual void Append(string value);
    public sealed virtual string RemoveStart();
    public sealed virtual string BlockingRemoveStart(Nullable`1<TimeSpan> timeOut);
    public sealed virtual string RemoveEnd();
    public sealed virtual void Enqueue(string value);
    public sealed virtual void Prepend(string value);
    public sealed virtual void Push(string value);
    public sealed virtual string Pop();
    public sealed virtual string BlockingPop(Nullable`1<TimeSpan> timeOut);
    public sealed virtual string Dequeue();
    public sealed virtual string BlockingDequeue(Nullable`1<TimeSpan> timeOut);
    public sealed virtual string PopAndPush(IRedisList toList);
}
public class ServiceStack.Redis.RedisClientManagerCacheClient : object {
    private IRedisClientsManager redisManager;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    public bool ReadOnly { get; public set; }
    public RedisClientManagerCacheClient(IRedisClientsManager redisManager);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    private ValueTask`1<IRedisClientAsync> GetClientAsync(CancellationToken& token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-GetAsync>d__2`1")]
private sealed virtual override Task`1<T> ServiceStack.Caching.ICacheClientAsync.GetAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-SetAsync>d__3`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-SetAsync>d__4`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-SetAsync>d__5`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.SetAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-FlushAllAsync>d__6")]
private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.FlushAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-GetAllAsync>d__7`1")]
private sealed virtual override Task`1<IDictionary`2<string, T>> ServiceStack.Caching.ICacheClientAsync.GetAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-SetAllAsync>d__8`1")]
private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.SetAllAsync(IDictionary`2<string, T> values, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-RemoveAsync>d__9")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.RemoveAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-GetTimeToLiveAsync>d__10")]
private sealed virtual override Task`1<Nullable`1<TimeSpan>> ServiceStack.Caching.ICacheClientAsync.GetTimeToLiveAsync(string key, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-GetKeysByPatternAsync>d__11")]
private sealed virtual override IAsyncEnumerable`1<string> ServiceStack.Caching.ICacheClientAsync.GetKeysByPatternAsync(string pattern, CancellationToken token);
    private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.RemoveExpiredEntriesAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-IRemoveByPatternAsync-RemoveByPatternAsync>d__13")]
private sealed virtual override Task ServiceStack.Caching.IRemoveByPatternAsync.RemoveByPatternAsync(string pattern, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-IRemoveByPatternAsync-RemoveByRegexAsync>d__14")]
private sealed virtual override Task ServiceStack.Caching.IRemoveByPatternAsync.RemoveByRegexAsync(string regex, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-RemoveAllAsync>d__15")]
private sealed virtual override Task ServiceStack.Caching.ICacheClientAsync.RemoveAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-IncrementAsync>d__16")]
private sealed virtual override Task`1<long> ServiceStack.Caching.ICacheClientAsync.IncrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-DecrementAsync>d__17")]
private sealed virtual override Task`1<long> ServiceStack.Caching.ICacheClientAsync.DecrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-AddAsync>d__18`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-ReplaceAsync>d__19`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-AddAsync>d__20`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-ReplaceAsync>d__21`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-AddAsync>d__22`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.AddAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientManagerCacheClient/<ServiceStack-Caching-ICacheClientAsync-ReplaceAsync>d__23`1")]
private sealed virtual override Task`1<bool> ServiceStack.Caching.ICacheClientAsync.ReplaceAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    public sealed virtual void Dispose();
    public sealed virtual T Get(string key);
    public sealed virtual IDictionary`2<string, T> GetAll(IEnumerable`1<string> keys);
    private void AssertNotReadOnly();
    public ICacheClient GetClient();
    public sealed virtual bool Remove(string key);
    public sealed virtual void RemoveAll(IEnumerable`1<string> keys);
    public sealed virtual long Increment(string key, UInt32 amount);
    public sealed virtual long Decrement(string key, UInt32 amount);
    public sealed virtual bool Add(string key, T value);
    public sealed virtual bool Set(string key, T value);
    public sealed virtual bool Replace(string key, T value);
    public sealed virtual bool Add(string key, T value, DateTime expiresAt);
    public sealed virtual bool Set(string key, T value, DateTime expiresAt);
    public sealed virtual bool Replace(string key, T value, DateTime expiresAt);
    public sealed virtual bool Add(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Set(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Replace(string key, T value, TimeSpan expiresIn);
    public sealed virtual void FlushAll();
    public sealed virtual void SetAll(IDictionary`2<string, T> values);
    public sealed virtual void RemoveByPattern(string pattern);
    public sealed virtual void RemoveByRegex(string pattern);
    public sealed virtual Nullable`1<TimeSpan> GetTimeToLive(string key);
    public sealed virtual IEnumerable`1<string> GetKeysByPattern(string pattern);
    public sealed virtual void RemoveExpiredEntries();
}
public class ServiceStack.Redis.RedisClientManagerConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DefaultDb>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxReadPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWritePoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoStart>k__BackingField;
    public Nullable`1<long> DefaultDb { get; public set; }
    public int MaxReadPoolSize { get; public set; }
    public int MaxWritePoolSize { get; public set; }
    public bool AutoStart { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_DefaultDb();
    [CompilerGeneratedAttribute]
public void set_DefaultDb(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public int get_MaxReadPoolSize();
    [CompilerGeneratedAttribute]
public void set_MaxReadPoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxWritePoolSize();
    [CompilerGeneratedAttribute]
public void set_MaxWritePoolSize(int value);
    [CompilerGeneratedAttribute]
public bool get_AutoStart();
    [CompilerGeneratedAttribute]
public void set_AutoStart(bool value);
}
internal class ServiceStack.Redis.RedisClientSet : object {
    private RedisClient client;
    private string setId;
    private static int PageLimit;
    private IRedisClientAsync AsyncClient { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Id { get; }
    public RedisClientSet(RedisClient client, string setId);
    private IRedisSetAsync AsAsync();
    private IRedisClientAsync get_AsyncClient();
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.AddAsync(string item, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.ClearAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisSetAsync.ContainsAsync(string item, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.IRedisSetAsync.CountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisSetAsync.DiffAsync(IRedisSetAsync[] withSets, CancellationToken token);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisSetAsync.GetAllAsync(CancellationToken token);
    private sealed virtual override IAsyncEnumerator`1<string> System.Collections.Generic.IAsyncEnumerable<System.String>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisSetAsync.GetRandomEntryAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisSetAsync.GetRangeFromSortedSetAsync(int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisSetAsync.IntersectAsync(IRedisSetAsync[] withSets, CancellationToken token);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisSetAsync.IntersectAsync(IRedisSetAsync[] withSets);
    private List`1<string> MergeSetIds(IRedisSetAsync[] withSets);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.MoveAsync(string value, IRedisSetAsync toSet, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisSetAsync.PopAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisSetAsync.RemoveAsync(string item, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.StoreDiffAsync(IRedisSetAsync fromSet, IRedisSetAsync[] withSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.StoreDiffAsync(IRedisSetAsync fromSet, IRedisSetAsync[] withSets);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.StoreIntersectAsync(IRedisSetAsync[] withSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.StoreIntersectAsync(IRedisSetAsync[] withSets);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.StoreUnionAsync(IRedisSetAsync[] withSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSetAsync.StoreUnionAsync(IRedisSetAsync[] withSets);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisSetAsync.UnionAsync(IRedisSetAsync[] withSets, CancellationToken token);
    private sealed virtual override ValueTask`1<HashSet`1<string>> ServiceStack.Redis.IRedisSetAsync.UnionAsync(IRedisSetAsync[] withSets);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    [IteratorStateMachineAttribute("ServiceStack.Redis.RedisClientSet/<GetPagingEnumerator>d__31")]
public IEnumerator`1<string> GetPagingEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Id();
    public sealed virtual List`1<string> GetRangeFromSortedSet(int startingFrom, int endingAt);
    public sealed virtual HashSet`1<string> GetAll();
    public sealed virtual string Pop();
    public sealed virtual void Move(string value, IRedisSet toSet);
    private List`1<string> MergeSetIds(IRedisSet[] withSets);
    public sealed virtual HashSet`1<string> Intersect(IRedisSet[] withSets);
    public sealed virtual void StoreIntersect(IRedisSet[] withSets);
    public sealed virtual HashSet`1<string> Union(IRedisSet[] withSets);
    public sealed virtual void StoreUnion(IRedisSet[] withSets);
    public sealed virtual HashSet`1<string> Diff(IRedisSet[] withSets);
    public sealed virtual void StoreDiff(IRedisSet fromSet, IRedisSet[] withSets);
    public sealed virtual string GetRandomEntry();
}
[ExtensionAttribute]
public static class ServiceStack.Redis.RedisClientsManagerExtensions : object {
    private static T InvalidAsyncClient(IRedisClientsManager manager, string method);
    [ExtensionAttribute]
public static ValueTask`1<IRedisClientAsync> GetClientAsync(IRedisClientsManager redisManager, CancellationToken token);
    [ExtensionAttribute]
public static ValueTask`1<IRedisClientAsync> GetReadOnlyClientAsync(IRedisClientsManager redisManager, CancellationToken token);
    [ExtensionAttribute]
public static ValueTask`1<ICacheClientAsync> GetCacheClientAsync(IRedisClientsManager redisManager, CancellationToken token);
    [ExtensionAttribute]
public static ValueTask`1<ICacheClientAsync> GetReadOnlyCacheClientAsync(IRedisClientsManager redisManager, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientsManagerExtensions/<ExecAsync>d__5")]
[ExtensionAttribute]
public static ValueTask ExecAsync(IRedisClientsManager redisManager, Func`2<IRedisClientAsync, ValueTask> lambda);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientsManagerExtensions/<ExecAsync>d__6`1")]
[ExtensionAttribute]
public static ValueTask`1<T> ExecAsync(IRedisClientsManager redisManager, Func`2<IRedisClientAsync, ValueTask`1<T>> lambda);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientsManagerExtensions/<ExecAsAsync>d__7`1")]
[ExtensionAttribute]
public static ValueTask ExecAsAsync(IRedisClientsManager redisManager, Func`2<IRedisTypedClientAsync`1<T>, ValueTask> lambda);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientsManagerExtensions/<ExecAsAsync>d__8`1")]
[ExtensionAttribute]
public static ValueTask`1<T> ExecAsAsync(IRedisClientsManager redisManager, Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<T>> lambda);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientsManagerExtensions/<ExecAsAsync>d__9`1")]
[ExtensionAttribute]
public static ValueTask`1<IList`1<T>> ExecAsAsync(IRedisClientsManager redisManager, Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<IList`1<T>>> lambda);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisClientsManagerExtensions/<ExecAsAsync>d__10`1")]
[ExtensionAttribute]
public static ValueTask`1<List`1<T>> ExecAsAsync(IRedisClientsManager redisManager, Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<List`1<T>>> lambda);
    [ExtensionAttribute]
public static IRedisPubSubServer CreatePubSubServer(IRedisClientsManager redisManager, string channel, Action`2<string, string> onMessage, Action`1<Exception> onError, Action onInit, Action onStart, Action onStop);
    [ExtensionAttribute]
public static void Exec(IRedisClientsManager redisManager, Action`1<IRedisClient> lambda);
    [ExtensionAttribute]
public static string Exec(IRedisClientsManager redisManager, Func`2<IRedisClient, string> lambda);
    [ExtensionAttribute]
public static long Exec(IRedisClientsManager redisManager, Func`2<IRedisClient, long> lambda);
    [ExtensionAttribute]
public static int Exec(IRedisClientsManager redisManager, Func`2<IRedisClient, int> lambda);
    [ExtensionAttribute]
public static double Exec(IRedisClientsManager redisManager, Func`2<IRedisClient, double> lambda);
    [ExtensionAttribute]
public static bool Exec(IRedisClientsManager redisManager, Func`2<IRedisClient, bool> lambda);
    [ExtensionAttribute]
public static void ExecTrans(IRedisClientsManager redisManager, Action`1<IRedisTransaction> lambda);
    [ExtensionAttribute]
public static void ExecAs(IRedisClientsManager redisManager, Action`1<IRedisTypedClient`1<T>> lambda);
    [ExtensionAttribute]
public static T ExecAs(IRedisClientsManager redisManager, Func`2<IRedisTypedClient`1<T>, T> lambda);
    [ExtensionAttribute]
public static IList`1<T> ExecAs(IRedisClientsManager redisManager, Func`2<IRedisTypedClient`1<T>, IList`1<T>> lambda);
    [ExtensionAttribute]
public static List`1<T> ExecAs(IRedisClientsManager redisManager, Func`2<IRedisTypedClient`1<T>, List`1<T>> lambda);
}
internal class ServiceStack.Redis.RedisClientSortedSet : object {
    private RedisClient client;
    private string setId;
    private static int PageLimit;
    private IRedisClientAsync AsyncClient { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Id { get; }
    public RedisClientSortedSet(RedisClient client, string setId);
    private IRedisClientAsync get_AsyncClient();
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.AddAsync(string value, CancellationToken token);
    private IRedisSortedSetAsync AsAsync();
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.ClearAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisSortedSetAsync.ContainsAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask`1<int> ServiceStack.Redis.IRedisSortedSetAsync.CountAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisSortedSetAsync.GetAllAsync(CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Redis.RedisClientSortedSet/<System-Collections-Generic-IAsyncEnumerable<System-String>-GetAsyncEnumerator>d__8")]
private sealed virtual override IAsyncEnumerator`1<string> System.Collections.Generic.IAsyncEnumerable<System.String>.GetAsyncEnumerator(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisSortedSetAsync.GetItemIndexAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisSortedSetAsync.GetItemScoreAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisSortedSetAsync.GetRangeAsync(int startingRank, int endingRank, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisSortedSetAsync.GetRangeByScoreAsync(string fromStringScore, string toStringScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisSortedSetAsync.GetRangeByScoreAsync(string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisSortedSetAsync.GetRangeByScoreAsync(double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<List`1<string>> ServiceStack.Redis.IRedisSortedSetAsync.GetRangeByScoreAsync(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.IncrementItemScoreAsync(string value, double incrementByScore, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisSortedSetAsync.PopItemWithHighestScoreAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisSortedSetAsync.PopItemWithLowestScoreAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisSortedSetAsync.RemoveAsync(string value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.RemoveRangeAsync(int fromRank, int toRank, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.RemoveRangeByScoreAsync(double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.StoreFromIntersectAsync(IRedisSortedSetAsync[] ofSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.StoreFromIntersectAsync(IRedisSortedSetAsync[] ofSets);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.StoreFromUnionAsync(IRedisSortedSetAsync[] ofSets, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSortedSetAsync.StoreFromUnionAsync(IRedisSortedSetAsync[] ofSets);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    [IteratorStateMachineAttribute("ServiceStack.Redis.RedisClientSortedSet/<GetPagingEnumerator>d__31")]
public IEnumerator`1<string> GetPagingEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Id();
    public sealed virtual List`1<string> GetAll();
    public sealed virtual List`1<string> GetRange(int startingRank, int endingRank);
    public sealed virtual List`1<string> GetRangeByScore(string fromStringScore, string toStringScore);
    public sealed virtual List`1<string> GetRangeByScore(string fromStringScore, string toStringScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<string> GetRangeByScore(double fromScore, double toScore);
    public sealed virtual List`1<string> GetRangeByScore(double fromScore, double toScore, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual void RemoveRange(int startingFrom, int toRank);
    public sealed virtual void RemoveRangeByScore(double fromScore, double toScore);
    public sealed virtual void StoreFromIntersect(IRedisSortedSet[] ofSets);
    public sealed virtual void StoreFromUnion(IRedisSortedSet[] ofSets);
    public sealed virtual long GetItemIndex(string value);
    public sealed virtual double GetItemScore(string value);
    public sealed virtual string PopItemWithLowestScore();
    public sealed virtual string PopItemWithHighestScore();
    public sealed virtual void IncrementItemScore(string value, double incrementByScore);
}
internal class ServiceStack.Redis.RedisCommand : QueuedRedisOperation {
    private Delegate asyncReturnCommand;
    [CompilerGeneratedAttribute]
private Action`1<IRedisClient> <VoidReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, int> <IntReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, long> <LongReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, bool> <BoolReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, Byte[]> <BytesReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, Byte[][]> <MultiBytesReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, string> <StringReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, List`1<string>> <MultiStringReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, Dictionary`2<string, string>> <DictionaryStringReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, RedisData> <RedisDataReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, RedisText> <RedisTextReturnCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRedisClient, double> <DoubleReturnCommand>k__BackingField;
    protected Delegate AsyncReturnCommand { get; }
    public Action`1<IRedisClient> VoidReturnCommand { get; public set; }
    public Func`2<IRedisClient, int> IntReturnCommand { get; public set; }
    public Func`2<IRedisClient, long> LongReturnCommand { get; public set; }
    public Func`2<IRedisClient, bool> BoolReturnCommand { get; public set; }
    public Func`2<IRedisClient, Byte[]> BytesReturnCommand { get; public set; }
    public Func`2<IRedisClient, Byte[][]> MultiBytesReturnCommand { get; public set; }
    public Func`2<IRedisClient, string> StringReturnCommand { get; public set; }
    public Func`2<IRedisClient, List`1<string>> MultiStringReturnCommand { get; public set; }
    public Func`2<IRedisClient, Dictionary`2<string, string>> DictionaryStringReturnCommand { get; public set; }
    public Func`2<IRedisClient, RedisData> RedisDataReturnCommand { get; public set; }
    public Func`2<IRedisClient, RedisText> RedisTextReturnCommand { get; public set; }
    public Func`2<IRedisClient, double> DoubleReturnCommand { get; public set; }
    protected Delegate get_AsyncReturnCommand();
    private RedisCommand SetAsyncReturnCommand(Delegate value);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask> VoidReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<int>> IntReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<long>> LongReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<bool>> BoolReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<Byte[]>> BytesReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<Byte[][]>> MultiBytesReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<string>> StringReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<List`1<string>>> MultiStringReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<Dictionary`2<string, string>>> DictionaryStringReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<RedisData>> RedisDataReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<RedisText>> RedisTextReturnCommandAsync);
    internal RedisCommand WithAsyncReturnCommand(Func`2<IRedisClientAsync, ValueTask`1<double>> DoubleReturnCommandAsync);
    public virtual ValueTask ExecuteAsync(IRedisClientAsync client);
    protected void ExecuteThrowIfSync();
    [CompilerGeneratedAttribute]
public Action`1<IRedisClient> get_VoidReturnCommand();
    [CompilerGeneratedAttribute]
public void set_VoidReturnCommand(Action`1<IRedisClient> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, int> get_IntReturnCommand();
    [CompilerGeneratedAttribute]
public void set_IntReturnCommand(Func`2<IRedisClient, int> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, long> get_LongReturnCommand();
    [CompilerGeneratedAttribute]
public void set_LongReturnCommand(Func`2<IRedisClient, long> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, bool> get_BoolReturnCommand();
    [CompilerGeneratedAttribute]
public void set_BoolReturnCommand(Func`2<IRedisClient, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, Byte[]> get_BytesReturnCommand();
    [CompilerGeneratedAttribute]
public void set_BytesReturnCommand(Func`2<IRedisClient, Byte[]> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, Byte[][]> get_MultiBytesReturnCommand();
    [CompilerGeneratedAttribute]
public void set_MultiBytesReturnCommand(Func`2<IRedisClient, Byte[][]> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, string> get_StringReturnCommand();
    [CompilerGeneratedAttribute]
public void set_StringReturnCommand(Func`2<IRedisClient, string> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, List`1<string>> get_MultiStringReturnCommand();
    [CompilerGeneratedAttribute]
public void set_MultiStringReturnCommand(Func`2<IRedisClient, List`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, Dictionary`2<string, string>> get_DictionaryStringReturnCommand();
    [CompilerGeneratedAttribute]
public void set_DictionaryStringReturnCommand(Func`2<IRedisClient, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, RedisData> get_RedisDataReturnCommand();
    [CompilerGeneratedAttribute]
public void set_RedisDataReturnCommand(Func`2<IRedisClient, RedisData> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, RedisText> get_RedisTextReturnCommand();
    [CompilerGeneratedAttribute]
public void set_RedisTextReturnCommand(Func`2<IRedisClient, RedisText> value);
    [CompilerGeneratedAttribute]
public Func`2<IRedisClient, double> get_DoubleReturnCommand();
    [CompilerGeneratedAttribute]
public void set_DoubleReturnCommand(Func`2<IRedisClient, double> value);
    public virtual void Execute(IRedisClient client);
    protected void ExecuteThrowIfAsync();
    private void OnExecuteThrowIfAsync();
}
public class ServiceStack.Redis.RedisCommandQueue : RedisQueueCompletableOperation {
    protected RedisClient RedisClient;
    public RedisCommandQueue(RedisClient redisClient);
    public sealed virtual void QueueCommand(Action`1<IRedisClient> command);
    public sealed virtual void QueueCommand(Action`1<IRedisClient> command, Action onSuccessCallback);
    public virtual void QueueCommand(Action`1<IRedisClient> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, int> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, int> command, Action`1<int> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, int> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, long> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, long> command, Action`1<long> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, long> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, bool> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, bool> command, Action`1<bool> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, bool> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, double> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, double> command, Action`1<double> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, double> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, Byte[]> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, Byte[]> command, Action`1<Byte[]> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, Byte[]> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, string> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, string> command, Action`1<string> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, string> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, Byte[][]> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, Byte[][]> command, Action`1<Byte[][]> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, Byte[][]> command, Action`1<Byte[][]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, List`1<string>> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, List`1<string>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, HashSet`1<string>> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback);
    public virtual void QueueCommand(Func`2<IRedisClient, HashSet`1<string>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, Dictionary`2<string, string>> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, Dictionary`2<string, string>> command, Action`1<Dictionary`2<string, string>> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, Dictionary`2<string, string>> command, Action`1<Dictionary`2<string, string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, RedisData> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, RedisData> command, Action`1<RedisData> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, RedisData> command, Action`1<RedisData> onSuccessCallback, Action`1<Exception> onErrorCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, RedisText> command);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, RedisText> command, Action`1<RedisText> onSuccessCallback);
    public sealed virtual void QueueCommand(Func`2<IRedisClient, RedisText> command, Action`1<RedisText> onSuccessCallback, Action`1<Exception> onErrorCallback);
}
public class ServiceStack.Redis.RedisConfig : object {
    public static long DefaultDb;
    public static int DefaultPort;
    public static int DefaultPortSsl;
    public static int DefaultPortSentinel;
    public static string DefaultHost;
    public static Func`2<RedisEndpoint, RedisClient> ClientFactory;
    public static int DefaultConnectTimeout;
    public static int DefaultSendTimeout;
    public static int DefaultReceiveTimeout;
    public static int DefaultIdleTimeOutSecs;
    public static int DefaultRetryTimeout;
    public static Nullable`1<int> DefaultMaxPoolSize;
    public static int DefaultPoolSizeMultiplier;
    public static int BackOffMultiplier;
    public static int BufferPoolMaxSize;
    public static int CommandKeysBatchSize;
    public static bool VerifyMasterConnections;
    public static bool RetryReconnectOnFailedMasters;
    public static int HostLookupTimeoutMs;
    public static Nullable`1<int> AssumeServerVersion;
    public static TimeSpan DeactivatedClientsExpiry;
    public static bool EnableVerboseLogging;
    [CompilerGeneratedAttribute]
private static LocalCertificateSelectionCallback <CertificateSelectionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static RemoteCertificateValidationCallback <CertificateValidationCallback>k__BackingField;
    public static bool AssertAccessOnlyOnSameThread;
    public static int BufferLength { get; }
    [ObsoleteAttribute("Use EnableVerboseLogging")]
public static bool DisableVerboseLogging { get; public set; }
    public static LocalCertificateSelectionCallback CertificateSelectionCallback { get; public set; }
    public static RemoteCertificateValidationCallback CertificateValidationCallback { get; public set; }
    private static RedisConfig();
    public static int get_BufferLength();
    public static bool get_DisableVerboseLogging();
    public static void set_DisableVerboseLogging(bool value);
    [CompilerGeneratedAttribute]
public static LocalCertificateSelectionCallback get_CertificateSelectionCallback();
    [CompilerGeneratedAttribute]
public static void set_CertificateSelectionCallback(LocalCertificateSelectionCallback value);
    [CompilerGeneratedAttribute]
public static RemoteCertificateValidationCallback get_CertificateValidationCallback();
    [CompilerGeneratedAttribute]
public static void set_CertificateValidationCallback(RemoteCertificateValidationCallback value);
    public static void Reset();
}
[ExtensionAttribute]
public static class ServiceStack.Redis.RedisDataExtensions : object {
    [ExtensionAttribute]
public static RedisText ToRedisText(RedisData data);
    [ExtensionAttribute]
public static double ToDouble(RedisData data);
    [ExtensionAttribute]
public static long ToInt64(RedisData data);
    [ExtensionAttribute]
public static string GetResult(RedisText from);
    [ExtensionAttribute]
public static T GetResult(RedisText from);
    [ExtensionAttribute]
public static List`1<string> GetResults(RedisText from);
    [ExtensionAttribute]
public static List`1<T> GetResults(RedisText from);
}
[ExtensionAttribute]
public static class ServiceStack.Redis.RedisDataInfoExtensions : object {
    private static String[] CRLF;
    private static RedisDataInfoExtensions();
    [ExtensionAttribute]
public static string ToJsonInfo(RedisText redisText);
    private static string Parse(string source);
    private static IEnumerable`1<string> SplitRows(string source);
    private static string ParseSection(string source);
    private static Nullable`1<KeyValuePair`2<string, string>> ParseKeyValue(string source);
}
[ExtensionAttribute]
public static class ServiceStack.Redis.RedisDiagnostics : object {
    [ExtensionAttribute]
public static Guid WriteCommandBefore(DiagnosticListener listener, Byte[][] command, string operation);
    [ExtensionAttribute]
public static void WriteCommandAfter(DiagnosticListener listener, Guid operationId, Byte[][] command, string operation);
    [ExtensionAttribute]
public static void WriteCommandRetry(DiagnosticListener listener, Guid operationId, Byte[][] command, string operation);
    [ExtensionAttribute]
public static void WriteCommandError(DiagnosticListener listener, Guid operationId, Byte[][] command, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionOpenBefore(DiagnosticListener listener, RedisNativeClient client, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenAfter(DiagnosticListener listener, Guid operationId, RedisNativeClient client, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenError(DiagnosticListener listener, Guid operationId, RedisNativeClient client, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionCloseBefore(DiagnosticListener listener, RedisNativeClient client, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseAfter(DiagnosticListener listener, Guid operationId, RedisNativeClient client, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseError(DiagnosticListener listener, Guid operationId, RedisNativeClient client, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WritePoolRent(DiagnosticListener listener, RedisNativeClient client, string operation);
    [ExtensionAttribute]
public static void WritePoolReturn(DiagnosticListener listener, Guid operationId, RedisNativeClient client, string operation);
}
public class ServiceStack.Redis.RedisEndpoint : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ssl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SslProtocols> <SslProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SendTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReceiveTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdleTimeOutSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespacePrefix>k__BackingField;
    public string Host { get; public set; }
    public int Port { get; public set; }
    public bool Ssl { get; public set; }
    public Nullable`1<SslProtocols> SslProtocols { get; public set; }
    public int ConnectTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int RetryTimeout { get; public set; }
    public int IdleTimeOutSecs { get; public set; }
    public long Db { get; public set; }
    public string Client { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool RequiresAuth { get; }
    public string NamespacePrefix { get; public set; }
    public RedisEndpoint(string host, int port, string password, long db);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Ssl();
    [CompilerGeneratedAttribute]
public void set_Ssl(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<SslProtocols> get_SslProtocols();
    [CompilerGeneratedAttribute]
public void set_SslProtocols(Nullable`1<SslProtocols> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SendTimeout();
    [CompilerGeneratedAttribute]
public void set_SendTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReceiveTimeout();
    [CompilerGeneratedAttribute]
public void set_ReceiveTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RetryTimeout();
    [CompilerGeneratedAttribute]
public void set_RetryTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_IdleTimeOutSecs();
    [CompilerGeneratedAttribute]
public void set_IdleTimeOutSecs(int value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Db();
    [CompilerGeneratedAttribute]
public void set_Db(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public bool get_RequiresAuth();
    [CompilerGeneratedAttribute]
public string get_NamespacePrefix();
    [CompilerGeneratedAttribute]
public void set_NamespacePrefix(string value);
    public virtual string ToString();
    protected bool Equals(RedisEndpoint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class ServiceStack.Redis.RedisException : Exception {
    public RedisException(string message);
    public RedisException(string message, Exception innerException);
}
[ExtensionAttribute]
public static class ServiceStack.Redis.RedisExtensions : object {
    [ExtensionAttribute]
public static List`1<RedisEndpoint> ToRedisEndPoints(IEnumerable`1<string> hosts);
    [ExtensionAttribute]
public static RedisEndpoint ToRedisEndpoint(string connectionString, Nullable`1<int> defaultPort);
}
[ExtensionAttribute]
internal static class ServiceStack.Redis.RedisExtensionsInternal : object {
    private static NumberFormatInfo DoubleFormatProvider;
    private static RedisExtensionsInternal();
    [ExtensionAttribute]
public static bool IsConnected(Socket socket);
    [ExtensionAttribute]
public static String[] GetIds(IHasStringId[] itemsWithId);
    [ExtensionAttribute]
public static List`1<string> ToStringList(Byte[][] multiDataList);
    [ExtensionAttribute]
public static String[] ToStringArray(Byte[][] multiDataList);
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToStringDictionary(Byte[][] multiDataList);
    [ExtensionAttribute]
public static Byte[] ToFastUtf8Bytes(double value);
    private static Byte[] FastToUtf8Bytes(string strVal);
    [ExtensionAttribute]
public static Byte[][] ToMultiByteArray(String[] args);
    [ExtensionAttribute]
public static Byte[][] PrependByteArray(Byte[][] args, Byte[] valueToPrepend);
    [ExtensionAttribute]
public static Byte[][] PrependInt(Byte[][] args, int valueToPrepend);
}
public class ServiceStack.Redis.RedisLock : object {
    private object untypedClient;
    private string key;
    private RedisLock(object redisClient, string key);
    public RedisLock(IRedisClient redisClient, string key, Nullable`1<TimeSpan> timeOut);
    internal static ValueTask`1<RedisLock> CreateAsync(IRedisClientAsync redisClient, string key, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisLock/<RetryUntilTrue>d__1")]
private static ValueTask RetryUntilTrue(Func`2<CancellationToken, ValueTask`1<bool>> action, Nullable`1<TimeSpan> timeOut, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisLock/<AcquireAsync>d__2")]
private ValueTask AcquireAsync(Nullable`1<TimeSpan> timeOut, CancellationToken token);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    public sealed virtual void Dispose();
}
public class ServiceStack.Redis.RedisManagerPool : object {
    private static ILog Log;
    private static string PoolTimeoutError;
    public int RecheckPoolAfterMs;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IRedisClientsManager>> <OnFailover>k__BackingField;
    private RedisClient[] clients;
    protected int poolIndex;
    protected int RedisClientCounter;
    [CompilerGeneratedAttribute]
private Func`2<RedisEndpoint, RedisClient> <ClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRedisNativeClient> <ConnectionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IRedisResolver <RedisResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssertAccessOnlyOnSameThread>k__BackingField;
    private static ReservedClient reservedSlot;
    private int disposeAttempts;
    public List`1<Action`1<IRedisClientsManager>> OnFailover { get; private set; }
    public Func`2<RedisEndpoint, RedisClient> ClientFactory { get; public set; }
    public Action`1<IRedisNativeClient> ConnectionFilter { get; public set; }
    public IRedisResolver RedisResolver { get; public set; }
    public int MaxPoolSize { get; private set; }
    public bool AssertAccessOnlyOnSameThread { get; public set; }
    public Dictionary`2<string, long> Stats { get; }
    public RedisManagerPool(string host);
    public RedisManagerPool(string host, RedisPoolConfig config);
    public RedisManagerPool(IEnumerable`1<string> hosts);
    public RedisManagerPool(IEnumerable`1<string> hosts, RedisPoolConfig config);
    private static RedisManagerPool();
    private sealed virtual override ValueTask`1<ICacheClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetCacheClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<ICacheClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyCacheClientAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisClientAsync> ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyClientAsync(CancellationToken token);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IRedisClientsManager>> get_OnFailover();
    [CompilerGeneratedAttribute]
private void set_OnFailover(List`1<Action`1<IRedisClientsManager>> value);
    [CompilerGeneratedAttribute]
public Func`2<RedisEndpoint, RedisClient> get_ClientFactory();
    [CompilerGeneratedAttribute]
public void set_ClientFactory(Func`2<RedisEndpoint, RedisClient> value);
    [CompilerGeneratedAttribute]
public Action`1<IRedisNativeClient> get_ConnectionFilter();
    [CompilerGeneratedAttribute]
public void set_ConnectionFilter(Action`1<IRedisNativeClient> value);
    [CompilerGeneratedAttribute]
public sealed virtual IRedisResolver get_RedisResolver();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RedisResolver(IRedisResolver value);
    [CompilerGeneratedAttribute]
public int get_MaxPoolSize();
    [CompilerGeneratedAttribute]
private void set_MaxPoolSize(int value);
    [CompilerGeneratedAttribute]
public bool get_AssertAccessOnlyOnSameThread();
    [CompilerGeneratedAttribute]
public void set_AssertAccessOnlyOnSameThread(bool value);
    public sealed virtual void FailoverTo(String[] readWriteHosts);
    public sealed virtual void FailoverTo(IEnumerable`1<string> readWriteHosts, IEnumerable`1<string> readOnlyHosts);
    public sealed virtual IRedisClient GetClient();
    private RedisClient GetClient(bool forAsync);
    public sealed virtual IRedisClient GetReadOnlyClient();
    private int GetInActiveClient(RedisClient& inactiveClient);
    private RedisClient InitNewClient(RedisClient client);
    public sealed virtual void DisposeClient(RedisNativeClient client);
    public void DisposeWriteClient(RedisNativeClient client);
    public Dictionary`2<string, string> GetStats();
    private void AssertValidPool();
    public Int32[] GetClientPoolActiveStates();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected void Dispose(RedisClient redisClient);
    public sealed virtual ICacheClient GetCacheClient();
    public sealed virtual ICacheClient GetReadOnlyCacheClient();
    public sealed virtual Dictionary`2<string, long> get_Stats();
}
public class ServiceStack.Redis.RedisNativeClient : object {
    private static ILog log;
    internal static int Success;
    internal static int OneGb;
    private Byte[] endData;
    private int clientPort;
    private string lastCommand;
    private SocketException lastSocketException;
    internal long deactivatedAtTicks;
    protected Socket socket;
    [ObsoleteAttribute("The direct stream is no longer directly available", "True")]
protected BufferedStream Bstream;
    protected SslStream sslStream;
    private BufferedReader bufferedReader;
    private IRedisTransactionBase transaction;
    private IRedisPipelineShared pipeline;
    private static int YES;
    private static int NO;
    private int active;
    private Guid rentId;
    [CompilerGeneratedAttribute]
private IHandleClientDispose <ClientManager>k__BackingField;
    internal long LastConnectedAtTimestamp;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ssl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SslProtocols> <SslProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespacePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectTimeout>k__BackingField;
    private TimeSpan retryTimeout;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SendTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReceiveTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdleTimeOutSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRedisNativeClient> <ConnectionFilter>k__BackingField;
    private long db;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    private static string OK;
    private static string QUEUED;
    private static Timer UsageTimer;
    private static int __requestsPerHour;
    private static int Unknown;
    [CompilerGeneratedAttribute]
private static int <ServerVersionNumber>k__BackingField;
    private static long IdCounter;
    [CompilerGeneratedAttribute]
private long <ClientId>k__BackingField;
    private string LogPrefix;
    public static string ErrorConnect;
    private List`1<ArraySegment`1<byte>> cmdBuffer;
    private Byte[] currentBuffer;
    private int currentBufferIndex;
    [CompilerGeneratedAttribute]
private Action <OnBeforeFlush>k__BackingField;
    internal Nullable`1<TrackThread> TrackThread;
    internal IRedisPipelineSharedAsync PipelineAsync { get; }
    public Nullable`1<DateTime> DeactivatedAt { get; public set; }
    public bool HadExceptions { get; }
    internal Socket Socket { get; }
    internal bool Active { get; private set; }
    internal IHandleClientDispose ClientManager { get; internal set; }
    public long LastConnectedSecs { get; }
    public long Id { get; public set; }
    public string Host { get; private set; }
    public int Port { get; private set; }
    public bool Ssl { get; private set; }
    public Nullable`1<SslProtocols> SslProtocols { get; private set; }
    public string NamespacePrefix { get; public set; }
    public int ConnectTimeout { get; public set; }
    public int RetryTimeout { get; public set; }
    public int RetryCount { get; public set; }
    public int SendTimeout { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string Client { get; public set; }
    public int IdleTimeOutSecs { get; public set; }
    public Action`1<IRedisNativeClient> ConnectionFilter { get; public set; }
    internal IRedisTransactionBase Transaction { get; internal set; }
    internal IRedisPipelineShared Pipeline { get; internal set; }
    public long Db { get; public set; }
    public long DbSize { get; }
    public DateTime LastSave { get; }
    public Dictionary`2<string, string> Info { get; }
    public string ServerVersion { get; }
    internal bool IsDisposed { get; internal set; }
    public bool IsManagedClient { get; }
    public static int RequestsPerHour { get; }
    public static int ServerVersionNumber { get; public set; }
    public long ClientId { get; }
    public bool HasConnected { get; }
    public Action OnBeforeFlush { get; public set; }
    public RedisNativeClient(string connectionString);
    public RedisNativeClient(RedisEndpoint config);
    public RedisNativeClient(string host, int port);
    public RedisNativeClient(string host, int port, string password, long db);
    private static RedisNativeClient();
    internal IRedisPipelineSharedAsync get_PipelineAsync();
    private static void AssertNotNull(object obj, string name);
    private IRedisNativeClientAsync AsAsync();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.TimeAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ExistsAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.SetAsync(string key, Byte[] value, bool exists, long expirySeconds, long expiryMilliseconds, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SetAsync(string key, Byte[] value, long expirySeconds, long expiryMilliseconds, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.GetAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.DelAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<ScanResult> ServiceStack.Redis.IRedisNativeClientAsync.ScanAsync(ulong cursor, int count, string match, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.TypeAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.RPushAsync(string listId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SAddAsync(string setId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZAddAsync(string setId, double score, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZAddAsync(string setId, long score, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.HSetAsync(string hashId, Byte[] key, Byte[] value, CancellationToken token);
    internal ValueTask`1<long> HSetAsync(Byte[] hashId, Byte[] key, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.RandomKeyAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.RenameAsync(string oldKeyName, string newKeyName, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.RenameNxAsync(string oldKeyName, string newKeyName, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.MSetAsync(Byte[][] keys, Byte[][] values, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.MSetAsync(String[] keys, Byte[][] values, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SelectAsync(long db, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.DelAsync(String[] keys, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.ExpireAsync(string key, int seconds, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.PExpireAsync(string key, long ttlMs, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.ExpireAtAsync(string key, long unixTime, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.PExpireAtAsync(string key, long unixTimeMs, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.TtlAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.PTtlAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.PingAsync(CancellationToken token);
    private static ValueTask`1<bool> IsString(ValueTask`1<string> pending, string expected);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.EchoAsync(string text, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.DbSizeAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<DateTime> ServiceStack.Redis.IRedisNativeClientAsync.LastSaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.BgSaveAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ShutdownAsync(bool noSave, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.BgRewriteAofAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.QuitAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.FlushDbAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.FlushAllAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SlaveOfAsync(string hostname, int port, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SlaveOfNoOneAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.KeysAsync(string pattern, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.MGetAsync(String[] keys, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SetExAsync(string key, int expireInSeconds, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.WatchAsync(String[] keys, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.UnWatchAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.AppendAsync(string key, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.GetRangeAsync(string key, int fromIndex, int toIndex, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SetRangeAsync(string key, int offset, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.GetBitAsync(string key, int offset, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SetBitAsync(string key, int offset, int value, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.PersistAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.PSetExAsync(string key, long expireInMs, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SetNXAsync(string key, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.SPopAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SPopAsync(string setId, int count, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SlowlogResetAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<Object[]> ServiceStack.Redis.IRedisNativeClientAsync.SlowlogGetAsync(Nullable`1<int> top, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZCardAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZCountAsync(string setId, double min, double max, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisNativeClientAsync.ZScoreAsync(string setId, Byte[] value, CancellationToken token);
    protected ValueTask`1<RedisData> RawCommandAsync(CancellationToken token, Object[] cmdWithArgs);
    private sealed virtual override ValueTask`1<Dictionary`2<string, string>> ServiceStack.Redis.IRedisNativeClientAsync.InfoAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRangeByLexAsync(string setId, string min, string max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZLexCountAsync(string setId, string min, string max, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRemRangeByLexAsync(string setId, string min, string max, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.CalculateSha1Async(string luaBody, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ScriptExistsAsync(Byte[][] sha1Refs, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ScriptFlushAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ScriptKillAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.ScriptLoadAsync(string body, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.StrLenAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.LLenAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SCardAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.HLenAsync(string hashId, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.EvalCommandAsync(string luaBody, int numberKeysInArgs, Byte[][] keys, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaCommandAsync(string sha1, int numberKeysInArgs, Byte[][] keys, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.EvalAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.EvalIntAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaIntAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.EvalStrAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaStrAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SMembersAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SAddAsync(string setId, Byte[][] values, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SRemAsync(string setId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.IncrByAsync(string key, long count, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisNativeClientAsync.IncrByFloatAsync(string key, double incrBy, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.IncrAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.DecrAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.DecrByAsync(string key, long count, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ConfigGetAsync(string pattern, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ConfigSetAsync(string item, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ConfigResetStatAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ConfigRewriteAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.DebugSegfaultAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.DumpAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.RestoreAsync(string key, long expireMs, Byte[] dumpValue, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.MigrateAsync(string host, int port, string key, int destinationDb, long timeoutMs, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.MoveAsync(string key, int db, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ObjectIdleTimeAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-RoleAsync>d__106")]
private sealed virtual override ValueTask`1<RedisText> ServiceStack.Redis.IRedisNativeClientAsync.RoleAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.RawCommandAsync(Object[] cmdWithArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.RawCommandAsync(Byte[][] cmdWithBinaryArgs, CancellationToken token);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.ClientGetNameAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ClientSetNameAsync(string name, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ClientKillAsync(string clientAddr, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ClientKillAsync(string addr, string id, string type, string skipMe, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.ClientListAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.ClientPauseAsync(int timeOutMs, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.MSetNxAsync(Byte[][] keys, Byte[][] values, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.MSetNxAsync(String[] keys, Byte[][] values, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.GetSetAsync(string key, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.MGetAsync(Byte[][] keys, CancellationToken token);
    private sealed virtual override ValueTask`1<ScanResult> ServiceStack.Redis.IRedisNativeClientAsync.SScanAsync(string setId, ulong cursor, int count, string match, CancellationToken token);
    private sealed virtual override ValueTask`1<ScanResult> ServiceStack.Redis.IRedisNativeClientAsync.ZScanAsync(string setId, ulong cursor, int count, string match, CancellationToken token);
    private sealed virtual override ValueTask`1<ScanResult> ServiceStack.Redis.IRedisNativeClientAsync.HScanAsync(string hashId, ulong cursor, int count, string match, CancellationToken token);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.PfAddAsync(string key, Byte[][] elements, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.PfCountAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.PfMergeAsync(string toKeyId, String[] fromKeys, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SortAsync(string listOrSetId, SortOptions sortOptions, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.LRangeAsync(string listId, int startingFrom, int endingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.RPushXAsync(string listId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.LPushAsync(string listId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.LPushXAsync(string listId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.LTrimAsync(string listId, int keepStartingFrom, int keepEndingAt, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.LRemAsync(string listId, int removeNoOfMatches, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.LIndexAsync(string listId, int listIndex, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.LInsertAsync(string listId, bool insertBefore, Byte[] pivot, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.LSetAsync(string listId, int listIndex, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.LPopAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.RPopAsync(string listId, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.BLPopAsync(string listId, int timeOutSecs, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.BLPopAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-BLPopValueAsync>d__139")]
private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.BLPopValueAsync(string listId, int timeOutSecs, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-BLPopValueAsync>d__140")]
private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.BLPopValueAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.BRPopAsync(string listId, int timeOutSecs, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.BRPopAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.RPopLPushAsync(string fromListId, string toListId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-BRPopValueAsync>d__144")]
private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.BRPopValueAsync(string listId, int timeOutSecs, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-BRPopValueAsync>d__145")]
private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.BRPopValueAsync(String[] listIds, int timeOutSecs, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-BRPopLPushAsync>d__146")]
private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.BRPopLPushAsync(string fromListId, string toListId, int timeOutSecs, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SMoveAsync(string fromSetId, string toSetId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.SIsMemberAsync(string setId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SInterAsync(String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SInterStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SUnionAsync(String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SUnionStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SDiffAsync(string fromSetId, String[] withSetIds, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SDiffStoreAsync(string intoSetId, string fromSetId, String[] withSetIds, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.SRandMemberAsync(string setId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRemAsync(string setId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRemAsync(string setId, Byte[][] values, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisNativeClientAsync.ZIncrByAsync(string setId, double incrBy, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisNativeClientAsync.ZIncrByAsync(string setId, long incrBy, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRankAsync(string setId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRevRankAsync(string setId, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRangeAsync(string setId, int min, int max, CancellationToken token);
    private ValueTask`1<Byte[][]> GetRangeAsync(Byte[] commandBytes, string setId, int min, int max, bool withScores, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRangeWithScoresAsync(string setId, int min, int max, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRevRangeAsync(string setId, int min, int max, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRevRangeWithScoresAsync(string setId, int min, int max, CancellationToken token);
    private ValueTask`1<Byte[][]> GetRangeByScoreAsync(Byte[] commandBytes, string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, bool withScores, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRangeByScoreAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRangeByScoreAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRangeByScoreWithScoresAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRangeByScoreWithScoresAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRevRangeByScoreAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRevRangeByScoreAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRevRangeByScoreWithScoresAsync(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ZRevRangeByScoreWithScoresAsync(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRemRangeByRankAsync(string setId, int min, int max, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRemRangeByScoreAsync(string setId, double fromScore, double toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZRemRangeByScoreAsync(string setId, long fromScore, long toScore, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZUnionStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZInterStoreAsync(string intoSetId, String[] setIds, CancellationToken token);
    internal ValueTask`1<long> ZInterStoreAsync(string intoSetId, String[] setIds, String[] args, CancellationToken token);
    internal ValueTask`1<long> ZUnionStoreAsync(string intoSetId, String[] setIds, String[] args, CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.HMSetAsync(string hashId, Byte[][] keys, Byte[][] values, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.HSetNXAsync(string hashId, Byte[] key, Byte[] value, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.HIncrbyAsync(string hashId, Byte[] key, int incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisNativeClientAsync.HIncrbyFloatAsync(string hashId, Byte[] key, double incrementBy, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[]> ServiceStack.Redis.IRedisNativeClientAsync.HGetAsync(string hashId, Byte[] key, CancellationToken token);
    private ValueTask`1<Byte[]> HGetAsync(Byte[] hashId, Byte[] key, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.HMGetAsync(string hashId, Byte[][] keys, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.HDelAsync(string hashId, Byte[] key, CancellationToken token);
    private ValueTask`1<long> HDelAsync(Byte[] hashId, Byte[] key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.HExistsAsync(string hashId, Byte[] key, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.HKeysAsync(string hashId, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.HValsAsync(string hashId, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.HGetAllAsync(string hashId, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.GeoAddAsync(string key, double longitude, double latitude, string member, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.GeoAddAsync(string key, RedisGeo[] geoPoints, CancellationToken token);
    private sealed virtual override ValueTask`1<double> ServiceStack.Redis.IRedisNativeClientAsync.GeoDistAsync(string key, string fromMember, string toMember, string unit, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-GeoHashAsync>d__199")]
private sealed virtual override ValueTask`1<String[]> ServiceStack.Redis.IRedisNativeClientAsync.GeoHashAsync(string key, String[] members, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-GeoPosAsync>d__200")]
private sealed virtual override ValueTask`1<List`1<RedisGeo>> ServiceStack.Redis.IRedisNativeClientAsync.GeoPosAsync(string key, String[] members, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-GeoRadiusAsync>d__201")]
private sealed virtual override ValueTask`1<List`1<RedisGeoResult>> ServiceStack.Redis.IRedisNativeClientAsync.GeoRadiusAsync(string key, double longitude, double latitude, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ServiceStack-Redis-IRedisNativeClientAsync-GeoRadiusByMemberAsync>d__202")]
private sealed virtual override ValueTask`1<List`1<RedisGeoResult>> ServiceStack.Redis.IRedisNativeClientAsync.GeoRadiusByMemberAsync(string key, string member, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.PublishAsync(string toChannel, Byte[] message, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SubscribeAsync(String[] toChannels, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.UnSubscribeAsync(String[] fromChannels, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.PSubscribeAsync(String[] toChannelsMatchingPatterns, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.PUnSubscribeAsync(String[] fromChannelsMatchingPatterns, CancellationToken token);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ReceiveMessagesAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<IRedisSubscriptionAsync> ServiceStack.Redis.IRedisNativeClientAsync.CreateSubscriptionAsync(CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.BitCountAsync(string key, CancellationToken token);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.DelAsync(String[] keys);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SInterStoreAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SUnionAsync(String[] setIds);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.WatchAsync(String[] keys);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SubscribeAsync(String[] toChannels);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.UnSubscribeAsync(String[] toChannels);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.PSubscribeAsync(String[] toChannelsMatchingPatterns);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.PUnSubscribeAsync(String[] toChannelsMatchingPatterns);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SInterAsync(String[] setIds);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.SDiffAsync(string fromSetId, String[] withSetIds);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SDiffStoreAsync(string intoSetId, string fromSetId, String[] withSetIds);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZUnionStoreAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.ZInterStoreAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.EvalCommandAsync(string luaBody, int numberKeysInArgs, Byte[][] keys);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaCommandAsync(string sha1, int numberKeysInArgs, Byte[][] keys);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.EvalAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.EvalIntAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaIntAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.EvalStrAsync(string luaBody, int numberOfKeys, Byte[][] keysAndArgs);
    private sealed virtual override ValueTask`1<string> ServiceStack.Redis.IRedisNativeClientAsync.EvalShaStrAsync(string sha1, int numberOfKeys, Byte[][] keysAndArgs);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.RawCommandAsync(Object[] cmdWithArgs);
    private sealed virtual override ValueTask`1<RedisData> ServiceStack.Redis.IRedisNativeClientAsync.RawCommandAsync(Byte[][] cmdWithBinaryArgs);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.MGetAsync(String[] keys);
    private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisNativeClientAsync.PfAddAsync(string key, Byte[][] elements);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.HMGetAsync(string hashId, Byte[][] keysAndArgs);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.MGetAsync(Byte[][] keysAndArgs);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.SUnionStoreAsync(string intoSetId, String[] setIds);
    private sealed virtual override ValueTask`1<Byte[][]> ServiceStack.Redis.IRedisNativeClientAsync.ScriptExistsAsync(Byte[][] sha1Refs);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisNativeClientAsync.PfMergeAsync(string toKeyId, String[] fromKeys);
    private sealed virtual override ValueTask`1<long> ServiceStack.Redis.IRedisNativeClientAsync.GeoAddAsync(string key, RedisGeo[] geoPoints);
    private sealed virtual override ValueTask`1<String[]> ServiceStack.Redis.IRedisNativeClientAsync.GeoHashAsync(string key, String[] members);
    private sealed virtual override ValueTask`1<List`1<RedisGeo>> ServiceStack.Redis.IRedisNativeClientAsync.GeoPosAsync(string key, String[] members);
    public Nullable`1<DateTime> get_DeactivatedAt();
    public void set_DeactivatedAt(Nullable`1<DateTime> value);
    public sealed virtual bool get_HadExceptions();
    internal Socket get_Socket();
    internal bool get_Active();
    private void set_Active(bool value);
    [CompilerGeneratedAttribute]
internal IHandleClientDispose get_ClientManager();
    [CompilerGeneratedAttribute]
internal void set_ClientManager(IHandleClientDispose value);
    public long get_LastConnectedSecs();
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
public bool get_Ssl();
    [CompilerGeneratedAttribute]
private void set_Ssl(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<SslProtocols> get_SslProtocols();
    [CompilerGeneratedAttribute]
private void set_SslProtocols(Nullable`1<SslProtocols> value);
    [CompilerGeneratedAttribute]
public string get_NamespacePrefix();
    [CompilerGeneratedAttribute]
public void set_NamespacePrefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectTimeout(int value);
    public sealed virtual int get_RetryTimeout();
    public sealed virtual void set_RetryTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RetryCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RetryCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SendTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SendTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_ReceiveTimeout();
    [CompilerGeneratedAttribute]
public void set_ReceiveTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Username();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Password();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(string value);
    [CompilerGeneratedAttribute]
public int get_IdleTimeOutSecs();
    [CompilerGeneratedAttribute]
public void set_IdleTimeOutSecs(int value);
    [CompilerGeneratedAttribute]
public Action`1<IRedisNativeClient> get_ConnectionFilter();
    [CompilerGeneratedAttribute]
public void set_ConnectionFilter(Action`1<IRedisNativeClient> value);
    internal IRedisTransactionBase get_Transaction();
    internal void set_Transaction(IRedisTransactionBase value);
    internal IRedisPipelineShared get_Pipeline();
    internal void set_Pipeline(IRedisPipelineShared value);
    internal void EndPipeline();
    private void Init(RedisEndpoint config);
    public sealed virtual long get_Db();
    public sealed virtual void set_Db(long value);
    public void ChangeDb(long db);
    public sealed virtual long get_DbSize();
    public sealed virtual DateTime get_LastSave();
    public sealed virtual Dictionary`2<string, string> get_Info();
    private static Dictionary`2<string, string> ParseInfoResult(string lines);
    public string get_ServerVersion();
    public sealed virtual RedisData RawCommand(Object[] cmdWithArgs);
    private static Byte[][] PrepareRawCommand(Object[] cmdWithArgs);
    public sealed virtual RedisData RawCommand(Byte[][] cmdWithBinaryArgs);
    public sealed virtual bool Ping();
    public sealed virtual string Echo(string text);
    public sealed virtual void SlaveOf(string hostname, int port);
    public sealed virtual void SlaveOfNoOne();
    public sealed virtual Byte[][] ConfigGet(string pattern);
    public sealed virtual void ConfigSet(string item, Byte[] value);
    public sealed virtual void ConfigResetStat();
    public sealed virtual void ConfigRewrite();
    public sealed virtual Byte[][] Time();
    public sealed virtual void DebugSegfault();
    public void DebugSleep(double durationSecs);
    public sealed virtual Byte[] Dump(string key);
    public sealed virtual Byte[] Restore(string key, long expireMs, Byte[] dumpValue);
    public sealed virtual void Migrate(string host, int port, string key, int destinationDb, long timeoutMs);
    public sealed virtual bool Move(string key, int db);
    public sealed virtual long ObjectIdleTime(string key);
    public sealed virtual string Type(string key);
    public sealed virtual RedisKeyType GetEntryType(string key);
    private protected RedisKeyType ParseEntryType(string type);
    public sealed virtual long StrLen(string key);
    public sealed virtual void Set(string key, Byte[] value);
    public void Set(string key, Byte[] value, int expirySeconds, long expiryMs);
    public void Set(Byte[] key, Byte[] value, int expirySeconds, long expiryMs);
    public bool Set(string key, Byte[] value, bool exists, int expirySeconds, long expiryMs);
    public sealed virtual void SetEx(string key, int expireInSeconds, Byte[] value);
    public void SetEx(Byte[] key, int expireInSeconds, Byte[] value);
    public sealed virtual bool Persist(string key);
    public sealed virtual void PSetEx(string key, long expireInMs, Byte[] value);
    public sealed virtual long SetNX(string key, Byte[] value);
    public sealed virtual void MSet(Byte[][] keys, Byte[][] values);
    public sealed virtual void MSet(String[] keys, Byte[][] values);
    public sealed virtual bool MSetNx(Byte[][] keys, Byte[][] values);
    public sealed virtual bool MSetNx(String[] keys, Byte[][] values);
    public sealed virtual Byte[] Get(string key);
    public Byte[] Get(Byte[] key);
    public Object[] Slowlog(Nullable`1<int> top);
    public void SlowlogReset();
    public Byte[] GetBytes(string key);
    public sealed virtual Byte[] GetSet(string key, Byte[] value);
    private static void GetSetAssertArgs(string key, Byte[]& value);
    public sealed virtual long Exists(string key);
    public sealed virtual long Del(string key);
    public long Del(Byte[] key);
    public sealed virtual long Del(String[] keys);
    public sealed virtual long Incr(string key);
    public sealed virtual long IncrBy(string key, int count);
    public long IncrBy(string key, long count);
    public sealed virtual double IncrByFloat(string key, double incrBy);
    public sealed virtual long Decr(string key);
    public sealed virtual long DecrBy(string key, int count);
    public sealed virtual long Append(string key, Byte[] value);
    public sealed virtual Byte[] GetRange(string key, int fromIndex, int toIndex);
    public sealed virtual long SetRange(string key, int offset, Byte[] value);
    public sealed virtual long GetBit(string key, int offset);
    public sealed virtual long SetBit(string key, int offset, int value);
    public long BitCount(string key);
    public sealed virtual string RandomKey();
    public sealed virtual void Rename(string oldKeyName, string newKeyName);
    private protected static void CheckRenameKeys(string oldKeyName, string newKeyName);
    public sealed virtual bool RenameNx(string oldKeyName, string newKeyName);
    public sealed virtual bool Expire(string key, int seconds);
    public bool Expire(Byte[] key, int seconds);
    public sealed virtual bool PExpire(string key, long ttlMs);
    public bool PExpire(Byte[] key, long ttlMs);
    public sealed virtual bool ExpireAt(string key, long unixTime);
    public sealed virtual bool PExpireAt(string key, long unixTimeMs);
    public sealed virtual long Ttl(string key);
    public sealed virtual long PTtl(string key);
    public sealed virtual void Save();
    public sealed virtual void SaveAsync();
    public sealed virtual void BgSave();
    public sealed virtual void Shutdown();
    public sealed virtual void ShutdownNoSave();
    public sealed virtual void BgRewriteAof();
    public sealed virtual void Quit();
    public sealed virtual void FlushDb();
    public sealed virtual void FlushAll();
    public sealed virtual RedisText Role();
    public sealed virtual string ClientGetName();
    public sealed virtual void ClientSetName(string name);
    private static void ClientValidateName(string name);
    public sealed virtual void ClientPause(int timeOutMs);
    public sealed virtual Byte[] ClientList();
    public sealed virtual void ClientKill(string clientAddr);
    public sealed virtual long ClientKill(string addr, string id, string type, string skipMe);
    private static Byte[][] ClientKillPrepareArgs(string addr, string id, string type, string skipMe);
    public sealed virtual Byte[][] Keys(string pattern);
    public sealed virtual Byte[][] MGet(Byte[][] keys);
    private static Byte[][] MGetPrepareArgs(Byte[][] keys);
    public sealed virtual Byte[][] MGet(String[] keys);
    public sealed virtual void Watch(String[] keys);
    public sealed virtual void UnWatch();
    internal void Multi();
    internal void Exec();
    internal void Discard();
    public sealed virtual ScanResult Scan(ulong cursor, int count, string match);
    public sealed virtual ScanResult SScan(string setId, ulong cursor, int count, string match);
    public sealed virtual ScanResult ZScan(string setId, ulong cursor, int count, string match);
    public sealed virtual ScanResult HScan(string hashId, ulong cursor, int count, string match);
    internal ScanResult SendExpectScanResult(Byte[] cmd, Byte[][] args);
    internal static ScanResult ParseScanResult(Object[] multiData);
    public sealed virtual bool PfAdd(string key, Byte[][] elements);
    public sealed virtual long PfCount(string key);
    public sealed virtual void PfMerge(string toKeyId, String[] fromKeys);
    public sealed virtual Byte[][] SMembers(string setId);
    public sealed virtual long SAdd(string setId, Byte[] value);
    public sealed virtual long SAdd(string setId, Byte[][] values);
    public sealed virtual long SRem(string setId, Byte[] value);
    public long SRem(string setId, Byte[][] values);
    public sealed virtual Byte[] SPop(string setId);
    public sealed virtual Byte[][] SPop(string setId, int count);
    public sealed virtual void SMove(string fromSetId, string toSetId, Byte[] value);
    public sealed virtual long SCard(string setId);
    public sealed virtual long SIsMember(string setId, Byte[] value);
    public sealed virtual Byte[][] SInter(String[] setIds);
    public sealed virtual void SInterStore(string intoSetId, String[] setIds);
    public sealed virtual Byte[][] SUnion(String[] setIds);
    public sealed virtual void SUnionStore(string intoSetId, String[] setIds);
    public sealed virtual Byte[][] SDiff(string fromSetId, String[] withSetIds);
    public sealed virtual void SDiffStore(string intoSetId, string fromSetId, String[] withSetIds);
    public sealed virtual Byte[] SRandMember(string setId);
    public Byte[][] SRandMember(string setId, int count);
    public sealed virtual Byte[][] LRange(string listId, int startingFrom, int endingAt);
    public sealed virtual Byte[][] Sort(string listOrSetId, SortOptions sortOptions);
    private static Byte[][] SortPrepareArgs(string listOrSetId, SortOptions sortOptions);
    public sealed virtual long RPush(string listId, Byte[] value);
    public long RPush(string listId, Byte[][] values);
    public sealed virtual long RPushX(string listId, Byte[] value);
    public sealed virtual long LPush(string listId, Byte[] value);
    public long LPush(string listId, Byte[][] values);
    public sealed virtual long LPushX(string listId, Byte[] value);
    public sealed virtual void LTrim(string listId, int keepStartingFrom, int keepEndingAt);
    public sealed virtual long LRem(string listId, int removeNoOfMatches, Byte[] value);
    public sealed virtual long LLen(string listId);
    public sealed virtual Byte[] LIndex(string listId, int listIndex);
    public sealed virtual void LInsert(string listId, bool insertBefore, Byte[] pivot, Byte[] value);
    public sealed virtual void LSet(string listId, int listIndex, Byte[] value);
    public sealed virtual Byte[] LPop(string listId);
    public sealed virtual Byte[] RPop(string listId);
    public sealed virtual Byte[][] BLPop(string listId, int timeOutSecs);
    public sealed virtual Byte[][] BLPop(String[] listIds, int timeOutSecs);
    public sealed virtual Byte[] BLPopValue(string listId, int timeOutSecs);
    public sealed virtual Byte[][] BLPopValue(String[] listIds, int timeOutSecs);
    public sealed virtual Byte[][] BRPop(string listId, int timeOutSecs);
    public sealed virtual Byte[][] BRPop(String[] listIds, int timeOutSecs);
    public sealed virtual Byte[] BRPopValue(string listId, int timeOutSecs);
    public sealed virtual Byte[][] BRPopValue(String[] listIds, int timeOutSecs);
    public sealed virtual Byte[] RPopLPush(string fromListId, string toListId);
    public sealed virtual Byte[] BRPopLPush(string fromListId, string toListId, int timeOutSecs);
    public List`1<Dictionary`2<string, string>> SentinelMasters();
    public Dictionary`2<string, string> SentinelMaster(string masterName);
    public List`1<Dictionary`2<string, string>> SentinelSentinels(string masterName);
    public List`1<Dictionary`2<string, string>> SentinelSlaves(string masterName);
    public List`1<string> SentinelGetMasterAddrByName(string masterName);
    public void SentinelFailover(string masterName);
    private static void AssertSetIdAndValue(string setId, Byte[] value);
    public sealed virtual long ZAdd(string setId, double score, Byte[] value);
    public sealed virtual long ZAdd(string setId, long score, Byte[] value);
    public long ZAdd(string setId, List`1<KeyValuePair`2<Byte[], double>> pairs);
    public long ZAdd(string setId, List`1<KeyValuePair`2<Byte[], long>> pairs);
    public sealed virtual long ZRem(string setId, Byte[] value);
    public sealed virtual long ZRem(string setId, Byte[][] values);
    public sealed virtual double ZIncrBy(string setId, double incrBy, Byte[] value);
    public sealed virtual double ZIncrBy(string setId, long incrBy, Byte[] value);
    public sealed virtual long ZRank(string setId, Byte[] value);
    public sealed virtual long ZRevRank(string setId, Byte[] value);
    private Byte[][] GetRange(Byte[] commandBytes, string setId, int min, int max, bool withScores);
    private static Byte[][] GetRangeArgs(Byte[] commandBytes, string setId, int min, int max, bool withScores);
    public sealed virtual Byte[][] ZRange(string setId, int min, int max);
    public sealed virtual Byte[][] ZRangeWithScores(string setId, int min, int max);
    public sealed virtual Byte[][] ZRevRange(string setId, int min, int max);
    public sealed virtual Byte[][] ZRevRangeWithScores(string setId, int min, int max);
    private Byte[][] GetRangeByScore(Byte[] commandBytes, string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, bool withScores);
    private static Byte[][] GetRangeByScoreArgs(Byte[] commandBytes, string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take, bool withScores);
    private Byte[][] GetRangeByScore(Byte[] commandBytes, string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take, bool withScores);
    public sealed virtual Byte[][] ZRangeByScore(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRangeByScore(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRangeByScoreWithScores(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRangeByScoreWithScores(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRevRangeByScore(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRevRangeByScore(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRevRangeByScoreWithScores(string setId, double min, double max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRevRangeByScoreWithScores(string setId, long min, long max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual long ZRemRangeByRank(string setId, int min, int max);
    public sealed virtual long ZRemRangeByScore(string setId, double fromScore, double toScore);
    public sealed virtual long ZRemRangeByScore(string setId, long fromScore, long toScore);
    public sealed virtual long ZCard(string setId);
    public long ZCount(string setId, double min, double max);
    public long ZCount(string setId, long min, long max);
    public sealed virtual double ZScore(string setId, Byte[] value);
    public sealed virtual long ZUnionStore(string intoSetId, String[] setIds);
    public long ZUnionStore(string intoSetId, String[] setIds, String[] args);
    public sealed virtual long ZInterStore(string intoSetId, String[] setIds);
    public long ZInterStore(string intoSetId, String[] setIds, String[] args);
    private static Byte[][] GetZRangeByLexArgs(string setId, string min, string max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual Byte[][] ZRangeByLex(string setId, string min, string max, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual long ZLexCount(string setId, string min, string max);
    public sealed virtual long ZRemRangeByLex(string setId, string min, string max);
    private static void AssertHashIdAndKey(object hashId, Byte[] key);
    public sealed virtual long HSet(string hashId, Byte[] key, Byte[] value);
    public long HSet(Byte[] hashId, Byte[] key, Byte[] value);
    public sealed virtual long HSetNX(string hashId, Byte[] key, Byte[] value);
    public sealed virtual void HMSet(string hashId, Byte[][] keys, Byte[][] values);
    public sealed virtual long HIncrby(string hashId, Byte[] key, int incrementBy);
    public long HIncrby(string hashId, Byte[] key, long incrementBy);
    public sealed virtual double HIncrbyFloat(string hashId, Byte[] key, double incrementBy);
    public sealed virtual Byte[] HGet(string hashId, Byte[] key);
    public Byte[] HGet(Byte[] hashId, Byte[] key);
    public sealed virtual Byte[][] HMGet(string hashId, Byte[][] keys);
    public sealed virtual long HDel(string hashId, Byte[] key);
    public long HDel(Byte[] hashId, Byte[] key);
    public long HDel(string hashId, Byte[][] keys);
    public sealed virtual long HExists(string hashId, Byte[] key);
    public sealed virtual long HLen(string hashId);
    public sealed virtual Byte[][] HKeys(string hashId);
    public sealed virtual Byte[][] HVals(string hashId);
    public sealed virtual Byte[][] HGetAll(string hashId);
    public sealed virtual long Publish(string toChannel, Byte[] message);
    public sealed virtual Byte[][] ReceiveMessages();
    public virtual IRedisSubscription CreateSubscription();
    public sealed virtual Byte[][] Subscribe(String[] toChannels);
    public sealed virtual Byte[][] UnSubscribe(String[] fromChannels);
    public sealed virtual Byte[][] PSubscribe(String[] toChannelsMatchingPatterns);
    public sealed virtual Byte[][] PUnSubscribe(String[] fromChannelsMatchingPatterns);
    public RedisPipelineCommand CreatePipelineCommand();
    public sealed virtual long GeoAdd(string key, double longitude, double latitude, string member);
    public sealed virtual long GeoAdd(string key, RedisGeo[] geoPoints);
    private static Byte[][] GeoAddPrepareArgs(string key, RedisGeo[] geoPoints);
    public sealed virtual double GeoDist(string key, string fromMember, string toMember, string unit);
    public sealed virtual String[] GeoHash(string key, String[] members);
    public sealed virtual List`1<RedisGeo> GeoPos(string key, String[] members);
    private static List`1<RedisGeo> GeoPosParseResult(String[] members, RedisData data);
    public sealed virtual List`1<RedisGeoResult> GeoRadius(string key, double longitude, double latitude, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc);
    private static void GetRadiusParseResult(string unit, bool withCoords, bool withDist, bool withHash, List`1<RedisGeoResult> to, RedisData data);
    private static Byte[][] GeoRadiusPrepareArgs(string key, double longitude, double latitude, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc);
    public sealed virtual List`1<RedisGeoResult> GeoRadiusByMember(string key, string member, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc);
    private static void GeoRadiusByMemberParseResult(string unit, bool withCoords, bool withDist, bool withHash, List`1<RedisGeoResult> to, RedisData data);
    private static Byte[][] GeoRadiusByMemberPrepareArgs(string key, string member, double radius, string unit, bool withCoords, bool withDist, bool withHash, Nullable`1<int> count, Nullable`1<bool> asc);
    [CompilerGeneratedAttribute]
internal bool get_IsDisposed();
    [CompilerGeneratedAttribute]
internal void set_IsDisposed(bool value);
    public bool get_IsManagedClient();
    public virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    internal void DisposeConnection();
    private void SafeConnectionClose();
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<SendExpectMultiDataAsync>d__622")]
private ValueTask`1<Byte[][]> SendExpectMultiDataAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    protected ValueTask SendWithoutReadAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    private ValueTask`1<long> SendExpectLongAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    private ValueTask`1<double> SendExpectDoubleAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    protected ValueTask`1<string> SendExpectStringAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    private ValueTask SendExpectSuccessAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    private ValueTask`1<Byte[]> SendExpectDataAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    private ValueTask`1<string> SendExpectCodeAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    private ValueTask`1<ScanResult> SendExpectScanResultAsync(CancellationToken token, Byte[] cmd, Byte[][] args);
    private ValueTask`1<Object[]> SendExpectDeeplyNestedMultiDataAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    private ValueTask`1<Object[]> ReadDeeplyNestedMultiDataAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ReadDeeplyNestedMultiDataItemAsync>d__633")]
private ValueTask`1<object> ReadDeeplyNestedMultiDataItemAsync(CancellationToken token);
    protected ValueTask`1<RedisData> SendExpectComplexResponseAsync(CancellationToken token, Byte[][] cmdWithBinaryArgs);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ReadComplexResponseAsync>d__635")]
private ValueTask`1<RedisData> ReadComplexResponseAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<SendReceiveAsync>d__636`1")]
private ValueTask`1<T> SendReceiveAsync(Byte[][] cmdWithBinaryArgs, Func`2<CancellationToken, ValueTask`1<T>> fn, CancellationToken token, Action`1<Func`2<CancellationToken, ValueTask`1<T>>> completePipelineFn, bool sendWithoutRead, string operation);
    internal ValueTask FlushSendBufferAsync(CancellationToken token);
    private ValueTask`1<int> SafeReadByteAsync(CancellationToken& token, string name);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ReadLineAsync>d__639")]
private ValueTask`1<string> ReadLineAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ParseSingleLineAsync>d__640")]
private ValueTask`1<Byte[]> ParseSingleLineAsync(string r, CancellationToken token);
    private ValueTask`1<Byte[]> ReadDataAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ExpectCodeAsync>d__642")]
private ValueTask`1<string> ExpectCodeAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ReadMultiDataAsync>d__643")]
private ValueTask`1<Byte[][]> ReadMultiDataAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ReadLongAsync>d__644")]
internal ValueTask`1<long> ReadLongAsync(CancellationToken token);
    private ValueTask`1<double> ReadDoubleAsync(CancellationToken token);
    internal ValueTask ExpectOkAsync(CancellationToken token);
    internal ValueTask ExpectQueuedAsync(CancellationToken token);
    internal ValueTask`1<long> ExpectSuccessFnAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ExpectSuccessAsync>d__649")]
internal ValueTask ExpectSuccessAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ExpectWordAsync>d__650")]
private ValueTask ExpectWordAsync(string word, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<ReadMultiDataResultCountAsync>d__651")]
internal ValueTask`1<int> ReadMultiDataResultCountAsync(CancellationToken token);
    public static int get_RequestsPerHour();
    [CompilerGeneratedAttribute]
public static int get_ServerVersionNumber();
    [CompilerGeneratedAttribute]
public static void set_ServerVersionNumber(int value);
    [CompilerGeneratedAttribute]
public long get_ClientId();
    private void logDebug(object message);
    private void logError(object message);
    private void logError(object message, Exception ex);
    public int AssertServerVersionNumber();
    public static void DisposeTimers();
    private void Connect();
    public virtual void OnConnected();
    protected string ReadLine();
    public bool get_HasConnected();
    public bool IsSocketConnected();
    internal bool AssertConnectedSocket();
    private bool TryConnectIfNeeded();
    private bool Reconnect();
    private RedisResponseException CreateResponseError(string error);
    private RedisRetryableException CreateNoMoreDataError();
    private RedisRetryableException CreateRetryableResponseError(string error);
    private RedisException CreateConnectionError(Exception originalEx);
    private static Byte[] GetCmdBytes(char cmdPrefix, int noOfLines);
    protected void WriteCommandToSendBuffer(Byte[][] cmdWithBinaryArgs);
    protected void SendUnmanagedExpectSuccess(Byte[][] cmdWithBinaryArgs);
    public void WriteAllToSendBuffer(Byte[][] cmdWithBinaryArgs);
    public void WriteToSendBuffer(Byte[] cmdBytes);
    private bool CouldAddToCurrentBuffer(Byte[] cmdBytes);
    private void PushCurrentBuffer();
    [CompilerGeneratedAttribute]
public Action get_OnBeforeFlush();
    [CompilerGeneratedAttribute]
public void set_OnBeforeFlush(Action value);
    internal void FlushAndResetSendBuffer();
    internal void FlushSendBuffer();
    private void SendDirectToSocket(ArraySegment`1<byte> segment);
    internal void Activate(bool newClient, string operation);
    internal void Deactivate(string operation);
    public void ResetSendBuffer();
    private void AssertNotDisposed();
    private int SafeReadByte(string name);
    protected T SendReceive(Byte[][] cmdWithBinaryArgs, Func`1<T> fn, Action`1<Func`1<T>> completePipelineFn, bool sendWithoutRead, string operation);
    private RedisException CreateRetryTimeoutException(TimeSpan retryTimeout, Exception originalEx);
    private Exception GetRetryableException(Exception outerEx);
    private static int GetBackOffMultiplier(int i);
    protected void SendWithoutRead(Byte[][] cmdWithBinaryArgs);
    protected void SendExpectSuccess(Byte[][] cmdWithBinaryArgs);
    protected long SendExpectLong(Byte[][] cmdWithBinaryArgs);
    protected Byte[] SendExpectData(Byte[][] cmdWithBinaryArgs);
    protected double SendExpectDouble(Byte[][] cmdWithBinaryArgs);
    protected string SendExpectCode(Byte[][] cmdWithBinaryArgs);
    protected Byte[][] SendExpectMultiData(Byte[][] cmdWithBinaryArgs);
    protected Object[] SendExpectDeeplyNestedMultiData(Byte[][] cmdWithBinaryArgs);
    protected RedisData SendExpectComplexResponse(Byte[][] cmdWithBinaryArgs);
    protected List`1<Dictionary`2<string, string>> SendExpectStringDictionaryList(Byte[][] cmdWithBinaryArgs);
    private static Dictionary`2<string, string> ToDictionary(RedisData data);
    protected string SendExpectString(Byte[][] cmdWithBinaryArgs);
    protected void Log(string fmt, Object[] args);
    protected void CmdLog(Byte[][] args);
    protected long ExpectSuccessFn();
    protected void ExpectSuccess();
    private void ExpectWord(string word);
    private string ExpectCode();
    internal void ExpectOk();
    internal void ExpectQueued();
    public long ReadLong();
    private long ParseLong(int c, string s);
    public double ReadDouble();
    public static double ParseDouble(Byte[] doubleBytes);
    private Byte[] ReadData();
    private Byte[] ParseSingleLine(string r);
    private Byte[][] ReadMultiData();
    private Object[] ReadDeeplyNestedMultiData();
    private object ReadDeeplyNestedMultiDataItem();
    internal RedisData ReadComplexResponse();
    internal int ReadMultiDataResultCount();
    private static void AssertListIdAndValue(string listId, Byte[] value);
    private static Byte[][] MergeCommandWithKeysAndValues(Byte[] cmd, Byte[][] keys, Byte[][] values);
    private static Byte[][] MergeCommandWithKeysAndValues(Byte[] cmd, Byte[] firstArg, Byte[][] keys, Byte[][] values);
    private static Byte[][] MergeCommandWithKeysAndValues(Byte[][] firstParams, Byte[][] keys, Byte[][] values);
    private static Byte[][] MergeCommandWithArgs(Byte[] cmd, String[] args);
    private static Byte[][] MergeCommandWithArgs(Byte[] cmd, Byte[][] args);
    private static Byte[][] MergeCommandWithArgs(Byte[] cmd, Byte[] firstArg, Byte[][] args);
    protected Byte[][] ConvertToBytes(String[] keys);
    protected Byte[][] MergeAndConvertToBytes(String[] keys, String[] args);
    public sealed virtual long EvalInt(string luaBody, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual long EvalShaInt(string sha1, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual string EvalStr(string luaBody, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual string EvalShaStr(string sha1, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual Byte[][] Eval(string luaBody, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual Byte[][] EvalSha(string sha1, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual RedisData EvalCommand(string luaBody, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual RedisData EvalShaCommand(string sha1, int numberKeysInArgs, Byte[][] keys);
    public sealed virtual string CalculateSha1(string luaBody);
    public sealed virtual Byte[] ScriptLoad(string luaBody);
    public sealed virtual Byte[][] ScriptExists(Byte[][] sha1Refs);
    public sealed virtual void ScriptFlush();
    public sealed virtual void ScriptKill();
    [CompilerGeneratedAttribute]
internal static void <AssertNotNull>g__Throw|2_0(string name);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<<IsString>g__Awaited|33_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<bool> <IsString>g__Awaited|33_0(ValueTask`1<string> pending, string expected);
    [CompilerGeneratedAttribute]
private void <SendExpectSuccessAsync>b__627_0(Func`2<CancellationToken, ValueTask`1<long>> f);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<<FlushSendBufferAsync>g__WriteAsync|637_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <FlushSendBufferAsync>g__WriteAsync|637_0(Stream destination, List`1<ArraySegment`1<byte>> buffer, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<<ReadDataAsync>g__Awaited|641_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<Byte[]> <ReadDataAsync>g__Awaited|641_0(RedisNativeClient this, ValueTask`1<string> pending, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisNativeClient/<<ExpectSuccessFnAsync>g__Awaited|648_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<long> <ExpectSuccessFnAsync>g__Awaited|648_0(ValueTask pending);
    [CompilerGeneratedAttribute]
private void <SendExpectSuccess>b__716_0(Func`1<long> f);
}
public class ServiceStack.Redis.RedisPoolConfig : object {
    public static int DefaultMaxPoolSize;
    [CompilerGeneratedAttribute]
private int <MaxPoolSize>k__BackingField;
    public int MaxPoolSize { get; public set; }
    private static RedisPoolConfig();
    [CompilerGeneratedAttribute]
public int get_MaxPoolSize();
    [CompilerGeneratedAttribute]
public void set_MaxPoolSize(int value);
}
public class ServiceStack.Redis.RedisPubSubServer : object {
    private static ILog Log;
    private DateTime serverTimeAtStart;
    private Stopwatch startedAt;
    public Nullable`1<TimeSpan> HeartbeatInterval;
    public TimeSpan HeartbeatTimeout;
    private long lastHeartbeatTicks;
    private Timer heartbeatTimer;
    [CompilerGeneratedAttribute]
private Action <OnInit>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnStart>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnHeartbeatSent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnHeartbeatReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnStop>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, string> <OnMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, Byte[]> <OnMessageBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <OnControlCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <OnUnSubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <OnEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <OnError>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRedisPubSubServer> <OnFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSentinelSubscription>k__BackingField;
    private Random rand;
    private int doOperation;
    private long timesStarted;
    private long noOfErrors;
    private int noOfContinuousErrors;
    private string lastExMsg;
    private int status;
    private Thread bgThread;
    private long bgThreadCount;
    private static int NO;
    private static int YES;
    private int autoRestart;
    public static string AllChannelsWildCard;
    [CompilerGeneratedAttribute]
private IRedisClientsManager <ClientsManager>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Channels>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ChannelsMatching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <WaitBeforeNextRestart>k__BackingField;
    private IRedisClient masterClient;
    public Action OnInit { get; public set; }
    public Action OnStart { get; public set; }
    public Action OnHeartbeatSent { get; public set; }
    public Action OnHeartbeatReceived { get; public set; }
    public Action OnStop { get; public set; }
    public Action OnDispose { get; public set; }
    public Action`2<string, string> OnMessage { get; public set; }
    public Action`2<string, Byte[]> OnMessageBytes { get; public set; }
    public Action`1<string> OnControlCommand { get; public set; }
    public Action`1<string> OnUnSubscribe { get; public set; }
    public Action`1<string> OnEvent { get; public set; }
    public Action`1<Exception> OnError { get; public set; }
    public Action`1<IRedisPubSubServer> OnFailover { get; public set; }
    public bool IsSentinelSubscription { get; public set; }
    public bool AutoRestart { get; public set; }
    public DateTime CurrentServerTime { get; }
    public long BgThreadCount { get; }
    public IRedisClientsManager ClientsManager { get; public set; }
    public String[] Channels { get; public set; }
    public String[] ChannelsMatching { get; public set; }
    public Nullable`1<TimeSpan> WaitBeforeNextRestart { get; public set; }
    public RedisPubSubServer(IRedisClientsManager clientsManager, String[] channels);
    private static RedisPubSubServer();
    [CompilerGeneratedAttribute]
public sealed virtual Action get_OnInit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnInit(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_OnStart();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnStart(Action value);
    [CompilerGeneratedAttribute]
public Action get_OnHeartbeatSent();
    [CompilerGeneratedAttribute]
public void set_OnHeartbeatSent(Action value);
    [CompilerGeneratedAttribute]
public Action get_OnHeartbeatReceived();
    [CompilerGeneratedAttribute]
public void set_OnHeartbeatReceived(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_OnStop();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnStop(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_OnDispose();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnDispose(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<string, string> get_OnMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnMessage(Action`2<string, string> value);
    [CompilerGeneratedAttribute]
public Action`2<string, Byte[]> get_OnMessageBytes();
    [CompilerGeneratedAttribute]
public void set_OnMessageBytes(Action`2<string, Byte[]> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_OnControlCommand();
    [CompilerGeneratedAttribute]
public void set_OnControlCommand(Action`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<string> get_OnUnSubscribe();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnUnSubscribe(Action`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<string> get_OnEvent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnEvent(Action`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<Exception> get_OnError();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnError(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IRedisPubSubServer> get_OnFailover();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnFailover(Action`1<IRedisPubSubServer> value);
    [CompilerGeneratedAttribute]
public bool get_IsSentinelSubscription();
    [CompilerGeneratedAttribute]
public void set_IsSentinelSubscription(bool value);
    public bool get_AutoRestart();
    public void set_AutoRestart(bool value);
    public sealed virtual DateTime get_CurrentServerTime();
    public long get_BgThreadCount();
    [CompilerGeneratedAttribute]
public sealed virtual IRedisClientsManager get_ClientsManager();
    [CompilerGeneratedAttribute]
public void set_ClientsManager(IRedisClientsManager value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Channels();
    [CompilerGeneratedAttribute]
public void set_Channels(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ChannelsMatching();
    [CompilerGeneratedAttribute]
public void set_ChannelsMatching(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_WaitBeforeNextRestart();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WaitBeforeNextRestart(Nullable`1<TimeSpan> value);
    public sealed virtual IRedisPubSubServer Start();
    private void Init();
    private void SendHeartbeat(object state);
    private void Pulse();
    private void DisposeHeartbeatTimer();
    private void RunLoop();
    public sealed virtual void Stop();
    private void Stop(bool shouldRestart);
    private void SendControlCommand(int operation);
    private void NotifyAllSubscribers(string commandType);
    private void HandleFailover(IRedisClientsManager clientsManager);
    private void HandleUnSubscribe(string channel);
    public sealed virtual void Restart();
    private void KillBgThreadIfExists();
    private void SleepBackOffMultiplier(int continuousErrorsCount);
    public sealed virtual string GetStatus();
    public sealed virtual string GetStatsDescription();
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static bool <RunLoop>g__IsCtrlMessage|106_0(Byte[] msg);
    [CompilerGeneratedAttribute]
private void <RunLoop>b__106_1(string channel, Byte[] msg);
}
public class ServiceStack.Redis.RedisQueueCompletableOperation : object {
    internal List`1<QueuedRedisOperation> QueuedCommands;
    internal QueuedRedisOperation CurrentQueuedOperation;
    internal void BeginQueuedCommand(QueuedRedisOperation queuedRedisOperation);
    internal void AssertCurrentOperation();
    protected virtual void AddCurrentQueuedOperation();
    public virtual void CompleteVoidQueuedCommand(Action voidReadCommand);
    public virtual void CompleteIntQueuedCommand(Func`1<int> intReadCommand);
    public virtual void CompleteLongQueuedCommand(Func`1<long> longReadCommand);
    public virtual void CompleteBytesQueuedCommand(Func`1<Byte[]> bytesReadCommand);
    public virtual void CompleteMultiBytesQueuedCommand(Func`1<Byte[][]> multiBytesReadCommand);
    public virtual void CompleteStringQueuedCommand(Func`1<string> stringReadCommand);
    public virtual void CompleteMultiStringQueuedCommand(Func`1<List`1<string>> multiStringReadCommand);
    public virtual void CompleteDoubleQueuedCommand(Func`1<double> doubleReadCommand);
    public virtual void CompleteRedisDataQueuedCommand(Func`1<RedisData> redisDataReadCommand);
}
public class ServiceStack.Redis.RedisResolver : object {
    private static ILog log;
    [CompilerGeneratedAttribute]
private Func`2<RedisEndpoint, RedisClient> <ClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadWriteHostsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadOnlyHostsCount>k__BackingField;
    private HashSet`1<RedisEndpoint> allHosts;
    private RedisEndpoint[] masters;
    private RedisEndpoint[] replicas;
    public Func`2<RedisEndpoint, RedisClient> ClientFactory { get; public set; }
    public int ReadWriteHostsCount { get; private set; }
    public int ReadOnlyHostsCount { get; private set; }
    public RedisEndpoint[] Masters { get; }
    public RedisEndpoint[] Slaves { get; }
    public IRedisEndpoint PrimaryEndpoint { get; }
    public RedisResolver(IEnumerable`1<string> masters, IEnumerable`1<string> replicas);
    public RedisResolver(IEnumerable`1<RedisEndpoint> masters, IEnumerable`1<RedisEndpoint> replicas);
    private static RedisResolver();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<RedisEndpoint, RedisClient> get_ClientFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientFactory(Func`2<RedisEndpoint, RedisClient> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadWriteHostsCount();
    [CompilerGeneratedAttribute]
private void set_ReadWriteHostsCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadOnlyHostsCount();
    [CompilerGeneratedAttribute]
private void set_ReadOnlyHostsCount(int value);
    public sealed virtual RedisEndpoint[] get_Masters();
    public RedisEndpoint[] get_Slaves();
    public sealed virtual IRedisEndpoint get_PrimaryEndpoint();
    public sealed virtual IRedisClient CreateClient(string host);
    public virtual void ResetMasters(IEnumerable`1<string> hosts);
    public virtual void ResetMasters(List`1<RedisEndpoint> newMasters);
    public virtual void ResetSlaves(IEnumerable`1<string> hosts);
    public virtual void ResetSlaves(List`1<RedisEndpoint> newReplicas);
    public virtual RedisClient CreateRedisClient(RedisEndpoint config, bool master);
    protected RedisClient GetValidMaster(RedisClient client, RedisEndpoint config);
    public sealed virtual RedisEndpoint GetReadWriteHost(int desiredIndex);
    public sealed virtual RedisEndpoint GetReadOnlyHost(int desiredIndex);
    public sealed virtual RedisClient CreateMasterClient(int desiredIndex);
    public sealed virtual RedisClient CreateSlaveClient(int desiredIndex);
    [CompilerGeneratedAttribute]
private void <ResetMasters>b__27_0(RedisEndpoint x);
    [CompilerGeneratedAttribute]
private void <ResetSlaves>b__29_0(RedisEndpoint x);
}
[ExtensionAttribute]
public static class ServiceStack.Redis.RedisResolverExtensions : object {
    [ExtensionAttribute]
public static RedisClient CreateMasterClient(IRedisResolver resolver, int desiredIndex);
    [ExtensionAttribute]
public static RedisClient CreateSlaveClient(IRedisResolver resolver, int desiredIndex);
    [ExtensionAttribute]
public static RedisClient CreateRedisClient(IRedisResolver resolver, RedisEndpoint config, bool master);
    [ExtensionAttribute]
public static RedisEndpoint GetReadWriteHost(IRedisResolver resolver, int desiredIndex);
    [ExtensionAttribute]
public static RedisEndpoint GetReadOnlyHost(IRedisResolver resolver, int desiredIndex);
}
public class ServiceStack.Redis.RedisResponseException : RedisException {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Code { get; private set; }
    public RedisResponseException(string message);
    public RedisResponseException(string message, string code);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
}
public class ServiceStack.Redis.RedisRetryableException : RedisException {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Code { get; private set; }
    public RedisRetryableException(string message);
    public RedisRetryableException(string message, string code);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
}
public class ServiceStack.Redis.RedisScripts : ScriptMethods {
    private static string RedisConnection;
    private IRedisClientsManager redisManager;
    private static Dictionary`2<string, int> cmdArgCounts;
    public IRedisClientsManager RedisManager { get; public set; }
    private static RedisScripts();
    public IRedisClientsManager get_RedisManager();
    public void set_RedisManager(IRedisClientsManager value);
    private T exec(Func`2<IRedisClient, T> fn, ScriptScopeContext scope, object options);
    public IgnoreResult useRedis(ScriptScopeContext scope, string redisConnection);
    private List`1<string> parseCommandString(string cmd);
    private object toObject(RedisText r);
    public object redisCall(ScriptScopeContext scope, object redisCommand);
    public object redisCall(ScriptScopeContext scope, object redisCommand, object options);
    public List`1<RedisSearchResult> redisSearchKeys(ScriptScopeContext scope, string query);
    public List`1<RedisSearchResult> redisSearchKeys(ScriptScopeContext scope, string query, object options);
    public Dictionary`2<string, string> redisInfo(ScriptScopeContext scope);
    public Dictionary`2<string, string> redisInfo(ScriptScopeContext scope, object options);
    public string redisConnectionString(ScriptScopeContext scope);
    public Dictionary`2<string, object> redisConnection(ScriptScopeContext scope);
    public string redisToConnectionString(ScriptScopeContext scope, object connectionInfo);
    public string redisToConnectionString(ScriptScopeContext scope, object connectionInfo, object options);
    public string redisChangeConnection(ScriptScopeContext scope, object newConnection);
    public string redisChangeConnection(ScriptScopeContext scope, object newConnection, object options);
    public string redisSearchKeysAsJson(ScriptScopeContext scope, string query, object options);
}
public class ServiceStack.Redis.RedisSearchCursorResult : object {
    [CompilerGeneratedAttribute]
private int <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RedisSearchResult> <Results>k__BackingField;
    public int Cursor { get; public set; }
    public List`1<RedisSearchResult> Results { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Cursor();
    [CompilerGeneratedAttribute]
public void set_Cursor(int value);
    [CompilerGeneratedAttribute]
public List`1<RedisSearchResult> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<RedisSearchResult> value);
}
public class ServiceStack.Redis.RedisSearchResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Ttl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public string Id { get; public set; }
    public string Type { get; public set; }
    public long Ttl { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public long get_Ttl();
    [CompilerGeneratedAttribute]
public void set_Ttl(long value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
}
public class ServiceStack.Redis.RedisSentinel : object {
    protected static ILog Log;
    public static string DefaultMasterName;
    public static string DefaultAddress;
    private object oLock;
    private bool isDisposed;
    private string masterName;
    private int failures;
    private int sentinelIndex;
    [CompilerGeneratedAttribute]
private List`1<string> <SentinelHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisEndpoint[] <SentinelEndpoints>k__BackingField;
    private RedisSentinelWorker worker;
    private static int MaxFailures;
    [CompilerGeneratedAttribute]
private Func`3<String[], String[], IRedisClientsManager> <RedisManagerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <HostFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <SentinelHostFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IRedisClientsManager <RedisManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRedisClientsManager> <OnFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <OnWorkerError>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, string> <OnSentinelMessageReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <IpAddressMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScanForOtherSentinels>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RefreshSentinelHostsAfter>k__BackingField;
    private DateTime lastSentinelsRefresh;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitBetweenFailedHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxWaitBetweenFailedHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitBeforeForcingMasterFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SentinelWorkerConnectTimeoutMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SentinelWorkerReceiveTimeoutMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SentinelWorkerSendTimeoutMs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetWhenSubjectivelyDown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetWhenObjectivelyDown>k__BackingField;
    public string MasterName { get; }
    public List`1<string> SentinelHosts { get; private set; }
    internal RedisEndpoint[] SentinelEndpoints { get; private set; }
    public Func`3<String[], String[], IRedisClientsManager> RedisManagerFactory { get; public set; }
    public Func`2<string, string> HostFilter { get; public set; }
    public Func`2<string, string> SentinelHostFilter { get; public set; }
    public IRedisClientsManager RedisManager { get; public set; }
    public Action`1<IRedisClientsManager> OnFailover { get; public set; }
    public Action`1<Exception> OnWorkerError { get; public set; }
    public Action`2<string, string> OnSentinelMessageReceived { get; public set; }
    public Dictionary`2<string, string> IpAddressMap { get; public set; }
    public bool ScanForOtherSentinels { get; public set; }
    public TimeSpan RefreshSentinelHostsAfter { get; public set; }
    public TimeSpan WaitBetweenFailedHosts { get; public set; }
    public TimeSpan MaxWaitBetweenFailedHosts { get; public set; }
    public TimeSpan WaitBeforeForcingMasterFailover { get; public set; }
    public int SentinelWorkerConnectTimeoutMs { get; public set; }
    public int SentinelWorkerReceiveTimeoutMs { get; public set; }
    public int SentinelWorkerSendTimeoutMs { get; public set; }
    public bool ResetWhenSubjectivelyDown { get; public set; }
    public bool ResetWhenObjectivelyDown { get; public set; }
    internal string DebugId { get; }
    public RedisSentinel(string sentinelHost, string masterName);
    public RedisSentinel(IEnumerable`1<string> sentinelHosts, string masterName);
    private static RedisSentinel();
    public string get_MasterName();
    [CompilerGeneratedAttribute]
public List`1<string> get_SentinelHosts();
    [CompilerGeneratedAttribute]
private void set_SentinelHosts(List`1<string> value);
    [CompilerGeneratedAttribute]
internal RedisEndpoint[] get_SentinelEndpoints();
    [CompilerGeneratedAttribute]
private void set_SentinelEndpoints(RedisEndpoint[] value);
    [CompilerGeneratedAttribute]
public Func`3<String[], String[], IRedisClientsManager> get_RedisManagerFactory();
    [CompilerGeneratedAttribute]
public void set_RedisManagerFactory(Func`3<String[], String[], IRedisClientsManager> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_HostFilter();
    [CompilerGeneratedAttribute]
public void set_HostFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_SentinelHostFilter();
    [CompilerGeneratedAttribute]
public void set_SentinelHostFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public IRedisClientsManager get_RedisManager();
    [CompilerGeneratedAttribute]
public void set_RedisManager(IRedisClientsManager value);
    [CompilerGeneratedAttribute]
public Action`1<IRedisClientsManager> get_OnFailover();
    [CompilerGeneratedAttribute]
public void set_OnFailover(Action`1<IRedisClientsManager> value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_OnWorkerError();
    [CompilerGeneratedAttribute]
public void set_OnWorkerError(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public Action`2<string, string> get_OnSentinelMessageReceived();
    [CompilerGeneratedAttribute]
public void set_OnSentinelMessageReceived(Action`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_IpAddressMap();
    [CompilerGeneratedAttribute]
public void set_IpAddressMap(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_ScanForOtherSentinels();
    [CompilerGeneratedAttribute]
public void set_ScanForOtherSentinels(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RefreshSentinelHostsAfter();
    [CompilerGeneratedAttribute]
public void set_RefreshSentinelHostsAfter(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitBetweenFailedHosts();
    [CompilerGeneratedAttribute]
public void set_WaitBetweenFailedHosts(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxWaitBetweenFailedHosts();
    [CompilerGeneratedAttribute]
public void set_MaxWaitBetweenFailedHosts(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitBeforeForcingMasterFailover();
    [CompilerGeneratedAttribute]
public void set_WaitBeforeForcingMasterFailover(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_SentinelWorkerConnectTimeoutMs();
    [CompilerGeneratedAttribute]
public void set_SentinelWorkerConnectTimeoutMs(int value);
    [CompilerGeneratedAttribute]
public int get_SentinelWorkerReceiveTimeoutMs();
    [CompilerGeneratedAttribute]
public void set_SentinelWorkerReceiveTimeoutMs(int value);
    [CompilerGeneratedAttribute]
public int get_SentinelWorkerSendTimeoutMs();
    [CompilerGeneratedAttribute]
public void set_SentinelWorkerSendTimeoutMs(int value);
    [CompilerGeneratedAttribute]
public bool get_ResetWhenSubjectivelyDown();
    [CompilerGeneratedAttribute]
public void set_ResetWhenSubjectivelyDown(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResetWhenObjectivelyDown();
    [CompilerGeneratedAttribute]
public void set_ResetWhenObjectivelyDown(bool value);
    internal string get_DebugId();
    public sealed virtual IRedisClientsManager Start();
    public List`1<string> GetActiveSentinelHosts(IEnumerable`1<string> sentinelHosts);
    public void RefreshActiveSentinels();
    internal String[] ConfigureHosts(IEnumerable`1<string> hosts);
    public SentinelInfo ResetClients();
    private IRedisClientsManager CreateRedisManager(SentinelInfo sentinelInfo);
    public IRedisClientsManager GetRedisManager();
    private RedisSentinelWorker GetValidSentinelWorker();
    public RedisEndpoint GetMaster();
    public List`1<RedisEndpoint> GetSlaves();
    private bool ShouldRetry();
    private RedisSentinelWorker GetNextSentinel();
    private void OnSentinelError(Exception ex);
    public void ForceMasterFailover();
    public SentinelInfo GetSentinelInfo();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <RefreshActiveSentinels>b__99_0(string x);
}
public class ServiceStack.Redis.RedisSentinelResolver : object {
    private static ILog log;
    [CompilerGeneratedAttribute]
private Func`2<RedisEndpoint, RedisClient> <ClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadWriteHostsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadOnlyHostsCount>k__BackingField;
    private HashSet`1<RedisEndpoint> allHosts;
    private RedisSentinel sentinel;
    private RedisEndpoint[] masters;
    private RedisEndpoint[] replicas;
    private object oLock;
    private string lastInvalidMasterHost;
    private long lastValidMasterTicks;
    public Func`2<RedisEndpoint, RedisClient> ClientFactory { get; public set; }
    public int ReadWriteHostsCount { get; private set; }
    public int ReadOnlyHostsCount { get; private set; }
    public RedisEndpoint[] Masters { get; }
    public RedisEndpoint[] Slaves { get; }
    public IRedisEndpoint PrimaryEndpoint { get; }
    private DateTime lastValidMasterFromSentinelAt { get; private set; }
    public RedisSentinelResolver(RedisSentinel sentinel);
    public RedisSentinelResolver(RedisSentinel sentinel, IEnumerable`1<string> masters, IEnumerable`1<string> replicas);
    public RedisSentinelResolver(RedisSentinel sentinel, IEnumerable`1<RedisEndpoint> masters, IEnumerable`1<RedisEndpoint> replicas);
    private static RedisSentinelResolver();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<RedisEndpoint, RedisClient> get_ClientFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientFactory(Func`2<RedisEndpoint, RedisClient> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadWriteHostsCount();
    [CompilerGeneratedAttribute]
private void set_ReadWriteHostsCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadOnlyHostsCount();
    [CompilerGeneratedAttribute]
private void set_ReadOnlyHostsCount(int value);
    public sealed virtual RedisEndpoint[] get_Masters();
    public RedisEndpoint[] get_Slaves();
    public sealed virtual IRedisEndpoint get_PrimaryEndpoint();
    public sealed virtual IRedisClient CreateClient(string host);
    public virtual void ResetMasters(IEnumerable`1<string> hosts);
    public virtual void ResetMasters(List`1<RedisEndpoint> newMasters);
    public virtual void ResetSlaves(IEnumerable`1<string> hosts);
    public virtual void ResetSlaves(List`1<RedisEndpoint> newReplicas);
    public sealed virtual RedisEndpoint GetReadWriteHost(int desiredIndex);
    public sealed virtual RedisEndpoint GetReadOnlyHost(int desiredIndex);
    public sealed virtual RedisClient CreateMasterClient(int desiredIndex);
    public sealed virtual RedisClient CreateSlaveClient(int desiredIndex);
    private DateTime get_lastValidMasterFromSentinelAt();
    private void set_lastValidMasterFromSentinelAt(DateTime value);
    public virtual RedisClient CreateRedisClient(RedisEndpoint config, bool master);
    [CompilerGeneratedAttribute]
private void <ResetMasters>b__28_0(RedisEndpoint x);
    [CompilerGeneratedAttribute]
private void <ResetSlaves>b__30_0(RedisEndpoint x);
}
internal class ServiceStack.Redis.RedisSentinelWorker : object {
    protected static ILog Log;
    private static int IdCounter;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    private object oLock;
    private RedisEndpoint sentinelEndpoint;
    private RedisSentinel sentinel;
    private RedisClient sentinelClient;
    private RedisPubSubServer sentinelPubSub;
    public Action`1<Exception> OnSentinelError;
    public int Id { get; }
    public RedisSentinelWorker(RedisSentinel sentinel, RedisEndpoint sentinelEndpoint);
    private static RedisSentinelWorker();
    [CompilerGeneratedAttribute]
public int get_Id();
    private void SentinelMessageReceived(string channel, string message);
    internal SentinelInfo GetSentinelInfo();
    internal string GetMasterHost(string masterName);
    private string GetMasterHostInternal(string masterName);
    private string SanitizeMasterConfig(List`1<string> masterInfo);
    internal List`1<string> GetSentinelHosts(string masterName);
    internal List`1<string> GetReplicaHosts(string masterName);
    private List`1<string> GetReplicaHostsInternal(string masterName);
    private List`1<string> SanitizeHostsConfig(IEnumerable`1<Dictionary`2<string, string>> replicas);
    public void BeginListeningForConfigurationChanges();
    public void ForceMasterFailover(string masterName);
    public sealed virtual void Dispose();
}
internal static class ServiceStack.Redis.RedisState : object {
    private static ILog log;
    internal static long TotalCommandsSent;
    internal static long TotalFailovers;
    internal static long TotalDeactivatedClients;
    internal static long TotalFailedSentinelWorkers;
    internal static long TotalForcedMasterFailovers;
    internal static long TotalInvalidMasters;
    internal static long TotalNoMastersFound;
    internal static long TotalClientsCreated;
    internal static long TotalClientsCreatedOutsidePool;
    internal static long TotalSubjectiveServersDown;
    internal static long TotalObjectiveServersDown;
    internal static long TotalRetryCount;
    internal static long TotalRetrySuccess;
    internal static long TotalRetryTimedout;
    internal static ConcurrentDictionary`2<RedisClient, DateTime> DeactivatedClients;
    private static RedisState();
    internal static void DeactivateClient(RedisClient client);
    internal static void DisposeExpiredClients();
    internal static void DisposeAllDeactivatedClients();
}
public static class ServiceStack.Redis.RedisStats : object {
    public static long TotalCommandsSent { get; }
    public static long TotalFailovers { get; }
    public static long TotalDeactivatedClients { get; }
    public static long TotalFailedSentinelWorkers { get; }
    public static long TotalForcedMasterFailovers { get; }
    public static long TotalInvalidMasters { get; }
    public static long TotalNoMastersFound { get; }
    public static long TotalClientsCreated { get; }
    public static long TotalClientsCreatedOutsidePool { get; }
    public static long TotalSubjectiveServersDown { get; }
    public static long TotalObjectiveServersDown { get; }
    public static long TotalRetryCount { get; }
    public static long TotalRetrySuccess { get; }
    public static long TotalRetryTimedout { get; }
    public static long TotalPendingDeactivatedClients { get; }
    public static long get_TotalCommandsSent();
    public static long get_TotalFailovers();
    public static long get_TotalDeactivatedClients();
    public static long get_TotalFailedSentinelWorkers();
    public static long get_TotalForcedMasterFailovers();
    public static long get_TotalInvalidMasters();
    public static long get_TotalNoMastersFound();
    public static long get_TotalClientsCreated();
    public static long get_TotalClientsCreatedOutsidePool();
    public static long get_TotalSubjectiveServersDown();
    public static long get_TotalObjectiveServersDown();
    public static long get_TotalRetryCount();
    public static long get_TotalRetrySuccess();
    public static long get_TotalRetryTimedout();
    public static long get_TotalPendingDeactivatedClients();
    public static void Reset();
    public static Dictionary`2<string, long> ToDictionary();
}
public class ServiceStack.Redis.RedisSubscription : object {
    [CompilerGeneratedAttribute]
private Func`2<string, ValueTask> OnSubscribeAsync;
    [CompilerGeneratedAttribute]
private Func`3<string, string, ValueTask> OnMessageAsync;
    [CompilerGeneratedAttribute]
private Func`3<string, Byte[], ValueTask> OnMessageBytesAsync;
    [CompilerGeneratedAttribute]
private Func`2<string, ValueTask> OnUnSubscribeAsync;
    private IRedisNativeClient redisClient;
    private List`1<string> activeChannels;
    [CompilerGeneratedAttribute]
private long <SubscriptionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPSubscription>k__BackingField;
    private static int MsgIndex;
    private static Byte[] SubscribeWord;
    private static Byte[] PSubscribeWord;
    private static Byte[] UnSubscribeWord;
    private static Byte[] PUnSubscribeWord;
    private static Byte[] MessageWord;
    private static Byte[] PMessageWord;
    [CompilerGeneratedAttribute]
private Action`1<string> <OnSubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, string> <OnMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, Byte[]> <OnMessageBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <OnUnSubscribe>k__BackingField;
    private IRedisNativeClientAsync NativeAsync { get; }
    public long SubscriptionCount { get; private set; }
    public bool IsPSubscription { get; private set; }
    public Action`1<string> OnSubscribe { get; public set; }
    public Action`2<string, string> OnMessage { get; public set; }
    public Action`2<string, Byte[]> OnMessageBytes { get; public set; }
    public Action`1<string> OnUnSubscribe { get; public set; }
    public RedisSubscription(IRedisNativeClient redisClient);
    private static RedisSubscription();
    [CompilerGeneratedAttribute]
private void add_OnSubscribeAsync(Func`2<string, ValueTask> value);
    [CompilerGeneratedAttribute]
private void remove_OnSubscribeAsync(Func`2<string, ValueTask> value);
    [CompilerGeneratedAttribute]
private void add_OnMessageAsync(Func`3<string, string, ValueTask> value);
    [CompilerGeneratedAttribute]
private void remove_OnMessageAsync(Func`3<string, string, ValueTask> value);
    [CompilerGeneratedAttribute]
private void add_OnMessageBytesAsync(Func`3<string, Byte[], ValueTask> value);
    [CompilerGeneratedAttribute]
private void remove_OnMessageBytesAsync(Func`3<string, Byte[], ValueTask> value);
    [CompilerGeneratedAttribute]
private void add_OnUnSubscribeAsync(Func`2<string, ValueTask> value);
    [CompilerGeneratedAttribute]
private void remove_OnUnSubscribeAsync(Func`2<string, ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.add_OnSubscribeAsync(Func`2<string, ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.remove_OnSubscribeAsync(Func`2<string, ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.add_OnMessageAsync(Func`3<string, string, ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.remove_OnMessageAsync(Func`3<string, string, ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.add_OnMessageBytesAsync(Func`3<string, Byte[], ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.remove_OnMessageBytesAsync(Func`3<string, Byte[], ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.add_OnUnSubscribeAsync(Func`2<string, ValueTask> value);
    private sealed virtual override void ServiceStack.Redis.IRedisSubscriptionAsync.remove_OnUnSubscribeAsync(Func`2<string, ValueTask> value);
    private IRedisSubscriptionAsync AsAsync();
    private IRedisNativeClientAsync get_NativeAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisSubscription/<UnSubscribeFromAllChannelsMatchingAnyPatternsAsync>d__27")]
private ValueTask UnSubscribeFromAllChannelsMatchingAnyPatternsAsync(CancellationToken token);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisSubscription/<ServiceStack-Redis-IRedisSubscriptionAsync-SubscribeToChannelsAsync>d__29")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsAsync(String[] channels, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisSubscription/<ServiceStack-Redis-IRedisSubscriptionAsync-SubscribeToChannelsMatchingAsync>d__30")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsMatchingAsync(String[] patterns, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisSubscription/<ServiceStack-Redis-IRedisSubscriptionAsync-UnSubscribeFromAllChannelsAsync>d__31")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.UnSubscribeFromAllChannelsAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisSubscription/<ServiceStack-Redis-IRedisSubscriptionAsync-UnSubscribeFromChannelsAsync>d__32")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.UnSubscribeFromChannelsAsync(String[] channels, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisSubscription/<ServiceStack-Redis-IRedisSubscriptionAsync-UnSubscribeFromChannelsMatchingAsync>d__33")]
private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.UnSubscribeFromChannelsMatchingAsync(String[] patterns, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisSubscription/<ParseSubscriptionResultsAsync>d__34")]
private ValueTask ParseSubscriptionResultsAsync(Byte[][] multiBytes);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsAsync(String[] channels);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsMatchingAsync(String[] patterns);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.UnSubscribeFromChannelsAsync(String[] channels);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisSubscriptionAsync.UnSubscribeFromChannelsMatchingAsync(String[] patterns);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SubscriptionCount();
    [CompilerGeneratedAttribute]
private void set_SubscriptionCount(long value);
    [CompilerGeneratedAttribute]
public bool get_IsPSubscription();
    [CompilerGeneratedAttribute]
private void set_IsPSubscription(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<string> get_OnSubscribe();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnSubscribe(Action`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<string, string> get_OnMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnMessage(Action`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<string, Byte[]> get_OnMessageBytes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnMessageBytes(Action`2<string, Byte[]> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<string> get_OnUnSubscribe();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnUnSubscribe(Action`1<string> value);
    public sealed virtual void SubscribeToChannels(String[] channels);
    public sealed virtual void SubscribeToChannelsMatching(String[] patterns);
    private void ParseSubscriptionResults(Byte[][] multiBytes);
    public sealed virtual void UnSubscribeFromAllChannels();
    public void UnSubscribeFromAllChannelsMatchingAnyPatterns();
    public sealed virtual void UnSubscribeFromChannels(String[] channels);
    public sealed virtual void UnSubscribeFromChannelsMatching(String[] patterns);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static IRedisNativeClientAsync <get_NativeAsync>g__NotAsync|26_0();
}
public class ServiceStack.Redis.RedisTransaction : RedisAllPurposePipeline {
    private int numCommands;
    private bool _isAsync;
    public RedisTransaction(RedisClient redisClient);
    internal RedisTransaction(RedisClient redisClient, bool isAsync);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisTransaction/<ExecAsync>d__0")]
private ValueTask ExecAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisTransaction/<ServiceStack-Redis-IRedisTransactionAsync-CommitAsync>d__1")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.IRedisTransactionAsync.CommitAsync(CancellationToken token);
    private sealed virtual override ValueTask ServiceStack.Redis.IRedisTransactionAsync.RollbackAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisTransaction/<ReplayAsync>d__3")]
private protected virtual ValueTask`1<bool> ReplayAsync(CancellationToken token);
    protected virtual void Init();
    private void QueueExpectQueued();
    private void Exec();
    public sealed virtual bool Commit();
    private void handleMultiDataResultCount(int count);
    public sealed virtual void Rollback();
    public virtual bool Replay();
    public virtual void Dispose();
    protected virtual void AddCurrentQueuedOperation();
    private void QueueExpectQueuedAsync();
    [CompilerGeneratedAttribute]
private void <Commit>b__10_0(IRedisClient r);
    [CompilerGeneratedAttribute]
private void <Commit>b__10_1(IRedisClient r);
}
public class ServiceStack.Redis.RedisTransactionFailedException : Exception {
}
public class ServiceStack.Redis.RedisTypedPipeline`1 : RedisTypedCommandQueue`1<T> {
    internal RedisTypedPipeline`1(RedisTypedClient`1<T> redisClient);
    private IRedisTypedPipelineAsync`1<T> AsAsync();
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteBytesQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<Byte[]>> bytesReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteDoubleQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<double>> doubleReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteIntQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<int>> intReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteLongQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<long>> longReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteMultiBytesQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<Byte[][]>> multiBytesReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteMultiStringQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<List`1<string>>> multiStringReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteRedisDataQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<RedisData>> redisDataReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteStringQueuedCommandAsync(Func`2<CancellationToken, ValueTask`1<string>> stringReadCommand);
    private sealed virtual override void ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync.CompleteVoidQueuedCommandAsync(Func`2<CancellationToken, ValueTask> voidReadCommand);
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisTypedPipeline`1/<ServiceStack-Redis-Pipeline-IRedisPipelineSharedAsync-FlushAsync>d__11")]
private sealed virtual override ValueTask ServiceStack.Redis.Pipeline.IRedisPipelineSharedAsync.FlushAsync(CancellationToken token);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask> command, Action onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<int>> command, Action`1<int> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<long>> command, Action`1<long> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<bool>> command, Action`1<bool> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<double>> command, Action`1<double> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<Byte[]>> command, Action`1<Byte[]> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<string>> command, Action`1<string> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<T>> command, Action`1<T> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<List`1<string>>> command, Action`1<List`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<HashSet`1<string>>> command, Action`1<HashSet`1<string>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    private sealed virtual override void ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync<T>.QueueCommand(Func`2<IRedisTypedClientAsync`1<T>, ValueTask`1<List`1<T>>> command, Action`1<List`1<T>> onSuccessCallback, Action`1<Exception> onErrorCallback);
    [AsyncStateMachineAttribute("ServiceStack.Redis.RedisTypedPipeline`1/<ServiceStack-Redis-Pipeline-IRedisPipelineSharedAsync-ReplayAsync>d__23")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Pipeline.IRedisPipelineSharedAsync.ReplayAsync(CancellationToken token);
    protected virtual void Init();
    public sealed virtual void Flush();
    protected void Execute();
    public virtual bool Replay();
    protected void ClosePipeline();
    public virtual void Dispose();
}
[ExtensionAttribute]
public static class ServiceStack.Redis.ScanResultExtensions : object {
    [ExtensionAttribute]
public static List`1<string> AsStrings(ScanResult result);
    [ExtensionAttribute]
public static Dictionary`2<string, double> AsItemsWithScores(ScanResult result);
    [ExtensionAttribute]
public static Dictionary`2<string, string> AsKeyValues(ScanResult result);
}
public class ServiceStack.Redis.SentinelInfo : object {
    [CompilerGeneratedAttribute]
private string <MasterName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RedisMasters>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RedisSlaves>k__BackingField;
    public string MasterName { get; public set; }
    public String[] RedisMasters { get; public set; }
    public String[] RedisSlaves { get; public set; }
    public SentinelInfo(string masterName, IEnumerable`1<string> redisMasters, IEnumerable`1<string> redisReplicas);
    [CompilerGeneratedAttribute]
public string get_MasterName();
    [CompilerGeneratedAttribute]
public void set_MasterName(string value);
    [CompilerGeneratedAttribute]
public String[] get_RedisMasters();
    [CompilerGeneratedAttribute]
public void set_RedisMasters(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_RedisSlaves();
    [CompilerGeneratedAttribute]
public void set_RedisSlaves(String[] value);
    public virtual string ToString();
}
public class ServiceStack.Redis.ShardedConnectionPool : PooledRedisClientManager {
    public string name;
    public int weight;
    public ShardedConnectionPool(string name, int weight, String[] readWriteHosts);
    public virtual int GetHashCode();
}
public class ServiceStack.Redis.ShardedRedisClientManager : object {
    private ConsistentHash`1<ShardedConnectionPool> consistentHash;
    public ShardedRedisClientManager(ShardedConnectionPool[] connectionPools);
    public ShardedConnectionPool GetConnectionPool(string key);
}
public class ServiceStack.Redis.Support.ConsistentHash`1 : object {
    private static int Replicas;
    private Func`2<string, ulong> hashFunction;
    private SortedDictionary`2<ulong, T> circle;
    public ConsistentHash`1(IEnumerable`1<KeyValuePair`2<T, int>> nodes);
    public ConsistentHash`1(IEnumerable`1<KeyValuePair`2<T, int>> nodes, Func`2<string, ulong> hashFunction);
    public T GetTarget(string key);
    public void AddTarget(T node, int weight);
    public static ulong ModifiedBinarySearch(UInt64[] sortedArray, ulong val);
    public static ulong Md5Hash(string key);
}
public class ServiceStack.Redis.Support.Diagnostic.InvokeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; private set; }
    public InvokeEventArgs(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
}
public class ServiceStack.Redis.Support.Diagnostic.TrackingFrame : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProvidedToInstanceOfType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Initialised>k__BackingField;
    public Guid Id { get; public set; }
    public Type ProvidedToInstanceOfType { get; public set; }
    public DateTime Initialised { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Type get_ProvidedToInstanceOfType();
    [CompilerGeneratedAttribute]
public void set_ProvidedToInstanceOfType(Type value);
    [CompilerGeneratedAttribute]
public DateTime get_Initialised();
    [CompilerGeneratedAttribute]
public void set_Initialised(DateTime value);
    public sealed virtual bool Equals(TrackingFrame other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public interface ServiceStack.Redis.Support.IOrderedDictionary`2 {
    public TValue Item { get; public set; }
    public abstract virtual int Add(TKey key, TValue value);
    public abstract virtual void Insert(int index, TKey key, TValue value);
    public abstract virtual TValue get_Item(int index);
    public abstract virtual void set_Item(int index, TValue value);
}
public interface ServiceStack.Redis.Support.ISerializer {
    public abstract virtual Byte[] Serialize(object value);
    public abstract virtual object Deserialize(Byte[] someBytes);
}
public class ServiceStack.Redis.Support.Locking.DisposableDistributedLock : object {
    private IDistributedLock myLock;
    private long lockExpire;
    private IRedisClient myClient;
    private string globalLockKey;
    [CompilerGeneratedAttribute]
private long <LockState>k__BackingField;
    public long LockState { get; }
    public long LockExpire { get; }
    public DisposableDistributedLock(IRedisClient client, string globalLockKey, int acquisitionTimeout, int lockTimeout);
    [CompilerGeneratedAttribute]
public long get_LockState();
    public long get_LockExpire();
    public sealed virtual void Dispose();
}
public class ServiceStack.Redis.Support.Locking.DistributedLock : object {
    public static int LOCK_NOT_ACQUIRED;
    public static int LOCK_ACQUIRED;
    public static int LOCK_RECOVERED;
    public IDistributedLockAsync AsAsync();
    [AsyncStateMachineAttribute("ServiceStack.Redis.Support.Locking.DistributedLock/<ServiceStack-Redis-Support-Locking-IDistributedLockAsync-LockAsync>d__1")]
private sealed virtual override ValueTask`1<LockState> ServiceStack.Redis.Support.Locking.IDistributedLockAsync.LockAsync(string key, int acquisitionTimeout, int lockTimeout, IRedisClientAsync client, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Redis.Support.Locking.DistributedLock/<ServiceStack-Redis-Support-Locking-IDistributedLockAsync-UnlockAsync>d__2")]
private sealed virtual override ValueTask`1<bool> ServiceStack.Redis.Support.Locking.IDistributedLockAsync.UnlockAsync(string key, long lockExpire, IRedisClientAsync client, CancellationToken token);
    public virtual long Lock(string key, int acquisitionTimeout, int lockTimeout, Int64& lockExpire, IRedisClient client);
    public virtual bool Unlock(string key, long lockExpire, IRedisClient client);
    private static long CalculateLockExpire(TimeSpan ts, int timeout);
}
public interface ServiceStack.Redis.Support.Locking.IDistributedLock {
    public abstract virtual long Lock(string key, int acquisitionTimeout, int lockTimeout, Int64& lockExpire, IRedisClient client);
    public abstract virtual bool Unlock(string key, long lockExpire, IRedisClient client);
}
public interface ServiceStack.Redis.Support.Locking.IDistributedLockAsync {
    public abstract virtual ValueTask`1<LockState> LockAsync(string key, int acquisitionTimeout, int lockTimeout, IRedisClientAsync client, CancellationToken token);
    public abstract virtual ValueTask`1<bool> UnlockAsync(string key, long lockExpire, IRedisClientAsync client, CancellationToken token);
}
public interface ServiceStack.Redis.Support.Locking.ILockingStrategy {
    public abstract virtual IDisposable ReadLock();
    public abstract virtual IDisposable WriteLock();
}
[IsReadOnlyAttribute]
public class ServiceStack.Redis.Support.Locking.LockState : ValueType {
    [CompilerGeneratedAttribute]
private long <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Expiration>k__BackingField;
    public long Result { get; }
    public long Expiration { get; }
    public LockState(long result, long expiration);
    [CompilerGeneratedAttribute]
public long get_Result();
    [CompilerGeneratedAttribute]
public long get_Expiration();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(Int64& result, Int64& expiration);
}
public class ServiceStack.Redis.Support.Locking.NoLockingStrategy : object {
    public sealed virtual IDisposable ReadLock();
    public sealed virtual IDisposable WriteLock();
}
public class ServiceStack.Redis.Support.Locking.ReaderWriterLockingStrategy : object {
    private ReaderWriterLockSlim lockObject;
    public sealed virtual IDisposable ReadLock();
    public sealed virtual IDisposable WriteLock();
}
public class ServiceStack.Redis.Support.Locking.ReadLock : object {
    private ReaderWriterLockSlim lockObject;
    public ReadLock(ReaderWriterLockSlim lockObject);
    public sealed virtual void Dispose();
}
public class ServiceStack.Redis.Support.Locking.WriteLock : object {
    private ReaderWriterLockSlim lockObject;
    public WriteLock(ReaderWriterLockSlim lockObject);
    public sealed virtual void Dispose();
}
public class ServiceStack.Redis.Support.ObjectSerializer : object {
    public virtual Byte[] Serialize(object value);
    public virtual object Deserialize(Byte[] someBytes);
}
public class ServiceStack.Redis.Support.OptimizedObjectSerializer : ObjectSerializer {
    internal static ushort RawDataFlag;
    internal static Byte[] EmptyArray;
    private static OptimizedObjectSerializer();
    public virtual Byte[] Serialize(object value);
    public virtual object Deserialize(Byte[] someBytes);
    private SerializedObjectWrapper SerializeToWrapper(object value);
    private object Unwrap(SerializedObjectWrapper item);
}
[DefaultMemberAttribute("Item")]
public class ServiceStack.Redis.Support.OrderedDictionary`2 : object {
    private static int DefaultInitialCapacity;
    private static string KeyTypeName;
    private static string ValueTypeName;
    private static bool ValueTypeIsReferenceType;
    private Dictionary`2<TKey, TValue> dictionary;
    private List`1<KeyValuePair`2<TKey, TValue>> list;
    private IEqualityComparer`1<TKey> comparer;
    private object syncRoot;
    private int initialCapacity;
    private Dictionary`2<TKey, TValue> Dictionary { get; }
    private List`1<KeyValuePair`2<TKey, TValue>> List { get; }
    public TValue Item { get; public set; }
    private object System.Collections.Specialized.IOrderedDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public TValue Item { get; public set; }
    private object System.Collections.IDictionary.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public OrderedDictionary`2(int capacity);
    public OrderedDictionary`2(IEqualityComparer`1<TKey> comparer);
    public OrderedDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    private static OrderedDictionary`2();
    private static TKey ConvertToKeyType(object keyObject);
    private static TValue ConvertToValueType(object value);
    private Dictionary`2<TKey, TValue> get_Dictionary();
    private List`1<KeyValuePair`2<TKey, TValue>> get_List();
    private sealed virtual override IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    public sealed virtual void Insert(int index, TKey key, TValue value);
    private sealed virtual override void System.Collections.Specialized.IOrderedDictionary.Insert(int index, object key, object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TValue get_Item(int index);
    public sealed virtual void set_Item(int index, TValue value);
    private sealed virtual override object System.Collections.Specialized.IOrderedDictionary.get_Item(int index);
    private sealed virtual override void System.Collections.Specialized.IOrderedDictionary.set_Item(int index, object value);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    public sealed virtual int Add(TKey key, TValue value);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(TKey key);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public int IndexOfKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
}
public interface ServiceStack.Redis.Support.Queue.IChronologicalWorkQueue`1 {
    public abstract virtual void Enqueue(string workItemId, T workItem, double time);
    public abstract virtual IList`1<KeyValuePair`2<string, T>> Dequeue(double minTime, double maxTime, int maxBatchSize);
}
public class ServiceStack.Redis.Support.Queue.Implementation.RedisChronologicalWorkQueue`1 : RedisWorkQueue`1<T> {
    public RedisChronologicalWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port);
    public RedisChronologicalWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port, string queueName);
    public sealed virtual void Enqueue(string workItemId, T workItem, double time);
    public sealed virtual IList`1<KeyValuePair`2<string, T>> Dequeue(double minTime, double maxTime, int maxBatchSize);
}
public class ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1 : RedisWorkQueue`1<T> {
    private DateTime harvestTime;
    private int lockAcquisitionTimeout;
    private int lockTimeout;
    protected static double CONVENIENTLY_SIZED_FLOAT;
    private string dequeueIdSet;
    private int dequeueLockTimeout;
    private string workItemIdPriorityQueue;
    private static int numTagsForDequeueLock;
    public RedisSequentialWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port, int dequeueLockTimeout);
    public RedisSequentialWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port, string queueName, int dequeueLockTimeout);
    public sealed virtual void Enqueue(string workItemId, T workItem);
    public sealed virtual bool PrepareNextWorkItem();
    public sealed virtual ISequentialData`1<T> Dequeue(int maxBatchSize);
    public sealed virtual void Update(string workItemId, int index, T newWorkItem);
    private void Pop(string workItemId, int itemCount);
    public sealed virtual bool HarvestZombies();
    public bool TryForceReleaseLock(SerializingRedisClient client, string workItemId);
    private void Unlock(string workItemId);
    private string GlobalDequeueLockKey(object key);
}
public class ServiceStack.Redis.Support.Queue.Implementation.RedisSimpleWorkQueue`1 : RedisWorkQueue`1<T> {
    public RedisSimpleWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port);
    public RedisSimpleWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port, string queueName);
    public sealed virtual void Enqueue(T msg);
    public sealed virtual IList`1<T> Dequeue(int maxBatchSize);
}
public class ServiceStack.Redis.Support.Queue.Implementation.RedisWorkQueue`1 : object {
    protected RedisNamespace queueNamespace;
    protected string pendingWorkItemIdQueue;
    protected string workQueue;
    protected PooledRedisClientManager clientManager;
    public RedisWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port);
    public RedisWorkQueue`1(int maxReadPoolSize, int maxWritePoolSize, string host, int port, string queueName);
    public sealed virtual void Dispose();
}
public class ServiceStack.Redis.Support.Queue.Implementation.SequentialData`1 : object {
    private string dequeueId;
    private IList`1<T> _dequeueItems;
    private DequeueManager<T> _dequeueManager;
    private int processedCount;
    public IList`1<T> DequeueItems { get; }
    public string DequeueId { get; }
    public SequentialData`1(string dequeueId, IList`1<T> _dequeueItems, DequeueManager<T> _dequeueManager);
    public sealed virtual IList`1<T> get_DequeueItems();
    public sealed virtual string get_DequeueId();
    public sealed virtual void PopAndUnlock();
    public sealed virtual void DoneProcessedWorkItem();
    public sealed virtual void UpdateNextUnprocessed(T newWorkItem);
}
public class ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClient : RedisClient {
    private ISerializer serializer;
    unknown ISerializer Serializer {public set; }
    public SerializingRedisClient(string host);
    public SerializingRedisClient(RedisEndpoint config);
    public SerializingRedisClient(string host, int port);
    public void set_Serializer(ISerializer value);
    public Byte[] Serialize(object value);
    public List`1<Byte[]> Serialize(Object[] values);
    public object Deserialize(Byte[] someBytes);
    public IList Deserialize(Byte[][] byteArray);
}
public interface ServiceStack.Redis.Support.Queue.ISequentialData`1 {
    public IList`1<T> DequeueItems { get; }
    public string DequeueId { get; }
    public abstract virtual IList`1<T> get_DequeueItems();
    public abstract virtual string get_DequeueId();
    public abstract virtual void PopAndUnlock();
    public abstract virtual void DoneProcessedWorkItem();
    public abstract virtual void UpdateNextUnprocessed(T newWorkItem);
}
public interface ServiceStack.Redis.Support.Queue.ISequentialWorkQueue`1 {
    public abstract virtual void Enqueue(string workItemId, T workItem);
    public abstract virtual bool PrepareNextWorkItem();
    public abstract virtual ISequentialData`1<T> Dequeue(int maxBatchSize);
    public abstract virtual void Update(string workItemId, int index, T newWorkItem);
    public abstract virtual bool HarvestZombies();
}
public interface ServiceStack.Redis.Support.Queue.ISimpleWorkQueue`1 {
    public abstract virtual void Enqueue(T workItem);
    public abstract virtual IList`1<T> Dequeue(int maxBatchSize);
}
public class ServiceStack.Redis.Support.RedisNamespace : object {
    private static string UniqueCharacter;
    private static string ReservedTag;
    private static string NamespaceKeySeparator;
    public static string KeyTag;
    public static string NamespaceTag;
    private static string Sanitizer;
    private long namespaceGeneration;
    private string namespaceGenerationKey;
    private string namespacePrefix;
    private string namespaceReservedName;
    private string globalKeysKey;
    public static string NamespacesGarbageKey;
    public static int NumTagsForKey;
    public static int NumTagsForLockKey;
    [CompilerGeneratedAttribute]
private ILockingStrategy <LockingStrategy>k__BackingField;
    public ILockingStrategy LockingStrategy { get; public set; }
    public RedisNamespace(string name);
    [CompilerGeneratedAttribute]
public ILockingStrategy get_LockingStrategy();
    [CompilerGeneratedAttribute]
public void set_LockingStrategy(ILockingStrategy value);
    public long GetGeneration();
    public void SetGeneration(long generation);
    public string GetGenerationKey();
    public string GetGlobalKeysKey();
    public string GlobalCacheKey(object key);
    public string GlobalLockKey(object key);
    public string GlobalKey(object key, int numUniquePrefixes);
    private static string Sanitize(string dirtyString);
    private static string Sanitize(object dirtyString);
}
public class ServiceStack.Redis.Support.SerializedObjectWrapper : ValueType {
    private ArraySegment`1<byte> data;
    private ushort flags;
    public ArraySegment`1<byte> Data { get; public set; }
    public ushort Flags { get; public set; }
    public SerializedObjectWrapper(ushort flags, ArraySegment`1<byte> data);
    public ArraySegment`1<byte> get_Data();
    public void set_Data(ArraySegment`1<byte> value);
    public ushort get_Flags();
    public void set_Flags(ushort value);
}
[ObsoleteAttribute("Use RedisScripts")]
public class ServiceStack.Redis.TemplateRedisFilters : RedisScripts {
}
internal class ServiceStack.Redis.TrackThread : ValueType {
    public int ThreadId;
    public string StackTrace;
    public TrackThread(int threadId, string stackTrace);
}
[ExtensionAttribute]
internal static class ServiceStack.Redis.UtilExtensions : object {
    [ExtensionAttribute]
public static List`1<T> ConvertEachTo(List`1<string> list);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
