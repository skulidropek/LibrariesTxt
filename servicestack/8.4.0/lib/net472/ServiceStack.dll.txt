[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Funq.Container/ServiceCollectionDebugView")]
public class Funq.Container : object {
    [CompilerGeneratedAttribute]
private IContainerAdapter <Adapter>k__BackingField;
    private Dictionary`2<Type, Action`1[]> autoWireCache;
    public static HashSet`1<string> IgnorePropertyTypeFullNames;
    private static Dictionary`2<Type, Func`2<Container, object>> tryResolveCache;
    private static Type[] TryResolveArgs;
    private Dictionary`2<ServiceKey, ServiceEntry> services;
    private Dictionary`2<ServiceKey, ServiceEntry> servicesReadOnlyCopy;
    private Stack`1<WeakReference> disposables;
    private Stack`1<Container> childContainers;
    private Container parent;
    [CompilerGeneratedAttribute]
private Owner <DefaultOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private ReuseScope <DefaultReuse>k__BackingField;
    private bool hasDisposed;
    [CompilerGeneratedAttribute]
private bool <CheckAdapterFirst>k__BackingField;
    private List`1<ServiceDescriptor> descriptors;
    private bool isReadOnly;
    public IContainerAdapter Adapter { get; public set; }
    public int DisposablesCount { get; }
    public Owner DefaultOwner { get; public set; }
    public ReuseScope DefaultReuse { get; public set; }
    public bool CheckAdapterFirst { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ServiceDescriptor Item { get; public set; }
    private static Container();
    public sealed virtual object GetService(Type serviceType);
    [CompilerGeneratedAttribute]
public IContainerAdapter get_Adapter();
    [CompilerGeneratedAttribute]
public void set_Adapter(IContainerAdapter value);
    public IRegistration`1<T> RegisterAutoWired();
    public IRegistration`1<T> RegisterAutoWired(string name);
    public IRegistration`1<TAs> RegisterAutoWiredAs();
    public IRegistration`1<TAs> RegisterAutoWiredAs(string name);
    public IRegistration`1<TAs> RegisterAs();
    public IRegistration`1<TAs> RegisterAs(string name);
    public void AutoWire(object instance);
    public object GetLazyResolver(Type[] types);
    public Func`1<TService> ReverseLazyResolve();
    public Func`2<TArg, TService> ReverseLazyResolve();
    public Func`3<TArg1, TArg2, TService> ReverseLazyResolve();
    public Func`4<TArg1, TArg2, TArg3, TService> ReverseLazyResolve();
    public ServiceEntry`2<TService, Func`2<Container, TService>> GetServiceEntry();
    public ServiceEntry`2<TService, Func`2<Container, TService>> GetServiceEntryNamed(string name);
    public bool Exists();
    public bool ExistsNamed(string name);
    public sealed virtual bool Exists(Type type);
    private static MethodInfo GetResolveMethod(Type typeWithResolveMethod, Type serviceType);
    public static ConstructorInfo GetConstructorWithMostParams(Type type);
    private static bool IsPublicWritableUserPropertyType(PropertyInfo pi);
    public static Func`2<Container, TService> GenerateAutoWireFn();
    public void AutoWire(Container container, object instance);
    private static Action`1<object> GenerateAutoWireFnForProperty(Container container, MethodInfo propertyResolveFn, PropertyInfo property, Type instanceType);
    public static NewExpression ConstructorExpression(MethodInfo resolveMethodInfo, Type type, Expression lambdaParam);
    private static MethodCallExpression ResolveTypeExpression(MethodInfo resolveFn, Type resolveType, Expression containerParam);
    public object TryResolve(Type type);
    public object RequiredResolve(Type type, Type ownerType);
    public sealed virtual Func`1<object> CreateFactory(Type type);
    public IRegistration`1<TService> RegisterFactory(Func`1<object> factory);
    public sealed virtual IContainer AddSingleton(Type serviceType, Func`1<object> factory);
    public sealed virtual IContainer AddTransient(Type serviceType, Func`1<object> factory);
    public sealed virtual object Resolve(Type type);
    public int get_DisposablesCount();
    [CompilerGeneratedAttribute]
public Owner get_DefaultOwner();
    [CompilerGeneratedAttribute]
public void set_DefaultOwner(Owner value);
    [CompilerGeneratedAttribute]
public ReuseScope get_DefaultReuse();
    [CompilerGeneratedAttribute]
public void set_DefaultReuse(ReuseScope value);
    public Container CreateChildContainer();
    protected virtual Container InstantiateChildContainer();
    public virtual void Dispose();
    public void Register(TService instance);
    public void Register(string name, TService instance);
    private ServiceEntry`2<TService, TFunc> RegisterImpl(string name, TFunc factory);
    private ServiceEntry`2<TService, TFunc> SetServiceEntry(ServiceKey key, ServiceEntry`2<TService, TFunc> entry);
    private bool TryGetServiceEntry(ServiceKey key, ServiceEntry& entry);
    private Exception CreateResolveException(Exception ex);
    private TService ResolveImpl(string name, bool throwIfMissing);
    private TService ResolveImpl(string name, bool throwIfMissing, TArg arg);
    private TService ResolveImpl(string name, bool throwIfMissing, TArg1 arg1, TArg2 arg2);
    private TService ResolveImpl(string name, bool throwIfMissing, TArg1 arg1, TArg2 arg2, TArg3 arg3);
    private TService ResolveImpl(string name, bool throwIfMissing, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    private TService ResolveImpl(string name, bool throwIfMissing, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    private TService ResolveImpl(string name, bool throwIfMissing, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6);
    internal void TrackDisposable(object instance);
    [CompilerGeneratedAttribute]
public bool get_CheckAdapterFirst();
    [CompilerGeneratedAttribute]
public void set_CheckAdapterFirst(bool value);
    protected virtual ServiceEntry`2<TService, TFunc> GetEntry(string serviceName, bool throwIfMissing);
    private Exception CreateAdapterException(Exception ex);
    private static TService ThrowMissing(string serviceName);
    private void ThrowIfNotRegistered(string name);
    [DebuggerStepThroughAttribute]
public Func`1<TService> LazyResolve();
    [DebuggerStepThroughAttribute]
public Func`2<TArg, TService> LazyResolve();
    [DebuggerStepThroughAttribute]
public Func`3<TArg1, TArg2, TService> LazyResolve();
    [DebuggerStepThroughAttribute]
public Func`4<TArg1, TArg2, TArg3, TService> LazyResolve();
    [DebuggerStepThroughAttribute]
public Func`5<TArg1, TArg2, TArg3, TArg4, TService> LazyResolve();
    [DebuggerStepThroughAttribute]
public Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TService> LazyResolve();
    [DebuggerStepThroughAttribute]
public Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> LazyResolve();
    [DebuggerStepThroughAttribute]
public Func`1<TService> LazyResolve(string name);
    [DebuggerStepThroughAttribute]
public Func`2<TArg, TService> LazyResolve(string name);
    [DebuggerStepThroughAttribute]
public Func`3<TArg1, TArg2, TService> LazyResolve(string name);
    [DebuggerStepThroughAttribute]
public Func`4<TArg1, TArg2, TArg3, TService> LazyResolve(string name);
    [DebuggerStepThroughAttribute]
public Func`5<TArg1, TArg2, TArg3, TArg4, TService> LazyResolve(string name);
    [DebuggerStepThroughAttribute]
public Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TService> LazyResolve(string name);
    [DebuggerStepThroughAttribute]
public Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> LazyResolve(string name);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(Func`2<Container, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(Func`3<Container, TArg, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(Func`4<Container, TArg1, TArg2, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(Func`5<Container, TArg1, TArg2, TArg3, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(Func`6<Container, TArg1, TArg2, TArg3, TArg4, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(Func`7<Container, TArg1, TArg2, TArg3, TArg4, TArg5, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(Func`8<Container, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(string name, Func`2<Container, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(string name, Func`3<Container, TArg, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(string name, Func`4<Container, TArg1, TArg2, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(string name, Func`5<Container, TArg1, TArg2, TArg3, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(string name, Func`6<Container, TArg1, TArg2, TArg3, TArg4, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(string name, Func`7<Container, TArg1, TArg2, TArg3, TArg4, TArg5, TService> factory);
    [DebuggerStepThroughAttribute]
public IRegistration`1<TService> Register(string name, Func`8<Container, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> factory);
    [DebuggerStepThroughAttribute]
public TService Resolve();
    [DebuggerStepThroughAttribute]
public TService Resolve(TArg arg);
    [DebuggerStepThroughAttribute]
public TService Resolve(TArg1 arg1, TArg2 arg2);
    [DebuggerStepThroughAttribute]
public TService Resolve(TArg1 arg1, TArg2 arg2, TArg3 arg3);
    [DebuggerStepThroughAttribute]
public TService Resolve(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [DebuggerStepThroughAttribute]
public TService Resolve(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    [DebuggerStepThroughAttribute]
public TService Resolve(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6);
    [DebuggerStepThroughAttribute]
public TService ResolveNamed(string name);
    [DebuggerStepThroughAttribute]
public TService ResolveNamed(string name, TArg arg);
    [DebuggerStepThroughAttribute]
public TService ResolveNamed(string name, TArg1 arg1, TArg2 arg2);
    [DebuggerStepThroughAttribute]
public TService ResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3);
    [DebuggerStepThroughAttribute]
public TService ResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [DebuggerStepThroughAttribute]
public TService ResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    [DebuggerStepThroughAttribute]
public TService ResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6);
    [DebuggerStepThroughAttribute]
public sealed virtual TService TryResolve();
    [DebuggerStepThroughAttribute]
public TService TryResolve(TArg arg);
    [DebuggerStepThroughAttribute]
public TService TryResolve(TArg1 arg1, TArg2 arg2);
    [DebuggerStepThroughAttribute]
public TService TryResolve(TArg1 arg1, TArg2 arg2, TArg3 arg3);
    [DebuggerStepThroughAttribute]
public TService TryResolve(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [DebuggerStepThroughAttribute]
public TService TryResolve(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    [DebuggerStepThroughAttribute]
public TService TryResolve(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6);
    [DebuggerStepThroughAttribute]
public TService TryResolveNamed(string name);
    [DebuggerStepThroughAttribute]
public TService TryResolveNamed(string name, TArg arg);
    [DebuggerStepThroughAttribute]
public TService TryResolveNamed(string name, TArg1 arg1, TArg2 arg2);
    [DebuggerStepThroughAttribute]
public TService TryResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3);
    [DebuggerStepThroughAttribute]
public TService TryResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    [DebuggerStepThroughAttribute]
public TService TryResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    [DebuggerStepThroughAttribute]
public TService TryResolveNamed(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6);
    public IRegistration`1<TService> RegisterServiceProviderFactory(Func`2<IServiceProvider, object> factory);
    public Func`2<IServiceProvider, object> CreateFactory(ServiceDescriptor item);
    public Func`2<IServiceProvider, object> CreateServiceCollectionFactory(Type type);
    public IServiceCollection AddSingleton(Type serviceType, Func`2<IServiceProvider, object> factory);
    public IServiceCollection AddTransient(Type serviceType, Func`2<IServiceProvider, object> factory);
    public IServiceCollection AddScoped(Type serviceType, Func`2<IServiceProvider, object> factory);
    public IServiceCollection Add(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public IServiceCollection Add(Type serviceType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    public sealed virtual void Add(ServiceDescriptor item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
    public void MakeReadOnly();
    private void CheckReadOnly();
    private static void ThrowReadOnlyException();
    private string DebuggerToString();
    [CompilerGeneratedAttribute]
private TService <GetEntry>b__79_2(Container c);
}
public class Funq.Func`6 : MulticastDelegate {
    public Func`6(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Funq.Func`7 : MulticastDelegate {
    public Func`7(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Funq.Func`8 : MulticastDelegate {
    public Func`8(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public interface Funq.IContainerModule {
}
[EditorBrowsableAttribute("1")]
public interface Funq.IFluentInterface {
    [EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object obj);
}
public interface Funq.IFunqlet {
    public abstract virtual void Configure(Container container);
}
public interface Funq.IHasContainer {
    public Container Container { get; }
    public abstract virtual Container get_Container();
}
[EditorBrowsableAttribute("1")]
public interface Funq.IInitializable`1 {
    public abstract virtual IReusedOwned InitializedBy(Action`2<Container, TService> initializer);
}
[EditorBrowsableAttribute("1")]
public interface Funq.IOwned {
    public abstract virtual void OwnedBy(Owner owner);
}
[EditorBrowsableAttribute("1")]
public interface Funq.IRegistration {
}
[EditorBrowsableAttribute("1")]
public interface Funq.IRegistration`1 {
}
[EditorBrowsableAttribute("1")]
public interface Funq.IReused {
    public abstract virtual IOwned ReusedWithin(ReuseScope scope);
}
[EditorBrowsableAttribute("1")]
public interface Funq.IReusedOwned {
}
public enum Funq.Owner : Enum {
    public int value__;
    public static Owner Container;
    public static Owner External;
    public static Owner Default;
}
public class Funq.ResolutionException : Exception {
    public ResolutionException(Type missingServiceType);
    public ResolutionException(Type missingServiceType, string missingServiceName);
    public ResolutionException(string message);
}
public enum Funq.ReuseScope : Enum {
    public int value__;
    public static ReuseScope Hierarchy;
    public static ReuseScope Container;
    public static ReuseScope None;
    public static ReuseScope Request;
    public static ReuseScope Default;
}
public class Funq.ServiceEntry : object {
    public Owner Owner;
    public ReuseScope Reuse;
    public Container Container;
    public sealed virtual void OwnedBy(Owner owner);
    public sealed virtual IOwned ReusedWithin(ReuseScope scope);
    public virtual object GetInstance();
    private sealed virtual override Type Funq.IFluentInterface.GetType();
}
public class Funq.ServiceEntry`2 : ServiceEntry {
    public TFunc Factory;
    private TService instance;
    internal Action`2<Container, TService> Initializer;
    internal TService Instance { get; internal set; }
    public ServiceEntry`2(TFunc factory);
    internal TService get_Instance();
    internal void set_Instance(TService value);
    public virtual object GetInstance();
    internal void InitializeInstance(TService instance);
    public sealed virtual IReusedOwned InitializedBy(Action`2<Container, TService> initializer);
    public ServiceEntry`2<TService, TFunc> CloneFor(Container newContainer);
    public IDisposable AquireLockIfNeeded();
    private sealed virtual override Type Funq.IFluentInterface.GetType();
}
internal class Funq.ServiceKey : object {
    private int hash;
    public Type FactoryType;
    public string Name;
    public ServiceKey(Type factoryType, string serviceName);
    public bool Equals(ServiceKey other);
    public virtual bool Equals(object obj);
    public static bool Equals(ServiceKey obj1, ServiceKey obj2);
    public virtual int GetHashCode();
}
internal class MarkdownDeep.Abbreviation : object {
    public string Abbr;
    public string Title;
    public Abbreviation(string abbr, string title);
}
internal class MarkdownDeep.Block : object {
    internal BlockType blockType;
    internal string buf;
    internal int contentStart;
    internal int contentLen;
    internal int lineStart;
    internal int lineLen;
    internal object data;
    internal List`1<Block> children;
    public string Content { get; }
    public int LineStart { get; }
    public int contentEnd { get; public set; }
    public int leadingSpaces { get; }
    internal Block(BlockType type);
    public string get_Content();
    public int get_LineStart();
    internal void RenderChildren(Markdown m, StringBuilder b);
    internal void RenderChildrenPlain(Markdown m, StringBuilder b);
    internal string ResolveHeaderID(Markdown m);
    internal void Render(Markdown m, StringBuilder b);
    internal void RenderPlain(Markdown m, StringBuilder b);
    public void RevertToPlain();
    public int get_contentEnd();
    public void set_contentEnd(int value);
    public int get_leadingSpaces();
    public virtual string ToString();
    public Block CopyFrom(Block other);
}
public class MarkdownDeep.BlockProcessor : StringScanner {
    private Markdown m_markdown;
    private BlockType m_parentType;
    private bool m_bMarkdownInHtml;
    public BlockProcessor(Markdown m, bool MarkdownInHtml);
    internal BlockProcessor(Markdown m, bool MarkdownInHtml, BlockType parentType);
    internal List`1<Block> Process(string str);
    internal List`1<Block> ScanLines(string str);
    internal List`1<Block> ScanLines(string str, int start, int len);
    internal bool StartTable(TableSpec spec, List`1<Block> lines);
    internal List`1<Block> ScanLines();
    internal Block CreateBlock();
    internal void FreeBlock(Block b);
    internal void FreeBlocks(List`1<Block> blocks);
    internal string RenderLines(List`1<Block> lines);
    internal void CollapseLines(List`1<Block> blocks, List`1<Block> lines);
    private Block EvaluateLine();
    private BlockType EvaluateLine(Block b);
    internal MarkdownInHtmlMode GetMarkdownMode(HtmlTag tag);
    internal bool ProcessMarkdownEnabledHtml(Block b, HtmlTag openingTag, MarkdownInHtmlMode mode);
    internal bool ScanHtml(Block b);
    private Block BuildList(List`1<Block> lines);
    private Block BuildDefinition(List`1<Block> lines);
    private void BuildDefinitionLists(List`1<Block> blocks);
    private Block BuildFootnote(List`1<Block> lines);
    private bool ProcessFencedCodeBlock(Block b);
}
internal enum MarkdownDeep.BlockType : Enum {
    public int value__;
    public static BlockType Blank;
    public static BlockType h1;
    public static BlockType h2;
    public static BlockType h3;
    public static BlockType h4;
    public static BlockType h5;
    public static BlockType h6;
    public static BlockType post_h1;
    public static BlockType post_h2;
    public static BlockType quote;
    public static BlockType ol_li;
    public static BlockType ul_li;
    public static BlockType p;
    public static BlockType indent;
    public static BlockType hr;
    public static BlockType user_break;
    public static BlockType html;
    public static BlockType unsafe_html;
    public static BlockType span;
    public static BlockType codeblock;
    public static BlockType li;
    public static BlockType ol;
    public static BlockType ul;
    public static BlockType HtmlTag;
    public static BlockType Composite;
    public static BlockType table_spec;
    public static BlockType dd;
    public static BlockType dt;
    public static BlockType dl;
    public static BlockType footnote;
    public static BlockType p_footnote;
}
internal enum MarkdownDeep.ColumnAlignment : Enum {
    public int value__;
    public static ColumnAlignment NA;
    public static ColumnAlignment Left;
    public static ColumnAlignment Right;
    public static ColumnAlignment Center;
}
internal class MarkdownDeep.FootnoteReference : object {
    public int index;
    public string id;
    public FootnoteReference(int index, string id);
}
public class MarkdownDeep.HtmlTag : object {
    private string m_name;
    private Dictionary`2<string, string> m_attributes;
    private bool m_closed;
    private bool m_closing;
    private HtmlTagFlags m_flags;
    private static String[] m_allowed_tags;
    private static Dictionary`2<string, String[]> m_allowed_attributes;
    private static Dictionary`2<string, HtmlTagFlags> m_tag_flags;
    public string name { get; }
    public Dictionary`2<string, string> attributes { get; }
    public bool closed { get; public set; }
    public bool closing { get; }
    public HtmlTagFlags Flags { get; }
    public HtmlTag(string name);
    private static HtmlTag();
    public string get_name();
    public Dictionary`2<string, string> get_attributes();
    public bool get_closed();
    public void set_closed(bool value);
    public bool get_closing();
    public HtmlTagFlags get_Flags();
    public bool IsSafe();
    public void RenderOpening(StringBuilder dest);
    public void RenderClosing(StringBuilder dest);
    public static HtmlTag Parse(string str, Int32& pos);
    public static HtmlTag Parse(StringScanner p);
    private static HtmlTag ParseHelper(StringScanner p);
}
[FlagsAttribute]
public enum MarkdownDeep.HtmlTagFlags : Enum {
    public int value__;
    public static HtmlTagFlags Block;
    public static HtmlTagFlags Inline;
    public static HtmlTagFlags NoClosing;
    public static HtmlTagFlags ContentAsSpan;
}
public class MarkdownDeep.ImageInfo : object {
    public string url;
    public bool titled_image;
    public int width;
    public int height;
}
public class MarkdownDeep.LinkDefinition : object {
    [CompilerGeneratedAttribute]
private string <id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <title>k__BackingField;
    public string id { get; public set; }
    public string url { get; public set; }
    public string title { get; public set; }
    public LinkDefinition(string id);
    public LinkDefinition(string id, string url);
    public LinkDefinition(string id, string url, string title);
    [CompilerGeneratedAttribute]
public string get_id();
    [CompilerGeneratedAttribute]
public void set_id(string value);
    [CompilerGeneratedAttribute]
public string get_url();
    [CompilerGeneratedAttribute]
public void set_url(string value);
    [CompilerGeneratedAttribute]
public string get_title();
    [CompilerGeneratedAttribute]
public void set_title(string value);
    internal void RenderLink(Markdown m, StringBuilder b, string link_text);
    internal void RenderImg(Markdown m, StringBuilder b, string alt_text);
    internal static LinkDefinition ParseLinkDefinition(string str, bool ExtraMode);
    internal static LinkDefinition ParseLinkDefinition(StringScanner p, bool ExtraMode);
    internal static LinkDefinition ParseLinkDefinitionInternal(StringScanner p, bool ExtraMode);
    internal static LinkDefinition ParseLinkTarget(StringScanner p, string id, bool ExtraMode);
}
internal class MarkdownDeep.LinkInfo : object {
    public LinkDefinition def;
    public string link_text;
    public LinkInfo(LinkDefinition def, string link_text);
}
public class MarkdownDeep.Markdown : object {
    [CompilerGeneratedAttribute]
private int <SummaryLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SafeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtraMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MarkdownInHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoHeadingIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlBaseLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlRootLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewWindowForExternalLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewWindowForLocalLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoFollowLinks>k__BackingField;
    public Func`2<string, string> QualifyUrl;
    public Func`2<ImageInfo, bool> GetImageSize;
    public Func`2<HtmlTag, bool> PrepareLink;
    public Func`3<HtmlTag, bool, bool> PrepareImage;
    internal bool RenderingTitledImage;
    [CompilerGeneratedAttribute]
private string <HtmlClassFootnotes>k__BackingField;
    public Func`3<Markdown, string, string> FormatCodeBlock;
    [CompilerGeneratedAttribute]
private bool <ExtractHeadBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadBlockContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserBreaks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlClassTitledImages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionHeadingSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionFooter>k__BackingField;
    private Stack`1<Block> m_SpareBlocks;
    private StringBuilder m_StringBuilder;
    private StringScanner m_StringScanner;
    private SpanFormatter m_SpanFormatter;
    private Dictionary`2<string, LinkDefinition> m_LinkDefinitions;
    private Dictionary`2<string, Block> m_Footnotes;
    private List`1<Block> m_UsedFootnotes;
    private Dictionary`2<string, bool> m_UsedHeaderIDs;
    private Dictionary`2<string, Abbreviation> m_AbbreviationMap;
    private List`1<Abbreviation> m_AbbreviationList;
    public int SummaryLength { get; public set; }
    public bool SafeMode { get; public set; }
    public bool ExtraMode { get; public set; }
    public bool MarkdownInHtml { get; public set; }
    public bool AutoHeadingIDs { get; public set; }
    public string UrlBaseLocation { get; public set; }
    public string UrlRootLocation { get; public set; }
    public bool NewWindowForExternalLinks { get; public set; }
    public bool NewWindowForLocalLinks { get; public set; }
    public string DocumentRoot { get; public set; }
    public string DocumentLocation { get; public set; }
    public int MaxImageWidth { get; public set; }
    public bool NoFollowLinks { get; public set; }
    public string HtmlClassFootnotes { get; public set; }
    public bool ExtractHeadBlocks { get; public set; }
    public string HeadBlockContent { get; internal set; }
    public bool UserBreaks { get; public set; }
    public string HtmlClassTitledImages { get; public set; }
    public string SectionHeader { get; public set; }
    public string SectionHeadingSuffix { get; public set; }
    public string SectionFooter { get; public set; }
    internal SpanFormatter SpanFormatter { get; }
    internal List`1<Block> ProcessBlocks(string str);
    public string Transform(string str);
    public string Transform(string str, Dictionary`2& definitions);
    [CompilerGeneratedAttribute]
public int get_SummaryLength();
    [CompilerGeneratedAttribute]
public void set_SummaryLength(int value);
    [CompilerGeneratedAttribute]
public bool get_SafeMode();
    [CompilerGeneratedAttribute]
public void set_SafeMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExtraMode();
    [CompilerGeneratedAttribute]
public void set_ExtraMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_MarkdownInHtml();
    [CompilerGeneratedAttribute]
public void set_MarkdownInHtml(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoHeadingIDs();
    [CompilerGeneratedAttribute]
public void set_AutoHeadingIDs(bool value);
    [CompilerGeneratedAttribute]
public string get_UrlBaseLocation();
    [CompilerGeneratedAttribute]
public void set_UrlBaseLocation(string value);
    [CompilerGeneratedAttribute]
public string get_UrlRootLocation();
    [CompilerGeneratedAttribute]
public void set_UrlRootLocation(string value);
    [CompilerGeneratedAttribute]
public bool get_NewWindowForExternalLinks();
    [CompilerGeneratedAttribute]
public void set_NewWindowForExternalLinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_NewWindowForLocalLinks();
    [CompilerGeneratedAttribute]
public void set_NewWindowForLocalLinks(bool value);
    [CompilerGeneratedAttribute]
public string get_DocumentRoot();
    [CompilerGeneratedAttribute]
public void set_DocumentRoot(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentLocation();
    [CompilerGeneratedAttribute]
public void set_DocumentLocation(string value);
    [CompilerGeneratedAttribute]
public int get_MaxImageWidth();
    [CompilerGeneratedAttribute]
public void set_MaxImageWidth(int value);
    [CompilerGeneratedAttribute]
public bool get_NoFollowLinks();
    [CompilerGeneratedAttribute]
public void set_NoFollowLinks(bool value);
    public virtual string OnQualifyUrl(string url);
    public virtual bool OnGetImageSize(string url, bool TitledImage, Int32& width, Int32& height);
    public virtual void OnPrepareLink(HtmlTag tag);
    public virtual void OnPrepareImage(HtmlTag tag, bool TitledImage);
    [CompilerGeneratedAttribute]
public string get_HtmlClassFootnotes();
    [CompilerGeneratedAttribute]
public void set_HtmlClassFootnotes(string value);
    [CompilerGeneratedAttribute]
public bool get_ExtractHeadBlocks();
    [CompilerGeneratedAttribute]
public void set_ExtractHeadBlocks(bool value);
    [CompilerGeneratedAttribute]
public string get_HeadBlockContent();
    [CompilerGeneratedAttribute]
internal void set_HeadBlockContent(string value);
    [CompilerGeneratedAttribute]
public bool get_UserBreaks();
    [CompilerGeneratedAttribute]
public void set_UserBreaks(bool value);
    [CompilerGeneratedAttribute]
public string get_HtmlClassTitledImages();
    [CompilerGeneratedAttribute]
public void set_HtmlClassTitledImages(string value);
    [CompilerGeneratedAttribute]
public string get_SectionHeader();
    [CompilerGeneratedAttribute]
public void set_SectionHeader(string value);
    [CompilerGeneratedAttribute]
public string get_SectionHeadingSuffix();
    [CompilerGeneratedAttribute]
public void set_SectionHeadingSuffix(string value);
    [CompilerGeneratedAttribute]
public string get_SectionFooter();
    [CompilerGeneratedAttribute]
public void set_SectionFooter(string value);
    public virtual void OnSectionHeader(StringBuilder dest, int Index);
    public virtual void OnSectionHeadingSuffix(StringBuilder dest, int Index);
    public virtual void OnSectionFooter(StringBuilder dest, int Index);
    private bool IsSectionHeader(Block b);
    public static List`1<string> SplitUserSections(string markdown);
    public static string JoinUserSections(List`1<string> sections);
    public static List`1<string> SplitSections(string markdown);
    public static string JoinSections(List`1<string> sections);
    internal void AddLinkDefinition(LinkDefinition link);
    internal void AddFootnote(Block footnote);
    internal int ClaimFootnote(string id);
    public LinkDefinition GetLinkDefinition(string id);
    internal void AddAbbreviation(string abbr, string title);
    internal List`1<Abbreviation> GetAbbreviations();
    internal void HtmlEncode(StringBuilder dest, string str, int start, int len);
    internal void HtmlEncodeAndConvertTabsToSpaces(StringBuilder dest, string str, int start, int len);
    internal string MakeUniqueHeaderID(string strHeaderText);
    internal string MakeUniqueHeaderID(string strHeaderText, int startOffset, int length);
    internal StringBuilder GetStringBuilder();
    internal SpanFormatter get_SpanFormatter();
    internal Block CreateBlock();
    internal void FreeBlock(Block b);
}
public class MarkdownDeep.MarkdownDeepTransformer : object {
    public sealed virtual string Transform(string markdown);
}
internal class MarkdownDeep.SpanFormatter : StringScanner {
    private Stack`1<Token> m_SpareTokens;
    private Markdown m_Markdown;
    internal bool DisableLinks;
    private List`1<Token> m_Tokens;
    public SpanFormatter(Markdown m);
    internal void FormatParagraph(StringBuilder dest, string str, int start, int len);
    internal void Format(StringBuilder dest, string str);
    internal void Format(StringBuilder dest, string str, int start, int len);
    internal void FormatPlain(StringBuilder dest, string str, int start, int len);
    internal string Format(string str);
    internal string MakeID(string str);
    internal string MakeID(string str, int start, int len);
    private void Render(StringBuilder sb, string str);
    private void RenderPlain(StringBuilder sb, string str);
    public void Tokenize(string str, int start, int len);
    private static bool IsEmphasisChar(char ch);
    public Token CreateEmphasisMark();
    public Token SplitMarkToken(List`1<Token> tokens, List`1<Token> marks, Token token, int position);
    public void ResolveEmphasisMarks(List`1<Token> tokens, List`1<Token> marks);
    public void ResolveEmphasisMarks_classic(List`1<Token> tokens, List`1<Token> marks);
    private Token ProcessAutoLink();
    private Token ProcessLinkOrImageOrFootnote();
    private Token ProcessCodeSpan();
    internal Token CreateToken(TokenType type, int startOffset, int length);
    internal Token CreateToken(TokenType type, object data);
    internal void FreeToken(Token token);
}
public class MarkdownDeep.StringScanner : object {
    private string str;
    private int start;
    private int pos;
    private int end;
    private int mark;
    public string input { get; }
    public char current { get; }
    public int position { get; public set; }
    public string remainder { get; }
    public bool eof { get; }
    public bool eol { get; }
    public bool bof { get; }
    public StringScanner(string str);
    public StringScanner(string str, int pos);
    public StringScanner(string str, int pos, int len);
    public void Reset(string str);
    public void Reset(string str, int pos);
    public void Reset(string str, int pos, int len);
    public string get_input();
    public char get_current();
    public int get_position();
    public void set_position(int value);
    public string get_remainder();
    public void SkipToEof();
    public void SkipToEol();
    public bool SkipEol();
    public void SkipToNextLine();
    public char CharAtOffset(int offset);
    public void SkipForward(int characters);
    public bool SkipChar(char ch);
    public bool SkipString(string str);
    public bool SkipStringI(string str);
    public bool SkipWhitespace();
    public static bool IsLineSpace(char ch);
    public bool SkipLinespace();
    public bool DoesMatch(char ch);
    public bool DoesMatch(int offset, char ch);
    public bool DoesMatchAny(Char[] chars);
    public bool DoesMatchAny(int offset, Char[] chars);
    public bool DoesMatch(string str);
    public bool DoesMatchI(string str);
    public string Substring(int start);
    public string Substring(int start, int len);
    public bool Find(char ch);
    public bool FindAny(Char[] chars);
    public bool Find(string find);
    public bool FindI(string find);
    public bool get_eof();
    public bool get_eol();
    public bool get_bof();
    public void Mark();
    public string Extract();
    public bool SkipIdentifier(String& identifier);
    public bool SkipFootnoteID(String& id);
    public bool SkipHtmlEntity(String& entity);
    public static bool IsLineEnd(char ch);
    private bool IsUrlChar(char ch);
}
internal class MarkdownDeep.TableSpec : object {
    public bool LeadingBar;
    public bool TrailingBar;
    public List`1<ColumnAlignment> Columns;
    public List`1<string> Headers;
    public List`1<List`1<string>> Rows;
    public List`1<string> ParseRow(StringScanner p);
    internal void RenderRow(Markdown m, StringBuilder b, List`1<string> row, string type);
    public void Render(Markdown m, StringBuilder b);
    public static TableSpec Parse(StringScanner p);
}
internal class MarkdownDeep.Token : object {
    public TokenType type;
    public int startOffset;
    public int length;
    public object data;
    public Token(TokenType type, int startOffset, int length);
    public Token(TokenType type, object data);
    public virtual string ToString();
}
internal enum MarkdownDeep.TokenType : Enum {
    public int value__;
    public static TokenType Text;
    public static TokenType HtmlTag;
    public static TokenType Html;
    public static TokenType open_em;
    public static TokenType close_em;
    public static TokenType open_strong;
    public static TokenType close_strong;
    public static TokenType code_span;
    public static TokenType br;
    public static TokenType link;
    public static TokenType img;
    public static TokenType footnote;
    public static TokenType abbreviation;
    public static TokenType opening_mark;
    public static TokenType closing_mark;
    public static TokenType internal_mark;
}
[ExtensionAttribute]
internal static class MarkdownDeep.Utils : object {
    private static Char[] lineends;
    private static Utils();
    [ExtensionAttribute]
public static T Last(List`1<T> list);
    [ExtensionAttribute]
public static T First(List`1<T> list);
    [ExtensionAttribute]
public static void Push(List`1<T> list, T value);
    [ExtensionAttribute]
public static T Pop(List`1<T> list);
    public static bool ParseIdentifier(string str, Int32& pos, String& identifer);
    public static bool SkipHtmlEntity(string str, Int32& pos, String& entity);
    public static void HtmlRandomize(StringBuilder dest, string str);
    public static void SmartHtmlEncodeAmpsAndAngles(StringBuilder dest, string str);
    public static void SmartHtmlEncodeAmps(StringBuilder dest, string str, int startOffset, int len);
    public static bool IsInList(string str, String[] list);
    public static bool IsSafeUrl(string url);
    public static bool IsEscapableChar(char ch, bool ExtraMode);
    [ExtensionAttribute]
public static void SkipEscapableChar(StringScanner p, bool ExtraMode);
    public static string UnescapeString(string str, bool ExtraMode);
    public static string NormalizeLineEnds(string str);
    public static bool IsEmailAddress(string str);
    public static bool IsWebAddress(string str);
    internal static bool IsValidHtmlID(string str);
    public static string StripHtmlID(string str, int start, Int32& end);
    public static bool IsUrlFullyQualified(string url);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("68")]
public class ServiceStack.AddHeaderAttribute : RequestFilterAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public HttpStatusCode Status { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public string DefaultContentType { get; public set; }
    public string ContentEncoding { get; public set; }
    public string ContentLength { get; public set; }
    public string ContentDisposition { get; public set; }
    public string Location { get; public set; }
    public string SetCookie { get; public set; }
    public string ETag { get; public set; }
    public string CacheControl { get; public set; }
    public string LastModified { get; public set; }
    public AddHeaderAttribute(string name, string value);
    public AddHeaderAttribute(HttpStatusCode status, string statusDescription);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public HttpStatusCode get_Status();
    public void set_Status(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_StatusDescription();
    [CompilerGeneratedAttribute]
public void set_StatusDescription(string value);
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_DefaultContentType();
    public void set_DefaultContentType(string value);
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public string get_ContentLength();
    public void set_ContentLength(string value);
    public string get_ContentDisposition();
    public void set_ContentDisposition(string value);
    public string get_Location();
    public void set_Location(string value);
    public string get_SetCookie();
    public void set_SetCookie(string value);
    public string get_ETag();
    public void set_ETag(string value);
    public string get_CacheControl();
    public void set_CacheControl(string value);
    public string get_LastModified();
    public void set_LastModified(string value);
}
[ExcludeMetadataAttribute]
[TagAttribute("admin")]
public class ServiceStack.Admin.AdminDashboard : object {
}
public class ServiceStack.Admin.AdminDashboardResponse : object {
    [CompilerGeneratedAttribute]
private ServerStats <ServerStats>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public ServerStats ServerStats { get; public set; }
    public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public ServerStats get_ServerStats();
    [CompilerGeneratedAttribute]
public void set_ServerStats(ServerStats value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
[DefaultRequestAttribute("ServiceStack.Admin.AdminDashboard")]
public class ServiceStack.Admin.AdminDashboardService : Service {
    public object Any(AdminDashboard request);
}
[ExtensionAttribute]
public static class ServiceStack.Admin.AdminDashboardUtils : object {
    [ExtensionAttribute]
public static Dictionary`2<string, long> ToDictionary(IMessageHandlerStats stats);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeMetadataAttribute]
[TagAttribute("admin")]
public class ServiceStack.Admin.AdminProfiling : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WithErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pending>k__BackingField;
    public string Source { get; public set; }
    public string EventType { get; public set; }
    public Nullable`1<int> ThreadId { get; public set; }
    public string TraceId { get; public set; }
    public string UserAuthId { get; public set; }
    public string SessionId { get; public set; }
    public string Tag { get; public set; }
    public int Skip { get; public set; }
    public Nullable`1<int> Take { get; public set; }
    public string OrderBy { get; public set; }
    public Nullable`1<bool> WithErrors { get; public set; }
    public Nullable`1<bool> Pending { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(string value);
    [CompilerGeneratedAttribute]
public string get_UserAuthId();
    [CompilerGeneratedAttribute]
public void set_UserAuthId(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Take();
    [CompilerGeneratedAttribute]
public void set_Take(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WithErrors();
    [CompilerGeneratedAttribute]
public void set_WithErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pending();
    [CompilerGeneratedAttribute]
public void set_Pending(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Admin.AdminProfilingResponse : object {
    [CompilerGeneratedAttribute]
private List`1<DiagnosticEntry> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public List`1<DiagnosticEntry> Results { get; public set; }
    public int Total { get; public set; }
    public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DiagnosticEntry> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<DiagnosticEntry> value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(int value);
    [CompilerGeneratedAttribute]
public ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public void set_ResponseStatus(ResponseStatus value);
}
[DefaultRequestAttribute("ServiceStack.Admin.AdminProfiling")]
public class ServiceStack.Admin.AdminProfilingService : Service {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("ServiceStack.Admin.AdminProfilingService/<Any>d__0")]
public Task`1<object> Any(AdminProfiling request);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeMetadataAttribute]
[TagAttribute("admin")]
public class ServiceStack.Admin.AdminRedis : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisEndpointInfo <Reconnect>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Args>k__BackingField;
    public Nullable`1<int> Db { get; public set; }
    public string Query { get; public set; }
    public RedisEndpointInfo Reconnect { get; public set; }
    public Nullable`1<int> Take { get; public set; }
    public Nullable`1<int> Position { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Args { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Db();
    [CompilerGeneratedAttribute]
public void set_Db(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public RedisEndpointInfo get_Reconnect();
    [CompilerGeneratedAttribute]
public void set_Reconnect(RedisEndpointInfo value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Take();
    [CompilerGeneratedAttribute]
public void set_Take(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(List`1<string> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.Admin.AdminRedisResponse : object {
    [CompilerGeneratedAttribute]
private long <Db>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<RedisSearchResult> <SearchResults>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisEndpointInfo <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisText <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public long Db { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<RedisSearchResult> SearchResults { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> Info { get; public set; }
    public RedisEndpointInfo Endpoint { get; public set; }
    public RedisText Result { get; public set; }
    public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Db();
    [CompilerGeneratedAttribute]
public void set_Db(long value);
    [CompilerGeneratedAttribute]
public List`1<RedisSearchResult> get_SearchResults();
    [CompilerGeneratedAttribute]
public void set_SearchResults(List`1<RedisSearchResult> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public RedisEndpointInfo get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(RedisEndpointInfo value);
    [CompilerGeneratedAttribute]
public RedisText get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(RedisText value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Admin.AdminRedisService : Service {
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminRedisService/<AssertRequiredRole>d__1")]
private Task`1<AdminRedisFeature> AssertRequiredRole();
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminRedisService/<Post>d__2")]
public Task`1<object> Post(AdminRedis request);
    [NullableContextAttribute("2")]
private RedisEndpointInfo ToRedisEndpointInfo(IRedisEndpoint endpoint);
    private void ChangeConnection(RedisEndpointInfo endpoint);
    public static string ToConnectionString(RedisEndpointInfo endpoint);
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminRedisService/<Search>d__6")]
public Task`1<SearchCursorResult> Search(IRedisClientAsync redis, string query, int position, int limit);
}
public class ServiceStack.Admin.AdminUsersService : Service {
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<AssertRequiredRole>d__0")]
private Task`1<AdminUsersFeature> AssertRequiredRole();
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<Validate>d__1")]
private Task`1<object> Validate(AdminUserBase request);
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<Get>d__2")]
public Task`1<object> Get(AdminGetUser request);
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<Get>d__3")]
public Task`1<object> Get(AdminQueryUsers request);
    private List`1<Dictionary`2<string, object>> FilterResults(List`1<Dictionary`2<string, object>> results, List`1<string> includeProps);
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<Post>d__5")]
public Task`1<object> Post(AdminCreateUser request);
    private IUserAuth NewUserAuth();
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<Put>d__7")]
public Task`1<object> Put(AdminUpdateUser request);
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<Delete>d__8")]
public Task`1<object> Delete(AdminDeleteUser request);
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<CreateUserResponse>d__9")]
private Task`1<object> CreateUserResponse(IUserAuth user, List`1<IUserAuthDetails> existingUserDetails);
    [AsyncStateMachineAttribute("ServiceStack.Admin.AdminUsersService/<GetUserPropsAndRoles>d__10")]
private Task`1<Dictionary`2<string, object>> GetUserPropsAndRoles(IUserAuth user);
    private static Dictionary`2<string, object> ToUserProps(IUserAuth user);
    private IUserAuth PopulateUserAuth(IUserAuth to, AdminUserBase request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Admin.RedisSearchResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Ttl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public string Id { get; public set; }
    public string Type { get; public set; }
    public long Ttl { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public long get_Ttl();
    [CompilerGeneratedAttribute]
public void set_Ttl(long value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
}
[IconAttribute]
[DataContractAttribute]
[ExcludeMetadataAttribute]
[TagAttribute("admin")]
public class ServiceStack.Admin.RequestLogs : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BeforeSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AfterSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardedFor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Referer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Int64[] <Ids>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BeforeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AfterId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WithErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableSessionTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableResponseTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableErrorTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DurationLongerThan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DurationLessThan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> BeforeSecs { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> AfterSecs { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    [DataMemberAttribute]
public string IpAddress { get; public set; }
    [DataMemberAttribute]
public string ForwardedFor { get; public set; }
    [DataMemberAttribute]
public string UserAuthId { get; public set; }
    [DataMemberAttribute]
public string SessionId { get; public set; }
    [DataMemberAttribute]
public string Referer { get; public set; }
    [DataMemberAttribute]
public string PathInfo { get; public set; }
    [DataMemberAttribute]
public Int64[] Ids { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> BeforeId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> AfterId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> HasResponse { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> WithErrors { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> EnableSessionTracking { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> EnableResponseTracking { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> EnableErrorTracking { get; public set; }
    [DataMemberAttribute]
public Nullable`1<TimeSpan> DurationLongerThan { get; public set; }
    [DataMemberAttribute]
public Nullable`1<TimeSpan> DurationLessThan { get; public set; }
    [DataMemberAttribute]
public int Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Take { get; public set; }
    [DataMemberAttribute]
public string OrderBy { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BeforeSecs();
    [CompilerGeneratedAttribute]
public void set_BeforeSecs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AfterSecs();
    [CompilerGeneratedAttribute]
public void set_AfterSecs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardedFor();
    [CompilerGeneratedAttribute]
public void set_ForwardedFor(string value);
    [CompilerGeneratedAttribute]
public string get_UserAuthId();
    [CompilerGeneratedAttribute]
public void set_UserAuthId(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_Referer();
    [CompilerGeneratedAttribute]
public void set_Referer(string value);
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
    [CompilerGeneratedAttribute]
public Int64[] get_Ids();
    [CompilerGeneratedAttribute]
public void set_Ids(Int64[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BeforeId();
    [CompilerGeneratedAttribute]
public void set_BeforeId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AfterId();
    [CompilerGeneratedAttribute]
public void set_AfterId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasResponse();
    [CompilerGeneratedAttribute]
public void set_HasResponse(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WithErrors();
    [CompilerGeneratedAttribute]
public void set_WithErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableSessionTracking();
    [CompilerGeneratedAttribute]
public void set_EnableSessionTracking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableResponseTracking();
    [CompilerGeneratedAttribute]
public void set_EnableResponseTracking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableErrorTracking();
    [CompilerGeneratedAttribute]
public void set_EnableErrorTracking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DurationLongerThan();
    [CompilerGeneratedAttribute]
public void set_DurationLongerThan(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DurationLessThan();
    [CompilerGeneratedAttribute]
public void set_DurationLessThan(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Take();
    [CompilerGeneratedAttribute]
public void set_Take(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(string value);
}
[DataContractAttribute]
public class ServiceStack.Admin.RequestLogsResponse : object {
    [CompilerGeneratedAttribute]
private List`1<RequestLogEntry> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Usage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [DataMemberAttribute]
public List`1<RequestLogEntry> Results { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Usage { get; public set; }
    [DataMemberAttribute]
public int Total { get; public set; }
    [DataMemberAttribute]
public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<RequestLogEntry> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<RequestLogEntry> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Usage();
    [CompilerGeneratedAttribute]
public void set_Usage(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(int value);
    [CompilerGeneratedAttribute]
public ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public void set_ResponseStatus(ResponseStatus value);
}
[DefaultRequestAttribute("ServiceStack.Admin.RequestLogs")]
public class ServiceStack.Admin.RequestLogsService : Service {
    [CompilerGeneratedAttribute]
private IRequestLogger <requestLogger>P;
    private static Dictionary`2<string, string> Usage;
    public RequestLogsService(IRequestLogger requestLogger);
    private static RequestLogsService();
    [AsyncStateMachineAttribute("ServiceStack.Admin.RequestLogsService/<Any>d__3")]
public Task`1<object> Any(RequestLogs request);
}
public class ServiceStack.Admin.ServerStats : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, long> <Redis>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ServerEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MqDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, long> <MqWorkers>k__BackingField;
    public Dictionary`2<string, long> Redis { get; public set; }
    public Dictionary`2<string, string> ServerEvents { get; public set; }
    public string MqDescription { get; public set; }
    public Dictionary`2<string, long> MqWorkers { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, long> get_Redis();
    [CompilerGeneratedAttribute]
public void set_Redis(Dictionary`2<string, long> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ServerEvents();
    [CompilerGeneratedAttribute]
public void set_ServerEvents(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_MqDescription();
    [CompilerGeneratedAttribute]
public void set_MqDescription(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, long> get_MqWorkers();
    [CompilerGeneratedAttribute]
public void set_MqWorkers(Dictionary`2<string, long> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.AdminRedisFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminRole>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueryLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Databases>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ModifiableConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IllegalCommands>k__BackingField;
    public string Id { get; public set; }
    public string AdminRole { get; public set; }
    public int QueryLimit { get; public set; }
    public List`1<int> Databases { get; public set; }
    public Nullable`1<bool> ModifiableConnection { get; public set; }
    public HashSet`1<string> IllegalCommands { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_AdminRole();
    [CompilerGeneratedAttribute]
public void set_AdminRole(string value);
    [CompilerGeneratedAttribute]
public int get_QueryLimit();
    [CompilerGeneratedAttribute]
public void set_QueryLimit(int value);
    [CompilerGeneratedAttribute]
public List`1<int> get_Databases();
    [CompilerGeneratedAttribute]
public void set_Databases(List`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ModifiableConnection();
    [CompilerGeneratedAttribute]
public void set_ModifiableConnection(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IllegalCommands();
    [CompilerGeneratedAttribute]
public void set_IllegalCommands(HashSet`1<string> value);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__26_0(UiFeature feature);
}
[FlagsAttribute]
public enum ServiceStack.AdminUiFeature : Enum {
    public int value__;
    public static AdminUiFeature None;
    public static AdminUiFeature Users;
    public static AdminUiFeature Validation;
    public static AdminUiFeature Logging;
    public static AdminUiFeature Profiling;
    public static AdminUiFeature Redis;
    public static AdminUiFeature Database;
    public static AdminUiFeature Commands;
    public static AdminUiFeature ApiKeys;
    public static AdminUiFeature BackgroundJobs;
    public static AdminUiFeature All;
}
public class ServiceStack.AdminUsersFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminRole>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <QueryUserAuthProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MediaRule> <QueryMediaRules>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InputInfo> <FormLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RestrictedUserAuthProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidateAsyncFn <ValidateFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IUserAuth, Service, Task> <OnBeforeCreateUser>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IUserAuth, Service, Task> <OnAfterCreateUser>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IUserAuth, IUserAuth, Service, Task> <OnBeforeUpdateUser>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IUserAuth, IUserAuth, Service, Task> <OnAfterUpdateUser>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, Service, Task> <OnBeforeDeleteUser>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, Service, Task> <OnAfterDeleteUser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExecuteOnRegisteredEventsForCreatedUsers>k__BackingField;
    public string Id { get; public set; }
    public string AdminRole { get; public set; }
    public List`1<string> QueryUserAuthProperties { get; public set; }
    public List`1<MediaRule> QueryMediaRules { get; public set; }
    unknown List`1<List`1<InputInfo>> UserFormLayout {public set; }
    public List`1<InputInfo> FormLayout { get; public set; }
    public List`1<string> RestrictedUserAuthProperties { get; public set; }
    public ValidateAsyncFn ValidateFn { get; public set; }
    public Func`3<IUserAuth, Service, Task> OnBeforeCreateUser { get; public set; }
    public Func`3<IUserAuth, Service, Task> OnAfterCreateUser { get; public set; }
    public Func`4<IUserAuth, IUserAuth, Service, Task> OnBeforeUpdateUser { get; public set; }
    public Func`4<IUserAuth, IUserAuth, Service, Task> OnAfterUpdateUser { get; public set; }
    public Func`3<string, Service, Task> OnBeforeDeleteUser { get; public set; }
    public Func`3<string, Service, Task> OnAfterDeleteUser { get; public set; }
    public bool ExecuteOnRegisteredEventsForCreatedUsers { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_AdminRole();
    [CompilerGeneratedAttribute]
public void set_AdminRole(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_QueryUserAuthProperties();
    [CompilerGeneratedAttribute]
public void set_QueryUserAuthProperties(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<MediaRule> get_QueryMediaRules();
    [CompilerGeneratedAttribute]
public void set_QueryMediaRules(List`1<MediaRule> value);
    public void set_UserFormLayout(List`1<List`1<InputInfo>> value);
    [CompilerGeneratedAttribute]
public List`1<InputInfo> get_FormLayout();
    [CompilerGeneratedAttribute]
public void set_FormLayout(List`1<InputInfo> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RestrictedUserAuthProperties();
    [CompilerGeneratedAttribute]
public void set_RestrictedUserAuthProperties(List`1<string> value);
    [CompilerGeneratedAttribute]
public ValidateAsyncFn get_ValidateFn();
    [CompilerGeneratedAttribute]
public void set_ValidateFn(ValidateAsyncFn value);
    [CompilerGeneratedAttribute]
public Func`3<IUserAuth, Service, Task> get_OnBeforeCreateUser();
    [CompilerGeneratedAttribute]
public void set_OnBeforeCreateUser(Func`3<IUserAuth, Service, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<IUserAuth, Service, Task> get_OnAfterCreateUser();
    [CompilerGeneratedAttribute]
public void set_OnAfterCreateUser(Func`3<IUserAuth, Service, Task> value);
    [CompilerGeneratedAttribute]
public Func`4<IUserAuth, IUserAuth, Service, Task> get_OnBeforeUpdateUser();
    [CompilerGeneratedAttribute]
public void set_OnBeforeUpdateUser(Func`4<IUserAuth, IUserAuth, Service, Task> value);
    [CompilerGeneratedAttribute]
public Func`4<IUserAuth, IUserAuth, Service, Task> get_OnAfterUpdateUser();
    [CompilerGeneratedAttribute]
public void set_OnAfterUpdateUser(Func`4<IUserAuth, IUserAuth, Service, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<string, Service, Task> get_OnBeforeDeleteUser();
    [CompilerGeneratedAttribute]
public void set_OnBeforeDeleteUser(Func`3<string, Service, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<string, Service, Task> get_OnAfterDeleteUser();
    [CompilerGeneratedAttribute]
public void set_OnAfterDeleteUser(Func`3<string, Service, Task> value);
    [CompilerGeneratedAttribute]
public bool get_ExecuteOnRegisteredEventsForCreatedUsers();
    [CompilerGeneratedAttribute]
public void set_ExecuteOnRegisteredEventsForCreatedUsers(bool value);
    public AdminUsersFeature RemoveFromUserForm(String[] fieldNames);
    public AdminUsersFeature RemoveFromUserForm(Predicate`1<InputInfo> match);
    public AdminUsersFeature RemoveFromQueryResults(String[] fieldNames);
    public AdminUsersFeature RemoveFields(String[] fieldNames);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void AfterInit(IAppHost appHost);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__62_0(UiFeature feature);
}
public class ServiceStack.AlwaysFalseCondition : QueryCondition {
    public static AlwaysFalseCondition Instance;
    public string Alias { get; }
    private static AlwaysFalseCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.AlwaysValidValidator : NoopPropertyValidator {
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<ValidationFailure> Validate(PropertyValidatorContext context);
}
public static class ServiceStack.ApiHandlers : object {
    public static Func`2<IHttpRequest, HttpAsyncTaskHandler> Json(string apiPath);
    public static Func`2<IHttpRequest, HttpAsyncTaskHandler> Jsv(string apiPath);
    public static Func`2<IHttpRequest, HttpAsyncTaskHandler> Csv(string apiPath);
    public static Func`2<IHttpRequest, HttpAsyncTaskHandler> Xml(string apiPath);
    public static Func`2<IHttpRequest, HttpAsyncTaskHandler> Generic(string apiPath, string contentType, RequestAttributes requestAttributes, Feature features);
    public static string GetBaseApiPath(string apiPath);
    public static HttpAsyncTaskHandler JsonEndpointHandler(string apiPath, string pathInfo);
}
[ExtensionAttribute]
public static class ServiceStack.ApiKeyAuthProviderExtensions : object {
    [ExtensionAttribute]
public static IApiKey GetApiKey(IRequest req);
    [ExtensionAttribute]
internal static ApiKeyAuthProvider AssertValidApiKeyRequest(IRequest req);
    [ExtensionAttribute]
public static IManageApiKeysAsync AssertManageApiKeysAsync(ServiceStackHost appHost, IRequest req);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.ApiKeyValidator : TypeValidator {
    [CompilerGeneratedAttribute]
private Func`1<IApiKeySource> <factory>P;
    [CompilerGeneratedAttribute]
private Func`1<IApiKeyResolver> <resolver>P;
    [CompilerGeneratedAttribute]
private static string <DefaultErrorMessage>k__BackingField;
    private ConcurrentDictionary`2<string, IApiKey> validApiKeys;
    [NullableAttribute("2")]
private string scope;
    public static string DefaultErrorMessage { get; public set; }
    [NullableAttribute("2")]
public string Scope { get; public set; }
    public ApiKeyValidator(Func`1<IApiKeySource> factory, Func`1<IApiKeyResolver> resolver);
    private static ApiKeyValidator();
    [CompilerGeneratedAttribute]
public static string get_DefaultErrorMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultErrorMessage(string value);
    [NullableContextAttribute("2")]
public string get_Scope();
    [NullableContextAttribute("2")]
public void set_Scope(string value);
    [AsyncStateMachineAttribute("ServiceStack.ApiKeyValidator/<IsValidAsync>d__12")]
public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
}
[ExcludeMetadataAttribute]
public class ServiceStack.ApiPages : object {
    [CompilerGeneratedAttribute]
private string <PageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    public string PageName { get; public set; }
    public string PathInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PageName();
    [CompilerGeneratedAttribute]
public void set_PageName(string value);
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
}
public abstract class ServiceStack.AppHostBase : ServiceStackHost {
    protected AppHostBase(string serviceName, Assembly[] assembliesWithServices);
    public virtual string ResolveAbsoluteUrl(string virtualPath, IRequest httpReq);
    public virtual string ResolvePhysicalPath(string virtualPath, IRequest httpReq);
    public virtual IRequest TryGetCurrentRequest();
    public virtual string MapProjectPath(string relativePath);
    public virtual string GetBaseUrl(IRequest httpReq);
}
[ExtensionAttribute]
public static class ServiceStack.AppHostExtensions : object {
    private static ILog log;
    private static AppHostExtensions();
    [ExtensionAttribute]
public static void ConfigureOperation(IAppHost appHost, Action`1<Operation> configure);
    [ExtensionAttribute]
public static void ConfigureOperations(IAppHost appHost, Action`1<Operation> configure);
    [ExtensionAttribute]
public static void ConfigureType(IAppHost appHost, Action`1<MetadataType> configure);
    [ExtensionAttribute]
public static void ConfigureTypes(IAppHost appHost, Action`1<MetadataType> configure);
    [ExtensionAttribute]
public static void ConfigureTypes(IAppHost appHost, Action`1<MetadataType> configure, Predicate`1<MetadataType> where);
    [ExtensionAttribute]
public static void RegisterServices(IAppHost appHost, Dictionary`2<Type, String[]> serviceRoutes);
    [ExtensionAttribute]
public static Dictionary`2<Type, String[]> RemoveService(Dictionary`2<Type, String[]> serviceRoutes);
    [ExtensionAttribute]
public static void RegisterService(IAppHost appHost, String[] atRestPaths);
    [ExtensionAttribute]
public static void RegisterRequestBinder(IAppHost appHost, Func`2<IRequest, object> binder);
    [ExtensionAttribute]
public static void AddPluginsFromAssembly(IAppHost appHost, Assembly[] assembliesWithPlugins);
    [ExtensionAttribute]
public static T GetPlugin(IAppHost appHost);
    [ExtensionAttribute]
public static T AssertPlugin(IAppHost appHost);
    [ExtensionAttribute]
public static bool HasPlugin(IAppHost appHost);
    [ExtensionAttribute]
public static bool HasMultiplePlugins(IAppHost appHost);
    [ExtensionAttribute]
public static Container GetContainer(IAppHost appHost);
    [ExtensionAttribute]
public static bool NotifyStartupException(IAppHost appHost, Exception ex, string target, string method);
    [ExtensionAttribute]
public static bool NotifyStartupException(IAppHost appHost, Exception ex);
    [ExtensionAttribute]
public static string Localize(string text, IRequest request);
    [ExtensionAttribute]
public static string LocalizeFmt(string text, IRequest request, Object[] args);
    [ExtensionAttribute]
public static string LocalizeFmt(string text, Object[] args);
    [ExtensionAttribute]
public static IAppHost Start(IAppHost appHost, IEnumerable`1<string> urlBases);
    [ExtensionAttribute]
public static List`1<IPlugin> AddIfDebug(List`1<IPlugin> plugins, T plugin);
    [ExtensionAttribute]
public static List`1<IPlugin> AddIfNotExists(List`1<IPlugin> plugins, T plugin);
    [ExtensionAttribute]
public static List`1<IPlugin> AddIfNotExists(List`1<IPlugin> plugins, T plugin, Action`1<T> configure);
    [ExtensionAttribute]
public static string ResolveStaticBaseUrl(IAppHost appHost);
    [ExtensionAttribute]
public static bool IsRunAsAppTask(IAppHost appHost);
    [ExtensionAttribute]
public static string GetOperationName(IServiceStackHandler handler);
}
public abstract class ServiceStack.AppHostHttpListenerBase : HttpListenerBase {
    public static int ThreadsPerProcessor;
    [CompilerGeneratedAttribute]
private string <HandlerPath>k__BackingField;
    public string HandlerPath { get; public set; }
    protected AppHostHttpListenerBase(string serviceName, Assembly[] assembliesWithServices);
    protected AppHostHttpListenerBase(string serviceName, string handlerPath, Assembly[] assembliesWithServices);
    private static AppHostHttpListenerBase();
    public static int CalculatePoolSize();
    [CompilerGeneratedAttribute]
public string get_HandlerPath();
    [CompilerGeneratedAttribute]
public void set_HandlerPath(string value);
    [AsyncStateMachineAttribute("ServiceStack.AppHostHttpListenerBase/<ProcessRequestAsync>d__8")]
protected virtual Task ProcessRequestAsync(HttpListenerContext context);
    public virtual void OnConfigLoad();
}
public abstract class ServiceStack.AppHostHttpListenerPoolBase : AppHostHttpListenerBase {
    private AutoResetEvent listenForNextRequest;
    private ThreadPoolManager threadPoolManager;
    private ILog log;
    private bool disposed;
    private bool IsListening { get; }
    protected AppHostHttpListenerPoolBase(string serviceName, Assembly[] assembliesWithServices);
    protected AppHostHttpListenerPoolBase(string serviceName, Type[] serviceTypes);
    protected AppHostHttpListenerPoolBase(string serviceName, int poolSize, Assembly[] assembliesWithServices);
    protected AppHostHttpListenerPoolBase(string serviceName, string handlerPath, Assembly[] assembliesWithServices);
    protected AppHostHttpListenerPoolBase(string serviceName, string handlerPath, int poolSize, Assembly[] assembliesWithServices);
    protected virtual void Dispose(bool disposing);
    private bool get_IsListening();
    protected virtual void Listen(object state);
    private void ListenerCallback(IAsyncResult asyncResult);
}
[ExtensionAttribute]
public static class ServiceStack.ApplyToUtils : object {
    public static Dictionary`2<string, ApplyTo> VerbsApplyTo;
    public static Dictionary`2<ApplyTo, string> ApplyToVerbs;
    private static ApplyToUtils();
    [ExtensionAttribute]
public static ApplyTo HttpMethodAsApplyTo(IRequest req);
}
public abstract class ServiceStack.AppSelfHostBase : AppHostHttpListenerPoolBase {
    protected AppSelfHostBase(string serviceName, Assembly[] assembliesWithServices);
    protected AppSelfHostBase(string serviceName, string handlerPath, Assembly[] assembliesWithServices);
    protected AppSelfHostBase(string serviceName, Type[] serviceTypes);
    public virtual void Configure(Container container);
    public virtual void Configure();
}
public class ServiceStack.AspNet.ServiceStackPage : Page {
    private IServiceStackProvider serviceStackProvider;
    private bool hasDisposed;
    public string UnauthorizedRedirectUrl { get; }
    public string ForbiddenRedirectUrl { get; }
    public IServiceStackProvider ServiceStackProvider { get; }
    public IAppSettings AppSettings { get; }
    public IHttpRequest ServiceStackRequest { get; }
    public IHttpResponse ServiceStackResponse { get; }
    public ICacheClient Cache { get; }
    public ICacheClientAsync CacheAsync { get; }
    public IDbConnection Db { get; }
    public IRedisClient Redis { get; }
    public IMessageProducer MessageProducer { get; }
    public IAuthRepository AuthRepository { get; }
    public IAuthRepositoryAsync AuthRepositoryAsync { get; }
    public ISessionFactory SessionFactory { get; }
    public ISession SessionBag { get; }
    public ISessionAsync SessionBagAsync { get; }
    public bool IsAuthenticated { get; }
    public IServiceGateway Gateway { get; }
    public RpcGateway RpcGateway { get; }
    public virtual string get_UnauthorizedRedirectUrl();
    public virtual string get_ForbiddenRedirectUrl();
    protected virtual void ServiceStack_PreLoad(object sender, EventArgs e);
    public virtual IServiceStackProvider get_ServiceStackProvider();
    public virtual IAppSettings get_AppSettings();
    public virtual IHttpRequest get_ServiceStackRequest();
    public virtual IHttpResponse get_ServiceStackResponse();
    public virtual ICacheClient get_Cache();
    public virtual ICacheClientAsync get_CacheAsync();
    public virtual IDbConnection get_Db();
    public virtual IRedisClient get_Redis();
    public virtual ValueTask`1<IRedisClientAsync> GetRedisAsync();
    public virtual IMessageProducer get_MessageProducer();
    public virtual IAuthRepository get_AuthRepository();
    public virtual IAuthRepositoryAsync get_AuthRepositoryAsync();
    public virtual ISessionFactory get_SessionFactory();
    public virtual ISession get_SessionBag();
    public virtual ISessionAsync get_SessionBagAsync();
    public virtual bool get_IsAuthenticated();
    public virtual IAuthSession GetSession(bool reload);
    public virtual Task`1<IAuthSession> GetSessionAsync(bool reload, CancellationToken token);
    public virtual TUserSession SessionAs();
    public virtual Task`1<TUserSession> SessionAsAsync(CancellationToken token);
    [ObsoleteAttribute("Use SaveSessionAsync")]
protected virtual void SaveSession(IAuthSession session, Nullable`1<TimeSpan> expiresIn);
    public virtual Task SaveSessionAsync(IAuthSession session, Nullable`1<TimeSpan> expiresIn, CancellationToken token);
    public virtual void ClearSession();
    public virtual Task ClearSessionAsync(CancellationToken token);
    public virtual T TryResolve();
    public virtual T ResolveService();
    public virtual object ForwardRequestToServiceStack(IRequest request);
    public virtual IServiceGateway get_Gateway();
    public virtual RpcGateway get_RpcGateway();
    public virtual void Dispose();
    public virtual void EndServiceStackRequest();
}
public class ServiceStack.AsyncContext : object {
    public virtual Task ContinueWith(Task task, Action`1<Task> fn);
    public virtual Task ContinueWith(Task task, Action`1<Task> fn, TaskContinuationOptions continuationOptions);
}
[ExtensionAttribute]
internal static class ServiceStack.AsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<TOut> Continue(Task task, Func`2<Task, TOut> next);
    private static Task`1<TOut> ContinueClosure(Task task, Func`2<Task, TOut> next);
}
public class ServiceStack.Auth.ApiKey : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpiryDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CancelledDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    private string ServiceStack.IApiKey.Key { get; }
    public string Id { get; public set; }
    public string UserAuthId { get; public set; }
    public string Environment { get; public set; }
    public string KeyType { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public Nullable`1<DateTime> ExpiryDate { get; public set; }
    public Nullable`1<DateTime> CancelledDate { get; public set; }
    public string Notes { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    private sealed virtual override string ServiceStack.IApiKey.get_Key();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_UserAuthId();
    [CompilerGeneratedAttribute]
public void set_UserAuthId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_KeyType();
    [CompilerGeneratedAttribute]
public void set_KeyType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpiryDate();
    [CompilerGeneratedAttribute]
public void set_ExpiryDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_CancelledDate();
    [CompilerGeneratedAttribute]
public void set_CancelledDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_RefId();
    [CompilerGeneratedAttribute]
public void set_RefId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RefIdStr();
    [CompilerGeneratedAttribute]
public void set_RefIdStr(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
    public sealed virtual bool HasScope(string scope);
    public sealed virtual bool HasFeature(string feature);
    public sealed virtual bool CanAccess(Type requestType);
}
internal class ServiceStack.Auth.ApiKeyAuthEvents : AuthEvents {
    private ApiKeyAuthProvider apiKeyProvider;
    public ApiKeyAuthEvents(ApiKeyAuthProvider apiKeyProvider);
    [AsyncStateMachineAttribute("ServiceStack.Auth.ApiKeyAuthEvents/<OnRegisteredAsync>d__2")]
public virtual Task OnRegisteredAsync(IRequest httpReq, IAuthSession session, IServiceBase registrationService, CancellationToken token);
}
public class ServiceStack.Auth.ApiKeyAuthProvider : AuthProvider {
    public static string Name;
    public static string Realm;
    public static String[] DefaultTypes;
    public static String[] DefaultEnvironments;
    public static int DefaultKeySizeBytes;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, String[]> <ServiceRoutes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeySizeBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Environments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ExpireKeysAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireSecureConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateApiKeyDelegate <GenerateApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ApiKey> <CreateApiKeyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SessionCacheDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInHttpParams>k__BackingField;
    [ThreadStaticAttribute]
private static Byte[] CachedBytes;
    public string Type { get; }
    public Dictionary`2<Type, String[]> ServiceRoutes { get; public set; }
    public int KeySizeBytes { get; public set; }
    public String[] Environments { get; public set; }
    public String[] KeyTypes { get; public set; }
    public Nullable`1<TimeSpan> ExpireKeysAfter { get; public set; }
    public bool InitSchema { get; public set; }
    public bool RequireSecureConnection { get; public set; }
    public CreateApiKeyDelegate GenerateApiKey { get; public set; }
    public Action`1<ApiKey> CreateApiKeyFilter { get; public set; }
    public Nullable`1<TimeSpan> SessionCacheDuration { get; public set; }
    public bool AllowInHttpParams { get; public set; }
    public ApiKeyAuthProvider(IAppSettings appSettings);
    private static ApiKeyAuthProvider();
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, String[]> get_ServiceRoutes();
    [CompilerGeneratedAttribute]
public void set_ServiceRoutes(Dictionary`2<Type, String[]> value);
    [CompilerGeneratedAttribute]
public int get_KeySizeBytes();
    [CompilerGeneratedAttribute]
public void set_KeySizeBytes(int value);
    [CompilerGeneratedAttribute]
public String[] get_Environments();
    [CompilerGeneratedAttribute]
public void set_Environments(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_KeyTypes();
    [CompilerGeneratedAttribute]
public void set_KeyTypes(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ExpireKeysAfter();
    [CompilerGeneratedAttribute]
public void set_ExpireKeysAfter(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_InitSchema();
    [CompilerGeneratedAttribute]
public void set_InitSchema(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireSecureConnection();
    [CompilerGeneratedAttribute]
public void set_RequireSecureConnection(bool value);
    [CompilerGeneratedAttribute]
public CreateApiKeyDelegate get_GenerateApiKey();
    [CompilerGeneratedAttribute]
public void set_GenerateApiKey(CreateApiKeyDelegate value);
    [CompilerGeneratedAttribute]
public Action`1<ApiKey> get_CreateApiKeyFilter();
    [CompilerGeneratedAttribute]
public void set_CreateApiKeyFilter(Action`1<ApiKey> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SessionCacheDuration();
    [CompilerGeneratedAttribute]
public void set_SessionCacheDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_AllowInHttpParams();
    [CompilerGeneratedAttribute]
public void set_AllowInHttpParams(bool value);
    protected virtual void Init(IAppSettings appSettings);
    public virtual string CreateApiKey(string environment, string keyType, int sizeBytes);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.ApiKeyAuthProvider/<AuthenticateAsync>d__57")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.ApiKeyAuthProvider/<PreAuthenticateAsync>d__58")]
public virtual Task PreAuthenticateAsync(IRequest req, IResponse res);
    [AsyncStateMachineAttribute("ServiceStack.Auth.ApiKeyAuthProvider/<GetApiKeyAsync>d__59")]
protected virtual Task`1<ApiKey> GetApiKeyAsync(IRequest req, string apiKey);
    public virtual void ValidateApiKey(IRequest req, ApiKey apiKey);
    [AsyncStateMachineAttribute("ServiceStack.Auth.ApiKeyAuthProvider/<PreAuthenticateWithApiKeyAsync>d__61")]
public virtual Task PreAuthenticateWithApiKeyAsync(IRequest req, IResponse res, ApiKey apiKey);
    [AsyncStateMachineAttribute("ServiceStack.Auth.ApiKeyAuthProvider/<HasCachedSessionAsync>d__62")]
public virtual Task`1<bool> HasCachedSessionAsync(IRequest req, string apiSessionKey);
    [AsyncStateMachineAttribute("ServiceStack.Auth.ApiKeyAuthProvider/<CacheSessionAsync>d__63")]
public virtual Task CacheSessionAsync(IRequest req, string apiSessionKey);
    public static string GetSessionKey(string apiKey);
    public virtual void Configure(IServiceCollection services, AuthFeature feature);
    public virtual void Register(IAppHost appHost, AuthFeature feature);
    public virtual Task OnFailedAuthentication(IAuthSession session, IRequest httpReq, IResponse httpRes);
    public List`1<ApiKey> GenerateNewApiKeys(string userId, String[] environments);
}
public class ServiceStack.Auth.AspNetWindowsAuthProvider : AuthProvider {
    public static string Name;
    public static string Realm;
    [CompilerGeneratedAttribute]
private List`1<string> <IgnoreRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LimitAccessToRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<IRequest, IPrincipal, IAuthSession> <PopulateUserRoles>k__BackingField;
    public string Type { get; }
    public List`1<string> IgnoreRoles { get; public set; }
    public List`1<string> AllRoles { get; public set; }
    public List`1<string> LimitAccessToRoles { get; public set; }
    public Action`3<IRequest, IPrincipal, IAuthSession> PopulateUserRoles { get; public set; }
    public bool AllowAllWindowsAuthUsers { get; public set; }
    public AspNetWindowsAuthProvider(IAppHost appHost);
    private static AspNetWindowsAuthProvider();
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnoreRoles();
    [CompilerGeneratedAttribute]
public void set_IgnoreRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllRoles();
    [CompilerGeneratedAttribute]
public void set_AllRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_LimitAccessToRoles();
    [CompilerGeneratedAttribute]
public void set_LimitAccessToRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public Action`3<IRequest, IPrincipal, IAuthSession> get_PopulateUserRoles();
    [CompilerGeneratedAttribute]
public void set_PopulateUserRoles(Action`3<IRequest, IPrincipal, IAuthSession> value);
    public bool get_AllowAllWindowsAuthUsers();
    public void set_AllowAllWindowsAuthUsers(bool value);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    public virtual bool IsAuthorized(IPrincipal user);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AspNetWindowsAuthProvider/<AuthenticateAsync>d__26")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    protected virtual IAuthRepository GetAuthRepository(IRequest req);
    private void PopulateUserSessionWithIsInRole(IRequest req, IPrincipal user, IAuthSession session);
    public static void AuthenticateIfWindowsAuth(IRequest req, IResponse res);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AspNetWindowsAuthProvider/<PreAuthenticateAsync>d__30")]
public sealed virtual Task PreAuthenticateAsync(IRequest req, IResponse res);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(IAppHost host);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__8_1(string x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_2(string x);
}
[DefaultRequestAttribute("ServiceStack.AssignRoles")]
public class ServiceStack.Auth.AssignRolesService : Service {
    [AsyncStateMachineAttribute("ServiceStack.Auth.AssignRolesService/<Post>d__0")]
public Task`1<object> Post(AssignRoles request);
}
public class ServiceStack.Auth.AuthContext : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceBase <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthProvider <AuthProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthProviderSync <AuthProviderSync>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthTokens <AuthTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AuthInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthRepository <AuthRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthRepositoryAsync <AuthRepositoryAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public IRequest Request { get; public set; }
    public IServiceBase Service { get; public set; }
    public AuthProvider AuthProvider { get; public set; }
    public AuthProviderSync AuthProviderSync { get; public set; }
    public IAuthSession Session { get; public set; }
    public IAuthTokens AuthTokens { get; public set; }
    public Dictionary`2<string, string> AuthInfo { get; public set; }
    public IAuthRepository AuthRepository { get; public set; }
    public IAuthRepositoryAsync AuthRepositoryAsync { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public IServiceBase get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(IServiceBase value);
    [CompilerGeneratedAttribute]
public AuthProvider get_AuthProvider();
    [CompilerGeneratedAttribute]
public void set_AuthProvider(AuthProvider value);
    [CompilerGeneratedAttribute]
public AuthProviderSync get_AuthProviderSync();
    [CompilerGeneratedAttribute]
public void set_AuthProviderSync(AuthProviderSync value);
    [CompilerGeneratedAttribute]
public IAuthSession get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(IAuthSession value);
    [CompilerGeneratedAttribute]
public IAuthTokens get_AuthTokens();
    [CompilerGeneratedAttribute]
public void set_AuthTokens(IAuthTokens value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AuthInfo();
    [CompilerGeneratedAttribute]
public void set_AuthInfo(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IAuthRepository get_AuthRepository();
    [CompilerGeneratedAttribute]
public void set_AuthRepository(IAuthRepository value);
    [CompilerGeneratedAttribute]
public IAuthRepositoryAsync get_AuthRepositoryAsync();
    [CompilerGeneratedAttribute]
public void set_AuthRepositoryAsync(IAuthRepositoryAsync value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
[DefaultRequestAttribute("ServiceStack.Authenticate")]
[ErrorViewAttribute("ErrorView")]
public class ServiceStack.Auth.AuthenticateService : Service {
    public static string BasicProvider;
    public static string ApiKeyProvider;
    public static string JwtProvider;
    public static string CredentialsProvider;
    public static string WindowsAuthProvider;
    public static string CredentialsAliasProvider;
    public static string LogoutAction;
    public static string DigestProvider;
    public static string IdentityProvider;
    [CompilerGeneratedAttribute]
private static Func`1<IAuthSession> <CurrentSessionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static ValidateFn <ValidateFn>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultOAuthProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultOAuthRealm>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <HtmlRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <HtmlRedirectAccessDenied>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <HtmlRedirectReturnParam>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <HtmlRedirectReturnPathOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AuthFilterContext, object> <AuthResponseDecorator>k__BackingField;
    internal static IAuthProvider[] AuthProviders;
    internal static IAuthWithRequest[] AuthWithRequestProviders;
    internal static IAuthWithRequestSync[] AuthWithRequestSyncProviders;
    internal static IAuthResponseFilter[] AuthResponseFilters;
    public static Func`1<IAuthSession> CurrentSessionFactory { get; public set; }
    public static ValidateFn ValidateFn { get; public set; }
    public static string DefaultOAuthProvider { get; private set; }
    public static string DefaultOAuthRealm { get; private set; }
    public static string HtmlRedirect { get; internal set; }
    public static string HtmlRedirectAccessDenied { get; internal set; }
    public static string HtmlRedirectReturnParam { get; internal set; }
    public static bool HtmlRedirectReturnPathOnly { get; internal set; }
    public static Func`2<AuthFilterContext, object> AuthResponseDecorator { get; internal set; }
    private static AuthenticateService();
    [CompilerGeneratedAttribute]
public static Func`1<IAuthSession> get_CurrentSessionFactory();
    [CompilerGeneratedAttribute]
public static void set_CurrentSessionFactory(Func`1<IAuthSession> value);
    [CompilerGeneratedAttribute]
public static ValidateFn get_ValidateFn();
    [CompilerGeneratedAttribute]
public static void set_ValidateFn(ValidateFn value);
    [CompilerGeneratedAttribute]
public static string get_DefaultOAuthProvider();
    [CompilerGeneratedAttribute]
private static void set_DefaultOAuthProvider(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultOAuthRealm();
    [CompilerGeneratedAttribute]
private static void set_DefaultOAuthRealm(string value);
    [CompilerGeneratedAttribute]
public static string get_HtmlRedirect();
    [CompilerGeneratedAttribute]
internal static void set_HtmlRedirect(string value);
    [CompilerGeneratedAttribute]
public static string get_HtmlRedirectAccessDenied();
    [CompilerGeneratedAttribute]
internal static void set_HtmlRedirectAccessDenied(string value);
    [CompilerGeneratedAttribute]
public static string get_HtmlRedirectReturnParam();
    [CompilerGeneratedAttribute]
internal static void set_HtmlRedirectReturnParam(string value);
    [CompilerGeneratedAttribute]
public static bool get_HtmlRedirectReturnPathOnly();
    [CompilerGeneratedAttribute]
internal static void set_HtmlRedirectReturnPathOnly(bool value);
    [CompilerGeneratedAttribute]
public static Func`2<AuthFilterContext, object> get_AuthResponseDecorator();
    [CompilerGeneratedAttribute]
internal static void set_AuthResponseDecorator(Func`2<AuthFilterContext, object> value);
    internal static void Reset();
    public static IAuthProvider[] GetAuthProviders(string provider);
    [ObsoleteAttribute("Use GetUserSessionSourceAsync()")]
public static IUserSessionSource GetUserSessionSource();
    public static IUserSessionSourceAsync GetUserSessionSourceAsync();
    public static IAuthProvider GetAuthProvider(string provider);
    public static JwtAuthProviderReader GetJwtAuthProvider();
    public static JwtAuthProviderReader GetRequiredJwtAuthProvider();
    public static void Init(Func`1<IAuthSession> sessionFactory, IAuthProvider[] authProviders);
    private void AssertAuthProviders();
    public void Options(Authenticate request);
    public Task`1<object> GetAsync(Authenticate request);
    [ObsoleteAttribute("Use PostAsync")]
public object Post(Authenticate request);
    public Task`1<object> AnyAsync(AuthenticateLogout request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthenticateService/<PostAsync>d__64")]
public Task`1<object> PostAsync(Authenticate request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthenticateService/<HandleLogoutAsync>d__65")]
private Task`1<object> HandleLogoutAsync(Authenticate request, IAuthProvider authProvider);
    [ObsoleteAttribute("Use AuthenticateAsync")]
public AuthenticateResponse Authenticate(Authenticate request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthenticateService/<AuthenticateAsync>d__67")]
public Task`1<AuthenticateResponse> AuthenticateAsync(Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthenticateService/<AuthenticateAsync>d__68")]
private Task`1<object> AuthenticateAsync(Authenticate request, string provider, IAuthSession session, IAuthProvider oAuthConfig, CancellationToken token);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IResponse <>n__1();
}
public class ServiceStack.Auth.AuthEvents : object {
    public virtual void OnCreated(IRequest httpReq, IAuthSession session);
    public virtual Task OnCreatedAsync(IRequest httpReq, IAuthSession session, CancellationToken token);
    public virtual void OnRegistered(IRequest httpReq, IAuthSession session, IServiceBase registrationService);
    public virtual Task OnRegisteredAsync(IRequest httpReq, IAuthSession session, IServiceBase registrationService, CancellationToken token);
    public virtual IHttpResult Validate(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public virtual Task`1<IHttpResult> ValidateAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual void OnAuthenticated(IRequest httpReq, IAuthSession session, IServiceBase authService, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public virtual Task OnAuthenticatedAsync(IRequest httpReq, IAuthSession session, IServiceBase authService, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual void OnLogout(IRequest httpReq, IAuthSession session, IServiceBase authService);
    public virtual Task OnLogoutAsync(IRequest httpReq, IAuthSession session, IServiceBase authService, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.AuthEventsUtils : object {
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthEventsUtils/<ExecuteOnRegisteredUserEventsAsync>d__0")]
[ExtensionAttribute]
public static Task ExecuteOnRegisteredUserEventsAsync(IAuthEvents authEvents, IAuthSession session, IServiceBase service);
}
public class ServiceStack.Auth.AuthFilterContext : object {
    [CompilerGeneratedAttribute]
private AuthenticateService <AuthService>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthProvider <AuthProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private Authenticate <AuthRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticateResponse <AuthResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferrerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlreadyAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DidAuthenticate>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserSource>k__BackingField;
    public AuthenticateService AuthService { get; internal set; }
    public IRequest Request { get; }
    public IAuthProvider AuthProvider { get; internal set; }
    public IAuthSession Session { get; internal set; }
    public Authenticate AuthRequest { get; internal set; }
    public AuthenticateResponse AuthResponse { get; internal set; }
    public string ReferrerUrl { get; internal set; }
    public bool AlreadyAuthenticated { get; internal set; }
    public bool DidAuthenticate { get; internal set; }
    public object UserSource { get; public set; }
    [CompilerGeneratedAttribute]
public AuthenticateService get_AuthService();
    [CompilerGeneratedAttribute]
internal void set_AuthService(AuthenticateService value);
    public IRequest get_Request();
    [CompilerGeneratedAttribute]
public IAuthProvider get_AuthProvider();
    [CompilerGeneratedAttribute]
internal void set_AuthProvider(IAuthProvider value);
    [CompilerGeneratedAttribute]
public IAuthSession get_Session();
    [CompilerGeneratedAttribute]
internal void set_Session(IAuthSession value);
    [CompilerGeneratedAttribute]
public Authenticate get_AuthRequest();
    [CompilerGeneratedAttribute]
internal void set_AuthRequest(Authenticate value);
    [CompilerGeneratedAttribute]
public AuthenticateResponse get_AuthResponse();
    [CompilerGeneratedAttribute]
internal void set_AuthResponse(AuthenticateResponse value);
    [CompilerGeneratedAttribute]
public string get_ReferrerUrl();
    [CompilerGeneratedAttribute]
internal void set_ReferrerUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_AlreadyAuthenticated();
    [CompilerGeneratedAttribute]
internal void set_AlreadyAuthenticated(bool value);
    [CompilerGeneratedAttribute]
public bool get_DidAuthenticate();
    [CompilerGeneratedAttribute]
internal void set_DidAuthenticate(bool value);
    [CompilerGeneratedAttribute]
public object get_UserSource();
    [CompilerGeneratedAttribute]
public void set_UserSource(object value);
}
public class ServiceStack.Auth.AuthHttpGateway : object {
    protected static ILog Log;
    public static string TwitterUserUrl;
    public static string TwitterVerifyCredentialsUrl;
    public static string FacebookUserUrl;
    public static string FacebookVerifyTokenUrl;
    public static string YammerUserUrl;
    public static string GithubUserUrl;
    public static string GithubUserEmailsUrl;
    private static AuthHttpGateway();
    public sealed virtual string DownloadTwitterUserInfo(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<DownloadTwitterUserInfoAsync>d__9")]
public sealed virtual Task`1<string> DownloadTwitterUserInfoAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId, CancellationToken token);
    public sealed virtual bool VerifyTwitterAccessToken(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, String& userId, String& email);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<VerifyTwitterAccessTokenAsync>d__11")]
public sealed virtual Task`1<AuthId> VerifyTwitterAccessTokenAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, CancellationToken token);
    public static string GetJsonFromOAuthUrl(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string url, string data);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<GetJsonFromOAuthUrlAsync>d__13")]
public static Task`1<string> GetJsonFromOAuthUrlAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string url, string data, CancellationToken token);
    public sealed virtual bool VerifyFacebookAccessToken(string appId, string accessToken);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<VerifyFacebookAccessTokenAsync>d__15")]
public sealed virtual Task`1<bool> VerifyFacebookAccessTokenAsync(string appId, string accessToken, CancellationToken token);
    public sealed virtual string DownloadFacebookUserInfo(string facebookCode, String[] fields);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<DownloadFacebookUserInfoAsync>d__17")]
public sealed virtual Task`1<string> DownloadFacebookUserInfoAsync(string facebookCode, String[] fields, CancellationToken token);
    public string GetJsonFromGitHub(string url, string accessToken);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<GetJsonFromGitHubAsync>d__19")]
public Task`1<string> GetJsonFromGitHubAsync(string url, string accessToken, CancellationToken token);
    public sealed virtual string DownloadGithubUserInfo(string accessToken);
    public sealed virtual Task`1<string> DownloadGithubUserInfoAsync(string accessToken, CancellationToken token);
    public sealed virtual string DownloadGithubUserEmailsInfo(string accessToken);
    public sealed virtual Task`1<string> DownloadGithubUserEmailsInfoAsync(string accessToken, CancellationToken token);
    public sealed virtual string DownloadGoogleUserInfo(string accessToken);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<DownloadGoogleUserInfoAsync>d__25")]
public sealed virtual Task`1<string> DownloadGoogleUserInfoAsync(string accessToken, CancellationToken token);
    public sealed virtual string DownloadMicrosoftUserInfo(string accessToken);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<DownloadMicrosoftUserInfoAsync>d__27")]
public sealed virtual Task`1<string> DownloadMicrosoftUserInfoAsync(string accessToken, CancellationToken token);
    public sealed virtual string CreateMicrosoftPhotoUrl(string accessToken, string savePhotoSize);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<CreateMicrosoftPhotoUrlAsync>d__29")]
public sealed virtual Task`1<string> CreateMicrosoftPhotoUrlAsync(string accessToken, string savePhotoSize, CancellationToken token);
    public sealed virtual string DownloadYammerUserInfo(string yammerUserId);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthHttpGateway/<DownloadYammerUserInfoAsync>d__31")]
public sealed virtual Task`1<string> DownloadYammerUserInfoAsync(string yammerUserId);
}
public class ServiceStack.Auth.AuthId : object {
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public string UserId { get; public set; }
    public string Email { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
}
public class ServiceStack.Auth.AuthMetadataProvider : object {
    private static ILog Log;
    public static string ProfileUrlKey;
    [CompilerGeneratedAttribute]
private string <NoProfileImgUrl>k__BackingField;
    public string NoProfileImgUrl { get; public set; }
    private static AuthMetadataProvider();
    [CompilerGeneratedAttribute]
public string get_NoProfileImgUrl();
    [CompilerGeneratedAttribute]
public void set_NoProfileImgUrl(string value);
    public virtual void AddMetadata(IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public virtual void AddProfileUrl(IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public static string GetRedirectUrlIfAny(string url);
    public virtual string GetProfileUrl(IAuthSession authSession, string defaultUrl);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.AuthMetadataProviderExtensions : object {
    [ExtensionAttribute]
public static void SafeAddMetadata(IAuthMetadataProvider provider, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
}
public abstract class ServiceStack.Auth.AuthProvider : object {
    protected ILog Log;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SessionExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthRealm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallbackUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveExtendedUserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RestoreSessionFromState>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> <LoadUserAuthFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`5<AuthUserSession, IAuthTokens, Dictionary`2<string, string>, CancellationToken, Task> <LoadUserAuthInfoFilterAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuthContext, IHttpResult> <CustomValidationFilter>k__BackingField;
    public Func`3<AuthContext, string, string> PreAuthUrlFilter;
    public Func`3<AuthContext, string, string> AccessTokenUrlFilter;
    public Func`3<AuthContext, string, string> SuccessRedirectUrlFilter;
    public Func`3<AuthContext, string, string> FailedRedirectUrlFilter;
    public Func`3<AuthContext, string, string> LogoutUrlFilter;
    [CompilerGeneratedAttribute]
private Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> <AccountLockedValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private NavItem <NavItem>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageInfo <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InputInfo> <FormLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludeAuthInfoItems>k__BackingField;
    private static long transientUserAuthId;
    private static ConcurrentDictionary`2<string, long> transientUserIdsMap;
    public string Type { get; }
    public Dictionary`2<string, string> Meta { get; }
    public Nullable`1<TimeSpan> SessionExpiry { get; public set; }
    public string AuthRealm { get; public set; }
    public string Provider { get; public set; }
    public string CallbackUrl { get; public set; }
    public string RedirectUrl { get; public set; }
    public bool PersistSession { get; public set; }
    public bool SaveExtendedUserInfo { get; public set; }
    public Nullable`1<bool> RestoreSessionFromState { get; public set; }
    public Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> LoadUserAuthFilter { get; public set; }
    public Func`5<AuthUserSession, IAuthTokens, Dictionary`2<string, string>, CancellationToken, Task> LoadUserAuthInfoFilterAsync { get; public set; }
    public Func`2<AuthContext, IHttpResult> CustomValidationFilter { get; public set; }
    public Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> AccountLockedValidator { get; public set; }
    public NavItem NavItem { get; public set; }
    public int Sort { get; public set; }
    public string Label { get; public set; }
    public ImageInfo Icon { get; public set; }
    public List`1<InputInfo> FormLayout { get; public set; }
    public HashSet`1<string> ExcludeAuthInfoItems { get; public set; }
    public IAuthEvents AuthEvents { get; }
    protected AuthProvider(IAppSettings appSettings, string authRealm, string authProvider);
    private static AuthProvider();
    public virtual string get_Type();
    public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SessionExpiry();
    [CompilerGeneratedAttribute]
public void set_SessionExpiry(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthRealm();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthRealm(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Provider(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CallbackUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CallbackUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUrl();
    [CompilerGeneratedAttribute]
public void set_RedirectUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_PersistSession();
    [CompilerGeneratedAttribute]
public void set_PersistSession(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveExtendedUserInfo();
    [CompilerGeneratedAttribute]
public void set_SaveExtendedUserInfo(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RestoreSessionFromState();
    [CompilerGeneratedAttribute]
public void set_RestoreSessionFromState(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> get_LoadUserAuthFilter();
    [CompilerGeneratedAttribute]
public void set_LoadUserAuthFilter(Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Func`5<AuthUserSession, IAuthTokens, Dictionary`2<string, string>, CancellationToken, Task> get_LoadUserAuthInfoFilterAsync();
    [CompilerGeneratedAttribute]
public void set_LoadUserAuthInfoFilterAsync(Func`5<AuthUserSession, IAuthTokens, Dictionary`2<string, string>, CancellationToken, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<AuthContext, IHttpResult> get_CustomValidationFilter();
    [CompilerGeneratedAttribute]
public void set_CustomValidationFilter(Func`2<AuthContext, IHttpResult> value);
    [CompilerGeneratedAttribute]
public Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> get_AccountLockedValidator();
    [CompilerGeneratedAttribute]
public void set_AccountLockedValidator(Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> value);
    public static string UrlFilter(AuthContext provider, string url);
    [CompilerGeneratedAttribute]
public NavItem get_NavItem();
    [CompilerGeneratedAttribute]
public void set_NavItem(NavItem value);
    [CompilerGeneratedAttribute]
public int get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(int value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public ImageInfo get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(ImageInfo value);
    [CompilerGeneratedAttribute]
public List`1<InputInfo> get_FormLayout();
    [CompilerGeneratedAttribute]
public void set_FormLayout(List`1<InputInfo> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludeAuthInfoItems();
    [CompilerGeneratedAttribute]
public void set_ExcludeAuthInfoItems(HashSet`1<string> value);
    public IAuthEvents get_AuthEvents();
    protected string FallbackConfig(string fallback);
    protected virtual AuthContext CreateAuthContext(IServiceBase authService, IAuthSession session, IAuthTokens tokens);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthProvider/<LogoutAsync>d__89")]
public virtual Task`1<object> LogoutAsync(IServiceBase service, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthProvider/<OnAuthenticatedAsync>d__90")]
public virtual Task`1<IHttpResult> OnAuthenticatedAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    protected virtual IAuthRepository GetAuthRepository(IRequest req);
    protected virtual IAuthRepositoryAsync GetAuthRepositoryAsync(IRequest req);
    public virtual string CreateOrMergeAuthSession(IAuthSession session, IAuthTokens tokens);
    [ObsoleteAttribute("Use LoadUserAuthInfoAsync")]
protected void LoadUserAuthInfo(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    protected static bool LoginMatchesSession(IAuthSession session, string userName);
    public abstract virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    public abstract virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    public virtual Task OnFailedAuthentication(IAuthSession session, IRequest httpReq, IResponse httpRes);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthProvider/<UserNameAlreadyExistsAsync>d__102")]
protected virtual Task`1<bool> UserNameAlreadyExistsAsync(IAuthRepositoryAsync authRepo, IUserAuth userAuth, IAuthTokens tokens, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthProvider/<EmailAlreadyExistsAsync>d__103")]
protected virtual Task`1<bool> EmailAlreadyExistsAsync(IAuthRepositoryAsync authRepo, IUserAuth userAuth, IAuthTokens tokens, CancellationToken token);
    protected virtual string GetAuthRedirectUrl(IServiceBase authService, IAuthSession session);
    public virtual Task`1<bool> IsAccountLockedAsync(IAuthRepositoryAsync authRepoAsync, IUserAuth userAuth, IAuthTokens tokens, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthProvider/<ValidateAccountAsync>d__106")]
protected virtual Task`1<IHttpResult> ValidateAccountAsync(IServiceBase authService, IAuthRepositoryAsync authRepo, IAuthSession session, IAuthTokens tokens, CancellationToken token);
    protected virtual string GetReferrerUrl(IServiceBase authService, IAuthSession session, Authenticate request);
    protected virtual object ConvertToClientError(object failedResult, bool isHtml);
    public virtual void Configure(IServiceCollection services, AuthFeature feature);
    public virtual void Register(IAppHost appHost, AuthFeature feature);
    public IUserAuthRepositoryAsync GetUserAuthRepositoryAsync(IRequest request);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.AuthProviderExtensions : object {
    private static ILog Log;
    private static AuthProviderExtensions();
    [ExtensionAttribute]
public static bool IsAuthorizedSafe(IAuthProvider authProvider, IAuthSession session, IAuthTokens tokens);
    [ExtensionAttribute]
public static string SanitizeOAuthUrl(string url);
    [ExtensionAttribute]
internal static bool PopulateFromRequestIfHasSessionId(IRequest req, object requestDto);
    [ExtensionAttribute]
public static bool PopulateRequestDtoIfAuthenticated(IRequest req, object requestDto);
    [ExtensionAttribute]
internal static string NotLogoutUrl(string url);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SaveSessionAsync")]
public static void SaveSession(IAuthProvider provider, IServiceBase authService, IAuthSession session, Nullable`1<TimeSpan> sessionExpiry);
    [AsyncStateMachineAttribute("ServiceStack.Auth.AuthProviderExtensions/<SaveSessionAsync>d__7")]
[ExtensionAttribute]
public static Task SaveSessionAsync(IAuthProvider provider, IServiceBase authService, IAuthSession session, Nullable`1<TimeSpan> sessionExpiry, CancellationToken token);
    public static void GetHashAndSaltString(string password, String& hash, String& salt);
    [ExtensionAttribute]
public static void PopulatePasswordHashes(IUserAuth newUser, string password, IUserAuth existingUser);
    [ExtensionAttribute]
private static void PopulateDigestAuthHash(IUserAuth newUser, string password, IUserAuth existingUser);
    [ExtensionAttribute]
public static bool VerifyPassword(IUserAuth userAuth, string providedPassword, Boolean& needsRehash);
    [ExtensionAttribute]
public static bool VerifyDigestAuth(IUserAuth userAuth, Dictionary`2<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence);
}
public abstract class ServiceStack.Auth.AuthProviderSync : object {
    protected static ILog Log;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SessionExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthRealm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallbackUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveExtendedUserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RestoreSessionFromState>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> <LoadUserAuthFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuthContext, IHttpResult> <CustomValidationFilter>k__BackingField;
    public Func`3<AuthProviderSync, string, string> PreAuthUrlFilter;
    public Func`3<AuthProviderSync, string, string> AccessTokenUrlFilter;
    public Func`3<AuthProviderSync, string, string> SuccessRedirectUrlFilter;
    public Func`3<AuthProviderSync, string, string> FailedRedirectUrlFilter;
    public Func`3<AuthProviderSync, string, string> LogoutUrlFilter;
    [CompilerGeneratedAttribute]
private Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> <AccountLockedValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private NavItem <NavItem>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludeAuthInfoItems>k__BackingField;
    private static long transientUserAuthId;
    private static ConcurrentDictionary`2<string, long> transientUserIdsMap;
    public string Type { get; }
    public Dictionary`2<string, string> Meta { get; }
    public Nullable`1<TimeSpan> SessionExpiry { get; public set; }
    public string AuthRealm { get; public set; }
    public string Provider { get; public set; }
    public string CallbackUrl { get; public set; }
    public string RedirectUrl { get; public set; }
    public bool PersistSession { get; public set; }
    public bool SaveExtendedUserInfo { get; public set; }
    public Nullable`1<bool> RestoreSessionFromState { get; public set; }
    public Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> LoadUserAuthFilter { get; public set; }
    public Func`2<AuthContext, IHttpResult> CustomValidationFilter { get; public set; }
    public Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> AccountLockedValidator { get; public set; }
    public NavItem NavItem { get; public set; }
    public IAuthEvents AuthEvents { get; }
    public HashSet`1<string> ExcludeAuthInfoItems { get; public set; }
    protected AuthProviderSync(IAppSettings appSettings, string authRealm, string oAuthProvider);
    private static AuthProviderSync();
    public virtual string get_Type();
    public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SessionExpiry();
    [CompilerGeneratedAttribute]
public void set_SessionExpiry(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthRealm();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthRealm(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Provider(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CallbackUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CallbackUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUrl();
    [CompilerGeneratedAttribute]
public void set_RedirectUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_PersistSession();
    [CompilerGeneratedAttribute]
public void set_PersistSession(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveExtendedUserInfo();
    [CompilerGeneratedAttribute]
public void set_SaveExtendedUserInfo(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RestoreSessionFromState();
    [CompilerGeneratedAttribute]
public void set_RestoreSessionFromState(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> get_LoadUserAuthFilter();
    [CompilerGeneratedAttribute]
public void set_LoadUserAuthFilter(Action`3<AuthUserSession, IAuthTokens, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Func`2<AuthContext, IHttpResult> get_CustomValidationFilter();
    [CompilerGeneratedAttribute]
public void set_CustomValidationFilter(Func`2<AuthContext, IHttpResult> value);
    [CompilerGeneratedAttribute]
public Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> get_AccountLockedValidator();
    [CompilerGeneratedAttribute]
public void set_AccountLockedValidator(Func`4<IAuthRepository, IUserAuth, IAuthTokens, bool> value);
    public static string UrlFilter(AuthProviderSync provider, string url);
    [CompilerGeneratedAttribute]
public NavItem get_NavItem();
    [CompilerGeneratedAttribute]
public void set_NavItem(NavItem value);
    public IAuthEvents get_AuthEvents();
    protected string FallbackConfig(string fallback);
    public virtual object Logout(IServiceBase service, Authenticate request);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludeAuthInfoItems();
    [CompilerGeneratedAttribute]
public void set_ExcludeAuthInfoItems(HashSet`1<string> value);
    public virtual IHttpResult OnAuthenticated(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    protected virtual IAuthRepository GetAuthRepository(IRequest req);
    public virtual string CreateOrMergeAuthSession(IAuthSession session, IAuthTokens tokens);
    protected virtual void LoadUserAuthInfo(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    protected static bool LoginMatchesSession(IAuthSession session, string userName);
    public sealed virtual Task`1<object> LogoutAsync(IServiceBase service, Authenticate request, CancellationToken token);
    public sealed virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    public abstract virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    public abstract virtual object Authenticate(IServiceBase authService, IAuthSession session, Authenticate request);
    public virtual Task OnFailedAuthentication(IAuthSession session, IRequest httpReq, IResponse httpRes);
    protected virtual bool UserNameAlreadyExists(IAuthRepository authRepo, IUserAuth userAuth, IAuthTokens tokens);
    protected virtual bool EmailAlreadyExists(IAuthRepository authRepo, IUserAuth userAuth, IAuthTokens tokens);
    protected virtual string GetAuthRedirectUrl(IServiceBase authService, IAuthSession session);
    public virtual bool IsAccountLocked(IAuthRepository authRepo, IUserAuth userAuth, IAuthTokens tokens);
    protected virtual IHttpResult ValidateAccount(IServiceBase authService, IAuthRepository authRepo, IAuthSession session, IAuthTokens tokens);
    protected virtual string GetReferrerUrl(IServiceBase authService, IAuthSession session, Authenticate request);
    protected virtual object ConvertToClientError(object failedResult, bool isHtml);
    public virtual void Configure(IServiceCollection services, AuthFeature feature);
    public virtual void Register(IAppHost appHost, AuthFeature feature);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.AuthRepositoryUtils : object {
    public static string ParseOrderBy(string orderBy, Boolean& desc);
    [ExtensionAttribute]
public static IEnumerable`1<TUserAuth> SortAndPage(IEnumerable`1<TUserAuth> q, string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
}
public class ServiceStack.Auth.AuthResultContext : object {
    [CompilerGeneratedAttribute]
private IHttpResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceBase <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthSession <Session>k__BackingField;
    public IHttpResult Result { get; public set; }
    public IServiceBase Service { get; internal set; }
    public IRequest Request { get; internal set; }
    public IAuthSession Session { get; internal set; }
    [CompilerGeneratedAttribute]
public IHttpResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(IHttpResult value);
    [CompilerGeneratedAttribute]
public IServiceBase get_Service();
    [CompilerGeneratedAttribute]
internal void set_Service(IServiceBase value);
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
internal void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public IAuthSession get_Session();
    [CompilerGeneratedAttribute]
internal void set_Session(IAuthSession value);
}
public class ServiceStack.Auth.AuthTokens : object {
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BirthDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BirthDateRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RefreshTokenExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Items>k__BackingField;
    public string Provider { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string DisplayName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string PhoneNumber { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    public string BirthDateRaw { get; public set; }
    public string Address { get; public set; }
    public string Address2 { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string Country { get; public set; }
    public string Culture { get; public set; }
    public string FullName { get; public set; }
    public string Gender { get; public set; }
    public string Language { get; public set; }
    public string MailAddress { get; public set; }
    public string Nickname { get; public set; }
    public string PostalCode { get; public set; }
    public string TimeZone { get; public set; }
    public string AccessToken { get; public set; }
    public string AccessTokenSecret { get; public set; }
    public string RefreshToken { get; public set; }
    public Nullable`1<DateTime> RefreshTokenExpiry { get; public set; }
    public string RequestToken { get; public set; }
    public string RequestTokenSecret { get; public set; }
    public Dictionary`2<string, string> Items { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Provider(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FirstName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LastName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Company();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Company(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Email();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_BirthDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BirthDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BirthDateRaw();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BirthDateRaw(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Address(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Address2(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_City();
    [CompilerGeneratedAttribute]
public sealed virtual void set_City(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void set_State(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Country();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Country(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Culture();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Culture(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FullName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Gender();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Gender(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Language();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MailAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MailAddress(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Nickname();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Nickname(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PostalCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeZone();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AccessToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AccessTokenSecret();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccessTokenSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RefreshToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_RefreshTokenExpiry();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RefreshTokenExpiry(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestTokenSecret();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestTokenSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Items(Dictionary`2<string, string> value);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.AuthTokenUtils : object {
    [ExtensionAttribute]
public static void AddRoles(IAuthTokens authTokens, ICollection`1<string> roles);
    [ExtensionAttribute]
public static String[] GetRoles(IAuthTokens authTokens);
}
public class ServiceStack.Auth.BasicAuthProvider : CredentialsAuthProvider {
    public static string Name;
    public static string Realm;
    public string Type { get; }
    public BasicAuthProvider(IAppSettings appSettings);
    private static BasicAuthProvider();
    public virtual string get_Type();
    protected virtual void Init();
    [AsyncStateMachineAttribute("ServiceStack.Auth.BasicAuthProvider/<AuthenticateAsync>d__7")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.BasicAuthProvider/<PreAuthenticateAsync>d__8")]
public virtual Task PreAuthenticateAsync(IRequest req, IResponse res);
}
public class ServiceStack.Auth.BasicAuthProviderSync : CredentialsAuthProviderSync {
    public static string Name;
    public static string Realm;
    public string Type { get; }
    public BasicAuthProviderSync(IAppSettings appSettings);
    private static BasicAuthProviderSync();
    public virtual string get_Type();
    public virtual object Authenticate(IServiceBase authService, IAuthSession session, Authenticate request);
    public virtual void PreAuthenticate(IRequest req, IResponse res);
}
[AuthenticateAttribute]
[DefaultRequestAttribute("ServiceStack.ConvertSessionToToken")]
public class ServiceStack.Auth.ConvertSessionToTokenService : Service {
    public object Any(ConvertSessionToToken request);
}
public class ServiceStack.Auth.CreateApiKeyDelegate : MulticastDelegate {
    public CreateApiKeyDelegate(object object, IntPtr method);
    public virtual string Invoke(string environment, string keyType, int keySizeBytes);
    public virtual IAsyncResult BeginInvoke(string environment, string keyType, int keySizeBytes, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class ServiceStack.Auth.CredentialsAuthProvider : AuthProvider {
    public static string Name;
    public static string Realm;
    [CompilerGeneratedAttribute]
private bool <SkipPasswordVerificationForInProcessRequests>k__BackingField;
    public string Type { get; }
    public bool SkipPasswordVerificationForInProcessRequests { get; public set; }
    public CredentialsAuthProvider(IAppSettings appSettings, string authProvider);
    public CredentialsAuthProvider(IAppSettings appSettings, string authRealm, string authProvider);
    public CredentialsAuthProvider(IAppSettings appSettings);
    private static CredentialsAuthProvider();
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public bool get_SkipPasswordVerificationForInProcessRequests();
    [CompilerGeneratedAttribute]
public void set_SkipPasswordVerificationForInProcessRequests(bool value);
    protected virtual void Init();
    [AsyncStateMachineAttribute("ServiceStack.Auth.CredentialsAuthProvider/<TryAuthenticateAsync>d__15")]
public virtual Task`1<bool> TryAuthenticateAsync(IServiceBase authService, string userName, string password, CancellationToken token);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.CredentialsAuthProvider/<AuthenticateAsync>d__17")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.CredentialsAuthProvider/<ResetSessionBeforeLoginAsync>d__18")]
protected virtual Task`1<IAuthSession> ResetSessionBeforeLoginAsync(IServiceBase authService, IAuthSession session, string userName, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.CredentialsAuthProvider/<AuthenticateAsync>d__19")]
protected Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, string userName, string password, string referrerUrl, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.CredentialsAuthProvider/<AuthenticatePrivateRequestAsync>d__20")]
protected virtual Task`1<object> AuthenticatePrivateRequestAsync(IServiceBase authService, IAuthSession session, string userName, string password, string referrerUrl, CancellationToken token);
}
public class ServiceStack.Auth.CredentialsAuthProviderSync : AuthProviderSync {
    public static string Name;
    public static string Realm;
    [CompilerGeneratedAttribute]
private bool <SkipPasswordVerificationForInProcessRequests>k__BackingField;
    public string Type { get; }
    public bool SkipPasswordVerificationForInProcessRequests { get; public set; }
    public CredentialsAuthProviderSync(IAppSettings appSettings, string authRealm, string oAuthProvider);
    public CredentialsAuthProviderSync(IAppSettings appSettings);
    private static CredentialsAuthProviderSync();
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public bool get_SkipPasswordVerificationForInProcessRequests();
    [CompilerGeneratedAttribute]
public void set_SkipPasswordVerificationForInProcessRequests(bool value);
    public IUserAuthRepository GetUserAuthRepository(IRequest request);
    public virtual bool TryAuthenticate(IServiceBase authService, string userName, string password);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    public virtual object Authenticate(IServiceBase authService, IAuthSession session, Authenticate request);
    protected object Authenticate(IServiceBase authService, IAuthSession session, string userName, string password);
    protected virtual IAuthSession ResetSessionBeforeLogin(IServiceBase authService, IAuthSession session, string userName);
    protected object Authenticate(IServiceBase authService, IAuthSession session, string userName, string password, string referrerUrl);
    protected virtual object AuthenticatePrivateRequest(IServiceBase authService, IAuthSession session, string userName, string password, string referrerUrl);
    public virtual IHttpResult OnAuthenticated(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
}
internal static class ServiceStack.Auth.CryptoUtil : object {
    public static Exception Fail(string message);
    public static T Fail(string message);
}
public class ServiceStack.Auth.DigestAuthFunctions : object {
    public string PrivateHashEncode(string TimeStamp, string IPAddress, string PrivateKey);
    public string Base64Encode(string StringToEncode);
    public string Base64Decode(string StringToDecode);
    public String[] GetNonceParts(string nonce);
    public string GetNonce(string IPAddress, string PrivateKey);
    public bool ValidateNonce(string nonce, string IPAddress, string PrivateKey);
    public bool StaleNonce(string nonce, int Timeout);
    private DateTime TimeStampAsDateTime(string TimeStamp);
    public string ConvertToHexString(IEnumerable`1<byte> hash);
    public string CreateAuthResponse(Dictionary`2<string, string> digestHeaders, string Ha1);
    public string CreateAuthResponse(Dictionary`2<string, string> digestHeaders, string Ha1, string Ha2);
    public string CreateHa1(Dictionary`2<string, string> digestHeaders, string password);
    public string CreateHa1(string Username, string Realm, string Password);
    public string CreateHa2(Dictionary`2<string, string> digestHeaders);
    public bool ValidateResponse(Dictionary`2<string, string> digestInfo, string PrivateKey, int NonceTimeOut, string DigestHA1, string sequence);
}
public class ServiceStack.Auth.DigestAuthProvider : AuthProvider {
    public static string Name;
    public static string Realm;
    public static int NonceTimeOut;
    public string PrivateKey;
    [CompilerGeneratedAttribute]
private IAppSettings <AppSettings>k__BackingField;
    public string Type { get; }
    public IAppSettings AppSettings { get; public set; }
    public DigestAuthProvider(IAppSettings appSettings, string authRealm, string authProvider);
    public DigestAuthProvider(IAppSettings appSettings);
    private static DigestAuthProvider();
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public IAppSettings get_AppSettings();
    [CompilerGeneratedAttribute]
public void set_AppSettings(IAppSettings value);
    public virtual bool TryAuthenticate(IServiceBase authService, string userName, string password);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.DigestAuthProvider/<AuthenticateAsync>d__16")]
protected Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, string userName, string password, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.DigestAuthProvider/<OnAuthenticatedAsync>d__17")]
public virtual Task`1<IHttpResult> OnAuthenticatedAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task OnFailedAuthentication(IAuthSession session, IRequest httpReq, IResponse httpRes);
    [AsyncStateMachineAttribute("ServiceStack.Auth.DigestAuthProvider/<PreAuthenticateAsync>d__19")]
public sealed virtual Task PreAuthenticateAsync(IRequest req, IResponse res);
}
public class ServiceStack.Auth.DiscordAuthProvider : OAuth2Provider {
    public static string Name;
    public static string Realm;
    private static string DefaultAuthorizeUrl;
    private static string DefaultAccessTokenUrl;
    private static string DefaultUserProfileUrl;
    public DiscordAuthProvider(IAppSettings appSettings);
    private static DiscordAuthProvider();
    [AsyncStateMachineAttribute("ServiceStack.Auth.DiscordAuthProvider/<GetAccessTokenJsonAsync>d__6")]
protected virtual Task`1<string> GetAccessTokenJsonAsync(string code, AuthContext ctx, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.DiscordAuthProvider/<CreateAuthInfoAsync>d__7")]
protected virtual Task`1<Dictionary`2<string, string>> CreateAuthInfoAsync(string accessToken, CancellationToken token);
}
public class ServiceStack.Auth.EmailAddresses : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    public string Type { get; public set; }
    public string Address { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
}
public class ServiceStack.Auth.FacebookAuthProvider : OAuthProvider {
    public static string Name;
    public static string Realm;
    public static string PreAuthUrl;
    public static String[] DefaultFields;
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetrieveUserPicture>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public string AppId { get; public set; }
    public string AppSecret { get; public set; }
    public String[] Permissions { get; public set; }
    public String[] Fields { get; public set; }
    public bool RetrieveUserPicture { get; public set; }
    public Dictionary`2<string, string> Meta { get; }
    public FacebookAuthProvider(IAppSettings appSettings);
    private static FacebookAuthProvider();
    public string get_AppId();
    public void set_AppId(string value);
    public string get_AppSecret();
    public void set_AppSecret(string value);
    [CompilerGeneratedAttribute]
public String[] get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(String[] value);
    [CompilerGeneratedAttribute]
public bool get_RetrieveUserPicture();
    [CompilerGeneratedAttribute]
public void set_RetrieveUserPicture(bool value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [AsyncStateMachineAttribute("ServiceStack.Auth.FacebookAuthProvider/<AuthenticateAsync>d__26")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.FacebookAuthProvider/<AuthenticateWithAccessTokenAsync>d__27")]
protected virtual Task`1<object> AuthenticateWithAccessTokenAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, string accessToken, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.FacebookAuthProvider/<LoadUserAuthInfoAsync>d__28")]
protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
}
[IgnoreServicesAttribute]
public class ServiceStack.Auth.FullRegistrationValidator : RegistrationValidator {
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
[DefaultRequestAttribute("ServiceStack.GetAccessToken")]
public class ServiceStack.Auth.GetAccessTokenService : Service {
    [AsyncStateMachineAttribute("ServiceStack.Auth.GetAccessTokenService/<Any>d__0")]
public Task`1<object> Any(GetAccessToken request);
}
[AuthenticateAttribute]
[DefaultRequestAttribute("ServiceStack.GetApiKeys")]
public class ServiceStack.Auth.GetApiKeysService : Service {
    [AsyncStateMachineAttribute("ServiceStack.Auth.GetApiKeysService/<Any>d__0")]
public Task`1<object> Any(GetApiKeys request);
}
public class ServiceStack.Auth.GithubAuthProvider : OAuthProvider {
    public static string Name;
    public static string Realm;
    public static string DefaultPreAuthUrl;
    public static string DefaultVerifyAccessTokenUrl;
    [CompilerGeneratedAttribute]
private string <PreAuthUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerifyAccessTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    public string PreAuthUrl { get; public set; }
    public string VerifyAccessTokenUrl { get; public set; }
    public Dictionary`2<string, string> Meta { get; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public String[] Scopes { get; public set; }
    private static GithubAuthProvider();
    public GithubAuthProvider(IAppSettings appSettings);
    [CompilerGeneratedAttribute]
public string get_PreAuthUrl();
    [CompilerGeneratedAttribute]
public void set_PreAuthUrl(string value);
    [CompilerGeneratedAttribute]
public string get_VerifyAccessTokenUrl();
    [CompilerGeneratedAttribute]
public void set_VerifyAccessTokenUrl(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [AsyncStateMachineAttribute("ServiceStack.Auth.GithubAuthProvider/<AuthenticateAsync>d__29")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.GithubAuthProvider/<AuthenticateWithAccessTokenAsync>d__30")]
protected virtual Task`1<object> AuthenticateWithAccessTokenAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, string accessToken, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.GithubAuthProvider/<LoadUserAuthInfoAsync>d__31")]
protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
    [CompilerGeneratedAttribute]
private void <AuthenticateAsync>b__29_0(HttpWebRequest req);
    [CompilerGeneratedAttribute]
private void <AuthenticateAsync>b__29_1(HttpRequestConfig c);
}
public class ServiceStack.Auth.GoogleAuthProvider : OAuth2Provider {
    public static string Name;
    public static string Realm;
    public static string DefaultAuthorizeUrl;
    public static string DefaultAccessTokenUrl;
    public static string DefaultUserProfileUrl;
    public static string DefaultVerifyTokenUrl;
    public GoogleAuthProvider(IAppSettings appSettings);
    private static GoogleAuthProvider();
    [AsyncStateMachineAttribute("ServiceStack.Auth.GoogleAuthProvider/<OnVerifyAccessTokenAsync>d__7")]
public virtual Task`1<bool> OnVerifyAccessTokenAsync(string accessToken, AuthContext ctx);
    [AsyncStateMachineAttribute("ServiceStack.Auth.GoogleAuthProvider/<AuthenticateWithAccessTokenAsync>d__8")]
protected virtual Task`1<object> AuthenticateWithAccessTokenAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, string accessToken, Dictionary`2<string, string> authInfo, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.GoogleAuthProvider/<CreateAuthInfoAsync>d__9")]
protected virtual Task`1<Dictionary`2<string, string>> CreateAuthInfoAsync(string accessToken, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.HashExtensions : object {
    public static string HexHash(HashAlgorithm hash, string s);
    public static string HexHash(HashAlgorithm hash, Byte[] bytes);
    [ExtensionAttribute]
public static string ToSha1Hash(string value);
    [ExtensionAttribute]
public static Byte[] ToSha1HashBytes(Byte[] bytes);
    [ExtensionAttribute]
public static string ToSha256Hash(string value);
    [ExtensionAttribute]
public static string ToMd5Hash(string value);
    [ExtensionAttribute]
public static Byte[] ToSha256HashBytes(Byte[] bytes);
    [ExtensionAttribute]
public static string ToSha512Hash(string value);
    [ExtensionAttribute]
public static Byte[] ToSha512HashBytes(Byte[] bytes);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.HttpContextExtensions : object {
    [ExtensionAttribute]
public static IPrincipal GetUser(HttpContext ctx);
    [ExtensionAttribute]
public static IPrincipal GetUser(HttpContextBase ctx);
    [ExtensionAttribute]
public static IPrincipal GetUser(IRequest req);
    [ExtensionAttribute]
public static string GetUserName(IPrincipal user);
}
public interface ServiceStack.Auth.IAuthEvents {
    public abstract virtual void OnCreated(IRequest httpReq, IAuthSession session);
    public abstract virtual void OnRegistered(IRequest httpReq, IAuthSession session, IServiceBase registrationService);
    public abstract virtual IHttpResult Validate(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public abstract virtual void OnAuthenticated(IRequest httpReq, IAuthSession session, IServiceBase authService, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public abstract virtual void OnLogout(IRequest httpReq, IAuthSession session, IServiceBase authService);
}
public interface ServiceStack.Auth.IAuthEventsAsync {
    public abstract virtual Task OnRegisteredAsync(IRequest httpReq, IAuthSession session, IServiceBase registrationService, CancellationToken token);
    public abstract virtual Task`1<IHttpResult> ValidateAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public abstract virtual Task OnAuthenticatedAsync(IRequest httpReq, IAuthSession session, IServiceBase authService, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public abstract virtual Task OnLogoutAsync(IRequest httpReq, IAuthSession session, IServiceBase authService, CancellationToken token);
}
public interface ServiceStack.Auth.IAuthHttpGateway {
    public abstract virtual bool VerifyTwitterAccessToken(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, String& userId, String& email);
    public abstract virtual Task`1<AuthId> VerifyTwitterAccessTokenAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, CancellationToken token);
    public abstract virtual string DownloadTwitterUserInfo(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId);
    public abstract virtual Task`1<string> DownloadTwitterUserInfoAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId, CancellationToken token);
    public abstract virtual bool VerifyFacebookAccessToken(string appId, string accessToken);
    public abstract virtual Task`1<bool> VerifyFacebookAccessTokenAsync(string appId, string accessToken, CancellationToken token);
    public abstract virtual string DownloadFacebookUserInfo(string facebookCode, String[] fields);
    public abstract virtual Task`1<string> DownloadFacebookUserInfoAsync(string facebookCode, String[] fields, CancellationToken token);
    public abstract virtual string DownloadGithubUserInfo(string accessToken);
    public abstract virtual Task`1<string> DownloadGithubUserInfoAsync(string accessToken, CancellationToken token);
    public abstract virtual string DownloadGithubUserEmailsInfo(string accessToken);
    public abstract virtual Task`1<string> DownloadGithubUserEmailsInfoAsync(string accessToken, CancellationToken token);
    public abstract virtual string DownloadGoogleUserInfo(string accessToken);
    public abstract virtual Task`1<string> DownloadGoogleUserInfoAsync(string accessToken, CancellationToken token);
    public abstract virtual string DownloadMicrosoftUserInfo(string accessToken);
    public abstract virtual Task`1<string> DownloadMicrosoftUserInfoAsync(string accessToken, CancellationToken token);
    public abstract virtual string CreateMicrosoftPhotoUrl(string accessToken, string savePhotoSize);
    public abstract virtual Task`1<string> CreateMicrosoftPhotoUrlAsync(string accessToken, string savePhotoSize, CancellationToken token);
    public abstract virtual string DownloadYammerUserInfo(string yammerUserId);
    public abstract virtual Task`1<string> DownloadYammerUserInfoAsync(string yammerUserId);
}
public interface ServiceStack.Auth.IAuthMetadataProvider {
    public abstract virtual void AddMetadata(IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public abstract virtual string GetProfileUrl(IAuthSession authSession, string defaultUrl);
}
public interface ServiceStack.Auth.IAuthProvider {
    public string Type { get; }
    public Dictionary`2<string, string> Meta { get; }
    public string AuthRealm { get; public set; }
    public string Provider { get; public set; }
    public string CallbackUrl { get; public set; }
    public abstract virtual string get_Type();
    public abstract virtual Dictionary`2<string, string> get_Meta();
    public abstract virtual string get_AuthRealm();
    public abstract virtual void set_AuthRealm(string value);
    public abstract virtual string get_Provider();
    public abstract virtual void set_Provider(string value);
    public abstract virtual string get_CallbackUrl();
    public abstract virtual void set_CallbackUrl(string value);
    public abstract virtual Task`1<object> LogoutAsync(IServiceBase service, Authenticate request, CancellationToken token);
    public abstract virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    public abstract virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
}
public interface ServiceStack.Auth.IAuthRepository {
    public abstract virtual void LoadUserAuth(IAuthSession session, IAuthTokens tokens);
    public abstract virtual void SaveUserAuth(IAuthSession authSession);
    public abstract virtual List`1<IUserAuthDetails> GetUserAuthDetails(string userAuthId);
    public abstract virtual IUserAuthDetails CreateOrMergeAuthSession(IAuthSession authSession, IAuthTokens tokens);
    public abstract virtual IUserAuth GetUserAuth(IAuthSession authSession, IAuthTokens tokens);
    public abstract virtual IUserAuth GetUserAuthByUserName(string userNameOrEmail);
    public abstract virtual void SaveUserAuth(IUserAuth userAuth);
    public abstract virtual bool TryAuthenticate(string userName, string password, IUserAuth& userAuth);
    public abstract virtual bool TryAuthenticate(Dictionary`2<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, IUserAuth& userAuth);
}
public interface ServiceStack.Auth.IAuthRepositoryAsync {
    public abstract virtual Task LoadUserAuthAsync(IAuthSession session, IAuthTokens tokens, CancellationToken token);
    public abstract virtual Task SaveUserAuthAsync(IAuthSession authSession, CancellationToken token);
    public abstract virtual Task`1<List`1<IUserAuthDetails>> GetUserAuthDetailsAsync(string userAuthId, CancellationToken token);
    public abstract virtual Task`1<IUserAuthDetails> CreateOrMergeAuthSessionAsync(IAuthSession authSession, IAuthTokens tokens, CancellationToken token);
    public abstract virtual Task`1<IUserAuth> GetUserAuthAsync(IAuthSession authSession, IAuthTokens tokens, CancellationToken token);
    public abstract virtual Task`1<IUserAuth> GetUserAuthByUserNameAsync(string userNameOrEmail, CancellationToken token);
    public abstract virtual Task SaveUserAuthAsync(IUserAuth userAuth, CancellationToken token);
    public abstract virtual Task`1<IUserAuth> TryAuthenticateAsync(string userName, string password, CancellationToken token);
    public abstract virtual Task`1<IUserAuth> TryAuthenticateAsync(Dictionary`2<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, CancellationToken token);
}
public interface ServiceStack.Auth.IAuthResponseFilter {
    public abstract virtual Task ExecuteAsync(AuthFilterContext authContext);
    public abstract virtual Task ResultFilterAsync(AuthResultContext authContext, CancellationToken token);
}
public interface ServiceStack.Auth.IAuthSession {
    public string ReferrerUrl { get; public set; }
    public string Id { get; public set; }
    public string UserAuthId { get; public set; }
    public string UserAuthName { get; public set; }
    public string UserName { get; public set; }
    public string DisplayName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Email { get; public set; }
    public List`1<IAuthTokens> ProviderOAuthAccess { get; public set; }
    public DateTime CreatedAt { get; public set; }
    public DateTime LastModified { get; public set; }
    public List`1<string> Roles { get; public set; }
    public List`1<string> Permissions { get; public set; }
    public bool IsAuthenticated { get; public set; }
    public bool FromToken { get; public set; }
    public string AuthProvider { get; public set; }
    public string ProfileUrl { get; public set; }
    public string Sequence { get; public set; }
    public abstract virtual string get_ReferrerUrl();
    public abstract virtual void set_ReferrerUrl(string value);
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual string get_UserAuthId();
    public abstract virtual void set_UserAuthId(string value);
    public abstract virtual string get_UserAuthName();
    public abstract virtual void set_UserAuthName(string value);
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_FirstName();
    public abstract virtual void set_FirstName(string value);
    public abstract virtual string get_LastName();
    public abstract virtual void set_LastName(string value);
    public abstract virtual string get_Email();
    public abstract virtual void set_Email(string value);
    public abstract virtual List`1<IAuthTokens> get_ProviderOAuthAccess();
    public abstract virtual void set_ProviderOAuthAccess(List`1<IAuthTokens> value);
    public abstract virtual DateTime get_CreatedAt();
    public abstract virtual void set_CreatedAt(DateTime value);
    public abstract virtual DateTime get_LastModified();
    public abstract virtual void set_LastModified(DateTime value);
    public abstract virtual List`1<string> get_Roles();
    public abstract virtual void set_Roles(List`1<string> value);
    public abstract virtual List`1<string> get_Permissions();
    public abstract virtual void set_Permissions(List`1<string> value);
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual void set_IsAuthenticated(bool value);
    public abstract virtual bool get_FromToken();
    public abstract virtual void set_FromToken(bool value);
    public abstract virtual string get_AuthProvider();
    public abstract virtual void set_AuthProvider(string value);
    public abstract virtual string get_ProfileUrl();
    public abstract virtual void set_ProfileUrl(string value);
    public abstract virtual string get_Sequence();
    public abstract virtual void set_Sequence(string value);
    public abstract virtual bool HasRole(string role, IAuthRepository authRepo);
    public abstract virtual Task`1<bool> HasRoleAsync(string role, IAuthRepositoryAsync authRepo, CancellationToken token);
    public abstract virtual bool HasPermission(string permission, IAuthRepository authRepo);
    public abstract virtual Task`1<bool> HasPermissionAsync(string permission, IAuthRepositoryAsync authRepo, CancellationToken token);
    public abstract virtual ICollection`1<string> GetRoles(IAuthRepository authRepo);
    public abstract virtual Task`1<ICollection`1<string>> GetRolesAsync(IAuthRepositoryAsync authRepo, CancellationToken token);
    public abstract virtual ICollection`1<string> GetPermissions(IAuthRepository authRepo);
    public abstract virtual Task`1<ICollection`1<string>> GetPermissionsAsync(IAuthRepositoryAsync authRepo, CancellationToken token);
    public abstract virtual bool IsAuthorized(string provider);
    public abstract virtual void OnCreated(IRequest httpReq);
    public abstract virtual void OnRegistered(IRequest httpReq, IAuthSession session, IServiceBase service);
    public abstract virtual void OnAuthenticated(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public abstract virtual void OnLogout(IServiceBase authService);
    public abstract virtual HashSet`1<string> GetUserAttributes(IRequest request);
}
public interface ServiceStack.Auth.IAuthSessionExtended {
    public string Company { get; public set; }
    public string PrimaryEmail { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    public string Address { get; public set; }
    public string Address2 { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string PostalCode { get; public set; }
    public string Country { get; public set; }
    public string PhoneNumber { get; public set; }
    public string BirthDateRaw { get; public set; }
    public string Gender { get; public set; }
    public List`1<string> Audiences { get; public set; }
    public List`1<string> Scopes { get; public set; }
    public string Dns { get; public set; }
    public string Rsa { get; public set; }
    public string Sid { get; public set; }
    public string Hash { get; public set; }
    public string HomePhone { get; public set; }
    public string MobilePhone { get; public set; }
    public string Webpage { get; public set; }
    public Nullable`1<bool> EmailConfirmed { get; public set; }
    public Nullable`1<bool> PhoneNumberConfirmed { get; public set; }
    public Nullable`1<bool> TwoFactorEnabled { get; public set; }
    public string SecurityStamp { get; public set; }
    public string Type { get; public set; }
    public string RecoveryToken { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public abstract virtual string get_Company();
    public abstract virtual void set_Company(string value);
    public abstract virtual string get_PrimaryEmail();
    public abstract virtual void set_PrimaryEmail(string value);
    public abstract virtual Nullable`1<DateTime> get_BirthDate();
    public abstract virtual void set_BirthDate(Nullable`1<DateTime> value);
    public abstract virtual string get_Address();
    public abstract virtual void set_Address(string value);
    public abstract virtual string get_Address2();
    public abstract virtual void set_Address2(string value);
    public abstract virtual string get_City();
    public abstract virtual void set_City(string value);
    public abstract virtual string get_State();
    public abstract virtual void set_State(string value);
    public abstract virtual string get_PostalCode();
    public abstract virtual void set_PostalCode(string value);
    public abstract virtual string get_Country();
    public abstract virtual void set_Country(string value);
    public abstract virtual string get_PhoneNumber();
    public abstract virtual void set_PhoneNumber(string value);
    public abstract virtual string get_BirthDateRaw();
    public abstract virtual void set_BirthDateRaw(string value);
    public abstract virtual string get_Gender();
    public abstract virtual void set_Gender(string value);
    public abstract virtual List`1<string> get_Audiences();
    public abstract virtual void set_Audiences(List`1<string> value);
    public abstract virtual List`1<string> get_Scopes();
    public abstract virtual void set_Scopes(List`1<string> value);
    public abstract virtual string get_Dns();
    public abstract virtual void set_Dns(string value);
    public abstract virtual string get_Rsa();
    public abstract virtual void set_Rsa(string value);
    public abstract virtual string get_Sid();
    public abstract virtual void set_Sid(string value);
    public abstract virtual string get_Hash();
    public abstract virtual void set_Hash(string value);
    public abstract virtual string get_HomePhone();
    public abstract virtual void set_HomePhone(string value);
    public abstract virtual string get_MobilePhone();
    public abstract virtual void set_MobilePhone(string value);
    public abstract virtual string get_Webpage();
    public abstract virtual void set_Webpage(string value);
    public abstract virtual Nullable`1<bool> get_EmailConfirmed();
    public abstract virtual void set_EmailConfirmed(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_PhoneNumberConfirmed();
    public abstract virtual void set_PhoneNumberConfirmed(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_TwoFactorEnabled();
    public abstract virtual void set_TwoFactorEnabled(Nullable`1<bool> value);
    public abstract virtual string get_SecurityStamp();
    public abstract virtual void set_SecurityStamp(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_RecoveryToken();
    public abstract virtual void set_RecoveryToken(string value);
    public abstract virtual Nullable`1<int> get_RefId();
    public abstract virtual void set_RefId(Nullable`1<int> value);
    public abstract virtual string get_RefIdStr();
    public abstract virtual void set_RefIdStr(string value);
    public abstract virtual Task`1<bool> HasAllRolesAsync(ICollection`1<string> requiredRoles, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    public abstract virtual Task`1<bool> HasAnyRolesAsync(ICollection`1<string> roles, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    public abstract virtual Task`1<bool> HasAllPermissionsAsync(ICollection`1<string> requiredPermissions, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    public abstract virtual Task`1<bool> HasAnyPermissionsAsync(ICollection`1<string> permissions, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    public abstract virtual void OnLoad(IRequest httpReq);
    public abstract virtual Task OnRegisteredAsync(IRequest httpReq, IAuthSession session, IServiceBase service, CancellationToken token);
    public abstract virtual Task OnAuthenticatedAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public abstract virtual Task OnLogoutAsync(IServiceBase authService, CancellationToken token);
    public abstract virtual IHttpResult Validate(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public abstract virtual Task`1<IHttpResult> ValidateAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public abstract virtual void PopulateFromClaims(IRequest httpReq, ClaimsPrincipal principal);
}
public interface ServiceStack.Auth.IAuthWithRequest {
    public abstract virtual Task PreAuthenticateAsync(IRequest req, IResponse res);
}
[ObsoleteAttribute("Use IAuthWithRequestAsync")]
public interface ServiceStack.Auth.IAuthWithRequestSync {
    public abstract virtual void PreAuthenticate(IRequest req, IResponse res);
}
public interface ServiceStack.Auth.IClearable {
    public abstract virtual void Clear();
}
public interface ServiceStack.Auth.IClearableAsync {
    public abstract virtual Task ClearAsync(CancellationToken token);
}
public interface ServiceStack.Auth.ICustomUserAuth {
    public abstract virtual IUserAuth CreateUserAuth();
    public abstract virtual IUserAuthDetails CreateUserAuthDetails();
}
public interface ServiceStack.Auth.IHashProvider {
    public abstract virtual void GetHashAndSaltString(string Data, String& Hash, String& Salt);
    public abstract virtual bool VerifyHashString(string Data, string Hash, string Salt);
}
[NullableContextAttribute("1")]
public interface ServiceStack.Auth.IIdentityApplicationAuthProvider {
    public abstract virtual Task PreAuthenticateAsync(IRequest req, IResponse res);
    public abstract virtual void PopulateSession(IRequest req, IAuthSession session, ClaimsPrincipal claimsPrincipal, string source);
    public abstract virtual Task PopulateSessionAsync(IRequest req, IAuthSession session, ClaimsPrincipal claimsPrincipal, string source);
}
[NullableContextAttribute("1")]
public interface ServiceStack.Auth.IIdentityAuthContext {
    public Func`1<IAuthSession> SessionFactory { get; }
    public abstract virtual Func`1<IAuthSession> get_SessionFactory();
}
[NullableContextAttribute("1")]
public interface ServiceStack.Auth.IIdentityAuthContextManager {
    public abstract virtual Task`1<IList`1<Claim>> GetClaimsByIdAsync(string userId, IRequest request);
    public abstract virtual Task`1<IList`1<Claim>> GetClaimsByNameAsync(string userName, IRequest request);
    public abstract virtual Task`1<ClaimsPrincipal> CreateClaimsPrincipalAsync(string userId, IRequest request);
}
public interface ServiceStack.Auth.IIdentityBasicAuthProvider {
}
public interface ServiceStack.Auth.IIdentityCredentialsAuthProvider {
    public bool LockoutOnFailure { get; public set; }
    public abstract virtual bool get_LockoutOnFailure();
    public abstract virtual void set_LockoutOnFailure(bool value);
}
[NullableContextAttribute("1")]
public interface ServiceStack.Auth.IIdentityJwtAuthProvider {
    [NullableAttribute("2")]
public string AuthenticationScheme { get; }
    public List`1<string> DeleteCookiesOnJwtCookies { get; }
    public bool EnableRefreshToken { get; }
    public bool RequireSecureConnection { get; }
    public string Audience { get; }
    public TimeSpan ExpireTokensIn { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_AuthenticationScheme();
    public abstract virtual List`1<string> get_DeleteCookiesOnJwtCookies();
    public abstract virtual bool get_EnableRefreshToken();
    public abstract virtual bool get_RequireSecureConnection();
    public abstract virtual string get_Audience();
    public abstract virtual TimeSpan get_ExpireTokensIn();
    public abstract virtual Task`1<List`1<Claim>> GetUserClaimsAsync(string userName, IRequest req);
    public abstract virtual string CreateJwtBearerToken(List`1<Claim> claims, string audience, DateTime expires);
    public abstract virtual Task`1<string> CreateBearerTokenAsync(string userName, IRequest req);
    public abstract virtual Task`1<UserJwtTokens> CreateBearerAndRefreshTokenAsync(string userName, IRequest req);
    public abstract virtual Task`1<string> CreateAccessTokenFromRefreshTokenAsync(string refreshToken, IRequest req);
}
public interface ServiceStack.Auth.IManageApiKeys {
    public abstract virtual void InitApiKeySchema();
    public abstract virtual bool ApiKeyExists(string apiKey);
    public abstract virtual ApiKey GetApiKey(string apiKey);
    public abstract virtual List`1<ApiKey> GetUserApiKeys(string userId);
    public abstract virtual void StoreAll(IEnumerable`1<ApiKey> apiKeys);
}
public interface ServiceStack.Auth.IManageApiKeysAsync {
    public abstract virtual void InitApiKeySchema();
    public abstract virtual Task`1<bool> ApiKeyExistsAsync(string apiKey, CancellationToken token);
    public abstract virtual Task`1<ApiKey> GetApiKeyAsync(string apiKey, CancellationToken token);
    public abstract virtual Task`1<List`1<ApiKey>> GetUserApiKeysAsync(string userId, CancellationToken token);
    public abstract virtual Task StoreAllAsync(IEnumerable`1<ApiKey> apiKeys, CancellationToken token);
}
public interface ServiceStack.Auth.IManageRoles {
    public abstract virtual ICollection`1<string> GetRoles(string userAuthId);
    public abstract virtual ICollection`1<string> GetPermissions(string userAuthId);
    public abstract virtual void GetRolesAndPermissions(string userAuthId, ICollection`1& roles, ICollection`1& permissions);
    public abstract virtual bool HasRole(string userAuthId, string role);
    public abstract virtual bool HasPermission(string userAuthId, string permission);
    public abstract virtual void AssignRoles(string userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions);
    public abstract virtual void UnAssignRoles(string userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions);
}
public interface ServiceStack.Auth.IManageRolesAsync {
    public abstract virtual Task`1<ICollection`1<string>> GetRolesAsync(string userAuthId, CancellationToken token);
    public abstract virtual Task`1<ICollection`1<string>> GetPermissionsAsync(string userAuthId, CancellationToken token);
    public abstract virtual Task`1<Tuple`2<ICollection`1<string>, ICollection`1<string>>> GetRolesAndPermissionsAsync(string userAuthId, CancellationToken token);
    public abstract virtual Task`1<bool> HasRoleAsync(string userAuthId, string role, CancellationToken token);
    public abstract virtual Task`1<bool> HasPermissionAsync(string userAuthId, string permission, CancellationToken token);
    public abstract virtual Task AssignRolesAsync(string userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
    public abstract virtual Task UnAssignRolesAsync(string userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
}
public interface ServiceStack.Auth.IManageSourceRolesAsync {
    public abstract virtual Task MergeRolesAsync(string userAuthId, string source, ICollection`1<string> roles, CancellationToken token);
    public abstract virtual Task`1<Tuple`2<ICollection`1<string>, ICollection`1<string>>> GetLocalRolesAndPermissionsAsync(string userAuthId, CancellationToken token);
}
public interface ServiceStack.Auth.IMemoryAuthRepository {
    public Dictionary`2<string, HashSet`1<string>> Sets { get; }
    public Dictionary`2<string, Dictionary`2<string, string>> Hashes { get; }
    public abstract virtual Dictionary`2<string, HashSet`1<string>> get_Sets();
    public abstract virtual Dictionary`2<string, Dictionary`2<string, string>> get_Hashes();
}
public class ServiceStack.Auth.InMemoryAuthRepository : InMemoryAuthRepository`2<UserAuth, UserAuthDetails> {
}
public class ServiceStack.Auth.InMemoryAuthRepository`2 : RedisAuthRepository`2<TUserAuth, TUserAuthDetails> {
    public static InMemoryAuthRepository`2<TUserAuth, TUserAuthDetails> Instance;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <Sets>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, string>> <Hashes>k__BackingField;
    internal List`1<IClearable> TrackedTypes;
    public Dictionary`2<string, HashSet`1<string>> Sets { get; public set; }
    public Dictionary`2<string, Dictionary`2<string, string>> Hashes { get; public set; }
    private static InMemoryAuthRepository`2();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, HashSet`1<string>> get_Sets();
    [CompilerGeneratedAttribute]
public void set_Sets(Dictionary`2<string, HashSet`1<string>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Dictionary`2<string, string>> get_Hashes();
    [CompilerGeneratedAttribute]
public void set_Hashes(Dictionary`2<string, Dictionary`2<string, string>> value);
}
public interface ServiceStack.Auth.IOAuthProvider {
    public IAuthHttpGateway AuthHttpGateway { get; public set; }
    public string ConsumerKey { get; public set; }
    public string ConsumerSecret { get; public set; }
    public string RequestTokenUrl { get; public set; }
    public string AuthorizeUrl { get; public set; }
    public string AccessTokenUrl { get; public set; }
    public abstract virtual IAuthHttpGateway get_AuthHttpGateway();
    public abstract virtual void set_AuthHttpGateway(IAuthHttpGateway value);
    public abstract virtual string get_ConsumerKey();
    public abstract virtual void set_ConsumerKey(string value);
    public abstract virtual string get_ConsumerSecret();
    public abstract virtual void set_ConsumerSecret(string value);
    public abstract virtual string get_RequestTokenUrl();
    public abstract virtual void set_RequestTokenUrl(string value);
    public abstract virtual string get_AuthorizeUrl();
    public abstract virtual void set_AuthorizeUrl(string value);
    public abstract virtual string get_AccessTokenUrl();
    public abstract virtual void set_AccessTokenUrl(string value);
}
internal interface ServiceStack.Auth.IPbkdf2Provider {
    public abstract virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
}
public interface ServiceStack.Auth.IQueryUserAuth {
    public abstract virtual List`1<IUserAuth> GetUserAuths(string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
    public abstract virtual List`1<IUserAuth> SearchUserAuths(string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
}
public interface ServiceStack.Auth.IQueryUserAuthAsync {
    public abstract virtual Task`1<List`1<IUserAuth>> GetUserAuthsAsync(string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public abstract virtual Task`1<List`1<IUserAuth>> SearchUserAuthsAsync(string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
}
public interface ServiceStack.Auth.IRedisClientFacade {
    public abstract virtual HashSet`1<string> GetAllItemsFromSet(string setId);
    public abstract virtual void Store(T item);
    public abstract virtual void DeleteById(string id);
    public abstract virtual string GetValueFromHash(string hashId, string key);
    public abstract virtual void SetEntryInHash(string hashId, string key, string value);
    public abstract virtual void RemoveEntryFromHash(string hashId, string key);
    public abstract virtual void AddItemToSet(string setId, string item);
    public abstract virtual ITypedRedisClientFacade`1<T> As();
}
public interface ServiceStack.Auth.IRedisClientFacadeAsync {
    public abstract virtual Task`1<HashSet`1<string>> GetAllItemsFromSetAsync(string setId, CancellationToken token);
    public abstract virtual Task StoreAsync(T item, CancellationToken token);
    public abstract virtual Task DeleteByIdAsync(string id, CancellationToken token);
    public abstract virtual Task`1<string> GetValueFromHashAsync(string hashId, string key, CancellationToken token);
    public abstract virtual Task SetEntryInHashAsync(string hashId, string key, string value, CancellationToken token);
    public abstract virtual Task RemoveEntryFromHashAsync(string hashId, string key, CancellationToken token);
    public abstract virtual Task AddItemToSetAsync(string setId, string item, CancellationToken token);
    public abstract virtual ITypedRedisClientFacadeAsync`1<T> AsAsync();
}
public interface ServiceStack.Auth.IRedisClientManagerFacade {
    public abstract virtual IRedisClientFacade GetClient();
    public abstract virtual Task`1<IRedisClientFacadeAsync> GetClientAsync(CancellationToken token);
}
public interface ServiceStack.Auth.ITypedRedisClientFacade`1 {
    public abstract virtual int GetNextSequence();
    public abstract virtual T GetById(object id);
    public abstract virtual List`1<T> GetByIds(IEnumerable ids);
    public abstract virtual void DeleteById(string id);
    public abstract virtual void DeleteByIds(IEnumerable ids);
    public abstract virtual List`1<T> GetAll(Nullable`1<int> skip, Nullable`1<int> take);
}
public interface ServiceStack.Auth.ITypedRedisClientFacadeAsync`1 {
    public abstract virtual Task`1<int> GetNextSequenceAsync(CancellationToken token);
    public abstract virtual Task`1<T> GetByIdAsync(object id, CancellationToken token);
    public abstract virtual Task`1<List`1<T>> GetByIdsAsync(IEnumerable ids, CancellationToken token);
    public abstract virtual Task DeleteByIdAsync(string id, CancellationToken token);
    public abstract virtual Task DeleteByIdsAsync(IEnumerable ids, CancellationToken token);
    public abstract virtual Task`1<List`1<T>> GetAllAsync(Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
}
public interface ServiceStack.Auth.IUserAuthRepository {
    public abstract virtual IUserAuth CreateUserAuth(IUserAuth newUser, string password);
    public abstract virtual IUserAuth UpdateUserAuth(IUserAuth existingUser, IUserAuth newUser);
    public abstract virtual IUserAuth UpdateUserAuth(IUserAuth existingUser, IUserAuth newUser, string password);
    public abstract virtual IUserAuth GetUserAuth(string userAuthId);
    public abstract virtual void DeleteUserAuth(string userAuthId);
}
public interface ServiceStack.Auth.IUserAuthRepositoryAsync {
    public abstract virtual Task`1<IUserAuth> CreateUserAuthAsync(IUserAuth newUser, string password, CancellationToken token);
    public abstract virtual Task`1<IUserAuth> UpdateUserAuthAsync(IUserAuth existingUser, IUserAuth newUser, CancellationToken token);
    public abstract virtual Task`1<IUserAuth> UpdateUserAuthAsync(IUserAuth existingUser, IUserAuth newUser, string password, CancellationToken token);
    public abstract virtual Task`1<IUserAuth> GetUserAuthAsync(string userAuthId, CancellationToken token);
    public abstract virtual Task DeleteUserAuthAsync(string userAuthId, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface ServiceStack.Auth.IUserResolver {
    public abstract virtual Task`1<ClaimsPrincipal> CreateClaimsPrincipalAsync(IRequest req, string userId, CancellationToken token);
    public abstract virtual Task`1<IAuthSession> CreateAuthSessionAsync(IRequest req, ClaimsPrincipal user, CancellationToken token);
}
[ObsoleteAttribute("Use IUserSessionSourceAsync")]
public interface ServiceStack.Auth.IUserSessionSource {
    public abstract virtual IAuthSession GetUserSession(string userAuthId);
}
public interface ServiceStack.Auth.IUserSessionSourceAsync {
    public abstract virtual Task`1<IAuthSession> GetUserSessionAsync(string userAuthId, CancellationToken token);
}
public interface ServiceStack.Auth.IWebSudoAuthSession {
    public DateTime AuthenticatedAt { get; public set; }
    public int AuthenticatedCount { get; public set; }
    public Nullable`1<DateTime> AuthenticatedWebSudoUntil { get; public set; }
    public abstract virtual DateTime get_AuthenticatedAt();
    public abstract virtual void set_AuthenticatedAt(DateTime value);
    public abstract virtual int get_AuthenticatedCount();
    public abstract virtual void set_AuthenticatedCount(int value);
    public abstract virtual Nullable`1<DateTime> get_AuthenticatedWebSudoUntil();
    public abstract virtual void set_AuthenticatedWebSudoUntil(Nullable`1<DateTime> value);
}
public class ServiceStack.Auth.JwtAuthProvider : JwtAuthProviderReader {
    [CompilerGeneratedAttribute]
private bool <SetBearerTokenOnAuthenticateResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <MaxProfileUrlSize>k__BackingField;
    public bool SetBearerTokenOnAuthenticateResponse { get; public set; }
    public static int MaxProfileUrlSize { get; public set; }
    public JwtAuthProvider(IAppSettings appSettings);
    private static JwtAuthProvider();
    [CompilerGeneratedAttribute]
public bool get_SetBearerTokenOnAuthenticateResponse();
    [CompilerGeneratedAttribute]
public void set_SetBearerTokenOnAuthenticateResponse(bool value);
    [CompilerGeneratedAttribute]
public static int get_MaxProfileUrlSize();
    [CompilerGeneratedAttribute]
public static void set_MaxProfileUrlSize(int value);
    public virtual void Init(IAppSettings appSettings);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProvider/<ExecuteAsync>d__11")]
public sealed virtual Task ExecuteAsync(AuthFilterContext authContext);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProvider/<ResultFilterAsync>d__12")]
public sealed virtual Task ResultFilterAsync(AuthResultContext authContext, CancellationToken token);
    public Func`2<Byte[], Byte[]> GetHashAlgorithm();
    public Func`2<Byte[], Byte[]> GetHashAlgorithm(IRequest req);
    public string CreateJwtBearerToken(IAuthSession session, IEnumerable`1<string> roles, IEnumerable`1<string> perms);
    public string CreateJwtBearerToken(IRequest req, IAuthSession session, IEnumerable`1<string> roles, IEnumerable`1<string> perms);
    public string CreateJwtRefreshToken(string userId, TimeSpan expireRefreshTokenIn);
    public string CreateJwtRefreshToken(IRequest req, string userId, TimeSpan expireRefreshTokenIn);
    protected virtual bool EnableRefreshToken();
    public static string CreateEncryptedJweToken(JsonObject jwtPayload, RSAParameters publicKey);
    public static string CreateJwt(JsonObject jwtHeader, JsonObject jwtPayload, Func`2<Byte[], Byte[]> signData);
    public static JsonObject CreateJwtHeader(string algorithm, string keyId);
    public static JsonObject CreateJwtPayload(IAuthSession session, string issuer, TimeSpan expireIn, IEnumerable`1<string> audiences, IEnumerable`1<string> roles, IEnumerable`1<string> permissions);
    public static void PrintDump(string jwt);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProvider/<CreateAccessTokenFromRefreshToken>d__25")]
public virtual Task`1<string> CreateAccessTokenFromRefreshToken(string refreshToken, IRequest req);
}
public class ServiceStack.Auth.JwtAuthProviderReader : AuthProvider {
    public static RsaKeyLengths UseRsaKeyLength;
    public static string Name;
    public static string Realm;
    public static HashSet`1<string> IgnoreForOperationTypes;
    public static Dictionary`2<string, Func`3<Byte[], Byte[], Byte[]>> HmacAlgorithms;
    public static Dictionary`2<string, Func`3<RSAParameters, Byte[], Byte[]>> RsaSignAlgorithms;
    public static Dictionary`2<string, Func`4<RSAParameters, Byte[], Byte[], bool>> RsaVerifyAlgorithms;
    [CompilerGeneratedAttribute]
private bool <RequireSecureConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<JsonObject, IAuthSession> <CreateHeaderFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<JsonObject, IAuthSession> <CreatePayloadFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<IAuthSession, JsonObject, IRequest> <PopulateSessionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IAuthSession, JsonObject, IRequest, Task> <PopulateSessionFilterAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncryptPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireHashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Audiences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Byte[]> <FallbackAuthKeys>k__BackingField;
    private Nullable`1<RSAParameters> _privateKey;
    [CompilerGeneratedAttribute]
private Nullable`1<RSAParameters> <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RSAParameters> <FallbackPublicKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RSAParameters> <FallbackPrivateKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpireTokensIn>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpireRefreshTokensIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<JsonObject, IRequest, bool> <ValidateToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<JsonObject, IRequest, bool> <ValidateRefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <InvalidateTokensIssuedBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <InvalidateRefreshTokensIssuedBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, String[]> <ServiceRoutes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInQueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveInvalidTokenCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeJwtInConvertSessionToTokenResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTokenCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DateTime, long> <ResolveUnixTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Dictionary`2<string, string>, string> <PreValidateJwtPayloadFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, string> <ResolveJwtId>k__BackingField;
    private long accessIdCounter;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, string> <ResolveRefreshJwtId>k__BackingField;
    private long refreshIdCounter;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <InvalidateJwtIds>k__BackingField;
    public string Type { get; }
    public bool RequireSecureConnection { get; public set; }
    public Action`2<JsonObject, IAuthSession> CreateHeaderFilter { get; public set; }
    public Action`2<JsonObject, IAuthSession> CreatePayloadFilter { get; public set; }
    public Action`3<IAuthSession, JsonObject, IRequest> PopulateSessionFilter { get; public set; }
    public Func`4<IAuthSession, JsonObject, IRequest, Task> PopulateSessionFilterAsync { get; public set; }
    public bool EncryptPayload { get; public set; }
    public string HashAlgorithm { get; public set; }
    public bool RequireHashAlgorithm { get; public set; }
    public string Issuer { get; public set; }
    public string Audience { get; public set; }
    public List`1<string> Audiences { get; public set; }
    public bool RequiresAudience { get; public set; }
    public string KeyId { get; public set; }
    public Byte[] AuthKey { get; public set; }
    unknown string AuthKeyBase64 {public set; }
    public List`1<Byte[]> FallbackAuthKeys { get; public set; }
    public Nullable`1<RSAParameters> PrivateKey { get; public set; }
    public string PrivateKeyXml { get; public set; }
    public Nullable`1<RSAParameters> PublicKey { get; public set; }
    public string PublicKeyXml { get; public set; }
    public List`1<RSAParameters> FallbackPublicKeys { get; public set; }
    public List`1<RSAParameters> FallbackPrivateKeys { get; public set; }
    public TimeSpan ExpireTokensIn { get; public set; }
    public TimeSpan ExpireRefreshTokensIn { get; public set; }
    unknown int ExpireTokensInDays {public set; }
    public Func`3<JsonObject, IRequest, bool> ValidateToken { get; public set; }
    public Func`3<JsonObject, IRequest, bool> ValidateRefreshToken { get; public set; }
    public Nullable`1<DateTime> InvalidateTokensIssuedBefore { get; public set; }
    public Nullable`1<DateTime> InvalidateRefreshTokensIssuedBefore { get; public set; }
    public Dictionary`2<Type, String[]> ServiceRoutes { get; public set; }
    public bool AllowInQueryString { get; public set; }
    public bool AllowInFormData { get; public set; }
    public bool RemoveInvalidTokenCookie { get; public set; }
    public bool IncludeJwtInConvertSessionToTokenResponse { get; public set; }
    public bool UseTokenCookie { get; public set; }
    public Func`2<DateTime, long> ResolveUnixTime { get; public set; }
    public Func`2<Dictionary`2<string, string>, string> PreValidateJwtPayloadFilter { get; public set; }
    public Func`2<IRequest, string> ResolveJwtId { get; public set; }
    public Func`2<IRequest, string> ResolveRefreshJwtId { get; public set; }
    public HashSet`1<string> InvalidateJwtIds { get; public set; }
    public JwtAuthProviderReader(IAppSettings appSettings);
    private static JwtAuthProviderReader();
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public bool get_RequireSecureConnection();
    [CompilerGeneratedAttribute]
public void set_RequireSecureConnection(bool value);
    [CompilerGeneratedAttribute]
public Action`2<JsonObject, IAuthSession> get_CreateHeaderFilter();
    [CompilerGeneratedAttribute]
public void set_CreateHeaderFilter(Action`2<JsonObject, IAuthSession> value);
    [CompilerGeneratedAttribute]
public Action`2<JsonObject, IAuthSession> get_CreatePayloadFilter();
    [CompilerGeneratedAttribute]
public void set_CreatePayloadFilter(Action`2<JsonObject, IAuthSession> value);
    [CompilerGeneratedAttribute]
public Action`3<IAuthSession, JsonObject, IRequest> get_PopulateSessionFilter();
    [CompilerGeneratedAttribute]
public void set_PopulateSessionFilter(Action`3<IAuthSession, JsonObject, IRequest> value);
    [CompilerGeneratedAttribute]
public Func`4<IAuthSession, JsonObject, IRequest, Task> get_PopulateSessionFilterAsync();
    [CompilerGeneratedAttribute]
public void set_PopulateSessionFilterAsync(Func`4<IAuthSession, JsonObject, IRequest, Task> value);
    [CompilerGeneratedAttribute]
public bool get_EncryptPayload();
    [CompilerGeneratedAttribute]
public void set_EncryptPayload(bool value);
    [CompilerGeneratedAttribute]
public string get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithm(string value);
    [CompilerGeneratedAttribute]
public bool get_RequireHashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_RequireHashAlgorithm(bool value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    public string get_Audience();
    public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Audiences();
    [CompilerGeneratedAttribute]
public void set_Audiences(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_RequiresAudience();
    [CompilerGeneratedAttribute]
public void set_RequiresAudience(bool value);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
public void set_KeyId(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthKey();
    [CompilerGeneratedAttribute]
public void set_AuthKey(Byte[] value);
    public void set_AuthKeyBase64(string value);
    public Byte[] GetAuthKey(IRequest req);
    [CompilerGeneratedAttribute]
public List`1<Byte[]> get_FallbackAuthKeys();
    [CompilerGeneratedAttribute]
public void set_FallbackAuthKeys(List`1<Byte[]> value);
    public List`1<Byte[]> GetFallbackAuthKeys(IRequest req);
    public Nullable`1<RSAParameters> GetPrivateKey(IRequest req);
    public Nullable`1<RSAParameters> get_PrivateKey();
    public void set_PrivateKey(Nullable`1<RSAParameters> value);
    public string get_PrivateKeyXml();
    public void set_PrivateKeyXml(string value);
    public Nullable`1<RSAParameters> GetPublicKey(IRequest req);
    [CompilerGeneratedAttribute]
public Nullable`1<RSAParameters> get_PublicKey();
    [CompilerGeneratedAttribute]
public void set_PublicKey(Nullable`1<RSAParameters> value);
    public string get_PublicKeyXml();
    public void set_PublicKeyXml(string value);
    [CompilerGeneratedAttribute]
public List`1<RSAParameters> get_FallbackPublicKeys();
    [CompilerGeneratedAttribute]
public void set_FallbackPublicKeys(List`1<RSAParameters> value);
    public List`1<RSAParameters> GetFallbackPublicKeys(IRequest req);
    [CompilerGeneratedAttribute]
public List`1<RSAParameters> get_FallbackPrivateKeys();
    [CompilerGeneratedAttribute]
public void set_FallbackPrivateKeys(List`1<RSAParameters> value);
    public List`1<RSAParameters> GetFallbackPrivateKeys(IRequest req);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpireTokensIn();
    [CompilerGeneratedAttribute]
public void set_ExpireTokensIn(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpireRefreshTokensIn();
    [CompilerGeneratedAttribute]
public void set_ExpireRefreshTokensIn(TimeSpan value);
    public void set_ExpireTokensInDays(int value);
    [CompilerGeneratedAttribute]
public Func`3<JsonObject, IRequest, bool> get_ValidateToken();
    [CompilerGeneratedAttribute]
public void set_ValidateToken(Func`3<JsonObject, IRequest, bool> value);
    [CompilerGeneratedAttribute]
public Func`3<JsonObject, IRequest, bool> get_ValidateRefreshToken();
    [CompilerGeneratedAttribute]
public void set_ValidateRefreshToken(Func`3<JsonObject, IRequest, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_InvalidateTokensIssuedBefore();
    [CompilerGeneratedAttribute]
public void set_InvalidateTokensIssuedBefore(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_InvalidateRefreshTokensIssuedBefore();
    [CompilerGeneratedAttribute]
public void set_InvalidateRefreshTokensIssuedBefore(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, String[]> get_ServiceRoutes();
    [CompilerGeneratedAttribute]
public void set_ServiceRoutes(Dictionary`2<Type, String[]> value);
    [CompilerGeneratedAttribute]
public bool get_AllowInQueryString();
    [CompilerGeneratedAttribute]
public void set_AllowInQueryString(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowInFormData();
    [CompilerGeneratedAttribute]
public void set_AllowInFormData(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveInvalidTokenCookie();
    [CompilerGeneratedAttribute]
public void set_RemoveInvalidTokenCookie(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeJwtInConvertSessionToTokenResponse();
    [CompilerGeneratedAttribute]
public void set_IncludeJwtInConvertSessionToTokenResponse(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseTokenCookie();
    [CompilerGeneratedAttribute]
public void set_UseTokenCookie(bool value);
    [CompilerGeneratedAttribute]
public Func`2<DateTime, long> get_ResolveUnixTime();
    [CompilerGeneratedAttribute]
public void set_ResolveUnixTime(Func`2<DateTime, long> value);
    public static long DefaultResolveUnixTime(DateTime dateTime);
    [CompilerGeneratedAttribute]
public Func`2<Dictionary`2<string, string>, string> get_PreValidateJwtPayloadFilter();
    [CompilerGeneratedAttribute]
public void set_PreValidateJwtPayloadFilter(Func`2<Dictionary`2<string, string>, string> value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, string> get_ResolveJwtId();
    [CompilerGeneratedAttribute]
public void set_ResolveJwtId(Func`2<IRequest, string> value);
    public string NextJwtId();
    public string LastJwtId();
    [CompilerGeneratedAttribute]
public Func`2<IRequest, string> get_ResolveRefreshJwtId();
    [CompilerGeneratedAttribute]
public void set_ResolveRefreshJwtId(Func`2<IRequest, string> value);
    public string NextRefreshJwtId();
    public string LastRefreshJwtId();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_InvalidateJwtIds();
    [CompilerGeneratedAttribute]
public void set_InvalidateJwtIds(HashSet`1<string> value);
    public virtual void Init(IAppSettings appSettings);
    public virtual string GetKeyId(IRequest req);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProviderReader/<AuthenticateAsync>d__180")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProviderReader/<PreAuthenticateAsync>d__181")]
public sealed virtual Task PreAuthenticateAsync(IRequest req, IResponse res);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProviderReader/<AuthenticateBearerTokenAsync>d__182")]
protected virtual Task`1<bool> AuthenticateBearerTokenAsync(IRequest req, IResponse res, string bearerToken);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProviderReader/<AuthenticateRefreshTokenAsync>d__183")]
protected virtual Task`1<bool> AuthenticateRefreshTokenAsync(IRequest req, IResponse res, string refreshToken);
    public virtual Task`1<string> CreateAccessTokenFromRefreshToken(string refreshToken, IRequest req);
    public bool IsJwtValid(string jwt);
    public bool IsJwtValid(IRequest req, string jwt);
    public bool IsJwtValid(IRequest req);
    public JsonObject GetValidJwtPayload(string jwt);
    public virtual JsonObject GetValidJwtPayload(IRequest req);
    public virtual JsonObject GetValidJwtPayload(IRequest req, string jwt);
    public static Dictionary`2<string, object> ExtractHeader(string jwt);
    public static Dictionary`2<string, object> ExtractPayload(string jwt);
    public static string Dump(string jwt);
    public virtual JsonObject GetVerifiedJwtPayload(string jwt);
    public virtual JsonObject GetVerifiedJwtPayload(IRequest req, String[] parts);
    public virtual JsonObject GetVerifiedJwePayload(string jwt);
    public virtual JsonObject GetVerifiedJwePayload(IRequest req, String[] parts);
    public virtual bool VerifyJwePayload(IRequest req, String[] parts, Byte[]& iv, Byte[]& cipherText, Byte[]& cryptKey);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProviderReader/<ConvertJwtToSessionAsync>d__199")]
public virtual Task`1<IAuthSession> ConvertJwtToSessionAsync(IRequest req, string jwt);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProviderReader/<CreateSessionFromPayloadAsync>d__200")]
public virtual Task`1<IAuthSession> CreateSessionFromPayloadAsync(IRequest req, JsonObject jwtPayload);
    [AsyncStateMachineAttribute("ServiceStack.Auth.JwtAuthProviderReader/<CreateSessionFromJwtAsync>d__201")]
public static Task`1<IAuthSession> CreateSessionFromJwtAsync(IRequest req);
    public void AssertJwtPayloadIsValid(JsonObject jwtPayload);
    public virtual string GetInvalidJwtPayloadError(JsonObject jwtPayload);
    public void AssertRefreshJwtPayloadIsValid(JsonObject jwtPayload);
    public virtual string GetInvalidRefreshJwtPayloadError(JsonObject jwtPayload);
    public virtual bool HasInvalidatedId(JsonObject jwtPayload);
    public virtual bool HasExpired(JsonObject jwtPayload);
    public virtual bool HasInvalidNotBefore(JsonObject jwtPayload);
    public virtual bool HasBeenInvalidated(JsonObject jwtPayload, long unixTime);
    public virtual bool HasInvalidAudience(JsonObject jwtPayload, String& audience);
    public virtual bool VerifyPayload(IRequest req, string algorithm, Byte[] bytesToSign, Byte[] sentSignatureBytes);
    public static Nullable`1<long> GetUnixTime(Dictionary`2<string, string> jwtPayload, string key);
    public virtual void Configure(IServiceCollection services, AuthFeature feature);
    public virtual void Register(IAppHost appHost, AuthFeature feature);
    public object AuthenticateResponseDecorator(AuthFilterContext ctx);
    public object RegisterResponseDecorator(RegisterFilterContext ctx);
    [CompilerGeneratedAttribute]
internal static AuthenticateResponse <AuthenticateAsync>g__toAuthResponse|180_0(IAuthSession jwtSession);
    [CompilerGeneratedAttribute]
private bool <HasInvalidAudience>b__210_0(string x);
}
[ExtensionAttribute]
internal static class ServiceStack.Auth.JwtAuthProviderUtils : object {
    [ExtensionAttribute]
internal static void SetAudience(JsonObject jwtPayload, List`1<string> audiences);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.JwtUtils : object {
    [ExtensionAttribute]
public static HttpResult ToTokenCookiesHttpResult(IHasBearerToken responseDto, IRequest req, string tokenCookie, DateTime expireTokenIn, string refreshTokenCookie, string referrerUrl);
    public static void NotifyJwtCookiesUsed(IHttpResult httpResult);
}
public static class ServiceStack.Auth.KeyDerivation : object {
    public static Byte[] Pbkdf2(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
}
public enum ServiceStack.Auth.KeyDerivationPrf : Enum {
    public int value__;
    public static KeyDerivationPrf HMACSHA1;
    public static KeyDerivationPrf HMACSHA256;
    public static KeyDerivationPrf HMACSHA512;
}
public class ServiceStack.Auth.LinkedInAuthProvider : OAuth2Provider {
    public static string Name;
    public static string Realm;
    public static string DefaultAuthorizeUrl;
    public static string DefaultAccessTokenUrl;
    public static string DefaultUserProfileUrl;
    public LinkedInAuthProvider(IAppSettings appSettings);
    [AsyncStateMachineAttribute("ServiceStack.Auth.LinkedInAuthProvider/<CreateAuthInfoAsync>d__6")]
protected virtual Task`1<Dictionary`2<string, string>> CreateAuthInfoAsync(string accessToken, CancellationToken token);
}
internal class ServiceStack.Auth.ManagedPbkdf2Provider : object {
    public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    private static KeyedHashAlgorithm PrfToManagedHmacAlgorithm(KeyDerivationPrf prf, string password);
    private static void XorBuffers(Byte[] src, Byte[] dest);
}
public class ServiceStack.Auth.MicrosoftGraphAuthProvider : OAuth2Provider {
    public static string Name;
    public static string Realm;
    public static string DefaultUserProfileUrl;
    public static Func`2<string, string> DefaultPhotoUrl;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <PhotoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SavePhoto>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SavePhotoSize>k__BackingField;
    private string tenant;
    public static Func`2<string, string> PhotoUrl { get; public set; }
    public bool SavePhoto { get; public set; }
    public string SavePhotoSize { get; public set; }
    public string Tenant { get; public set; }
    public string AppId { get; public set; }
    public string AppSecret { get; public set; }
    public MicrosoftGraphAuthProvider(IAppSettings appSettings);
    private static MicrosoftGraphAuthProvider();
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_PhotoUrl();
    [CompilerGeneratedAttribute]
public static void set_PhotoUrl(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_SavePhoto();
    [CompilerGeneratedAttribute]
public void set_SavePhoto(bool value);
    [CompilerGeneratedAttribute]
public string get_SavePhotoSize();
    [CompilerGeneratedAttribute]
public void set_SavePhotoSize(string value);
    public string get_Tenant();
    public void set_Tenant(string value);
    public string get_AppId();
    public void set_AppId(string value);
    public string get_AppSecret();
    public void set_AppSecret(string value);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MicrosoftGraphAuthProvider/<GetAccessTokenJsonAsync>d__27")]
protected virtual Task`1<string> GetAccessTokenJsonAsync(string code, AuthContext ctx, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MicrosoftGraphAuthProvider/<CreateAuthInfoAsync>d__28")]
protected virtual Task`1<Dictionary`2<string, string>> CreateAuthInfoAsync(string accessToken, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MicrosoftGraphAuthProvider/<OnAuthenticatedAsync>d__29")]
public virtual Task`1<IHttpResult> OnAuthenticatedAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MicrosoftGraphAuthProvider/<LoadUserOAuthProviderAsync>d__30")]
public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IHttpResult> <>n__0(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(IAuthSession authSession, IAuthTokens tokens);
}
public class ServiceStack.Auth.MultiAuthEvents : object {
    [CompilerGeneratedAttribute]
private List`1<IAuthEvents> <ChildEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IAuthEventsAsync> <ChildEventsAsync>k__BackingField;
    public List`1<IAuthEvents> ChildEvents { get; private set; }
    public List`1<IAuthEventsAsync> ChildEventsAsync { get; private set; }
    public MultiAuthEvents(IEnumerable`1<IAuthEvents> authEvents);
    [CompilerGeneratedAttribute]
public List`1<IAuthEvents> get_ChildEvents();
    [CompilerGeneratedAttribute]
private void set_ChildEvents(List`1<IAuthEvents> value);
    [CompilerGeneratedAttribute]
public List`1<IAuthEventsAsync> get_ChildEventsAsync();
    [CompilerGeneratedAttribute]
private void set_ChildEventsAsync(List`1<IAuthEventsAsync> value);
    public sealed virtual void OnCreated(IRequest httpReq, IAuthSession session);
    public sealed virtual void OnRegistered(IRequest httpReq, IAuthSession session, IServiceBase registrationService);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MultiAuthEvents/<OnRegisteredAsync>d__11")]
public sealed virtual Task OnRegisteredAsync(IRequest httpReq, IAuthSession session, IServiceBase registrationService, CancellationToken token);
    public sealed virtual IHttpResult Validate(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MultiAuthEvents/<ValidateAsync>d__13")]
public sealed virtual Task`1<IHttpResult> ValidateAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public sealed virtual void OnAuthenticated(IRequest httpReq, IAuthSession session, IServiceBase authService, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MultiAuthEvents/<OnAuthenticatedAsync>d__15")]
public sealed virtual Task OnAuthenticatedAsync(IRequest httpReq, IAuthSession session, IServiceBase authService, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public sealed virtual void OnLogout(IRequest httpReq, IAuthSession session, IServiceBase authService);
    [AsyncStateMachineAttribute("ServiceStack.Auth.MultiAuthEvents/<OnLogoutAsync>d__17")]
public sealed virtual Task OnLogoutAsync(IRequest httpReq, IAuthSession session, IServiceBase authService, CancellationToken token);
}
public abstract class ServiceStack.Auth.OAuth2Provider : OAuthProvider {
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IAuthSession, IAuthTokens, string> <ResolveUnknownDisplayName>k__BackingField;
    public String[] Scopes { get; public set; }
    public string ResponseMode { get; public set; }
    public Func`3<IAuthSession, IAuthTokens, string> ResolveUnknownDisplayName { get; public set; }
    public OAuth2Provider(IAppSettings appSettings, string authRealm, string oAuthProvider);
    public OAuth2Provider(IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName, string consumerSecretName);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public string get_ResponseMode();
    [CompilerGeneratedAttribute]
public void set_ResponseMode(string value);
    protected virtual void AssertValidState();
    protected virtual void AssertAccessTokenUrl();
    protected virtual void AssertAuthorizeUrl();
    [AsyncStateMachineAttribute("ServiceStack.Auth.OAuth2Provider/<AuthenticateAsync>d__13")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.OAuth2Provider/<GetAccessTokenJsonAsync>d__14")]
protected virtual Task`1<string> GetAccessTokenJsonAsync(string code, AuthContext ctx, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.OAuth2Provider/<AuthenticateWithAccessTokenAsync>d__15")]
protected virtual Task`1<object> AuthenticateWithAccessTokenAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, string accessToken, Dictionary`2<string, string> authInfo, CancellationToken token);
    protected abstract virtual Task`1<Dictionary`2<string, string>> CreateAuthInfoAsync(string accessToken, CancellationToken token);
    protected virtual string GetUserAuthName(IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    [CompilerGeneratedAttribute]
public Func`3<IAuthSession, IAuthTokens, string> get_ResolveUnknownDisplayName();
    [CompilerGeneratedAttribute]
public void set_ResolveUnknownDisplayName(Func`3<IAuthSession, IAuthTokens, string> value);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
}
public abstract class ServiceStack.Auth.OAuth2ProviderSync : OAuthProviderSync {
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMode>k__BackingField;
    public String[] Scopes { get; public set; }
    public string ResponseMode { get; public set; }
    public OAuth2ProviderSync(IAppSettings appSettings, string authRealm, string oAuthProvider);
    public OAuth2ProviderSync(IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName, string consumerSecretName);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public string get_ResponseMode();
    [CompilerGeneratedAttribute]
public void set_ResponseMode(string value);
    protected virtual void AssertValidState();
    protected virtual void AssertAccessTokenUrl();
    protected virtual void AssertAuthorizeUrl();
    public virtual object Authenticate(IServiceBase authService, IAuthSession session, Authenticate request);
    protected virtual string GetAccessTokenJson(string code);
    protected virtual object AuthenticateWithAccessToken(IServiceBase authService, IAuthSession session, IAuthTokens tokens, string accessToken, Dictionary`2<string, string> authInfo);
    protected abstract virtual Dictionary`2<string, string> CreateAuthInfo(string accessToken);
    protected virtual string GetUserAuthName(IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    protected virtual void LoadUserAuthInfo(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public virtual void LoadUserOAuthProvider(IAuthSession authSession, IAuthTokens tokens);
}
public class ServiceStack.Auth.OAuthAuthorizer : object {
    private static ILog log;
    public static bool OrderHeadersLexically;
    public string xAuthUsername;
    public string xAuthPassword;
    private IOAuthProvider provider;
    public string RequestToken;
    public string RequestTokenSecret;
    public string AuthorizationToken;
    public string AuthorizationVerifier;
    public string AccessToken;
    public string AccessTokenSecret;
    public Dictionary`2<string, string> AuthInfo;
    private static Random random;
    private static DateTime UnixBaseTime;
    public OAuthAuthorizer(IOAuthProvider provider);
    private static OAuthAuthorizer();
    private static string MakeNonce();
    private static string MakeTimestamp();
    private static string MakeSignature(string method, string base_uri, Dictionary`2<string, string> headers);
    private static string MakeSigningKey(string consumerSecret, string oauthTokenSecret);
    private static string MakeOAuthSignature(string compositeSigningKey, string signatureBase);
    private static string HeadersToOAuth(Dictionary`2<string, string> headers);
    public bool AcquireRequestToken();
    public bool AcquireAccessToken(string requestTokenSecret, string authorizationToken, string authorizationVerifier);
    public static string AuthorizeRequest(OAuthProvider provider, string oauthToken, string oauthTokenSecret, string method, Uri uri, string data);
    public static string AuthorizeRequest(string consumerKey, string consumerSecret, string oauthToken, string oauthTokenSecret, string method, Uri uri, string data);
    public static void AuthorizeTwitPic(OAuthProvider provider, HttpWebRequest wc, string oauthToken, string oauthTokenSecret);
}
public abstract class ServiceStack.Auth.OAuthProvider : AuthProvider {
    [CompilerGeneratedAttribute]
private Func`3<string, AuthContext, Task`1<bool>> <VerifyAccessTokenAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthHttpGateway <AuthHttpGateway>k__BackingField;
    protected string ConsumerKeyName;
    protected string ConsumerSecretName;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserProfileUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerifyTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuerSigningKeysUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthAuthorizer <OAuthUtils>k__BackingField;
    public string Type { get; }
    public Func`3<string, AuthContext, Task`1<bool>> VerifyAccessTokenAsync { get; public set; }
    public Dictionary`2<string, string> Meta { get; }
    public IAuthHttpGateway AuthHttpGateway { get; public set; }
    public string ConsumerKey { get; public set; }
    public string ConsumerSecret { get; public set; }
    public string RequestTokenUrl { get; public set; }
    public string AuthorizeUrl { get; public set; }
    public string AccessTokenUrl { get; public set; }
    public string UserProfileUrl { get; public set; }
    public string VerifyTokenUrl { get; public set; }
    public string IssuerSigningKeysUrl { get; public set; }
    public OAuthAuthorizer OAuthUtils { get; public set; }
    public OAuthProvider(IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName, string consumerSecretName);
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public Func`3<string, AuthContext, Task`1<bool>> get_VerifyAccessTokenAsync();
    [CompilerGeneratedAttribute]
public void set_VerifyAccessTokenAsync(Func`3<string, AuthContext, Task`1<bool>> value);
    public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual IAuthHttpGateway get_AuthHttpGateway();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthHttpGateway(IAuthHttpGateway value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConsumerSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestTokenUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestTokenUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthorizeUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthorizeUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AccessTokenUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccessTokenUrl(string value);
    [CompilerGeneratedAttribute]
public string get_UserProfileUrl();
    [CompilerGeneratedAttribute]
public void set_UserProfileUrl(string value);
    [CompilerGeneratedAttribute]
public string get_VerifyTokenUrl();
    [CompilerGeneratedAttribute]
public void set_VerifyTokenUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssuerSigningKeysUrl();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeysUrl(string value);
    [CompilerGeneratedAttribute]
public OAuthAuthorizer get_OAuthUtils();
    [CompilerGeneratedAttribute]
public void set_OAuthUtils(OAuthAuthorizer value);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    protected virtual void AssertValidState();
    protected virtual void AssertConsumerSecret();
    protected virtual void AssertConsumerKey();
    public abstract virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    protected IAuthTokens Init(IServiceBase authService, IAuthSession& session, Authenticate request);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession userSession, IAuthTokens tokens);
}
public abstract class ServiceStack.Auth.OAuthProviderSync : AuthProviderSync {
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <VerifyAccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthHttpGateway <AuthHttpGateway>k__BackingField;
    protected string ConsumerKeyName;
    protected string ConsumerSecretName;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserProfileUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerifyTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuerSigningKeysUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthAuthorizer <OAuthUtils>k__BackingField;
    public string Type { get; }
    public Func`2<string, bool> VerifyAccessToken { get; public set; }
    public Dictionary`2<string, string> Meta { get; }
    public IAuthHttpGateway AuthHttpGateway { get; public set; }
    public string ConsumerKey { get; public set; }
    public string ConsumerSecret { get; public set; }
    public string RequestTokenUrl { get; public set; }
    public string AuthorizeUrl { get; public set; }
    public string AccessTokenUrl { get; public set; }
    public string UserProfileUrl { get; public set; }
    public string VerifyTokenUrl { get; public set; }
    public string IssuerSigningKeysUrl { get; public set; }
    public OAuthAuthorizer OAuthUtils { get; public set; }
    public OAuthProviderSync(IAppSettings appSettings, string authRealm, string oAuthProvider);
    public OAuthProviderSync(IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName, string consumerSecretName);
    public virtual string get_Type();
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_VerifyAccessToken();
    [CompilerGeneratedAttribute]
public void set_VerifyAccessToken(Func`2<string, bool> value);
    public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual IAuthHttpGateway get_AuthHttpGateway();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthHttpGateway(IAuthHttpGateway value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConsumerSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestTokenUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestTokenUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthorizeUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthorizeUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AccessTokenUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccessTokenUrl(string value);
    [CompilerGeneratedAttribute]
public string get_UserProfileUrl();
    [CompilerGeneratedAttribute]
public void set_UserProfileUrl(string value);
    [CompilerGeneratedAttribute]
public string get_VerifyTokenUrl();
    [CompilerGeneratedAttribute]
public void set_VerifyTokenUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssuerSigningKeysUrl();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeysUrl(string value);
    [CompilerGeneratedAttribute]
public OAuthAuthorizer get_OAuthUtils();
    [CompilerGeneratedAttribute]
public void set_OAuthUtils(OAuthAuthorizer value);
    public virtual bool IsAuthorized(IAuthSession session, IAuthTokens tokens, Authenticate request);
    protected virtual void AssertValidState();
    protected virtual void AssertConsumerSecret();
    protected virtual void AssertConsumerKey();
    public abstract virtual object Authenticate(IServiceBase authService, IAuthSession session, Authenticate request);
    protected IAuthTokens Init(IServiceBase authService, IAuthSession& session, Authenticate request);
    public virtual void LoadUserOAuthProvider(IAuthSession userSession, IAuthTokens tokens);
}
public static class ServiceStack.Auth.OAuthUtils : object {
    public static string PercentEncode(string s);
}
public class ServiceStack.Auth.OdnoklassnikiAuthProvider : OAuthProvider {
    public static string Name;
    public static string Realm;
    public static string PreAuthUrl;
    public static string TokenUrl;
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    public string ApplicationId { get; public set; }
    public string PublicKey { get; public set; }
    public string SecretKey { get; public set; }
    private static OdnoklassnikiAuthProvider();
    public OdnoklassnikiAuthProvider(IAppSettings appSettings);
    [CompilerGeneratedAttribute]
public string get_ApplicationId();
    [CompilerGeneratedAttribute]
public void set_ApplicationId(string value);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public void set_PublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public void set_SecretKey(string value);
    [AsyncStateMachineAttribute("ServiceStack.Auth.OdnoklassnikiAuthProvider/<AuthenticateAsync>d__18")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.OdnoklassnikiAuthProvider/<LoadUserAuthInfoAsync>d__19")]
protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
}
public class ServiceStack.Auth.PasswordHasher : object {
    public static ILog Log;
    public static int DefaultIterationCount;
    [CompilerGeneratedAttribute]
private int <IterationCount>k__BackingField;
    private static RandomNumberGenerator _defaultRng;
    private RandomNumberGenerator _rng;
    public int IterationCount { get; }
    public byte Version { get; }
    public PasswordHasher(int iterationCount);
    private static PasswordHasher();
    [CompilerGeneratedAttribute]
public int get_IterationCount();
    public sealed virtual byte get_Version();
    public sealed virtual bool VerifyPassword(string hashedPassword, string providedPassword, Boolean& needsRehash);
    public virtual string HashPassword(string password);
    private static bool ByteArraysEqual(Byte[] a, Byte[] b);
    private Byte[] HashPasswordV3(string password, RandomNumberGenerator rng);
    private static Byte[] HashPasswordV3(string password, RandomNumberGenerator rng, KeyDerivationPrf prf, int iterCount, int saltSize, int numBytesRequested);
    private static UInt32 ReadNetworkByteOrder(Byte[] buffer, int offset);
    private static bool VerifyHashedPasswordV3(Byte[] hashedPassword, string password, Int32& iterCount);
    private static void WriteNetworkByteOrder(Byte[] buffer, int offset, UInt32 value);
}
public class ServiceStack.Auth.Pbkdf2DeriveKeyDelegate : MulticastDelegate {
    public Pbkdf2DeriveKeyDelegate(object object, IntPtr method);
    public virtual Byte[] Invoke(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    public virtual IAsyncResult BeginInvoke(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested, AsyncCallback callback, object object);
    public virtual Byte[] EndInvoke(IAsyncResult result);
}
public static class ServiceStack.Auth.Pbkdf2Provider : object {
    [CompilerGeneratedAttribute]
private static Pbkdf2DeriveKeyDelegate <DeriveKey>k__BackingField;
    public static Pbkdf2DeriveKeyDelegate DeriveKey { get; public set; }
    private static Pbkdf2Provider();
    [CompilerGeneratedAttribute]
public static Pbkdf2DeriveKeyDelegate get_DeriveKey();
    [CompilerGeneratedAttribute]
public static void set_DeriveKey(Pbkdf2DeriveKeyDelegate value);
}
public class ServiceStack.Auth.RedisAuthRepository : RedisAuthRepository`2<UserAuth, UserAuthDetails> {
    public RedisAuthRepository(IRedisClientsManager factory);
    public RedisAuthRepository(IRedisClientManagerFacade factory);
}
public class ServiceStack.Auth.RedisAuthRepository`2 : object {
    private IRedisClientManagerFacade factory;
    [CompilerGeneratedAttribute]
private string <NamespacePrefix>k__BackingField;
    public string NamespacePrefix { get; public set; }
    private string UsePrefix { get; }
    private string IndexUserNameToUserId { get; }
    private string IndexEmailToUserId { get; }
    public RedisAuthRepository`2(IRedisClientsManager factory);
    public RedisAuthRepository`2(IRedisClientManagerFacade factory);
    [CompilerGeneratedAttribute]
public string get_NamespacePrefix();
    [CompilerGeneratedAttribute]
public void set_NamespacePrefix(string value);
    private string get_UsePrefix();
    private string IndexUserAuthAndProviderIdsSet(long userAuthId);
    private string IndexProviderToUserIdHash(string provider);
    private string get_IndexUserNameToUserId();
    private string get_IndexEmailToUserId();
    private string IndexUserAuthAndApiKeyIdsSet(long userAuthId);
    private void AssertNoExistingUser(IRedisClientFacade redis, IUserAuth newUser, IUserAuth exceptForExistingUser);
    public virtual IUserAuth CreateUserAuth(IUserAuth newUser, string password);
    public virtual IUserAuth UpdateUserAuth(IUserAuth existingUser, IUserAuth newUser, string password);
    public virtual IUserAuth UpdateUserAuth(IUserAuth existingUser, IUserAuth newUser);
    public virtual IUserAuth GetUserAuthByUserName(string userNameOrEmail);
    private IUserAuth GetUserAuthByUserName(IRedisClientFacade redis, string userNameOrEmail);
    public virtual bool TryAuthenticate(string userName, string password, IUserAuth& userAuth);
    public sealed virtual bool TryAuthenticate(Dictionary`2<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, IUserAuth& userAuth);
    public virtual void LoadUserAuth(IAuthSession session, IAuthTokens tokens);
    private void LoadUserAuth(IAuthSession session, IUserAuth userAuth);
    public virtual void DeleteUserAuth(string userAuthId);
    private IUserAuth GetUserAuth(IRedisClientFacade redis, string userAuthId);
    public virtual IUserAuth GetUserAuth(string userAuthId);
    public virtual void SaveUserAuth(IAuthSession authSession);
    public sealed virtual void SaveUserAuth(IUserAuth userAuth);
    public virtual List`1<IUserAuthDetails> GetUserAuthDetails(string userAuthId);
    public virtual IUserAuth GetUserAuth(IAuthSession authSession, IAuthTokens tokens);
    private IUserAuth GetUserAuth(IRedisClientFacade redis, IAuthSession authSession, IAuthTokens tokens);
    public virtual IUserAuthDetails CreateOrMergeAuthSession(IAuthSession authSession, IAuthTokens tokens);
    private string GetAuthProviderByUserId(IRedisClientFacade redis, string provider, string userId);
    public virtual void InitApiKeySchema();
    public virtual bool ApiKeyExists(string apiKey);
    public virtual ApiKey GetApiKey(string apiKey);
    public virtual List`1<ApiKey> GetUserApiKeys(string userId);
    public virtual void StoreAll(IEnumerable`1<ApiKey> apiKeys);
    public virtual void Clear();
    public sealed virtual IUserAuth CreateUserAuth();
    public sealed virtual IUserAuthDetails CreateUserAuthDetails();
    public sealed virtual List`1<IUserAuth> GetUserAuths(string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
    public sealed virtual List`1<IUserAuth> SearchUserAuths(string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
    public virtual List`1<IUserAuth> QueryUserAuths(List`1<IUserAuth> results, string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<AssertNoExistingUserAsync>d__47")]
private Task AssertNoExistingUserAsync(IRedisClientFacadeAsync redis, IUserAuth newUser, IUserAuth exceptForExistingUser, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<CreateUserAuthAsync>d__48")]
public virtual Task`1<IUserAuth> CreateUserAuthAsync(IUserAuth newUser, string password, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<UpdateUserAuthAsync>d__49")]
public virtual Task`1<IUserAuth> UpdateUserAuthAsync(IUserAuth existingUser, IUserAuth newUser, string password, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<UpdateUserAuthAsync>d__50")]
public virtual Task`1<IUserAuth> UpdateUserAuthAsync(IUserAuth existingUser, IUserAuth newUser, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserAuthByUserNameAsync>d__51")]
public virtual Task`1<IUserAuth> GetUserAuthByUserNameAsync(string userNameOrEmail, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserAuthByUserNameAsync>d__52")]
private Task`1<IUserAuth> GetUserAuthByUserNameAsync(IRedisClientFacadeAsync redis, string userNameOrEmail, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<TryAuthenticateAsync>d__53")]
public virtual Task`1<IUserAuth> TryAuthenticateAsync(string userName, string password, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<TryAuthenticateAsync>d__54")]
public sealed virtual Task`1<IUserAuth> TryAuthenticateAsync(Dictionary`2<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<LoadUserAuthAsync>d__55")]
public virtual Task LoadUserAuthAsync(IAuthSession session, IAuthTokens tokens, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<LoadUserAuthAsync>d__56")]
private Task LoadUserAuthAsync(IAuthSession session, IUserAuth userAuth, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<DeleteUserAuthAsync>d__57")]
public virtual Task DeleteUserAuthAsync(string userAuthId, CancellationToken token);
    private Task`1<IUserAuth> GetUserAuthAsync(IRedisClientFacadeAsync redis, string userAuthId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserAuthAsync>d__59")]
public virtual Task`1<IUserAuth> GetUserAuthAsync(string userAuthId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<SaveUserAuthAsync>d__60")]
public virtual Task SaveUserAuthAsync(IAuthSession authSession, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<SaveUserAuthAsync>d__61")]
public sealed virtual Task SaveUserAuthAsync(IUserAuth userAuth, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserAuthDetailsAsync>d__62")]
public virtual Task`1<List`1<IUserAuthDetails>> GetUserAuthDetailsAsync(string userAuthId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserAuthAsync>d__63")]
public virtual Task`1<IUserAuth> GetUserAuthAsync(IAuthSession authSession, IAuthTokens tokens, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserAuthAsync>d__64")]
private Task`1<IUserAuth> GetUserAuthAsync(IRedisClientFacadeAsync redis, IAuthSession authSession, IAuthTokens tokens, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<CreateOrMergeAuthSessionAsync>d__65")]
public virtual Task`1<IUserAuthDetails> CreateOrMergeAuthSessionAsync(IAuthSession authSession, IAuthTokens tokens, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetAuthProviderByUserIdAsync>d__66")]
private Task`1<string> GetAuthProviderByUserIdAsync(IRedisClientFacadeAsync redis, string provider, string userId, CancellationToken token);
    public virtual Task InitApiKeySchemaAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<ApiKeyExistsAsync>d__68")]
public virtual Task`1<bool> ApiKeyExistsAsync(string apiKey, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetApiKeyAsync>d__69")]
public virtual Task`1<ApiKey> GetApiKeyAsync(string apiKey, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserApiKeysAsync>d__70")]
public virtual Task`1<List`1<ApiKey>> GetUserApiKeysAsync(string userId, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<StoreAllAsync>d__71")]
public virtual Task StoreAllAsync(IEnumerable`1<ApiKey> apiKeys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<ClearAsync>d__72")]
public virtual Task ClearAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<GetUserAuthsAsync>d__73")]
public sealed virtual Task`1<List`1<IUserAuth>> GetUserAuthsAsync(string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisAuthRepository`2/<SearchUserAuthsAsync>d__74")]
public sealed virtual Task`1<List`1<IUserAuth>> SearchUserAuthsAsync(string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
}
public class ServiceStack.Auth.RedisClientManagerFacade : object {
    private IRedisClientsManager redisManager;
    private IRedisClientsManagerAsync redisManagerAsync;
    public RedisClientManagerFacade(IRedisClientsManager redisManager);
    public sealed virtual IRedisClientFacade GetClient();
    public sealed virtual void Clear();
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisClientManagerFacade/<ClearAsync>d__6")]
public sealed virtual Task ClearAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RedisClientManagerFacade/<GetClientAsync>d__7")]
public sealed virtual Task`1<IRedisClientFacadeAsync> GetClientAsync(CancellationToken token);
}
[AuthenticateAttribute]
[DefaultRequestAttribute("ServiceStack.RegenerateApiKeys")]
public class ServiceStack.Auth.RegenerateApiKeysService : Service {
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegenerateApiKeysService/<Any>d__0")]
public Task`1<object> Any(RegenerateApiKeys request);
}
public class ServiceStack.Auth.RegisterFilterContext : object {
    [CompilerGeneratedAttribute]
private RegisterServiceBase <RegisterService>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private Register <Register>k__BackingField;
    [CompilerGeneratedAttribute]
private RegisterResponse <RegisterResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferrerUrl>k__BackingField;
    public RegisterServiceBase RegisterService { get; internal set; }
    public IRequest Request { get; }
    public IAuthSession Session { get; internal set; }
    public Register Register { get; internal set; }
    public RegisterResponse RegisterResponse { get; internal set; }
    public string ReferrerUrl { get; internal set; }
    [CompilerGeneratedAttribute]
public RegisterServiceBase get_RegisterService();
    [CompilerGeneratedAttribute]
internal void set_RegisterService(RegisterServiceBase value);
    public IRequest get_Request();
    [CompilerGeneratedAttribute]
public IAuthSession get_Session();
    [CompilerGeneratedAttribute]
internal void set_Session(IAuthSession value);
    [CompilerGeneratedAttribute]
public Register get_Register();
    [CompilerGeneratedAttribute]
internal void set_Register(Register value);
    [CompilerGeneratedAttribute]
public RegisterResponse get_RegisterResponse();
    [CompilerGeneratedAttribute]
internal void set_RegisterResponse(RegisterResponse value);
    [CompilerGeneratedAttribute]
public string get_ReferrerUrl();
    [CompilerGeneratedAttribute]
internal void set_ReferrerUrl(string value);
}
[ErrorViewAttribute("ErrorView")]
[DefaultRequestAttribute("ServiceStack.Register")]
public class ServiceStack.Auth.RegisterService : RegisterUserAuthServiceBase {
    [CompilerGeneratedAttribute]
private static ValidateFn <ValidateFn>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <AllowUpdates>k__BackingField;
    public static ValidateFn ValidateFn { get; public set; }
    public static bool AllowUpdates { get; public set; }
    [CompilerGeneratedAttribute]
public static ValidateFn get_ValidateFn();
    [CompilerGeneratedAttribute]
public static void set_ValidateFn(ValidateFn value);
    [CompilerGeneratedAttribute]
public static bool get_AllowUpdates();
    [CompilerGeneratedAttribute]
public static void set_AllowUpdates(bool value);
    [ObsoleteAttribute("Use PostAsync")]
public Task`1<object> PutAsync(Register request);
    [ObsoleteAttribute("Use PostAsync")]
public object Post(Register request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegisterService/<PostAsync>d__10")]
public Task`1<object> PostAsync(Register request);
    public object UpdateUserAuth(Register request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegisterService/<UpdateUserAuthAsync>d__12")]
public Task`1<object> UpdateUserAuthAsync(Register request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
public abstract class ServiceStack.Auth.RegisterServiceBase : Service {
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegisterServiceBase/<CreateRegisterResponse>d__0")]
protected virtual Task`1<object> CreateRegisterResponse(IAuthSession session, string userName, string password, Nullable`1<bool> autoLogin);
    private RegisterResponse ToRegisterResponse(AuthenticateResponse typedResponse, string userId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private T <>n__0();
}
public abstract class ServiceStack.Auth.RegisterUserAuthServiceBase : RegisterServiceBase {
    private IValidator`1<Register> registrationValidator;
    public IValidator`1<Register> RegistrationValidator { get; public set; }
    protected virtual IUserAuth ToUser(Register request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegisterUserAuthServiceBase/<UserExistsAsync>d__1")]
protected virtual Task`1<bool> UserExistsAsync(IAuthSession session);
    public IValidator`1<Register> get_RegistrationValidator();
    public void set_RegistrationValidator(IValidator`1<Register> value);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegisterUserAuthServiceBase/<ValidateAndThrowAsync>d__6")]
protected virtual Task ValidateAndThrowAsync(Register request);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegisterUserAuthServiceBase/<RegisterNewUserAsync>d__7")]
protected virtual Task RegisterNewUserAsync(IAuthSession session, IUserAuth user);
}
[IgnoreServicesAttribute]
public class ServiceStack.Auth.RegistrationValidator : AbstractValidator`1<Register> {
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegistrationValidator/<<-ctor>b__0_11>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <.ctor>b__0_11(string x, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.RegistrationValidator/<<-ctor>b__0_14>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <.ctor>b__0_14(string x, CancellationToken token);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
public class ServiceStack.Auth.SaltedHash : object {
    private HashAlgorithm HashProvider;
    private int SalthLength;
    public SaltedHash(HashAlgorithm HashAlgorithm, int theSaltLength);
    private Byte[] ComputeHash(Byte[] Data, Byte[] Salt);
    public void GetHashAndSalt(Byte[] Data, Byte[]& Hash, Byte[]& Salt);
    public sealed virtual void GetHashAndSaltString(string Data, String& Hash, String& Salt);
    public bool VerifyHash(Byte[] Data, Byte[] Hash, Byte[] Salt);
    public sealed virtual bool VerifyHashString(string Data, string Hash, string Salt);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.SocialExtensions : object {
    [ExtensionAttribute]
public static string ToGravatarUrl(string email, int size);
}
public class ServiceStack.Auth.SpotifyAuthProvider : OAuth2Provider {
    public static string Name;
    public static string Realm;
    private static string DefaultAuthorizeUrl;
    private static string DefaultAccessTokenUrl;
    private static string DefaultUserProfileUrl;
    public SpotifyAuthProvider(IAppSettings appSettings);
    private static SpotifyAuthProvider();
    [AsyncStateMachineAttribute("ServiceStack.Auth.SpotifyAuthProvider/<GetAccessTokenJsonAsync>d__6")]
protected virtual Task`1<string> GetAccessTokenJsonAsync(string code, AuthContext ctx, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.SpotifyAuthProvider/<CreateAuthInfoAsync>d__7")]
protected virtual Task`1<Dictionary`2<string, string>> CreateAuthInfoAsync(string accessToken, CancellationToken token);
}
public class ServiceStack.Auth.TwitterAuthProvider : OAuthProvider {
    public static string Name;
    public static string Realm;
    public static string DefaultAuthorizeUrl;
    [CompilerGeneratedAttribute]
private bool <RetrieveEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public bool RetrieveEmail { get; public set; }
    public Dictionary`2<string, string> Meta { get; }
    public TwitterAuthProvider(IAppSettings appSettings);
    private static TwitterAuthProvider();
    [CompilerGeneratedAttribute]
public bool get_RetrieveEmail();
    [CompilerGeneratedAttribute]
public void set_RetrieveEmail(bool value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [AsyncStateMachineAttribute("ServiceStack.Auth.TwitterAuthProvider/<AuthenticateAsync>d__11")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.TwitterAuthProvider/<LoadUserAuthInfoAsync>d__12")]
protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
}
[DefaultRequestAttribute("ServiceStack.UnAssignRoles")]
public class ServiceStack.Auth.UnAssignRolesService : Service {
    [AsyncStateMachineAttribute("ServiceStack.Auth.UnAssignRolesService/<Post>d__0")]
public Task`1<object> Post(UnAssignRoles request);
}
public class ServiceStack.Auth.UserAuth : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BirthDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BirthDateRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DigestHa1Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvalidLoginAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastLoginAttempt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LockedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecoveryToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [AutoIncrementAttribute]
public int Id { get; public set; }
    [IndexAttribute]
public string UserName { get; public set; }
    [IndexAttribute]
public string Email { get; public set; }
    public string PrimaryEmail { get; public set; }
    public string PhoneNumber { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string DisplayName { get; public set; }
    public string Company { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    public string BirthDateRaw { get; public set; }
    public string Address { get; public set; }
    public string Address2 { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string Country { get; public set; }
    public string Culture { get; public set; }
    public string FullName { get; public set; }
    public string Gender { get; public set; }
    public string Language { get; public set; }
    public string MailAddress { get; public set; }
    public string Nickname { get; public set; }
    public string PostalCode { get; public set; }
    public string TimeZone { get; public set; }
    public string Salt { get; public set; }
    public string PasswordHash { get; public set; }
    public string DigestHa1Hash { get; public set; }
    public List`1<string> Roles { get; public set; }
    public List`1<string> Permissions { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public int InvalidLoginAttempts { get; public set; }
    public Nullable`1<DateTime> LastLoginAttempt { get; public set; }
    public Nullable`1<DateTime> LockedDate { get; public set; }
    public string RecoveryToken { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
public virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryEmail();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryEmail(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FirstName();
    [CompilerGeneratedAttribute]
public virtual void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_LastName();
    [CompilerGeneratedAttribute]
public virtual void set_LastName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Company();
    [CompilerGeneratedAttribute]
public virtual void set_Company(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_BirthDate();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_BirthDateRaw();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDateRaw(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address();
    [CompilerGeneratedAttribute]
public virtual void set_Address(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address2();
    [CompilerGeneratedAttribute]
public virtual void set_Address2(string value);
    [CompilerGeneratedAttribute]
public virtual string get_City();
    [CompilerGeneratedAttribute]
public virtual void set_City(string value);
    [CompilerGeneratedAttribute]
public virtual string get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Country();
    [CompilerGeneratedAttribute]
public virtual void set_Country(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Culture();
    [CompilerGeneratedAttribute]
public virtual void set_Culture(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual void set_FullName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Gender();
    [CompilerGeneratedAttribute]
public virtual void set_Gender(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_MailAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Nickname();
    [CompilerGeneratedAttribute]
public virtual void set_Nickname(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PostalCode();
    [CompilerGeneratedAttribute]
public virtual void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TimeZone();
    [CompilerGeneratedAttribute]
public virtual void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Salt();
    [CompilerGeneratedAttribute]
public virtual void set_Salt(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PasswordHash();
    [CompilerGeneratedAttribute]
public virtual void set_PasswordHash(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DigestHa1Hash();
    [CompilerGeneratedAttribute]
public virtual void set_DigestHa1Hash(string value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public virtual void set_Permissions(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public virtual void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual int get_InvalidLoginAttempts();
    [CompilerGeneratedAttribute]
public virtual void set_InvalidLoginAttempts(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastLoginAttempt();
    [CompilerGeneratedAttribute]
public virtual void set_LastLoginAttempt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LockedDate();
    [CompilerGeneratedAttribute]
public virtual void set_LockedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_RecoveryToken();
    [CompilerGeneratedAttribute]
public virtual void set_RecoveryToken(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefIdStr();
    [CompilerGeneratedAttribute]
public virtual void set_RefIdStr(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
}
public class ServiceStack.Auth.UserAuthDetails : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BirthDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BirthDateRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RefreshTokenExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [AutoIncrementAttribute]
public int Id { get; public set; }
    public int UserAuthId { get; public set; }
    public string Provider { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string FullName { get; public set; }
    public string DisplayName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string PhoneNumber { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    public string BirthDateRaw { get; public set; }
    public string Address { get; public set; }
    public string Address2 { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string Country { get; public set; }
    public string Culture { get; public set; }
    public string Gender { get; public set; }
    public string Language { get; public set; }
    public string MailAddress { get; public set; }
    public string Nickname { get; public set; }
    public string PostalCode { get; public set; }
    public string TimeZone { get; public set; }
    public string RefreshToken { get; public set; }
    public Nullable`1<DateTime> RefreshTokenExpiry { get; public set; }
    public string RequestToken { get; public set; }
    public string RequestTokenSecret { get; public set; }
    public Dictionary`2<string, string> Items { get; public set; }
    public string AccessToken { get; public set; }
    public string AccessTokenSecret { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public virtual int get_UserAuthId();
    [CompilerGeneratedAttribute]
public virtual void set_UserAuthId(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Provider();
    [CompilerGeneratedAttribute]
public virtual void set_Provider(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual void set_FullName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FirstName();
    [CompilerGeneratedAttribute]
public virtual void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_LastName();
    [CompilerGeneratedAttribute]
public virtual void set_LastName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Company();
    [CompilerGeneratedAttribute]
public virtual void set_Company(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
public virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_BirthDate();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_BirthDateRaw();
    [CompilerGeneratedAttribute]
public virtual void set_BirthDateRaw(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address();
    [CompilerGeneratedAttribute]
public virtual void set_Address(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Address2();
    [CompilerGeneratedAttribute]
public virtual void set_Address2(string value);
    [CompilerGeneratedAttribute]
public virtual string get_City();
    [CompilerGeneratedAttribute]
public virtual void set_City(string value);
    [CompilerGeneratedAttribute]
public virtual string get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Country();
    [CompilerGeneratedAttribute]
public virtual void set_Country(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Culture();
    [CompilerGeneratedAttribute]
public virtual void set_Culture(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Gender();
    [CompilerGeneratedAttribute]
public virtual void set_Gender(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_MailAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Nickname();
    [CompilerGeneratedAttribute]
public virtual void set_Nickname(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PostalCode();
    [CompilerGeneratedAttribute]
public virtual void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TimeZone();
    [CompilerGeneratedAttribute]
public virtual void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RefreshToken();
    [CompilerGeneratedAttribute]
public virtual void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_RefreshTokenExpiry();
    [CompilerGeneratedAttribute]
public virtual void set_RefreshTokenExpiry(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_RequestToken();
    [CompilerGeneratedAttribute]
public virtual void set_RequestToken(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RequestTokenSecret();
    [CompilerGeneratedAttribute]
public virtual void set_RequestTokenSecret(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Items();
    [CompilerGeneratedAttribute]
public virtual void set_Items(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual string get_AccessToken();
    [CompilerGeneratedAttribute]
public virtual void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public virtual string get_AccessTokenSecret();
    [CompilerGeneratedAttribute]
public virtual void set_AccessTokenSecret(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public virtual void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefIdStr();
    [CompilerGeneratedAttribute]
public virtual void set_RefIdStr(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.UserAuthExtensions : object {
    [ExtensionAttribute]
public static void PopulateMissing(IUserAuthDetails instance, IAuthTokens tokens, bool overwriteReserved);
    [ExtensionAttribute]
public static void PopulateMissingExtended(IUserAuthDetailsExtended instance, IUserAuthDetailsExtended other, bool overwriteReserved);
    [ExtensionAttribute]
public static T Get(IMeta instance);
    [ExtensionAttribute]
public static bool TryGet(IMeta instance, T& value);
    [ExtensionAttribute]
public static T Set(IMeta instance, T value);
    [ExtensionAttribute]
public static AuthTokens ToAuthTokens(IAuthTokens from);
    [ExtensionAttribute]
public static void RecordSuccessfulLogin(IUserAuthRepository repo, IUserAuth userAuth);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthExtensions/<RecordSuccessfulLoginAsync>d__7")]
[ExtensionAttribute]
public static Task RecordSuccessfulLoginAsync(IUserAuthRepositoryAsync repo, IUserAuth userAuth, CancellationToken token);
    [ExtensionAttribute]
public static void RecordSuccessfulLogin(IUserAuthRepository repo, IUserAuth userAuth, bool rehashPassword, string password);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthExtensions/<RecordSuccessfulLoginAsync>d__9")]
[ExtensionAttribute]
public static Task RecordSuccessfulLoginAsync(IUserAuthRepositoryAsync repo, IUserAuth userAuth, bool rehashPassword, string password, CancellationToken token);
    [ExtensionAttribute]
public static void RecordInvalidLoginAttempt(IUserAuthRepository repo, IUserAuth userAuth);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthExtensions/<RecordInvalidLoginAttemptAsync>d__11")]
[ExtensionAttribute]
public static Task RecordInvalidLoginAttemptAsync(IUserAuthRepositoryAsync repo, IUserAuth userAuth, CancellationToken token);
    [ExtensionAttribute]
public static void PopulateFromSession(IAuthSession session, IAuthSession from);
    [ExtensionAttribute]
public static void PopulateFromMap(IAuthSession session, IEnumerable`1<KeyValuePair`2<string, string>> map);
    [ExtensionAttribute]
public static List`1<Claim> ConvertSessionToClaims(IAuthSession session, string issuer, string roleClaimType, string permissionClaimType);
    [CompilerGeneratedAttribute]
internal static void <ConvertSessionToClaims>g__addClaim|14_0(string type, string value, <>c__DisplayClass14_0& );
}
public class ServiceStack.Auth.UserAuthRepositoryAsyncManageRolesWrapper : UserAuthRepositoryAsyncWrapper {
    private IManageRoles manageRoles;
    public UserAuthRepositoryAsyncManageRolesWrapper(IAuthRepository authRepo);
    public sealed virtual Task`1<ICollection`1<string>> GetRolesAsync(string userAuthId, CancellationToken token);
    public sealed virtual Task`1<ICollection`1<string>> GetPermissionsAsync(string userAuthId, CancellationToken token);
    public sealed virtual Task`1<Tuple`2<ICollection`1<string>, ICollection`1<string>>> GetRolesAndPermissionsAsync(string userAuthId, CancellationToken token);
    public sealed virtual Task`1<bool> HasRoleAsync(string userAuthId, string role, CancellationToken token);
    public sealed virtual Task`1<bool> HasPermissionAsync(string userAuthId, string permission, CancellationToken token);
    public sealed virtual Task AssignRolesAsync(string userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
    public sealed virtual Task UnAssignRolesAsync(string userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
}
public class ServiceStack.Auth.UserAuthRepositoryAsyncWrapper : object {
    [CompilerGeneratedAttribute]
private IAuthRepository <AuthRepo>k__BackingField;
    public IAuthRepository AuthRepo { get; }
    public UserAuthRepositoryAsyncWrapper(IAuthRepository authRepo);
    [CompilerGeneratedAttribute]
public IAuthRepository get_AuthRepo();
    public sealed virtual Task LoadUserAuthAsync(IAuthSession session, IAuthTokens tokens, CancellationToken token);
    public sealed virtual Task SaveUserAuthAsync(IAuthSession authSession, CancellationToken token);
    public sealed virtual Task`1<List`1<IUserAuthDetails>> GetUserAuthDetailsAsync(string userAuthId, CancellationToken token);
    public sealed virtual Task`1<IUserAuthDetails> CreateOrMergeAuthSessionAsync(IAuthSession authSession, IAuthTokens tokens, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> GetUserAuthAsync(IAuthSession authSession, IAuthTokens tokens, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> GetUserAuthByUserNameAsync(string userNameOrEmail, CancellationToken token);
    public sealed virtual Task SaveUserAuthAsync(IUserAuth userAuth, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> TryAuthenticateAsync(string userName, string password, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> TryAuthenticateAsync(Dictionary`2<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> CreateUserAuthAsync(IUserAuth newUser, string password, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> UpdateUserAuthAsync(IUserAuth existingUser, IUserAuth newUser, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> UpdateUserAuthAsync(IUserAuth existingUser, IUserAuth newUser, string password, CancellationToken token);
    public sealed virtual Task`1<IUserAuth> GetUserAuthAsync(string userAuthId, CancellationToken token);
    public sealed virtual Task DeleteUserAuthAsync(string userAuthId, CancellationToken token);
    public sealed virtual void InitSchema();
    public sealed virtual IUserAuth CreateUserAuth();
    public sealed virtual IUserAuthDetails CreateUserAuthDetails();
    public sealed virtual Task`1<List`1<IUserAuth>> GetUserAuthsAsync(string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    public sealed virtual Task`1<List`1<IUserAuth>> SearchUserAuthsAsync(string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.UserAuthRepositoryAsyncWrapperExtensions : object {
    [ExtensionAttribute]
public static IAuthRepositoryAsync AsAsync(IAuthRepository authRepo);
    [ExtensionAttribute]
public static IAuthRepository UnwrapAuthRepository(IAuthRepositoryAsync asyncRepo);
    [ExtensionAttribute]
public static bool TryGetNativeQueryAuth(IAuthRepository syncRepo, IAuthRepositoryAsync asyncRepo, IQueryUserAuth& queryUserAuth, IQueryUserAuthAsync& queryUserAuthAsync);
}
[ExtensionAttribute]
public static class ServiceStack.Auth.UserAuthRepositoryExtensions : object {
    [ExtensionAttribute]
public static void AssignRoles(IAuthRepository userAuthRepo, IUserAuth userAuth, ICollection`1<string> roles, ICollection`1<string> permissions);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthRepositoryExtensions/<AssignRolesAsync>d__1")]
[ExtensionAttribute]
public static Task AssignRolesAsync(IAuthRepositoryAsync userAuthRepo, IUserAuth userAuth, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
    private static void AssignRolesInternal(IUserAuth userAuth, ICollection`1<string> roles, ICollection`1<string> permissions);
    [ExtensionAttribute]
public static void UnAssignRoles(IAuthRepository userAuthRepo, IUserAuth userAuth, ICollection`1<string> roles, ICollection`1<string> permissions);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthRepositoryExtensions/<UnAssignRolesAsync>d__4")]
[ExtensionAttribute]
public static Task UnAssignRolesAsync(IAuthRepositoryAsync userAuthRepo, IUserAuth userAuth, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
    [ExtensionAttribute]
public static ICollection`1<string> GetRoles(IAuthRepository userAuthRepo, IUserAuth userAuth);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthRepositoryExtensions/<GetRolesAsync>d__6")]
[ExtensionAttribute]
public static Task`1<ICollection`1<string>> GetRolesAsync(IAuthRepositoryAsync userAuthRepo, IUserAuth userAuth, CancellationToken token);
    [ExtensionAttribute]
public static ICollection`1<string> GetPermissions(IAuthRepository userAuthRepo, IUserAuth userAuth);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthRepositoryExtensions/<GetPermissionsAsync>d__8")]
[ExtensionAttribute]
public static Task`1<ICollection`1<string>> GetPermissionsAsync(IAuthRepositoryAsync userAuthRepo, IUserAuth userAuth, CancellationToken token);
    [ExtensionAttribute]
public static List`1<IAuthTokens> GetAuthTokens(IAuthRepository repo, string userAuthId);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthRepositoryExtensions/<GetAuthTokensAsync>d__10")]
[ExtensionAttribute]
public static Task`1<List`1<IAuthTokens>> GetAuthTokensAsync(IAuthRepositoryAsync repo, string userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static void PopulateSession(IAuthSession session, IUserAuth userAuth, IAuthRepository authRepo);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthRepositoryExtensions/<PopulateSessionAsync>d__12")]
[ExtensionAttribute]
public static Task PopulateSessionAsync(IAuthSession session, IUserAuth userAuth, IAuthRepositoryAsync authRepo, CancellationToken token);
    private static void PopulateSessionInternal(IAuthSession session, IUserAuth userAuth);
    [ExtensionAttribute]
public static List`1<IUserAuthDetails> GetUserAuthDetails(IAuthRepository authRepo, int userAuthId);
    [ExtensionAttribute]
public static Task`1<List`1<IUserAuthDetails>> GetUserAuthDetailsAsync(IAuthRepositoryAsync authRepo, int userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static IUserAuth GetUserAuth(IUserAuthRepository authRepo, int userAuthId);
    [ExtensionAttribute]
public static Task`1<IUserAuth> GetUserAuthAsync(IUserAuthRepositoryAsync authRepo, int userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static void DeleteUserAuth(IUserAuthRepository authRepo, int userAuthId);
    [ExtensionAttribute]
public static Task DeleteUserAuthAsync(IUserAuthRepositoryAsync authRepo, int userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static ICollection`1<string> GetRoles(IManageRoles manageRoles, int userAuthId);
    [ExtensionAttribute]
public static Task`1<ICollection`1<string>> GetRolesAsync(IManageRolesAsync manageRoles, int userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static ICollection`1<string> GetPermissions(IManageRoles manageRoles, int userAuthId);
    [ExtensionAttribute]
public static Task`1<ICollection`1<string>> GetPermissionsAsync(IManageRolesAsync manageRoles, int userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static bool HasRole(IManageRoles manageRoles, int userAuthId, string role);
    [ExtensionAttribute]
public static Task`1<bool> HasRoleAsync(IManageRolesAsync manageRoles, int userAuthId, string role, CancellationToken token);
    [ExtensionAttribute]
public static bool HasPermission(IManageRoles manageRoles, int userAuthId, string permission);
    [ExtensionAttribute]
public static Task`1<bool> HasPermissionAsync(IManageRolesAsync manageRoles, int userAuthId, string permission, CancellationToken token);
    [ExtensionAttribute]
public static void AssignRoles(IManageRoles manageRoles, int userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions);
    [ExtensionAttribute]
public static Task AssignRolesAsync(IManageRolesAsync manageRoles, int userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
    [ExtensionAttribute]
public static void UnAssignRoles(IManageRoles manageRoles, int userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions);
    [ExtensionAttribute]
public static Task UnAssignRolesAsync(IManageRolesAsync manageRoles, int userAuthId, ICollection`1<string> roles, ICollection`1<string> permissions, CancellationToken token);
    [ExtensionAttribute]
private static IUserAuthRepository AssertUserAuthRepository(IAuthRepository repo);
    [ExtensionAttribute]
private static IUserAuthRepositoryAsync AssertUserAuthRepositoryAsync(IAuthRepositoryAsync repo);
    [ExtensionAttribute]
public static IUserAuth CreateUserAuth(IAuthRepository authRepo, IUserAuth newUser, string password);
    [ExtensionAttribute]
public static Task`1<IUserAuth> CreateUserAuthAsync(IAuthRepositoryAsync authRepo, IUserAuth newUser, string password, CancellationToken token);
    [ExtensionAttribute]
public static IUserAuth UpdateUserAuth(IAuthRepository authRepo, IUserAuth existingUser, IUserAuth newUser);
    [ExtensionAttribute]
public static Task`1<IUserAuth> UpdateUserAuthAsync(IAuthRepositoryAsync authRepo, IUserAuth existingUser, IUserAuth newUser, CancellationToken token);
    [ExtensionAttribute]
public static IUserAuth UpdateUserAuth(IAuthRepository authRepo, IUserAuth existingUser, IUserAuth newUser, string password);
    [ExtensionAttribute]
public static Task`1<IUserAuth> UpdateUserAuthAsync(IAuthRepositoryAsync authRepo, IUserAuth existingUser, IUserAuth newUser, string password, CancellationToken token);
    [ExtensionAttribute]
public static IUserAuth GetUserAuth(IAuthRepository authRepo, string userAuthId);
    [ExtensionAttribute]
public static Task`1<IUserAuth> GetUserAuthAsync(IAuthRepositoryAsync authRepo, string userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static void DeleteUserAuth(IAuthRepository authRepo, string userAuthId);
    [ExtensionAttribute]
public static Task DeleteUserAuthAsync(IAuthRepositoryAsync authRepo, string userAuthId, CancellationToken token);
    [ExtensionAttribute]
private static IQueryUserAuth AssertQueryUserAuth(IAuthRepository repo);
    [ExtensionAttribute]
private static IQueryUserAuthAsync AssertQueryUserAuthAsync(IAuthRepositoryAsync repo);
    [ExtensionAttribute]
public static List`1<IUserAuth> GetUserAuths(IAuthRepository authRepo, string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
    [ExtensionAttribute]
public static Task`1<List`1<IUserAuth>> GetUserAuthsAsync(IAuthRepositoryAsync authRepo, string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    [ExtensionAttribute]
public static List`1<IUserAuth> SearchUserAuths(IAuthRepository authRepo, string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take);
    [ExtensionAttribute]
public static Task`1<List`1<IUserAuth>> SearchUserAuthsAsync(IAuthRepositoryAsync authRepo, string query, string orderBy, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.UserAuthRepositoryExtensions/<MergeRolesAsync>d__50")]
[ExtensionAttribute]
public static Task MergeRolesAsync(IAuthRepositoryAsync authRepo, string userAuthId, string source, ICollection`1<string> roles, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<Tuple`2<ICollection`1<string>, ICollection`1<string>>> GetLocalRolesAndPermissionsAsync(IManageRolesAsync manageRoles, string userAuthId, CancellationToken token);
    [ExtensionAttribute]
public static void ValidateNewUser(IUserAuth newUser);
    [ExtensionAttribute]
public static void ValidateNewUser(IUserAuth newUser, string password);
}
public class ServiceStack.Auth.UserAuthRole : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [AutoIncrementAttribute]
public int Id { get; public set; }
    public int UserAuthId { get; public set; }
    public string Role { get; public set; }
    public string Permission { get; public set; }
    public DateTime CreatedDate { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public Nullable`1<int> RefId { get; public set; }
    public string RefIdStr { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public virtual int get_UserAuthId();
    [CompilerGeneratedAttribute]
public virtual void set_UserAuthId(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Role();
    [CompilerGeneratedAttribute]
public virtual void set_Role(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Permission();
    [CompilerGeneratedAttribute]
public virtual void set_Permission(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public virtual void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefIdStr();
    [CompilerGeneratedAttribute]
public virtual void set_RefIdStr(string value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Auth.UserJwtTokens : object {
    [CompilerGeneratedAttribute]
private string <BearerToken>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IRequireRefreshToken <RefreshToken>k__BackingField;
    public string BearerToken { get; }
    [NullableAttribute("2")]
public IRequireRefreshToken RefreshToken { get; }
    public UserJwtTokens(string BearerToken, IRequireRefreshToken RefreshToken);
    [CompilerGeneratedAttribute]
public string get_BearerToken();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IRequireRefreshToken get_RefreshToken();
    public void Deconstruct(String& BearerToken, IRequireRefreshToken& RefreshToken);
}
public class ServiceStack.Auth.ValidateAsyncFn : MulticastDelegate {
    public ValidateAsyncFn(object object, IntPtr method);
    public virtual Task`1<object> Invoke(IServiceBase service, string httpMethod, object requestDto);
    public virtual IAsyncResult BeginInvoke(IServiceBase service, string httpMethod, object requestDto, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class ServiceStack.Auth.ValidateFn : MulticastDelegate {
    public ValidateFn(object object, IntPtr method);
    public virtual object Invoke(IServiceBase service, string httpMethod, object requestDto);
    public virtual IAsyncResult BeginInvoke(IServiceBase service, string httpMethod, object requestDto, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class ServiceStack.Auth.ValidateRequestAsyncFn : MulticastDelegate {
    public ValidateRequestAsyncFn(object object, IntPtr method);
    public virtual Task`1<object> Invoke(IRequest service, object requestDto);
    public virtual IAsyncResult BeginInvoke(IRequest service, object requestDto, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class ServiceStack.Auth.VkAuthProvider : OAuthProvider {
    public static string Name;
    public static string Realm;
    public static string PreAuthUrl;
    public static string TokenUrl;
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecureKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiVersion>k__BackingField;
    public string ApplicationId { get; public set; }
    public string SecureKey { get; public set; }
    public string Scope { get; public set; }
    public string ApiVersion { get; public set; }
    private static VkAuthProvider();
    public VkAuthProvider(IAppSettings appSettings);
    [CompilerGeneratedAttribute]
public string get_ApplicationId();
    [CompilerGeneratedAttribute]
public void set_ApplicationId(string value);
    [CompilerGeneratedAttribute]
public string get_SecureKey();
    [CompilerGeneratedAttribute]
public void set_SecureKey(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_ApiVersion();
    [CompilerGeneratedAttribute]
public void set_ApiVersion(string value);
    [AsyncStateMachineAttribute("ServiceStack.Auth.VkAuthProvider/<GetUserInfoAsync>d__22")]
private Task`1<JsonObject> GetUserInfoAsync(string accessToken, string accessTokenSecret);
    [AsyncStateMachineAttribute("ServiceStack.Auth.VkAuthProvider/<AuthenticateAsync>d__23")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    private string EnsureLatestCode(string code);
    [AsyncStateMachineAttribute("ServiceStack.Auth.VkAuthProvider/<LoadUserAuthInfoAsync>d__25")]
protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
    [AsyncStateMachineAttribute("ServiceStack.Auth.VkAuthProvider/<AuthenticateWithAccessTokenAsync>d__27")]
protected virtual Task`1<object> AuthenticateWithAccessTokenAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, string accessToken);
}
public class ServiceStack.Auth.YammerAuthProvider : OAuthProvider {
    public static string Name;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreAuthUrl>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public string PreAuthUrl { get; public set; }
    public YammerAuthProvider(IAppSettings appSettings);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_PreAuthUrl();
    [CompilerGeneratedAttribute]
public void set_PreAuthUrl(string value);
    [AsyncStateMachineAttribute("ServiceStack.Auth.YammerAuthProvider/<AuthenticateAsync>d__14")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.YammerAuthProvider/<LoadUserAuthInfoAsync>d__15")]
protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
}
public class ServiceStack.Auth.YandexAuthProvider : OAuthProvider {
    public static string Name;
    public static string Realm;
    public static string PreAuthUrl;
    public static string TokenUrl;
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationPassword>k__BackingField;
    public string ApplicationId { get; public set; }
    public string ApplicationPassword { get; public set; }
    private static YandexAuthProvider();
    public YandexAuthProvider(IAppSettings appSettings);
    [CompilerGeneratedAttribute]
public string get_ApplicationId();
    [CompilerGeneratedAttribute]
public void set_ApplicationId(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationPassword();
    [CompilerGeneratedAttribute]
public void set_ApplicationPassword(string value);
    [AsyncStateMachineAttribute("ServiceStack.Auth.YandexAuthProvider/<AuthenticateAsync>d__14")]
public virtual Task`1<object> AuthenticateAsync(IServiceBase authService, IAuthSession session, Authenticate request, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Auth.YandexAuthProvider/<LoadUserAuthInfoAsync>d__15")]
protected virtual Task LoadUserAuthInfoAsync(AuthUserSession userSession, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual Task LoadUserOAuthProviderAsync(IAuthSession authSession, IAuthTokens tokens);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.AuthenticateAttribute : RequestFilterAsyncAttribute {
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlRedirect>k__BackingField;
    public string Provider { get; public set; }
    public string HtmlRedirect { get; public set; }
    public AuthenticateAttribute(ApplyTo applyTo);
    public AuthenticateAttribute(string provider);
    public AuthenticateAttribute(ApplyTo applyTo, string provider);
    [CompilerGeneratedAttribute]
public string get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlRedirect();
    [CompilerGeneratedAttribute]
public void set_HtmlRedirect(string value);
    [AsyncStateMachineAttribute("ServiceStack.AuthenticateAttribute/<ExecuteAsync>d__12")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    [ObsoleteAttribute("Use AuthenticateAsync")]
public static bool Authenticate(IRequest req, object requestDto, IAuthSession session, IAuthProvider[] authProviders);
    [AsyncStateMachineAttribute("ServiceStack.AuthenticateAttribute/<AuthenticateAsync>d__14")]
public static Task`1<bool> AuthenticateAsync(IRequest req, object requestDto, IAuthSession session, IAuthProvider[] authProviders);
    [ObsoleteAttribute("Use AuthenticateAsync")]
public static void AssertAuthenticated(IRequest req, object requestDto, IAuthSession session, IAuthProvider[] authProviders);
    [AsyncStateMachineAttribute("ServiceStack.AuthenticateAttribute/<AssertAuthenticatedAsync>d__16")]
public static Task AssertAuthenticatedAsync(IRequest req, object requestDto, IAuthSession session, IAuthProvider[] authProviders);
    public static void ThrowNotAuthenticated(IRequest req);
    public static void ThrowInvalidRole(IRequest req);
    public static void ThrowInvalidPermission(IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.AuthenticateAttribute/<PreAuthenticateAsync>d__20")]
internal static Task PreAuthenticateAsync(IRequest req, IEnumerable`1<IAuthProvider> authProviders);
    protected virtual Task HandleShortCircuitedErrors(IRequest req, IResponse res, object requestDto, HttpStatusCode statusCode, string statusDescription);
    protected bool Equals(AuthenticateAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum ServiceStack.AuthenticationHeaderType : Enum {
    public int value__;
    public static AuthenticationHeaderType Basic;
    public static AuthenticationHeaderType Digest;
}
public class ServiceStack.AuthFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public Regex ValidUserNameRegEx;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <IsValidUsernameFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, IHttpResult> <OnAuthenticateValidate>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidateFn <ValidateFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IRequest, string> <ValidateRedirectLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IAuthSession> <SessionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SessionType>k__BackingField;
    private IAuthProvider[] authProviders;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, String[]> <ServiceRoutes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ServiceRoutesVerbs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPlugin> <RegisterPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IAuthEvents> <AuthEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`2<IServiceCollection, AuthFeature>> <OnConfigureServices>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<AuthFeature>> <OnBeforeInit>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<AuthFeature>> <OnAfterInit>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<AppMetadata>> <OnAppMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<IRequest, Task>> <OnLogoutAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlRedirectAccessDenied>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlRedirectReturnParam>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlRedirectLoginWith2Fa>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlRedirectLockout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlRedirectReturnPathOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlLogoutRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeAuthMetadataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateUniqueEmails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateUniqueUserNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteSessionCookiesOnLogout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateNewSessionCookiesOnAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateDigestAuthHashes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveUserNamesInLowerCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SessionExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <PermanentSessionExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLoginAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRolesInAuthenticateResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeOAuthTokensInAuthenticateResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDefaultLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private ImagesHandler <ProfileImages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InputInfo> <FormLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private MetaAuthProvider <AdminAuthSecretInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <AllowGetAuthenticateRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuthFilterContext, object> <AuthResponseDecorator>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<RegisterFilterContext, object> <RegisterResponseDecorator>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthSession <AuthSecretSession>k__BackingField;
    private bool hasRegistered;
    public string Id { get; public set; }
    public Func`2<string, bool> IsValidUsernameFn { get; public set; }
    public Func`2<IRequest, IHttpResult> OnAuthenticateValidate { get; public set; }
    public ValidateFn ValidateFn { get; public set; }
    public Action`2<IRequest, string> ValidateRedirectLinks { get; public set; }
    public Func`1<IAuthSession> SessionFactory { get; public set; }
    public Type SessionType { get; }
    public IAuthProvider[] AuthProviders { get; }
    public Dictionary`2<Type, String[]> ServiceRoutes { get; public set; }
    public Dictionary`2<string, string> ServiceRoutesVerbs { get; public set; }
    public List`1<IPlugin> RegisterPlugins { get; public set; }
    public bool HasSessionFeature { get; }
    public List`1<IAuthEvents> AuthEvents { get; public set; }
    public List`1<Action`2<IServiceCollection, AuthFeature>> OnConfigureServices { get; public set; }
    public List`1<Action`1<AuthFeature>> OnBeforeInit { get; public set; }
    public List`1<Action`1<AuthFeature>> OnAfterInit { get; public set; }
    public List`1<Action`1<AppMetadata>> OnAppMetadata { get; public set; }
    public List`1<Func`2<IRequest, Task>> OnLogoutAsync { get; public set; }
    public string HtmlRedirect { get; public set; }
    public string HtmlRedirectAccessDenied { get; public set; }
    public string HtmlRedirectReturnParam { get; public set; }
    public string HtmlRedirectLoginWith2Fa { get; public set; }
    public string HtmlRedirectLockout { get; public set; }
    public bool HtmlRedirectReturnPathOnly { get; public set; }
    public string HtmlLogoutRedirect { get; public set; }
    public bool IncludeAuthMetadataProvider { get; public set; }
    public bool ValidateUniqueEmails { get; public set; }
    public bool ValidateUniqueUserNames { get; public set; }
    public bool DeleteSessionCookiesOnLogout { get; public set; }
    public bool GenerateNewSessionCookiesOnAuthentication { get; public set; }
    public bool CreateDigestAuthHashes { get; public set; }
    public bool SaveUserNamesInLowerCase { get; public set; }
    public Nullable`1<TimeSpan> SessionExpiry { get; public set; }
    public Nullable`1<TimeSpan> PermanentSessionExpiry { get; public set; }
    public Nullable`1<int> MaxLoginAttempts { get; public set; }
    public bool IncludeRolesInAuthenticateResponse { get; public set; }
    public bool IncludeOAuthTokensInAuthenticateResponse { get; public set; }
    public bool IncludeDefaultLogin { get; public set; }
    public ImagesHandler ProfileImages { get; public set; }
    public List`1<InputInfo> FormLayout { get; public set; }
    public MetaAuthProvider AdminAuthSecretInfo { get; public set; }
    public Func`2<IRequest, bool> AllowGetAuthenticateRequests { get; public set; }
    public Func`2<AuthFilterContext, object> AuthResponseDecorator { get; public set; }
    public Func`2<RegisterFilterContext, object> RegisterResponseDecorator { get; public set; }
    unknown bool IncludeAssignRoleServices {public set; }
    unknown bool IncludeRegistrationService {public set; }
    public IAuthSession AuthSecretSession { get; public set; }
    public AuthFeature(Action`2<IServiceCollection, AuthFeature> configure);
    public AuthFeature(IAuthProvider authProvider);
    public AuthFeature(IEnumerable`1<IAuthProvider> authProviders);
    public AuthFeature(Func`1<IAuthSession> sessionFactory, IAuthProvider[] authProviders, string htmlRedirect);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_IsValidUsernameFn();
    [CompilerGeneratedAttribute]
public void set_IsValidUsernameFn(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, IHttpResult> get_OnAuthenticateValidate();
    [CompilerGeneratedAttribute]
public void set_OnAuthenticateValidate(Func`2<IRequest, IHttpResult> value);
    [CompilerGeneratedAttribute]
public ValidateFn get_ValidateFn();
    [CompilerGeneratedAttribute]
public void set_ValidateFn(ValidateFn value);
    [CompilerGeneratedAttribute]
public Action`2<IRequest, string> get_ValidateRedirectLinks();
    [CompilerGeneratedAttribute]
public void set_ValidateRedirectLinks(Action`2<IRequest, string> value);
    public static void AllowAllRedirects(IRequest req, string redirect);
    public static void NoExternalRedirects(IRequest req, string redirect);
    [CompilerGeneratedAttribute]
public Func`1<IAuthSession> get_SessionFactory();
    [CompilerGeneratedAttribute]
public void set_SessionFactory(Func`1<IAuthSession> value);
    [CompilerGeneratedAttribute]
public Type get_SessionType();
    public IAuthProvider[] get_AuthProviders();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, String[]> get_ServiceRoutes();
    [CompilerGeneratedAttribute]
public void set_ServiceRoutes(Dictionary`2<Type, String[]> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ServiceRoutesVerbs();
    [CompilerGeneratedAttribute]
public void set_ServiceRoutesVerbs(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<IPlugin> get_RegisterPlugins();
    [CompilerGeneratedAttribute]
public void set_RegisterPlugins(List`1<IPlugin> value);
    public bool get_HasSessionFeature();
    [CompilerGeneratedAttribute]
public List`1<IAuthEvents> get_AuthEvents();
    [CompilerGeneratedAttribute]
public void set_AuthEvents(List`1<IAuthEvents> value);
    [CompilerGeneratedAttribute]
public List`1<Action`2<IServiceCollection, AuthFeature>> get_OnConfigureServices();
    [CompilerGeneratedAttribute]
public void set_OnConfigureServices(List`1<Action`2<IServiceCollection, AuthFeature>> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<AuthFeature>> get_OnBeforeInit();
    [CompilerGeneratedAttribute]
public void set_OnBeforeInit(List`1<Action`1<AuthFeature>> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<AuthFeature>> get_OnAfterInit();
    [CompilerGeneratedAttribute]
public void set_OnAfterInit(List`1<Action`1<AuthFeature>> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<AppMetadata>> get_OnAppMetadata();
    [CompilerGeneratedAttribute]
public void set_OnAppMetadata(List`1<Action`1<AppMetadata>> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<IRequest, Task>> get_OnLogoutAsync();
    [CompilerGeneratedAttribute]
public void set_OnLogoutAsync(List`1<Func`2<IRequest, Task>> value);
    [CompilerGeneratedAttribute]
public string get_HtmlRedirect();
    [CompilerGeneratedAttribute]
public void set_HtmlRedirect(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlRedirectAccessDenied();
    [CompilerGeneratedAttribute]
public void set_HtmlRedirectAccessDenied(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlRedirectReturnParam();
    [CompilerGeneratedAttribute]
public void set_HtmlRedirectReturnParam(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlRedirectLoginWith2Fa();
    [CompilerGeneratedAttribute]
public void set_HtmlRedirectLoginWith2Fa(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlRedirectLockout();
    [CompilerGeneratedAttribute]
public void set_HtmlRedirectLockout(string value);
    [CompilerGeneratedAttribute]
public bool get_HtmlRedirectReturnPathOnly();
    [CompilerGeneratedAttribute]
public void set_HtmlRedirectReturnPathOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_HtmlLogoutRedirect();
    [CompilerGeneratedAttribute]
public void set_HtmlLogoutRedirect(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeAuthMetadataProvider();
    [CompilerGeneratedAttribute]
public void set_IncludeAuthMetadataProvider(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateUniqueEmails();
    [CompilerGeneratedAttribute]
public void set_ValidateUniqueEmails(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateUniqueUserNames();
    [CompilerGeneratedAttribute]
public void set_ValidateUniqueUserNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteSessionCookiesOnLogout();
    [CompilerGeneratedAttribute]
public void set_DeleteSessionCookiesOnLogout(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateNewSessionCookiesOnAuthentication();
    [CompilerGeneratedAttribute]
public void set_GenerateNewSessionCookiesOnAuthentication(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateDigestAuthHashes();
    [CompilerGeneratedAttribute]
public void set_CreateDigestAuthHashes(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveUserNamesInLowerCase();
    [CompilerGeneratedAttribute]
public void set_SaveUserNamesInLowerCase(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SessionExpiry();
    [CompilerGeneratedAttribute]
public void set_SessionExpiry(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_PermanentSessionExpiry();
    [CompilerGeneratedAttribute]
public void set_PermanentSessionExpiry(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLoginAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxLoginAttempts(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeRolesInAuthenticateResponse();
    [CompilerGeneratedAttribute]
public void set_IncludeRolesInAuthenticateResponse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeOAuthTokensInAuthenticateResponse();
    [CompilerGeneratedAttribute]
public void set_IncludeOAuthTokensInAuthenticateResponse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDefaultLogin();
    [CompilerGeneratedAttribute]
public void set_IncludeDefaultLogin(bool value);
    [CompilerGeneratedAttribute]
public ImagesHandler get_ProfileImages();
    [CompilerGeneratedAttribute]
public void set_ProfileImages(ImagesHandler value);
    [CompilerGeneratedAttribute]
public List`1<InputInfo> get_FormLayout();
    [CompilerGeneratedAttribute]
public void set_FormLayout(List`1<InputInfo> value);
    [CompilerGeneratedAttribute]
public MetaAuthProvider get_AdminAuthSecretInfo();
    [CompilerGeneratedAttribute]
public void set_AdminAuthSecretInfo(MetaAuthProvider value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_AllowGetAuthenticateRequests();
    [CompilerGeneratedAttribute]
public void set_AllowGetAuthenticateRequests(Func`2<IRequest, bool> value);
    public static bool DefaultAllowGetAuthenticateRequests(IRequest req);
    [CompilerGeneratedAttribute]
public Func`2<AuthFilterContext, object> get_AuthResponseDecorator();
    [CompilerGeneratedAttribute]
public void set_AuthResponseDecorator(Func`2<AuthFilterContext, object> value);
    [CompilerGeneratedAttribute]
public Func`2<RegisterFilterContext, object> get_RegisterResponseDecorator();
    [CompilerGeneratedAttribute]
public void set_RegisterResponseDecorator(Func`2<RegisterFilterContext, object> value);
    public void set_IncludeAssignRoleServices(bool value);
    public void set_IncludeRegistrationService(bool value);
    [ObsoleteAttribute("The /authenticate alias routes are no longer added by default")]
public AuthFeature RemoveAuthenticateAliasRoutes();
    public AuthFeature AddAuthenticateAliasRoutes();
    [CompilerGeneratedAttribute]
public IAuthSession get_AuthSecretSession();
    [CompilerGeneratedAttribute]
public void set_AuthSecretSession(IAuthSession value);
    public void RegisterAuthProvider(IAuthProvider authProvider);
    public void RegisterAuthProviders(IEnumerable`1<IAuthProvider> providers);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public MetaAuthProvider ToMetaAuthProvider(IAuthProvider authProvider);
    public sealed virtual void AfterPluginsLoaded(IAppHost appHost);
    public IAuthProvider GetAuthProvider(string provider);
    public JwtAuthProviderReader GetJwtAuthProviderReader();
    public JwtAuthProvider GetRequiredJwtAuthProvider();
    [CompilerGeneratedAttribute]
private void <set_IncludeAssignRoleServices>b__177_2(Type x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__189_1(IAuthInit x);
}
public class ServiceStack.AuthFeatureAccessDeniedHttpHandler : ForbiddenHttpHandler {
    [CompilerGeneratedAttribute]
private AuthFeature <feature>P;
    public AuthFeatureAccessDeniedHttpHandler(AuthFeature feature);
    public virtual Task ProcessRequestAsync(IRequest req, IResponse res, string operationName);
}
[ExtensionAttribute]
public static class ServiceStack.AuthFeatureExtensions : object {
    public static Regex ValidUserNameRegEx;
    private static AuthFeatureExtensions();
    [ExtensionAttribute]
public static string GetHtmlRedirect(AuthFeature feature);
    [ExtensionAttribute]
public static string GetHtmlRedirectUrl(AuthFeature feature, IRequest req);
    [ExtensionAttribute]
public static string GetHtmlRedirectUrl(AuthFeature feature, IRequest req, string redirectUrl, bool includeRedirectParam);
    [ExtensionAttribute]
public static void DoHtmlRedirect(AuthFeature feature, string redirectUrl, IRequest req, IResponse res, bool includeRedirectParam);
    private static string ToQueryString(NameValueCollection queryStringCollection);
    [ExtensionAttribute]
public static bool IsValidUsername(AuthFeature feature, string userName);
    [AsyncStateMachineAttribute("ServiceStack.AuthFeatureExtensions/<SuccessAuthResultAsync>d__7")]
[ExtensionAttribute]
public static Task`1<IHttpResult> SuccessAuthResultAsync(IHttpResult result, IServiceBase service, IAuthSession session);
    [ExtensionAttribute]
public static IHttpResult SuccessAuthResult(IHttpResult result, IServiceBase service, IAuthSession session);
    [ExtensionAttribute]
public static Task HandleFailedAuth(IAuthProvider authProvider, IAuthSession session, IRequest httpReq, IResponse httpRes);
}
public class ServiceStack.AuthFeatureUnauthorizedHttpHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private AuthFeature <feature>P;
    public bool IsReusable { get; }
    public AuthFeatureUnauthorizedHttpHandler(AuthFeature feature);
    public virtual Task ProcessRequestAsync(IRequest req, IResponse res, string operationName);
    public virtual bool get_IsReusable();
    public virtual bool RunAsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.AuthSecretValidator : TypeValidator {
    [CompilerGeneratedAttribute]
private static string <DefaultErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthSecretValidator <Instance>k__BackingField;
    public static string DefaultErrorMessage { get; public set; }
    public static AuthSecretValidator Instance { get; }
    private static AuthSecretValidator();
    [CompilerGeneratedAttribute]
public static string get_DefaultErrorMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultErrorMessage(string value);
    [CompilerGeneratedAttribute]
public static AuthSecretValidator get_Instance();
    public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
}
[ExtensionAttribute]
public static class ServiceStack.AuthSessionExtensions : object {
    [ExtensionAttribute]
public static void AddAuthToken(IAuthSession session, IAuthTokens tokens);
    [ExtensionAttribute]
public static List`1<IAuthTokens> GetAuthTokens(IAuthSession session);
    [ExtensionAttribute]
public static IAuthTokens GetAuthTokens(IAuthSession session, string provider);
    [ExtensionAttribute]
public static string GetProfileUrl(IAuthSession authSession, string defaultUrl);
    [ExtensionAttribute]
public static string GetSafeDisplayName(IAuthSession authSession);
    [AsyncStateMachineAttribute("ServiceStack.AuthSessionExtensions/<UpdateFromUserAuthRepoAsync>d__5")]
[ExtensionAttribute]
public static Task UpdateFromUserAuthRepoAsync(IAuthSession session, IRequest req, IAuthRepositoryAsync authRepo);
    [ExtensionAttribute]
public static void UpdateFromUserAuthRepo(IAuthSession session, IRequest req, IAuthRepository authRepo);
    [ExtensionAttribute]
public static Task`1<bool> HasAllRolesAsync(IAuthSession session, ICollection`1<string> requiredRoles, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasAllRolesAsync")]
internal static bool HasAllRoles(IAuthSession session, ICollection`1<string> requiredRoles, IAuthRepository authRepo, IRequest req);
    [ExtensionAttribute]
public static Task`1<bool> HasAnyRolesAsync(IAuthSession session, ICollection`1<string> roles, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasAnyRolesAsync")]
internal static bool HasAnyRoles(IAuthSession session, ICollection`1<string> roles, IAuthRepository authRepo, IRequest req);
    [ExtensionAttribute]
public static Task`1<bool> HasAllPermissionsAsync(IAuthSession session, ICollection`1<string> requiredPermissions, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasAllPermissionsAsync")]
internal static bool HasAllPermissions(IAuthSession session, ICollection`1<string> requiredPermissions, IAuthRepository authRepo, IRequest req);
    [ExtensionAttribute]
public static Task`1<bool> HasAnyPermissionsAsync(IAuthSession session, ICollection`1<string> permissions, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasAnyRolesAsync")]
internal static bool HasAnyPermissions(IAuthSession session, ICollection`1<string> permissions, IAuthRepository authRepo, IRequest req);
}
[DataContractAttribute]
public class ServiceStack.AuthUserSession : object {
    [CompilerGeneratedAttribute]
private string <ReferrerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAuthName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TwitterUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TwitterScreenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FacebookUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FacebookUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BirthDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BirthDateRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IAuthTokens> <ProviderOAuthAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Audiences>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rsa>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HomePhone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MobilePhone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Webpage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EmailConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PhoneNumberConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TwoFactorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecoveryToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefIdStr>k__BackingField;
    [DataMemberAttribute]
public string ReferrerUrl { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string UserAuthId { get; public set; }
    [DataMemberAttribute]
public string UserAuthName { get; public set; }
    [DataMemberAttribute]
public string UserName { get; public set; }
    [DataMemberAttribute]
public string TwitterUserId { get; public set; }
    [DataMemberAttribute]
public string TwitterScreenName { get; public set; }
    [DataMemberAttribute]
public string FacebookUserId { get; public set; }
    [DataMemberAttribute]
public string FacebookUserName { get; public set; }
    [DataMemberAttribute]
public string FirstName { get; public set; }
    [DataMemberAttribute]
public string LastName { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string Company { get; public set; }
    [DataMemberAttribute]
public string Email { get; public set; }
    [DataMemberAttribute]
public string PrimaryEmail { get; public set; }
    [DataMemberAttribute]
public string PhoneNumber { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> BirthDate { get; public set; }
    [DataMemberAttribute]
public string BirthDateRaw { get; public set; }
    [DataMemberAttribute]
public string Address { get; public set; }
    [DataMemberAttribute]
public string Address2 { get; public set; }
    [DataMemberAttribute]
public string City { get; public set; }
    [DataMemberAttribute]
public string State { get; public set; }
    [DataMemberAttribute]
public string Country { get; public set; }
    [DataMemberAttribute]
public string Culture { get; public set; }
    [DataMemberAttribute]
public string FullName { get; public set; }
    [DataMemberAttribute]
public string Gender { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public string MailAddress { get; public set; }
    [DataMemberAttribute]
public string Nickname { get; public set; }
    [DataMemberAttribute]
public string PostalCode { get; public set; }
    [DataMemberAttribute]
public string TimeZone { get; public set; }
    [DataMemberAttribute]
public string RequestTokenSecret { get; public set; }
    [DataMemberAttribute]
public DateTime CreatedAt { get; public set; }
    [DataMemberAttribute]
public DateTime LastModified { get; public set; }
    [DataMemberAttribute]
public List`1<string> Roles { get; public set; }
    [DataMemberAttribute]
public List`1<string> Permissions { get; public set; }
    [DataMemberAttribute]
public bool IsAuthenticated { get; public set; }
    [DataMemberAttribute]
public bool FromToken { get; public set; }
    [DataMemberAttribute]
public string ProfileUrl { get; public set; }
    [DataMemberAttribute]
public string Sequence { get; public set; }
    [DataMemberAttribute]
public long Tag { get; public set; }
    [DataMemberAttribute]
public string AuthProvider { get; public set; }
    [DataMemberAttribute]
public List`1<IAuthTokens> ProviderOAuthAccess { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [DataMemberAttribute]
public List`1<string> Audiences { get; public set; }
    [DataMemberAttribute]
public List`1<string> Scopes { get; public set; }
    [DataMemberAttribute]
public string Dns { get; public set; }
    [DataMemberAttribute]
public string Rsa { get; public set; }
    [DataMemberAttribute]
public string Sid { get; public set; }
    [DataMemberAttribute]
public string Hash { get; public set; }
    [DataMemberAttribute]
public string HomePhone { get; public set; }
    [DataMemberAttribute]
public string MobilePhone { get; public set; }
    [DataMemberAttribute]
public string Webpage { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> EmailConfirmed { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> PhoneNumberConfirmed { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> TwoFactorEnabled { get; public set; }
    [DataMemberAttribute]
public string SecurityStamp { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public string RecoveryToken { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> RefId { get; public set; }
    [DataMemberAttribute]
public string RefIdStr { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_ReferrerUrl();
    [CompilerGeneratedAttribute]
public virtual void set_ReferrerUrl(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserAuthId();
    [CompilerGeneratedAttribute]
public virtual void set_UserAuthId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserAuthName();
    [CompilerGeneratedAttribute]
public virtual void set_UserAuthName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_TwitterUserId();
    [CompilerGeneratedAttribute]
public void set_TwitterUserId(string value);
    [CompilerGeneratedAttribute]
public string get_TwitterScreenName();
    [CompilerGeneratedAttribute]
public void set_TwitterScreenName(string value);
    [CompilerGeneratedAttribute]
public string get_FacebookUserId();
    [CompilerGeneratedAttribute]
public void set_FacebookUserId(string value);
    [CompilerGeneratedAttribute]
public string get_FacebookUserName();
    [CompilerGeneratedAttribute]
public void set_FacebookUserName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FirstName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LastName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Company();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Company(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Email();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PrimaryEmail();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PrimaryEmail(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_BirthDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BirthDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BirthDateRaw();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BirthDateRaw(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Address(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Address2(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_City();
    [CompilerGeneratedAttribute]
public sealed virtual void set_City(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void set_State(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Country();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Country(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Gender();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Gender(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_MailAddress();
    [CompilerGeneratedAttribute]
public void set_MailAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Nickname();
    [CompilerGeneratedAttribute]
public void set_Nickname(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PostalCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public string get_RequestTokenSecret();
    [CompilerGeneratedAttribute]
public void set_RequestTokenSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastModified();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastModified(DateTime value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public virtual void set_Permissions(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public virtual void set_IsAuthenticated(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_FromToken();
    [CompilerGeneratedAttribute]
public virtual void set_FromToken(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ProfileUrl();
    [CompilerGeneratedAttribute]
public virtual void set_ProfileUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Sequence();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Sequence(string value);
    [CompilerGeneratedAttribute]
public long get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(long value);
    [CompilerGeneratedAttribute]
public virtual string get_AuthProvider();
    [CompilerGeneratedAttribute]
public virtual void set_AuthProvider(string value);
    [CompilerGeneratedAttribute]
public virtual List`1<IAuthTokens> get_ProviderOAuthAccess();
    [CompilerGeneratedAttribute]
public virtual void set_ProviderOAuthAccess(List`1<IAuthTokens> value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public virtual void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_Audiences();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Audiences(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scopes(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Dns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dns(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Rsa();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Rsa(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Sid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Sid(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Hash();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Hash(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HomePhone();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HomePhone(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MobilePhone();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MobilePhone(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Webpage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Webpage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EmailConfirmed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmailConfirmed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_PhoneNumberConfirmed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PhoneNumberConfirmed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_TwoFactorEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TwoFactorEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SecurityStamp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityStamp(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RecoveryToken();
    [CompilerGeneratedAttribute]
public virtual void set_RecoveryToken(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RefId();
    [CompilerGeneratedAttribute]
public virtual void set_RefId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_RefIdStr();
    [CompilerGeneratedAttribute]
public virtual void set_RefIdStr(string value);
    public virtual bool IsAuthorized(string provider);
    public virtual bool HasPermission(string permission, IAuthRepository authRepo);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<HasPermissionAsync>d__247")]
public virtual Task`1<bool> HasPermissionAsync(string permission, IAuthRepositoryAsync authRepo, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<HasAllRolesAsync>d__248")]
public virtual Task`1<bool> HasAllRolesAsync(ICollection`1<string> requiredRoles, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<HasAnyRolesAsync>d__249")]
public virtual Task`1<bool> HasAnyRolesAsync(ICollection`1<string> roles, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<HasAllPermissionsAsync>d__250")]
public virtual Task`1<bool> HasAllPermissionsAsync(ICollection`1<string> requiredPermissions, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<HasAnyPermissionsAsync>d__251")]
public virtual Task`1<bool> HasAnyPermissionsAsync(ICollection`1<string> permissions, IAuthRepositoryAsync authRepo, IRequest req, CancellationToken token);
    public virtual bool HasRole(string role, IAuthRepository authRepo);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<HasRoleAsync>d__253")]
public virtual Task`1<bool> HasRoleAsync(string role, IAuthRepositoryAsync authRepo, CancellationToken token);
    public virtual ICollection`1<string> GetRoles(IAuthRepository authRepo);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<GetRolesAsync>d__255")]
public virtual Task`1<ICollection`1<string>> GetRolesAsync(IAuthRepositoryAsync authRepo, CancellationToken token);
    public virtual ICollection`1<string> GetPermissions(IAuthRepository authRepo);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<GetPermissionsAsync>d__257")]
public virtual Task`1<ICollection`1<string>> GetPermissionsAsync(IAuthRepositoryAsync authRepo, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.AuthUserSession/<AsClaimsAsync>d__258")]
public virtual Task`1<List`1<Claim>> AsClaimsAsync(IAuthRepositoryAsync authRepo);
    public virtual void OnLoad(IRequest httpReq);
    public virtual void OnCreated(IRequest httpReq);
    public virtual void OnRegistered(IRequest httpReq, IAuthSession session, IServiceBase service);
    public virtual Task OnRegisteredAsync(IRequest httpReq, IAuthSession session, IServiceBase service, CancellationToken token);
    public virtual void OnAuthenticated(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public virtual Task OnAuthenticatedAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual void OnLogout(IServiceBase authService);
    public virtual Task OnLogoutAsync(IServiceBase authService, CancellationToken token);
    public virtual IHttpResult Validate(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
    public virtual Task`1<IHttpResult> ValidateAsync(IServiceBase authService, IAuthSession session, IAuthTokens tokens, Dictionary`2<string, string> authInfo, CancellationToken token);
    public virtual void PopulateFromClaims(IRequest httpReq, ClaimsPrincipal principal);
    public virtual HashSet`1<string> GetUserAttributes(IRequest request);
}
[ExtensionAttribute]
public static class ServiceStack.AutoCrudOperation : object {
    public static string Query;
    public static string Create;
    public static string Update;
    public static string Patch;
    public static string Delete;
    public static string Save;
    private static Type[] AutoQueryInterfaceTypes;
    private static AutoCrudOperation();
    public static bool IsOperation(string operation);
    public static string ToHttpMethod(string operation);
    public static string ToHttpMethod(Type requestType);
    public static string ToOperation(Type genericDef);
    public static Nullable`1<AutoQueryDtoType> GetAutoQueryGenericDefTypes(Type requestType, Type opType);
    public static Nullable`1<AutoQueryDtoType> GetAutoQueryDtoType(Type requestType);
    public static Nullable`1<AutoQueryDtoType> GetAutoCrudDtoType(Type requestType);
    public static AutoQueryDtoType AssertAutoCrudDtoType(Type requestType);
    public static Type GetModelType(Type requestType);
    public static Type GetViewModelType(Type requestType, Type responseType);
    [ExtensionAttribute]
public static bool HasNamedConnection(MetadataType type, string name);
    [ExtensionAttribute]
public static bool IsRequestDto(MetadataType type);
}
public class ServiceStack.AutoQueryData : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableUntypedQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OrderByPrimaryKeyOnLimitQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredRoleForRawSqlFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoreProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, QueryDataField> <StartsWithConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, QueryDataField> <EndsWithConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryDataFilterDelegate <GlobalQueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, QueryDataFilterDelegate> <QueryFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<QueryDataFilterContext>> <ResponseFilters>k__BackingField;
    private static Dictionary`2<Type, ITypedQueryData> TypedQueries;
    private Dictionary`2<Type, GenericAutoQueryData> genericAutoQueryCache;
    public Nullable`1<int> MaxLimit { get; public set; }
    public bool IncludeTotal { get; public set; }
    public bool EnableUntypedQueries { get; public set; }
    public bool OrderByPrimaryKeyOnLimitQuery { get; public set; }
    public string RequiredRoleForRawSqlFilters { get; public set; }
    public HashSet`1<string> IgnoreProperties { get; public set; }
    public Dictionary`2<string, QueryDataField> StartsWithConventions { get; public set; }
    public Dictionary`2<string, QueryDataField> EndsWithConventions { get; public set; }
    public QueryDataFilterDelegate GlobalQueryFilter { get; public set; }
    public Dictionary`2<Type, QueryDataFilterDelegate> QueryFilters { get; public set; }
    public List`1<Action`1<QueryDataFilterContext>> ResponseFilters { get; public set; }
    private static AutoQueryData();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxLimit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeTotal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeTotal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableUntypedQueries();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableUntypedQueries(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OrderByPrimaryKeyOnLimitQuery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OrderByPrimaryKeyOnLimitQuery(bool value);
    [CompilerGeneratedAttribute]
public string get_RequiredRoleForRawSqlFilters();
    [CompilerGeneratedAttribute]
public void set_RequiredRoleForRawSqlFilters(string value);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_IgnoreProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreProperties(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, QueryDataField> get_StartsWithConventions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartsWithConventions(Dictionary`2<string, QueryDataField> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, QueryDataField> get_EndsWithConventions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndsWithConventions(Dictionary`2<string, QueryDataField> value);
    [CompilerGeneratedAttribute]
public QueryDataFilterDelegate get_GlobalQueryFilter();
    [CompilerGeneratedAttribute]
public void set_GlobalQueryFilter(QueryDataFilterDelegate value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, QueryDataFilterDelegate> get_QueryFilters();
    [CompilerGeneratedAttribute]
public void set_QueryFilters(Dictionary`2<Type, QueryDataFilterDelegate> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<QueryDataFilterContext>> get_ResponseFilters();
    [CompilerGeneratedAttribute]
public void set_ResponseFilters(List`1<Action`1<QueryDataFilterContext>> value);
    public sealed virtual Type GetFromType(Type requestDtoType);
    public sealed virtual ITypedQueryData GetTypedQuery(Type requestDtoType, Type fromType);
    public DataQuery`1<From> Filter(IDataQuery q, IQueryData dto, IRequest req);
    public IDataQuery Filter(IDataQuery q, IQueryData dto, IRequest req);
    public QueryResponse`1<Into> ResponseFilter(IQueryDataSource db, QueryResponse`1<Into> response, DataQuery`1<From> expr, IQueryData dto);
    public sealed virtual IQueryDataSource GetDb(QueryDataContext ctx);
    public sealed virtual IQueryDataSource GetDb(QueryDataContext ctx, Type type);
    public sealed virtual DataQuery`1<From> CreateQuery(IQueryData`1<From> dto, Dictionary`2<string, string> dynamicParams, IRequest req, IQueryDataSource db);
    public sealed virtual QueryResponse`1<From> Execute(IQueryData`1<From> dto, DataQuery`1<From> q, IRequest req, IQueryDataSource db);
    public sealed virtual DataQuery`1<From> CreateQuery(IQueryData`2<From, Into> dto, Dictionary`2<string, string> dynamicParams, IRequest req, IQueryDataSource db);
    public sealed virtual QueryResponse`1<Into> Execute(IQueryData`2<From, Into> dto, DataQuery`1<From> q, IRequest req, IQueryDataSource db);
    public sealed virtual IDataQuery CreateQuery(IQueryData requestDto, Dictionary`2<string, string> dynamicParams, IRequest req, IQueryDataSource db);
    public sealed virtual QueryDataContext CreateContext(IQueryData requestDto, Dictionary`2<string, string> dynamicParams, IRequest req);
    public sealed virtual IQueryResponse Execute(IQueryData request, IDataQuery q, IQueryDataSource db);
}
[ExtensionAttribute]
public static class ServiceStack.AutoQueryDataExtensions : object {
    [ExtensionAttribute]
public static QueryDataField ToField(QueryDataFieldAttribute attr, PropertyInfo pi, AutoQueryDataFeature feature);
    [ExtensionAttribute]
public static DataQuery`1<From> CreateQuery(IAutoQueryData autoQuery, IQueryData`1<From> model, IRequest request, IQueryDataSource db);
    [ExtensionAttribute]
public static DataQuery`1<From> CreateQuery(IAutoQueryData autoQuery, IQueryData`2<From, Into> model, IRequest request, IQueryDataSource db);
    [ExtensionAttribute]
public static IQueryDataSource`1<T> MemorySource(QueryDataContext ctx, IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IQueryDataSource`1<T> MemorySource(QueryDataContext ctx, Func`1<IEnumerable`1<T>> sourceFn, ICacheClient cache, Nullable`1<TimeSpan> expiresIn, string cacheKey);
    [ExtensionAttribute]
public static void And(IDataQuery q, Expression`1<Func`2<T, object>> fieldExpr, QueryCondition condition, object value);
    [ExtensionAttribute]
public static void Or(IDataQuery q, Expression`1<Func`2<T, object>> fieldExpr, QueryCondition condition, object value);
    [ExtensionAttribute]
public static T WithAudit(T row, IRequest req, Nullable`1<DateTime> date);
    [ExtensionAttribute]
public static T WithAudit(T row, string by, Nullable`1<DateTime> date);
}
public class ServiceStack.AutoQueryDataFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoreProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Assembly> <LoadFromAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableUntypedQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAutoQueryViewer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OrderByPrimaryKeyOnPagedQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <AutoQueryServiceBaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryDataFilterDelegate <GlobalQueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, QueryDataFilterDelegate> <QueryFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<QueryDataFilterContext>> <ResponseFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<TypeBuilder, MethodBuilder, Type> <GenerateServiceFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, Func`2<QueryDataContext, IQueryDataSource>> <DataSources>k__BackingField;
    public List`1<QueryCondition> Conditions;
    public Dictionary`2<string, QueryCondition> ConditionsAliases;
    public Dictionary`2<string, string> ImplicitConventions;
    public Dictionary`2<string, QueryDataField> StartsWithConventions;
    public Dictionary`2<string, QueryDataField> EndsWithConventions;
    public string Id { get; public set; }
    public int Priority { get; }
    public HashSet`1<string> IgnoreProperties { get; public set; }
    public HashSet`1<Assembly> LoadFromAssemblies { get; public set; }
    public Nullable`1<int> MaxLimit { get; public set; }
    public bool IncludeTotal { get; public set; }
    public bool EnableUntypedQueries { get; public set; }
    public bool EnableAutoQueryViewer { get; public set; }
    public bool OrderByPrimaryKeyOnPagedQuery { get; public set; }
    public Type AutoQueryServiceBaseType { get; public set; }
    public QueryDataFilterDelegate GlobalQueryFilter { get; public set; }
    public Dictionary`2<Type, QueryDataFilterDelegate> QueryFilters { get; public set; }
    public List`1<Action`1<QueryDataFilterContext>> ResponseFilters { get; public set; }
    public Action`3<TypeBuilder, MethodBuilder, Type> GenerateServiceFilter { get; public set; }
    public ConcurrentDictionary`2<Type, Func`2<QueryDataContext, IQueryDataSource>> DataSources { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoreProperties();
    [CompilerGeneratedAttribute]
public void set_IgnoreProperties(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Assembly> get_LoadFromAssemblies();
    [CompilerGeneratedAttribute]
public void set_LoadFromAssemblies(HashSet`1<Assembly> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLimit();
    [CompilerGeneratedAttribute]
public void set_MaxLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTotal();
    [CompilerGeneratedAttribute]
public void set_IncludeTotal(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableUntypedQueries();
    [CompilerGeneratedAttribute]
public void set_EnableUntypedQueries(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAutoQueryViewer();
    [CompilerGeneratedAttribute]
public void set_EnableAutoQueryViewer(bool value);
    [CompilerGeneratedAttribute]
public bool get_OrderByPrimaryKeyOnPagedQuery();
    [CompilerGeneratedAttribute]
public void set_OrderByPrimaryKeyOnPagedQuery(bool value);
    [CompilerGeneratedAttribute]
public Type get_AutoQueryServiceBaseType();
    [CompilerGeneratedAttribute]
public void set_AutoQueryServiceBaseType(Type value);
    [CompilerGeneratedAttribute]
public QueryDataFilterDelegate get_GlobalQueryFilter();
    [CompilerGeneratedAttribute]
public void set_GlobalQueryFilter(QueryDataFilterDelegate value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, QueryDataFilterDelegate> get_QueryFilters();
    [CompilerGeneratedAttribute]
public void set_QueryFilters(Dictionary`2<Type, QueryDataFilterDelegate> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<QueryDataFilterContext>> get_ResponseFilters();
    [CompilerGeneratedAttribute]
public void set_ResponseFilters(List`1<Action`1<QueryDataFilterContext>> value);
    [CompilerGeneratedAttribute]
public Action`3<TypeBuilder, MethodBuilder, Type> get_GenerateServiceFilter();
    [CompilerGeneratedAttribute]
public void set_GenerateServiceFilter(Action`3<TypeBuilder, MethodBuilder, Type> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<Type, Func`2<QueryDataContext, IQueryDataSource>> get_DataSources();
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void AfterConfigure(IServiceCollection services);
    private Type GenerateMissingServices(IEnumerable`1<Type> missingRequestTypes);
    public AutoQueryDataFeature RegisterQueryFilter(Action`3<IDataQuery, Request, IRequest> filterFn);
    public AutoQueryDataFeature AddDataSource(Func`2<QueryDataContext, IQueryDataSource`1<T>> dataSourceFactory);
    public AutoQueryDataFeature AddDataSource(Func`2<QueryDataContext, IQueryDataSource> dataSourceFactory);
    public AutoQueryDataFeature AddDataSource(Type type, Func`2<QueryDataContext, IQueryDataSource> dataSourceFactory);
    public Func`2<QueryDataContext, IQueryDataSource> GetDataSource(Type type);
    public void IncludeAggregates(QueryDataFilterContext ctx);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IAutoQueryData <Configure>b__63_0(IServiceProvider c);
    [CompilerGeneratedAttribute]
private void <Register>b__64_0(Assembly x);
    [CompilerGeneratedAttribute]
private void <Register>b__64_1(Assembly x);
}
public abstract class ServiceStack.AutoQueryDataServiceBase : Service {
    [CompilerGeneratedAttribute]
private IAutoQueryData <autoQuery>P;
    protected AutoQueryDataServiceBase(IAutoQueryData autoQuery);
    public virtual object Exec(IQueryData`1<From> dto);
    public virtual object Exec(IQueryData`2<From, Into> dto);
}
[ExtensionAttribute]
public static class ServiceStack.AutoQueryDataServiceSource : object {
    [ExtensionAttribute]
public static QueryDataSource`1<T> ServiceSource(QueryDataContext ctx, object requestDto, ICacheClient cache, Nullable`1<TimeSpan> expiresIn, string cacheKey);
    [ExtensionAttribute]
internal static QueryDataSource`1<T> CacheMemorySource(MemoryDataSource`1<T> response, ICacheClient cache, string cacheKey, Nullable`1<TimeSpan> expiresIn);
    [ExtensionAttribute]
public static MemoryDataSource`1<T> ServiceSource(QueryDataContext ctx, object requestDto);
    public static IEnumerable`1<T> GetResults(object response);
    public static List`1<object> GetResults(object response);
}
public class ServiceStack.AutoQueryDtoType : ValueType {
    [CompilerGeneratedAttribute]
private Type <GenericType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <GenericDefType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelIntoType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    public Type GenericType { get; }
    public Type GenericDefType { get; }
    public Type ModelType { get; }
    public Type ModelIntoType { get; }
    public string Operation { get; }
    public bool IsRead { get; }
    public bool IsWrite { get; }
    public AutoQueryDtoType(Type genericType, Type genericDefType);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_GenericType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_GenericDefType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_ModelType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_ModelIntoType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Operation();
    public bool get_IsRead();
    public bool get_IsWrite();
}
[ExcludeMetadataAttribute]
[RouteAttribute("/autoquery/metadata")]
public class ServiceStack.AutoQueryMetadata : object {
}
public class ServiceStack.AutoQueryMetadataFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoQueryViewerConfig <AutoQueryViewerConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<AutoQueryMetadataResponse> <MetadataFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ExportTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLimit>k__BackingField;
    public string Id { get; public set; }
    public AutoQueryViewerConfig AutoQueryViewerConfig { get; public set; }
    public Action`1<AutoQueryMetadataResponse> MetadataFilter { get; public set; }
    public List`1<Type> ExportTypes { get; public set; }
    public Nullable`1<int> MaxLimit { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public AutoQueryViewerConfig get_AutoQueryViewerConfig();
    [CompilerGeneratedAttribute]
public void set_AutoQueryViewerConfig(AutoQueryViewerConfig value);
    [CompilerGeneratedAttribute]
public Action`1<AutoQueryMetadataResponse> get_MetadataFilter();
    [CompilerGeneratedAttribute]
public void set_MetadataFilter(Action`1<AutoQueryMetadataResponse> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ExportTypes();
    [CompilerGeneratedAttribute]
public void set_ExportTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLimit();
    [CompilerGeneratedAttribute]
public void set_MaxLimit(Nullable`1<int> value);
    internal static AutoQueryViewerConfig GetAutoQueryViewerConfigDefaults();
    public sealed virtual void Register(IAppHost appHost);
}
public class ServiceStack.AutoQueryMetadataResponse : object {
    [CompilerGeneratedAttribute]
private AutoQueryViewerConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoQueryViewerUserInfo <UserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AutoQueryOperation> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MetadataType> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public AutoQueryViewerConfig Config { get; public set; }
    public AutoQueryViewerUserInfo UserInfo { get; public set; }
    public List`1<AutoQueryOperation> Operations { get; public set; }
    public List`1<MetadataType> Types { get; public set; }
    public ResponseStatus ResponseStatus { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public AutoQueryViewerConfig get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(AutoQueryViewerConfig value);
    [CompilerGeneratedAttribute]
public AutoQueryViewerUserInfo get_UserInfo();
    [CompilerGeneratedAttribute]
public void set_UserInfo(AutoQueryViewerUserInfo value);
    [CompilerGeneratedAttribute]
public List`1<AutoQueryOperation> get_Operations();
    [CompilerGeneratedAttribute]
public void set_Operations(List`1<AutoQueryOperation> value);
    [CompilerGeneratedAttribute]
public List`1<MetadataType> get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(List`1<MetadataType> value);
    [CompilerGeneratedAttribute]
public ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public void set_ResponseStatus(ResponseStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
[RestrictAttribute]
public class ServiceStack.AutoQueryMetadataService : Service {
    [CompilerGeneratedAttribute]
private INativeTypesMetadata <metadata>P;
    public AutoQueryMetadataService(INativeTypesMetadata metadata);
    [AsyncStateMachineAttribute("ServiceStack.AutoQueryMetadataService/<AnyAsync>d__2")]
public Task`1<object> AnyAsync(AutoQueryMetadata request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
public class ServiceStack.AutoQueryOperation : object {
    [CompilerGeneratedAttribute]
private string <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MetadataRoute> <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public string Request { get; public set; }
    public List`1<MetadataRoute> Routes { get; public set; }
    public string From { get; public set; }
    public string To { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(string value);
    [CompilerGeneratedAttribute]
public List`1<MetadataRoute> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<MetadataRoute> value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
public class ServiceStack.AutoQueryViewerConfig : AppInfo {
    [CompilerGeneratedAttribute]
private string <ServiceBaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Formats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyShowAnnotatedServices>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AutoQueryConvention> <ImplicitConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSearchField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSearchType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSearchText>k__BackingField;
    public string ServiceBaseUrl { get; public set; }
    public String[] Formats { get; public set; }
    public Nullable`1<int> MaxLimit { get; public set; }
    public bool IsPublic { get; public set; }
    public bool OnlyShowAnnotatedServices { get; public set; }
    public List`1<AutoQueryConvention> ImplicitConventions { get; public set; }
    public string DefaultSearchField { get; public set; }
    public string DefaultSearchType { get; public set; }
    public string DefaultSearchText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceBaseUrl();
    [CompilerGeneratedAttribute]
public void set_ServiceBaseUrl(string value);
    [CompilerGeneratedAttribute]
public String[] get_Formats();
    [CompilerGeneratedAttribute]
public void set_Formats(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLimit();
    [CompilerGeneratedAttribute]
public void set_MaxLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IsPublic();
    [CompilerGeneratedAttribute]
public void set_IsPublic(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnlyShowAnnotatedServices();
    [CompilerGeneratedAttribute]
public void set_OnlyShowAnnotatedServices(bool value);
    [CompilerGeneratedAttribute]
public List`1<AutoQueryConvention> get_ImplicitConventions();
    [CompilerGeneratedAttribute]
public void set_ImplicitConventions(List`1<AutoQueryConvention> value);
    [CompilerGeneratedAttribute]
public string get_DefaultSearchField();
    [CompilerGeneratedAttribute]
public void set_DefaultSearchField(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSearchType();
    [CompilerGeneratedAttribute]
public void set_DefaultSearchType(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSearchText();
    [CompilerGeneratedAttribute]
public void set_DefaultSearchText(string value);
}
public class ServiceStack.AutoQueryViewerUserInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public bool IsAuthenticated { get; public set; }
    public int QueryCount { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public void set_IsAuthenticated(bool value);
    [CompilerGeneratedAttribute]
public int get_QueryCount();
    [CompilerGeneratedAttribute]
public void set_QueryCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(Dictionary`2<string, string> value);
}
public class ServiceStack.BootstrapScripts : ScriptMethods {
    public IRawString validationSummary(ScriptScopeContext scope);
    public IRawString validationSummary(ScriptScopeContext scope, IEnumerable exceptFields);
    public IRawString validationSummary(ScriptScopeContext scope, IEnumerable exceptFields, object htmlAttrs);
    public IRawString ValidationSuccess(ScriptScopeContext scope, string message);
    public IRawString ValidationSuccess(ScriptScopeContext scope, string message, Dictionary`2<string, object> divAttrs);
    public IRawString formTextarea(ScriptScopeContext scope, object args);
    public IRawString formTextarea(ScriptScopeContext scope, object inputAttrs, object inputOptions);
    public IRawString formSelect(ScriptScopeContext scope, object args);
    public IRawString formSelect(ScriptScopeContext scope, object inputAttrs, object inputOptions);
    public IRawString formInput(ScriptScopeContext scope, object args);
    public IRawString formInput(ScriptScopeContext scope, object inputAttrs, object inputOptions);
    public IRawString formControl(ScriptScopeContext scope, object inputAttrs, string tagName, object inputOptions);
    private NavOptions ToNavOptions(ScriptScopeContext scope, Dictionary`2<string, object> options);
    public IRawString nav(ScriptScopeContext scope);
    public IRawString nav(ScriptScopeContext scope, List`1<NavItem> navItems);
    public IRawString nav(ScriptScopeContext scope, List`1<NavItem> navItems, Dictionary`2<string, object> options);
    public IRawString navbar(ScriptScopeContext scope);
    public IRawString navbar(ScriptScopeContext scope, List`1<NavItem> navItems);
    public IRawString navbar(ScriptScopeContext scope, List`1<NavItem> navItems, Dictionary`2<string, object> options);
    public IRawString navLink(ScriptScopeContext scope, NavItem navItem);
    public IRawString navLink(ScriptScopeContext scope, NavItem navItem, Dictionary`2<string, object> options);
    public IRawString navButtonGroup(ScriptScopeContext scope);
    public IRawString navButtonGroup(ScriptScopeContext scope, List`1<NavItem> navItems);
    public IRawString navButtonGroup(ScriptScopeContext scope, List`1<NavItem> navItems, Dictionary`2<string, object> options);
}
[ExtensionAttribute]
internal static class ServiceStack.BufferedExtensions : object {
    [ExtensionAttribute]
internal static MemoryStream CreateBufferedStream(IResponse response);
    [ExtensionAttribute]
internal static MemoryStream CreateBufferedStream(Stream stream);
    [ExtensionAttribute]
internal static string ReadBufferedStreamToEnd(MemoryStream stream, IRequest req);
    [ExtensionAttribute]
internal static void FlushBufferIfAny(IResponse response, MemoryStream buffer, Stream output);
    [AsyncStateMachineAttribute("ServiceStack.BufferedExtensions/<FlushBufferIfAnyAsync>d__4")]
[ExtensionAttribute]
internal static Task FlushBufferIfAnyAsync(IResponse response, MemoryStream buffer, Stream output, CancellationToken token);
    [ExtensionAttribute]
public static T AddTimingsIfNeeded(T req, ServiceStackHost appHost);
}
[ExtensionAttribute]
public static class ServiceStack.CacheClientExtensions : object {
    [ExtensionAttribute]
public static void Set(ICacheClient cache, string cacheKey, T value, Nullable`1<TimeSpan> expireCacheIn);
    [AsyncStateMachineAttribute("ServiceStack.CacheClientExtensions/<SetAsync>d__1`1")]
[ExtensionAttribute]
public static Task SetAsync(ICacheClientAsync cache, string cacheKey, T value, Nullable`1<TimeSpan> expireCacheIn, CancellationToken token);
    private static string DateCacheKey(string cacheKey);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetDate(IRequest req);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetIfModifiedSince(IRequest req);
    [ExtensionAttribute]
public static bool HasValidCache(ICacheClient cache, IRequest req, string cacheKey, Nullable`1<DateTime> checkLastModified, Nullable`1& lastModified);
    [AsyncStateMachineAttribute("ServiceStack.CacheClientExtensions/<HasValidCacheAsync>d__7")]
[ExtensionAttribute]
public static Task`1<ValidCache> HasValidCacheAsync(ICacheClientAsync cache, IRequest req, string cacheKey, Nullable`1<DateTime> checkLastModified, CancellationToken token);
    [ExtensionAttribute]
public static object ResolveFromCache(ICacheClient cache, string cacheKey, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.CacheClientExtensions/<ResolveFromCacheAsync>d__9")]
[ExtensionAttribute]
public static Task`1<object> ResolveFromCacheAsync(ICacheClientAsync cache, string cacheKey, IRequest req, CancellationToken token);
    [ExtensionAttribute]
internal static string SerializeToString(IRequest request, object responseDto);
    [ExtensionAttribute]
public static object Cache(ICacheClient cache, string cacheKey, object responseDto, IRequest req, Nullable`1<TimeSpan> expireCacheIn);
    [AsyncStateMachineAttribute("ServiceStack.CacheClientExtensions/<CacheAsync>d__12")]
[ExtensionAttribute]
public static Task`1<object> CacheAsync(ICacheClientAsync cache, string cacheKey, object responseDto, IRequest req, Nullable`1<TimeSpan> expireCacheIn, CancellationToken token);
    private static List`1<string> GetAllContentCacheKeys(String[] cacheKeys);
    [ExtensionAttribute]
public static void ClearCaches(ICacheClient cache, String[] cacheKeys);
    [AsyncStateMachineAttribute("ServiceStack.CacheClientExtensions/<ClearCachesAsync>d__15")]
[ExtensionAttribute]
public static Task ClearCachesAsync(ICacheClientAsync cache, String[] cacheKeys, CancellationToken token);
    public static string GetCacheKeyForSerialized(string cacheKey, string mimeType, string modifiers);
    public static string GetCacheKeyForCompressed(string cacheKeySerialized, string compressionType);
    [ExtensionAttribute]
public static void RemoveByPattern(ICacheClient cacheClient, string pattern);
    [ExtensionAttribute]
public static Task RemoveByPatternAsync(ICacheClientAsync cacheClient, string pattern, CancellationToken token);
    [ExtensionAttribute]
public static void RemoveByRegex(ICacheClient cacheClient, string regex);
    [ExtensionAttribute]
public static Task RemoveByRegexAsync(ICacheClientAsync cacheClient, string regex);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetKeysByPattern(ICacheClient cache, string pattern);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAllKeys(ICacheClient cache);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetKeysStartingWith(ICacheClient cache, string prefix);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<string> GetKeysByPatternAsync(ICacheClientAsync cache, string pattern);
    [AsyncIteratorStateMachineAttribute("ServiceStack.CacheClientExtensions/<GetAllKeysAsync>d__26")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<string> GetAllKeysAsync(ICacheClientAsync cache);
    [AsyncIteratorStateMachineAttribute("ServiceStack.CacheClientExtensions/<GetKeysStartingWithAsync>d__27")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<string> GetKeysStartingWithAsync(ICacheClientAsync cache, string prefix);
    [ExtensionAttribute]
public static T GetOrCreate(ICacheClient cache, string key, Func`1<T> createFn);
    [AsyncStateMachineAttribute("ServiceStack.CacheClientExtensions/<GetOrCreateAsync>d__29`1")]
[ExtensionAttribute]
public static Task`1<T> GetOrCreateAsync(ICacheClientAsync cache, string key, Func`1<Task`1<T>> createFn);
    [ExtensionAttribute]
public static T GetOrCreate(ICacheClient cache, string key, TimeSpan expiresIn, Func`1<T> createFn);
    [AsyncStateMachineAttribute("ServiceStack.CacheClientExtensions/<GetOrCreateAsync>d__31`1")]
[ExtensionAttribute]
public static Task`1<T> GetOrCreateAsync(ICacheClientAsync cache, string key, TimeSpan expiresIn, Func`1<Task`1<T>> createFn);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> GetTimeToLive(ICacheClient cache, string key);
}
[FlagsAttribute]
public enum ServiceStack.CacheControl : Enum {
    public long value__;
    public static CacheControl None;
    public static CacheControl Public;
    public static CacheControl Private;
    public static CacheControl MustRevalidate;
    public static CacheControl NoCache;
    public static CacheControl NoStore;
    public static CacheControl NoTransform;
    public static CacheControl ProxyRevalidate;
}
public class ServiceStack.CacheInfo : object {
    [CompilerGeneratedAttribute]
private string <KeyBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyModifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheControl <CacheControl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VaryByUser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LocalCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCompression>k__BackingField;
    public string CacheKey { get; }
    public string KeyBase { get; public set; }
    public string KeyModifiers { get; public set; }
    public Nullable`1<TimeSpan> ExpiresIn { get; public set; }
    public string ETag { get; public set; }
    public Nullable`1<TimeSpan> Age { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public CacheControl CacheControl { get; public set; }
    public bool VaryByUser { get; public set; }
    public bool LocalCache { get; public set; }
    public bool NoCompression { get; public set; }
    public string get_CacheKey();
    [CompilerGeneratedAttribute]
public string get_KeyBase();
    [CompilerGeneratedAttribute]
public void set_KeyBase(string value);
    [CompilerGeneratedAttribute]
public string get_KeyModifiers();
    [CompilerGeneratedAttribute]
public void set_KeyModifiers(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ExpiresIn();
    [CompilerGeneratedAttribute]
public void set_ExpiresIn(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public CacheControl get_CacheControl();
    [CompilerGeneratedAttribute]
public void set_CacheControl(CacheControl value);
    [CompilerGeneratedAttribute]
public bool get_VaryByUser();
    [CompilerGeneratedAttribute]
public void set_VaryByUser(bool value);
    [CompilerGeneratedAttribute]
public bool get_LocalCache();
    [CompilerGeneratedAttribute]
public void set_LocalCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCompression();
    [CompilerGeneratedAttribute]
public void set_NoCompression(bool value);
}
[ExtensionAttribute]
public static class ServiceStack.CacheInfoExtensions : object {
    [ExtensionAttribute]
public static CacheInfo ToCacheInfo(HttpResult httpResult);
}
public class ServiceStack.CacheResponseAttribute : RequestFilterAsyncAttribute {
    [CompilerGeneratedAttribute]
private int <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheControl <CacheControl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VaryByUser>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VaryByRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VaryByHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LocalCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCompression>k__BackingField;
    public int Duration { get; public set; }
    public int MaxAge { get; public set; }
    public CacheControl CacheControl { get; public set; }
    public bool VaryByUser { get; public set; }
    public String[] VaryByRoles { get; public set; }
    public String[] VaryByHeaders { get; public set; }
    public bool LocalCache { get; public set; }
    public bool NoCompression { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(int value);
    [CompilerGeneratedAttribute]
public int get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(int value);
    [CompilerGeneratedAttribute]
public CacheControl get_CacheControl();
    [CompilerGeneratedAttribute]
public void set_CacheControl(CacheControl value);
    [CompilerGeneratedAttribute]
public bool get_VaryByUser();
    [CompilerGeneratedAttribute]
public void set_VaryByUser(bool value);
    [CompilerGeneratedAttribute]
public String[] get_VaryByRoles();
    [CompilerGeneratedAttribute]
public void set_VaryByRoles(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_VaryByHeaders();
    [CompilerGeneratedAttribute]
public void set_VaryByHeaders(String[] value);
    [CompilerGeneratedAttribute]
public bool get_LocalCache();
    [CompilerGeneratedAttribute]
public void set_LocalCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCompression();
    [CompilerGeneratedAttribute]
public void set_NoCompression(bool value);
    [AsyncStateMachineAttribute("ServiceStack.CacheResponseAttribute/<ExecuteAsync>d__32")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
}
[ExtensionAttribute]
public static class ServiceStack.CacheResponseExtensions : object {
    [ExtensionAttribute]
public static string LastModifiedKey(CacheInfo cacheInfo);
    [AsyncStateMachineAttribute("ServiceStack.CacheResponseExtensions/<HandleValidCache>d__1")]
[ExtensionAttribute]
public static Task`1<bool> HandleValidCache(IRequest req, CacheInfo cacheInfo, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.Caching.CacheClientAsyncExtensions : object {
    [ExtensionAttribute]
public static ICacheClientAsync AsAsync(ICacheClient cache);
    [ExtensionAttribute]
public static ICacheClient AsSync(ICacheClientAsync cache);
    [ExtensionAttribute]
public static ICacheClient Unwrap(ICacheClientAsync cache);
}
public class ServiceStack.Caching.CacheClientAsyncWrapper : object {
    [CompilerGeneratedAttribute]
private ICacheClient <Cache>k__BackingField;
    public ICacheClient Cache { get; }
    public CacheClientAsyncWrapper(ICacheClient cache);
    [CompilerGeneratedAttribute]
public ICacheClient get_Cache();
    public sealed virtual Task`1<bool> RemoveAsync(string key, CancellationToken token);
    public sealed virtual Task RemoveAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    public sealed virtual Task`1<T> GetAsync(string key, CancellationToken token);
    public sealed virtual Task`1<long> IncrementAsync(string key, UInt32 amount, CancellationToken token);
    public sealed virtual Task`1<long> DecrementAsync(string key, UInt32 amount, CancellationToken token);
    public sealed virtual Task`1<bool> AddAsync(string key, T value, CancellationToken token);
    public sealed virtual Task`1<bool> SetAsync(string key, T value, CancellationToken token);
    public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, CancellationToken token);
    public sealed virtual Task`1<bool> AddAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    public sealed virtual Task`1<bool> SetAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    public sealed virtual Task`1<bool> AddAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    public sealed virtual Task`1<bool> SetAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    public sealed virtual Task FlushAllAsync(CancellationToken token);
    public sealed virtual Task`1<IDictionary`2<string, T>> GetAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    public sealed virtual Task SetAllAsync(IDictionary`2<string, T> values, CancellationToken token);
    public sealed virtual Task`1<Nullable`1<TimeSpan>> GetTimeToLiveAsync(string key, CancellationToken token);
    public sealed virtual Task RemoveExpiredEntriesAsync(CancellationToken token);
    public sealed virtual Task RemoveByPatternAsync(string pattern, CancellationToken token);
    public sealed virtual Task RemoveByRegexAsync(string regex, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Caching.CacheClientAsyncWrapper/<GetKeysByPatternAsync>d__25")]
public sealed virtual IAsyncEnumerable`1<string> GetKeysByPatternAsync(string pattern, CancellationToken token);
    public sealed virtual ValueTask DisposeAsync();
}
public class ServiceStack.Caching.CacheClientWithPrefix : object {
    private string prefix;
    private ICacheClient cache;
    public string Prefix { get; }
    public CacheClientWithPrefix(ICacheClient cache, string prefix);
    public sealed virtual bool Remove(string key);
    public sealed virtual T Get(string key);
    public sealed virtual long Increment(string key, UInt32 amount);
    public sealed virtual long Decrement(string key, UInt32 amount);
    public sealed virtual bool Add(string key, T value);
    public sealed virtual bool Set(string key, T value);
    public sealed virtual bool Replace(string key, T value);
    public sealed virtual void SetAll(IDictionary`2<string, T> values);
    public sealed virtual IDictionary`2<string, T> GetAll(IEnumerable`1<string> keys);
    public sealed virtual bool Replace(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Set(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Add(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Replace(string key, T value, DateTime expiresAt);
    public sealed virtual bool Set(string key, T value, DateTime expiresAt);
    public sealed virtual bool Add(string key, T value, DateTime expiresAt);
    public sealed virtual void RemoveAll(IEnumerable`1<string> keys);
    public sealed virtual void FlushAll();
    public sealed virtual void Dispose();
    public sealed virtual void RemoveByPattern(string pattern);
    public sealed virtual void RemoveByRegex(string regex);
    public sealed virtual IEnumerable`1<string> GetKeysByPattern(string pattern);
    public sealed virtual void RemoveExpiredEntries();
    public sealed virtual Nullable`1<TimeSpan> GetTimeToLive(string key);
    private string EnsurePrefix(string s);
    public string get_Prefix();
    [CompilerGeneratedAttribute]
private string <SetAll>b__10_0(KeyValuePair`2<string, T> x);
}
public class ServiceStack.Caching.CacheClientWithPrefixAsync : object {
    private string prefix;
    private ICacheClientAsync cache;
    public string Prefix { get; }
    public CacheClientWithPrefixAsync(ICacheClientAsync cache, string prefix);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<RemoveAsync>d__3")]
public sealed virtual Task`1<bool> RemoveAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<GetAsync>d__4`1")]
public sealed virtual Task`1<T> GetAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<IncrementAsync>d__5")]
public sealed virtual Task`1<long> IncrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<DecrementAsync>d__6")]
public sealed virtual Task`1<long> DecrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<AddAsync>d__7`1")]
public sealed virtual Task`1<bool> AddAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<SetAsync>d__8`1")]
public sealed virtual Task`1<bool> SetAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<ReplaceAsync>d__9`1")]
public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<SetAllAsync>d__10`1")]
public sealed virtual Task SetAllAsync(IDictionary`2<string, T> values, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<GetAllAsync>d__11`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> GetAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<ReplaceAsync>d__12`1")]
public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<SetAsync>d__13`1")]
public sealed virtual Task`1<bool> SetAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<AddAsync>d__14`1")]
public sealed virtual Task`1<bool> AddAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<ReplaceAsync>d__15`1")]
public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<SetAsync>d__16`1")]
public sealed virtual Task`1<bool> SetAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<AddAsync>d__17`1")]
public sealed virtual Task`1<bool> AddAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<RemoveAllAsync>d__18")]
public sealed virtual Task RemoveAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<FlushAllAsync>d__19")]
public sealed virtual Task FlushAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<RemoveByPatternAsync>d__20")]
public sealed virtual Task RemoveByPatternAsync(string pattern, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<RemoveByRegexAsync>d__21")]
public sealed virtual Task RemoveByRegexAsync(string regex, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<GetKeysByPatternAsync>d__22")]
public sealed virtual IAsyncEnumerable`1<string> GetKeysByPatternAsync(string pattern, CancellationToken token);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<RemoveExpiredEntriesAsync>d__24")]
public sealed virtual Task RemoveExpiredEntriesAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.CacheClientWithPrefixAsync/<GetTimeToLiveAsync>d__25")]
public sealed virtual Task`1<Nullable`1<TimeSpan>> GetTimeToLiveAsync(string key, CancellationToken token);
    private string EnsurePrefix(string s);
    public string get_Prefix();
    [CompilerGeneratedAttribute]
private string <SetAllAsync>b__10_0(KeyValuePair`2<string, T> x);
}
[ExtensionAttribute]
public static class ServiceStack.Caching.CacheClientWithPrefixAsyncExtensions : object {
    [ExtensionAttribute]
public static ICacheClientAsync WithPrefix(ICacheClientAsync cache, string prefix);
}
[ExtensionAttribute]
public static class ServiceStack.Caching.CacheClientWithPrefixExtensions : object {
    [ExtensionAttribute]
public static ICacheClient WithPrefix(ICacheClient cache, string prefix);
}
public class ServiceStack.Caching.MemoryCacheClient : object {
    private static ILog Log;
    private long hitCounter;
    [CompilerGeneratedAttribute]
private long <CleaningInterval>k__BackingField;
    private ConcurrentDictionary`2<string, CacheEntry> memory;
    [CompilerGeneratedAttribute]
private bool <FlushOnDispose>k__BackingField;
    public long CleaningInterval { get; public set; }
    public bool FlushOnDispose { get; public set; }
    private static MemoryCacheClient();
    [CompilerGeneratedAttribute]
public long get_CleaningInterval();
    [CompilerGeneratedAttribute]
public void set_CleaningInterval(long value);
    [CompilerGeneratedAttribute]
public bool get_FlushOnDispose();
    [CompilerGeneratedAttribute]
public void set_FlushOnDispose(bool value);
    private bool TryGetValue(string key, CacheEntry& entry);
    private void Set(string key, CacheEntry entry);
    private void IncrHit();
    private bool CacheAdd(string key, object value, Nullable`1<DateTime> expiresAt);
    private bool CacheSet(string key, object value, Nullable`1<DateTime> expiresAt);
    private bool CacheReplace(string key, object value, Nullable`1<DateTime> expiresAt);
    public sealed virtual void Dispose();
    public sealed virtual bool Remove(string key);
    public sealed virtual void RemoveAll(IEnumerable`1<string> keys);
    public object Get(string key);
    public object Get(string key, Int64& lastModifiedTicks);
    public sealed virtual T Get(string key);
    private long UpdateCounter(string key, long value);
    public sealed virtual long Increment(string key, UInt32 amount);
    public sealed virtual long Decrement(string key, UInt32 amount);
    public sealed virtual bool Add(string key, T value);
    public sealed virtual bool Set(string key, T value);
    public sealed virtual bool Replace(string key, T value);
    public sealed virtual bool Add(string key, T value, DateTime expiresAt);
    public sealed virtual bool Set(string key, T value, DateTime expiresAt);
    public sealed virtual bool Replace(string key, T value, DateTime expiresAt);
    public sealed virtual bool Add(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Set(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Replace(string key, T value, TimeSpan expiresIn);
    public sealed virtual void FlushAll();
    public sealed virtual IDictionary`2<string, T> GetAll(IEnumerable`1<string> keys);
    public sealed virtual void SetAll(IDictionary`2<string, T> values);
    private static string ConvertToRegex(string pattern);
    public sealed virtual void RemoveByPattern(string pattern);
    public sealed virtual void RemoveByRegex(string pattern);
    public sealed virtual IEnumerable`1<string> GetKeysByPattern(string pattern);
    public List`1<string> GetKeysByRegex(string pattern);
    public sealed virtual void RemoveExpiredEntries();
    public sealed virtual Nullable`1<TimeSpan> GetTimeToLive(string key);
}
public class ServiceStack.Caching.MultiCacheClient : object {
    private List`1<ICacheClient> cacheClients;
    private List`1<ICacheClientAsync> cacheClientsAsync;
    public MultiCacheClient(ICacheClient[] cacheClients);
    public MultiCacheClient(List`1<ICacheClient> cacheClients, List`1<ICacheClientAsync> cacheClientsAsync);
    public sealed virtual void Dispose();
    public sealed virtual bool Remove(string key);
    public sealed virtual T Get(string key);
    public sealed virtual long Increment(string key, UInt32 amount);
    public sealed virtual long Decrement(string key, UInt32 amount);
    public sealed virtual bool Add(string key, T value);
    public sealed virtual bool Set(string key, T value);
    public sealed virtual bool Replace(string key, T value);
    public sealed virtual bool Add(string key, T value, DateTime expiresAt);
    public sealed virtual bool Set(string key, T value, DateTime expiresAt);
    public sealed virtual bool Replace(string key, T value, DateTime expiresAt);
    public sealed virtual bool Add(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Set(string key, T value, TimeSpan expiresIn);
    public sealed virtual bool Replace(string key, T value, TimeSpan expiresIn);
    public sealed virtual void FlushAll();
    public sealed virtual IDictionary`2<string, T> GetAll(IEnumerable`1<string> keys);
    public sealed virtual void RemoveAll(IEnumerable`1<string> keys);
    public sealed virtual void SetAll(IDictionary`2<string, T> values);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<RemoveAsync>d__22")]
public sealed virtual Task`1<bool> RemoveAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<RemoveAllAsync>d__23")]
public sealed virtual Task RemoveAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<GetAsync>d__24`1")]
public sealed virtual Task`1<T> GetAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<IncrementAsync>d__25")]
public sealed virtual Task`1<long> IncrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<DecrementAsync>d__26")]
public sealed virtual Task`1<long> DecrementAsync(string key, UInt32 amount, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<AddAsync>d__27`1")]
public sealed virtual Task`1<bool> AddAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<SetAsync>d__28`1")]
public sealed virtual Task`1<bool> SetAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<ReplaceAsync>d__29`1")]
public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<AddAsync>d__30`1")]
public sealed virtual Task`1<bool> AddAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<SetAsync>d__31`1")]
public sealed virtual Task`1<bool> SetAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<ReplaceAsync>d__32`1")]
public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, DateTime expiresAt, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<AddAsync>d__33`1")]
public sealed virtual Task`1<bool> AddAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<SetAsync>d__34`1")]
public sealed virtual Task`1<bool> SetAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<ReplaceAsync>d__35`1")]
public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, TimeSpan expiresIn, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<FlushAllAsync>d__36")]
public sealed virtual Task FlushAllAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<GetAllAsync>d__37`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> GetAllAsync(IEnumerable`1<string> keys, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<SetAllAsync>d__38`1")]
public sealed virtual Task SetAllAsync(IDictionary`2<string, T> values, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<GetTimeToLiveAsync>d__39")]
public sealed virtual Task`1<Nullable`1<TimeSpan>> GetTimeToLiveAsync(string key, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<RemoveExpiredEntriesAsync>d__40")]
public sealed virtual Task RemoveExpiredEntriesAsync(CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<DisposeAsync>d__41")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncIteratorStateMachineAttribute("ServiceStack.Caching.MultiCacheClient/<GetKeysByPatternAsync>d__42")]
public sealed virtual IAsyncEnumerable`1<string> GetKeysByPatternAsync(string pattern, CancellationToken token);
}
internal class ServiceStack.CancellableRequest : object {
    private CancellableRequestsFeature feature;
    private string requestTag;
    private Stopwatch stopwatch;
    [CompilerGeneratedAttribute]
private CancellationToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <TokenSource>k__BackingField;
    public CancellationToken Token { get; private set; }
    public CancellationTokenSource TokenSource { get; private set; }
    public TimeSpan Elapsed { get; }
    public CancellableRequest(CancellableRequestsFeature feature, IRequest req, string tag);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(CancellationToken value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationTokenSource get_TokenSource();
    [CompilerGeneratedAttribute]
private void set_TokenSource(CancellationTokenSource value);
    public sealed virtual TimeSpan get_Elapsed();
    public sealed virtual void Dispose();
}
[DefaultRequestAttribute("ServiceStack.CancelRequest")]
public class ServiceStack.CancellableRequestService : Service {
    public object Any(CancelRequest request);
}
[ExtensionAttribute]
public static class ServiceStack.CancellableRequestsExtensions : object {
    [ExtensionAttribute]
public static ICancellableRequest CreateCancellableRequest(IRequest req);
    [ExtensionAttribute]
public static ICancellableRequest GetCancellableRequest(IRequest req, string tag);
}
public class ServiceStack.CancellableRequestsFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AtPath>k__BackingField;
    internal ConcurrentDictionary`2<string, ICancellableRequest> RequestsMap;
    public string Id { get; public set; }
    public string AtPath { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_AtPath();
    [CompilerGeneratedAttribute]
public void set_AtPath(string value);
    internal void UnregisterCancellableRequest(string requestTag);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
}
public class ServiceStack.CaseInsensitiveEqualCondition : QueryCondition {
    public static CaseInsensitiveEqualCondition Instance;
    public string Alias { get; }
    private static CaseInsensitiveEqualCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.CaseInsensitiveInCollectionCondition : QueryCondition {
    public static CaseInsensitiveInCollectionCondition Instance;
    public string Alias { get; }
    private static CaseInsensitiveInCollectionCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.CleanUrlsFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Extensions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FileSystemVirtualFiles <VirtualFiles>k__BackingField;
    public string Id { get; public set; }
    public String[] Extensions { get; public set; }
    [NullableAttribute("2")]
public FileSystemVirtualFiles VirtualFiles { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public String[] get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(String[] value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FileSystemVirtualFiles get_VirtualFiles();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_VirtualFiles(FileSystemVirtualFiles value);
    public sealed virtual void Register(IAppHost appHost);
    public HttpAsyncTaskHandler GetHandler(string httpMethod, string pathInfo);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IHttpHandler <Register>b__12_0(IRequest req);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.ClientCanSwapTemplatesAttribute : RequestFilterAttribute {
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
public static class ServiceStack.CompareTypeUtils : object {
    public static int CompareTo(object a, object b);
    public static Nullable`1<long> CoerceLong(object o);
    public static Nullable`1<double> CoerceDouble(object o);
    public static string CoerceString(object o);
    public static object Add(object a, object b);
    public static object Min(object a, object b);
    public static object Max(object a, object b);
    public static object Sum(IEnumerable values);
    public static object Aggregate(IEnumerable source, Func`3<object, object, object> fn, object seed);
}
public class ServiceStack.CompressedFileResult : object {
    public static int Adler32ChecksumLength;
    public static string DefaultContentType;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    public string FilePath { get; private set; }
    public Dictionary`2<string, string> Headers { get; private set; }
    public IDictionary`2<string, string> Options { get; }
    public CompressedFileResult(string filePath);
    public CompressedFileResult(string filePath, string compressionType);
    public CompressedFileResult(string filePath, string compressionType, string contentMimeType);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(Dictionary`2<string, string> value);
    public sealed virtual IDictionary`2<string, string> get_Options();
    [AsyncStateMachineAttribute("ServiceStack.CompressedFileResult/<WriteToAsync>d__15")]
public sealed virtual Task WriteToAsync(Stream responseStream, CancellationToken token);
}
public class ServiceStack.CompressedResult : object {
    public static string DefaultContentType;
    [CompilerGeneratedAttribute]
private Byte[] <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Cookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IContentTypeWriter <ResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PaddingLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IDisposable> <ResultScope>k__BackingField;
    public Byte[] Contents { get; }
    public string ContentType { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public List`1<Cookie> Cookies { get; }
    public int Status { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public object Response { get; public set; }
    public IContentTypeWriter ResponseFilter { get; public set; }
    public IRequest RequestContext { get; public set; }
    public int PaddingLength { get; public set; }
    public Func`1<IDisposable> ResultScope { get; public set; }
    public IDictionary`2<string, string> Options { get; }
    unknown Nullable`1<DateTime> LastModified {public set; }
    public CompressedResult(Byte[] contents);
    public CompressedResult(Byte[] contents, string compressionType);
    public CompressedResult(Byte[] contents, string compressionType, string contentMimeType);
    [CompilerGeneratedAttribute]
public Byte[] get_Contents();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Cookie> get_Cookies();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Status(int value);
    public sealed virtual HttpStatusCode get_StatusCode();
    public sealed virtual void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    public sealed virtual object get_Response();
    public sealed virtual void set_Response(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IContentTypeWriter get_ResponseFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseFilter(IContentTypeWriter value);
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_RequestContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestContext(IRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PaddingLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PaddingLength(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<IDisposable> get_ResultScope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResultScope(Func`1<IDisposable> value);
    public sealed virtual IDictionary`2<string, string> get_Options();
    public void set_LastModified(Nullable`1<DateTime> value);
    [AsyncStateMachineAttribute("ServiceStack.CompressedResult/<WriteToAsync>d__51")]
public sealed virtual Task WriteToAsync(Stream responseStream, CancellationToken token);
}
public class ServiceStack.CompressResponseAttribute : ResponseFilterAsyncAttribute {
    [AsyncStateMachineAttribute("ServiceStack.CompressResponseAttribute/<ExecuteAsync>d__0")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object response);
}
public static class ServiceStack.ConditionAlias : object {
    public static string Equals;
    public static string NotEqual;
    public static string LessEqual;
    public static string Less;
    public static string Greater;
    public static string GreaterEqual;
    public static string StartsWith;
    public static string Contains;
    public static string EndsWith;
    public static string In;
    public static string Between;
    public static string Like;
    public static string False;
}
public class ServiceStack.Configuration.AppSettings : AppSettingsBase {
    public AppSettings(string tier);
    public virtual string GetString(string name);
}
public class ServiceStack.Configuration.AppSettingsBase : object {
    protected ISettings settings;
    protected ISettingsWriter settingsWriter;
    [CompilerGeneratedAttribute]
private string <Tier>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsingStrategyDelegate <ParsingStrategy>k__BackingField;
    public string Tier { get; public set; }
    public ParsingStrategyDelegate ParsingStrategy { get; public set; }
    public AppSettingsBase(ISettings settings);
    [CompilerGeneratedAttribute]
public string get_Tier();
    [CompilerGeneratedAttribute]
public void set_Tier(string value);
    [CompilerGeneratedAttribute]
public ParsingStrategyDelegate get_ParsingStrategy();
    [CompilerGeneratedAttribute]
public void set_ParsingStrategy(ParsingStrategyDelegate value);
    protected void Init(ISettings settings);
    public virtual string GetNullableString(string name);
    public sealed virtual string Get(string name);
    public virtual Dictionary`2<string, string> GetAll();
    public virtual List`1<string> GetAllKeys();
    public virtual bool Exists(string key);
    public virtual string GetString(string name);
    public virtual string GetRequiredString(string name);
    public virtual IList`1<string> GetList(string key);
    public virtual IDictionary`2<string, string> GetDictionary(string key);
    public virtual List`1<KeyValuePair`2<string, string>> GetKeyValuePairs(string key);
    public virtual T Get(string name);
    public virtual T Get(string name, T defaultValue);
    public virtual void Set(string key, T value);
}
public static class ServiceStack.Configuration.AppSettingsStrategy : object {
    public static string CollapseNewLines(string originalSetting);
}
[ExtensionAttribute]
public static class ServiceStack.Configuration.AppSettingsUtils : object {
    [ExtensionAttribute]
public static string GetRequiredString(IAppSettings settings, string name);
    [ExtensionAttribute]
public static string GetNullableString(IAppSettings settings, string name);
    [ExtensionAttribute]
public static string GetConnectionString(IAppSettings appSettings, string name);
    public static string GetUserAppSettingsPath(string appName);
    public static void SaveAppSetting(string appSettingsPath, string name, string value);
}
public class ServiceStack.Configuration.Config : object {
    public static string DefaultNamespace;
}
public class ServiceStack.Configuration.ConfigUtils : object {
    private static int KeyIndex;
    private static int ValueIndex;
    public static char ItemSeperator;
    public static char KeyValueSeperator;
    private static Dictionary`2<string, string> appSettings;
    public static string GetNullableAppSetting(string key);
    public static string GetAppSetting(string key);
    public static string GetAppSetting(string key, string defaultValue);
    public static T GetAppSetting(string key, T defaultValue);
    public static string GetConnectionString(string key);
    public static List`1<string> GetListFromAppSetting(string key);
    public static List`1<string> GetListFromAppSettingValue(string appSettingValue);
    public static Dictionary`2<string, string> GetDictionaryFromAppSetting(string key);
    public static Dictionary`2<string, string> GetDictionaryFromAppSettingValue(string appSettingValue);
    public static List`1<KeyValuePair`2<string, string>> GetKeyValuePairsFromAppSettingValue(string appSettingValue);
    public static Dictionary`2<string, string> GetAppSettingsMap();
}
public class ServiceStack.Configuration.DictionarySettings : AppSettingsBase {
    private DictionaryWrapper instance;
    public DictionarySettings(IEnumerable`1<KeyValuePair`2<string, string>> map);
    public DictionarySettings(Dictionary`2<string, string> map);
    public virtual Dictionary`2<string, string> GetAll();
}
public class ServiceStack.Configuration.EnvironmentVariableSettings : AppSettingsBase {
    public virtual string GetString(string name);
}
public interface ServiceStack.Configuration.ISettings {
    public abstract virtual string Get(string key);
    public abstract virtual List`1<string> GetAllKeys();
}
public interface ServiceStack.Configuration.ISettingsWriter {
    public abstract virtual void Set(string key, T value);
}
public class ServiceStack.Configuration.MultiAppSettings : AppSettingsBase {
    private MultiSettingsWrapper instance;
    [CompilerGeneratedAttribute]
private IAppSettings[] <AppSettings>k__BackingField;
    public IAppSettings[] AppSettings { get; }
    public MultiAppSettings(IAppSettings[] appSettings);
    [CompilerGeneratedAttribute]
public IAppSettings[] get_AppSettings();
    public virtual T Get(string name);
    public virtual T Get(string name, T defaultValue);
}
public class ServiceStack.Configuration.MultiAppSettingsBuilder : object {
    private Queue`1<IAppSettings> appSettingsQueue;
    private string tier;
    public MultiAppSettingsBuilder(string tier);
    public MultiAppSettingsBuilder AddAppSettings();
    public MultiAppSettingsBuilder AddAppSettings(string tier);
    public MultiAppSettingsBuilder AddDictionarySettings(Dictionary`2<string, string> map);
    public MultiAppSettingsBuilder AddEnvironmentalVariables();
    public MultiAppSettingsBuilder AddEnvironmentalVariables(string tier);
    public MultiAppSettingsBuilder AddTextFile(string path);
    public MultiAppSettingsBuilder AddTextFile(string path, string delimeter);
    public MultiAppSettingsBuilder AddTextFile(string path, string delimeter, string tier);
    public IAppSettings Build();
}
public class ServiceStack.Configuration.ParsingStrategyDelegate : MulticastDelegate {
    public ParsingStrategyDelegate(object object, IntPtr method);
    public virtual string Invoke(string originalSetting);
    public virtual IAsyncResult BeginInvoke(string originalSetting, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public static class ServiceStack.Configuration.RoleNames : object {
    public static string Admin;
    public static string AllowAnyUser;
    public static string AllowAnon;
}
public class ServiceStack.Configuration.RuntimeAppSettings : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Func`2<IRequest, object>> <Settings>k__BackingField;
    public Dictionary`2<string, Func`2<IRequest, object>> Settings { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`2<IRequest, object>> get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(Dictionary`2<string, Func`2<IRequest, object>> value);
    public sealed virtual T Get(IRequest request, string name, T defaultValue);
}
public class ServiceStack.Configuration.TextFileSettings : DictionarySettings {
    public TextFileSettings(string filePath, string delimiter);
}
public static class ServiceStack.ConfigurePriority : object {
    public static int AutoQueryDataFeature;
    public static int AutoQueryFeature;
    public static int ValidationFeature;
}
public class ServiceStack.ConnectionInfoAttribute : RequestFilterAttribute {
    [CompilerGeneratedAttribute]
private string <NamedConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public string NamedConnection { get; public set; }
    public string ConnectionString { get; public set; }
    public string ProviderName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NamedConnection();
    [CompilerGeneratedAttribute]
public void set_NamedConnection(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
[ExtensionAttribute]
public static class ServiceStack.ContainerNetCoreExtensions : object {
    [ExtensionAttribute]
public static Container AddScoped(Container services, Type serviceType);
    [ExtensionAttribute]
public static Container AddScoped(Container services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static Container AddScoped(Container services);
    [ExtensionAttribute]
public static Container AddScoped(Container services, Func`2<Container, TService> implementationFactory);
    [ExtensionAttribute]
public static Container AddScoped(Container services);
    [ExtensionAttribute]
public static Container AddScoped(Container services, Func`2<Container, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static Container AddSingleton(Container services, Type serviceType);
    [ExtensionAttribute]
public static Container AddSingleton(Container services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static Container AddSingleton(Container services);
    [ExtensionAttribute]
public static Container AddSingleton(Container services, Func`2<Container, TService> implementationFactory);
    [ExtensionAttribute]
public static Container AddSingleton(Container services);
    [ExtensionAttribute]
public static Container AddSingleton(Container services, TService implementationInstance);
    [ExtensionAttribute]
public static Container AddSingleton(Container services, Func`2<Container, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static Container AddTransient(Container services, Type serviceType);
    [ExtensionAttribute]
public static Container AddTransient(Container services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static Container AddTransient(Container services);
    [ExtensionAttribute]
public static Container AddTransient(Container services, Func`2<Container, TService> implementationFactory);
    [ExtensionAttribute]
public static Container AddTransient(Container services);
    [ExtensionAttribute]
public static Container AddTransient(Container services, Func`2<Container, TImplementation> implementationFactory);
}
[ExtensionAttribute]
public static class ServiceStack.ContainerTypeExtensions : object {
    [ExtensionAttribute]
public static void RegisterAutoWiredType(Container container, Type serviceType, Type inFunqAsType, ReuseScope scope);
    [ExtensionAttribute]
public static void RegisterAutoWiredType(Container container, string name, Type serviceType, Type inFunqAsType, ReuseScope scope);
    [ExtensionAttribute]
public static void RegisterAutoWiredType(Container container, Type serviceType, ReuseScope scope);
    [ExtensionAttribute]
public static void RegisterAutoWiredType(Container container, string name, Type serviceType, ReuseScope scope);
    [ExtensionAttribute]
public static void RegisterAutoWiredTypes(Container container, IEnumerable`1<Type> serviceTypes, ReuseScope scope);
    [ExtensionAttribute]
public static Container Register(Container container, object instance, Type asType);
}
public class ServiceStack.ContainsCondition : QueryCondition {
    public static ContainsCondition Instance;
    public string Alias { get; }
    private static ContainsCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.CorsFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public static string DefaultOrigin;
    public static string DefaultMethods;
    public static string DefaultHeaders;
    public static int DefaultMaxAge;
    private string allowedOrigins;
    private string allowedMethods;
    private string allowedHeaders;
    private string exposeHeaders;
    private Nullable`1<int> maxAge;
    private bool allowCredentials;
    private ICollection`1<string> allowOriginWhitelist;
    [CompilerGeneratedAttribute]
private bool <AutoHandleOptionsRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomActionHandler <EmitGlobalHeadersHandler>k__BackingField;
    public string Id { get; public set; }
    public ICollection`1<string> AllowOriginWhitelist { get; }
    public bool AutoHandleOptionsRequests { get; public set; }
    public CustomActionHandler EmitGlobalHeadersHandler { get; public set; }
    public CorsFeature(IAppSettings appSettings);
    public CorsFeature(string allowedOrigins, string allowedMethods, string allowedHeaders, bool allowCredentials, string exposeHeaders, Nullable`1<int> maxAge);
    public CorsFeature(ICollection`1<string> allowOriginWhitelist, string allowedMethods, string allowedHeaders, bool allowCredentials, string exposeHeaders, Nullable`1<int> maxAge);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public ICollection`1<string> get_AllowOriginWhitelist();
    [CompilerGeneratedAttribute]
public bool get_AutoHandleOptionsRequests();
    [CompilerGeneratedAttribute]
public void set_AutoHandleOptionsRequests(bool value);
    [CompilerGeneratedAttribute]
public CustomActionHandler get_EmitGlobalHeadersHandler();
    [CompilerGeneratedAttribute]
public void set_EmitGlobalHeadersHandler(CustomActionHandler value);
    public CorsFeature AppendOriginWhitelist(IEnumerable`1<string> origins);
    public sealed virtual void Register(IAppHost appHost);
    [CompilerGeneratedAttribute]
private void <Register>g__allowOriginFilter|29_0(IRequest httpReq, IResponse httpRes);
    [CompilerGeneratedAttribute]
private IHttpHandler <Register>b__29_1(IHttpRequest httpReq);
}
public class ServiceStack.CsvOnly : RequestFilterAttribute {
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
public class ServiceStack.CsvRequestLogger : InMemoryRollingRequestLogger {
    private static ILog log;
    private object semaphore;
    private List`1<RequestLogEntry> logs;
    private List`1<RequestLogEntry> errorLogs;
    private IVirtualFiles files;
    private string requestLogsPattern;
    private string errorLogsPattern;
    private TimeSpan appendEverySecs;
    private Timer timer;
    [CompilerGeneratedAttribute]
private Action`2<List`1<RequestLogEntry>, Exception> <OnWriteLogsError>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, Exception> <OnReadLastEntryError>k__BackingField;
    public Action`2<List`1<RequestLogEntry>, Exception> OnWriteLogsError { get; public set; }
    public Action`2<string, Exception> OnReadLastEntryError { get; public set; }
    public CsvRequestLogger(IVirtualFiles files, string requestLogsPattern, string errorLogsPattern, Nullable`1<TimeSpan> appendEvery);
    private static CsvRequestLogger();
    [CompilerGeneratedAttribute]
public Action`2<List`1<RequestLogEntry>, Exception> get_OnWriteLogsError();
    [CompilerGeneratedAttribute]
public void set_OnWriteLogsError(Action`2<List`1<RequestLogEntry>, Exception> value);
    [CompilerGeneratedAttribute]
public Action`2<string, Exception> get_OnReadLastEntryError();
    [CompilerGeneratedAttribute]
public void set_OnReadLastEntryError(Action`2<string, Exception> value);
    private RequestLogEntry ReadLastEntry(string logFile);
    protected virtual void OnFlush(object state);
    public string GetLogFilePath(string logFilePattern, DateTime forDate);
    public virtual void WriteLogs(List`1<RequestLogEntry> logs, string logFile);
    public virtual void Log(IRequest request, object requestDto, object response, TimeSpan requestDuration);
    public virtual List`1<RequestLogEntry> GetLatestLogs(Nullable`1<int> take);
}
public class ServiceStack.CustomPlugin : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAppHost> <OnRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAppHost> <OnBeforePluginsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAppHost> <OnAfterPluginsLoaded>k__BackingField;
    public string Id { get; public set; }
    public Action`1<IAppHost> OnRegister { get; public set; }
    public Action`1<IAppHost> OnBeforePluginsLoaded { get; public set; }
    public Action`1<IAppHost> OnAfterPluginsLoaded { get; public set; }
    public CustomPlugin(Action`1<IAppHost> onRegister);
    public CustomPlugin(string id, Action`1<IAppHost> onRegister);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Action`1<IAppHost> get_OnRegister();
    [CompilerGeneratedAttribute]
public void set_OnRegister(Action`1<IAppHost> value);
    [CompilerGeneratedAttribute]
public Action`1<IAppHost> get_OnBeforePluginsLoaded();
    [CompilerGeneratedAttribute]
public void set_OnBeforePluginsLoaded(Action`1<IAppHost> value);
    [CompilerGeneratedAttribute]
public Action`1<IAppHost> get_OnAfterPluginsLoaded();
    [CompilerGeneratedAttribute]
public void set_OnAfterPluginsLoaded(Action`1<IAppHost> value);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void AfterPluginsLoaded(IAppHost appHost);
}
public class ServiceStack.CustomRequestFilter : object {
    private Action`3<IRequest, IResponse, object> filter;
    [CompilerGeneratedAttribute]
private bool <ApplyToMessaging>k__BackingField;
    public bool ApplyToMessaging { get; public set; }
    public CustomRequestFilter(Action`3<IRequest, IResponse, object> filter);
    [CompilerGeneratedAttribute]
public bool get_ApplyToMessaging();
    [CompilerGeneratedAttribute]
public void set_ApplyToMessaging(bool value);
    public sealed virtual void Register(IAppHost appHost);
}
public class ServiceStack.CustomResponseFilter : object {
    private Action`3<IRequest, IResponse, object> filter;
    [CompilerGeneratedAttribute]
private bool <ApplyToMessaging>k__BackingField;
    public bool ApplyToMessaging { get; public set; }
    public CustomResponseFilter(Action`3<IRequest, IResponse, object> filter);
    [CompilerGeneratedAttribute]
public bool get_ApplyToMessaging();
    [CompilerGeneratedAttribute]
public void set_ApplyToMessaging(bool value);
    public sealed virtual void Register(IAppHost appHost);
}
public class ServiceStack.DataConditionExpression : object {
    [CompilerGeneratedAttribute]
private QueryTerm <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryCondition <QueryCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private GetMemberDelegate <FieldGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public QueryTerm Term { get; public set; }
    public QueryCondition QueryCondition { get; public set; }
    public PropertyInfo Field { get; public set; }
    public GetMemberDelegate FieldGetter { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public QueryTerm get_Term();
    [CompilerGeneratedAttribute]
public void set_Term(QueryTerm value);
    [CompilerGeneratedAttribute]
public QueryCondition get_QueryCondition();
    [CompilerGeneratedAttribute]
public void set_QueryCondition(QueryCondition value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(PropertyInfo value);
    [CompilerGeneratedAttribute]
public GetMemberDelegate get_FieldGetter();
    [CompilerGeneratedAttribute]
public void set_FieldGetter(GetMemberDelegate value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public object GetFieldValue(object instance);
    public IEnumerable`1<T> Apply(IEnumerable`1<T> source, IEnumerable`1<T> original);
}
public class ServiceStack.DataQuery`1 : object {
    private static PropertyInfo PrimaryKey;
    private QueryDataContext context;
    [CompilerGeneratedAttribute]
private IQueryData <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <DynamicParams>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DataConditionExpression> <Conditions>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByExpression <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <OnlyFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Rows>k__BackingField;
    public IQueryData Dto { get; }
    public Dictionary`2<string, string> DynamicParams { get; }
    public List`1<DataConditionExpression> Conditions { get; public set; }
    public OrderByExpression OrderBy { get; public set; }
    public HashSet`1<string> OnlyFields { get; public set; }
    public Nullable`1<int> Offset { get; public set; }
    public Nullable`1<int> Rows { get; public set; }
    public bool HasConditions { get; }
    public DataQuery`1(QueryDataContext context);
    private static DataQuery`1();
    [CompilerGeneratedAttribute]
public sealed virtual IQueryData get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_DynamicParams();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<DataConditionExpression> get_Conditions();
    [CompilerGeneratedAttribute]
public void set_Conditions(List`1<DataConditionExpression> value);
    [CompilerGeneratedAttribute]
public sealed virtual OrderByExpression get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(OrderByExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_OnlyFields();
    [CompilerGeneratedAttribute]
public void set_OnlyFields(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(Nullable`1<int> value);
    public virtual bool get_HasConditions();
    public virtual void Limit(Nullable`1<int> skip, Nullable`1<int> take);
    public void Take(int take);
    public virtual void Select(String[] fields);
    public virtual Tuple`2<Type, PropertyInfo> FirstMatchingField(string field);
    public virtual void OrderByFields(String[] fieldNames);
    public virtual void OrderByFieldsDescending(String[] fieldNames);
    private void OrderByFieldsImpl(String[] fieldNames, Func`2<string, bool> orderFn);
    public virtual void OrderByPrimaryKey();
    public virtual void Join(Type joinType, Type type);
    public virtual void LeftJoin(Type joinType, Type type);
    public virtual void AddCondition(QueryTerm term, PropertyInfo field, QueryCondition condition, object value);
    public virtual void And(string field, QueryCondition condition, string value);
    public virtual void Or(string field, QueryCondition condition, string value);
}
[AttributeUsageAttribute("4")]
public class ServiceStack.DefaultRequestAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private Type <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verbs>k__BackingField;
    public Type RequestType { get; public set; }
    public string Verbs { get; public set; }
    public DefaultRequestAttribute(Type requestType);
    [CompilerGeneratedAttribute]
public Type get_RequestType();
    [CompilerGeneratedAttribute]
public void set_RequestType(Type value);
    [CompilerGeneratedAttribute]
public string get_Verbs();
    [CompilerGeneratedAttribute]
public void set_Verbs(string value);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.DefaultViewAttribute : RequestFilterAttribute {
    [CompilerGeneratedAttribute]
private string <View>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string View { get; public set; }
    public string Template { get; public set; }
    public DefaultViewAttribute(string view);
    public DefaultViewAttribute(string view, string template);
    [CompilerGeneratedAttribute]
public string get_View();
    [CompilerGeneratedAttribute]
public void set_View(string value);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
[DefaultRequestAttribute("ServiceStack.DeleteFileUpload")]
public class ServiceStack.DeleteFileUploadService : Service {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("ServiceStack.DeleteFileUploadService/<Delete>d__0")]
public Task`1<object> Delete(DeleteFileUpload request);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.DiagnosticEntry : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <EventType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <Error>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CommandType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAuthId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arg>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<long> <ArgLengths>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <NamedArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <OperationId>k__BackingField;
    public long Id { get; public set; }
    public string TraceId { get; public set; }
    [NullableAttribute("1")]
public string Source { get; public set; }
    [NullableAttribute("1")]
public string EventType { get; public set; }
    [NullableAttribute("1")]
public string Message { get; public set; }
    [NullableAttribute("1")]
public string Operation { get; public set; }
    public int ThreadId { get; public set; }
    public ResponseStatus Error { get; public set; }
    [NullableAttribute("1")]
public string CommandType { get; public set; }
    [NullableAttribute("1")]
public string Command { get; public set; }
    public string UserAuthId { get; public set; }
    public string SessionId { get; public set; }
    public string Arg { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Args { get; public set; }
    public List`1<long> ArgLengths { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> NamedArgs { get; public set; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public long Timestamp { get; public set; }
    public DateTime Date { get; public set; }
    public string Tag { get; public set; }
    public string StackTrace { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> Meta { get; public set; }
    internal bool Deleted { get; internal set; }
    internal Nullable`1<Guid> OperationId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Source();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Source(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_EventType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_EventType(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Message(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Operation();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public ResponseStatus get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ResponseStatus value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CommandType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_CommandType(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Command();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public string get_UserAuthId();
    [CompilerGeneratedAttribute]
public void set_UserAuthId(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_Arg();
    [CompilerGeneratedAttribute]
public void set_Arg(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<long> get_ArgLengths();
    [CompilerGeneratedAttribute]
public void set_ArgLengths(List`1<long> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_NamedArgs();
    [CompilerGeneratedAttribute]
public void set_NamedArgs(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal bool get_Deleted();
    [CompilerGeneratedAttribute]
internal void set_Deleted(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Guid> get_OperationId();
    [CompilerGeneratedAttribute]
internal void set_OperationId(Nullable`1<Guid> value);
}
public class ServiceStack.DisposableTracker : object {
    public static string HashId;
    private List`1<WeakReference> disposables;
    public void Add(IDisposable instance);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class ServiceStack.DtoUtils : object {
    public static string ResponseStatusPropertyName;
    public static ResponseStatus CreateResponseStatus(Exception ex, object request, bool debugMode);
    public static ResponseStatus PopulateResponseStatus(ResponseStatus responseStatus, object request, Exception e, bool debugMode);
    [ExtensionAttribute]
public static ResponseStatus ToResponseStatus(Exception exception, object requestDto);
    [ExtensionAttribute]
public static ResponseStatus ToResponseStatus(ValidationError validationException);
    [ExtensionAttribute]
public static ResponseStatus ToResponseStatus(ValidationErrorResult validationResult);
    public static ResponseStatus CreateSuccessResponse(string message);
    public static ResponseStatus CreateResponseStatus(string errorCode);
    public static ResponseStatus CreateResponseStatus(string errorCode, string errorMessage);
    public static object CreateErrorResponse(string errorCode, string errorMessage, IEnumerable`1<ValidationErrorField> validationErrors);
    public static object CreateErrorResponse(object request, ValidationErrorResult validationError);
    public static object CreateErrorResponse(object request, Exception ex, ResponseStatus responseStatus);
    public static object CreateResponseDto(object request, ResponseStatus responseStatus);
    public static object CreateErrorResponse(object request, Exception ex);
}
internal class ServiceStack.EmptyCancellableRequest : object {
    private Stopwatch stopwatch;
    [CompilerGeneratedAttribute]
private CancellationToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <TokenSource>k__BackingField;
    public CancellationToken Token { get; private set; }
    public CancellationTokenSource TokenSource { get; private set; }
    public TimeSpan Elapsed { get; }
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(CancellationToken value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationTokenSource get_TokenSource();
    [CompilerGeneratedAttribute]
private void set_TokenSource(CancellationTokenSource value);
    public sealed virtual TimeSpan get_Elapsed();
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("68")]
public class ServiceStack.EnableCorsAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoHandleOptionRequests>k__BackingField;
    private string allowedOrigins;
    private string allowedMethods;
    private string allowedHeaders;
    private bool allowCredentials;
    public int Priority { get; public set; }
    public bool AutoHandleOptionRequests { get; public set; }
    public EnableCorsAttribute(string allowedOrigins, string allowedMethods, string allowedHeaders, bool allowCredentials);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public bool get_AutoHandleOptionRequests();
    [CompilerGeneratedAttribute]
public void set_AutoHandleOptionRequests(bool value);
    public sealed virtual Task RequestFilterAsync(IRequest req, IResponse res, object requestDto);
    public sealed virtual IRequestFilterBase Copy();
}
public class ServiceStack.EncryptedMessagesFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public static string RequestItemsIv;
    public static string RequestItemsCryptKey;
    public static string RequestItemsAuthKey;
    public static TimeSpan DefaultMaxMaxRequestAge;
    public static string ErrorInvalidMessage;
    public static string ErrorNonceSeen;
    public static string ErrorRequestTooOld;
    public static string ErrorKeyNotFound;
    private ConcurrentDictionary`2<Byte[], DateTime> nonceCache;
    [CompilerGeneratedAttribute]
private Nullable`1<RSAParameters> <PrivateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RSAParameters> <FallbackPrivateKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RSAParameters> <PrivateKeyModulusMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKeyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRequestAge>k__BackingField;
    public string Id { get; public set; }
    public Nullable`1<RSAParameters> PrivateKey { get; public set; }
    public List`1<RSAParameters> FallbackPrivateKeys { get; public set; }
    protected Dictionary`2<string, RSAParameters> PrivateKeyModulusMap { get; protected set; }
    public string PublicKeyPath { get; public set; }
    public TimeSpan MaxRequestAge { get; public set; }
    public string PrivateKeyXml { get; public set; }
    private static EncryptedMessagesFeature();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<RSAParameters> get_PrivateKey();
    [CompilerGeneratedAttribute]
public void set_PrivateKey(Nullable`1<RSAParameters> value);
    [CompilerGeneratedAttribute]
public List`1<RSAParameters> get_FallbackPrivateKeys();
    [CompilerGeneratedAttribute]
public void set_FallbackPrivateKeys(List`1<RSAParameters> value);
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, RSAParameters> get_PrivateKeyModulusMap();
    [CompilerGeneratedAttribute]
protected void set_PrivateKeyModulusMap(Dictionary`2<string, RSAParameters> value);
    [CompilerGeneratedAttribute]
public string get_PublicKeyPath();
    [CompilerGeneratedAttribute]
public void set_PublicKeyPath(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxRequestAge();
    [CompilerGeneratedAttribute]
public void set_MaxRequestAge(TimeSpan value);
    public string get_PrivateKeyXml();
    public void set_PrivateKeyXml(string value);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    private RSAParameters GetPrivateKey(string useKey);
    [AsyncStateMachineAttribute("ServiceStack.EncryptedMessagesFeature/<WriteUnencryptedError>d__39")]
private static Task WriteUnencryptedError(IRequest req, Exception ex, string description);
    [AsyncStateMachineAttribute("ServiceStack.EncryptedMessagesFeature/<WriteEncryptedError>d__40")]
public static Task WriteEncryptedError(IRequest req, Byte[] cryptKey, Byte[] authKey, Byte[] iv, Exception ex, string description);
}
[ExtensionAttribute]
public static class ServiceStack.EncryptedMessagesFeatureExtensions : object {
    [ExtensionAttribute]
public static bool IsEncryptedMessage(IRequest req);
}
[DefaultRequestAttribute("ServiceStack.GetPublicKey")]
[RestrictAttribute]
public class ServiceStack.EncryptedMessagesService : Service {
    public object Any(EncryptedMessage request);
    public object Any(GetPublicKey request);
}
public class ServiceStack.EndsWithCondition : QueryCondition {
    public static EndsWithCondition Instance;
    public string Alias { get; }
    private static EndsWithCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.EnsureHttpsAttribute : RequestFilterAttribute {
    [CompilerGeneratedAttribute]
private bool <SkipIfDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipIfXForwardedFor>k__BackingField;
    public bool SkipIfDebugMode { get; public set; }
    public bool SkipIfXForwardedFor { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipIfDebugMode();
    [CompilerGeneratedAttribute]
public void set_SkipIfDebugMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipIfXForwardedFor();
    [CompilerGeneratedAttribute]
public void set_SkipIfXForwardedFor(bool value);
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
public class ServiceStack.EqualsCondition : QueryCondition {
    public static EqualsCondition Instance;
    public string Alias { get; }
    private static EqualsCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public static class ServiceStack.ErrorMessages : object {
    public static string UnknownAuthProviderFmt;
    public static string NoExternalRedirects;
    public static string InvalidBasicAuthCredentials;
    public static string WindowsAuthFailed;
    public static string NotAuthenticated;
    public static string InvalidUsernameOrPassword;
    public static string UsernameOrEmailRequired;
    public static string UserAccountLocked;
    public static string IllegalUsername;
    public static string ShouldNotRegisterAuthSession;
    public static string ApiKeyRequiresSecureConnection;
    public static string ApiKeyDoesNotExist;
    public static string ApiKeyHasBeenCancelled;
    public static string ApiKeyHasExpired;
    public static string ApiKeyInvalid;
    public static string UserForApiKeyDoesNotExist;
    public static string JwtRequiresSecureConnection;
    public static string TokenInvalidated;
    public static string TokenExpired;
    public static string TokenInvalidNotBefore;
    public static string TokenInvalid;
    public static string TokenInvalidAudienceFmt;
    public static string RefreshTokenInvalid;
    public static string PrimaryKeyRequired;
    public static string InvalidAccessToken;
    public static string SessionIdEmpty;
    public static string Requires2FA;
    public static string AccessDenied;
    public static string InvalidRole;
    public static string InvalidPermission;
    public static string WebSudoRequired;
    public static string ClaimDoesNotExistFmt;
    public static string UserNotExists;
    public static string AlreadyRegistered;
    public static string AuthRepositoryNotExists;
    public static string UsernameAlreadyExists;
    public static string EmailAlreadyExists;
    public static string RegisterUpdatesDisabled;
    public static string PasswordsShouldMatch;
    public static string UserAlreadyExistsFmt;
    public static string EmailAlreadyExistsFmt;
    public static string FileNotExistsFmt;
    public static string SubscriptionNotExistsFmt;
    public static string SubscriptionForbiddenFmt;
    public static string RequestAlreadyProcessedFmt;
    public static string OnlyAllowedInAspNetHosts;
    public static string HostDoesNotSupportSingletonRequest;
    public static string ConstructorNotFoundForType;
    public static string CacheFeatureMustBeEnabled;
    public static string ContentTypeNotSupportedFmt;
    public static string AppSettingNotFoundFmt;
    public static string ConnectionStringNotFoundFmt;
    private static ErrorMessages();
}
[AttributeUsageAttribute("68")]
public class ServiceStack.ErrorViewAttribute : RequestFilterAttribute {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    public string FieldName { get; public set; }
    public ErrorViewAttribute(string fieldName);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
public class ServiceStack.EventSubscription : SubscriptionInfo {
    private static ILog Log;
    public static String[] UnknownChannel;
    private long LastPulseAtTicks;
    [CompilerGeneratedAttribute]
private static int <DisposeMaxWaitMs>k__BackingField;
    private long subscribed;
    private long isDisposed;
    private long disposing;
    private IResponse response;
    private long msgId;
    [CompilerGeneratedAttribute]
private String[] <MergedChannels>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnUnsubscribeAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEventSubscription> <OnUnsubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<IEventSubscription, IResponse, string> <OnPublish>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IEventSubscription, IResponse, string, Task> <OnPublishAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEventSubscription> <OnHungConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEventSubscription> <OnDispose>k__BackingField;
    private ServerEventsFeature feature;
    [CompilerGeneratedAttribute]
private Action`2<IResponse, string> <WriteEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IResponse, string, CancellationToken, Task> <WriteEventAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IEventSubscription, Exception> <OnError>k__BackingField;
    private StringBuilder buffer;
    private string jsonArgs;
    private long semaphore;
    internal static long NotificationsSent;
    public DateTime LastPulseAt { get; public set; }
    public static int DisposeMaxWaitMs { get; public set; }
    public bool IsDisposed { get; }
    private bool Disposing { get; }
    public IResponse Response { get; }
    public IRequest Request { get; }
    public long LastMessageId { get; }
    public String[] MergedChannels { get; public set; }
    public Func`2<IEventSubscription, Task> OnUnsubscribeAsync { get; public set; }
    public Action`1<IEventSubscription> OnUnsubscribe { get; public set; }
    public Action`3<IEventSubscription, IResponse, string> OnPublish { get; public set; }
    public Func`4<IEventSubscription, IResponse, string, Task> OnPublishAsync { get; public set; }
    public Action`1<IEventSubscription> OnHungConnection { get; public set; }
    public Action`1<IEventSubscription> OnDispose { get; public set; }
    public Action`2<IResponse, string> WriteEvent { get; public set; }
    public Func`4<IResponse, string, CancellationToken, Task> WriteEventAsync { get; public set; }
    public Action`2<IEventSubscription, Exception> OnError { get; public set; }
    public bool IsClosed { get; }
    public string JsonArgs { get; }
    public bool IsLocked { get; }
    public EventSubscription(IResponse response);
    private static EventSubscription();
    public sealed virtual DateTime get_LastPulseAt();
    public sealed virtual void set_LastPulseAt(DateTime value);
    [CompilerGeneratedAttribute]
public static int get_DisposeMaxWaitMs();
    [CompilerGeneratedAttribute]
public static void set_DisposeMaxWaitMs(int value);
    public bool get_IsDisposed();
    private bool get_Disposing();
    public IResponse get_Response();
    public IRequest get_Request();
    public sealed virtual long get_LastMessageId();
    [CompilerGeneratedAttribute]
public void set_MergedChannels(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_MergedChannels();
    public sealed virtual void UpdateChannels(String[] channels);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IEventSubscription, Task> get_OnUnsubscribeAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnUnsubscribeAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IEventSubscription> get_OnUnsubscribe();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnUnsubscribe(Action`1<IEventSubscription> value);
    [CompilerGeneratedAttribute]
public Action`3<IEventSubscription, IResponse, string> get_OnPublish();
    [CompilerGeneratedAttribute]
public void set_OnPublish(Action`3<IEventSubscription, IResponse, string> value);
    [CompilerGeneratedAttribute]
public Func`4<IEventSubscription, IResponse, string, Task> get_OnPublishAsync();
    [CompilerGeneratedAttribute]
public void set_OnPublishAsync(Func`4<IEventSubscription, IResponse, string, Task> value);
    [CompilerGeneratedAttribute]
public Action`1<IEventSubscription> get_OnHungConnection();
    [CompilerGeneratedAttribute]
public void set_OnHungConnection(Action`1<IEventSubscription> value);
    [CompilerGeneratedAttribute]
public Action`1<IEventSubscription> get_OnDispose();
    [CompilerGeneratedAttribute]
public void set_OnDispose(Action`1<IEventSubscription> value);
    [CompilerGeneratedAttribute]
public Action`2<IResponse, string> get_WriteEvent();
    [CompilerGeneratedAttribute]
public void set_WriteEvent(Action`2<IResponse, string> value);
    [CompilerGeneratedAttribute]
public Func`4<IResponse, string, CancellationToken, Task> get_WriteEventAsync();
    [CompilerGeneratedAttribute]
public void set_WriteEventAsync(Func`4<IResponse, string, CancellationToken, Task> value);
    [CompilerGeneratedAttribute]
public Action`2<IEventSubscription, Exception> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`2<IEventSubscription, Exception> value);
    public sealed virtual bool get_IsClosed();
    public sealed virtual void Pulse();
    public sealed virtual string get_JsonArgs();
    private string CreateFrame(string selector, string message);
    public void Publish(string selector);
    public bool get_IsLocked();
    private int GetThrottleMs();
    public sealed virtual Task PublishAsync(string selector, string message, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.EventSubscription/<PublishRawAsync>d__83")]
public sealed virtual Task PublishRawAsync(string frame, CancellationToken token);
    public sealed virtual void Publish(string selector, string message);
    public sealed virtual void PublishRaw(string frame);
    private string GetAndResetBuffer();
    private Task HandleWriteExceptionAsync(string frame, Exception ex, CancellationToken token);
    private bool CanWrite();
    [ObsoleteAttribute("Use UnsubscribeAsync. Will be removed in future.")]
public sealed virtual void Unsubscribe();
    public sealed virtual Task UnsubscribeAsync();
    public static string SerializeDictionary(IDictionary`2<string, string> map);
    private sealed virtual override Task ServiceStack.Internal.IServiceStackAsyncDisposable.DisposeAsync();
    [AsyncStateMachineAttribute("ServiceStack.EventSubscription/<DisposeAsync>d__93")]
private Task DisposeAsync();
    public sealed virtual void Dispose();
    public void Release();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ServiceStack.FileExt : object {
    [CompilerGeneratedAttribute]
private static String[] <WebImages>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <BinaryImages>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <Images>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <WebVideos>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <WebAudios>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <BinaryDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <TextDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <Spreadsheets>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <Presentations>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <AllDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <WebFormats>k__BackingField;
    public static String[] WebImages { get; public set; }
    public static String[] BinaryImages { get; public set; }
    public static String[] Images { get; public set; }
    public static String[] WebVideos { get; public set; }
    public static String[] WebAudios { get; public set; }
    public static String[] BinaryDocuments { get; public set; }
    public static String[] TextDocuments { get; public set; }
    public static String[] Spreadsheets { get; public set; }
    public static String[] Presentations { get; public set; }
    public static String[] AllDocuments { get; public set; }
    public static String[] WebFormats { get; public set; }
    private static FileExt();
    [CompilerGeneratedAttribute]
public static String[] get_WebImages();
    [CompilerGeneratedAttribute]
public static void set_WebImages(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_BinaryImages();
    [CompilerGeneratedAttribute]
public static void set_BinaryImages(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_Images();
    [CompilerGeneratedAttribute]
public static void set_Images(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_WebVideos();
    [CompilerGeneratedAttribute]
public static void set_WebVideos(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_WebAudios();
    [CompilerGeneratedAttribute]
public static void set_WebAudios(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_BinaryDocuments();
    [CompilerGeneratedAttribute]
public static void set_BinaryDocuments(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_TextDocuments();
    [CompilerGeneratedAttribute]
public static void set_TextDocuments(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_Spreadsheets();
    [CompilerGeneratedAttribute]
public static void set_Spreadsheets(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_Presentations();
    [CompilerGeneratedAttribute]
public static void set_Presentations(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_AllDocuments();
    [CompilerGeneratedAttribute]
public static void set_AllDocuments(String[] value);
    [CompilerGeneratedAttribute]
public static String[] get_WebFormats();
    [CompilerGeneratedAttribute]
public static void set_WebFormats(String[] value);
}
[ExtensionAttribute]
public static class ServiceStack.FileExtensions : object {
    [ExtensionAttribute]
public static void SaveTo(IHttpFile httpFile, string filePath);
    [ExtensionAttribute]
public static void SaveTo(IHttpFile httpFile, IVirtualFiles vfs, string filePath);
    [ExtensionAttribute]
public static void WriteTo(IHttpFile httpFile, Stream stream);
    [AsyncStateMachineAttribute("ServiceStack.FileExtensions/<SaveToAsync>d__3")]
[ExtensionAttribute]
public static Task SaveToAsync(IHttpFile httpFile, string filePath);
    [AsyncStateMachineAttribute("ServiceStack.FileExtensions/<SaveToAsync>d__4")]
[ExtensionAttribute]
public static Task SaveToAsync(IHttpFile httpFile, IVirtualFiles vfs, string filePath, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.FileExtensions/<WriteToAsync>d__5")]
[ExtensionAttribute]
public static Task WriteToAsync(IHttpFile httpFile, Stream stream);
    [ExtensionAttribute]
public static string MapServerPath(string relativePath);
    [ExtensionAttribute]
public static bool IsRelativePath(string relativeOrAbsolutePath);
    [ExtensionAttribute]
public static Byte[] ReadFully(FileInfo file);
    [AsyncStateMachineAttribute("ServiceStack.FileExtensions/<ReadFullyAsync>d__9")]
[ExtensionAttribute]
public static Task`1<Byte[]> ReadFullyAsync(FileInfo file, CancellationToken token);
    [ExtensionAttribute]
public static string ReadAllText(FileInfo file);
    [AsyncStateMachineAttribute("ServiceStack.FileExtensions/<ReadAllTextAsync>d__11")]
[ExtensionAttribute]
public static Task`1<string> ReadAllTextAsync(FileInfo file, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class ServiceStack.FilesUploadContext : ValueType {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private FilesUploadFeature <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private UploadLocation <Location>k__BackingField;
    public IRequest Request { get; }
    public object Dto { get; }
    public IHttpFile File { get; }
    public string FileName { get; }
    public string FileExtension { get; }
    public string DateSegment { get; }
    public FilesUploadFeature Feature { get; }
    public UploadLocation Location { get; }
    public IAuthSession Session { get; }
    public string UserAuthId { get; }
    public FilesUploadContext(FilesUploadFeature feature, UploadLocation location, IRequest request, IHttpFile file);
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    public object get_Dto();
    public T GetDto();
    [CompilerGeneratedAttribute]
public IHttpFile get_File();
    [CompilerGeneratedAttribute]
public string get_FileName();
    public string get_FileExtension();
    public string get_DateSegment();
    [CompilerGeneratedAttribute]
public FilesUploadFeature get_Feature();
    [CompilerGeneratedAttribute]
public UploadLocation get_Location();
    public IAuthSession get_Session();
    public string get_UserAuthId();
    public string GetLocationPath(string relativePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.FilesUploadErrorMessages : object {
    [CompilerGeneratedAttribute]
private string <UnknownLocationFmt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoUpdateAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoCreateAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoReadAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileNotExists>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BadRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoDeleteAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvalidFileExtensionFmt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceededMaxFileCountFmt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceededMinFileBytesFmt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceededMaxFileBytesFmt>k__BackingField;
    public string UnknownLocationFmt { get; public set; }
    public string NoUpdateAccess { get; public set; }
    public string NoCreateAccess { get; public set; }
    public string NoReadAccess { get; public set; }
    public string FileNotExists { get; public set; }
    public string BadRequest { get; public set; }
    public string NoDeleteAccess { get; public set; }
    public string InvalidFileExtensionFmt { get; public set; }
    public string ExceededMaxFileCountFmt { get; public set; }
    public string ExceededMinFileBytesFmt { get; public set; }
    public string ExceededMaxFileBytesFmt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UnknownLocationFmt();
    [CompilerGeneratedAttribute]
public void set_UnknownLocationFmt(string value);
    [CompilerGeneratedAttribute]
public string get_NoUpdateAccess();
    [CompilerGeneratedAttribute]
public void set_NoUpdateAccess(string value);
    [CompilerGeneratedAttribute]
public string get_NoCreateAccess();
    [CompilerGeneratedAttribute]
public void set_NoCreateAccess(string value);
    [CompilerGeneratedAttribute]
public string get_NoReadAccess();
    [CompilerGeneratedAttribute]
public void set_NoReadAccess(string value);
    [CompilerGeneratedAttribute]
public string get_FileNotExists();
    [CompilerGeneratedAttribute]
public void set_FileNotExists(string value);
    [CompilerGeneratedAttribute]
public string get_BadRequest();
    [CompilerGeneratedAttribute]
public void set_BadRequest(string value);
    [CompilerGeneratedAttribute]
public string get_NoDeleteAccess();
    [CompilerGeneratedAttribute]
public void set_NoDeleteAccess(string value);
    [CompilerGeneratedAttribute]
public string get_InvalidFileExtensionFmt();
    [CompilerGeneratedAttribute]
public void set_InvalidFileExtensionFmt(string value);
    [CompilerGeneratedAttribute]
public string get_ExceededMaxFileCountFmt();
    [CompilerGeneratedAttribute]
public void set_ExceededMaxFileCountFmt(string value);
    [CompilerGeneratedAttribute]
public string get_ExceededMinFileBytesFmt();
    [CompilerGeneratedAttribute]
public void set_ExceededMinFileBytesFmt(string value);
    [CompilerGeneratedAttribute]
public string get_ExceededMaxFileBytesFmt();
    [CompilerGeneratedAttribute]
public void set_ExceededMaxFileBytesFmt(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.FilesUploadFeature : object {
    [CompilerGeneratedAttribute]
private UploadLocation[] <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private FilesUploadErrorMessages <Errors>k__BackingField;
    public string Id { get; }
    public UploadLocation[] Locations { get; public set; }
    public string BasePath { get; public set; }
    public FilesUploadErrorMessages Errors { get; public set; }
    public FilesUploadFeature(string basePath, UploadLocation[] locations);
    public FilesUploadFeature(UploadLocation[] locations);
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public UploadLocation[] get_Locations();
    [CompilerGeneratedAttribute]
public void set_Locations(UploadLocation[] value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public FilesUploadErrorMessages get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(FilesUploadErrorMessages value);
    public UploadLocation GetLocation(string name);
    public UploadLocation GetLocationFromProperty(Type requestType, string propName);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public ValueTuple`2<string, string> GetNameAndPath(string pathInfo);
    public UploadLocation AssertLocation(string name, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.FilesUploadFeature/<UploadFileAsync>d__23")]
public Task`1<string> UploadFileAsync(UploadLocation location, IRequest req, IAuthSession session, IHttpFile file, CancellationToken token);
    public ResolvedPath ResolveUploadFilePath(FilesUploadContext ctx);
    public void ValidateFileUpload(UploadLocation location, IRequest req, IHttpFile file, string vfsPath);
    [AsyncStateMachineAttribute("ServiceStack.FilesUploadFeature/<GetFileAsync>d__26")]
public Task`1<IVirtualFile> GetFileAsync(UploadLocation location, IRequest req, IAuthSession session, string vfsPath);
    [AsyncStateMachineAttribute("ServiceStack.FilesUploadFeature/<ReplaceFileAsync>d__27")]
public Task ReplaceFileAsync(UploadLocation location, IRequest req, IAuthSession session, string vfsPath, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.FilesUploadFeature/<DeleteFileAsync>d__28")]
public Task`1<bool> DeleteFileAsync(UploadLocation location, IRequest req, IAuthSession session, string vfsPath);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__18_0(PreProcessRequest feature);
    [AsyncStateMachineAttribute("ServiceStack.FilesUploadFeature/<<BeforePluginsLoaded>b__18_1>d")]
[CompilerGeneratedAttribute]
private Task`1<string> <BeforePluginsLoaded>b__18_1(IRequest req, IHttpFile file, CancellationToken token);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Register>b__20_0(AppMetadata meta);
}
[FlagsAttribute]
public enum ServiceStack.FilesUploadOperation : Enum {
    public int value__;
    public static FilesUploadOperation None;
    public static FilesUploadOperation Read;
    public static FilesUploadOperation Create;
    public static FilesUploadOperation Update;
    public static FilesUploadOperation Delete;
    public static FilesUploadOperation Write;
    public static FilesUploadOperation All;
}
public abstract class ServiceStack.FilterExpression : object {
    public abstract virtual IEnumerable`1<T> Apply(IEnumerable`1<T> source);
}
public abstract class ServiceStack.FluentValidation.AbstractValidator`1 : object {
    [CompilerGeneratedAttribute]
private TrackingCollection`1<IValidationRule> <Rules>k__BackingField;
    private Func`1<CascadeMode> _cascadeMode;
    [CompilerGeneratedAttribute]
private List`1<ITypeValidator> <TypeValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    internal TrackingCollection`1<IValidationRule> Rules { get; }
    public CascadeMode CascadeMode { get; public set; }
    public List`1<ITypeValidator> TypeValidators { get; }
    public IRequest Request { get; public set; }
    public IServiceGateway Gateway { get; }
    [CompilerGeneratedAttribute]
internal TrackingCollection`1<IValidationRule> get_Rules();
    public sealed virtual CascadeMode get_CascadeMode();
    public sealed virtual void set_CascadeMode(CascadeMode value);
    private sealed virtual override ValidationResult ServiceStack.FluentValidation.IValidator.Validate(IValidationContext context);
    private sealed virtual override Task`1<ValidationResult> ServiceStack.FluentValidation.IValidator.ValidateAsync(IValidationContext context, CancellationToken cancellation);
    public sealed virtual ValidationResult Validate(T instance);
    public sealed virtual Task`1<ValidationResult> ValidateAsync(T instance, CancellationToken cancellation);
    public virtual ValidationResult Validate(ValidationContext`1<T> context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.AbstractValidator`1/<ValidateAsync>d__12")]
public virtual Task`1<ValidationResult> ValidateAsync(ValidationContext`1<T> context, CancellationToken cancellation);
    private void SetExecutedRulesets(ValidationResult result, ValidationContext`1<T> context);
    protected void AddRule(IValidationRule rule);
    public virtual IValidatorDescriptor CreateDescriptor();
    private sealed virtual override bool ServiceStack.FluentValidation.IValidator.CanValidateInstancesOfType(Type type);
    public IRuleBuilderInitial`2<T, TProperty> RuleFor(Expression`1<Func`2<T, TProperty>> expression);
    public IRuleBuilderInitial`2<T, TTransformed> Transform(Expression`1<Func`2<T, TProperty>> from, Func`2<TProperty, TTransformed> to);
    public IRuleBuilderInitial`2<T, TTransformed> Transform(Expression`1<Func`2<T, TProperty>> from, Func`3<T, TProperty, TTransformed> to);
    public IRuleBuilderInitialCollection`2<T, TElement> RuleForEach(Expression`1<Func`2<T, IEnumerable`1<TElement>>> expression);
    public IRuleBuilderInitialCollection`2<T, TTransformed> TransformForEach(Expression`1<Func`2<T, IEnumerable`1<TElement>>> expression, Func`2<TElement, TTransformed> to);
    public IRuleBuilderInitialCollection`2<T, TTransformed> TransformForEach(Expression`1<Func`2<T, IEnumerable`1<TElement>>> expression, Func`3<T, TElement, TTransformed> to);
    public void RuleSet(string ruleSetName, Action action);
    public IConditionBuilder When(Func`2<T, bool> predicate, Action action);
    public IConditionBuilder When(Func`3<T, ValidationContext`1<T>, bool> predicate, Action action);
    public IConditionBuilder Unless(Func`2<T, bool> predicate, Action action);
    public IConditionBuilder Unless(Func`3<T, ValidationContext`1<T>, bool> predicate, Action action);
    public IConditionBuilder WhenAsync(Func`3<T, CancellationToken, Task`1<bool>> predicate, Action action);
    public IConditionBuilder WhenAsync(Func`4<T, ValidationContext`1<T>, CancellationToken, Task`1<bool>> predicate, Action action);
    public IConditionBuilder UnlessAsync(Func`3<T, CancellationToken, Task`1<bool>> predicate, Action action);
    public IConditionBuilder UnlessAsync(Func`4<T, ValidationContext`1<T>, CancellationToken, Task`1<bool>> predicate, Action action);
    public void Include(IValidator`1<T> rulesToInclude);
    public void Include(Func`2<T, TValidator> rulesToInclude);
    public sealed virtual IEnumerator`1<IValidationRule> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual void EnsureInstanceNotNull(object instanceToValidate);
    protected virtual bool PreValidate(ValidationContext`1<T> context, ValidationResult result);
    protected virtual void RaiseValidationException(ValidationContext`1<T> context, ValidationResult result);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ITypeValidator> get_TypeValidators();
    [CompilerGeneratedAttribute]
public virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public virtual void set_Request(IRequest value);
    public virtual IServiceGateway get_Gateway();
    public void RuleSet(ApplyTo appliesTo, Action action);
    private void Init(IValidationContext context);
    public sealed virtual void RemovePropertyRules(Func`2<PropertyRule, bool> where);
    [CompilerGeneratedAttribute]
private CascadeMode <RuleFor>b__17_0();
    [CompilerGeneratedAttribute]
private CascadeMode <Transform>b__18_0();
    [CompilerGeneratedAttribute]
private CascadeMode <Transform>b__19_0();
    [CompilerGeneratedAttribute]
private CascadeMode <RuleForEach>b__20_0();
    [CompilerGeneratedAttribute]
private CascadeMode <TransformForEach>b__21_0();
    [CompilerGeneratedAttribute]
private CascadeMode <TransformForEach>b__22_0();
    [CompilerGeneratedAttribute]
private CascadeMode <Include>b__32_0();
    [CompilerGeneratedAttribute]
private CascadeMode <Include>b__33_0();
}
public enum ServiceStack.FluentValidation.ApplyConditionTo : Enum {
    public int value__;
    public static ApplyConditionTo AllValidators;
    public static ApplyConditionTo CurrentValidator;
}
public class ServiceStack.FluentValidation.AssemblyScanner : object {
    private IEnumerable`1<Type> _types;
    public AssemblyScanner(IEnumerable`1<Type> types);
    public static AssemblyScanner FindValidatorsInAssembly(Assembly assembly);
    public static AssemblyScanner FindValidatorsInAssemblies(IEnumerable`1<Assembly> assemblies);
    public static AssemblyScanner FindValidatorsInAssemblyContaining();
    public static AssemblyScanner FindValidatorsInAssemblyContaining(Type type);
    private IEnumerable`1<AssemblyScanResult> Execute();
    public void ForEach(Action`1<AssemblyScanResult> action);
    public sealed virtual IEnumerator`1<AssemblyScanResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory : object {
    private Func`2<Type, IValidator> _instanceFactory;
    private ConcurrentDictionary`2<Type, object> _cache;
    public AttributedValidatorFactory(Func`2<Type, IValidator> instanceFactory);
    public sealed virtual IValidator`1<T> GetValidator();
    public virtual IValidator GetValidator(Type type);
    public virtual IValidator GetValidator(ParameterInfo parameterInfo);
    private IValidator GetValidator(ValidatorAttribute attribute);
}
[AttributeUsageAttribute("2052")]
public class ServiceStack.FluentValidation.Attributes.ValidatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ValidatorType>k__BackingField;
    public Type ValidatorType { get; }
    public ValidatorAttribute(Type validatorType);
    [CompilerGeneratedAttribute]
public Type get_ValidatorType();
}
public enum ServiceStack.FluentValidation.CascadeMode : Enum {
    public int value__;
    public static CascadeMode Continue;
    [ObsoleteAttribute("Use CascadeMode.Stop instead. The behaviour of StopOnFirstFailure was ambiguous when used at validator-level. For more details, see https://docs.fluentvalidation.net/en/latest/conditions.html#stop-vs-stoponfirstfailure")]
public static CascadeMode StopOnFirstFailure;
    public static CascadeMode Stop;
}
public class ServiceStack.FluentValidation.DefaultValidator`1 : AbstractValidator`1<T> {
}
[ExtensionAttribute]
public static class ServiceStack.FluentValidation.DefaultValidatorExtensions : object {
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> NotNull(IRuleBuilder`2<T, TProperty> ruleBuilder);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Null(IRuleBuilder`2<T, TProperty> ruleBuilder);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> NotEmpty(IRuleBuilder`2<T, TProperty> ruleBuilder);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Empty(IRuleBuilder`2<T, TProperty> ruleBuilder);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Length(IRuleBuilder`2<T, string> ruleBuilder, int min, int max);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Length(IRuleBuilder`2<T, string> ruleBuilder, Func`2<T, int> min, Func`2<T, int> max);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Length(IRuleBuilder`2<T, string> ruleBuilder, int exactLength);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Length(IRuleBuilder`2<T, string> ruleBuilder, Func`2<T, int> exactLength);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Matches(IRuleBuilder`2<T, string> ruleBuilder, string expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> MaximumLength(IRuleBuilder`2<T, string> ruleBuilder, int maximumLength);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> MinimumLength(IRuleBuilder`2<T, string> ruleBuilder, int minimumLength);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Matches(IRuleBuilder`2<T, string> ruleBuilder, Func`2<T, string> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Matches(IRuleBuilder`2<T, string> ruleBuilder, Regex regex);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Matches(IRuleBuilder`2<T, string> ruleBuilder, Func`2<T, Regex> regex);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Matches(IRuleBuilder`2<T, string> ruleBuilder, string expression, RegexOptions options);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> Matches(IRuleBuilder`2<T, string> ruleBuilder, Func`2<T, string> expression, RegexOptions options);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> EmailAddress(IRuleBuilder`2<T, string> ruleBuilder, EmailValidationMode mode);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> NotEqual(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty toCompare, IEqualityComparer comparer);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> NotEqual(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression, IEqualityComparer comparer);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Equal(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty toCompare, IEqualityComparer comparer);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Equal(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression, IEqualityComparer comparer);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Must(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`2<TProperty, bool> predicate);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Must(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`3<T, TProperty, bool> predicate);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Must(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`4<T, TProperty, PropertyValidatorContext, bool> predicate);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> MustAsync(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`3<TProperty, CancellationToken, Task`1<bool>> predicate);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> MustAsync(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`4<T, TProperty, CancellationToken, Task`1<bool>> predicate);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> MustAsync(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`5<T, TProperty, PropertyValidatorContext, CancellationToken, Task`1<bool>> predicate);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> LessThan(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> LessThan(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> LessThanOrEqualTo(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> LessThanOrEqualTo(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> GreaterThan(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> GreaterThan(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> GreaterThanOrEqualTo(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> GreaterThanOrEqualTo(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, TProperty valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> LessThan(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> LessThan(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> LessThan(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> LessThan(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> LessThanOrEqualTo(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> LessThanOrEqualTo(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> LessThanOrEqualTo(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> LessThanOrEqualTo(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> GreaterThan(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> GreaterThan(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> GreaterThan(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, TProperty>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> GreaterThan(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> expression);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> GreaterThanOrEqualTo(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, TProperty>> valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> GreaterThanOrEqualTo(IRuleBuilder`2<T, TProperty> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> GreaterThanOrEqualTo(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, Nullable`1<TProperty>>> valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> GreaterThanOrEqualTo(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, Expression`1<Func`2<T, TProperty>> valueToCompare);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> InclusiveBetween(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty from, TProperty to);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> InclusiveBetween(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, TProperty from, TProperty to);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> ExclusiveBetween(IRuleBuilder`2<T, TProperty> ruleBuilder, TProperty from, TProperty to);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<TProperty>> ExclusiveBetween(IRuleBuilder`2<T, Nullable`1<TProperty>> ruleBuilder, TProperty from, TProperty to);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> CreditCard(IRuleBuilder`2<T, string> ruleBuilder);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> IsInEnum(IRuleBuilder`2<T, TProperty> ruleBuilder);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, decimal> ScalePrecision(IRuleBuilder`2<T, decimal> ruleBuilder, int scale, int precision, bool ignoreTrailingZeros);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, Nullable`1<decimal>> ScalePrecision(IRuleBuilder`2<T, Nullable`1<decimal>> ruleBuilder, int scale, int precision, bool ignoreTrailingZeros);
    [ExtensionAttribute]
public static IRuleBuilderInitial`2<T, TProperty> Custom(IRuleBuilder`2<T, TProperty> ruleBuilder, Action`2<TProperty, CustomContext> action);
    [ExtensionAttribute]
public static IRuleBuilderInitial`2<T, TProperty> CustomAsync(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`4<TProperty, CustomContext, CancellationToken, Task> action);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, IEnumerable`1<TElement>> ForEach(IRuleBuilder`2<T, IEnumerable`1<TElement>> ruleBuilder, Action`1<IRuleBuilderInitialCollection`2<IEnumerable`1<TElement>, TElement>> action);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, string> IsEnumName(IRuleBuilder`2<T, string> ruleBuilder, Type enumType, bool caseSensitive);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> ChildRules(IRuleBuilder`2<T, TProperty> ruleBuilder, Action`1<InlineValidator`1<TProperty>> action);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> SetInheritanceValidator(IRuleBuilder`2<T, TProperty> ruleBuilder, Action`1<PolymorphicValidator`2<T, TProperty>> validatorConfiguration);
    private static string GetDisplayName(MemberInfo member, Expression`1<Func`2<T, TProperty>> expression);
    [ExtensionAttribute]
public static ValidationResult Validate(IValidator`1<T> validator, T instance, Action`1<ValidationStrategy`1<T>> options);
    [ExtensionAttribute]
public static Task`1<ValidationResult> ValidateAsync(IValidator`1<T> validator, T instance, Action`1<ValidationStrategy`1<T>> options, CancellationToken cancellation);
    [ExtensionAttribute]
public static void ValidateAndThrow(IValidator`1<T> validator, T instance);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.DefaultValidatorExtensions/<ValidateAndThrowAsync>d__69`1")]
[ExtensionAttribute]
public static Task ValidateAndThrowAsync(IValidator`1<T> validator, T instance, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead use Validate(instance, options => options.IncludeProperties(expressions))")]
public static ValidationResult Validate(IValidator`1<T> validator, T instance, Expression`1[] propertyExpressions);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead use Validate(instance, options => options.IncludeProperties(properties))")]
public static ValidationResult Validate(IValidator`1<T> validator, T instance, String[] properties);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead call Validate(instance, options => options.IncludeRuleSets("someRuleSet","anotherRuleSet")). Be sure to pass in separate strings rather than a comma-separated string.")]
public static ValidationResult Validate(IValidator`1<T> validator, T instance, IValidatorSelector selector, string ruleSet);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead use ValidateAsync(instance, options => options.IncludeProperties(expressions), cancellationToken)")]
public static Task`1<ValidationResult> ValidateAsync(IValidator`1<T> validator, T instance, CancellationToken cancellationToken, Expression`1[] propertyExpressions);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead use ValidateAsync(instance, options => options.IncludeProperties(properties), cancellationToken)")]
public static Task`1<ValidationResult> ValidateAsync(IValidator`1<T> validator, T instance, CancellationToken cancellationToken, String[] properties);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead call ValidateAsync(instance, options => options.IncludeRuleSets("someRuleSet","anotherRuleSet"), cancellationToken). Be sure to pass in separate strings rather than a comma-separated string.")]
public static Task`1<ValidationResult> ValidateAsync(IValidator`1<T> validator, T instance, CancellationToken cancellationToken, IValidatorSelector selector, string ruleSet);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead call Validate(instance, options => options.IncludeRuleSets("someRuleSet","anotherRuleSet").ThrowOnFailures()). Be sure to pass in separate strings rather than a comma-separated string for rulesets.")]
public static void ValidateAndThrow(IValidator`1<T> validator, T instance, string ruleSet);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.DefaultValidatorExtensions/<ValidateAndThrowAsync>d__77`1")]
[ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in FluentValidation 10. Instead call ValidateAsync(instance, options => options.IncludeRuleSets("someRuleSet","anotherRuleSet").ThrowOnFailures(), cancellationToken). Be sure to pass in separate strings rather than a comma-separated string for rulesets.")]
public static Task ValidateAndThrowAsync(IValidator`1<T> validator, T instance, string ruleSet, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class ServiceStack.FluentValidation.DefaultValidatorExtensionsServiceStack : object {
    [ExtensionAttribute]
public static void ValidateAndThrow(IValidator`1<T> validator, T instance, ApplyTo applyTo);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.DefaultValidatorExtensionsServiceStack/<ValidateAndThrowAsync>d__1`1")]
[ExtensionAttribute]
public static Task ValidateAndThrowAsync(IValidator`1<T> validator, T instance, ApplyTo applyTo, CancellationToken token);
}
[ExtensionAttribute]
public static class ServiceStack.FluentValidation.DefaultValidatorOptions : object {
    [ExtensionAttribute]
public static IRuleBuilderInitial`2<T, TProperty> Cascade(IRuleBuilderInitial`2<T, TProperty> ruleBuilder, CascadeMode cascadeMode);
    [ExtensionAttribute]
public static IRuleBuilderInitialCollection`2<T, TProperty> Cascade(IRuleBuilderInitialCollection`2<T, TProperty> ruleBuilder, CascadeMode cascadeMode);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> OnAnyFailure(IRuleBuilderOptions`2<T, TProperty> rule, Action`1<T> onFailure);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> OnAnyFailure(IRuleBuilderOptions`2<T, TProperty> rule, Action`2<T, IEnumerable`1<ValidationFailure>> onFailure);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithMessage(IRuleBuilderOptions`2<T, TProperty> rule, string errorMessage);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithMessage(IRuleBuilderOptions`2<T, TProperty> rule, Func`2<T, string> messageProvider);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithMessage(IRuleBuilderOptions`2<T, TProperty> rule, Func`3<T, TProperty, string> messageProvider);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithErrorCode(IRuleBuilderOptions`2<T, TProperty> rule, string errorCode);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> When(IRuleBuilderOptions`2<T, TProperty> rule, Func`2<T, bool> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> When(IRuleBuilderOptions`2<T, TProperty> rule, Func`3<T, ValidationContext`1<T>, bool> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Unless(IRuleBuilderOptions`2<T, TProperty> rule, Func`2<T, bool> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> Unless(IRuleBuilderOptions`2<T, TProperty> rule, Func`3<T, ValidationContext`1<T>, bool> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WhenAsync(IRuleBuilderOptions`2<T, TProperty> rule, Func`3<T, CancellationToken, Task`1<bool>> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WhenAsync(IRuleBuilderOptions`2<T, TProperty> rule, Func`4<T, ValidationContext`1<T>, CancellationToken, Task`1<bool>> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> UnlessAsync(IRuleBuilderOptions`2<T, TProperty> rule, Func`3<T, CancellationToken, Task`1<bool>> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> UnlessAsync(IRuleBuilderOptions`2<T, TProperty> rule, Func`4<T, ValidationContext`1<T>, CancellationToken, Task`1<bool>> predicate, ApplyConditionTo applyConditionTo);
    [ExtensionAttribute]
public static IRuleBuilderInitialCollection`2<T, TCollectionElement> Where(IRuleBuilderInitialCollection`2<T, TCollectionElement> rule, Func`2<TCollectionElement, bool> predicate);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> DependentRules(IRuleBuilderOptions`2<T, TProperty> rule, Action action);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithName(IRuleBuilderOptions`2<T, TProperty> rule, string overridePropertyName);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithName(IRuleBuilderOptions`2<T, TProperty> rule, Func`2<T, string> nameProvider);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> OverridePropertyName(IRuleBuilderOptions`2<T, TProperty> rule, string propertyName);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> OverridePropertyName(IRuleBuilderOptions`2<T, TProperty> rule, Expression`1<Func`2<T, object>> expr);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithState(IRuleBuilderOptions`2<T, TProperty> rule, Func`2<T, object> stateProvider);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithState(IRuleBuilderOptions`2<T, TProperty> rule, Func`3<T, TProperty, object> stateProvider);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithSeverity(IRuleBuilderOptions`2<T, TProperty> rule, Severity severity);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithSeverity(IRuleBuilderOptions`2<T, TProperty> rule, Func`2<T, Severity> severityProvider);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> WithSeverity(IRuleBuilderOptions`2<T, TProperty> rule, Func`3<T, TProperty, Severity> severityProvider);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> OnFailure(IRuleBuilderOptions`2<T, TProperty> rule, Action`1<T> onFailure);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> OnFailure(IRuleBuilderOptions`2<T, TProperty> rule, Action`2<T, PropertyValidatorContext> onFailure);
    [ExtensionAttribute]
public static IRuleBuilderOptions`2<T, TProperty> OnFailure(IRuleBuilderOptions`2<T, TProperty> rule, Action`3<T, PropertyValidatorContext, string> onFailure);
    [ExtensionAttribute]
public static IRuleBuilderInitialCollection`2<T, TCollectionElement> OverrideIndexer(IRuleBuilderInitialCollection`2<T, TCollectionElement> rule, Func`5<T, IEnumerable`1<TCollectionElement>, TCollectionElement, int, string> callback);
    [ExtensionAttribute]
public static string GetStringForValidator(ILanguageManager languageManager);
}
public interface ServiceStack.FluentValidation.ICommonContext {
    public object InstanceToValidate { get; }
    public object PropertyValue { get; }
    public ICommonContext ParentContext { get; }
    public abstract virtual object get_InstanceToValidate();
    public abstract virtual object get_PropertyValue();
    public abstract virtual ICommonContext get_ParentContext();
}
public interface ServiceStack.FluentValidation.IConditionBuilder {
    public abstract virtual void Otherwise(Action action);
}
public interface ServiceStack.FluentValidation.IDefaultValidator {
}
public class ServiceStack.FluentValidation.InlineValidator`1 : AbstractValidator`1<T> {
    public void Add(Func`2<InlineValidator`1<T>, IRuleBuilderOptions`2<T, TProperty>> ruleCreator);
}
public static class ServiceStack.FluentValidation.Internal.AccessorCache`1 : object {
    private static ConcurrentDictionary`2<Key<T>, Delegate> _cache;
    private static AccessorCache`1();
    public static Func`2<T, TProperty> GetCachedAccessor(MemberInfo member, Expression`1<Func`2<T, TProperty>> expression, bool bypassCache);
    public static void Clear();
}
internal class ServiceStack.FluentValidation.Internal.AsyncConditionBuilder`1 : object {
    private TrackingCollection`1<IValidationRule> _rules;
    public AsyncConditionBuilder`1(TrackingCollection`1<IValidationRule> rules);
    public IConditionBuilder WhenAsync(Func`4<T, ValidationContext`1<T>, CancellationToken, Task`1<bool>> predicate, Action action);
    public IConditionBuilder UnlessAsync(Func`4<T, ValidationContext`1<T>, CancellationToken, Task`1<bool>> predicate, Action action);
}
internal class ServiceStack.FluentValidation.Internal.AsyncConditionOtherwiseBuilder : object {
    private TrackingCollection`1<IValidationRule> _rules;
    private Func`3<IValidationContext, CancellationToken, Task`1<bool>> _condition;
    public AsyncConditionOtherwiseBuilder(TrackingCollection`1<IValidationRule> rules, Func`3<IValidationContext, CancellationToken, Task`1<bool>> condition);
    public virtual void Otherwise(Action action);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Internal.AsyncConditionOtherwiseBuilder/<<Otherwise>b__3_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <Otherwise>b__3_0(IValidationContext ctx, CancellationToken ct);
}
public class ServiceStack.FluentValidation.Internal.CollectionPropertyRule`2 : PropertyRule {
    [CompilerGeneratedAttribute]
private Func`2<TElement, bool> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`5<object, IEnumerable`1<TElement>, TElement, int, string> <IndexBuilder>k__BackingField;
    public Func`2<TElement, bool> Filter { get; public set; }
    public Func`5<object, IEnumerable`1<TElement>, TElement, int, string> IndexBuilder { get; public set; }
    public CollectionPropertyRule`2(MemberInfo member, Func`2<object, object> propertyFunc, LambdaExpression expression, Func`1<CascadeMode> cascadeModeThunk, Type typeToValidate, Type containerType);
    [CompilerGeneratedAttribute]
public Func`2<TElement, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<TElement, bool> value);
    [CompilerGeneratedAttribute]
public Func`5<object, IEnumerable`1<TElement>, TElement, int, string> get_IndexBuilder();
    [CompilerGeneratedAttribute]
public void set_IndexBuilder(Func`5<object, IEnumerable`1<TElement>, TElement, int, string> value);
    public static CollectionPropertyRule`2<T, TElement> Create(Expression`1<Func`2<T, IEnumerable`1<TElement>>> expression, Func`1<CascadeMode> cascadeModeThunk);
    internal static CollectionPropertyRule`2<T, TElement> CreateTransformed(Expression`1<Func`2<T, IEnumerable`1<TOriginal>>> expression, Func`2<TOriginal, TElement> transformer, Func`1<CascadeMode> cascadeModeThunk);
    internal static CollectionPropertyRule`2<T, TElement> CreateTransformed(Expression`1<Func`2<T, IEnumerable`1<TOriginal>>> expression, Func`3<T, TOriginal, TElement> transformer, Func`1<CascadeMode> cascadeModeThunk);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Internal.CollectionPropertyRule`2/<InvokePropertyValidatorAsync>d__12")]
protected virtual Task`1<IEnumerable`1<ValidationFailure>> InvokePropertyValidatorAsync(IValidationContext context, IPropertyValidator validator, string propertyName, CancellationToken cancellation);
    private string InferPropertyName(LambdaExpression expression);
    protected virtual IEnumerable`1<ValidationFailure> InvokePropertyValidator(IValidationContext context, IPropertyValidator validator, string propertyName);
    internal virtual object GetPropertyValue(object instanceToValidate);
}
public static class ServiceStack.FluentValidation.Internal.Comparer : object {
    public static bool TryCompare(IComparable value, IComparable valueToCompare, Int32& result);
    private static void Compare(IComparable value, IComparable valueToCompare, Int32& result);
    public static int GetComparisonResult(IComparable value, IComparable valueToCompare);
    public static bool GetEqualsResult(IComparable value, IComparable valueToCompare);
}
internal class ServiceStack.FluentValidation.Internal.CompositeValidatorSelector : object {
    private IEnumerable`1<IValidatorSelector> _selectors;
    public CompositeValidatorSelector(IEnumerable`1<IValidatorSelector> selectors);
    public sealed virtual bool CanExecute(IValidationRule rule, string propertyPath, IValidationContext context);
}
internal class ServiceStack.FluentValidation.Internal.ConditionBuilder`1 : object {
    private TrackingCollection`1<IValidationRule> _rules;
    public ConditionBuilder`1(TrackingCollection`1<IValidationRule> rules);
    public IConditionBuilder When(Func`3<T, ValidationContext`1<T>, bool> predicate, Action action);
    public IConditionBuilder Unless(Func`3<T, ValidationContext`1<T>, bool> predicate, Action action);
}
internal class ServiceStack.FluentValidation.Internal.ConditionOtherwiseBuilder : object {
    private TrackingCollection`1<IValidationRule> _rules;
    private Func`2<IValidationContext, bool> _condition;
    public ConditionOtherwiseBuilder(TrackingCollection`1<IValidationRule> rules, Func`2<IValidationContext, bool> condition);
    public virtual void Otherwise(Action action);
    [CompilerGeneratedAttribute]
private bool <Otherwise>b__3_0(IValidationContext ctx);
}
public class ServiceStack.FluentValidation.Internal.DefaultValidatorSelector : object {
    public sealed virtual bool CanExecute(IValidationRule rule, string propertyPath, IValidationContext context);
}
internal static class ServiceStack.FluentValidation.Internal.DisplayNameCache : object {
    private static ConcurrentDictionary`2<MemberInfo, Func`1<string>> _cache;
    private static DisplayNameCache();
    public static string GetCachedDisplayName(MemberInfo member);
    public static void Clear();
    private static Func`1<string> GetDisplayName(MemberInfo member);
}
[ExtensionAttribute]
public static class ServiceStack.FluentValidation.Internal.Extensions : object {
    [ExtensionAttribute]
internal static void Guard(object obj, string message, string paramName);
    [ExtensionAttribute]
internal static void Guard(string str, string message, string paramName);
    [ExtensionAttribute]
public static bool IsParameterExpression(LambdaExpression expression);
    [ExtensionAttribute]
public static MemberInfo GetMember(LambdaExpression expression);
    [ExtensionAttribute]
public static MemberInfo GetMember(Expression`1<Func`2<T, TProperty>> expression);
    private static Expression RemoveUnary(Expression toUnwrap);
    [ExtensionAttribute]
public static string SplitPascalCase(string input);
    internal static Expression`1<Func`2<T, TProperty>> GetConstantExpressionFromConstant(TProperty valueToCompare);
    [ExtensionAttribute]
internal static void ForEach(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static Func`2<object, object> CoerceToNonGeneric(Func`2<T, TProperty> func);
    [ExtensionAttribute]
public static Func`2<object, bool> CoerceToNonGeneric(Func`2<T, bool> func);
    [ExtensionAttribute]
public static Func`3<object, CancellationToken, Task`1<bool>> CoerceToNonGeneric(Func`3<T, CancellationToken, Task`1<bool>> func);
    [ExtensionAttribute]
public static Func`2<object, Task`1<bool>> CoerceToNonGeneric(Func`2<T, Task`1<bool>> func);
    [ExtensionAttribute]
public static Func`2<object, int> CoerceToNonGeneric(Func`2<T, int> func);
    [ExtensionAttribute]
public static Func`2<object, long> CoerceToNonGeneric(Func`2<T, long> func);
    [ExtensionAttribute]
public static Func`2<object, string> CoerceToNonGeneric(Func`2<T, string> func);
    [ExtensionAttribute]
public static Func`2<object, Regex> CoerceToNonGeneric(Func`2<T, Regex> func);
    [ExtensionAttribute]
public static Action`1<object> CoerceToNonGeneric(Action`1<T> action);
    [ExtensionAttribute]
public static bool IsAsync(IValidationContext ctx);
    [ExtensionAttribute]
internal static T GetOrAdd(IDictionary`2<string, object> dict, string key, Func`1<T> value);
}
public interface ServiceStack.FluentValidation.Internal.IConfigurable`2 {
    public abstract virtual TNext Configure(Action`1<TConfiguration> configurator);
}
internal interface ServiceStack.FluentValidation.Internal.IExposesParentValidator`1 {
    public IValidator`1<T> ParentValidator { get; }
    public abstract virtual IValidator`1<T> get_ParentValidator();
}
public interface ServiceStack.FluentValidation.Internal.IIncludeRule {
}
public class ServiceStack.FluentValidation.Internal.IncludeRule`1 : PropertyRule {
    public IncludeRule`1(IValidator`1<T> validator, Func`1<CascadeMode> cascadeModeThunk, Type typeToValidate, Type containerType);
    public IncludeRule`1(Func`2<ICommonContext, IValidator`1<T>> func, Func`1<CascadeMode> cascadeModeThunk, Type typeToValidate, Type containerType, Type validatorType);
    public static IncludeRule`1<T> Create(IValidator`1<T> validator, Func`1<CascadeMode> cascadeModeThunk);
    public static IncludeRule`1<T> Create(Func`2<T, TValidator> func, Func`1<CascadeMode> cascadeModeThunk);
    public virtual IEnumerable`1<ValidationFailure> Validate(IValidationContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Internal.IncludeRule`1/<ValidateAsync>d__5")]
public virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(IValidationContext context, CancellationToken cancellation);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<ValidationFailure>> <>n__0(IValidationContext context, CancellationToken cancellation);
}
public interface ServiceStack.FluentValidation.Internal.IValidatorSelector {
    public abstract virtual bool CanExecute(IValidationRule rule, string propertyPath, IValidationContext context);
}
public class ServiceStack.FluentValidation.Internal.MemberAccessor`2 : object {
    private Expression`1<Func`2<TObject, TValue>> getExpression;
    private Func`2<TObject, TValue> getter;
    private Action`2<TObject, TValue> setter;
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    public MemberInfo Member { get; private set; }
    public MemberAccessor`2(Expression`1<Func`2<TObject, TValue>> getExpression, bool writeable);
    private static Expression`1<Action`2<TObject, TValue>> CreateSetExpression(Expression`1<Func`2<TObject, TValue>> getExpression);
    [CompilerGeneratedAttribute]
public MemberInfo get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(MemberInfo value);
    public TValue Get(TObject target);
    public void Set(TObject target, TValue value);
    protected bool Equals(MemberAccessor`2<TObject, TValue> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Expression`1<Func`2<TObject, TValue>> op_Implicit(MemberAccessor`2<TObject, TValue> this);
    public static MemberAccessor`2<TObject, TValue> op_Implicit(Expression`1<Func`2<TObject, TValue>> this);
}
public class ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector : object {
    internal static string DisableCascadeKey;
    private IEnumerable`1<string> _memberNames;
    public IEnumerable`1<string> MemberNames { get; }
    public MemberNameValidatorSelector(IEnumerable`1<string> memberNames);
    public IEnumerable`1<string> get_MemberNames();
    public sealed virtual bool CanExecute(IValidationRule rule, string propertyPath, IValidationContext context);
    [ObsoleteAttribute("This method will be removed from FluentValidation in 10.0")]
public static MemberNameValidatorSelector FromExpressions(Expression`1[] propertyExpressions);
    public static String[] MemberNamesFromExpressions(Expression`1[] propertyExpressions);
    private static string MemberFromExpression(Expression`1<Func`2<T, object>> expression);
}
public class ServiceStack.FluentValidation.Internal.MessageBuilderContext : object {
    private PropertyValidatorContext _innerContext;
    [CompilerGeneratedAttribute]
private IPropertyValidator <PropertyValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringSource <ErrorSource>k__BackingField;
    public IPropertyValidator PropertyValidator { get; }
    [ObsoleteAttribute("This property is deprecated and will be removed in FluentValidation 10.")]
public IStringSource ErrorSource { get; }
    public IValidationContext ParentContext { get; }
    public PropertyRule Rule { get; }
    public string PropertyName { get; }
    public string DisplayName { get; }
    public MessageFormatter MessageFormatter { get; }
    public object InstanceToValidate { get; }
    public object PropertyValue { get; }
    private ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get; }
    [ObsoleteAttribute("This constructor will be removed in FluentValidation 10. Use the other one instead.")]
public MessageBuilderContext(PropertyValidatorContext innerContext, IStringSource errorSource, IPropertyValidator propertyValidator);
    public MessageBuilderContext(PropertyValidatorContext innerContext, IPropertyValidator propertyValidator);
    [CompilerGeneratedAttribute]
public IPropertyValidator get_PropertyValidator();
    [CompilerGeneratedAttribute]
public IStringSource get_ErrorSource();
    public IValidationContext get_ParentContext();
    public PropertyRule get_Rule();
    public string get_PropertyName();
    public string get_DisplayName();
    public MessageFormatter get_MessageFormatter();
    public sealed virtual object get_InstanceToValidate();
    public sealed virtual object get_PropertyValue();
    private sealed virtual override ICommonContext ServiceStack.FluentValidation.ICommonContext.get_ParentContext();
    public string GetDefaultMessage();
    public static PropertyValidatorContext op_Implicit(MessageBuilderContext ctx);
}
public class ServiceStack.FluentValidation.Internal.MessageFormatter : object {
    private Dictionary`2<string, object> _placeholderValues;
    private Object[] _additionalArguments;
    private bool _shouldUseAdditionalArgs;
    private static Regex _keyRegex;
    public static string PropertyName;
    public static string PropertyValue;
    [ObsoleteAttribute("AdditionalArguments will be removed in FluentValidation 10. Please construct your error message with a function instead.")]
public Object[] AdditionalArguments { get; }
    public Dictionary`2<string, object> PlaceholderValues { get; }
    private static MessageFormatter();
    public MessageFormatter AppendArgument(string name, object value);
    public MessageFormatter AppendPropertyName(string name);
    public MessageFormatter AppendPropertyValue(object value);
    [ObsoleteAttribute("AppendAdditionalArguments will be removed in FluentValidation 10. Please construct your error message with a function instead.")]
public MessageFormatter AppendAdditionalArguments(Object[] additionalArgs);
    public virtual string BuildMessage(string messageTemplate);
    public Object[] get_AdditionalArguments();
    public Dictionary`2<string, object> get_PlaceholderValues();
    protected virtual string ReplacePlaceholdersWithValues(string template, IDictionary`2<string, object> values);
}
public class ServiceStack.FluentValidation.Internal.PropertyChain : object {
    private List`1<string> _memberNames;
    public int Count { get; }
    public PropertyChain(PropertyChain parent);
    public PropertyChain(IEnumerable`1<string> memberNames);
    public static PropertyChain FromExpression(LambdaExpression expression);
    public void Add(MemberInfo member);
    public void Add(string propertyName);
    public void AddIndexer(object indexer, bool surroundWithBrackets);
    public virtual string ToString();
    public bool IsChildChainOf(PropertyChain parentChain);
    public string BuildPropertyName(string propertyName);
    public int get_Count();
}
public class ServiceStack.FluentValidation.Internal.PropertyRule : object {
    private List`1<IPropertyValidator> _validators;
    private Func`1<CascadeMode> _cascadeModeThunk;
    private string _propertyDisplayName;
    private string _propertyName;
    private String[] _ruleSet;
    private Func`2<IValidationContext, bool> _condition;
    private Func`3<IValidationContext, CancellationToken, Task`1<bool>> _asyncCondition;
    private IStringSource _displayNameSource;
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <PropertyFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<object, IEnumerable`1<ValidationFailure>> <OnFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TypeToValidate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MessageBuilderContext, string> <MessageBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IValidationRule> <DependentRules>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <Transformer>k__BackingField;
    [ObsoleteAttribute("This property will not be accessible in FluentValidation 10. Use HasCondition/HasAsyncCondition to check if the rule has a condition defined")]
public Func`2<IValidationContext, bool> Condition { get; }
    [ObsoleteAttribute("This property will not be accessible in FluentValidation 10. Use HasCondition/HasAsyncCondition to check if the rule has a condition defined")]
public Func`3<IValidationContext, CancellationToken, Task`1<bool>> AsyncCondition { get; }
    public bool HasCondition { get; }
    public bool HasAsyncCondition { get; }
    public MemberInfo Member { get; }
    public Func`2<object, object> PropertyFunc { get; }
    public LambdaExpression Expression { get; }
    [ObsoleteAttribute("This property is deprecated and will be removed in FluentValidation 10. Use the GetDisplayName and SetDisplayName instead.")]
public IStringSource DisplayName { get; public set; }
    public String[] RuleSets { get; public set; }
    public Action`2<object, IEnumerable`1<ValidationFailure>> OnFailure { get; public set; }
    public IPropertyValidator CurrentValidator { get; }
    public Type TypeToValidate { get; }
    public CascadeMode CascadeMode { get; public set; }
    public IEnumerable`1<IPropertyValidator> Validators { get; }
    public string PropertyName { get; public set; }
    public Func`2<MessageBuilderContext, string> MessageBuilder { get; public set; }
    public List`1<IValidationRule> DependentRules { get; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10")]
public Func`2<object, object> Transformer { get; public set; }
    public PropertyRule(MemberInfo member, Func`2<object, object> propertyFunc, LambdaExpression expression, Func`1<CascadeMode> cascadeModeThunk, Type typeToValidate, Type containerType);
    public Func`2<IValidationContext, bool> get_Condition();
    public Func`3<IValidationContext, CancellationToken, Task`1<bool>> get_AsyncCondition();
    public bool get_HasCondition();
    public bool get_HasAsyncCondition();
    [CompilerGeneratedAttribute]
public MemberInfo get_Member();
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_PropertyFunc();
    [CompilerGeneratedAttribute]
public LambdaExpression get_Expression();
    public IStringSource get_DisplayName();
    public void set_DisplayName(IStringSource value);
    public void SetDisplayName(string name);
    public void SetDisplayName(Func`2<IValidationContext, string> factory);
    public sealed virtual String[] get_RuleSets();
    public sealed virtual void set_RuleSets(String[] value);
    [CompilerGeneratedAttribute]
public Action`2<object, IEnumerable`1<ValidationFailure>> get_OnFailure();
    [CompilerGeneratedAttribute]
public void set_OnFailure(Action`2<object, IEnumerable`1<ValidationFailure>> value);
    public IPropertyValidator get_CurrentValidator();
    [CompilerGeneratedAttribute]
public Type get_TypeToValidate();
    public CascadeMode get_CascadeMode();
    public void set_CascadeMode(CascadeMode value);
    public sealed virtual IEnumerable`1<IPropertyValidator> get_Validators();
    public static PropertyRule Create(Expression`1<Func`2<T, TProperty>> expression);
    public static PropertyRule Create(Expression`1<Func`2<T, TProperty>> expression, Func`1<CascadeMode> cascadeModeThunk, bool bypassCache);
    internal static PropertyRule Create(Expression`1<Func`2<T, TProperty>> expression, Func`2<TProperty, TTransformed> transformer, Func`1<CascadeMode> cascadeModeThunk, bool bypassCache);
    internal static PropertyRule Create(Expression`1<Func`2<T, TProperty>> expression, Func`3<T, TProperty, TTransformed> transformer, Func`1<CascadeMode> cascadeModeThunk, bool bypassCache);
    public void AddValidator(IPropertyValidator validator);
    public void ReplaceValidator(IPropertyValidator original, IPropertyValidator newValidator);
    public void RemoveValidator(IPropertyValidator original);
    public void ClearValidators();
    public string get_PropertyName();
    public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Func`2<MessageBuilderContext, string> get_MessageBuilder();
    [CompilerGeneratedAttribute]
public void set_MessageBuilder(Func`2<MessageBuilderContext, string> value);
    [CompilerGeneratedAttribute]
public List`1<IValidationRule> get_DependentRules();
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Transformer();
    [CompilerGeneratedAttribute]
public void set_Transformer(Func`2<object, object> value);
    [ObsoleteAttribute("Calling GetDisplayName without a context parameter is deprecated and will be removed in FluentValidation 10. If you really need this behaviour, you can call the overload that takes a context but pass in null.")]
public string GetDisplayName();
    public string GetDisplayName(ICommonContext context);
    [IteratorStateMachineAttribute("ServiceStack.FluentValidation.Internal.PropertyRule/<Validate>d__72")]
public virtual IEnumerable`1<ValidationFailure> Validate(IValidationContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Internal.PropertyRule/<ValidateAsync>d__73")]
public virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(IValidationContext context, CancellationToken cancellation);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Internal.PropertyRule/<RunDependentRulesAsync>d__74")]
private Task`1<IEnumerable`1<ValidationFailure>> RunDependentRulesAsync(IValidationContext context, CancellationToken cancellation);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Internal.PropertyRule/<InvokePropertyValidatorAsync>d__75")]
protected virtual Task`1<IEnumerable`1<ValidationFailure>> InvokePropertyValidatorAsync(IValidationContext context, IPropertyValidator validator, string propertyName, CancellationToken cancellation);
    protected virtual IEnumerable`1<ValidationFailure> InvokePropertyValidator(IValidationContext context, IPropertyValidator validator, string propertyName);
    internal virtual object GetPropertyValue(object instanceToValidate);
    public sealed virtual void ApplyCondition(Func`2<PropertyValidatorContext, bool> predicate, ApplyConditionTo applyConditionTo);
    public sealed virtual void ApplyAsyncCondition(Func`3<PropertyValidatorContext, CancellationToken, Task`1<bool>> predicate, ApplyConditionTo applyConditionTo);
    public sealed virtual void ApplySharedCondition(Func`2<IValidationContext, bool> condition);
    public sealed virtual void ApplySharedAsyncCondition(Func`3<IValidationContext, CancellationToken, Task`1<bool>> condition);
}
public class ServiceStack.FluentValidation.Internal.RuleBuilder`2 : object {
    [CompilerGeneratedAttribute]
private PropertyRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidator`1<T> <ParentValidator>k__BackingField;
    public PropertyRule Rule { get; }
    public IValidator`1<T> ParentValidator { get; }
    public RuleBuilder`2(PropertyRule rule, IValidator`1<T> parent);
    [CompilerGeneratedAttribute]
public PropertyRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IValidator`1<T> get_ParentValidator();
    public sealed virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(IPropertyValidator validator);
    public sealed virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(IValidator`1<TProperty> validator, String[] ruleSets);
    public sealed virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(Func`2<T, TValidator> validatorProvider, String[] ruleSets);
    public sealed virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(Func`3<T, TProperty, TValidator> validatorProvider, String[] ruleSets);
    public IRuleBuilderOptions`2<T, TProperty> SetValidator(Func`2<ICommonContext, TValidator> validatorProvider);
    private sealed virtual override IRuleBuilderOptions`2<T, TProperty> ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule,ServiceStack.FluentValidation.IRuleBuilderOptions<T,TProperty>>.Configure(Action`1<PropertyRule> configurator);
    private sealed virtual override IRuleBuilderInitial`2<T, TProperty> ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule,ServiceStack.FluentValidation.IRuleBuilderInitial<T,TProperty>>.Configure(Action`1<PropertyRule> configurator);
    private sealed virtual override IRuleBuilderInitialCollection`2<T, TProperty> ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.CollectionPropertyRule<T,TProperty>,ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T,TProperty>>.Configure(Action`1<CollectionPropertyRule`2<T, TProperty>> configurator);
    [ObsoleteAttribute("Use RuleFor(x => x.Property, transformer) instead. This method will be removed in FluentValidation 10.")]
public sealed virtual IRuleBuilderInitial`2<T, TNew> Transform(Func`2<TProperty, TNew> transformationFunc);
}
public class ServiceStack.FluentValidation.Internal.RulesetValidatorSelector : object {
    private String[] _rulesetsToExecute;
    public static string DefaultRuleSetName;
    public static string WildcardRuleSetName;
    public String[] RuleSets { get; }
    public RulesetValidatorSelector(String[] rulesetsToExecute);
    public String[] get_RuleSets();
    public virtual bool CanExecute(IValidationRule rule, string propertyPath, IValidationContext context);
    protected bool IsIncludeRule(IValidationRule rule);
    internal static String[] LegacyRulesetSplit(string ruleSet);
}
internal class ServiceStack.FluentValidation.Internal.TrackingCollection`1 : object {
    private List`1<T> _innerCollection;
    [CompilerGeneratedAttribute]
private Action`1<T> ItemAdded;
    private Action`1<T> _capture;
    public int Count { get; }
    [CompilerGeneratedAttribute]
public void add_ItemAdded(Action`1<T> value);
    [CompilerGeneratedAttribute]
public void remove_ItemAdded(Action`1<T> value);
    public void Add(T item);
    public int get_Count();
    public void Remove(T item);
    public IDisposable OnItemAdded(Action`1<T> onItemAdded);
    internal IDisposable Capture(Action`1<T> onItemAdded);
    public void AddRange(IEnumerable`1<T> collection);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class ServiceStack.FluentValidation.Internal.ValidationStrategy`1 : object {
    private List`1<string> _properties;
    private List`1<string> _ruleSets;
    private bool _throw;
    private IValidatorSelector _customSelector;
    public ValidationStrategy`1<T> IncludeProperties(String[] properties);
    public ValidationStrategy`1<T> IncludeProperties(Expression`1[] propertyExpressions);
    public ValidationStrategy`1<T> IncludeRulesNotInRuleSet();
    public ValidationStrategy`1<T> IncludeAllRuleSets();
    public ValidationStrategy`1<T> IncludeRuleSets(String[] ruleSets);
    public ValidationStrategy`1<T> UseCustomSelector(IValidatorSelector selector);
    public ValidationStrategy`1<T> ThrowOnFailures();
    private IValidatorSelector GetSelector();
    internal ValidationContext`1<T> BuildContext(T instance);
}
public interface ServiceStack.FluentValidation.IParameterValidatorFactory {
    public abstract virtual IValidator GetValidator(ParameterInfo parameterInfo);
}
public interface ServiceStack.FluentValidation.IRuleBuilder`2 {
    public abstract virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(IPropertyValidator validator);
    public abstract virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(IValidator`1<TProperty> validator, String[] ruleSets);
    public abstract virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(Func`2<T, TValidator> validatorProvider, String[] ruleSets);
    public abstract virtual IRuleBuilderOptions`2<T, TProperty> SetValidator(Func`3<T, TProperty, TValidator> validatorProvider, String[] ruleSets);
}
public interface ServiceStack.FluentValidation.IRuleBuilderInitial`2 {
    [ObsoleteAttribute("Use Transform(x => x.Property, transformer) at the root level instead. This method will be removed in FluentValidation 10.")]
public abstract virtual IRuleBuilderInitial`2<T, TNew> Transform(Func`2<TProperty, TNew> transformationFunc);
}
public interface ServiceStack.FluentValidation.IRuleBuilderInitialCollection`2 {
    [ObsoleteAttribute("Use TransformForEach(x => x.Property, transformer) at the root level instead. This method will be removed in FluentValidation 10.")]
public abstract virtual IRuleBuilderInitial`2<T, TNew> Transform(Func`2<TElement, TNew> transformationFunc);
}
public interface ServiceStack.FluentValidation.IRuleBuilderOptions`2 {
}
public interface ServiceStack.FluentValidation.IServiceStackValidator {
    public abstract virtual void RemovePropertyRules(Func`2<PropertyRule, bool> where);
}
public interface ServiceStack.FluentValidation.IValidationContext {
    public IDictionary`2<string, object> RootContextData { get; }
    public PropertyChain PropertyChain { get; }
    public IValidatorSelector Selector { get; }
    public bool IsChildContext { get; }
    public bool IsChildCollectionContext { get; }
    public IRequest Request { get; public set; }
    public abstract virtual IDictionary`2<string, object> get_RootContextData();
    public abstract virtual PropertyChain get_PropertyChain();
    public abstract virtual IValidatorSelector get_Selector();
    public abstract virtual bool get_IsChildContext();
    public abstract virtual bool get_IsChildCollectionContext();
    public abstract virtual IRequest get_Request();
    public abstract virtual void set_Request(IRequest value);
}
public interface ServiceStack.FluentValidation.IValidationRule {
    public IEnumerable`1<IPropertyValidator> Validators { get; }
    public String[] RuleSets { get; public set; }
    public abstract virtual IEnumerable`1<IPropertyValidator> get_Validators();
    public abstract virtual String[] get_RuleSets();
    public abstract virtual void set_RuleSets(String[] value);
    public abstract virtual IEnumerable`1<ValidationFailure> Validate(IValidationContext context);
    public abstract virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(IValidationContext context, CancellationToken cancellation);
    public abstract virtual void ApplyCondition(Func`2<PropertyValidatorContext, bool> predicate, ApplyConditionTo applyConditionTo);
    public abstract virtual void ApplyAsyncCondition(Func`3<PropertyValidatorContext, CancellationToken, Task`1<bool>> predicate, ApplyConditionTo applyConditionTo);
    public abstract virtual void ApplySharedCondition(Func`2<IValidationContext, bool> condition);
    public abstract virtual void ApplySharedAsyncCondition(Func`3<IValidationContext, CancellationToken, Task`1<bool>> condition);
}
public interface ServiceStack.FluentValidation.IValidator {
    public abstract virtual ValidationResult Validate(IValidationContext context);
    public abstract virtual Task`1<ValidationResult> ValidateAsync(IValidationContext context, CancellationToken cancellation);
    public abstract virtual IValidatorDescriptor CreateDescriptor();
    public abstract virtual bool CanValidateInstancesOfType(Type type);
}
public interface ServiceStack.FluentValidation.IValidator`1 {
    public CascadeMode CascadeMode { get; public set; }
    public abstract virtual ValidationResult Validate(T instance);
    public abstract virtual Task`1<ValidationResult> ValidateAsync(T instance, CancellationToken cancellation);
    public abstract virtual CascadeMode get_CascadeMode();
    public abstract virtual void set_CascadeMode(CascadeMode value);
}
public interface ServiceStack.FluentValidation.IValidatorDescriptor {
    public abstract virtual string GetName(string property);
    public abstract virtual ILookup`2<string, IPropertyValidator> GetMembersWithValidators();
    public abstract virtual IEnumerable`1<IPropertyValidator> GetValidatorsForMember(string name);
    public abstract virtual IEnumerable`1<IValidationRule> GetRulesForMember(string name);
}
public interface ServiceStack.FluentValidation.IValidatorFactory {
    public abstract virtual IValidator`1<T> GetValidator();
    public abstract virtual IValidator GetValidator(Type type);
}
public class ServiceStack.FluentValidation.PropertyValidatorOptions : object {
    private IStringSource _errorSource;
    private IStringSource _errorCodeSource;
    [CompilerGeneratedAttribute]
private Func`2<PropertyValidatorContext, bool> <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<PropertyValidatorContext, CancellationToken, Task`1<bool>> <AsyncCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<PropertyValidatorContext, object> <CustomStateProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<PropertyValidatorContext, Severity> <SeverityProvider>k__BackingField;
    [ObsoleteAttribute("The Condition property will not be accessible in FluentValidation 10. Use the HasCondition property to check if a condition is set.")]
public Func`2<PropertyValidatorContext, bool> Condition { get; private set; }
    [ObsoleteAttribute("The AsyncCondition property will not be accessible in FluentValidation 10. Use the HasAsyncCondition property to check if a condition is set.")]
public Func`3<PropertyValidatorContext, CancellationToken, Task`1<bool>> AsyncCondition { get; private set; }
    public bool HasCondition { get; }
    public bool HasAsyncCondition { get; }
    public Func`2<PropertyValidatorContext, object> CustomStateProvider { get; public set; }
    public Func`2<PropertyValidatorContext, Severity> SeverityProvider { get; public set; }
    public string ErrorCode { get; public set; }
    [ObsoleteAttribute("ErrorMessageSource is deprecated and will be removed in FluentValidation 10. Please use SetErrorMessage and GetErrorMessageTemplate instead.")]
public IStringSource ErrorMessageSource { get; public set; }
    [ObsoleteAttribute("ErrorCodeSource is deprecated and will be removed FluentValidation 10. Please use the ErrorCode property instead.")]
public IStringSource ErrorCodeSource { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<PropertyValidatorContext, bool> get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(Func`2<PropertyValidatorContext, bool> value);
    [CompilerGeneratedAttribute]
public Func`3<PropertyValidatorContext, CancellationToken, Task`1<bool>> get_AsyncCondition();
    [CompilerGeneratedAttribute]
private void set_AsyncCondition(Func`3<PropertyValidatorContext, CancellationToken, Task`1<bool>> value);
    public bool get_HasCondition();
    public bool get_HasAsyncCondition();
    public void ApplyCondition(Func`2<PropertyValidatorContext, bool> condition);
    public void ApplyAsyncCondition(Func`3<PropertyValidatorContext, CancellationToken, Task`1<bool>> condition);
    internal bool InvokeCondition(PropertyValidatorContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.PropertyValidatorOptions/<InvokeAsyncCondition>d__17")]
internal Task`1<bool> InvokeAsyncCondition(PropertyValidatorContext context, CancellationToken token);
    [CompilerGeneratedAttribute]
public Func`2<PropertyValidatorContext, object> get_CustomStateProvider();
    [CompilerGeneratedAttribute]
public void set_CustomStateProvider(Func`2<PropertyValidatorContext, object> value);
    [CompilerGeneratedAttribute]
public Func`2<PropertyValidatorContext, Severity> get_SeverityProvider();
    [CompilerGeneratedAttribute]
public void set_SeverityProvider(Func`2<PropertyValidatorContext, Severity> value);
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    public IStringSource get_ErrorMessageSource();
    public void set_ErrorMessageSource(IStringSource value);
    public IStringSource get_ErrorCodeSource();
    public void set_ErrorCodeSource(IStringSource value);
    protected virtual string GetDefaultMessageTemplate();
    public string GetErrorMessageTemplate(PropertyValidatorContext context);
    public void SetErrorMessage(Func`2<PropertyValidatorContext, string> errorFactory);
    public void SetErrorMessage(string errorMessage);
}
internal class ServiceStack.FluentValidation.Resources.AlbanianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.ArabicLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
[ObsoleteAttribute("Remove for FV10")]
internal class ServiceStack.FluentValidation.Resources.BackwardsCompatibleStringSource`1 : object {
    [CompilerGeneratedAttribute]
private Func`2<TContext, string> <Factory>k__BackingField;
    public Func`2<TContext, string> Factory { get; }
    public BackwardsCompatibleStringSource`1(Func`2<TContext, string> factory);
    [CompilerGeneratedAttribute]
public Func`2<TContext, string> get_Factory();
    public sealed virtual string GetString(ICommonContext context);
}
internal class ServiceStack.FluentValidation.Resources.BengaliLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.BosnianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.ChineseSimplifiedLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.ChineseTraditionalLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.CroatianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.CzechLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.DanishLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.DutchLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.EnglishLanguage : object {
    public static string Culture;
    public static string AmericanCulture;
    public static string BritishCulture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.FinnishLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
public class ServiceStack.FluentValidation.Resources.FluentValidationMessageFormatException : Exception {
    public FluentValidationMessageFormatException(string message);
    public FluentValidationMessageFormatException(string message, Exception innerException);
}
internal class ServiceStack.FluentValidation.Resources.FrenchLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
[ObsoleteAttribute]
internal class ServiceStack.FluentValidation.Resources.GenericLanguage : Language {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public GenericLanguage(string name);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
}
internal class ServiceStack.FluentValidation.Resources.GeorgianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.GermanLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.GreekLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.HebrewLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.HindiLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.HungarianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.IcelandicLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
public interface ServiceStack.FluentValidation.Resources.IContextAwareStringSource {
}
public interface ServiceStack.FluentValidation.Resources.ILanguageManager {
    public bool Enabled { get; public set; }
    public CultureInfo Culture { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual void set_Culture(CultureInfo value);
    public abstract virtual string GetString(string key, CultureInfo culture);
}
internal class ServiceStack.FluentValidation.Resources.IndonesianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
[ObsoleteAttribute("IStringSource is deprecated and will be removed in FluentValidation 10.")]
public interface ServiceStack.FluentValidation.Resources.IStringSource {
    public abstract virtual string GetString(ICommonContext context);
}
internal class ServiceStack.FluentValidation.Resources.ItalianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.JapaneseLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.KoreanLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
[ObsoleteAttribute("The Language class is no longer used and will be removed in FluentValidation 10.")]
public abstract class ServiceStack.FluentValidation.Resources.Language : object {
    private Dictionary`2<string, string> _translations;
    public string Name { get; }
    public abstract virtual string get_Name();
    public virtual void Translate(string key, string message);
    public void Translate(string message);
    public virtual string GetTranslation(string key);
    internal IEnumerable`1<string> GetSupportedKeys();
}
public class ServiceStack.FluentValidation.Resources.LanguageManager : object {
    private ConcurrentDictionary`2<string, string> _languages;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    public bool Enabled { get; public set; }
    public CultureInfo Culture { get; public set; }
    private static string GetTranslation(string culture, string key);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Culture(CultureInfo value);
    public void Clear();
    public virtual string GetString(string key, CultureInfo culture);
    public void AddTranslation(string language, string key, string message);
}
[ObsoleteAttribute("LanguageStringSource is deprecated and will be removed in FluentValidation 10. Use a Func<PropertyValidatorContext, string> instead.")]
public class ServiceStack.FluentValidation.Resources.LanguageStringSource : object {
    private string _key;
    [CompilerGeneratedAttribute]
private Func`2<ICommonContext, string> <ErrorCodeFunc>k__BackingField;
    internal Func`2<ICommonContext, string> ErrorCodeFunc { get; internal set; }
    public LanguageStringSource(string key);
    public LanguageStringSource(Func`2<ICommonContext, string> errorCodeFunc, string fallbackKey);
    [CompilerGeneratedAttribute]
internal Func`2<ICommonContext, string> get_ErrorCodeFunc();
    [CompilerGeneratedAttribute]
internal void set_ErrorCodeFunc(Func`2<ICommonContext, string> value);
    public virtual string GetString(ICommonContext context);
}
[ObsoleteAttribute("LazyStringSource is deprecated and will be removed in FluentValidation 10. Use a Func<PropertyValidatorContext, string> instead.")]
public class ServiceStack.FluentValidation.Resources.LazyStringSource : object {
    private Func`2<ICommonContext, string> _stringProvider;
    public LazyStringSource(Func`2<ICommonContext, string> stringProvider);
    public sealed virtual string GetString(ICommonContext context);
}
internal class ServiceStack.FluentValidation.Resources.MacedonianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.NorwegianBokmalLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.PersianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.PolishLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.PortugueseBrazilLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.PortugueseLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.RomanianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.RussianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.SerbianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.SlovakLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.SlovenianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.SpanishLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
[ObsoleteAttribute("StaticStringSource is deprecated and will be removed in FluentValidation 10. Use a Func<PropertyValidatorContext, string> instead.")]
public class ServiceStack.FluentValidation.Resources.StaticStringSource : object {
    private string _message;
    internal string String { get; }
    public StaticStringSource(string message);
    internal string get_String();
    public sealed virtual string GetString(ICommonContext context);
}
internal class ServiceStack.FluentValidation.Resources.SwedishLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.TurkishLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.UkrainianLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
internal class ServiceStack.FluentValidation.Resources.WelshLanguage : object {
    public static string Culture;
    public static string GetTranslation(string key);
}
public class ServiceStack.FluentValidation.Results.ValidationFailure : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AttemptedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CustomState>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <FormattedMessageArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <FormattedMessagePlaceholderValues>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <ErrorCodeResolver>k__BackingField;
    public static Dictionary`2<string, string> ErrorCodeAliases;
    private string errorCode;
    public string PropertyName { get; public set; }
    public string ErrorMessage { get; public set; }
    public object AttemptedValue { get; public set; }
    public object CustomState { get; public set; }
    public Severity Severity { get; public set; }
    [ObsoleteAttribute("FormattedMessageArguments is unused and will be removed in FluentValidation 10.")]
public Object[] FormattedMessageArguments { get; public set; }
    public Dictionary`2<string, object> FormattedMessagePlaceholderValues { get; public set; }
    public static Func`2<string, string> ErrorCodeResolver { get; public set; }
    public string ErrorCode { get; public set; }
    public ValidationFailure(string propertyName, string errorMessage);
    public ValidationFailure(string propertyName, string errorMessage, object attemptedValue);
    public ValidationFailure(string propertyName, string error, object attemptedValue, string errorCode);
    private static ValidationFailure();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public object get_AttemptedValue();
    [CompilerGeneratedAttribute]
public void set_AttemptedValue(object value);
    [CompilerGeneratedAttribute]
public object get_CustomState();
    [CompilerGeneratedAttribute]
public void set_CustomState(object value);
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(Severity value);
    [CompilerGeneratedAttribute]
public Object[] get_FormattedMessageArguments();
    [CompilerGeneratedAttribute]
public void set_FormattedMessageArguments(Object[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_FormattedMessagePlaceholderValues();
    [CompilerGeneratedAttribute]
public void set_FormattedMessagePlaceholderValues(Dictionary`2<string, object> value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_ErrorCodeResolver();
    [CompilerGeneratedAttribute]
public static void set_ErrorCodeResolver(Func`2<string, string> value);
    public static string ServiceStackErrorCodeResolver(string errorCode);
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
}
public class ServiceStack.FluentValidation.Results.ValidationResult : object {
    private IList`1<ValidationFailure> errors;
    [CompilerGeneratedAttribute]
private String[] <RuleSetsExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public bool IsValid { get; }
    public IList`1<ValidationFailure> Errors { get; }
    public String[] RuleSetsExecuted { get; internal set; }
    public IRequest Request { get; public set; }
    public ValidationResult(IEnumerable`1<ValidationFailure> failures);
    public virtual bool get_IsValid();
    public IList`1<ValidationFailure> get_Errors();
    [CompilerGeneratedAttribute]
public String[] get_RuleSetsExecuted();
    [CompilerGeneratedAttribute]
internal void set_RuleSetsExecuted(String[] value);
    public virtual string ToString();
    public string ToString(string separator);
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(IRequest value);
}
public enum ServiceStack.FluentValidation.Severity : Enum {
    public int value__;
    public static Severity Error;
    public static Severity Warning;
    public static Severity Info;
}
public interface ServiceStack.FluentValidation.TestHelper.ITestPropertyChain`1 {
    [ObsoleteAttribute("Call ShouldHaveValidationError(expression) on the validation result instead.")]
public abstract virtual ITestPropertyChain`1<TValue1> Property(Expression`1<Func`2<TValue, TValue1>> memberAccessor);
    public abstract virtual IEnumerable`1<ValidationFailure> ShouldHaveValidationError();
    public abstract virtual void ShouldNotHaveValidationError();
}
[ObsoleteAttribute]
public interface ServiceStack.FluentValidation.TestHelper.IValidationResultTester {
    public abstract virtual IEnumerable`1<ValidationFailure> ShouldHaveValidationError(IEnumerable`1<MemberInfo> properties);
    public abstract virtual void ShouldNotHaveValidationError(IEnumerable`1<MemberInfo> properties);
}
[ObsoleteAttribute]
internal class ServiceStack.FluentValidation.TestHelper.TestPropertyChain`2 : object {
    private IValidationResultTester _validationResultTester;
    private IEnumerable`1<MemberInfo> _properties;
    public TestPropertyChain`2(IValidationResultTester validationResultTester, IEnumerable`1<MemberInfo> properties);
    public sealed virtual ITestPropertyChain`1<TValue2> Property(Expression`1<Func`2<TValue, TValue2>> memberAccessor);
    public sealed virtual IEnumerable`1<ValidationFailure> ShouldHaveValidationError();
    public sealed virtual void ShouldNotHaveValidationError();
}
public class ServiceStack.FluentValidation.TestHelper.TestValidationResult`1 : ValidationResult {
    public TestValidationResult`1(ValidationResult validationResult);
    public IEnumerable`1<ValidationFailure> ShouldHaveValidationErrorFor(Expression`1<Func`2<T, TProperty>> memberAccessor);
    public void ShouldNotHaveValidationErrorFor(Expression`1<Func`2<T, TProperty>> memberAccessor);
    public IEnumerable`1<ValidationFailure> ShouldHaveValidationErrorFor(string propertyName);
    public void ShouldNotHaveValidationErrorFor(string propertyName);
}
public class ServiceStack.FluentValidation.TestHelper.ValidationTestException : Exception {
    [CompilerGeneratedAttribute]
private List`1<ValidationFailure> <Errors>k__BackingField;
    public List`1<ValidationFailure> Errors { get; }
    public ValidationTestException(string message);
    public ValidationTestException(string message, List`1<ValidationFailure> errors);
    [CompilerGeneratedAttribute]
public List`1<ValidationFailure> get_Errors();
}
[ExtensionAttribute]
public static class ServiceStack.FluentValidation.TestHelper.ValidationTestExtension : object {
    internal static string MatchAnyFailure;
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> ShouldHaveValidationErrorFor(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, TValue value, string ruleSet);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> ShouldHaveValidationErrorFor(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, T objectToTest, string ruleSet);
    [ExtensionAttribute]
public static void ShouldNotHaveValidationErrorFor(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, TValue value, string ruleSet);
    [ExtensionAttribute]
public static void ShouldNotHaveValidationErrorFor(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, T objectToTest, string ruleSet);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.TestHelper.ValidationTestExtension/<ShouldHaveValidationErrorForAsync>d__5`2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<ValidationFailure>> ShouldHaveValidationErrorForAsync(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, TValue value, CancellationToken cancellationToken, string ruleSet);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.TestHelper.ValidationTestExtension/<ShouldHaveValidationErrorForAsync>d__6`2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<ValidationFailure>> ShouldHaveValidationErrorForAsync(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, T objectToTest, CancellationToken cancellationToken, string ruleSet);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.TestHelper.ValidationTestExtension/<ShouldNotHaveValidationErrorForAsync>d__7`2")]
[ExtensionAttribute]
public static Task ShouldNotHaveValidationErrorForAsync(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, TValue value, CancellationToken cancellationToken, string ruleSet);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.TestHelper.ValidationTestExtension/<ShouldNotHaveValidationErrorForAsync>d__8`2")]
[ExtensionAttribute]
public static Task ShouldNotHaveValidationErrorForAsync(IValidator`1<T> validator, Expression`1<Func`2<T, TValue>> expression, T objectToTest, CancellationToken cancellationToken, string ruleSet);
    [ExtensionAttribute]
public static void ShouldHaveChildValidator(IValidator`1<T> validator, Expression`1<Func`2<T, TProperty>> expression, Type childValidatorType);
    private static IEnumerable`1<IPropertyValidator> GetDependentRules(string expressionMemberName, Expression`1<Func`2<T, TProperty>> expression, IValidatorDescriptor descriptor);
    private static IPropertyValidator[] GetModelLevelValidators(IValidatorDescriptor descriptor);
    [ExtensionAttribute]
public static TestValidationResult`1<T> TestValidate(IValidator`1<T> validator, T objectToTest, string ruleSet);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.TestHelper.ValidationTestExtension/<TestValidateAsync>d__13`1")]
[ExtensionAttribute]
public static Task`1<TestValidationResult`1<T>> TestValidateAsync(IValidator`1<T> validator, T objectToTest, CancellationToken cancellationToken, string ruleSet);
    [ExtensionAttribute]
public static TestValidationResult`1<T> TestValidate(IValidator`1<T> validator, T objectToTest, Action`1<ValidationStrategy`1<T>> options);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.TestHelper.ValidationTestExtension/<TestValidateAsync>d__15`1")]
[ExtensionAttribute]
public static Task`1<TestValidationResult`1<T>> TestValidateAsync(IValidator`1<T> validator, T objectToTest, Action`1<ValidationStrategy`1<T>> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> ShouldHaveAnyValidationError(TestValidationResult`1<T> testValidationResult);
    [ExtensionAttribute]
public static void ShouldNotHaveAnyValidationErrors(TestValidationResult`1<T> testValidationResult);
    private static string BuildErrorMessage(ValidationFailure failure, string exceptionMessage, string defaultMessage);
    internal static IEnumerable`1<ValidationFailure> ShouldHaveValidationError(IList`1<ValidationFailure> errors, string propertyName, bool shouldNormalizePropertyName);
    internal static void ShouldNotHaveValidationError(IEnumerable`1<ValidationFailure> errors, string propertyName, bool shouldNormalizePropertyName);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> When(IEnumerable`1<ValidationFailure> failures, Func`2<ValidationFailure, bool> failurePredicate, string exceptionMessage);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WhenAll(IEnumerable`1<ValidationFailure> failures, Func`2<ValidationFailure, bool> failurePredicate, string exceptionMessage);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithSeverity(IEnumerable`1<ValidationFailure> failures, Severity expectedSeverity);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithCustomState(IEnumerable`1<ValidationFailure> failures, object expectedCustomState);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithMessageArgument(IEnumerable`1<ValidationFailure> failures, string argumentKey, T argumentValue);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithErrorMessage(IEnumerable`1<ValidationFailure> failures, string expectedErrorMessage);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithErrorCode(IEnumerable`1<ValidationFailure> failures, string expectedErrorCode);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithoutSeverity(IEnumerable`1<ValidationFailure> failures, Severity unexpectedSeverity);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithoutCustomState(IEnumerable`1<ValidationFailure> failures, object unexpectedCustomState);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithoutErrorMessage(IEnumerable`1<ValidationFailure> failures, string unexpectedErrorMessage);
    [ExtensionAttribute]
public static IEnumerable`1<ValidationFailure> WithoutErrorCode(IEnumerable`1<ValidationFailure> failures, string unexpectedErrorCode);
    private static string NormalizePropertyName(string propertyName);
}
public class ServiceStack.FluentValidation.TestHelper.ValidatorTester`2 : object {
    private IValidator`1<T> validator;
    private TValue value;
    private MemberInfo member;
    public ValidatorTester`2(Expression`1<Func`2<T, TValue>> expression, IValidator`1<T> validator, TValue value);
    public void ValidateNoError(T instanceToValidate);
    public void ValidateError(T instanceToValidate);
    private void SetValue(object instance);
    [CompilerGeneratedAttribute]
private bool <ValidateNoError>b__4_0(ValidationFailure x);
    [CompilerGeneratedAttribute]
private bool <ValidateError>b__5_0(ValidationFailure x);
}
public class ServiceStack.FluentValidation.ValidationContext`1 : object {
    private ICommonContext _parentContext;
    [CompilerGeneratedAttribute]
private T <InstanceToValidate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <RootContextData>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChain <PropertyChain>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidatorSelector <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildCollectionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnFailures>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public T InstanceToValidate { get; private set; }
    public IDictionary`2<string, object> RootContextData { get; private protected set; }
    public PropertyChain PropertyChain { get; private set; }
    private object ServiceStack.FluentValidation.ICommonContext.InstanceToValidate { get; }
    public IValidatorSelector Selector { get; private set; }
    public bool IsChildContext { get; internal set; }
    public bool IsChildCollectionContext { get; internal set; }
    private object ServiceStack.FluentValidation.ICommonContext.PropertyValue { get; }
    private ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get; }
    public bool ThrowOnFailures { get; internal set; }
    public IRequest Request { get; public set; }
    public ValidationContext`1(T instanceToValidate);
    public ValidationContext`1(T instanceToValidate, PropertyChain propertyChain, IValidatorSelector validatorSelector);
    public static ValidationContext`1<T> CreateWithOptions(T instanceToValidate, Action`1<ValidationStrategy`1<T>> options);
    [CompilerGeneratedAttribute]
public T get_InstanceToValidate();
    [CompilerGeneratedAttribute]
private void set_InstanceToValidate(T value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_RootContextData();
    [CompilerGeneratedAttribute]
private protected void set_RootContextData(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyChain get_PropertyChain();
    [CompilerGeneratedAttribute]
private void set_PropertyChain(PropertyChain value);
    private sealed virtual override object ServiceStack.FluentValidation.ICommonContext.get_InstanceToValidate();
    [CompilerGeneratedAttribute]
public sealed virtual IValidatorSelector get_Selector();
    [CompilerGeneratedAttribute]
private void set_Selector(IValidatorSelector value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsChildContext();
    [CompilerGeneratedAttribute]
internal virtual void set_IsChildContext(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsChildCollectionContext();
    [CompilerGeneratedAttribute]
internal virtual void set_IsChildCollectionContext(bool value);
    private sealed virtual override object ServiceStack.FluentValidation.ICommonContext.get_PropertyValue();
    private sealed virtual override ICommonContext ServiceStack.FluentValidation.ICommonContext.get_ParentContext();
    [CompilerGeneratedAttribute]
public bool get_ThrowOnFailures();
    [CompilerGeneratedAttribute]
internal void set_ThrowOnFailures(bool value);
    public static ValidationContext`1<T> GetFromNonGenericContext(IValidationContext context);
    public ValidationContext`1<TChild> CloneForChildValidator(TChild instanceToValidate, bool preserveParentContext, IValidatorSelector selector);
    public ValidationContext`1<TNew> CloneForChildCollectionValidator(TNew instanceToValidate, bool preserveParentContext);
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
}
public static class ServiceStack.FluentValidation.ValidationErrors : object {
    public static string CreditCard;
    public static string Email;
    public static string Enum;
    public static string Empty;
    public static string Equal;
    public static string ExclusiveBetween;
    public static string GreaterThanOrEqual;
    public static string GreaterThan;
    public static string InclusiveBetween;
    public static string Length;
    public static string LessThanOrEqual;
    public static string LessThan;
    public static string NotEmpty;
    public static string NotEqual;
    public static string NotNull;
    public static string Null;
    public static string Predicate;
    public static string RegularExpression;
    public static string ScalePrecision;
}
public class ServiceStack.FluentValidation.ValidationException : Exception {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValidationFailure> <Errors>k__BackingField;
    public IEnumerable`1<ValidationFailure> Errors { get; private set; }
    public ValidationException(string message);
    public ValidationException(string message, IEnumerable`1<ValidationFailure> errors);
    public ValidationException(string message, IEnumerable`1<ValidationFailure> errors, bool appendDefaultMessage);
    public ValidationException(IEnumerable`1<ValidationFailure> errors);
    public ValidationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ValidationFailure> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IEnumerable`1<ValidationFailure> value);
    private static string BuildErrorMessage(IEnumerable`1<ValidationFailure> errors);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ResponseStatus ToResponseStatus();
}
public class ServiceStack.FluentValidation.ValidatorConfiguration : object {
    private Func`4<Type, MemberInfo, LambdaExpression, string> _propertyNameResolver;
    private Func`4<Type, MemberInfo, LambdaExpression, string> _displayNameResolver;
    private Func`1<MessageFormatter> _messageFormatterFactory;
    private Func`2<PropertyValidator, string> _errorCodeResolver;
    private ILanguageManager _languageManager;
    [CompilerGeneratedAttribute]
private CascadeMode <CascadeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyChainSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidatorSelectorOptions <ValidatorSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAccessorCache>k__BackingField;
    public CascadeMode CascadeMode { get; public set; }
    public string PropertyChainSeparator { get; public set; }
    public ILanguageManager LanguageManager { get; public set; }
    public ValidatorSelectorOptions ValidatorSelectors { get; }
    public Func`1<MessageFormatter> MessageFormatterFactory { get; public set; }
    public Func`4<Type, MemberInfo, LambdaExpression, string> PropertyNameResolver { get; public set; }
    public Func`4<Type, MemberInfo, LambdaExpression, string> DisplayNameResolver { get; public set; }
    public bool DisableAccessorCache { get; public set; }
    public Func`2<PropertyValidator, string> ErrorCodeResolver { get; public set; }
    [CompilerGeneratedAttribute]
public CascadeMode get_CascadeMode();
    [CompilerGeneratedAttribute]
public void set_CascadeMode(CascadeMode value);
    [CompilerGeneratedAttribute]
public string get_PropertyChainSeparator();
    [CompilerGeneratedAttribute]
public void set_PropertyChainSeparator(string value);
    public ILanguageManager get_LanguageManager();
    public void set_LanguageManager(ILanguageManager value);
    [CompilerGeneratedAttribute]
public ValidatorSelectorOptions get_ValidatorSelectors();
    public Func`1<MessageFormatter> get_MessageFormatterFactory();
    public void set_MessageFormatterFactory(Func`1<MessageFormatter> value);
    public Func`4<Type, MemberInfo, LambdaExpression, string> get_PropertyNameResolver();
    public void set_PropertyNameResolver(Func`4<Type, MemberInfo, LambdaExpression, string> value);
    public Func`4<Type, MemberInfo, LambdaExpression, string> get_DisplayNameResolver();
    public void set_DisplayNameResolver(Func`4<Type, MemberInfo, LambdaExpression, string> value);
    [CompilerGeneratedAttribute]
public bool get_DisableAccessorCache();
    [CompilerGeneratedAttribute]
public void set_DisableAccessorCache(bool value);
    public Func`2<PropertyValidator, string> get_ErrorCodeResolver();
    public void set_ErrorCodeResolver(Func`2<PropertyValidator, string> value);
    private static string DefaultPropertyNameResolver(Type type, MemberInfo memberInfo, LambdaExpression expression);
    private static string DefaultDisplayNameResolver(Type type, MemberInfo memberInfo, LambdaExpression expression);
    private static string DefaultErrorCodeResolver(PropertyValidator validator);
}
public class ServiceStack.FluentValidation.ValidatorDescriptor`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IValidationRule> <Rules>k__BackingField;
    protected IEnumerable`1<IValidationRule> Rules { get; private set; }
    public ValidatorDescriptor`1(IEnumerable`1<IValidationRule> ruleBuilders);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<IValidationRule> get_Rules();
    [CompilerGeneratedAttribute]
private void set_Rules(IEnumerable`1<IValidationRule> value);
    public virtual string GetName(string property);
    public virtual ILookup`2<string, IPropertyValidator> GetMembersWithValidators();
    public sealed virtual IEnumerable`1<IPropertyValidator> GetValidatorsForMember(string name);
    public sealed virtual IEnumerable`1<IValidationRule> GetRulesForMember(string name);
    public virtual string GetName(Expression`1<Func`2<T, object>> propertyExpression);
    public IEnumerable`1<IPropertyValidator> GetValidatorsForMember(MemberAccessor`2<T, TValue> accessor);
    public IEnumerable`1<RulesetMetadata<T>> GetRulesByRuleset();
}
public abstract class ServiceStack.FluentValidation.ValidatorFactoryBase : object {
    public sealed virtual IValidator`1<T> GetValidator();
    public sealed virtual IValidator GetValidator(Type type);
    public abstract virtual IValidator CreateInstance(Type validatorType);
}
public static class ServiceStack.FluentValidation.ValidatorOptions : object {
    [CompilerGeneratedAttribute]
private static ValidatorConfiguration <Global>k__BackingField;
    public static ValidatorConfiguration Global { get; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.CascadeMode instead.")]
public static CascadeMode CascadeMode { get; public set; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.PropertyChainSeparator instead.")]
public static string PropertyChainSeparator { get; public set; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.LanguageManager instead.")]
public static ILanguageManager LanguageManager { get; public set; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.ValidatorSelectors instead.")]
public static ValidatorSelectorOptions ValidatorSelectors { get; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.MessageFormatterFactory instead.")]
public static Func`1<MessageFormatter> MessageFormatterFactory { get; public set; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.PropertyNameResolver instead.")]
public static Func`4<Type, MemberInfo, LambdaExpression, string> PropertyNameResolver { get; public set; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.DisplayNameResolver instead.")]
public static Func`4<Type, MemberInfo, LambdaExpression, string> DisplayNameResolver { get; public set; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.DisableAccessorCache instead.")]
public static bool DisableAccessorCache { get; public set; }
    [ObsoleteAttribute("This property will be removed in FluentValidation 10. Use ValidatorOptions.Global.ErrorCodeResolver instead.")]
public static Func`2<PropertyValidator, string> ErrorCodeResolver { get; public set; }
    private static ValidatorOptions();
    [CompilerGeneratedAttribute]
public static ValidatorConfiguration get_Global();
    public static CascadeMode get_CascadeMode();
    public static void set_CascadeMode(CascadeMode value);
    public static string get_PropertyChainSeparator();
    public static void set_PropertyChainSeparator(string value);
    public static ILanguageManager get_LanguageManager();
    public static void set_LanguageManager(ILanguageManager value);
    public static ValidatorSelectorOptions get_ValidatorSelectors();
    public static Func`1<MessageFormatter> get_MessageFormatterFactory();
    public static void set_MessageFormatterFactory(Func`1<MessageFormatter> value);
    public static Func`4<Type, MemberInfo, LambdaExpression, string> get_PropertyNameResolver();
    public static void set_PropertyNameResolver(Func`4<Type, MemberInfo, LambdaExpression, string> value);
    public static Func`4<Type, MemberInfo, LambdaExpression, string> get_DisplayNameResolver();
    public static void set_DisplayNameResolver(Func`4<Type, MemberInfo, LambdaExpression, string> value);
    public static bool get_DisableAccessorCache();
    public static void set_DisableAccessorCache(bool value);
    public static Func`2<PropertyValidator, string> get_ErrorCodeResolver();
    public static void set_ErrorCodeResolver(Func`2<PropertyValidator, string> value);
}
public abstract class ServiceStack.FluentValidation.Validators.AbstractComparisonValidator : PropertyValidator {
    private Func`2<object, object> _valueToCompareFunc;
    private string _comparisonMemberDisplayName;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberToCompare>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ValueToCompare>k__BackingField;
    public Comparison Comparison { get; }
    public MemberInfo MemberToCompare { get; private set; }
    public object ValueToCompare { get; private set; }
    [ObsoleteAttribute("This constructor will be removed from FV10. Use the overload that doesn't take an errorSource")]
protected AbstractComparisonValidator(IComparable value, IStringSource errorSource);
    protected AbstractComparisonValidator(IComparable value);
    [ObsoleteAttribute("This constructor will be removed from FV10. Use the overload that doesn't take an errorSource")]
protected AbstractComparisonValidator(Func`2<object, object> valueToCompareFunc, MemberInfo member, string memberDisplayName, IStringSource errorSource);
    protected AbstractComparisonValidator(Func`2<object, object> valueToCompareFunc, MemberInfo member, string memberDisplayName);
    protected sealed virtual bool IsValid(PropertyValidatorContext context);
    public abstract virtual bool IsValid(IComparable value, IComparable valueToCompare);
    public abstract virtual Comparison get_Comparison();
    [CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_MemberToCompare();
    [CompilerGeneratedAttribute]
private void set_MemberToCompare(MemberInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_ValueToCompare();
    [CompilerGeneratedAttribute]
private void set_ValueToCompare(object value);
    public IComparable GetComparisonValue(PropertyValidatorContext context);
    public IComparable GetComparableValue(PropertyValidatorContext context, object value);
}
public class ServiceStack.FluentValidation.Validators.AspNetCoreCompatibleEmailValidator : PropertyValidator {
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.AsyncPredicateValidator : PropertyValidator {
    private Func`5<object, object, PropertyValidatorContext, CancellationToken, Task`1<bool>> _predicate;
    public AsyncPredicateValidator(Func`5<object, object, PropertyValidatorContext, CancellationToken, Task`1<bool>> predicate);
    protected virtual Task`1<bool> IsValidAsync(PropertyValidatorContext context, CancellationToken cancellation);
    protected virtual bool IsValid(PropertyValidatorContext context);
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public abstract class ServiceStack.FluentValidation.Validators.AsyncValidatorBase : PropertyValidator {
    [ObsoleteAttribute("This constructor is deprecated and will be removed in FluentValidation 10. Override the GetDefaultMessageTemplate method instead.")]
protected AsyncValidatorBase(IStringSource errorSource);
    [ObsoleteAttribute("This constructor is deprecated and will be removed in FluentValidation 10. Override the GetDefaultMessageTemplate method instead.")]
protected AsyncValidatorBase(string errorMessage);
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected abstract virtual Task`1<bool> IsValidAsync(PropertyValidatorContext context, CancellationToken cancellation);
}
public class ServiceStack.FluentValidation.Validators.ChildValidatorAdaptor`2 : NoopPropertyValidator {
    private Func`2<ICommonContext, IValidator`1<TProperty>> _validatorProvider;
    private IValidator`1<TProperty> _validator;
    [CompilerGeneratedAttribute]
private Type <ValidatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RuleSets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PassThroughParentContext>k__BackingField;
    public Type ValidatorType { get; }
    public String[] RuleSets { get; public set; }
    internal bool PassThroughParentContext { get; internal set; }
    public ChildValidatorAdaptor`2(IValidator`1<TProperty> validator, Type validatorType);
    public ChildValidatorAdaptor`2(Func`2<ICommonContext, IValidator`1<TProperty>> validatorProvider, Type validatorType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ValidatorType();
    [CompilerGeneratedAttribute]
public String[] get_RuleSets();
    [CompilerGeneratedAttribute]
public void set_RuleSets(String[] value);
    [CompilerGeneratedAttribute]
internal bool get_PassThroughParentContext();
    [CompilerGeneratedAttribute]
internal void set_PassThroughParentContext(bool value);
    public virtual IEnumerable`1<ValidationFailure> Validate(PropertyValidatorContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Validators.ChildValidatorAdaptor`2/<ValidateAsync>d__16")]
public virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(PropertyValidatorContext context, CancellationToken cancellation);
    public virtual IValidator`1<TProperty> GetValidator(PropertyValidatorContext context);
    protected virtual IValidationContext CreateNewValidationContextForChildValidator(PropertyValidatorContext context, IValidator`1<TProperty> validator);
    [ObsoleteAttribute("This overload is not used and will be removed from FluentValidation 10.")]
protected IValidationContext CreateNewValidationContextForChildValidator(object instanceToValidate, PropertyValidatorContext context);
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    private void HandleCollectionIndex(PropertyValidatorContext context, Object& originalIndex, Object& index);
    private void ResetCollectionIndex(PropertyValidatorContext context, object originalIndex, object index);
}
public enum ServiceStack.FluentValidation.Validators.Comparison : Enum {
    public int value__;
    public static Comparison Equal;
    public static Comparison NotEqual;
    public static Comparison LessThan;
    public static Comparison GreaterThan;
    public static Comparison GreaterThanOrEqual;
    public static Comparison LessThanOrEqual;
}
public class ServiceStack.FluentValidation.Validators.CreditCardValidator : PropertyValidator {
    protected virtual string GetDefaultMessageTemplate();
    protected virtual bool IsValid(PropertyValidatorContext context);
}
public class ServiceStack.FluentValidation.Validators.CustomContext : object {
    private PropertyValidatorContext _context;
    private List`1<ValidationFailure> _failures;
    internal IEnumerable`1<ValidationFailure> Failures { get; }
    public PropertyRule Rule { get; }
    public string PropertyName { get; }
    public string DisplayName { get; }
    public MessageFormatter MessageFormatter { get; }
    public object InstanceToValidate { get; }
    public object PropertyValue { get; }
    private ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get; }
    public IValidationContext ParentContext { get; }
    public CustomContext(PropertyValidatorContext context);
    public void AddFailure(string propertyName, string errorMessage);
    public void AddFailure(string errorMessage);
    public void AddFailure(ValidationFailure failure);
    internal IEnumerable`1<ValidationFailure> get_Failures();
    public PropertyRule get_Rule();
    public string get_PropertyName();
    public string get_DisplayName();
    public MessageFormatter get_MessageFormatter();
    public sealed virtual object get_InstanceToValidate();
    public sealed virtual object get_PropertyValue();
    private sealed virtual override ICommonContext ServiceStack.FluentValidation.ICommonContext.get_ParentContext();
    public IValidationContext get_ParentContext();
}
public class ServiceStack.FluentValidation.Validators.CustomValidator`1 : PropertyValidator {
    private Action`2<T, CustomContext> _action;
    private Func`4<T, CustomContext, CancellationToken, Task> _asyncAction;
    private bool _isAsync;
    public CustomValidator`1(Action`2<T, CustomContext> action);
    public CustomValidator`1(Func`4<T, CustomContext, CancellationToken, Task> asyncAction);
    public virtual IEnumerable`1<ValidationFailure> Validate(PropertyValidatorContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Validators.CustomValidator`1/<ValidateAsync>d__6")]
public virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(PropertyValidatorContext context, CancellationToken cancellation);
    protected virtual bool IsValid(PropertyValidatorContext context);
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(T x, CustomContext ctx);
}
public enum ServiceStack.FluentValidation.Validators.EmailValidationMode : Enum {
    public int value__;
    [ObsoleteAttribute("Regex-based email validation is not recommended and is no longer supported.")]
public static EmailValidationMode Net4xRegex;
    public static EmailValidationMode AspNetCoreCompatible;
}
[ObsoleteAttribute("Regex-based email validation is not recommended and is no longer supported.")]
public class ServiceStack.FluentValidation.Validators.EmailValidator : PropertyValidator {
    private static Regex _regex;
    private static string _expression;
    public string Expression { get; }
    private static EmailValidator();
    protected virtual bool IsValid(PropertyValidatorContext context);
    public sealed virtual string get_Expression();
    private static Regex CreateRegEx();
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.EmptyValidator : PropertyValidator {
    private object _defaultValueForType;
    public EmptyValidator(object defaultValueForType);
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.EnumValidator : PropertyValidator {
    private Type _enumType;
    public EnumValidator(Type enumType);
    protected virtual bool IsValid(PropertyValidatorContext context);
    private static bool IsFlagsEnumDefined(Type enumType, object value);
    private static bool EvaluateFlagEnumValues(long value, Type enumType);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.EqualValidator : PropertyValidator {
    private Func`2<object, object> _func;
    private string _memberDisplayName;
    private IEqualityComparer _comparer;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberToCompare>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ValueToCompare>k__BackingField;
    public Comparison Comparison { get; }
    public MemberInfo MemberToCompare { get; private set; }
    public object ValueToCompare { get; private set; }
    public EqualValidator(object valueToCompare, IEqualityComparer comparer);
    public EqualValidator(Func`2<object, object> comparisonProperty, MemberInfo member, string memberDisplayName, IEqualityComparer comparer);
    protected virtual bool IsValid(PropertyValidatorContext context);
    private object GetComparisonValue(PropertyValidatorContext context);
    public sealed virtual Comparison get_Comparison();
    [CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_MemberToCompare();
    [CompilerGeneratedAttribute]
private void set_MemberToCompare(MemberInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_ValueToCompare();
    [CompilerGeneratedAttribute]
private void set_ValueToCompare(object value);
    protected bool Compare(object comparisonValue, object propertyValue);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.ExactLengthValidator : LengthValidator {
    public ExactLengthValidator(int length);
    public ExactLengthValidator(Func`2<object, int> length);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.ExclusiveBetweenValidator : PropertyValidator {
    [CompilerGeneratedAttribute]
private IComparable <From>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparable <To>k__BackingField;
    public IComparable From { get; }
    public IComparable To { get; }
    public ExclusiveBetweenValidator(IComparable from, IComparable to);
    [CompilerGeneratedAttribute]
public sealed virtual IComparable get_From();
    [CompilerGeneratedAttribute]
public sealed virtual IComparable get_To();
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.GreaterThanOrEqualValidator : AbstractComparisonValidator {
    public Comparison Comparison { get; }
    public GreaterThanOrEqualValidator(IComparable value);
    public GreaterThanOrEqualValidator(Func`2<object, object> valueToCompareFunc, MemberInfo member, string memberDisplayName);
    public virtual bool IsValid(IComparable value, IComparable valueToCompare);
    public virtual Comparison get_Comparison();
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.GreaterThanValidator : AbstractComparisonValidator {
    public Comparison Comparison { get; }
    public GreaterThanValidator(IComparable value);
    public GreaterThanValidator(Func`2<object, object> valueToCompareFunc, MemberInfo member, string memberDisplayName);
    public virtual bool IsValid(IComparable value, IComparable valueToCompare);
    public virtual Comparison get_Comparison();
    protected virtual string GetDefaultMessageTemplate();
}
public interface ServiceStack.FluentValidation.Validators.IBetweenValidator {
    public IComparable From { get; }
    public IComparable To { get; }
    public abstract virtual IComparable get_From();
    public abstract virtual IComparable get_To();
}
public interface ServiceStack.FluentValidation.Validators.IChildValidatorAdaptor {
    public Type ValidatorType { get; }
    public abstract virtual Type get_ValidatorType();
}
public interface ServiceStack.FluentValidation.Validators.IComparisonValidator {
    public Comparison Comparison { get; }
    public MemberInfo MemberToCompare { get; }
    public object ValueToCompare { get; }
    public abstract virtual Comparison get_Comparison();
    public abstract virtual MemberInfo get_MemberToCompare();
    public abstract virtual object get_ValueToCompare();
}
public interface ServiceStack.FluentValidation.Validators.IEmailValidator {
}
public interface ServiceStack.FluentValidation.Validators.IEmptyValidator {
}
public interface ServiceStack.FluentValidation.Validators.ILengthValidator {
    public int Min { get; }
    public int Max { get; }
    public abstract virtual int get_Min();
    public abstract virtual int get_Max();
}
public class ServiceStack.FluentValidation.Validators.InclusiveBetweenValidator : PropertyValidator {
    [CompilerGeneratedAttribute]
private IComparable <From>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparable <To>k__BackingField;
    public IComparable From { get; }
    public IComparable To { get; }
    public InclusiveBetweenValidator(IComparable from, IComparable to);
    [CompilerGeneratedAttribute]
public sealed virtual IComparable get_From();
    [CompilerGeneratedAttribute]
public sealed virtual IComparable get_To();
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public interface ServiceStack.FluentValidation.Validators.INotEmptyValidator {
}
public interface ServiceStack.FluentValidation.Validators.INotNullValidator {
}
public interface ServiceStack.FluentValidation.Validators.INullValidator {
}
public interface ServiceStack.FluentValidation.Validators.IPredicateValidator {
}
public interface ServiceStack.FluentValidation.Validators.IPropertyValidator {
    public PropertyValidatorOptions Options { get; }
    public abstract virtual IEnumerable`1<ValidationFailure> Validate(PropertyValidatorContext context);
    public abstract virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(PropertyValidatorContext context, CancellationToken cancellation);
    public abstract virtual bool ShouldValidateAsynchronously(IValidationContext context);
    public abstract virtual PropertyValidatorOptions get_Options();
}
public interface ServiceStack.FluentValidation.Validators.IRegularExpressionValidator {
    public string Expression { get; }
    public abstract virtual string get_Expression();
}
public class ServiceStack.FluentValidation.Validators.LengthValidator : PropertyValidator {
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, int> <MinFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, int> <MaxFunc>k__BackingField;
    public int Min { get; }
    public int Max { get; }
    public Func`2<object, int> MinFunc { get; public set; }
    public Func`2<object, int> MaxFunc { get; public set; }
    public LengthValidator(int min, int max);
    public LengthValidator(Func`2<object, int> min, Func`2<object, int> max);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Min();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Max();
    [CompilerGeneratedAttribute]
public Func`2<object, int> get_MinFunc();
    [CompilerGeneratedAttribute]
public void set_MinFunc(Func`2<object, int> value);
    [CompilerGeneratedAttribute]
public Func`2<object, int> get_MaxFunc();
    [CompilerGeneratedAttribute]
public void set_MaxFunc(Func`2<object, int> value);
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.LessThanOrEqualValidator : AbstractComparisonValidator {
    public Comparison Comparison { get; }
    public LessThanOrEqualValidator(IComparable value);
    public LessThanOrEqualValidator(Func`2<object, object> valueToCompareFunc, MemberInfo member, string memberDisplayName);
    public virtual bool IsValid(IComparable value, IComparable valueToCompare);
    protected virtual string GetDefaultMessageTemplate();
    public virtual Comparison get_Comparison();
}
public class ServiceStack.FluentValidation.Validators.LessThanValidator : AbstractComparisonValidator {
    public Comparison Comparison { get; }
    public LessThanValidator(IComparable value);
    public LessThanValidator(Func`2<object, object> valueToCompareFunc, MemberInfo member, string memberDisplayName);
    public virtual bool IsValid(IComparable value, IComparable valueToCompare);
    public virtual Comparison get_Comparison();
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.MaximumLengthValidator : LengthValidator {
    public MaximumLengthValidator(int max);
    public MaximumLengthValidator(Func`2<object, int> max);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.MinimumLengthValidator : LengthValidator {
    public MinimumLengthValidator(int min);
    public MinimumLengthValidator(Func`2<object, int> min);
    protected virtual string GetDefaultMessageTemplate();
}
public abstract class ServiceStack.FluentValidation.Validators.NoopPropertyValidator : object {
    [CompilerGeneratedAttribute]
private PropertyValidatorOptions <Options>k__BackingField;
    public PropertyValidatorOptions Options { get; }
    public abstract virtual IEnumerable`1<ValidationFailure> Validate(PropertyValidatorContext context);
    public virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(PropertyValidatorContext context, CancellationToken cancellation);
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyValidatorOptions get_Options();
}
public class ServiceStack.FluentValidation.Validators.NotEmptyValidator : PropertyValidator {
    private object _defaultValueForType;
    public NotEmptyValidator(object defaultValueForType);
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.NotEqualValidator : PropertyValidator {
    private IEqualityComparer _comparer;
    private Func`2<object, object> _func;
    private string _memberDisplayName;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberToCompare>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ValueToCompare>k__BackingField;
    public Comparison Comparison { get; }
    public MemberInfo MemberToCompare { get; private set; }
    public object ValueToCompare { get; private set; }
    public NotEqualValidator(Func`2<object, object> func, MemberInfo memberToCompare, string memberDisplayName, IEqualityComparer equalityComparer);
    public NotEqualValidator(object comparisonValue, IEqualityComparer equalityComparer);
    protected virtual bool IsValid(PropertyValidatorContext context);
    private object GetComparisonValue(PropertyValidatorContext context);
    public sealed virtual Comparison get_Comparison();
    [CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_MemberToCompare();
    [CompilerGeneratedAttribute]
private void set_MemberToCompare(MemberInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_ValueToCompare();
    [CompilerGeneratedAttribute]
private void set_ValueToCompare(object value);
    protected bool Compare(object comparisonValue, object propertyValue);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.NotNullValidator : PropertyValidator {
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.NullValidator : PropertyValidator {
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.OnFailureValidator`1 : NoopPropertyValidator {
    private IPropertyValidator _innerValidator;
    private Action`3<T, PropertyValidatorContext, string> _onFailure;
    public Type ValidatorType { get; }
    public OnFailureValidator`1(IPropertyValidator innerValidator, Action`3<T, PropertyValidatorContext, string> onFailure);
    public virtual IEnumerable`1<ValidationFailure> Validate(PropertyValidatorContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Validators.OnFailureValidator`1/<ValidateAsync>d__4")]
public virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(PropertyValidatorContext context, CancellationToken cancellation);
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    public sealed virtual Type get_ValidatorType();
}
public class ServiceStack.FluentValidation.Validators.PolymorphicValidator`2 : ChildValidatorAdaptor`2<T, TProperty> {
    private Dictionary`2<Type, DerivedValidatorFactory<T, TProperty>> _derivedValidators;
    public PolymorphicValidator`2<T, TProperty> Add(IValidator`1<TDerived> derivedValidator, String[] ruleSets);
    public PolymorphicValidator`2<T, TProperty> Add(Func`2<T, IValidator`1<TDerived>> validatorFactory, String[] ruleSets);
    public PolymorphicValidator`2<T, TProperty> Add(Func`3<T, TDerived, IValidator`1<TDerived>> validatorFactory, String[] ruleSets);
    protected PolymorphicValidator`2<T, TProperty> Add(Type subclassType, IValidator validator, String[] ruleSets);
    public virtual IValidator`1<TProperty> GetValidator(PropertyValidatorContext context);
    protected virtual IValidationContext CreateNewValidationContextForChildValidator(PropertyValidatorContext context, IValidator`1<TProperty> validator);
}
public class ServiceStack.FluentValidation.Validators.PredicateValidator : PropertyValidator {
    private Predicate _predicate;
    public PredicateValidator(Predicate predicate);
    protected virtual bool IsValid(PropertyValidatorContext context);
    protected virtual string GetDefaultMessageTemplate();
}
public abstract class ServiceStack.FluentValidation.Validators.PropertyValidator : PropertyValidatorOptions {
    public PropertyValidatorOptions Options { get; }
    [ObsoleteAttribute("This constructor is deprecated and will be removed in FluentValidation 10. Override the GetDefaultMessageTemplate method instead.")]
protected PropertyValidator(IStringSource errorMessageSource);
    [ObsoleteAttribute("This constructor is deprecated and will be removed in FluentValidation 10. Override the GetDefaultMessageTemplate method instead.")]
protected PropertyValidator(string errorMessage);
    public sealed virtual PropertyValidatorOptions get_Options();
    protected string Localized(string fallbackKey);
    public virtual IEnumerable`1<ValidationFailure> Validate(PropertyValidatorContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Validators.PropertyValidator/<ValidateAsync>d__7")]
public virtual Task`1<IEnumerable`1<ValidationFailure>> ValidateAsync(PropertyValidatorContext context, CancellationToken cancellation);
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    protected abstract virtual bool IsValid(PropertyValidatorContext context);
    [AsyncStateMachineAttribute("ServiceStack.FluentValidation.Validators.PropertyValidator/<IsValidAsync>d__10")]
protected virtual Task`1<bool> IsValidAsync(PropertyValidatorContext context, CancellationToken cancellation);
    protected virtual void PrepareMessageFormatterForValidationError(PropertyValidatorContext context);
    protected virtual ValidationFailure CreateValidationError(PropertyValidatorContext context);
    [CompilerGeneratedAttribute]
private string <.ctor>b__2_0(ICommonContext ctx);
}
public class ServiceStack.FluentValidation.Validators.PropertyValidatorContext : object {
    private MessageFormatter _messageFormatter;
    private bool _propertyValueSet;
    private object _propertyValue;
    private Lazy`1<object> _propertyValueAccessor;
    [CompilerGeneratedAttribute]
private IValidationContext <ParentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public IValidationContext ParentContext { get; private set; }
    public PropertyRule Rule { get; private set; }
    public string PropertyName { get; private set; }
    public string DisplayName { get; }
    public object InstanceToValidate { get; }
    public MessageFormatter MessageFormatter { get; }
    public object PropertyValue { get; }
    private ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get; }
    [ObsoleteAttribute("This constructor will be removed from FluentValidation 10. Use the constructor that receives a property value or an accessor instead.")]
public PropertyValidatorContext(IValidationContext parentContext, PropertyRule rule, string propertyName);
    public PropertyValidatorContext(IValidationContext parentContext, PropertyRule rule, string propertyName, object propertyValue);
    public PropertyValidatorContext(IValidationContext parentContext, PropertyRule rule, string propertyName, Lazy`1<object> propertyValueAccessor);
    [CompilerGeneratedAttribute]
public IValidationContext get_ParentContext();
    [CompilerGeneratedAttribute]
private void set_ParentContext(IValidationContext value);
    [CompilerGeneratedAttribute]
public PropertyRule get_Rule();
    [CompilerGeneratedAttribute]
private void set_Rule(PropertyRule value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    public string get_DisplayName();
    public sealed virtual object get_InstanceToValidate();
    public MessageFormatter get_MessageFormatter();
    public sealed virtual object get_PropertyValue();
    private sealed virtual override ICommonContext ServiceStack.FluentValidation.ICommonContext.get_ParentContext();
}
public class ServiceStack.FluentValidation.Validators.RegularExpressionValidator : PropertyValidator {
    private Func`2<object, Regex> _regexFunc;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    public string Expression { get; }
    public RegularExpressionValidator(string expression);
    public RegularExpressionValidator(Regex regex);
    public RegularExpressionValidator(string expression, RegexOptions options);
    public RegularExpressionValidator(Func`2<object, string> expressionFunc);
    public RegularExpressionValidator(Func`2<object, Regex> regexFunc);
    public RegularExpressionValidator(Func`2<object, string> expression, RegexOptions options);
    protected virtual bool IsValid(PropertyValidatorContext context);
    private static Regex CreateRegex(string expression, RegexOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Expression();
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.ScalePrecisionValidator : PropertyValidator {
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreTrailingZeros>k__BackingField;
    public int Scale { get; public set; }
    public int Precision { get; public set; }
    public bool IgnoreTrailingZeros { get; public set; }
    public ScalePrecisionValidator(int scale, int precision);
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(int value);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTrailingZeros();
    [CompilerGeneratedAttribute]
public void set_IgnoreTrailingZeros(bool value);
    protected virtual bool IsValid(PropertyValidatorContext context);
    private void Init(int scale, int precision);
    private static UInt32[] GetBits(decimal Decimal);
    private static decimal GetMantissa(decimal Decimal);
    private static UInt32 GetUnsignedScale(decimal Decimal);
    private int GetScale(decimal Decimal);
    private static UInt32 NumTrailingZeros(decimal Decimal);
    private int GetPrecision(decimal Decimal);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.Validators.StringEnumValidator : PropertyValidator {
    private Type _enumType;
    private bool _caseSensitive;
    public StringEnumValidator(Type enumType, bool caseSensitive);
    protected virtual bool IsValid(PropertyValidatorContext context);
    private void CheckTypeIsEnum(Type enumType);
    protected virtual string GetDefaultMessageTemplate();
}
public class ServiceStack.FluentValidation.ValidatorSelectorOptions : object {
    private static IValidatorSelector DefaultSelector;
    private Func`1<IValidatorSelector> _defaultValidatorSelector;
    private Func`2<String[], IValidatorSelector> _memberNameValidatorSelector;
    private Func`2<String[], IValidatorSelector> _rulesetValidatorSelector;
    public Func`1<IValidatorSelector> DefaultValidatorSelectorFactory { get; public set; }
    public Func`2<String[], IValidatorSelector> MemberNameValidatorSelectorFactory { get; public set; }
    public Func`2<String[], IValidatorSelector> RulesetValidatorSelectorFactory { get; public set; }
    private static ValidatorSelectorOptions();
    public Func`1<IValidatorSelector> get_DefaultValidatorSelectorFactory();
    public void set_DefaultValidatorSelectorFactory(Func`1<IValidatorSelector> value);
    public Func`2<String[], IValidatorSelector> get_MemberNameValidatorSelectorFactory();
    public void set_MemberNameValidatorSelectorFactory(Func`2<String[], IValidatorSelector> value);
    public Func`2<String[], IValidatorSelector> get_RulesetValidatorSelectorFactory();
    public void set_RulesetValidatorSelectorFactory(Func`2<String[], IValidatorSelector> value);
}
public class ServiceStack.Formats.CsvFormat : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public sealed virtual void Register(IAppHost appHost);
    public void SerializeToStream(IRequest req, object request, Stream stream);
}
public class ServiceStack.Formats.HtmlFormat : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public static string TitleFormat;
    public static string HtmlTitleFormat;
    public static bool Humanize;
    [CompilerGeneratedAttribute]
private IAppHost <AppHost>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PathTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, string> <ResolveTemplate>k__BackingField;
    public string Id { get; public set; }
    private IAppHost AppHost { get; private set; }
    public Dictionary`2<string, string> PathTemplates { get; public set; }
    public Func`2<IRequest, string> ResolveTemplate { get; public set; }
    private static HtmlFormat();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
private IAppHost get_AppHost();
    [CompilerGeneratedAttribute]
private void set_AppHost(IAppHost value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_PathTemplates();
    [CompilerGeneratedAttribute]
public void set_PathTemplates(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, string> get_ResolveTemplate();
    [CompilerGeneratedAttribute]
public void set_ResolveTemplate(Func`2<IRequest, string> value);
    public string DefaultResolveTemplate(IRequest req);
    public sealed virtual void Register(IAppHost appHost);
    [AsyncStateMachineAttribute("ServiceStack.Formats.HtmlFormat/<SerializeToStreamAsync>d__22")]
public Task SerializeToStreamAsync(IRequest req, object response, Stream outputStream);
    public static string ReplaceTokens(string html, IRequest req);
}
public class ServiceStack.Formats.JsonlFormat : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public sealed virtual void Register(IAppHost appHost);
    public void SerializeToStream(IRequest req, object request, Stream stream);
}
public class ServiceStack.Formats.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <JsonApiRoute>k__BackingField;
    public string JsonApiRoute { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JsonApiRoute();
    [CompilerGeneratedAttribute]
public void set_JsonApiRoute(string value);
}
public class ServiceStack.Formats.XmlSerializerFormat : object {
    public static void Serialize(IRequest req, object response, Stream stream);
    public static object Deserialize(Type type, Stream stream);
    public sealed virtual void Register(IAppHost appHost);
}
public class ServiceStack.GenericAppHost : ServiceStackHost {
    [CompilerGeneratedAttribute]
private Action`1<Container> <ConfigureContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<GenericAppHost> <ConfigureAppHost>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HostConfig> <ConfigFilter>k__BackingField;
    public Action`1<Container> ConfigureContainer { get; public set; }
    public Action`1<GenericAppHost> ConfigureAppHost { get; public set; }
    public Action`1<HostConfig> ConfigFilter { get; public set; }
    public GenericAppHost(Assembly[] serviceAssemblies);
    public virtual void Configure(Container container);
    [CompilerGeneratedAttribute]
public Action`1<Container> get_ConfigureContainer();
    [CompilerGeneratedAttribute]
public void set_ConfigureContainer(Action`1<Container> value);
    [CompilerGeneratedAttribute]
public Action`1<GenericAppHost> get_ConfigureAppHost();
    [CompilerGeneratedAttribute]
public void set_ConfigureAppHost(Action`1<GenericAppHost> value);
    [CompilerGeneratedAttribute]
public Action`1<HostConfig> get_ConfigFilter();
    [CompilerGeneratedAttribute]
public void set_ConfigFilter(Action`1<HostConfig> value);
    public virtual IServiceGateway GetServiceGateway(IRequest req);
    public virtual void OnConfigLoad();
}
public static class ServiceStack.GenericAppHostExtensions : object {
}
internal abstract class ServiceStack.GenericAutoQueryData : object {
    public abstract virtual IQueryResponse ExecuteObject(AutoQueryData autoQuery, IQueryData request, IDataQuery query, IQueryDataSource db);
}
internal class ServiceStack.GenericAutoQueryData`2 : GenericAutoQueryData {
    public virtual IQueryResponse ExecuteObject(AutoQueryData autoQuery, IQueryData request, IDataQuery query, IQueryDataSource db);
}
[DefaultRequestAttribute("ServiceStack.GetFile")]
public class ServiceStack.GetFileService : Service {
    public object Get(GetFile request);
}
[DefaultRequestAttribute("ServiceStack.GetFileUpload")]
public class ServiceStack.GetFileUploadService : Service {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("ServiceStack.GetFileUploadService/<Get>d__0")]
public Task`1<object> Get(GetFileUpload request);
}
public class ServiceStack.GreaterCondition : QueryCondition {
    public static GreaterCondition Instance;
    public string Alias { get; }
    private static GreaterCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.GreaterEqualCondition : QueryCondition {
    public static GreaterEqualCondition Instance;
    public string Alias { get; }
    private static GreaterEqualCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HasClaimValidator : TypeValidator {
    [CompilerGeneratedAttribute]
private static string <DefaultErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static string DefaultErrorMessage { get; public set; }
    public string Type { get; }
    public string Value { get; }
    public HasClaimValidator(string type, string value);
    private static HasClaimValidator();
    [CompilerGeneratedAttribute]
public static string get_DefaultErrorMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Value();
    [AsyncStateMachineAttribute("ServiceStack.HasClaimValidator/<IsValidAsync>d__11")]
public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
    [AsyncStateMachineAttribute("ServiceStack.HasClaimValidator/<ThrowIfNotValidAsync>d__12")]
public virtual Task ThrowIfNotValidAsync(object dto, IRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HasPermissionsValidator : TypeValidator {
    [CompilerGeneratedAttribute]
private static string <DefaultErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    public static string DefaultErrorMessage { get; public set; }
    public String[] Permissions { get; }
    public HasPermissionsValidator(string permission);
    public HasPermissionsValidator(String[] permissions);
    private static HasPermissionsValidator();
    [CompilerGeneratedAttribute]
public static string get_DefaultErrorMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultErrorMessage(string value);
    [CompilerGeneratedAttribute]
public String[] get_Permissions();
    [AsyncStateMachineAttribute("ServiceStack.HasPermissionsValidator/<IsValidAsync>d__9")]
public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
    [AsyncStateMachineAttribute("ServiceStack.HasPermissionsValidator/<ThrowIfNotValidAsync>d__10")]
public virtual Task ThrowIfNotValidAsync(object dto, IRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HasRolesValidator : TypeValidator {
    [CompilerGeneratedAttribute]
private static string <DefaultErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Roles>k__BackingField;
    public static string DefaultErrorMessage { get; public set; }
    public String[] Roles { get; }
    public HasRolesValidator(string role);
    public HasRolesValidator(String[] roles);
    private static HasRolesValidator();
    [CompilerGeneratedAttribute]
public static string get_DefaultErrorMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultErrorMessage(string value);
    [CompilerGeneratedAttribute]
public String[] get_Roles();
    [AsyncStateMachineAttribute("ServiceStack.HasRolesValidator/<IsValidAsync>d__9")]
public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
    [AsyncStateMachineAttribute("ServiceStack.HasRolesValidator/<ThrowIfNotValidAsync>d__10")]
public virtual Task ThrowIfNotValidAsync(object dto, IRequest request);
}
public static class ServiceStack.HelpMessages : object {
    public static string NativeTypesDtoOptionsTip;
    public static string DefaultRedirectMessage;
    private static HelpMessages();
}
public class ServiceStack.Host.ActionContext : object {
    public static string AnyAction;
    public static string AnyMethod;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionInvokerFn <ServiceAction>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestFilterBase[] <RequestFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IResponseFilterBase[] <ResponseFilters>k__BackingField;
    public string Id { get; public set; }
    public Type RequestType { get; public set; }
    public Type ServiceType { get; public set; }
    public ActionInvokerFn ServiceAction { get; public set; }
    public IRequestFilterBase[] RequestFilters { get; public set; }
    public IResponseFilterBase[] ResponseFilters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Type get_RequestType();
    [CompilerGeneratedAttribute]
public void set_RequestType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
public void set_ServiceType(Type value);
    [CompilerGeneratedAttribute]
public ActionInvokerFn get_ServiceAction();
    [CompilerGeneratedAttribute]
public void set_ServiceAction(ActionInvokerFn value);
    [CompilerGeneratedAttribute]
public IRequestFilterBase[] get_RequestFilters();
    [CompilerGeneratedAttribute]
public void set_RequestFilters(IRequestFilterBase[] value);
    [CompilerGeneratedAttribute]
public IResponseFilterBase[] get_ResponseFilters();
    [CompilerGeneratedAttribute]
public void set_ResponseFilters(IResponseFilterBase[] value);
    public static string Key(string method, string requestDtoName);
    public static string AnyKey(string requestDtoName);
    public static string AnyFormatKey(string format, string requestDtoName);
}
public class ServiceStack.Host.ActionInvokerFn : MulticastDelegate {
    public ActionInvokerFn(object object, IntPtr method);
    public virtual object Invoke(object instance, object request);
    public virtual IAsyncResult BeginInvoke(object instance, object request, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.ActionMethod : object {
    public static string Async;
    public static string AsyncUpper;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private string nameUpper;
    private Type requestType;
    public MethodInfo MethodInfo { get; }
    public bool IsAsync { get; }
    public string Name { get; }
    public string NameUpper { get; }
    public Type RequestType { get; }
    public bool IsGenericMethod { get; }
    public Type ReturnType { get; }
    public ActionMethod(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public string get_Name();
    public string get_NameUpper();
    public Type get_RequestType();
    public ParameterInfo[] GetParameters();
    public bool get_IsGenericMethod();
    public Type get_ReturnType();
    public Object[] GetCustomAttributes(bool inherit);
    public Object[] AllAttributes();
    public T[] AllAttributes();
}
public class ServiceStack.Host.AspNet.AspNetRequest : object {
    public static ILog log;
    private IResolver resolver;
    private HttpRequestBase request;
    private IHttpResponse response;
    [CompilerGeneratedAttribute]
private RequestAttributes <RequestAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestPreferences <RequestPreferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    private string httpMethod;
    private Dictionary`2<string, object> items;
    private string responseContentType;
    [CompilerGeneratedAttribute]
private bool <HasExplicitResponseContentType>k__BackingField;
    private Dictionary`2<string, Cookie> cookies;
    private NameValueCollection headers;
    private NameValueCollection queryString;
    private NameValueCollection formData;
    private string remoteIp;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <BufferedStream>k__BackingField;
    private IHttpFile[] httpFiles;
    private IVirtualFile file;
    private IVirtualDirectory dir;
    private Nullable`1<bool> isDirectory;
    private Nullable`1<bool> isFile;
    public IResolver Resolver { get; public set; }
    public HttpRequestBase HttpRequest { get; }
    public object OriginalRequest { get; }
    public IResponse Response { get; }
    public IHttpResponse HttpResponse { get; }
    public RequestAttributes RequestAttributes { get; public set; }
    public IRequestPreferences RequestPreferences { get; }
    public string OperationName { get; public set; }
    public object Dto { get; public set; }
    public string ContentType { get; }
    public string HttpMethod { get; }
    public string Verb { get; }
    public bool IsLocal { get; }
    public string UserAgent { get; }
    public Dictionary`2<string, object> Items { get; }
    public string ResponseContentType { get; public set; }
    public bool HasExplicitResponseContentType { get; private set; }
    public IDictionary`2<string, Cookie> Cookies { get; }
    public NameValueCollection Headers { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection FormData { get; }
    public string RawUrl { get; }
    public string AbsoluteUri { get; }
    public string UserHostAddress { get; }
    public string XForwardedFor { get; }
    public Nullable`1<int> XForwardedPort { get; }
    public string XForwardedProtocol { get; }
    public string XRealIp { get; }
    public string Accept { get; }
    public string RemoteIp { get; }
    public string Authorization { get; }
    public bool IsSecureConnection { get; }
    public String[] AcceptTypes { get; }
    public string PathInfo { get; }
    public string OriginalPathInfo { get; }
    public string UrlHostName { get; }
    public MemoryStream BufferedStream { get; public set; }
    public Stream InputStream { get; }
    public bool UseBufferedStream { get; public set; }
    public long ContentLength { get; }
    public IHttpFile[] Files { get; }
    public Uri UrlReferrer { get; }
    public bool IsDirectory { get; }
    public bool IsFile { get; }
    public AspNetRequest(HttpContextBase httpContext, string operationName);
    public AspNetRequest(HttpContextBase httpContext, string operationName, RequestAttributes requestAttributes);
    private static AspNetRequest();
    public sealed virtual IResolver get_Resolver();
    public void set_Resolver(IResolver value);
    public HttpRequestBase get_HttpRequest();
    public sealed virtual object get_OriginalRequest();
    public sealed virtual IResponse get_Response();
    public sealed virtual IHttpResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
public sealed virtual RequestAttributes get_RequestAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestAttributes(RequestAttributes value);
    [CompilerGeneratedAttribute]
public sealed virtual IRequestPreferences get_RequestPreferences();
    public sealed virtual T TryResolve();
    public sealed virtual object GetService(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    public sealed virtual string get_ContentType();
    public sealed virtual string get_HttpMethod();
    public sealed virtual string get_Verb();
    public string Param(string name);
    public sealed virtual bool get_IsLocal();
    public sealed virtual string get_UserAgent();
    public sealed virtual Dictionary`2<string, object> get_Items();
    public sealed virtual string get_ResponseContentType();
    public sealed virtual void set_ResponseContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasExplicitResponseContentType();
    [CompilerGeneratedAttribute]
private void set_HasExplicitResponseContentType(bool value);
    public sealed virtual IDictionary`2<string, Cookie> get_Cookies();
    public sealed virtual NameValueCollection get_Headers();
    public sealed virtual NameValueCollection get_QueryString();
    public sealed virtual NameValueCollection get_FormData();
    public sealed virtual Task`1<string> GetRawBodyAsync();
    public sealed virtual string get_RawUrl();
    public sealed virtual string get_AbsoluteUri();
    public sealed virtual string get_UserHostAddress();
    public sealed virtual string get_XForwardedFor();
    public sealed virtual Nullable`1<int> get_XForwardedPort();
    public sealed virtual string get_XForwardedProtocol();
    public sealed virtual string get_XRealIp();
    public sealed virtual string get_Accept();
    public sealed virtual string get_RemoteIp();
    public sealed virtual string get_Authorization();
    public sealed virtual bool get_IsSecureConnection();
    public sealed virtual String[] get_AcceptTypes();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathInfo();
    [CompilerGeneratedAttribute]
public sealed virtual string get_OriginalPathInfo();
    public string GetPathInfo();
    public string get_UrlHostName();
    [CompilerGeneratedAttribute]
public sealed virtual MemoryStream get_BufferedStream();
    [CompilerGeneratedAttribute]
public void set_BufferedStream(MemoryStream value);
    public sealed virtual Stream get_InputStream();
    public sealed virtual bool get_UseBufferedStream();
    public sealed virtual void set_UseBufferedStream(bool value);
    public sealed virtual string GetRawBody();
    public sealed virtual long get_ContentLength();
    public sealed virtual IHttpFile[] get_Files();
    public sealed virtual Uri get_UrlReferrer();
    public sealed virtual IVirtualFile GetFile();
    public sealed virtual IVirtualDirectory GetDirectory();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual bool get_IsFile();
}
public class ServiceStack.Host.AspNet.AspNetResponse : object {
    private HttpResponseBase response;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <BufferedStream>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookies <Cookies>k__BackingField;
    public HttpResponseBase Response { get; }
    public object OriginalResponse { get; }
    public IRequest Request { get; private set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public MemoryStream BufferedStream { get; public set; }
    public Stream OutputStream { get; }
    public bool UseBufferedStream { get; public set; }
    public object Dto { get; public set; }
    public bool IsClosed { get; private set; }
    public bool KeepAlive { get; public set; }
    public bool HasStarted { get; }
    public Dictionary`2<string, object> Items { get; }
    public ICookies Cookies { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public AspNetResponse(HttpResponseBase response, IRequest request);
    public HttpResponseBase get_Response();
    public sealed virtual object get_OriginalResponse();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IRequest value);
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    public sealed virtual string get_StatusDescription();
    public sealed virtual void set_StatusDescription(string value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual void AddHeader(string name, string value);
    public sealed virtual void RemoveHeader(string name);
    public sealed virtual string GetHeader(string name);
    public sealed virtual void Redirect(string url);
    [CompilerGeneratedAttribute]
public MemoryStream get_BufferedStream();
    [CompilerGeneratedAttribute]
public void set_BufferedStream(MemoryStream value);
    public sealed virtual Stream get_OutputStream();
    public sealed virtual bool get_UseBufferedStream();
    public sealed virtual void set_UseBufferedStream(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync(CancellationToken token);
    public sealed virtual void End();
    public sealed virtual void Flush();
    [AsyncStateMachineAttribute("ServiceStack.Host.AspNet.AspNetResponse/<FlushAsync>d__40")]
public sealed virtual Task FlushAsync(CancellationToken token);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual void SetContentLength(long contentLength);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepAlive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepAlive(bool value);
    public sealed virtual bool get_HasStarted();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual ICookies get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(ICookies value);
    public sealed virtual void SetCookie(Cookie cookie);
    public sealed virtual void ClearCookies();
    public sealed virtual Dictionary`2<string, string> get_Headers();
}
public class ServiceStack.Host.BasicHttpRequest : BasicRequest {
    [CompilerGeneratedAttribute]
private IHttpResponse <HttpResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XForwardedFor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <XForwardedPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XForwardedProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XRealIp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    public IHttpResponse HttpResponse { get; public set; }
    public string HttpMethod { get; public set; }
    public string XForwardedFor { get; public set; }
    public Nullable`1<int> XForwardedPort { get; public set; }
    public string XForwardedProtocol { get; public set; }
    public string XRealIp { get; public set; }
    public string Accept { get; public set; }
    public BasicHttpRequest(object requestDto, RequestAttributes requestAttributes);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
public void set_HttpResponse(IHttpResponse value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_XForwardedFor();
    [CompilerGeneratedAttribute]
public void set_XForwardedFor(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_XForwardedPort();
    [CompilerGeneratedAttribute]
public void set_XForwardedPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_XForwardedProtocol();
    [CompilerGeneratedAttribute]
public void set_XForwardedProtocol(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_XRealIp();
    [CompilerGeneratedAttribute]
public void set_XRealIp(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(string value);
}
public class ServiceStack.Host.BasicHttpResponse : BasicResponse {
    [CompilerGeneratedAttribute]
private List`1<Cookie> <CookieCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookies <Cookies>k__BackingField;
    public List`1<Cookie> CookieCollection { get; }
    public ICookies Cookies { get; }
    public BasicHttpResponse(BasicRequest requestContext);
    [CompilerGeneratedAttribute]
public List`1<Cookie> get_CookieCollection();
    [CompilerGeneratedAttribute]
public sealed virtual ICookies get_Cookies();
    public sealed virtual void SetCookie(Cookie cookie);
    public sealed virtual void ClearCookies();
}
public class ServiceStack.Host.BasicRequest : object {
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IResponse <Response>k__BackingField;
    private IResolver resolver;
    private string operationName;
    [CompilerGeneratedAttribute]
private string <UserHostAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Cookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestAttributes <RequestAttributes>k__BackingField;
    private IRequestPreferences requestPreferences;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExplicitResponseContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsoluteUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpFile[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <UrlReferrer>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <FormData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBufferedStream>k__BackingField;
    private string body;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteIp>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AcceptTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <InputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirectory>k__BackingField;
    public object Dto { get; public set; }
    public IMessage Message { get; public set; }
    public object OriginalRequest { get; protected set; }
    public IResponse Response { get; public set; }
    public IResolver Resolver { get; public set; }
    public string OperationName { get; public set; }
    public string UserHostAddress { get; public set; }
    public Dictionary`2<string, object> Items { get; public set; }
    public string UserAgent { get; protected set; }
    public IDictionary`2<string, Cookie> Cookies { get; public set; }
    public string Verb { get; public set; }
    public RequestAttributes RequestAttributes { get; public set; }
    public IRequestPreferences RequestPreferences { get; }
    public string ContentType { get; public set; }
    public bool IsLocal { get; protected set; }
    public string ResponseContentType { get; public set; }
    public bool HasExplicitResponseContentType { get; public set; }
    public string CompressionType { get; public set; }
    public string AbsoluteUri { get; public set; }
    public string PathInfo { get; public set; }
    public string OriginalPathInfo { get; }
    public IHttpFile[] Files { get; public set; }
    public Uri UrlReferrer { get; public set; }
    public NameValueCollection Headers { get; public set; }
    public NameValueCollection QueryString { get; public set; }
    public NameValueCollection FormData { get; public set; }
    public bool UseBufferedStream { get; public set; }
    public string RawUrl { get; public set; }
    public string RemoteIp { get; public set; }
    public string Authorization { get; public set; }
    public bool IsSecureConnection { get; public set; }
    public String[] AcceptTypes { get; public set; }
    public Stream InputStream { get; public set; }
    public long ContentLength { get; }
    public bool IsFile { get; public set; }
    public bool IsDirectory { get; public set; }
    public BasicRequest(object requestDto, RequestAttributes requestAttributes);
    public BasicRequest(IMessage message, RequestAttributes requestAttributes);
    [CompilerGeneratedAttribute]
public virtual object get_Dto();
    [CompilerGeneratedAttribute]
public virtual void set_Dto(object value);
    [CompilerGeneratedAttribute]
public IMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(IMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_OriginalRequest();
    [CompilerGeneratedAttribute]
protected void set_OriginalRequest(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IResponse get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(IResponse value);
    public sealed virtual IResolver get_Resolver();
    public void set_Resolver(IResolver value);
    public sealed virtual string get_OperationName();
    public sealed virtual void set_OperationName(string value);
    public sealed virtual T TryResolve();
    public sealed virtual object GetService(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserHostAddress();
    [CompilerGeneratedAttribute]
public void set_UserHostAddress(string value);
    public string GetHeader(string headerName);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
protected void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, Cookie> get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(IDictionary`2<string, Cookie> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RequestAttributes get_RequestAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestAttributes(RequestAttributes value);
    public sealed virtual IRequestPreferences get_RequestPreferences();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLocal();
    [CompilerGeneratedAttribute]
protected void set_IsLocal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResponseContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasExplicitResponseContentType();
    [CompilerGeneratedAttribute]
public void set_HasExplicitResponseContentType(bool value);
    [CompilerGeneratedAttribute]
public string get_CompressionType();
    [CompilerGeneratedAttribute]
public void set_CompressionType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AbsoluteUri();
    [CompilerGeneratedAttribute]
public void set_AbsoluteUri(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
    public sealed virtual string get_OriginalPathInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpFile[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IHttpFile[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_UrlReferrer();
    [CompilerGeneratedAttribute]
public void set_UrlReferrer(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual NameValueCollection get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(NameValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual NameValueCollection get_QueryString();
    [CompilerGeneratedAttribute]
public void set_QueryString(NameValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual NameValueCollection get_FormData();
    [CompilerGeneratedAttribute]
public void set_FormData(NameValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseBufferedStream();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseBufferedStream(bool value);
    public sealed virtual string GetRawBody();
    public sealed virtual Task`1<string> GetRawBodyAsync();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RawUrl();
    [CompilerGeneratedAttribute]
public void set_RawUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteIp();
    [CompilerGeneratedAttribute]
public void set_RemoteIp(string value);
    public sealed virtual string get_Authorization();
    public void set_Authorization(string value);
    public sealed virtual bool get_IsSecureConnection();
    public void set_IsSecureConnection(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AcceptTypes();
    [CompilerGeneratedAttribute]
public void set_AcceptTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_InputStream();
    [CompilerGeneratedAttribute]
public void set_InputStream(Stream value);
    public sealed virtual long get_ContentLength();
    public BasicRequest PopulateWith(IRequest request);
    public sealed virtual IVirtualFile GetFile();
    public sealed virtual IVirtualDirectory GetDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFile();
    [CompilerGeneratedAttribute]
public void set_IsFile(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDirectory();
    [CompilerGeneratedAttribute]
public void set_IsDirectory(bool value);
}
public class ServiceStack.Host.BasicResponse : object {
    [CompilerGeneratedAttribute]
private BasicRequest <requestContext>P;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    private MemoryStream ms;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBufferedStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    public Dictionary`2<string, string> Headers { get; }
    public object OriginalResponse { get; public set; }
    public IRequest Request { get; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public Stream OutputStream { get; }
    public object Dto { get; public set; }
    public bool UseBufferedStream { get; public set; }
    public bool IsClosed { get; public set; }
    public bool KeepAlive { get; public set; }
    public bool HasStarted { get; public set; }
    public Dictionary`2<string, object> Items { get; }
    public BasicResponse(BasicRequest requestContext);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual object get_OriginalResponse();
    [CompilerGeneratedAttribute]
public void set_OriginalResponse(object value);
    public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual void AddHeader(string name, string value);
    public sealed virtual void RemoveHeader(string name);
    public sealed virtual string GetHeader(string name);
    public sealed virtual void Redirect(string url);
    public sealed virtual Stream get_OutputStream();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    public void Write(string text);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseBufferedStream();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseBufferedStream(bool value);
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync(CancellationToken token);
    public sealed virtual void End();
    public sealed virtual void Flush();
    public sealed virtual Task FlushAsync(CancellationToken token);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public void set_IsClosed(bool value);
    public sealed virtual void SetContentLength(long contentLength);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepAlive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasStarted();
    [CompilerGeneratedAttribute]
public void set_HasStarted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
}
public class ServiceStack.Host.ContainerResolveCache : object {
    private static ConcurrentDictionary`2<Type, Func`2<IResolver, object>> resolveFnMap;
    private static ContainerResolveCache();
    private Func`2<IResolver, object> GenerateServiceFactory(Type type);
    public sealed virtual object CreateInstance(IResolver resolver, Type type);
    public object CreateInstance(IResolver resolver, Type type, bool tryResolve);
    public static void Reset();
}
public class ServiceStack.Host.ContentTypes : object {
    private static UTF8Encoding UTF8EncodingWithoutBom;
    public static ContentTypes Instance;
    public Dictionary`2<string, StreamSerializerDelegate> ContentTypeSerializers;
    public Dictionary`2<string, StreamDeserializerDelegate> ContentTypeDeserializers;
    public Dictionary`2<string, StreamSerializerDelegateAsync> ContentTypeSerializersAsync;
    public Dictionary`2<string, StreamDeserializerDelegateAsync> ContentTypeDeserializersAsync;
    public Dictionary`2<string, StringSerializerDelegate> ContentTypeStringSerializers;
    public Dictionary`2<string, StringDeserializerDelegate> ContentTypeStringDeserializers;
    [CompilerGeneratedAttribute]
private static StreamSerializerDelegateAsync <UnknownContentTypeSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private static StreamDeserializerDelegateAsync <UnknownContentTypeDeserializer>k__BackingField;
    public static HashSet`1<string> KnownFormats;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ContentTypeFormats>k__BackingField;
    public static StreamSerializerDelegateAsync UnknownContentTypeSerializer { get; public set; }
    public static StreamDeserializerDelegateAsync UnknownContentTypeDeserializer { get; public set; }
    public Dictionary`2<string, string> ContentTypeFormats { get; }
    private static ContentTypes();
    [CompilerGeneratedAttribute]
public static StreamSerializerDelegateAsync get_UnknownContentTypeSerializer();
    [CompilerGeneratedAttribute]
public static void set_UnknownContentTypeSerializer(StreamSerializerDelegateAsync value);
    [CompilerGeneratedAttribute]
public static StreamDeserializerDelegateAsync get_UnknownContentTypeDeserializer();
    [CompilerGeneratedAttribute]
public static void set_UnknownContentTypeDeserializer(StreamDeserializerDelegateAsync value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_ContentTypeFormats();
    public sealed virtual string GetFormatContentType(string format);
    public sealed virtual void Register(string contentType, StreamSerializerDelegate streamSerializer, StreamDeserializerDelegate streamDeserializer);
    public sealed virtual void RegisterAsync(string contentType, StreamSerializerDelegateAsync streamSerializer, StreamDeserializerDelegateAsync streamDeserializer);
    public sealed virtual void Remove(string contentType);
    public void SetContentTypeSerializer(string contentType, StreamSerializerDelegate streamSerializer);
    public void SetContentTypeDeserializer(string contentType, StreamDeserializerDelegate streamDeserializer);
    [AsyncStateMachineAttribute("ServiceStack.Host.ContentTypes/<SerializeUnknownContentType>d__26")]
public static Task SerializeUnknownContentType(IRequest req, object response, Stream stream);
    public sealed virtual Byte[] SerializeToBytes(IRequest req, object response);
    public sealed virtual string SerializeToString(IRequest req, object response);
    public sealed virtual string SerializeToString(IRequest req, object response, string contentType);
    private static Task serializeAsync(StreamSerializerDelegateAsync serializer, IRequest httpReq, object dto, Stream stream);
    [AsyncStateMachineAttribute("ServiceStack.Host.ContentTypes/<serializeSync>d__31")]
private static Task serializeSync(StreamSerializerDelegate serializer, IRequest httpReq, object dto, Stream stream);
    public sealed virtual Task SerializeToStreamAsync(IRequest req, object response, Stream responseStream);
    public sealed virtual StreamSerializerDelegateAsync GetStreamSerializerAsync(string contentType);
    public StreamSerializerDelegate GetStreamSerializer(string contentType);
    public sealed virtual object DeserializeFromString(string contentType, Type type, string request);
    public sealed virtual object DeserializeFromStream(string contentType, Type type, Stream fromStream);
    public sealed virtual StreamDeserializerDelegate GetStreamDeserializer(string contentType);
    public sealed virtual StreamDeserializerDelegateAsync GetStreamDeserializerAsync(string contentType);
}
public class ServiceStack.Host.Cookies : object {
    [CompilerGeneratedAttribute]
private IHttpResponse <httpRes>P;
    [CompilerGeneratedAttribute]
private static DateTime <PermanentCookieExpiry>k__BackingField;
    public static string RootPath;
    [CompilerGeneratedAttribute]
private List`1<Cookie> <Collection>k__BackingField;
    public static DateTime PermanentCookieExpiry { get; public set; }
    public List`1<Cookie> Collection { get; public set; }
    public Cookies(IHttpResponse httpRes);
    private static Cookies();
    [CompilerGeneratedAttribute]
public static DateTime get_PermanentCookieExpiry();
    [CompilerGeneratedAttribute]
public static void set_PermanentCookieExpiry(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Cookie> get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(List`1<Cookie> value);
    public bool UseSecureCookie(Nullable`1<bool> secureOnly);
    public sealed virtual void AddPermanentCookie(string cookieName, string cookieValue, Nullable`1<bool> secureOnly);
    public sealed virtual void AddSessionCookie(string cookieName, string cookieValue, Nullable`1<bool> secureOnly);
    public sealed virtual void DeleteCookie(string cookieName);
}
[ExtensionAttribute]
public static class ServiceStack.Host.CookiesExtensions : object {
    private static DateTime Session;
    private static CookiesExtensions();
    [ExtensionAttribute]
public static HttpCookie ToHttpCookie(Cookie cookie);
    [ExtensionAttribute]
public static string AsHeaderValue(Cookie cookie);
}
public class ServiceStack.Host.FallbackRestPathDelegate : MulticastDelegate {
    public FallbackRestPathDelegate(object object, IntPtr method);
    public virtual RestPath Invoke(IHttpRequest httpReq);
    public virtual IAsyncResult BeginInvoke(IHttpRequest httpReq, AsyncCallback callback, object object);
    public virtual RestPath EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.Host.GatewayRequest : BasicRequest {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IHttpResponse <HttpResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XForwardedFor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <XForwardedPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XForwardedProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XRealIp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    private object dto;
    [NullableAttribute("1")]
public IHttpResponse HttpResponse { get; public set; }
    [NullableAttribute("1")]
public string HttpMethod { get; public set; }
    public string XForwardedFor { get; public set; }
    public Nullable`1<int> XForwardedPort { get; public set; }
    public string XForwardedProtocol { get; public set; }
    public string XRealIp { get; public set; }
    public string Accept { get; public set; }
    public object Dto { get; public set; }
    public GatewayRequest(object requestDto, RequestAttributes requestAttributes);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IHttpResponse get_HttpResponse();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_HttpResponse(IHttpResponse value);
    [NullableContextAttribute("1")]
public sealed virtual string get_HttpMethod();
    [NullableContextAttribute("1")]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_XForwardedFor();
    [CompilerGeneratedAttribute]
public void set_XForwardedFor(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_XForwardedPort();
    [CompilerGeneratedAttribute]
public void set_XForwardedPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_XForwardedProtocol();
    [CompilerGeneratedAttribute]
public void set_XForwardedProtocol(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_XRealIp();
    [CompilerGeneratedAttribute]
public void set_XRealIp(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(string value);
    public virtual object get_Dto();
    public virtual void set_Dto(object value);
    public void Clear();
    [NullableContextAttribute("1")]
public static GatewayRequest Create(IRequest req);
    [NullableContextAttribute("1")]
private static GatewayRequest FromRequest(IRequest req);
    [NullableContextAttribute("1")]
public sealed virtual T Convert(T value);
    [NullableContextAttribute("1")]
public sealed virtual object Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Host.GatewayResponse : BasicResponse {
    [CompilerGeneratedAttribute]
private List`1<Cookie> <CookieCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookies <Cookies>k__BackingField;
    public List`1<Cookie> CookieCollection { get; }
    public ICookies Cookies { get; }
    public GatewayResponse(BasicRequest requestContext);
    [CompilerGeneratedAttribute]
public List`1<Cookie> get_CookieCollection();
    [CompilerGeneratedAttribute]
public sealed virtual ICookies get_Cookies();
    public sealed virtual void SetCookie(Cookie cookie);
    public sealed virtual void ClearCookies();
}
public class ServiceStack.Host.HandleGatewayExceptionAsyncDelegate : MulticastDelegate {
    public HandleGatewayExceptionAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IRequest httpReq, object request, Exception ex);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, object request, Exception ex, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.HandleGatewayExceptionDelegate : MulticastDelegate {
    public HandleGatewayExceptionDelegate(object object, IntPtr method);
    public virtual void Invoke(IRequest httpReq, object request, Exception ex);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, object request, Exception ex, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.Handlers.CustomActionHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private Action`2<IRequest, IResponse> <Action>k__BackingField;
    public Action`2<IRequest, IResponse> Action { get; public set; }
    public CustomActionHandler(Action`2<IRequest, IResponse> action);
    [CompilerGeneratedAttribute]
public Action`2<IRequest, IResponse> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Action`2<IRequest, IResponse> value);
    public virtual void ProcessRequest(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.CustomActionHandlerAsync : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private Func`3<IRequest, IResponse, Task> <Action>k__BackingField;
    public Func`3<IRequest, IResponse, Task> Action { get; public set; }
    public CustomActionHandlerAsync(Func`3<IRequest, IResponse, Task> action);
    [CompilerGeneratedAttribute]
public Func`3<IRequest, IResponse, Task> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Func`3<IRequest, IResponse, Task> value);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.CustomActionHandlerAsync/<ProcessRequestAsync>d__5")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.CustomResponseHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private Func`3<IRequest, IResponse, object> <Action>k__BackingField;
    public Func`3<IRequest, IResponse, object> Action { get; public set; }
    public CustomResponseHandler(Func`3<IRequest, IResponse, object> action, string operationName);
    [CompilerGeneratedAttribute]
public Func`3<IRequest, IResponse, object> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Func`3<IRequest, IResponse, object> value);
    public virtual void ProcessRequest(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.CustomResponseHandlerAsync : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private Func`3<IRequest, IResponse, Task`1<object>> <Action>k__BackingField;
    public Func`3<IRequest, IResponse, Task`1<object>> Action { get; public set; }
    public CustomResponseHandlerAsync(Func`3<IRequest, IResponse, Task`1<object>> action, string operationName);
    [CompilerGeneratedAttribute]
public Func`3<IRequest, IResponse, Task`1<object>> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Func`3<IRequest, IResponse, Task`1<object>> value);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.CustomResponseHandlerAsync/<ProcessRequestAsync>d__5")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.ForbiddenHttpHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private string <WebHostPhysicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebHostUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultRootFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultHandler>k__BackingField;
    public string WebHostPhysicalPath { get; public set; }
    public string WebHostUrl { get; public set; }
    public string DefaultRootFileName { get; public set; }
    public string DefaultHandler { get; public set; }
    public bool IsReusable { get; }
    [CompilerGeneratedAttribute]
public string get_WebHostPhysicalPath();
    [CompilerGeneratedAttribute]
public void set_WebHostPhysicalPath(string value);
    [CompilerGeneratedAttribute]
public string get_WebHostUrl();
    [CompilerGeneratedAttribute]
public void set_WebHostUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultRootFileName();
    [CompilerGeneratedAttribute]
public void set_DefaultRootFileName(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultHandler();
    [CompilerGeneratedAttribute]
public void set_DefaultHandler(string value);
    public virtual Task ProcessRequestAsync(IRequest request, IResponse response, string operationName);
    protected StringBuilder CreateForbiddenResponseTextBody(IRequest request);
    public virtual bool get_IsReusable();
    public virtual bool RunAsAsync();
}
public class ServiceStack.Host.Handlers.GenericHandler : ServiceStackHandlerBase {
    private Feature format;
    [CompilerGeneratedAttribute]
private string <HandlerContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestAttributes <ContentTypeAttribute>k__BackingField;
    public string HandlerContentType { get; public set; }
    public RequestAttributes ContentTypeAttribute { get; public set; }
    public GenericHandler(string contentType, RequestAttributes handlerAttributes, Feature format);
    [CompilerGeneratedAttribute]
public string get_HandlerContentType();
    [CompilerGeneratedAttribute]
public void set_HandlerContentType(string value);
    [CompilerGeneratedAttribute]
public RequestAttributes get_ContentTypeAttribute();
    [CompilerGeneratedAttribute]
public void set_ContentTypeAttribute(RequestAttributes value);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.GenericHandler/<CreateRequestAsync>d__10")]
public sealed virtual Task`1<object> CreateRequestAsync(IRequest req, string operationName);
    public virtual bool RunAsAsync();
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.GenericHandler/<ProcessRequestAsync>d__12")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public abstract class ServiceStack.Host.Handlers.HttpAsyncTaskHandler : object {
    internal static ILog Log;
    [CompilerGeneratedAttribute]
private string <RequestName>k__BackingField;
    private Type[] ProcessRequestArgTypes;
    public string RequestName { get; public set; }
    public bool IsReusable { get; }
    private static HttpAsyncTaskHandler();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public void set_RequestName(string value);
    public virtual bool RunAsAsync();
    protected virtual Task CreateProcessRequestTask(IRequest httpReq, IResponse httpRes, string operationName);
    private void RememberLastRequestInfo(string operationName, string pathInfo);
    public virtual void ProcessRequest(IRequest httpReq, IResponse httpRes, string operationName);
    public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
    protected static bool DefaultHandledRequest(HttpListenerContext context);
    protected static bool DefaultHandledRequest(HttpContextBase context);
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
    private sealed virtual override IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    private sealed virtual override void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result);
    public virtual Task ProcessRequestAsync(HttpContextBase context);
    public virtual bool get_IsReusable();
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.HttpAsyncTaskHandler/<HandleException>d__19")]
protected Task HandleException(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
}
public interface ServiceStack.Host.Handlers.IRequestHttpHandler {
    public string RequestName { get; }
    public abstract virtual string get_RequestName();
    public abstract virtual Task`1<object> CreateRequestAsync(IRequest req, string operationName);
    public abstract virtual Task`1<object> GetResponseAsync(IRequest httpReq, object request);
    public abstract virtual Task HandleResponse(IRequest httpReq, IResponse httpRes, object response);
}
public interface ServiceStack.Host.Handlers.IServiceStackHandler {
    public string RequestName { get; }
    public abstract virtual string get_RequestName();
    public abstract virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
    public abstract virtual void ProcessRequest(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.JsonOneWayHandler : GenericHandler {
}
public class ServiceStack.Host.Handlers.JsonReplyHandler : GenericHandler {
}
public class ServiceStack.Host.Handlers.JsvOneWayHandler : GenericHandler {
}
public class ServiceStack.Host.Handlers.JsvReplyHandler : GenericHandler {
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.JsvReplyHandler/<ProcessRequestAsync>d__1")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.NotFoundHttpHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private string <WebHostPhysicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebHostUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultRootFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultHandler>k__BackingField;
    public string WebHostPhysicalPath { get; public set; }
    public string WebHostUrl { get; public set; }
    public string DefaultRootFileName { get; public set; }
    public string DefaultHandler { get; public set; }
    public bool IsReusable { get; }
    [CompilerGeneratedAttribute]
public string get_WebHostPhysicalPath();
    [CompilerGeneratedAttribute]
public void set_WebHostPhysicalPath(string value);
    [CompilerGeneratedAttribute]
public string get_WebHostUrl();
    [CompilerGeneratedAttribute]
public void set_WebHostUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultRootFileName();
    [CompilerGeneratedAttribute]
public void set_DefaultRootFileName(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultHandler();
    [CompilerGeneratedAttribute]
public void set_DefaultHandler(string value);
    public virtual Task ProcessRequestAsync(IRequest request, IResponse response, string operationName);
    public virtual bool get_IsReusable();
}
public class ServiceStack.Host.Handlers.RedirectHttpHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private string <RelativeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsoluteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public string RelativeUrl { get; public set; }
    public string AbsoluteUrl { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RelativeUrl();
    [CompilerGeneratedAttribute]
public void set_RelativeUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AbsoluteUrl();
    [CompilerGeneratedAttribute]
public void set_AbsoluteUrl(string value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    public static string MakeRelative(string relativeUrl);
    public virtual Task ProcessRequestAsync(IRequest request, IResponse response, string operationName);
}
[ExcludeMetadataAttribute]
public class ServiceStack.Host.Handlers.RequestHandlerInfo : object {
    [CompilerGeneratedAttribute]
private string <HandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    public string HandlerType { get; public set; }
    public string OperationName { get; public set; }
    public string PathInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HandlerType();
    [CompilerGeneratedAttribute]
public void set_HandlerType(string value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
}
[ExcludeMetadataAttribute]
[DataContractAttribute]
public class ServiceStack.Host.Handlers.RequestInfo : object {
}
public class ServiceStack.Host.Handlers.RequestInfoHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private RequestInfoResponse <RequestInfo>k__BackingField;
    public static RequestHandlerInfo LastRequestInfo;
    public RequestInfoResponse RequestInfo { get; public set; }
    [CompilerGeneratedAttribute]
public RequestInfoResponse get_RequestInfo();
    [CompilerGeneratedAttribute]
public void set_RequestInfo(RequestInfoResponse value);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.RequestInfoHandler/<ProcessRequestAsync>d__6")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
    public static Dictionary`2<string, string> ToDictionary(NameValueCollection nvc);
    public static string ToString(NameValueCollection nvc);
    public static RequestInfoResponse GetRequestInfo(IRequest httpReq);
}
[ExcludeMetadataAttribute]
[DataContractAttribute]
public class ServiceStack.Host.Handlers.RequestInfoResponse : object {
    [CompilerGeneratedAttribute]
private string <Usage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HandlerFactoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserHostAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripApplicationVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetLeftPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetPathUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsoluteUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebHostUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationBaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolveAbsoluteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualAbsolutePathRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualAppRelativePathRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HandlerFactoryArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <FormData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AcceptTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ipv4Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ipv6Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <LogonUserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <OperationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllOperationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RequestResponseMap>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PluginsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResponseStatus> <StartUpErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResponseStatus> <AsyncErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestHandlerInfo <LastRequestInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <VirtualPathProviderFiles>k__BackingField;
    [DataMemberAttribute]
public string Usage { get; public set; }
    [DataMemberAttribute]
public string Host { get; public set; }
    [DataMemberAttribute]
public string HostType { get; public set; }
    [DataMemberAttribute]
public string StartedAt { get; public set; }
    [DataMemberAttribute]
public string Date { get; public set; }
    [DataMemberAttribute]
public string ServiceName { get; public set; }
    [DataMemberAttribute]
public string HandlerFactoryPath { get; public set; }
    [DataMemberAttribute]
public string UserHostAddress { get; public set; }
    [DataMemberAttribute]
public string HttpMethod { get; public set; }
    [DataMemberAttribute]
public string PathInfo { get; public set; }
    [DataMemberAttribute]
public string OriginalPathInfo { get; public set; }
    [DataMemberAttribute]
public bool StripApplicationVirtualPath { get; public set; }
    [DataMemberAttribute]
public string GetLeftPath { get; public set; }
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string GetPathUrl { get; public set; }
    [DataMemberAttribute]
public string AbsoluteUri { get; public set; }
    [DataMemberAttribute]
public string WebHostUrl { get; public set; }
    [DataMemberAttribute]
public string ApplicationBaseUrl { get; public set; }
    [DataMemberAttribute]
public string ResolveAbsoluteUrl { get; public set; }
    [DataMemberAttribute]
public string ApplicationPath { get; public set; }
    [DataMemberAttribute]
public string ApplicationVirtualPath { get; public set; }
    [DataMemberAttribute]
public string VirtualAbsolutePathRoot { get; public set; }
    [DataMemberAttribute]
public string VirtualAppRelativePathRoot { get; public set; }
    [DataMemberAttribute]
public string RootDirectoryPath { get; public set; }
    [DataMemberAttribute]
public string ContentRootDirectoryPath { get; public set; }
    [DataMemberAttribute]
public string CurrentDirectory { get; public set; }
    [DataMemberAttribute]
public string HandlerFactoryArgs { get; public set; }
    [DataMemberAttribute]
public string RawUrl { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string ContentType { get; public set; }
    [DataMemberAttribute]
public int Status { get; public set; }
    [DataMemberAttribute]
public long ContentLength { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Headers { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> QueryString { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> FormData { get; public set; }
    [DataMemberAttribute]
public List`1<string> AcceptTypes { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    [DataMemberAttribute]
public string ResponseContentType { get; public set; }
    [DataMemberAttribute]
public string RequestAttributes { get; public set; }
    [DataMemberAttribute]
public string Ipv4Addresses { get; public set; }
    [DataMemberAttribute]
public string Ipv6Addresses { get; public set; }
    [DataMemberAttribute]
public string ErrorCode { get; public set; }
    [DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> LogonUserInfo { get; public set; }
    [DataMemberAttribute]
public string DebugString { get; public set; }
    [DataMemberAttribute]
public List`1<string> OperationNames { get; public set; }
    [DataMemberAttribute]
public List`1<string> AllOperationNames { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> RequestResponseMap { get; public set; }
    [DataMemberAttribute]
public List`1<string> PluginsLoaded { get; public set; }
    [DataMemberAttribute]
public List`1<ResponseStatus> StartUpErrors { get; public set; }
    [DataMemberAttribute]
public List`1<ResponseStatus> AsyncErrors { get; public set; }
    [DataMemberAttribute]
public RequestHandlerInfo LastRequestInfo { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Stats { get; public set; }
    [DataMemberAttribute]
public List`1<string> VirtualPathProviderFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Usage();
    [CompilerGeneratedAttribute]
public void set_Usage(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_HostType();
    [CompilerGeneratedAttribute]
public void set_HostType(string value);
    [CompilerGeneratedAttribute]
public string get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(string value);
    [CompilerGeneratedAttribute]
public string get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_HandlerFactoryPath();
    [CompilerGeneratedAttribute]
public void set_HandlerFactoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_UserHostAddress();
    [CompilerGeneratedAttribute]
public void set_UserHostAddress(string value);
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalPathInfo();
    [CompilerGeneratedAttribute]
public void set_OriginalPathInfo(string value);
    [CompilerGeneratedAttribute]
public bool get_StripApplicationVirtualPath();
    [CompilerGeneratedAttribute]
public void set_StripApplicationVirtualPath(bool value);
    [CompilerGeneratedAttribute]
public string get_GetLeftPath();
    [CompilerGeneratedAttribute]
public void set_GetLeftPath(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_GetPathUrl();
    [CompilerGeneratedAttribute]
public void set_GetPathUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AbsoluteUri();
    [CompilerGeneratedAttribute]
public void set_AbsoluteUri(string value);
    [CompilerGeneratedAttribute]
public string get_WebHostUrl();
    [CompilerGeneratedAttribute]
public void set_WebHostUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationBaseUrl();
    [CompilerGeneratedAttribute]
public void set_ApplicationBaseUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ResolveAbsoluteUrl();
    [CompilerGeneratedAttribute]
public void set_ResolveAbsoluteUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationPath(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationVirtualPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationVirtualPath(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualAbsolutePathRoot();
    [CompilerGeneratedAttribute]
public void set_VirtualAbsolutePathRoot(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualAppRelativePathRoot();
    [CompilerGeneratedAttribute]
public void set_VirtualAppRelativePathRoot(string value);
    [CompilerGeneratedAttribute]
public string get_RootDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_RootDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_ContentRootDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_ContentRootDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentDirectory();
    [CompilerGeneratedAttribute]
public void set_CurrentDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_HandlerFactoryArgs();
    [CompilerGeneratedAttribute]
public void set_HandlerFactoryArgs(string value);
    [CompilerGeneratedAttribute]
public string get_RawUrl();
    [CompilerGeneratedAttribute]
public void set_RawUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public long get_ContentLength();
    [CompilerGeneratedAttribute]
public void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_QueryString();
    [CompilerGeneratedAttribute]
public void set_QueryString(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_FormData();
    [CompilerGeneratedAttribute]
public void set_FormData(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AcceptTypes();
    [CompilerGeneratedAttribute]
public void set_AcceptTypes(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseContentType();
    [CompilerGeneratedAttribute]
public void set_ResponseContentType(string value);
    [CompilerGeneratedAttribute]
public string get_RequestAttributes();
    [CompilerGeneratedAttribute]
public void set_RequestAttributes(string value);
    [CompilerGeneratedAttribute]
public string get_Ipv4Addresses();
    [CompilerGeneratedAttribute]
public void set_Ipv4Addresses(string value);
    [CompilerGeneratedAttribute]
public string get_Ipv6Addresses();
    [CompilerGeneratedAttribute]
public void set_Ipv6Addresses(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_LogonUserInfo();
    [CompilerGeneratedAttribute]
public void set_LogonUserInfo(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_DebugString();
    [CompilerGeneratedAttribute]
public void set_DebugString(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_OperationNames();
    [CompilerGeneratedAttribute]
public void set_OperationNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllOperationNames();
    [CompilerGeneratedAttribute]
public void set_AllOperationNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RequestResponseMap();
    [CompilerGeneratedAttribute]
public void set_RequestResponseMap(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PluginsLoaded();
    [CompilerGeneratedAttribute]
public void set_PluginsLoaded(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<ResponseStatus> get_StartUpErrors();
    [CompilerGeneratedAttribute]
public void set_StartUpErrors(List`1<ResponseStatus> value);
    [CompilerGeneratedAttribute]
public List`1<ResponseStatus> get_AsyncErrors();
    [CompilerGeneratedAttribute]
public void set_AsyncErrors(List`1<ResponseStatus> value);
    [CompilerGeneratedAttribute]
public RequestHandlerInfo get_LastRequestInfo();
    [CompilerGeneratedAttribute]
public void set_LastRequestInfo(RequestHandlerInfo value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Stats();
    [CompilerGeneratedAttribute]
public void set_Stats(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_VirtualPathProviderFiles();
    [CompilerGeneratedAttribute]
public void set_VirtualPathProviderFiles(List`1<string> value);
}
public abstract class ServiceStack.Host.Handlers.ServiceStackHandlerBase : HttpAsyncTaskHandler {
    internal static Dictionary`2<Byte[], Byte[]> NetworkInterfaceIpv4Addresses;
    internal static Byte[][] NetworkInterfaceIpv6Addresses;
    internal ServiceStackHost appHost;
    [CompilerGeneratedAttribute]
private RequestAttributes <HandlerAttributes>k__BackingField;
    public RequestAttributes HandlerAttributes { get; public set; }
    public bool IsReusable { get; }
    private static ServiceStackHandlerBase();
    [CompilerGeneratedAttribute]
public RequestAttributes get_HandlerAttributes();
    [CompilerGeneratedAttribute]
public void set_HandlerAttributes(RequestAttributes value);
    public virtual bool get_IsReusable();
    public void UpdateResponseContentType(IRequest httpReq, object response);
    public virtual Task`1<object> GetResponseAsync(IRequest httpReq, object request);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.ServiceStackHandlerBase/<HandleResponse>d__12")]
public sealed virtual Task HandleResponse(IRequest httpReq, IResponse httpRes, object response);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.ServiceStackHandlerBase/<HandleResponseNext>d__13")]
private Task HandleResponseNext(IRequest httpReq, IResponse httpRes, object response);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.ServiceStackHandlerBase/<HandleAsyncBatchResponse>d__14")]
private static Task`1<Object[]> HandleAsyncBatchResponse(Task[] taskResults);
    public static Task`1<object> DeserializeHttpRequestAsync(Type operationType, IRequest httpReq, string contentType);
    private static long GetStreamLengthSafe(Stream stream);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.ServiceStackHandlerBase/<CreateContentTypeRequestAsync>d__17")]
protected static Task`1<object> CreateContentTypeRequestAsync(IRequest httpReq, Type requestType, string contentType);
    protected static object GetCustomRequestFromBinder(IRequest httpReq, Type requestType);
    public static Type GetOperationType(string operationName);
    protected static object ExecuteService(object request, IRequest httpReq);
    protected static void AssertOperationExists(string operationName, Type type);
    protected bool AssertAccess(IHttpRequest httpReq, IHttpResponse httpRes, Feature feature, string operationName);
    private static Task WriteDebugRequest(IRequest requestContext, object dto, Stream stream);
    public Task WriteDebugResponse(IResponse httpRes, object response);
}
public class ServiceStack.Host.Handlers.Soap11Handler : SoapHandler {
    public Soap11Handler(RequestAttributes soapType);
    protected virtual Message GetRequestMessageFromStream(Stream requestStream);
}
public class ServiceStack.Host.Handlers.Soap11MessageReplyHttpHandler : Soap11Handler {
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.Soap11MessageReplyHttpHandler/<ProcessRequestAsync>d__1")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.Soap12Handler : SoapHandler {
    public Soap12Handler(RequestAttributes soapType);
    protected virtual Message GetRequestMessageFromStream(Stream requestStream);
}
public class ServiceStack.Host.Handlers.Soap12MessageReplyHttpHandler : Soap12Handler {
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.Soap12MessageReplyHttpHandler/<ProcessRequestAsync>d__1")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public abstract class ServiceStack.Host.Handlers.SoapHandler : ServiceStackHandlerBase {
    public SoapHandler(RequestAttributes soapType);
    private sealed virtual override void ServiceStack.IOneWay.SendOneWay(Message requestMsg);
    protected Task SendOneWay(Message requestMsg, IRequest httpRequest, IResponse httpResponse);
    private sealed virtual override Message ServiceStack.ISyncReply.Send(Message requestMsg);
    protected abstract virtual Message GetRequestMessageFromStream(Stream requestStream);
    protected Task`1<Message> Send(Message requestMsg, IRequest httpRequest, IResponse httpResponse);
    public Message EmptyResponse(Message requestMsg, Type requestType);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.SoapHandler/<ExecuteMessage>d__7")]
protected Task`1<Message> ExecuteMessage(Message message, RequestAttributes requestAttributes, IRequest httpReq, IResponse httpRes);
    public static string GetAction(Message message);
    public static Message CreateResponseMessage(object response, MessageVersion msgVersion, Type requestType, bool noMsgAction);
    private Message PrepareEmptyResponse(Message message, IRequest req);
    private static string GetRequestXml(Message requestMsg);
    public static Byte[] SerializeSoap11ToBytes(IRequest req, object response);
    public static Byte[] SerializeSoap12ToBytes(IRequest req, object response);
    public static void SerializeSoap11ToStream(IRequest req, object response, Stream stream);
    public static void SerializeSoap12ToStream(IRequest req, object response, Stream stream);
    private static void SerializeSoapToStream(IRequest req, object response, MessageVersion defaultMsgVersion, Stream stream);
    private static void SetErrorStatusIfAny(IResponse res, Message responseMsg, int statusCode);
    protected static Message GetSoap12RequestMessage(Stream inputStream);
    protected static Message GetSoap11RequestMessage(Stream inputStream);
    protected static Message GetRequestMessage(Stream inputStream, MessageVersion msgVersion);
    protected Type GetRequestType(Message requestMsg, string xml);
    protected string GetAction(Message requestMsg, string xml);
    protected static string GetActionFromHttpContext();
    private static string GetAction(string contentType);
    private static string GetOperationName(string contentType);
    public string GetSoapContentType(string contentType);
}
public class ServiceStack.Host.Handlers.StaticContentHandler : HttpAsyncTaskHandler {
    private string textContents;
    private Byte[] bytes;
    private Stream stream;
    private string contentType;
    private StaticContentHandler(string contentType);
    public StaticContentHandler(string textContents, string contentType);
    public StaticContentHandler(Byte[] bytes, string contentType);
    public StaticContentHandler(Stream stream, string contentType);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.StaticContentHandler/<ProcessRequestAsync>d__8")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.Host.Handlers.StaticFileHandler : HttpAsyncTaskHandler {
    public static int DefaultBufferSize;
    [CompilerGeneratedAttribute]
private static Action`3<IRequest, IResponse, IVirtualFile> <ResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<IRequest, IResponse, IVirtualFile> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTime <DefaultFileModified>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <DefaultFileContents>k__BackingField;
    [CompilerGeneratedAttribute]
private IVirtualNode <VirtualNode>k__BackingField;
    private static ConcurrentDictionary`2<string, Byte[]> defaultFileCacheZip;
    private static Dictionary`2<string, string> allDirs;
    private static Dictionary`2<string, string> allFiles;
    public static Action`3<IRequest, IResponse, IVirtualFile> ResponseFilter { get; public set; }
    public Action`3<IRequest, IResponse, IVirtualFile> Filter { get; public set; }
    public int BufferSize { get; public set; }
    private static DateTime DefaultFileModified { get; private set; }
    private static string DefaultFilePath { get; private set; }
    private static Byte[] DefaultFileContents { get; private set; }
    public IVirtualNode VirtualNode { get; public set; }
    public bool IsReusable { get; }
    public StaticFileHandler(string virtualPath);
    public StaticFileHandler(IVirtualFile virtualFile);
    public StaticFileHandler(IVirtualDirectory virtualDir);
    private static StaticFileHandler();
    [CompilerGeneratedAttribute]
public static Action`3<IRequest, IResponse, IVirtualFile> get_ResponseFilter();
    [CompilerGeneratedAttribute]
public static void set_ResponseFilter(Action`3<IRequest, IResponse, IVirtualFile> value);
    [CompilerGeneratedAttribute]
public Action`3<IRequest, IResponse, IVirtualFile> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Action`3<IRequest, IResponse, IVirtualFile> value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
private static DateTime get_DefaultFileModified();
    [CompilerGeneratedAttribute]
private static void set_DefaultFileModified(DateTime value);
    [CompilerGeneratedAttribute]
private static string get_DefaultFilePath();
    [CompilerGeneratedAttribute]
private static void set_DefaultFilePath(string value);
    [CompilerGeneratedAttribute]
private static Byte[] get_DefaultFileContents();
    [CompilerGeneratedAttribute]
private static void set_DefaultFileContents(Byte[] value);
    [CompilerGeneratedAttribute]
public IVirtualNode get_VirtualNode();
    [CompilerGeneratedAttribute]
public void set_VirtualNode(IVirtualNode value);
    public static void SetDefaultFile(string defaultFilePath, Byte[] defaultFileContents, DateTime defaultFileModified);
    [AsyncStateMachineAttribute("ServiceStack.Host.Handlers.StaticFileHandler/<ProcessRequestAsync>d__35")]
public virtual Task ProcessRequestAsync(IRequest request, IResponse response, string operationName);
    private static Dictionary`2<string, string> CreateFileIndex(string appFilePath);
    private static Dictionary`2<string, string> CreateDirIndex(string appFilePath);
    public virtual bool get_IsReusable();
    [IteratorStateMachineAttribute("ServiceStack.Host.Handlers.StaticFileHandler/<GetFiles>d__42")]
private static IEnumerable`1<string> GetFiles(string path);
    private static List`1<string> GetDirs(string path);
}
public class ServiceStack.Host.Handlers.XmlOneWayHandler : GenericHandler {
}
public class ServiceStack.Host.Handlers.XmlReplyHandler : GenericHandler {
}
public class ServiceStack.Host.HandleServiceExceptionAsyncDelegate : MulticastDelegate {
    public HandleServiceExceptionAsyncDelegate(object object, IntPtr method);
    public virtual Task`1<object> Invoke(IRequest httpReq, object request, Exception ex);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, object request, Exception ex, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.HandleServiceExceptionDelegate : MulticastDelegate {
    public HandleServiceExceptionDelegate(object object, IntPtr method);
    public virtual object Invoke(IRequest httpReq, object request, Exception ex);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, object request, Exception ex, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.HandleUncaughtExceptionAsyncDelegate : MulticastDelegate {
    public HandleUncaughtExceptionAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, IResponse httpRes, string operationName, Exception ex, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.HandleUncaughtExceptionDelegate : MulticastDelegate {
    public HandleUncaughtExceptionDelegate(object object, IntPtr method);
    public virtual void Invoke(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, IResponse httpRes, string operationName, Exception ex, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Host.HttpFile : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <InputStream>k__BackingField;
    public string Name { get; public set; }
    public string FileName { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Stream InputStream { get; public set; }
    public HttpFile(IHttpFile file);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ContentLength();
    [CompilerGeneratedAttribute]
public void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public virtual Stream get_InputStream();
    [CompilerGeneratedAttribute]
public virtual void set_InputStream(Stream value);
}
public class ServiceStack.Host.HttpHandlerResolverDelegate : MulticastDelegate {
    public HttpHandlerResolverDelegate(object object, IntPtr method);
    public virtual IHttpHandler Invoke(IRequest httpReq);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, AsyncCallback callback, object object);
    public virtual IHttpHandler EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.HttpListener.DelReceiveWebRequest : MulticastDelegate {
    public DelReceiveWebRequest(object object, IntPtr method);
    public virtual void Invoke(HttpListenerContext context);
    public virtual IAsyncResult BeginInvoke(HttpListenerContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class ServiceStack.Host.HttpListener.HttpListenerBase : ServiceStackHost {
    private static int RequestThreadAbortedException;
    protected HttpListener Listener;
    protected bool IsStarted;
    protected string registeredReservedUrl;
    private AutoResetEvent ListenForNextRequest;
    [CompilerGeneratedAttribute]
private Action`1<HttpListenerContext> <BeforeRequest>k__BackingField;
    private bool disposed;
    public Action`1<HttpListenerContext> BeforeRequest { get; public set; }
    private bool IsListening { get; }
    protected HttpListenerBase(string serviceName, Assembly[] assembliesWithServices);
    [CompilerGeneratedAttribute]
public Action`1<HttpListenerContext> get_BeforeRequest();
    [CompilerGeneratedAttribute]
public void set_BeforeRequest(Action`1<HttpListenerContext> value);
    public virtual void OnAfterInit();
    public virtual void SetAppDomainData();
    public virtual ServiceStackHost Start(string urlBase);
    public virtual ServiceStackHost Start(IEnumerable`1<string> urlBases);
    public virtual ListenerRequest CreateRequest(HttpListenerContext httpContext, string operationName);
    protected void Start(string urlBase, WaitCallback listenCallback);
    protected void Start(IEnumerable`1<string> urlBases, WaitCallback listenCallback);
    protected virtual HttpListener CreateHttpListener();
    private bool get_IsListening();
    protected virtual void Listen(object state);
    private void ListenerCallback(IAsyncResult asyncResult);
    public virtual void ProcessRequestContext(HttpListenerContext context);
    public static void HandleError(Exception ex, HttpListenerContext context);
    public static void WriteUnhandledErrorResponse(IRequest httpReq, Exception ex);
    private static IHttpRequest CreateHttpRequest(HttpListenerContext context);
    protected virtual void OnBeginRequest(HttpListenerContext context);
    public virtual void Stop();
    protected abstract virtual Task ProcessRequestAsync(HttpListenerContext context);
    public static string AddUrlReservationToAcl(string urlBase);
    public static void RemoveUrlReservationFromAcl(string urlBase);
    protected virtual void Dispose(bool disposing);
}
public class ServiceStack.Host.HttpListener.ListenerRequest : object {
    private IResolver resolver;
    private HttpListenerRequest request;
    private IHttpResponse response;
    [CompilerGeneratedAttribute]
private RequestAttributes <RequestAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestPreferences <RequestPreferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    private string rawUrl;
    private string remoteIp;
    private Dictionary`2<string, object> items;
    private string responseContentType;
    [CompilerGeneratedAttribute]
private bool <HasExplicitResponseContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPathInfo>k__BackingField;
    private Dictionary`2<string, Cookie> cookies;
    private NameValueCollection headers;
    private NameValueCollection queryString;
    private NameValueCollection formData;
    private string httpMethod;
    private Encoding contentEncoding;
    [CompilerGeneratedAttribute]
private MemoryStream <BufferedStream>k__BackingField;
    private IHttpFile[] httpFiles;
    private IVirtualFile file;
    private IVirtualDirectory dir;
    private Nullable`1<bool> isDirectory;
    private Nullable`1<bool> isFile;
    protected bool validate_cookies;
    protected bool validate_query_string;
    protected bool validate_form;
    protected bool checked_cookies;
    protected bool checked_query_string;
    protected bool checked_form;
    private WebROCollection form;
    private HttpFileCollection files;
    public IResolver Resolver { get; public set; }
    public HttpListenerRequest HttpRequest { get; }
    public object OriginalRequest { get; }
    public IResponse Response { get; }
    public IHttpResponse HttpResponse { get; }
    public RequestAttributes RequestAttributes { get; public set; }
    public IRequestPreferences RequestPreferences { get; private set; }
    public string OperationName { get; public set; }
    public object Dto { get; public set; }
    public string RawUrl { get; }
    public string AbsoluteUri { get; }
    public string UserHostAddress { get; }
    public string XForwardedFor { get; }
    public Nullable`1<int> XForwardedPort { get; }
    public string XForwardedProtocol { get; }
    public string XRealIp { get; }
    public string Accept { get; }
    public string RemoteIp { get; }
    public string Authorization { get; }
    public bool IsSecureConnection { get; }
    public String[] AcceptTypes { get; }
    public Dictionary`2<string, object> Items { get; }
    public string ResponseContentType { get; public set; }
    public bool HasExplicitResponseContentType { get; private set; }
    public string PathInfo { get; }
    public string OriginalPathInfo { get; }
    public IDictionary`2<string, Cookie> Cookies { get; }
    public string UserAgent { get; }
    public NameValueCollection Headers { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection FormData { get; }
    public bool IsLocal { get; }
    public string HttpMethod { get; }
    public string Verb { get; }
    public string ContentType { get; }
    public Encoding ContentEncoding { get; public set; }
    public Uri UrlReferrer { get; }
    public MemoryStream BufferedStream { get; public set; }
    public Stream InputStream { get; }
    public bool UseBufferedStream { get; public set; }
    public long ContentLength { get; }
    public IHttpFile[] Files { get; }
    public bool IsDirectory { get; }
    public bool IsFile { get; }
    public NameValueCollection Form { get; }
    public ListenerRequest(HttpListenerContext httpContext, string operationName, RequestAttributes requestAttributes);
    public sealed virtual IResolver get_Resolver();
    public void set_Resolver(IResolver value);
    private string GetPathInfo();
    public HttpListenerRequest get_HttpRequest();
    public sealed virtual object get_OriginalRequest();
    public sealed virtual IResponse get_Response();
    public sealed virtual IHttpResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
public sealed virtual RequestAttributes get_RequestAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestAttributes(RequestAttributes value);
    [CompilerGeneratedAttribute]
public sealed virtual IRequestPreferences get_RequestPreferences();
    [CompilerGeneratedAttribute]
private void set_RequestPreferences(IRequestPreferences value);
    public sealed virtual T TryResolve();
    public sealed virtual object GetService(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    public sealed virtual string get_RawUrl();
    public sealed virtual string get_AbsoluteUri();
    public sealed virtual string get_UserHostAddress();
    public sealed virtual string get_XForwardedFor();
    public sealed virtual Nullable`1<int> get_XForwardedPort();
    public sealed virtual string get_XForwardedProtocol();
    public sealed virtual string get_XRealIp();
    public sealed virtual string get_Accept();
    public sealed virtual string get_RemoteIp();
    public sealed virtual string get_Authorization();
    public sealed virtual bool get_IsSecureConnection();
    public sealed virtual String[] get_AcceptTypes();
    public sealed virtual Dictionary`2<string, object> get_Items();
    public sealed virtual string get_ResponseContentType();
    public sealed virtual void set_ResponseContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasExplicitResponseContentType();
    [CompilerGeneratedAttribute]
private void set_HasExplicitResponseContentType(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathInfo();
    [CompilerGeneratedAttribute]
public sealed virtual string get_OriginalPathInfo();
    public sealed virtual IDictionary`2<string, Cookie> get_Cookies();
    public sealed virtual string get_UserAgent();
    public sealed virtual NameValueCollection get_Headers();
    public sealed virtual NameValueCollection get_QueryString();
    public sealed virtual NameValueCollection get_FormData();
    public sealed virtual bool get_IsLocal();
    public sealed virtual string get_HttpMethod();
    public sealed virtual string get_Verb();
    public string Param(string name);
    public sealed virtual string get_ContentType();
    public Encoding get_ContentEncoding();
    public void set_ContentEncoding(Encoding value);
    public sealed virtual Uri get_UrlReferrer();
    public static Encoding GetEncoding(string contentTypeHeader);
    [CompilerGeneratedAttribute]
public sealed virtual MemoryStream get_BufferedStream();
    [CompilerGeneratedAttribute]
public void set_BufferedStream(MemoryStream value);
    public sealed virtual Stream get_InputStream();
    public sealed virtual bool get_UseBufferedStream();
    public sealed virtual void set_UseBufferedStream(bool value);
    public sealed virtual string GetRawBody();
    public sealed virtual Task`1<string> GetRawBodyAsync();
    public sealed virtual long get_ContentLength();
    public sealed virtual IHttpFile[] get_Files();
    private static Stream GetSubStream(Stream stream);
    private static void EndSubStream(Stream stream);
    public static string GetHandlerPathIfAny(string listenerUrl);
    public static string NormalizePathInfo(string pathInfo, string handlerPath);
    public sealed virtual IVirtualFile GetFile();
    public sealed virtual IVirtualDirectory GetDirectory();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual bool get_IsFile();
    internal static string GetParameter(string header, string attr);
    private void LoadMultiPart();
    public NameValueCollection get_Form();
    private static void ThrowValidationException(string name, string key, string value);
    private static void ValidateNameValueCollection(string name, NameValueCollection coll);
    internal static bool IsInvalidString(string val);
    internal static bool IsInvalidString(string val, Int32& validationFailureIndex);
    public void ValidateInput();
    private bool IsContentType(string ct, bool starts_with);
    private void LoadWwwForm();
    private void AddRawKeyValue(StringBuilder key, StringBuilder value);
}
public class ServiceStack.Host.HttpListener.ListenerResponse : object {
    private static ILog Log;
    private HttpListenerResponse response;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <BufferedStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookies <Cookies>k__BackingField;
    public object OriginalResponse { get; }
    public IRequest Request { get; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public object Dto { get; public set; }
    public MemoryStream BufferedStream { get; public set; }
    public Stream OutputStream { get; }
    public bool UseBufferedStream { get; public set; }
    public bool IsClosed { get; private set; }
    public bool KeepAlive { get; public set; }
    public bool HasStarted { get; }
    public Dictionary`2<string, object> Items { get; private set; }
    public ICookies Cookies { get; public set; }
    public ListenerResponse(HttpListenerResponse response, IRequest request);
    private static ListenerResponse();
    public sealed virtual object get_OriginalResponse();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    public sealed virtual string get_StatusDescription();
    public sealed virtual void set_StatusDescription(string value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual void AddHeader(string name, string value);
    public void AppendHeader(string name, string value);
    public sealed virtual void RemoveHeader(string name);
    public sealed virtual string GetHeader(string name);
    public sealed virtual void Redirect(string url);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    [CompilerGeneratedAttribute]
public MemoryStream get_BufferedStream();
    [CompilerGeneratedAttribute]
public void set_BufferedStream(MemoryStream value);
    public sealed virtual Stream get_OutputStream();
    public sealed virtual bool get_UseBufferedStream();
    public sealed virtual void set_UseBufferedStream(bool value);
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync(CancellationToken token);
    public sealed virtual void End();
    public sealed virtual void Flush();
    [AsyncStateMachineAttribute("ServiceStack.Host.HttpListener.ListenerResponse/<FlushAsync>d__39")]
public sealed virtual Task FlushAsync(CancellationToken token);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual void SetContentLength(long contentLength);
    public sealed virtual bool get_KeepAlive();
    public sealed virtual void set_KeepAlive(bool value);
    public sealed virtual bool get_HasStarted();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual ICookies get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(ICookies value);
    public sealed virtual void SetCookie(Cookie cookie);
    public sealed virtual void ClearCookies();
}
[ExtensionAttribute]
public static class ServiceStack.Host.HttpRequestAuthentication : object {
    [ExtensionAttribute]
public static string GetAuthorization(IRequest req);
    [ExtensionAttribute]
public static string GetBearerToken(IRequest req);
    [ExtensionAttribute]
public static string GetJwtToken(IRequest req);
    [ExtensionAttribute]
public static string GetJwtRefreshToken(IRequest req);
    [ExtensionAttribute]
public static string GetAuthSecret(IRequest httpReq);
    [ExtensionAttribute]
public static string GetBasicAuth(IRequest req);
    [ExtensionAttribute]
public static Nullable`1<KeyValuePair`2<string, string>> GetBasicAuthUserAndPassword(IRequest httpReq);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetDigestAuth(IRequest httpReq);
    [ExtensionAttribute]
public static string GetCookieValue(IRequest httpReq, string cookieName);
    [ExtensionAttribute]
public static string GetItemStringValue(IRequest httpReq, string itemName);
}
public class ServiceStack.Host.HttpResponseStreamWrapper : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookies <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBufferedStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    public Dictionary`2<string, string> Headers { get; public set; }
    public object OriginalResponse { get; }
    public IRequest Request { get; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public bool KeepOpen { get; public set; }
    public ICookies Cookies { get; public set; }
    public Stream OutputStream { get; private set; }
    public object Dto { get; public set; }
    public bool UseBufferedStream { get; public set; }
    public bool IsClosed { get; private set; }
    public bool KeepAlive { get; public set; }
    public bool HasStarted { get; public set; }
    public Dictionary`2<string, object> Items { get; private set; }
    public HttpResponseStreamWrapper(Stream stream, IRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    public sealed virtual object get_OriginalResponse();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_KeepOpen();
    [CompilerGeneratedAttribute]
public void set_KeepOpen(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ICookies get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(ICookies value);
    public sealed virtual void AddHeader(string name, string value);
    public sealed virtual void RemoveHeader(string name);
    public sealed virtual string GetHeader(string name);
    public sealed virtual void Redirect(string url);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_OutputStream();
    [CompilerGeneratedAttribute]
private void set_OutputStream(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseBufferedStream();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseBufferedStream(bool value);
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync(CancellationToken token);
    public void ForceClose();
    public sealed virtual void End();
    public sealed virtual void Flush();
    public sealed virtual Task FlushAsync(CancellationToken token);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual void SetContentLength(long contentLength);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepAlive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasStarted();
    [CompilerGeneratedAttribute]
public void set_HasStarted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(Dictionary`2<string, object> value);
    public sealed virtual void SetCookie(Cookie cookie);
    public sealed virtual void ClearCookies();
}
public static class ServiceStack.Host.HttpWebRequestConfig : object {
    public static void Configure();
    public static void TransferAuthenticationTokens(HttpWebRequest httpWebRequest);
}
public interface ServiceStack.Host.IHasBufferedStream {
    public MemoryStream BufferedStream { get; }
    public abstract virtual MemoryStream get_BufferedStream();
}
public class ServiceStack.Host.InMemoryRollingRequestLogger : object {
    internal static long requestId;
    public static int DefaultCapacity;
    protected ConcurrentQueue`1<RequestLogEntry> logEntries;
    protected int capacity;
    [CompilerGeneratedAttribute]
private bool <EnableSessionTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRequestBodyTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <RequestBodyTrackingFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableResponseTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <ResponseTrackingFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableErrorTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitToServiceRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <SkipLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ExcludeRequestDtoTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <HideRequestBodyForRequestDtoTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ExcludeResponseTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IRequest, RequestLogEntry> <RequestLogFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <IgnoreFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<DateTime> <CurrentDateFn>k__BackingField;
    public bool EnableSessionTracking { get; public set; }
    public bool EnableRequestBodyTracking { get; public set; }
    public Func`2<IRequest, bool> RequestBodyTrackingFilter { get; public set; }
    public bool EnableResponseTracking { get; public set; }
    public Func`2<IRequest, bool> ResponseTrackingFilter { get; public set; }
    public bool EnableErrorTracking { get; public set; }
    public bool LimitToServiceRequests { get; public set; }
    public Func`2<IRequest, bool> SkipLogging { get; public set; }
    public Type[] ExcludeRequestDtoTypes { get; public set; }
    public Type[] HideRequestBodyForRequestDtoTypes { get; public set; }
    public Type[] ExcludeResponseTypes { get; public set; }
    public Action`2<IRequest, RequestLogEntry> RequestLogFilter { get; public set; }
    public Func`2<object, bool> IgnoreFilter { get; public set; }
    public Func`1<DateTime> CurrentDateFn { get; public set; }
    public InMemoryRollingRequestLogger(Nullable`1<int> capacity);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableSessionTracking();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableSessionTracking(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableRequestBodyTracking();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableRequestBodyTracking(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IRequest, bool> get_RequestBodyTrackingFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestBodyTrackingFilter(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableResponseTracking();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableResponseTracking(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IRequest, bool> get_ResponseTrackingFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseTrackingFilter(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableErrorTracking();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableErrorTracking(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LimitToServiceRequests();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LimitToServiceRequests(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IRequest, bool> get_SkipLogging();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SkipLogging(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_ExcludeRequestDtoTypes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeRequestDtoTypes(Type[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_HideRequestBodyForRequestDtoTypes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideRequestBodyForRequestDtoTypes(Type[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_ExcludeResponseTypes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeResponseTypes(Type[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<IRequest, RequestLogEntry> get_RequestLogFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestLogFilter(Action`2<IRequest, RequestLogEntry> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<object, bool> get_IgnoreFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreFilter(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<DateTime> get_CurrentDateFn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CurrentDateFn(Func`1<DateTime> value);
    public virtual bool ShouldSkip(IRequest req, object requestDto);
    public virtual void Log(IRequest request, object requestDto, object response, TimeSpan requestDuration);
    protected RequestLogEntry CreateEntry(IRequest request, object requestDto, object response, TimeSpan requestDuration, Type requestType);
    protected bool ExcludeRequestType(Type requestType);
    public Dictionary`2<string, string> SerializableItems(Dictionary`2<string, object> items);
    public virtual List`1<RequestLogEntry> GetLatestLogs(Nullable`1<int> take);
    public static object ToSerializableErrorResponse(object response);
}
public class ServiceStack.Host.InstanceExecFn : MulticastDelegate {
    public InstanceExecFn(object object, IntPtr method);
    public virtual object Invoke(IRequest requestContext, object instance, object request);
    public virtual IAsyncResult BeginInvoke(IRequest requestContext, object instance, object request, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public interface ServiceStack.Host.IServiceExec {
    public abstract virtual object Execute(IRequest requestContext, object instance, object request);
}
public interface ServiceStack.Host.ITypedFilter {
    public abstract virtual void Invoke(IRequest req, IResponse res, object dto);
}
public interface ServiceStack.Host.ITypedFilter`1 {
    public abstract virtual void Invoke(IRequest req, IResponse res, T dto);
}
public interface ServiceStack.Host.ITypedFilterAsync {
    public abstract virtual Task InvokeAsync(IRequest req, IResponse res, object dto);
}
public interface ServiceStack.Host.ITypedFilterAsync`1 {
    public abstract virtual Task InvokeAsync(IRequest req, IResponse res, T dto);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ServiceStack.Host.MetadataTypeExtensions : object {
    public static HashSet`1<string> CollectionTypes;
    private static MetadataTypeExtensions();
    [ExtensionAttribute]
public static string GetParamType(MetadataPropertyType prop, MetadataType type, Operation op);
    [ExtensionAttribute]
public static string GetParamType(ApiMemberAttribute attr, Type type, string verb);
    private static string GetRequestParamType(Operation op, string name, string defaultType);
    [ExtensionAttribute]
public static bool IsCollection(MetadataPropertyType prop);
    [ExtensionAttribute]
public static bool IsArray(MetadataPropertyType prop);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsInterface(MetadataType type);
    [ExtensionAttribute]
public static bool IsAbstract(MetadataType type);
    [ExtensionAttribute]
public static bool ExcludesFeature(Type type, Feature feature);
    [ExtensionAttribute]
public static bool Has(Feature feature, Feature flag);
    [ExtensionAttribute]
public static Nullable`1<bool> NullIfFalse(bool value);
    [ExtensionAttribute]
public static List`1<T> NullIfEmpty(List`1<T> value);
    [ExtensionAttribute]
public static Nullable`1<int> NullIfMinValue(int value);
    [ExtensionAttribute]
public static Dictionary`2<string, String[]> ToMetadataServiceRoutes(Dictionary`2<Type, String[]> serviceRoutes, Action`1<Dictionary`2<string, String[]>> filter);
    [ExtensionAttribute]
public static bool ForceInclude(MetadataTypesConfig config, Type type);
    [ExtensionAttribute]
public static bool ForceInclude(MetadataTypesConfig config, MetadataType type);
    [ExtensionAttribute]
internal static bool ForceInclude(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Host.Operation : object {
    [CompilerGeneratedAttribute]
private Type <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <ResponseType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RestrictAttribute <RestrictTo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<RestPath> <Routes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<IRequestFilterBase> <RequestFilterAttributes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<IResponseFilterBase> <ResponseFilterAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RequiredRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RequiresAnyRole>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RequiredPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RequiresAnyPermission>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Claim> <RequiredClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RequiredScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ApiCss <LocodeCss>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ApiCss <ExplorerCss>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<InputInfo> <FormLayout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HashSet`1<Type> <RequestPropertyAttributes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ITypeValidator> <RequestTypeValidationRules>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<IValidationRule> <RequestPropertyValidationRules>k__BackingField;
    public string Name { get; }
    public Type RequestType { get; public set; }
    public Type ServiceType { get; public set; }
    [NullableAttribute("2")]
public Type ResponseType { get; public set; }
    public Type DataModelType { get; }
    public Type ViewModelType { get; }
    [NullableAttribute("2")]
public RestrictAttribute RestrictTo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Actions { get; public set; }
    public bool ReturnsVoid { get; }
    public bool IsOneWay { get; }
    public string Method { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<RestPath> Routes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<IRequestFilterBase> RequestFilterAttributes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<IResponseFilterBase> ResponseFilterAttributes { get; public set; }
    public bool RequiresAuthentication { get; public set; }
    public bool RequiresApiKey { get; public set; }
    public List`1<string> RequiredRoles { get; public set; }
    public List`1<string> RequiresAnyRole { get; public set; }
    public List`1<string> RequiredPermissions { get; public set; }
    public List`1<string> RequiresAnyPermission { get; public set; }
    public List`1<Claim> RequiredClaims { get; public set; }
    public List`1<string> RequiredScopes { get; public set; }
    public List`1<string> Tags { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    [NullableAttribute("2")]
public string Notes { get; public set; }
    [NullableAttribute("2")]
public ApiCss LocodeCss { get; public set; }
    [NullableAttribute("2")]
public ApiCss ExplorerCss { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<InputInfo> FormLayout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HashSet`1<Type> RequestPropertyAttributes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ITypeValidator> RequestTypeValidationRules { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<IValidationRule> RequestPropertyValidationRules { get; private set; }
    public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_RequestType();
    [CompilerGeneratedAttribute]
public void set_RequestType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
public void set_ServiceType(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_ResponseType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResponseType(Type value);
    public Type get_DataModelType();
    public Type get_ViewModelType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RestrictAttribute get_RestrictTo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RestrictTo(RestrictAttribute value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<string> value);
    public bool get_ReturnsVoid();
    public bool get_IsOneWay();
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public List`1<RestPath> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<RestPath> value);
    [CompilerGeneratedAttribute]
public List`1<IRequestFilterBase> get_RequestFilterAttributes();
    [CompilerGeneratedAttribute]
public void set_RequestFilterAttributes(List`1<IRequestFilterBase> value);
    [CompilerGeneratedAttribute]
public List`1<IResponseFilterBase> get_ResponseFilterAttributes();
    [CompilerGeneratedAttribute]
public void set_ResponseFilterAttributes(List`1<IResponseFilterBase> value);
    [CompilerGeneratedAttribute]
public bool get_RequiresAuthentication();
    [CompilerGeneratedAttribute]
public void set_RequiresAuthentication(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiresApiKey();
    [CompilerGeneratedAttribute]
public void set_RequiresApiKey(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiredRoles();
    [CompilerGeneratedAttribute]
public void set_RequiredRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiresAnyRole();
    [CompilerGeneratedAttribute]
public void set_RequiresAnyRole(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiredPermissions();
    [CompilerGeneratedAttribute]
public void set_RequiredPermissions(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiresAnyPermission();
    [CompilerGeneratedAttribute]
public void set_RequiresAnyPermission(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Claim> get_RequiredClaims();
    [CompilerGeneratedAttribute]
public void set_RequiredClaims(List`1<Claim> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiredScopes();
    [CompilerGeneratedAttribute]
public void set_RequiredScopes(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Notes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Notes(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ApiCss get_LocodeCss();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LocodeCss(ApiCss value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ApiCss get_ExplorerCss();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ExplorerCss(ApiCss value);
    [CompilerGeneratedAttribute]
public List`1<InputInfo> get_FormLayout();
    [CompilerGeneratedAttribute]
public void set_FormLayout(List`1<InputInfo> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_RequestPropertyAttributes();
    [CompilerGeneratedAttribute]
public void set_RequestPropertyAttributes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<ITypeValidator> get_RequestTypeValidationRules();
    [CompilerGeneratedAttribute]
private void set_RequestTypeValidationRules(List`1<ITypeValidator> value);
    [CompilerGeneratedAttribute]
public List`1<IValidationRule> get_RequestPropertyValidationRules();
    [CompilerGeneratedAttribute]
private void set_RequestPropertyValidationRules(List`1<IValidationRule> value);
    private sealed virtual override object System.ICloneable.Clone();
    public Operation Clone();
    public void AddRequestTypeValidationRules(List`1<ITypeValidator> typeValidators);
    public void AddRequestPropertyValidationRules(List`1<IValidationRule> propertyValidators);
    public Operation AddRole(string role);
    public Operation AddPermission(string permission);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <AddRequestTypeValidationRules>b__116_0(string x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <AddRequestTypeValidationRules>b__116_1(string x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Host.OperationDto : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ResponseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <RestrictTo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <VisibleTo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Actions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Routes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string ResponseName { get; public set; }
    public string ServiceName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> RestrictTo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> VisibleTo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Actions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Routes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Tags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ResponseName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResponseName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RestrictTo();
    [CompilerGeneratedAttribute]
public void set_RestrictTo(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_VisibleTo();
    [CompilerGeneratedAttribute]
public void set_VisibleTo(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
}
public class ServiceStack.Host.RequestBaseWrapper : HttpRequestBase {
    public IHttpRequest request;
    [CompilerGeneratedAttribute]
private HttpRequestBase <Original>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <ContentEncoding>k__BackingField;
    public HttpRequestBase Original { get; public set; }
    public Uri Url { get; }
    public string RawUrl { get; }
    public string ContentType { get; }
    public string HttpMethod { get; }
    public string ApplicationPath { get; }
    public string PathInfo { get; }
    public string Path { get; }
    public int ContentLength { get; }
    public string RequestType { get; }
    public bool IsAuthenticated { get; }
    public string PhysicalApplicationPath { get; }
    public string PhysicalPath { get; }
    public string FilePath { get; }
    public string CurrentExecutionFilePath { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public Uri UrlReferrer { get; }
    public string UserAgent { get; }
    public string UserHostAddress { get; }
    public string UserHostName { get; }
    public Encoding ContentEncoding { get; public set; }
    public WindowsIdentity LogonUserIdentity { get; }
    public String[] UserLanguages { get; }
    public HttpCookieCollection Cookies { get; }
    public NameValueCollection Params { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection Form { get; }
    public NameValueCollection Headers { get; }
    public NameValueCollection ServerVariables { get; }
    public RequestBaseWrapper(IHttpRequest request);
    [CompilerGeneratedAttribute]
public HttpRequestBase get_Original();
    [CompilerGeneratedAttribute]
public void set_Original(HttpRequestBase value);
    public virtual Uri get_Url();
    public virtual string get_RawUrl();
    public virtual string get_ContentType();
    public virtual string get_HttpMethod();
    public virtual string get_ApplicationPath();
    public virtual string get_PathInfo();
    public virtual string get_Path();
    public virtual int get_ContentLength();
    public virtual string get_RequestType();
    public virtual bool get_IsAuthenticated();
    public virtual string get_PhysicalApplicationPath();
    public virtual string get_PhysicalPath();
    public virtual string get_FilePath();
    public virtual string get_CurrentExecutionFilePath();
    public virtual bool get_IsLocal();
    public virtual bool get_IsSecureConnection();
    public virtual Uri get_UrlReferrer();
    public virtual string get_UserAgent();
    public virtual string get_UserHostAddress();
    public virtual string get_UserHostName();
    [CompilerGeneratedAttribute]
public virtual Encoding get_ContentEncoding();
    [CompilerGeneratedAttribute]
public virtual void set_ContentEncoding(Encoding value);
    public virtual WindowsIdentity get_LogonUserIdentity();
    public virtual String[] get_UserLanguages();
    public virtual HttpCookieCollection get_Cookies();
    public virtual NameValueCollection get_Params();
    public virtual NameValueCollection get_QueryString();
    public virtual NameValueCollection get_Form();
    public virtual NameValueCollection get_Headers();
    public virtual NameValueCollection get_ServerVariables();
}
public class ServiceStack.Host.RequestPreferences : object {
    private string acceptEncoding;
    private HttpContextBase httpContext;
    private HttpWorkerRequest httpWorkerRequest;
    private HttpWorkerRequest HttpWorkerRequest { get; }
    public string AcceptEncoding { get; }
    public bool AcceptsBrotli { get; }
    public bool AcceptsDeflate { get; }
    public bool AcceptsGzip { get; }
    public RequestPreferences(HttpContextBase httpContext);
    public RequestPreferences(IRequest httpRequest);
    public static HttpWorkerRequest GetWorker(HttpContextBase context);
    private HttpWorkerRequest get_HttpWorkerRequest();
    public string get_AcceptEncoding();
    public sealed virtual bool get_AcceptsBrotli();
    public sealed virtual bool get_AcceptsDeflate();
    public sealed virtual bool get_AcceptsGzip();
}
public class ServiceStack.Host.RestHandler : ServiceStackHandlerBase {
    [CompilerGeneratedAttribute]
private IRestPath <RestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseContentType>k__BackingField;
    public IRestPath RestPath { get; public set; }
    public string ResponseContentType { get; public set; }
    public static IRestPath FindMatchingRestPath(IHttpRequest httpReq, String& contentType);
    public static IRestPath FindMatchingRestPath(string httpMethod, string pathInfo, String& contentType);
    public static string GetSanitizedPathInfo(string pathInfo, String& contentType);
    public IRestPath GetRestPath(IHttpRequest httpReq);
    [CompilerGeneratedAttribute]
public IRestPath get_RestPath();
    [CompilerGeneratedAttribute]
public void set_RestPath(IRestPath value);
    [CompilerGeneratedAttribute]
public string get_ResponseContentType();
    [CompilerGeneratedAttribute]
public void set_ResponseContentType(string value);
    public virtual bool RunAsAsync();
    [AsyncStateMachineAttribute("ServiceStack.Host.RestHandler/<ProcessRequestAsync>d__14")]
public virtual Task ProcessRequestAsync(IRequest req, IResponse httpRes, string operationName);
    [AsyncStateMachineAttribute("ServiceStack.Host.RestHandler/<CreateRequestAsync>d__15")]
public static Task`1<object> CreateRequestAsync(IRequest httpReq, IRestPath restPath);
    [AsyncStateMachineAttribute("ServiceStack.Host.RestHandler/<CreateRequestAsync>d__16")]
public static Task`1<object> CreateRequestAsync(IRequest httpReq, IRestPath restPath, Dictionary`2<string, string> requestParams);
    public static object CreateRequest(IRequest httpReq, IRestPath restPath, Dictionary`2<string, string> requestParams, object requestDto);
    public sealed virtual Task`1<object> CreateRequestAsync(IRequest httpReq, string operationName);
}
public class ServiceStack.Host.RestPath : object {
    private static string WildCard;
    private static char WildCardChar;
    private static string PathSeparator;
    private static char PathSeparatorChar;
    private static Char[] PathSeparatorCharArray;
    private static Char[] VerbSeparatorCharArray;
    private static char ComponentSeparator;
    private static string VariablePrefix;
    private static String[] prefixesLookup;
    private Boolean[] componentsWithSeparators;
    [CompilerGeneratedAttribute]
private bool <IsWildCardPath>k__BackingField;
    private String[] literalsToMatch;
    [CompilerGeneratedAttribute]
private String[] <VariablesNames>k__BackingField;
    private Boolean[] isWildcard;
    private int wildcardCount;
    [CompilerGeneratedAttribute]
private int <VariableArgsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PathComponentsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalComponentsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchRule>k__BackingField;
    private Func`2<IHttpRequest, bool> matchRuleFn;
    [CompilerGeneratedAttribute]
private bool <AllowsAllVerbs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowedVerbs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstMatchHashKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueMatchHashKey>k__BackingField;
    private StringMapTypeDeserializer typeDeserializer;
    private Dictionary`2<string, string> propertyNamesMap;
    [CompilerGeneratedAttribute]
private static Func`4<RestPath, string, String[], int> <CalculateMatchScore>k__BackingField;
    public bool IsWildCardPath { get; }
    public String[] VariablesNames { get; }
    public int VariableArgsCount { get; public set; }
    public int PathComponentsCount { get; public set; }
    public int TotalComponentsCount { get; public set; }
    public String[] Verbs { get; }
    public Type RequestType { get; }
    public string Path { get; }
    public string Summary { get; public set; }
    public string Notes { get; public set; }
    public string MatchRule { get; }
    public bool AllowsAllVerbs { get; }
    public string AllowedVerbs { get; }
    public int Priority { get; public set; }
    public String[] Constraints { get; }
    public bool IsValid { get; public set; }
    public string FirstMatchHashKey { get; private set; }
    public string UniqueMatchHashKey { get; }
    public static Func`4<RestPath, string, String[], int> CalculateMatchScore { get; public set; }
    public RestPath(Type requestType, string path);
    public RestPath(Type requestType, string path, string verbs, string summary, string notes, string matchRule);
    private static RestPath();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsWildCardPath();
    [CompilerGeneratedAttribute]
public String[] get_VariablesNames();
    [CompilerGeneratedAttribute]
public int get_VariableArgsCount();
    [CompilerGeneratedAttribute]
public void set_VariableArgsCount(int value);
    [CompilerGeneratedAttribute]
public int get_PathComponentsCount();
    [CompilerGeneratedAttribute]
public void set_PathComponentsCount(int value);
    [CompilerGeneratedAttribute]
public int get_TotalComponentsCount();
    [CompilerGeneratedAttribute]
public void set_TotalComponentsCount(int value);
    public String[] get_Verbs();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_RequestType();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    [CompilerGeneratedAttribute]
public string get_MatchRule();
    [CompilerGeneratedAttribute]
public bool get_AllowsAllVerbs();
    [CompilerGeneratedAttribute]
public string get_AllowedVerbs();
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public String[] get_Constraints();
    public static String[] GetPathPartsForMatching(string pathInfo);
    private static string GetHashPrefix(String[] pathPartsForMatching);
    public static IEnumerable`1<string> GetFirstMatchHashKeys(String[] pathPartsForMatching);
    public static IEnumerable`1<string> GetFirstMatchWildCardHashKeys(String[] pathPartsForMatching);
    [IteratorStateMachineAttribute("ServiceStack.Host.RestPath/<GetPotentialMatchesWithPrefix>d__68")]
private static IEnumerable`1<string> GetPotentialMatchesWithPrefix(string hashPrefix, String[] pathPartsForMatching);
    public RestRoute ToRestRoute();
    private void RegisterCaseInsensitivePropertyNameMappings();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public string get_FirstMatchHashKey();
    [CompilerGeneratedAttribute]
private void set_FirstMatchHashKey(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueMatchHashKey();
    [CompilerGeneratedAttribute]
public static Func`4<RestPath, string, String[], int> get_CalculateMatchScore();
    [CompilerGeneratedAttribute]
public static void set_CalculateMatchScore(Func`4<RestPath, string, String[], int> value);
    public int MatchScore(string httpMethod, String[] withPathInfoParts);
    public bool IsMatch(IHttpRequest httpReq);
    public void AfterInit();
    public Func`2<IHttpRequest, bool> GetRequestRule();
    public bool IsMatch(string httpMethod, String[] withPathInfoParts, Int32& wildcardMatchCount);
    private bool ExplodeComponents(String[]& withPathInfoParts);
    public object CreateRequest(string pathInfo);
    public sealed virtual object CreateRequest(string pathInfo, Dictionary`2<string, string> queryStringAndFormData, object fromInstance);
    public bool IsVariable(string name);
    public virtual int GetHashCode();
}
public static class ServiceStack.Host.RouteNamingConvention : object {
    private static int AutoGenPriority;
    public static List`1<string> AttributeNamesToMatch;
    public static List`1<string> PropertyNamesToMatch;
    private static RouteNamingConvention();
    public static void WithRequestDtoName(IServiceRoutes routes, Type requestType, string allowedVerbs);
    public static void WithMatchingAttributes(IServiceRoutes routes, Type requestType, string allowedVerbs);
    public static void WithMatchingPropertyNames(IServiceRoutes routes, Type requestType, string allowedVerbs);
}
public class ServiceStack.Host.RouteNamingConventionDelegate : MulticastDelegate {
    public RouteNamingConventionDelegate(object object, IntPtr method);
    public virtual void Invoke(IServiceRoutes routes, Type requestType, string allowedVerbs);
    public virtual IAsyncResult BeginInvoke(IServiceRoutes routes, Type requestType, string allowedVerbs, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.ServiceController : object {
    private static string ResponseDtoSuffix;
    private ServiceStackHost appHost;
    private HashSet`1<Type> registeredServices;
    private Dictionary`2<Type, ServiceExecFn> requestExecMap;
    private Dictionary`2<Type, RestrictAttribute> requestServiceAttrs;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Func`2<IRequest, object>> <RequestTypeFactoryMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IEnumerable`1<Type>> <ResolveServicesFn>k__BackingField;
    private ContainerResolveCache typeFactory;
    public Dictionary`2<string, List`1<RestPath>> RestPathMap;
    private static RestPath fallbackRestPath;
    private static Char[] InvalidRouteChars;
    private Dictionary`2<Type, List`1<Type>> serviceExecCache;
    public Dictionary`2<Type, Func`2<IRequest, object>> RequestTypeFactoryMap { get; public set; }
    public Func`1<IEnumerable`1<Type>> ResolveServicesFn { get; public set; }
    public ServiceController(ServiceStackHost appHost);
    public ServiceController(ServiceStackHost appHost, Func`1<IEnumerable`1<Type>> resolveServicesFn);
    private static ServiceController();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, Func`2<IRequest, object>> get_RequestTypeFactoryMap();
    [CompilerGeneratedAttribute]
public void set_RequestTypeFactoryMap(Dictionary`2<Type, Func`2<IRequest, object>> value);
    [CompilerGeneratedAttribute]
public Func`1<IEnumerable`1<Type>> get_ResolveServicesFn();
    [CompilerGeneratedAttribute]
public void set_ResolveServicesFn(Func`1<IEnumerable`1<Type>> value);
    public ServiceController Init();
    public void RegisterServicesInAssembly(Assembly assembly);
    public void RegisterService(Type serviceType);
    internal void Register(ITypeFactory serviceFactoryFn);
    public void RegisterService(ITypeFactory serviceFactoryFn, Type serviceType);
    public static Type GetResponseType(ActionMethod mi, Type requestType);
    public static bool IsRequestType(Type type);
    public static bool IsServiceType(Type serviceType);
    public static bool IsServiceAction(ActionMethod mi);
    public static bool IsServiceAction(string actionName, Type requestType);
    public static bool IsServiceAction(string actionName);
    public static HashSet`1<Type> GetServiceRequestTypes(IEnumerable`1<Type> serviceTypes);
    public static HashSet`1<Type> GetAutoBatchedRequestTypes(IEnumerable`1<Type> serviceTypes);
    public void RegisterRestPaths(Type requestType);
    public void RegisterRestPath(RestPath restPath);
    public void AfterInit();
    [ObsoleteAttribute("Use GetRestPathForRequest(httpMethod, pathInfo, httpReq)")]
public sealed virtual IRestPath GetRestPathForRequest(string httpMethod, string pathInfo);
    public RestPath GetRestPathForRequest(string httpMethod, string pathInfo, IHttpRequest httpReq);
    public void ResetServiceExecCachesIfNeeded(Type serviceType, Type requestType);
    public void RegisterServiceExecutor(Type requestType, Type serviceType, ITypeFactory serviceFactoryFn);
    private void AddToRequestExecMap(Type requestType, Type serviceType, ServiceExecFn handlerFn);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceController/<ManagedServiceExec>d__41")]
private Task`1<object> ManagedServiceExec(ServiceExecFn serviceExec, IService service, IRequest req, object requestDto);
    internal static void InjectRequestContext(object service, IRequest req);
    [ObsoleteAttribute("Use ApplyResponseFiltersAsync")]
public object ApplyResponseFilters(object response, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceController/<ApplyResponseFiltersAsync>d__44")]
private Task`1<object> ApplyResponseFiltersAsync(object response, IRequest req);
    public sealed virtual object ExecuteMessage(IMessage mqMessage);
    public Task`1<object> ExecuteMessageAsync(IMessage mqMessage, CancellationToken token);
    public sealed virtual object ExecuteMessage(IMessage dto, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceController/<ExecuteMessageAsync>d__48")]
public Task`1<object> ExecuteMessageAsync(IMessage dto, IRequest req, CancellationToken token);
    public sealed virtual object Execute(object requestDto);
    public virtual object Execute(object requestDto, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceController/<ExecuteAsync>d__51")]
public virtual Task`1<object> ExecuteAsync(object requestDto, IRequest req);
    public sealed virtual object Execute(object requestDto, IRequest req, bool applyFilters);
    public sealed virtual object Execute(IRequest req, bool applyFilters);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceController/<ExecValidatorsAsync>d__54")]
public Task ExecValidatorsAsync(object request, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceController/<ManagedGatewayExecuteAsync>d__55")]
public Task`1<object> ManagedGatewayExecuteAsync(object request, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceController/<GatewayExecuteAsync>d__56")]
public sealed virtual Task`1<object> GatewayExecuteAsync(object requestDto, IRequest req, bool applyFilters);
    public bool HasService(Type requestType);
    public virtual ServiceExecFn GetService(Type requestType);
    private static ServiceExecFn CreateAutoBatchServiceExec(ServiceExecFn handlerFnAsync);
    public void AssertServiceRestrictions(Type requestType, RequestAttributes actualAttributes);
}
internal class ServiceStack.Host.ServiceExec`1 : object {
    private static Dictionary`2<Type, List`1<ActionContext>> actionMap;
    private static Dictionary`2<string, InstanceExecFn> execMap;
    public static void Reset();
    private static ActionInvokerFn CreateExecFn(Type requestType, MethodInfo mi);
    private static IEnumerable`1<ActionContext> GetActionsFor();
    public static void CreateServiceRunnersFor();
    public static object Execute(IRequest request, object instance, object requestDto, string requestName);
}
[ExtensionAttribute]
public static class ServiceStack.Host.ServiceExecExtensions : object {
    [ExtensionAttribute]
public static List`1<ActionMethod> GetRequestActions(Type serviceType, Type requestType);
    [ExtensionAttribute]
public static string GetVerbs(Type serviceType);
    [ExtensionAttribute]
public static List`1<ActionMethod> GetActions(Type serviceType);
    private static List`1<ActionMethod> MergeAsyncActions(List`1<ActionMethod> to);
}
public class ServiceStack.Host.ServiceExecFn : MulticastDelegate {
    public ServiceExecFn(object object, IntPtr method);
    public virtual Task`1<object> Invoke(IRequest requestContext, object request);
    public virtual IAsyncResult BeginInvoke(IRequest requestContext, object request, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Host.ServiceMetadata : object {
    [CompilerGeneratedAttribute]
private List`1<RestPath> <restPaths>P;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Operation> <OperationsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Operation> <OperationsResponseMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Operation> <OperationNamesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <RequestTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ServiceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ResponseTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<Operation>> <ConfigureOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<MetadataType>> <ConfigureMetadataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ForceInclude>k__BackingField;
    private HashSet`1<Assembly> excludeAssemblies;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Type> allDtos;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Type> dtoTypesMap;
    private HashSet`1<string> duplicateTypeNames;
    public Dictionary`2<Type, Operation> OperationsMap { get; protected set; }
    public Dictionary`2<Type, Operation> OperationsResponseMap { get; protected set; }
    public Dictionary`2<string, Operation> OperationNamesMap { get; protected set; }
    public HashSet`1<Type> RequestTypes { get; protected set; }
    public HashSet`1<Type> ServiceTypes { get; protected set; }
    public HashSet`1<Type> ResponseTypes { get; protected set; }
    public List`1<Action`1<Operation>> ConfigureOperations { get; protected set; }
    public List`1<Action`1<MetadataType>> ConfigureMetadataTypes { get; protected set; }
    public IEnumerable`1<Operation> Operations { get; }
    public HashSet`1<Type> ForceInclude { get; public set; }
    public ServiceMetadata(List`1<RestPath> restPaths);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, Operation> get_OperationsMap();
    [CompilerGeneratedAttribute]
protected void set_OperationsMap(Dictionary`2<Type, Operation> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, Operation> get_OperationsResponseMap();
    [CompilerGeneratedAttribute]
protected void set_OperationsResponseMap(Dictionary`2<Type, Operation> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Operation> get_OperationNamesMap();
    [CompilerGeneratedAttribute]
protected void set_OperationNamesMap(Dictionary`2<string, Operation> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_RequestTypes();
    [CompilerGeneratedAttribute]
protected void set_RequestTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_ServiceTypes();
    [CompilerGeneratedAttribute]
protected void set_ServiceTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_ResponseTypes();
    [CompilerGeneratedAttribute]
protected void set_ResponseTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<Operation>> get_ConfigureOperations();
    [CompilerGeneratedAttribute]
protected void set_ConfigureOperations(List`1<Action`1<Operation>> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<MetadataType>> get_ConfigureMetadataTypes();
    [CompilerGeneratedAttribute]
protected void set_ConfigureMetadataTypes(List`1<Action`1<MetadataType>> value);
    public IEnumerable`1<Operation> get_Operations();
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_ForceInclude();
    [CompilerGeneratedAttribute]
public void set_ForceInclude(HashSet`1<Type> value);
    public void Add(Type serviceType, Type requestType, Type responseType);
    public void AfterInit();
    public List`1<Assembly> GetOperationAssemblies();
    public List`1<OperationDto> GetOperationDtos();
    public List`1<Operation> GetOperationsByTag(string tag);
    public List`1<Operation> GetOperationsByTags(String[] tags);
    [NullableContextAttribute("2")]
public Operation GetOperation(Type requestType);
    public List`1<ActionMethod> GetImplementedActions(Type serviceType, Type requestType);
    public Type GetRequestType(string requestDtoName);
    public Type GetOperationType(string operationTypeName);
    public Type GetServiceTypeByRequest(Type requestType);
    public Type GetServiceTypeByResponse(Type responseType);
    public Type GetResponseTypeByRequest(Type requestType);
    public List`1<Type> GetAllOperationTypes();
    public List`1<string> GetAllOperationNames();
    public List`1<string> GetOperationNamesForMetadata(IRequest httpReq);
    public List`1<string> GetOperationNamesForMetadata(Format format);
    public List`1<string> GetOperationNamesForMetadata(RequestAttributes reqAttrs);
    public bool IsAuthorized(Operation operation, IRequest req, IAuthSession session);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceMetadata/<IsAuthorizedAsync>d__60")]
public Task`1<bool> IsAuthorizedAsync(Operation operation, IRequest req, IAuthSession session);
    public bool IsVisible(IRequest httpReq, Operation operation);
    public bool IsVisible(IRequest httpReq, Type requestType);
    public bool IsVisible(IRequest httpReq, Format format, string operationName);
    public bool CanAccess(IRequest httpReq, Format format, string operationName);
    public bool CanAccess(RequestAttributes reqAttrs, Format format, string operationName);
    public bool CanAccess(Format format, string operationName);
    public bool HasImplementation(Operation operation, Format format);
    private static bool CanShowToNetwork(RestrictAttribute restrictTo, RequestAttributes reqAttrs);
    public HashSet`1<Type> GetAllDtos();
    public HashSet`1<Type> GetDtoTypes(Func`2<Type, bool> include);
    public Type FindDtoType(string typeName);
    public RestPath FindRoute(string pathInfo, string method);
    public object CreateRequestFromUrl(string relativeOrAbsoluteUrl, string method);
    public static void AddReferencedTypes(HashSet`1<Type> to, Type type);
    public static void AddReferencedTypes(HashSet`1<Type> to, Type type, Func`2<Type, bool> include);
    [NullableContextAttribute("2")]
public static bool IsDtoType(Type type);
    public List`1<MetadataType> GetMetadataTypesForOperation(IRequest httpReq, Operation op);
    private static void AddReferencedTypes(MetadataType metadataType, MetadataTypes metadataTypes, List`1<MetadataType> types);
    [NullableContextAttribute("2")]
private static MetadataType FindMetadataType(MetadataTypes metadataTypes, Type type);
    private static MetadataType FindMetadataType(MetadataTypes metadataTypes, string name, string namespace);
    public List`1<Type> GetAllSoapOperationTypes();
    public List`1<string> GetAllRoles();
    public List`1<string> GetAllPermissions();
    public object CreateRequestDto(Type requestType, object dto);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetOperationAssemblies>b__43_1(Assembly x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ServiceStack.Host.ServiceMetadataExtensions : object {
    [ExtensionAttribute]
public static OperationDto ToOperationDto(Operation operation);
    [ExtensionAttribute]
public static List`1<ApiMemberAttribute> GetApiMembers(Type operationType);
    [ExtensionAttribute]
public static List`1<Assembly> GetAssemblies(Operation operation);
}
public class ServiceStack.Host.ServiceRequestExec`2 : object {
    public sealed virtual object Execute(IRequest requestContext, object instance, object request);
}
public class ServiceStack.Host.ServiceRoutes : object {
    [CompilerGeneratedAttribute]
private ServiceStackHost <appHost>P;
    private static ILog log;
    public ServiceRoutes(ServiceStackHost appHost);
    private static ServiceRoutes();
    public sealed virtual IServiceRoutes Add(string restPath);
    public sealed virtual IServiceRoutes Add(string restPath, string verbs);
    public sealed virtual IServiceRoutes Add(Type requestType, string restPath, string verbs);
    public sealed virtual IServiceRoutes Add(Type requestType, string restPath, string verbs, int priority);
    public sealed virtual IServiceRoutes Add(Type requestType, string restPath, string verbs, string summary, string notes);
    public sealed virtual IServiceRoutes Add(Type requestType, string restPath, string verbs, string summary, string notes, string matches);
    private bool HasExistingRoute(Type requestType, string restPath);
}
public class ServiceStack.Host.ServiceRunner`1 : object {
    protected static ILog Log;
    protected IAppHost AppHost;
    protected ActionContext ActionContext;
    protected ActionInvokerFn ServiceAction;
    protected IRequestFilterBase[] RequestFilters;
    protected IResponseFilterBase[] ResponseFilters;
    public ServiceRunner`1(IAppHost appHost, ActionContext actionContext);
    private static ServiceRunner`1();
    public T ResolveService(IRequest requestContext);
    public virtual void BeforeEachRequest(IRequest req, TRequest request, object service);
    public virtual object AfterEachRequest(IRequest req, TRequest request, object response, object service);
    [ObsoleteAttribute("Use OnBeforeExecute(req, requestDto, service)")]
public virtual void OnBeforeExecute(IRequest req, TRequest request);
    public virtual void OnBeforeExecute(IRequest req, TRequest request, object service);
    [ObsoleteAttribute("Use OnAfterExecute(req, requestDto, service)")]
public virtual object OnAfterExecute(IRequest req, object response);
    public virtual object OnAfterExecute(IRequest req, object response, object service);
    [ObsoleteAttribute("Override ExecuteAsync instead")]
public virtual object Execute(IRequest req, object instance, TRequest requestDto);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceRunner`1/<ExecuteAsync>d__15")]
public virtual Task`1<object> ExecuteAsync(IRequest req, object instance, TRequest requestDto);
    private void LogRequest(IRequest req, object requestDto, object response);
    public virtual object Execute(IRequest req, object instance, IMessage`1<TRequest> request);
    [ObsoleteAttribute("Use HandleExceptionAsync(req, requestDto, ex, service)")]
public virtual Task`1<object> HandleExceptionAsync(IRequest req, TRequest requestDto, Exception ex);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceRunner`1/<ManagedHandleExceptionAsync>d__19")]
protected Task`1<object> ManagedHandleExceptionAsync(IRequest req, TRequest requestDto, Exception ex, object service);
    [AsyncStateMachineAttribute("ServiceStack.Host.ServiceRunner`1/<HandleExceptionAsync>d__20")]
public virtual Task`1<object> HandleExceptionAsync(IRequest req, TRequest requestDto, Exception ex, object service);
    public sealed virtual object ExecuteOneWay(IRequest req, object instance, TRequest requestDto);
    public sealed virtual object Process(IRequest requestContext, object instance, object request);
}
public class ServiceStack.Host.StreamSerializerResolverDelegate : MulticastDelegate {
    public StreamSerializerResolverDelegate(object object, IntPtr method);
    public virtual bool Invoke(IRequest httpReq, object dto, IResponse httpRes);
    public virtual IAsyncResult BeginInvoke(IRequest httpReq, object dto, IResponse httpRes, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class ServiceStack.Host.TypedFilter`1 : object {
    private Action`3<IRequest, IResponse, T> action;
    public TypedFilter`1(Action`3<IRequest, IResponse, T> action);
    public sealed virtual void Invoke(IRequest req, IResponse res, object dto);
}
public class ServiceStack.Host.TypedFilterAsync`1 : object {
    private Func`4<IRequest, IResponse, T, Task> action;
    public TypedFilterAsync`1(Func`4<IRequest, IResponse, T, Task> action);
    [AsyncStateMachineAttribute("ServiceStack.Host.TypedFilterAsync`1/<InvokeAsync>d__2")]
public sealed virtual Task InvokeAsync(IRequest req, IResponse res, object dto);
}
public class ServiceStack.Host.VoidActionInvokerFn : MulticastDelegate {
    public VoidActionInvokerFn(object object, IntPtr method);
    public virtual void Invoke(object instance, object request);
    public virtual IAsyncResult BeginInvoke(object instance, object request, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Host.XsdMetadata : object {
    [CompilerGeneratedAttribute]
private ServiceMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Flash>k__BackingField;
    public ServiceMetadata Metadata { get; public set; }
    public bool Flash { get; public set; }
    public XsdMetadata(ServiceMetadata metadata, bool flash);
    [CompilerGeneratedAttribute]
public ServiceMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(ServiceMetadata value);
    [CompilerGeneratedAttribute]
public bool get_Flash();
    [CompilerGeneratedAttribute]
public void set_Flash(bool value);
    public List`1<string> GetReplyOperationNames(Format format, HashSet`1<Type> soapTypes);
    public List`1<string> GetOneWayOperationNames(Format format, HashSet`1<Type> soapTypes);
    public static Type GetBaseTypeWithTheSameName(Type type);
}
public class ServiceStack.HostConfig : object {
    public static string DefaultWsdlNamespace;
    public static string ServiceStackPath;
    private static HostConfig instance;
    [CompilerGeneratedAttribute]
private string <WsdlServiceNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private AppInfo <AppInfo>k__BackingField;
    private RequestAttributes metadataVisibility;
    [CompilerGeneratedAttribute]
private List`1<Type> <EmbeddedResourceBaseTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <EmbeddedResourceSources>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <EmbeddedResourceTreatAsFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PreferredContentTypes>k__BackingField;
    internal String[] PreferredContentTypesArray;
    [CompilerGeneratedAttribute]
private bool <AllowJsonpRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRouteContentTypeExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BufferSyncSerializers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StrictMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugAspNetHostEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugHttpListenerHostEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DefaultDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreWarningsOnAllProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreWarningsOnAutoQueryApis>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoreWarningsOnPropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoreFormatsInMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AllowFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <CompressFilesWithExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CompressFilesLargerThanBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ForbiddenPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IgnorePathInfoPrefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebHostUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebHostPhysicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HandlerFactoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultRedirectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataRedirectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceEndpointsMetadataConfig <ServiceEndpointsMetadataConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SoapServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriterSettings <XmlWriterSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAccessRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAutoHtmlResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBclJsonSerializers>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <IsMobileRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Func`2<IHttpRequest, bool>> <RequestRules>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <GlobalResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Feature <EnableFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnsInnerException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteErrorsToResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeDependenciesAfterUse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogUnobservedTaskExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <HtmlReplaceTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AppendUtf8CharsetOnContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TimeSpan> <AddMaxAgeForStaticMimeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RouteNamingConventionDelegate> <RouteNamingConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, int> <MapExceptionToStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSaltedHash>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPasswordHasher> <FallbackPasswordHashers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSessionIdsInHttpParams>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSessionCookies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RestrictAllCookiesToDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultJsonpCacheExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Return204NoContentForEmptyResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowJsConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPartialResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSecureCookies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHttpOnlyCookies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseSameSiteCookies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAclUrlReservation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddRedirectParamsToQueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectToDefaultDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripApplicationVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipFormDataInCreatingRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectDirectoriesToTrailingSlashes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ScanSkipPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RedirectPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHttpsLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCamelCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJsObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOptimizations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatNonNullableRefTypesAsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminAuthSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthSession <AuthSecretSession>k__BackingField;
    [CompilerGeneratedAttribute]
private FallbackRestPathDelegate <FallbackRestPath>k__BackingField;
    private HashSet`1<string> razorNamespaces;
    public static HostConfig Instance { get; }
    public string WsdlServiceNamespace { get; public set; }
    public string ApiVersion { get; public set; }
    public AppInfo AppInfo { get; public set; }
    public RequestAttributes MetadataVisibility { get; public set; }
    public List`1<Type> EmbeddedResourceBaseTypes { get; public set; }
    public List`1<Assembly> EmbeddedResourceSources { get; public set; }
    public HashSet`1<string> EmbeddedResourceTreatAsFiles { get; public set; }
    public string DefaultContentType { get; public set; }
    public List`1<string> PreferredContentTypes { get; public set; }
    public bool AllowJsonpRequests { get; public set; }
    public bool AllowRouteContentTypeExtensions { get; public set; }
    public bool BufferSyncSerializers { get; public set; }
    public bool DebugMode { get; public set; }
    public Nullable`1<bool> StrictMode { get; public set; }
    public string DebugAspNetHostEnvironment { get; public set; }
    public string DebugHttpListenerHostEnvironment { get; public set; }
    public List`1<string> DefaultDocuments { get; private set; }
    public bool IgnoreWarningsOnAllProperties { get; public set; }
    public bool IgnoreWarningsOnAutoQueryApis { get; public set; }
    public HashSet`1<string> IgnoreWarningsOnPropertyNames { get; private set; }
    public HashSet`1<string> IgnoreFormatsInMetadata { get; public set; }
    public HashSet`1<string> AllowFileExtensions { get; public set; }
    public HashSet`1<string> CompressFilesWithExtensions { get; public set; }
    public Nullable`1<long> CompressFilesLargerThanBytes { get; public set; }
    public List`1<string> ForbiddenPaths { get; public set; }
    public List`1<string> AllowFilePaths { get; public set; }
    public List`1<string> IgnorePathInfoPrefixes { get; public set; }
    public string WebHostUrl { get; public set; }
    public string WebHostPhysicalPath { get; public set; }
    public string HandlerFactoryPath { get; public set; }
    public string PathBase { get; internal set; }
    public string DefaultRedirectPath { get; public set; }
    public string MetadataRedirectPath { get; public set; }
    public ServiceEndpointsMetadataConfig ServiceEndpointsMetadataConfig { get; public set; }
    public string SoapServiceName { get; public set; }
    public XmlWriterSettings XmlWriterSettings { get; public set; }
    public bool EnableAccessRestrictions { get; public set; }
    public bool EnableAutoHtmlResponses { get; public set; }
    public bool UseBclJsonSerializers { get; public set; }
    public Regex IsMobileRegex { get; public set; }
    public Dictionary`2<string, Func`2<IHttpRequest, bool>> RequestRules { get; public set; }
    public Dictionary`2<string, string> GlobalResponseHeaders { get; public set; }
    public Feature EnableFeatures { get; public set; }
    public bool ReturnsInnerException { get; public set; }
    public bool WriteErrorsToResponse { get; public set; }
    public bool DisposeDependenciesAfterUse { get; public set; }
    public bool LogUnobservedTaskExceptions { get; public set; }
    [ObsoleteAttribute("Use LogManager.LogFactory")]
public ILogFactory LogFactory { get; public set; }
    public Dictionary`2<string, string> HtmlReplaceTokens { get; public set; }
    public HashSet`1<string> AppendUtf8CharsetOnContentTypes { get; public set; }
    public Dictionary`2<string, TimeSpan> AddMaxAgeForStaticMimeTypes { get; public set; }
    public List`1<RouteNamingConventionDelegate> RouteNamingConventions { get; public set; }
    public Dictionary`2<Type, int> MapExceptionToStatusCode { get; public set; }
    public bool UseSaltedHash { get; public set; }
    public List`1<IPasswordHasher> FallbackPasswordHashers { get; private set; }
    public bool AllowSessionIdsInHttpParams { get; public set; }
    public bool AllowSessionCookies { get; public set; }
    public string RestrictAllCookiesToDomain { get; public set; }
    public TimeSpan DefaultJsonpCacheExpiration { get; public set; }
    public bool Return204NoContentForEmptyResponse { get; public set; }
    public bool AllowJsConfig { get; public set; }
    public bool AllowPartialResponses { get; public set; }
    [ObsoleteAttribute("Use !UseHttpOnlyCookies")]
unknown bool AllowNonHttpOnlyCookies {public set; }
    [ObsoleteAttribute("Use UseSecureCookies")]
unknown bool OnlySendSessionCookiesSecurely {public set; }
    public bool UseSecureCookies { get; public set; }
    public bool UseHttpOnlyCookies { get; public set; }
    public Nullable`1<bool> UseSameSiteCookies { get; public set; }
    public bool AllowAclUrlReservation { get; public set; }
    public bool AddRedirectParamsToQueryString { get; public set; }
    public bool RedirectToDefaultDocuments { get; public set; }
    public bool StripApplicationVirtualPath { get; public set; }
    public bool SkipFormDataInCreatingRequest { get; public set; }
    public bool RedirectDirectoriesToTrailingSlashes { get; public set; }
    public List`1<string> ScanSkipPaths { get; private set; }
    public Dictionary`2<string, string> RedirectPaths { get; private set; }
    public bool UseHttpsLinks { get; public set; }
    public bool UseCamelCase { get; public set; }
    public bool UseJsObject { get; public set; }
    public bool EnableOptimizations { get; public set; }
    public bool TreatNonNullableRefTypesAsRequired { get; public set; }
    public string AdminAuthSecret { get; public set; }
    public IAuthSession AuthSecretSession { get; public set; }
    public FallbackRestPathDelegate FallbackRestPath { get; public set; }
    public HashSet`1<string> RazorNamespaces { get; }
    public static HostConfig get_Instance();
    public static HostConfig ResetInstance();
    public static HostConfig NewInstance();
    [CompilerGeneratedAttribute]
public string get_WsdlServiceNamespace();
    [CompilerGeneratedAttribute]
public void set_WsdlServiceNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_ApiVersion();
    [CompilerGeneratedAttribute]
public void set_ApiVersion(string value);
    [CompilerGeneratedAttribute]
public AppInfo get_AppInfo();
    [CompilerGeneratedAttribute]
public void set_AppInfo(AppInfo value);
    public RequestAttributes get_MetadataVisibility();
    public void set_MetadataVisibility(RequestAttributes value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_EmbeddedResourceBaseTypes();
    [CompilerGeneratedAttribute]
public void set_EmbeddedResourceBaseTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<Assembly> get_EmbeddedResourceSources();
    [CompilerGeneratedAttribute]
public void set_EmbeddedResourceSources(List`1<Assembly> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_EmbeddedResourceTreatAsFiles();
    [CompilerGeneratedAttribute]
public void set_EmbeddedResourceTreatAsFiles(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public string get_DefaultContentType();
    [CompilerGeneratedAttribute]
public void set_DefaultContentType(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PreferredContentTypes();
    [CompilerGeneratedAttribute]
public void set_PreferredContentTypes(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowJsonpRequests();
    [CompilerGeneratedAttribute]
public void set_AllowJsonpRequests(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowRouteContentTypeExtensions();
    [CompilerGeneratedAttribute]
public void set_AllowRouteContentTypeExtensions(bool value);
    [CompilerGeneratedAttribute]
public bool get_BufferSyncSerializers();
    [CompilerGeneratedAttribute]
public void set_BufferSyncSerializers(bool value);
    [CompilerGeneratedAttribute]
public bool get_DebugMode();
    [CompilerGeneratedAttribute]
public void set_DebugMode(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StrictMode();
    [CompilerGeneratedAttribute]
public void set_StrictMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DebugAspNetHostEnvironment();
    [CompilerGeneratedAttribute]
public void set_DebugAspNetHostEnvironment(string value);
    [CompilerGeneratedAttribute]
public string get_DebugHttpListenerHostEnvironment();
    [CompilerGeneratedAttribute]
public void set_DebugHttpListenerHostEnvironment(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DefaultDocuments();
    [CompilerGeneratedAttribute]
private void set_DefaultDocuments(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreWarningsOnAllProperties();
    [CompilerGeneratedAttribute]
public void set_IgnoreWarningsOnAllProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreWarningsOnAutoQueryApis();
    [CompilerGeneratedAttribute]
public void set_IgnoreWarningsOnAutoQueryApis(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoreWarningsOnPropertyNames();
    [CompilerGeneratedAttribute]
private void set_IgnoreWarningsOnPropertyNames(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoreFormatsInMetadata();
    [CompilerGeneratedAttribute]
public void set_IgnoreFormatsInMetadata(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AllowFileExtensions();
    [CompilerGeneratedAttribute]
public void set_AllowFileExtensions(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_CompressFilesWithExtensions();
    [CompilerGeneratedAttribute]
public void set_CompressFilesWithExtensions(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CompressFilesLargerThanBytes();
    [CompilerGeneratedAttribute]
public void set_CompressFilesLargerThanBytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ForbiddenPaths();
    [CompilerGeneratedAttribute]
public void set_ForbiddenPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowFilePaths();
    [CompilerGeneratedAttribute]
public void set_AllowFilePaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnorePathInfoPrefixes();
    [CompilerGeneratedAttribute]
public void set_IgnorePathInfoPrefixes(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_WebHostUrl();
    [CompilerGeneratedAttribute]
public void set_WebHostUrl(string value);
    [CompilerGeneratedAttribute]
public string get_WebHostPhysicalPath();
    [CompilerGeneratedAttribute]
public void set_WebHostPhysicalPath(string value);
    [CompilerGeneratedAttribute]
public string get_HandlerFactoryPath();
    [CompilerGeneratedAttribute]
public void set_HandlerFactoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_PathBase();
    [CompilerGeneratedAttribute]
internal void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultRedirectPath();
    [CompilerGeneratedAttribute]
public void set_DefaultRedirectPath(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataRedirectPath();
    [CompilerGeneratedAttribute]
public void set_MetadataRedirectPath(string value);
    [CompilerGeneratedAttribute]
public ServiceEndpointsMetadataConfig get_ServiceEndpointsMetadataConfig();
    [CompilerGeneratedAttribute]
public void set_ServiceEndpointsMetadataConfig(ServiceEndpointsMetadataConfig value);
    [CompilerGeneratedAttribute]
public string get_SoapServiceName();
    [CompilerGeneratedAttribute]
public void set_SoapServiceName(string value);
    [CompilerGeneratedAttribute]
public XmlWriterSettings get_XmlWriterSettings();
    [CompilerGeneratedAttribute]
public void set_XmlWriterSettings(XmlWriterSettings value);
    [CompilerGeneratedAttribute]
public bool get_EnableAccessRestrictions();
    [CompilerGeneratedAttribute]
public void set_EnableAccessRestrictions(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAutoHtmlResponses();
    [CompilerGeneratedAttribute]
public void set_EnableAutoHtmlResponses(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseBclJsonSerializers();
    [CompilerGeneratedAttribute]
public void set_UseBclJsonSerializers(bool value);
    [CompilerGeneratedAttribute]
public Regex get_IsMobileRegex();
    [CompilerGeneratedAttribute]
public void set_IsMobileRegex(Regex value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`2<IHttpRequest, bool>> get_RequestRules();
    [CompilerGeneratedAttribute]
public void set_RequestRules(Dictionary`2<string, Func`2<IHttpRequest, bool>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_GlobalResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_GlobalResponseHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Feature get_EnableFeatures();
    [CompilerGeneratedAttribute]
public void set_EnableFeatures(Feature value);
    [CompilerGeneratedAttribute]
public bool get_ReturnsInnerException();
    [CompilerGeneratedAttribute]
public void set_ReturnsInnerException(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteErrorsToResponse();
    [CompilerGeneratedAttribute]
public void set_WriteErrorsToResponse(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisposeDependenciesAfterUse();
    [CompilerGeneratedAttribute]
public void set_DisposeDependenciesAfterUse(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogUnobservedTaskExceptions();
    [CompilerGeneratedAttribute]
public void set_LogUnobservedTaskExceptions(bool value);
    public ILogFactory get_LogFactory();
    public void set_LogFactory(ILogFactory value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_HtmlReplaceTokens();
    [CompilerGeneratedAttribute]
public void set_HtmlReplaceTokens(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AppendUtf8CharsetOnContentTypes();
    [CompilerGeneratedAttribute]
public void set_AppendUtf8CharsetOnContentTypes(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TimeSpan> get_AddMaxAgeForStaticMimeTypes();
    [CompilerGeneratedAttribute]
public void set_AddMaxAgeForStaticMimeTypes(Dictionary`2<string, TimeSpan> value);
    [CompilerGeneratedAttribute]
public List`1<RouteNamingConventionDelegate> get_RouteNamingConventions();
    [CompilerGeneratedAttribute]
public void set_RouteNamingConventions(List`1<RouteNamingConventionDelegate> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, int> get_MapExceptionToStatusCode();
    [CompilerGeneratedAttribute]
public void set_MapExceptionToStatusCode(Dictionary`2<Type, int> value);
    [CompilerGeneratedAttribute]
public bool get_UseSaltedHash();
    [CompilerGeneratedAttribute]
public void set_UseSaltedHash(bool value);
    [CompilerGeneratedAttribute]
public List`1<IPasswordHasher> get_FallbackPasswordHashers();
    [CompilerGeneratedAttribute]
private void set_FallbackPasswordHashers(List`1<IPasswordHasher> value);
    [CompilerGeneratedAttribute]
public bool get_AllowSessionIdsInHttpParams();
    [CompilerGeneratedAttribute]
public void set_AllowSessionIdsInHttpParams(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowSessionCookies();
    [CompilerGeneratedAttribute]
public void set_AllowSessionCookies(bool value);
    [CompilerGeneratedAttribute]
public string get_RestrictAllCookiesToDomain();
    [CompilerGeneratedAttribute]
public void set_RestrictAllCookiesToDomain(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultJsonpCacheExpiration();
    [CompilerGeneratedAttribute]
public void set_DefaultJsonpCacheExpiration(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_Return204NoContentForEmptyResponse();
    [CompilerGeneratedAttribute]
public void set_Return204NoContentForEmptyResponse(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowJsConfig();
    [CompilerGeneratedAttribute]
public void set_AllowJsConfig(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPartialResponses();
    [CompilerGeneratedAttribute]
public void set_AllowPartialResponses(bool value);
    public void set_AllowNonHttpOnlyCookies(bool value);
    public void set_OnlySendSessionCookiesSecurely(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSecureCookies();
    [CompilerGeneratedAttribute]
public void set_UseSecureCookies(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseHttpOnlyCookies();
    [CompilerGeneratedAttribute]
public void set_UseHttpOnlyCookies(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseSameSiteCookies();
    [CompilerGeneratedAttribute]
public void set_UseSameSiteCookies(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAclUrlReservation();
    [CompilerGeneratedAttribute]
public void set_AllowAclUrlReservation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddRedirectParamsToQueryString();
    [CompilerGeneratedAttribute]
public void set_AddRedirectParamsToQueryString(bool value);
    [CompilerGeneratedAttribute]
public bool get_RedirectToDefaultDocuments();
    [CompilerGeneratedAttribute]
public void set_RedirectToDefaultDocuments(bool value);
    [CompilerGeneratedAttribute]
public bool get_StripApplicationVirtualPath();
    [CompilerGeneratedAttribute]
public void set_StripApplicationVirtualPath(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipFormDataInCreatingRequest();
    [CompilerGeneratedAttribute]
public void set_SkipFormDataInCreatingRequest(bool value);
    [CompilerGeneratedAttribute]
public bool get_RedirectDirectoriesToTrailingSlashes();
    [CompilerGeneratedAttribute]
public void set_RedirectDirectoriesToTrailingSlashes(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ScanSkipPaths();
    [CompilerGeneratedAttribute]
private void set_ScanSkipPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RedirectPaths();
    [CompilerGeneratedAttribute]
private void set_RedirectPaths(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_UseHttpsLinks();
    [CompilerGeneratedAttribute]
public void set_UseHttpsLinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCamelCase();
    [CompilerGeneratedAttribute]
public void set_UseCamelCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseJsObject();
    [CompilerGeneratedAttribute]
public void set_UseJsObject(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOptimizations();
    [CompilerGeneratedAttribute]
public void set_EnableOptimizations(bool value);
    [CompilerGeneratedAttribute]
public bool get_TreatNonNullableRefTypesAsRequired();
    [CompilerGeneratedAttribute]
public void set_TreatNonNullableRefTypesAsRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_AdminAuthSecret();
    [CompilerGeneratedAttribute]
public void set_AdminAuthSecret(string value);
    [CompilerGeneratedAttribute]
public IAuthSession get_AuthSecretSession();
    [CompilerGeneratedAttribute]
public void set_AuthSecretSession(IAuthSession value);
    [CompilerGeneratedAttribute]
public FallbackRestPathDelegate get_FallbackRestPath();
    [CompilerGeneratedAttribute]
public void set_FallbackRestPath(FallbackRestPathDelegate value);
    public HashSet`1<string> get_RazorNamespaces();
}
public static class ServiceStack.HostContext : object {
    public static AsyncContext Async;
    private static string defaultOperationNamespace;
    public static RequestContext RequestContext { get; }
    public static ServiceStackHost AppHost { get; }
    public static bool IsAspNetHost { get; }
    public static bool IsHttpListenerHost { get; }
    public static bool IsNetCore { get; }
    public static Container Container { get; }
    public static ServiceController ServiceController { get; }
    public static MetadataPagesConfig MetadataPagesConfig { get; }
    public static IContentTypes ContentTypes { get; }
    public static HostConfig Config { get; }
    public static IAppSettings AppSettings { get; }
    public static ServiceMetadata Metadata { get; }
    public static string ServiceName { get; }
    public static bool DebugMode { get; }
    public static bool StrictMode { get; }
    public static bool TestMode { get; public set; }
    public static IVirtualFiles VirtualFiles { get; }
    public static IVirtualPathProvider VirtualFileSources { get; }
    public static IVirtualDirectory RootDirectory { get; }
    public static IVirtualDirectory ContentRootDirectory { get; }
    public static FileSystemVirtualFiles FileSystemVirtualFiles { get; }
    public static MemoryVirtualFiles MemoryVirtualFiles { get; }
    public static GistVirtualFiles GistVirtualFiles { get; }
    public static ICacheClient Cache { get; }
    public static ICacheClientAsync CacheClientAsync { get; }
    public static MemoryCacheClient LocalCache { get; }
    public static string DefaultOperationNamespace { get; public set; }
    private static HostContext();
    public static RequestContext get_RequestContext();
    public static ServiceStackHost get_AppHost();
    public static ServiceStackHost AssertAppHost();
    public static bool get_IsAspNetHost();
    public static bool get_IsHttpListenerHost();
    public static bool get_IsNetCore();
    public static T TryResolve();
    public static T Resolve();
    public static Container get_Container();
    public static ServiceController get_ServiceController();
    public static MetadataPagesConfig get_MetadataPagesConfig();
    public static IContentTypes get_ContentTypes();
    public static HostConfig get_Config();
    public static IAppSettings get_AppSettings();
    public static ServiceMetadata get_Metadata();
    public static string get_ServiceName();
    public static bool get_DebugMode();
    public static bool get_StrictMode();
    public static bool get_TestMode();
    public static void set_TestMode(bool value);
    public static bool ApplyCustomHandlerRequestFilters(IRequest httpReq, IResponse httpRes);
    public static bool ApplyPreRequestFilters(IRequest httpReq, IResponse httpRes);
    public static Task ApplyRequestFiltersAsync(IRequest httpReq, IResponse httpRes, object requestDto);
    public static Task ApplyResponseFiltersAsync(IRequest httpReq, IResponse httpRes, object response);
    public static IVirtualFiles get_VirtualFiles();
    public static IVirtualPathProvider get_VirtualFileSources();
    public static IVirtualDirectory get_RootDirectory();
    public static IVirtualDirectory get_ContentRootDirectory();
    public static FileSystemVirtualFiles get_FileSystemVirtualFiles();
    public static MemoryVirtualFiles get_MemoryVirtualFiles();
    public static GistVirtualFiles get_GistVirtualFiles();
    public static ICacheClient get_Cache();
    public static ICacheClientAsync get_CacheClientAsync();
    public static MemoryCacheClient get_LocalCache();
    internal static void CompleteRequest(IRequest request);
    public static IServiceRunner`1<TRequest> CreateServiceRunner(ActionContext actionContext);
    internal static object ExecuteService(object request, IRequest httpReq);
    public static T AssertPlugin();
    public static T GetPlugin();
    public static bool HasPlugin();
    public static void Release(object service);
    public static UnauthorizedAccessException UnauthorizedAccess(RequestAttributes requestAttrs);
    public static string ResolveLocalizedString(string text, IRequest request);
    public static string ResolveAbsoluteUrl(string virtualPath, IRequest httpReq);
    public static string ResolvePhysicalPath(string virtualPath, IRequest httpReq);
    public static string get_DefaultOperationNamespace();
    public static void set_DefaultOperationNamespace(string value);
    public static string GetDefaultNamespace();
    public static Task`1<object> RaiseServiceException(IRequest httpReq, object request, Exception ex);
    public static Task RaiseUncaughtException(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    public static Task RaiseGatewayException(IRequest httpReq, object request, Exception ex);
    [AsyncStateMachineAttribute("ServiceStack.HostContext/<RaiseAndHandleException>d__80")]
public static Task RaiseAndHandleException(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    public static T ResolveService(HttpContextBase httpCtx);
    public static T ResolveService(HttpListenerContext httpCtx);
    public static T ResolveService(IRequest httpReq);
    public static T ResolveService(IRequest httpReq, T service);
    public static bool HasValidAuthSecret(IRequest httpReq);
    public static bool HasFeature(Feature feature);
    public static IRequest GetCurrentRequest();
    public static IRequest TryGetCurrentRequest();
    public static IAuthSession GetAuthSecretSession();
    public static int FindFreeTcpPort(int startingFrom, int endingAt);
    public static void ConfigureServices(Action`1<IServiceCollection> configure);
    public static void ConfigureAppHost(Action`1<ServiceStackHost> beforeConfigure, Action`1<ServiceStackHost> afterConfigure, Action`1<ServiceStackHost> afterPluginsLoaded, Action`1<ServiceStackHost> afterAppHostInit);
    public static void Reset();
}
public class ServiceStack.HotReloadFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; public set; }
    public IVirtualPathProvider VirtualFiles { get; public set; }
    unknown string DefaultPattern {public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public void set_VirtualFiles(IVirtualPathProvider value);
    public IVirtualPathProvider get_VirtualFiles();
    public void set_DefaultPattern(string value);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
}
[ExcludeMetadataAttribute]
[RouteAttribute("/hotreload/files")]
public class ServiceStack.HotReloadFiles : object {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    public string Pattern { get; public set; }
    public string ETag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
}
[DefaultRequestAttribute("ServiceStack.HotReloadFiles")]
[RestrictAttribute]
public class ServiceStack.HotReloadFilesService : Service {
    [CompilerGeneratedAttribute]
private static IVirtualPathProvider <UseVirtualFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<string> <ExcludePatterns>k__BackingField;
    public static TimeSpan LongPollDuration;
    public static TimeSpan CheckDelay;
    public static TimeSpan ModifiedDelay;
    public static IVirtualPathProvider UseVirtualFiles { get; public set; }
    public static string DefaultPattern { get; public set; }
    public static List`1<string> ExcludePatterns { get; }
    private static HotReloadFilesService();
    [CompilerGeneratedAttribute]
public static IVirtualPathProvider get_UseVirtualFiles();
    [CompilerGeneratedAttribute]
public static void set_UseVirtualFiles(IVirtualPathProvider value);
    [CompilerGeneratedAttribute]
public static string get_DefaultPattern();
    [CompilerGeneratedAttribute]
public static void set_DefaultPattern(string value);
    [CompilerGeneratedAttribute]
public static List`1<string> get_ExcludePatterns();
    [AsyncStateMachineAttribute("ServiceStack.HotReloadFilesService/<Any>d__14")]
public Task`1<HotReloadPageResponse> Any(HotReloadFiles request);
}
[ExcludeMetadataAttribute]
[RouteAttribute("/hotreload/page")]
public class ServiceStack.HotReloadPage : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    public string Path { get; public set; }
    public string ETag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
}
public class ServiceStack.HotReloadPageResponse : object {
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastUpdatedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reload>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public string ETag { get; public set; }
    public string LastUpdatedPath { get; public set; }
    public bool Reload { get; public set; }
    public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public string get_LastUpdatedPath();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedPath(string value);
    [CompilerGeneratedAttribute]
public bool get_Reload();
    [CompilerGeneratedAttribute]
public void set_Reload(bool value);
    [CompilerGeneratedAttribute]
public ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public void set_ResponseStatus(ResponseStatus value);
}
[DefaultRequestAttribute("ServiceStack.HotReloadPage")]
[RestrictAttribute]
public class ServiceStack.HotReloadPageService : Service {
    [CompilerGeneratedAttribute]
private ISharpPages <pages>P;
    public static TimeSpan LongPollDuration;
    public static TimeSpan CheckDelay;
    public static TimeSpan ModifiedDelay;
    public HotReloadPageService(ISharpPages pages);
    private static HotReloadPageService();
    [AsyncStateMachineAttribute("ServiceStack.HotReloadPageService/<Any>d__5")]
public Task`1<HotReloadPageResponse> Any(HotReloadPage request);
}
public class ServiceStack.Html.BasicHtmlMinifier : object {
    private static Regex BetweenScriptTagsRegEx;
    private static Regex BetweenTagsRegex;
    private static Regex MatchBodyRegEx;
    private static BasicHtmlMinifier();
    public static string MinifyHtml(string html);
    public sealed virtual string Compress(string html);
}
public class ServiceStack.Html.CssMinifier : object {
    public static string MinifyCss(string css);
    public sealed virtual string Compress(string source);
}
public class ServiceStack.Html.HtmlCompressor : object {
    public static Regex PHP_TAG_PATTERN;
    public static Regex SERVER_SCRIPT_TAG_PATTERN;
    public static Regex SERVER_SIDE_INCLUDE_PATTERN;
    public static string BLOCK_TAGS_MIN;
    public static string BLOCK_TAGS_MAX;
    public static string ALL_TAGS;
    public bool Enabled;
    public ICompressor JavaScriptCompressor;
    public ICompressor CssCompressor;
    public bool RemoveComments;
    public bool RemoveMultiSpaces;
    public bool RemoveIntertagSpaces;
    public bool RemoveQuotes;
    public bool CompressJavaScript;
    public bool CompressCss;
    public bool SimpleDoctype;
    public bool RemoveScriptAttributes;
    public bool RemoveStyleAttributes;
    public bool RemoveLinkAttributes;
    public bool RemoveFormAttributes;
    public bool RemoveInputAttributes;
    public bool SimpleBooleanAttributes;
    public bool RemoveJavaScriptProtocol;
    public bool RemoveHttpProtocol;
    public bool RemoveHttpsProtocol;
    public bool PreserveLineBreaks;
    public string RemoveSurroundingSpaces;
    public List`1<Regex> PreservePatterns;
    public bool GenerateStatistics;
    public HtmlCompressorStatistics Statistics;
    private static string tempCondCommentBlock;
    private static string tempPreBlock;
    private static string tempTextAreaBlock;
    private static string tempScriptBlock;
    private static string tempStyleBlock;
    private static string tempEventBlock;
    private static string tempLineBreakBlock;
    private static string tempSkipBlock;
    private static string tempUserBlock;
    private static Regex emptyPattern;
    private static Regex skipPattern;
    private static Regex condCommentPattern;
    private static Regex commentPattern;
    private static Regex intertagPattern_TagTag;
    private static Regex intertagPattern_TagCustom;
    private static Regex intertagPattern_CustomTag;
    private static Regex intertagPattern_CustomCustom;
    private static Regex multispacePattern;
    private static Regex tagEndSpacePattern;
    private static Regex tagLastUnquotedValuePattern;
    private static Regex tagQuotePattern;
    private static Regex prePattern;
    private static Regex taPattern;
    private static Regex scriptPattern;
    private static Regex stylePattern;
    private static Regex tagPropertyPattern;
    private static Regex cdataPattern;
    private static Regex doctypePattern;
    private static Regex typeAttrPattern;
    private static Regex jsTypeAttrPattern;
    private static Regex jsLangAttrPattern;
    private static Regex styleTypeAttrPattern;
    private static Regex linkTypeAttrPattern;
    private static Regex linkRelAttrPattern;
    private static Regex formMethodAttrPattern;
    private static Regex inputTypeAttrPattern;
    private static Regex booleanAttrPattern;
    private static Regex eventJsProtocolPattern;
    private static Regex httpProtocolPattern;
    private static Regex httpsProtocolPattern;
    private static Regex relExternalPattern;
    private static Regex eventPattern1;
    private static Regex eventPattern2;
    private static Regex lineBreakPattern;
    private static Regex surroundingSpacesMinPattern;
    private static Regex surroundingSpacesMaxPattern;
    private static Regex surroundingSpacesAllPattern;
    private static Regex tempCondCommentPattern;
    private static Regex tempPrePattern;
    private static Regex tempTextAreaPattern;
    private static Regex tempScriptPattern;
    private static Regex tempStylePattern;
    private static Regex tempEventPattern;
    private static Regex tempSkipPattern;
    private static Regex tempLineBreakPattern;
    private static HtmlCompressor();
    public sealed virtual string Compress(string html);
    private void initStatistics(string html);
    private void endStatistics(string html);
    private string preserveBlocks(string html, List`1<string> preBlocks, List`1<string> taBlocks, List`1<string> scriptBlocks, List`1<string> styleBlocks, List`1<string> eventBlocks, List`1<string> condCommentBlocks, List`1<string> skipBlocks, List`1<string> lineBreakBlocks, List`1<List`1<string>> userBlocks);
    private string returnBlocks(string html, List`1<string> preBlocks, List`1<string> taBlocks, List`1<string> scriptBlocks, List`1<string> styleBlocks, List`1<string> eventBlocks, List`1<string> condCommentBlocks, List`1<string> skipBlocks, List`1<string> lineBreakBlocks, List`1<List`1<string>> userBlocks);
    private string processHtml(string html);
    private string removeSurroundingSpaces(string html);
    private string removeQuotesInsideTags(string html);
    private string removeSpacesInsideTags(string html);
    private string removeMultiSpaces(string html);
    private string removeIntertagSpaces(string html);
    private string removeComments(string html);
    private string simpleDoctype(string html);
    private string removeScriptAttributes(string html);
    private string removeStyleAttributes(string html);
    private string removeLinkAttributes(string html);
    private string removeFormAttributes(string html);
    private string removeInputAttributes(string html);
    private string simpleBooleanAttributes(string html);
    private string removeHttpProtocol(string html);
    private string removeHttpsProtocol(string html);
    private static bool matches(Regex regex, string value);
    private void processPreservedBlocks(List`1<string> preBlocks, List`1<string> taBlocks, List`1<string> scriptBlocks, List`1<string> styleBlocks, List`1<string> eventBlocks, List`1<string> condCommentBlocks, List`1<string> skipBlocks, List`1<string> lineBreakBlocks, List`1<List`1<string>> userBlocks);
    private void processPreBlocks(List`1<string> preBlocks);
    private void processTextAreaBlocks(List`1<string> taBlocks);
    private void processCondCommentBlocks(List`1<string> condCommentBlocks);
    private void processSkipBlocks(List`1<string> skipBlocks);
    private void processLineBreakBlocks(List`1<string> lineBreakBlocks);
    private void processUserBlocks(List`1<List`1<string>> userBlocks);
    private void processEventBlocks(List`1<string> eventBlocks);
    private string removeJavaScriptProtocol(string source);
    private void processScriptBlocks(List`1<string> scriptBlocks);
    private void processStyleBlocks(List`1<string> styleBlocks);
    private string compressJavaScript(string source);
    private string compressCssStyles(string source);
    private HtmlCompressor createCompressorClone();
}
[ExtensionAttribute]
public static class ServiceStack.Html.HtmlCompressorExtensions : object {
    [ExtensionAttribute]
public static void AddPreservePattern(HtmlCompressor compressor, Regex[] regexes);
}
public class ServiceStack.Html.HtmlCompressorStatistics : object {
    public HtmlMetrics OriginalMetrics;
    public HtmlMetrics CompressedMetrics;
    public long Time;
    public int PreservedSize;
    public virtual string ToString();
}
[ExtensionAttribute]
public static class ServiceStack.Html.HtmlContextExtensions : object {
    [ExtensionAttribute]
public static IRequest GetHttpRequest(IHtmlContext html);
}
public class ServiceStack.Html.HtmlMetrics : object {
    public int Filesize;
    public int EmptyChars;
    public int InlineScriptSize;
    public int InlineStyleSize;
    public int InlineEventSize;
    public virtual string ToString();
}
[ExtensionAttribute]
public static class ServiceStack.Html.HtmlStringExtensions : object {
    [ExtensionAttribute]
public static IHtmlString AsRaw(IHtmlString htmlString);
}
public interface ServiceStack.Html.IHtmlContext {
    public IHttpRequest HttpRequest { get; }
    public abstract virtual IHttpRequest get_HttpRequest();
}
public interface ServiceStack.Html.IViewEngine {
    public abstract virtual bool HasView(string viewName, IRequest httpReq);
    public abstract virtual string RenderPartial(string pageName, object model, bool renderHtml, StreamWriter writer, IHtmlContext htmlHelper);
    public abstract virtual Task`1<bool> ProcessRequestAsync(IRequest req, object dto, Stream outputStream);
}
public class ServiceStack.Html.JSMinifier : object {
    private static int EOF;
    private TextReader sr;
    private StringBuilder sb;
    private int theA;
    private int theB;
    private int theLookahead;
    private int theX;
    private int theY;
    public sealed virtual string Compress(string js);
    public static string MinifyJs(string js, bool ignoreErrors);
    private void jsmin();
    private void action(int d);
    private int next();
    private int peek();
    private int get();
    private void put(int c);
    private bool isAlphanum(int c);
}
internal class ServiceStack.Html.JSMinifierFactory : object {
    public sealed virtual string Compress(string source);
}
public static class ServiceStack.Html.Minifiers : object {
    public static ICompressor JavaScript;
    public static ICompressor Css;
    public static ICompressor Html;
    public static ICompressor HtmlAdvanced;
    private static Minifiers();
}
[FlagsAttribute]
public enum ServiceStack.Html.Minify : Enum {
    public int value__;
    public static Minify JavaScript;
    public static Minify Css;
    public static Minify Html;
    public static Minify HtmlAdvanced;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModule : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableHttpCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableCompression>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CacheControl>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private HtmlModulesFeature <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IVirtualPathProvider <VirtualFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexFile>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PublicPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DynamicPageQueryStrings>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> <Tokens>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IHtmlModulesHandler> <Handlers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HtmlModuleLine> <LineTransformers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IVirtualFile, string> <FileContentsResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`2<IAppHost, HtmlModule>> <OnConfigure>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ReadOnlyMemory`1<byte>> <Cache>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IHtmlModuleFragment[] indexFragments;
    [NullableAttribute("2")]
private string indexFileETag;
    [NullableAttribute("2")]
private Byte[] cachedBytes;
    private ConcurrentDictionary`2<string, Byte[]> zipCache;
    public Nullable`1<bool> EnableHttpCaching { get; public set; }
    public Nullable`1<bool> EnableCompression { get; public set; }
    [NullableAttribute("2")]
public string CacheControl { get; public set; }
    [NullableAttribute("2")]
public HtmlModulesFeature Feature { get; public set; }
    public string DirPath { get; public set; }
    public string BasePath { get; public set; }
    [NullableAttribute("2")]
public IVirtualPathProvider VirtualFiles { get; public set; }
    public string IndexFile { get; public set; }
    public List`1<string> PublicPaths { get; public set; }
    public List`1<string> DynamicPageQueryStrings { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> Tokens { get; public set; }
    public List`1<IHtmlModulesHandler> Handlers { get; public set; }
    public List`1<HtmlModuleLine> LineTransformers { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IVirtualFile, string> FileContentsResolver { get; public set; }
    public List`1<Action`2<IAppHost, HtmlModule>> OnConfigure { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ConcurrentDictionary`2<string, ReadOnlyMemory`1<byte>> Cache { get; }
    public HtmlModule(string dirPath, string basePath);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableHttpCaching();
    [CompilerGeneratedAttribute]
public void set_EnableHttpCaching(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableCompression();
    [CompilerGeneratedAttribute]
public void set_EnableCompression(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CacheControl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CacheControl(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public HtmlModulesFeature get_Feature();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Feature(HtmlModulesFeature value);
    [CompilerGeneratedAttribute]
public string get_DirPath();
    [CompilerGeneratedAttribute]
public void set_DirPath(string value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IVirtualPathProvider get_VirtualFiles();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_VirtualFiles(IVirtualPathProvider value);
    [CompilerGeneratedAttribute]
public string get_IndexFile();
    [CompilerGeneratedAttribute]
public void set_IndexFile(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PublicPaths();
    [CompilerGeneratedAttribute]
public void set_PublicPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DynamicPageQueryStrings();
    [CompilerGeneratedAttribute]
public void set_DynamicPageQueryStrings(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> get_Tokens();
    [CompilerGeneratedAttribute]
public void set_Tokens(Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> value);
    [CompilerGeneratedAttribute]
public List`1<IHtmlModulesHandler> get_Handlers();
    [CompilerGeneratedAttribute]
public void set_Handlers(List`1<IHtmlModulesHandler> value);
    [CompilerGeneratedAttribute]
public List`1<HtmlModuleLine> get_LineTransformers();
    [CompilerGeneratedAttribute]
public void set_LineTransformers(List`1<HtmlModuleLine> value);
    [CompilerGeneratedAttribute]
public Func`2<IVirtualFile, string> get_FileContentsResolver();
    [CompilerGeneratedAttribute]
public void set_FileContentsResolver(Func`2<IVirtualFile, string> value);
    [CompilerGeneratedAttribute]
public List`1<Action`2<IAppHost, HtmlModule>> get_OnConfigure();
    [CompilerGeneratedAttribute]
public void set_OnConfigure(List`1<Action`2<IAppHost, HtmlModule>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ReadOnlyMemory`1<byte>> get_Cache();
    private IHtmlModuleFragment[] GetIndexFragments();
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<char> TransformContent(ReadOnlyMemory`1<char> content);
    public void Flush();
    public Func`2<IHttpRequest, HttpAsyncTaskHandler> GetHandler(IAppHost appHost);
    public void Register(IAppHost appHost);
    [AsyncStateMachineAttribute("ServiceStack.HtmlModule/<TryReturnCompressedResponse>d__74")]
private Task`1<bool> TryReturnCompressedResponse(IRequest httpReq, IResponse httpRes);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <.ctor>b__60_0(HtmlModuleContext ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModuleContext : object {
    [CompilerGeneratedAttribute]
private HtmlModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public HtmlModule Module { get; }
    public IRequest Request { get; }
    public IVirtualPathProvider VirtualFiles { get; }
    public bool DebugMode { get; }
    public ServiceStackHost AppHost { get; }
    public Func`2<IVirtualFile, string> FileContentsResolver { get; }
    public HtmlModuleContext(HtmlModule module, IRequest request);
    [CompilerGeneratedAttribute]
public HtmlModule get_Module();
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    public IVirtualPathProvider get_VirtualFiles();
    public bool get_DebugMode();
    public ServiceStackHost get_AppHost();
    public IVirtualFile AssertFile(string virtualPath);
    public IVirtualFile AssertFile(IVirtualPathProvider vfs, string virtualPath);
    public Func`2<IVirtualFile, string> get_FileContentsResolver();
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<byte> Cache(string key, Func`2<string, ReadOnlyMemory`1<byte>> handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.ApplyToLineContaining : HtmlModuleLine {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<ReadOnlyMemory`1<char>, ReadOnlyMemory`1<char>> <Fn>k__BackingField;
    public string Token { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<ReadOnlyMemory`1<char>, ReadOnlyMemory`1<char>> Fn { get; }
    public ApplyToLineContaining(string token, Func`2<ReadOnlyMemory`1<char>, ReadOnlyMemory`1<char>> fn, Run behaviour);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
private Func`2<ReadOnlyMemory`1<char>, ReadOnlyMemory`1<char>> get_Fn();
    [NullableContextAttribute("0")]
public virtual ReadOnlyMemory`1<char> Transform(ReadOnlyMemory`1<char> line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.FileHandler : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HtmlModuleContext, IVirtualPathProvider> <VirtualFilesResolver>k__BackingField;
    public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HtmlModuleContext, IVirtualPathProvider> VirtualFilesResolver { get; public set; }
    public FileHandler(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public Func`2<HtmlModuleContext, IVirtualPathProvider> get_VirtualFilesResolver();
    [CompilerGeneratedAttribute]
public void set_VirtualFilesResolver(Func`2<HtmlModuleContext, IVirtualPathProvider> value);
    public sealed virtual ReadOnlyMemory`1<byte> Execute(HtmlModuleContext ctx, string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.FilesHandler : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HtmlModuleContext, IVirtualPathProvider> <VirtualFilesResolver>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IVirtualFile, string> <Header>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IVirtualFile, string> <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <NormalizeVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <NormalizedPaths>k__BackingField;
    public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HtmlModuleContext, IVirtualPathProvider> VirtualFilesResolver { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IVirtualFile, string> Header { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IVirtualFile, string> Footer { get; public set; }
    public Func`2<string, string> NormalizeVirtualPath { get; public set; }
    public static Dictionary`2<string, string> NormalizedPaths { get; public set; }
    public FilesHandler(string name);
    private static FilesHandler();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public Func`2<HtmlModuleContext, IVirtualPathProvider> get_VirtualFilesResolver();
    [CompilerGeneratedAttribute]
public void set_VirtualFilesResolver(Func`2<HtmlModuleContext, IVirtualPathProvider> value);
    [CompilerGeneratedAttribute]
public Func`2<IVirtualFile, string> get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(Func`2<IVirtualFile, string> value);
    [CompilerGeneratedAttribute]
public Func`2<IVirtualFile, string> get_Footer();
    [CompilerGeneratedAttribute]
public void set_Footer(Func`2<IVirtualFile, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_NormalizeVirtualPath();
    [CompilerGeneratedAttribute]
public void set_NormalizeVirtualPath(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_NormalizedPaths();
    [CompilerGeneratedAttribute]
public static void set_NormalizedPaths(Dictionary`2<string, string> value);
    public static string DefaultNormalizeVirtualPath(string path);
    public sealed virtual ReadOnlyMemory`1<byte> Execute(HtmlModuleContext ctx, string paths);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.FilesTransformer : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, FileTransformerOptions> <FileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<HtmlModuleLine> <HtmlModuleLineTransformers>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<HtmlModuleLine> <HtmlLineTransformers>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<HtmlModuleLine> <MjsLineTransformers>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<HtmlModuleLine> <JsLineTransformers>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<HtmlModuleLine> <CssLineTransformers>k__BackingField;
    public static FilesTransformer None { get; }
    public static FilesTransformer Default { get; }
    public Dictionary`2<string, FileTransformerOptions> FileExtensions { get; private set; }
    public static List`1<HtmlModuleLine> HtmlModuleLineTransformers { get; }
    public static List`1<HtmlModuleLine> HtmlLineTransformers { get; }
    public static List`1<HtmlModuleLine> MjsLineTransformers { get; }
    public static List`1<HtmlModuleLine> JsLineTransformers { get; }
    public static List`1<HtmlModuleLine> CssLineTransformers { get; }
    private static FilesTransformer();
    public static FilesTransformer get_None();
    public static FilesTransformer get_Default();
    public static FilesTransformer Defaults(Nullable`1<bool> debugMode, Action`1<FilesTransformer> with);
    public FilesTransformer Without(Run behaviour);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, FileTransformerOptions> get_FileExtensions();
    [CompilerGeneratedAttribute]
private void set_FileExtensions(Dictionary`2<string, FileTransformerOptions> value);
    public FileTransformerOptions GetExt(string fileExt);
    public string ReadAll(IVirtualFile file);
    public FilesTransformer Clone(Action`1<FilesTransformer> with);
    public static void RecreateDirectory(string dirPath, int timeoutMs);
    public void CopyAll(IVirtualFiles source, IVirtualFiles target, bool cleanTarget, Func`2<IVirtualFile, bool> ignore, Action`2<IVirtualFile, string> afterCopy);
    [CompilerGeneratedAttribute]
public static List`1<HtmlModuleLine> get_HtmlModuleLineTransformers();
    [CompilerGeneratedAttribute]
public static List`1<HtmlModuleLine> get_HtmlLineTransformers();
    [CompilerGeneratedAttribute]
public static List`1<HtmlModuleLine> get_MjsLineTransformers();
    [CompilerGeneratedAttribute]
public static List`1<HtmlModuleLine> get_JsLineTransformers();
    [CompilerGeneratedAttribute]
public static List`1<HtmlModuleLine> get_CssLineTransformers();
    public static string ModuleHeader(IVirtualFile file);
    public static string ModuleFooter(IVirtualFile file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ServiceStack.HtmlModules.FilesTransformerUtils : object {
    public static FilesTransformer Defaults(Action`1<FilesTransformer> with);
    [ExtensionAttribute]
public static FilesTransformer Minify(FilesTransformer options, Minify minify, Run behavior);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.FileTransformerOptions : object {
    [CompilerGeneratedAttribute]
private List`1<HtmlModuleLine> <LineTransformers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HtmlModuleBlock> <BlockTransformers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HtmlModuleBlock> <FilesTransformers>k__BackingField;
    public List`1<HtmlModuleLine> LineTransformers { get; public set; }
    public List`1<HtmlModuleBlock> BlockTransformers { get; public set; }
    public List`1<HtmlModuleBlock> FilesTransformers { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<HtmlModuleLine> get_LineTransformers();
    [CompilerGeneratedAttribute]
public void set_LineTransformers(List`1<HtmlModuleLine> value);
    [CompilerGeneratedAttribute]
public List`1<HtmlModuleBlock> get_BlockTransformers();
    [CompilerGeneratedAttribute]
public void set_BlockTransformers(List`1<HtmlModuleBlock> value);
    [CompilerGeneratedAttribute]
public List`1<HtmlModuleBlock> get_FilesTransformers();
    [CompilerGeneratedAttribute]
public void set_FilesTransformers(List`1<HtmlModuleBlock> value);
    public FileTransformerOptions Without(Run behavior);
}
public class ServiceStack.HtmlModules.GatewayHandler : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, IServiceGateway> <ServiceGatewayFactory>k__BackingField;
    public string Name { get; }
    public Func`2<IRequest, IServiceGateway> ServiceGatewayFactory { get; public set; }
    public GatewayHandler(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public Func`2<IRequest, IServiceGateway> get_ServiceGatewayFactory();
    [CompilerGeneratedAttribute]
public void set_ServiceGatewayFactory(Func`2<IRequest, IServiceGateway> value);
    public sealed virtual ReadOnlyMemory`1<byte> Execute(HtmlModuleContext ctx, string args);
}
public class ServiceStack.HtmlModules.HtmlHandlerFragment : object {
    [CompilerGeneratedAttribute]
private Func`3<HtmlModuleContext, string, ReadOnlyMemory`1<byte>> <fn>P;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Args>k__BackingField;
    public string Token { get; }
    public string Args { get; }
    public HtmlHandlerFragment(string token, string args, Func`3<HtmlModuleContext, string, ReadOnlyMemory`1<byte>> fn);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public string get_Args();
    [AsyncStateMachineAttribute("ServiceStack.HtmlModules.HtmlHandlerFragment/<WriteToAsync>d__8")]
public sealed virtual Task WriteToAsync(HtmlModuleContext ctx, Stream responseStream, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.HtmlModules.HtmlModuleBlock : object {
    [CompilerGeneratedAttribute]
private Run <Behaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTag>k__BackingField;
    public Run Behaviour { get; public set; }
    public string StartTag { get; }
    public string EndTag { get; }
    protected HtmlModuleBlock(Run behaviour);
    protected HtmlModuleBlock(string startTag, string endTag, Run behaviour);
    [CompilerGeneratedAttribute]
public Run get_Behaviour();
    [CompilerGeneratedAttribute]
public void set_Behaviour(Run value);
    [CompilerGeneratedAttribute]
public string get_StartTag();
    [CompilerGeneratedAttribute]
public string get_EndTag();
    public virtual string Transform(List`1<string> lines);
    public virtual string Transform(string block);
}
public abstract class ServiceStack.HtmlModules.HtmlModuleLine : object {
    [CompilerGeneratedAttribute]
private Run <Behaviour>k__BackingField;
    public Run Behaviour { get; public set; }
    [CompilerGeneratedAttribute]
public Run get_Behaviour();
    [CompilerGeneratedAttribute]
public void set_Behaviour(Run value);
    public abstract virtual ReadOnlyMemory`1<char> Transform(ReadOnlyMemory`1<char> line);
}
public class ServiceStack.HtmlModules.HtmlTextFragment : object {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<char> <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <TextUtf8>k__BackingField;
    public ReadOnlyMemory`1<char> Text { get; }
    public ReadOnlyMemory`1<byte> TextUtf8 { get; }
    public HtmlTextFragment(string text);
    public HtmlTextFragment(ReadOnlyMemory`1<char> text);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<char> get_Text();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_TextUtf8();
    [AsyncStateMachineAttribute("ServiceStack.HtmlModules.HtmlTextFragment/<WriteToAsync>d__8")]
public sealed virtual Task WriteToAsync(HtmlModuleContext ctx, Stream responseStream, CancellationToken token);
}
public class ServiceStack.HtmlModules.HtmlTokenFragment : object {
    [CompilerGeneratedAttribute]
private Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>> <fn>P;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Token { get; }
    public HtmlTokenFragment(string token, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>> fn);
    [CompilerGeneratedAttribute]
public string get_Token();
    [AsyncStateMachineAttribute("ServiceStack.HtmlModules.HtmlTokenFragment/<WriteToAsync>d__5")]
public sealed virtual Task WriteToAsync(HtmlModuleContext ctx, Stream responseStream, CancellationToken token);
}
public interface ServiceStack.HtmlModules.IHtmlModuleFragment {
    public abstract virtual Task WriteToAsync(HtmlModuleContext ctx, Stream responseStream, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface ServiceStack.HtmlModules.IHtmlModulesHandler {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual ReadOnlyMemory`1<byte> Execute(HtmlModuleContext ctx, string args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.MinifyBlock : HtmlModuleBlock {
    [CompilerGeneratedAttribute]
private ICompressor <Compressor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <Convert>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HtmlModuleLine> <LineTransformers>k__BackingField;
    public ICompressor Compressor { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> Convert { get; public set; }
    public List`1<HtmlModuleLine> LineTransformers { get; public set; }
    public MinifyBlock(ICompressor compressor, Run behaviour);
    public MinifyBlock(string startTag, string endTag, ICompressor compressor, Run behaviour);
    [CompilerGeneratedAttribute]
public ICompressor get_Compressor();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_Convert();
    [CompilerGeneratedAttribute]
public void set_Convert(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<HtmlModuleLine> get_LineTransformers();
    [CompilerGeneratedAttribute]
public void set_LineTransformers(List`1<HtmlModuleLine> value);
    public virtual string Transform(string block);
}
public class ServiceStack.HtmlModules.RawBlock : HtmlModuleBlock {
    [NullableContextAttribute("1")]
public RawBlock(string startTag, string endTag, Run behaviour);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.RemoveBlock : HtmlModuleBlock {
    public RemoveBlock(string startTag, string endTag, Run behaviour);
    public virtual string Transform(string block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.RemoveLineContaining : HtmlModuleLine {
    [CompilerGeneratedAttribute]
private String[] <Tokens>k__BackingField;
    public String[] Tokens { get; }
    public RemoveLineContaining(string token, Run behaviour);
    public RemoveLineContaining(String[] tokens, Run behaviour);
    [CompilerGeneratedAttribute]
public String[] get_Tokens();
    [NullableContextAttribute("0")]
public virtual ReadOnlyMemory`1<char> Transform(ReadOnlyMemory`1<char> line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.RemoveLineEndingWith : HtmlModuleLine {
    [CompilerGeneratedAttribute]
private String[] <Suffixes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreWhiteSpace>k__BackingField;
    public String[] Suffixes { get; }
    public bool IgnoreWhiteSpace { get; }
    public RemoveLineEndingWith(string suffix, bool ignoreWhiteSpace, Run behaviour);
    public RemoveLineEndingWith(String[] prefixes, bool ignoreWhiteSpace, Run behaviour);
    [CompilerGeneratedAttribute]
public String[] get_Suffixes();
    [CompilerGeneratedAttribute]
public bool get_IgnoreWhiteSpace();
    [NullableContextAttribute("0")]
public virtual ReadOnlyMemory`1<char> Transform(ReadOnlyMemory`1<char> line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.RemoveLineStartingWith : HtmlModuleLine {
    [CompilerGeneratedAttribute]
private String[] <Prefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreWhiteSpace>k__BackingField;
    public String[] Prefixes { get; }
    public bool IgnoreWhiteSpace { get; }
    public RemoveLineStartingWith(string prefix, bool ignoreWhiteSpace, Run behaviour);
    public RemoveLineStartingWith(String[] prefixes, bool ignoreWhiteSpace, Run behaviour);
    [CompilerGeneratedAttribute]
public String[] get_Prefixes();
    [CompilerGeneratedAttribute]
public bool get_IgnoreWhiteSpace();
    [NullableContextAttribute("0")]
public virtual ReadOnlyMemory`1<char> Transform(ReadOnlyMemory`1<char> line);
}
public class ServiceStack.HtmlModules.RemoveLineWithOnlyWhitespace : HtmlModuleLine {
    public RemoveLineWithOnlyWhitespace(Run behaviour);
    public virtual ReadOnlyMemory`1<char> Transform(ReadOnlyMemory`1<char> line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.RemovePrefixesFromLine : HtmlModuleLine {
    [CompilerGeneratedAttribute]
private String[] <Prefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreWhiteSpace>k__BackingField;
    public String[] Prefixes { get; }
    public bool IgnoreWhiteSpace { get; }
    public RemovePrefixesFromLine(string prefix, bool ignoreWhiteSpace, Run behaviour);
    public RemovePrefixesFromLine(String[] prefixes, bool ignoreWhiteSpace, Run behaviour);
    [CompilerGeneratedAttribute]
public String[] get_Prefixes();
    [CompilerGeneratedAttribute]
public bool get_IgnoreWhiteSpace();
    [NullableContextAttribute("0")]
public virtual ReadOnlyMemory`1<char> Transform(ReadOnlyMemory`1<char> line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModules.SharedFolder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultExt>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IVirtualFile, string> <Header>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IVirtualFile, string> <Footer>k__BackingField;
    public string Name { get; }
    public string SharedDir { get; public set; }
    public string DefaultExt { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IVirtualFile, string> Header { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IVirtualFile, string> Footer { get; public set; }
    public SharedFolder(string name, string sharedDir, string defaultExt);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_SharedDir();
    [CompilerGeneratedAttribute]
public void set_SharedDir(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultExt();
    [CompilerGeneratedAttribute]
public Func`2<IVirtualFile, string> get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(Func`2<IVirtualFile, string> value);
    [CompilerGeneratedAttribute]
public Func`2<IVirtualFile, string> get_Footer();
    [CompilerGeneratedAttribute]
public void set_Footer(Func`2<IVirtualFile, string> value);
    public sealed virtual ReadOnlyMemory`1<byte> Execute(HtmlModuleContext ctx, string files);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.HtmlModulesFeature : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreIfError>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> <Tokens>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IHtmlModulesHandler> <Handlers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IVirtualFile, string> <FileContentsResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HtmlModule> <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`2<IAppHost, HtmlModule>> <OnConfigure>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IVirtualPathProvider <VirtualFiles>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FilesTransformer <FilesTransformer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableHttpCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableCompression>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CacheControl>k__BackingField;
    public static string DefaultCacheControl;
    [CompilerGeneratedAttribute]
private bool <IncludeHtmlLineTransformers>k__BackingField;
    public string Id { get; }
    public bool IgnoreIfError { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> Tokens { get; public set; }
    public List`1<IHtmlModulesHandler> Handlers { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IVirtualFile, string> FileContentsResolver { get; public set; }
    public List`1<HtmlModule> Modules { get; public set; }
    public List`1<Action`2<IAppHost, HtmlModule>> OnConfigure { get; public set; }
    [NullableAttribute("2")]
public IVirtualPathProvider VirtualFiles { get; public set; }
    [NullableAttribute("2")]
public FilesTransformer FilesTransformer { get; public set; }
    public Nullable`1<bool> EnableHttpCaching { get; public set; }
    public Nullable`1<bool> EnableCompression { get; public set; }
    [NullableAttribute("2")]
public string CacheControl { get; public set; }
    public bool IncludeHtmlLineTransformers { get; public set; }
    public HtmlModulesFeature(HtmlModule[] modules);
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public bool get_IgnoreIfError();
    [CompilerGeneratedAttribute]
public void set_IgnoreIfError(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> get_Tokens();
    [CompilerGeneratedAttribute]
public void set_Tokens(Dictionary`2<string, Func`2<HtmlModuleContext, ReadOnlyMemory`1<byte>>> value);
    [CompilerGeneratedAttribute]
public List`1<IHtmlModulesHandler> get_Handlers();
    [CompilerGeneratedAttribute]
public void set_Handlers(List`1<IHtmlModulesHandler> value);
    [CompilerGeneratedAttribute]
public Func`2<IVirtualFile, string> get_FileContentsResolver();
    [CompilerGeneratedAttribute]
public void set_FileContentsResolver(Func`2<IVirtualFile, string> value);
    [CompilerGeneratedAttribute]
public List`1<HtmlModule> get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(List`1<HtmlModule> value);
    [CompilerGeneratedAttribute]
public List`1<Action`2<IAppHost, HtmlModule>> get_OnConfigure();
    [CompilerGeneratedAttribute]
public void set_OnConfigure(List`1<Action`2<IAppHost, HtmlModule>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IVirtualPathProvider get_VirtualFiles();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_VirtualFiles(IVirtualPathProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FilesTransformer get_FilesTransformer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FilesTransformer(FilesTransformer value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableHttpCaching();
    [CompilerGeneratedAttribute]
public void set_EnableHttpCaching(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableCompression();
    [CompilerGeneratedAttribute]
public void set_EnableCompression(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CacheControl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CacheControl(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeHtmlLineTransformers();
    [CompilerGeneratedAttribute]
public void set_IncludeHtmlLineTransformers(bool value);
    public HtmlModulesFeature Configure(Action`2<IAppHost, HtmlModule> configure);
    public sealed virtual void Register(IAppHost appHost);
    public void Flush();
}
public class ServiceStack.HtmlOnly : RequestFilterAttribute {
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
[ExtensionAttribute]
public static class ServiceStack.HttpCacheExtensions : object {
    [ExtensionAttribute]
public static bool Has(CacheControl cache, CacheControl flag);
    [ExtensionAttribute]
public static void EndNotModified(IResponse res, string description);
    [ExtensionAttribute]
public static bool ETagMatch(IRequest req, string eTag);
    [ExtensionAttribute]
public static bool NotModifiedSince(IRequest req, Nullable`1<DateTime> lastModified);
    [ExtensionAttribute]
public static bool HasValidCache(IRequest req, string eTag);
    [ExtensionAttribute]
public static bool HasValidCache(IRequest req, Nullable`1<DateTime> lastModified);
    [ExtensionAttribute]
public static bool HasValidCache(IRequest req, string eTag, Nullable`1<DateTime> lastModified);
    [ExtensionAttribute]
public static bool ShouldAddLastModifiedToOptimizedResults(HttpCacheFeature feature);
    [ExtensionAttribute]
internal static string StripWeakRef(string eTag);
}
public class ServiceStack.HttpCacheFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultMaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <CacheControlFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheControlForOptimizedResults>k__BackingField;
    public string Id { get; public set; }
    public TimeSpan DefaultMaxAge { get; public set; }
    public TimeSpan DefaultExpiresIn { get; public set; }
    public bool DisableCaching { get; public set; }
    public Func`2<string, string> CacheControlFilter { get; public set; }
    public string CacheControlForOptimizedResults { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultMaxAge();
    [CompilerGeneratedAttribute]
public void set_DefaultMaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultExpiresIn();
    [CompilerGeneratedAttribute]
public void set_DefaultExpiresIn(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_DisableCaching();
    [CompilerGeneratedAttribute]
public void set_DisableCaching(bool value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_CacheControlFilter();
    [CompilerGeneratedAttribute]
public void set_CacheControlFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_CacheControlForOptimizedResults();
    [CompilerGeneratedAttribute]
public void set_CacheControlForOptimizedResults(string value);
    public sealed virtual void Register(IAppHost appHost);
    [AsyncStateMachineAttribute("ServiceStack.HttpCacheFeature/<HandleCacheResponses>d__26")]
public Task HandleCacheResponses(IRequest req, IResponse res, object response);
    [AsyncStateMachineAttribute("ServiceStack.HttpCacheFeature/<CacheAndWriteResponse>d__27")]
private Task`1<bool> CacheAndWriteResponse(CacheInfo cacheInfo, IRequest req, IResponse res, object response);
    public string BuildCacheControlHeader(CacheInfo cacheInfo);
}
public class ServiceStack.HttpError : Exception {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Cookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private IContentTypeWriter <ResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PaddingLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IDisposable> <ResultScope>k__BackingField;
    private ResponseStatus responseStatus;
    public string ErrorCode { get; public set; }
    public string StackTrace { get; public set; }
    public string ContentType { get; public set; }
    public Dictionary`2<string, string> Headers { get; private set; }
    public List`1<Cookie> Cookies { get; private set; }
    public int Status { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public object Response { get; public set; }
    public IContentTypeWriter ResponseFilter { get; public set; }
    public IRequest RequestContext { get; public set; }
    public int PaddingLength { get; public set; }
    public Func`1<IDisposable> ResultScope { get; public set; }
    public IDictionary`2<string, string> Options { get; }
    public ResponseStatus ResponseStatus { get; public set; }
    public HttpError(string message);
    public HttpError(HttpStatusCode statusCode);
    public HttpError(HttpStatusCode statusCode, string errorMessage);
    public HttpError(int statusCode, string errorCode);
    public HttpError(ResponseStatus responseStatus, HttpStatusCode statusCode);
    public HttpError(IHasResponseStatus responseDto, HttpStatusCode statusCode);
    public HttpError(object responseDto, HttpStatusCode statusCode, string errorCode, string errorMessage);
    public HttpError(object responseDto, int statusCode, string errorCode, string errorMessage, Exception innerException);
    public HttpError(HttpStatusCode statusCode, string errorCode, string errorMessage);
    public HttpError(int statusCode, string errorCode, string errorMessage, Exception innerException);
    public HttpError(HttpStatusCode statusCode, Exception innerException);
    public HttpError(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Cookie> get_Cookies();
    [CompilerGeneratedAttribute]
private void set_Cookies(List`1<Cookie> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Status(int value);
    public sealed virtual HttpStatusCode get_StatusCode();
    public sealed virtual void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Response();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Response(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IContentTypeWriter get_ResponseFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseFilter(IContentTypeWriter value);
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_RequestContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestContext(IRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PaddingLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PaddingLength(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<IDisposable> get_ResultScope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResultScope(Func`1<IDisposable> value);
    public sealed virtual IDictionary`2<string, string> get_Options();
    public sealed virtual ResponseStatus get_ResponseStatus();
    public sealed virtual void set_ResponseStatus(ResponseStatus value);
    public List`1<ResponseError> GetFieldErrors();
    public static Exception NotFound(string message);
    public static Exception Unauthorized(string message);
    public static Exception Conflict(string message);
    public static Exception Forbidden(string message);
    public static Exception MethodNotAllowed(string message);
    public static Exception BadRequest(string message);
    public static Exception BadRequest(string errorCode, string message);
    public static Exception PreconditionFailed(string message);
    public static Exception ExpectationFailed(string message);
    public static Exception NotImplemented(string message);
    public static Exception ServiceUnavailable(string message);
    public static Exception Validation(string errorCode, string errorMessage, string fieldName);
    public sealed virtual ResponseStatus ToResponseStatus();
    public static Exception GetException(object responseDto);
}
[ExtensionAttribute]
public static class ServiceStack.HttpExtensions : object {
    [ExtensionAttribute]
public static string ToAbsoluteUri(IReturn requestDto, string httpMethod, string formatFallbackToPredefinedRoute);
    [ExtensionAttribute]
public static string ToAbsoluteUri(object requestDto, string httpMethod, string formatFallbackToPredefinedRoute);
    [ExtensionAttribute]
public static string ToAbsoluteUri(object requestDto, IRequest req, string httpMethod, string formatFallbackToPredefinedRoute);
    [ExtensionAttribute]
public static string ToAbsoluteUri(string relativeUrl, IRequest req);
    [ExtensionAttribute]
public static void EndRequest(IResponse httpRes, bool skipHeaders);
    [ExtensionAttribute]
public static Task EndRequestAsync(IResponse httpRes, bool skipHeaders, Func`2<IResponse, Task> afterHeaders);
    [ExtensionAttribute]
public static void EndRequest(HttpResponseBase httpRes, bool skipHeaders);
    [ExtensionAttribute]
public static void EndHttpHandlerRequest(HttpContextBase context, bool skipHeaders, bool skipClose, bool closeOutputStream, Action`1<HttpResponseBase> afterHeaders);
    [ExtensionAttribute]
public static void EndHttpHandlerRequest(IResponse httpRes, bool skipHeaders, bool skipClose, Action`1<IResponse> afterHeaders);
    [AsyncStateMachineAttribute("ServiceStack.HttpExtensions/<EndHttpHandlerRequestAsync>d__9")]
[ExtensionAttribute]
public static Task EndHttpHandlerRequestAsync(IResponse httpRes, bool skipHeaders, bool skipClose, Func`2<IResponse, Task> afterHeaders);
    [ExtensionAttribute]
public static void EndMqRequest(IResponse httpRes, bool skipClose);
    [ExtensionAttribute]
public static void EndRequestWithNoContent(IResponse httpRes);
}
public class ServiceStack.HttpHandlerFactory : object {
    public static string WebHostPhysicalPath;
    public static string DefaultRootFileName;
    public static IHttpHandler DefaultHttpHandler;
    public static RedirectHttpHandler NonRootModeDefaultHttpHandler;
    public static IHttpHandler ForbiddenHttpHandler;
    public static IHttpHandler NotFoundHttpHandler;
    public static NotFoundHttpHandler PassThruHttpHandler;
    public static IHttpHandler StaticFilesHandler;
    [ThreadStaticAttribute]
public static string DebugLastHandlerArgs;
    private static HttpHandlerFactory();
    internal static void Init();
    public static IHttpHandler InitHandler(IHttpHandler handler, IHttpRequest httpReq);
    public sealed virtual IHttpHandler GetHandler(HttpContext ctx, string requestType, string url, string pathTranslated);
    internal IHttpHandler GetHandlerInternal(HttpContext ctx, string requestType, string url, string pathTranslated, IHttpRequest& httpReq);
    public static IHttpHandler GetHandler(IHttpRequest httpReq);
    internal static IHttpHandler GetHandlerInternal(IHttpRequest httpReq);
    public static IHttpHandler GetHandlerForPathInfo(IHttpRequest httpReq, string filePath);
    public sealed virtual void ReleaseHandler(IHttpHandler handler);
}
[ExtensionAttribute]
public static class ServiceStack.HttpRequestExtensions : object {
    private static ILog Log;
    internal static string WebHostDirectoryName;
    private static String[] VirtualPathPrefixes;
    private static String[] FormContentTypes;
    private static HttpRequestExtensions();
    [ExtensionAttribute]
public static string GetItemOrCookie(IRequest httpReq, string name);
    [ExtensionAttribute]
public static string GetParam(IRequest req, string name);
    [ExtensionAttribute]
public static string GetQueryStringOrForm(IRequest httpReq, string name);
    [ExtensionAttribute]
public static string GetParentAbsolutePath(IRequest httpReq);
    [ExtensionAttribute]
public static string GetAbsolutePath(IRequest httpReq);
    [ExtensionAttribute]
public static string GetParentPathUrl(IRequest httpReq);
    [ExtensionAttribute]
public static string GetPathUrl(IRequest httpReq);
    [ExtensionAttribute]
public static string GetUrlHostName(IRequest httpReq);
    [ExtensionAttribute]
public static string GetPhysicalPath(IRequest httpReq);
    [ExtensionAttribute]
public static IVirtualNode GetVirtualNode(IRequest httpReq);
    [ExtensionAttribute]
public static string GetDirectoryPath(IRequest request);
    [ExtensionAttribute]
public static string GetLeftAuthority(Uri uri);
    [ExtensionAttribute]
public static string GetApplicationUrl(IRequest httpReq);
    [ExtensionAttribute]
public static string GetHttpMethodOverride(IRequest httpReq);
    [ExtensionAttribute]
public static string GetFormatModifier(IRequest httpReq);
    [ExtensionAttribute]
public static bool HasNotModifiedSince(IRequest httpReq, Nullable`1<DateTime> dateTime);
    [ExtensionAttribute]
public static bool DidReturn304NotModified(IRequest httpReq, Nullable`1<DateTime> dateTime, IResponse httpRes);
    [ExtensionAttribute]
public static string GetJsonpCallback(IRequest httpReq);
    [ExtensionAttribute]
public static Dictionary`2<string, string> CookiesAsDictionary(IRequest httpReq);
    [ExtensionAttribute]
public static int ToStatusCode(Exception ex);
    [ExtensionAttribute]
public static string ToErrorCode(Exception ex);
    [ExtensionAttribute]
public static WebServiceException ToWebServiceException(HttpError error);
    [ExtensionAttribute]
public static WebServiceException ToWebServiceException(ValidationResult validationResult, object requestDto, ValidationFeature feature);
    public static string GetOperationNameFromLastPathInfo(string lastPathInfo);
    private static string GetLastPathInfoFromRawUrl(string rawUrl);
    [ExtensionAttribute]
public static string GetParentBaseUrl(IRequest request);
    [ExtensionAttribute]
public static string SanitizedVirtualPath(string virtualPath);
    [ExtensionAttribute]
public static string GetParentBaseUrl(HttpRequestBase request);
    [ExtensionAttribute]
public static string GetApplicationUrl(HttpRequestBase httpReq);
    [ExtensionAttribute]
public static string GetBaseUrl(HttpRequestBase request);
    [ExtensionAttribute]
public static string GetUrlHostName(HttpRequestBase request);
    [ExtensionAttribute]
public static string GetLastPathInfo(HttpRequestBase request);
    [ExtensionAttribute]
public static string GetOperationName(HttpRequestBase request);
    [ExtensionAttribute]
public static string GetOperationName(HttpListenerRequest request);
    [ExtensionAttribute]
public static string GetLastPathInfo(HttpListenerRequest request);
    public static string GetPathInfo(string fullPath, string mode, string appPath);
    public static string ResolvePathInfoFromMappedPath(string fullPath, string mappedPathRoot);
    [ExtensionAttribute]
public static bool IsContentType(IRequest request, string contentType);
    [ExtensionAttribute]
public static bool HasAnyOfContentTypes(IRequest request, String[] contentTypes);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetFlattenedRequestParams(IRequest request);
    [ExtensionAttribute]
public static string GetQueryStringContentType(IRequest httpReq);
    [ExtensionAttribute]
public static object ResolveItem(IRequest httpReq, string itemKey, Func`2<IRequest, object> resolveFn);
    [ExtensionAttribute]
public static string GetResponseContentType(IRequest httpReq);
    [ExtensionAttribute]
public static void SetView(IRequest httpReq, string viewName);
    [ExtensionAttribute]
public static string GetView(IRequest httpReq);
    [ExtensionAttribute]
public static void SetErrorView(IRequest httpReq, string viewName);
    [ExtensionAttribute]
public static string GetErrorView(IRequest httpReq);
    [ExtensionAttribute]
public static void SetTemplate(IRequest httpReq, string templateName);
    [ExtensionAttribute]
public static string GetTemplate(IRequest httpReq);
    [ExtensionAttribute]
public static string ResolveAbsoluteUrl(IRequest httpReq, string virtualPath);
    [ExtensionAttribute]
public static string GetRawUrl(IRequest httpReq);
    [ExtensionAttribute]
public static string GetAbsoluteUrl(IRequest httpReq, string url);
    [ExtensionAttribute]
public static string GetReturnUrl(IRequest req);
    [ExtensionAttribute]
public static string InferBaseUrl(string absoluteUri, string fromPathInfo);
    [ExtensionAttribute]
public static string GetBaseUrl(IRequest httpReq);
    [ExtensionAttribute]
public static bool UseHttps(IRequest httpReq);
    [ExtensionAttribute]
public static string NormalizeScheme(string url, bool useHttps);
    public static RequestAttributes ToRequestAttributes(String[] attrNames);
    [ExtensionAttribute]
public static RequestAttributes GetAttributes(IRequest request);
    public static RequestAttributes GetAttributes(IPAddress ipAddress);
    [ExtensionAttribute]
public static bool IsInLocalSubnet(IPAddress ipAddress);
    [ExtensionAttribute]
public static RequestContext ToRequestContext(IRequest req);
    [ExtensionAttribute]
public static HttpContextBase ToHttpContextBase(IRequest req);
    [ExtensionAttribute]
public static HttpResponseBase ToHttpResponseBase(IResponse res);
    [ExtensionAttribute]
public static HttpContextBase ToHttpContextBase(HttpRequestBase aspnetHttpReq);
    [ExtensionAttribute]
public static HttpContextBase ToHttpContextBase(HttpContext httpContext);
    [ExtensionAttribute]
public static IHttpRequest ToRequest(HttpContext httpCtx, string operationName);
    [ExtensionAttribute]
public static IHttpRequest ToRequest(HttpContextBase httpCtx, string operationName);
    [ExtensionAttribute]
public static IHttpRequest ToRequest(HttpRequestBase httpCtx, string operationName);
    [ExtensionAttribute]
public static IHttpRequest ToRequest(HttpListenerContext httpCtxReq, string operationName);
    [ExtensionAttribute]
public static IHttpResponse ToResponse(HttpContext httpCtx);
    [ExtensionAttribute]
public static IHttpResponse ToResponse(HttpRequestBase aspReq);
    [ExtensionAttribute]
public static IHttpResponse ToResponse(HttpListenerContext httpCtx);
    [ExtensionAttribute]
public static Message GetSoapMessage(IRequest httpReq);
    [ExtensionAttribute]
public static string GetPathAndQuery(HttpRequestBase request);
    [ExtensionAttribute]
public static Type GetOperationType(IRequest req);
    [ExtensionAttribute]
public static bool IsMultiRequest(IRequest req);
    [ExtensionAttribute]
public static void SetAutoBatchCompletedHeader(IRequest req, int completed);
    [ExtensionAttribute]
public static void SetRoute(IRequest req, RestPath route);
    [ExtensionAttribute]
public static RestPath GetRoute(IRequest req);
    [ExtensionAttribute]
public static bool IsHtml(IRequest req);
    [ExtensionAttribute]
public static string GetRequestValue(IHttpRequest req, string name);
    [ExtensionAttribute]
public static void EachRequest(IRequest httpReq, Action`1<T> action);
    [ExtensionAttribute]
public static T GetOriginalRequest(IRequest req);
    [ExtensionAttribute]
public static ClaimsPrincipal GetClaimsPrincipal(IRequest req);
    [ExtensionAttribute]
public static IEnumerable`1<Claim> GetClaims(IRequest req);
    [ExtensionAttribute]
public static bool CanReadRequestBody(IRequest req);
}
[ExtensionAttribute]
public static class ServiceStack.HttpResponseExtensions : object {
    private static ILog Log;
    public static bool IsMonoFastCgi;
    public static bool IsHttpListener;
    public static bool IsNetCore;
    private static HttpResponseExtensions();
    [ExtensionAttribute]
public static void CloseOutputStream(HttpResponseBase response);
    [ExtensionAttribute]
public static void CloseOutputStream(HttpListenerResponse response);
    [ExtensionAttribute]
public static void RedirectToUrl(IResponse httpRes, string url, HttpStatusCode redirectStatusCode);
    [ExtensionAttribute]
public static void TransmitFile(IResponse httpRes, string filePath);
    [ExtensionAttribute]
public static void WriteFile(IResponse httpRes, string filePath);
    [ExtensionAttribute]
public static IRequest AllowSyncIO(IRequest req);
    [ExtensionAttribute]
public static IResponse AllowSyncIO(IResponse res);
    [ExtensionAttribute]
public static void Redirect(IResponse httpRes, string url);
    [ExtensionAttribute]
public static Task ReturnFailedAuthentication(IAuthSession session, IRequest request);
    [ExtensionAttribute]
public static Task ReturnAuthRequired(IResponse httpRes);
    [ExtensionAttribute]
public static Task ReturnAuthRequired(IResponse httpRes, string authRealm);
    [ExtensionAttribute]
public static Task ReturnAuthRequired(IResponse httpRes, AuthenticationHeaderType AuthType, string authRealm);
    [ExtensionAttribute]
public static void ClearCookies(IResponse response);
    [ExtensionAttribute]
public static void SetPermanentCookie(IResponse response, string cookieName, string cookieValue);
    [ExtensionAttribute]
public static void SetSessionCookie(IResponse response, string cookieName, string cookieValue);
    [ExtensionAttribute]
public static void SetCookie(IResponse response, string cookieName, string cookieValue, TimeSpan expiresIn, string path);
    [ExtensionAttribute]
public static void SetCookie(IResponse response, Cookie cookie);
    [ExtensionAttribute]
public static void SetCookie(IResponse response, string cookieName, string cookieValue, DateTime expiresAt, string path);
    [ExtensionAttribute]
public static void DeleteCookie(IResponse response, string cookieName);
    [ExtensionAttribute]
public static Dictionary`2<string, string> CookiesAsDictionary(IResponse httpRes);
    [ExtensionAttribute]
public static void AddHeaderLastModified(IResponse httpRes, Nullable`1<DateTime> lastModified);
    [ExtensionAttribute]
public static string SetParam(string url, string key, object val);
    [ExtensionAttribute]
public static string SetParam(string url, string key, string val);
    [ExtensionAttribute]
public static string AddParam(string url, string key, object val);
    [ExtensionAttribute]
public static string AddParam(string url, string key, string val);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WriteAsync")]
public static void Write(IResponse response, string contents);
    [ExtensionAttribute]
public static Task WriteAsync(IResponse response, string contents);
    [AsyncStateMachineAttribute("ServiceStack.HttpResponseExtensions/<WriteAsync>d__32")]
[ExtensionAttribute]
public static Task WriteAsync(IResponse response, ReadOnlyMemory`1<byte> bytes);
    [ExtensionAttribute]
public static void EndWith(IResponse res, HttpStatusCode code, string description);
}
[ExtensionAttribute]
public static class ServiceStack.HttpResponseExtensionsInternal : object {
    private static ILog Log;
    private static HttpResponseExtensionsInternal();
    [ObsoleteAttribute("Use WriteToOutputStreamAsync")]
public static bool WriteToOutputStream(IResponse response, object result, Byte[] bodyPrefix, Byte[] bodySuffix);
    [AsyncStateMachineAttribute("ServiceStack.HttpResponseExtensionsInternal/<WriteToOutputStreamAsync>d__2")]
public static Task`1<bool> WriteToOutputStreamAsync(IResponse response, object result, Byte[] bodyPrefix, Byte[] bodySuffix, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> WriteToResponse(IResponse httpRes, object result, string contentType, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> WriteToResponse(IResponse httpRes, IRequest httpReq, object result, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> WriteToResponse(IResponse httpRes, IRequest httpReq, object result, Byte[] bodyPrefix, Byte[] bodySuffix, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<bool> WriteToResponse(IResponse httpRes, object result, StreamSerializerDelegateAsync serializer, IRequest serializationContext, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.HttpResponseExtensionsInternal/<WriteToResponse>d__7")]
[ExtensionAttribute]
public static Task`1<bool> WriteToResponse(IResponse response, object result, StreamSerializerDelegateAsync defaultAction, IRequest request, Byte[] bodyPrefix, Byte[] bodySuffix, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.HttpResponseExtensionsInternal/<HandleResponseWriteException>d__8")]
[ExtensionAttribute]
internal static Task HandleResponseWriteException(Exception originalEx, IRequest request, IResponse response, string defaultContentType);
    [AsyncStateMachineAttribute("ServiceStack.HttpResponseExtensionsInternal/<WriteBytesToResponse>d__9")]
[ExtensionAttribute]
public static Task WriteBytesToResponse(IResponse res, Byte[] responseBytes, string contentType, CancellationToken token);
    [ExtensionAttribute]
public static Task WriteError(IResponse httpRes, IRequest httpReq, object dto, string errorMessage);
    [ExtensionAttribute]
public static Task WriteError(IResponse httpRes, object dto, string errorMessage);
    [ExtensionAttribute]
public static Task WriteError(IResponse httpRes, Exception ex, int statusCode, string errorMessage, string contentType);
    [ExtensionAttribute]
public static Task WriteErrorBody(IResponse httpRes, Exception ex);
    [AsyncStateMachineAttribute("ServiceStack.HttpResponseExtensionsInternal/<WriteErrorToResponse>d__14")]
[ExtensionAttribute]
public static Task WriteErrorToResponse(IResponse httpRes, IRequest httpReq, string contentType, string operationName, string errorMessage, Exception ex, int statusCode);
    [AsyncStateMachineAttribute("ServiceStack.HttpResponseExtensionsInternal/<HandleCustomErrorHandler>d__15")]
[ExtensionAttribute]
private static Task`1<bool> HandleCustomErrorHandler(IResponse httpRes, IRequest httpReq, string contentType, int statusCode, object errorDto, Exception ex);
    public static bool ShouldWriteGlobalHeaders(IResponse httpRes);
    [ExtensionAttribute]
public static void ApplyGlobalResponseHeaders(HttpListenerResponse httpRes);
    [ExtensionAttribute]
public static void ApplyGlobalResponseHeaders(HttpResponseBase httpRes);
    [ExtensionAttribute]
public static void ApplyGlobalResponseHeaders(IResponse httpRes);
}
public class ServiceStack.HttpResult : object {
    [CompilerGeneratedAttribute]
private string <ResponseText>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ResponseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private FileInfo <FileInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IVirtualFile <VirtualFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Cookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheControl <CacheControl>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IDisposable> <ResultScope>k__BackingField;
    private bool allowsPartialResponse;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private IContentTypeWriter <ResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <View>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PaddingLength>k__BackingField;
    public string ResponseText { get; }
    public Stream ResponseStream { get; private set; }
    public FileInfo FileInfo { get; }
    public IVirtualFile VirtualFile { get; }
    public string ContentType { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public List`1<Cookie> Cookies { get; }
    public string ETag { get; public set; }
    public Nullable`1<TimeSpan> Age { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public CacheControl CacheControl { get; public set; }
    public Func`1<IDisposable> ResultScope { get; public set; }
    public bool AllowsPartialResponse { get; public set; }
    unknown string Location {public set; }
    public IDictionary`2<string, string> Options { get; }
    public int Status { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public object Response { get; public set; }
    public IContentTypeWriter ResponseFilter { get; public set; }
    public IRequest RequestContext { get; public set; }
    public string View { get; public set; }
    public string Template { get; public set; }
    public int PaddingLength { get; public set; }
    public bool IsPartialRequest { get; }
    public HttpResult(object response);
    public HttpResult(object response, string contentType);
    public HttpResult(HttpStatusCode statusCode, string statusDescription);
    public HttpResult(object response, HttpStatusCode statusCode);
    public HttpResult(object response, string contentType, HttpStatusCode statusCode);
    public HttpResult(FileInfo fileResponse, bool asAttachment);
    public HttpResult(FileInfo fileResponse, string contentType, bool asAttachment);
    public HttpResult(IVirtualFile fileResponse, bool asAttachment);
    public HttpResult(IVirtualFile fileResponse, string contentType, bool asAttachment);
    public HttpResult(Stream responseStream, string contentType);
    public HttpResult(string responseText, string contentType);
    public HttpResult(Byte[] responseBytes, string contentType);
    [CompilerGeneratedAttribute]
public string get_ResponseText();
    [CompilerGeneratedAttribute]
public Stream get_ResponseStream();
    [CompilerGeneratedAttribute]
private void set_ResponseStream(Stream value);
    [CompilerGeneratedAttribute]
public FileInfo get_FileInfo();
    [CompilerGeneratedAttribute]
public IVirtualFile get_VirtualFile();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Cookie> get_Cookies();
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public CacheControl get_CacheControl();
    [CompilerGeneratedAttribute]
public void set_CacheControl(CacheControl value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<IDisposable> get_ResultScope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResultScope(Func`1<IDisposable> value);
    public void set_AllowsPartialResponse(bool value);
    public bool get_AllowsPartialResponse();
    public void set_Location(string value);
    public void SetPermanentCookie(string name, string value);
    public void SetPermanentCookie(string name, string value, string path);
    public void SetSessionCookie(string name, string value);
    public void SetSessionCookie(string name, string value, string path);
    public void SetCookie(string name, string value, TimeSpan expiresIn, string path);
    public void SetCookie(string name, string value, DateTime expiresAt, string path, bool secure, bool httpOnly);
    public void DeleteCookie(string name);
    public sealed virtual IDictionary`2<string, string> get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Status(int value);
    public sealed virtual HttpStatusCode get_StatusCode();
    public sealed virtual void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Response();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Response(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IContentTypeWriter get_ResponseFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseFilter(IContentTypeWriter value);
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_RequestContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestContext(IRequest value);
    [CompilerGeneratedAttribute]
public string get_View();
    [CompilerGeneratedAttribute]
public void set_View(string value);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PaddingLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PaddingLength(int value);
    [AsyncStateMachineAttribute("ServiceStack.HttpResult/<WriteToAsync>d__114")]
public sealed virtual Task WriteToAsync(Stream responseStream, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.HttpResult/<WriteToAsync>d__115")]
private Task WriteToAsync(Stream responseStream, int paddingLength, CancellationToken token);
    public sealed virtual bool get_IsPartialRequest();
    [AsyncStateMachineAttribute("ServiceStack.HttpResult/<WritePartialToAsync>d__118")]
public sealed virtual Task WritePartialToAsync(IResponse response, CancellationToken token);
    public Nullable`1<long> GetContentLength();
    public static HttpResult Status201Created(object response, string newLocationUri);
    public static HttpResult Redirect(string newLocationUri, HttpStatusCode redirectStatus);
    public static HttpResult SoftRedirect(string newLocationUri, object response);
    public static HttpResult TriggerEvent(object response, string eventName, string value);
    public static HttpResult NotModified(string description, Nullable`1<CacheControl> cacheControl, Nullable`1<TimeSpan> maxAge, string eTag, Nullable`1<DateTime> lastModified);
    private void DisposeStream();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class ServiceStack.HttpResultExtensions : object {
    [ExtensionAttribute]
public static Cookie ToCookie(HttpCookie httpCookie);
    [ExtensionAttribute]
public static IHttpResult AddCookie(IHttpResult httpResult, IRequest req, Cookie cookie);
    [ExtensionAttribute]
public static IHttpResult DeleteCookie(IHttpResult httpResult, IRequest req, string cookieName);
}
[ExtensionAttribute]
public static class ServiceStack.HttpResultUtils : object {
    [ExtensionAttribute]
public static object GetDto(object response);
    [ExtensionAttribute]
public static object GetResponseDto(object response);
    [ExtensionAttribute]
public static TResponse GetDto(object response);
    [ExtensionAttribute]
public static TResponse GetResponseDto(object response);
    [ExtensionAttribute]
public static object CreateErrorResponse(IHttpError httpError);
    [ExtensionAttribute]
public static bool IsErrorResponse(object response);
    [ExtensionAttribute]
public static void ExtractHttpRanges(string rangeHeader, long contentLength, Int64& rangeStart, Int64& rangeEnd);
    [ExtensionAttribute]
public static void AddHttpRangeResponseHeaders(IResponse response, long rangeStart, long rangeEnd, long contentLength);
}
public interface ServiceStack.IAfterInitAppHost {
    public abstract virtual void AfterInit(IAppHost appHost);
}
public interface ServiceStack.IApiKeyValidator {
}
public interface ServiceStack.IAppHost {
    public string PathBase { get; }
    public List`1<Assembly> ServiceAssemblies { get; }
    public List`1<Action`1<IRequest>> OnEndRequestCallbacks { get; }
    public IServiceRoutes Routes { get; }
    public ServiceMetadata Metadata { get; }
    public IContentTypes ContentTypes { get; }
    public List`1<Action`2<IRequest, IResponse>> PreRequestFilters { get; }
    public List`1<Func`3<IRequest, object, Task`1<object>>> RequestConverters { get; }
    public List`1<Func`3<IRequest, object, Task`1<object>>> ResponseConverters { get; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalRequestFilters { get; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalRequestFiltersAsync { get; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalResponseFilters { get; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalResponseFiltersAsync { get; public set; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalMessageRequestFilters { get; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalMessageRequestFiltersAsync { get; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalMessageResponseFilters { get; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalMessageResponseFiltersAsync { get; }
    public List`1<Action`2<IRequest, object>> GatewayRequestFilters { get; }
    public List`1<Func`3<IRequest, object, Task>> GatewayRequestFiltersAsync { get; }
    public List`1<Action`2<IRequest, object>> GatewayResponseFilters { get; }
    public List`1<Func`3<IRequest, object, Task>> GatewayResponseFiltersAsync { get; }
    public List`1<IViewEngine> ViewEngines { get; }
    public List`1<HandleServiceExceptionDelegate> ServiceExceptionHandlers { get; }
    public List`1<HandleServiceExceptionAsyncDelegate> ServiceExceptionHandlersAsync { get; }
    public List`1<HandleUncaughtExceptionDelegate> UncaughtExceptionHandlers { get; }
    public List`1<HandleUncaughtExceptionAsyncDelegate> UncaughtExceptionHandlersAsync { get; }
    public List`1<HandleGatewayExceptionDelegate> GatewayExceptionHandlers { get; }
    public List`1<HandleGatewayExceptionAsyncDelegate> GatewayExceptionHandlersAsync { get; }
    public List`1<Action`1<ServiceStackHost>> BeforeConfigure { get; public set; }
    public List`1<Action`1<ServiceStackHost>> AfterConfigure { get; public set; }
    public List`1<Action`1<ServiceStackHost>> AfterPluginsLoaded { get; public set; }
    public List`1<Action`1<IAppHost>> AfterInitCallbacks { get; }
    public List`1<Action`1<IAppHost>> OnDisposeCallbacks { get; }
    public List`1<Func`2<IHttpRequest, IHttpHandler>> RawHttpHandlers { get; }
    public List`1<HttpHandlerResolverDelegate> CatchAllHandlers { get; }
    public List`1<HttpHandlerResolverDelegate> FallbackHandlers { get; }
    public IServiceStackHandler GlobalHtmlErrorHttpHandler { get; }
    public Dictionary`2<HttpStatusCode, IServiceStackHandler> CustomErrorHttpHandlers { get; }
    public Dictionary`2<Type, Func`2<IRequest, object>> RequestBinders { get; }
    public HostConfig Config { get; }
    public IAppSettings AppSettings { get; }
    public List`1<IPlugin> Plugins { get; }
    public IVirtualPathProvider VirtualFileSources { get; public set; }
    public IVirtualFiles VirtualFiles { get; public set; }
    public IVirtualDirectory RootDirectory { get; }
    public IVirtualDirectory ContentRootDirectory { get; }
    public List`1<IVirtualPathProvider> InsertVirtualFileSources { get; public set; }
    public List`1<IVirtualPathProvider> AddVirtualFileSources { get; }
    public ServiceController ServiceController { get; }
    public ScriptContext ScriptContext { get; }
    public abstract virtual string get_PathBase();
    public abstract virtual List`1<Assembly> get_ServiceAssemblies();
    public abstract virtual void Register(T instance);
    public abstract virtual void RegisterAs();
    public abstract virtual void Release(object instance);
    public abstract virtual void OnEndRequest(IRequest request);
    public abstract virtual List`1<Action`1<IRequest>> get_OnEndRequestCallbacks();
    public abstract virtual IServiceRoutes get_Routes();
    public abstract virtual ServiceMetadata get_Metadata();
    public abstract virtual IContentTypes get_ContentTypes();
    public abstract virtual List`1<Action`2<IRequest, IResponse>> get_PreRequestFilters();
    public abstract virtual List`1<Func`3<IRequest, object, Task`1<object>>> get_RequestConverters();
    public abstract virtual List`1<Func`3<IRequest, object, Task`1<object>>> get_ResponseConverters();
    public abstract virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalRequestFilters();
    public abstract virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalRequestFiltersAsync();
    public abstract virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalResponseFilters();
    public abstract virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalResponseFiltersAsync();
    public abstract virtual void set_GlobalResponseFiltersAsync(List`1<Func`4<IRequest, IResponse, object, Task>> value);
    public abstract virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalMessageRequestFilters();
    public abstract virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalMessageRequestFiltersAsync();
    public abstract virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalMessageResponseFilters();
    public abstract virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalMessageResponseFiltersAsync();
    public abstract virtual void RegisterTypedRequestFilter(Action`3<IRequest, IResponse, T> filterFn);
    public abstract virtual void RegisterTypedRequestFilterAsync(Func`4<IRequest, IResponse, T, Task> filterFn);
    public abstract virtual void RegisterTypedRequestFilter(Func`2<Container, ITypedFilter`1<T>> filter);
    public abstract virtual void RegisterTypedRequestFilterAsync(Func`2<Container, ITypedFilterAsync`1<T>> filter);
    public abstract virtual void RegisterTypedResponseFilter(Action`3<IRequest, IResponse, T> filterFn);
    public abstract virtual void RegisterTypedResponseFilterAsync(Func`4<IRequest, IResponse, T, Task> filterFn);
    public abstract virtual void RegisterTypedResponseFilter(Func`2<Container, ITypedFilter`1<T>> filter);
    public abstract virtual void RegisterTypedResponseFilterAsync(Func`2<Container, ITypedFilterAsync`1<T>> filter);
    public abstract virtual void RegisterTypedMessageRequestFilter(Action`3<IRequest, IResponse, T> filterFn);
    public abstract virtual void RegisterTypedMessageResponseFilter(Action`3<IRequest, IResponse, T> filterFn);
    public abstract virtual List`1<Action`2<IRequest, object>> get_GatewayRequestFilters();
    public abstract virtual List`1<Func`3<IRequest, object, Task>> get_GatewayRequestFiltersAsync();
    public abstract virtual List`1<Action`2<IRequest, object>> get_GatewayResponseFilters();
    public abstract virtual List`1<Func`3<IRequest, object, Task>> get_GatewayResponseFiltersAsync();
    public abstract virtual List`1<IViewEngine> get_ViewEngines();
    public abstract virtual List`1<HandleServiceExceptionDelegate> get_ServiceExceptionHandlers();
    public abstract virtual List`1<HandleServiceExceptionAsyncDelegate> get_ServiceExceptionHandlersAsync();
    public abstract virtual List`1<HandleUncaughtExceptionDelegate> get_UncaughtExceptionHandlers();
    public abstract virtual List`1<HandleUncaughtExceptionAsyncDelegate> get_UncaughtExceptionHandlersAsync();
    public abstract virtual List`1<HandleGatewayExceptionDelegate> get_GatewayExceptionHandlers();
    public abstract virtual List`1<HandleGatewayExceptionAsyncDelegate> get_GatewayExceptionHandlersAsync();
    public abstract virtual List`1<Action`1<ServiceStackHost>> get_BeforeConfigure();
    public abstract virtual void set_BeforeConfigure(List`1<Action`1<ServiceStackHost>> value);
    public abstract virtual List`1<Action`1<ServiceStackHost>> get_AfterConfigure();
    public abstract virtual void set_AfterConfigure(List`1<Action`1<ServiceStackHost>> value);
    public abstract virtual List`1<Action`1<ServiceStackHost>> get_AfterPluginsLoaded();
    public abstract virtual void set_AfterPluginsLoaded(List`1<Action`1<ServiceStackHost>> value);
    public abstract virtual List`1<Action`1<IAppHost>> get_AfterInitCallbacks();
    public abstract virtual List`1<Action`1<IAppHost>> get_OnDisposeCallbacks();
    public abstract virtual List`1<Func`2<IHttpRequest, IHttpHandler>> get_RawHttpHandlers();
    public abstract virtual List`1<HttpHandlerResolverDelegate> get_CatchAllHandlers();
    public abstract virtual List`1<HttpHandlerResolverDelegate> get_FallbackHandlers();
    public abstract virtual IServiceStackHandler get_GlobalHtmlErrorHttpHandler();
    public abstract virtual Dictionary`2<HttpStatusCode, IServiceStackHandler> get_CustomErrorHttpHandlers();
    public abstract virtual Dictionary`2<Type, Func`2<IRequest, object>> get_RequestBinders();
    public abstract virtual HostConfig get_Config();
    public abstract virtual IAppSettings get_AppSettings();
    public abstract virtual T GetRuntimeConfig(IRequest req, string name, T defaultValue);
    public abstract virtual void RegisterService(Type serviceType, String[] atRestPaths);
    public abstract virtual void RegisterServicesInAssembly(Assembly assembly);
    public abstract virtual List`1<IPlugin> get_Plugins();
    public abstract virtual void LoadPlugin(IPlugin[] plugins);
    public abstract virtual string MapProjectPath(string relativePath);
    public abstract virtual IVirtualPathProvider get_VirtualFileSources();
    public abstract virtual void set_VirtualFileSources(IVirtualPathProvider value);
    public abstract virtual IVirtualFiles get_VirtualFiles();
    public abstract virtual void set_VirtualFiles(IVirtualFiles value);
    public abstract virtual IVirtualDirectory get_RootDirectory();
    public abstract virtual IVirtualDirectory get_ContentRootDirectory();
    public abstract virtual List`1<IVirtualPathProvider> get_InsertVirtualFileSources();
    public abstract virtual void set_InsertVirtualFileSources(List`1<IVirtualPathProvider> value);
    public abstract virtual List`1<IVirtualPathProvider> get_AddVirtualFileSources();
    public abstract virtual IServiceRunner`1<TRequest> CreateServiceRunner(ActionContext actionContext);
    public abstract virtual string ResolveAbsoluteUrl(string virtualPath, IRequest httpReq);
    public abstract virtual string ResolveLocalizedString(string text, IRequest request);
    public abstract virtual object ExecuteMessage(IMessage mqMessage);
    public abstract virtual Task`1<object> ExecuteMessageAsync(IMessage mqMessage, CancellationToken token);
    public abstract virtual ServiceController get_ServiceController();
    public abstract virtual void PublishMessage(IMessageProducer messageProducer, T message);
    public abstract virtual ScriptContext get_ScriptContext();
    public abstract virtual object EvalExpression(string expr);
    public abstract virtual object EvalExpressionCached(string expr);
    public abstract virtual object EvalScriptValue(IScriptValue scriptValue, IRequest req, Dictionary`2<string, object> args);
    public abstract virtual Task`1<object> EvalScriptValueAsync(IScriptValue scriptValue, IRequest req, Dictionary`2<string, object> args);
    public abstract virtual void ConfigurePlugin(Action`1<T> configure);
    public abstract virtual void PostConfigurePlugin(Action`1<T> configure);
    public abstract virtual void AfterPluginLoaded(Action`1<T> configure);
}
public interface ServiceStack.IAuthInit {
    public abstract virtual void Init(AuthFeature feature);
}
public interface ServiceStack.IAuthPlugin {
    public abstract virtual void Configure(IServiceCollection services, AuthFeature feature);
    public abstract virtual void Register(IAppHost appHost, AuthFeature feature);
}
public interface ServiceStack.IAuthTypeValidator {
}
public interface ServiceStack.IAutoQueryData {
    public abstract virtual Type GetFromType(Type requestDtoType);
    public abstract virtual IQueryDataSource GetDb(QueryDataContext ctx, Type type);
    public abstract virtual IQueryDataSource GetDb(QueryDataContext ctx);
    public abstract virtual ITypedQueryData GetTypedQuery(Type requestDtoType, Type fromType);
    public abstract virtual DataQuery`1<From> CreateQuery(IQueryData`1<From> dto, Dictionary`2<string, string> dynamicParams, IRequest req, IQueryDataSource db);
    public abstract virtual QueryResponse`1<From> Execute(IQueryData`1<From> request, DataQuery`1<From> q, IRequest req, IQueryDataSource db);
    public abstract virtual DataQuery`1<From> CreateQuery(IQueryData`2<From, Into> dto, Dictionary`2<string, string> dynamicParams, IRequest req, IQueryDataSource db);
    public abstract virtual QueryResponse`1<Into> Execute(IQueryData`2<From, Into> request, DataQuery`1<From> q, IRequest req, IQueryDataSource db);
    public abstract virtual QueryDataContext CreateContext(IQueryData requestDto, Dictionary`2<string, string> dynamicParams, IRequest req);
    public abstract virtual IDataQuery CreateQuery(IQueryData dto, Dictionary`2<string, string> dynamicParams, IRequest req, IQueryDataSource db);
    public abstract virtual IQueryResponse Execute(IQueryData request, IDataQuery q, IQueryDataSource db);
}
public interface ServiceStack.IAutoQueryDataOptions {
    public Nullable`1<int> MaxLimit { get; public set; }
    public bool IncludeTotal { get; public set; }
    public bool EnableUntypedQueries { get; public set; }
    public bool OrderByPrimaryKeyOnLimitQuery { get; public set; }
    public HashSet`1<string> IgnoreProperties { get; public set; }
    public Dictionary`2<string, QueryDataField> StartsWithConventions { get; public set; }
    public Dictionary`2<string, QueryDataField> EndsWithConventions { get; public set; }
    public abstract virtual Nullable`1<int> get_MaxLimit();
    public abstract virtual void set_MaxLimit(Nullable`1<int> value);
    public abstract virtual bool get_IncludeTotal();
    public abstract virtual void set_IncludeTotal(bool value);
    public abstract virtual bool get_EnableUntypedQueries();
    public abstract virtual void set_EnableUntypedQueries(bool value);
    public abstract virtual bool get_OrderByPrimaryKeyOnLimitQuery();
    public abstract virtual void set_OrderByPrimaryKeyOnLimitQuery(bool value);
    public abstract virtual HashSet`1<string> get_IgnoreProperties();
    public abstract virtual void set_IgnoreProperties(HashSet`1<string> value);
    public abstract virtual Dictionary`2<string, QueryDataField> get_StartsWithConventions();
    public abstract virtual void set_StartsWithConventions(Dictionary`2<string, QueryDataField> value);
    public abstract virtual Dictionary`2<string, QueryDataField> get_EndsWithConventions();
    public abstract virtual void set_EndsWithConventions(Dictionary`2<string, QueryDataField> value);
}
public interface ServiceStack.IAutoQueryDbFilters {
    public abstract virtual object sendToAutoQuery(ScriptScopeContext scope, object dto, string requestName, object options);
}
public interface ServiceStack.ICancellableRequest {
    public CancellationToken Token { get; }
    public CancellationTokenSource TokenSource { get; }
    public TimeSpan Elapsed { get; }
    public abstract virtual CancellationToken get_Token();
    public abstract virtual CancellationTokenSource get_TokenSource();
    public abstract virtual TimeSpan get_Elapsed();
}
public interface ServiceStack.IConfigureAppHost {
    public abstract virtual void Configure(IAppHost appHost);
}
[NullableContextAttribute("1")]
public interface ServiceStack.IConfigureServices {
    public abstract virtual void Configure(IServiceCollection services);
}
public interface ServiceStack.IDataQuery {
    public IQueryData Dto { get; }
    public Dictionary`2<string, string> DynamicParams { get; }
    public List`1<DataConditionExpression> Conditions { get; }
    public OrderByExpression OrderBy { get; }
    public HashSet`1<string> OnlyFields { get; }
    public Nullable`1<int> Offset { get; }
    public Nullable`1<int> Rows { get; }
    public bool HasConditions { get; }
    public abstract virtual IQueryData get_Dto();
    public abstract virtual Dictionary`2<string, string> get_DynamicParams();
    public abstract virtual List`1<DataConditionExpression> get_Conditions();
    public abstract virtual OrderByExpression get_OrderBy();
    public abstract virtual HashSet`1<string> get_OnlyFields();
    public abstract virtual Nullable`1<int> get_Offset();
    public abstract virtual Nullable`1<int> get_Rows();
    public abstract virtual bool get_HasConditions();
    public abstract virtual Tuple`2<Type, PropertyInfo> FirstMatchingField(string name);
    public abstract virtual void Select(String[] fields);
    public abstract virtual void Join(Type joinType, Type type);
    public abstract virtual void LeftJoin(Type joinType, Type type);
    public abstract virtual void And(string field, QueryCondition condition, string value);
    public abstract virtual void Or(string field, QueryCondition condition, string value);
    public abstract virtual void AddCondition(QueryTerm defaultTerm, PropertyInfo field, QueryCondition condition, object value);
    public abstract virtual void OrderByFields(String[] fieldNames);
    public abstract virtual void OrderByFieldsDescending(String[] fieldNames);
    public abstract virtual void OrderByPrimaryKey();
    public abstract virtual void Limit(Nullable`1<int> skip, Nullable`1<int> take);
}
public interface ServiceStack.IEventSubscription {
    public DateTime CreatedAt { get; public set; }
    public DateTime LastPulseAt { get; public set; }
    public long LastMessageId { get; }
    public String[] Channels { get; }
    public String[] MergedChannels { get; }
    public string UserId { get; }
    public string UserName { get; }
    public string DisplayName { get; }
    public string SessionId { get; }
    public string SubscriptionId { get; }
    public string UserAddress { get; public set; }
    public bool IsAuthenticated { get; public set; }
    public bool IsClosed { get; }
    public Func`2<IEventSubscription, Task> OnUnsubscribeAsync { get; public set; }
    public Action`1<IEventSubscription> OnUnsubscribe { get; public set; }
    public ConcurrentDictionary`2<string, string> Meta { get; public set; }
    public Dictionary`2<string, string> ServerArgs { get; public set; }
    public Dictionary`2<string, string> ConnectArgs { get; public set; }
    public string JsonArgs { get; }
    public abstract virtual DateTime get_CreatedAt();
    public abstract virtual void set_CreatedAt(DateTime value);
    public abstract virtual DateTime get_LastPulseAt();
    public abstract virtual void set_LastPulseAt(DateTime value);
    public abstract virtual long get_LastMessageId();
    public abstract virtual String[] get_Channels();
    public abstract virtual String[] get_MergedChannels();
    public abstract virtual string get_UserId();
    public abstract virtual string get_UserName();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_SessionId();
    public abstract virtual string get_SubscriptionId();
    public abstract virtual string get_UserAddress();
    public abstract virtual void set_UserAddress(string value);
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual void set_IsAuthenticated(bool value);
    public abstract virtual bool get_IsClosed();
    public abstract virtual void UpdateChannels(String[] channels);
    public abstract virtual Func`2<IEventSubscription, Task> get_OnUnsubscribeAsync();
    public abstract virtual void set_OnUnsubscribeAsync(Func`2<IEventSubscription, Task> value);
    public abstract virtual Action`1<IEventSubscription> get_OnUnsubscribe();
    public abstract virtual void set_OnUnsubscribe(Action`1<IEventSubscription> value);
    [ObsoleteAttribute("Use UnsubscribeAsync. Will be removed in future.")]
public abstract virtual void Unsubscribe();
    public abstract virtual Task UnsubscribeAsync();
    public abstract virtual void Publish(string selector, string message);
    public abstract virtual Task PublishAsync(string selector, string message, CancellationToken token);
    public abstract virtual void PublishRaw(string frame);
    public abstract virtual Task PublishRawAsync(string frame, CancellationToken token);
    public abstract virtual void Pulse();
    public abstract virtual ConcurrentDictionary`2<string, string> get_Meta();
    public abstract virtual void set_Meta(ConcurrentDictionary`2<string, string> value);
    public abstract virtual Dictionary`2<string, string> get_ServerArgs();
    public abstract virtual void set_ServerArgs(Dictionary`2<string, string> value);
    public abstract virtual Dictionary`2<string, string> get_ConnectArgs();
    public abstract virtual void set_ConnectArgs(Dictionary`2<string, string> value);
    public abstract virtual string get_JsonArgs();
}
public interface ServiceStack.IHasAppHost {
    public IAppHost AppHost { get; }
    public abstract virtual IAppHost get_AppHost();
}
public interface ServiceStack.IHasServiceStackProvider {
    public IServiceStackProvider ServiceStackProvider { get; }
    public abstract virtual IServiceStackProvider get_ServiceStackProvider();
}
[NullableContextAttribute("1")]
public interface ServiceStack.IHasTypeValidators {
    public List`1<ITypeValidator> TypeValidators { get; }
    public abstract virtual List`1<ITypeValidator> get_TypeValidators();
}
public interface ServiceStack.ILogic {
    public IRedisClientsManager RedisManager { get; }
    public IRedisClient Redis { get; }
    public ICacheClient Cache { get; }
    public IMessageFactory MessageFactory { get; }
    public IMessageProducer MessageProducer { get; }
    public abstract virtual IRedisClientsManager get_RedisManager();
    public abstract virtual IRedisClient get_Redis();
    public abstract virtual ICacheClient get_Cache();
    public abstract virtual IMessageFactory get_MessageFactory();
    public abstract virtual IMessageProducer get_MessageProducer();
    public abstract virtual void PublishMessage(T message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.ImageProvider : object {
    [CompilerGeneratedAttribute]
private static ImageProvider <Instance>k__BackingField;
    public static ImageProvider Instance { get; public set; }
    private static ImageProvider();
    [CompilerGeneratedAttribute]
public static ImageProvider get_Instance();
    [CompilerGeneratedAttribute]
public static void set_Instance(ImageProvider value);
    public abstract virtual Stream Resize(Stream stream, int newWidth, int newHeight);
    public virtual Stream Resize(Stream origStream, string savePhotoSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.ImagesHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StaticContent> <ImageContents>k__BackingField;
    [CompilerGeneratedAttribute]
private StaticContent <Fallback>k__BackingField;
    public string Path { get; }
    public Dictionary`2<string, StaticContent> ImageContents { get; }
    public StaticContent Fallback { get; }
    public ImagesHandler(string path, StaticContent fallback);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, StaticContent> get_ImageContents();
    [CompilerGeneratedAttribute]
public StaticContent get_Fallback();
    public virtual string RewriteImageUri(string imageUri);
    public virtual void Save(string path, StaticContent content);
    public virtual StaticContent Get(string path);
    [AsyncStateMachineAttribute("ServiceStack.ImagesHandler/<ProcessRequestAsync>d__13")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public interface ServiceStack.IMarkdownTransformer {
    public abstract virtual string Transform(string markdown);
}
public interface ServiceStack.IMsgPackPlugin {
}
public class ServiceStack.InBetweenCondition : QueryCondition {
    public static InBetweenCondition Instance;
    public string Alias { get; }
    private static InBetweenCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.InCollectionCondition : QueryCondition {
    public static InCollectionCondition Instance;
    public string Alias { get; }
    private static InCollectionCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public interface ServiceStack.INetSerializerPlugin {
}
public class ServiceStack.InfoScripts : ScriptMethods {
    public string env(string variable);
    public string envVariable(string variable);
    public string envExpandVariables(string name);
    public string envStackTrace();
    public int envProcessorCount();
    public int envTickCount();
    public string envServerUserAgent();
    public decimal envServiceStackVersion();
    public bool envIsMono();
    public bool envIsAndroid();
    public bool envIsIOS();
    public string licensedFeatures();
    public string envCurrentDirectory();
    public bool envIsWindows();
    public bool isWin();
    public bool isUnix();
    public bool envIsLinux();
    public bool envIsOSX();
    public IDictionary envVariables();
    public OperatingSystem envOSVersion();
    public string envCommandLine();
    public String[] envCommandLineArgs();
    public string envMachineName();
    public string envSystemDirectory();
    public string envUserDomainName();
    public string envUserName();
    public bool envIs64BitOperatingSystem();
    public bool envIs64BitProcess();
    public Version envVersion();
    public String[] envLogicalDrives();
    public char envPathSeparator();
    public List`1<IPAddress> networkIpv4Addresses();
    public List`1<IPAddress> networkIpv6Addresses();
    private IRequest req(ScriptScopeContext scope);
    public IAuthSession userSession(ScriptScopeContext scope);
    public string userSessionId(ScriptScopeContext scope);
    public string userTempSessionId(ScriptScopeContext scope);
    public string userPermanentSessionId(ScriptScopeContext scope);
    public HashSet`1<string> userSessionOptions(ScriptScopeContext scope);
    public bool userHasRole(ScriptScopeContext scope, string role);
    public bool userHasPermission(ScriptScopeContext scope, string permission);
    public string userId(ScriptScopeContext scope);
    public string userName(ScriptScopeContext scope);
    public string userEmail(ScriptScopeContext scope);
    public string hostServiceName(ScriptScopeContext scope);
    public HostConfig hostConfig(ScriptScopeContext scope);
    public HashSet`1<Type> metaAllDtos();
    public List`1<string> metaAllDtoNames();
    public IEnumerable`1<Operation> metaAllOperations();
    public List`1<string> metaAllOperationNames();
    public List`1<Type> metaAllOperationTypes();
    public Operation metaOperation(string name);
    public List`1<IPlugin> plugins();
}
public class ServiceStack.InProcessServiceGateway : object {
    protected static ILog Log;
    private IRequest req;
    [CompilerGeneratedAttribute]
private static Type[] <ConvertibleTypes>k__BackingField;
    public IRequest Request { get; public set; }
    public static Type[] ConvertibleTypes { get; public set; }
    public InProcessServiceGateway(IRequest req);
    private static InProcessServiceGateway();
    public sealed virtual IRequest get_Request();
    public sealed virtual void set_Request(IRequest value);
    protected string SetVerb(object requestDto);
    protected void ResetVerb(string verb);
    protected virtual void InitRequest(object request);
    protected virtual TResponse ExecSync(object request);
    [AsyncStateMachineAttribute("ServiceStack.InProcessServiceGateway/<ExecAsync>d__10`1")]
protected virtual Task`1<TResponse> ExecAsync(object request);
    protected virtual Task ExecValidatorsAsync(object request);
    public virtual object UnwrapResponse(object response);
    [AsyncStateMachineAttribute("ServiceStack.InProcessServiceGateway/<UnwrapResponseAsync>d__13")]
public virtual Task`1<object> UnwrapResponseAsync(object response);
    [AsyncStateMachineAttribute("ServiceStack.InProcessServiceGateway/<ConvertToResponseAsync>d__14`1")]
public virtual Task`1<TResponse> ConvertToResponseAsync(object response);
    [CompilerGeneratedAttribute]
public static Type[] get_ConvertibleTypes();
    [CompilerGeneratedAttribute]
public static void set_ConvertibleTypes(Type[] value);
    public virtual TResponse ConvertToResponse(object response);
    public virtual TResponse Send(object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.InProcessServiceGateway/<SendAsync>d__21`1")]
public virtual Task`1<TResponse> SendAsync(object requestDto, CancellationToken token);
    protected static Object[] CreateTypedArray(IEnumerable`1<object> requestDtos);
    public virtual List`1<TResponse> SendAll(IEnumerable`1<object> requestDtos);
    [AsyncStateMachineAttribute("ServiceStack.InProcessServiceGateway/<SendAllAsync>d__24`1")]
public virtual Task`1<List`1<TResponse>> SendAllAsync(IEnumerable`1<object> requestDtos, CancellationToken token);
    public virtual void Publish(object request);
    [AsyncStateMachineAttribute("ServiceStack.InProcessServiceGateway/<PublishAsync>d__26")]
public virtual Task PublishAsync(object request, CancellationToken token);
    public virtual void PublishAll(IEnumerable`1<object> requestDtos);
    [AsyncStateMachineAttribute("ServiceStack.InProcessServiceGateway/<PublishAllAsync>d__28")]
public virtual Task PublishAllAsync(IEnumerable`1<object> requestDtos, CancellationToken token);
}
[ExtensionAttribute]
internal static class ServiceStack.Internal.DisposableExtensions : object {
    [ExtensionAttribute]
internal static Task DisposeAsync(IDisposable disposable);
}
internal interface ServiceStack.Internal.IServiceStackAsyncDisposable {
    public abstract virtual Task DisposeAsync();
}
public interface ServiceStack.IPlugin {
    public abstract virtual void Register(IAppHost appHost);
}
[NullableContextAttribute("1")]
public interface ServiceStack.IPostConfigureServices {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual void AfterConfigure(IServiceCollection services);
}
public interface ServiceStack.IPostInitPlugin {
    public abstract virtual void AfterPluginsLoaded(IAppHost appHost);
}
public interface ServiceStack.IPreConfigureAppHost {
    public abstract virtual void PreConfigure(IAppHost appHost);
}
public interface ServiceStack.IPreInitPlugin {
    public abstract virtual void BeforePluginsLoaded(IAppHost appHost);
}
public interface ServiceStack.IProtoBufPlugin {
    public abstract virtual string GetProto(Type type);
}
public interface ServiceStack.IQueryDataSource {
    public abstract virtual IDataQuery From();
    public abstract virtual List`1<Into> LoadSelect(IDataQuery q);
    public abstract virtual int Count(IDataQuery q);
    public abstract virtual object SelectAggregate(IDataQuery q, string name, IEnumerable`1<string> args);
}
public interface ServiceStack.IQueryDataSource`1 {
}
public interface ServiceStack.IQueryMultiple {
}
public interface ServiceStack.IRazorPlugin {
}
public interface ServiceStack.IRepository {
    public IDbConnectionFactory DbFactory { get; }
    public IDbConnection Db { get; }
    public abstract virtual IDbConnectionFactory get_DbFactory();
    public abstract virtual IDbConnection get_Db();
}
public interface ServiceStack.IRequireRegistration {
    public abstract virtual void Register(IAppHost appHost);
}
public interface ServiceStack.IRequiresSoapMessage {
    public Message Message { get; public set; }
    public abstract virtual Message get_Message();
    public abstract virtual void set_Message(Message value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.IsAuthenticatedValidator : TypeValidator {
    [CompilerGeneratedAttribute]
private static string <DefaultErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static IsAuthenticatedValidator <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    public static string DefaultErrorMessage { get; public set; }
    public static IsAuthenticatedValidator Instance { get; }
    public string Provider { get; }
    public IsAuthenticatedValidator(string provider);
    private static IsAuthenticatedValidator();
    [CompilerGeneratedAttribute]
public static string get_DefaultErrorMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultErrorMessage(string value);
    [CompilerGeneratedAttribute]
public static IsAuthenticatedValidator get_Instance();
    [CompilerGeneratedAttribute]
public string get_Provider();
    [AsyncStateMachineAttribute("ServiceStack.IsAuthenticatedValidator/<IsValidAsync>d__12")]
public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
}
public interface ServiceStack.IServerEvents {
    public abstract virtual void NotifyAll(string selector, object message);
    public abstract virtual Task NotifyAllAsync(string selector, object message, CancellationToken token);
    public abstract virtual Task NotifyAllJsonAsync(string selector, string json, CancellationToken token);
    public abstract virtual void NotifyChannel(string channel, string selector, object message);
    public abstract virtual Task NotifyChannelAsync(string channel, string selector, object message, CancellationToken token);
    public abstract virtual Task NotifyChannelJsonAsync(string channel, string selector, string json, CancellationToken token);
    public abstract virtual void NotifySubscription(string subscriptionId, string selector, object message, string channel);
    public abstract virtual Task NotifySubscriptionAsync(string subscriptionId, string selector, object message, string channel, CancellationToken token);
    public abstract virtual Task NotifySubscriptionJsonAsync(string subscriptionId, string selector, string json, string channel, CancellationToken token);
    public abstract virtual void NotifyUserId(string userId, string selector, object message, string channel);
    public abstract virtual Task NotifyUserIdAsync(string userId, string selector, object message, string channel, CancellationToken token);
    public abstract virtual Task NotifyUserIdJsonAsync(string userId, string selector, string json, string channel, CancellationToken token);
    public abstract virtual void NotifyUserName(string userName, string selector, object message, string channel);
    public abstract virtual Task NotifyUserNameAsync(string userName, string selector, object message, string channel, CancellationToken token);
    public abstract virtual Task NotifyUserNameJsonAsync(string userName, string selector, string json, string channel, CancellationToken token);
    public abstract virtual void NotifySession(string sessionId, string selector, object message, string channel);
    public abstract virtual Task NotifySessionAsync(string sessionId, string selector, object message, string channel, CancellationToken token);
    public abstract virtual Task NotifySessionJsonAsync(string sessionId, string selector, string json, string channel, CancellationToken token);
    public abstract virtual SubscriptionInfo GetSubscriptionInfo(string id);
    public abstract virtual List`1<SubscriptionInfo> GetSubscriptionInfosByUserId(string userId);
    public abstract virtual List`1<SubscriptionInfo> GetAllSubscriptionInfos();
    public abstract virtual Task RegisterAsync(IEventSubscription subscription, Dictionary`2<string, string> connectArgs, CancellationToken token);
    public abstract virtual Task UnRegisterAsync(string subscriptionId, CancellationToken token);
    public abstract virtual long GetNextSequence(string sequenceId);
    public abstract virtual int RemoveExpiredSubscriptions();
    public abstract virtual Task`1<int> RemoveExpiredSubscriptionsAsync(CancellationToken token);
    public abstract virtual void SubscribeToChannels(string subscriptionId, String[] channels);
    public abstract virtual Task SubscribeToChannelsAsync(string subscriptionId, String[] channels, CancellationToken token);
    public abstract virtual void UnsubscribeFromChannels(string subscriptionId, String[] channels);
    public abstract virtual Task UnsubscribeFromChannelsAsync(string subscriptionId, String[] channels, CancellationToken token);
    public abstract virtual void QueueAsyncTask(Func`1<Task> task);
    public abstract virtual MemoryServerEvents GetMemoryServerEvents();
    public abstract virtual List`1<Dictionary`2<string, string>> GetSubscriptionsDetails(String[] channels);
    public abstract virtual List`1<Dictionary`2<string, string>> GetAllSubscriptionsDetails();
    public abstract virtual Task`1<bool> PulseAsync(string subscriptionId, CancellationToken token);
    public abstract virtual void Reset();
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual Task StopAsync();
    public abstract virtual Dictionary`2<string, string> GetStats();
}
public interface ServiceStack.IServiceBase {
    public abstract virtual IResolver GetResolver();
    public abstract virtual T ResolveService();
}
public interface ServiceStack.IServiceStackProvider {
    public IAppSettings AppSettings { get; }
    public IHttpRequest Request { get; }
    public IHttpResponse Response { get; }
    public ICacheClient Cache { get; }
    public ICacheClientAsync CacheAsync { get; }
    public IDbConnection Db { get; }
    public IRedisClient Redis { get; }
    public IMessageProducer MessageProducer { get; }
    public IAuthRepository AuthRepository { get; }
    public IAuthRepositoryAsync AuthRepositoryAsync { get; }
    public ISessionFactory SessionFactory { get; }
    public ISession SessionBag { get; }
    public ISessionAsync SessionBagAsync { get; }
    public bool IsAuthenticated { get; }
    public IServiceGateway Gateway { get; }
    public RpcGateway RpcGateway { get; }
    public abstract virtual void SetResolver(IResolver resolver);
    public abstract virtual IResolver GetResolver();
    public abstract virtual IAppSettings get_AppSettings();
    public abstract virtual IHttpRequest get_Request();
    public abstract virtual IHttpResponse get_Response();
    public abstract virtual ICacheClient get_Cache();
    public abstract virtual ICacheClientAsync get_CacheAsync();
    public abstract virtual IDbConnection get_Db();
    public abstract virtual IRedisClient get_Redis();
    public abstract virtual ValueTask`1<IRedisClientAsync> GetRedisAsync();
    public abstract virtual IMessageProducer get_MessageProducer();
    public abstract virtual IAuthRepository get_AuthRepository();
    public abstract virtual IAuthRepositoryAsync get_AuthRepositoryAsync();
    public abstract virtual ISessionFactory get_SessionFactory();
    public abstract virtual ISession get_SessionBag();
    public abstract virtual ISessionAsync get_SessionBagAsync();
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual IAuthSession GetSession(bool reload);
    public abstract virtual Task`1<IAuthSession> GetSessionAsync(bool reload, CancellationToken token);
    public abstract virtual TUserSession SessionAs();
    public abstract virtual Task`1<TUserSession> SessionAsAsync(CancellationToken token);
    public abstract virtual void ClearSession();
    public abstract virtual Task ClearSessionAsync(CancellationToken token);
    public abstract virtual T TryResolve();
    public abstract virtual T ResolveService();
    public abstract virtual IServiceGateway get_Gateway();
    public abstract virtual RpcGateway get_RpcGateway();
    public abstract virtual object Execute(IRequest request);
    [ObsoleteAttribute("Use Gateway")]
public abstract virtual object Execute(object requestDto);
    [ObsoleteAttribute("Use Gateway")]
public abstract virtual TResponse Execute(IReturn`1<TResponse> requestDto);
    [ObsoleteAttribute("Use Gateway")]
public abstract virtual void PublishMessage(T message);
}
public interface ServiceStack.ITypedQueryData {
    public abstract virtual IDataQuery CreateQuery(IQueryDataSource db);
    public abstract virtual IDataQuery AddToQuery(IDataQuery q, IQueryData request, Dictionary`2<string, string> dynamicParams, IAutoQueryDataOptions options);
    public abstract virtual QueryResponse`1<Into> Execute(IQueryDataSource db, IDataQuery query);
}
[NullableContextAttribute("1")]
public interface ServiceStack.ITypeValidator {
    public string ErrorCode { get; public set; }
    public string Message { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public abstract virtual string get_ErrorCode();
    public abstract virtual void set_ErrorCode(string value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual Nullable`1<int> get_StatusCode();
    public abstract virtual void set_StatusCode(Nullable`1<int> value);
    public abstract virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
    public abstract virtual Task ThrowIfNotValidAsync(object dto, IRequest request);
}
public interface ServiceStack.IWirePlugin {
}
public interface ServiceStack.IWriteEvent {
    public abstract virtual void WriteEvent(string msg);
}
public interface ServiceStack.IWriteEventAsync {
    public abstract virtual Task WriteEventAsync(string msg, CancellationToken token);
}
public class ServiceStack.JsonOnly : RequestFilterAttribute {
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
public class ServiceStack.JsvOnly : RequestFilterAttribute {
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
public static class ServiceStack.Keywords : object {
    public static string Callback;
    public static string Format;
    public static string AuthSecret;
    public static string RequestInfo;
    public static string Debug;
    public static string Version;
    public static string VersionAbbr;
    public static string VersionFxAbbr;
    public static string Ignore;
    public static string IgnorePlaceHolder;
    public static string Bare;
    public static string JsConfig;
    public static string SessionId;
    public static string PermanentSessionId;
    public static string SessionOptionsKey;
    public static string TokenCookie;
    public static string RefreshTokenCookie;
    public static string XCookies;
    public static string ApiKeyParam;
    public static string Continue;
    public static string Redirect;
    public static string NoRedirect;
    public static string ReturnUrl;
    public static string AutoBatchIndex;
    public static string SoapMessage;
    public static string WithoutOptions;
    public static string SessionState;
    public static string OAuthSuccess;
    public static string OAuthFailed;
    public static string Route;
    public static string InvokeVerb;
    public static string DbInfo;
    public static string CacheInfo;
    public static string ApiKey;
    public static string Session;
    public static string HasPreAuthenticated;
    public static string HasGlobalHeaders;
    public static string HasLogged;
    public static string DidAuthenticate;
    public static string IgnoreEvent;
    public static string EventModelId;
    public static string IRequest;
    public static string Attributes;
    public static string Code;
    public static string State;
    public static string View;
    public static string ErrorView;
    public static string Template;
    public static string Error;
    public static string ErrorStatus;
    public static string Authorization;
    public static string Model;
    public static string HttpStatus;
    public static string GrpcResponseStatus;
    public static string Dynamic;
    public static string Id;
    public static string Result;
    public static string RowVersion;
    public static string Reset;
    public static string reset;
    public static string Count;
    public static string FilePath;
    public static string RequestDuration;
    public static string RequestActivity;
    public static string TraceId;
    public static string FileName;
    public static string ClaimsPrincipal;
    public static string Allows;
    public static string Embed;
    public static string AccessTokenAuth;
    public static string ResponseStatus;
    private static Keywords();
}
public class ServiceStack.LessCondition : QueryCondition {
    public static LessCondition Instance;
    public string Alias { get; }
    private static LessCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.LessEqualCondition : QueryCondition {
    public static LessEqualCondition Instance;
    public string Alias { get; }
    private static LessEqualCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.LispReplTcpServer : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    private static ILog Log;
    private int port;
    private IPAddress localIp;
    private TcpListener listener;
    [CompilerGeneratedAttribute]
private ScriptContext <ScriptContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireAuthSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ScriptMethods> <ScriptMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ScriptBlock> <ScriptBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ScanTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <ScanAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <ScriptAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ScriptTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ScriptNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowScriptingOfAllTypes>k__BackingField;
    private Thread bgThread;
    private object olock;
    private static int serverStarts;
    private static int connections;
    public string Id { get; public set; }
    public ScriptContext ScriptContext { get; public set; }
    public bool RequireAuthSecret { get; public set; }
    public List`1<ScriptMethods> ScriptMethods { get; public set; }
    public List`1<ScriptBlock> ScriptBlocks { get; public set; }
    public List`1<Type> ScanTypes { get; public set; }
    public List`1<Assembly> ScanAssemblies { get; public set; }
    public List`1<Assembly> ScriptAssemblies { get; public set; }
    public List`1<Type> ScriptTypes { get; public set; }
    public List`1<string> ScriptNamespaces { get; public set; }
    public Nullable`1<bool> AllowScriptingOfAllTypes { get; public set; }
    public LispReplTcpServer(int port);
    public LispReplTcpServer(string localIp, int port);
    public LispReplTcpServer(IPAddress localIp, int port);
    private static LispReplTcpServer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public ScriptContext get_ScriptContext();
    [CompilerGeneratedAttribute]
public void set_ScriptContext(ScriptContext value);
    [CompilerGeneratedAttribute]
public bool get_RequireAuthSecret();
    [CompilerGeneratedAttribute]
public void set_RequireAuthSecret(bool value);
    [CompilerGeneratedAttribute]
public List`1<ScriptMethods> get_ScriptMethods();
    [CompilerGeneratedAttribute]
public void set_ScriptMethods(List`1<ScriptMethods> value);
    [CompilerGeneratedAttribute]
public List`1<ScriptBlock> get_ScriptBlocks();
    [CompilerGeneratedAttribute]
public void set_ScriptBlocks(List`1<ScriptBlock> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ScanTypes();
    [CompilerGeneratedAttribute]
public void set_ScanTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<Assembly> get_ScanAssemblies();
    [CompilerGeneratedAttribute]
public void set_ScanAssemblies(List`1<Assembly> value);
    [CompilerGeneratedAttribute]
public List`1<Assembly> get_ScriptAssemblies();
    [CompilerGeneratedAttribute]
public void set_ScriptAssemblies(List`1<Assembly> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ScriptTypes();
    [CompilerGeneratedAttribute]
public void set_ScriptTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ScriptNamespaces();
    [CompilerGeneratedAttribute]
public void set_ScriptNamespaces(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowScriptingOfAllTypes();
    [CompilerGeneratedAttribute]
public void set_AllowScriptingOfAllTypes(Nullable`1<bool> value);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void AfterInit(IAppHost appHost);
    public void Start();
    public void StartListening();
    public void Stop();
    private void KillBgThreadIfExists();
    public sealed virtual void Dispose();
    private void HandleConnection(TcpClient client, int id, string remoteIp);
    private Dictionary`2<string, object> CreateBasicRequest(string remoteUrl);
    [CompilerGeneratedAttribute]
internal static void <HandleConnection>g__write|64_0(string msg, <>c__DisplayClass64_0& );
}
public static class ServiceStack.LocalizedStrings : object {
    public static string Login;
    public static string Auth;
    public static string Authenticate;
    public static string Redirect;
    public static string AssignRoles;
    public static string UnassignRoles;
    public static string NotModified;
}
[ExtensionAttribute]
public static class ServiceStack.LogExtensions : object {
    [ExtensionAttribute]
public static void ErrorStrict(ILog log, string message, Exception ex);
    [ExtensionAttribute]
public static bool IsNullOrNullLogFactory(ILogFactory factory);
}
public abstract class ServiceStack.LogicBase : RepositoryBase {
    [CompilerGeneratedAttribute]
private IRedisClientsManager <RedisManager>k__BackingField;
    private IRedisClient redis;
    private ICacheClient cache;
    [CompilerGeneratedAttribute]
private IMessageFactory <MessageFactory>k__BackingField;
    private IMessageProducer messageProducer;
    public IRedisClientsManager RedisManager { get; public set; }
    public IRedisClient Redis { get; }
    public ICacheClient Cache { get; public set; }
    public IMessageFactory MessageFactory { get; public set; }
    public IMessageProducer MessageProducer { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IRedisClientsManager get_RedisManager();
    [CompilerGeneratedAttribute]
public virtual void set_RedisManager(IRedisClientsManager value);
    public virtual IRedisClient get_Redis();
    public virtual ICacheClient get_Cache();
    public virtual void set_Cache(ICacheClient value);
    [CompilerGeneratedAttribute]
public virtual IMessageFactory get_MessageFactory();
    [CompilerGeneratedAttribute]
public virtual void set_MessageFactory(IMessageFactory value);
    public virtual IMessageProducer get_MessageProducer();
    public virtual void set_MessageProducer(IMessageProducer value);
    public virtual void PublishMessage(T message);
    public virtual void Dispose();
}
public class ServiceStack.ManageApiKeysAsyncWrapper : object {
    [CompilerGeneratedAttribute]
private IManageApiKeys <manageApiKeys>P;
    public ManageApiKeysAsyncWrapper(IManageApiKeys manageApiKeys);
    public sealed virtual void InitApiKeySchema();
    public sealed virtual Task`1<bool> ApiKeyExistsAsync(string apiKey, CancellationToken token);
    public sealed virtual Task`1<ApiKey> GetApiKeyAsync(string apiKey, CancellationToken token);
    public sealed virtual Task`1<List`1<ApiKey>> GetUserApiKeysAsync(string userId, CancellationToken token);
    public sealed virtual Task StoreAllAsync(IEnumerable`1<ApiKey> apiKeys, CancellationToken token);
}
public static class ServiceStack.MarkdownConfig : object {
    [CompilerGeneratedAttribute]
private static IMarkdownTransformer <Transformer>k__BackingField;
    public static IMarkdownTransformer Transformer { get; public set; }
    private static MarkdownConfig();
    [CompilerGeneratedAttribute]
public static IMarkdownTransformer get_Transformer();
    [CompilerGeneratedAttribute]
public static void set_Transformer(IMarkdownTransformer value);
    public static string Transform(string html);
}
public class ServiceStack.MarkdownPageFormat : PageFormat {
    [AsyncStateMachineAttribute("ServiceStack.MarkdownPageFormat/<TransformToHtml>d__1")]
public static Task`1<Stream> TransformToHtml(Stream markdownStream);
}
public class ServiceStack.MarkdownScriptBlock : ScriptBlock {
    public string Name { get; }
    public ScriptLanguage Body { get; }
    public virtual string get_Name();
    public virtual ScriptLanguage get_Body();
    [AsyncStateMachineAttribute("ServiceStack.MarkdownScriptBlock/<WriteAsync>d__4")]
public virtual Task WriteAsync(ScriptScopeContext scope, PageBlockFragment block, CancellationToken token);
    private static void Capture(ScriptScopeContext scope, PageBlockFragment block, PageStringFragment strFragment);
}
public class ServiceStack.MarkdownScriptMethods : ScriptMethods {
    public IRawString markdown(string markdown);
}
public class ServiceStack.MarkdownScriptPlugin : object {
    [CompilerGeneratedAttribute]
private bool <RegisterPageFormat>k__BackingField;
    public bool RegisterPageFormat { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RegisterPageFormat();
    [CompilerGeneratedAttribute]
public void set_RegisterPageFormat(bool value);
    public sealed virtual void Register(ScriptContext context);
}
[ObsoleteAttribute("Use MarkdownScriptMethods")]
public class ServiceStack.MarkdownTemplateFilter : MarkdownScriptMethods {
}
[ObsoleteAttribute("Use MarkdownScriptPlugin")]
public class ServiceStack.MarkdownTemplatePlugin : MarkdownScriptPlugin {
}
public static class ServiceStack.MemoryDataSource : object {
    public static MemoryDataSource`1<T> Create(ICollection`1<T> data, IQueryData dto, IRequest req);
}
public class ServiceStack.MemoryDataSource`1 : QueryDataSource`1<T> {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Data>k__BackingField;
    public IEnumerable`1<T> Data { get; }
    public MemoryDataSource`1(QueryDataContext context, IEnumerable`1<T> data);
    public MemoryDataSource`1(IEnumerable`1<T> data, IQueryData dto, IRequest req);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Data();
    public virtual IEnumerable`1<T> GetDataSource(IDataQuery q);
    public static MemoryDataSource`1<TItem> Create(IEnumerable`1<TItem> data, IQueryData dto, IRequest req);
}
public class ServiceStack.MemoryServerEvents : object {
    private static ILog Log;
    public static bool FlushNopOnSubscription;
    [CompilerGeneratedAttribute]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HouseKeepingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnSubscribeAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnUnsubscribeAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnUpdateAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnRemoveSubscriptionAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <NotifyJoinAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <NotifyLeaveAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <NotifyUpdateAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <NotifyHeartbeatAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <Serialize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotifyChannelOfSubscriptions>k__BackingField;
    public ConcurrentDictionary`2<string, IEventSubscription> Subscriptions;
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> ChannelSubscriptions;
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> UserIdSubscriptions;
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> UserNameSubscriptions;
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> SessionSubscriptions;
    [CompilerGeneratedAttribute]
private Action`2<IEventSubscription, Exception> <OnError>k__BackingField;
    private bool isDisposed;
    private ServerEventsFeature feature;
    private long TotalConnections;
    private long TotalUnsubscriptions;
    private long HungConnectionsDetected;
    private long HungConnectionsReleased;
    private ConcurrentBag`1<IEventSubscription> pendingSubscriptionUpdates;
    private ConcurrentBag`1<IEventSubscription> pendingUnSubscriptions;
    private ConcurrentBag`1<IEventSubscription> expiredSubs;
    private ConcurrentBag`1<Func`1<Task>> pendingAsyncTasks;
    private ConcurrentBag`1<IEventSubscription> hungConnections;
    private long taskCounter;
    private ConcurrentDictionary`2<string, long> SequenceCounters;
    private long lastCleanAtTicks;
    public TimeSpan IdleTimeout { get; public set; }
    public TimeSpan HouseKeepingInterval { get; public set; }
    public Func`2<IEventSubscription, Task> OnSubscribeAsync { get; public set; }
    public Func`2<IEventSubscription, Task> OnUnsubscribeAsync { get; public set; }
    public Func`2<IEventSubscription, Task> OnUpdateAsync { get; public set; }
    public Func`2<IEventSubscription, Task> OnRemoveSubscriptionAsync { get; public set; }
    public Func`2<IEventSubscription, Task> NotifyJoinAsync { get; public set; }
    public Func`2<IEventSubscription, Task> NotifyLeaveAsync { get; public set; }
    public Func`2<IEventSubscription, Task> NotifyUpdateAsync { get; public set; }
    public Func`2<IEventSubscription, Task> NotifyHeartbeatAsync { get; public set; }
    public Func`2<object, string> Serialize { get; public set; }
    public bool NotifyChannelOfSubscriptions { get; public set; }
    public Action`2<IEventSubscription, Exception> OnError { get; public set; }
    private DateTime LastCleanAt { get; private set; }
    private static MemoryServerEvents();
    [CompilerGeneratedAttribute]
public TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HouseKeepingInterval();
    [CompilerGeneratedAttribute]
public void set_HouseKeepingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_OnSubscribeAsync();
    [CompilerGeneratedAttribute]
public void set_OnSubscribeAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_OnUnsubscribeAsync();
    [CompilerGeneratedAttribute]
public void set_OnUnsubscribeAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_OnUpdateAsync();
    [CompilerGeneratedAttribute]
public void set_OnUpdateAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_OnRemoveSubscriptionAsync();
    [CompilerGeneratedAttribute]
public void set_OnRemoveSubscriptionAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_NotifyJoinAsync();
    [CompilerGeneratedAttribute]
public void set_NotifyJoinAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_NotifyLeaveAsync();
    [CompilerGeneratedAttribute]
public void set_NotifyLeaveAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_NotifyUpdateAsync();
    [CompilerGeneratedAttribute]
public void set_NotifyUpdateAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_NotifyHeartbeatAsync();
    [CompilerGeneratedAttribute]
public void set_NotifyHeartbeatAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_Serialize();
    [CompilerGeneratedAttribute]
public void set_Serialize(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
public bool get_NotifyChannelOfSubscriptions();
    [CompilerGeneratedAttribute]
public void set_NotifyChannelOfSubscriptions(bool value);
    [CompilerGeneratedAttribute]
public Action`2<IEventSubscription, Exception> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`2<IEventSubscription, Exception> value);
    public sealed virtual void Reset();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<StopAsync>d__65")]
public sealed virtual Task StopAsync();
    public sealed virtual void NotifyAll(string selector, object message);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<NotifyAllAsync>d__67")]
public sealed virtual Task NotifyAllAsync(string selector, object message, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<NotifyAllJsonAsync>d__68")]
public sealed virtual Task NotifyAllJsonAsync(string selector, string json, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<NotifyChannelsAsync>d__69")]
public Task NotifyChannelsAsync(String[] channels, string selector, string body, CancellationToken token);
    public sealed virtual void NotifySubscription(string subscriptionId, string selector, object message, string channel);
    public sealed virtual Task NotifySubscriptionAsync(string subscriptionId, string selector, object message, string channel, CancellationToken token);
    public sealed virtual Task NotifySubscriptionJsonAsync(string subscriptionId, string selector, string json, string channel, CancellationToken token);
    public sealed virtual void NotifyChannel(string channel, string selector, object message);
    public sealed virtual Task NotifyChannelAsync(string channel, string selector, object message, CancellationToken token);
    public sealed virtual Task NotifyChannelJsonAsync(string channel, string selector, string json, CancellationToken token);
    public sealed virtual void NotifyUserId(string userId, string selector, object message, string channel);
    public sealed virtual Task NotifyUserIdAsync(string userId, string selector, object message, string channel, CancellationToken token);
    public sealed virtual Task NotifyUserIdJsonAsync(string userId, string selector, string json, string channel, CancellationToken token);
    public sealed virtual void NotifyUserName(string userName, string selector, object message, string channel);
    public sealed virtual Task NotifyUserNameAsync(string userName, string selector, object message, string channel, CancellationToken token);
    public sealed virtual Task NotifyUserNameJsonAsync(string userName, string selector, string json, string channel, CancellationToken token);
    public sealed virtual void NotifySession(string sessionId, string selector, object message, string channel);
    public sealed virtual Task NotifySessionAsync(string sessionId, string selector, object message, string channel, CancellationToken token);
    public sealed virtual Task NotifySessionJsonAsync(string sessionId, string selector, string json, string channel, CancellationToken token);
    public sealed virtual Dictionary`2<string, string> GetStats();
    public void RegisterHungConnection(IEventSubscription sub);
    public sealed virtual void QueueAsyncTask(Func`1<Task> task);
    public sealed virtual MemoryServerEvents GetMemoryServerEvents();
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<DoAsyncTasks>d__99")]
private Task DoAsyncTasks(CancellationToken token);
    protected void NotifyRaw(ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> map, string key, string selector, string body, string channel);
    protected void Notify(ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> map, string key, string selector, object message, string channel);
    protected void Notify(ConcurrentDictionary`2<string, IEventSubscription> map, string key, string selector, object message, string channel);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<NotifyRawAsync>d__103")]
protected Task NotifyRawAsync(ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> map, string key, string selector, string body, string channel, CancellationToken token);
    protected Task NotifyAsync(ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> map, string key, string selector, object message, string channel, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<NotifyRawAsync>d__105")]
protected Task NotifyRawAsync(ConcurrentDictionary`2<string, IEventSubscription> map, string key, string selector, string body, string channel, CancellationToken token);
    protected Task NotifyAsync(ConcurrentDictionary`2<string, IEventSubscription> map, string key, string selector, object message, string channel, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<FlushNopAsync>d__107")]
protected Task FlushNopAsync(ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> map, string key, string channel, CancellationToken token);
    public bool Pulse(string id);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<PulseAsync>d__109")]
public sealed virtual Task`1<bool> PulseAsync(string id, CancellationToken token);
    public IEventSubscription GetSubscription(string id);
    public sealed virtual SubscriptionInfo GetSubscriptionInfo(string id);
    public sealed virtual List`1<SubscriptionInfo> GetSubscriptionInfosByUserId(string userId);
    public sealed virtual long GetNextSequence(string sequenceId);
    private DateTime get_LastCleanAt();
    private void set_LastCleanAt(DateTime value);
    public sealed virtual int RemoveExpiredSubscriptions();
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<RemoveExpiredSubscriptionsAsync>d__120")]
public sealed virtual Task`1<int> RemoveExpiredSubscriptionsAsync(CancellationToken token);
    public sealed virtual void SubscribeToChannels(string subscriptionId, String[] channels);
    public sealed virtual Task SubscribeToChannelsAsync(string subscriptionId, String[] channels, CancellationToken token);
    public sealed virtual void UnsubscribeFromChannels(string subscriptionId, String[] channels);
    public sealed virtual Task UnsubscribeFromChannelsAsync(string subscriptionId, String[] channels, CancellationToken token);
    public sealed virtual List`1<Dictionary`2<string, string>> GetSubscriptionsDetails(String[] channels);
    public sealed virtual List`1<Dictionary`2<string, string>> GetAllSubscriptionsDetails();
    public sealed virtual List`1<SubscriptionInfo> GetAllSubscriptionInfos();
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<RegisterAsync>d__128")]
public sealed virtual Task RegisterAsync(IEventSubscription subscription, Dictionary`2<string, string> connectArgs, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<FlushNopToChannelsAsync>d__129")]
public Task FlushNopToChannelsAsync(String[] channels, CancellationToken token);
    private void RegisterSubscription(IEventSubscription subscription, string key, ConcurrentDictionary`2<string, IEventSubscription> map);
    private void RegisterSubscription(IEventSubscription subscription, string key, ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> map);
    public void UnRegister(string subscriptionId, CancellationToken token);
    private void HandleUnsubscription(IEventSubscription subscription);
    public sealed virtual Task UnRegisterAsync(string subscriptionId, CancellationToken token);
    private Task HandleUnsubscriptionAsync(IEventSubscription subscription);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<HandleUnsubscriptionAsync>d__136")]
private Task HandleUnsubscriptionAsync(IEventSubscription subscription, CancellationToken token);
    private void UnRegisterSubscription(IEventSubscription subscription, string key, ConcurrentDictionary`2<string, ConcurrentDictionary`2<IEventSubscription, bool>> map);
    private void UnRegisterSubscription(IEventSubscription subscription, string key, ConcurrentDictionary`2<string, IEventSubscription> map);
    [AsyncStateMachineAttribute("ServiceStack.MemoryServerEvents/<DisposeAsync>d__139")]
public Task DisposeAsync();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Task <.ctor>b__61_0(IEventSubscription s);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__61_1(IEventSubscription s);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__61_2(IEventSubscription s);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__61_3(IEventSubscription s);
}
public class ServiceStack.MemoryValidationSource : object {
    public static ConcurrentDictionary`2<string, KeyValuePair`2[]> TypeRulesMap;
    private object semaphore;
    internal static int IdCounter;
    private static MemoryValidationSource();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, IValidateRule>> GetValidationRules(Type type);
    public sealed virtual List`1<ValidationRule> GetAllValidateRules();
    public sealed virtual Task`1<List`1<ValidationRule>> GetAllValidateRulesAsync();
    public sealed virtual Task`1<List`1<ValidationRule>> GetAllValidateRulesAsync(string typeName);
    public sealed virtual void SaveValidationRules(List`1<ValidationRule> validateRules);
    public sealed virtual Task SaveValidationRulesAsync(List`1<ValidationRule> validateRules);
    public sealed virtual Task`1<List`1<ValidationRule>> GetValidateRulesByIdsAsync(Int32[] ids);
    public sealed virtual Task DeleteValidationRulesAsync(Int32[] ids);
    public sealed virtual Task ClearCacheAsync();
    public sealed virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Messaging.BackgroundMqClient : object {
    [CompilerGeneratedAttribute]
private BackgroundMqService <mqService>P;
    private static ILog Log;
    public BackgroundMqClient(BackgroundMqService mqService);
    private static BackgroundMqClient();
    public sealed virtual void Publish(T messageBody);
    public sealed virtual void Publish(IMessage`1<T> message);
    public sealed virtual void Publish(string queueName, IMessage message);
    public sealed virtual void Notify(string queueName, IMessage message);
    public sealed virtual IMessage`1<T> Get(string queueName, Nullable`1<TimeSpan> timeout);
    public sealed virtual IMessage`1<T> GetAsync(string queueName);
    public sealed virtual void Ack(IMessage message);
    public sealed virtual void Nak(IMessage message, bool requeue, Exception exception);
    public sealed virtual IMessage`1<T> CreateMessage(object mqResponse);
    public sealed virtual string GetTempQueueName();
    public sealed virtual void SendOneWay(object requestDto);
    public sealed virtual void SendOneWay(string queueName, object requestDto);
    public sealed virtual void SendAllOneWay(IEnumerable`1<object> requests);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Messaging.BackgroundMqCollection`1 : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <ThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutQMaxSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <QueueType>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundMqClient <MqClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageHandlerFactory <HandlerFactory>k__BackingField;
    private Dictionary`2<string, BlockingCollection`1<IMessage>> queueMap;
    private long totalMessagesAdded;
    private long totalMessagesTaken;
    private long totalOutQMessagesAdded;
    private long totalDlQMessagesAdded;
    [CompilerGeneratedAttribute]
private String[] <QueueNames>k__BackingField;
    public int ThreadCount { get; }
    public int OutQMaxSize { get; public set; }
    public Type QueueType { get; }
    public BackgroundMqClient MqClient { get; }
    public IMessageHandlerFactory HandlerFactory { get; }
    public String[] QueueNames { get; }
    public BackgroundMqCollection`1(BackgroundMqClient mqClient, IMessageHandlerFactory handlerFactory, int threadCount, int outQMaxSize);
    private static BackgroundMqCollection`1();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ThreadCount();
    [CompilerGeneratedAttribute]
public int get_OutQMaxSize();
    [CompilerGeneratedAttribute]
public void set_OutQMaxSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_QueueType();
    [CompilerGeneratedAttribute]
public BackgroundMqClient get_MqClient();
    [CompilerGeneratedAttribute]
public IMessageHandlerFactory get_HandlerFactory();
    [CompilerGeneratedAttribute]
public String[] get_QueueNames();
    public sealed virtual void Add(string queueName, IMessage message);
    public sealed virtual bool TryTake(string queueName, IMessage& message);
    public sealed virtual bool TryTake(string queueName, IMessage& message, TimeSpan timeout);
    public sealed virtual void Clear(string queueName);
    public sealed virtual IMqWorker CreateWorker(string mqName);
    public sealed virtual string GetDescription();
    public sealed virtual Dictionary`2<string, long> GetDescriptionMap();
    public List`1<IMessage> GetQueueMessages(string queueName);
    public sealed virtual void Dispose();
}
public class ServiceStack.Messaging.BackgroundMqMessageFactory : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private BackgroundMqClient <mqClient>P;
    [NullableContextAttribute("1")]
public BackgroundMqMessageFactory(BackgroundMqClient mqClient);
    [NullableContextAttribute("1")]
public sealed virtual IMessageQueueClient CreateMessageQueueClient();
    [NullableContextAttribute("1")]
public sealed virtual IMessageProducer CreateMessageProducer();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Messaging.BackgroundMqService : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IMessage, IMessage> <RequestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <ResponseFilter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <PriorityQueuesWhitelist>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <PublishResponsesWhitelist>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <PublishToOutqWhitelist>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`2<string, IMessage>> <OutHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutQMaxSize>k__BackingField;
    private BackgroundMqClient mqClient;
    [CompilerGeneratedAttribute]
private IMessageFactory <MessageFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <RegisteredTypes>k__BackingField;
    private Dictionary`2<Type, IMqCollection> collectionsMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IMqWorker[] workers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private BlockingCollection`1<IMessage> unknownQueues;
    private static string MessageQueueKey;
    private bool isDisposed;
    public int RetryCount { get; public set; }
    public Func`2<IMessage, IMessage> RequestFilter { get; public set; }
    public Func`2<object, object> ResponseFilter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] PriorityQueuesWhitelist { get; public set; }
    unknown bool EnablePriorityQueues {public set; }
    unknown bool DisablePriorityQueues {public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] PublishResponsesWhitelist { get; public set; }
    unknown bool DisablePublishingResponses {public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] PublishToOutqWhitelist { get; public set; }
    unknown bool DisablePublishingToOutq {public set; }
    public List`1<Action`2<string, IMessage>> OutHandlers { get; }
    public int OutQMaxSize { get; public set; }
    public IMessageFactory MessageFactory { get; }
    public List`1<Type> RegisteredTypes { get; }
    private static BackgroundMqService();
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(int value);
    [CompilerGeneratedAttribute]
public Func`2<IMessage, IMessage> get_RequestFilter();
    [CompilerGeneratedAttribute]
public void set_RequestFilter(Func`2<IMessage, IMessage> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_ResponseFilter();
    [CompilerGeneratedAttribute]
public void set_ResponseFilter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public String[] get_PriorityQueuesWhitelist();
    [CompilerGeneratedAttribute]
public void set_PriorityQueuesWhitelist(String[] value);
    public void set_EnablePriorityQueues(bool value);
    public void set_DisablePriorityQueues(bool value);
    [CompilerGeneratedAttribute]
public String[] get_PublishResponsesWhitelist();
    [CompilerGeneratedAttribute]
public void set_PublishResponsesWhitelist(String[] value);
    public void set_DisablePublishingResponses(bool value);
    [CompilerGeneratedAttribute]
public String[] get_PublishToOutqWhitelist();
    [CompilerGeneratedAttribute]
public void set_PublishToOutqWhitelist(String[] value);
    public void set_DisablePublishingToOutq(bool value);
    [CompilerGeneratedAttribute]
public List`1<Action`2<string, IMessage>> get_OutHandlers();
    [CompilerGeneratedAttribute]
public int get_OutQMaxSize();
    [CompilerGeneratedAttribute]
public void set_OutQMaxSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IMessageFactory get_MessageFactory();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Type> get_RegisteredTypes();
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn);
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, int noOfThreads);
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx);
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx, int noOfThreads);
    protected IMessageHandlerFactory CreateMessageHandlerFactory(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx);
    public sealed virtual IMessageHandlerStats GetStats();
    public IMqWorker[] GetWorkers(string queueName);
    public IMqWorker[] GetAllWorkers();
    public sealed virtual string GetStatus();
    public sealed virtual string GetStatsDescription();
    public IMqCollection GetCollection(Type type);
    private static Type GetMessageType(IMessage message);
    public void Publish(string queueName, IMessage message);
    public void Notify(string queueName, IMessage message);
    public IMessage`1<T> Get(string queueName, Nullable`1<TimeSpan> timeout);
    public IMessage`1<T> TryGet(string queueName);
    public sealed virtual void Start();
    public sealed virtual void Stop();
    private void AssertNotDisposed();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Messaging.BackgroundMqWorker : object {
    private static ILog Log;
    [NullableAttribute("2")]
private Task bgTask;
    [NullableAttribute("2")]
private CancellationTokenSource cts;
    private BlockingCollection`1<IMessage> queue;
    private BackgroundMqClient mqClient;
    private IMessageHandler handler;
    [CompilerGeneratedAttribute]
private DateTime <LastMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    public DateTime LastMessage { get; public set; }
    public string QueueName { get; }
    public BackgroundMqWorker(string queueName, BlockingCollection`1<IMessage> queue, BackgroundMqClient mqClient, IMessageHandler handler);
    private static BackgroundMqWorker();
    [CompilerGeneratedAttribute]
public DateTime get_LastMessage();
    [CompilerGeneratedAttribute]
public void set_LastMessage(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueueName();
    private Task Run(object state);
    public sealed virtual IMessageHandlerStats GetStats();
    public sealed virtual void Stop();
    public sealed virtual void Dispose();
}
public interface ServiceStack.Messaging.IMessageHandlerDisposer {
    public abstract virtual void DisposeMessageHandler(IMessageHandler messageHandler);
}
public interface ServiceStack.Messaging.IMessageHandlerFactory {
    public abstract virtual IMessageHandler CreateMessageHandler();
}
[NullableContextAttribute("1")]
public interface ServiceStack.Messaging.IMqCollection {
    public int ThreadCount { get; }
    public Type QueueType { get; }
    public abstract virtual int get_ThreadCount();
    public abstract virtual Type get_QueueType();
    public abstract virtual IMqWorker CreateWorker(string mqName);
    public abstract virtual void Add(string queueName, IMessage message);
    public abstract virtual bool TryTake(string queueName, IMessage& message);
    public abstract virtual bool TryTake(string queueName, IMessage& message, TimeSpan timeout);
    public abstract virtual void Clear(string queueName);
    public abstract virtual string GetDescription();
    public abstract virtual Dictionary`2<string, long> GetDescriptionMap();
}
[NullableContextAttribute("1")]
public interface ServiceStack.Messaging.IMqWorker {
    public string QueueName { get; }
    public abstract virtual string get_QueueName();
    public abstract virtual void Stop();
    public abstract virtual IMessageHandlerStats GetStats();
}
public class ServiceStack.Messaging.InMemoryTransientMessageFactory : object {
    private static ILog Log;
    private InMemoryTransientMessageService transientMessageService;
    [CompilerGeneratedAttribute]
private MessageQueueClientFactory <MqFactory>k__BackingField;
    internal MessageQueueClientFactory MqFactory { get; internal set; }
    public InMemoryTransientMessageFactory(InMemoryTransientMessageService transientMessageService);
    private static InMemoryTransientMessageFactory();
    [CompilerGeneratedAttribute]
internal MessageQueueClientFactory get_MqFactory();
    [CompilerGeneratedAttribute]
internal void set_MqFactory(MessageQueueClientFactory value);
    public sealed virtual IMessageProducer CreateMessageProducer();
    public sealed virtual IMessageQueueClient CreateMessageQueueClient();
    public IMessageService CreateMessageService();
    public sealed virtual void Dispose();
}
public class ServiceStack.Messaging.InMemoryTransientMessageService : TransientMessageServiceBase {
    [CompilerGeneratedAttribute]
private InMemoryTransientMessageFactory <Factory>k__BackingField;
    internal InMemoryTransientMessageFactory Factory { get; internal set; }
    public IMessageFactory MessageFactory { get; }
    public MessageQueueClientFactory MessageQueueFactory { get; }
    public InMemoryTransientMessageService(InMemoryTransientMessageFactory factory);
    [CompilerGeneratedAttribute]
internal InMemoryTransientMessageFactory get_Factory();
    [CompilerGeneratedAttribute]
internal void set_Factory(InMemoryTransientMessageFactory value);
    private void factory_MessageReceived(object sender, EventArgs e);
    public virtual IMessageFactory get_MessageFactory();
    public MessageQueueClientFactory get_MessageQueueFactory();
}
public class ServiceStack.Messaging.MessageHandler`1 : object {
    private static ILog Log;
    public static int DefaultRetryCount;
    private IMessageService messageService;
    private Func`2<IMessage`1<T>, object> processMessageFn;
    private Action`3<IMessageHandler, IMessage`1<T>, Exception> processInExceptionFn;
    [CompilerGeneratedAttribute]
private Func`2<string, IOneWayClient> <ReplyClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublishResponsesWhitelist>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublishToOutqWhitelist>k__BackingField;
    private int retryCount;
    [CompilerGeneratedAttribute]
private int <TotalMessagesProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalMessagesFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalNormalMessagesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPriorityMessagesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalOutMessagesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastMessageProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProcessQueueNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageQueueClient <MqClient>k__BackingField;
    public Func`2<string, IOneWayClient> ReplyClientFactory { get; public set; }
    public String[] PublishResponsesWhitelist { get; public set; }
    public String[] PublishToOutqWhitelist { get; public set; }
    public int TotalMessagesProcessed { get; private set; }
    public int TotalMessagesFailed { get; private set; }
    public int TotalRetries { get; private set; }
    public int TotalNormalMessagesReceived { get; private set; }
    public int TotalPriorityMessagesReceived { get; private set; }
    public int TotalOutMessagesReceived { get; private set; }
    public Nullable`1<DateTime> LastMessageProcessed { get; private set; }
    public String[] ProcessQueueNames { get; public set; }
    public IMessageQueueClient MqClient { get; private set; }
    public Type MessageType { get; }
    public MessageHandler`1(IMessageService messageService, Func`2<IMessage`1<T>, object> processMessageFn);
    public MessageHandler`1(IMessageService messageService, Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processInExceptionFn, int retryCount);
    private static MessageHandler`1();
    [CompilerGeneratedAttribute]
public Func`2<string, IOneWayClient> get_ReplyClientFactory();
    [CompilerGeneratedAttribute]
public void set_ReplyClientFactory(Func`2<string, IOneWayClient> value);
    [CompilerGeneratedAttribute]
public String[] get_PublishResponsesWhitelist();
    [CompilerGeneratedAttribute]
public void set_PublishResponsesWhitelist(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PublishToOutqWhitelist();
    [CompilerGeneratedAttribute]
public void set_PublishToOutqWhitelist(String[] value);
    [CompilerGeneratedAttribute]
public int get_TotalMessagesProcessed();
    [CompilerGeneratedAttribute]
private void set_TotalMessagesProcessed(int value);
    [CompilerGeneratedAttribute]
public int get_TotalMessagesFailed();
    [CompilerGeneratedAttribute]
private void set_TotalMessagesFailed(int value);
    [CompilerGeneratedAttribute]
public int get_TotalRetries();
    [CompilerGeneratedAttribute]
private void set_TotalRetries(int value);
    [CompilerGeneratedAttribute]
public int get_TotalNormalMessagesReceived();
    [CompilerGeneratedAttribute]
private void set_TotalNormalMessagesReceived(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPriorityMessagesReceived();
    [CompilerGeneratedAttribute]
private void set_TotalPriorityMessagesReceived(int value);
    [CompilerGeneratedAttribute]
public int get_TotalOutMessagesReceived();
    [CompilerGeneratedAttribute]
private void set_TotalOutMessagesReceived(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastMessageProcessed();
    [CompilerGeneratedAttribute]
private void set_LastMessageProcessed(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public String[] get_ProcessQueueNames();
    [CompilerGeneratedAttribute]
public void set_ProcessQueueNames(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual IMessageQueueClient get_MqClient();
    [CompilerGeneratedAttribute]
private void set_MqClient(IMessageQueueClient value);
    public sealed virtual Type get_MessageType();
    public sealed virtual void Process(IMessageQueueClient mqClient);
    public sealed virtual int ProcessQueue(IMessageQueueClient mqClient, string queueName, Func`1<bool> doNext);
    public sealed virtual IMessageHandlerStats GetStats();
    private void DefaultInExceptionHandler(IMessageHandler mqHandler, IMessage`1<T> message, Exception ex);
    public sealed virtual void ProcessMessage(IMessageQueueClient mqClient, object mqResponse);
    public void ProcessMessage(IMessageQueueClient mqClient, IMessage`1<T> message);
    public sealed virtual void Dispose();
}
public class ServiceStack.Messaging.MessageHandlerFactory`1 : object {
    public static int DefaultRetryCount;
    private IMessageService messageService;
    [CompilerGeneratedAttribute]
private Func`2<IMessage, IMessage> <RequestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <ResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublishResponsesWhitelist>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublishToOutqWhitelist>k__BackingField;
    private Func`2<IMessage`1<T>, object> processMessageFn;
    private Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionFn;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    public Func`2<IMessage, IMessage> RequestFilter { get; public set; }
    public Func`2<object, object> ResponseFilter { get; public set; }
    public String[] PublishResponsesWhitelist { get; public set; }
    public String[] PublishToOutqWhitelist { get; public set; }
    public int RetryCount { get; public set; }
    public MessageHandlerFactory`1(IMessageService messageService, Func`2<IMessage`1<T>, object> processMessageFn);
    public MessageHandlerFactory`1(IMessageService messageService, Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx);
    [CompilerGeneratedAttribute]
public Func`2<IMessage, IMessage> get_RequestFilter();
    [CompilerGeneratedAttribute]
public void set_RequestFilter(Func`2<IMessage, IMessage> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_ResponseFilter();
    [CompilerGeneratedAttribute]
public void set_ResponseFilter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public String[] get_PublishResponsesWhitelist();
    [CompilerGeneratedAttribute]
public void set_PublishResponsesWhitelist(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PublishToOutqWhitelist();
    [CompilerGeneratedAttribute]
public void set_PublishToOutqWhitelist(String[] value);
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(int value);
    public sealed virtual IMessageHandler CreateMessageHandler();
    [CompilerGeneratedAttribute]
private object <CreateMessageHandler>b__26_0(IMessage`1<T> msg);
}
public abstract class ServiceStack.Messaging.TransientMessageServiceBase : object {
    private bool isRunning;
    public static int DefaultRetryCount;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RequestTimeOut>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolSize>k__BackingField;
    private Dictionary`2<Type, IMessageHandlerFactory> handlerMap;
    private IMessageHandler[] messageHandlers;
    public int RetryCount { get; public set; }
    public Nullable`1<TimeSpan> RequestTimeOut { get; protected set; }
    public int PoolSize { get; protected set; }
    public IMessageFactory MessageFactory { get; }
    public List`1<Type> RegisteredTypes { get; }
    protected TransientMessageServiceBase(int retryAttempts, Nullable`1<TimeSpan> requestTimeOut);
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RequestTimeOut();
    [CompilerGeneratedAttribute]
protected void set_RequestTimeOut(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public int get_PoolSize();
    [CompilerGeneratedAttribute]
protected void set_PoolSize(int value);
    public abstract virtual IMessageFactory get_MessageFactory();
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn);
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, int noOfThreads);
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx);
    public sealed virtual void RegisterHandler(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx, int noOfThreads);
    public sealed virtual IMessageHandlerStats GetStats();
    public sealed virtual List`1<Type> get_RegisteredTypes();
    public sealed virtual string GetStatus();
    public sealed virtual string GetStatsDescription();
    protected IMessageHandlerFactory CreateMessageHandlerFactory(Func`2<IMessage`1<T>, object> processMessageFn, Action`3<IMessageHandler, IMessage`1<T>, Exception> processExceptionEx);
    public virtual void Start();
    public virtual void Stop();
    public virtual void Dispose();
    public virtual void DisposeMessageHandler(IMessageHandler messageHandler);
}
public static class ServiceStack.Messaging.WorkerOperation : object {
    public static string ControlCommand;
    public static int NoOp;
    public static int Stop;
    public static int Reset;
    public static int Restart;
}
public abstract class ServiceStack.Metadata.BaseMetadataHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentFormat>k__BackingField;
    public Format Format { get; }
    public string ContentType { get; public set; }
    public string ContentFormat { get; public set; }
    public abstract virtual Format get_Format();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_ContentFormat();
    [CompilerGeneratedAttribute]
public void set_ContentFormat(string value);
    [AsyncStateMachineAttribute("ServiceStack.Metadata.BaseMetadataHandler/<ProcessRequestAsync>d__10")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
    public virtual string CreateResponse(Type type);
    [AsyncStateMachineAttribute("ServiceStack.Metadata.BaseMetadataHandler/<ProcessOperationsAsync>d__12")]
protected virtual Task ProcessOperationsAsync(Stream writer, IRequest httpReq, IResponse httpRes);
    private void AppendType(StringBuilder sb, Operation op, MetadataType metadataType);
    [AsyncStateMachineAttribute("ServiceStack.Metadata.BaseMetadataHandler/<RenderOperationsAsync>d__14")]
protected virtual Task RenderOperationsAsync(Stream output, IRequest httpReq, ServiceMetadata metadata);
    private string ConvertToHtml(string text);
    protected bool AssertAccess(IRequest httpReq, IResponse httpRes, string operationName);
    protected abstract virtual string CreateMessage(Type dtoType);
    protected virtual Task RenderOperationAsync(Stream output, IRequest httpReq, string operationName, string requestMessage, string responseMessage, string metadataHtml, Operation operation);
}
public abstract class ServiceStack.Metadata.BaseSoapMetadataHandler : BaseMetadataHandler {
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    public string OperationName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [AsyncStateMachineAttribute("ServiceStack.Metadata.BaseSoapMetadataHandler/<ProcessRequestAsync>d__5")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public abstract class ServiceStack.Metadata.BaseWsdlPage : Page {
    public static void DataBind(Repeater[] repeaters);
}
public class ServiceStack.Metadata.CustomMetadataHandler : BaseMetadataHandler {
    private static ILog Log;
    public Format Format { get; }
    public CustomMetadataHandler(string contentType, string format);
    private static CustomMetadataHandler();
    public virtual Format get_Format();
    protected virtual string CreateMessage(Type dtoType);
}
public class ServiceStack.Metadata.IndexMetadataHandler : BaseSoapMetadataHandler {
    public Format Format { get; }
    public virtual Format get_Format();
    protected virtual string CreateMessage(Type dtoType);
}
public class ServiceStack.Metadata.IndexOperationsControl : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <OperationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, string> <Xsds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <XsdServiceTypesIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataPagesConfig <MetadataConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, Operation> <GetOperation>k__BackingField;
    public IRequest Request { get; public set; }
    public string Title { get; public set; }
    public List`1<string> OperationNames { get; public set; }
    public IDictionary`2<int, string> Xsds { get; public set; }
    public int XsdServiceTypesIndex { get; public set; }
    public MetadataPagesConfig MetadataConfig { get; public set; }
    public Func`2<string, Operation> GetOperation { get; public set; }
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_OperationNames();
    [CompilerGeneratedAttribute]
public void set_OperationNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, string> get_Xsds();
    [CompilerGeneratedAttribute]
public void set_Xsds(IDictionary`2<int, string> value);
    [CompilerGeneratedAttribute]
public int get_XsdServiceTypesIndex();
    [CompilerGeneratedAttribute]
public void set_XsdServiceTypesIndex(int value);
    [CompilerGeneratedAttribute]
public MetadataPagesConfig get_MetadataConfig();
    [CompilerGeneratedAttribute]
public void set_MetadataConfig(MetadataPagesConfig value);
    [CompilerGeneratedAttribute]
public Func`2<string, Operation> get_GetOperation();
    [CompilerGeneratedAttribute]
public void set_GetOperation(Func`2<string, Operation> value);
    public string RenderRow(string operationName);
    private static string CreateIcons(Operation op);
    public Task RenderAsync(Stream output);
    public Dictionary`2<string, string> ToAbsoluteUrls(Dictionary`2<string, string> linksMap);
}
public class ServiceStack.Metadata.JsonMetadataHandler : BaseMetadataHandler {
    public Format Format { get; }
    public virtual Format get_Format();
    protected virtual string CreateMessage(Type dtoType);
}
public class ServiceStack.Metadata.JsvMetadataHandler : BaseMetadataHandler {
    public Format Format { get; }
    public virtual Format get_Format();
    protected virtual string CreateMessage(Type dtoType);
}
internal class ServiceStack.Metadata.ListTemplate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ListItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ListItemsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, string> <ListItemsIntMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <ForEachListItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListItemTemplate>k__BackingField;
    public string Title { get; public set; }
    public IList`1<string> ListItems { get; public set; }
    public IDictionary`2<string, string> ListItemsMap { get; public set; }
    public IDictionary`2<int, string> ListItemsIntMap { get; public set; }
    public Func`2<string, string> ForEachListItem { get; public set; }
    public string ListItemTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ListItems();
    [CompilerGeneratedAttribute]
public void set_ListItems(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ListItemsMap();
    [CompilerGeneratedAttribute]
public void set_ListItemsMap(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, string> get_ListItemsIntMap();
    [CompilerGeneratedAttribute]
public void set_ListItemsIntMap(IDictionary`2<int, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ForEachListItem();
    [CompilerGeneratedAttribute]
public void set_ForEachListItem(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_ListItemTemplate();
    [CompilerGeneratedAttribute]
public void set_ListItemTemplate(string value);
    public virtual string ToString();
}
public class ServiceStack.Metadata.MetadataConfig : object {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyncReplyUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AsyncOneWayUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultMetadataUri>k__BackingField;
    public string Format { get; public set; }
    public string Name { get; public set; }
    public string SyncReplyUri { get; public set; }
    public string AsyncOneWayUri { get; public set; }
    public string DefaultMetadataUri { get; public set; }
    public MetadataConfig(string format, string name, string syncReplyUri, string asyncOneWayUri, string defaultMetadataUri);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SyncReplyUri();
    [CompilerGeneratedAttribute]
public void set_SyncReplyUri(string value);
    [CompilerGeneratedAttribute]
public string get_AsyncOneWayUri();
    [CompilerGeneratedAttribute]
public void set_AsyncOneWayUri(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultMetadataUri();
    [CompilerGeneratedAttribute]
public void set_DefaultMetadataUri(string value);
    public MetadataConfig Create(string format, string name);
}
public class ServiceStack.Metadata.MetadataPagesConfig : object {
    private ServiceMetadata metadata;
    private HashSet`1<string> ignoredFormats;
    private Dictionary`2<string, MetadataConfig> metadataConfigMap;
    [CompilerGeneratedAttribute]
private List`1<MetadataConfig> <AvailableFormatConfigs>k__BackingField;
    public List`1<MetadataConfig> AvailableFormatConfigs { get; private set; }
    public MetadataPagesConfig(ServiceMetadata metadata, ServiceEndpointsMetadataConfig metadataConfig, HashSet`1<string> ignoredFormats, List`1<string> contentTypeFormats);
    [CompilerGeneratedAttribute]
public List`1<MetadataConfig> get_AvailableFormatConfigs();
    [CompilerGeneratedAttribute]
private void set_AvailableFormatConfigs(List`1<MetadataConfig> value);
    public MetadataConfig GetMetadataConfig(string format);
    public bool IsVisible(IRequest httpRequest, Format format, string operation);
    public bool CanAccess(IRequest httpRequest, Format format, string operation);
    public bool CanAccess(Format format, string operation);
    public bool AlwaysHideInMetadata(string operationName);
}
public class ServiceStack.Metadata.OperationControl : object {
    [CompilerGeneratedAttribute]
private ServiceEndpointsMetadataConfig <MetadataConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <HttpRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private Operation <Operation>k__BackingField;
    public ServiceEndpointsMetadataConfig MetadataConfig { get; public set; }
    unknown Format Format {public set; }
    public IRequest HttpRequest { get; public set; }
    public string ContentType { get; public set; }
    public string ContentFormat { get; public set; }
    public string Title { get; public set; }
    public string OperationName { get; public set; }
    public string HostName { get; public set; }
    public string RequestMessage { get; public set; }
    public string ResponseMessage { get; public set; }
    public string MetadataHtml { get; public set; }
    public Operation Operation { get; public set; }
    public string RequestUri { get; }
    public string ResponseTemplate { get; }
    public string HttpResponseTemplate { get; }
    [CompilerGeneratedAttribute]
public ServiceEndpointsMetadataConfig get_MetadataConfig();
    [CompilerGeneratedAttribute]
public void set_MetadataConfig(ServiceEndpointsMetadataConfig value);
    public void set_Format(Format value);
    [CompilerGeneratedAttribute]
public IRequest get_HttpRequest();
    [CompilerGeneratedAttribute]
public void set_HttpRequest(IRequest value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_ContentFormat();
    [CompilerGeneratedAttribute]
public void set_ContentFormat(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    [CompilerGeneratedAttribute]
public string get_RequestMessage();
    [CompilerGeneratedAttribute]
public void set_RequestMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseMessage();
    [CompilerGeneratedAttribute]
public void set_ResponseMessage(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataHtml();
    [CompilerGeneratedAttribute]
public void set_MetadataHtml(string value);
    [CompilerGeneratedAttribute]
public Operation get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(Operation value);
    public virtual string get_RequestUri();
    public virtual Task RenderAsync(Stream output);
    public virtual string GetHttpRequestTemplate();
    public virtual string HttpRequestTemplateWithBody(string httpMethod);
    public virtual string HttpRequestTemplateWithoutBody(string httpMethod);
    public virtual string get_ResponseTemplate();
    public virtual string get_HttpResponseTemplate();
}
public class ServiceStack.Metadata.ServiceEndpointsMetadataConfig : object {
    [CompilerGeneratedAttribute]
private string <DefaultMetadataUri>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapMetadataConfig <Soap11>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapMetadataConfig <Soap12>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataConfig <Custom>k__BackingField;
    public string DefaultMetadataUri { get; public set; }
    public SoapMetadataConfig Soap11 { get; public set; }
    public SoapMetadataConfig Soap12 { get; public set; }
    public MetadataConfig Custom { get; public set; }
    public static ServiceEndpointsMetadataConfig Create(string serviceStackHandlerPrefix);
    [CompilerGeneratedAttribute]
public string get_DefaultMetadataUri();
    [CompilerGeneratedAttribute]
public void set_DefaultMetadataUri(string value);
    [CompilerGeneratedAttribute]
public SoapMetadataConfig get_Soap11();
    [CompilerGeneratedAttribute]
public void set_Soap11(SoapMetadataConfig value);
    [CompilerGeneratedAttribute]
public SoapMetadataConfig get_Soap12();
    [CompilerGeneratedAttribute]
public void set_Soap12(SoapMetadataConfig value);
    [CompilerGeneratedAttribute]
public MetadataConfig get_Custom();
    [CompilerGeneratedAttribute]
public void set_Custom(MetadataConfig value);
    public MetadataConfig GetEndpointConfig(string format);
}
public class ServiceStack.Metadata.Soap11MetadataHandler : BaseSoapMetadataHandler {
    public Format Format { get; }
    public virtual Format get_Format();
    protected virtual string CreateMessage(Type dtoType);
    protected virtual Task RenderOperationAsync(Stream output, IRequest httpReq, string operationName, string requestMessage, string responseMessage, string metadataHtml, Operation operation);
}
internal class ServiceStack.Metadata.Soap11OperationControl : OperationControl {
    public string RequestUri { get; }
    public virtual string get_RequestUri();
    public virtual string HttpRequestTemplateWithBody(string httpMethod);
}
public class ServiceStack.Metadata.Soap11WsdlMetadataHandler : WsdlMetadataHandlerBase {
    protected virtual WsdlTemplateBase GetWsdlTemplate();
}
public class ServiceStack.Metadata.Soap11WsdlTemplate : WsdlTemplateBase {
    public string WsdlName { get; }
    protected string ReplyActionsTemplate { get; }
    protected string OneWayActionsTemplate { get; }
    protected string ReplyBindingContainerTemplate { get; }
    protected string OneWayBindingContainerTemplate { get; }
    protected string ReplyEndpointUriTemplate { get; }
    protected string OneWayEndpointUriTemplate { get; }
    public virtual string get_WsdlName();
    protected virtual string get_ReplyActionsTemplate();
    protected virtual string get_OneWayActionsTemplate();
    protected virtual string get_ReplyBindingContainerTemplate();
    protected virtual string get_OneWayBindingContainerTemplate();
    protected virtual string get_ReplyEndpointUriTemplate();
    protected virtual string get_OneWayEndpointUriTemplate();
}
public class ServiceStack.Metadata.Soap12MetadataHandler : BaseSoapMetadataHandler {
    public Format Format { get; }
    public virtual Format get_Format();
    protected virtual string CreateMessage(Type dtoType);
    protected virtual Task RenderOperationAsync(Stream output, IRequest httpReq, string operationName, string requestMessage, string responseMessage, string metadataHtml, Operation operation);
}
internal class ServiceStack.Metadata.Soap12OperationControl : OperationControl {
    public string RequestUri { get; }
    public virtual string get_RequestUri();
    public virtual string HttpRequestTemplateWithBody(string httpMethod);
}
public class ServiceStack.Metadata.Soap12WsdlMetadataHandler : WsdlMetadataHandlerBase {
    protected virtual WsdlTemplateBase GetWsdlTemplate();
}
public class ServiceStack.Metadata.Soap12WsdlTemplate : WsdlTemplateBase {
    public string WsdlName { get; }
    protected string ReplyActionsTemplate { get; }
    protected string OneWayActionsTemplate { get; }
    protected string ReplyBindingContainerTemplate { get; }
    protected string OneWayBindingContainerTemplate { get; }
    protected string ReplyEndpointUriTemplate { get; }
    protected string OneWayEndpointUriTemplate { get; }
    public virtual string get_WsdlName();
    protected virtual string get_ReplyActionsTemplate();
    protected virtual string get_OneWayActionsTemplate();
    protected virtual string get_ReplyBindingContainerTemplate();
    protected virtual string get_OneWayBindingContainerTemplate();
    protected virtual string get_ReplyEndpointUriTemplate();
    protected virtual string get_OneWayEndpointUriTemplate();
}
public class ServiceStack.Metadata.SoapMetadataConfig : MetadataConfig {
    [CompilerGeneratedAttribute]
private string <WsdlMetadataUri>k__BackingField;
    public string WsdlMetadataUri { get; public set; }
    public SoapMetadataConfig(string format, string name, string syncReplyUri, string asyncOneWayUri, string defaultMetadataUri, string wsdlMetadataUri);
    [CompilerGeneratedAttribute]
public string get_WsdlMetadataUri();
    [CompilerGeneratedAttribute]
public void set_WsdlMetadataUri(string value);
}
internal class ServiceStack.Metadata.TableTemplate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ItemsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, string> <ItemsIntMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <ForEachItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemTemplate>k__BackingField;
    public string Title { get; public set; }
    public IList`1<string> Items { get; public set; }
    public IDictionary`2<string, string> ItemsMap { get; public set; }
    public IDictionary`2<int, string> ItemsIntMap { get; public set; }
    public Func`2<string, string> ForEachItem { get; public set; }
    public string ItemTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ItemsMap();
    [CompilerGeneratedAttribute]
public void set_ItemsMap(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, string> get_ItemsIntMap();
    [CompilerGeneratedAttribute]
public void set_ItemsIntMap(IDictionary`2<int, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ForEachItem();
    [CompilerGeneratedAttribute]
public void set_ForEachItem(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_ItemTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemTemplate(string value);
    public virtual string ToString();
}
public abstract class ServiceStack.Metadata.WsdlMetadataHandlerBase : HttpAsyncTaskHandler {
    private ILog log;
    protected abstract virtual WsdlTemplateBase GetWsdlTemplate();
    public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
    public Task Execute(IRequest httpReq, IResponse httpRes);
    public WsdlTemplateBase GetWsdlTemplate(XsdMetadata operations, string baseUri, bool optimizeForFlash, string rawUrl, string serviceName);
}
public abstract class ServiceStack.Metadata.WsdlTemplateBase : object {
    [CompilerGeneratedAttribute]
private string <Xsd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ReplyOperationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <OneWayOperationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyEndpointUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OneWayEndpointUri>k__BackingField;
    private static string Template;
    public string Xsd { get; public set; }
    public string ServiceName { get; public set; }
    public IList`1<string> ReplyOperationNames { get; public set; }
    public IList`1<string> OneWayOperationNames { get; public set; }
    public string ReplyEndpointUri { get; public set; }
    public string OneWayEndpointUri { get; public set; }
    public string WsdlName { get; }
    protected string ReplyMessagesTemplate { get; }
    protected string OneWayMessagesTemplate { get; }
    protected string ReplyOperationsTemplate { get; }
    protected string OneWayOperationsTemplate { get; }
    protected string ReplyActionsTemplate { get; }
    protected string OneWayActionsTemplate { get; }
    protected string ReplyBindingContainerTemplate { get; }
    protected string OneWayBindingContainerTemplate { get; }
    protected string ReplyEndpointUriTemplate { get; }
    protected string OneWayEndpointUriTemplate { get; }
    [CompilerGeneratedAttribute]
public string get_Xsd();
    [CompilerGeneratedAttribute]
public void set_Xsd(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ReplyOperationNames();
    [CompilerGeneratedAttribute]
public void set_ReplyOperationNames(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_OneWayOperationNames();
    [CompilerGeneratedAttribute]
public void set_OneWayOperationNames(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ReplyEndpointUri();
    [CompilerGeneratedAttribute]
public void set_ReplyEndpointUri(string value);
    [CompilerGeneratedAttribute]
public string get_OneWayEndpointUri();
    [CompilerGeneratedAttribute]
public void set_OneWayEndpointUri(string value);
    public abstract virtual string get_WsdlName();
    protected virtual string get_ReplyMessagesTemplate();
    protected virtual string get_OneWayMessagesTemplate();
    protected virtual string get_ReplyOperationsTemplate();
    protected virtual string get_OneWayOperationsTemplate();
    protected virtual string get_ReplyActionsTemplate();
    protected virtual string get_OneWayActionsTemplate();
    protected abstract virtual string get_ReplyBindingContainerTemplate();
    protected abstract virtual string get_OneWayBindingContainerTemplate();
    protected abstract virtual string get_ReplyEndpointUriTemplate();
    protected abstract virtual string get_OneWayEndpointUriTemplate();
    public string RepeaterTemplate(string template, IEnumerable`1<string> dataSource);
    public string RepeaterTemplate(string template, object arg0, IEnumerable`1<string> dataSource);
    public virtual string ToString();
}
public class ServiceStack.Metadata.XmlMetadataHandler : BaseMetadataHandler {
    public Format Format { get; }
    public virtual Format get_Format();
    protected virtual string CreateMessage(Type dtoType);
}
public class ServiceStack.Metadata.XsdGenerator : object {
    private ILog log;
    [CompilerGeneratedAttribute]
private bool <OptimizeForFlash>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Type> <OperationTypes>k__BackingField;
    public bool OptimizeForFlash { get; public set; }
    public ICollection`1<Type> OperationTypes { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OptimizeForFlash();
    [CompilerGeneratedAttribute]
public void set_OptimizeForFlash(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<Type> get_OperationTypes();
    [CompilerGeneratedAttribute]
public void set_OperationTypes(ICollection`1<Type> value);
    private string Filter(string xsd);
    public virtual string ToString();
}
internal enum ServiceStack.Metadata.XsdTypeNames : Enum {
    public int value__;
    public static XsdTypeNames WcfTypes;
    public static XsdTypeNames ServiceTypes;
    public static XsdTypeNames WcfCollectionTypes;
}
internal static class ServiceStack.Metadata.XsdTypes : object {
    [CompilerGeneratedAttribute]
private static IDictionary`2<int, string> <Xsds>k__BackingField;
    public static IDictionary`2<int, string> Xsds { get; private set; }
    private static XsdTypes();
    [CompilerGeneratedAttribute]
public static IDictionary`2<int, string> get_Xsds();
    [CompilerGeneratedAttribute]
private static void set_Xsds(IDictionary`2<int, string> value);
}
[DefaultRequestAttribute("ServiceStack.MetadataApp")]
[RestrictAttribute]
public class ServiceStack.MetadataAppService : Service {
    [CompilerGeneratedAttribute]
private INativeTypesMetadata <nativeTypesMetadata>P;
    public MetadataAppService(INativeTypesMetadata nativeTypesMetadata);
    public AppMetadata Any(MetadataApp request);
}
[ExcludeMetadataAttribute]
public class ServiceStack.MetadataDebug : object {
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthSecret>k__BackingField;
    public string Script { get; public set; }
    public string AuthSecret { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
    [CompilerGeneratedAttribute]
public string get_AuthSecret();
    [CompilerGeneratedAttribute]
public void set_AuthSecret(string value);
}
[ReturnExceptionsInJsonAttribute]
[DefaultRequestAttribute("ServiceStack.MetadataDebug")]
[RestrictAttribute]
public class ServiceStack.MetadataDebugService : Service {
    public static string Route;
    public static string DefaultTemplate;
    private static MetadataDebugService();
    [AsyncStateMachineAttribute("ServiceStack.MetadataDebugService/<Any>d__2")]
public Task`1<object> Any(MetadataDebug request);
    [AsyncStateMachineAttribute("ServiceStack.MetadataDebugService/<GetHtml>d__3")]
public Task`1<object> GetHtml(MetadataDebug request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
public class ServiceStack.MetadataFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginLinksTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginLinksStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PluginLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugLinksTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugLinksStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <DebugLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IndexOperationsControl> <IndexPageFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<OperationControl> <DetailPageFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<AppMetadata>> <AppMetadataFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`2<IRequest, AppMetadata>> <AfterAppMetadataFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowResponseStatusInMetadataPages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ExportTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, String[]> <ServiceRoutes>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlModule <HtmlModule>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <TagFilter>k__BackingField;
    public string Id { get; public set; }
    public string PluginLinksTitle { get; public set; }
    public string PluginLinksStyle { get; public set; }
    public Dictionary`2<string, string> PluginLinks { get; public set; }
    public string DebugLinksTitle { get; public set; }
    public string DebugLinksStyle { get; public set; }
    public Dictionary`2<string, string> DebugLinks { get; public set; }
    public Action`1<IndexOperationsControl> IndexPageFilter { get; public set; }
    public Action`1<OperationControl> DetailPageFilter { get; public set; }
    public List`1<Action`1<AppMetadata>> AppMetadataFilters { get; }
    public List`1<Action`2<IRequest, AppMetadata>> AfterAppMetadataFilters { get; }
    public bool ShowResponseStatusInMetadataPages { get; public set; }
    public List`1<Type> ExportTypes { get; }
    public Dictionary`2<Type, String[]> ServiceRoutes { get; public set; }
    public HtmlModule HtmlModule { get; public set; }
    public bool EnableNav { get; public set; }
    public bool EnableAppMetadata { get; public set; }
    public Func`2<string, string> TagFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_PluginLinksTitle();
    [CompilerGeneratedAttribute]
public void set_PluginLinksTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PluginLinksStyle();
    [CompilerGeneratedAttribute]
public void set_PluginLinksStyle(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_PluginLinks();
    [CompilerGeneratedAttribute]
public void set_PluginLinks(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_DebugLinksTitle();
    [CompilerGeneratedAttribute]
public void set_DebugLinksTitle(string value);
    [CompilerGeneratedAttribute]
public string get_DebugLinksStyle();
    [CompilerGeneratedAttribute]
public void set_DebugLinksStyle(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_DebugLinks();
    [CompilerGeneratedAttribute]
public void set_DebugLinks(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Action`1<IndexOperationsControl> get_IndexPageFilter();
    [CompilerGeneratedAttribute]
public void set_IndexPageFilter(Action`1<IndexOperationsControl> value);
    [CompilerGeneratedAttribute]
public Action`1<OperationControl> get_DetailPageFilter();
    [CompilerGeneratedAttribute]
public void set_DetailPageFilter(Action`1<OperationControl> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<AppMetadata>> get_AppMetadataFilters();
    [CompilerGeneratedAttribute]
public List`1<Action`2<IRequest, AppMetadata>> get_AfterAppMetadataFilters();
    [CompilerGeneratedAttribute]
public bool get_ShowResponseStatusInMetadataPages();
    [CompilerGeneratedAttribute]
public void set_ShowResponseStatusInMetadataPages(bool value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ExportTypes();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, String[]> get_ServiceRoutes();
    [CompilerGeneratedAttribute]
public void set_ServiceRoutes(Dictionary`2<Type, String[]> value);
    [CompilerGeneratedAttribute]
public HtmlModule get_HtmlModule();
    [CompilerGeneratedAttribute]
public void set_HtmlModule(HtmlModule value);
    public bool get_EnableNav();
    public void set_EnableNav(bool value);
    public bool get_EnableAppMetadata();
    public void set_EnableAppMetadata(bool value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_TagFilter();
    [CompilerGeneratedAttribute]
public void set_TagFilter(Func`2<string, string> value);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public virtual IHttpHandler GetHandler(IRequest req);
    private IHttpHandler GetHandlerForPathParts(String[] pathParts);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__67_0(UiFeature feature);
}
[DefaultRequestAttribute("ServiceStack.GetNavItems")]
[RestrictAttribute]
public class ServiceStack.MetadataNavService : Service {
    public object Get(GetNavItems request);
}
[ExtensionAttribute]
public static class ServiceStack.MetadataUtils : object {
    [ExtensionAttribute]
public static AppMetadata ToAppMetadata(INativeTypesMetadata nativeTypesMetadata, IRequest req);
    public static void LocalizeMetadata(IRequest req, AppMetadata response);
    [ExtensionAttribute]
public static MetadataFeature AddPluginLink(MetadataFeature metadata, string href, string title);
    [ExtensionAttribute]
public static MetadataFeature RemovePluginLink(MetadataFeature metadata, string href);
    [ExtensionAttribute]
public static MetadataFeature AddDebugLink(MetadataFeature metadata, string href, string title);
    [ExtensionAttribute]
public static MetadataFeature RemoveDebugLink(MetadataFeature metadata, string href);
}
public class ServiceStack.MinifyCssScriptBlock : MinifyScriptBlockBase {
    public string Name { get; }
    public ICompressor Minifier { get; }
    public virtual string get_Name();
    public virtual ICompressor get_Minifier();
}
public class ServiceStack.MinifyHtmlScriptBlock : MinifyScriptBlockBase {
    public string Name { get; }
    public ICompressor Minifier { get; }
    public virtual string get_Name();
    public virtual ICompressor get_Minifier();
}
public class ServiceStack.MinifyJsScriptBlock : MinifyScriptBlockBase {
    public string Name { get; }
    public ICompressor Minifier { get; }
    public virtual string get_Name();
    public virtual ICompressor get_Minifier();
}
public abstract class ServiceStack.MinifyScriptBlockBase : ScriptBlock {
    private ConcurrentDictionary`2<ReadOnlyMemory`1<char>, Tuple`2<string, string>> allocatedStringsCache;
    public ICompressor Minifier { get; }
    public ScriptLanguage Body { get; }
    public abstract virtual ICompressor get_Minifier();
    public virtual ScriptLanguage get_Body();
    public ReadOnlyMemory`1<char> GetMinifiedOutputCache(ReadOnlyMemory`1<char> contents);
    [AsyncStateMachineAttribute("ServiceStack.MinifyScriptBlockBase/<WriteAsync>d__6")]
public virtual Task WriteAsync(ScriptScopeContext scope, PageBlockFragment block, CancellationToken token);
    private void Capture(ScriptScopeContext scope, PageBlockFragment block, PageStringFragment strFragment);
}
public class ServiceStack.MiniProfiler.HtmlString : object {
    public static HtmlString Empty;
    private string value;
    public HtmlString(string value);
    private static HtmlString();
    public virtual string ToString();
    public sealed virtual string ToHtmlString();
}
public interface ServiceStack.MiniProfiler.IProfiler {
    public abstract virtual IProfiler Start();
    public abstract virtual void Stop();
    public abstract virtual IDisposable Step(string name);
    public abstract virtual IHtmlString RenderIncludes(Nullable`1<RenderPosition> position, Nullable`1<bool> showTrivial, Nullable`1<bool> showTimeWithChildren, Nullable`1<int> maxTracesToShow, bool xhtml, Nullable`1<bool> showControls);
}
public class ServiceStack.MiniProfiler.NullProfiler : object {
    public static NullProfiler Instance;
    private MockDisposable disposable;
    private static NullProfiler();
    public sealed virtual IProfiler Start();
    public sealed virtual void Stop();
    public sealed virtual IDisposable Step(string name);
    public sealed virtual IHtmlString RenderIncludes(Nullable`1<RenderPosition> position, Nullable`1<bool> showTrivial, Nullable`1<bool> showTimeWithChildren, Nullable`1<int> maxTracesToShow, bool xhtml, Nullable`1<bool> showControls);
}
public static class ServiceStack.MiniProfiler.Profiler : object {
    [CompilerGeneratedAttribute]
private static IProfiler <Current>k__BackingField;
    public static IProfiler Current { get; public set; }
    private static Profiler();
    [CompilerGeneratedAttribute]
public static IProfiler get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(IProfiler value);
    public static IDisposable Step(string name);
    public static IHtmlString RenderIncludes(Nullable`1<RenderPosition> position, Nullable`1<bool> showTrivial, Nullable`1<bool> showTimeWithChildren, Nullable`1<int> maxTracesToShow, bool xhtml, Nullable`1<bool> showControls);
    public static IProfiler Start();
    public static void Stop();
}
public enum ServiceStack.MiniProfiler.RenderPosition : Enum {
    public int value__;
    public static RenderPosition Left;
    public static RenderPosition Right;
}
public class ServiceStack.MissingImageDrawingProvider : ImageProvider {
    [NullableContextAttribute("1")]
public virtual Stream Resize(Stream origStream, int newWidth, int newHeight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ServiceStack.ModularExtensions : object {
    [ExtensionAttribute]
public static List`1<Tuple`2<object, int>> WithPriority(IEnumerable`1<object> instances);
    [ExtensionAttribute]
public static List`1<object> PriorityOrdered(List`1<Tuple`2<object, int>> instances);
    [ExtensionAttribute]
public static List`1<object> PriorityBelowZero(List`1<Tuple`2<object, int>> instances);
    [ExtensionAttribute]
public static List`1<object> PriorityZeroOrAbove(List`1<Tuple`2<object, int>> instances);
}
[ExtensionAttribute]
public static class ServiceStack.MqExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToHeaders(IMessage message);
}
public class ServiceStack.MqRequestDiagnosticEvent : DiagnosticEvent {
    [CompilerGeneratedAttribute]
private IMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageQueueClient <MqClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IOneWayClient <OneWayClient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    public string Source { get; }
    public IMessage Message { get; public set; }
    public IMessageQueueClient MqClient { get; public set; }
    public IOneWayClient OneWayClient { get; public set; }
    public string ReplyTo { get; public set; }
    public object Body { get; public set; }
    public virtual string get_Source();
    [CompilerGeneratedAttribute]
public IMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(IMessage value);
    [CompilerGeneratedAttribute]
public IMessageQueueClient get_MqClient();
    [CompilerGeneratedAttribute]
public void set_MqClient(IMessageQueueClient value);
    [CompilerGeneratedAttribute]
public IOneWayClient get_OneWayClient();
    [CompilerGeneratedAttribute]
public void set_OneWayClient(IOneWayClient value);
    [CompilerGeneratedAttribute]
public string get_ReplyTo();
    [CompilerGeneratedAttribute]
public void set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public object get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(object value);
}
public class ServiceStack.NativeTypes.AddCodeDelegate : MulticastDelegate {
    public AddCodeDelegate(object object, IntPtr method);
    public virtual string Invoke(List`1<MetadataType> allTypes, MetadataTypesConfig config);
    public virtual IAsyncResult BeginInvoke(List`1<MetadataType> allTypes, MetadataTypesConfig config, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class ServiceStack.NativeTypes.CreateTypeOptions : object {
    [CompilerGeneratedAttribute]
private List`1<MetadataRoute> <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <ImplementsFn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataOperationType <Op>k__BackingField;
    public List`1<MetadataRoute> Routes { get; public set; }
    public Func`1<string> ImplementsFn { get; public set; }
    public bool IsRequest { get; public set; }
    public bool IsResponse { get; public set; }
    public bool IsType { get; public set; }
    public bool IsNestedType { get; public set; }
    public MetadataOperationType Op { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<MetadataRoute> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<MetadataRoute> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_ImplementsFn();
    [CompilerGeneratedAttribute]
public void set_ImplementsFn(Func`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsRequest();
    [CompilerGeneratedAttribute]
public void set_IsRequest(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResponse();
    [CompilerGeneratedAttribute]
public void set_IsResponse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsType();
    [CompilerGeneratedAttribute]
public void set_IsType(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNestedType();
    [CompilerGeneratedAttribute]
public void set_IsNestedType(bool value);
    [CompilerGeneratedAttribute]
public MetadataOperationType get_Op();
    [CompilerGeneratedAttribute]
public void set_Op(MetadataOperationType value);
}
public class ServiceStack.NativeTypes.CSharp.CSharpGenerator : object {
    private MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    private List`1<MetadataType> allTypes;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static Dictionary`2<string, string> TypeAliases;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<CSharpGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, String[]> <AttributeConstructorArgs>k__BackingField;
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`4<CSharpGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    [ObsoleteAttribute("Use ConfigurePlugin<NativeTypesFeature>(feature => feature.MetadataTypesConfig.AddNullableAnnotations = true);")]
unknown static bool UseNullableAnnotations {public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public static Dictionary`2<string, String[]> AttributeConstructorArgs { get; public set; }
    public CSharpGenerator(MetadataTypesConfig config);
    private static CSharpGenerator();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`4<CSharpGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<CSharpGenerator, MetadataType, MetadataPropertyType, string> value);
    public static void set_UseNullableAnnotations(bool value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, List`1<MetadataType> allTypes, CreateTypeOptions options);
    private void AddConstructor(StringBuilderWrapper sb, MetadataType type, CreateTypeOptions options);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    public virtual string GetPropertyType(MetadataPropertyType prop);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, String[]> get_AttributeConstructorArgs();
    [CompilerGeneratedAttribute]
public static void set_AttributeConstructorArgs(Dictionary`2<string, String[]> value);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName, bool includeNested);
    public string Type(string type, String[] genericArgs, bool includeNested);
    public static string TypeAlias(string type, bool includeNested);
    public static string NameOnly(string type, bool includeNested);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GetPropertyName(string name);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.CSharp.CSharpGeneratorExtensions : object {
    [ExtensionAttribute]
public static MetadataTypeName GetInherits(MetadataType type);
}
public class ServiceStack.NativeTypes.Dart.DartGenerator : object {
    private MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    private List`1<string> conflictTypeNames;
    private List`1<MetadataType> allTypes;
    private Dictionary`2<string, MetadataType> allTypesMap;
    private HashSet`1<string> existingTypeInfos;
    private StringBuilder sbTypeInfos;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static List`1<string> DefaultImports;
    public static Dictionary`2<string, string> TypeAliases;
    private static string declaredEmptyString;
    private static Dictionary`2<string, string> defaultValues;
    private static HashSet`1<string> BasicJsonTypes;
    public static Dictionary`2<string, string> DartToJsonConverters;
    public static HashSet`1<string> IgnoreTypeInfosFor;
    [CompilerGeneratedAttribute]
private static HashSet`1<string> <ReservedWords>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<DartGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    public static HashSet`1<string> ArrayTypes;
    public static HashSet`1<string> DictionaryTypes;
    public static HashSet`1<string> SetTypes;
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public static bool GenerateServiceStackTypes { get; }
    public static HashSet`1<string> ReservedWords { get; public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`4<DartGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public DartGenerator(MetadataTypesConfig config);
    private static DartGenerator();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    public static bool get_GenerateServiceStackTypes();
    [CompilerGeneratedAttribute]
public static HashSet`1<string> get_ReservedWords();
    [CompilerGeneratedAttribute]
public static void set_ReservedWords(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`4<DartGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<DartGenerator, MetadataType, MetadataPropertyType, string> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    public void RegisterPropertyType(MetadataPropertyType prop, string dartType);
    public string DartLiteral(string typeName);
    private void RegisterType(MetadataType metaType, string dartType, string factoryFn);
    public bool UseTypeConversion(MetadataPropertyType prop);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    public virtual string GetPropertyType(MetadataPropertyType prop);
    private string CSharpPropertyType(MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string RawGenericType(string type, String[] genericArgs);
    public string NameOnly(string type);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GenericArg(string arg);
    public string ConvertFromCSharp(TextNode node);
    public string RawGenericArg(string arg);
    public string RawType(TextNode node);
    public string GetPropertyName(string name);
    public string GetPropertyName(MetadataPropertyType prop);
    public string GetSafePropertyName(MetadataPropertyType prop);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.Dart.DartGeneratorExtensions : object {
    public static HashSet`1<string> DartKeyWords;
    private static DartGeneratorExtensions();
    public static bool IsKeyWord(string name);
    [ExtensionAttribute]
public static string PropertyName(string name);
    [ExtensionAttribute]
public static string InDeclarationType(string type);
    [ExtensionAttribute]
public static string PropertyStyle(string name);
    public static bool HasEnumFlags(MetadataType type);
}
public class ServiceStack.NativeTypes.FSharp.FSharpGenerator : object {
    private MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    private List`1<MetadataType> allTypes;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static Dictionary`2<string, string> TypeAliases;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<FSharpGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static HashSet`1<string> <ExportMarkerInterfaces>k__BackingField;
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`4<FSharpGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public static HashSet`1<string> ExportMarkerInterfaces { get; }
    public FSharpGenerator(MetadataTypesConfig config);
    private static FSharpGenerator();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`4<FSharpGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<FSharpGenerator, MetadataType, MetadataPropertyType, string> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    [CompilerGeneratedAttribute]
public static HashSet`1<string> get_ExportMarkerInterfaces();
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    public virtual string GetPropertyType(MetadataPropertyType prop);
    private string GetDefaultLiteral(MetadataPropertyType prop, MetadataType type);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string NameOnly(string type);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GetPropertyName(string name);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.FSharp.FSharpGeneratorExtensions : object {
    [ExtensionAttribute]
public static bool Contains(Dictionary`2<string, List`1<string>> map, string key, string value);
}
public interface ServiceStack.NativeTypes.ILangGenerator {
    public bool WithoutOptions { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public abstract virtual bool get_WithoutOptions();
    public abstract virtual void set_WithoutOptions(bool value);
    public abstract virtual List`1<string> get_AddQueryParamOptions();
    public abstract virtual void set_AddQueryParamOptions(List`1<string> value);
    public abstract virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
}
public interface ServiceStack.NativeTypes.INativeTypesMetadata {
    public abstract virtual MetadataTypesConfig GetConfig(NativeTypesBase req);
    public abstract virtual MetadataTypes GetMetadataTypes(IRequest req, MetadataTypesConfig config, Func`2<Operation, bool> predicate);
    public abstract virtual MetadataTypesGenerator GetGenerator();
}
public class ServiceStack.NativeTypes.Java.JavaGenerator : object {
    private MetadataTypesConfig Config;
    private List`1<string> conflictTypeNames;
    private List`1<MetadataType> allTypes;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static string DefaultGlobalNamespace;
    public static List`1<string> DefaultImports;
    public static string JavaIoNamespace;
    public static string GSonAnnotationsNamespace;
    public static string GSonReflectNamespace;
    public static ConcurrentDictionary`2<string, string> TypeAliases;
    public static ConcurrentDictionary`2<string, string> ArrayAliases;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<JavaGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    public static HashSet`1<string> IgnoreTypeNames;
    public static HashSet`1<string> ArrayTypes;
    public static HashSet`1<string> DictionaryTypes;
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    unknown static bool AddGsonImport {public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`4<JavaGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public JavaGenerator(MetadataTypesConfig config);
    private static JavaGenerator();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    public static void set_AddGsonImport(bool value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`4<JavaGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<JavaGenerator, MetadataType, MetadataPropertyType, string> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private bool ReferencesGson(MetadataTypes metadata);
    private static bool ReferencesStream(MetadataTypes metadata);
    private List`1<string> RemoveIgnoredTypes(MetadataTypes metadata);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus, bool addPropertyAccessors, string settersReturnType);
    public virtual string GetPropertyType(MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string NameOnly(string type);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GenericArg(string arg);
    public string ConvertFromCSharp(TextNode node);
    public string GetPropertyName(string name);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.Java.JavaGeneratorExtensions : object {
    public static HashSet`1<string> JavaKeyWords;
    private static JavaGeneratorExtensions();
    [ExtensionAttribute]
public static string InheritedType(string type);
    [ExtensionAttribute]
public static bool IsKeyWord(string name);
    [ExtensionAttribute]
public static string PropertyStyle(string name);
    [ExtensionAttribute]
public static MetadataAttribute ToMetadataAttribute(MetadataRoute route);
    [ExtensionAttribute]
public static StringBuilderWrapper AppendPropertyAccessor(StringBuilderWrapper sb, string type, string fieldName, string settersReturnThis);
    [ExtensionAttribute]
public static StringBuilderWrapper AppendPropertyAccessor(StringBuilderWrapper sb, string type, string fieldName, string accessorName, string settersReturnThis);
}
public class ServiceStack.NativeTypes.Kotlin.KotlinGenerator : object {
    private MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    private List`1<string> conflictTypeNames;
    private List`1<MetadataType> allTypes;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static List`1<string> DefaultImports;
    public static string JavaIoNamespace;
    public static string GSonAnnotationsNamespace;
    public static string GSonReflectNamespace;
    public static ConcurrentDictionary`2<string, string> TypeAliases;
    public static ConcurrentDictionary`2<string, string> ArrayAliases;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<KotlinGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    public static HashSet`1<string> IgnoreTypeNames;
    public static HashSet`1<string> ArrayTypes;
    public static HashSet`1<string> DictionaryTypes;
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    unknown static bool AddGsonImport {public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`4<KotlinGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public KotlinGenerator(MetadataTypesConfig config);
    private static KotlinGenerator();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    public static void set_AddGsonImport(bool value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`4<KotlinGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<KotlinGenerator, MetadataType, MetadataPropertyType, string> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private bool ReferencesGson(MetadataTypes metadata);
    private static bool ReferencesStream(MetadataTypes metadata);
    private List`1<string> RemoveIgnoredTypes(MetadataTypes metadata);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool initCollections, bool includeResponseStatus);
    public virtual string GetPropertyType(MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string NameOnly(string type);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GenericArg(string arg);
    public string ConvertFromCSharp(TextNode node);
    public string GetPropertyName(string name);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.Kotlin.KotlinGeneratorExtensions : object {
    public static HashSet`1<string> KotlinKeyWords;
    private static KotlinGeneratorExtensions();
    [ExtensionAttribute]
public static string InheritedType(string type);
    [ExtensionAttribute]
public static bool IsKeyWord(string name);
    [ExtensionAttribute]
public static string PropertyStyle(string name);
    [ExtensionAttribute]
public static MetadataAttribute ToMetadataAttribute(MetadataRoute route);
    [ExtensionAttribute]
public static StringBuilderWrapper AppendPropertyAccessor(StringBuilderWrapper sb, string type, string fieldName, string settersReturnThis);
    [ExtensionAttribute]
public static StringBuilderWrapper AppendPropertyAccessor(StringBuilderWrapper sb, string type, string fieldName, string accessorName, string settersReturnThis);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.LangGeneratorExtensions : object {
    [ExtensionAttribute]
public static string GenerateSourceCode(List`1<MetadataType> metadataTypes, string lang, IRequest req, Action`1<ILangGenerator> configure);
    [ExtensionAttribute]
public static string GenerateSourceCode(MetadataTypes metadataTypes, MetadataTypesConfig typesConfig, string lang, IRequest req, Action`1<ILangGenerator> configure);
    [CompilerGeneratedAttribute]
internal static string <GenerateSourceCode>g__Generate|1_0(ILangGenerator gen, <>c__DisplayClass1_0& );
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.MetadataExtensions : object {
    private static string NameWithReferencesWildCard;
    private static string NamespaceWildCard;
    private static string ReferencesNameWildCard;
    [ExtensionAttribute]
public static MetadataTypeName ToMetadataTypeName(MetadataType type);
    [ExtensionAttribute]
public static MetadataType ToMetadataType(MetadataTypeName type);
    [ExtensionAttribute]
public static List`1<MetadataType> GetAllMetadataTypes(MetadataTypes metadata);
    [ExtensionAttribute]
public static HashSet`1<string> GetReferencedTypeNames(MetadataType type, MetadataTypes metadataTypes);
    [ExtensionAttribute]
internal static bool IsTypeValue(string value);
    [ExtensionAttribute]
internal static string ExtractTypeName(string value);
    [ExtensionAttribute]
public static bool IgnoreSystemType(MetadataType type);
    [ExtensionAttribute]
public static HashSet`1<string> GetDefaultNamespaces(MetadataTypesConfig config, MetadataTypes metadata);
    [ExtensionAttribute]
public static string ToPrettyName(Type type);
    [ExtensionAttribute]
public static void RemoveIgnoredTypesForNet(MetadataTypes metadata, MetadataTypesConfig config);
    [ExtensionAttribute]
public static List`1<string> RemoveIgnoredTypes(MetadataTypes metadata, MetadataTypesConfig config);
    public static List`1<string> GetIncludeList(MetadataTypes metadata, MetadataTypesConfig config);
    [ExtensionAttribute]
public static bool IgnoreType(MetadataType type, MetadataTypesConfig config, List`1<string> overrideIncludeType);
    [ExtensionAttribute]
public static string SanitizeType(string typeName);
    [ExtensionAttribute]
public static string SafeComment(string comment);
    [ExtensionAttribute]
public static string SafeToken(string token);
    [ExtensionAttribute]
public static string SafeValue(string value);
    [ExtensionAttribute]
public static string QuotedSafeValue(string value);
    [ExtensionAttribute]
public static MetadataAttribute ToMetadataAttribute(MetadataRoute route);
    [IteratorStateMachineAttribute("ServiceStack.NativeTypes.MetadataExtensions/<GetAllTypes>d__22")]
[ExtensionAttribute]
public static IEnumerable`1<MetadataType> GetAllTypes(MetadataTypes metadata);
    [ExtensionAttribute]
public static List`1<MetadataType> GetAllTypesOrdered(MetadataTypes metadata);
    [ExtensionAttribute]
public static List`1<MetadataType> CreateSortedTypeList(List`1<MetadataType> allTypes);
    private static void AddTypeToSortedList(List`1<MetadataType> allTypes, List`1<MetadataType> sortedTypes, MetadataType metadataType);
    private static MetadataType FindMetadataTypeByMetadataTypeName(List`1<MetadataType> allTypes, MetadataTypeName metadataTypeName);
    [ExtensionAttribute]
public static void Push(Dictionary`2<string, List`1<string>> map, string key, string value);
    [ExtensionAttribute]
public static List`1<string> GetValues(Dictionary`2<string, List`1<string>> map, string key);
    [ExtensionAttribute]
public static List`1<MetadataType> OrderTypesByDeps(List`1<MetadataType> types);
    [IteratorStateMachineAttribute("ServiceStack.NativeTypes.MetadataExtensions/<GetDepTypes>d__30")]
public static IEnumerable`1<MetadataType> GetDepTypes(Dictionary`2<string, List`1<string>> deps, Dictionary`2<string, MetadataType> typesMap, HashSet`1<string> considered, MetadataType type);
    [ExtensionAttribute]
public static string GetTypeName(MetadataPropertyType prop, MetadataTypesConfig config, List`1<MetadataType> allTypes);
    [ExtensionAttribute]
internal static bool ContainsMatch(HashSet`1<Type> types, Type target);
    [ExtensionAttribute]
internal static string StripNullable(string type);
    public static string StripGenericType(string type, string subType);
    [ExtensionAttribute]
public static bool IsServiceStackType(Type type);
    [ExtensionAttribute]
public static string GetEnumMemberValue(MetadataType type, int i);
    [ExtensionAttribute]
public static string GetAttributeName(Attribute attr);
    [ExtensionAttribute]
public static Type[] GetDirectInterfaces(Type type);
    [ExtensionAttribute]
public static void Emit(StringBuilderWrapper sb, MetadataType type, Lang lang);
    [ExtensionAttribute]
public static void Emit(StringBuilderWrapper sb, MetadataPropertyType propType, Lang lang);
    [ExtensionAttribute]
internal static string EnsureSuffix(string s, char suffix);
    [CompilerGeneratedAttribute]
internal static void <GetReferencedTypeNames>g__Add|3_0(string name, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static void <GetReferencedTypeNames>g__AddType|3_1(MetadataType type, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static void <GetReferencedTypeNames>g__AddAttributes|3_2(List`1<MetadataAttribute> attrs, <>c__DisplayClass3_0& );
}
public class ServiceStack.NativeTypes.MetadataTypesGenerator : object {
    private static ILog log;
    private ServiceMetadata meta;
    private MetadataTypesConfig config;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, Func`2<Attribute, MetadataAttribute>> <AttributeConverters>k__BackingField;
    public static Dictionary`2<Type, Func`2<Attribute, MetadataAttribute>> AttributeConverters { get; }
    public MetadataTypesGenerator(ServiceMetadata meta, MetadataTypesConfig config);
    private static MetadataTypesGenerator();
    public MetadataTypes GetMetadataTypes(IRequest req, Func`2<Operation, bool> predicate);
    private static bool IsSystemCollection(Type type);
    private static bool IsSystemWhitespaceNamespace(Type type);
    public MetadataTypeName ToTypeName(Type type);
    public MetadataType ToFlattenedType(Type type);
    public MetadataType ToType(Type type);
    public MetadataType ToExactType(Type type);
    public static FieldInfo GetEnumMember(Type type, string name);
    private static String[] GetGenericArgs(Type type);
    private MetadataTypeName[] ToInterfaces(Type type);
    public List`1<MetadataAttribute> ToAttributes(Type type);
    public List`1<MetadataPropertyType> ToProperties(Type type);
    public HashSet`1<string> GetNamespacesUsed(Type type);
    public bool IncludeAttrsFilter(Attribute x);
    public List`1<MetadataAttribute> ToAttributes(Object[] attrs);
    public List`1<MetadataAttribute> ToAttributes(IEnumerable`1<Attribute> attrs);
    [CompilerGeneratedAttribute]
public static Dictionary`2<Type, Func`2<Attribute, MetadataAttribute>> get_AttributeConverters();
    public MetadataAttribute ToAttribute(Attribute attr);
    public MetadataAttribute ToMetadataAttribute(Attribute attr);
    public List`1<PropertyInfo> Properties(Attribute attr);
    public List`1<MetadataPropertyType> NonDefaultProperties(Attribute attr);
    public MetadataPropertyType ToProperty(PropertyInfo pi, object instance, Dictionary`2<string, object> ignoreValues);
    public MetadataPropertyType ToProperty(ParameterInfo pi);
    [CompilerGeneratedAttribute]
private bool <ToInterfaces>b__13_0(Type x);
    [CompilerGeneratedAttribute]
private MetadataPropertyType <ToProperties>b__15_0(PropertyInfo x);
}
public class ServiceStack.NativeTypes.NativeTypesBase : object {
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MakePartial>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MakeVirtual>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MakeInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddReturnMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddDescriptionAsComments>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddDocAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddDataContractAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MakeDataContractsExtensible>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddIndexesToDataMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddGeneratedCodeAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InitializeCollections>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AddImplicitVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddResponseStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddServiceStackTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddModelExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddPropertyAccessors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExcludeGenericBaseTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SettersReturnThis>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AddNullableAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MakePropertiesOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExportAsTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExportValueTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExcludeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddDefaultXmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataClassJson>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DefaultNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DefaultImports>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IncludeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExportTags>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TreatTypesAsStrings>k__BackingField;
    public string BaseUrl { get; public set; }
    public Nullable`1<bool> MakePartial { get; public set; }
    public Nullable`1<bool> MakeVirtual { get; public set; }
    public Nullable`1<bool> MakeInternal { get; public set; }
    public Nullable`1<bool> AddReturnMarker { get; public set; }
    public Nullable`1<bool> AddDescriptionAsComments { get; public set; }
    public Nullable`1<bool> AddDocAnnotations { get; public set; }
    public Nullable`1<bool> AddDataContractAttributes { get; public set; }
    public Nullable`1<bool> MakeDataContractsExtensible { get; public set; }
    public Nullable`1<bool> AddIndexesToDataMembers { get; public set; }
    public Nullable`1<bool> AddGeneratedCodeAttributes { get; public set; }
    public Nullable`1<bool> InitializeCollections { get; public set; }
    public Nullable`1<int> AddImplicitVersion { get; public set; }
    public Nullable`1<bool> AddResponseStatus { get; public set; }
    public Nullable`1<bool> AddServiceStackTypes { get; public set; }
    public Nullable`1<bool> AddModelExtensions { get; public set; }
    public Nullable`1<bool> AddPropertyAccessors { get; public set; }
    public Nullable`1<bool> ExcludeGenericBaseTypes { get; public set; }
    public Nullable`1<bool> SettersReturnThis { get; public set; }
    public Nullable`1<bool> AddNullableAnnotations { get; public set; }
    public Nullable`1<bool> MakePropertiesOptional { get; public set; }
    public Nullable`1<bool> ExportAsTypes { get; public set; }
    public Nullable`1<bool> ExportValueTypes { get; public set; }
    public Nullable`1<bool> ExcludeNamespace { get; public set; }
    public string AddDefaultXmlNamespace { get; public set; }
    public string GlobalNamespace { get; public set; }
    public string BaseClass { get; public set; }
    public string Package { get; public set; }
    public string DataClass { get; public set; }
    public string DataClassJson { get; public set; }
    public List`1<string> AddNamespaces { get; public set; }
    public List`1<string> DefaultNamespaces { get; public set; }
    public List`1<string> DefaultImports { get; public set; }
    public List`1<string> IncludeTypes { get; public set; }
    public List`1<string> ExcludeTypes { get; public set; }
    public List`1<string> ExportTags { get; public set; }
    public List`1<string> TreatTypesAsStrings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MakePartial();
    [CompilerGeneratedAttribute]
public void set_MakePartial(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MakeVirtual();
    [CompilerGeneratedAttribute]
public void set_MakeVirtual(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MakeInternal();
    [CompilerGeneratedAttribute]
public void set_MakeInternal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddReturnMarker();
    [CompilerGeneratedAttribute]
public void set_AddReturnMarker(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddDescriptionAsComments();
    [CompilerGeneratedAttribute]
public void set_AddDescriptionAsComments(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddDocAnnotations();
    [CompilerGeneratedAttribute]
public void set_AddDocAnnotations(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddDataContractAttributes();
    [CompilerGeneratedAttribute]
public void set_AddDataContractAttributes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MakeDataContractsExtensible();
    [CompilerGeneratedAttribute]
public void set_MakeDataContractsExtensible(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddIndexesToDataMembers();
    [CompilerGeneratedAttribute]
public void set_AddIndexesToDataMembers(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddGeneratedCodeAttributes();
    [CompilerGeneratedAttribute]
public void set_AddGeneratedCodeAttributes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_InitializeCollections();
    [CompilerGeneratedAttribute]
public void set_InitializeCollections(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AddImplicitVersion();
    [CompilerGeneratedAttribute]
public void set_AddImplicitVersion(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddResponseStatus();
    [CompilerGeneratedAttribute]
public void set_AddResponseStatus(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddServiceStackTypes();
    [CompilerGeneratedAttribute]
public void set_AddServiceStackTypes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddModelExtensions();
    [CompilerGeneratedAttribute]
public void set_AddModelExtensions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddPropertyAccessors();
    [CompilerGeneratedAttribute]
public void set_AddPropertyAccessors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExcludeGenericBaseTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludeGenericBaseTypes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SettersReturnThis();
    [CompilerGeneratedAttribute]
public void set_SettersReturnThis(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AddNullableAnnotations();
    [CompilerGeneratedAttribute]
public void set_AddNullableAnnotations(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MakePropertiesOptional();
    [CompilerGeneratedAttribute]
public void set_MakePropertiesOptional(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExportAsTypes();
    [CompilerGeneratedAttribute]
public void set_ExportAsTypes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExportValueTypes();
    [CompilerGeneratedAttribute]
public void set_ExportValueTypes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExcludeNamespace();
    [CompilerGeneratedAttribute]
public void set_ExcludeNamespace(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_AddDefaultXmlNamespace();
    [CompilerGeneratedAttribute]
public void set_AddDefaultXmlNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_GlobalNamespace();
    [CompilerGeneratedAttribute]
public void set_GlobalNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_BaseClass();
    [CompilerGeneratedAttribute]
public void set_BaseClass(string value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    [CompilerGeneratedAttribute]
public string get_DataClass();
    [CompilerGeneratedAttribute]
public void set_DataClass(string value);
    [CompilerGeneratedAttribute]
public string get_DataClassJson();
    [CompilerGeneratedAttribute]
public void set_DataClassJson(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AddNamespaces();
    [CompilerGeneratedAttribute]
public void set_AddNamespaces(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DefaultNamespaces();
    [CompilerGeneratedAttribute]
public void set_DefaultNamespaces(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DefaultImports();
    [CompilerGeneratedAttribute]
public void set_DefaultImports(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IncludeTypes();
    [CompilerGeneratedAttribute]
public void set_IncludeTypes(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExcludeTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludeTypes(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExportTags();
    [CompilerGeneratedAttribute]
public void set_ExportTags(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TreatTypesAsStrings();
    [CompilerGeneratedAttribute]
public void set_TreatTypesAsStrings(List`1<string> value);
}
public class ServiceStack.NativeTypes.NativeTypesMetadata : object {
    [CompilerGeneratedAttribute]
private ServiceMetadata <meta>P;
    [CompilerGeneratedAttribute]
private MetadataTypesConfig <defaults>P;
    public NativeTypesMetadata(ServiceMetadata meta, MetadataTypesConfig defaults);
    public sealed virtual MetadataTypesConfig GetConfig(NativeTypesBase req);
    public static List`1<string> TrimArgs(List`1<string> from);
    public sealed virtual MetadataTypes GetMetadataTypes(IRequest req, MetadataTypesConfig config, Func`2<Operation, bool> predicate);
    public sealed virtual MetadataTypesGenerator GetGenerator();
    public MetadataTypesGenerator GetGenerator(MetadataTypesConfig config);
}
[RestrictAttribute]
public class ServiceStack.NativeTypes.NativeTypesService : Service {
    [CompilerGeneratedAttribute]
private INativeTypesMetadata <metadata>P;
    [CompilerGeneratedAttribute]
private static List`1<Action`2<IRequest, Dictionary`2<string, string>>> <TypeLinksFilters>k__BackingField;
    public static List`1<Type> ReturnInterfaces;
    public static List`1<Type> BuiltinInterfaces;
    public static List`1<Type> BuiltInClientDtos;
    public static List`1<Action`2<IRequest, Dictionary`2<string, string>>> TypeLinksFilters { get; public set; }
    public NativeTypesService(INativeTypesMetadata metadata);
    private static NativeTypesService();
    [CompilerGeneratedAttribute]
public static List`1<Action`2<IRequest, Dictionary`2<string, string>>> get_TypeLinksFilters();
    [CompilerGeneratedAttribute]
public static void set_TypeLinksFilters(List`1<Action`2<IRequest, Dictionary`2<string, string>>> value);
    public object Any(TypeLinks request);
    private string GetBaseUrl(string baseUrl);
    public MetadataTypes Any(TypesMetadata request);
    [AddHeaderAttribute]
public object Any(TypesCSharp request);
    [AddHeaderAttribute]
public object Any(TypesFSharp request);
    [AddHeaderAttribute]
public object Any(TypesVbNet request);
    [AddHeaderAttribute]
public object Any(TypesTypeScript request);
    [AddHeaderAttribute]
public object Any(TypesTypeScriptDefinition request);
    public string GenerateTypeScript(NativeTypesBase request, MetadataTypesConfig typesConfig);
    [AddHeaderAttribute]
public object Any(TypesCommonJs request);
    [AddHeaderAttribute]
public object Any(TypesMjs request);
    [AddHeaderAttribute]
public object Any(TypesPhp request);
    [AddHeaderAttribute]
public object Any(TypesPython request);
    [AddHeaderAttribute]
public object Any(TypesDart request);
    public MetadataTypes ResolveMetadataTypes(MetadataTypesConfig typesConfig);
    public static MetadataTypes ResolveMetadataTypes(MetadataTypesConfig typesConfig, INativeTypesMetadata nativeTypesMetadata, IRequest req);
    [AddHeaderAttribute]
public object Any(TypesSwift request);
    [AddHeaderAttribute]
public object Any(TypesJava request);
    [AddHeaderAttribute]
public object Any(TypesKotlin request);
    private static void ExportMissingSystemTypes(MetadataTypesConfig typesConfig);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
public class ServiceStack.NativeTypes.Php.PhpGenerator : object {
    public MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    public List`1<string> ConflictTypeNames;
    [CompilerGeneratedAttribute]
private List`1<MetadataType> <AllTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MetadataType> <BuiltInTypes>k__BackingField;
    public static string DefaultGlobalNamespace;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static List`1<string> DefaultImports;
    public static List`1<string> ServiceStackImports;
    public static HashSet`1<string> IgnoreTypeInfosFor;
    public static Dictionary`2<string, string> TypeAliases;
    public static Dictionary`2<string, string> ReturnTypeAliases;
    private static string declaredEmptyString;
    internal static Dictionary`2<string, string> primitiveDefaultValues;
    [CompilerGeneratedAttribute]
private static HashSet`1<string> <ConvertValueTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <UseGenericDefinitionsFor>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <CookedTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <DeclarationTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <CookedDeclarationTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <ReturnMarkerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<List`1<MetadataType>, List`1<MetadataType>> <FilterTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AddedDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<PhpGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<PhpGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> <IsPropertyOptional>k__BackingField;
    public static HashSet`1<string> ArrayTypes;
    public static HashSet`1<string> DictionaryTypes;
    public static HashSet`1<string> AllowedKeyTypes;
    public List`1<MetadataType> AllTypes { get; public set; }
    public List`1<MetadataType> BuiltInTypes { get; public set; }
    public static bool GenerateServiceStackTypes { get; }
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public static HashSet`1<string> ConvertValueTypes { get; public set; }
    public HashSet`1<string> UseGenericDefinitionsFor { get; public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`2<string, string> CookedTypeFilter { get; public set; }
    public static TypeFilterDelegate DeclarationTypeFilter { get; public set; }
    public static Func`2<string, string> CookedDeclarationTypeFilter { get; public set; }
    public static Func`2<string, string> ReturnMarkerFilter { get; public set; }
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public HashSet`1<string> AddedDeclarations { get; public set; }
    public static Func`4<PhpGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static Func`4<PhpGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> IsPropertyOptional { get; public set; }
    unknown static bool UseNullableProperties {public set; }
    public PhpGenerator(MetadataTypesConfig config);
    private static PhpGenerator();
    [CompilerGeneratedAttribute]
public List`1<MetadataType> get_AllTypes();
    [CompilerGeneratedAttribute]
public void set_AllTypes(List`1<MetadataType> value);
    [CompilerGeneratedAttribute]
public List`1<MetadataType> get_BuiltInTypes();
    [CompilerGeneratedAttribute]
public void set_BuiltInTypes(List`1<MetadataType> value);
    public static bool get_GenerateServiceStackTypes();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static HashSet`1<string> get_ConvertValueTypes();
    [CompilerGeneratedAttribute]
public static void set_ConvertValueTypes(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_UseGenericDefinitionsFor();
    [CompilerGeneratedAttribute]
public void set_UseGenericDefinitionsFor(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_CookedTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_CookedTypeFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_DeclarationTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_DeclarationTypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_CookedDeclarationTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_CookedDeclarationTypeFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_ReturnMarkerFilter();
    [CompilerGeneratedAttribute]
public static void set_ReturnMarkerFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<List`1<MetadataType>, List`1<MetadataType>> get_FilterTypes();
    [CompilerGeneratedAttribute]
public static void set_FilterTypes(Func`2<List`1<MetadataType>, List`1<MetadataType>> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AddedDeclarations();
    [CompilerGeneratedAttribute]
public void set_AddedDeclarations(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static Func`4<PhpGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<PhpGenerator, MetadataType, MetadataPropertyType, string> value);
    [CompilerGeneratedAttribute]
public static Func`4<PhpGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> get_IsPropertyOptional();
    [CompilerGeneratedAttribute]
public static void set_IsPropertyOptional(Func`4<PhpGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> value);
    public static void set_UseNullableProperties(bool value);
    public void Init(MetadataTypes metadata);
    public MetadataType FindType(MetadataTypeName typeRef);
    public MetadataType FindType(string name, string namespace);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    public string GetDefaultInitializer(string typeName);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    public string GetPhpClassName(string type, String[] genericArgs);
    public string GetPhpType(MetadataPropertyType prop);
    public string GetPhpType(string typeName);
    public virtual string GetPropertyType(MetadataPropertyType prop, Boolean& isNullable);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    private string PhpPropType(MetadataPropertyType prop, string propType);
    public static Nullable`1<bool> DefaultIsPropertyOptional(PhpGenerator generator, MetadataType type, MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public string DeclarationType(string type, String[] genericArgs);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string NameOnly(string type);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GenericArg(string arg);
    public string ConvertFromCSharp(TextNode node);
    private static string GetKeyType(string keyType);
    public string GetPropertyName(string name);
    public string GetPropertyName(MetadataPropertyType prop);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.Php.PhpGeneratorExtensions : object {
    [ExtensionAttribute]
public static string InReturnMarker(string type);
    [ExtensionAttribute]
public static string PropertyStyle(string name);
}
public class ServiceStack.NativeTypes.Python.PythonGenerator : object {
    public MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    private List`1<string> conflictTypeNames;
    [CompilerGeneratedAttribute]
private List`1<MetadataType> <AllTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static HashSet`1<string> <IgnoreAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataClassJson>k__BackingField;
    public static List`1<string> DefaultImports;
    public static Dictionary`2<string, string> TypeAliases;
    internal static HashSet`1<string> typeAliasValues;
    public static Dictionary`2<string, string> ReturnTypeAliases;
    public static HashSet`1<string> KeyWords;
    public static Dictionary`2<string, string> DefaultValues;
    public static HashSet`1<string> IgnoreTypeInfosFor;
    public static HashSet`1<string> IgnoreReturnMarkersForSubTypesOf;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <CookedTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <DeclarationTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <CookedDeclarationTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <ReturnMarkerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<List`1<MetadataType>, List`1<MetadataType>> <FilterTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static TextCase <TextCase>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AddedDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<PythonGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<PythonGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> <IsPropertyOptional>k__BackingField;
    public static HashSet`1<string> ArrayTypes;
    public static HashSet`1<string> DictionaryTypes;
    public static HashSet`1<string> AllowedKeyTypes;
    public List`1<MetadataType> AllTypes { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public static HashSet`1<string> IgnoreAttributes { get; private set; }
    public static bool IgnoreAllAttributes { get; public set; }
    public string DataClass { get; public set; }
    public string DataClassJson { get; public set; }
    public static bool GenerateServiceStackTypes { get; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`2<string, string> CookedTypeFilter { get; public set; }
    public static TypeFilterDelegate DeclarationTypeFilter { get; public set; }
    public static Func`2<string, string> CookedDeclarationTypeFilter { get; public set; }
    public static Func`2<string, string> ReturnMarkerFilter { get; public set; }
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes { get; public set; }
    public static TextCase TextCase { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public HashSet`1<string> AddedDeclarations { get; public set; }
    public static Func`4<PythonGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static Func`4<PythonGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> IsPropertyOptional { get; public set; }
    public PythonGenerator(MetadataTypesConfig config);
    private static PythonGenerator();
    [CompilerGeneratedAttribute]
public List`1<MetadataType> get_AllTypes();
    [CompilerGeneratedAttribute]
public void set_AllTypes(List`1<MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static HashSet`1<string> get_IgnoreAttributes();
    [CompilerGeneratedAttribute]
private static void set_IgnoreAttributes(HashSet`1<string> value);
    public static bool get_IgnoreAllAttributes();
    public static void set_IgnoreAllAttributes(bool value);
    [CompilerGeneratedAttribute]
public string get_DataClass();
    [CompilerGeneratedAttribute]
public void set_DataClass(string value);
    [CompilerGeneratedAttribute]
public string get_DataClassJson();
    [CompilerGeneratedAttribute]
public void set_DataClassJson(string value);
    public static bool get_GenerateServiceStackTypes();
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_CookedTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_CookedTypeFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_DeclarationTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_DeclarationTypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_CookedDeclarationTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_CookedDeclarationTypeFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_ReturnMarkerFilter();
    [CompilerGeneratedAttribute]
public static void set_ReturnMarkerFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<List`1<MetadataType>, List`1<MetadataType>> get_FilterTypes();
    [CompilerGeneratedAttribute]
public static void set_FilterTypes(Func`2<List`1<MetadataType>, List`1<MetadataType>> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static TextCase get_TextCase();
    [CompilerGeneratedAttribute]
public static void set_TextCase(TextCase value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AddedDeclarations();
    [CompilerGeneratedAttribute]
public void set_AddedDeclarations(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static Func`4<PythonGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<PythonGenerator, MetadataType, MetadataPropertyType, string> value);
    [CompilerGeneratedAttribute]
public static Func`4<PythonGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> get_IsPropertyOptional();
    [CompilerGeneratedAttribute]
public static void set_IsPropertyOptional(Func`4<PythonGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> value);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AsIReturn(string genericArg);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    private static string ConvertSelfReferences(string typeName, string cls);
    public virtual string GetPropertyType(MetadataPropertyType prop, Boolean& isNullable);
    private static string asOptional(string type);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    public static Nullable`1<bool> DefaultIsPropertyOptional(PythonGenerator generator, MetadataType type, MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public string DeclarationType(string type, String[] genericArgs, String& addDeclaration);
    public string ClassType(string typeName, string extend, String[]& genericArgs);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string NameOnly(string type);
    public bool AppendTripleDocs(StringBuilderWrapper sb, string desc);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GenericArg(string arg);
    public string ConvertFromCSharp(TextNode node);
    private static string GetKeyType(string keyType);
    public string GetPropertyName(string name);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.Python.PythonGeneratorExtensions : object {
    private static Char[] pythonGenericDelimChars;
    private static PythonGeneratorExtensions();
    [ExtensionAttribute]
public static string PropertyStyle(string name);
    [ExtensionAttribute]
public static TextNode ParsePythonTypeIntoNodes(string typeDef);
}
public class ServiceStack.NativeTypes.StringBuilderWrapper : object {
    private StringBuilder sb;
    private static int indentSize;
    private int indent;
    private string tab;
    public int Length { get; }
    public StringBuilderWrapper(StringBuilder sb, int indent);
    public void AppendLine(string str);
    public StringBuilderWrapper Indent();
    public StringBuilderWrapper UnIndent();
    public virtual string ToString();
    public void Chop(char c);
    public int get_Length();
}
public class ServiceStack.NativeTypes.Swift.SwiftGenerator : object {
    private MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    private List`1<MetadataType> allTypes;
    private List`1<string> conflictTypeNames;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static List`1<string> DefaultImports;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <EnumNameStrategy>k__BackingField;
    public static ConcurrentDictionary`2<string, string> TypeAliases;
    public static HashSet`1<string> IgnoreTypeNames;
    public static ConcurrentDictionary`2<string, SwiftTypeConverter> Converters;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<SwiftGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    public static HashSet`1<string> OverrideInitForBaseClasses;
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    public static HashSet`1<string> ArrayTypes;
    public static HashSet`1<string> DictionaryTypes;
    public static HashSet`1<string> IgnorePropertyTypeNames;
    public static HashSet`1<string> IgnorePropertyNames;
    public static bool IgnoreArrayReturnTypes;
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public static Func`2<string, string> EnumNameStrategy { get; public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`4<SwiftGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public SwiftGenerator(MetadataTypesConfig config);
    private static SwiftGenerator();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_EnumNameStrategy();
    [CompilerGeneratedAttribute]
public static void set_EnumNameStrategy(Func`2<string, string> value);
    public static string CSharpStyleEnums(string enumName);
    public static string SwiftStyleEnums(string enumName);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`4<SwiftGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<SwiftGenerator, MetadataType, MetadataPropertyType, string> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private List`1<string> RemoveIgnoredTypes(MetadataTypes metadata);
    private string AppendType(StringBuilderWrapper& sb, StringBuilderWrapper& sbExt, MetadataType type, string lastNS, CreateTypeOptions options);
    private void ExtractTypeAliases(CreateTypeOptions options, List`1<string> typeAliases, List`1<string> extends, StringBuilderWrapper& sbExt);
    public List`1<MetadataPropertyType> GetProperties(MetadataType type);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool initCollections, bool includeResponseStatus);
    public virtual string GetPropertyType(MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public MetadataType FindType(string typeName, string typeNamespace, String[] genericArgs);
    public MetadataType FindType(MetadataTypeName typeName);
    private MetadataType CreateType(Type type);
    public string ReturnType(string type, String[] genericArgs);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string NameOnly(string type);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GenericArg(string arg);
    public string ConvertFromCSharp(TextNode node);
    public static string AddGenericConstraints(string typeDef);
    public string GetPropertyName(string name);
    public string GetPropertyName(MetadataPropertyType prop);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.Swift.SwiftGeneratorExtensions : object {
    public static HashSet`1<string> SwiftKeyWords;
    private static SwiftGeneratorExtensions();
    [ExtensionAttribute]
public static string InheritedType(string type);
    [ExtensionAttribute]
public static string PropertyStyle(string name);
    [ExtensionAttribute]
public static string UnescapeReserved(string name);
}
public class ServiceStack.NativeTypes.Swift.SwiftTypeConverter : object {
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecodeMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodeMethod>k__BackingField;
    public string Attribute { get; public set; }
    public string DecodeMethod { get; public set; }
    public string EncodeMethod { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(string value);
    [CompilerGeneratedAttribute]
public string get_DecodeMethod();
    [CompilerGeneratedAttribute]
public void set_DecodeMethod(string value);
    [CompilerGeneratedAttribute]
public string get_EncodeMethod();
    [CompilerGeneratedAttribute]
public void set_EncodeMethod(string value);
}
public class ServiceStack.NativeTypes.TypeFilterDelegate : MulticastDelegate {
    public TypeFilterDelegate(object object, IntPtr method);
    public virtual string Invoke(string typeName, String[] genericArgs);
    public virtual IAsyncResult BeginInvoke(string typeName, String[] genericArgs, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types")]
public class ServiceStack.NativeTypes.TypeLinks : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/js")]
public class ServiceStack.NativeTypes.TypesCommonJs : NativeTypesBase {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Vfx>k__BackingField;
    public Nullable`1<bool> Cache { get; public set; }
    public string Vfx { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Vfx();
    [CompilerGeneratedAttribute]
public void set_Vfx(string value);
}
public class ServiceStack.NativeTypes.TypeScript.CommonJsGenerator : object {
    [CompilerGeneratedAttribute]
private static int <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    public MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    [CompilerGeneratedAttribute]
private string <DictionaryDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AddedDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeScriptGenerator <Gen>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <ReturnTypeFilter>k__BackingField;
    public static int BatchSize { get; public set; }
    public bool WithoutOptions { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public List`1<MetadataType> AllTypes { get; }
    public string DictionaryDeclaration { get; public set; }
    public HashSet`1<string> AddedDeclarations { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public TypeScriptGenerator Gen { get; public set; }
    public Func`2<string, string> ReturnTypeFilter { get; public set; }
    public CommonJsGenerator(MetadataTypesConfig config);
    private static CommonJsGenerator();
    [CompilerGeneratedAttribute]
public static int get_BatchSize();
    [CompilerGeneratedAttribute]
public static void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    public List`1<MetadataType> get_AllTypes();
    [CompilerGeneratedAttribute]
public string get_DictionaryDeclaration();
    [CompilerGeneratedAttribute]
public void set_DictionaryDeclaration(string value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AddedDeclarations();
    [CompilerGeneratedAttribute]
public void set_AddedDeclarations(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public TypeScriptGenerator get_Gen();
    [CompilerGeneratedAttribute]
public void set_Gen(TypeScriptGenerator value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ReturnTypeFilter();
    [CompilerGeneratedAttribute]
public void set_ReturnTypeFilter(Func`2<string, string> value);
    public string Type(string type, String[] genericArgs);
    public string DeclarationType(string type, String[] genericArgs, String& addDeclaration);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    private string GetReturnType(string originalReturnType);
    public static string CreateEmptyClass(string name);
}
public class ServiceStack.NativeTypes.TypeScript.MjsGenerator : object {
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    public MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    [CompilerGeneratedAttribute]
private string <DictionaryDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AddedDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeScriptGenerator <Gen>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <ReturnTypeFilter>k__BackingField;
    public bool WithoutOptions { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public List`1<MetadataType> AllTypes { get; }
    public string DictionaryDeclaration { get; public set; }
    public HashSet`1<string> AddedDeclarations { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public TypeScriptGenerator Gen { get; public set; }
    public Func`2<string, string> ReturnTypeFilter { get; public set; }
    public MjsGenerator(MetadataTypesConfig config);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    public List`1<MetadataType> get_AllTypes();
    [CompilerGeneratedAttribute]
public string get_DictionaryDeclaration();
    [CompilerGeneratedAttribute]
public void set_DictionaryDeclaration(string value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AddedDeclarations();
    [CompilerGeneratedAttribute]
public void set_AddedDeclarations(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public TypeScriptGenerator get_Gen();
    [CompilerGeneratedAttribute]
public void set_Gen(TypeScriptGenerator value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ReturnTypeFilter();
    [CompilerGeneratedAttribute]
public void set_ReturnTypeFilter(Func`2<string, string> value);
    public string Type(string type, String[] genericArgs);
    public string DeclarationType(string type, String[] genericArgs, String& addDeclaration);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    public string GetPropertyName(MetadataPropertyType prop);
    private string GetReturnType(string originalReturnType);
    public static string CreateEmptyClass(string name);
}
public class ServiceStack.NativeTypes.TypeScript.TypeScriptGenerator : object {
    public MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    public List`1<string> ConflictTypeNames;
    [CompilerGeneratedAttribute]
private List`1<MetadataType> <AllTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseUnionTypeEnums>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EmitPartialConstructors>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static List`1<string> DefaultImports;
    public static Dictionary`2<string, string> TypeAliases;
    public static Dictionary`2<string, string> ReturnTypeAliases;
    private static string declaredEmptyString;
    internal static Dictionary`2<string, string> primitiveDefaultValues;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <UseGenericDefinitionsFor>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <CookedTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <DeclarationTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <CookedDeclarationTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <ReturnMarkerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<List`1<MetadataType>, List`1<MetadataType>> <FilterTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <InsertTsNoCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DictionaryDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AddedDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> <IsPropertyOptional>k__BackingField;
    public static HashSet`1<string> ArrayTypes;
    public static HashSet`1<string> DictionaryTypes;
    public static HashSet`1<string> AllowedKeyTypes;
    public List`1<MetadataType> AllTypes { get; public set; }
    public static bool UseUnionTypeEnums { get; public set; }
    public static bool EmitPartialConstructors { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public HashSet`1<string> UseGenericDefinitionsFor { get; public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`2<string, string> CookedTypeFilter { get; public set; }
    public static TypeFilterDelegate DeclarationTypeFilter { get; public set; }
    public static Func`2<string, string> CookedDeclarationTypeFilter { get; public set; }
    public static Func`2<string, string> ReturnMarkerFilter { get; public set; }
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes { get; public set; }
    public static bool InsertTsNoCheck { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public string DictionaryDeclaration { get; public set; }
    public HashSet`1<string> AddedDeclarations { get; public set; }
    public static Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> IsPropertyOptional { get; public set; }
    unknown static bool UseNullableProperties {public set; }
    public TypeScriptGenerator(MetadataTypesConfig config);
    private static TypeScriptGenerator();
    [CompilerGeneratedAttribute]
public List`1<MetadataType> get_AllTypes();
    [CompilerGeneratedAttribute]
public void set_AllTypes(List`1<MetadataType> value);
    [CompilerGeneratedAttribute]
public static bool get_UseUnionTypeEnums();
    [CompilerGeneratedAttribute]
public static void set_UseUnionTypeEnums(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EmitPartialConstructors();
    [CompilerGeneratedAttribute]
public static void set_EmitPartialConstructors(bool value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_UseGenericDefinitionsFor();
    [CompilerGeneratedAttribute]
public void set_UseGenericDefinitionsFor(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_CookedTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_CookedTypeFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_DeclarationTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_DeclarationTypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_CookedDeclarationTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_CookedDeclarationTypeFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_ReturnMarkerFilter();
    [CompilerGeneratedAttribute]
public static void set_ReturnMarkerFilter(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<List`1<MetadataType>, List`1<MetadataType>> get_FilterTypes();
    [CompilerGeneratedAttribute]
public static void set_FilterTypes(Func`2<List`1<MetadataType>, List`1<MetadataType>> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static bool get_InsertTsNoCheck();
    [CompilerGeneratedAttribute]
public static void set_InsertTsNoCheck(bool value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    [CompilerGeneratedAttribute]
public string get_DictionaryDeclaration();
    [CompilerGeneratedAttribute]
public void set_DictionaryDeclaration(string value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AddedDeclarations();
    [CompilerGeneratedAttribute]
public void set_AddedDeclarations(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, string> value);
    [CompilerGeneratedAttribute]
public static Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> get_IsPropertyOptional();
    [CompilerGeneratedAttribute]
public static void set_IsPropertyOptional(Func`4<TypeScriptGenerator, MetadataType, MetadataPropertyType, Nullable`1<bool>> value);
    public static void set_UseNullableProperties(bool value);
    public void Init(MetadataTypes metadata);
    public MetadataType FindType(MetadataTypeName typeRef);
    public MetadataType FindType(string name, string namespace);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, CreateTypeOptions options);
    public virtual string GetPropertyType(MetadataPropertyType prop, Boolean& isNullable);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    public static Nullable`1<bool> DefaultIsPropertyOptional(TypeScriptGenerator generator, MetadataType type, MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName);
    public string DeclarationType(string type, String[] genericArgs, String& addDeclaration);
    public string Type(string type, String[] genericArgs);
    private string TypeAlias(string type);
    public string NameOnly(string type);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
    public string GenericArg(string arg);
    public string ConvertFromCSharp(TextNode node);
    private static string GetKeyType(string keyType);
    public string GetPropertyName(string name);
    public string GetPropertyName(MetadataPropertyType prop);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.TypeScript.TypeScriptGeneratorExtensions : object {
    [ExtensionAttribute]
public static string InReturnMarker(string type);
    [ExtensionAttribute]
public static string PropertyStyle(string name);
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/csharp")]
public class ServiceStack.NativeTypes.TypesCSharp : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/dart")]
public class ServiceStack.NativeTypes.TypesDart : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/fsharp")]
public class ServiceStack.NativeTypes.TypesFSharp : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/java")]
public class ServiceStack.NativeTypes.TypesJava : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/kotlin")]
public class ServiceStack.NativeTypes.TypesKotlin : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/metadata")]
public class ServiceStack.NativeTypes.TypesMetadata : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/mjs")]
public class ServiceStack.NativeTypes.TypesMjs : NativeTypesBase {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Vfx>k__BackingField;
    public Nullable`1<bool> Cache { get; public set; }
    public string Vfx { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Vfx();
    [CompilerGeneratedAttribute]
public void set_Vfx(string value);
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/php")]
public class ServiceStack.NativeTypes.TypesPhp : NativeTypesBase {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Vfx>k__BackingField;
    public Nullable`1<bool> Cache { get; public set; }
    public string Vfx { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Vfx();
    [CompilerGeneratedAttribute]
public void set_Vfx(string value);
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/python")]
public class ServiceStack.NativeTypes.TypesPython : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/swift")]
public class ServiceStack.NativeTypes.TypesSwift : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/swift4")]
public class ServiceStack.NativeTypes.TypesSwift4 : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/typescript")]
public class ServiceStack.NativeTypes.TypesTypeScript : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/typescript.d")]
public class ServiceStack.NativeTypes.TypesTypeScriptDefinition : NativeTypesBase {
}
[ExcludeMetadataAttribute]
[RouteAttribute("/types/vbnet")]
public class ServiceStack.NativeTypes.TypesVbNet : NativeTypesBase {
}
public class ServiceStack.NativeTypes.VbNet.VbNetGenerator : object {
    private MetadataTypesConfig Config;
    private NativeTypesFeature feature;
    private List`1<MetadataType> allTypes;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PreTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <InnerTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<StringBuilderWrapper, MetadataType> <PostTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PrePropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> <PostPropertyFilter>k__BackingField;
    public static Dictionary`2<string, string> TypeAliases;
    public static HashSet`1<string> KeyWords;
    [CompilerGeneratedAttribute]
private static TypeFilterDelegate <TypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<VbNetGenerator, MetadataType, MetadataPropertyType, string> <PropertyTypeFilter>k__BackingField;
    public static Func`2<List`1<MetadataType>, List`1<MetadataType>> FilterTypes;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <InsertCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static AddCodeDelegate <AddCodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddQueryParamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutOptions>k__BackingField;
    public static Action`2<StringBuilderWrapper, MetadataType> PreTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> InnerTypeFilter { get; public set; }
    public static Action`2<StringBuilderWrapper, MetadataType> PostTypeFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PrePropertyFilter { get; public set; }
    public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> PostPropertyFilter { get; public set; }
    public static TypeFilterDelegate TypeFilter { get; public set; }
    public static Func`4<VbNetGenerator, MetadataType, MetadataPropertyType, string> PropertyTypeFilter { get; public set; }
    public static AddCodeDelegate InsertCodeFilter { get; public set; }
    public static AddCodeDelegate AddCodeFilter { get; public set; }
    public List`1<string> AddQueryParamOptions { get; public set; }
    public bool WithoutOptions { get; public set; }
    public VbNetGenerator(MetadataTypesConfig config);
    private static VbNetGenerator();
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PreTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PreTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_InnerTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_InnerTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`2<StringBuilderWrapper, MetadataType> get_PostTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PostTypeFilter(Action`2<StringBuilderWrapper, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PrePropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PrePropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> get_PostPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_PostPropertyFilter(Action`3<StringBuilderWrapper, MetadataPropertyType, MetadataType> value);
    [CompilerGeneratedAttribute]
public static TypeFilterDelegate get_TypeFilter();
    [CompilerGeneratedAttribute]
public static void set_TypeFilter(TypeFilterDelegate value);
    [CompilerGeneratedAttribute]
public static Func`4<VbNetGenerator, MetadataType, MetadataPropertyType, string> get_PropertyTypeFilter();
    [CompilerGeneratedAttribute]
public static void set_PropertyTypeFilter(Func`4<VbNetGenerator, MetadataType, MetadataPropertyType, string> value);
    public static List`1<MetadataType> DefaultFilterTypes(List`1<MetadataType> types);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_InsertCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_InsertCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public static AddCodeDelegate get_AddCodeFilter();
    [CompilerGeneratedAttribute]
public static void set_AddCodeFilter(AddCodeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AddQueryParamOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddQueryParamOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WithoutOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WithoutOptions(bool value);
    public sealed virtual string GetCode(MetadataTypes metadata, IRequest request, INativeTypesMetadata nativeTypes);
    private string AppendType(StringBuilderWrapper& sb, MetadataType type, string lastNS, List`1<MetadataType> allTypes, CreateTypeOptions options);
    private void AddConstructor(StringBuilderWrapper sb, MetadataType type, CreateTypeOptions options);
    public void AddProperties(StringBuilderWrapper sb, MetadataType type, bool includeResponseStatus);
    public virtual string GetPropertyType(MetadataPropertyType prop);
    public bool AppendAttributes(StringBuilderWrapper sb, List`1<MetadataAttribute> attributes);
    public string TypeValue(string type, string value);
    public string Type(MetadataTypeName typeName, bool includeNested);
    public string Type(string type, String[] genericArgs, bool includeNested);
    private string TypeAlias(string type, bool includeNested);
    public string NameOnly(string type, bool includeNested);
    public string EscapeKeyword(string name);
    public string GetPropertyName(string name);
    public bool AppendComments(StringBuilderWrapper sb, string desc);
    public void AppendDataContract(StringBuilderWrapper sb, MetadataDataContract dcMeta);
    public bool AppendDataMember(StringBuilderWrapper sb, MetadataDataMember dmMeta, int dataMemberIndex);
}
[ExtensionAttribute]
public static class ServiceStack.NativeTypes.VbNet.VbNetGeneratorExtensions : object {
    [ExtensionAttribute]
public static string SafeComment(string comment);
    [ExtensionAttribute]
public static string SafeToken(string token);
    [ExtensionAttribute]
public static string SafeValue(string value);
    [ExtensionAttribute]
public static string QuotedSafeValue(string value);
    [ExtensionAttribute]
public static MetadataAttribute ToMetadataAttribute(MetadataRoute route);
}
public class ServiceStack.NativeTypesFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTypesConfig <MetadataTypesConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DisableTokenVerification>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MetadataType, bool> <ShouldInitializeCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTypesGenerator <DefaultGenerator>k__BackingField;
    public string Id { get; public set; }
    public MetadataTypesConfig MetadataTypesConfig { get; public set; }
    public static bool DisableTokenVerification { get; public set; }
    public Func`2<MetadataType, bool> ShouldInitializeCollection { get; public set; }
    public MetadataTypesGenerator DefaultGenerator { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public MetadataTypesConfig get_MetadataTypesConfig();
    [CompilerGeneratedAttribute]
public void set_MetadataTypesConfig(MetadataTypesConfig value);
    [CompilerGeneratedAttribute]
public static bool get_DisableTokenVerification();
    [CompilerGeneratedAttribute]
public static void set_DisableTokenVerification(bool value);
    public static bool AllCollectionProperties(MetadataType type);
    public static bool NonAutoQueryCollectionProperties(MetadataType type);
    [CompilerGeneratedAttribute]
public Func`2<MetadataType, bool> get_ShouldInitializeCollection();
    [CompilerGeneratedAttribute]
public void set_ShouldInitializeCollection(Func`2<MetadataType, bool> value);
    public void ExportAttribute(Func`2<Attribute, MetadataAttribute> converter);
    public void ExportAttribute(Type attributeType, Func`2<Attribute, MetadataAttribute> converter);
    public MetadataTypesGenerator GetGenerator();
    [CompilerGeneratedAttribute]
public MetadataTypesGenerator get_DefaultGenerator();
    [CompilerGeneratedAttribute]
private void set_DefaultGenerator(MetadataTypesGenerator value);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private INativeTypesMetadata <Configure>b__26_0(IServiceProvider c);
}
public class ServiceStack.NotEqualCondition : QueryCondition {
    public static NotEqualCondition Instance;
    public string Alias { get; }
    private static NotEqualCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.OrderByExpression : FilterExpression {
    [CompilerGeneratedAttribute]
private String[] <FieldNames>k__BackingField;
    [CompilerGeneratedAttribute]
private GetMemberDelegate[] <FieldGetters>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <OrderAsc>k__BackingField;
    public String[] FieldNames { get; private set; }
    public GetMemberDelegate[] FieldGetters { get; }
    public Boolean[] OrderAsc { get; }
    public OrderByExpression(String[] fieldNames, GetMemberDelegate[] fieldGetters, Boolean[] orderAsc);
    public OrderByExpression(string fieldName, GetMemberDelegate fieldGetter, bool orderAsc);
    [CompilerGeneratedAttribute]
public String[] get_FieldNames();
    [CompilerGeneratedAttribute]
private void set_FieldNames(String[] value);
    [CompilerGeneratedAttribute]
public GetMemberDelegate[] get_FieldGetters();
    [CompilerGeneratedAttribute]
public Boolean[] get_OrderAsc();
    public virtual IEnumerable`1<T> Apply(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.PersistentImagesHandler : ImagesHandler {
    [CompilerGeneratedAttribute]
private IVirtualFiles <VirtualFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirPath>k__BackingField;
    public IVirtualFiles VirtualFiles { get; }
    public string DirPath { get; }
    public PersistentImagesHandler(string path, StaticContent fallback, IVirtualFiles virtualFiles, string dirPath);
    [CompilerGeneratedAttribute]
public IVirtualFiles get_VirtualFiles();
    [CompilerGeneratedAttribute]
public string get_DirPath();
    public virtual StaticContent Get(string path);
    public virtual void Save(string path, StaticContent content);
}
public class ServiceStack.Platform : object {
    public static Platform Instance;
    private static Platform();
    public virtual HashSet`1<string> GetRazorNamespaces();
    public virtual void InitHostConfig(HostConfig config);
    public virtual string GetNullableAppSetting(string key);
    public virtual string GetAppSetting(string key);
    public virtual string GetAppSetting(string key, string defaultValue);
    public virtual T GetAppSetting(string key, T defaultValue);
    public virtual string GetConnectionString(string key);
    public virtual string GetAppConfigPath();
    public virtual Dictionary`2<string, string> GetCookiesAsDictionary(IRequest httpReq);
    public virtual Dictionary`2<string, string> GetCookiesAsDictionary(IResponse httpRes);
    private static MethodInfo GetParseMethod(Type type);
    private static ConstructorInfo GetConstructorInfo(Type type);
    public static T ParseTextValue(string textValue);
}
public class ServiceStack.Platforms.PlatformNet : Platform {
    public static string ConfigNullValue;
    private static string NamespacesAppSettingsKey;
    public static bool ConfigSectionExists(string sectionName);
    public virtual string GetNullableAppSetting(string key);
    public virtual string GetAppSetting(string key);
    public virtual string GetAppSetting(string key, string defaultValue);
    public virtual string GetConnectionString(string key);
    public virtual T GetAppSetting(string key, T defaultValue);
    public static ConnectionStringSettings GetConnectionStringSetting(string key);
    public virtual void InitHostConfig(HostConfig config);
    public virtual HashSet`1<string> GetRazorNamespaces();
    public virtual string GetAppConfigPath();
    private static Configuration GetAppConfig();
    private static void InferHttpHandlerPath(HostConfig config);
    private static void SetPathsFromConfiguration(HostConfig config, Configuration webConfig, string locationPath);
    private static string ExtractHandlerPathFromWebServerConfigurationXml(string rawXml);
    private static string EnsureHandlerTypeAttribute(XElement handler);
    private static void SetPaths(HostConfig config, string handlerPath, string locationPath);
    public RequestAttributes GetRequestAttributes(OperationContext operationContext);
    public static IPAddress GetIpAddress(OperationContext context);
    public virtual Dictionary`2<string, string> GetCookiesAsDictionary(IRequest httpReq);
    public virtual Dictionary`2<string, string> GetCookiesAsDictionary(IResponse httpRes);
}
[ExtensionAttribute]
public static class ServiceStack.Plugins : object {
    public static string Grpc;
    public static string Cors;
    public static string AutoQuery;
    public static string AutoQueryData;
    public static string AutoQueryMetadata;
    public static string NativeTypes;
    public static string Auth;
    public static string Csv;
    public static string Jsonl;
    public static string Html;
    public static string HttpCache;
    public static string LispTcpServer;
    public static string EncryptedMessaging;
    public static string Metadata;
    public static string MsgPack;
    public static string OpenApi;
    public static string Postman;
    public static string PredefinedRoutes;
    public static string CleanUrls;
    public static string ProtoBuf;
    public static string Razor;
    public static string Register;
    public static string RequestInfo;
    public static string Proxy;
    public static string RequestLogs;
    public static string ServerEvents;
    public static string Session;
    public static string SharpPages;
    public static string Sitemap;
    public static string Soap;
    public static string Svg;
    public static string Validation;
    public static string Desktop;
    public static string WebSudo;
    public static string CancelRequests;
    public static string Swagger;
    public static string MiniProfiler;
    public static string HotReload;
    public static string RedisErrorLogs;
    public static string AdminUsers;
    public static string AdminIdentityUsers;
    public static string AdminRedis;
    public static string AdminDatabase;
    public static string AdminCommands;
    public static string ApiKeys;
    public static string Ui;
    public static string FileUpload;
    public static string Profiling;
    public static string RunAsAdmin;
    public static string BackgroundJobs;
    [ExtensionAttribute]
public static void AddToAppMetadata(IAppHost appHost, Action`1<AppMetadata> fn);
    [ExtensionAttribute]
public static void ModifyAppMetadata(IAppHost appHost, Action`2<IRequest, AppMetadata> fn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ServiceStack.PocoDataSource : object {
    public static PocoDataSource`1<T> Create(ICollection`1<T> items);
    public static PocoDataSource`1<T> Create(IEnumerable`1<T> items, long idSequence);
    public static PocoDataSource`1<T> Create(IEnumerable`1<T> items, Func`2<IEnumerable`1<T>, long> nextIdSequence);
    public static PocoDataSource`1<T> Create(ICollection`1<T> items, Func`2<IEnumerable`1<T>, long> nextId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.PocoDataSource`1 : object {
    private List`1<T> items;
    private long idSequence;
    private PropertyInfo idProp;
    private GetMemberDelegate`1<T> idGetter;
    private SetMemberDelegate`1<T> idSetter;
    private object defaultValue;
    public PocoDataSource`1(IEnumerable`1<T> items, long nextIdSequence);
    public long NextId();
    public List`1<T> GetAll();
    public MemoryDataSource`1<T> ToDataSource(IQueryData dto, IRequest req);
    public T Add(T item);
    public bool TryUpdate(T item);
    public bool TryUpdateById(T item, object itemId);
    public bool TryDelete(T item);
    public bool TryDeleteById(object itemId);
    public int TryDeleteByIds(IEnumerable`1<TId> itemIds);
    private int FindIndexById(object id);
    public T Save(T item);
}
[ExcludeMetadataAttribute]
public class ServiceStack.Postman : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExportSession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ssid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sspid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ssopt>k__BackingField;
    public List`1<string> Label { get; public set; }
    public bool ExportSession { get; public set; }
    public string ssid { get; public set; }
    public string sspid { get; public set; }
    public string ssopt { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ExportSession();
    [CompilerGeneratedAttribute]
public void set_ExportSession(bool value);
    [CompilerGeneratedAttribute]
public string get_ssid();
    [CompilerGeneratedAttribute]
public void set_ssid(string value);
    [CompilerGeneratedAttribute]
public string get_sspid();
    [CompilerGeneratedAttribute]
public void set_sspid(string value);
    [CompilerGeneratedAttribute]
public string get_ssopt();
    [CompilerGeneratedAttribute]
public void set_ssopt(string value);
}
public class ServiceStack.PostmanCollection : object {
    [CompilerGeneratedAttribute]
private PostmanCollectionInfo <info>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PostmanRequest> <item>k__BackingField;
    public PostmanCollectionInfo info { get; public set; }
    public List`1<PostmanRequest> item { get; public set; }
    [CompilerGeneratedAttribute]
public PostmanCollectionInfo get_info();
    [CompilerGeneratedAttribute]
public void set_info(PostmanCollectionInfo value);
    [CompilerGeneratedAttribute]
public List`1<PostmanRequest> get_item();
    [CompilerGeneratedAttribute]
public void set_item(List`1<PostmanRequest> value);
}
public class ServiceStack.PostmanCollectionInfo : object {
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <schema>k__BackingField;
    public string name { get; public set; }
    public string version { get; public set; }
    public string schema { get; public set; }
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public void set_name(string value);
    [CompilerGeneratedAttribute]
public string get_version();
    [CompilerGeneratedAttribute]
public void set_version(string value);
    [CompilerGeneratedAttribute]
public string get_schema();
    [CompilerGeneratedAttribute]
public void set_schema(string value);
}
public class ServiceStack.PostmanData : object {
    [CompilerGeneratedAttribute]
private string <key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <type>k__BackingField;
    public string key { get; public set; }
    public string value { get; public set; }
    public string type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_key();
    [CompilerGeneratedAttribute]
public void set_key(string value);
    [CompilerGeneratedAttribute]
public string get_value();
    [CompilerGeneratedAttribute]
public void set_value(string value);
    [CompilerGeneratedAttribute]
public string get_type();
    [CompilerGeneratedAttribute]
public void set_type(string value);
}
[ExtensionAttribute]
public static class ServiceStack.PostmanExtensions : object {
    private static Char[] PathDelim;
    private static PostmanExtensions();
    [ExtensionAttribute]
internal static String[] SplitPaths(string text);
    [ExtensionAttribute]
public static string ToPostmanPathVariables(string path);
    [ExtensionAttribute]
public static string AsFriendlyName(Type type, PostmanFeature feature);
    [ExtensionAttribute]
public static List`1<PostmanData> ApplyPropertyTypes(List`1<PostmanData> data, Dictionary`2<string, string> typeMap, string defaultValue);
    [ExtensionAttribute]
public static Dictionary`2<string, string> ApplyPropertyTypes(IEnumerable`1<string> names, Dictionary`2<string, string> typeMap, string defaultValue);
}
public class ServiceStack.PostmanFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AtRestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableSessionExport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DefaultLabelFmt>k__BackingField;
    public Dictionary`2<string, string> FriendlyTypeNames;
    [CompilerGeneratedAttribute]
private List`1<string> <DefaultVerbsForAny>k__BackingField;
    public string Id { get; public set; }
    public string AtRestPath { get; public set; }
    public Nullable`1<bool> EnableSessionExport { get; public set; }
    public string Headers { get; public set; }
    public List`1<string> DefaultLabelFmt { get; public set; }
    public List`1<string> DefaultVerbsForAny { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_AtRestPath();
    [CompilerGeneratedAttribute]
public void set_AtRestPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableSessionExport();
    [CompilerGeneratedAttribute]
public void set_EnableSessionExport(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DefaultLabelFmt();
    [CompilerGeneratedAttribute]
public void set_DefaultLabelFmt(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DefaultVerbsForAny();
    [CompilerGeneratedAttribute]
public void set_DefaultVerbsForAny(List`1<string> value);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void Register(IAppHost appHost);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__26_0(MetadataFeature feature);
}
public class ServiceStack.PostmanRequest : object {
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private PostmanRequestDetails <request>k__BackingField;
    public string name { get; public set; }
    public PostmanRequestDetails request { get; public set; }
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public void set_name(string value);
    [CompilerGeneratedAttribute]
public PostmanRequestDetails get_request();
    [CompilerGeneratedAttribute]
public void set_request(PostmanRequestDetails value);
}
public class ServiceStack.PostmanRequestBody : object {
    [CompilerGeneratedAttribute]
private string <mode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PostmanData> <formdata>k__BackingField;
    public string mode { get; public set; }
    public List`1<PostmanData> formdata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_mode();
    [CompilerGeneratedAttribute]
public void set_mode(string value);
    [CompilerGeneratedAttribute]
public List`1<PostmanData> get_formdata();
    [CompilerGeneratedAttribute]
public void set_formdata(List`1<PostmanData> value);
}
public class ServiceStack.PostmanRequestDetails : object {
    [CompilerGeneratedAttribute]
private PostmanRequestUrl <url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <header>k__BackingField;
    [CompilerGeneratedAttribute]
private PostmanRequestBody <body>k__BackingField;
    public PostmanRequestUrl url { get; public set; }
    public string method { get; public set; }
    public string header { get; public set; }
    public PostmanRequestBody body { get; public set; }
    [CompilerGeneratedAttribute]
public PostmanRequestUrl get_url();
    [CompilerGeneratedAttribute]
public void set_url(PostmanRequestUrl value);
    [CompilerGeneratedAttribute]
public string get_method();
    [CompilerGeneratedAttribute]
public void set_method(string value);
    [CompilerGeneratedAttribute]
public string get_header();
    [CompilerGeneratedAttribute]
public void set_header(string value);
    [CompilerGeneratedAttribute]
public PostmanRequestBody get_body();
    [CompilerGeneratedAttribute]
public void set_body(PostmanRequestBody value);
}
public class ServiceStack.PostmanRequestKeyValue : object {
    [CompilerGeneratedAttribute]
private string <value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <key>k__BackingField;
    public string value { get; public set; }
    public string key { get; public set; }
    [CompilerGeneratedAttribute]
public string get_value();
    [CompilerGeneratedAttribute]
public void set_value(string value);
    [CompilerGeneratedAttribute]
public string get_key();
    [CompilerGeneratedAttribute]
public void set_key(string value);
}
public class ServiceStack.PostmanRequestUrl : object {
    [CompilerGeneratedAttribute]
private string <raw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <host>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <port>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PostmanRequestKeyValue> <query>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PostmanRequestKeyValue> <variable>k__BackingField;
    public string raw { get; public set; }
    public string protocol { get; public set; }
    public string host { get; public set; }
    public String[] path { get; public set; }
    public string port { get; public set; }
    public List`1<PostmanRequestKeyValue> query { get; public set; }
    public List`1<PostmanRequestKeyValue> variable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_raw();
    [CompilerGeneratedAttribute]
public void set_raw(string value);
    [CompilerGeneratedAttribute]
public string get_protocol();
    [CompilerGeneratedAttribute]
public void set_protocol(string value);
    [CompilerGeneratedAttribute]
public string get_host();
    [CompilerGeneratedAttribute]
public void set_host(string value);
    [CompilerGeneratedAttribute]
public String[] get_path();
    [CompilerGeneratedAttribute]
public void set_path(String[] value);
    [CompilerGeneratedAttribute]
public string get_port();
    [CompilerGeneratedAttribute]
public void set_port(string value);
    [CompilerGeneratedAttribute]
public List`1<PostmanRequestKeyValue> get_query();
    [CompilerGeneratedAttribute]
public void set_query(List`1<PostmanRequestKeyValue> value);
    [CompilerGeneratedAttribute]
public List`1<PostmanRequestKeyValue> get_variable();
    [CompilerGeneratedAttribute]
public void set_variable(List`1<PostmanRequestKeyValue> value);
}
[DefaultRequestAttribute("ServiceStack.Postman")]
[RestrictAttribute]
public class ServiceStack.PostmanService : Service {
    [AddHeaderAttribute]
public object Any(Postman request);
    public List`1<PostmanRequest> GetRequests(Postman request, string parentId, IEnumerable`1<Operation> operations);
    public string GetName(PostmanFeature feature, Postman request, Type requestType, string virtualPath);
}
public class ServiceStack.PredefinedRoutesFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Func`1<IHttpHandler>> <HandlerMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonApiRoute>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, Dictionary`2<string, List`1<ApiDescription>>> <ApiIndex>k__BackingField;
    public string Id { get; public set; }
    public Dictionary`2<string, Func`1<IHttpHandler>> HandlerMappings { get; }
    public string JsonApiRoute { get; public set; }
    public bool DisableApiRoute { get; public set; }
    public Func`2<IRequest, Dictionary`2<string, List`1<ApiDescription>>> ApiIndex { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`1<IHttpHandler>> get_HandlerMappings();
    [CompilerGeneratedAttribute]
public string get_JsonApiRoute();
    [CompilerGeneratedAttribute]
public void set_JsonApiRoute(string value);
    public bool get_DisableApiRoute();
    public void set_DisableApiRoute(bool value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, Dictionary`2<string, List`1<ApiDescription>>> get_ApiIndex();
    [CompilerGeneratedAttribute]
public void set_ApiIndex(Func`2<IRequest, Dictionary`2<string, List`1<ApiDescription>>> value);
    public static Dictionary`2<string, List`1<ApiDescription>> DefaultApiIndex(IRequest req);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void AfterInit(IAppHost appHost);
    public IHttpHandler GetHandler(IRequest req);
    private IHttpHandler GetHandlerForPathParts(String[] pathParts);
    [CompilerGeneratedAttribute]
private void <Register>b__19_0(AppMetadata metadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.PreProcessRequest : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<IRequest, IHttpFile, CancellationToken, Task`1<string>> <HandleUploadFileAsync>k__BackingField;
    public string Id { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<IRequest, IHttpFile, CancellationToken, Task`1<string>> HandleUploadFileAsync { get; public set; }
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public Func`4<IRequest, IHttpFile, CancellationToken, Task`1<string>> get_HandleUploadFileAsync();
    [CompilerGeneratedAttribute]
public void set_HandleUploadFileAsync(Func`4<IRequest, IHttpFile, CancellationToken, Task`1<string>> value);
    public sealed virtual void Register(IAppHost appHost);
    [AsyncStateMachineAttribute("ServiceStack.PreProcessRequest/<HandleFileUploadsAsync>d__7")]
public Task HandleFileUploadsAsync(IRequest req, IResponse res, object dto);
    private static object CreateFromHttpFileInfo(string filePath, IHttpFile file, Type intoType);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task <Register>b__6_0(IRequest req, object dto);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.ProfilerDiagnosticObserver : object {
    [CompilerGeneratedAttribute]
private ProfilingFeature <feature>P;
    [CompilerGeneratedAttribute]
private static int <AnalyzeCommandLength>k__BackingField;
    private int capacity;
    private ConcurrentQueue`1<DiagnosticEntry> entries;
    private long idCounter;
    private List`1<IDisposable> subscriptions;
    private ConcurrentDictionary`2<Guid, object> refs;
    private static ILog log;
    public static int AnalyzeCommandLength { get; public set; }
    public ProfilerDiagnosticObserver(ProfilingFeature feature);
    private static ProfilerDiagnosticObserver();
    [CompilerGeneratedAttribute]
public static int get_AnalyzeCommandLength();
    [CompilerGeneratedAttribute]
public static void set_AnalyzeCommandLength(int value);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnNext(DiagnosticListener diagnosticListener);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public List`1<DiagnosticEntry> GetLatestEntries(Nullable`1<int> take);
    public List`1<DiagnosticEntry> GetPendingEntries(Nullable`1<int> take);
    [ConditionalAttribute("DEBUG")]
private static void LogNotTracked(RequestDiagnosticEvent before);
    private DiagnosticEntry AddEntry(DiagnosticEntry entry);
    public DiagnosticEntry CreateDiagnosticEntry(DiagnosticEvent e, DiagnosticEvent orig);
    public static void SetException(DiagnosticEntry to, Exception ex);
    public DiagnosticEntry Filter(DiagnosticEntry entry, DiagnosticEvent e);
    public DiagnosticEntry ToDiagnosticEntry(RequestDiagnosticEvent e, RequestDiagnosticEvent orig);
    public DiagnosticEntry ToDiagnosticEntry(MqRequestDiagnosticEvent e, MqRequestDiagnosticEvent orig);
    [NullableContextAttribute("2")]
private bool IncludeRequestDto(Type requestType);
    private bool ShouldTrack(RequestDiagnosticEvent e);
    private bool ShouldTrack(MqRequestDiagnosticEvent e);
    private void AddServiceStack(RequestDiagnosticEvent before);
    private void AddServiceStack(RequestDiagnosticEvent before, RequestDiagnosticEvent after);
    private void AddServiceStack(MqRequestDiagnosticEvent before);
    private void AddServiceStack(MqRequestDiagnosticEvent before, MqRequestDiagnosticEvent after);
    public DiagnosticEntry ToDiagnosticEntry(OrmLiteDiagnosticEvent e, OrmLiteDiagnosticEvent orig);
    private void AddOrmLite(OrmLiteDiagnosticEvent before);
    private void AddOrmLite(OrmLiteDiagnosticEvent before, OrmLiteDiagnosticEvent after);
    public DiagnosticEntry ToDiagnosticEntry(RedisDiagnosticEvent e, RedisDiagnosticEvent orig);
    private void AddRedis(RedisDiagnosticEvent before);
    private void AddRedis(RedisDiagnosticEvent before, RedisDiagnosticEvent after);
    public sealed virtual void OnNext(KeyValuePair`2<string, object> kvp);
    private string StringBody(string s);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.ProfilingFeature : object {
    public static int DefaultCapacity;
    [CompilerGeneratedAttribute]
private string <AccessRole>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileSource <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ExcludeRequestDtoTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludeRequestPathInfoStartingWith>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <ExcludeRequestsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <HideRequestBodyForRequestDtoTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ExcludeResponseTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <ResponseTrackingFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeStackTrace>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IRequest, string> <TagResolver>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TagLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SummaryFields>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultLimit>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<DiagnosticEntry, DiagnosticEvent> <DiagnosticEntryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBodyLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfilerDiagnosticObserver <Observer>k__BackingField;
    protected internal long startTick;
    protected internal DateTime startDateTime;
    public string Id { get; }
    public string AccessRole { get; public set; }
    public ProfileSource Profile { get; public set; }
    public int Capacity { get; public set; }
    public List`1<Type> ExcludeRequestDtoTypes { get; public set; }
    public List`1<string> ExcludeRequestPathInfoStartingWith { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IRequest, bool> ExcludeRequestsFilter { get; public set; }
    public List`1<Type> HideRequestBodyForRequestDtoTypes { get; public set; }
    public List`1<Type> ExcludeResponseTypes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IRequest, bool> ResponseTrackingFilter { get; public set; }
    public Nullable`1<bool> IncludeStackTrace { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IRequest, string> TagResolver { get; public set; }
    [NullableAttribute("2")]
public string TagLabel { get; public set; }
    public List`1<string> SummaryFields { get; public set; }
    public int DefaultLimit { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<DiagnosticEntry, DiagnosticEvent> DiagnosticEntryFilter { get; public set; }
    public int MaxBodyLength { get; public set; }
    protected internal ProfilerDiagnosticObserver Observer { get; protected internal set; }
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public string get_AccessRole();
    [CompilerGeneratedAttribute]
public void set_AccessRole(string value);
    [CompilerGeneratedAttribute]
public ProfileSource get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(ProfileSource value);
    [CompilerGeneratedAttribute]
public int get_Capacity();
    [CompilerGeneratedAttribute]
public void set_Capacity(int value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ExcludeRequestDtoTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludeRequestDtoTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExcludeRequestPathInfoStartingWith();
    [CompilerGeneratedAttribute]
public void set_ExcludeRequestPathInfoStartingWith(List`1<string> value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_ExcludeRequestsFilter();
    [CompilerGeneratedAttribute]
public void set_ExcludeRequestsFilter(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_HideRequestBodyForRequestDtoTypes();
    [CompilerGeneratedAttribute]
public void set_HideRequestBodyForRequestDtoTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ExcludeResponseTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludeResponseTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_ResponseTrackingFilter();
    [CompilerGeneratedAttribute]
public void set_ResponseTrackingFilter(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeStackTrace();
    [CompilerGeneratedAttribute]
public void set_IncludeStackTrace(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, string> get_TagResolver();
    [CompilerGeneratedAttribute]
public void set_TagResolver(Func`2<IRequest, string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TagLabel();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TagLabel(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_SummaryFields();
    [CompilerGeneratedAttribute]
public void set_SummaryFields(List`1<string> value);
    [CompilerGeneratedAttribute]
public int get_DefaultLimit();
    [CompilerGeneratedAttribute]
public void set_DefaultLimit(int value);
    [CompilerGeneratedAttribute]
public Action`2<DiagnosticEntry, DiagnosticEvent> get_DiagnosticEntryFilter();
    [CompilerGeneratedAttribute]
public void set_DiagnosticEntryFilter(Action`2<DiagnosticEntry, DiagnosticEvent> value);
    [CompilerGeneratedAttribute]
public int get_MaxBodyLength();
    [CompilerGeneratedAttribute]
public void set_MaxBodyLength(int value);
    [CompilerGeneratedAttribute]
protected internal ProfilerDiagnosticObserver get_Observer();
    [CompilerGeneratedAttribute]
protected internal void set_Observer(ProfilerDiagnosticObserver value);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__76_0(UiFeature feature);
}
public class ServiceStack.ProxyFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    private Func`2<IHttpRequest, bool> matchingRequests;
    public Func`2<IHttpRequest, string> ResolveUrl;
    [CompilerGeneratedAttribute]
private Action`2<IHttpRequest, HttpWebRequest> <ProxyRequestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IHttpResponse, HttpWebResponse> <ProxyResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IHttpRequest, Stream, Task`1<Stream>> <TransformRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IHttpResponse, Stream, Task`1<Stream>> <TransformResponse>k__BackingField;
    public HashSet`1<string> IgnoreResponseHeaders;
    public string Id { get; public set; }
    public Action`2<IHttpRequest, HttpWebRequest> ProxyRequestFilter { get; public set; }
    public Action`2<IHttpResponse, HttpWebResponse> ProxyResponseFilter { get; public set; }
    public Func`3<IHttpRequest, Stream, Task`1<Stream>> TransformRequest { get; public set; }
    public Func`3<IHttpResponse, Stream, Task`1<Stream>> TransformResponse { get; public set; }
    public ProxyFeature(Func`2<IHttpRequest, bool> matchingRequests, Func`2<IHttpRequest, string> resolveUrl);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Action`2<IHttpRequest, HttpWebRequest> get_ProxyRequestFilter();
    [CompilerGeneratedAttribute]
public void set_ProxyRequestFilter(Action`2<IHttpRequest, HttpWebRequest> value);
    [CompilerGeneratedAttribute]
public Action`2<IHttpResponse, HttpWebResponse> get_ProxyResponseFilter();
    [CompilerGeneratedAttribute]
public void set_ProxyResponseFilter(Action`2<IHttpResponse, HttpWebResponse> value);
    [CompilerGeneratedAttribute]
public Func`3<IHttpRequest, Stream, Task`1<Stream>> get_TransformRequest();
    [CompilerGeneratedAttribute]
public void set_TransformRequest(Func`3<IHttpRequest, Stream, Task`1<Stream>> value);
    [CompilerGeneratedAttribute]
public Func`3<IHttpResponse, Stream, Task`1<Stream>> get_TransformResponse();
    [CompilerGeneratedAttribute]
public void set_TransformResponse(Func`3<IHttpResponse, Stream, Task`1<Stream>> value);
    public sealed virtual void Register(IAppHost appHost);
    [CompilerGeneratedAttribute]
private IHttpHandler <Register>b__24_0(IHttpRequest req);
}
public class ServiceStack.ProxyFeatureHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private Func`2<IHttpRequest, string> <ResolveUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IHttpRequest, HttpWebRequest> <ProxyRequestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IHttpResponse, HttpWebResponse> <ProxyResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IHttpRequest, Stream, Task`1<Stream>> <TransformRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IHttpResponse, Stream, Task`1<Stream>> <TransformResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoreResponseHeaders>k__BackingField;
    public Func`2<IHttpRequest, string> ResolveUrl { get; public set; }
    public Action`2<IHttpRequest, HttpWebRequest> ProxyRequestFilter { get; public set; }
    public Action`2<IHttpResponse, HttpWebResponse> ProxyResponseFilter { get; public set; }
    public Func`3<IHttpRequest, Stream, Task`1<Stream>> TransformRequest { get; public set; }
    public Func`3<IHttpResponse, Stream, Task`1<Stream>> TransformResponse { get; public set; }
    public HashSet`1<string> IgnoreResponseHeaders { get; public set; }
    public virtual bool RunAsAsync();
    [CompilerGeneratedAttribute]
public Func`2<IHttpRequest, string> get_ResolveUrl();
    [CompilerGeneratedAttribute]
public void set_ResolveUrl(Func`2<IHttpRequest, string> value);
    [CompilerGeneratedAttribute]
public Action`2<IHttpRequest, HttpWebRequest> get_ProxyRequestFilter();
    [CompilerGeneratedAttribute]
public void set_ProxyRequestFilter(Action`2<IHttpRequest, HttpWebRequest> value);
    [CompilerGeneratedAttribute]
public Action`2<IHttpResponse, HttpWebResponse> get_ProxyResponseFilter();
    [CompilerGeneratedAttribute]
public void set_ProxyResponseFilter(Action`2<IHttpResponse, HttpWebResponse> value);
    [CompilerGeneratedAttribute]
public Func`3<IHttpRequest, Stream, Task`1<Stream>> get_TransformRequest();
    [CompilerGeneratedAttribute]
public void set_TransformRequest(Func`3<IHttpRequest, Stream, Task`1<Stream>> value);
    [CompilerGeneratedAttribute]
public Func`3<IHttpResponse, Stream, Task`1<Stream>> get_TransformResponse();
    [CompilerGeneratedAttribute]
public void set_TransformResponse(Func`3<IHttpResponse, Stream, Task`1<Stream>> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoreResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_IgnoreResponseHeaders(HashSet`1<string> value);
    public virtual Task ProcessRequestAsync(IRequest req, IResponse response, string operationName);
    [AsyncStateMachineAttribute("ServiceStack.ProxyFeatureHandler/<ProxyRequestAsync>d__26")]
public virtual Task ProxyRequestAsync(IHttpRequest httpReq, string url);
    [AsyncStateMachineAttribute("ServiceStack.ProxyFeatureHandler/<ProxyRequestAsync>d__27")]
public Task ProxyRequestAsync(IHttpRequest httpReq, HttpWebRequest webReq);
    public static void InitWebRequest(IHttpRequest httpReq, HttpWebRequest webReq);
    [AsyncStateMachineAttribute("ServiceStack.ProxyFeatureHandler/<ProxyToResponse>d__29")]
public Task ProxyToResponse(IHttpResponse res, HttpWebRequest webReq);
    [AsyncStateMachineAttribute("ServiceStack.ProxyFeatureHandler/<CopyToResponse>d__30")]
public virtual Task CopyToResponse(IHttpResponse res, HttpWebResponse webRes);
}
public abstract class ServiceStack.QueryCondition : object {
    [CompilerGeneratedAttribute]
private QueryTerm <Term>k__BackingField;
    public string Alias { get; }
    public QueryTerm Term { get; public set; }
    public abstract virtual string get_Alias();
    [CompilerGeneratedAttribute]
public QueryTerm get_Term();
    [CompilerGeneratedAttribute]
public void set_Term(QueryTerm value);
    public abstract virtual bool Match(object a, object b);
    public virtual int CompareTo(object a, object b);
}
public class ServiceStack.QueryDataContext : object {
    [CompilerGeneratedAttribute]
private IQueryData <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <DynamicParams>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypedQueryData <TypedQuery>k__BackingField;
    public IQueryData Dto { get; public set; }
    public Dictionary`2<string, string> DynamicParams { get; public set; }
    public IRequest Request { get; public set; }
    public ITypedQueryData TypedQuery { get; public set; }
    [CompilerGeneratedAttribute]
public IQueryData get_Dto();
    [CompilerGeneratedAttribute]
public void set_Dto(IQueryData value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_DynamicParams();
    [CompilerGeneratedAttribute]
public void set_DynamicParams(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public ITypedQueryData get_TypedQuery();
    [CompilerGeneratedAttribute]
public void set_TypedQuery(ITypedQueryData value);
}
public class ServiceStack.QueryDataField : object {
    [CompilerGeneratedAttribute]
private QueryTerm <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryCondition <QueryCondition>k__BackingField;
    public QueryTerm Term { get; public set; }
    public string Condition { get; public set; }
    public string Field { get; public set; }
    public QueryCondition QueryCondition { get; public set; }
    [CompilerGeneratedAttribute]
public QueryTerm get_Term();
    [CompilerGeneratedAttribute]
public void set_Term(QueryTerm value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public QueryCondition get_QueryCondition();
    [CompilerGeneratedAttribute]
public void set_QueryCondition(QueryCondition value);
}
public class ServiceStack.QueryDataFilterContext : object {
    [CompilerGeneratedAttribute]
private IQueryDataSource <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Command> <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryData <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataQuery <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryResponse <Response>k__BackingField;
    public IQueryDataSource Db { get; public set; }
    public List`1<Command> Commands { get; public set; }
    public IQueryData Dto { get; public set; }
    public IDataQuery Query { get; public set; }
    public IQueryResponse Response { get; public set; }
    [CompilerGeneratedAttribute]
public IQueryDataSource get_Db();
    [CompilerGeneratedAttribute]
public void set_Db(IQueryDataSource value);
    [CompilerGeneratedAttribute]
public List`1<Command> get_Commands();
    [CompilerGeneratedAttribute]
public void set_Commands(List`1<Command> value);
    [CompilerGeneratedAttribute]
public IQueryData get_Dto();
    [CompilerGeneratedAttribute]
public void set_Dto(IQueryData value);
    [CompilerGeneratedAttribute]
public IDataQuery get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(IDataQuery value);
    [CompilerGeneratedAttribute]
public IQueryResponse get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(IQueryResponse value);
}
public class ServiceStack.QueryDataFilterDelegate : MulticastDelegate {
    public QueryDataFilterDelegate(object object, IntPtr method);
    public virtual void Invoke(IDataQuery q, IQueryData dto, IRequest req);
    public virtual IAsyncResult BeginInvoke(IDataQuery q, IQueryData dto, IRequest req, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class ServiceStack.QueryDataSource`1 : object {
    private QueryDataContext context;
    protected QueryDataSource`1(QueryDataContext context);
    public virtual IDataQuery From();
    public abstract virtual IEnumerable`1<T> GetDataSource(IDataQuery q);
    public virtual IEnumerable`1<T> ApplyConditions(IEnumerable`1<T> data, IEnumerable`1<DataConditionExpression> conditions);
    public virtual List`1<Into> LoadSelect(IDataQuery q);
    public virtual IEnumerable`1<T> ApplySorting(IEnumerable`1<T> source, OrderByExpression orderBy);
    public virtual IEnumerable`1<T> ApplyLimits(IEnumerable`1<T> source, Nullable`1<int> skip, Nullable`1<int> take);
    public virtual int Count(IDataQuery q);
    public virtual object SelectAggregate(IDataQuery q, string name, IEnumerable`1<string> args);
    public virtual void Dispose();
}
public class ServiceStack.RedisErrorLoggerFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    private static ILog Log;
    private IRedisClientsManager redisManager;
    public static string UrnServiceErrorType;
    public static string CombinedServiceLogId;
    public string Id { get; public set; }
    public RedisErrorLoggerFeature(IRedisClientsManager redisManager);
    private static RedisErrorLoggerFeature();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public sealed virtual void Register(IAppHost appHost);
    public void HandleUncaughtException(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    public object HandleServiceException(IRequest httpReq, object request, Exception ex);
    private void LogErrorInRedis(string operationName, Exception ex);
}
public class ServiceStack.RegistrationFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AtRestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InputInfo> <FormLayout>k__BackingField;
    public string Id { get; public set; }
    public string AtRestPath { get; public set; }
    public List`1<InputInfo> FormLayout { get; public set; }
    public ValidateFn ValidateFn { get; public set; }
    public bool AllowUpdates { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_AtRestPath();
    [CompilerGeneratedAttribute]
public void set_AtRestPath(string value);
    [CompilerGeneratedAttribute]
public List`1<InputInfo> get_FormLayout();
    [CompilerGeneratedAttribute]
public void set_FormLayout(List`1<InputInfo> value);
    public ValidateFn get_ValidateFn();
    public void set_ValidateFn(ValidateFn value);
    public bool get_AllowUpdates();
    public void set_AllowUpdates(bool value);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    [CompilerGeneratedAttribute]
private void <Register>b__19_0(Operation op);
}
[DefaultRequestAttribute("ServiceStack.ReplaceFileUpload")]
public class ServiceStack.ReplaceFileUploadService : Service {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("ServiceStack.ReplaceFileUploadService/<Put>d__0")]
public Task`1<object> Put(ReplaceFileUpload request);
}
public abstract class ServiceStack.RepositoryBase : object {
    [CompilerGeneratedAttribute]
private IDbConnectionFactory <DbFactory>k__BackingField;
    private IDbConnection db;
    public IDbConnectionFactory DbFactory { get; public set; }
    public IDbConnection Db { get; }
    [CompilerGeneratedAttribute]
public virtual IDbConnectionFactory get_DbFactory();
    [CompilerGeneratedAttribute]
public virtual void set_DbFactory(IDbConnectionFactory value);
    public virtual IDbConnection get_Db();
    public virtual void Dispose();
}
public class ServiceStack.RequestContext : object {
    public static RequestContext Instance;
    public static bool UseThreadStatic;
    [ThreadStaticAttribute]
public static IDictionary RequestItems;
    private static string _key;
    public IDictionary Items { get; public set; }
    private static RequestContext();
    public void StartRequestContext();
    public virtual IDictionary get_Items();
    public virtual void set_Items(IDictionary value);
    private IDictionary GetItems();
    private IDictionary CreateItems(IDictionary items);
    public T GetOrCreate(Func`1<T> createFn);
    public void EndRequest();
    public void TrackDisposable(IDisposable instance);
    public bool ReleaseDisposables();
}
public class ServiceStack.RequestDiagnosticEvent : DiagnosticEvent {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public string Source { get; }
    public IRequest Request { get; public set; }
    public virtual string get_Source();
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(IRequest value);
}
[ExtensionAttribute]
public static class ServiceStack.RequestExtensions : object {
    private static double TimestampToTicks;
    private static RequestExtensions();
    [ExtensionAttribute]
public static AuthUserSession ReloadSession(IRequest request);
    [ExtensionAttribute]
public static string GetCompressionType(IRequest request);
    [ExtensionAttribute]
public static IStreamCompressor GetCompressor(IRequest request);
    [ExtensionAttribute]
public static string GetContentEncoding(IRequest request);
    [ExtensionAttribute]
public static Stream GetInputStream(IRequest req, Stream stream);
    [ExtensionAttribute]
public static string GetHeader(IRequest request, string headerName);
    [ExtensionAttribute]
public static string GetParamInRequestHeader(IRequest request, string name);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ToOptimizedResultAsync")]
public static object ToOptimizedResult(IRequest request, object dto);
    [AsyncStateMachineAttribute("ServiceStack.RequestExtensions/<ToOptimizedResultAsync>d__8")]
[ExtensionAttribute]
public static Task`1<object> ToOptimizedResultAsync(IRequest request, object dto);
    [ExtensionAttribute]
public static object ToOptimizedResultUsingCache(IRequest req, ICacheClient cacheClient, string cacheKey, Func`1<T> factoryFn);
    [ExtensionAttribute]
public static Task`1<object> ToOptimizedResultUsingCacheAsync(IRequest req, ICacheClientAsync cacheClient, string cacheKey, Func`1<T> factoryFn, CancellationToken token);
    [ExtensionAttribute]
public static object ToOptimizedResultUsingCache(IRequest req, ICacheClient cacheClient, string cacheKey, Nullable`1<TimeSpan> expireCacheIn, Func`1<T> factoryFn);
    [AsyncStateMachineAttribute("ServiceStack.RequestExtensions/<ToOptimizedResultUsingCacheAsync>d__12`1")]
[ExtensionAttribute]
public static Task`1<object> ToOptimizedResultUsingCacheAsync(IRequest req, ICacheClientAsync cacheClient, string cacheKey, Nullable`1<TimeSpan> expireCacheIn, Func`1<T> factoryFn, CancellationToken token);
    [ExtensionAttribute]
public static void SetItem(IRequest httpReq, string key, object value);
    [ExtensionAttribute]
public static object GetItem(IRequest httpReq, string key);
    [ExtensionAttribute]
public static RequestBaseWrapper ToHttpRequestBase(IRequest httpReq);
    [ExtensionAttribute]
public static void SetInProcessRequest(IRequest httpReq);
    [ExtensionAttribute]
public static bool IsInProcessRequest(IRequest httpReq);
    [ExtensionAttribute]
public static void ReleaseIfInProcessRequest(IRequest httpReq);
    [ExtensionAttribute]
internal static T TryResolveInternal(IRequest request);
    [ExtensionAttribute]
internal static object TryResolveInternal(IRequest request, Type type);
    [ExtensionAttribute]
public static IVirtualFile GetFile(IRequest request);
    [ExtensionAttribute]
public static IVirtualDirectory GetDirectory(IRequest request);
    [ExtensionAttribute]
public static bool IsFile(IRequest request);
    [ExtensionAttribute]
public static bool IsDirectory(IRequest request);
    [ExtensionAttribute]
public static IVirtualFiles GetVirtualFiles(IRequest request);
    [ExtensionAttribute]
public static IVirtualPathProvider GetVirtualFileSources(IRequest request);
    [ExtensionAttribute]
public static T GetRuntimeConfig(IRequest req, string name, T defaultValue);
    [ExtensionAttribute]
public static void RegisterForDispose(IRequest request, IDisposable disposable);
    [AsyncStateMachineAttribute("ServiceStack.RequestExtensions/<GetSessionFromSourceAsync>d__29")]
[ExtensionAttribute]
public static Task`1<SessionSourceResult> GetSessionFromSourceAsync(IRequest request, string userAuthId, Func`3<IAuthRepositoryAsync, IUserAuth, Task> validator, CancellationToken token);
    [ExtensionAttribute]
public static string GetTraceId(IRequest req);
    [ExtensionAttribute]
public static TimeSpan GetElapsed(IRequest req);
    [ExtensionAttribute]
public static bool AllowConnection(IRequest req, bool requireSecureConnection);
    [ExtensionAttribute]
public static void CompletedAuthentication(IRequest req);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetRequestParams(IRequest request);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetRequestParams(IRequest request, HashSet`1<string> exclude);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetDtoQueryParams(IRequest request);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetDtoQueryParams(IRequest request, HashSet`1<string> exclude);
}
public abstract class ServiceStack.RequestFilterAsyncAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyTo <ApplyTo>k__BackingField;
    public int Priority { get; public set; }
    public ApplyTo ApplyTo { get; public set; }
    public RequestFilterAsyncAttribute(ApplyTo applyTo);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public ApplyTo get_ApplyTo();
    [CompilerGeneratedAttribute]
public void set_ApplyTo(ApplyTo value);
    public sealed virtual Task RequestFilterAsync(IRequest req, IResponse res, object requestDto);
    public abstract virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    public virtual IRequestFilterBase Copy();
}
public abstract class ServiceStack.RequestFilterAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyTo <ApplyTo>k__BackingField;
    public int Priority { get; public set; }
    public ApplyTo ApplyTo { get; public set; }
    public RequestFilterAttribute(ApplyTo applyTo);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public ApplyTo get_ApplyTo();
    [CompilerGeneratedAttribute]
public void set_ApplyTo(ApplyTo value);
    public sealed virtual void RequestFilter(IRequest req, IResponse res, object requestDto);
    public abstract virtual void Execute(IRequest req, IResponse res, object requestDto);
    public virtual IRequestFilterBase Copy();
}
public enum ServiceStack.RequestFilterPriority : Enum {
    public int value__;
    public static RequestFilterPriority Authenticate;
    public static RequestFilterPriority RequiredRole;
    public static RequestFilterPriority RequiredPermission;
}
public class ServiceStack.RequestInfoFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public sealed virtual void Register(IAppHost appHost);
    public IHttpHandler GetHandler(IRequest req);
    private static IHttpHandler GetHandlerForPathParts(String[] pathParts);
}
public class ServiceStack.RequestLogsFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AtRestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSessionTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRequestBodyTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <RequestBodyTrackingFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableResponseTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <ResponseTrackingFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableErrorTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <SkipLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Capacity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessRole>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestLogger <RequestLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ExcludeRequestDtoTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <HideRequestBodyForRequestDtoTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ExcludeResponseTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitToServiceRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IRequest, RequestLogEntry> <RequestLogFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <IgnoreTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <IgnoreFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<DateTime> <CurrentDateFn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegisterAllowRuntimeTypeInTypes>k__BackingField;
    private Type requestLoggerType;
    public string Id { get; public set; }
    public string AtRestPath { get; public set; }
    public bool EnableSessionTracking { get; public set; }
    public bool EnableRequestBodyTracking { get; public set; }
    public Func`2<IRequest, bool> RequestBodyTrackingFilter { get; public set; }
    public bool EnableResponseTracking { get; public set; }
    public Func`2<IRequest, bool> ResponseTrackingFilter { get; public set; }
    public bool EnableErrorTracking { get; public set; }
    public Func`2<IRequest, bool> SkipLogging { get; public set; }
    public Nullable`1<int> Capacity { get; public set; }
    public string AccessRole { get; public set; }
    public IRequestLogger RequestLogger { get; public set; }
    public Type[] ExcludeRequestDtoTypes { get; public set; }
    public Type[] HideRequestBodyForRequestDtoTypes { get; public set; }
    public Type[] ExcludeResponseTypes { get; public set; }
    public bool LimitToServiceRequests { get; public set; }
    public Action`2<IRequest, RequestLogEntry> RequestLogFilter { get; public set; }
    public List`1<Type> IgnoreTypes { get; public set; }
    public Func`2<object, bool> IgnoreFilter { get; public set; }
    public Func`1<DateTime> CurrentDateFn { get; public set; }
    public int DefaultLimit { get; public set; }
    public string RegisterAllowRuntimeTypeInTypes { get; public set; }
    public RequestLogsFeature(int capacity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_AtRestPath();
    [CompilerGeneratedAttribute]
public void set_AtRestPath(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableSessionTracking();
    [CompilerGeneratedAttribute]
public void set_EnableSessionTracking(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableRequestBodyTracking();
    [CompilerGeneratedAttribute]
public void set_EnableRequestBodyTracking(bool value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_RequestBodyTrackingFilter();
    [CompilerGeneratedAttribute]
public void set_RequestBodyTrackingFilter(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public bool get_EnableResponseTracking();
    [CompilerGeneratedAttribute]
public void set_EnableResponseTracking(bool value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_ResponseTrackingFilter();
    [CompilerGeneratedAttribute]
public void set_ResponseTrackingFilter(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public bool get_EnableErrorTracking();
    [CompilerGeneratedAttribute]
public void set_EnableErrorTracking(bool value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_SkipLogging();
    [CompilerGeneratedAttribute]
public void set_SkipLogging(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Capacity();
    [CompilerGeneratedAttribute]
public void set_Capacity(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_AccessRole();
    [CompilerGeneratedAttribute]
public void set_AccessRole(string value);
    [CompilerGeneratedAttribute]
public IRequestLogger get_RequestLogger();
    [CompilerGeneratedAttribute]
public void set_RequestLogger(IRequestLogger value);
    [CompilerGeneratedAttribute]
public Type[] get_ExcludeRequestDtoTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludeRequestDtoTypes(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_HideRequestBodyForRequestDtoTypes();
    [CompilerGeneratedAttribute]
public void set_HideRequestBodyForRequestDtoTypes(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_ExcludeResponseTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludeResponseTypes(Type[] value);
    [CompilerGeneratedAttribute]
public bool get_LimitToServiceRequests();
    [CompilerGeneratedAttribute]
public void set_LimitToServiceRequests(bool value);
    [CompilerGeneratedAttribute]
public Action`2<IRequest, RequestLogEntry> get_RequestLogFilter();
    [CompilerGeneratedAttribute]
public void set_RequestLogFilter(Action`2<IRequest, RequestLogEntry> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_IgnoreTypes();
    [CompilerGeneratedAttribute]
public void set_IgnoreTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_IgnoreFilter();
    [CompilerGeneratedAttribute]
public void set_IgnoreFilter(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public Func`1<DateTime> get_CurrentDateFn();
    [CompilerGeneratedAttribute]
public void set_CurrentDateFn(Func`1<DateTime> value);
    [CompilerGeneratedAttribute]
public int get_DefaultLimit();
    [CompilerGeneratedAttribute]
public void set_DefaultLimit(int value);
    [CompilerGeneratedAttribute]
public string get_RegisterAllowRuntimeTypeInTypes();
    [CompilerGeneratedAttribute]
public void set_RegisterAllowRuntimeTypeInTypes(string value);
    public bool DefaultIgnoreFilter(object o);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    [CompilerGeneratedAttribute]
private void <Register>b__93_0(IRequest httpReq, IResponse httpRes);
    [CompilerGeneratedAttribute]
private void <Register>b__93_1(MetadataFeature feature);
    [CompilerGeneratedAttribute]
private void <Register>b__93_2(AppMetadata meta);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__94_0(UiFeature feature);
}
public static class ServiceStack.RequestUtils : object {
    [AsyncStateMachineAttribute("ServiceStack.RequestUtils/<AssertAccessRoleOrDebugModeAsync>d__0")]
public static Task AssertAccessRoleOrDebugModeAsync(IRequest req, string accessRole, string authSecret, CancellationToken token);
    [ObsoleteAttribute("Use AssertAccessRoleAsync")]
public static void AssertAccessRole(IRequest req, string accessRole, string authSecret);
    [AsyncStateMachineAttribute("ServiceStack.RequestUtils/<AssertAccessRoleAsync>d__2")]
public static Task AssertAccessRoleAsync(IRequest req, string accessRole, string authSecret, RequireApiKey requireApiKey, CancellationToken token);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.RequireApiKey : object {
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public string Scope { get; public set; }
    public RequireApiKey(string scope);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.RequiredClaimAttribute : AuthenticateAttribute {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Type { get; public set; }
    public string Value { get; public set; }
    public RequiredClaimAttribute(ApplyTo applyTo, string type, string value);
    public RequiredClaimAttribute(string type, string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [AsyncStateMachineAttribute("ServiceStack.RequiredClaimAttribute/<ExecuteAsync>d__10")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    public static bool HasClaim(IRequest req, string type, string value);
    protected bool Equals(RequiredClaimAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRequest req, IResponse res, object requestDto);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.RequiredPermissionAttribute : AuthenticateAttribute {
    [CompilerGeneratedAttribute]
private List`1<string> <RequiredPermissions>k__BackingField;
    public List`1<string> RequiredPermissions { get; public set; }
    public RequiredPermissionAttribute(ApplyTo applyTo, String[] permissions);
    public RequiredPermissionAttribute(String[] permissions);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiredPermissions();
    [CompilerGeneratedAttribute]
public void set_RequiredPermissions(List`1<string> value);
    [AsyncStateMachineAttribute("ServiceStack.RequiredPermissionAttribute/<ExecuteAsync>d__6")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    [ObsoleteAttribute("Use HasAllPermissionsAsync")]
public bool HasAllPermissions(IRequest req, IAuthSession session, IAuthRepository authRepo);
    [AsyncStateMachineAttribute("ServiceStack.RequiredPermissionAttribute/<HasAllPermissionsAsync>d__8")]
public Task`1<bool> HasAllPermissionsAsync(IRequest req, IAuthSession session, IAuthRepositoryAsync authRepo);
    [ObsoleteAttribute("Use HasAllPermissionsAsync")]
public static bool HasAllPermissions(IRequest req, IAuthSession session, ICollection`1<string> requiredPermissions);
    [AsyncStateMachineAttribute("ServiceStack.RequiredPermissionAttribute/<HasAllPermissionsAsync>d__10")]
public static Task`1<bool> HasAllPermissionsAsync(IRequest req, IAuthSession session, ICollection`1<string> requiredPermissions, CancellationToken token);
    [ObsoleteAttribute("AssertRequiredPermissionsAsync")]
public static void AssertRequiredPermissions(IRequest req, String[] requiredPermissions);
    [AsyncStateMachineAttribute("ServiceStack.RequiredPermissionAttribute/<AssertRequiredPermissionsAsync>d__12")]
public static Task AssertRequiredPermissionsAsync(IRequest req, String[] requiredPermissions, CancellationToken token);
    public static Task`1<bool> HasRequiredPermissionsAsync(IRequest req, String[] requiredPermissions);
    [ObsoleteAttribute("Use SessionValidForAllPermissionsAsync")]
private static bool SessionValidForAllPermissions(IRequest req, IAuthSession session, ICollection`1<string> requiredPermissions);
    [AsyncStateMachineAttribute("ServiceStack.RequiredPermissionAttribute/<SessionValidForAllPermissionsAsync>d__15")]
private static Task`1<bool> SessionValidForAllPermissionsAsync(IRequest req, IAuthSession session, ICollection`1<string> requiredPermissions);
    protected bool Equals(RequiredPermissionAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRequest req, IResponse res, object requestDto);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.RequiredRoleAttribute : AuthenticateAttribute {
    [CompilerGeneratedAttribute]
private List`1<string> <RequiredRoles>k__BackingField;
    public List`1<string> RequiredRoles { get; public set; }
    public RequiredRoleAttribute(ApplyTo applyTo, String[] roles);
    public RequiredRoleAttribute(String[] roles);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiredRoles();
    [CompilerGeneratedAttribute]
public void set_RequiredRoles(List`1<string> value);
    [AsyncStateMachineAttribute("ServiceStack.RequiredRoleAttribute/<ExecuteAsync>d__6")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    [ObsoleteAttribute("Use HasAllRolesAsync")]
public bool HasAllRoles(IRequest req, IAuthSession session, IAuthRepository authRepo);
    [AsyncStateMachineAttribute("ServiceStack.RequiredRoleAttribute/<HasAllRolesAsync>d__8")]
public Task`1<bool> HasAllRolesAsync(IRequest req, IAuthSession session, IAuthRepositoryAsync authRepo);
    [ObsoleteAttribute("Use HasAllRolesAsync")]
public static bool HasAllRoles(IRequest req, IAuthSession session, ICollection`1<string> requiredRoles);
    [AsyncStateMachineAttribute("ServiceStack.RequiredRoleAttribute/<HasAllRolesAsync>d__10")]
public static Task`1<bool> HasAllRolesAsync(IRequest req, ICollection`1<string> requiredRoles, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.RequiredRoleAttribute/<HasAllRolesAsync>d__11")]
public static Task`1<bool> HasAllRolesAsync(IRequest req, IAuthSession session, ICollection`1<string> requiredRoles, CancellationToken token);
    [ObsoleteAttribute("Use AssertRequiredRolesAsync")]
public static void AssertRequiredRoles(IRequest req, String[] requiredRoles);
    public static Task AssertRequiredRoleAsync(IRequest req, string requiredRole, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.RequiredRoleAttribute/<AssertRequiredRolesAsync>d__14")]
public static Task AssertRequiredRolesAsync(IRequest req, String[] requiredRoles, CancellationToken token);
    [ObsoleteAttribute("Use HasRequiredRolesAsync")]
public static bool HasRequiredRoles(IRequest req, String[] requiredRoles);
    public static Task`1<bool> HasRequiredRolesAsync(IRequest req, String[] requiredRoles);
    public static bool PreAuthenticatedValidForAllRoles(IRequest req, ICollection`1<string> requiredRoles);
    [ObsoleteAttribute("Use SessionValidForAllRolesAsync")]
private static bool SessionValidForAllRoles(IRequest req, IAuthSession session, ICollection`1<string> requiredRoles);
    [AsyncStateMachineAttribute("ServiceStack.RequiredRoleAttribute/<SessionValidForAllRolesAsync>d__19")]
private static Task`1<bool> SessionValidForAllRolesAsync(IRequest req, IAuthSession session, ICollection`1<string> requiredRoles);
    protected bool Equals(RequiredRoleAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRequest req, IResponse res, object requestDto);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.RequiresAnyPermissionAttribute : AuthenticateAttribute {
    [CompilerGeneratedAttribute]
private List`1<string> <RequiredPermissions>k__BackingField;
    public List`1<string> RequiredPermissions { get; public set; }
    public RequiresAnyPermissionAttribute(ApplyTo applyTo, String[] permissions);
    public RequiresAnyPermissionAttribute(String[] permissions);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiredPermissions();
    [CompilerGeneratedAttribute]
public void set_RequiredPermissions(List`1<string> value);
    [AsyncStateMachineAttribute("ServiceStack.RequiresAnyPermissionAttribute/<ExecuteAsync>d__6")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    [ObsoleteAttribute("Use HasAnyPermissionsAsync")]
public virtual bool HasAnyPermissions(IRequest req, IAuthSession session, IAuthRepository authRepo);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRequest req, IResponse res, object requestDto);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.RequiresAnyRoleAttribute : AuthenticateAttribute {
    [CompilerGeneratedAttribute]
private List`1<string> <RequiredRoles>k__BackingField;
    public List`1<string> RequiredRoles { get; public set; }
    public RequiresAnyRoleAttribute(ApplyTo applyTo, String[] roles);
    public RequiresAnyRoleAttribute(String[] roles);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequiredRoles();
    [CompilerGeneratedAttribute]
public void set_RequiredRoles(List`1<string> value);
    [AsyncStateMachineAttribute("ServiceStack.RequiresAnyRoleAttribute/<ExecuteAsync>d__6")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    [ObsoleteAttribute("Use HasAnyRolesAsync")]
public virtual bool HasAnyRoles(IRequest req, IAuthSession session, IAuthRepository authRepo);
    [ObsoleteAttribute("Use AssertRequiredRolesAsync")]
public static void AssertRequiredRoles(IRequest req, String[] requiredRoles);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRequest req, IResponse res, object requestDto);
}
[ExtensionAttribute]
public static class ServiceStack.RequiresSchemaProviders : object {
    [ExtensionAttribute]
public static void InitSchema(ICacheClient cache);
    [ExtensionAttribute]
public static void InitSchema(IAuthRepository authRepo);
    [ExtensionAttribute]
public static void InitSchema(IAuthRepositoryAsync authRepo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class ServiceStack.ResolvedPath : ValueType {
    [CompilerGeneratedAttribute]
private string <PublicPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    public string PublicPath { get; }
    public string VirtualPath { get; }
    public ResolvedPath(string publicPath, string virtualPath);
    [CompilerGeneratedAttribute]
public string get_PublicPath();
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ServiceStack.ResourceDesigner.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Registration_CantRegisterContainer { get; }
    internal static string Registration_IncompatibleAsType { get; }
    internal static string ResolutionException_MissingNamedType { get; }
    internal static string ResolutionException_MissingType { get; }
    internal static string ResolutionException_UnknownScope { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Registration_CantRegisterContainer();
    internal static string get_Registration_IncompatibleAsType();
    internal static string get_ResolutionException_MissingNamedType();
    internal static string get_ResolutionException_MissingType();
    internal static string get_ResolutionException_UnknownScope();
}
public abstract class ServiceStack.ResponseFilterAsyncAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyTo <ApplyTo>k__BackingField;
    public int Priority { get; public set; }
    public ApplyTo ApplyTo { get; public set; }
    public ResponseFilterAsyncAttribute(ApplyTo applyTo);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public ApplyTo get_ApplyTo();
    [CompilerGeneratedAttribute]
public void set_ApplyTo(ApplyTo value);
    public sealed virtual Task ResponseFilterAsync(IRequest req, IResponse res, object response);
    public abstract virtual Task ExecuteAsync(IRequest req, IResponse res, object responseDto);
    public virtual IResponseFilterBase Copy();
}
public abstract class ServiceStack.ResponseFilterAttribute : AttributeBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyTo <ApplyTo>k__BackingField;
    public int Priority { get; public set; }
    public ApplyTo ApplyTo { get; public set; }
    public ResponseFilterAttribute(ApplyTo applyTo);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public ApplyTo get_ApplyTo();
    [CompilerGeneratedAttribute]
public void set_ApplyTo(ApplyTo value);
    public sealed virtual void ResponseFilter(IRequest req, IResponse res, object response);
    public abstract virtual void Execute(IRequest req, IResponse res, object responseDto);
    public virtual IResponseFilterBase Copy();
}
public class ServiceStack.ReturnExceptionsInJsonAttribute : ResponseFilterAttribute {
    public virtual void Execute(IRequest req, IResponse res, object responseDto);
}
public class ServiceStack.RpcGateway : object {
    [CompilerGeneratedAttribute]
private ServiceStackHost <AppHost>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceExecutor <Executor>k__BackingField;
    private ServiceStackHost AppHost { get; }
    private IServiceExecutor Executor { get; }
    public RpcGateway(ServiceStackHost appHost);
    public RpcGateway(ServiceStackHost appHost, IServiceExecutor executor);
    [CompilerGeneratedAttribute]
private ServiceStackHost get_AppHost();
    [CompilerGeneratedAttribute]
private IServiceExecutor get_Executor();
    public virtual Task`1<TResponse> ExecuteAsync(IReturn`1<TResponse> requestDto, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.RpcGateway/<ExecuteAsync>d__9`1")]
public virtual Task`1<TResponse> ExecuteAsync(object requestDto, IRequest req);
    private static TResponse CreateResponse(IResponse res);
    public static TResponse GetResponse(IResponse res, object ret);
    public static TResponse CreateErrorResponse(IResponse res, Exception ex);
    public static HttpError CreateError(IResponse res, string errorCode, string errorMessage);
}
public class ServiceStack.RunAsAdminFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectTo>k__BackingField;
    public string Id { get; public set; }
    public string RedirectTo { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectTo();
    [CompilerGeneratedAttribute]
public void set_RedirectTo(string value);
    public sealed virtual void Register(IAppHost appHost);
}
[ExcludeMetadataAttribute]
public class ServiceStack.ScriptAdmin : object {
    [CompilerGeneratedAttribute]
private string <Actions>k__BackingField;
    public string Actions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(string value);
}
public class ServiceStack.ScriptAdminResponse : object {
    [CompilerGeneratedAttribute]
private String[] <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    public String[] Results { get; public set; }
    public ResponseStatus ResponseStatus { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(String[] value);
    [CompilerGeneratedAttribute]
public ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public void set_ResponseStatus(ResponseStatus value);
}
[DefaultRequestAttribute("ServiceStack.ScriptAdmin")]
[RestrictAttribute]
public class ServiceStack.ScriptAdminService : Service {
    [CompilerGeneratedAttribute]
private static String[] <Routes>k__BackingField;
    public static String[] Actions;
    public static String[] Routes { get; public set; }
    private static ScriptAdminService();
    [CompilerGeneratedAttribute]
public static String[] get_Routes();
    [CompilerGeneratedAttribute]
public static void set_Routes(String[] value);
    [AsyncStateMachineAttribute("ServiceStack.ScriptAdminService/<Any>d__5")]
public Task`1<object> Any(ScriptAdmin request);
}
public class ServiceStack.ScriptConditionValidator : PropertyValidator {
    [CompilerGeneratedAttribute]
private SharpPage <Code>k__BackingField;
    public SharpPage Code { get; }
    public ScriptConditionValidator(SharpPage code);
    [CompilerGeneratedAttribute]
public SharpPage get_Code();
    public virtual bool ShouldValidateAsynchronously(IValidationContext context);
    [AsyncStateMachineAttribute("ServiceStack.ScriptConditionValidator/<IsValidAsync>d__5")]
protected virtual Task`1<bool> IsValidAsync(PropertyValidatorContext context, CancellationToken cancellation);
    protected virtual bool IsValid(PropertyValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.ScriptValidator : TypeValidator {
    [CompilerGeneratedAttribute]
private SharpPage <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public SharpPage Code { get; }
    public string Condition { get; }
    public ScriptValidator(SharpPage code, string condition);
    [CompilerGeneratedAttribute]
public SharpPage get_Code();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [AsyncStateMachineAttribute("ServiceStack.ScriptValidator/<IsValidAsync>d__7")]
public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
}
public static class ServiceStack.Selector : object {
    public static string Id(Type type);
    public static string Id();
}
[ExtensionAttribute]
public static class ServiceStack.ServerEventExtensions : object {
    [ExtensionAttribute]
public static SubscriptionInfo GetInfo(IEventSubscription sub);
    [ExtensionAttribute]
public static bool HasChannel(IEventSubscription sub, string channel);
    [ExtensionAttribute]
public static bool HasAnyChannel(IEventSubscription sub, String[] channels);
    [ExtensionAttribute]
public static void NotifyAll(IServerEvents server, object message);
    [ExtensionAttribute]
public static Task NotifyAllAsync(IServerEvents server, object message, CancellationToken token);
    [ExtensionAttribute]
public static void NotifyChannel(IServerEvents server, string channel, object message);
    [ExtensionAttribute]
public static Task NotifyChannelAsync(IServerEvents server, string channel, object message, CancellationToken token);
    [ExtensionAttribute]
public static void NotifySubscription(IServerEvents server, string subscriptionId, object message, string channel);
    [ExtensionAttribute]
public static Task NotifySubscriptionAsync(IServerEvents server, string subscriptionId, object message, string channel, CancellationToken token);
    [ExtensionAttribute]
public static void NotifyUserId(IServerEvents server, string userId, object message, string channel);
    [ExtensionAttribute]
public static Task NotifyUserIdAsync(IServerEvents server, string userId, object message, string channel, CancellationToken token);
    [ExtensionAttribute]
public static void NotifyUserName(IServerEvents server, string userName, object message, string channel);
    [ExtensionAttribute]
public static Task NotifyUserNameAsync(IServerEvents server, string userName, object message, string channel, CancellationToken token);
    [ExtensionAttribute]
public static void NotifySession(IServerEvents server, string sspid, object message, string channel);
    [ExtensionAttribute]
public static Task NotifySessionAsync(IServerEvents server, string sspid, object message, string channel, CancellationToken token);
    [ExtensionAttribute]
internal static TElement TryGet(ConcurrentDictionary`2<TKey, TElement> dic, TKey key);
    [IteratorStateMachineAttribute("ServiceStack.ServerEventExtensions/<ValuesWithoutLock>d__16`2")]
[ExtensionAttribute]
internal static IEnumerable`1<TElement> ValuesWithoutLock(ConcurrentDictionary`2<TKey, TElement> source);
    [IteratorStateMachineAttribute("ServiceStack.ServerEventExtensions/<KeysWithoutLock>d__17`2")]
[ExtensionAttribute]
internal static IEnumerable`1<TKey> KeysWithoutLock(ConcurrentDictionary`2<TKey, TElement> source);
    [ExtensionAttribute]
internal static string AssertChannel(string channel);
    [ExtensionAttribute]
internal static string AssertSelector(string selector);
    [ExtensionAttribute]
public static bool IsGrpc(IEventSubscription sub);
}
public class ServiceStack.ServerEventsFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StreamPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeartbeatPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscribersPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdateSubscribersPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnRegisterPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HeartbeatInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HouseKeepingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRequest> <OnInit>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRequest> <OnHeartbeatInit>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IEventSubscription, IRequest> <OnCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IEventSubscription, Dictionary`2<string, string>> <OnConnect>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEventSubscription> <OnSubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IEventSubscription, IRequest> <OnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnSubscribeAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEventSubscription> <OnUnsubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnUnsubscribeAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<IEventSubscription, IResponse, string> <OnPublish>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IEventSubscription, IResponse, string, Task> <OnPublishAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEventSubscription, Task> <OnUpdateAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <Serialize>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IResponse, string> <WriteEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IResponse, string, CancellationToken, Task> <WriteEventAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEventSubscription> <OnHungConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IEventSubscription, Exception> <OnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotifyChannelOfSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitToAuthenticatedUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateUserAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThrottlePublisherAfterBufferExceedsBytes>k__BackingField;
    internal ConcurrentDictionary`2<string, long> Counters;
    public string Id { get; public set; }
    public string StreamPath { get; public set; }
    public string HeartbeatPath { get; public set; }
    public string SubscribersPath { get; public set; }
    public string UpdateSubscribersPath { get; public set; }
    public string UnRegisterPath { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public TimeSpan HeartbeatInterval { get; public set; }
    public TimeSpan HouseKeepingInterval { get; public set; }
    public Action`1<IRequest> OnInit { get; public set; }
    public Action`1<IRequest> OnHeartbeatInit { get; public set; }
    public Action`2<IEventSubscription, IRequest> OnCreated { get; public set; }
    public Action`2<IEventSubscription, Dictionary`2<string, string>> OnConnect { get; public set; }
    public Action`1<IEventSubscription> OnSubscribe { get; public set; }
    public Action`2<IEventSubscription, IRequest> OnDispose { get; public set; }
    public Func`2<IEventSubscription, Task> OnSubscribeAsync { get; public set; }
    public Action`1<IEventSubscription> OnUnsubscribe { get; public set; }
    public Func`2<IEventSubscription, Task> OnUnsubscribeAsync { get; public set; }
    public Action`3<IEventSubscription, IResponse, string> OnPublish { get; public set; }
    public Func`4<IEventSubscription, IResponse, string, Task> OnPublishAsync { get; public set; }
    public Func`2<IEventSubscription, Task> OnUpdateAsync { get; public set; }
    public Func`2<object, string> Serialize { get; public set; }
    public Action`2<IResponse, string> WriteEvent { get; private set; }
    public Func`4<IResponse, string, CancellationToken, Task> WriteEventAsync { get; private set; }
    public Action`1<IEventSubscription> OnHungConnection { get; public set; }
    public Action`2<IEventSubscription, Exception> OnError { get; public set; }
    public bool NotifyChannelOfSubscriptions { get; public set; }
    public bool LimitToAuthenticatedUsers { get; public set; }
    public bool ValidateUserAddress { get; public set; }
    public int ThrottlePublisherAfterBufferExceedsBytes { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_StreamPath();
    [CompilerGeneratedAttribute]
public void set_StreamPath(string value);
    [CompilerGeneratedAttribute]
public string get_HeartbeatPath();
    [CompilerGeneratedAttribute]
public void set_HeartbeatPath(string value);
    [CompilerGeneratedAttribute]
public string get_SubscribersPath();
    [CompilerGeneratedAttribute]
public void set_SubscribersPath(string value);
    [CompilerGeneratedAttribute]
public string get_UpdateSubscribersPath();
    [CompilerGeneratedAttribute]
public void set_UpdateSubscribersPath(string value);
    [CompilerGeneratedAttribute]
public string get_UnRegisterPath();
    [CompilerGeneratedAttribute]
public void set_UnRegisterPath(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HeartbeatInterval();
    [CompilerGeneratedAttribute]
public void set_HeartbeatInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HouseKeepingInterval();
    [CompilerGeneratedAttribute]
public void set_HouseKeepingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public Action`1<IRequest> get_OnInit();
    [CompilerGeneratedAttribute]
public void set_OnInit(Action`1<IRequest> value);
    [CompilerGeneratedAttribute]
public Action`1<IRequest> get_OnHeartbeatInit();
    [CompilerGeneratedAttribute]
public void set_OnHeartbeatInit(Action`1<IRequest> value);
    [CompilerGeneratedAttribute]
public Action`2<IEventSubscription, IRequest> get_OnCreated();
    [CompilerGeneratedAttribute]
public void set_OnCreated(Action`2<IEventSubscription, IRequest> value);
    [CompilerGeneratedAttribute]
public Action`2<IEventSubscription, Dictionary`2<string, string>> get_OnConnect();
    [CompilerGeneratedAttribute]
public void set_OnConnect(Action`2<IEventSubscription, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Action`1<IEventSubscription> get_OnSubscribe();
    [CompilerGeneratedAttribute]
public void set_OnSubscribe(Action`1<IEventSubscription> value);
    [CompilerGeneratedAttribute]
public Action`2<IEventSubscription, IRequest> get_OnDispose();
    [CompilerGeneratedAttribute]
public void set_OnDispose(Action`2<IEventSubscription, IRequest> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_OnSubscribeAsync();
    [CompilerGeneratedAttribute]
public void set_OnSubscribeAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Action`1<IEventSubscription> get_OnUnsubscribe();
    [CompilerGeneratedAttribute]
public void set_OnUnsubscribe(Action`1<IEventSubscription> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_OnUnsubscribeAsync();
    [CompilerGeneratedAttribute]
public void set_OnUnsubscribeAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Action`3<IEventSubscription, IResponse, string> get_OnPublish();
    [CompilerGeneratedAttribute]
public void set_OnPublish(Action`3<IEventSubscription, IResponse, string> value);
    [CompilerGeneratedAttribute]
public Func`4<IEventSubscription, IResponse, string, Task> get_OnPublishAsync();
    [CompilerGeneratedAttribute]
public void set_OnPublishAsync(Func`4<IEventSubscription, IResponse, string, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<IEventSubscription, Task> get_OnUpdateAsync();
    [CompilerGeneratedAttribute]
public void set_OnUpdateAsync(Func`2<IEventSubscription, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_Serialize();
    [CompilerGeneratedAttribute]
public void set_Serialize(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
public Action`2<IResponse, string> get_WriteEvent();
    [CompilerGeneratedAttribute]
private void set_WriteEvent(Action`2<IResponse, string> value);
    [CompilerGeneratedAttribute]
public Func`4<IResponse, string, CancellationToken, Task> get_WriteEventAsync();
    [CompilerGeneratedAttribute]
private void set_WriteEventAsync(Func`4<IResponse, string, CancellationToken, Task> value);
    [CompilerGeneratedAttribute]
public Action`1<IEventSubscription> get_OnHungConnection();
    [CompilerGeneratedAttribute]
public void set_OnHungConnection(Action`1<IEventSubscription> value);
    [CompilerGeneratedAttribute]
public Action`2<IEventSubscription, Exception> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`2<IEventSubscription, Exception> value);
    [CompilerGeneratedAttribute]
public bool get_NotifyChannelOfSubscriptions();
    [CompilerGeneratedAttribute]
public void set_NotifyChannelOfSubscriptions(bool value);
    [CompilerGeneratedAttribute]
public bool get_LimitToAuthenticatedUsers();
    [CompilerGeneratedAttribute]
public void set_LimitToAuthenticatedUsers(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateUserAddress();
    [CompilerGeneratedAttribute]
public void set_ValidateUserAddress(bool value);
    [CompilerGeneratedAttribute]
public int get_ThrottlePublisherAfterBufferExceedsBytes();
    [CompilerGeneratedAttribute]
public void set_ThrottlePublisherAfterBufferExceedsBytes(int value);
    public void IncrementCounter(string name);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    internal bool CanAccessSubscription(IRequest req, SubscriptionInfo sub);
    [CompilerGeneratedAttribute]
private void <.ctor>b__122_2(IEventSubscription sub);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__122_3(IEventSubscription sub);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__122_4(IEventSubscription sub);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__122_5(IEventSubscription sub, IResponse res, string msg);
}
public class ServiceStack.ServerEventsHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private static int <RemoveExpiredSubscriptionsEvery>k__BackingField;
    private static int ConnectionsCount;
    public static string EventStreamDenyNoAuth;
    public static string EventStreamDenyOnInit;
    public static string EventStreamDenyOnCreated;
    public static int RemoveExpiredSubscriptionsEvery { get; }
    private static ServerEventsHandler();
    public virtual bool RunAsAsync();
    [CompilerGeneratedAttribute]
public static int get_RemoveExpiredSubscriptionsEvery();
    [AsyncStateMachineAttribute("ServiceStack.ServerEventsHandler/<ProcessRequestAsync>d__8")]
public virtual Task ProcessRequestAsync(IRequest req, IResponse res, string operationName);
    private static string AddSessionParamsIfAny(string url, IRequest req);
}
public class ServiceStack.ServerEventsHeartbeatHandler : HttpAsyncTaskHandler {
    private static string HeartbeatSubNotExists;
    private static string HeartbeatInvalidAccess;
    public virtual bool RunAsAsync();
    [AsyncStateMachineAttribute("ServiceStack.ServerEventsHeartbeatHandler/<ProcessRequestAsync>d__3")]
public virtual Task ProcessRequestAsync(IRequest req, IResponse res, string operationName);
}
[DefaultRequestAttribute("ServiceStack.GetEventSubscribers")]
[RestrictAttribute]
public class ServiceStack.ServerEventsSubscribersService : Service {
    [CompilerGeneratedAttribute]
private IServerEvents <serverEvents>P;
    public ServerEventsSubscribersService(IServerEvents serverEvents);
    public object Any(GetEventSubscribers request);
}
[DefaultRequestAttribute("ServiceStack.UnRegisterEventSubscriber")]
[RestrictAttribute]
public class ServiceStack.ServerEventsUnRegisterService : Service {
    [CompilerGeneratedAttribute]
private IServerEvents <serverEvents>P;
    public static string UnRegisterSubNotExists;
    private static string UnRegisterInvalidAccess;
    private static string UnRegisterApi;
    public ServerEventsUnRegisterService(IServerEvents serverEvents);
    [AsyncStateMachineAttribute("ServiceStack.ServerEventsUnRegisterService/<Any>d__5")]
[AddHeaderAttribute]
public Task`1<object> Any(UnRegisterEventSubscriber request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Service : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static IResolver <GlobalResolver>k__BackingField;
    [NullableAttribute("2")]
private IResolver resolver;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [NullableAttribute("2")]
private ICacheClient cache;
    [NullableAttribute("2")]
private ICacheClientAsync cacheAsync;
    [NullableAttribute("2")]
private MemoryCacheClient localCache;
    [NullableAttribute("2")]
private IDbConnection db;
    [NullableAttribute("2")]
private IRedisClient redis;
    [NullableAttribute("2")]
private IMessageProducer messageProducer;
    [NullableAttribute("2")]
private ISessionFactory sessionFactory;
    [NullableAttribute("2")]
private IAuthRepository authRepository;
    [NullableAttribute("2")]
private IAuthRepositoryAsync authRepositoryAsync;
    [NullableAttribute("2")]
private IServiceGateway gateway;
    [NullableAttribute("2")]
private ISession session;
    [NullableAttribute("2")]
private ISessionAsync sessionAsync;
    private bool hasDisposed;
    [NullableAttribute("2")]
public static IResolver GlobalResolver { get; public set; }
    [NullableAttribute("2")]
public IRequest Request { get; public set; }
    [NullableAttribute("2")]
protected IResponse Response { get; }
    public ICacheClient Cache { get; }
    public ICacheClientAsync CacheAsync { get; }
    public MemoryCacheClient LocalCache { get; }
    public IDbConnection Db { get; }
    public IRedisClient Redis { get; }
    public IMessageProducer MessageProducer { get; }
    public ISessionFactory SessionFactory { get; }
    public IAuthRepository AuthRepository { get; }
    public IAuthRepositoryAsync AuthRepositoryAsync { get; }
    public IServiceGateway Gateway { get; }
    public IVirtualPathProvider VirtualFileSources { get; }
    public IVirtualFiles VirtualFiles { get; }
    public ISession SessionBag { get; }
    public ISessionAsync SessionBagAsync { get; }
    public bool IsAuthenticated { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static IResolver get_GlobalResolver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void set_GlobalResolver(IResolver value);
    [NullableContextAttribute("2")]
public virtual IResolver GetResolver();
    public virtual Service SetResolver(IResolver resolver);
    [NullableContextAttribute("2")]
public virtual T TryResolve();
    public T GetPlugin();
    public T AssertPlugin();
    [NullableContextAttribute("2")]
public virtual T GetService();
    public virtual T GetRequiredService();
    public virtual IEnumerable`1<T> GetServices();
    public virtual T ResolveService();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    [NullableContextAttribute("2")]
protected virtual IResponse get_Response();
    public virtual ICacheClient get_Cache();
    public virtual ICacheClientAsync get_CacheAsync();
    public virtual MemoryCacheClient get_LocalCache();
    public virtual IDbConnection OpenDbConnection(string namedConnection);
    public virtual IDbConnection get_Db();
    public virtual IRedisClient get_Redis();
    public virtual ValueTask`1<IRedisClientAsync> GetRedisAsync();
    public virtual IMessageProducer get_MessageProducer();
    public virtual ISessionFactory get_SessionFactory();
    public virtual IAuthRepository get_AuthRepository();
    public virtual IAuthRepositoryAsync get_AuthRepositoryAsync();
    public virtual IServiceGateway get_Gateway();
    public IVirtualPathProvider get_VirtualFileSources();
    public IVirtualFiles get_VirtualFiles();
    public virtual ISession get_SessionBag();
    public virtual ISessionAsync get_SessionBagAsync();
    public virtual IAuthSession GetSession(bool reload);
    public virtual Task`1<IAuthSession> GetSessionAsync(bool reload, CancellationToken token);
    [NullableContextAttribute("2")]
protected virtual TUserSession SessionAs();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("ServiceStack.Service/<SessionAsAsync>d__65`1")]
protected virtual Task`1<TUserSession> SessionAsAsync();
    public virtual bool get_IsAuthenticated();
    public virtual void PublishMessage(T message);
    public virtual void Dispose();
    public virtual void OnBeforeExecute(object requestDto);
    public virtual object OnAfterExecute(object response);
    public virtual Task`1<object> OnExceptionAsync(object requestDto, Exception ex);
    [AsyncStateMachineAttribute("ServiceStack.Service/<DisposeAsync>d__74")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ServiceStack.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static void ConfigurePlugin(IServiceCollection services, Action`1<T> configure);
    [ExtensionAttribute]
public static void PostConfigurePlugin(IServiceCollection services, Action`1<T> configure);
    [ExtensionAttribute]
public static bool Exists(IServiceCollection services);
    [ExtensionAttribute]
public static bool Exists(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static ServiceLifetime ToServiceLifetime(ReuseScope scope);
    [ExtensionAttribute]
public static ReuseScope ToReuseScope(ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection services, Type serviceType, Type implementationType, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    private static void AssertServiceType(Type serviceType);
    [ExtensionAttribute]
public static void RegisterServices(IServiceCollection services, Dictionary`2<Type, String[]> serviceRoutes);
    [ExtensionAttribute]
public static void RegisterService(IServiceCollection services);
    [ExtensionAttribute]
public static void RegisterService(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static void RegisterService(IServiceCollection services, string route);
    [ExtensionAttribute]
public static void RegisterService(IServiceCollection services, Type serviceType, string route);
    [ExtensionAttribute]
public static void RegisterService(IServiceCollection services, Type serviceType, String[] routes);
    [ExtensionAttribute]
public static void AddPlugin(IServiceCollection services, T plugin);
    [ExtensionAttribute]
public static void ConfigureScriptContext(IServiceCollection services, Action`1<ScriptContext> configure);
}
[ExtensionAttribute]
public static class ServiceStack.ServiceExtensions : object {
    public static ILog Log;
    private static ServiceExtensions();
    [ExtensionAttribute]
public static IHttpResult Redirect(IServiceBase service, string redirect);
    [ExtensionAttribute]
public static IHttpResult Redirect(IServiceBase service, string redirect, string message);
    [ExtensionAttribute]
public static IHttpResult LocalRedirect(IServiceBase service, string redirect);
    [ExtensionAttribute]
public static IHttpResult LocalRedirect(IServiceBase service, string redirect, string message);
    [ExtensionAttribute]
public static IHttpResult AuthenticationRequired(IServiceBase service);
    [ExtensionAttribute]
public static string GetSessionId(IServiceBase service);
    [ExtensionAttribute]
public static ICacheClient GetCacheClient(IRequest request);
    [ExtensionAttribute]
public static ICacheClientAsync GetCacheClientAsync(IRequest request);
    [ExtensionAttribute]
public static ICacheClient GetMemoryCacheClient(IRequest request);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SaveSessionAsync")]
public static void SaveSession(IServiceBase service, IAuthSession session, Nullable`1<TimeSpan> expiresIn);
    [AsyncStateMachineAttribute("ServiceStack.ServiceExtensions/<SaveSessionAsync>d__11")]
[ExtensionAttribute]
public static Task SaveSessionAsync(IServiceBase service, IAuthSession session, Nullable`1<TimeSpan> expiresIn, CancellationToken token);
    [ExtensionAttribute]
public static void RemoveSession(IServiceBase service);
    [ExtensionAttribute]
public static Task RemoveSessionAsync(IServiceBase service, CancellationToken token);
    [ExtensionAttribute]
public static void RemoveSession(Service service);
    [ExtensionAttribute]
public static Task RemoveSessionAsync(Service service, CancellationToken token);
    [ExtensionAttribute]
public static void CacheSet(ICacheClient cache, string key, T value, Nullable`1<TimeSpan> expiresIn);
    [AsyncStateMachineAttribute("ServiceStack.ServiceExtensions/<CacheSetAsync>d__17`1")]
[ExtensionAttribute]
public static Task CacheSetAsync(ICacheClientAsync cache, string key, T value, Nullable`1<TimeSpan> expiresIn, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SaveSessionAsync")]
public static void SaveSession(IRequest httpReq, IAuthSession session, Nullable`1<TimeSpan> expiresIn);
    [ExtensionAttribute]
public static Task SaveSessionAsync(IRequest httpReq, IAuthSession session, Nullable`1<TimeSpan> expiresIn, CancellationToken token);
    [ExtensionAttribute]
public static void RemoveSession(IRequest httpReq);
    [ExtensionAttribute]
public static Task RemoveSessionAsync(IRequest httpReq, CancellationToken token);
    [ExtensionAttribute]
public static void RemoveSession(IRequest httpReq, string sessionId);
    [AsyncStateMachineAttribute("ServiceStack.ServiceExtensions/<RemoveSessionAsync>d__23")]
[ExtensionAttribute]
public static Task RemoveSessionAsync(IRequest httpReq, string sessionId, CancellationToken token);
    [ExtensionAttribute]
public static IAuthSession GetSession(IServiceBase service, bool reload);
    [ExtensionAttribute]
public static Task`1<IAuthSession> GetSessionAsync(IServiceBase service, bool reload, CancellationToken token);
    [ExtensionAttribute]
public static TUserSession SessionAs(IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.ServiceExtensions/<SessionAsAsync>d__27`1")]
[ExtensionAttribute]
public static Task`1<TUserSession> SessionAsAsync(IRequest req, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsAuthenticatedAsync")]
public static bool IsAuthenticated(IRequest req);
    [ExtensionAttribute]
public static Task`1<bool> IsAuthenticatedAsync(IRequest req);
    [ExtensionAttribute]
public static IAuthSession AssertAuthenticatedSession(IRequest req, bool reload);
    [AsyncStateMachineAttribute("ServiceStack.ServiceExtensions/<AssertAuthenticatedSessionAsync>d__31")]
[ExtensionAttribute]
public static Task`1<IAuthSession> AssertAuthenticatedSessionAsync(IRequest req, bool reload, CancellationToken token);
    [ExtensionAttribute]
public static IAuthSession GetSession(IRequest httpReq, bool reload);
    [ExtensionAttribute]
public static Task`1<IAuthSession> GetSessionAsync(IRequest httpReq, bool reload, CancellationToken token);
    [AsyncStateMachineAttribute("ServiceStack.ServiceExtensions/<GetSessionInternalAsync>d__34")]
[ExtensionAttribute]
internal static Task`1<IAuthSession> GetSessionInternalAsync(IRequest httpReq, bool reload, bool async, CancellationToken token);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> GetSessionTimeToLive(ICacheClient cache, string sessionId);
    [AsyncStateMachineAttribute("ServiceStack.ServiceExtensions/<GetSessionTimeToLiveAsync>d__36")]
[ExtensionAttribute]
public static Task`1<Nullable`1<TimeSpan>> GetSessionTimeToLiveAsync(ICacheClientAsync cache, string sessionId, CancellationToken token);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> GetSessionTimeToLive(IRequest httpReq);
    [ExtensionAttribute]
public static Task`1<Nullable`1<TimeSpan>> GetSessionTimeToLiveAsync(IRequest httpReq, CancellationToken token);
    [ExtensionAttribute]
public static object RunAction(TService service, TRequest request, Func`3<TService, TRequest, object> invokeAction, IRequest requestContext);
}
public abstract class ServiceStack.ServiceGatewayFactoryBase : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    protected InProcessServiceGateway localGateway;
    public IRequest Request { get; private set; }
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IRequest value);
    public virtual IServiceGateway GetServiceGateway(IRequest request);
    public abstract virtual IServiceGateway GetGateway(Type requestType);
    protected virtual IServiceGatewayAsync GetGatewayAsync(Type requestType);
    public sealed virtual TResponse Send(object requestDto);
    public sealed virtual List`1<TResponse> SendAll(IEnumerable`1<object> requestDtos);
    public sealed virtual void Publish(object requestDto);
    public sealed virtual void PublishAll(IEnumerable`1<object> requestDtos);
    public sealed virtual Task`1<TResponse> SendAsync(object requestDto, CancellationToken token);
    public sealed virtual Task`1<List`1<TResponse>> SendAllAsync(IEnumerable`1<object> requestDtos, CancellationToken token);
    public sealed virtual Task PublishAsync(object requestDto, CancellationToken token);
    public sealed virtual Task PublishAllAsync(IEnumerable`1<object> requestDtos, CancellationToken token);
}
public class ServiceStack.ServiceResponseException : Exception {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceStackTrace>k__BackingField;
    public string ErrorCode { get; public set; }
    public string ServiceStackTrace { get; public set; }
    public ServiceResponseException(string message);
    public ServiceResponseException(string errorCode, string errorMessage);
    public ServiceResponseException(string errorCode, string errorMessage, string serviceStackTrace);
    public ServiceResponseException(ResponseStatus responseStatus);
    private static string GetErrorMessage(string errorCode, string errorMessage);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceStackTrace();
    [CompilerGeneratedAttribute]
public void set_ServiceStackTrace(string value);
}
[ExtensionAttribute]
public static class ServiceStack.ServiceRoutesExtensions : object {
    [ExtensionAttribute]
public static IServiceRoutes AddFromAssembly(IServiceRoutes routes, Assembly[] assembliesWithServices);
    private static void AddNewApiRoutes(IServiceRoutes routes, Assembly assembly);
    [ExtensionAttribute]
private static void AddRoute(IServiceRoutes routes, Type requestType, string allowedVerbs);
    [ExtensionAttribute]
public static IServiceRoutes Add(IServiceRoutes routes, string restPath, ApplyTo verbs);
    [ExtensionAttribute]
public static IServiceRoutes Add(IServiceRoutes routes, Type requestType, string restPath, ApplyTo verbs);
    [ExtensionAttribute]
private static string ToVerbsString(ApplyTo verbs);
    [ExtensionAttribute]
public static bool IsSubclassOfRawGeneric(Type toCheck, Type generic);
    private static string FormatRoute(string restPath, Expression`1[] propertyExpressions);
    private static string PropertyName(LambdaExpression lambdaExpression);
    [ExtensionAttribute]
public static IServiceRoutes Add(IServiceRoutes serviceRoutes, string restPath, ApplyTo verbs, Expression`1[] propertyExpressions);
}
public class ServiceStack.ServiceStackActivityArgs : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Activity>k__BackingField;
    public IRequest Request { get; public set; }
    public Activity Activity { get; public set; }
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public Activity get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(Activity value);
}
public abstract class ServiceStack.ServiceStackCodePage : SharpCodePage {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    private ICacheClient cache;
    private MemoryCacheClient localCache;
    private IDbConnection db;
    private IRedisClient redis;
    private IMessageProducer messageProducer;
    private ISessionFactory sessionFactory;
    private IAuthRepository authRepository;
    private IAuthRepositoryAsync authRepositoryAsync;
    private IServiceGateway gateway;
    private ISession session;
    public IRequest Request { get; public set; }
    protected IResponse Response { get; }
    public ICacheClient Cache { get; }
    public MemoryCacheClient LocalCache { get; }
    public IDbConnection Db { get; }
    public IRedisClient Redis { get; }
    public IMessageProducer MessageProducer { get; }
    public ISessionFactory SessionFactory { get; }
    public IAuthRepository AuthRepository { get; }
    public IAuthRepositoryAsync AuthRepositoryAsync { get; }
    public IServiceGateway Gateway { get; }
    public IVirtualPathProvider VirtualFileSources { get; }
    public IVirtualFiles VirtualFiles { get; }
    public ISession SessionBag { get; }
    public bool IsAuthenticated { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRequest value);
    public virtual IResolver GetResolver();
    public virtual T TryResolve();
    public virtual T ResolveService();
    protected virtual IResponse get_Response();
    public virtual ICacheClient get_Cache();
    public virtual MemoryCacheClient get_LocalCache();
    public virtual IDbConnection get_Db();
    public virtual IRedisClient get_Redis();
    public virtual IMessageProducer get_MessageProducer();
    public virtual ISessionFactory get_SessionFactory();
    public virtual IAuthRepository get_AuthRepository();
    public virtual IAuthRepositoryAsync get_AuthRepositoryAsync();
    public virtual IServiceGateway get_Gateway();
    public IVirtualPathProvider get_VirtualFileSources();
    public IVirtualFiles get_VirtualFiles();
    public virtual ISession get_SessionBag();
    public virtual IAuthSession GetSession(bool reload);
    protected virtual TUserSession SessionAs();
    public virtual bool get_IsAuthenticated();
    public virtual void PublishMessage(T message);
    public virtual void Dispose();
}
[ExtensionAttribute]
internal static class ServiceStack.ServiceStackDiagnostics : object {
    [ExtensionAttribute]
public static bool Supports(DiagnosticListener listener, string name);
    [ExtensionAttribute]
public static Guid WriteRequestBefore(DiagnosticListener listener, IRequest req, string operation);
    [ExtensionAttribute]
public static void WriteRequestAfter(DiagnosticListener listener, Guid operationId, IRequest req, string operation);
    [ExtensionAttribute]
public static void WriteRequestError(DiagnosticListener listener, Guid operationId, IRequest req, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteGatewayBefore(DiagnosticListener listener, IRequest req, string operation);
    [ExtensionAttribute]
public static void WriteGatewayAfter(DiagnosticListener listener, Guid operationId, IRequest req, string operation);
    [ExtensionAttribute]
public static void WriteGatewayError(DiagnosticListener listener, Guid operationId, IRequest req, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteMqRequestBefore(DiagnosticListener listener, IMessage msg, string operation);
    [ExtensionAttribute]
public static void WriteMqRequestAfter(DiagnosticListener listener, Guid operationId, IMessage msg, string operation);
    [ExtensionAttribute]
public static void WriteMqRequestError(DiagnosticListener listener, Guid operationId, IMessage msg, Exception ex, string operation);
    [ExtensionAttribute]
public static void WriteMqRequestPublish(DiagnosticListener listener, Guid operationId, IMessageQueueClient replyClient, string replyTo, object response, string operation);
    [ExtensionAttribute]
public static void WriteMqRequestPublish(DiagnosticListener listener, Guid operationId, IOneWayClient replyClient, string replyTo, object response, string operation);
}
[ExtensionAttribute]
public static class ServiceStack.ServiceStackDiagnosticsUtils : object {
    [ExtensionAttribute]
public static RequestDiagnosticEvent Init(RequestDiagnosticEvent evt, IRequest req);
    [ExtensionAttribute]
public static MqRequestDiagnosticEvent Init(MqRequestDiagnosticEvent evt, Guid operationId);
}
public abstract class ServiceStack.ServiceStackHost : object {
    protected ILog Log;
    [CompilerGeneratedAttribute]
private static ServiceStackHost <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AfterInitAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ReadyAt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TestMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddTimings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <ServiceAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private static ServiceStackServicesOptions <InitOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IAppSettings <AppSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceController <ServiceController>k__BackingField;
    [CompilerGeneratedAttribute]
private RpcGateway <RpcGateway>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ExcludeAutoRegisteringServiceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Container <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceRoutes <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RestPath> <RestPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private IContentTypes <ContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`2<IRequest, IResponse>> <PreRequestFilters>k__BackingField;
    internal Action`2[] PreRequestFiltersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`3<IRequest, object, Task`1<object>>> <RequestConverters>k__BackingField;
    internal Func`3[] RequestConvertersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`3<IRequest, object, Task`1<object>>> <ResponseConverters>k__BackingField;
    internal Func`3[] ResponseConvertersArray;
    [CompilerGeneratedAttribute]
private List`1<Action`3<IRequest, IResponse, object>> <GlobalRequestFilters>k__BackingField;
    internal Action`3[] GlobalRequestFiltersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`4<IRequest, IResponse, object, Task>> <GlobalRequestFiltersAsync>k__BackingField;
    internal Func`4[] GlobalRequestFiltersAsyncArray;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ITypedFilter> <GlobalTypedRequestFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ITypedFilterAsync> <GlobalTypedRequestFiltersAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`3<IRequest, IResponse, object>> <GlobalResponseFilters>k__BackingField;
    internal Action`3[] GlobalResponseFiltersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`4<IRequest, IResponse, object, Task>> <GlobalResponseFiltersAsync>k__BackingField;
    internal Func`4[] GlobalResponseFiltersAsyncArray;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ITypedFilter> <GlobalTypedResponseFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ITypedFilterAsync> <GlobalTypedResponseFiltersAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`3<IRequest, IResponse, object>> <GlobalMessageRequestFilters>k__BackingField;
    internal Action`3[] GlobalMessageRequestFiltersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`4<IRequest, IResponse, object, Task>> <GlobalMessageRequestFiltersAsync>k__BackingField;
    internal Func`4[] GlobalMessageRequestFiltersAsyncArray;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ITypedFilter> <GlobalTypedMessageRequestFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`3<IRequest, IResponse, object>> <GlobalMessageResponseFilters>k__BackingField;
    internal Action`3[] GlobalMessageResponseFiltersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`4<IRequest, IResponse, object, Task>> <GlobalMessageResponseFiltersAsync>k__BackingField;
    internal Func`4[] GlobalMessageResponseFiltersAsyncArray;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ITypedFilter> <GlobalTypedMessageResponseFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IViewEngine> <ViewEngines>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HandleServiceExceptionDelegate> <ServiceExceptionHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HandleServiceExceptionAsyncDelegate> <ServiceExceptionHandlersAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HandleUncaughtExceptionDelegate> <UncaughtExceptionHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HandleUncaughtExceptionAsyncDelegate> <UncaughtExceptionHandlersAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HandleGatewayExceptionDelegate> <GatewayExceptionHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HandleGatewayExceptionAsyncDelegate> <GatewayExceptionHandlersAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Action`1<IServiceCollection>> <GlobalAfterConfigureServices>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Action`1<ServiceStackHost>> <GlobalBeforeConfigure>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<ServiceStackHost>> <BeforeConfigure>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Action`1<ServiceStackHost>> <GlobalAfterConfigure>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<ServiceStackHost>> <AfterConfigure>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Action`1<ServiceStackHost>> <GlobalAfterPluginsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<ServiceStackHost>> <AfterPluginsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IAppHost>> <AfterInitCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Action`1<ServiceStackHost>> <GlobalAfterAppHostInit>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IAppHost>> <OnDisposeCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IRequest>> <OnEndRequestCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<IHttpRequest, IHttpHandler>> <RawHttpHandlers>k__BackingField;
    internal Func`2[] RawHttpHandlersArray;
    [CompilerGeneratedAttribute]
private List`1<HttpHandlerResolverDelegate> <CatchAllHandlers>k__BackingField;
    internal HttpHandlerResolverDelegate[] CatchAllHandlersArray;
    [CompilerGeneratedAttribute]
private List`1<HttpHandlerResolverDelegate> <FallbackHandlers>k__BackingField;
    internal HttpHandlerResolverDelegate[] FallbackHandlersArray;
    [CompilerGeneratedAttribute]
private IServiceStackHandler <GlobalHtmlErrorHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<HttpStatusCode, IServiceStackHandler> <CustomErrorHttpHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResponseStatus> <StartUpErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResponseStatus> <AsyncErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PluginsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private IVirtualFiles <VirtualFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IVirtualPathProvider <VirtualFileSources>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IVirtualPathProvider> <InsertVirtualFileSources>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IVirtualPathProvider> <AddVirtualFileSources>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`2<IRequest, object>> <GatewayRequestFilters>k__BackingField;
    internal Action`2[] GatewayRequestFiltersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`3<IRequest, object, Task>> <GatewayRequestFiltersAsync>k__BackingField;
    internal Func`3[] GatewayRequestFiltersAsyncArray;
    [CompilerGeneratedAttribute]
private List`1<Action`2<IRequest, object>> <GatewayResponseFilters>k__BackingField;
    internal Action`2[] GatewayResponseFiltersArray;
    [CompilerGeneratedAttribute]
private List`1<Func`3<IRequest, object, Task>> <GatewayResponseFiltersAsync>k__BackingField;
    internal Func`3[] GatewayResponseFiltersAsyncArray;
    [CompilerGeneratedAttribute]
private ScriptContext <DefaultScriptContext>k__BackingField;
    private ScriptContext scriptContext;
    private HostConfig config;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<Action`1<IPlugin>>> <OnPreRegisterPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<Action`1<IPlugin>>> <OnPostRegisterPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<Action`1<IPlugin>>> <OnAfterPluginsLoaded>k__BackingField;
    private bool delayedLoadPlugin;
    protected bool isDisposed;
    [CompilerGeneratedAttribute]
private static MemoryCacheClient <DefaultCache>k__BackingField;
    public bool IsDebugLogEnabled { get; }
    public static ServiceStackHost Instance { get; protected set; }
    public DateTime StartedAt { get; public set; }
    public Nullable`1<DateTime> AfterInitAt { get; public set; }
    public Nullable`1<DateTime> ReadyAt { get; public set; }
    public bool TestMode { get; public set; }
    public bool AddTimings { get; public set; }
    public string PathBase { get; public set; }
    public List`1<Assembly> ServiceAssemblies { get; }
    public static bool HasInit { get; }
    public bool HasStarted { get; }
    public string AppName { get; public set; }
    public static ServiceStackServicesOptions InitOptions { get; internal set; }
    public string ServiceName { get; public set; }
    public IAppSettings AppSettings { get; public set; }
    public ServiceMetadata Metadata { get; public set; }
    public ServiceController ServiceController { get; public set; }
    public RpcGateway RpcGateway { get; public set; }
    public HashSet`1<Type> ExcludeAutoRegisteringServiceTypes { get; public set; }
    public Container Container { get; protected set; }
    public IServiceRoutes Routes { get; public set; }
    public List`1<RestPath> RestPaths { get; public set; }
    public Dictionary`2<Type, Func`2<IRequest, object>> RequestBinders { get; }
    public IContentTypes ContentTypes { get; public set; }
    public List`1<Action`2<IRequest, IResponse>> PreRequestFilters { get; public set; }
    public List`1<Func`3<IRequest, object, Task`1<object>>> RequestConverters { get; public set; }
    public List`1<Func`3<IRequest, object, Task`1<object>>> ResponseConverters { get; public set; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalRequestFilters { get; public set; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalRequestFiltersAsync { get; public set; }
    public Dictionary`2<Type, ITypedFilter> GlobalTypedRequestFilters { get; public set; }
    public Dictionary`2<Type, ITypedFilterAsync> GlobalTypedRequestFiltersAsync { get; public set; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalResponseFilters { get; public set; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalResponseFiltersAsync { get; public set; }
    public Dictionary`2<Type, ITypedFilter> GlobalTypedResponseFilters { get; public set; }
    public Dictionary`2<Type, ITypedFilterAsync> GlobalTypedResponseFiltersAsync { get; public set; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalMessageRequestFilters { get; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalMessageRequestFiltersAsync { get; }
    public Dictionary`2<Type, ITypedFilter> GlobalTypedMessageRequestFilters { get; public set; }
    public List`1<Action`3<IRequest, IResponse, object>> GlobalMessageResponseFilters { get; }
    public List`1<Func`4<IRequest, IResponse, object, Task>> GlobalMessageResponseFiltersAsync { get; }
    public Dictionary`2<Type, ITypedFilter> GlobalTypedMessageResponseFilters { get; public set; }
    public List`1<IViewEngine> ViewEngines { get; public set; }
    public List`1<HandleServiceExceptionDelegate> ServiceExceptionHandlers { get; public set; }
    public List`1<HandleServiceExceptionAsyncDelegate> ServiceExceptionHandlersAsync { get; public set; }
    public List`1<HandleUncaughtExceptionDelegate> UncaughtExceptionHandlers { get; public set; }
    public List`1<HandleUncaughtExceptionAsyncDelegate> UncaughtExceptionHandlersAsync { get; public set; }
    public List`1<HandleGatewayExceptionDelegate> GatewayExceptionHandlers { get; public set; }
    public List`1<HandleGatewayExceptionAsyncDelegate> GatewayExceptionHandlersAsync { get; public set; }
    public static List`1<Action`1<IServiceCollection>> GlobalAfterConfigureServices { get; }
    public static List`1<Action`1<ServiceStackHost>> GlobalBeforeConfigure { get; }
    public List`1<Action`1<ServiceStackHost>> BeforeConfigure { get; public set; }
    public static List`1<Action`1<ServiceStackHost>> GlobalAfterConfigure { get; }
    public List`1<Action`1<ServiceStackHost>> AfterConfigure { get; public set; }
    public static List`1<Action`1<ServiceStackHost>> GlobalAfterPluginsLoaded { get; }
    public List`1<Action`1<ServiceStackHost>> AfterPluginsLoaded { get; public set; }
    public List`1<Action`1<IAppHost>> AfterInitCallbacks { get; public set; }
    public static List`1<Action`1<ServiceStackHost>> GlobalAfterAppHostInit { get; }
    public List`1<Action`1<IAppHost>> OnDisposeCallbacks { get; public set; }
    public List`1<Action`1<IRequest>> OnEndRequestCallbacks { get; public set; }
    public List`1<Func`2<IHttpRequest, IHttpHandler>> RawHttpHandlers { get; public set; }
    public List`1<HttpHandlerResolverDelegate> CatchAllHandlers { get; public set; }
    public List`1<HttpHandlerResolverDelegate> FallbackHandlers { get; public set; }
    public IServiceStackHandler GlobalHtmlErrorHttpHandler { get; public set; }
    public Dictionary`2<HttpStatusCode, IServiceStackHandler> CustomErrorHttpHandlers { get; public set; }
    public List`1<ResponseStatus> StartUpErrors { get; public set; }
    public List`1<ResponseStatus> AsyncErrors { get; public set; }
    public List`1<string> PluginsLoaded { get; public set; }
    public List`1<IPlugin> Plugins { get; public set; }
    public IVirtualFiles VirtualFiles { get; public set; }
    public IVirtualPathProvider VirtualFileSources { get; public set; }
    public IVirtualDirectory RootDirectory { get; }
    public IVirtualDirectory ContentRootDirectory { get; }
    public List`1<IVirtualPathProvider> InsertVirtualFileSources { get; public set; }
    public List`1<IVirtualPathProvider> AddVirtualFileSources { get; public set; }
    public List`1<Action`2<IRequest, object>> GatewayRequestFilters { get; public set; }
    public List`1<Func`3<IRequest, object, Task>> GatewayRequestFiltersAsync { get; public set; }
    public List`1<Action`2<IRequest, object>> GatewayResponseFilters { get; public set; }
    public List`1<Func`3<IRequest, object, Task>> GatewayResponseFiltersAsync { get; public set; }
    public ScriptContext DefaultScriptContext { get; public set; }
    public ScriptContext ScriptContext { get; }
    public HostConfig Config { get; public set; }
    public Dictionary`2<Type, List`1<Action`1<IPlugin>>> OnPreRegisterPlugins { get; public set; }
    public Dictionary`2<Type, List`1<Action`1<IPlugin>>> OnPostRegisterPlugins { get; public set; }
    public Dictionary`2<Type, List`1<Action`1<IPlugin>>> OnAfterPluginsLoaded { get; public set; }
    public MetadataPagesConfig MetadataPagesConfig { get; }
    public static MemoryCacheClient DefaultCache { get; }
    protected ServiceStackHost(string serviceName, Assembly[] assembliesWithServices);
    private static ServiceStackHost();
    public virtual List`1<Type> ExportSoapOperationTypes(List`1<Type> operationTypes);
    public virtual bool ExportSoapType(Type type);
    public virtual void WriteSoapMessage(IRequest req, Message message, Stream outputStream);
    public bool get_IsDebugLogEnabled();
    [CompilerGeneratedAttribute]
public static ServiceStackHost get_Instance();
    [CompilerGeneratedAttribute]
protected static void set_Instance(ServiceStackHost value);
    [CompilerGeneratedAttribute]
public DateTime get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AfterInitAt();
    [CompilerGeneratedAttribute]
public void set_AfterInitAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ReadyAt();
    [CompilerGeneratedAttribute]
public void set_ReadyAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_TestMode();
    [CompilerGeneratedAttribute]
public void set_TestMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddTimings();
    [CompilerGeneratedAttribute]
public void set_AddTimings(bool value);
    public virtual string get_PathBase();
    public virtual void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Assembly> get_ServiceAssemblies();
    public static bool get_HasInit();
    public bool get_HasStarted();
    public static bool IsReady();
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public static ServiceStackServicesOptions get_InitOptions();
    [CompilerGeneratedAttribute]
internal static void set_InitOptions(ServiceStackServicesOptions value);
    public abstract virtual void Configure(Container container);
    protected virtual ServiceController CreateServiceController(Assembly[] assembliesWithServices);
    protected List`1<Type> GetAssemblyServiceTypes(Assembly[] assembliesWithServices);
    protected virtual ServiceController CreateServiceController(IEnumerable`1<Type> serviceTypes);
    public virtual void SetConfig(HostConfig config);
    public virtual ServiceStackHost Init();
    protected virtual void OnReady();
    public virtual void ConfigureLogging();
    protected virtual void RegisterLicenseKey(string licenseKeyText);
    protected void PopulateArrayFilters();
    private void LogInitComplete();
    public virtual string GetWebRootPath();
    public virtual List`1<IVirtualPathProvider> GetVirtualFileSources();
    public virtual T GetVirtualFileSource();
    public virtual ServiceStackHost Start(string urlBase);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IAppSettings get_AppSettings();
    [CompilerGeneratedAttribute]
public void set_AppSettings(IAppSettings value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(ServiceMetadata value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceController get_ServiceController();
    [CompilerGeneratedAttribute]
public void set_ServiceController(ServiceController value);
    [CompilerGeneratedAttribute]
public RpcGateway get_RpcGateway();
    [CompilerGeneratedAttribute]
public void set_RpcGateway(RpcGateway value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_ExcludeAutoRegisteringServiceTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludeAutoRegisteringServiceTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public sealed virtual Container get_Container();
    [CompilerGeneratedAttribute]
protected void set_Container(Container value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceRoutes get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(IServiceRoutes value);
    [CompilerGeneratedAttribute]
public List`1<RestPath> get_RestPaths();
    [CompilerGeneratedAttribute]
public void set_RestPaths(List`1<RestPath> value);
    public sealed virtual Dictionary`2<Type, Func`2<IRequest, object>> get_RequestBinders();
    [CompilerGeneratedAttribute]
public sealed virtual IContentTypes get_ContentTypes();
    [CompilerGeneratedAttribute]
public void set_ContentTypes(IContentTypes value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`2<IRequest, IResponse>> get_PreRequestFilters();
    [CompilerGeneratedAttribute]
public void set_PreRequestFilters(List`1<Action`2<IRequest, IResponse>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`3<IRequest, object, Task`1<object>>> get_RequestConverters();
    [CompilerGeneratedAttribute]
public void set_RequestConverters(List`1<Func`3<IRequest, object, Task`1<object>>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`3<IRequest, object, Task`1<object>>> get_ResponseConverters();
    [CompilerGeneratedAttribute]
public void set_ResponseConverters(List`1<Func`3<IRequest, object, Task`1<object>>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalRequestFilters();
    [CompilerGeneratedAttribute]
public void set_GlobalRequestFilters(List`1<Action`3<IRequest, IResponse, object>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalRequestFiltersAsync();
    [CompilerGeneratedAttribute]
public void set_GlobalRequestFiltersAsync(List`1<Func`4<IRequest, IResponse, object, Task>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, ITypedFilter> get_GlobalTypedRequestFilters();
    [CompilerGeneratedAttribute]
public void set_GlobalTypedRequestFilters(Dictionary`2<Type, ITypedFilter> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, ITypedFilterAsync> get_GlobalTypedRequestFiltersAsync();
    [CompilerGeneratedAttribute]
public void set_GlobalTypedRequestFiltersAsync(Dictionary`2<Type, ITypedFilterAsync> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalResponseFilters();
    [CompilerGeneratedAttribute]
public void set_GlobalResponseFilters(List`1<Action`3<IRequest, IResponse, object>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalResponseFiltersAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GlobalResponseFiltersAsync(List`1<Func`4<IRequest, IResponse, object, Task>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, ITypedFilter> get_GlobalTypedResponseFilters();
    [CompilerGeneratedAttribute]
public void set_GlobalTypedResponseFilters(Dictionary`2<Type, ITypedFilter> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, ITypedFilterAsync> get_GlobalTypedResponseFiltersAsync();
    [CompilerGeneratedAttribute]
public void set_GlobalTypedResponseFiltersAsync(Dictionary`2<Type, ITypedFilterAsync> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalMessageRequestFilters();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalMessageRequestFiltersAsync();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, ITypedFilter> get_GlobalTypedMessageRequestFilters();
    [CompilerGeneratedAttribute]
public void set_GlobalTypedMessageRequestFilters(Dictionary`2<Type, ITypedFilter> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`3<IRequest, IResponse, object>> get_GlobalMessageResponseFilters();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`4<IRequest, IResponse, object, Task>> get_GlobalMessageResponseFiltersAsync();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, ITypedFilter> get_GlobalTypedMessageResponseFilters();
    [CompilerGeneratedAttribute]
public void set_GlobalTypedMessageResponseFilters(Dictionary`2<Type, ITypedFilter> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IViewEngine> get_ViewEngines();
    [CompilerGeneratedAttribute]
public void set_ViewEngines(List`1<IViewEngine> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HandleServiceExceptionDelegate> get_ServiceExceptionHandlers();
    [CompilerGeneratedAttribute]
public void set_ServiceExceptionHandlers(List`1<HandleServiceExceptionDelegate> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HandleServiceExceptionAsyncDelegate> get_ServiceExceptionHandlersAsync();
    [CompilerGeneratedAttribute]
public void set_ServiceExceptionHandlersAsync(List`1<HandleServiceExceptionAsyncDelegate> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HandleUncaughtExceptionDelegate> get_UncaughtExceptionHandlers();
    [CompilerGeneratedAttribute]
public void set_UncaughtExceptionHandlers(List`1<HandleUncaughtExceptionDelegate> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HandleUncaughtExceptionAsyncDelegate> get_UncaughtExceptionHandlersAsync();
    [CompilerGeneratedAttribute]
public void set_UncaughtExceptionHandlersAsync(List`1<HandleUncaughtExceptionAsyncDelegate> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HandleGatewayExceptionDelegate> get_GatewayExceptionHandlers();
    [CompilerGeneratedAttribute]
public void set_GatewayExceptionHandlers(List`1<HandleGatewayExceptionDelegate> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HandleGatewayExceptionAsyncDelegate> get_GatewayExceptionHandlersAsync();
    [CompilerGeneratedAttribute]
public void set_GatewayExceptionHandlersAsync(List`1<HandleGatewayExceptionAsyncDelegate> value);
    [CompilerGeneratedAttribute]
public static List`1<Action`1<IServiceCollection>> get_GlobalAfterConfigureServices();
    [CompilerGeneratedAttribute]
public static List`1<Action`1<ServiceStackHost>> get_GlobalBeforeConfigure();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<ServiceStackHost>> get_BeforeConfigure();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BeforeConfigure(List`1<Action`1<ServiceStackHost>> value);
    [CompilerGeneratedAttribute]
public static List`1<Action`1<ServiceStackHost>> get_GlobalAfterConfigure();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<ServiceStackHost>> get_AfterConfigure();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AfterConfigure(List`1<Action`1<ServiceStackHost>> value);
    [CompilerGeneratedAttribute]
public static List`1<Action`1<ServiceStackHost>> get_GlobalAfterPluginsLoaded();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<ServiceStackHost>> get_AfterPluginsLoaded();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AfterPluginsLoaded(List`1<Action`1<ServiceStackHost>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IAppHost>> get_AfterInitCallbacks();
    [CompilerGeneratedAttribute]
public void set_AfterInitCallbacks(List`1<Action`1<IAppHost>> value);
    [CompilerGeneratedAttribute]
public static List`1<Action`1<ServiceStackHost>> get_GlobalAfterAppHostInit();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IAppHost>> get_OnDisposeCallbacks();
    [CompilerGeneratedAttribute]
public void set_OnDisposeCallbacks(List`1<Action`1<IAppHost>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IRequest>> get_OnEndRequestCallbacks();
    [CompilerGeneratedAttribute]
public void set_OnEndRequestCallbacks(List`1<Action`1<IRequest>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`2<IHttpRequest, IHttpHandler>> get_RawHttpHandlers();
    [CompilerGeneratedAttribute]
public void set_RawHttpHandlers(List`1<Func`2<IHttpRequest, IHttpHandler>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HttpHandlerResolverDelegate> get_CatchAllHandlers();
    [CompilerGeneratedAttribute]
public void set_CatchAllHandlers(List`1<HttpHandlerResolverDelegate> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<HttpHandlerResolverDelegate> get_FallbackHandlers();
    [CompilerGeneratedAttribute]
public void set_FallbackHandlers(List`1<HttpHandlerResolverDelegate> value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceStackHandler get_GlobalHtmlErrorHttpHandler();
    [CompilerGeneratedAttribute]
public void set_GlobalHtmlErrorHttpHandler(IServiceStackHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<HttpStatusCode, IServiceStackHandler> get_CustomErrorHttpHandlers();
    [CompilerGeneratedAttribute]
public void set_CustomErrorHttpHandlers(Dictionary`2<HttpStatusCode, IServiceStackHandler> value);
    [CompilerGeneratedAttribute]
public List`1<ResponseStatus> get_StartUpErrors();
    [CompilerGeneratedAttribute]
public void set_StartUpErrors(List`1<ResponseStatus> value);
    [CompilerGeneratedAttribute]
public List`1<ResponseStatus> get_AsyncErrors();
    [CompilerGeneratedAttribute]
public void set_AsyncErrors(List`1<ResponseStatus> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PluginsLoaded();
    [CompilerGeneratedAttribute]
public void set_PluginsLoaded(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IPlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public void set_Plugins(List`1<IPlugin> value);
    [CompilerGeneratedAttribute]
public sealed virtual IVirtualFiles get_VirtualFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VirtualFiles(IVirtualFiles value);
    [CompilerGeneratedAttribute]
public sealed virtual IVirtualPathProvider get_VirtualFileSources();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VirtualFileSources(IVirtualPathProvider value);
    public sealed virtual IVirtualDirectory get_RootDirectory();
    public sealed virtual IVirtualDirectory get_ContentRootDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IVirtualPathProvider> get_InsertVirtualFileSources();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertVirtualFileSources(List`1<IVirtualPathProvider> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IVirtualPathProvider> get_AddVirtualFileSources();
    [CompilerGeneratedAttribute]
public void set_AddVirtualFileSources(List`1<IVirtualPathProvider> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`2<IRequest, object>> get_GatewayRequestFilters();
    [CompilerGeneratedAttribute]
public void set_GatewayRequestFilters(List`1<Action`2<IRequest, object>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`3<IRequest, object, Task>> get_GatewayRequestFiltersAsync();
    [CompilerGeneratedAttribute]
public void set_GatewayRequestFiltersAsync(List`1<Func`3<IRequest, object, Task>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`2<IRequest, object>> get_GatewayResponseFilters();
    [CompilerGeneratedAttribute]
public void set_GatewayResponseFilters(List`1<Action`2<IRequest, object>> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`3<IRequest, object, Task>> get_GatewayResponseFiltersAsync();
    [CompilerGeneratedAttribute]
public void set_GatewayResponseFiltersAsync(List`1<Func`3<IRequest, object, Task>> value);
    [CompilerGeneratedAttribute]
public ScriptContext get_DefaultScriptContext();
    [CompilerGeneratedAttribute]
public void set_DefaultScriptContext(ScriptContext value);
    public sealed virtual ScriptContext get_ScriptContext();
    public virtual object EvalExpressionCached(string expr);
    public virtual object EvalExpression(string expr);
    public virtual object EvalScriptValue(IScriptValue scriptValue, IRequest req, Dictionary`2<string, object> args);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<EvalScriptValueAsync>d__338")]
public virtual Task`1<object> EvalScriptValueAsync(IScriptValue scriptValue, IRequest req, Dictionary`2<string, object> args);
    private bool ResolveScriptValue(IScriptValue scriptValue, Object& exprValue);
    private static void InitPageResult(PageResult pageResult, IRequest req, Dictionary`2<string, object> args);
    public virtual object EvalScript(PageResult pageResult, IRequest req, Dictionary`2<string, object> args);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<EvalScriptAsync>d__342")]
public virtual Task`1<object> EvalScriptAsync(PageResult pageResult, IRequest req, Dictionary`2<string, object> args);
    public virtual object OnPreExecuteServiceFilter(IService service, object request, IRequest httpReq, IResponse httpRes);
    public virtual object OnPostExecuteServiceFilter(IService service, object response, IRequest httpReq, IResponse httpRes);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<OnGatewayException>d__345")]
public virtual Task OnGatewayException(IRequest httpReq, object request, Exception ex);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<OnServiceException>d__346")]
public virtual Task`1<object> OnServiceException(IRequest httpReq, object request, Exception ex);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<OnUncaughtException>d__347")]
public virtual Task OnUncaughtException(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    [ObsoleteAttribute("Use HandleResponseException")]
protected virtual Task HandleUncaughtException(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    public virtual Task HandleResponseException(IRequest httpReq, IResponse httpRes, string operationName, Exception ex);
    public virtual Task HandleShortCircuitedErrors(IRequest req, IResponse res, object requestDto, HttpStatusCode statusCode, string statusDescription);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<HandleShortCircuitedErrors>d__351")]
public virtual Task HandleShortCircuitedErrors(IRequest req, IResponse res, object requestDto);
    public virtual void OnStartupException(Exception ex);
    public virtual void OnStartupException(Exception ex, string target, string method);
    public sealed virtual HostConfig get_Config();
    public void set_Config(HostConfig value);
    public virtual void OnConfigLoad();
    public virtual void OnAfterConfigChanged();
    public virtual void OnBeforeInit();
    public virtual void OnAfterInit();
    private void HandleUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs args);
    private void RunPreInitPlugin(object instance);
    private void RunPostInitPlugin(object instance);
    private void RunAfterInitAppHost(object instance);
    private void RunManagedAction(Action`1<ServiceStackHost> fn);
    private void RunAfterPluginsLoaded(string specifiedContentType);
    public virtual void Release(object instance);
    public virtual void OnEndRequest(IRequest request);
    public virtual void Register(T instance);
    public virtual void RegisterAs();
    public virtual T TryResolve();
    public virtual T Resolve();
    public T GetPlugin();
    public bool HasPlugin();
    public IPlugin GetPlugin(Type pluginType);
    public bool HasPlugin(Type pluginType);
    public virtual IServiceRunner`1<TRequest> CreateServiceRunner(ActionContext actionContext);
    public virtual string ResolveLocalizedString(string text, IRequest request);
    public virtual string ResolveLocalizedStringFormat(string text, Object[] args, IRequest request);
    public virtual string ResolveAbsoluteUrl(string virtualPath, IRequest httpReq);
    public virtual bool UseHttps(IRequest httpReq);
    public virtual string GetParam(IRequest httpReq, string name);
    public virtual string GetBaseUrl(IRequest httpReq);
    public virtual string ResolvePhysicalPath(string virtualPath, IRequest httpReq);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, List`1<Action`1<IPlugin>>> get_OnPreRegisterPlugins();
    [CompilerGeneratedAttribute]
public void set_OnPreRegisterPlugins(Dictionary`2<Type, List`1<Action`1<IPlugin>>> value);
    public sealed virtual void ConfigurePlugin(Action`1<T> configure);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, List`1<Action`1<IPlugin>>> get_OnPostRegisterPlugins();
    [CompilerGeneratedAttribute]
public void set_OnPostRegisterPlugins(Dictionary`2<Type, List`1<Action`1<IPlugin>>> value);
    public sealed virtual void PostConfigurePlugin(Action`1<T> configure);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, List`1<Action`1<IPlugin>>> get_OnAfterPluginsLoaded();
    [CompilerGeneratedAttribute]
public void set_OnAfterPluginsLoaded(Dictionary`2<Type, List`1<Action`1<IPlugin>>> value);
    public sealed virtual void AfterPluginLoaded(Action`1<T> configure);
    public virtual void LoadPlugin(IPlugin[] plugins);
    internal virtual void LoadPluginsInternal(IPlugin[] plugins);
    public virtual object ExecuteService(object requestDto);
    public virtual object ExecuteService(object requestDto, IRequest req);
    public virtual Task`1<object> ExecuteServiceAsync(object requestDto, IRequest req);
    public virtual object ExecuteService(object requestDto, RequestAttributes requestAttributes);
    public virtual object ExecuteMessage(IMessage mqMessage);
    public virtual object ExecuteMessageInProcess(IMessage mqMessage);
    public virtual object ExecuteMessage(IMessage dto, IRequest req);
    public sealed virtual Task`1<object> ExecuteMessageAsync(IMessage mqMessage, CancellationToken token);
    public Task`1<object> ExecuteMessageAsync(IMessage mqMessage, IRequest req, CancellationToken token);
    public virtual void RegisterService(String[] atRestPaths);
    public virtual void RegisterService(Type serviceType, String[] atRestPaths);
    public sealed virtual void RegisterServicesInAssembly(Assembly assembly);
    public virtual RouteAttribute[] GetRouteAttributes(Type requestType);
    public virtual string GenerateWsdl(WsdlTemplateBase wsdlTemplate);
    public sealed virtual void RegisterTypedRequestFilter(Action`3<IRequest, IResponse, T> filterFn);
    public sealed virtual void RegisterTypedRequestFilterAsync(Func`4<IRequest, IResponse, T, Task> filterFn);
    public sealed virtual void RegisterTypedRequestFilter(Func`2<Container, ITypedFilter`1<T>> filter);
    public sealed virtual void RegisterTypedRequestFilterAsync(Func`2<Container, ITypedFilterAsync`1<T>> filter);
    public sealed virtual void RegisterTypedResponseFilter(Action`3<IRequest, IResponse, T> filterFn);
    public sealed virtual void RegisterTypedResponseFilterAsync(Func`4<IRequest, IResponse, T, Task> filterFn);
    public sealed virtual void RegisterTypedResponseFilter(Func`2<Container, ITypedFilter`1<T>> filter);
    public sealed virtual void RegisterTypedResponseFilterAsync(Func`2<Container, ITypedFilterAsync`1<T>> filter);
    private void RegisterTypedFilter(Action`1<Action`3<IRequest, IResponse, T>> registerTypedFilter, Func`2<Container, ITypedFilter`1<T>> filter);
    private void RegisterTypedFilterAsync(Action`1<Func`4<IRequest, IResponse, T, Task>> registerTypedFilter, Func`2<Container, ITypedFilterAsync`1<T>> filter);
    public sealed virtual void RegisterTypedMessageRequestFilter(Action`3<IRequest, IResponse, T> filterFn);
    public sealed virtual void RegisterTypedMessageResponseFilter(Action`3<IRequest, IResponse, T> filterFn);
    public virtual string MapProjectPath(string relativePath);
    public virtual string ResolvePathInfo(IRequest request, string originalPathInfo);
    public static string NormalizePathInfo(string pathInfo, string mode);
    public virtual IHttpHandler ReturnRedirectHandler(IHttpRequest httpReq);
    public virtual IHttpHandler ReturnRequestInfoHandler(IHttpRequest httpReq);
    public static T TryGetPlugin();
    public static T GetRequiredPlugin();
    public static string GetHostNamespace();
    public static ServiceMetadata GetOrCreateMetadata();
    public static INativeTypesMetadata GetOrCreateNativeTypesMetadata();
    public static List`1<Assembly> TryGetServiceAssemblies();
    public virtual void OnApplicationStarted();
    public virtual void OnApplicationStopping();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyRequestConvertersAsync>d__447")]
public Task`1<object> ApplyRequestConvertersAsync(IRequest req, object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyResponseConvertersAsync>d__448")]
public Task`1<object> ApplyResponseConvertersAsync(IRequest req, object responseDto);
    public bool ApplyCustomHandlerRequestFilters(IRequest httpReq, IResponse httpRes);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyPreAuthenticateFiltersAsync>d__450")]
public virtual Task ApplyPreAuthenticateFiltersAsync(IRequest httpReq, IResponse httpRes);
    public bool ApplyPreRequestFilters(IRequest httpReq, IResponse httpRes);
    [ObsoleteAttribute("Use ApplyRequestFiltersAsync")]
public bool ApplyRequestFilters(IRequest req, IResponse res, object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyRequestFiltersAsync>d__453")]
public Task ApplyRequestFiltersAsync(IRequest req, IResponse res, object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyRequestFiltersSingleAsync>d__454")]
protected Task ApplyRequestFiltersSingleAsync(IRequest req, IResponse res, object requestDto);
    [ObsoleteAttribute("Use ApplyResponseFiltersAsync")]
public bool ApplyResponseFilters(IRequest req, IResponse res, object response);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyResponseFiltersAsync>d__456")]
public Task ApplyResponseFiltersAsync(IRequest req, IResponse res, object response);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyResponseFiltersSingleAsync>d__457")]
protected Task ApplyResponseFiltersSingleAsync(IRequest req, IResponse res, object response);
    public bool ApplyMessageRequestFilters(IRequest req, IResponse res, object requestDto);
    public bool ApplyMessageResponseFilters(IRequest req, IResponse res, object response);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyGatewayRequestFiltersAsync>d__460")]
public Task`1<bool> ApplyGatewayRequestFiltersAsync(IRequest req, object request);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ApplyGatewayResponseFiltersAsync>d__461")]
public Task`1<bool> ApplyGatewayResponseFiltersAsync(IRequest req, object responseDto);
    public void ExecTypedFilters(Dictionary`2<Type, ITypedFilter> typedFilters, IRequest req, IResponse res, object dto);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<ExecTypedFiltersAsync>d__463")]
public Task ExecTypedFiltersAsync(Dictionary`2<Type, ITypedFilterAsync> typedFilters, IRequest req, IResponse res, object dto);
    public virtual IHttpHandler GetCatchAllHandler(IHttpRequest httpReq);
    public virtual IHttpHandler GetFallbackHandler(IHttpRequest httpReq);
    public MetadataPagesConfig get_MetadataPagesConfig();
    public virtual TimeSpan GetDefaultSessionExpiry(IRequest req);
    public bool HasFeature(Feature feature);
    public void AssertFeatures(Feature usesFeatures);
    public void AssertContentType(string contentType);
    public bool HasAccessToMetadata(IRequest httpReq, IResponse httpRes);
    public void HandleErrorResponse(IRequest httpReq, IResponse httpRes, HttpStatusCode errorStatus, string errorStatusDescription);
    public IServiceStackHandler GetCustomErrorHandler(int errorStatusCode);
    public IServiceStackHandler GetCustomErrorHandler(HttpStatusCode errorStatus);
    public IServiceStackHandler GetNotFoundHandler();
    public IHttpHandler GetCustomErrorHttpHandler(HttpStatusCode errorStatus);
    public bool HasValidAuthSecret(IRequest httpReq);
    public virtual ErrorResponse CreateErrorResponse(Exception ex, object request);
    public virtual ResponseStatus CreateResponseStatus(Exception ex, object request);
    public Exception UseException(Exception ex);
    public virtual void OnLogError(Type type, string message, Exception innerEx);
    public virtual string TryGetUserId(IRequest req);
    public virtual void OnExceptionTypeFilter(Exception ex, ResponseStatus responseStatus);
    public virtual string SanitizeString(string message);
    [ObsoleteAttribute("Use OnSaveSessionAsync")]
public virtual void OnSaveSession(IRequest httpReq, IAuthSession session, Nullable`1<TimeSpan> expiresIn);
    public virtual Task OnSaveSessionAsync(IRequest httpReq, IAuthSession session, Nullable`1<TimeSpan> expiresIn, CancellationToken token);
    public virtual IAuthSession OnSessionFilter(IRequest req, IAuthSession session, string withSessionId);
    public virtual void HttpCookieFilter(HttpCookie cookie);
    public virtual bool SetCookieFilter(IRequest req, Cookie cookie);
    [ObsoleteAttribute("Override SetCookieFilter")]
protected virtual bool AllowSetCookie(IRequest req, string cookieName);
    public virtual IRequest TryGetCurrentRequest();
    public virtual object OnAfterExecute(IRequest req, object requestDto, object response);
    public virtual void OnLogRequest(IRequest req, object requestDto, object response, TimeSpan elapsed);
    public virtual MetadataTypesConfig GetTypesConfigForMetadata(IRequest req);
    public virtual IDbConnection GetDbConnection(IRequest req);
    public virtual IDbConnection GetDbConnection(string namedConnection);
    public virtual string GetDbNamedConnection(IRequest req);
    public virtual IRedisClient GetRedisClient(IRequest req);
    public virtual ValueTask`1<IRedisClientAsync> GetRedisClientAsync(IRequest req);
    [CompilerGeneratedAttribute]
public static MemoryCacheClient get_DefaultCache();
    public virtual ICacheClient GetCacheClient(IRequest req);
    public virtual ICacheClientAsync GetCacheClientAsync(IRequest req);
    public virtual void TryGetNativeCacheClient(IRequest req, ICacheClient& cacheSync, ICacheClientAsync& cacheAsync);
    public virtual MemoryCacheClient GetMemoryCacheClient(IRequest req);
    public virtual IMessageProducer GetMessageProducer(IRequest req);
    public virtual IServiceGateway GetServiceGateway();
    public virtual IServiceGateway GetServiceGateway(IRequest req);
    public virtual IAuthRepository GetAuthRepository(IRequest req);
    public virtual IAuthRepositoryAsync GetAuthRepositoryAsync(IRequest req);
    public virtual IAuthSession AssertAuthenticated(IAuthSession session, IRequest req);
    public virtual ICookies GetCookies(IHttpResponse res);
    public virtual bool ShouldCompressFile(IVirtualFile file);
    public virtual T GetRuntimeConfig(IRequest req, string name, T defaultValue);
    public virtual void PublishMessage(IMessageProducer messageProducer, T message);
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackHost/<WriteAutoHtmlResponseAsync>d__518")]
public virtual Task WriteAutoHtmlResponseAsync(IRequest req, object response, string html, Stream outputStream);
    public virtual List`1<string> GetMetadataPluginIds();
    public virtual string GetAuthorization(IRequest req);
    public virtual string GetBearerToken(IRequest req);
    public virtual string GetJwtToken(IRequest req);
    public virtual string GetRefreshToken(IRequest req);
    public virtual string GetJwtRefreshToken(IRequest req);
    public virtual IHttpResult Redirect(IServiceBase service, string redirect, string message);
    public virtual IHttpResult LocalRedirect(IServiceBase service, string redirect, string message);
    public virtual IHttpResult AuthenticationRequired(IServiceBase service);
    public virtual void OnSerializeJson(IRequest req, object dto, Stream outputStream);
    public virtual object OnDeserializeJson(Type intoType, Stream fromStream);
    public virtual string GetCompressionType(IRequest request);
    public virtual string CreateSessionId();
    public virtual bool HasUi();
    public virtual bool ShouldProfileRequest(IRequest req);
    public virtual void OnAfterAwait(IRequest req, string file, long line, string member);
    [CompilerGeneratedAttribute]
private void <Init>g__RunPreConfigure|55_4(object instance);
    [CompilerGeneratedAttribute]
private void <Init>g__RunConfigure|55_6(object instance);
    [CompilerGeneratedAttribute]
private void <Init>b__55_7(Action`1<IServiceCollection> fn);
    [CompilerGeneratedAttribute]
private void <OnAfterInit>b__361_10(Config x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <OnAfterInit>b__361_11(Type x);
    [CompilerGeneratedAttribute]
private IHttpHandler <OnAfterInit>b__361_16(IHttpRequest httpReq);
    [CompilerGeneratedAttribute]
private bool <HandleUnobservedTaskException>b__362_0(Exception ex);
}
public class ServiceStack.ServiceStackHttpHandler : HttpAsyncTaskHandler {
    private IServiceStackHandler servicestackHandler;
    public ServiceStackHttpHandler(IServiceStackHandler servicestackHandler);
    public virtual void ProcessRequest(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.ServiceStackMqActivityArgs : object {
    [CompilerGeneratedAttribute]
private IMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Activity>k__BackingField;
    public IMessage Message { get; public set; }
    public Activity Activity { get; public set; }
    [CompilerGeneratedAttribute]
public IMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(IMessage value);
    [CompilerGeneratedAttribute]
public Activity get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(Activity value);
}
public class ServiceStack.ServiceStackProvider : object {
    [CompilerGeneratedAttribute]
private IHttpRequest <request>P;
    private IResolver resolver;
    private IServiceGateway gateway;
    private RpcGateway rpcGateway;
    private ICacheClient cache;
    private ICacheClientAsync cacheAsync;
    private IDbConnection db;
    private IRedisClient redis;
    private IMessageProducer messageProducer;
    private IAuthRepository authRepository;
    private IAuthRepositoryAsync authRepositoryAsync;
    private ISessionFactory sessionFactory;
    private ISession session;
    private ISessionAsync sessionAsync;
    public IAppSettings AppSettings { get; }
    public IHttpRequest Request { get; }
    public IHttpResponse Response { get; }
    public IServiceGateway Gateway { get; }
    public RpcGateway RpcGateway { get; }
    public ICacheClient Cache { get; }
    public ICacheClientAsync CacheAsync { get; }
    public IDbConnection Db { get; }
    public IRedisClient Redis { get; }
    public IMessageProducer MessageProducer { get; }
    public IAuthRepository AuthRepository { get; }
    public IAuthRepositoryAsync AuthRepositoryAsync { get; }
    public ISessionFactory SessionFactory { get; }
    public ISession SessionBag { get; }
    public ISessionAsync SessionBagAsync { get; }
    public bool IsAuthenticated { get; }
    public ServiceStackProvider(IHttpRequest request, IResolver resolver);
    public virtual void SetResolver(IResolver resolver);
    public virtual IResolver GetResolver();
    public sealed virtual IAppSettings get_AppSettings();
    public virtual IHttpRequest get_Request();
    public virtual IHttpResponse get_Response();
    public virtual T TryResolve();
    public virtual T ResolveService();
    public virtual IServiceGateway get_Gateway();
    public sealed virtual RpcGateway get_RpcGateway();
    public sealed virtual object Execute(object requestDto);
    public sealed virtual TResponse Execute(IReturn`1<TResponse> requestDto);
    public sealed virtual object Execute(IRequest request);
    public object ForwardRequest();
    public virtual ICacheClient get_Cache();
    public virtual ICacheClientAsync get_CacheAsync();
    public virtual IDbConnection get_Db();
    public virtual IRedisClient get_Redis();
    public virtual ValueTask`1<IRedisClientAsync> GetRedisAsync();
    public virtual IMessageProducer get_MessageProducer();
    public sealed virtual IAuthRepository get_AuthRepository();
    public sealed virtual IAuthRepositoryAsync get_AuthRepositoryAsync();
    public virtual ISessionFactory get_SessionFactory();
    public virtual TUserSession SessionAs();
    public virtual Task`1<TUserSession> SessionAsAsync(CancellationToken token);
    public virtual void ClearSession();
    public sealed virtual Task ClearSessionAsync(CancellationToken token);
    public virtual ISession get_SessionBag();
    public virtual ISessionAsync get_SessionBagAsync();
    public virtual IAuthSession GetSession(bool reload);
    public virtual Task`1<IAuthSession> GetSessionAsync(bool reload, CancellationToken token);
    public virtual bool get_IsAuthenticated();
    public virtual void PublishMessage(T message);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("ServiceStack.ServiceStackProvider/<DisposeAsync>d__64")]
public ValueTask DisposeAsync();
}
[ExtensionAttribute]
public static class ServiceStack.ServiceStackProviderExtensions : object {
    [ExtensionAttribute]
public static bool IsAuthorized(IHasServiceStackProvider hasProvider, AuthenticateAttribute authAttr);
    [ExtensionAttribute]
public static bool HasAccess(IHasServiceStackProvider hasProvider, ICollection`1<RequiredRoleAttribute> roleAttrs, ICollection`1<RequiresAnyRoleAttribute> anyRoleAttrs, ICollection`1<RequiredPermissionAttribute> permAttrs, ICollection`1<RequiresAnyPermissionAttribute> anyPermAttrs);
    [ExtensionAttribute]
public static IValidator`1<T> ResolveValidator(IHasServiceStackProvider provider);
}
public class ServiceStack.ServiceStackScriptBlocks : object {
    public sealed virtual void Register(ScriptContext context);
}
public class ServiceStack.ServiceStackScripts : ScriptMethods {
    [CompilerGeneratedAttribute]
private static List`1<string> <RemoveNewLinesFor>k__BackingField;
    public static ILog Log;
    public static List`1<string> RemoveNewLinesFor { get; }
    private ServiceStackHost appHost { get; }
    private static ServiceStackScripts();
    [CompilerGeneratedAttribute]
public static List`1<string> get_RemoveNewLinesFor();
    public sealed virtual void Configure(ScriptContext context);
    private ServiceStackHost get_appHost();
    public IVirtualFiles vfsContent();
    public MemoryVirtualFiles hostVfsMemory();
    public FileSystemVirtualFiles hostVfsFileSystem();
    public GistVirtualFiles hostVfsGist();
    public IHttpRequest httpRequest(ScriptScopeContext scope);
    public object requestItem(ScriptScopeContext scope, string key);
    public object baseUrl(ScriptScopeContext scope);
    public object resolveUrl(ScriptScopeContext scope, string virtualPath);
    public string serviceUrl(ScriptScopeContext scope, string requestName);
    public string serviceUrl(ScriptScopeContext scope, string requestName, Dictionary`2<string, object> properties);
    public string serviceUrl(ScriptScopeContext scope, string requestName, Dictionary`2<string, object> properties, string httpMethod);
    private Type AssertRequestType(string requestName);
    public object execService(ScriptScopeContext scope, string requestName);
    public object execService(ScriptScopeContext scope, string requestName, object options);
    public object sendToGateway(ScriptScopeContext scope, string requestName);
    public object sendToGateway(ScriptScopeContext scope, object dto, string requestName);
    public object sendToGateway(ScriptScopeContext scope, object dto, string requestName, object options);
    public object publishToGateway(ScriptScopeContext scope, string requestName);
    public object publishToGateway(ScriptScopeContext scope, object dto, string requestName);
    public object publishToGateway(ScriptScopeContext scope, object dto, string requestName, object options);
    private object CreateRequestDto(object dto, string requestName);
    public IgnoreResult publishMessage(ScriptScopeContext scope, string requestName, object dto);
    public IgnoreResult publishMessage(ScriptScopeContext scope, string requestName, object dto, object options);
    public object sendToAutoQuery(ScriptScopeContext scope, string requestName);
    public object sendToAutoQuery(ScriptScopeContext scope, object dto, string requestName);
    public object sendToAutoQuery(ScriptScopeContext scope, object dto, string requestName, object options);
    public object toResults(object dto);
    public object getUserSession(ScriptScopeContext scope);
    public IAuthSession userSession(ScriptScopeContext scope);
    public IAuthSession sessionIfAuthenticated(ScriptScopeContext scope);
    public string userAuthId(ScriptScopeContext scope);
    public Nullable`1<int> userAuthIntId(ScriptScopeContext scope);
    public string userAuthName(ScriptScopeContext scope);
    public string userProfileUrl(ScriptScopeContext scope);
    public HashSet`1<string> userAttributes(ScriptScopeContext scope);
    public bool isAuthenticated(ScriptScopeContext scope);
    public bool isAuthenticated(ScriptScopeContext scope, string provider);
    public object redirectTo(ScriptScopeContext scope, string path);
    public object redirectIfNotAuthenticated(ScriptScopeContext scope);
    public object redirectIfNotAuthenticated(ScriptScopeContext scope, string path);
    public object hasRole(ScriptScopeContext scope, string role);
    public object hasPermission(ScriptScopeContext scope, string permission);
    public object assertRole(ScriptScopeContext scope, string role);
    public object assertRole(ScriptScopeContext scope, string role, Dictionary`2<string, object> options);
    public object assertPermission(ScriptScopeContext scope, string permission);
    public object assertPermission(ScriptScopeContext scope, string permission, Dictionary`2<string, object> options);
    public object ifAuthenticated(ScriptScopeContext scope);
    public object ifNotAuthenticated(ScriptScopeContext scope);
    public object onlyIfAuthenticated(ScriptScopeContext scope, object value);
    public object endIfAuthenticated(ScriptScopeContext scope, object value);
    public IAuthRepository authRepo(ScriptScopeContext scope);
    public IAuthRepositoryAsync authRepoAsync(ScriptScopeContext scope);
    public IUserAuth newUserAuth(IAuthRepository authRepo);
    public IUserAuthDetails newUserAuthDetails(IAuthRepository authRepo);
    public IUserAuth getUserAuth(IAuthRepository authRepo, string userAuthId);
    public IUserAuth getUserAuthByUserName(IAuthRepository authRepo, string userNameOrEmail);
    public IUserAuth tryAuthenticate(ScriptScopeContext scope, IAuthRepository authRepo, string userName, string password);
    public IUserAuth createUserAuth(IAuthRepository authRepo, IUserAuth newUser, string password);
    public IgnoreResult saveUserAuth(IAuthRepository authRepo, IUserAuth userAuth);
    public IUserAuth updateUserAuth(IAuthRepository authRepo, IUserAuth existingUser, IUserAuth newUser);
    public IgnoreResult updateUserAuth(IAuthRepository authRepo, IUserAuth existingUser, IUserAuth newUser, string password);
    public IgnoreResult deleteUserAuth(IAuthRepository authRepo, string userAuthId);
    public List`1<IUserAuth> getUserAuths(IAuthRepository authRepo);
    public List`1<IUserAuth> getUserAuths(IAuthRepository authRepo, Dictionary`2<string, object> options);
    public List`1<IUserAuth> searchUserAuths(IAuthRepository authRepo, Dictionary`2<string, object> options);
    public IHttpResult getHttpResult(ScriptScopeContext scope, object options);
    public HttpResult httpResult(ScriptScopeContext scope, object options);
    public static HttpResult ToHttpResult(Dictionary`2<string, object> args);
    public bool hasErrorStatus(ScriptScopeContext scope);
    public ResponseStatus getErrorStatus(ScriptScopeContext scope);
    public string formValue(ScriptScopeContext scope, string name);
    public string formValue(ScriptScopeContext scope, string name, string defaultValue);
    public String[] formValues(ScriptScopeContext scope, string name);
    public bool formCheckValue(ScriptScopeContext scope, string name);
    public string errorResponseSummary(ScriptScopeContext scope);
    public string errorResponseSummary(ScriptScopeContext scope, ResponseStatus errorStatus);
    public string errorResponseExcept(ScriptScopeContext scope, IEnumerable fields);
    public string errorResponseExcept(ScriptScopeContext scope, ResponseStatus errorStatus, IEnumerable fields);
    public string errorResponse(ScriptScopeContext scope);
    public string errorResponse(ScriptScopeContext scope, string fieldName);
    public string errorResponse(ScriptScopeContext scope, ResponseStatus errorStatus, string fieldName);
    private static IVirtualPathProvider GetBundleVfs(IVirtualPathProvider virtualFiles, string filterName, bool toDisk);
    public IRawString bundleJs(object virtualPaths);
    public IRawString bundleJs(object virtualPaths, object options);
    public IRawString bundleCss(object virtualPaths);
    public IRawString bundleCss(object virtualPaths, object options);
    public IRawString bundleHtml(object virtualPaths);
    public IRawString bundleHtml(object virtualPaths, object options);
    public IRawString serviceStackLogoSvg(string color);
    public IRawString serviceStackLogoSvg();
    public IRawString serviceStackLogoDataUri(string color);
    public IRawString serviceStackLogoDataUri();
    public IRawString serviceStackLogoDataUriLight();
    public IRawString svgImage(string name);
    public IRawString svgImage(string name, string fillColor);
    public IRawString svgDataUri(string name);
    public IRawString svgDataUri(string name, string fillColor);
    public IRawString svgBackgroundImageCss(string name);
    public IRawString svgBackgroundImageCss(string name, string fillColor);
    public IRawString svgInBackgroundImageCss(string svg);
    public IRawString svgFill(string svg, string color);
    public string svgBaseUrl(ScriptScopeContext scope);
    public Dictionary`2<string, string> svgImages();
    public Dictionary`2<string, string> svgDataUris();
    public Dictionary`2<string, List`1<string>> svgCssFiles();
    public IgnoreResult svgAdd(string svg, string name);
    public IgnoreResult svgAdd(string svg, string name, string cssFile);
    public IgnoreResult svgAddFile(ScriptScopeContext scope, string svgPath, string name);
    public IgnoreResult svgAddFile(ScriptScopeContext scope, string svgPath, string name, string cssFile);
}
[ExtensionAttribute]
public static class ServiceStack.ServiceStackScriptUtils : object {
    [ExtensionAttribute]
public static HashSet`1<string> GetUserAttributes(IRequest request);
    [ExtensionAttribute]
public static NavOptions WithDefaults(NavOptions options, IRequest request);
    [ExtensionAttribute]
public static IRequest GetRequest(ScriptScopeContext scope);
    [ExtensionAttribute]
public static IHttpRequest GetHttpRequest(ScriptScopeContext scope);
    [ExtensionAttribute]
public static string ResolveUrl(ScriptScopeContext scope, string url);
    [ExtensionAttribute]
public static ResponseStatus GetErrorStatus(ScriptScopeContext scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.ServiceStackServicesOptions : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptContext <ScriptContext>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <ServiceAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ServiceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, String[]> <ServiceRoutes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RestPath> <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <AutoRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedAuthenticationSchemes>k__BackingField;
    internal HashSet`1<Type> ServicesRegistered;
    [CompilerGeneratedAttribute]
private List`1<IPlugin> <Plugins>k__BackingField;
    internal HashSet`1<IPlugin> PluginsConfigured;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<Action`1<IPlugin>>> <OnPreRegisterPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<Action`1<IPlugin>>> <OnPostRegisterPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <ExcludeServiceAssemblies>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <HostType>k__BackingField;
    [NullableAttribute("2")]
public IServiceCollection Services { get; internal set; }
    public bool RegisterServicesInServiceCollection { get; }
    public ScriptContext ScriptContext { get; public set; }
    public List`1<Assembly> ServiceAssemblies { get; }
    public List`1<Type> ServiceTypes { get; }
    public Dictionary`2<Type, String[]> ServiceRoutes { get; }
    public List`1<RestPath> Routes { get; public set; }
    public List`1<Type> AutoRegister { get; }
    public List`1<string> AllowedAuthenticationSchemes { get; }
    public List`1<IPlugin> Plugins { get; }
    public Dictionary`2<Type, List`1<Action`1<IPlugin>>> OnPreRegisterPlugins { get; public set; }
    public Dictionary`2<Type, List`1<Action`1<IPlugin>>> OnPostRegisterPlugins { get; public set; }
    public List`1<Assembly> ExcludeServiceAssemblies { get; }
    [NullableAttribute("2")]
public Type HostType { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Services(IServiceCollection value);
    internal void UseServices(IServiceCollection services);
    public bool get_RegisterServicesInServiceCollection();
    internal void ConfigurePlugins(IServiceCollection services);
    [CompilerGeneratedAttribute]
public ScriptContext get_ScriptContext();
    [CompilerGeneratedAttribute]
public void set_ScriptContext(ScriptContext value);
    [CompilerGeneratedAttribute]
public List`1<Assembly> get_ServiceAssemblies();
    [CompilerGeneratedAttribute]
public List`1<Type> get_ServiceTypes();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, String[]> get_ServiceRoutes();
    [CompilerGeneratedAttribute]
public List`1<RestPath> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<RestPath> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_AutoRegister();
    [NullableContextAttribute("2")]
internal bool ShouldAutoRegister();
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedAuthenticationSchemes();
    [CompilerGeneratedAttribute]
public List`1<IPlugin> get_Plugins();
    internal HashSet`1<Type> GetAllServiceTypes();
    public static List`1<IPlugin> DefaultPlugins();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, List`1<Action`1<IPlugin>>> get_OnPreRegisterPlugins();
    [CompilerGeneratedAttribute]
public void set_OnPreRegisterPlugins(Dictionary`2<Type, List`1<Action`1<IPlugin>>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, List`1<Action`1<IPlugin>>> get_OnPostRegisterPlugins();
    [CompilerGeneratedAttribute]
public void set_OnPostRegisterPlugins(Dictionary`2<Type, List`1<Action`1<IPlugin>>> value);
    [CompilerGeneratedAttribute]
public List`1<Assembly> get_ExcludeServiceAssemblies();
    public HashSet`1<Assembly> ResolveAllServiceAssemblies();
    public HashSet`1<Type> ResolveAssemblyServiceTypes();
    public HashSet`1<Type> ResolveAssemblyRequestTypes(Func`2<Type, bool> include);
    public Dictionary`2<Type, Type> ResolveRequestServiceTypesMap();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_HostType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_HostType(Type value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ConfigurePlugins>b__7_0(IPlugin x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ConfigurePlugins>b__7_1(IPlugin x);
    [CompilerGeneratedAttribute]
private void <ConfigurePlugins>b__7_3(IPlugin x);
}
[ExtensionAttribute]
public static class ServiceStack.SessionExtensions : object {
    private static RandomNumberGenerator randgen;
    [ThreadStaticAttribute]
private static Byte[] SessionBytesCache;
    private static Char[] UrlUnsafeBase64Chars;
    private static SessionExtensions();
    [ExtensionAttribute]
public static string GetOrCreateSessionId(IRequest httpReq);
    [ExtensionAttribute]
public static void SetSessionId(IRequest req, string sessionId);
    [ExtensionAttribute]
public static string GetSessionId(IRequest req);
    [ExtensionAttribute]
public static string GetPermanentSessionId(IRequest httpReq);
    [ExtensionAttribute]
public static string GetTemporarySessionId(IRequest httpReq);
    [ExtensionAttribute]
public static string GetSessionParam(IRequest httpReq, string sessionKey);
    [ExtensionAttribute]
public static string CreateSessionId(IResponse res, IRequest req);
    [ExtensionAttribute]
public static string CreateSessionIds(IResponse res, IRequest req);
    public static string CreateRandomSessionId();
    public static bool Base64StringContainsUrlUnfriendlyChars(string base64);
    public static void PopulateWithSecureRandomBytes(Byte[] bytes);
    public static string CreateRandomBase64Id(int size);
    public static string CreateRandomBase62Id(int size);
    [ExtensionAttribute]
public static string CreatePermanentSessionId(IResponse res, IRequest req);
    [ExtensionAttribute]
public static string CreateTemporarySessionId(IResponse res, IRequest req);
    [ExtensionAttribute]
public static string CreateSessionId(IRequest req, IResponse res, string sessionKey, string sessionId);
    [ExtensionAttribute]
public static string CreateTemporarySessionId(IRequest req, string sessionId);
    [ExtensionAttribute]
public static string CreatePermanentSessionId(IRequest req, string sessionId);
    [ExtensionAttribute]
public static bool IsPermanentSession(IRequest req);
    [ExtensionAttribute]
public static HashSet`1<string> GetSessionOptions(IRequest httpReq);
    [ExtensionAttribute]
public static string GetUserAuthName(IAuthSession session);
    [ExtensionAttribute]
public static string GetUserAuthIdOrName(IAuthSession session);
    [ExtensionAttribute]
public static void UpdateSession(IAuthSession session, IUserAuth userAuth);
    [ExtensionAttribute]
public static HashSet`1<string> AddSessionOptions(IRequest req, String[] options);
    public static string GetSessionKey(IRequest httpReq);
    [ExtensionAttribute]
public static TUserSession SessionAs(ICacheClient cache, IRequest httpReq, IResponse httpRes);
    [ExtensionAttribute]
public static Task`1<TUserSession> SessionAsAsync(ICacheClientAsync cache, IRequest httpReq, IResponse httpRes, CancellationToken token);
    [ExtensionAttribute]
public static IAuthSession GetUntypedSession(ICacheClient cache, IRequest httpReq, IResponse httpRes);
    [AsyncStateMachineAttribute("ServiceStack.SessionExtensions/<GetUntypedSessionAsync>d__31")]
[ExtensionAttribute]
public static Task`1<IAuthSession> GetUntypedSessionAsync(ICacheClientAsync cache, IRequest httpReq, IResponse httpRes, CancellationToken token);
    [ExtensionAttribute]
public static void ClearSession(ICacheClient cache, IRequest httpReq);
    [ExtensionAttribute]
public static Task ClearSessionAsync(ICacheClientAsync cache, IRequest httpReq, CancellationToken token);
    [ExtensionAttribute]
public static ISession GetSessionBag(IRequest request);
    [ExtensionAttribute]
public static ISessionAsync GetSessionBagAsync(IRequest request, CancellationToken token);
    [ExtensionAttribute]
public static ISession GetSessionBag(IServiceBase service);
    [ExtensionAttribute]
public static ISessionAsync GetSessionBagAsync(IServiceBase service, CancellationToken token);
    [ExtensionAttribute]
public static T Get(ISession session);
    [ExtensionAttribute]
public static Task`1<T> GetAsync(ISessionAsync session, CancellationToken token);
    [ExtensionAttribute]
public static void Set(ISession session, T value);
    [ExtensionAttribute]
public static Task SetAsync(ISessionAsync session, T value, CancellationToken token);
    [ExtensionAttribute]
public static void Remove(ISession session);
    [ExtensionAttribute]
public static Task RemoveAsync(ISessionAsync session, CancellationToken token);
    [ExtensionAttribute]
public static void DeleteSessionCookies(IResponse response);
    [ExtensionAttribute]
public static void DeleteJwtCookie(IResponse response);
    [AsyncStateMachineAttribute("ServiceStack.SessionExtensions/<GenerateNewSessionCookiesAsync>d__46")]
[ExtensionAttribute]
public static Task GenerateNewSessionCookiesAsync(IRequest req, IAuthSession session, CancellationToken token);
    [ExtensionAttribute]
public static AuthUserSession ToAuthUserSession(IAuthSession session);
    [ExtensionAttribute]
public static IAuthSession FromAuthUserSession(AuthUserSession session);
}
public class ServiceStack.SessionFactory : object {
    private ICacheClient cacheClient;
    private ICacheClientAsync cacheClientAsync;
    public SessionFactory(ICacheClient cacheClient);
    public SessionFactory(ICacheClient cacheClient, ICacheClientAsync cacheClientAsync);
    public sealed virtual ISession GetOrCreateSession(IRequest httpReq, IResponse httpRes);
    public sealed virtual ISessionAsync GetOrCreateSessionAsync(IRequest httpReq, IResponse httpRes);
    public sealed virtual ISession GetOrCreateSession();
    public sealed virtual ISessionAsync GetOrCreateSessionAsync();
    public sealed virtual ISession CreateSession(string sessionId);
    public sealed virtual ISessionAsync CreateSessionAsync(string sessionId);
}
public class ServiceStack.SessionFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public static string SessionId;
    public static string PermanentSessionId;
    public static string SessionOptionsKey;
    public static string XUserAuthId;
    public static TimeSpan DefaultSessionExpiry;
    public static TimeSpan DefaultPermanentSessionExpiry;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SessionExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SessionBagExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <PermanentSessionExpiry>k__BackingField;
    private static bool alreadyConfigured;
    public string Id { get; public set; }
    public Nullable`1<TimeSpan> SessionExpiry { get; public set; }
    public Nullable`1<TimeSpan> SessionBagExpiry { get; public set; }
    public Nullable`1<TimeSpan> PermanentSessionExpiry { get; public set; }
    private static SessionFeature();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SessionExpiry();
    [CompilerGeneratedAttribute]
public void set_SessionExpiry(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SessionBagExpiry();
    [CompilerGeneratedAttribute]
public void set_SessionBagExpiry(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_PermanentSessionExpiry();
    [CompilerGeneratedAttribute]
public void set_PermanentSessionExpiry(Nullable`1<TimeSpan> value);
    public sealed virtual void Register(IAppHost appHost);
    public static void AddSessionIdToRequestFilter(IRequest req, IResponse res, object requestDto);
    public static string CreateSessionIds(IRequest httpReq, IResponse httpRes);
    public static string GetSessionKey(IRequest httpReq);
    public static string GetSessionKey(string sessionId);
    public static T GetOrCreateSession(ICacheClient cache, IRequest httpReq, IResponse httpRes);
    [AsyncStateMachineAttribute("ServiceStack.SessionFeature/<GetOrCreateSessionAsync>d__29`1")]
public static Task`1<T> GetOrCreateSessionAsync(ICacheClientAsync cache, IRequest httpReq, IResponse httpRes, CancellationToken token);
    public static IAuthSession CreateNewSession(IRequest httpReq);
    public static IAuthSession CreateNewSession(IRequest httpReq, string sessionId);
}
[ExtensionAttribute]
public static class ServiceStack.SessionFeatureUtils : object {
    [ExtensionAttribute]
public static IAuthSession CreateNewSession(IUserAuth user, IRequest httpReq);
}
public class ServiceStack.SessionOptions : object {
    public static string Temporary;
    public static string Permanent;
}
public class ServiceStack.SessionSourceResult : object {
    [CompilerGeneratedAttribute]
private IAuthSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Permissions>k__BackingField;
    public IAuthSession Session { get; }
    public IEnumerable`1<string> Roles { get; }
    public IEnumerable`1<string> Permissions { get; }
    public SessionSourceResult(IAuthSession session, IEnumerable`1<string> roles, IEnumerable`1<string> permissions);
    [CompilerGeneratedAttribute]
public IAuthSession get_Session();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Roles();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Permissions();
}
[AttributeUsageAttribute("68")]
public class ServiceStack.SetStatusAttribute : RequestFilterAttribute {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HttpStatusCode> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public Nullable`1<int> Status { get; public set; }
    public Nullable`1<HttpStatusCode> StatusCode { get; public set; }
    public string Description { get; public set; }
    public SetStatusAttribute(int status, string description);
    public SetStatusAttribute(HttpStatusCode statusCode, string description);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HttpStatusCode> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<HttpStatusCode> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
[DefaultRequestAttribute("ServiceStack.ApiPages")]
[RestrictAttribute]
public class ServiceStack.SharpApiService : Service {
    [AsyncStateMachineAttribute("ServiceStack.SharpApiService/<Any>d__0")]
public Task`1<object> Any(ApiPages request);
    internal static IHttpResult ToHttpResult(PageResult pageResult, object response);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
public class ServiceStack.SharpCodePageHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private SharpCodePage <page>P;
    [CompilerGeneratedAttribute]
private SharpPage <layoutPage>P;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Args>k__BackingField;
    public object Model { get; public set; }
    public Stream OutputStream { get; public set; }
    public Dictionary`2<string, object> Args { get; public set; }
    public SharpCodePageHandler(SharpCodePage page, SharpPage layoutPage);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(object value);
    [CompilerGeneratedAttribute]
public Stream get_OutputStream();
    [CompilerGeneratedAttribute]
public void set_OutputStream(Stream value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(Dictionary`2<string, object> value);
    [AsyncStateMachineAttribute("ServiceStack.SharpCodePageHandler/<ProcessRequestAsync>d__15")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.SharpPageHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private Action`1<IRequest> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <ValidateFn>k__BackingField;
    [CompilerGeneratedAttribute]
private SharpPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private SharpPage <LayoutPage>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    private string pagePath;
    private string layoutPath;
    [CompilerGeneratedAttribute]
private ScriptContext <Context>k__BackingField;
    public Action`1<IRequest> Filter { get; public set; }
    public Func`2<IRequest, bool> ValidateFn { get; public set; }
    public SharpPage Page { get; private set; }
    public SharpPage LayoutPage { get; private set; }
    public Dictionary`2<string, object> Args { get; public set; }
    public object Model { get; public set; }
    public Stream OutputStream { get; public set; }
    public ScriptContext Context { get; public set; }
    public SharpPageHandler(string pagePath, string layoutPath);
    public SharpPageHandler(SharpPage page, SharpPage layoutPage);
    [CompilerGeneratedAttribute]
public Action`1<IRequest> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Action`1<IRequest> value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_ValidateFn();
    [CompilerGeneratedAttribute]
public void set_ValidateFn(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public SharpPage get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(SharpPage value);
    [CompilerGeneratedAttribute]
public SharpPage get_LayoutPage();
    [CompilerGeneratedAttribute]
private void set_LayoutPage(SharpPage value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(object value);
    [CompilerGeneratedAttribute]
public Stream get_OutputStream();
    [CompilerGeneratedAttribute]
public void set_OutputStream(Stream value);
    [CompilerGeneratedAttribute]
public ScriptContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ScriptContext value);
    public static ScriptContext NewContext(IAppHost appHost);
    [AsyncStateMachineAttribute("ServiceStack.SharpPageHandler/<ProcessRequestAsync>d__37")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.SharpPagesFeature : ScriptContext {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableHotReload>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableSpaFallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisablePageBasedRouting>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugDefaultTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiDefaultContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptAdminRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataDebugAdminRole>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IgnorePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SharpPagesFeature> <Configure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImportRequestParams>k__BackingField;
    [CompilerGeneratedAttribute]
private SharpPage <InitPage>k__BackingField;
    private ConcurrentDictionary`2<string, byte> catchAllPathsNotFound;
    private ConcurrentDictionary`2<string, SharpPage> viewPagesMap;
    public string Id { get; public set; }
    public Nullable`1<bool> EnableHotReload { get; public set; }
    public Nullable`1<bool> EnableSpaFallback { get; public set; }
    public bool DisablePageBasedRouting { get; public set; }
    public string DebugDefaultTemplate { get; public set; }
    public string ApiPath { get; public set; }
    public string ApiDefaultContentType { get; public set; }
    public string ScriptAdminRole { get; public set; }
    public string MetadataDebugAdminRole { get; public set; }
    public List`1<string> IgnorePaths { get; public set; }
    public ServiceStackScripts ServiceStackScripts { get; }
    public string HtmlExtension { get; public set; }
    public Action`1<SharpPagesFeature> Configure { get; public set; }
    unknown bool ExcludeProtectedFilters {public set; }
    public bool ImportRequestParams { get; public set; }
    internal SharpPage InitPage { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableHotReload();
    [CompilerGeneratedAttribute]
public void set_EnableHotReload(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableSpaFallback();
    [CompilerGeneratedAttribute]
public void set_EnableSpaFallback(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_DisablePageBasedRouting();
    [CompilerGeneratedAttribute]
public void set_DisablePageBasedRouting(bool value);
    [CompilerGeneratedAttribute]
public string get_DebugDefaultTemplate();
    [CompilerGeneratedAttribute]
public void set_DebugDefaultTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_ApiPath();
    [CompilerGeneratedAttribute]
public void set_ApiPath(string value);
    [CompilerGeneratedAttribute]
public string get_ApiDefaultContentType();
    [CompilerGeneratedAttribute]
public void set_ApiDefaultContentType(string value);
    [CompilerGeneratedAttribute]
public string get_ScriptAdminRole();
    [CompilerGeneratedAttribute]
public void set_ScriptAdminRole(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataDebugAdminRole();
    [CompilerGeneratedAttribute]
public void set_MetadataDebugAdminRole(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnorePaths();
    [CompilerGeneratedAttribute]
public void set_IgnorePaths(List`1<string> value);
    public ServiceStackScripts get_ServiceStackScripts();
    public string get_HtmlExtension();
    public void set_HtmlExtension(string value);
    [CompilerGeneratedAttribute]
public Action`1<SharpPagesFeature> get_Configure();
    [CompilerGeneratedAttribute]
public void set_Configure(Action`1<SharpPagesFeature> value);
    public void set_ExcludeProtectedFilters(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImportRequestParams();
    [CompilerGeneratedAttribute]
public void set_ImportRequestParams(bool value);
    public virtual void Register(IAppHost appHost);
    [CompilerGeneratedAttribute]
internal SharpPage get_InitPage();
    [CompilerGeneratedAttribute]
internal void set_InitPage(SharpPage value);
    public string RunInitPage();
    protected virtual IHttpHandler RequestHandler(IRequest req);
    protected virtual IHttpHandler PageBasedRoutingHandler(IRequest req);
    public SharpPage GetRoutingPage(string pathInfo, Dictionary`2& routingArgs);
    private void InitViewPages(IAppHost appHost);
    public SharpPage GetViewPage(string viewName);
    public sealed virtual bool HasView(string viewName, IRequest httpReq);
    public sealed virtual string RenderPartial(string pageName, object model, bool renderHtml, StreamWriter writer, IHtmlContext htmlHelper);
    [AsyncStateMachineAttribute("ServiceStack.SharpPagesFeature/<ProcessRequestAsync>d__71")]
public sealed virtual Task`1<bool> ProcessRequestAsync(IRequest req, object dto, Stream outputStream);
    [CompilerGeneratedAttribute]
internal static int <GetRoutingPage>g__CompareByWeightedName|65_0(IVirtualNode a, IVirtualNode b);
    [CompilerGeneratedAttribute]
private SharpPage <GetRoutingPage>g__GetPageFromPath|65_1(IVirtualFile file, String[] pathParts, Dictionary`2& args);
    [CompilerGeneratedAttribute]
internal static List`1<IVirtualDirectory> <GetRoutingPage>g__GetCandidateDirs|65_2(IVirtualDirectory[] argDirs, string segment);
}
[ExtensionAttribute]
public static class ServiceStack.SharpPagesFeatureExtensions : object {
    [ExtensionAttribute]
public static ScriptContext InitForSharpPages(ScriptContext context, IAppHost appHost);
    [ExtensionAttribute]
public static ScriptContext InitForSharpPages(ScriptContext context);
    [ExtensionAttribute]
public static ScriptContext UseAppHost(ScriptContext context, IAppHost appHost);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetScriptRequestParams(IRequest request, bool importRequestParams);
    [ExtensionAttribute]
public static SharpCodePage GetCodePage(IRequest request, string virtualPath);
    [ExtensionAttribute]
public static SharpPage GetPage(IRequest request, string virtualPath);
    private static Uri createUri(string url);
    public static Dictionary`2<string, object> CreateRequestArgs(Dictionary`2<string, object> args);
    [ExtensionAttribute]
public static PageResult BindRequest(PageResult result, IRequest request);
    public static Dictionary`2<string, object> SetRequestArgs(Dictionary`2<string, object> args, IRequest request);
    [ExtensionAttribute]
public static PageResult GetPageResult(IRequest request, string virtualPath, Dictionary`2<string, object> args);
    [ExtensionAttribute]
public static SharpPage OneTimePage(IRequest request, string contents, string ext);
    [ExtensionAttribute]
public static SharpCodePage With(SharpCodePage page, IRequest request);
    [ExtensionAttribute]
public static ServiceStackScripts GetServiceStackFilters(ScriptContext context);
    [CompilerGeneratedAttribute]
internal static string <CreateRequestArgs>g__getValue|7_0(string name, <>c__DisplayClass7_0& );
}
public class ServiceStack.Sitemap : object {
    [CompilerGeneratedAttribute]
private string <AtPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SitemapUrl> <UrlSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomXml>k__BackingField;
    public string AtPath { get; public set; }
    public string Location { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public List`1<SitemapUrl> UrlSet { get; public set; }
    public string CustomXml { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AtPath();
    [CompilerGeneratedAttribute]
public void set_AtPath(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public List`1<SitemapUrl> get_UrlSet();
    [CompilerGeneratedAttribute]
public void set_UrlSet(List`1<SitemapUrl> value);
    [CompilerGeneratedAttribute]
public string get_CustomXml();
    [CompilerGeneratedAttribute]
public void set_CustomXml(string value);
}
public class ServiceStack.SitemapCustomXml : object {
    [CompilerGeneratedAttribute]
private string <SitemapIndexHeaderXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SitemapIndexFooterXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlSetHeaderXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlSetFooterXml>k__BackingField;
    public string SitemapIndexHeaderXml { get; public set; }
    public string SitemapIndexFooterXml { get; public set; }
    public string UrlSetHeaderXml { get; public set; }
    public string UrlSetFooterXml { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SitemapIndexHeaderXml();
    [CompilerGeneratedAttribute]
public void set_SitemapIndexHeaderXml(string value);
    [CompilerGeneratedAttribute]
public string get_SitemapIndexFooterXml();
    [CompilerGeneratedAttribute]
public void set_SitemapIndexFooterXml(string value);
    [CompilerGeneratedAttribute]
public string get_UrlSetHeaderXml();
    [CompilerGeneratedAttribute]
public void set_UrlSetHeaderXml(string value);
    [CompilerGeneratedAttribute]
public string get_UrlSetFooterXml();
    [CompilerGeneratedAttribute]
public void set_UrlSetFooterXml(string value);
}
public class ServiceStack.SitemapFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <SitemapIndexNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <UrlSetNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AtPath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Sitemap> <SitemapIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SitemapUrl> <UrlSet>k__BackingField;
    [CompilerGeneratedAttribute]
private SitemapCustomXml <CustomXml>k__BackingField;
    public string Id { get; public set; }
    public Dictionary`2<string, string> SitemapIndexNamespaces { get; public set; }
    public Dictionary`2<string, string> UrlSetNamespaces { get; public set; }
    public string AtPath { get; public set; }
    public List`1<Sitemap> SitemapIndex { get; public set; }
    public List`1<SitemapUrl> UrlSet { get; public set; }
    public SitemapCustomXml CustomXml { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_SitemapIndexNamespaces();
    [CompilerGeneratedAttribute]
public void set_SitemapIndexNamespaces(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_UrlSetNamespaces();
    [CompilerGeneratedAttribute]
public void set_UrlSetNamespaces(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_AtPath();
    [CompilerGeneratedAttribute]
public void set_AtPath(string value);
    [CompilerGeneratedAttribute]
public List`1<Sitemap> get_SitemapIndex();
    [CompilerGeneratedAttribute]
public void set_SitemapIndex(List`1<Sitemap> value);
    [CompilerGeneratedAttribute]
public List`1<SitemapUrl> get_UrlSet();
    [CompilerGeneratedAttribute]
public void set_UrlSet(List`1<SitemapUrl> value);
    [CompilerGeneratedAttribute]
public SitemapCustomXml get_CustomXml();
    [CompilerGeneratedAttribute]
public void set_CustomXml(SitemapCustomXml value);
    public sealed virtual void Register(IAppHost appHost);
    public string GetSitemapIndex();
    public string GetSitemapUrlSet(List`1<SitemapUrl> urlSet);
    [AsyncStateMachineAttribute("ServiceStack.SitemapFeature/<RenderToAsync>d__32")]
public Task RenderToAsync(string destDir);
    [CompilerGeneratedAttribute]
private IHttpHandler <Register>b__29_0(IHttpRequest req);
}
public enum ServiceStack.SitemapFrequency : Enum {
    public int value__;
    public static SitemapFrequency Always;
    public static SitemapFrequency Hourly;
    public static SitemapFrequency Daily;
    public static SitemapFrequency Weekly;
    public static SitemapFrequency Monthly;
    public static SitemapFrequency Yearly;
    public static SitemapFrequency Never;
}
public class ServiceStack.SitemapUrl : object {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SitemapFrequency> <ChangeFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomXml>k__BackingField;
    public string Location { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public Nullable`1<SitemapFrequency> ChangeFrequency { get; public set; }
    public Nullable`1<decimal> Priority { get; public set; }
    public string CustomXml { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SitemapFrequency> get_ChangeFrequency();
    [CompilerGeneratedAttribute]
public void set_ChangeFrequency(Nullable`1<SitemapFrequency> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public string get_CustomXml();
    [CompilerGeneratedAttribute]
public void set_CustomXml(string value);
}
public class ServiceStack.SoapFormat : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableSoap11>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableSoap12>k__BackingField;
    public string Id { get; public set; }
    public bool DisableSoap11 { get; public set; }
    public bool DisableSoap12 { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableSoap11();
    [CompilerGeneratedAttribute]
public void set_DisableSoap11(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableSoap12();
    [CompilerGeneratedAttribute]
public void set_DisableSoap12(bool value);
    public sealed virtual void Register(IAppHost appHost);
}
[FallbackRouteAttribute("/{PathInfo*}")]
[ExcludeMetadataAttribute]
public class ServiceStack.SpaFallback : object {
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    public string PathInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
}
[DefaultRequestAttribute("ServiceStack.SpaFallback")]
[RestrictAttribute]
public class ServiceStack.SpaFallbackService : Service {
    public object Any(SpaFallback request);
}
public class ServiceStack.SpaFeature : SharpPagesFeature {
}
public class ServiceStack.StartsWithCondition : QueryCondition {
    public static StartsWithCondition Instance;
    public string Alias { get; }
    private static StartsWithCondition();
    public virtual string get_Alias();
    public virtual bool Match(object a, object b);
}
public class ServiceStack.StaticContent : object {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Data>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    public ReadOnlyMemory`1<byte> Data { get; }
    [NullableAttribute("1")]
public string MimeType { get; }
    public StaticContent(ReadOnlyMemory`1<byte> data, string mimeType);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Data();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MimeType();
    [NullableContextAttribute("1")]
public static StaticContent CreateFromDataUri(string dataUri);
}
[DefaultRequestAttribute("ServiceStack.StoreFileUpload")]
public class ServiceStack.StoreFileUploadService : Service {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("ServiceStack.StoreFileUploadService/<Any>d__0")]
public Task`1<object> Any(StoreFileUpload request);
}
public static class ServiceStack.StrictModeCodes : object {
    public static string CyclicalUserSession;
    public static string ReturnsValueType;
}
public class ServiceStack.SubscriptionInfo : object {
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Channels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ConnectArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ServerArgs>k__BackingField;
    public DateTime CreatedAt { get; public set; }
    public String[] Channels { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string DisplayName { get; public set; }
    public string SessionId { get; public set; }
    public string SubscriptionId { get; public set; }
    public string UserAddress { get; public set; }
    public bool IsAuthenticated { get; public set; }
    public ConcurrentDictionary`2<string, string> Meta { get; public set; }
    public Dictionary`2<string, string> ConnectArgs { get; public set; }
    public Dictionary`2<string, string> ServerArgs { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Channels();
    [CompilerGeneratedAttribute]
public void set_Channels(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAddress(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAuthenticated(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ConcurrentDictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Meta(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_ConnectArgs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectArgs(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_ServerArgs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerArgs(Dictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.Support.DataCache : object {
    private static DataCache instance;
    private Byte[] Utf8JsonpPrefix;
    private Byte[] Utf8JsonpSuffix;
    public static DataCache Instance { get; }
    public static Byte[] JsonpPrefix { get; }
    public static Byte[] JsonpSuffix { get; }
    private static DataCache();
    public static DataCache get_Instance();
    public static Byte[] get_JsonpPrefix();
    public static Byte[] get_JsonpSuffix();
    public static Byte[] CreateJsonpPrefix(string callback);
}
[ExtensionAttribute]
public static class ServiceStack.Support.WebHost.FilterAttributeCache : object {
    private static Dictionary`2<Type, IRequestFilterBase[]> requestFilterAttributes;
    private static Dictionary`2<Type, IResponseFilterBase[]> responseFilterAttributes;
    private static FilterAttributeCache();
    [ExtensionAttribute]
private static IRequestFilterBase[] ShallowCopy(IRequestFilterBase[] filters);
    [ExtensionAttribute]
private static IResponseFilterBase[] ShallowCopy(IResponseFilterBase[] filters);
    public static IRequestFilterBase[] GetRequestFilterAttributes(Type requestDtoType);
    public static IResponseFilterBase[] GetResponseFilterAttributes(Type requestDtoType);
}
public static class ServiceStack.Support.WebHost.GzipOptimizationTest : object {
    public static HttpWorkerRequest GetWorker(HttpContext context);
    public static bool HasSupport(HttpContext context);
    public static bool SlowWayToCheckIfGZipIsSupported(HttpRequest request);
}
public class ServiceStack.SuppressFormsAuthenticationRedirectModule : object {
    [CompilerGeneratedAttribute]
private static string <PathToSuppress>k__BackingField;
    public static string PathToSuppress { get; public set; }
    [CompilerGeneratedAttribute]
public static string get_PathToSuppress();
    [CompilerGeneratedAttribute]
public static void set_PathToSuppress(string value);
    public virtual void Init(HttpApplication context);
    private void OnEndRequest(object source, EventArgs e);
    public sealed virtual void Dispose();
    private void OnPostReleaseRequestState(object source, EventArgs args);
}
public static class ServiceStack.Svg : object {
    [CompilerGeneratedAttribute]
private static string <LightColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static String[] <FillColors>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, List`1<string>> <CssFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <CssFillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <AppendToCssFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <AdjacentCssRules>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <Images>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <DataUris>k__BackingField;
    internal static long ImagesAdded;
    public static string LightColor { get; public set; }
    public static String[] FillColors { get; public set; }
    public static Dictionary`2<string, List`1<string>> CssFiles { get; public set; }
    public static Dictionary`2<string, string> CssFillColor { get; public set; }
    public static Dictionary`2<string, string> AppendToCssFiles { get; public set; }
    public static Dictionary`2<string, string> AdjacentCssRules { get; public set; }
    public static Dictionary`2<string, string> Images { get; public set; }
    public static Dictionary`2<string, string> DataUris { get; public set; }
    private static Svg();
    [CompilerGeneratedAttribute]
public static string get_LightColor();
    [CompilerGeneratedAttribute]
public static void set_LightColor(string value);
    [CompilerGeneratedAttribute]
public static String[] get_FillColors();
    [CompilerGeneratedAttribute]
public static void set_FillColors(String[] value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, List`1<string>> get_CssFiles();
    [CompilerGeneratedAttribute]
public static void set_CssFiles(Dictionary`2<string, List`1<string>> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_CssFillColor();
    [CompilerGeneratedAttribute]
public static void set_CssFillColor(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_AppendToCssFiles();
    [CompilerGeneratedAttribute]
public static void set_AppendToCssFiles(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_AdjacentCssRules();
    [CompilerGeneratedAttribute]
public static void set_AdjacentCssRules(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_Images();
    [CompilerGeneratedAttribute]
public static void set_Images(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_DataUris();
    [CompilerGeneratedAttribute]
public static void set_DataUris(Dictionary`2<string, string> value);
    public static string GetImage(string name);
    public static string GetImage(string name, string fillColor);
    public static StaticContent GetStaticContent(string name);
    public static string GetDataUri(string name);
    public static string GetDataUri(string name, string fillColor);
    public static string Create(string body, string fill, string viewBox, string stroke);
    public static ImageInfo CreateImage(string body, string fill, string viewBox, string stroke);
    public static ImageInfo ImageSvg(string svg);
    public static ImageInfo ImageUri(string uri);
    public static string Fill(string svg, string fillColor);
    public static string Encode(string svg);
    public static string ToDataUri(string svg);
    public static string GetBackgroundImageCss(string name);
    public static string GetBackgroundImageCss(string name, string fillColor);
    public static string InBackgroundImageCss(string svg);
    public static void AddImage(string svg, string name, string cssFile);
    public static void Load(IVirtualDirectory svgDir);
}
public class ServiceStack.SvgFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <ValidateFn>k__BackingField;
    public string Id { get; public set; }
    public string RoutePath { get; public set; }
    public Func`2<IRequest, bool> ValidateFn { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_RoutePath();
    [CompilerGeneratedAttribute]
public void set_RoutePath(string value);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_ValidateFn();
    [CompilerGeneratedAttribute]
public void set_ValidateFn(Func`2<IRequest, bool> value);
    public sealed virtual void Register(IAppHost appHost);
    private static void AppendEntry(StringBuilder sb, string name, string dataUri);
    public static void WriteDataUris(StringBuilder sb, List`1<string> dataUris);
    public static void WriteAdjacentCss(StringBuilder sb, List`1<string> dataUris, Dictionary`2<string, string> adjacentCssRules);
    public static void WriteSvgCssFile(IVirtualFiles vfs, string name, List`1<string> dataUris, Dictionary`2<string, string> adjacentCssRules, Dictionary`2<string, string> appendToCssFiles);
    public sealed virtual void AfterPluginsLoaded(IAppHost appHost);
}
public class ServiceStack.SvgFormatHandler : HttpAsyncTaskHandler {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    public string Id { get; public set; }
    public string Format { get; public set; }
    public string Fill { get; public set; }
    public SvgFormatHandler(string fileName);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [AsyncStateMachineAttribute("ServiceStack.SvgFormatHandler/<ProcessRequestAsync>d__14")]
public virtual Task ProcessRequestAsync(IRequest httpReq, IResponse httpRes, string operationName);
}
public class ServiceStack.SvgScriptBlock : ScriptBlock {
    public string Name { get; }
    public ScriptLanguage Body { get; }
    public virtual string get_Name();
    public virtual ScriptLanguage get_Body();
    [AsyncStateMachineAttribute("ServiceStack.SvgScriptBlock/<WriteAsync>d__4")]
public virtual Task WriteAsync(ScriptScopeContext scope, PageBlockFragment block, CancellationToken token);
}
[ObsoleteAttribute("Use InfoScripts")]
public class ServiceStack.TemplateInfoFilters : InfoScripts {
}
[ObsoleteAttribute("Use MarkdownScriptBlock")]
public class ServiceStack.TemplateMarkdownBlock : MarkdownScriptBlock {
}
public static class ServiceStack.Templates.HtmlTemplates : object {
    [CompilerGeneratedAttribute]
private static string <HtmlFormatName>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ShowLanguages>k__BackingField;
    public static string HtmlFormatName { get; public set; }
    public static bool ShowLanguages { get; public set; }
    private static HtmlTemplates();
    [CompilerGeneratedAttribute]
public static string get_HtmlFormatName();
    [CompilerGeneratedAttribute]
public static void set_HtmlFormatName(string value);
    [CompilerGeneratedAttribute]
public static bool get_ShowLanguages();
    [CompilerGeneratedAttribute]
public static void set_ShowLanguages(bool value);
    public static string GetIndexOperationsTemplate();
    public static string GetOperationControlTemplate();
    public static string GetMetadataDebugTemplate();
    public static string GetLoginTemplate();
    public static string GetHtmlFormatTemplate();
    public static string GetSvgTemplatePath();
    private static string LoadTemplate(string templateName);
    public static string GetTemplatePath(string templateName);
    public static string GetHtmlRedirectTemplate(string url);
    public static string Format(string template, Object[] args);
}
[ObsoleteAttribute("Use ServiceStackScripts")]
public class ServiceStack.TemplateServiceStackFilters : ServiceStackScripts {
}
public class ServiceStack.Testing.BasicAppHost : ServiceStackHost {
    [CompilerGeneratedAttribute]
private Action`1<Container> <ConfigureContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<BasicAppHost> <ConfigureAppHost>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HostConfig> <ConfigFilter>k__BackingField;
    public Action`1<Container> ConfigureContainer { get; public set; }
    public Action`1<BasicAppHost> ConfigureAppHost { get; public set; }
    public Action`1<HostConfig> ConfigFilter { get; public set; }
    unknown Func`2<BasicAppHost, ServiceController> UseServiceController {public set; }
    public BasicAppHost(Assembly[] serviceAssemblies);
    public virtual void Configure(Container container);
    [CompilerGeneratedAttribute]
public Action`1<Container> get_ConfigureContainer();
    [CompilerGeneratedAttribute]
public void set_ConfigureContainer(Action`1<Container> value);
    [CompilerGeneratedAttribute]
public Action`1<BasicAppHost> get_ConfigureAppHost();
    [CompilerGeneratedAttribute]
public void set_ConfigureAppHost(Action`1<BasicAppHost> value);
    [CompilerGeneratedAttribute]
public Action`1<HostConfig> get_ConfigFilter();
    [CompilerGeneratedAttribute]
public void set_ConfigFilter(Action`1<HostConfig> value);
    public void set_UseServiceController(Func`2<BasicAppHost, ServiceController> value);
    public virtual IServiceGateway GetServiceGateway(IRequest req);
    public virtual void OnConfigLoad();
}
public class ServiceStack.Testing.BasicResolver : object {
    private Container container;
    public BasicResolver(Container container);
    public sealed virtual T TryResolve();
}
public class ServiceStack.Testing.MockHttpRequest : object {
    private IResolver resolver;
    [CompilerGeneratedAttribute]
private IResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestAttributes <RequestAttributes>k__BackingField;
    private IRequestPreferences requestPreferences;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpResponse <HttpResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Cookie> <Cookies>k__BackingField;
    private string responseContentType;
    [CompilerGeneratedAttribute]
private bool <HasExplicitResponseContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <FormData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBufferedStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    private string rawBody;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserHostAddress>k__BackingField;
    private string remoteIp;
    [CompilerGeneratedAttribute]
private String[] <AcceptTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPathInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <InputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpFile[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationFilePath>k__BackingField;
    private Nullable`1<bool> isDirectory;
    private Nullable`1<bool> isFile;
    public IResolver Resolver { get; public set; }
    public object OriginalRequest { get; }
    public IResponse Response { get; }
    public string OperationName { get; public set; }
    public RequestAttributes RequestAttributes { get; public set; }
    public IRequestPreferences RequestPreferences { get; }
    public object Dto { get; public set; }
    public string ContentType { get; public set; }
    public IHttpResponse HttpResponse { get; private set; }
    public string UserAgent { get; public set; }
    public bool IsLocal { get; public set; }
    public string HttpMethod { get; public set; }
    public string Verb { get; }
    public IDictionary`2<string, Cookie> Cookies { get; public set; }
    public string ResponseContentType { get; public set; }
    public bool HasExplicitResponseContentType { get; private set; }
    public NameValueCollection Headers { get; public set; }
    public NameValueCollection QueryString { get; public set; }
    public NameValueCollection FormData { get; public set; }
    public bool UseBufferedStream { get; public set; }
    public Dictionary`2<string, object> Items { get; public set; }
    public string RawUrl { get; public set; }
    public string AbsoluteUri { get; }
    public string UserHostAddress { get; public set; }
    public string XForwardedFor { get; public set; }
    public Nullable`1<int> XForwardedPort { get; public set; }
    public string XForwardedProtocol { get; public set; }
    public string XRealIp { get; public set; }
    public string Accept { get; public set; }
    public string RemoteIp { get; }
    public string Authorization { get; public set; }
    public bool IsSecureConnection { get; public set; }
    public String[] AcceptTypes { get; public set; }
    public string PathInfo { get; public set; }
    public string OriginalPathInfo { get; }
    public Stream InputStream { get; public set; }
    public long ContentLength { get; }
    public IHttpFile[] Files { get; public set; }
    public string ApplicationFilePath { get; public set; }
    public Uri UrlReferrer { get; }
    public bool IsDirectory { get; }
    public bool IsFile { get; }
    public MockHttpRequest(string operationName, string httpMethod, string contentType, string pathInfo, NameValueCollection queryString, Stream inputStream, NameValueCollection formData);
    public sealed virtual IResolver get_Resolver();
    public void set_Resolver(IResolver value);
    public sealed virtual object get_OriginalRequest();
    [CompilerGeneratedAttribute]
public sealed virtual IResponse get_Response();
    public sealed virtual T TryResolve();
    public sealed virtual object GetService(Type serviceType);
    public AuthUserSession RemoveSession();
    public AuthUserSession ReloadSession();
    [CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RequestAttributes get_RequestAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestAttributes(RequestAttributes value);
    public sealed virtual IRequestPreferences get_RequestPreferences();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
private void set_HttpResponse(IHttpResponse value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLocal();
    [CompilerGeneratedAttribute]
public void set_IsLocal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    public sealed virtual string get_Verb();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, Cookie> get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(IDictionary`2<string, Cookie> value);
    public sealed virtual string get_ResponseContentType();
    public sealed virtual void set_ResponseContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasExplicitResponseContentType();
    [CompilerGeneratedAttribute]
private void set_HasExplicitResponseContentType(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual NameValueCollection get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(NameValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual NameValueCollection get_QueryString();
    [CompilerGeneratedAttribute]
public void set_QueryString(NameValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual NameValueCollection get_FormData();
    [CompilerGeneratedAttribute]
public void set_FormData(NameValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseBufferedStream();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseBufferedStream(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(Dictionary`2<string, object> value);
    public sealed virtual string GetRawBody();
    public sealed virtual Task`1<string> GetRawBodyAsync();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RawUrl();
    [CompilerGeneratedAttribute]
public void set_RawUrl(string value);
    public sealed virtual string get_AbsoluteUri();
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserHostAddress();
    [CompilerGeneratedAttribute]
public void set_UserHostAddress(string value);
    public sealed virtual string get_XForwardedFor();
    public void set_XForwardedFor(string value);
    public sealed virtual Nullable`1<int> get_XForwardedPort();
    public void set_XForwardedPort(Nullable`1<int> value);
    public sealed virtual string get_XForwardedProtocol();
    public void set_XForwardedProtocol(string value);
    public sealed virtual string get_XRealIp();
    public void set_XRealIp(string value);
    public sealed virtual string get_Accept();
    public void set_Accept(string value);
    public sealed virtual string get_RemoteIp();
    public sealed virtual string get_Authorization();
    public void set_Authorization(string value);
    public sealed virtual bool get_IsSecureConnection();
    public void set_IsSecureConnection(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AcceptTypes();
    [CompilerGeneratedAttribute]
public void set_AcceptTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathInfo();
    [CompilerGeneratedAttribute]
public void set_PathInfo(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OriginalPathInfo();
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_InputStream();
    [CompilerGeneratedAttribute]
public void set_InputStream(Stream value);
    public sealed virtual long get_ContentLength();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpFile[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IHttpFile[] value);
    [CompilerGeneratedAttribute]
public string get_ApplicationFilePath();
    [CompilerGeneratedAttribute]
public void set_ApplicationFilePath(string value);
    public void AddSessionCookies();
    public sealed virtual Uri get_UrlReferrer();
    public sealed virtual IVirtualFile GetFile();
    public sealed virtual IVirtualDirectory GetDirectory();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual bool get_IsFile();
}
public class ServiceStack.Testing.MockHttpResponse : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <TextWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookies <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Dto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBufferedStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    public IRequest Request { get; private set; }
    public object OriginalResponse { get; private set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public string ContentType { get; public set; }
    public StringBuilder TextWritten { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public ICookies Cookies { get; public set; }
    public Stream OutputStream { get; }
    public object Dto { get; public set; }
    public bool UseBufferedStream { get; public set; }
    public bool IsClosed { get; private set; }
    public bool KeepAlive { get; public set; }
    public bool HasStarted { get; public set; }
    public Dictionary`2<string, object> Items { get; }
    public MockHttpResponse(IRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_OriginalResponse();
    [CompilerGeneratedAttribute]
private void set_OriginalResponse(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public StringBuilder get_TextWritten();
    [CompilerGeneratedAttribute]
public void set_TextWritten(StringBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual ICookies get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(ICookies value);
    public sealed virtual void AddHeader(string name, string value);
    public sealed virtual void RemoveHeader(string name);
    public sealed virtual string GetHeader(string name);
    public sealed virtual void Redirect(string url);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_OutputStream();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dto();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dto(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseBufferedStream();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseBufferedStream(bool value);
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync(CancellationToken token);
    public sealed virtual void End();
    public sealed virtual void Flush();
    public sealed virtual Task FlushAsync(CancellationToken token);
    public string ReadAsString();
    public Byte[] ReadAsBytes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual void SetContentLength(long contentLength);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepAlive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasStarted();
    [CompilerGeneratedAttribute]
public void set_HasStarted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    public sealed virtual void SetCookie(Cookie cookie);
    public sealed virtual void ClearCookies();
}
public class ServiceStack.Testing.MockRestGateway : object {
    [CompilerGeneratedAttribute]
private RestGatewayDelegate <ResultsFilter>k__BackingField;
    public RestGatewayDelegate ResultsFilter { get; public set; }
    [CompilerGeneratedAttribute]
public RestGatewayDelegate get_ResultsFilter();
    [CompilerGeneratedAttribute]
public void set_ResultsFilter(RestGatewayDelegate value);
    public sealed virtual T Send(IReturn`1<T> request);
    public sealed virtual T Get(IReturn`1<T> request);
    public sealed virtual T Post(IReturn`1<T> request);
    public sealed virtual T Put(IReturn`1<T> request);
    public sealed virtual T Delete(IReturn`1<T> request);
}
public class ServiceStack.Testing.RestGatewayDelegate : MulticastDelegate {
    public RestGatewayDelegate(object object, IntPtr method);
    public virtual object Invoke(string httpVerb, Type responseType, object requestDto);
    public virtual IAsyncResult BeginInvoke(string httpVerb, Type responseType, object requestDto, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class ServiceStack.TypedQueryData`2 : object {
    private static Dictionary`2<string, GetMemberDelegate> RequestPropertyGetters;
    private static Dictionary`2<string, QueryDataField> QueryFieldMap;
    [CompilerGeneratedAttribute]
private Type <QueryType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <FromType>k__BackingField;
    private static Char[] FieldSeperators;
    private static string Pluralized;
    public Type QueryType { get; }
    public Type FromType { get; }
    private static TypedQueryData`2();
    [CompilerGeneratedAttribute]
public Type get_QueryType();
    [CompilerGeneratedAttribute]
public Type get_FromType();
    public sealed virtual IDataQuery CreateQuery(IQueryDataSource db);
    public sealed virtual IDataQuery AddToQuery(IDataQuery q, IQueryData request, Dictionary`2<string, string> dynamicParams, IAutoQueryDataOptions options);
    private static void AppendLimits(IDataQuery q, IQueryData dto, IAutoQueryDataOptions options);
    private static void AppendJoins(IDataQuery q, IQueryData dto);
    private static void AppendTypedQueries(IDataQuery q, IQueryData dto, Dictionary`2<string, string> dynamicParams, QueryTerm defaultTerm, IAutoQueryDataOptions options, Dictionary`2<string, string> aliases);
    private static void AddCondition(IDataQuery q, QueryTerm defaultTerm, PropertyInfo property, object value, QueryCondition condition);
    private static void AppendUntypedQueries(IDataQuery q, Dictionary`2<string, string> dynamicParams, QueryTerm defaultTerm, IAutoQueryDataOptions options, Dictionary`2<string, string> aliases);
    private static MatchQuery<QueryModel, From> GetQueryMatch(IDataQuery q, string name, IAutoQueryDataOptions options, Dictionary`2<string, string> aliases);
    private static MatchQuery<QueryModel, From> GetQueryMatch(IDataQuery q, string name, IAutoQueryDataOptions options);
    public sealed virtual QueryResponse`1<Into> Execute(IQueryDataSource db, IDataQuery query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ServiceStack.TypeValidator : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DefaultStatusCode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ContextArgs>k__BackingField;
    [NullableAttribute("2")]
public string ErrorCode { get; public set; }
    [NullableAttribute("2")]
public string Message { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public string DefaultErrorCode { get; public set; }
    public string DefaultMessage { get; public set; }
    public Nullable`1<int> DefaultStatusCode { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> ContextArgs { get; public set; }
    [NullableContextAttribute("2")]
protected TypeValidator(string errorCode, string message, Nullable`1<int> statusCode);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ErrorCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ErrorCode(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_DefaultErrorCode();
    [CompilerGeneratedAttribute]
public void set_DefaultErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultMessage();
    [CompilerGeneratedAttribute]
public void set_DefaultMessage(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DefaultStatusCode();
    [CompilerGeneratedAttribute]
public void set_DefaultStatusCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ContextArgs();
    [CompilerGeneratedAttribute]
public void set_ContextArgs(Dictionary`2<string, object> value);
    protected string ResolveErrorMessage(IRequest request, object dto);
    protected int ResolveStatusCode();
    protected string ResolveErrorCode();
    public virtual bool IsValid(object dto, IRequest request);
    public virtual Task`1<bool> IsValidAsync(object dto, IRequest request);
    [AsyncStateMachineAttribute("ServiceStack.TypeValidator/<ThrowIfNotValidAsync>d__34")]
public virtual Task ThrowIfNotValidAsync(object dto, IRequest request);
}
public class ServiceStack.UiFeature : object {
    [CompilerGeneratedAttribute]
private UiInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HtmlModule> <HtmlModules>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlModule <AdminHtmlModule>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminUiFeature <AdminUi>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<LinkInfo>> <RoleLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkInfo <DashboardLink>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IHtmlModulesHandler> <Handlers>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlModulesFeature <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAppHost> <OnConfigure>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PreserveAttributesNamed>k__BackingField;
    public string Id { get; }
    public UiInfo Info { get; public set; }
    public List`1<HtmlModule> HtmlModules { get; }
    public HtmlModule AdminHtmlModule { get; public set; }
    public AdminUiFeature AdminUi { get; public set; }
    public Dictionary`2<string, List`1<LinkInfo>> RoleLinks { get; public set; }
    public LinkInfo DashboardLink { get; public set; }
    public List`1<IHtmlModulesHandler> Handlers { get; public set; }
    public HtmlModulesFeature Module { get; }
    public Action`1<IAppHost> OnConfigure { get; public set; }
    public List`1<string> PreserveAttributesNamed { get; public set; }
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public UiInfo get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(UiInfo value);
    [CompilerGeneratedAttribute]
public List`1<HtmlModule> get_HtmlModules();
    [CompilerGeneratedAttribute]
public HtmlModule get_AdminHtmlModule();
    [CompilerGeneratedAttribute]
public void set_AdminHtmlModule(HtmlModule value);
    [CompilerGeneratedAttribute]
public AdminUiFeature get_AdminUi();
    [CompilerGeneratedAttribute]
public void set_AdminUi(AdminUiFeature value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<LinkInfo>> get_RoleLinks();
    [CompilerGeneratedAttribute]
public void set_RoleLinks(Dictionary`2<string, List`1<LinkInfo>> value);
    [CompilerGeneratedAttribute]
public LinkInfo get_DashboardLink();
    [CompilerGeneratedAttribute]
public void set_DashboardLink(LinkInfo value);
    [CompilerGeneratedAttribute]
public List`1<IHtmlModulesHandler> get_Handlers();
    [CompilerGeneratedAttribute]
public void set_Handlers(List`1<IHtmlModulesHandler> value);
    [CompilerGeneratedAttribute]
public HtmlModulesFeature get_Module();
    [CompilerGeneratedAttribute]
public Action`1<IAppHost> get_OnConfigure();
    [CompilerGeneratedAttribute]
public void set_OnConfigure(Action`1<IAppHost> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PreserveAttributesNamed();
    [CompilerGeneratedAttribute]
public void set_PreserveAttributesNamed(List`1<string> value);
    public void AddAdminLink(AdminUiFeature feature, LinkInfo link);
    public sealed virtual void Configure(IServiceCollection services);
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void AfterPluginsLoaded(IAppHost appHost);
}
[ExtensionAttribute]
public static class ServiceStack.UiFeatureUtils : object {
    [ExtensionAttribute]
public static LinkInfo ToAdminRoleLink(LinkInfo link);
}
[ExcludeMetadataAttribute]
public class ServiceStack.UnRegisterEventSubscriber : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
}
[DefaultRequestAttribute("ServiceStack.UpdateEventSubscriber")]
[RestrictAttribute]
public class ServiceStack.UpdateEventSubscriberService : Service {
    [CompilerGeneratedAttribute]
private IServerEvents <serverEvents>P;
    public static string UpdateEventSubNotExists;
    private static string UpdateEventInvalidAccess;
    public UpdateEventSubscriberService(IServerEvents serverEvents);
    [AsyncStateMachineAttribute("ServiceStack.UpdateEventSubscriberService/<Any>d__4")]
public Task`1<object> Any(UpdateEventSubscriber request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.UploadLocation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IVirtualFiles <VirtualFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReadAccessRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteAccessRole>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RequireApiKey <RequireApiKey>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HashSet`1<string> <AllowExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private FilesUploadOperation <AllowOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxFileCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinFileBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxFileBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<FilesUploadContext, string> <ResolvePath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IRequest, IHttpFile> <ValidateUpload>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IRequest, IVirtualFile> <ValidateDownload>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IRequest, IVirtualFile> <ValidateDelete>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<FilesUploadContext, Task`1<IHttpFile>> <TransformFileAsync>k__BackingField;
    public string Name { get; public set; }
    public IVirtualFiles VirtualFiles { get; public set; }
    public string ReadAccessRole { get; public set; }
    public string WriteAccessRole { get; public set; }
    [NullableAttribute("2")]
public RequireApiKey RequireApiKey { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HashSet`1<string> AllowExtensions { get; public set; }
    public FilesUploadOperation AllowOperations { get; public set; }
    public Nullable`1<int> MaxFileCount { get; public set; }
    public Nullable`1<long> MinFileBytes { get; public set; }
    public Nullable`1<long> MaxFileBytes { get; public set; }
    public Func`2<FilesUploadContext, string> ResolvePath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<IRequest, IHttpFile> ValidateUpload { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<IRequest, IVirtualFile> ValidateDownload { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<IRequest, IVirtualFile> ValidateDelete { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<FilesUploadContext, Task`1<IHttpFile>> TransformFileAsync { get; public set; }
    [NullableContextAttribute("2")]
public UploadLocation(string name, IVirtualFiles virtualFiles, Func`2<FilesUploadContext, string> resolvePath, string readAccessRole, string writeAccessRole, RequireApiKey requireApiKey, String[] allowExtensions, FilesUploadOperation allowOperations, Nullable`1<int> maxFileCount, Nullable`1<long> minFileBytes, Nullable`1<long> maxFileBytes, Action`2<IRequest, IHttpFile> validateUpload, Action`2<IRequest, IVirtualFile> validateDownload, Action`2<IRequest, IVirtualFile> validateDelete, Func`2<FilesUploadContext, Task`1<IHttpFile>> transformFile);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IVirtualFiles get_VirtualFiles();
    [CompilerGeneratedAttribute]
public void set_VirtualFiles(IVirtualFiles value);
    [CompilerGeneratedAttribute]
public string get_ReadAccessRole();
    [CompilerGeneratedAttribute]
public void set_ReadAccessRole(string value);
    [CompilerGeneratedAttribute]
public string get_WriteAccessRole();
    [CompilerGeneratedAttribute]
public void set_WriteAccessRole(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RequireApiKey get_RequireApiKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequireApiKey(RequireApiKey value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AllowExtensions();
    [CompilerGeneratedAttribute]
public void set_AllowExtensions(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public FilesUploadOperation get_AllowOperations();
    [CompilerGeneratedAttribute]
public void set_AllowOperations(FilesUploadOperation value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxFileCount();
    [CompilerGeneratedAttribute]
public void set_MaxFileCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MinFileBytes();
    [CompilerGeneratedAttribute]
public void set_MinFileBytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxFileBytes();
    [CompilerGeneratedAttribute]
public void set_MaxFileBytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Func`2<FilesUploadContext, string> get_ResolvePath();
    [CompilerGeneratedAttribute]
public void set_ResolvePath(Func`2<FilesUploadContext, string> value);
    [CompilerGeneratedAttribute]
public Action`2<IRequest, IHttpFile> get_ValidateUpload();
    [CompilerGeneratedAttribute]
public void set_ValidateUpload(Action`2<IRequest, IHttpFile> value);
    [CompilerGeneratedAttribute]
public Action`2<IRequest, IVirtualFile> get_ValidateDownload();
    [CompilerGeneratedAttribute]
public void set_ValidateDownload(Action`2<IRequest, IVirtualFile> value);
    [CompilerGeneratedAttribute]
public Action`2<IRequest, IVirtualFile> get_ValidateDelete();
    [CompilerGeneratedAttribute]
public void set_ValidateDelete(Action`2<IRequest, IVirtualFile> value);
    [CompilerGeneratedAttribute]
public Func`2<FilesUploadContext, Task`1<IHttpFile>> get_TransformFileAsync();
    [CompilerGeneratedAttribute]
public void set_TransformFileAsync(Func`2<FilesUploadContext, Task`1<IHttpFile>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ServiceStack.ValidateScripts : ScriptMethods {
    [CompilerGeneratedAttribute]
private static HashSet`1<string> <RequiredValidators>k__BackingField;
    public static ValidateScripts Instance;
    public static HashSet`1<string> RequiredValidators { get; }
    private static ValidateScripts();
    [CompilerGeneratedAttribute]
public static HashSet`1<string> get_RequiredValidators();
    public IPropertyValidator Null();
    public IPropertyValidator Empty();
    public IPropertyValidator Empty(object defaultValue);
    public IPropertyValidator Equal(object value);
    public IPropertyValidator NotNull();
    public IPropertyValidator NotEmpty();
    public IPropertyValidator NotEmpty(object defaultValue);
    public IPropertyValidator NotEqual(object value);
    public IPropertyValidator CreditCard();
    public IPropertyValidator Email();
    public IPropertyValidator Length(int min, int max);
    public IPropertyValidator ExactLength(int length);
    public IPropertyValidator MaximumLength(int max);
    public IPropertyValidator MinimumLength(int min);
    public IPropertyValidator InclusiveBetween(IComparable from, IComparable to);
    public IPropertyValidator ExclusiveBetween(IComparable from, IComparable to);
    public IPropertyValidator LessThan(int value);
    public IPropertyValidator LessThanOrEqual(int value);
    public IPropertyValidator GreaterThan(int value);
    public IPropertyValidator GreaterThanOrEqual(int value);
    public IPropertyValidator ScalePrecision(int scale, int precision);
    public IPropertyValidator RegularExpression(string regex);
    public IPropertyValidator Enum(Type enumType);
    public ITypeValidator IsAuthenticated();
    public ITypeValidator IsAuthenticated(string provider);
    public ITypeValidator HasRole(string role);
    public ITypeValidator HasRoles(String[] roles);
    public ITypeValidator HasPermission(string permission);
    public ITypeValidator HasPermissions(String[] permission);
    public ITypeValidator HasClaim(string type, string value);
    public ITypeValidator HasScope(string scope);
    public ITypeValidator IsAdmin();
    public ITypeValidator AuthSecret();
    private Func`1<IApiKeySource> ResolveApiKeySource();
    private Func`1<IApiKeyResolver> ResolveApiKeyResolver();
    public ITypeValidator ApiKey();
    public ITypeValidator ApiKey(string scope);
    [CompilerGeneratedAttribute]
private IApiKeySource <ResolveApiKeySource>b__37_0();
    [CompilerGeneratedAttribute]
private IApiKeyResolver <ResolveApiKeyResolver>b__38_0();
}
public class ServiceStack.Validation.ExecOnceOnly : object {
    private static string Flag;
    private string hashKey;
    private string correlationId;
    private IRedisClient redis;
    [CompilerGeneratedAttribute]
private bool <Executed>k__BackingField;
    public bool Executed { get; private set; }
    public ExecOnceOnly(IRedisClientsManager redisManager, Type forType, string correlationId);
    public ExecOnceOnly(IRedisClientsManager redisManager, Type forType, Nullable`1<Guid> correlationId);
    public ExecOnceOnly(IRedisClientsManager redisManager, string hashKey, string correlationId);
    [CompilerGeneratedAttribute]
public bool get_Executed();
    [CompilerGeneratedAttribute]
private void set_Executed(bool value);
    public void Commit();
    public void Rollback();
    public sealed virtual void Dispose();
}
[DefaultRequestAttribute("ServiceStack.GetValidationRules")]
[RestrictAttribute]
public class ServiceStack.Validation.GetValidationRulesService : Service {
    [CompilerGeneratedAttribute]
private IValidationSource <validationSource>P;
    public GetValidationRulesService(IValidationSource validationSource);
    [AsyncStateMachineAttribute("ServiceStack.Validation.GetValidationRulesService/<Any>d__2")]
public Task`1<object> Any(GetValidationRules request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
}
[DefaultRequestAttribute("ServiceStack.ModifyValidationRules")]
[RestrictAttribute]
public class ServiceStack.Validation.ModifyValidationRulesService : Service {
    [CompilerGeneratedAttribute]
private IValidationSource <validationSource>P;
    public ModifyValidationRulesService(IValidationSource validationSource);
    [AsyncStateMachineAttribute("ServiceStack.Validation.ModifyValidationRulesService/<Any>d__2")]
public Task Any(ModifyValidationRules request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IRequest <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IAuthSession> <>n__1(bool reload, CancellationToken token);
}
public class ServiceStack.Validation.MultiRuleSetValidatorSelector : object {
    private String[] rulesetsToExecute;
    public MultiRuleSetValidatorSelector(String[] rulesetsToExecute);
    public sealed virtual bool CanExecute(IValidationRule rule, string propertyPath, IValidationContext context);
}
[ExtensionAttribute]
public static class ServiceStack.Validation.ValidationExtensions : object {
    [CompilerGeneratedAttribute]
private static HashSet`1<Type> <RegisteredDtoValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, Type> <TypesValidatorsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Type> <ValidatorTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Assembly> <RegisteredAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Type> <RegisteredValidators>k__BackingField;
    public static HashSet`1<Type> RegisteredDtoValidators { get; private set; }
    internal static Dictionary`2<Type, Type> TypesValidatorsMap { get; private set; }
    internal static List`1<Type> ValidatorTypes { get; private set; }
    private static List`1<Assembly> RegisteredAssemblies { get; private set; }
    private static List`1<Type> RegisteredValidators { get; private set; }
    private static ValidationExtensions();
    [CompilerGeneratedAttribute]
public static HashSet`1<Type> get_RegisteredDtoValidators();
    [CompilerGeneratedAttribute]
private static void set_RegisteredDtoValidators(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<Type, Type> get_TypesValidatorsMap();
    [CompilerGeneratedAttribute]
private static void set_TypesValidatorsMap(Dictionary`2<Type, Type> value);
    [CompilerGeneratedAttribute]
internal static List`1<Type> get_ValidatorTypes();
    [CompilerGeneratedAttribute]
private static void set_ValidatorTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
private static List`1<Assembly> get_RegisteredAssemblies();
    [CompilerGeneratedAttribute]
private static void set_RegisteredAssemblies(List`1<Assembly> value);
    [CompilerGeneratedAttribute]
private static List`1<Type> get_RegisteredValidators();
    [CompilerGeneratedAttribute]
private static void set_RegisteredValidators(List`1<Type> value);
    internal static void Reset();
    public static void Init(Assembly[] assemblies);
    [ExtensionAttribute]
public static void RegisterValidators(IServiceCollection services, Assembly[] assemblies);
    [ExtensionAttribute]
public static void RegisterValidators(IServiceCollection services, ReuseScope scope, Assembly[] assemblies);
    [ExtensionAttribute]
public static void RegisterValidator(IServiceCollection services, Type validator, ReuseScope scope);
    [ExtensionAttribute]
public static void RegisterValidators(IServiceCollection services, ServiceLifetime lifetime, Assembly[] assemblies);
    [ExtensionAttribute]
public static void RegisterValidator(IServiceCollection services, Func`2<IServiceProvider, IValidator`1<T>> factoryFn, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static void RegisterValidator(IServiceCollection services, Type validator, ServiceLifetime lifetime);
    [ExtensionAttribute]
internal static void RegisterNewValidatorIfNotExists(IServiceCollection services, Type requestType, bool registerChildValidators);
    [ExtensionAttribute]
public static bool HasAsyncValidators(IValidator validator, IValidationContext context, string ruleSet);
    [ExtensionAttribute]
public static Task`1<List`1<ValidationRule>> GetAllValidateRulesAsync(IResolver resolver, string type);
    [AsyncStateMachineAttribute("ServiceStack.Validation.ValidationExtensions/<GetAllValidateRulesAsync>d__31")]
[ExtensionAttribute]
public static Task`1<List`1<ValidationRule>> GetAllValidateRulesAsync(IValidationSource validationSource, string type);
    [ExtensionAttribute]
public static bool IsAuthValidator(IValidateRule rule);
    [ExtensionAttribute]
public static Operation ApplyValidationRules(Operation op, IEnumerable`1<ValidationRule> rules);
    [ExtensionAttribute]
public static ScriptMethodType ToScriptMethodType(ScriptMethodInfo scriptMethod);
}
public class ServiceStack.Validation.ValidationFeature : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<IRequest, ValidationResult, object, object> <ErrorResponseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScanAppHostAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatInfoAndWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDeclarativeValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplicitlyValidateChildProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessRole>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidationSource <ValidationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, String[]> <ServiceRoutes>k__BackingField;
    public string Id { get; public set; }
    public int Priority { get; }
    public Func`4<IRequest, ValidationResult, object, object> ErrorResponseFilter { get; public set; }
    public bool ScanAppHostAssemblies { get; public set; }
    public bool TreatInfoAndWarningsAsErrors { get; public set; }
    public bool EnableDeclarativeValidation { get; public set; }
    public bool ImplicitlyValidateChildProperties { get; public set; }
    public string AccessRole { get; public set; }
    public IValidationSource ValidationSource { get; public set; }
    public Dictionary`2<Type, String[]> ServiceRoutes { get; public set; }
    public Dictionary`2<string, string> ConditionErrorCodes { get; }
    public Dictionary`2<string, string> ErrorCodeMessages { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public Func`4<IRequest, ValidationResult, object, object> get_ErrorResponseFilter();
    [CompilerGeneratedAttribute]
public void set_ErrorResponseFilter(Func`4<IRequest, ValidationResult, object, object> value);
    [CompilerGeneratedAttribute]
public bool get_ScanAppHostAssemblies();
    [CompilerGeneratedAttribute]
public void set_ScanAppHostAssemblies(bool value);
    [CompilerGeneratedAttribute]
public bool get_TreatInfoAndWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatInfoAndWarningsAsErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDeclarativeValidation();
    [CompilerGeneratedAttribute]
public void set_EnableDeclarativeValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImplicitlyValidateChildProperties();
    [CompilerGeneratedAttribute]
public void set_ImplicitlyValidateChildProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_AccessRole();
    [CompilerGeneratedAttribute]
public void set_AccessRole(string value);
    [CompilerGeneratedAttribute]
public IValidationSource get_ValidationSource();
    [CompilerGeneratedAttribute]
public void set_ValidationSource(IValidationSource value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, String[]> get_ServiceRoutes();
    [CompilerGeneratedAttribute]
public void set_ServiceRoutes(Dictionary`2<Type, String[]> value);
    public Dictionary`2<string, string> get_ConditionErrorCodes();
    public Dictionary`2<string, string> get_ErrorCodeMessages();
    public sealed virtual void BeforePluginsLoaded(IAppHost appHost);
    public sealed virtual void AfterConfigure(IServiceCollection services);
    public sealed virtual void Register(IAppHost appHost);
    public sealed virtual void AfterInit(IAppHost appHost);
    public virtual string GetRequestErrorBody(object request);
    public virtual void ValidateRequest(object requestDto, IRequest req);
    [AsyncStateMachineAttribute("ServiceStack.Validation.ValidationFeature/<ValidateRequestAsync>d__48")]
public virtual Task ValidateRequestAsync(object requestDto, IRequest req, CancellationToken token);
    [CompilerGeneratedAttribute]
private void <BeforePluginsLoaded>b__42_0(UiFeature feature);
}
[ExtensionAttribute]
public static class ServiceStack.Validation.ValidationFilters : object {
    [AsyncStateMachineAttribute("ServiceStack.Validation.ValidationFilters/<RequestFilterAsync>d__0")]
public static Task RequestFilterAsync(IRequest req, IResponse res, object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.Validation.ValidationFilters/<RequestFilterAsyncIgnoreWarningsInfo>d__1")]
public static Task RequestFilterAsyncIgnoreWarningsInfo(IRequest req, IResponse res, object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.Validation.ValidationFilters/<RequestFilterAsync>d__2")]
private static Task RequestFilterAsync(IRequest req, IResponse res, object requestDto, bool treatInfoAndWarningsAsErrors);
    [AsyncStateMachineAttribute("ServiceStack.Validation.ValidationFilters/<ResponseFilterAsync>d__3")]
public static Task ResponseFilterAsync(IRequest req, IResponse res, object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.Validation.ValidationFilters/<ValidateAsync>d__4")]
[ExtensionAttribute]
public static Task`1<ValidationResult> ValidateAsync(IValidator validator, IRequest req, object requestDto);
    [ExtensionAttribute]
public static ValidationResult Validate(IValidator validator, IRequest req, object requestDto);
    public static IEnumerable`1<string> GetResetFields(object o);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetResetFields(IRequest req);
}
public static class ServiceStack.Validation.ValidatorCache : object {
    private static Dictionary`2<Type, ResolveValidatorDelegate> delegateCache;
    private static ValidatorCache();
    public static IValidator GetValidator(IRequest httpReq, Type type);
}
public class ServiceStack.Validation.ValidatorCache`1 : object {
    public static IValidator GetValidator(IRequest httpReq);
}
[ExtensionAttribute]
public static class ServiceStack.ValidationResultExtensions : object {
    [ExtensionAttribute]
internal static Dictionary`2<string, string> CustomStateAsDictionary(ValidationFailure error);
    [ExtensionAttribute]
public static ValidationErrorResult ToErrorResult(ValidationResult result);
    [ExtensionAttribute]
public static ValidationError ToException(ValidationResult result);
}
[ExtensionAttribute]
public static class ServiceStack.ValidationSourceUtils : object {
    [ExtensionAttribute]
public static void InitSchema(IValidationSource source);
    [AsyncStateMachineAttribute("ServiceStack.ValidationSourceUtils/<GetAllValidateRulesAsync>d__1")]
[ExtensionAttribute]
public static Task`1<List`1<ValidationRule>> GetAllValidateRulesAsync(IValidationSource source, string typeName);
    [ExtensionAttribute]
public static Task SaveValidationRulesAsync(IValidationSource source, List`1<ValidationRule> validateRules);
    [AsyncStateMachineAttribute("ServiceStack.ValidationSourceUtils/<DeleteValidationRulesAsync>d__3")]
[ExtensionAttribute]
public static Task DeleteValidationRulesAsync(IValidationSource source, Int32[] ids);
    [AsyncStateMachineAttribute("ServiceStack.ValidationSourceUtils/<ClearCacheAsync>d__4")]
[ExtensionAttribute]
public static Task ClearCacheAsync(IValidationSource source, Int32[] ids);
    [AsyncStateMachineAttribute("ServiceStack.ValidationSourceUtils/<GetValidateRulesByIdsAsync>d__5")]
[ExtensionAttribute]
public static Task`1<List`1<ValidationRule>> GetValidateRulesByIdsAsync(IValidationSource source, Int32[] ids);
    private static void ThrowNotValidationSourceAdmin(IValidationSource source);
}
[ExtensionAttribute]
public static class ServiceStack.Validators : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, List`1<ITypeValidator>> <TypeRulesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, List`1<IValidationRule>> <TypePropertyRulesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <ConditionErrorCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <ErrorCodeMessages>k__BackingField;
    private static Func`1<CascadeMode> CascadeMode;
    private static Type[] CollectionCtorTypes;
    internal static List`1<ValueTuple`3<PropertyInfo, IValidationRule, List`1<ValidateAttribute>>> DelayConfiguringPropertyRules;
    [CompilerGeneratedAttribute]
private static List`1<Action`2<PropertyInfo, IValidateRule>> <RuleFilters>k__BackingField;
    public static Dictionary`2<Type, List`1<ITypeValidator>> TypeRulesMap { get; private set; }
    public static Dictionary`2<Type, List`1<IValidationRule>> TypePropertyRulesMap { get; private set; }
    public static Dictionary`2<string, string> ConditionErrorCodes { get; private set; }
    public static Dictionary`2<string, string> ErrorCodeMessages { get; private set; }
    public static List`1<Action`2<PropertyInfo, IValidateRule>> RuleFilters { get; }
    private static Validators();
    [CompilerGeneratedAttribute]
public static Dictionary`2<Type, List`1<ITypeValidator>> get_TypeRulesMap();
    [CompilerGeneratedAttribute]
private static void set_TypeRulesMap(Dictionary`2<Type, List`1<ITypeValidator>> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<Type, List`1<IValidationRule>> get_TypePropertyRulesMap();
    [CompilerGeneratedAttribute]
private static void set_TypePropertyRulesMap(Dictionary`2<Type, List`1<IValidationRule>> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_ConditionErrorCodes();
    [CompilerGeneratedAttribute]
private static void set_ConditionErrorCodes(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, string> get_ErrorCodeMessages();
    [CompilerGeneratedAttribute]
private static void set_ErrorCodeMessages(Dictionary`2<string, string> value);
    internal static void Reset();
    public static bool HasValidateRequestAttributes(Type type);
    public static bool HasValidateAttributes(Type type);
    [AsyncStateMachineAttribute("ServiceStack.Validators/<AssertTypeValidatorsAsync>d__20")]
public static Task AssertTypeValidatorsAsync(IRequest req, object requestDto, Type requestType);
    private static void ThrowNoValidator(string validator);
    private static void ThrowInvalidValidator(string validator, string validatorType);
    private static void ThrowInvalidValidate();
    private static void ThrowInvalidValidateRequest();
    public static bool RegisterRequestRulesFor(Type type);
    public static SharpPage ParseCondition(ScriptContext context, string condition);
    public static void AddTypeValidator(List`1<ITypeValidator> to, IValidateRule attr);
    public static bool RegisterPropertyRulesFor(IServiceCollection services, Type dtoType, bool registerChildValidators);
    public static Func`2<ICommonContext, IValidator`1<TProperty>> CreateValidatorProvider();
    public static IPropertyValidator CreateChildAdapter(IServiceCollection services, Type dtoType, Type childType);
    private static IValidationRule CreateDeclarativePropertyRuleIfExists(Type type, PropertyInfo pi);
    internal static void ConfigureDelayedPropertyRules();
    public static List`1<ITypeValidator> GetTypeRules(Type type);
    public static List`1<IValidationRule> GetPropertyRules(Type type);
    public static void AddRule(Type type, string name, ValidateAttribute attr);
    public static void AddRule(Type type, PropertyInfo pi, ValidateAttribute attr);
    public static IValidationRule CreatePropertyRule(Type type, PropertyInfo pi);
    public static IValidationRule CreateCollectionPropertyRule(Type type, PropertyInfo pi);
    [CompilerGeneratedAttribute]
public static List`1<Action`2<PropertyInfo, IValidateRule>> get_RuleFilters();
    public static void AppendDefaultValueOnEmptyValidators(PropertyInfo pi, IValidateRule rule);
    [ExtensionAttribute]
public static void AddRule(List`1<IPropertyValidator> validators, PropertyInfo pi, IValidateRule propRule);
    private static ScriptContext GetScriptContext();
    [ExtensionAttribute]
public static PageResult ToPageResult(PropertyValidatorContext context, SharpPage page);
    [CompilerGeneratedAttribute]
internal static IPropertyValidator <AddRule>g__apply|45_0(IPropertyValidator validator, <>c__DisplayClass45_0& );
}
[ExtensionAttribute]
public static class ServiceStack.ValidatorUtils : object {
    [ExtensionAttribute]
public static ITypeValidator Init(ITypeValidator validator, IValidateRule rule);
    [ExtensionAttribute]
internal static string RemoveValidatorSuffix(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ServiceStack.VirtualFilesFeature : object {
    [CompilerGeneratedAttribute]
private IAppHost <AppHost>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpAsyncTaskHandler <StaticFilesHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpAsyncTaskHandler <ForbiddenHttpHandler>k__BackingField;
    public IAppHost AppHost { get; public set; }
    public HttpAsyncTaskHandler StaticFilesHandler { get; public set; }
    public HttpAsyncTaskHandler ForbiddenHttpHandler { get; public set; }
    [CompilerGeneratedAttribute]
public IAppHost get_AppHost();
    [CompilerGeneratedAttribute]
public void set_AppHost(IAppHost value);
    [CompilerGeneratedAttribute]
public HttpAsyncTaskHandler get_StaticFilesHandler();
    [CompilerGeneratedAttribute]
public void set_StaticFilesHandler(HttpAsyncTaskHandler value);
    [CompilerGeneratedAttribute]
public HttpAsyncTaskHandler get_ForbiddenHttpHandler();
    [CompilerGeneratedAttribute]
public void set_ForbiddenHttpHandler(HttpAsyncTaskHandler value);
    [NullableContextAttribute("1")]
public sealed virtual void Register(IAppHost appHost);
    [NullableContextAttribute("1")]
public HttpAsyncTaskHandler GetHandler(IRequest httpReq);
    [NullableContextAttribute("1")]
public static bool ShouldAllow(string pathInfo);
}
public class ServiceStack.WebSudoAuthUserSession : AuthUserSession {
    [CompilerGeneratedAttribute]
private DateTime <AuthenticatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AuthenticatedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AuthenticatedWebSudoUntil>k__BackingField;
    [DataMemberAttribute]
public DateTime AuthenticatedAt { get; public set; }
    [DataMemberAttribute]
public int AuthenticatedCount { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> AuthenticatedWebSudoUntil { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_AuthenticatedAt();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthenticatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AuthenticatedCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthenticatedCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_AuthenticatedWebSudoUntil();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthenticatedWebSudoUntil(Nullable`1<DateTime> value);
}
public class ServiceStack.WebSudoFeature : AuthEvents {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public static string SessionCopyRequestItemKey;
    [CompilerGeneratedAttribute]
private TimeSpan <WebSudoDuration>k__BackingField;
    public string Id { get; public set; }
    public TimeSpan WebSudoDuration { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WebSudoDuration();
    [CompilerGeneratedAttribute]
public void set_WebSudoDuration(TimeSpan value);
    public sealed virtual void Register(IAppHost appHost);
    [AsyncStateMachineAttribute("ServiceStack.WebSudoFeature/<OnRequestStartAsync>d__11")]
private Task OnRequestStartAsync(IRequest request, IResponse response, object dto);
    [AsyncStateMachineAttribute("ServiceStack.WebSudoFeature/<OnRequestEndAsync>d__12")]
private Task OnRequestEndAsync(IRequest request, IResponse response, object dto);
    public virtual void OnCreated(IRequest httpReq, IAuthSession session);
    public virtual void OnAuthenticated(IRequest httpReq, IAuthSession session, IServiceBase authService, IAuthTokens tokens, Dictionary`2<string, string> authInfo);
}
[AttributeUsageAttribute("68")]
public class ServiceStack.WebSudoRequiredAttribute : AuthenticateAttribute {
    public WebSudoRequiredAttribute(ApplyTo applyTo);
    [AsyncStateMachineAttribute("ServiceStack.WebSudoRequiredAttribute/<ExecuteAsync>d__2")]
public virtual Task ExecuteAsync(IRequest req, IResponse res, object requestDto);
    [AsyncStateMachineAttribute("ServiceStack.WebSudoRequiredAttribute/<HasWebSudoAsync>d__3")]
public Task`1<bool> HasWebSudoAsync(IRequest req, IWebSudoAuthSession session);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRequest req, IResponse res, object requestDto);
}
public class ServiceStack.XmlOnly : RequestFilterAttribute {
    public virtual void Execute(IRequest req, IResponse res, object requestDto);
}
public class ServiceStack.XsdUtils : object {
    public static XmlSchemaSet GetXmlSchemaSet(ICollection`1<Type> operationTypes);
    public static string GetXsd(XmlSchemaSet schemaSet);
    public static string GetXsd(Type operationType);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
