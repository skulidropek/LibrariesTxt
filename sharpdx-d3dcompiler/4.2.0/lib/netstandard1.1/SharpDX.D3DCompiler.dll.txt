[CompilerGeneratedAttribute]
internal class SharpDX.D3DCompiler.AssemblyDoc : object {
}
public class SharpDX.D3DCompiler.CompilationResult : CompilationResultBase`1<ShaderBytecode> {
    public CompilationResult(ShaderBytecode bytecode, Result resultCode, string message);
    public static ShaderBytecode op_Implicit(CompilationResult input);
    public static Byte[] op_Implicit(CompilationResult input);
}
[GuidAttribute("EB62D63D-93DD-4318-8AE8-C6F83AD371B8")]
public class SharpDX.D3DCompiler.ConstantBuffer : CppObject {
    public ConstantBufferDescription Description { get; }
    public ConstantBuffer(IntPtr nativePtr);
    public static ConstantBuffer op_Explicit(IntPtr nativePtr);
    public ConstantBufferDescription get_Description();
    internal void GetDescription(ConstantBufferDescription& descRef);
    public ShaderReflectionVariable GetVariable(int index);
    public ShaderReflectionVariable GetVariable(string name);
}
public class SharpDX.D3DCompiler.ConstantBufferDescription : ValueType {
    public string Name;
    public ConstantBufferType Type;
    public int VariableCount;
    public int Size;
    public ConstantBufferFlags Flags;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.ConstantBufferFlags : Enum {
    public int value__;
    public static ConstantBufferFlags ConstantBufferUserpacked;
    public static ConstantBufferFlags None;
}
public enum SharpDX.D3DCompiler.ConstantBufferType : Enum {
    public int value__;
    public static ConstantBufferType ConstantBuffer;
    public static ConstantBufferType TextureBuffer;
    public static ConstantBufferType InterfacePointers;
    public static ConstantBufferType ResourceBindInformation;
}
internal static class SharpDX.D3DCompiler.D3D : object {
    public static void ReadFileToBlob(string fileNameRef, Blob& contentsOut);
    private static int D3DReadFileToBlob_(Void* param0, Void* param1);
    public static void WriteBlobToFile(Blob blobRef, string fileNameRef, RawBool bOverwrite);
    private static int D3DWriteBlobToFile_(Void* param0, Void* param1, RawBool param2);
    public static Result Compile(IntPtr srcDataRef, PointerSize srcDataSize, string sourceNameRef, ShaderMacro[] definesRef, Include includeRef, string entrypointRef, string targetRef, ShaderFlags flags1, EffectFlags flags2, Blob& codeOut, Blob& errorMsgsOut);
    private static int D3DCompile_(Void* param0, Void* param1, Void* param2, Void* param3, Void* param4, Void* param5, Void* param6, int param7, int param8, Void* param9, Void* param10);
    public static Result Compile2(IntPtr srcDataRef, PointerSize srcDataSize, string sourceNameRef, ShaderMacro[] definesRef, Include includeRef, string entrypointRef, string targetRef, ShaderFlags flags1, EffectFlags flags2, SecondaryDataFlags secondaryDataFlags, IntPtr secondaryDataRef, PointerSize secondaryDataSize, Blob& codeOut, Blob& errorMsgsOut);
    private static int D3DCompile2_(Void* param0, Void* param1, Void* param2, Void* param3, Void* param4, Void* param5, Void* param6, int param7, int param8, int param9, Void* param10, Void* param11, Void* param12, Void* param13);
    public static Result CompileFromFile(string fileNameRef, ShaderMacro[] definesRef, Include includeRef, string entrypointRef, string targetRef, ShaderFlags flags1, EffectFlags flags2, Blob& codeOut, Blob& errorMsgsOut);
    private static int D3DCompileFromFile_(Void* param0, Void* param1, Void* param2, Void* param3, Void* param4, int param5, int param6, Void* param7, Void* param8);
    public static void Preprocess(IntPtr srcDataRef, PointerSize srcDataSize, string sourceNameRef, ShaderMacro[] definesRef, Include includeRef, Blob& codeTextOut, Blob& errorMsgsOut);
    private static int D3DPreprocess_(Void* param0, Void* param1, Void* param2, Void* param3, Void* param4, Void* param5, Void* param6);
    public static void GetDebugInfo(IntPtr srcDataRef, PointerSize srcDataSize, Blob& debugInfoOut);
    private static int D3DGetDebugInfo_(Void* param0, Void* param1, Void* param2);
    public static void Reflect(IntPtr srcDataRef, PointerSize srcDataSize, Guid interfaceRef, IntPtr& reflectorOut);
    private static int D3DReflect_(Void* param0, Void* param1, Void* param2, Void* param3);
    public static void ReflectLibrary(IntPtr srcDataRef, PointerSize srcDataSize, Guid riid, IntPtr& reflectorOut);
    private static int D3DReflectLibrary_(Void* param0, Void* param1, Void* param2, Void* param3);
    public static void Disassemble(IntPtr srcDataRef, PointerSize srcDataSize, DisassemblyFlags flags, string szComments, Blob& disassemblyOut);
    private static int D3DDisassemble_(Void* param0, Void* param1, int param2, Void* param3, Void* param4);
    public static void DisassembleRegion(IntPtr srcDataRef, PointerSize srcDataSize, int flags, string szComments, PointerSize startByteOffset, PointerSize numInsts, PointerSize& finishByteOffsetRef, Blob& disassemblyOut);
    private static int D3DDisassembleRegion_(Void* param0, Void* param1, int param2, Void* param3, Void* param4, Void* param5, Void* param6, Void* param7);
    public static void CreateLinker(Linker linkerOut);
    private static int D3DCreateLinker_(Void* param0);
    public static Result LoadModule(IntPtr srcDataRef, PointerSize cbSrcDataSize, Module moduleOut);
    private static int D3DLoadModule_(Void* param0, Void* param1, Void* param2);
    public static void CreateFunctionLinkingGraph(int uFlags, FunctionLinkingGraph functionLinkingGraphOut);
    private static int D3DCreateFunctionLinkingGraph_(int param0, Void* param1);
    public static PointerSize GetTraceInstructionOffsets(IntPtr srcDataRef, PointerSize srcDataSize, int flags, PointerSize startInstIndex, PointerSize numInsts, PointerSize& totalInstsRef);
    private static int D3DGetTraceInstructionOffsets_(Void* param0, Void* param1, int param2, Void* param3, Void* param4, Void* param5, Void* param6);
    public static Result GetInputSignatureBlob(IntPtr srcDataRef, PointerSize srcDataSize, Blob& signatureBlobOut);
    private static int D3DGetInputSignatureBlob_(Void* param0, Void* param1, Void* param2);
    public static Result GetOutputSignatureBlob(IntPtr srcDataRef, PointerSize srcDataSize, Blob& signatureBlobOut);
    private static int D3DGetOutputSignatureBlob_(Void* param0, Void* param1, Void* param2);
    public static Result GetInputAndOutputSignatureBlob(IntPtr srcDataRef, PointerSize srcDataSize, Blob& signatureBlobOut);
    private static int D3DGetInputAndOutputSignatureBlob_(Void* param0, Void* param1, Void* param2);
    public static Result StripShader(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, StripFlags uStripFlags, Blob& strippedBlobOut);
    private static int D3DStripShader_(Void* param0, Void* param1, int param2, Void* param3);
    public static void GetBlobPart(IntPtr srcDataRef, PointerSize srcDataSize, ShaderBytecodePart part, int flags, Blob& partOut);
    private static int D3DGetBlobPart_(Void* param0, Void* param1, int param2, int param3, Void* param4);
    public static void SetBlobPart(IntPtr srcDataRef, PointerSize srcDataSize, ShaderBytecodePart part, int flags, IntPtr partRef, PointerSize partSize, Blob& newShaderOut);
    private static int D3DSetBlobPart_(Void* param0, Void* param1, int param2, int param3, Void* param4, Void* param5, Void* param6);
    public static void CreateBlob(PointerSize size, Blob& blobOut);
    private static int D3DCreateBlob_(Void* param0, Void* param1);
    public static void CompressShaders(int uNumShaders, ShaderData[] shaderDataRef, int uFlags, Blob& compressedDataOut);
    private static int D3DCompressShaders_(int param0, Void* param1, int param2, Void* param3);
    public static void DecompressShaders(IntPtr srcDataRef, PointerSize srcDataSize, int uNumShaders, int uStartIndex, Int32[] indicesRef, int uFlags, Blob[] shadersOut, Int32& totalShadersRef);
    private static int D3DDecompressShaders_(Void* param0, Void* param1, int param2, int param3, Void* param4, int param5, Void* param6, Void* param7);
}
internal static class SharpDX.D3DCompiler.D3DCommon : object {
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.DisassemblyFlags : Enum {
    public int value__;
    public static DisassemblyFlags EnableColorCode;
    public static DisassemblyFlags EnableDefaultValuePrints;
    public static DisassemblyFlags EnableInstructionNumbering;
    public static DisassemblyFlags EnableInstructionCycle;
    public static DisassemblyFlags DisableDebugInformation;
    public static DisassemblyFlags EnableInstructionOffset;
    public static DisassemblyFlags InstructionOnly;
    public static DisassemblyFlags PrintHexLiterals;
    public static DisassemblyFlags None;
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.EffectFlags : Enum {
    public int value__;
    public static EffectFlags ChildEffect;
    public static EffectFlags AllowSlowOperations;
    public static EffectFlags None;
}
public class SharpDX.D3DCompiler.FunctionDescription : ValueType {
    public int Version;
    public string Creator;
    public int Flags;
    public int ConstantBuffers;
    public int BoundResources;
    public int InstructionCount;
    public int TempRegisterCount;
    public int TempArrayCount;
    public int DefCount;
    public int DclCount;
    public int TextureNormalInstructions;
    public int TextureLoadInstructions;
    public int TextureCompInstructions;
    public int TextureBiasInstructions;
    public int TextureGradientInstructions;
    public int FloatInstructionCount;
    public int IntInstructionCount;
    public int UintInstructionCount;
    public int StaticFlowControlCount;
    public int DynamicFlowControlCount;
    public int MacroInstructionCount;
    public int ArrayInstructionCount;
    public int MovInstructionCount;
    public int MovcInstructionCount;
    public int ConversionInstructionCount;
    public int BitwiseInstructionCount;
    public FeatureLevel MinFeatureLevel;
    public long RequiredFeatureFlags;
    public string Name;
    public int FunctionParameterCount;
    public RawBool HasReturn;
    public RawBool Has10Level9VertexShader;
    public RawBool Has10Level9PixelShader;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("54133220-1CE8-43D3-8236-9855C5CEECFF")]
public class SharpDX.D3DCompiler.FunctionLinkingGraph : ComObject {
    private static int ReturnParameterIndex;
    public string LastErrorString { get; }
    public Blob LastError { get; }
    public FunctionLinkingGraph(IntPtr nativePtr);
    public LinkingNode SetInputSignature(ParameterDescription[] parameters);
    public LinkingNode SetOutputSignature(ParameterDescription[] parameters);
    public ModuleInstance CreateModuleInstance();
    public string get_LastErrorString();
    public LinkingNode CallFunction(Module moduleWithFunctionPrototypeRef, string functionNameRef);
    public void PassValue(LinkingNode sourceNode, LinkingNode destinationNode, int destinationParameterIndex);
    public string GenerateHlsl(int uFlags);
    public static FunctionLinkingGraph op_Explicit(IntPtr nativePtr);
    public Blob get_LastError();
    internal Result CreateModuleInstance(ModuleInstance& moduleInstanceOut, Blob& errorBufferOut);
    internal void SetInputSignature(ParameterDescription[] inputParametersRef, int cInputParameters, LinkingNode& inputNodeOut);
    public void SetOutputSignature(ParameterDescription[] outputParametersRef, int cOutputParameters, LinkingNode& outputNodeOut);
    public LinkingNode CallFunction(string moduleInstanceNamespaceRef, Module moduleWithFunctionPrototypeRef, string functionNameRef);
    public void PassValue(LinkingNode srcNodeRef, int srcParameterIndex, LinkingNode dstNodeRef, int dstParameterIndex);
    public void PassValueWithSwizzle(LinkingNode srcNodeRef, int srcParameterIndex, string srcSwizzleRef, LinkingNode dstNodeRef, int dstParameterIndex, string dstSwizzleRef);
    internal void GetLastError(Blob& errorBufferOut);
    public void GenerateHlsl(int uFlags, Blob& bufferOut);
}
[GuidAttribute("42757488-334F-47FE-982E-1A65D08CC462")]
public class SharpDX.D3DCompiler.FunctionParameterReflection : CppObject {
    public ParameterDescription Description { get; }
    public FunctionParameterReflection(IntPtr nativePtr);
    public static FunctionParameterReflection op_Explicit(IntPtr nativePtr);
    public ParameterDescription get_Description();
    internal void GetDescription(ParameterDescription& descRef);
}
[GuidAttribute("207BCECB-D683-4A06-A8A3-9B149B9F73A4")]
public class SharpDX.D3DCompiler.FunctionReflection : CppObject {
    public ConstantBuffer[] ConstantBuffers { get; }
    public FunctionParameterReflection[] Parameters { get; }
    public FunctionParameterReflection ReturnParameter { get; }
    public InputBindingDescription[] ResourceBindings { get; }
    public FunctionDescription Description { get; }
    public FunctionReflection(IntPtr nativePtr);
    public ConstantBuffer[] get_ConstantBuffers();
    public FunctionParameterReflection[] get_Parameters();
    public FunctionParameterReflection get_ReturnParameter();
    public InputBindingDescription GetResourceBindingDescription(int index);
    public InputBindingDescription GetResourceBindingDescription(string name);
    public InputBindingDescription[] get_ResourceBindings();
    public static FunctionReflection op_Explicit(IntPtr nativePtr);
    public FunctionDescription get_Description();
    internal void GetDescription(FunctionDescription& descRef);
    public ConstantBuffer GetConstantBufferByIndex(int bufferIndex);
    public ConstantBuffer GetConstantBufferByName(string name);
    public void GetResourceBindingDescription(int resourceIndex, InputBindingDescription& descRef);
    public ShaderReflectionVariable GetVariableByName(string name);
    public void GetResourceBindingDescByName(string name, InputBindingDescription& descRef);
    public FunctionParameterReflection GetFunctionParameter(int parameterIndex);
}
[ShadowAttribute("SharpDX.D3DCompiler.IncludeShadow")]
public interface SharpDX.D3DCompiler.Include {
    public abstract virtual Stream Open(IncludeType type, string fileName, Stream parentStream);
    public abstract virtual void Close(Stream stream);
}
internal class SharpDX.D3DCompiler.IncludeShadow : CppObjectShadow {
    private static IncludeVtbl Vtbl;
    private Dictionary`2<IntPtr, Frame> frames;
    protected CppObjectVtbl GetVtbl { get; }
    private static IncludeShadow();
    public static IntPtr ToIntPtr(Include callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public enum SharpDX.D3DCompiler.IncludeType : Enum {
    public int value__;
    public static IncludeType Local;
    public static IncludeType System;
}
public class SharpDX.D3DCompiler.InputBindingDescription : ValueType {
    public string Name;
    public ShaderInputType Type;
    public int BindPoint;
    public int BindCount;
    public ShaderInputFlags Flags;
    public ResourceReturnType ReturnType;
    public ShaderResourceViewDimension Dimension;
    public int NumSamples;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.D3DCompiler.InputPrimitive : Enum {
    public int value__;
    public static InputPrimitive Undefined;
    public static InputPrimitive Point;
    public static InputPrimitive Line;
    public static InputPrimitive Triangle;
    public static InputPrimitive LineWithAdjacency;
    public static InputPrimitive TriangleWithAdjacency;
    public static InputPrimitive PatchWith1ControlPoints;
    public static InputPrimitive PatchWith2ControlPoints;
    public static InputPrimitive PatchWith3ControlPoints;
    public static InputPrimitive PatchWith4ControlPoints;
    public static InputPrimitive PatchWith5ControlPoints;
    public static InputPrimitive PatchWith6ControlPoints;
    public static InputPrimitive PatchWith7ControlPoints;
    public static InputPrimitive PatchWith8ControlPoints;
    public static InputPrimitive PatchWith9ControlPoints;
    public static InputPrimitive PatchWith10ControlPoints;
    public static InputPrimitive PatchWith11ControlPoints;
    public static InputPrimitive PatchWith12ControlPoints;
    public static InputPrimitive PatchWith13ControlPoints;
    public static InputPrimitive PatchWith14ControlPoints;
    public static InputPrimitive PatchWith15ControlPoints;
    public static InputPrimitive PatchWith16ControlPoints;
    public static InputPrimitive PatchWith17ControlPoints;
    public static InputPrimitive PatchWith18ControlPoints;
    public static InputPrimitive PatchWith19ControlPoints;
    public static InputPrimitive PatchWith20ControlPoints;
    public static InputPrimitive PatchWith21ControlPoints;
    public static InputPrimitive PatchWith22ControlPoints;
    public static InputPrimitive PatchWith23ControlPoints;
    public static InputPrimitive PatchWith24ControlPoints;
    public static InputPrimitive PatchWith25ControlPoints;
    public static InputPrimitive PatchWith26ControlPoints;
    public static InputPrimitive PatchWith27ControlPoints;
    public static InputPrimitive PatchWith28ControlPoints;
    public static InputPrimitive PatchWith29ControlPoints;
    public static InputPrimitive PatchWith30ControlPoints;
    public static InputPrimitive PatchWith31ControlPoints;
    public static InputPrimitive PatchWith32ControlPoints;
}
public class SharpDX.D3DCompiler.LibraryDescription : ValueType {
    public string Creator;
    public int Flags;
    public int FunctionCount;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("54384F1B-5B3E-4BB7-AE01-60BA3097CBB6")]
public class SharpDX.D3DCompiler.LibraryReflection : ComObject {
    public FunctionReflection[] Functions { get; }
    public LibraryDescription Description { get; }
    public LibraryReflection(Byte[] libraryBytecode);
    public LibraryReflection(IntPtr nativePtr);
    public FunctionReflection[] get_Functions();
    public static LibraryReflection op_Explicit(IntPtr nativePtr);
    public LibraryDescription get_Description();
    internal void GetDescription(LibraryDescription& descRef);
    public FunctionReflection GetFunctionByIndex(int functionIndex);
}
[GuidAttribute("59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E")]
public class SharpDX.D3DCompiler.Linker : ComObject {
    public Linker(IntPtr nativePtr);
    public ShaderBytecode Link(ModuleInstance module, string entryPointName, string targetName, int flags);
    public static Linker op_Explicit(IntPtr nativePtr);
    internal Result Link(ModuleInstance entryRef, string entryNameRef, string targetNameRef, int uFlags, Blob& shaderBlobOut, Blob& errorBufferOut);
    public void UseLibrary(ModuleInstance libraryMIRef);
    public void AddClipPlaneFromCBuffer(int uCBufferSlot, int uCBufferEntry);
}
[GuidAttribute("D80DD70C-8D2F-4751-94A1-03C79B3556DB")]
public class SharpDX.D3DCompiler.LinkingNode : ComObject {
    public LinkingNode(IntPtr nativePtr);
    public static LinkingNode op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("CAC701EE-80FC-4122-8242-10B39C8CEC34")]
public class SharpDX.D3DCompiler.Module : ComObject {
    public Module(ShaderBytecode bytecode);
    public Module(IntPtr nativePtr);
    public static Module op_Explicit(IntPtr nativePtr);
    internal void CreateInstance(string namespaceRef, ModuleInstance moduleInstanceOut);
}
[GuidAttribute("469E07F7-045A-48D5-AA12-68A478CDF75D")]
public class SharpDX.D3DCompiler.ModuleInstance : ComObject {
    public ModuleInstance(Module module);
    public ModuleInstance(string namespaceRef, Module module);
    public ModuleInstance(IntPtr nativePtr);
    public static ModuleInstance op_Explicit(IntPtr nativePtr);
    public Result BindConstantBuffer(int uSrcSlot, int uDstSlot, int cbDstOffset);
    public Result BindConstantBufferByName(string nameRef, int uDstSlot, int cbDstOffset);
    public Result BindResource(int uSrcSlot, int uDstSlot, int uCount);
    public Result BindResourceByName(string nameRef, int uDstSlot, int uCount);
    public Result BindSampler(int uSrcSlot, int uDstSlot, int uCount);
    public Result BindSamplerByName(string nameRef, int uDstSlot, int uCount);
    public Result BindUnorderedAccessView(int uSrcSlot, int uDstSlot, int uCount);
    public Result BindUnorderedAccessViewByName(string nameRef, int uDstSlot, int uCount);
    public Result BindResourceAsUnorderedAccessView(int uSrcSrvSlot, int uDstUavSlot, int uCount);
    public Result BindResourceAsUnorderedAccessViewByName(string srvNameRef, int uDstUavSlot, int uCount);
}
[CompilerGeneratedAttribute]
internal class SharpDX.D3DCompiler.NamespaceDoc : object {
}
public class SharpDX.D3DCompiler.ParameterDescription : ValueType {
    public string Name;
    public string SemanticName;
    public ShaderVariableType Type;
    public ShaderVariableClass Class;
    public int Rows;
    public int Columns;
    public InterpolationMode InterpolationMode;
    public ParameterFlags Flags;
    public int FirstInRegister;
    public int FirstInComponent;
    public int FirstOutRegister;
    public int FirstOutComponent;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.ParameterFlags : Enum {
    public int value__;
    public static ParameterFlags None;
    public static ParameterFlags In;
    public static ParameterFlags Out;
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.RegisterComponentMaskFlags : Enum {
    public byte value__;
    public static RegisterComponentMaskFlags All;
    public static RegisterComponentMaskFlags ComponentW;
    public static RegisterComponentMaskFlags ComponentX;
    public static RegisterComponentMaskFlags ComponentY;
    public static RegisterComponentMaskFlags ComponentZ;
    public static RegisterComponentMaskFlags None;
}
public enum SharpDX.D3DCompiler.RegisterComponentType : Enum {
    public int value__;
    public static RegisterComponentType Unknown;
    public static RegisterComponentType UInt32;
    public static RegisterComponentType SInt32;
    public static RegisterComponentType Float32;
}
public enum SharpDX.D3DCompiler.ResourceReturnType : Enum {
    public int value__;
    public static ResourceReturnType UNorm;
    public static ResourceReturnType SNorm;
    public static ResourceReturnType SInt;
    public static ResourceReturnType UInt;
    public static ResourceReturnType Float;
    public static ResourceReturnType Mixed;
    public static ResourceReturnType Double;
    public static ResourceReturnType Continued;
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.SecondaryDataFlags : Enum {
    public int value__;
    public static SecondaryDataFlags MergeUnorderedAccessViewSlots;
    public static SecondaryDataFlags PreserveTemplateSlots;
    public static SecondaryDataFlags RequireTemplateMatch;
    public static SecondaryDataFlags None;
}
public class SharpDX.D3DCompiler.ShaderBytecode : object {
    public static ShaderFlags Effect10;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompressed>k__BackingField;
    public Byte[] Data { get; private set; }
    public bool IsCompressed { get; private set; }
    public ShaderBytecode(DataStream data);
    public ShaderBytecode(Stream data);
    public ShaderBytecode(Byte[] buffer);
    public ShaderBytecode(IntPtr buffer, int sizeInBytes);
    protected internal ShaderBytecode(Blob blob);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    public static CompilationResult Compile(string shaderSource, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, string sourceFileName, SecondaryDataFlags secondaryDataFlags, DataStream secondaryData);
    public static CompilationResult Compile(string shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, string sourceFileName, SecondaryDataFlags secondaryDataFlags, DataStream secondaryData);
    public static CompilationResult Compile(string shaderSource, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, ShaderMacro[] defines, Include include, string sourceFileName, SecondaryDataFlags secondaryDataFlags, DataStream secondaryData);
    public static CompilationResult Compile(Byte[] shaderSource, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, ShaderMacro[] defines, Include include, string sourceFileName, SecondaryDataFlags secondaryDataFlags, DataStream secondaryData);
    public static CompilationResult Compile(string shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, ShaderMacro[] defines, Include include, string sourceFileName, SecondaryDataFlags secondaryDataFlags, DataStream secondaryData);
    public static CompilationResult Compile(Byte[] shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, ShaderMacro[] defines, Include include, string sourceFileName, SecondaryDataFlags secondaryDataFlags, DataStream secondaryData);
    public static CompilationResult Compile(IntPtr textSource, int textSize, string entryPoint, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, ShaderMacro[] defines, Include include, string sourceFileName, SecondaryDataFlags secondaryDataFlags, DataStream secondaryData);
    public static CompilationResult Compile(Byte[] shaderSource, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, string sourceFileName);
    public static CompilationResult Compile(Byte[] shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, string sourceFileName);
    public static CompilationResult CompileFromFile(string fileName, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, ShaderMacro[] defines, Include include);
    public static CompilationResult CompileFromFile(string fileName, string entryPoint, string profile, ShaderFlags shaderFlags, EffectFlags effectFlags, ShaderMacro[] defines, Include include);
    [CompilerGeneratedAttribute]
public bool get_IsCompressed();
    [CompilerGeneratedAttribute]
private void set_IsCompressed(bool value);
    public string Disassemble();
    public string Disassemble(DisassemblyFlags flags);
    public string Disassemble(DisassemblyFlags flags, string comments);
    public string DisassembleRegion(DisassemblyFlags flags, string comments, PointerSize startByteOffset, PointerSize numberOfInstructions, PointerSize& finishByteOffsetRef);
    public PointerSize GetTraceInstructionOffsets(bool isIncludingNonExecutableCode, PointerSize startInstIndex, PointerSize numInsts, PointerSize& totalInstsRef);
    public ShaderBytecode GetPart(ShaderBytecodePart part);
    public ShaderBytecode SetPart(ShaderBytecodePart part, DataStream partData);
    public static ShaderBytecode Load(Stream stream);
    public void Save(Stream stream);
    public static string Preprocess(string shaderSource, ShaderMacro[] defines, Include include, string sourceFileName);
    public static string Preprocess(Byte[] shaderSource, ShaderMacro[] defines, Include include, string sourceFileName);
    public static string Preprocess(Byte[] shaderSource, ShaderMacro[] defines, Include include, String& compilationErrors, string sourceFileName);
    public static string Preprocess(IntPtr shaderSourcePtr, int shaderSourceLength, ShaderMacro[] defines, Include include, String& compilationErrors, string sourceFileName);
    public static string Preprocess(string shaderSource, ShaderMacro[] defines, Include include, String& compilationErrors, string sourceFileName);
    public static string PreprocessFromFile(string fileName);
    public static string PreprocessFromFile(string fileName, ShaderMacro[] defines, Include include);
    public static string PreprocessFromFile(string fileName, ShaderMacro[] defines, Include include, String& compilationErrors);
    public ShaderBytecode Strip(StripFlags flags);
    public static Byte[] op_Implicit(ShaderBytecode shaderBytecode);
    public static ShaderBytecode FromStream(Stream stream);
    public static ShaderBytecode FromFile(string fileName);
    internal static ShaderMacro[] PrepareMacros(ShaderMacro[] macros);
    public sealed virtual void Dispose();
    public ShaderProfile GetVersion();
    private static int DecodeValue(int token, int start, int end);
}
public enum SharpDX.D3DCompiler.ShaderBytecodePart : Enum {
    public int value__;
    public static ShaderBytecodePart InputSignatureBlob;
    public static ShaderBytecodePart OutputSignatureBlob;
    public static ShaderBytecodePart InputAndOutputSignatureBlob;
    public static ShaderBytecodePart PatchConstantSignatureBlob;
    public static ShaderBytecodePart AllSignatureBlob;
    public static ShaderBytecodePart DebugInformation;
    public static ShaderBytecodePart LegacyShader;
    public static ShaderBytecodePart XnaPrepassShader;
    public static ShaderBytecodePart XnaShader;
    public static ShaderBytecodePart Pdb;
    public static ShaderBytecodePart PrivateData;
    public static ShaderBytecodePart RootSignature;
    public static ShaderBytecodePart DebugName;
    public static ShaderBytecodePart TestAlternateShader;
    public static ShaderBytecodePart TestCompileDetails;
    public static ShaderBytecodePart TestCompilePerf;
    public static ShaderBytecodePart TestCompileReport;
}
internal class SharpDX.D3DCompiler.ShaderData : ValueType {
    public IntPtr BytecodePtr;
    public PointerSize BytecodeLength;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.D3DCompiler.ShaderDescription : ValueType {
    public int Version;
    public string Creator;
    public ShaderFlags Flags;
    public int ConstantBuffers;
    public int BoundResources;
    public int InputParameters;
    public int OutputParameters;
    public int InstructionCount;
    public int TempRegisterCount;
    public int TempArrayCount;
    public int DefineCount;
    public int DeclarationCount;
    public int TextureNormalInstructions;
    public int TextureLoadInstructions;
    public int TextureCompInstructions;
    public int TextureBiasInstructions;
    public int TextureGradientInstructions;
    public int FloatInstructionCount;
    public int IntInstructionCount;
    public int UintInstructionCount;
    public int StaticFlowControlCount;
    public int DynamicFlowControlCount;
    public int MacroInstructionCount;
    public int ArrayInstructionCount;
    public int CutInstructionCount;
    public int EmitInstructionCount;
    public PrimitiveTopology GeometryShaderOutputTopology;
    public int GeometryShaderMaxOutputVertexCount;
    public InputPrimitive InputPrimitive;
    public int PatchConstantParameters;
    public int GeometryShaderInstanceCount;
    public int ControlPoints;
    public TessellatorOutputPrimitive HullShaderOutputPrimitive;
    public TessellatorPartitioning HullShaderPartitioning;
    public TessellatorDomain TessellatorDomain;
    public int BarrierInstructions;
    public int InterlockedInstructions;
    public int TextureStoreInstructions;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.ShaderFlags : Enum {
    public int value__;
    public static ShaderFlags Debug;
    public static ShaderFlags SkipValidation;
    public static ShaderFlags SkipOptimization;
    public static ShaderFlags PackMatrixRowMajor;
    public static ShaderFlags PackMatrixColumnMajor;
    public static ShaderFlags PartialPrecision;
    public static ShaderFlags ForceVertexShaderSoftwareNoOptimization;
    public static ShaderFlags ForcePixelShaderSoftwareNoOptimization;
    public static ShaderFlags NoPreshader;
    public static ShaderFlags AvoidFlowControl;
    public static ShaderFlags PreferFlowControl;
    public static ShaderFlags EnableStrictness;
    public static ShaderFlags EnableBackwardsCompatibility;
    public static ShaderFlags IeeeStrictness;
    public static ShaderFlags OptimizationLevel0;
    public static ShaderFlags OptimizationLevel1;
    public static ShaderFlags OptimizationLevel2;
    public static ShaderFlags OptimizationLevel3;
    public static ShaderFlags Reserved16;
    public static ShaderFlags Reserved17;
    public static ShaderFlags WarningsAreErrors;
    public static ShaderFlags DebugNameForSource;
    public static ShaderFlags DebugNameForBinary;
    public static ShaderFlags None;
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.ShaderInputFlags : Enum {
    public int value__;
    public static ShaderInputFlags Userpacked;
    public static ShaderInputFlags ComparisonSampler;
    public static ShaderInputFlags TextureComponent0;
    public static ShaderInputFlags TextureComponent1;
    public static ShaderInputFlags TextureComponents;
    public static ShaderInputFlags Unused;
    public static ShaderInputFlags None;
}
public enum SharpDX.D3DCompiler.ShaderInputType : Enum {
    public int value__;
    public static ShaderInputType ConstantBuffer;
    public static ShaderInputType TextureBuffer;
    public static ShaderInputType Texture;
    public static ShaderInputType Sampler;
    public static ShaderInputType UnorderedAccessViewRWTyped;
    public static ShaderInputType Structured;
    public static ShaderInputType UnorderedAccessViewRWStructured;
    public static ShaderInputType ByteAddress;
    public static ShaderInputType UnorderedAccessViewRWByteAddress;
    public static ShaderInputType UnorderedAccessViewAppendStructured;
    public static ShaderInputType UnorderedAccessViewConsumeStructured;
    public static ShaderInputType UnorderedAccessViewRWStructuredWithCounter;
}
public class SharpDX.D3DCompiler.ShaderParameterDescription : ValueType {
    public string SemanticName;
    public int SemanticIndex;
    public int Register;
    public SystemValueType SystemValueType;
    public RegisterComponentType ComponentType;
    public RegisterComponentMaskFlags UsageMask;
    public RegisterComponentMaskFlags ReadWriteMask;
    public int Stream;
    public MinimumPrecision MinPrecision;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.D3DCompiler.ShaderProfile : ValueType {
    private static string shortStringFormat;
    private static string longStringFormat;
    public ShaderVersion Version;
    public int Major;
    public int Minor;
    public int ProfileMajor;
    public int ProfileMinor;
    public ShaderProfile(ShaderVersion version, int major, int minor, int profileMajor, int profileMinor);
    public virtual string ToString();
    public string GetTypePrefix();
    public FeatureLevel GetFeatureLevel();
}
[GuidAttribute("8d536ca1-0cca-4956-a837-786963755584")]
public class SharpDX.D3DCompiler.ShaderReflection : ComObject {
    public ShaderDescription Description { get; }
    public int MoveInstructionCount { get; }
    public int ConditionalMoveInstructionCount { get; }
    public int ConversionInstructionCount { get; }
    public int BitwiseInstructionCount { get; }
    public InputPrimitive GeometryShaderSInputPrimitive { get; }
    public RawBool IsSampleFrequencyShader { get; }
    public int InterfaceSlotCount { get; }
    public FeatureLevel MinFeatureLevel { get; }
    public ShaderRequiresFlags RequiresFlags { get; }
    public ShaderReflection(Byte[] shaderBytecode);
    public ShaderReflection(IntPtr nativePtr);
    public static ShaderReflection op_Explicit(IntPtr nativePtr);
    public ShaderDescription get_Description();
    public int get_MoveInstructionCount();
    public int get_ConditionalMoveInstructionCount();
    public int get_ConversionInstructionCount();
    public int get_BitwiseInstructionCount();
    public InputPrimitive get_GeometryShaderSInputPrimitive();
    public RawBool get_IsSampleFrequencyShader();
    public int get_InterfaceSlotCount();
    public FeatureLevel get_MinFeatureLevel();
    public ShaderRequiresFlags get_RequiresFlags();
    internal void GetDescription(ShaderDescription& descRef);
    public ConstantBuffer GetConstantBuffer(int index);
    public ConstantBuffer GetConstantBuffer(string name);
    public InputBindingDescription GetResourceBindingDescription(int resourceIndex);
    public ShaderParameterDescription GetInputParameterDescription(int parameterIndex);
    public ShaderParameterDescription GetOutputParameterDescription(int parameterIndex);
    public ShaderParameterDescription GetPatchConstantParameterDescription(int parameterIndex);
    public ShaderReflectionVariable GetVariable(string name);
    public InputBindingDescription GetResourceBindingDescription(string name);
    internal int GetMoveInstructionCount();
    internal int GetConditionalMoveInstructionCount();
    internal int GetConversionInstructionCount();
    internal int GetBitwiseInstructionCount();
    internal InputPrimitive GetGeometryShaderSInputPrimitive();
    internal RawBool IsSampleFrequencyShader_();
    internal int GetInterfaceSlotCount();
    internal void GetMinFeatureLevel(FeatureLevel& levelRef);
    public int GetThreadGroupSize(Int32& sizeXRef, Int32& sizeYRef, Int32& sizeZRef);
    internal ShaderRequiresFlags GetRequiresFlags();
}
[GuidAttribute("6E6FFA6A-9BAE-4613-A51E-91652D508C21")]
public class SharpDX.D3DCompiler.ShaderReflectionType : CppObject {
    public ShaderTypeDescription Description { get; }
    public ShaderReflectionType SubType { get; }
    public ShaderReflectionType BaseClass { get; }
    public int NumInterfaces { get; }
    public ShaderReflectionType(IntPtr nativePtr);
    public bool IsEqual(ShaderReflectionType typeRef);
    public bool IsOfType(ShaderReflectionType typeRef);
    public bool ImplementsInterface(ShaderReflectionType baseRef);
    public static ShaderReflectionType op_Explicit(IntPtr nativePtr);
    public ShaderTypeDescription get_Description();
    public ShaderReflectionType get_SubType();
    public ShaderReflectionType get_BaseClass();
    public int get_NumInterfaces();
    internal void GetDescription(ShaderTypeDescription& descRef);
    public ShaderReflectionType GetMemberType(int index);
    public ShaderReflectionType GetMemberType(string name);
    public string GetMemberTypeName(int index);
    internal Result IsEqual_(ShaderReflectionType typeRef);
    internal ShaderReflectionType GetSubType();
    internal ShaderReflectionType GetBaseClass();
    internal int GetNumInterfaces();
    public ShaderReflectionType GetInterface(int uIndex);
    internal Result IsOfType_(ShaderReflectionType typeRef);
    internal Result ImplementsInterface_(ShaderReflectionType baseRef);
}
[GuidAttribute("51F23923-F3E5-4BD1-91CB-606177D8DB4C")]
public class SharpDX.D3DCompiler.ShaderReflectionVariable : CppObject {
    public ShaderVariableDescription Description { get; }
    public ConstantBuffer Buffer { get; }
    public ShaderReflectionVariable(IntPtr nativePtr);
    public static ShaderReflectionVariable op_Explicit(IntPtr nativePtr);
    public ShaderVariableDescription get_Description();
    public ConstantBuffer get_Buffer();
    internal void GetDescription(ShaderVariableDescription& descRef);
    public ShaderReflectionType GetVariableType();
    internal ConstantBuffer GetBuffer();
    public int GetInterfaceSlot(int uArrayIndex);
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.ShaderRequiresFlags : Enum {
    public int value__;
    public static ShaderRequiresFlags ShaderRequiresDoubles;
    public static ShaderRequiresFlags ShaderRequiresEarlyDepthStencil;
    public static ShaderRequiresFlags ShaderRequiresUnorderedAccessViewsAtEveryStage;
    public static ShaderRequiresFlags ShaderRequires64UnorderedAccessViews;
    public static ShaderRequiresFlags ShaderRequiresMinimumPrecision;
    public static ShaderRequiresFlags ShaderRequires111DoubleExtensionS;
    public static ShaderRequiresFlags ShaderRequires111ShaderExtensionS;
    public static ShaderRequiresFlags ShaderRequiresLevel9ComparisonFiltering;
    public static ShaderRequiresFlags ShaderRequiresTiledResources;
    public static ShaderRequiresFlags ShaderRequiresStencilRef;
    public static ShaderRequiresFlags ShaderRequiresInnerCoverage;
    public static ShaderRequiresFlags ShaderRequiresTypedUnorderedAccessViewLoadAdditionalFormatS;
    public static ShaderRequiresFlags ShaderRequiresRovs;
    public static ShaderRequiresFlags ShaderRequiresViewportAndRtArrayIndexFromAnyShaderFeedingRasterizer;
    public static ShaderRequiresFlags None;
}
public class SharpDX.D3DCompiler.ShaderSignature : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; private set; }
    public ShaderSignature(IntPtr ptr, int size);
    public ShaderSignature(Blob blob);
    public ShaderSignature(DataStream data);
    public ShaderSignature(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    public static ShaderSignature GetInputOutputSignature(Byte[] shaderBytecode);
    public static ShaderSignature GetInputSignature(Byte[] shaderBytecode);
    public static ShaderSignature GetOutputSignature(Byte[] shaderBytecode);
    public static Byte[] op_Implicit(ShaderSignature shaderSignature);
    public sealed virtual void Dispose();
}
public class SharpDX.D3DCompiler.ShaderTypeDescription : ValueType {
    public ShaderVariableClass Class;
    public ShaderVariableType Type;
    public int RowCount;
    public int ColumnCount;
    public int ElementCount;
    public int MemberCount;
    public int Offset;
    public string Name;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.D3DCompiler.ShaderVariableClass : Enum {
    public int value__;
    public static ShaderVariableClass Scalar;
    public static ShaderVariableClass Vector;
    public static ShaderVariableClass MatrixRows;
    public static ShaderVariableClass MatrixColumns;
    public static ShaderVariableClass Object;
    public static ShaderVariableClass Struct;
    public static ShaderVariableClass InterfaceClass;
    public static ShaderVariableClass InterfacePointer;
}
public class SharpDX.D3DCompiler.ShaderVariableDescription : ValueType {
    public string Name;
    public int StartOffset;
    public int Size;
    public ShaderVariableFlags Flags;
    public IntPtr DefaultValue;
    public int StartTexture;
    public int TextureSize;
    public int StartSampler;
    public int SamplerSize;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.ShaderVariableFlags : Enum {
    public int value__;
    public static ShaderVariableFlags Userpacked;
    public static ShaderVariableFlags Used;
    public static ShaderVariableFlags InterfacePointer;
    public static ShaderVariableFlags InterfaceParameter;
    public static ShaderVariableFlags None;
}
public enum SharpDX.D3DCompiler.ShaderVariableType : Enum {
    public int value__;
    public static ShaderVariableType Void;
    public static ShaderVariableType Bool;
    public static ShaderVariableType Int;
    public static ShaderVariableType Float;
    public static ShaderVariableType String;
    public static ShaderVariableType Texture;
    public static ShaderVariableType Texture1D;
    public static ShaderVariableType Texture2D;
    public static ShaderVariableType Texture3D;
    public static ShaderVariableType TextureCube;
    public static ShaderVariableType Sampler;
    public static ShaderVariableType Sampler1D;
    public static ShaderVariableType Sampler2D;
    public static ShaderVariableType Sampler3D;
    public static ShaderVariableType SamplerCube;
    public static ShaderVariableType PixelShader;
    public static ShaderVariableType VertexShader;
    public static ShaderVariableType PixelFragment;
    public static ShaderVariableType VertexFragment;
    public static ShaderVariableType UInt;
    public static ShaderVariableType UInt8;
    public static ShaderVariableType GeometryShader;
    public static ShaderVariableType Rasterizer;
    public static ShaderVariableType DepthStencil;
    public static ShaderVariableType Blend;
    public static ShaderVariableType Buffer;
    public static ShaderVariableType ConstantBuffer;
    public static ShaderVariableType TextureBuffer;
    public static ShaderVariableType Texture1DArray;
    public static ShaderVariableType Texture2DArray;
    public static ShaderVariableType RenderTargetView;
    public static ShaderVariableType DepthStencilView;
    public static ShaderVariableType Texture2DMultisampled;
    public static ShaderVariableType Texture2DMultisampledArray;
    public static ShaderVariableType TextureCubeArray;
    public static ShaderVariableType HullShader;
    public static ShaderVariableType DomainShader;
    public static ShaderVariableType InterfacePointer;
    public static ShaderVariableType ComputeShader;
    public static ShaderVariableType Double;
    public static ShaderVariableType RWTexture1D;
    public static ShaderVariableType RWTexture1DArray;
    public static ShaderVariableType RWTexture2D;
    public static ShaderVariableType RWTexture2DArray;
    public static ShaderVariableType RWTexture3D;
    public static ShaderVariableType RWBuffer;
    public static ShaderVariableType ByteAddressBuffer;
    public static ShaderVariableType RWByteAddressBuffer;
    public static ShaderVariableType StructuredBuffer;
    public static ShaderVariableType RWStructuredBuffer;
    public static ShaderVariableType AppendStructuredBuffer;
    public static ShaderVariableType ConsumeStructuredBuffer;
    public static ShaderVariableType MinimumFloat8;
    public static ShaderVariableType MinimumFloat10;
    public static ShaderVariableType MinimumFloat16;
    public static ShaderVariableType MinimumInt12;
    public static ShaderVariableType MinimumInt16;
    public static ShaderVariableType MinimumUInt16;
}
public enum SharpDX.D3DCompiler.ShaderVersion : Enum {
    public int value__;
    public static ShaderVersion PixelShader;
    public static ShaderVersion VertexShader;
    public static ShaderVersion GeometryShader;
    public static ShaderVersion HullShader;
    public static ShaderVersion DomainShader;
    public static ShaderVersion ComputeShader;
    public static ShaderVersion Reserved0;
}
[FlagsAttribute]
public enum SharpDX.D3DCompiler.StripFlags : Enum {
    public int value__;
    public static StripFlags CompilerStripReflectionData;
    public static StripFlags CompilerStripDebugInformation;
    public static StripFlags CompilerStripTestBlobs;
    public static StripFlags CompilerStripPrivateData;
    public static StripFlags CompilerStripRootSignature;
    public static StripFlags None;
}
public enum SharpDX.D3DCompiler.SystemValueType : Enum {
    public int value__;
    public static SystemValueType Undefined;
    public static SystemValueType Position;
    public static SystemValueType ClipDistance;
    public static SystemValueType CullDistance;
    public static SystemValueType RenderTargetArrayIndex;
    public static SystemValueType ViewportArrayIndex;
    public static SystemValueType VertexId;
    public static SystemValueType PrimitiveId;
    public static SystemValueType InstanceId;
    public static SystemValueType IsFrontFace;
    public static SystemValueType SampleIndex;
    public static SystemValueType FinalQuadEdgeTessfactor;
    public static SystemValueType FinalQuadInsideTessfactor;
    public static SystemValueType FinalTriEdgeTessfactor;
    public static SystemValueType FinalTriInsideTessfactor;
    public static SystemValueType FinalLineDetailTessfactor;
    public static SystemValueType FinalLineDensityTessfactor;
    public static SystemValueType Barycentrics;
    public static SystemValueType Target;
    public static SystemValueType Depth;
    public static SystemValueType Coverage;
    public static SystemValueType DepthGreaterEqual;
    public static SystemValueType DepthLessEqual;
    public static SystemValueType StencilRef;
    public static SystemValueType InnerCoverage;
}
public enum SharpDX.D3DCompiler.TessellatorDomain : Enum {
    public int value__;
    public static TessellatorDomain Undefined;
    public static TessellatorDomain Isoline;
    public static TessellatorDomain Triangle;
    public static TessellatorDomain Quad;
}
public enum SharpDX.D3DCompiler.TessellatorOutputPrimitive : Enum {
    public int value__;
    public static TessellatorOutputPrimitive Undefined;
    public static TessellatorOutputPrimitive Point;
    public static TessellatorOutputPrimitive Line;
    public static TessellatorOutputPrimitive TriangleClockwise;
    public static TessellatorOutputPrimitive TriangleCounterclockwise;
}
public enum SharpDX.D3DCompiler.TessellatorPartitioning : Enum {
    public int value__;
    public static TessellatorPartitioning Undefined;
    public static TessellatorPartitioning Integer;
    public static TessellatorPartitioning PowerOfTwo;
    public static TessellatorPartitioning FractionalOdd;
    public static TessellatorPartitioning FractionalEven;
}
